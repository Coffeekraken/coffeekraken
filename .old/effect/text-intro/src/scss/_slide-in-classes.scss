/**
 * @name      slide-in-classes
 * @namespace       text-intro
 * @type        Mixin
 *
 * Provide the classes for the intro="slide-in-{direction}" intro
 * - `[intro="slide-in-up"]`
 * - `[intro="slide-in-right"]`
 * - `[intro="slide-in-bottom"]`
 * - `[intro="slide-in-left"]`
 * - `[intro="slide-in-{direction}"].active, [intro="slide-in-{direction}"][active]`
 * - `[intro-activator] [intro="slide-in-{direction}"], [intro-activator].active [intro="slide-in-{direction}"], [intro-activator][active] [intro="slide-in-{direction}"]`
 *
 * @param 	{Number} 	[$offset=50px] 							Specify the distance that the element is gonna slide
 * @param 	{List} 		[$directions=up right down left]		Specify the directions to generate the classes for
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
@mixin slide-in-classes(
	$offset : 50px,
	$directions : up right down left
) {
	@include slide-in-bare();
	@include slide-in-style($offset, $directions);
}


/**
 * @name      slide-in-bare
 * @namespace       text-intro
 * @type        Mixin
 *
 * Provide the bare styling for the anim="slide-in-{direction}" classes
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
*/
@mixin slide-in-bare() {
}

/**
 * @name      slide-in-style
 * @namespace       text-intro
 * @type        Mixin
 *
 * Provide the style styling for the anim="slide-in-{direction}" classes
 * - `[intro="slide-in-up"]`
 * - `[intro="slide-in-right"]`
 * - `[intro="slide-in-bottom"]`
 * - `[intro="slide-in-left"]`
 * - `[intro="slide-in-{direction}"].active, [intro="slide-in-{direction}"][active]`
 * - `[intro-activator] [intro="slide-in-{direction}"], [intro-activator].active [intro="slide-in-{direction}"], [intro-activator][active] [intro="slide-in-{direction}"]`
 *
 * @param 	{Number} 	[$offset=50px] 							Specify the distance that the element is gonna slide
 * @param 	{List} 		[$directions=up right down left]		Specify the directions to generate the classes for
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
@mixin slide-in-style(
	$offset : 50px,
	$directions : up right bottom left
) {
	$sels : ();
	@if index($directions, up) {
		$sels : append($sels, '[intro="slide-in-up"]', comma);
	}
	@if index($directions, right) {
		$sels : append($sels, '[intro="slide-in-right"]', comma);
	}
	@if index($directions, down) {
		$sels : append($sels, '[intro="slide-in-down"]', comma);
	}
	@if index($directions, left) {
		$sels : append($sels, '[intro="slide-in-left"]', comma);
	}

	#{$sels} {
    transform: translate(#{$offset * -1});
		opacity:0.001; // avoid 0 cause it will not bein detected by js otherwise
		transition: all 300ms cubic-bezier(1, 0.000, 0.000, 1) 0s;
		pointer-events: none;

		@if index($directions, right) {
			&[intro="slide-in-right"] {
        transform: translate(#{$offset * -1});
			}
		}
		@if index($directions, left) {
			&[intro="slide-in-left"] {
        transform: translate(#{$offset});
			}
		}
		@if index($directions, up) {
			&[intro="slide-in-up"] {
        transform: translate(0, #{$offset});
			}
		}
		@if index($directions, down) {
			&[intro="slide-in-down"] {
        transform: translate(0, #{$offset * -1});
			}
		}

		&.active,
		&[active] {
      transform: translate(0,0);
			opacity:1;
			pointer-events: all;
		}

		[intro-activator] & {
			opacity:0;
			pointer-events: none;

			@if index($directions, right) {
				&[intro="slide-in-right"] {
          transform: translate(#{$offset * -1});
				}
			}
			@if index($directions, left) {
				&[intro="slide-in-left"] {
          transform: translate(#{$offset});
				}
			}
			@if index($directions, up) {
				&[intro="slide-in-up"] {
          transform: translate(0, #{$offset});
				}
			}
			@if index($directions, down) {
				&[intro="slide-in-down"] {
          transform: translate(0, #{$offset * -1});
				}
			}
		}
		[intro-activator].active &,
		[intro-activator][active] & {
      transform: translate(0,0);
			opacity:1 !important;
			pointer-events: all !important;
		}
	}
}

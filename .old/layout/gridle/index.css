@charset "UTF-8";
/**
 * Internal variables
 */
/**
 * Import utils
 */
/**
 * Import the API
 */
/**
 * @name      custom-class
 * @namespace     gridle
 * @type      Mixin
 *
 * Generate custom class using gridle states
 *
 * @param       {String}    $classname      The classname to generate
 * @param       {List}      [$statesNames:states-names()]     The states to generate
 *
 * @example       scss
 * @include gridle.custom-class(
 *  my-cool-class,
 *  default tablet mobile
 * ) {
 *    background: red;
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/*
 * @name      state
 * @namespace     gridle
 * @type      Mixin
 *
 * Print some contents inside gridle states media queries
 *
 * @param 	string|map|list 	$states 		A list of states, a state name or a state map
 * @param 	boolean 			$has-parent 	Mostly always true, mean that the mixin is used in a css selector and not in css root level
 *
 * @example       scss
 * @include gridle.state(default mobile tablet) {
 *    background: red;
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Import functions
 */
/**
 * @name    states-count
 * @namespace     gridle.function
 * @type    Function
 *
 * Get states count
 *
 * @return 	{Integer} 	The number of states defined
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * @name  current-state
 * @namespace   gridle.function
 * @type      Function
 *
 * Get the current state map
 *
 * @return 		{Map} 	The current state map
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * @name      current-state-name
 * @namespace     gridle.function
 * @type      Function
 *
 * Get the current state name
 *
 * @return 		{String} 	The current state name
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/*
 * @name      state
 * @namespace     gridle.function
 * @type    Function
 *
 * Get a state map
 *
 * @param 	{String} 		[$state=current] 		The name of the state to get
 * @return 	{Map} 				A state map object
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * @name      has-state
 * @namespace     gridle.function
 * @type    Function
 *
 * Check if a state exist :
 *
 * @param 	{String} 		$name 		The name of the state to check
 * @return 	{Boolean} 					true if exist
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * @name      state-var
 * @namespace     gridle.function
 * @type      Function
 *
 * Get a state variable
 *
 * @param 	{String} 		$varName 								The variable name
 * @param  	{String} 		[$stateMap-or-stateName=current] 	 	The state name or a map state value
 * @return 	{Mixed} 												The finded value
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * @name      states
 * @namespace     gridle.function
 * @type      Function
 *
 * get the registered gridle states
 *
 * @return 	{Map} 		All the registered states
 *
 * @author 	Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * name       states-names
 * @namespace     gridle.function
 * @type    Function
 *
 * get the registered gridle states names
 *
 * @return 	{List} 		All the registered states names
 *
 * @author 	Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * @name      gutters
 * @namespace     gridle.function
 * @type    Function
 *
 * Return a multiple of the gutter-unit variable
 *
 * @param    {Number}    $miltiplicator    The multiplicator to use
 * @return    {String}    The calc representation of the multiplied value
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * @name      columns
 * @namespace     gridle.function
 * @type      Function
 *
 * Return a multiple of the column-unit variable
 *
 * @param    {Number}    $miltiplicator    The multiplicator to use
 * @return    {String}    The calc representation of the multiplied value
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * @name      columns-gutters
 * @namespace     gridle.function
 * @type    Function
 *
 * Return a multiple of the gutter AND column unit variables
 *
 * @param    {Number}    $miltiplicator    The multiplicator to use
 * @return    {String}    The calc representation of the multiplied value
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * @name    media-query
 * @namespace     gridle.function
 * @type    Function
 *
 * Get the media query for a particular state, or width, etc...
 *
 * @param 	{Mixed} 		[$stateName=current] 		The state name to generate the media query for
 * @return 	{String} 												The media query string without the @media
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * @name      process-selector
 * @namespace       gridle.function
 * @type      Function
 *
 * Process a selector by:
 * 1. replacing @default with ''
 *
 *Â @param    {String}    $selector    The selector to process
 * @return    {String}    The processed selector
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Import the generate mixins
 */
/**
 * @name      classes
 * @namespace     gridle
 * @type    Mixin
 *
 * Generate the classes
 *
 * @example     scss
 * @include gridle.classes();
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * Import the setup mixins
 */
/**
 * @name    setup
 * @namespace     gridle
 * @type    Mixin
 *
 * Setting up your grid
 *
 * @param 		{Map} 		$settings 		Your default grid settings
 *
 * @example 	scss
 * // default settings
 * $_gridle-settings : (
 *	name : default,
 *	min-width : null,
 *	max-width : null,
 *	query : null,
 *  columns: 12,
 *  rows: 12,
 *	column-width : 60,
 *  width: 1200,
 *  gutter-width: null,
 *  container-width: 90vw,
 *  container-max-width: 1200px
 * );
 *
 * // setting up your grid
 * \@include gridle.setup((
 * 	columns : 12
 * 	// other settings
 * ));
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * @name    register-state
 * @namespace     gridle
 * @type      Mixin
 *
 * Register a new state with some settings
 *
 * @param 		{String} 		$name 		The new state name
 * @param 		{Map} 			$settings 	The state settings
 *
 * @example 	scss
 * \@include g-register-state(mobile, (
 * 	max-width : 600px
 * ));
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/**
 * @name    register-mobile-first-states
 * @namespace     gridle
 * @type    Mixin
 *
 * Register some basics mobile first states:
 *
 * - tablet : 640px to infinite
 * - desktop : 992px to infinite
 * - large : 1200px to infinite
 *
 * @example 	scss
 * \@include gridle.register-mobile-first-states();
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
/*# sourceMappingURL=index.css.map */
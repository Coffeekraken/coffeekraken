{
    "Sugar.js.core.sNativeWebComponent": {
        "scope": "javascript",
        "prefix": "Sugar.js.core.sNativeWebComponent",
        "body": "Sugar.js.core.sNativeWebComponent()",
        "description": " Extend a native web element to create a new web component\n\nExample:\n\n import native from \"@coffeekraken/sugar/js/core/sNativeWebComponent\";\n export default class MyCoolComponent extends native(HTMLVideoElement) {\n    // your component integration...\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.core.SWebComponent": {
        "scope": "javascript",
        "prefix": "Sugar.js.core.SWebComponent",
        "body": "new Sugar.js.core.SWebComponent()",
        "description": " Base class that abstract a lot of dirty work in order to create nice and clean webcomponents.\n Features:\n - Listen for attributes changes\n - Mount the component at a certain point in time (inViewport, visible, etc...)\n - **Automatically cast the attributes** to their proper js variable types (Array, Object, String, etc...)\n - **Physical props** : Specify some props that will ALWAYS be present as attribute on the component for styling purpose\n - Define some **default CSS** that will be injected in the head automatically\n - Specify some **required props**\n - **Full lifecycle management**:\n \t- componentCreated\n \t- componentWillMount\n \t- componentMount\n \t- componentWillReceiveProp\n \t- componentWillReceiveProps\n \t- render\n \t- componentUnmount\n - **Mount dependencies** : This will allows you to set some promises that have to be resolved before mounting the component\n\nExample:\n\n import SWebComponent from '@coffeekraken/sugar/js/core/SWebComponent'\n class MyCoolComponent extends SWebComponent {\n\n\t\\\n \t * Default props\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.url.queryStringToObject": {
        "scope": "javascript",
        "prefix": "Sugar.js.url.queryStringToObject",
        "body": " Sugar.js.url.queryStringToObject($1)",
        "description": " Transform a query string into his object (key => pairs) representation\n\nExample:\n\n import queryStringToObject from '@coffeekraken/sugar/js/string/queryStringToObject'\n queryStringToObject('?var1=value1&var2=value2') // { var1: 'value1', var2: 'value2' }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.url.parseSchema": {
        "scope": "javascript",
        "prefix": "Sugar.js.url.parseSchema",
        "body": "Sugar.js.url.parseSchema()",
        "description": " This function take two arguments. The first one is the url to parse and the second is a schema to scan the url with.\n The schema describe the pathname of an url and tell's how to analyze it.\n Here's a little description with some example of schemas:\n - \"{param1}/{param2}/{param3}\": This schema describe that your Url must have 3 \"values\" named param1, param2 and param3\n    - If my Url is \"something.com/hello/world/plop\", my schema is respected and I can have access to the values through the \"schema.params.param1\", \"schema.params.param2\", etc...\n - \"{hello:string}/{world:number}/{?idx:number}\": This schema describe that the Url can have 3 \"values\" but the last one is optional\n    - If my Url is \"something.com/plop/3/1\", my schema is respected\n    - If my Url is \"something.com/plop/2\", my schema is respected\n    - If my Url is \"something.com/plop/hello/2\", my schema is not respected due to the fact that the param named \"world\" has to be a number\n\nExample:\n\n import parseSchema from '@coffeekraken/sugar/js/url/parseSchema';\n parseSchema('https://github.com/myApp/master/3', '{project:string}/{?branch:string}/{?idx:number}');\n // {\n //   match: true,\n //   errors: null,\n //   params: {\n //     project: {\n //       optional: false,\n //       raw: '{project:string}',\n //       type: 'string',\n //       value: 'myApp'\n //     },\n //     branch: {\n //       optional: true,\n //       raw: '{?branch:string},\n //       type: 'string',\n //       value: 'master'\n //     },\n //     idx: {\n //       optional: true,\n //       raw: '{?idx:number}',\n //       type: 'number',\n //       value: 3\n //     }\n //   }\n // }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.url.gravatarUrl": {
        "scope": "javascript",
        "prefix": "Sugar.js.url.gravatarUrl",
        "body": "Sugar.js.url.gravatarUrl()",
        "description": " Return a gravatar url depending on the passed user email and size\n\nExample:\n\n import gravatarUrl from '@coffeekraken/sugar/js/util/gravatarUrl';\n console.log(gravatarUrl('olivier.bossel@gmail.com')); // https://www.gravatar.com/avatar/b5df60055b6287bb7c90c0078ce20a5f\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.url.SUrl": {
        "scope": "javascript",
        "prefix": "Sugar.js.url.SUrl",
        "body": "new Sugar.js.url.SUrl()",
        "description": " Simple class that is useful to parse a URL (or the current browser URL) and gives you back\n an instance that has all these values availables as well as functions to modify the instancied URL:\n - protocol: The protocol scheme of the URL (e.g. http:).\n - slashes: A boolean which indicates whether the protocol is followed by two forward slashes (//).\n - auth: Authentication information portion (e.g. username:password).\n - username: Username of basic authentication.\n - password: Password of basic authentication.\n - host: Host name with port number.\n - hostname: Host name without port number.\n - port: Optional port number.\n - pathname: URL path.\n - query: Parsed object containing query string\n - queryString: Origin query string from the URL\n - hash: The \"fragment\" portion of the URL including the pound-sign (#).\n - href: The full URL.\n - origin: The origin of the URL.\n - schema: The schema property gives you access to an object containing these properties (only if you have provided the settings.schema setting):\n    - match (true) {Boolean}: Tells you if your current url match the passed schema\n    - errors (null) {Object}: Gives you access to which param(s) is/are in error\n    - params (null) {Object}: Gives you access to each params specified in the schema with their values, etc...\n\n This class use internally the `url-parse` npm module that you can find here: https://www.npmjs.com/package/url-parse\n\nExample:\n\n import SUrl from '@coffeekraken/js/url/SUrl';\n const url = new SUrl('https://github.com/foo/bar');\n console.log(url.hostname); // => github.com\n url.hostname = 'youtube.com';\n\n const urlWithSchema = new SUrl('https://github.com/hello/world/2', {\n    schema: '{param1:string}/{param2}/{?param3:number}'\n });\n console.log(urlWithSchema.schema);\n // {\n //    match: true,\n //    errors: {},\n // }\n\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.url.constructor": {
        "scope": "javascript",
        "prefix": "Sugar.js.url.constructor",
        "body": "Sugar.js.url.constructor()",
        "description": " Constructor\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.url.schema": {
        "scope": "javascript",
        "prefix": "Sugar.js.url.schema",
        "body": "Sugar.js.url.schema",
        "description": " Access the schema parsing result if the settings.schema has been provided.\n This object contain these properties:\n - params ({}) {Object}: Store the path params found like /{client}/{name}\n - errors ({}) {Object}: Store the parsing errors if has some\n - match (true) {Boolean}: Store if the current url match with the provided schema\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.url.protocol": {
        "scope": "javascript",
        "prefix": "Sugar.js.url.protocol",
        "body": "Sugar.js.url.protocol",
        "description": " Get/set the protocol\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.url.slashes": {
        "scope": "javascript",
        "prefix": "Sugar.js.url.slashes",
        "body": "Sugar.js.url.slashes",
        "description": " A boolean which indicates whether the protocol is followed by two forward slashes (//).\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.url.auth": {
        "scope": "javascript",
        "prefix": "Sugar.js.url.auth",
        "body": "Sugar.js.url.auth",
        "description": " Authentication information portion (e.g. username:password).\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.url.username": {
        "scope": "javascript",
        "prefix": "Sugar.js.url.username",
        "body": "Sugar.js.url.username",
        "description": " Get/set username of basic authentication\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.url.password": {
        "scope": "javascript",
        "prefix": "Sugar.js.url.password",
        "body": "Sugar.js.url.password",
        "description": " Get/set password of basic authentication\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.url.host": {
        "scope": "javascript",
        "prefix": "Sugar.js.url.host",
        "body": "Sugar.js.url.host",
        "description": " Get/set Host name with port number\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.url.hostname": {
        "scope": "javascript",
        "prefix": "Sugar.js.url.hostname",
        "body": "Sugar.js.url.hostname",
        "description": " Get/set host name without port number\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.url.port": {
        "scope": "javascript",
        "prefix": "Sugar.js.url.port",
        "body": "Sugar.js.url.port",
        "description": " Optional port number\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.url.pathname": {
        "scope": "javascript",
        "prefix": "Sugar.js.url.pathname",
        "body": "Sugar.js.url.pathname",
        "description": " URL path\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.url.pathnameArray": {
        "scope": "javascript",
        "prefix": "Sugar.js.url.pathnameArray",
        "body": "Sugar.js.url.pathnameArray",
        "description": " URL path in array format\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.url.query": {
        "scope": "javascript",
        "prefix": "Sugar.js.url.query",
        "body": "Sugar.js.url.query",
        "description": " Parsed object containing query string\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.url.queryString": {
        "scope": "javascript",
        "prefix": "Sugar.js.url.queryString",
        "body": "Sugar.js.url.queryString",
        "description": " Origin query string from the URL\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.url.hash": {
        "scope": "javascript",
        "prefix": "Sugar.js.url.hash",
        "body": "Sugar.js.url.hash",
        "description": " The \"fragment\" portion of the URL including the pound-sign (#)\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.url.href": {
        "scope": "javascript",
        "prefix": "Sugar.js.url.href",
        "body": "Sugar.js.url.href",
        "description": " The full URL\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.url.origin": {
        "scope": "javascript",
        "prefix": "Sugar.js.url.origin",
        "body": "Sugar.js.url.origin",
        "description": " The origin of the URL\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.url.toString": {
        "scope": "javascript",
        "prefix": "Sugar.js.url.toString",
        "body": "Sugar.js.url.toString()",
        "description": " Return the full URL in string format\n\nExample:\n\n console.log(myUrl.toString()); // => https://google.com\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.unit.rem2px": {
        "scope": "javascript",
        "prefix": "Sugar.js.unit.rem2px",
        "body": "Sugar.js.unit.rem2px()",
        "description": " Convert rem value to a px one\n\nExample:\n\n import rem2px from '@coffeekraken/sugar/js/unit/rem2px';\n rem2px(2);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.unit.px2rem": {
        "scope": "javascript",
        "prefix": "Sugar.js.unit.px2rem",
        "body": "Sugar.js.unit.px2rem()",
        "description": " Convert rem value to a px one\n\nExample:\n\n import px2rem from '@coffeekraken/sugar/js/unit/px2rem';\n px2rem(36);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.unit.px2em": {
        "scope": "javascript",
        "prefix": "Sugar.js.unit.px2em",
        "body": "Sugar.js.unit.px2em()",
        "description": " Convert rem value to a px one\n\nExample:\n\n import px2em from '@coffeekraken/sugar/js/unit/px2em';\n px2em(36);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.unit.em2px": {
        "scope": "javascript",
        "prefix": "Sugar.js.unit.em2px",
        "body": "Sugar.js.unit.em2px()",
        "description": " Convert rem value to a px one\n\nExample:\n\n import em2px from '@coffeekraken/sugar/js/unit/em2px';\n em2px(2);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.unit.convert": {
        "scope": "javascript",
        "prefix": "Sugar.js.unit.convert",
        "body": "Sugar.js.unit.convert()",
        "description": " Convert a passed unit to the wanted one. If the passed unit is a number and not a string like \"10rem\", the unit is take as pixels\n\nExample:\n\n import convert from '@coffeekraken/sugar/js/unit/convert';\n convert('2rem', 'px');\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.time.convert": {
        "scope": "javascript",
        "prefix": "Sugar.js.time.convert",
        "body": "Sugar.js.time.convert()",
        "description": " This function allows you to convert time like seconds, ms, hours, minutes, etc... from one format to another\n\nExample:\n\n import convert from '@coffeekraken/sugar/js/time/convert';\n convert('10s', 'ms'); // => 10000\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.time.STimer": {
        "scope": "javascript",
        "prefix": "Sugar.js.time.STimer",
        "body": "new Sugar.js.time.STimer()",
        "description": " Class that let you create and handle timer with ease.\n With this class you can set some callback function that will be\n called each x ms or tell that you want your callbacks to be called\n a certain number of time during the timer time.\n\nExample:\n\n const STimer = require('@coffeekraken/sugar/js/time/STimer');\n const myTimer = new STimer(2000, {\n \t\ttickCount : 5\n })\n myTimer.onTick((myTimer) => {\n \t\t// do something here...\n })\n myTimer.start()\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.time.tickInterval": {
        "scope": "javascript",
        "prefix": "Sugar.js.time.tickInterval",
        "body": "Sugar.js.time.tickInterval",
        "description": " Store the interval between ticks. If specified in number format, it will mean milliseconds.\n You can specify also the time by string like: '1s', '2m', '1h', etc...\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.time.tickCount": {
        "scope": "javascript",
        "prefix": "Sugar.js.time.tickCount",
        "body": "Sugar.js.time.tickCount",
        "description": " Set of get the tickCount\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.time.loop": {
        "scope": "javascript",
        "prefix": "Sugar.js.time.loop",
        "body": "Sugar.js.time.loop",
        "description": " Set if the timer has to loop\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.time.constructor": {
        "scope": "javascript",
        "prefix": "Sugar.js.time.constructor",
        "body": "Sugar.js.time.constructor()",
        "description": " Constructor\n\nExample:\n\n import STimer from '@coffeekraken/sugar/js/time/STimer';\n const timer = new STimer('2m');\n timer.onTick(() => {\n    // do something...\n });\n timer.start();\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.time.remaing": {
        "scope": "javascript",
        "prefix": "Sugar.js.time.remaing",
        "body": "Sugar.js.time.remaing",
        "description": " Get the remaining time in ms\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.time.duration": {
        "scope": "javascript",
        "prefix": "Sugar.js.time.duration",
        "body": "Sugar.js.time.duration",
        "description": " Set or get the duration. Can be a number in milliseconds, or a time string like '1m', '2s', etc...\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.time.onTick": {
        "scope": "javascript",
        "prefix": "Sugar.js.time.onTick",
        "body": "Sugar.js.time.onTick()",
        "description": " Register a function called on tick\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.time.onComplete": {
        "scope": "javascript",
        "prefix": "Sugar.js.time.onComplete",
        "body": "Sugar.js.time.onComplete()",
        "description": " Register a function called on complete\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.time.onPause": {
        "scope": "javascript",
        "prefix": "Sugar.js.time.onPause",
        "body": "Sugar.js.time.onPause()",
        "description": " Register a function called on pause\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.time.onStart": {
        "scope": "javascript",
        "prefix": "Sugar.js.time.onStart",
        "body": "Sugar.js.time.onStart()",
        "description": " Register a function called on start\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.time.onReset": {
        "scope": "javascript",
        "prefix": "Sugar.js.time.onReset",
        "body": "Sugar.js.time.onReset()",
        "description": " Register a function called on reset\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.time.onStop": {
        "scope": "javascript",
        "prefix": "Sugar.js.time.onStop",
        "body": "Sugar.js.time.onStop()",
        "description": " Register a function called on stop\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.time.onChangeDuration": {
        "scope": "javascript",
        "prefix": "Sugar.js.time.onChangeDuration",
        "body": "Sugar.js.time.onChangeDuration()",
        "description": " Register a function called on duration change\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.time.onChangeTickCount": {
        "scope": "javascript",
        "prefix": "Sugar.js.time.onChangeTickCount",
        "body": "Sugar.js.time.onChangeTickCount()",
        "description": " Register a function called on tick counts change\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.time.onDestroy": {
        "scope": "javascript",
        "prefix": "Sugar.js.time.onDestroy",
        "body": "Sugar.js.time.onDestroy()",
        "description": " Register a function called on destroy\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.time.reset": {
        "scope": "javascript",
        "prefix": "Sugar.js.time.reset",
        "body": "Sugar.js.time.reset()",
        "description": " Reset the timer\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.time.start": {
        "scope": "javascript",
        "prefix": "Sugar.js.time.start",
        "body": "Sugar.js.time.start()",
        "description": " Start the timer\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.time.pause": {
        "scope": "javascript",
        "prefix": "Sugar.js.time.pause",
        "body": "Sugar.js.time.pause()",
        "description": " Pause the timer\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.time.stop": {
        "scope": "javascript",
        "prefix": "Sugar.js.time.stop",
        "body": "Sugar.js.time.stop()",
        "description": " Stop the timer\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.time.destroy": {
        "scope": "javascript",
        "prefix": "Sugar.js.time.destroy",
        "body": "Sugar.js.time.destroy()",
        "description": " Destroy the timer\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.time.isStarted": {
        "scope": "javascript",
        "prefix": "Sugar.js.time.isStarted",
        "body": "Sugar.js.time.isStarted",
        "description": " Check if the timer is started\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.string.upperFirst": {
        "scope": "javascript",
        "prefix": "Sugar.js.string.upperFirst",
        "body": "Sugar.js.string.upperFirst()",
        "description": " Upper first\n\nExample:\n\n import upperFirst from '@coffeekraken/sugar/js/string/upperFirst'\n upperFirst('hello world') // Hello world\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.string.unquote": {
        "scope": "javascript",
        "prefix": "Sugar.js.string.unquote",
        "body": "Sugar.js.string.unquote()",
        "description": " Remove the quotes of a string\n Types of quotes removed :\n - `\"`, `'`, `”`, '`'\n\nExample:\n\n import unquote from '@coffeekraken/sugar/js/string/unquote'\n unquote(\"'Hello world'\") // \"Hello world\"\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.string.uniqid": {
        "scope": "javascript",
        "prefix": "Sugar.js.string.uniqid",
        "body": "Sugar.js.string.uniqid()",
        "description": " Generate a uniqid string of 8 bytes. Work using the [uniqid](https://www.npmjs.com/package/uniqid) npm package under the hood.\n\nExample:\n\n import uniqid from '@coffeekraken/sugar/js/string/uniqid';\n console.log(uniqid()); // => 4n5pxq24\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.string.uncamelize": {
        "scope": "javascript",
        "prefix": "Sugar.js.string.uncamelize",
        "body": "Sugar.js.string.uncamelize()",
        "description": " Uncamelize a string\n\nExample:\n\n import uncamelize from '@coffeekraken/sugar/js/string/uncamelize'\n uncamelize('helloWorldAndUniverse') // hello-world-and-universe\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.string.toString": {
        "scope": "javascript",
        "prefix": "Sugar.js.string.toString",
        "body": "Sugar.js.string.toString()",
        "description": " Convert passed value to a string\n\nExample:\n\n import toString from '@coffeekraken/sugar/js/string/toString'\n toString({\n \tid:'hello'\n }) // '{\"id\":\"hello\"}'\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.string.sprintf": {
        "scope": "javascript",
        "prefix": "Sugar.js.string.sprintf",
        "body": "Sugar.js.string.sprintf()",
        "description": " Javascript implementation of the sprintf php function.\n >For more infos, check [this github repository](https://github.com/alexei/sprintf.js)\n\nExample:\n\n import sprintf from '@coffeekraken/sugar/js/string/sprintf'\n sprintf('Hello %s', 'world') // Hello World\n const user = { name: 'Dolly' }\n sprintf('Hello %(name)s', user) // Hello Dolly\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.string.splitEvery": {
        "scope": "javascript",
        "prefix": "Sugar.js.string.splitEvery",
        "body": "Sugar.js.string.splitEvery()",
        "description": " Split a string every n chars either by taking care of not spliting the words, or by simply spliting without any attention to that...\n\nExample:\n\n const splitEvery = require('@coffeekraken/node/string/splitEvery');\n splitEvery('Hello World', 2, true); // => ['He','ll','o ','Wo','rl','d']\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.string.rtrim": {
        "scope": "javascript",
        "prefix": "Sugar.js.string.rtrim",
        "body": "Sugar.js.string.rtrim()",
        "description": " Trim right a specified string\n\nExample:\n\n import rtrim from '@coffeekraken/sugar/js/string/rtrim'\n rtrim('Hello World', 'ld') // Hello Wor\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.string.printf": {
        "scope": "javascript",
        "prefix": "Sugar.js.string.printf",
        "body": "Sugar.js.string.printf()",
        "description": " printf php equavalent\n\nExample:\n\n import printf from '@coffeekraken/sugar/js/string/printf';\n printf('Hello %s', 'world'); // => Hello world\n printf('Hello %s, I\\'m %s', 'world', 'John Doe'); // Hello world, I'm John Doe\n printf('Hello %(first)s, I\\'m %(name)s', { first : 'world', name : 'John Doe'}); // Hello world, I'm John Doe\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.string.parse": {
        "scope": "javascript",
        "prefix": "Sugar.js.string.parse",
        "body": "Sugar.js.string.parse()",
        "description": " Parse a string and convert it into his native data type like date, number, boolean, etc...\n\nExample:\n\n import parse from '@coffeekraken/sugar/js/string/parse';\n parse('10'); // => 10\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.string.ltrim": {
        "scope": "javascript",
        "prefix": "Sugar.js.string.ltrim",
        "body": "Sugar.js.string.ltrim()",
        "description": " Trim left a specified string\n\nExample:\n\n import ltrim from '@coffeekraken/sugar/js/string/ltrim'\n ltrim('Hello World', 'Hello') // World\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.string.lowerFirst": {
        "scope": "javascript",
        "prefix": "Sugar.js.string.lowerFirst",
        "body": "Sugar.js.string.lowerFirst()",
        "description": " Lower first letter\n\nExample:\n\n import lowerFirst from '@coffeekraken/sugar/js/string/lowerFirst'\n lowerFirst('Hello world') // hello world\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.string.crop": {
        "scope": "javascript",
        "prefix": "Sugar.js.string.crop",
        "body": "Sugar.js.string.crop()",
        "description": " Allows you to crop a string at a certain length (this length take care of the croping characters like \"...\")\n\nExample:\n\n import crop from '@coffeekraken/sugar/js/string/crop';\n crop('Hello World', 10); // => Hello w...\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.string.countLine": {
        "scope": "javascript",
        "prefix": "Sugar.js.string.countLine",
        "body": "Sugar.js.string.countLine()",
        "description": " Count how many characters their is in the passed line.\n This function will exclude the characters like the html tags like <red>, etc...\n\nExample:\n\n const countLine = require('@coffeekraken/sugar/js/string/countLine');\n countLine('Hello <red>World</red>'); // 11\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.string.camelize": {
        "scope": "javascript",
        "prefix": "Sugar.js.string.camelize",
        "body": "Sugar.js.string.camelize()",
        "description": " Camelize a string\n\nExample:\n\n import camelize from '@coffeekraken/sugar/js/string/camelize';\n camelize('hello world'); // => helloWorld\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.string.autoCast": {
        "scope": "javascript",
        "prefix": "Sugar.js.string.autoCast",
        "body": "Sugar.js.string.autoCast()",
        "description": " Auto cast the string into the correct variable type\n\nExample:\n\n import autoCast from '@coffeekraken/sugar/js/strings/autoCast'\n autoCast('12') // => 12\n autoCast('window.HTMLElement') // => HTMLElement\n autoCast('{\"hello\":\"world\"}') // {hello:'world'}\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.promise.SPromise": {
        "scope": "javascript",
        "prefix": "Sugar.js.promise.SPromise",
        "body": "new Sugar.js.promise.SPromise()",
        "description": " This class works the same as the default Promise one. The difference is that you have more control on this one like\n the possibility to resolve it multiple times. Here's a list of the \"differences\" and the \"features\" that this class provide:\n\n - Pass the normal \"resolve\" and \"reject\" function to the passed executor\n - Pass a new function to the passed executor called \"trigger\" that let you launch your registered callbacks like \"then\", \"catch\", etc... but without resolving the master promise. Here's some examples:\n    - new SPromise((resolve, reject, trigger, cancel) => { trigger('then', 'myCoolValue'); }).then(value => { ... });\n    - new SPromise((resolve, reject, trigger, cancel) => { trigger('then,catch', 'myCoolValue') }).then(value => { ... });\n - Pass a new function to the passed executor called \"cancel\" that let you stop/cancel the promise execution without triggering your registered callbacks unless the \"cancel\" once...\n - Expose the normal \"then\" and \"catch\" methods to register your callbacks\n - Expose some new callbacks registration functions described here:\n    - Expose a method called \"resolved\" that let you register callbacks called only when the \"resolve\" function has been called\n    - Expose a method called \"rejected\" that let you register callbacks called only when the \"reject\" function has been called\n    - Expose a method called \"finally\" that let you register callbacks called when the \"resolve\" or \"reject\" function has been called\n    - Expose a method called \"cancel\" that let you register callbacks called only when the \"cancel\" function has been called\n - Every callbacks registration methods accept as first argument the number of time that your callback will be called at max. Here's some examples:\n    - new SPromise((...)).then(value => { // do something... }).catch(error => { // do something... }).start();\n    - new SPromise((...)).then(1, value => { // do something... }).catch(3, error => { // do something... }).start();\n - Expose a method called \"on\" that can be used to register callbacks the same as the \"then\", \"catch\", etc... methods but you can register a same callback function to multiple callbacks type at once:\n    - new SPromise((...)).on('then', value => { ... }).on('then,catch', value => { ... }).start();\n    - Specify the max number of time to call your callback function like so: new SPromise((...)).on('then:2', value => { ... }).on('then:1,catch', value => { ... }).start();\n - A new method called \"start\" is exposed. This method is useful when you absolutely need that your executor function is launched right after the callbacks registrations.\n    - If you don't call the \"start\" method, the executor function passed to the SPromise constructor will be called on the next javascript execution loop\n - Support the Promises chaining through the callbacks like to:\n    ```js\n      const result = await new SPromise((resolve, reject, trigger, cancel) => {\n        resolve('hello');\n      }).then(value => {\n        return new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(value + 'World');\n          }, 1000);\n        });\n      }).then(value => {\n        return value + 'Promise';\n      }).start();\n      console.log(result); // => helloWorldPromise\n    ```\n\nExample:\n\n import SPromise from '@coffeekraken/sugar/js/promise/SPromise';\n function myCoolFunction() {\n    return new SPromise((resolve, reject, trigger, cancel) => {\n        // do something...\n        setInterval(() => {\n            // resolve the promise\n            resolve('something'); *\n        }, 1000);\n    });\n }\n\n // calling the function and get back the SPromise instance\n myCoolFunction().then(value => {\n    // do something here...\n }).then(1, value => {\n    // do something just once...\n }).catch(error => {\n    // do something with the returned reason of failure...\n }).start();\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.promise.constructor": {
        "scope": "javascript",
        "prefix": "Sugar.js.promise.constructor",
        "body": "Sugar.js.promise.constructor()",
        "description": " Constructor\n\nExample:\n\n const promise = new SPromise((resolve, reject, trigger, cancel) => {\n    // do something...\n }).then(value => {\n    // do something...\n }).finally(value => {\n    // do something...\n }).start();\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.promise.trigger": {
        "scope": "javascript",
        "prefix": "Sugar.js.promise.trigger",
        "body": "Sugar.js.promise.trigger()",
        "description": " This is the method that allows you to trigger the callbacks like \"then\", \"catch\", \"finally\", etc... without actually resolving the Promise itself\n\nExample:\n\n new SPromise((resolve, reject, trigger, cancel) => {\n    trigger('then', 'hello world');\n    setTimeout(() => {\n      resolve('something');\n    }, 2000);\n }).then(value => {\n    // do something with one time \"hello world\", and one time \"something\"...\n }).start();\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.promise.on": {
        "scope": "javascript",
        "prefix": "Sugar.js.promise.on",
        "body": "Sugar.js.promise.on()",
        "description": " This method allows the SPromise user to register a function that will be called every time the \"resolve\" one is called in the executor\n The context of the callback will be the SPromise instance itself so you can call all the methods available like \"resolve\", \"release\", \"on\", etc using\n the \"this.resolve('something')\" statement. In an arrow function like \"(value) => { ... }\", the \"this\" keyword will be bound to the current context where you define\n your function. You can access to the SPromise instance through the last parameter like so \"(value, sPromiseInstance) => { ... }\".\n\nExample:\n\n new SPromise((resolve, reject, trigger, cancel) => {\n    // do something...\n    resolve('hello world');\n }).on('then', value => {\n    // do something with the value that is \"hello world\"\n }).on('catch:1', error => {\n    // do something that will be called only once\n }).start();\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.promise.then": {
        "scope": "javascript",
        "prefix": "Sugar.js.promise.then",
        "body": "Sugar.js.promise.then()",
        "description": " This method allows the SPromise user to register a function that will be called every time the \"resolve\" one is called in the executor\n The context of the callback will be the SPromise instance itself so you can call all the methods available like \"resolve\", \"then\", etc using\n the \"this.resolve('something')\" statement. In an arrow function like \"(value) => { ... }\", the \"this\" keyword will be bound to the current context where you define\n your function. You can access to the SPromise instance through the last parameter like so \"(value, sPromiseInstance) => { ... }\".\n\nExample:\n\n new SPromise((resolve, reject, trigger, cancel) => {\n    // do something...\n    resolve('hello world');\n }).then(value => {\n    // do something with the value that is \"hello world\"\n    return new Promise((resolve, reject) => {\n       setTimeout(() => resolve('hola'), 1000);\n    });\n }).then(2, value => {\n    // do something that will be executed only twice\n    // do something with the value passed \"hola\"\n }).start();\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.promise.catch": {
        "scope": "javascript",
        "prefix": "Sugar.js.promise.catch",
        "body": "Sugar.js.promise.catch()",
        "description": " This method allows the SPromise user to register a function that will be called every time the \"reject\" one is called in the executor\n The context of the callback will be the SPromise instance itself so you can call all the methods available like \"resolve\", \"then\", etc using\n the \"this.resolve('something')\" statement. In an arrow function like \"(value) => { ... }\", the \"this\" keyword will be bound to the current context where you define\n your function. You can access to the SPromise instance through the last parameter like so \"(value, sPromiseInstance) => { ... }\".\n\nExample:\n\n new SPromise((resolve, reject, trigger, cancel) => {\n    // do something...\n    reject('hello world');\n }).catch(value => {\n    // do something with the value that is \"hello world\"\n }).catch(1, value => {\n    // do something that will be executed only once\n }).start();\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.promise.finally": {
        "scope": "javascript",
        "prefix": "Sugar.js.promise.finally",
        "body": "Sugar.js.promise.finally()",
        "description": " This method allows the SPromise user to register a function that will be called every time the \"reject\" one is called in the executor\n The context of the callback will be the SPromise instance itself so you can call all the methods available like \"resolve\", \"then\", etc using\n the \"this.resolve('something')\" statement. In an arrow function like \"(value) => { ... }\", the \"this\" keyword will be bound to the current context where you define\n your function. You can access to the SPromise instance through the last parameter like so \"(value, sPromiseInstance) => { ... }\".\n\nExample:\n\n new SPromise((resolve, reject, trigger, cancel) => {\n    // do something...\n    resolve('hello world');\n }).finally(value => {\n    // do something with the value that is \"hello world\"\n }).start();\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.promise.resolved": {
        "scope": "javascript",
        "prefix": "Sugar.js.promise.resolved",
        "body": "Sugar.js.promise.resolved()",
        "description": " This method allows the SPromise user to register a function that will be called every time the \"reject\" one is called in the executor\n The context of the callback will be the SPromise instance itself so you can call all the methods available like \"resolve\", \"then\", etc using\n the \"this.resolve('something')\" statement. In an arrow function like \"(value) => { ... }\", the \"this\" keyword will be bound to the current context where you define\n your function. You can access to the SPromise instance through the last parameter like so \"(value, sPromiseInstance) => { ... }\".\n\nExample:\n\n new SPromise((resolve, reject, trigger, cancel) => {\n    // do something...\n    resolve('hello world');\n }).resolved(value => {\n    // do something with the value that is \"hello world\"\n }).start();\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.promise.rejected": {
        "scope": "javascript",
        "prefix": "Sugar.js.promise.rejected",
        "body": "Sugar.js.promise.rejected()",
        "description": " This method allows the SPromise user to register a function that will be called every time the \"reject\" one is called in the executor\n The context of the callback will be the SPromise instance itself so you can call all the methods available like \"resolve\", \"then\", etc using\n the \"this.resolve('something')\" statement. In an arrow function like \"(value) => { ... }\", the \"this\" keyword will be bound to the current context where you define\n your function. You can access to the SPromise instance through the last parameter like so \"(value, sPromiseInstance) => { ... }\".\n\nExample:\n\n new SPromise((resolve, reject, trigger, cancel) => {\n    // do something...\n    resolve('hello world');\n }).rejected(value => {\n    // do something with the value that is \"hello world\"\n }).start();\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.promise.cancel": {
        "scope": "javascript",
        "prefix": "Sugar.js.promise.cancel",
        "body": "Sugar.js.promise.cancel()",
        "description": " This method allows the SPromise user to register a function that will be called once when the \"revoke\" function has been called\n The context of the callback will be the SPromise instance itself so you can call all the methods available like \"resolve\", \"then\", etc using\n the \"this.resolve('something')\" statement. In an arrow function like \"(value) => { ... }\", the \"this\" keyword will be bound to the current context where you define\n your function. You can access to the SPromise instance through the last parameter like so \"(value, sPromiseInstance) => { ... }\".\n\nExample:\n\n new SPromise((resolve, reject, trigger, cancel) => {\n    // do something...\n    cancel('hello world');\n }).cancel(value => {\n    // do something with the value that is \"hello world\"\n }).start();\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.promise.start": {
        "scope": "javascript",
        "prefix": "Sugar.js.promise.start",
        "body": "Sugar.js.promise.start()",
        "description": " This method is useful when you want the executor function passed to the constructor to be called directly and not\n as usual during the next javascript execution loop.\n\nExample:\n\n new SPromise((resolve, reject, trigger, cancel) => {\n    // do something\n }).then(value => {\n    // do something\n }).start();\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.polyfill.queryselector-scope": {
        "scope": "javascript",
        "prefix": "Sugar.js.polyfill.queryselector-scope",
        "body": "Sugar.js.polyfill.queryselector-scope",
        "description": " Polyfill for the :scope value in the querySelector and querySelectorAll functions\n To use it, just require this file in your codebase\n\nExample:\n\n require('@coffeekraken/sugar/js/polyfill/queryselector-scope');\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.object.whenProperty": {
        "scope": "javascript",
        "prefix": "Sugar.js.object.whenProperty",
        "body": "Sugar.js.object.whenProperty()",
        "description": " Resolve a promise when the wanted property on the passed object exist or pass the check function provided\n\nExample:\n\n import whenProperty from '@coffeekraken/sugar/js/object/whenProperty'\n\n const myObj = {\n  \ttitle : 'Hello'\n };\n\n whenProperty(myObj, 'title').then((value) => {\n \t\t// the object has a title property now\n });\n\n // with a checkFn\n whenProperty(myObj, 'title', (newVal, oldVal) => {\n \t\t// when the property is 'Hello World'\n \t\treturn newVal === 'Hello World';\n }).then((value) => {\n \t\t// do something with your Hello World\n });\n\n setTimeout(() => {\n \t\t// this will resolve the promise\n \t\tmyObj.title = 'Hello World';\n },1000);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.object.watch": {
        "scope": "javascript",
        "prefix": "Sugar.js.object.watch",
        "body": "Sugar.js.object.watch()",
        "description": " This allows you to set a watch process on one or multiple properties of the object setted in the instance.\n The \"globs\" parameter has to be a simple glob pattern or an array of glob patterns.\n The only difference with basic glob is that you can replace the \"/\" with \".\" (optional).\n It uses under the hood the \"glob\" package that you can find here: https://www.npmjs.com/package/glob\n\nExample:\n\n myWatch.watch('**.*', {\n    set: (object, prop, value) => {\n      // do something\n    }\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.node.object.uid": {
        "scope": "javascript",
        "prefix": "Sugar.node.object.uid",
        "body": "Sugar.node.object.uid()",
        "description": " This function allows you to generate a uniqid based on the objects you pass as parameters.\n The uid is hashed into a SHA256 32bits string but you can specify it using the \"format\" parameter described above\n\nExample:\n\n const uid = require('@coffeekraken/sugar/node/object/uid');\n uid({ hello: 'world' }, { plop: 'coco' }); // => ijfw89uf98jhw9ef8whef87hw7e8q87wegfh78wgf87gw8fgw8e7fzghwz8efgw8fwzuheihgbweuzf\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.object.toQueryString": {
        "scope": "javascript",
        "prefix": "Sugar.js.object.toQueryString",
        "body": "Sugar.js.object.toQueryString()",
        "description": " Transform an object (key => pairs) to a query string like \"?var1=value1&var2\"\n\nExample:\n\n import toQueryString from '@coffeekraken/sugar/js/object/toQueryString'\n console.log(toQueryString({\n \tvalue1 : 'coco',\n \tvalue1 : 'plop'\n }));\n // => ?value1=coco&value2=plop\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.object.sort": {
        "scope": "javascript",
        "prefix": "Sugar.js.object.sort",
        "body": "Sugar.js.object.sort()",
        "description": " Sort an object properties the same way as the Array.sort do it\n\nExample:\n\n import sortObject from '@coffeekraken/sugar/js/object/sort';\n sortObject({\n    coco: { weight: 10 },\n    lolo: { weight: 2 },\n    plop: { weight: 5 }\n }, (a, b) => {\n   return a.weight - b.weight;\n });\n // {\n //   lolo: { weight: 2 },\n //   plop: { weight: 5 },\n //   coco: { weight: 10 }\n // }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.object.set": {
        "scope": "javascript",
        "prefix": "Sugar.js.object.set",
        "body": "Sugar.js.object.set()",
        "description": " Set an object value using a dotted object path like \"myObject.myProperty.myValue\" to set his position\n\nExample:\n\n import set from '@coffeekraken/sugar/js/object/set';\n set('myObject.cool.value', 'Hello world'); // => Hello world\n\n/"
    },
    "Sugar.js.object.propertyProxy": {
        "scope": "javascript",
        "prefix": "Sugar.js.object.propertyProxy",
        "body": "Sugar.js.object.propertyProxy()",
        "description": " Create a proxy for and object property.\n This gives you the possibility to process the data of the property\n when it is getted or setted.\n\nExample:\n\n import propertyProxy from '@coffeekraken/sugar/js/object/propertyProxy';\n const myObject = {\n \t\ttitle : 'World'\n };\n // create the proxy\n propertyProxy(myObject, 'title', {\n \t\tget : (value) => {\n \t\t\treturn `Hello ${value}`;\n \t\t},\n \t\tset : (value) => {\n \t\t\treturn `Youhou ${value}`;\n \t\t}\n });\n console.log(myObject.title) => 'Hello World';\n myObject.title = 'Universe';\n console.log(myObject.title) => 'Hello Youhou Universe';\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.object.map": {
        "scope": "javascript",
        "prefix": "Sugar.js.object.map",
        "body": "Sugar.js.object.map()",
        "description": " This is the same function as the \"Array.map\" but for objects. It will iterate over all the properties\n of the passed object and pass the value to your process function. It will then save the property\n with your processed value\n\nExample:\n\n import map from '@coffeekraken/sugar/js/object/map';\n const myObject = {\n    hello: 'world',\n    cat: 'Nelson'\n };\n map(myObject, (value, prop) => {\n    return prop === 'hello' ? 'universe' : value;\n });\n {\n    hello: 'universe',\n    cat: 'Nelson'\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.object.getKeyByValue": {
        "scope": "javascript",
        "prefix": "Sugar.js.object.getKeyByValue",
        "body": "Sugar.js.object.getKeyByValue()",
        "description": " Return the key that correspond to the passed value in the passed object\n\nExample:\n\n import getKeyByValue from '@coffeekraken/sugar/js/object/getKeyByValue';\n console.log(getKeyByValue({ hello: 'world' }, 'world')); // => hello\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.object.get": {
        "scope": "javascript",
        "prefix": "Sugar.js.object.get",
        "body": "Sugar.js.object.get()",
        "description": " Retreive an object value using a dotted path like \"myObject.myProperty.myValue\"\n\nExample:\n\n import get from '@coffeekraken/sugar/js/object/get';\n get('myObject.cool.value'); // => 'Hello world'\n\n/"
    },
    "Sugar.js.object.flatten": {
        "scope": "javascript",
        "prefix": "Sugar.js.object.flatten",
        "body": "Sugar.js.object.flatten()",
        "description": " Transform the passed multiple level object into a single level one\n\nExample:\n\n import flatten from '@coffeekraken/sugar/js/object/flatten';\n flatten({\n    hello: {\n      world: 'Coco'\n    }\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.object.filter": {
        "scope": "javascript",
        "prefix": "Sugar.js.object.filter",
        "body": "Sugar.js.object.filter()",
        "description": " Allow to filter an object using a function. It works the same as the filter method on the Array object type.\n The passed filter function will have as parameter each object properties and must return true or false depending if you want the\n passed property in the filtered object\n\nExample:\n\n import filter from '@coffeekraken/sugar/js/object/filter';\n filter({\n    coco: 'hello',\n    plop: true\n }, (item, name) => typeof item === 'string');\n // { coco: 'hello' }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.object.ensureExists": {
        "scope": "javascript",
        "prefix": "Sugar.js.object.ensureExists",
        "body": "Sugar.js.object.ensureExists()",
        "description": " Pass a string like \"my.cool.object\" and the value it has to be and this function will ensure that this deep object exist\n\nExample:\n\n import ensureExists from '@coffeekraken/sugar/js/object/ensureExists';\n const myObj = { hello: 'world' }«\n ensureExists(myObj, 'cool.object', {});\n // { hello: 'world', cool: { object: {} } }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.object.diff": {
        "scope": "javascript",
        "prefix": "Sugar.js.object.diff",
        "body": "Sugar.js.object.diff()",
        "description": " This function take two objects and return an object that contains only what has been changed between the two.\n This function is a simple wrapper around the nice object-diff package from Thomas Jensen that you can find here: https://www.npmjs.com/package/object-diff\n\nExample:\n\n import diff from '@coffeekraken/sugar/js/object/diff';\n const myObject1 = {\n    hello: 'world',\n    plop: 'yop'\n };\n const myObject2 = {\n    coco: 'plop',\n    hello: 'hey!',\n    plop: 'yop'\n };\n diff(myObject1, myObject2);\n {\n    coco: 'plop',\n    hello: 'hey!'\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.object.delete": {
        "scope": "javascript",
        "prefix": "Sugar.js.object.delete",
        "body": "Sugar.js.object.delete()",
        "description": " Delete an object property using a dotPath like \"something.else\"\n\nExample:\n\n import delete from '@coffeekraken/sugar/js/object/delete';\n const myObject = {\n    hello: 'world',\n    plop: 'yop'\n };\n delete(myObject, 'plop');\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.object.deepProxy": {
        "scope": "javascript",
        "prefix": "Sugar.js.object.deepProxy",
        "body": "Sugar.js.object.deepProxy()",
        "description": " This function allows you to add Proxy to an object in deep fashion.\n Normally the Proxy process only the level on which it has been added. Here we add Proxy to all the\n object levels and to new properties as well.\n\nExample:\n\n import deepProxy from '@coffeekraken/sugar/js/object/deepProxy';\n const a = deepProxy({\n    hello: 'world'\n }, {\n    set: (obj) => {\n      // do something with the update object\n    }\n });\n a.hello = 'coco';\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.object.deepMergeErase": {
        "scope": "javascript",
        "prefix": "Sugar.js.object.deepMergeErase",
        "body": "Sugar.js.object.deepMergeErase()",
        "description": " This function allows you to tell the deepMerge one to use ONLY the passed value as final value and to not merge it as normal...\n This seemd maybe a little bit weird but it will be more understandable in the example bellow...\n\nExample:\n\n import deepMerge from '@coffeekraken/sugar/node/object/deepMerge';\n import deepMergeErase from '@coffeekraken/sugar/node/object/deepMergeErase';\n const obj1 = {\n    value: {\n      hello: 'world',\n      coco: 'plop'\n    }\n };\n const obj2 = {\n    value: deepMergeErase({\n      yop: 'cool value'\n    })\n };\n deepMerge(obj1, obj2);\n {\n    value: {\n      yop: 'cool value'\n    }\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.object.deepMerge": {
        "scope": "javascript",
        "prefix": "Sugar.js.object.deepMerge",
        "body": "Sugar.js.object.deepMerge()",
        "description": " Deep merge one object with another and return the merged object result\n\nExample:\n\n import deepMerge from '@coffeekraken/sugar/node/object/deepMerge';\n deepMerge({a: {b: {c: 'c', d: 'd'}}}, {a: {b: {e: 'e', f: 'f'}}});\n // => { a: { b: { c: 'c', d: 'd', e: 'e', f: 'f' } } }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.object.constructorName": {
        "scope": "javascript",
        "prefix": "Sugar.js.object.constructorName",
        "body": "Sugar.js.object.constructorName()",
        "description": " Return the constructor name of the passed object\n\nExample:\n\n import constructorName from '@coffeekraken/sugar/js/object/constructorName';\n class MyCoolClass {\n \t\t// class implementation...\n }\n const myObj = new MyCoolClass();\n console.log(constructorName(myObj)); => MyCoolClass\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.object.SWatch": {
        "scope": "javascript",
        "prefix": "Sugar.js.object.SWatch",
        "body": "new Sugar.js.object.SWatch()",
        "description": " This class allows you to easily monitor some object properties and get the new and old value of it\n\nExample:\n\n // create the watcher instance\n const watcher = new SWatch();\n\n // object to watch\n let myObject = {\n \t\ttitle : 'Hello World'\n };\n\n // watch the object\n watcher.watch(myObject, 'title', (newVal, oldVal) => {\n  \t// do something when the title changes\n });\n\n // update the title\n myObject.title = 'Hello Universe';\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.object.constructor": {
        "scope": "javascript",
        "prefix": "Sugar.js.object.constructor",
        "body": "Sugar.js.object.constructor()",
        "description": " Constructor\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.object.unwatch": {
        "scope": "javascript",
        "prefix": "Sugar.js.object.unwatch",
        "body": "Sugar.js.object.unwatch()",
        "description": " Stop watching a watch process that you have created with the \"watch\" function\n\nExample:\n\n const watchId = myWatch.watch('**.*', {\n    // etc...\n });\n myWatch.unwatch(watchId);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.number.pad": {
        "scope": "javascript",
        "prefix": "Sugar.js.number.pad",
        "body": "Sugar.js.number.pad()",
        "description": " Pad a number n of x 0 or another passed character\n\nExample:\n\n import pad from '@coffeekraken/sugar/js/numbers/pad'\n pad(123, 4) // 0123\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.number.constrain": {
        "scope": "javascript",
        "prefix": "Sugar.js.number.constrain",
        "body": "Sugar.js.number.constrain()",
        "description": " Constrain a value between a min and a max value\n\nExample:\n\n import constrain from '@coffeekraken/sugar/js/numbers/constrain'\n constrain(100, 0, 50) // 50\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.warn.warn": {
        "scope": "javascript",
        "prefix": "Sugar.js.warn.warn",
        "body": "Sugar.js.warn.warn()",
        "description": " This function is a simple wrapper around the SLog class that let you use the warn features quickly\n\nExample:\n\n import warn from '@coffeekraken/sugar/js/log/warn';\n warn('Hello world');\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.log.log": {
        "scope": "javascript",
        "prefix": "Sugar.js.log.log",
        "body": "Sugar.js.log.log()",
        "description": " The main log method that log a normal message\n\nExample:\n\n await logger.log('Something cool');\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.info.info": {
        "scope": "javascript",
        "prefix": "Sugar.js.info.info",
        "body": "Sugar.js.info.info()",
        "description": " This function is a simple wrapper around the SLog class that let you use the info features quickly\n\nExample:\n\n import info from '@coffeekraken/sugar/js/log/info';\n info('Hello world');\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.log.htmlPresets.mail": {
        "scope": "javascript",
        "prefix": "Sugar.js.log.htmlPresets.mail",
        "body": "Sugar.js.log.htmlPresets.mail()",
        "description": " Replace all the \"log\" html tags like \"<red>\", \"<bold>\", etc... with the corresponding syntax for mail formating\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.log.htmlPresets.files": {
        "scope": "javascript",
        "prefix": "Sugar.js.log.htmlPresets.files",
        "body": "Sugar.js.log.htmlPresets.files()",
        "description": " Replace all the \"log\" html tags like \"<red>\", \"<bold>\", etc... with the corresponding syntax for the files\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.log.htmlPresets.console": {
        "scope": "javascript",
        "prefix": "Sugar.js.log.htmlPresets.console",
        "body": "Sugar.js.log.htmlPresets.console()",
        "description": " Replace all the \"log\" html tags like \"<red>\", \"<bold>\", etc... with the corresponding syntax for the terminal\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.error.error": {
        "scope": "javascript",
        "prefix": "Sugar.js.error.error",
        "body": "Sugar.js.error.error()",
        "description": " This function is a simple wrapper around the SLog class that let you use the error features quickly\n\nExample:\n\n import error from '@coffeekraken/sugar/js/log/error';\n error('Hello world');\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.debug.debug": {
        "scope": "javascript",
        "prefix": "Sugar.js.debug.debug",
        "body": "Sugar.js.debug.debug()",
        "description": " This function is a simple wrapper around the SLog class that let you use the debug features quickly\n\nExample:\n\n import debug from '@coffeekraken/sugar/js/log/debug';\n debug('Hello world');\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.log.SLogMailAdapter": {
        "scope": "javascript",
        "prefix": "Sugar.js.log.SLogMailAdapter",
        "body": "new Sugar.js.log.SLogMailAdapter()",
        "description": " This class allows you to log your messages, errors, etc... easily through some adapters that cover some targets like \"console\" of course,\n \"mail\", \"slack\", etc...\n\nExample:\n\n import SLog from '@coffeekraken/sugar/js/log/SLog';\n import SLogMailAdapter from '@coffeekraken/sugar/js/log/adapters/SLogMailAdapter';\n const logger = new SLog({\n    adapters: {\n      mail: new SLogMailAdapter()\n    }\n });\n logger.log('Something cool happend...');\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.log.constructor": {
        "scope": "javascript",
        "prefix": "Sugar.js.log.constructor",
        "body": "Sugar.js.log.constructor()",
        "description": " Constructor\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.log.SLogConsoleAdapter": {
        "scope": "javascript",
        "prefix": "Sugar.js.log.SLogConsoleAdapter",
        "body": "new Sugar.js.log.SLogConsoleAdapter()",
        "description": " This class allows you to log your messages, errors, etc... easily through some adapters that cover some targets like \"console\" of course,\n \"mail\", \"slack\", etc...\n\nExample:\n\n import SLog from '@coffeekraken/sugar/js/log/SLog';\n import SLogConsoleAdapter from '@coffeekraken/sugar/js/log/adapters/SLogConsoleAdapter';\n const logger = new SLog({\n    adapters: [\n      new SLogConsoleAdapter()\n    ]\n });\n logger.log('Something cool happend...');\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.log.SLog": {
        "scope": "javascript",
        "prefix": "Sugar.js.log.SLog",
        "body": "new Sugar.js.log.SLog()",
        "description": " This class allows you to log your messages, errors, etc... easily through some adapters that cover some targets like \"console\" of course,\n \"mail\", \"slack\", etc...\n\nExample:\n\n import SLog from '@coffeekraken/sugar/js/log/SLog';\n import SLogConsoleAdapter from '@coffeekraken/sugar/js/log/adapters/SLogConsoleAdapter';\n const logger = new SLog({\n    adapters: {\n      console: new SLogConsoleAdapter()\n    }\n });\n logger.log('Something cool happend...');\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.log.info": {
        "scope": "javascript",
        "prefix": "Sugar.js.log.info",
        "body": "Sugar.js.log.info()",
        "description": " The info method that log a message with the \"info\" level\n\nExample:\n\n await logger.info('Something cool');\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.log.warn": {
        "scope": "javascript",
        "prefix": "Sugar.js.log.warn",
        "body": "Sugar.js.log.warn()",
        "description": " The warn method that log a message with the \"warn\" level\n\nExample:\n\n await logger.warn('Something cool');\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.log.debug": {
        "scope": "javascript",
        "prefix": "Sugar.js.log.debug",
        "body": "Sugar.js.log.debug()",
        "description": " The debug method that log a message with the \"debug\" level\n\nExample:\n\n await logger.debug('Something cool');\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.log.error": {
        "scope": "javascript",
        "prefix": "Sugar.js.log.error",
        "body": "Sugar.js.log.error()",
        "description": " The error method that log a message with the \"error\" level\n\nExample:\n\n await logger.error('Something cool');\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.keyboard.hotkey": {
        "scope": "javascript",
        "prefix": "Sugar.js.keyboard.hotkey",
        "body": "Sugar.js.keyboard.hotkey()",
        "description": " Simple function to add a hotkey like \"ctrl+a\" and an handler function that will be called when the hotkey has been pressed\n The following keys are supported:\n - shift, option, alt, ctrl, control, command\n - backspace, tab, clear, enter, return, esc, escape, space, up, down, left, right, home, end, pageup, pagedown, del, delete\n - from f1 to f19\n - all the letters keys\n\n You can pass an option object to your hotkey function call. Here's the option object format:\n {\n    element: {HTMLElement}, // default: null\n    keyup: {Boolean}, // default: false\n    keydown: {Boolean}, // default: true\n    splitKey: {String} // default: '+'\n }\n\nExample:\n\n import hotkey from '@coffeekraken/sugar/js/keyboard/hotkey'\n const delete = hotkey('ctrl+a', (event, handler) => {\n    console.log('ctrl + a has been pressed');\n });\n // when you want to stop the listener\n delete();\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.isYyyymmddDate": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.isYyyymmddDate",
        "body": "Sugar.js.is.isYyyymmddDate()",
        "description": " Check if is a valid yyyy.mm.dd date\n This will match : yyyy.mm.dd | yyyy/mm/dd | yyyy-mm-dd | yyyy mm dd\n\nExample:\n\n import isYyyymmddDate from '@coffeekraken/sugar/js/is/yyyymmddDate'\n if (isYyyymmddDate('2018.12.25')) {\n     // do something cool\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.windows": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.windows",
        "body": "Sugar.js.is.windows()",
        "description": " Check if the app run on mac OS X or not\n\nExample:\n\n import isOsx from '@coffeekraken/sugar/js/is/windows';\n isWindows(); // => true\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.isUrl": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.isUrl",
        "body": "Sugar.js.is.isUrl()",
        "description": " Check if the passed value is a valid url\n\nExample:\n\n import isUrl from '@coffeekraken/sugar/js/is/url';\n isUrl('http://google.com') => true\n isUrl('ftp://web.coco.com:2222') => true\n isUrl('hello') => false\n/"
    },
    "Sugar.js.is.isUcBrowser": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.isUcBrowser",
        "body": "Sugar.js.is.isUcBrowser()",
        "description": " Detect if is the UC stock browser that is running the page\n\nExample:\n\n import isUcBrowser from '@coffeekraken/sugar/js/is/ucBrowser'\n if (isUcBrowser()) {\n   // do something\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.isTablet": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.isTablet",
        "body": "Sugar.js.is.isTablet()",
        "description": " Detect if is a tablet device\n\nExample:\n\n import isTablet from '@coffeekraken/sugar/js/is/tablet'\n if (isTablet()) {\n   // do something cool...\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.isString": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.isString",
        "body": "Sugar.js.is.isString()",
        "description": " Check if the passed value is a js String\n\nExample:\n\n import isString from '@coffeekraken/sugar/js/is/String'\n if (isString({}) {\n   // do something\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.isSamsumgBrowser": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.isSamsumgBrowser",
        "body": "Sugar.js.is.isSamsumgBrowser()",
        "description": " Detect if is the samsung stock browser that is running the page\n\nExample:\n\n import isSamsumgBrowser from '@coffeekraken/sugar/js/is/samsungBrowser'\n if (isSamsumgBrowser()) {\n   // do something\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.isSafari": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.isSafari",
        "body": "Sugar.js.is.isSafari()",
        "description": " Detect if is safari\n\nExample:\n\n import isSafari from '@coffeekraken/sugar/js/is/safari'\n if (isSafari()) {\n   // do something cool\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.isRegexp": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.isRegexp",
        "body": "Sugar.js.is.isRegexp()",
        "description": " Check if the passed value is a js Regexp\n\nExample:\n\n import isRegexp from '@coffeekraken/sugar/js/is/regexp'\n if (isRegexp(/^hello$/g) {\n   // do something\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.plainObject": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.plainObject",
        "body": "Sugar.js.is.plainObject()",
        "description": " Check if the passed object (or array of objects) is/are plain object(s)\n\nExample:\n\n const isPlainObject = require('@coffeekraken/sugar/js/is/plainObject');\n isPlainObject({ hello: 'world'}); // => true\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.isPhone": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.isPhone",
        "body": "Sugar.js.is.isPhone()",
        "description": " Detect if is a phone device\n\nExample:\n\n import isPhone from '@coffeekraken/sugar/js/is/phone'\n if (isPhone()) {\n   // do something cool...\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.node.is.path": {
        "scope": "javascript",
        "prefix": "Sugar.node.is.path",
        "body": "Sugar.node.is.path()",
        "description": " Check if the passed string is a valid path or not\n\nExample:\n\n import isPath from '@coffeekraken/sugar/js/is/path';\n isPath('hello/world'); // => true\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.osx": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.osx",
        "body": "Sugar.js.is.osx()",
        "description": " Check if the app run on mac OS X or not\n\nExample:\n\n import isOsx from '@coffeekraken/sugar/js/is/osx';\n isOsx(); // => true\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.isOpera": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.isOpera",
        "body": "Sugar.js.is.isOpera()",
        "description": " Detect if is opera\n\nExample:\n\n import isOpera from '@coffeekraken/sugar/js/is/opera'\n if (isOpera()) {\n   // do something cool\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.isOdd": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.isOdd",
        "body": "Sugar.js.is.isOdd()",
        "description": " Check if a number is odd or not\n\nExample:\n\n import isOdd from '@coffeekraken/sugar/js/is/odd'\n isOdd(1) // true\n isOdd(2) // false\n/"
    },
    "Sugar.js.is.isObject": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.isObject",
        "body": "Sugar.js.is.isObject()",
        "description": " Check if the passed value is a js object\n\nExample:\n\n import isObject from '@coffeekraken/sugar/js/is/object'\n if (isObject({}) {\n   // do something\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.isNumber": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.isNumber",
        "body": "Sugar.js.is.isNumber()",
        "description": " Check if the passed value is a number\n\nExample:\n\n import isNumber from '@coffeekraken/sugar/js/is/number';\n isNumber(12) => true\n isNumber(22.3) => true\n isNumber('20') => false\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.isNode": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.isNode",
        "body": "Sugar.js.is.isNode()",
        "description": " Check if the current script is running under node runtime or not...\n\nExample:\n\n import isNode from '@coffeekraken/sugar/js/is/node';\n isNode(); // => true\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.isMobile": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.isMobile",
        "body": "Sugar.js.is.isMobile()",
        "description": " Detect if is a mobile device (phone or tablet)\n\nExample:\n\n import isMobile from 'coffeekraken-sugar/js/is/mobile'\n if (isMobile()) {\n   // do something cool...\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.isMmddyyyyDate": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.isMmddyyyyDate",
        "body": "Sugar.js.is.isMmddyyyyDate()",
        "description": " Check if is a valid mm.dd.yyyy date\n This will match : mm.dd.yyyy | mm/dd/yyyy | mm-dd-yyyy | mm dd yyyy\n\nExample:\n\n import isMmddyyyyDate from '@coffeekraken/sugar/js/is/mmddyyyyDate'\n if (isMmddyyyyDate('12.25.2018')) {\n     // do something cool\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.linux": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.linux",
        "body": "Sugar.js.is.linux()",
        "description": " Check if the app run on linux\n\nExample:\n\n import isLinux from '@coffeekraken/sugar/js/is/linux';\n isLinux(); // => true\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.isJson": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.isJson",
        "body": "Sugar.js.is.isJson()",
        "description": " Check if the passed value is a valid json\n\nExample:\n\n import isJson from '@coffeekraken/sugar/js/is/json'\n if (isJson('[{id:10}]')) {\n   // do something\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.isJs": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.isJs",
        "body": "Sugar.js.is.isJs()",
        "description": " Check if the current script is running under javascript runtime or not...\n\nExample:\n\n import isJs from '@coffeekraken/sugar/js/is/js';\n isJs(); // => true\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.isInteger": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.isInteger",
        "body": "Sugar.js.is.isInteger()",
        "description": " Check if the passed value is an integer\n\nExample:\n\n import isInteger from '@coffeekraken/sugar/js/is/integer';\n isInteger(10) => true\n isInteger('hello') => false\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.isIe": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.isIe",
        "body": "Sugar.js.is.isIe()",
        "description": " Detect if is ie (internet explorer)\n\nExample:\n\n import isIe from '@coffeekraken/sugar/js/is/ie'\n if (isIe()) {\n   // do something cool\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.isFunction": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.isFunction",
        "body": "Sugar.js.is.isFunction()",
        "description": " Check if the passed value is a js function\n\nExample:\n\n import isFunction from '@coffeekraken/sugar/js/is/function'\n if (isFunction(function() {})) {\n   // do something\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.isFirefox": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.isFirefox",
        "body": "Sugar.js.is.isFirefox()",
        "description": " Detect if is firefox\n\nExample:\n\n import isFirefox from '@coffeekraken/sugar/js/is/firefox'\n if (isFirefox()) {\n   // do something cool\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.isEven": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.isEven",
        "body": "Sugar.js.is.isEven()",
        "description": " Check if a number is even or not\n\nExample:\n\n import isEven from '@coffeekraken/sugar/js/is/even'\n isEven(1) // false\n isEven(2) // true\n/"
    },
    "Sugar.js.is.isEmail": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.isEmail",
        "body": "Sugar.js.is.isEmail()",
        "description": " Check if the passed value is a valid email address\n\nExample:\n\n import isEmail from '@coffeekraken/sugar/js/is/email';\n isEmail('john.doe@gmail.com') => true\n isEmail('plop@yop.com') => true\n isEmail('hello') => false\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.isEdge": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.isEdge",
        "body": "Sugar.js.is.isEdge()",
        "description": " Detect if is edge\n\nExample:\n\n import isEdge from '@coffeekraken/sugar/js/is/edge'\n if (isEdge()) {\n   // do something cool\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.isDdmmyyyyDate": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.isDdmmyyyyDate",
        "body": "Sugar.js.is.isDdmmyyyyDate()",
        "description": " Check if is a valid dd.mm.yyyy date\n This will match : dd.mm.yyyy | dd/mm/yyyy | dd-mm-yyyy | dd mm yyyy\n\nExample:\n\n import isDdmmyyyyDate from '@coffeekraken/sugar/js/is/ddmmyyyyDate'\n if (isDdmmyyyyDate('20.12.2018')) {\n     // do something cool\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.isColor": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.isColor",
        "body": "Sugar.js.is.isColor()",
        "description": " Check if the passed value is a color\n\nExample:\n\n import isColor from '@coffeekraken/sugar/js/is/color';\n isColor('red') => true\n isColor('#fff') => true\n isColor('hello') => false\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.class": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.class",
        "body": "Sugar.js.is.class()",
        "description": " Check if the passed variable (or array of variables) is/are plain variable(s)\n\nExample:\n\n import isClass = from '@coffeekraken/sugar/js/is/class';\n isClass({ hello: 'world'}); // => false\n const myCoolClass = class Coco{};\n isClass(myCoolClass); // => true\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.isChrome": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.isChrome",
        "body": "Sugar.js.is.isChrome()",
        "description": " Detect if is chrome\n\nExample:\n\n import isChrome from '@coffeekraken/sugar/js/is/chrome'\n if (isChrome()) {\n   // do something cool\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.isBoolean": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.isBoolean",
        "body": "Sugar.js.is.isBoolean()",
        "description": " Check if the passed value is a js Boolean\n\nExample:\n\n import isBoolean from '@coffeekraken/sugar/js/is/boolean'\n if (isBoolean(true) {\n   // do something\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.isBase64": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.isBase64",
        "body": "Sugar.js.is.isBase64()",
        "description": " Check if the passed value is a base 64 string\n\nExample:\n\n import isBase64 from '@coffeekraken/sugar/js/is/base64'\n if (isBase64(true) {\n   // do something\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.is.isArray": {
        "scope": "javascript",
        "prefix": "Sugar.js.is.isArray",
        "body": "Sugar.js.is.isArray()",
        "description": " Check if the passed value is a js Array\n\nExample:\n\n import isArray from '@coffeekraken/sugar/js/is/array'\n if (isArray([]) {\n   // do something\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.http.request": {
        "scope": "javascript",
        "prefix": "Sugar.js.http.request",
        "body": "Sugar.js.http.request()",
        "description": " Easily create and send an http request. This will return an instance of the SAjax class.\n\nExample:\n\n import request from '@coffeekraken/sugar/js/http/request';\n request({\n    url: 'https://api.github.com/something/cool',\n    method: 'get'\n }).then(response => {\n    // do something...\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.http.SRequestConfig": {
        "scope": "javascript",
        "prefix": "Sugar.js.http.SRequestConfig",
        "body": "new Sugar.js.http.SRequestConfig()",
        "description": " Class that represent an ajax request that will be passed to an SRequest instance.\n All the axios settings are supported by this class\n\nExample:\n\n const request = new SRequestConfig({\n  \turl : '/api/...',\n  \tmethod : 'GET',\n  \tdata : {\n  \t\tmyVar : 'myVal'\n  \t}\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.http.url": {
        "scope": "javascript",
        "prefix": "Sugar.js.http.url",
        "body": "Sugar.js.http.url",
        "description": " The url to call\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.http.baseURL": {
        "scope": "javascript",
        "prefix": "Sugar.js.http.baseURL",
        "body": "Sugar.js.http.baseURL",
        "description": " Specify the base url to call like \"https://api.github.com/2.0\" for example.\n If the \"url\" setting is absolute, this setting will don't have any impact on your request...\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.http.method": {
        "scope": "javascript",
        "prefix": "Sugar.js.http.method",
        "body": "Sugar.js.http.method",
        "description": " The request method to use like GET, POST, DELETE or PUT\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.http.headers": {
        "scope": "javascript",
        "prefix": "Sugar.js.http.headers",
        "body": "Sugar.js.http.headers",
        "description": " Specify some headers to add to the request\n\nExample:\n\n {\n    'X-Requested-With': 'XMLHttpRequest'\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.http.params": {
        "scope": "javascript",
        "prefix": "Sugar.js.http.params",
        "body": "Sugar.js.http.params",
        "description": " Specify some params to be sent through the URL.\n Must be a plain object or a URLSearchParams object\n\nExample:\n\n {\n    myCoolData: 'Hello world'\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.http.data": {
        "scope": "javascript",
        "prefix": "Sugar.js.http.data",
        "body": "Sugar.js.http.data",
        "description": " Specify some data you want to send with the request.\n This setting is available only for 'PUT', 'POST', and 'PATCH' requests...\n\nExample:\n\n {\n    firstName: 'Fred'\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.http.timeout": {
        "scope": "javascript",
        "prefix": "Sugar.js.http.timeout",
        "body": "Sugar.js.http.timeout",
        "description": " Specify time to wait before aborting the actual request. If setted in number format, this will mean milliseconds.\n You can also specify this settings using string format like so: '2s', '1h', '4m', etc...\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.http.sendInterval": {
        "scope": "javascript",
        "prefix": "Sugar.js.http.sendInterval",
        "body": "Sugar.js.http.sendInterval",
        "description": " Set the interval time between each requests if the sendCount setting is specified.\n If setted in number format, this is taken as millisenconds. You can also set the interval\n in string format like '34s', '1h', '10ms', '2d', etc...\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.http.sendCount": {
        "scope": "javascript",
        "prefix": "Sugar.js.http.sendCount",
        "body": "Sugar.js.http.sendCount",
        "description": " Set how many times the request has to be sent\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.http.everyResponse": {
        "scope": "javascript",
        "prefix": "Sugar.js.http.everyResponse",
        "body": "Sugar.js.http.everyResponse()",
        "description": " Specify a function to call on every response. The parameters passed to the function are:\n - response {Object}: The actual request response\n - requestIdx {Number}: The request index\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.http.responseType": {
        "scope": "javascript",
        "prefix": "Sugar.js.http.responseType",
        "body": "Sugar.js.http.responseType",
        "description": " Indicates the type of data that the server will respond with\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.http.constructor": {
        "scope": "javascript",
        "prefix": "Sugar.js.http.constructor",
        "body": "Sugar.js.http.constructor()",
        "description": " Constructor\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.http.SRequest": {
        "scope": "javascript",
        "prefix": "Sugar.js.http.SRequest",
        "body": "new Sugar.js.http.SRequest()",
        "description": " Class that allows to simply handle ajax requests with ease.\n This class give some useful features like :\n - Promise support\n - Recursive requests\n\nExample:\n\n const request = new SRequest({\n \t\turl : 'api/...',\n \t\tmethod : 'GET',\n \t\tdata : {\n \t\t\tmyVar : 'myVal'\n \t\t}\n });\n\n // send and listen for data\n request.send().then((response) => {\n \t\t// do something with response here...\n }).catch((error) => {\n \t\t// something went wrong...\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.http.retry": {
        "scope": "javascript",
        "prefix": "Sugar.js.http.retry",
        "body": "Sugar.js.http.retry()",
        "description": " Reset the request settings variables and relaunch the request\n\nExample:\n\n myAjax.retry().then(response => {\n    // do something...\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.http.send": {
        "scope": "javascript",
        "prefix": "Sugar.js.http.send",
        "body": "Sugar.js.http.send()",
        "description": " Send the request and return a promise that will be resolved once all the requests\n have been made or rejected if one of the requests has returned an error...\n\nExample:\n\n myAjax.send().then(response => {\n    // do something...\n }).catch(error => {\n    // do something...\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.html.toString": {
        "scope": "javascript",
        "prefix": "Sugar.js.html.toString",
        "body": "Sugar.js.html.toString()",
        "description": " Return the string version of a dom node or the dom node and his children\n\nExample:\n\n import toString from '@coffeekraken/sugar/js/string/toString'\n const myDomNode = document.querySelector('.my-dom-node')\n toString(myDomNode, false) // <div class=\"my-dom-node\"></div>\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.html.striptags": {
        "scope": "javascript",
        "prefix": "Sugar.js.html.striptags",
        "body": "Sugar.js.html.striptags()",
        "description": " Strip tags of an html string.\n This is a simple wrapper of the nice \"striptags\" package that you can find here: https://www.npmjs.com/package/striptags\n\nExample:\n\n import striptags from '@coffeekraken/sugar/js/string/striptags'\n striptags('<p><span>Hello</span> world</p>', '<span>') // <span>Hello</span> world\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.html.strToHtml": {
        "scope": "javascript",
        "prefix": "Sugar.js.html.strToHtml",
        "body": "Sugar.js.html.strToHtml()",
        "description": " Return the html (dom) version of a string\n\nExample:\n\n import strToHtml from '@coffeekraken/sugar/js/html/strToHtml'\n const myString = '<p>Hello World</p>'\n strToHtml(myString) // <p>Hello World</p>\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.html.replaceTags": {
        "scope": "javascript",
        "prefix": "Sugar.js.html.replaceTags",
        "body": "Sugar.js.html.replaceTags()",
        "description": " Replace all the html tags that you specify by something else that you can fully choose\n\nExample:\n\n import replaceTags from '@coffeekraken/sugar/js/html/replaceTags';\n replaceTags('<span>Hello</span> world', {\n    span: (tag, content) => `<div>${content}</div>`; // => <div>Hello</div> world\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.string.decodeHtmlEntities": {
        "scope": "javascript",
        "prefix": "Sugar.js.string.decodeHtmlEntities",
        "body": "Sugar.js.string.decodeHtmlEntities()",
        "description": " Decode an htmlentities encoded string\n\nExample:\n\n import decodeHtmlEntities from '@coffeekraken/sugar/js/string/decodeHtmlEntities';\n decodeHtmlEntities('&#111;&#108;&#105;&#118;&#105;&#101;&#114;&#046;&#098;&#111;&#115;&#115;&#101;&#108;&#064;&#103;&#109;&#097;&#105;&#108;&#046;&#099;&#111;&#109;');\n // return => olivier.bossel@gmail.com\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.google.SGoogleCustomSearch": {
        "scope": "javascript",
        "prefix": "Sugar.js.google.SGoogleCustomSearch",
        "body": "new Sugar.js.google.SGoogleCustomSearch()",
        "description": " This class let you make with ease search requests to the google custom search service\n with useful features like:\n - Simple pagination system\n - Promise support\n\nExample:\n\n // create a google search instance\n const googleSearch = new SGoogleCustomSearch('myApiKey', 'myCustomSearchContextKey');\n\n // make a search...\n googleSearch.search('hello world').then((response) => {\n \t\t// do something with the google response...\n });\n\n // get the nexts results\n googleSearch.next().then((response) => {\n \t\t// do something with the new response...\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.google.num": {
        "scope": "javascript",
        "prefix": "Sugar.js.google.num",
        "body": "Sugar.js.google.num",
        "description": " How many results by page wanted\n Can be between 1 and 10\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.google.page": {
        "scope": "javascript",
        "prefix": "Sugar.js.google.page",
        "body": "Sugar.js.google.page",
        "description": " The page to request\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.google.constructor": {
        "scope": "javascript",
        "prefix": "Sugar.js.google.constructor",
        "body": "Sugar.js.google.constructor()",
        "description": " Constructor\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.google.search": {
        "scope": "javascript",
        "prefix": "Sugar.js.google.search",
        "body": "Sugar.js.google.search()",
        "description": " Launch a search"
    },
    "Sugar.js.google.next": {
        "scope": "javascript",
        "prefix": "Sugar.js.google.next",
        "body": "Sugar.js.google.next()",
        "description": " Load the next page\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.google.previous": {
        "scope": "javascript",
        "prefix": "Sugar.js.google.previous",
        "body": "Sugar.js.google.previous()",
        "description": " Load the previous page\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.geom.2d.distanceBetween": {
        "scope": "javascript",
        "prefix": "Sugar.js.geom.2d.distanceBetween",
        "body": "Sugar.js.geom.2d.distanceBetween()",
        "description": " Get the distance between two points\n\nExample:\n\n import distanceBetween from '@coffeekraken/sugar/js/geom/2d/distanceBetween'\n distanceBetween({\n \tx: 10, y: 20\n }, {\n \tx: 10, y: 30\n }) // 10\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.geom.2d.circleConstrain": {
        "scope": "javascript",
        "prefix": "Sugar.js.geom.2d.circleConstrain",
        "body": "Sugar.js.geom.2d.circleConstrain()",
        "description": " Take as parameter a central point, a radius and a points to constrain inside the circle defined by the radius\n\nExample:\n\n import circleConstrain from '@coffeekraken/sugar/js/geom/2d/circleConstrain'\n circleConstrain({\n \tx: 10, y: 10\n }, 10, {\n \tx: 10, y: 5\n })\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.function.throttle": {
        "scope": "javascript",
        "prefix": "Sugar.js.function.throttle",
        "body": "Sugar.js.function.throttle()",
        "description": " This utils function allows you to make sure that a function that will normally be called\n several times, for example during a scroll event, to be called once each threshhold time\n\nExample:\n\n import throttle from '@coffeekraken/sugar/js/function/throttle';\n const myThrottledFn = throttle(() => {\n \t\t// my function content that will be\n \t\t// executed only once each second\n }, 1000);\n\n document.addEventListener('scroll', (e) => {\n \t\t// call my throttled function\n \t\tmyThrottledFn();\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.function.sleep": {
        "scope": "javascript",
        "prefix": "Sugar.js.function.sleep",
        "body": "Sugar.js.function.sleep()",
        "description": " Simple sleep function that can be used using \"await\" syntax in an \"async\" function\n\nExample:\n\n import sleep from '@coffeekraken/sugar/js/function/sleep';\n async function() {\n  console.log('hello');\n  await sleep(2000);\n  console.log('World');\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.function.setRecursiveTimeout": {
        "scope": "javascript",
        "prefix": "Sugar.js.function.setRecursiveTimeout",
        "body": "Sugar.js.function.setRecursiveTimeout()",
        "description": " This utils function allows you to call a passed function each x time during a certain duration\n\nExample:\n\n import setRecursiveTimeout from '@coffeekraken/sugar/js/function/setRecursiveTimeout';\n setRecursiveTimeout(() => {\n \t\t// I will be executed 10 times\n }, 1000, 10000);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.function.debounce": {
        "scope": "javascript",
        "prefix": "Sugar.js.function.debounce",
        "body": "Sugar.js.function.debounce()",
        "description": " This utils function allows you to make sure that a function that will normally be called\n several times, for example during a scroll event, to be called only once after\n the delay passed\n\nExample:\n\n import debounce from '@coffeekraken/sugar/js/function/debounce';\n const myDebouncedFn = debounce(() => {\n \t\t// my function content that will be\n \t\t// executed only once after the 1 second delay\n }, 1000);\n\n document.addEventListener('scroll', (e) => {\n \t\t// call my debounced function\n \t\tmyDebouncedFn();\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.filter.SGooeySvgFilter": {
        "scope": "javascript",
        "prefix": "Sugar.js.filter.SGooeySvgFilter",
        "body": "new Sugar.js.filter.SGooeySvgFilter()",
        "description": " This class represent a gooey SVG filter that can be applied on any HTMLElement.\n Here's the values that you can control on it:\n - blur: The amout of blur you want\n - contrast: The amout of contrast you want\n - shrink: The amount of shrink you want\n - amout: The overall amount of effect you want\n\nExample:\n\n const filter = new SGooeySvgFilter();\n filter.applyTo(myCoolHTMLElement);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.filter.constructor": {
        "scope": "javascript",
        "prefix": "Sugar.js.filter.constructor",
        "body": "Sugar.js.filter.constructor()",
        "description": " Constructor\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.filter.applyTo": {
        "scope": "javascript",
        "prefix": "Sugar.js.filter.applyTo",
        "body": "Sugar.js.filter.applyTo()",
        "description": " Apply the filter to element\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.filter.unapplyFrom": {
        "scope": "javascript",
        "prefix": "Sugar.js.filter.unapplyFrom",
        "body": "Sugar.js.filter.unapplyFrom()",
        "description": " Remove the filter from element\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.filter.destroy": {
        "scope": "javascript",
        "prefix": "Sugar.js.filter.destroy",
        "body": "Sugar.js.filter.destroy()",
        "description": " Destroy the filter\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.filter.SOutlineSvgFilter": {
        "scope": "javascript",
        "prefix": "Sugar.js.filter.SOutlineSvgFilter",
        "body": "new Sugar.js.filter.SOutlineSvgFilter()",
        "description": " This class represent an outline filter that can be applied on any HTMLElement.\n\nExample:\n\n const filter = new SOutlineSvgFilter();\n filter.applyTo(myCoolHTMLElement);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.filter.radius": {
        "scope": "javascript",
        "prefix": "Sugar.js.filter.radius",
        "body": "Sugar.js.filter.radius",
        "description": " Get/Set the radius to produce the effect\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.filter.SMotionblurSvgFilter": {
        "scope": "javascript",
        "prefix": "Sugar.js.filter.SMotionblurSvgFilter",
        "body": "new Sugar.js.filter.SMotionblurSvgFilter()",
        "description": " This class represent a motion blur svg filter that will blur your\n element depending on his movements, direction and speed\n\nExample:\n\n const filter = new SMotionblurSvgFilter();\n filter.applyTo(myCoolHTMLElement);\n // now when your element will move, it will be blured accordingly\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.filter.amount": {
        "scope": "javascript",
        "prefix": "Sugar.js.filter.amount",
        "body": "Sugar.js.filter.amount",
        "description": " Set the overall amount of effect to produce\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.filter.SGradientSvgFilter": {
        "scope": "javascript",
        "prefix": "Sugar.js.filter.SGradientSvgFilter",
        "body": "new Sugar.js.filter.SGradientSvgFilter()",
        "description": " This SVG filter class apply either a linear or a radial gradient of your choice\n on an HTMLElement.\n This is useful cause the gradient will only be applied on part of the elements that is really visible and will respect the opacity\n of each parts\n\nExample:\n\n const filter = new SGradientSvgFilter();\n filter.linear(['red','blue','green']);\n filter.applyTo(myCoolHTMLElement);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.filter.linear": {
        "scope": "javascript",
        "prefix": "Sugar.js.filter.linear",
        "body": "Sugar.js.filter.linear()",
        "description": " Linear gradient\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.filter.radial": {
        "scope": "javascript",
        "prefix": "Sugar.js.filter.radial",
        "body": "Sugar.js.filter.radial()",
        "description": " Radial gradient\n\nExample:\n\n myFilter.radial(['#ff0000', '#00ffff], {\n    width: 300,\n    height: 300\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.filter.blur": {
        "scope": "javascript",
        "prefix": "Sugar.js.filter.blur",
        "body": "Sugar.js.filter.blur",
        "description": " Get/Set the blur amount to produce the effect\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.filter.contrast": {
        "scope": "javascript",
        "prefix": "Sugar.js.filter.contrast",
        "body": "Sugar.js.filter.contrast",
        "description": " Get the contrast amount to produce the effect\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.filter.shrink": {
        "scope": "javascript",
        "prefix": "Sugar.js.filter.shrink",
        "body": "Sugar.js.filter.shrink",
        "description": " Get the shrink amount to produce the effect\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.file.extension": {
        "scope": "javascript",
        "prefix": "Sugar.js.file.extension",
        "body": "Sugar.js.file.extension()",
        "description": " Return the passed file path extension\n\nExample:\n\n import extension from '@coffeekraken/sugar/js/file/extension';\n extension('hello/world.jpg'); // => jpg\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.feature.videoLazySrcAttribute": {
        "scope": "javascript",
        "prefix": "Sugar.js.feature.videoLazySrcAttribute",
        "body": "Sugar.js.feature.videoLazySrcAttribute",
        "description": " Add support for the `lazy-src` attribute on `video` elements.\n The video `src` attribute will be populated when the `video` element enter the viewport\n\nExample:\n\n <video lazy-src=\"my-cool-video.mp4\"></video>\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.feature.linksScrollHrefAttribute": {
        "scope": "javascript",
        "prefix": "Sugar.js.feature.linksScrollHrefAttribute",
        "body": "Sugar.js.feature.linksScrollHrefAttribute",
        "description": " Add the ability to set links href attribute with \"scroll:#target\" in order to animate the scroll to this target element\n\nExample:\n\n <a href=\"scroll:#my-cool-element-id\">Scroll to</a>\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.feature.handleInputAttributes": {
        "scope": "javascript",
        "prefix": "Sugar.js.feature.handleInputAttributes",
        "body": "Sugar.js.feature.handleInputAttributes",
        "description": " Add some attributes on inputs, textarea and select to help with styling purposes and more.\n Here's the attributes added:\n - `has-value`: When the input has a value in it\n - `empty`: When the input is has no value in it\n - `dirty`: When the input has been touched\n\nExample:\n\n import '@coffeekraken/sugar/js/feature/inputAdditionalAttributes'\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.feature.imagesLoadedAttribute": {
        "scope": "javascript",
        "prefix": "Sugar.js.feature.imagesLoadedAttribute",
        "body": "Sugar.js.feature.imagesLoadedAttribute",
        "description": " Add on every images the attribute \"loaded\" when it has been fully loaded. This is useful\n for styling purposes and for others thinks as well.\n\nExample:\n\n import '@coffeekraken/sugar/js/feature/imagesLoadedAttribute'\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.feature.imagesLazySrcAttribute": {
        "scope": "javascript",
        "prefix": "Sugar.js.feature.imagesLazySrcAttribute",
        "body": "Sugar.js.feature.imagesLazySrcAttribute",
        "description": " Add support for the `lazy-src` attribute on `img` elements.\n The video `src` attribute will be populated when the `img` element enter the viewport\n\nExample:\n\n <img lazy-src=\"my-cool-image.jpg\" />\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.autoScrollAnchorLinks": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.autoScrollAnchorLinks",
        "body": "Sugar.js.dom.autoScrollAnchorLinks()",
        "description": " Listen for links contains an hash to init them for scroll to target on click\n\nExample:\n\n import autoScrollAnchorLinks from '@coffeekraken/sugar/js/autoScrollAnchorLinks'\n autoScrollAnchorLinks()\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.event.SEvent": {
        "scope": "javascript",
        "prefix": "Sugar.js.event.SEvent",
        "body": "new Sugar.js.event.SEvent()",
        "description": " Proxy class to create custom events that can be dispatched\n through the standard dispatch method on any HTMLElement\n\nExample:\n\n let myEvent = new SEvent('myCoolEvent', {\n \t\tcancelable : true,\n \t\tbubbles : false,\n \t\tdetail : {\n \t\t\t// some datas to send with the event\n \t\t}\n });\n // dispatch the event from an HTMLElement\n myHTMLElement.dispatch(myEvent);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.event.constructor": {
        "scope": "javascript",
        "prefix": "Sugar.js.event.constructor",
        "body": "Sugar.js.event.constructor()",
        "description": " Construct the event\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.event.settings.cancelable": {
        "scope": "javascript",
        "prefix": "Sugar.js.event.settings.cancelable",
        "body": "Sugar.js.event.settings.cancelable",
        "description": " Set if the event is cancelable or not\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.event.settings.bubbles": {
        "scope": "javascript",
        "prefix": "Sugar.js.event.settings.bubbles",
        "body": "Sugar.js.event.settings.bubbles",
        "description": " Set if the event will bubble or not\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.event.settings.detail": {
        "scope": "javascript",
        "prefix": "Sugar.js.event.settings.detail",
        "body": "Sugar.js.event.settings.detail",
        "description": " Pass an object that will be sent with the event\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.encoding.base64": {
        "scope": "javascript",
        "prefix": "Sugar.js.encoding.base64",
        "body": "Sugar.js.encoding.base64",
        "description": " This return an object containing the \"encode\" and \"decode\" function that you can use\n to encode/decode base64 Strings.\n\nExample:\n\n import base64 from '@coffeekraken/sugar/js/encoding/base64';\n base64.encode('Hello world');\n base64.decode('SGVsbG8gV29ybGQh');\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.encoding.encode": {
        "scope": "javascript",
        "prefix": "Sugar.js.encoding.encode",
        "body": "Sugar.js.encoding.encode()",
        "description": " Encode in base 64\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.encoding.decode": {
        "scope": "javascript",
        "prefix": "Sugar.js.encoding.decode",
        "body": "Sugar.js.encoding.decode()",
        "description": " Decode the passed string\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.easing.linear": {
        "scope": "javascript",
        "prefix": "Sugar.js.easing.linear",
        "body": "Sugar.js.easing.linear()",
        "description": " Ease linear function\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.easing.easeOutQuint": {
        "scope": "javascript",
        "prefix": "Sugar.js.easing.easeOutQuint",
        "body": "Sugar.js.easing.easeOutQuint()",
        "description": " Ease out quint function\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.easing.easeOutQuart": {
        "scope": "javascript",
        "prefix": "Sugar.js.easing.easeOutQuart",
        "body": "Sugar.js.easing.easeOutQuart()",
        "description": " Ease out quart function\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.easing.easeOutQuad": {
        "scope": "javascript",
        "prefix": "Sugar.js.easing.easeOutQuad",
        "body": "Sugar.js.easing.easeOutQuad()",
        "description": " Ease out quad function\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.easing.easeOutCubic": {
        "scope": "javascript",
        "prefix": "Sugar.js.easing.easeOutCubic",
        "body": "Sugar.js.easing.easeOutCubic()",
        "description": " Ease out cubic function\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.easing.easeInQuint": {
        "scope": "javascript",
        "prefix": "Sugar.js.easing.easeInQuint",
        "body": "Sugar.js.easing.easeInQuint()",
        "description": " Ease in quint function\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.easing.easeInQuart": {
        "scope": "javascript",
        "prefix": "Sugar.js.easing.easeInQuart",
        "body": "Sugar.js.easing.easeInQuart()",
        "description": " Ease in quart function\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.easing.easeInQuad": {
        "scope": "javascript",
        "prefix": "Sugar.js.easing.easeInQuad",
        "body": "Sugar.js.easing.easeInQuad()",
        "description": " Ease in quad function\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.easing.easeInOutQuart": {
        "scope": "javascript",
        "prefix": "Sugar.js.easing.easeInOutQuart",
        "body": "Sugar.js.easing.easeInOutQuart()",
        "description": " Ease in out quart function\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.easing.easeInOutQuad": {
        "scope": "javascript",
        "prefix": "Sugar.js.easing.easeInOutQuad",
        "body": "Sugar.js.easing.easeInOutQuad()",
        "description": " Ease in out quad function\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.easing.easeInCubic": {
        "scope": "javascript",
        "prefix": "Sugar.js.easing.easeInCubic",
        "body": "Sugar.js.easing.easeInCubic()",
        "description": " Ease in cubic function\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.wrapInner": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.wrapInner",
        "body": "Sugar.js.dom.wrapInner()",
        "description": " Wrap the content of the passed `$parent` inside a the passed HTMLElement `$wrapper`\n\nExample:\n\n import wrapInner from '@coffeekraken/sugar/js/dom/wrapInner'\n const $myWrapper = document.createElement('div')\n // assuming\n // <div class=\"container\">\n //   <span>Hello World</span>\n // </div>\n wrapInner(document.querySelector('.container'), $myWrapper)\n // return\n // <div class=\"container\">\n //   <div>\n //     <span>Hello World</span>\n //   </div>\n // </div>\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel@gmail.com"
    },
    "Sugar.js.dom.wrap": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.wrap",
        "body": "Sugar.js.dom.wrap()",
        "description": " Wrap an HTMLElement inside another `$wrapper` one\n\nExample:\n\n import wrap from '@coffeekraken/sugar/js/dom/wrap'\n const $wrapper = document.createElement('div')\n // assuming:\n // <div>\n //   <span class=\"wrap\">Hello World</span>\n // </div>\n wrap(document.querySelector('.wrap'), $wrapper)\n // output:\n // <div>\n //   <div>\n //     <span class=\"wrap\">Hello World</span>\n //   </div>\n // </div>\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.whenVisible": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.whenVisible",
        "body": "Sugar.js.dom.whenVisible()",
        "description": " Monitor an HTMLElement to be notified when it is visible\n\nExample:\n\n import whenVisible from '@coffeekraken/sugar/js/dom/whenVisible'\n whenVisible(myCoolHTMLElement).then((elm) => {\n \t\t// do something with your element that is now visible\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.whenTransitionEnd": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.whenTransitionEnd",
        "body": "Sugar.js.dom.whenTransitionEnd()",
        "description": " Monitor an HTMLElement to be notified when his transition has ended\n\nExample:\n\n import whenTransitionEnd from '@coffeekraken/sugar/js/dom/whenTransitionEnd'\n whenTransitionEnd(myCoolHTMLElement).then((elm) => {\n \t\t// do something with your element transition has ended...\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.whenOutOfViewport": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.whenOutOfViewport",
        "body": "Sugar.js.dom.whenOutOfViewport()",
        "description": " Monitor an HTMLElement to be notified when it exit the viewport\n\nExample:\n\n import whenOutOfViewport from '@coffeekraken/sugar/js/dom/whenOutOfViewport'\n whenOutOfViewport(myCoolHTMLElement).then((elm) => {\n \t\t// do something with your element that has exit the viewport...\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.whenInViewport": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.whenInViewport",
        "body": "Sugar.js.dom.whenInViewport()",
        "description": " Monitor an HTMLElement to be notified when it is in the viewport\n\nExample:\n\n import whenInViewport from '@coffeekraken/sugar/js/dom/whenInViewport'\n whenInViewport(myCoolHTMLElement).then((elm) => {\n \t\t// do something with your element that has entered the viewport...\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.whenAttribute": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.whenAttribute",
        "body": "Sugar.js.dom.whenAttribute()",
        "description": " Resolve a promise when the wanted attribute on the passed HTMLElement exist or pass the check function provided\n\nExample:\n\n import whenAttribute from '@coffeekraken/sugar/js/dom/whenAttribute'\n whenAttribute(myCoolHTMLElement, 'value').then((value) => {\n \t\t// the value attribute exist on the element\n });\n // with a checkFn\n whenAttribute(myCoolHTMLElement, 'value', (newVal, oldVal) => {\n \t\t// make sure the value is a number\n \t\treturn typeof(newVal) === 'number';\n }).then((value) => {\n \t\t// do something with your number value...\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.when": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.when",
        "body": "Sugar.js.dom.when()",
        "description": " Return a promise that will be resolved when the wanted status has been applied on the passed HTMLElement.\n The status that can be requested are:\n - attribute : Detect when a special attribute has been applied on the element\n --- settings.attribute : Specify the attribute to check\n --- settings.checkFn : An optional function to check the attribute. The promise is resolved when this function return true\n\n - inViewport : Detect when the element enter in the viewport\n --- settings.offset : Specify an offset to detect the in viewport state\n\n - outOfViewport : Detect when the element exit the viewport\n --- settings.offset : Specify an offset to detect the out viewport state\n\n - transitionEnd : Detect when the css transition is finished on the element\n --- settings.callback : An optional callback function if you prefer instead of the promise\n\n - visible : Detect when the element become visible\n --- settings.callback : An optional callback function if you prefer instead of the promise\n\nExample:\n\n import when from '@coffeekraken/sugar/js/dom/when';\n when(myCoolNode, 'inViewport').then(() => {\n    // do something...\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.toggleFullscreen": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.toggleFullscreen",
        "body": "Sugar.js.dom.toggleFullscreen()",
        "description": " Toggle the fullscreen mode\n\nExample:\n\n import toggleFullscreen from '@coffeekraken/sugar/js/dom/toggleFullscreen'\n toggleFullscreen(myDomElm)\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.toDomNodes": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.toDomNodes",
        "body": "Sugar.js.dom.toDomNodes()",
        "description": " Return a usable nodeTree from a variable source like selector, an html string, an html template tag or a node that will be cloned.\n\nExample:\n\n import toDomNodes from '@coffeekraken/sugar/js/dom/toDomNodes';\n toDomNodes('<span>Hello World</span>');\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.textWidth": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.textWidth",
        "body": "Sugar.js.dom.textWidth()",
        "description": " Get the text width in px of a passed string or the passed HTMLElement\n\nExample:\n\n import textWidth from '@coffeekraken/sugar/js/dom/textWidth'\n // text of an HTMLElement\n const width = textWidth(myCoolHTMLElement);\n\n // text directly (no font-size management so it's less accurate...)\n const width = textWidth('Hello World');\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.stylesheetsReady": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.stylesheetsReady",
        "body": "Sugar.js.dom.stylesheetsReady()",
        "description": " Wait until all the HTMLLinkElement's are properly loaded\n\nExample:\n\n import stylesheetsReady from '@coffeekraken/sugar/js/dom/stylesheetsReady'\n stylesheetsReady([\n \t\tmyHTMLLinkElement1,\n \t\tmyHTMLLinkElement2\n ]).then(() => {\n \t\t// do something when all the links are loaded\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.styleString2Object": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.styleString2Object",
        "body": "Sugar.js.dom.styleString2Object()",
        "description": " Transform a style string to an object representation\n\nExample:\n\n import styleString2Object from '@coffeekraken/sugar/js/dom/styleString2Object'\n const styleString = styleString2Object('padding-left:20px; display:block;');\n // output => {\n //\t\tpaddingLeft : '20px',\n // \t\tdisplay : 'block'\n // }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.styleObject2String": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.styleObject2String",
        "body": "Sugar.js.dom.styleObject2String()",
        "description": " Transform a style object to inline string separated by ;\n\nExample:\n\n import styleObject2String from '@coffeekraken/sugar/js/dom/styleObject2String'\n const styleString = styleObject2String({\n \t\tpaddingLeft : '20px',\n \t\tdisplay : 'block'\n });\n // output => padding-left:20px; display:block;\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.style": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.style",
        "body": "Sugar.js.dom.style()",
        "description": " Set or remove a css style property on an HTMLElement\n\nExample:\n\n import style from '@coffeekraken/sugar/js/dom/style'\n style(myCoolHTMLElement, {\n \t\tpaddingLeft : 20,\n \t\tdisplay : null\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.stripTags": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.stripTags",
        "body": "Sugar.js.dom.stripTags()",
        "description": " Strip the tags of the passed text\n\nExample:\n\n import stripTags from '@coffeekraken/sugar/js/dom/stripTags'\n stripTags('<h1>Hello World</h1>') // => Hello World\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.splitWords": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.splitWords",
        "body": "Sugar.js.dom.splitWords()",
        "description": " Split each words inside an HTMLElement by scoping them inside some tags.\n Here's an result sample for :\n Hello World\n\n ```html\n <span class=\"s-split-words\">Hello</span>\n <span class=\"s-split-words\">World</span>\n ```\n\nExample:\n\n import splitWords from '@coffeekraken/sugar/js/dom/splitLines'\n const myCoolElement = document.querySelector('.my-cool-element');\n splitWords(myCoolElement);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.splitLines": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.splitLines",
        "body": "Sugar.js.dom.splitLines()",
        "description": " Split each lines inside an HTMLElement by scoping them inside some tags.\n Here's an result sample for :\n Hello\n World\n\n ```html\n <p class=\"s-split-lines\">Hello</p>\n <p class=\"s-split-lines\">World</p>\n ```\n\nExample:\n\n import splitLines from '@coffeekraken/sugar/js/dom/splitLines'\n const myCoolElement = document.querySelector('.my-cool-element');\n splitLines(myCoolElement);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.splitLetters": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.splitLetters",
        "body": "Sugar.js.dom.splitLetters()",
        "description": " Split each letters inside an HTMLElement by scoping them inside multiple tags.\n Here's an result sample for : Hello World\n ```html\n <span style=\"white-space:nowrap\">\n \t<span class=\"split-letters\">\n \t\t<span class=\"split-letters__letter\">H</span>\n \t</span>\n \t<span class=\"split-letters\">\n \t\t<span class=\"split-letters__letter\">e</span>\n \t</span>\n \t<span class=\"split-letters\">\n \t\t<span class=\"split-letters__letter\">l</span>\n \t</span>\n \t<span class=\"split-letters\">\n \t\t<span class=\"split-letters__letter\">l</span>\n \t</span>\n \t<span class=\"split-letters\">\n \t\t<span class=\"split-letters__letter\">o</span>\n \t</span>\n </span>\n <span class=\"split-letters\">\n \t<span class=\"split-letters__letter\">&nbsp;</span>\n </span>\n <span style=\"white-space:nowrap\">\n \t<span class=\"split-letters\">\n \t\t<span class=\"split-letters__letter\">W</span>\n \t</span>\n \t<span class=\"split-letters\">\n \t\t<span class=\"split-letters__letter\">o</span>\n \t</span>\n \t<span class=\"split-letters\">\n \t\t<span class=\"split-letters__letter\">r</span>\n \t</span>\n \t<span class=\"split-letters\">\n \t\t<span class=\"split-letters__letter\">l</span>\n \t</span>\n \t<span class=\"split-letters\">\n \t\t<span class=\"split-letters__letter\">d</span>\n \t</span>\n </span>\n ```\n\nExample:\n\n import __splitLetters from '@coffeekraken/sugar/js/dom/splitLetters'\n const myCoolElement = document.querySelector('.my-cool-element');\n __splitLetters(myCoolElement);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.sendForm": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.sendForm",
        "body": "Sugar.js.dom.sendForm()",
        "description": " Send a form through an ajax call and return back a promise resolved with the server response\n\nExample:\n\n import sendForm from '@coffeekraken/sugar/js/dom/sendForm'\n const myCoolForm = document.querySelector('.my-cool-form')\n sentForm(myCoolForm).then((response) => {\n \t// do something with the response\n })\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.scrollTop": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.scrollTop",
        "body": "Sugar.js.dom.scrollTop()",
        "description": " Return the amount of scroll top that the user as made in the page\n\nExample:\n\n import scrollTop from '@coffeekraken/sugar/js/dom/scrollTop';\n scrollTop();\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.scrollToLocationHash": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.scrollToLocationHash",
        "body": "Sugar.js.dom.scrollToLocationHash()",
        "description": " Scroll to the location hash if an hash is present.\n This function will try to get the target element from the hash and scroll to it\n\nExample:\n\n import __scrollToLocationHash from '@coffeekraken/sugar/js/dom/scrollToLocationHash'\n __scrollToLocationHash(500, 0)\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.scrollTo": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.scrollTo",
        "body": "Sugar.js.dom.scrollTo()",
        "description": " Function that let you make a smooth page scroll to a specific element in the page\n\nExample:\n\n import scrollTop from '@coffeekraken/sugar/js/dom/scrollTo'\n import easeInOutQuad from '@coffeekraken/sugar/js/easings/easeInOutQuad'\n scrollTo(myCoolHTMLElement);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.scrollLeft": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.scrollLeft",
        "body": "Sugar.js.dom.scrollLeft()",
        "description": " Get the amount of scroll left\n\nExample:\n\n import scrollLeft from '@coffeekraken/sugar/js/dom/scrollLeft'\n scrollLeft() // 40\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivier.bossel@gmail.com"
    },
    "Sugar.js.dom.scriptLoaded": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.scriptLoaded",
        "body": "Sugar.js.dom.scriptLoaded()",
        "description": " Detect when a script has been fully loaded\n\nExample:\n\n import scriptLoaded from '@coffeekraken/sugar/js/dom/scriptLoaded'\n scriptLoaded($script).then(($script) => {\n   // do something here\n })\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.requestFullscreen": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.requestFullscreen",
        "body": "Sugar.js.dom.requestFullscreen()",
        "description": " Request fullscreen on the passed DOM element\n\nExample:\n\n import requestFullscreen from '@coffeekraken/sugar/js/dom/requestFullscreen'\n requestFullscreen(myDomElm)\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.requestAnimationFrame": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.requestAnimationFrame",
        "body": "Sugar.js.dom.requestAnimationFrame()",
        "description": " Proxy for the window.requestAnimationFrame function\n\nExample:\n\nundefined\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.removeClassOnAnimationEnd": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.removeClassOnAnimationEnd",
        "body": "Sugar.js.dom.removeClassOnAnimationEnd()",
        "description": " Remove some class on animation end\n\nExample:\n\n import removeClassOnAnimationEnd from '@coffeekraken/sugar/js/dom/removeClassOnAnimationEnd'\n removeClassOnAnimationEnd(myCoolElm, 'my-class');\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.realHeight": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.realHeight",
        "body": "Sugar.js.dom.realHeight()",
        "description": " Return the full height of an element that has maybe a max-height, etc...\n\nExample:\n\n import realHeight from '@coffeekraken/sugar/js/dom/realHeight';\n realHeight(myCoolHtmlElement);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.querySelectorLive": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.querySelectorLive",
        "body": "Sugar.js.dom.querySelectorLive()",
        "description": " Observe the dom to get all the elements that matches a passed css selector at any point in time.\n Be warned that this use the mutation observer API and will monitor all the document for new nodes. Make sure to use it\n when you don't have the chance to use the custom elements API instead\n\nExample:\n\n import querySelectorLive from '@coffeekraken/sugar/js/dom/querySelectorLive'\n querySelectorLive('.my-cool-item', (node, clearFn) => {\n \t// do something here with the detected node\n  // call clearFn if you want to stop listening for this selector\n  clearFn();\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.querySelectorAllWithStyle": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.querySelectorAllWithStyle",
        "body": "Sugar.js.dom.querySelectorAllWithStyle()",
        "description": " Select all node that match the style object passed as parameter\n\nExample:\n\n import querySelectorAllWithStyle from '@coffeekraken/sugar/js/dom/querySelectorAllWithStyle'\n querySelectorAllWithStyle('*', {\n \tbackgroundImage: true\n })\n\n // style object can contains either:\n const style = {\n \t backgroundImage: true, // has to have the background-image style\n   backgroundPosition: false, // has to not have the background-position style\n   backgroundSize: /cover|contain/, // has to have the background-size set to cover or contain\n   background: 'none' // has to have to background set to \"none\"\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.querySelectorAll": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.querySelectorAll",
        "body": "Sugar.js.dom.querySelectorAll()",
        "description": " Enhanced proxy of the Element.querySelectorAll function that let you specify\n if you want elements that are visible, or even that are in the viewport\n\nExample:\n\n import querySelectorAll from '@coffeekraken/sugar/js/dom/querySelectorAll';\n // simple query\n const elms = querySelectorAll('.a-cool-css-selector');\n\n // get elements that are in the viewport\n const elms = querySelectorAll('.a-cool-css-selector', {\n \t\tinViewport : true\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.querySelector": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.querySelector",
        "body": "Sugar.js.dom.querySelector()",
        "description": " Enhanced proxy of the Element.querySelector function that let you specify\n if you want an element that is visible, or even that is in the viewport\n\nExample:\n\n import querySelector from '@coffeekraken/sugar/js/dom/querySelector';\n // simple query\n const elm = querySelector('.a-cool-css-selector');\n\n // get an element that is in the viewport\n const elm = querySelector('.a-cool-css-selector', {\n \t\tinViewport : true\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.previous": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.previous",
        "body": "Sugar.js.dom.previous()",
        "description": " Browse the passed element previous siblings to find the first element that matches the passed selector\n\nExample:\n\n import previous from '@coffeekraken/sugar/js/dom/previous'\n const previousElm = previous(myCoolElement, '.my-cool-class');\n if (previousElm) {\n \t\t// we have found en element that matches the selector\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.prependChild": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.prependChild",
        "body": "Sugar.js.dom.prependChild()",
        "description": " Prepend an HTMLElement into another HTMLElement\n\nExample:\n\n import prependChild from '@coffeekraken/sugar/js/dom/prependChild'\n prependChild(myElementToInsert, theReferenceElement);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.onSwipe": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.onSwipe",
        "body": "Sugar.js.dom.onSwipe()",
        "description": " Detect swipes gestures on touch devices.\n\nExample:\n\n import onSwipe from '@coffeekraken/sugar/js/dom/onSwipe'\n onSwipe(myCoolElm, (swipe) => {\n \t// check the swipe direction\n \tif (swipe.left) {\n \t\t// do something...\n \t}\n \t// support : left, right, up, down\n \t// etc...\n }, {\n \tthreshold : 50\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.offsetParent": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.offsetParent",
        "body": "Sugar.js.dom.offsetParent()",
        "description": " Get the offset top and left of the passed element from his parent top left point\n\nExample:\n\n import offsetParent from '@coffeekraken/sugar/js/dom/offsetParent'\n const offsetParentElm = offsetParent(myCoolElement);\n // output : { top : 200, left : 300 }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.offset": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.offset",
        "body": "Sugar.js.dom.offset()",
        "description": " Get the offset top and left of the passed element from the document top left point\n\nExample:\n\n import offset from '@coffeekraken/sugar/js/dom/offset'\n const offsetElm = offset(myCoolElement);\n // output : { top : 200, left : 300 }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.observeMutations": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.observeMutations",
        "body": "Sugar.js.dom.observeMutations()",
        "description": " Observe mutations on an HTMLElement and get them through the observable subscription.\n You can pass the mutation observer settings through the second argument. By default, here's his values:\n - attributes: true,\n - childList: false,\n - subtree: false\n\nExample:\n\n import observeMutations from '@coffeekraken/sugar/js/dom/observeMutations'\n const promise = observeMutations(myElement).then(mutation => {\n    // do something with the mutation\n });\n // stop listening for mutations\n promise.cancel();\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.observeAttributes": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.observeAttributes",
        "body": "Sugar.js.dom.observeAttributes()",
        "description": " Observe attributes on an HTMLElement and get mutations through the SPromise instance\n\nExample:\n\n import observeAttributes from 'sugarcss/js/dom/observeAttributes'\n const observer = observeAttributes(myCoolHTMLElement).then(mutation => {\n \t\t// do something with the mutation\n });\n // cancel the observer\n observer.cancel();\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.nodeIndex": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.nodeIndex",
        "body": "Sugar.js.dom.nodeIndex()",
        "description": " Return the inde of the passed node inside the html\n\nExample:\n\n import nodeIndex from '@coffeekraken/sugar/js/dom/nodeIndex'\n // assuming:\n // <li>item #1</li>\n // <li class=\"match\">item #2</li>\n // <li>item #3</li>\n nodeIndex(document.querySelector('.match')) // 1\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.next": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.next",
        "body": "Sugar.js.dom.next()",
        "description": " Browse the passed element next siblings to find the first element that matches the passed selector\n\nExample:\n\n import next from '@coffeekraken/sugar/js/dom/next'\n const nextElm = next(myCoolElement, '.my-cool-class');\n if (nextElm) {\n \t\t// we have found en element that matches the selector\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.matches": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.matches",
        "body": "Sugar.js.dom.matches()",
        "description": " Polyfill for the Element.matches function\n\nExample:\n\n import matches from '@coffeekraken/sugar/js/dom/matches'\n if (matches(myCoolHTMLElement, '.my-cool-css-selector')) {\n \t\t// the element match the selector\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.linkLoaded": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.linkLoaded",
        "body": "Sugar.js.dom.linkLoaded()",
        "description": " Wait until the passed HTMLLinkElement is fully loaded\n\nExample:\n\n import linkLoaded from '@coffeekraken/sugar/js/dom/linkLoaded'\n linkLoaded(myCoolHTMLLinlElement).then((link) => {\n \t\t// do something when the link is loaded\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.isVisible": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.isVisible",
        "body": "Sugar.js.dom.isVisible()",
        "description": " Check if the passed HTMLElement is visible or not.\n Visible mean that it has not an opacity of 0, not a visibility of hidden and not a display of none\n\nExample:\n\n import isVisible from '@coffeekraken/sugar/js/dom/isVisible'\n if (isVisible(myCoolHTMLElement) {\n \t\t// i'm visible\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.isInViewport": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.isInViewport",
        "body": "Sugar.js.dom.isInViewport()",
        "description": " Check if the passed HTMLElement is in the viewport or not\n\nExample:\n\n import isInViewport from '@coffeekraken/sugar/js/dom/isInViewport'\n if (isInViewport(myCoolHTMLElement) {\n \t\t// i'm in the viewport\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.isInIframe": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.isInIframe",
        "body": "Sugar.js.dom.isInIframe()",
        "description": " Check if the page is loaded inside an iframe\n\nExample:\n\n import isInIframe from '@coffeekraken/sugar/js/dom/isInIframe'\n if (isInIframe()) {\n   // do something\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.isHover": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.isHover",
        "body": "Sugar.js.dom.isHover()",
        "description": " Check if the mouse is hover the passed HTMLElement\n\nExample:\n\n import isHover from '@coffeekraken/sugar/js/dom/isHover'\n const $myElm = document.querySelector('.my-elm')\n if (isHover($myElm)) {\n   // do something\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.insertAfter": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.insertAfter",
        "body": "Sugar.js.dom.insertAfter()",
        "description": " Insert an HTMLElement after another HTMLElement\n\nExample:\n\n import insertAfter from '@coffeekraken/sugar/js/dom/insertAfter'\n insertAfter(myElementToInsert, theReferenceElement);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.innerHtml": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.innerHtml",
        "body": "Sugar.js.dom.innerHtml()",
        "description": " Change the content of a Node with the possibility to animate the change using one of these animations:\n - fade\n - fadeUp\n - fadeDown\n - fadeLeft\n - fadeRight\n You can also choose between 3 actions which are: replace, append and prepend\n\nExample:\n\n import innerHtml from '@coffeekraken/sugar/js/dom/innerHtml'\n innerHtml(myCoolNode, 'Hello World', {\n    action: 'replace', // replace, append, prepend\n    animIn: 'fade', // fade, fadeUp, fadeDown, fadeLeft, fadeRight\n    animOut: 'fadeUp', // fade, fadeUp, fadeDown, fadeLeft, fadeRight\n    animInDuration: 600, // in ms if number, otherwise a string like '1s', '1m', etc...\n    animOutDuration: 300, // in ms if number, otherwise a string like '1s', '1m', etc...\n    animInDistance: 25, // in px\n    animOutDistance: 25, // in px\n    animInEasing: 'ease-in-out',\n    animOutEasing: 'ease-in-out'\n }).then(() => {\n    // do something when the change has been made...\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.inViewportStatusChange": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.inViewportStatusChange",
        "body": "Sugar.js.dom.inViewportStatusChange()",
        "description": " Monitor when the passed element enter or exit the viewport\n\nExample:\n\n import inViewportStatusChange from '@coffeekraken/sugar/js/dom/inViewportStatusChange';\n inViewportStatusChange(myElm).enter($elm => {\n    // do something...\n }).exit($elm => {\n    // do something...\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.inViewportPercentage": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.inViewportPercentage",
        "body": "Sugar.js.dom.inViewportPercentage()",
        "description": " Return how many percent the passed element is visible in the viewport\n\nExample:\n\n import inViewportPercentage from '@coffeekraken/sugar/js/dom/inViewportPercentage'\n const percentage = inViewportPercentage(myCoolHTMLElement);\n // 20\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.imagesLoaded": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.imagesLoaded",
        "body": "Sugar.js.dom.imagesLoaded()",
        "description": " Detect when some images are loaded. This function take advantage of the SPromise class\n and expose a callback registration function called \"img\" that will be triggered on each loaded images. See in the example bellow.\n\nExample:\n\n import imagesLoaded from '@coffeekraken/sugar/js/dom/imagesLoaded'\n imagesLoaded([\n \t$img1, $img2, $img3\n ]).img($img => {\n    // do something with the loaded image\n }).then(() => {\n   // do something here\n })\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.imageLoaded": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.imageLoaded",
        "body": "Sugar.js.dom.imageLoaded()",
        "description": " Wait until the passed image is fully loaded\n\nExample:\n\n import imageLoaded from '@coffeekraken/sugar/js/dom/imageLoaded'\n imageLoaded(myCoolHTMLImageElement).then(($img) => {\n \t\t// do something when the image is loaded\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.getTranslateProperties": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.getTranslateProperties",
        "body": "Sugar.js.dom.getTranslateProperties()",
        "description": " Get a translate properties of an HTMLElement\n\nExample:\n\n import getTranslateProperties from '@coffeekraken/sugar/js/dom/getTranslateProperties'\n const props = getTranslateProperties(myCoolHTMLElement);\n // output format\n // {\n // \tx : 100,\n // \ty : 0,\n // \tz : 0\n // }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.getTransitionProperties": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.getTransitionProperties",
        "body": "Sugar.js.dom.getTransitionProperties()",
        "description": " Get the css transition properties from an HTMLElement in an object format\n\nExample:\n\n import getTransitionProperties from '@coffeekraken/sugar/js/dom/getTransitionProperties'\n const props = getTransitionProperties(myCoolHTMLElement);\n // output format\n // {\n // \tproperty : ['all'],\n // \tduration : [200],\n // \tdelay : [0],\n // \ttimingFunction : ['linear'],\n // \ttotalDuration : 200\n // }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.getStyleProperty": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.getStyleProperty",
        "body": "Sugar.js.dom.getStyleProperty()",
        "description": " Get a style property on the passed element through the computed style.\n This function try to store the actual style to not trigger more that 1 redraw\n each js execution loop.\n\nExample:\n\n import getStyleProperty from '@coffeekraken/sugar/js/dom/getStyleProperty'\n const opacity = getStyleProperty(myCoolHTMLElement, 'opacity');\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.getAnimationProperties": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.getAnimationProperties",
        "body": "Sugar.js.dom.getAnimationProperties()",
        "description": " Get the css animation properties from an HTMLElement in an object format\n\nExample:\n\n import getAnimationProperties from '@coffeekraken/sugar/js/dom/getAnimationProperties'\n const props = getAnimationProperties(myCoolHTMLElement);\n // output format\n // {\n // \tname : ['animation1'],\n // \tduration : [200],\n // \tdelay : [0],\n // \ttimingFunction : ['linear'],\n // \titerationCount : [1],\n // \tdirection : ['forward'],\n // \ttotalDuration : 200\n // }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.forceRedraw": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.forceRedraw",
        "body": "Sugar.js.dom.forceRedraw()",
        "description": " Force the element to be painted again in case of visual issues\n\nExample:\n\n import forceRedraw from '@coffeekraken/sugar/js/dom/forceRedraw'\n forceRedraw($elm)\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.exitFullscreen": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.exitFullscreen",
        "body": "Sugar.js.dom.exitFullscreen()",
        "description": " Exit the fullscreen mode\n\nExample:\n\n import exitFullscreen from '@coffeekraken/sugar/js/dom/exitFullscreen'\n exitFullscreen()\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.emptyNode": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.emptyNode",
        "body": "Sugar.js.dom.emptyNode()",
        "description": " Empty a node by removing each childs one after the other\n\nExample:\n\nundefined\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.domReady": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.domReady",
        "body": "Sugar.js.dom.domReady()",
        "description": " Wait that the dom is ready before resolving the promise\n\nExample:\n\n import domReady from '@coffeekraken/sugar/js/dom/domReady'\n // using callback\n domReady(() => {\n \t\t// do something\n });\n // using promise\n domReady().then(() => {\n \t\t// do something\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.dispatchEvent": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.dispatchEvent",
        "body": "Sugar.js.dom.dispatchEvent()",
        "description": " Helper to quickly display an event with some optional data attached to it\n\nExample:\n\n import dispatchEvent from '@coffeekraken/sugar/js/dom/dispatchEvent'\n dispatchEvent(myCoolHTMLElement, 'myCoolEventName', {\n \t\tvar1 : 'value1'\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.detectInOutDirection": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.detectInOutDirection",
        "body": "Sugar.js.dom.detectInOutDirection()",
        "description": " Detect the mouse direction when entered on the passed element. The direction can be up, down, left or right and will be passed to the two callbacks available.\n The first one is the `onIn` callback, and the second one is the `onOut`.\n\nExample:\n\n import detectInOutDirection from '@coffeekraken/sugar/js/dom/detectInOutDirection'\n const detect = detectInOutDirection(myElm).in(direction => {\n    // do something...\n }).out(direction => {\n    // do something...\n }).then(value => {\n    // do something\n    console.log(value); // => { action: 'in', direction: 'up' };\n });\n\n // cancel the detection process\n detect.cancel();\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.dataset": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.dataset",
        "body": "Sugar.js.dom.dataset()",
        "description": " Get or set a value on the passed element with the passed name\n\nExample:\n\n import dataset from '@coffeekraken/sugar/js/dom/dataset';\n dataset(myCoolElement, 'hello', 'world'); // => 'world';\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.closestNotVisible": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.closestNotVisible",
        "body": "Sugar.js.dom.closestNotVisible()",
        "description": " Go up the dom three to find the first element that is not visible.\n Not visible mean that has either an opacity to 0, a visibility to hidden or a display to none\n\nExample:\n\n import closestNotVisible from 'sugarcss/js/dom/closestNotVisible'\n const closestElm = closestNotVisible(myCoolElement);\n if (closestElm) {\n \t\t// we have found en element that is not visible\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.closest": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.closest",
        "body": "Sugar.js.dom.closest()",
        "description": " Go up the dom three to find the first element that matches the passed selector\n\nExample:\n\n import closest from '@coffeekraken/sugar/js/dom/closest'\n const closestElm = closest(myCoolElement, '.my-cool-class');\n if (closestElm) {\n \t\t// we have found en element that matches the selector\n }\n // the selector param can be a function that need to return either true or false like so:\n closest(myCoolElement, (elm) => {\n   return elm.hasAttribute('my-cool-attribute')\n })\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.backgroundImageLoaded": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.backgroundImageLoaded",
        "body": "Sugar.js.dom.backgroundImageLoaded()",
        "description": " Detect when a background image has been loaded on an HTMLElement\n\nExample:\n\n import backgroundImageLoaded from '@coffeekraken/sugar/js/dom/backgroundImageLoaded'\n backgroundImageLoaded($myElm).then(() => {\n   // do something when loaded\n })\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.appendStylesheetLink": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.appendStylesheetLink",
        "body": "Sugar.js.dom.appendStylesheetLink()",
        "description": " Append a stylesheet link to the page head\n\nExample:\n\n import appendStylesheetLink from '@coffeekraken/sugar/js/dom/appendStylesheetLink'\n appendStylesheetLink('/dist/css/style.css')\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.appendScriptTag": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.appendScriptTag",
        "body": "Sugar.js.dom.appendScriptTag()",
        "description": " Append a script tag either to the head or the body\n\nExample:\n\n import appendScriptTag from '@coffeekraken/sugar/js/dom/appendScriptTag'\n appendScriptTag('dist/js/app.js')\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.addEventListenerOnce": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.addEventListenerOnce",
        "body": "Sugar.js.dom.addEventListenerOnce()",
        "description": " Add an event listener that will be trigerred only once\n\nExample:\n\n import addEventListenerOnce from '@coffeekraken/sugar/js/dom/addEventListenerOnce'\n addEventListenerOnce(myElm, 'click', (e) => {\n     // do something on click\n });\n addEventListenerOnce(myElm, 'click').then(e => {\n    // do something on click\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.addEventListener": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.addEventListener",
        "body": "Sugar.js.dom.addEventListener()",
        "description": " Add an event listener on an element and return the function to remove the event listener\n\nExample:\n\n import addEventListener from '@coffeekraken/sugar/js/dom/addEventListener'\n const removeEventListener = addEventListener($myCoolElm, 'click', this._myCoolFunction, this)\n // remove the event listener\n removeEventListener()\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dom.addAnimationClass": {
        "scope": "javascript",
        "prefix": "Sugar.js.dom.addAnimationClass",
        "body": "Sugar.js.dom.addAnimationClass()",
        "description": " Add a class that trigger an animation and remove it at the end\n\nExample:\n\n import addAnimationClass from '@coffeekraken/sugar/js/dom/addAnimationClass'\n addAnimationClass(myElm, 'my-cool-class').then($elm => {\n    // do something at the animation end...\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.docblock.parse": {
        "scope": "javascript",
        "prefix": "Sugar.js.docblock.parse",
        "body": "Sugar.js.docblock.parse()",
        "description": " This function allows you to simply parse any strings that contains docblock(s) and return\n the parsed version un object format\n\nExample:\n\n import parse from '@coffeekraken/sugar/js/docblock/parse';\n parse(myString);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dev.getArgsNames": {
        "scope": "javascript",
        "prefix": "Sugar.js.dev.getArgsNames",
        "body": "Sugar.js.dev.getArgsNames()",
        "description": " Get the arguments names of the passed function. Return an array of the arguments names\n\nExample:\n\n import getArgsNames from '@coffeekraken/sugar/js/dev/getArgsNames';\n function hello(world, coco, plop) { }\n getArgsNames(hello); // => ['world', 'coco', 'plop']\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.dev.dataTypesArray": {
        "scope": "javascript",
        "prefix": "Sugar.js.dev.dataTypesArray",
        "body": "Sugar.js.dev.dataTypesArray",
        "description": " This is just a list of data types available in the\n current language (node/js)\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.css.injectStyle": {
        "scope": "javascript",
        "prefix": "Sugar.js.css.injectStyle",
        "body": "Sugar.js.css.injectStyle()",
        "description": " Inject a passed style string in the DOM\n\nExample:\n\n import injectStyle from '@coffeekraken/sugar/js/css/injectStyle';\n injectStyle('a { color: red; }');\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.crypt.sha512.encrypt": {
        "scope": "javascript",
        "prefix": "Sugar.js.crypt.sha512.encrypt",
        "body": "Sugar.js.crypt.sha512.encrypt()",
        "description": " Encrypt\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.crypt.sha512.decrypt": {
        "scope": "javascript",
        "prefix": "Sugar.js.crypt.sha512.decrypt",
        "body": "Sugar.js.crypt.sha512.decrypt()",
        "description": " Decrypt\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.crypt.sha256.encrypt": {
        "scope": "javascript",
        "prefix": "Sugar.js.crypt.sha256.encrypt",
        "body": "Sugar.js.crypt.sha256.encrypt()",
        "description": " Encrypt\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.crypt.sha256.decrypt": {
        "scope": "javascript",
        "prefix": "Sugar.js.crypt.sha256.decrypt",
        "body": "Sugar.js.crypt.sha256.decrypt()",
        "description": " Decrypt\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.crypt.object.encrypt": {
        "scope": "javascript",
        "prefix": "Sugar.js.crypt.object.encrypt",
        "body": "Sugar.js.crypt.object.encrypt()",
        "description": " Encrypt\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.crypt.object.decrypt": {
        "scope": "javascript",
        "prefix": "Sugar.js.crypt.object.decrypt",
        "body": "Sugar.js.crypt.object.decrypt()",
        "description": " Decrypt\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.crypt.md5.encrypt": {
        "scope": "javascript",
        "prefix": "Sugar.js.crypt.md5.encrypt",
        "body": "Sugar.js.crypt.md5.encrypt()",
        "description": " Encrypt\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.crypt.md5.decrypt": {
        "scope": "javascript",
        "prefix": "Sugar.js.crypt.md5.decrypt",
        "body": "Sugar.js.crypt.md5.decrypt()",
        "description": " Decrypt\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.crypt.base64.encrypt": {
        "scope": "javascript",
        "prefix": "Sugar.js.crypt.base64.encrypt",
        "body": "Sugar.js.crypt.base64.encrypt()",
        "description": " Encrypt\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.crypt.base64.decrypt": {
        "scope": "javascript",
        "prefix": "Sugar.js.crypt.base64.decrypt",
        "body": "Sugar.js.crypt.base64.decrypt()",
        "description": " Decrypt\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.crypt.aes.encrypt": {
        "scope": "javascript",
        "prefix": "Sugar.js.crypt.aes.encrypt",
        "body": "Sugar.js.crypt.aes.encrypt()",
        "description": " Encrypt\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.crypt.aes.decrypt": {
        "scope": "javascript",
        "prefix": "Sugar.js.crypt.aes.decrypt",
        "body": "Sugar.js.crypt.aes.decrypt()",
        "description": " Decrypt\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.core.env": {
        "scope": "javascript",
        "prefix": "Sugar.js.core.env",
        "body": "Sugar.js.core.env()",
        "description": " This function allows you to access environment variables through the same method in node and javascript\n\nExample:\n\n import env from '@coffeekraken/sugar/js/dev/env';\n console.log(env('node_env')); // => production\n env('something.cool', { hello: 'world' });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.console.parseHtml": {
        "scope": "javascript",
        "prefix": "Sugar.js.console.parseHtml",
        "body": "Sugar.js.console.parseHtml()",
        "description": " Parse the simple html tags to format the console message\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.config.adapters.SConfigLsAdapter": {
        "scope": "javascript",
        "prefix": "Sugar.js.config.adapters.SConfigLsAdapter",
        "body": "new Sugar.js.config.adapters.SConfigLsAdapter()",
        "description": " This Local Storage adapter for the SConfig class let you define a name for your config and then you can just\n let the SConfig class do the work for you...\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.config.adapters.SConfigAdapter": {
        "scope": "javascript",
        "prefix": "Sugar.js.config.adapters.SConfigAdapter",
        "body": "new Sugar.js.config.adapters.SConfigAdapter()",
        "description": " Base class for SCache adapters\n\nExample:\n\n class SConfigCoolAdapter extends SConfigAdapter {\n    constructor(settings = {}) {\n      super(settings);\n      // settings are accessible through this._settings\n    }\n    async load() {\n      // load the config the way you want and return it in Object format\n      return {};\n    }\n    async save(newConfig) {\n      // save the newConfig object the way you want and return true when all it ok\n      return true;\n    }\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.config.adapters.constructor": {
        "scope": "javascript",
        "prefix": "Sugar.js.config.adapters.constructor",
        "body": "Sugar.js.config.adapters.constructor()",
        "description": " Construct the SConfigAdapter instance with the settings passed in object format. See description bellow.\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.config.adapters.name": {
        "scope": "javascript",
        "prefix": "Sugar.js.config.adapters.name",
        "body": "Sugar.js.config.adapters.name",
        "description": " Access the adapter setted name\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.config.adapters.settings": {
        "scope": "javascript",
        "prefix": "Sugar.js.config.adapters.settings",
        "body": "Sugar.js.config.adapters.settings",
        "description": " Access the adapter setted settings\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.config.config": {
        "scope": "javascript",
        "prefix": "Sugar.js.config.config",
        "body": "new Sugar.js.config.config()",
        "description": " This class allows you to quickly access/update some configuration depending on the data adapters specified.\n The base available data adapters are \"json\" and \"js\" allowing you to store data inside files on the server drive.\n\nExample:\n\n import SConfig from '@coffeekraken/sugar/js/config/SConfig';\n const config = new SConfig({\n    json: {\n      filename: process.cwd() + '/config.json',\n      encrypt: base64.encrypt,\n      decrypt: base64.decrypt\n    }\n });\n await config.get('log.frontend.mail.host'); // => gmail.google.com\n await config.set('log.frontend.mail.host', 'mailchimp.com');\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.config.constructor": {
        "scope": "javascript",
        "prefix": "Sugar.js.config.constructor",
        "body": "Sugar.js.config.constructor()",
        "description": " Init the config instance by passing a name and a settings object to configure your instance\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.config.load": {
        "scope": "javascript",
        "prefix": "Sugar.js.config.load",
        "body": "Sugar.js.config.load()",
        "description": " Load the config from the default adapter or from the passed adapter\n\nExample:\n\n const config = await config.load();\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.config.save": {
        "scope": "javascript",
        "prefix": "Sugar.js.config.save",
        "body": "Sugar.js.config.save()",
        "description": " Save the config through all the registered adapters or just the one specify in params\n\nExample:\n\n await config.save();\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.config.get": {
        "scope": "javascript",
        "prefix": "Sugar.js.config.get",
        "body": "Sugar.js.config.get()",
        "description": " Get a config depending on the dotted object path passed and either using the first registered adapter found, or the passed one\n\nExample:\n\n await config.get('log.frontend.mail.host'); // => gmail.google.com\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.node.config.SConfig.set": {
        "scope": "javascript",
        "prefix": "Sugar.node.config.SConfig.set",
        "body": "Sugar.node.config.SConfig.set()",
        "description": " Get a config depending on the dotted object path passed and either using the first registered adapter found, or the passed one\n\nExample:\n\n config.set('log.frontend.mail.host', 'coffeekraken.io');\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.rgba2hsv": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.rgba2hsv",
        "body": "Sugar.js.color.rgba2hsv()",
        "description": " RGBA to HSV\n\nExample:\n\n import rgba2hsv from '@coffeekraken/sugar/js/color/rgba2hsv';\n rgba2hsv(10,20,50,10);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.rgba2hsl": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.rgba2hsl",
        "body": "Sugar.js.color.rgba2hsl()",
        "description": " RGBA to HSL\n\nExample:\n\n import rgba2hsl from '@coffeekraken/sugar/js/color/rgba2hsl';\n rgba2hsl(10,20,50,10);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.rgba2hex": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.rgba2hex",
        "body": "Sugar.js.color.rgba2hex()",
        "description": " RGBA to HEX\n\nExample:\n\n import rgba2hex from '@coffeekraken/sugar/js/color/rgba2hex';\n rgba2hex(10,20,30,10);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.parseRgba": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.parseRgba",
        "body": "Sugar.js.color.parseRgba()",
        "description": " Parse RGBA string and return an object\n\nExample:\n\n import parseRgba from '@coffeekraken/sugar/js/color/parseRgba';\n parseRgba('rgba(20,10,100,20)');\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.parseHsv": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.parseHsv",
        "body": "Sugar.js.color.parseHsv()",
        "description": " Parse HSV\n\nExample:\n\n import parseHsv from '@coffeekraken/sugar/js/color/parseHsv';\n parseHsv('hsv(10,10,10)');\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.parseHsl": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.parseHsl",
        "body": "Sugar.js.color.parseHsl()",
        "description": " Parse HSL\n\nExample:\n\n import parseHsl from '@coffeekraken/sugar/color/parseHsl';\n parseHsl('hsl(20,20,20)');\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.hsv2rgba": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.hsv2rgba",
        "body": "Sugar.js.color.hsv2rgba()",
        "description": " HSV to RGBA\n\nExample:\n\n import hsv2rgba from '@coffeekraken/sugar/js/color/hsv2rgba';\n hsv2rgba(10,20,30);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.hsl2rgba": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.hsl2rgba",
        "body": "Sugar.js.color.hsl2rgba()",
        "description": " HSL to RGBA\n\nExample:\n\n import hsl2rgba from '@coffeekraken/sugar/js/color/hsl2rgba';\n hsl2rgba(10,20,30);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.hex2rgba": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.hex2rgba",
        "body": "Sugar.js.color.hex2rgba()",
        "description": " Hex to RGBA\n\nExample:\n\n import hex2rgba from '@coffeekraken/sugar/js/color/hex2rgba';\n hex2rgba('#ff00ff');\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.convert": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.convert",
        "body": "Sugar.js.color.convert()",
        "description": " This function take as input any color format like rgba Object, hsl Object, hsv Object, hex String, rgba String, hsl String or hsv String\n and convert it into the wanted format like \"rgba\", \"hsl\", \"hsv\", \"hex\", \"rgbaString\", \"hslString\" or \"hsvString\"\n\nExample:\n\n import convert from '@coffeekraken/sugar/js/color/convert';\n convert('rgba(10,20,30,100)', 'rgba'); // => { r: 10, g: 20, b: 30, a: 100 }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.color": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.color",
        "body": "Sugar.js.color.color()",
        "description": " Simple wrapper to create an SColor instance quickly\n\nExample:\n\n import color from '@coffeekraken/sugar/js/color/color';\n const myColor = color('#ff00ff');\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.SColor": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.SColor",
        "body": "new Sugar.js.color.SColor()",
        "description": " Class that provide complete and simple to use color manupilation capabilities like:\n - Modifiers\n \t- opacity\n \t- darken\n \t- lighten\n \t- desaturate\n \t- saturate\n \t- spin (change hue)\n \t- transparentize\n \t- alpha\n \t- grayscale\n - Conversions\n \t- rgba\n \t- hsl\n \t- hsv\n \t- hex\n - Print out formats\n \t- toRgbaString\n \t- toHslString\n \t- toHsvString\n \t- toHexString\n \t- toString(format = null)\n\nExample:\n\n import SColor from '@coffeekraken/sugar/js/classes/SColor'\n let myColor = new SColor(#ff0000);\n // get a lighter color\n let ligtherColor = myColor.lighten(20);\n // print the color to rgba\n console.log(lighterColor.toRgbaString());\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.colors": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.colors",
        "body": "Sugar.js.color.colors",
        "description": " Static color names map\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.constructor": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.constructor",
        "body": "Sugar.js.color.constructor()",
        "description": " Constructor\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.toHex": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.toHex",
        "body": "Sugar.js.color.toHex()",
        "description": " To hex\n\nExample:\n\n myColor.toHex();\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.toHsl": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.toHsl",
        "body": "Sugar.js.color.toHsl()",
        "description": " To hsl\n\nExample:\n\n myColor.toHsl();\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.toHsv": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.toHsv",
        "body": "Sugar.js.color.toHsv()",
        "description": " To hsv\n\nExample:\n\n myColor.toHsv();\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.toRgba": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.toRgba",
        "body": "Sugar.js.color.toRgba()",
        "description": " To rgba\n\nExample:\n\n myColor.toRgba();\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.r": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.r",
        "body": "Sugar.js.color.r",
        "description": " Get/set the red value\n\nExample:\n\n myColor.r;\n myColor.r = 128;\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.g": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.g",
        "body": "Sugar.js.color.g",
        "description": " Get/set the green value\n\nExample:\n\n myColor.g;\n myColor.g = 20;\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.b": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.b",
        "body": "Sugar.js.color.b",
        "description": " Get/set the blue value\n\nExample:\n\n myColor.b;\n myColor.b = 30;\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.a": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.a",
        "body": "Sugar.js.color.a",
        "description": " Get/set the alpha value\n\nExample:\n\n myColor.a;\n myColor.a = 20;\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.l": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.l",
        "body": "Sugar.js.color.l",
        "description": " The luminence value\n\nExample:\n\n myColor.l;\n myColor.l = 10;\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.s": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.s",
        "body": "Sugar.js.color.s",
        "description": " The saturation value\n\nExample:\n\n myColor.s;\n myColor.s = 20;\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.v": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.v",
        "body": "Sugar.js.color.v",
        "description": " The value of the HSV format\n\nExample:\n\n myColor.v;\n myColor.v = 20;\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.h": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.h",
        "body": "Sugar.js.color.h",
        "description": " Get/set the hue\n\nExample:\n\n myColor.h;\n myColor.h = 30;\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.reset": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.reset",
        "body": "Sugar.js.color.reset()",
        "description": " Reset to the original color\n\nExample:\n\n myColor.reset();\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.desaturate": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.desaturate",
        "body": "Sugar.js.color.desaturate()",
        "description": " Desaturate\n\nExample:\n\n myColor.desaturate(20);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.saturate": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.saturate",
        "body": "Sugar.js.color.saturate()",
        "description": " Saturate\n\nExample:\n\n myColor.saturate(20);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.grayscale": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.grayscale",
        "body": "Sugar.js.color.grayscale()",
        "description": " Return a new SColor instance of the color to grayscale\n\nExample:\n\n myColor.grayscale();\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.spin": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.spin",
        "body": "Sugar.js.color.spin()",
        "description": " Spin the hue on the passed value (max 360)\n\nExample:\n\n myColor.spin(230);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.transparentize": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.transparentize",
        "body": "Sugar.js.color.transparentize()",
        "description": " Transparentize\n\nExample:\n\n myColor.transparenize(30);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.alpha": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.alpha",
        "body": "Sugar.js.color.alpha()",
        "description": " Set the alpha\n\nExample:\n\n myColor.alpha(10);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.opacity": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.opacity",
        "body": "Sugar.js.color.opacity()",
        "description": " Set the opacity (alias for alpha)\n\nExample:\n\n myColor.opacity(20);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.opacify": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.opacify",
        "body": "Sugar.js.color.opacify()",
        "description": " Opacify\n\nExample:\n\n myColor.opacify(18);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.darken": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.darken",
        "body": "Sugar.js.color.darken()",
        "description": " Darken\n\nExample:\n\n myColor.darken(20);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.lighten": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.lighten",
        "body": "Sugar.js.color.lighten()",
        "description": " Lighten\n\nExample:\n\n myColor.lighten(20);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.toHexString": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.toHexString",
        "body": "Sugar.js.color.toHexString()",
        "description": " To hex string\n\nExample:\n\n myColor.toHexString();\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.toRgbaString": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.toRgbaString",
        "body": "Sugar.js.color.toRgbaString()",
        "description": " To rgba string\n\nExample:\n\n myColor.toRgbaString();\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.toHslString": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.toHslString",
        "body": "Sugar.js.color.toHslString()",
        "description": " To hsl string\n\nExample:\n\n myColor.toHslString();\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.toHsvString": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.toHsvString",
        "body": "Sugar.js.color.toHsvString()",
        "description": " To hsv string\n\nExample:\n\n myColor.toHsvString();\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.color.toString": {
        "scope": "javascript",
        "prefix": "Sugar.js.color.toString",
        "body": "Sugar.js.color.toString()",
        "description": " To string\n\nExample:\n\n myColor.toString();\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.cli.parseArgs": {
        "scope": "javascript",
        "prefix": "Sugar.js.cli.parseArgs",
        "body": "Sugar.js.cli.parseArgs()",
        "description": " Parse a string to find the provided arguments into the list and return a corresponding object.\n\nExample:\n\n import parseArgs from '@coffeekraken/sugar/js/string/parseArgs';\n parseArgs('hello -w 10 yop \"hello world\" -b --hello.world Nelson --help \"coco yep\" #blop', {\n    param1: { type: 'String', alias: 'p' },\n    world: { type: 'Array', alias: 'w', validator: value => {\n      return Array.isArray(value);\n    }},\n    bool: { type: 'Boolean', alias: 'b', default: false, required: true },\n    'hello.world': { type: 'String' },\n    help: { type: 'String', alias: 'h' },\n    id: { type: 'String', alias: 'i', regexp: /^#([\\S]+)$/ }\n }, {\n    treatDotsAsObject: true,\n    handleOrphanOptions: true\n });\n {\n    param1: 'hello',\n    world: [10, 'yop', 'hello world'],\n    bool: true,\n    hello: {\n      world: 'Nelson'\n    },\n    help: 'coco yep',\n    id: '#blop'\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.class.toPlainObject": {
        "scope": "javascript",
        "prefix": "Sugar.js.class.toPlainObject",
        "body": "Sugar.js.class.toPlainObject()",
        "description": " This function take a instance as parameter and return a plain object of it\n\nExample:\n\n import toPlainObject from '@coffeekraken/sugar/js/class/toPlainObject';\n class Coco {\n    constructor() {\n      this.hello = 'world';\n    }\n }\n toPlainObject(new Coco()); // => { hello: 'world' }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com undefined"
    },
    "Sugar.js.class.methodExists": {
        "scope": "javascript",
        "prefix": "Sugar.js.class.methodExists",
        "body": "Sugar.js.class.methodExists()",
        "description": " Check if one or more methods exists on a class instance\n\nExample:\n\n class Coco {\n    hello() {}\n }\n import methodExists from '@coffeekraken/sugar/node/class/methodExists';\n const myInstance = new Coco();\n methodExists(myInstance, 'hello', 'world'); // => ['world'];\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.node.fs.cacheAdapters.SCacheFsAdapter": {
        "scope": "javascript",
        "prefix": "Sugar.node.fs.cacheAdapters.SCacheFsAdapter",
        "body": "new Sugar.node.fs.cacheAdapters.SCacheFsAdapter()",
        "description": " A filesystem SCache adapter that allows you to store your cache items on the user system\n\nExample:\n\n const cache = new SCache({\n    ttl: 100,\n    adapter: new SCacheLsAdapter({\n    })\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.node.fs.cacheAdapters.constructor": {
        "scope": "javascript",
        "prefix": "Sugar.node.fs.cacheAdapters.constructor",
        "body": "Sugar.node.fs.cacheAdapters.constructor()",
        "description": " Construct the SCacheFsAdapter instance with the settings passed in object format. See description bellow.\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.node.fs.cacheAdapters.set": {
        "scope": "javascript",
        "prefix": "Sugar.node.fs.cacheAdapters.set",
        "body": "Sugar.node.fs.cacheAdapters.set()",
        "description": " Set a cache item in the localstorage\n\nExample:\n\n await myCache.set('myCoolItem', { hello: 'world' }, {\n    ttl: 40000\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.node.fs.cacheAdapters.get": {
        "scope": "javascript",
        "prefix": "Sugar.node.fs.cacheAdapters.get",
        "body": "Sugar.node.fs.cacheAdapters.get()",
        "description": " Get a cache item in the localstorage\n\nExample:\n\n await myCache.get('myCoolItem');\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.node.fs.cacheAdapters.delete": {
        "scope": "javascript",
        "prefix": "Sugar.node.fs.cacheAdapters.delete",
        "body": "Sugar.node.fs.cacheAdapters.delete()",
        "description": " Delete a cache item on the filesystem\n\nExample:\n\n await myCache.delete('myCoolItem');\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.node.fs.cacheAdapters.clear": {
        "scope": "javascript",
        "prefix": "Sugar.node.fs.cacheAdapters.clear",
        "body": "Sugar.node.fs.cacheAdapters.clear()",
        "description": " Clear all the items in the current cache\n\nExample:\n\n await myCache.clear;\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.node.fs.cacheAdapters.keys": {
        "scope": "javascript",
        "prefix": "Sugar.node.fs.cacheAdapters.keys",
        "body": "Sugar.node.fs.cacheAdapters.keys()",
        "description": " Return an array of all the items keys saved in this cache instance\n\nExample:\n\n const keys = await myCache.keys(); // => ['item1','item2']\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.cache.cacheAdapters.SCacheAdapter": {
        "scope": "javascript",
        "prefix": "Sugar.js.cache.cacheAdapters.SCacheAdapter",
        "body": "new Sugar.js.cache.cacheAdapters.SCacheAdapter()",
        "description": " Base class for SCache adapters\n\nExample:\n\n class SCacheCoolAdapter extends SCacheAdapter {\n    constructor(settings = {}) {\n      super(settings);\n      // settings are accessible through this._settings\n    }\n    async set(name, value, settings = {}) {\n      const objectToSave = this.processItem(name, value, settings);\n      // make what you want with the objectToSave...\n      return objectToSave; // return the objectToSave or false if something goes wrong\n    }\n    async get(name) {\n      // make what you need to get back the cached item\n      return objectOfCachedItem; // return the cached item in object format\n    }\n    async delete(name) {\n      // make what you need to delete the cached item\n      return true; // return true or false if something goes wrong\n    }\n }\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.cache.cacheAdapters.constructor": {
        "scope": "javascript",
        "prefix": "Sugar.js.cache.cacheAdapters.constructor",
        "body": "Sugar.js.cache.cacheAdapters.constructor()",
        "description": " Construct the SCacheAdapter instance with the settings passed in object format. See description bellow.\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.cache.SCache": {
        "scope": "javascript",
        "prefix": "Sugar.js.cache.SCache",
        "body": "new Sugar.js.cache.SCache()",
        "description": " Gives you the ability to manage cache through some defaults available adapters or using yours.\n This cache class take care of these features:\n - Standard and custom TTL by cache item\n - Delete cache items on expires or not\n\nExample:\n\n import SCache from '@coffeekraken/sugar/js/cache/SCache';\n const cache = new SCache({\n  ttl: '10s' // 10 seconds\n });\n cache.set('myCoolCacheItem', someData);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.cache.constructor": {
        "scope": "javascript",
        "prefix": "Sugar.js.cache.constructor",
        "body": "Sugar.js.cache.constructor()",
        "description": " Construct the SCache instance with the settings passed in object format. See description bellow.\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.cache.adapter": {
        "scope": "javascript",
        "prefix": "Sugar.js.cache.adapter",
        "body": "Sugar.js.cache.adapter",
        "description": " Access this cache instance adapter\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.cache.get": {
        "scope": "javascript",
        "prefix": "Sugar.js.cache.get",
        "body": "Sugar.js.cache.get()",
        "description": " Get a value back from the cache using the specified adapter in the settings\n\nExample:\n\n const myValue = myCache.get('coolValue');\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.cache.set": {
        "scope": "javascript",
        "prefix": "Sugar.js.cache.set",
        "body": "Sugar.js.cache.set()",
        "description": " Set a value to the cache system using the specified adapter with some settings like described bellow\n\nExample:\n\n const myValue = myCache.set('coolValue', { hello: 'world' }, {\n    ttl: 1000\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.cache.delete": {
        "scope": "javascript",
        "prefix": "Sugar.js.cache.delete",
        "body": "Sugar.js.cache.delete()",
        "description": " Delete an item in the cache by his name\n\nExample:\n\n await myCache.delete('coco');\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.cache.clear": {
        "scope": "javascript",
        "prefix": "Sugar.js.cache.clear",
        "body": "Sugar.js.cache.clear()",
        "description": " Delete all the items in the current cache instance\n\nExample:\n\n await myCache.clear();\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.array.splitEvery": {
        "scope": "javascript",
        "prefix": "Sugar.js.array.splitEvery",
        "body": "Sugar.js.array.splitEvery()",
        "description": " Split an array every N items\n\nExample:\n\n import splitEvery from '@coffeekraken/sugar/js/array/splitEvery';\n splitEvery([1,2,3,4,5,6,7,8,9], 3);\n // [[1,2,3],[4,5,6],[7,8,9]]\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.array.proxy": {
        "scope": "javascript",
        "prefix": "Sugar.js.array.proxy",
        "body": "Sugar.js.array.proxy()",
        "description": " This function override the passed array prototype to intercept changes made through\n\nExample:\n\n import proxy from '@coffeekraken/sugar/js/array/proxy';\n const myArray = proxy([1,2,3]);\n myArray.watch(['push','pop'], (watchObj) => {\n    // check the watchObj action\n    switch (watchObj.action) {\n      case 'Array.push':\n        // do something...\n      break;\n    }\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.array.watch": {
        "scope": "javascript",
        "prefix": "Sugar.js.array.watch",
        "body": "Sugar.js.array.watch()",
        "description": " This method allows you to specify which Array methods you want to watch by passing an array of methods names like ['push','pop'].\n You can also specify the handler function that will be called on each array updates, etc...\n\nExample:\n\n const watchId = myProxiedArray.watch(['push', 'pop'], (watchObj) => {\n    // do something...\n });\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.array.unwatch": {
        "scope": "javascript",
        "prefix": "Sugar.js.array.unwatch",
        "body": "Sugar.js.array.unwatch()",
        "description": " This methods allows you to unwatch a process started with the \"watch\" method.\n You have to pass as parameter the watchId that the \"watch\" method has returned you.\n\nExample:\n\n const watchId = myArray.watch('push', (obj) => //...);\n myArray.unwatch(watchId);\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.array.keysLast": {
        "scope": "javascript",
        "prefix": "Sugar.js.array.keysLast",
        "body": "Sugar.js.array.keysLast()",
        "description": " Make sure the passed array ends with the passed keys\n\nExample:\n\n import keysLast from '@coffeekraken/sugar/js/array/keysLast'\n keysLast(['a','b','d','g','c'], ['d','g'])\n // ['a','b','c','d','g']\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.array.keysFirst": {
        "scope": "javascript",
        "prefix": "Sugar.js.array.keysFirst",
        "body": "Sugar.js.array.keysFirst()",
        "description": " Make sure the passed array start with the passed keys\n\nExample:\n\n import keysFirst from '@coffeekraken/sugar/js/array/keysFirst'\n keysFirst(['a','b','d','g','c'], ['d','g'])\n // ['d','g','a','b','c']\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    },
    "Sugar.js.array.asyncForEach": {
        "scope": "javascript",
        "prefix": "Sugar.js.array.asyncForEach",
        "body": "Sugar.js.array.asyncForEach()",
        "description": " Allow to make some async foreach on your arrays\n\nExample:\n\n import asyncForEach from '@coffeekraken/sugar/js/array/asyncForEach';\n const waitFor = (ms) => new Promise(r => setTimeout(r, ms));\n asyncForEach([0,1,2,3], async (item) => {\n    await waitWor(50);\n    console.log(item);\n });\n // 0\n // 1\n // 2\n // 3\n\nAuthor: Olivier Bossel olivier.bossel@gmail.com https://olivierbossel.com"
    }
}
{"Sugar.node.url.queryStringToObject":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.url.queryStringToObject","body":" Sugar.js.url.queryStringToObject($1)","description":" Transform a query string into his object (key => pairs) representation\n\nExample:\n\n import queryStringToObject from '@coffeekraken/sugar/js/string/queryStringToObject'\n queryStringToObject('?var1=value1&var2=value2') // { var1: 'value1', var2: 'value2' }"},"Sugar.node.url.parseSchema":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.url.parseSchema","body":"Sugar.node.url.parseSchema(${1:url}, ${2:schema})","description":" This function take two arguments. The first one is the url to parse and the second is a schema to scan the url with.\n The schema describe the pathname of an url and tell's how to analyze it.\n Here's a little description with some example of schemas:\n - \"{param1}/{param2}/{param3}\": This schema describe that your Url must have 3 \"values\" named param1, param2 and param3\n    - If my Url is \"something.com/hello/world/plop\", my schema is respected and I can have access to the values through the \"schema.params.param1\", \"schema.params.param2\", etc...\n - \"{hello:string}/{world:number}/{?idx:number}\": This schema describe that the Url can have 3 \"values\" but the last one is optional\n    - If my Url is \"something.com/plop/3/1\", my schema is respected\n    - If my Url is \"something.com/plop/2\", my schema is respected\n    - If my Url is \"something.com/plop/hello/2\", my schema is not respected due to the fact that the param named \"world\" has to be a number\n\nExample:\n\n import parseSchema from '@coffeekraken/sugar/js/url/parseSchema';\n parseSchema('https://github.com/myApp/master/3', '{project:string}/{?branch:string}/{?idx:number}');\n // {\n //   match: true,\n //   errors: null,\n //   params: {\n //     project: {\n //       optional: false,\n //       raw: '{project:string}',\n //       type: 'string',\n //       value: 'myApp'\n //     },\n //     branch: {\n //       optional: true,\n //       raw: '{?branch:string},\n //       type: 'string',\n //       value: 'master'\n //     },\n //     idx: {\n //       optional: true,\n //       raw: '{?idx:number}',\n //       type: 'number',\n //       value: 3\n //     }\n //   }\n // }"},"Sugar.node.url.gravatarUrl":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.url.gravatarUrl","body":"Sugar.node.url.gravatarUrl(${1:email}, ${2:size})","description":" Return a gravatar url depending on the passed user email and size\n\nExample:\n\n import gravatarUrl from '@coffeekraken/sugar/js/util/gravatarUrl';\n console.log(gravatarUrl('olivier.bossel@gmail.com')); // https://www.gravatar.com/avatar/b5df60055b6287bb7c90c0078ce20a5f"},"Sugar.node.url.SUrl":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.url.SUrl","body":"new Sugar.node.url.SUrl()","description":" Simple class that is useful to parse a URL (or the current browser URL) and gives you back\n an instance that has all these values availables as well as functions to modify the instancied URL:\n - protocol: The protocol scheme of the URL (e.g. http:).\n - slashes: A boolean which indicates whether the protocol is followed by two forward slashes (//).\n - auth: Authentication information portion (e.g. username:password).\n - username: Username of basic authentication.\n - password: Password of basic authentication.\n - host: Host name with port number.\n - hostname: Host name without port number.\n - port: Optional port number.\n - pathname: URL path.\n - query: Parsed object containing query string\n - queryString: Origin query string from the URL\n - hash: The \"fragment\" portion of the URL including the pound-sign (#).\n - href: The full URL.\n - origin: The origin of the URL.\n - schema: The schema property gives you access to an object containing these properties (only if you have provided the settings.schema setting):\n    - match (true) {Boolean}: Tells you if your current url match the passed schema\n    - errors (null) {Object}: Gives you access to which param(s) is/are in error\n    - params (null) {Object}: Gives you access to each params specified in the schema with their values, etc...\n\n This class use internally the `url-parse` npm module that you can find here: https://www.npmjs.com/package/url-parse\n\nExample:\n\n import SUrl from '@coffeekraken/js/url/SUrl';\n const url = new SUrl('https://github.com/foo/bar');\n console.log(url.hostname); // => github.com\n url.hostname = 'youtube.com';\n\n const urlWithSchema = new SUrl('https://github.com/hello/world/2', {\n    schema: '{param1:string}/{param2}/{?param3:number}'\n });\n console.log(urlWithSchema.schema);\n // {\n //    match: true,\n //    errors: {},\n // }\n"},"Sugar.node.time.convert":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.time.convert","body":"Sugar.node.time.convert(${1:from}, ${2:to})","description":" This function allows you to convert time like seconds, ms, hours, minutes, etc... from one format to another\n\nExample:\n\n import convert from '@coffeekraken/sugar/js/time/convert';\n convert('10s', 'ms'); // => 10000"},"Sugar.node.time.STimer":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.time.STimer","body":"new Sugar.node.time.STimer()","description":" Class that let you create and handle timer with ease.\n With this class you can set some callback function that will be\n called each x ms or tell that you want your callbacks to be called\n a certain number of time during the timer time.\n\nExample:\n\n const STimer = require('@coffeekraken/sugar/js/time/STimer');\n const myTimer = new STimer(2000, {\n \t\ttickCount : 5\n })\n myTimer.onTick((myTimer) => {\n \t\t// do something here...\n })\n myTimer.start()"},"Sugar.node.terminal.parseHtml":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.terminal.parseHtml","body":"Sugar.node.terminal.parseHtml(${1:message})","description":" Parse the simple html tags to format the terminal message"},"Sugar.node.terminal.cursorPos":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.terminal.cursorPos","body":"Sugar.node.terminal.cursorPos()","description":" Return the terminal cursor position in {x,y} format.\n\nExample:\n\n const cursorPos = require('@coffeekraken/sugar/node/terminal/cursorPos');\n await cursorPos(); // => { x: 10, y: 20 }"},"Sugar.node.terminal.columns":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.terminal.columns","body":"Sugar.node.terminal.columns(${1:content}, ${2:settings})","description":" Display your content using columns. The number of columns is defined by the number of items in the content array\n\nExample:\n\n const columns = require('@coffeekraken/sugar/node/terminal/columns');\n columns([\n  'Hello world',\n  'How are you?'\n ]);"},"Sugar.node.terminal.center":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.terminal.center","body":"Sugar.node.terminal.center(${1:text}, ${2:settings})","description":" Allow to center one or more lines in the terminal depending on the process.env.STDOUT_PADDING environment variable\n Settings:\n - spaceChar (~) {String}: Which character to consider as a space that will be replaced by an actual space\n\nExample:\n\n const center = require('@coffeekraken/sugar/node/terminal/center');\n center('Hello world'); // => '                 Hello world'"},"Sugar.node.string.upperFirst":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.string.upperFirst","body":"Sugar.node.string.upperFirst(${1:string})","description":" Upper first\n\nExample:\n\n import upperFirst from '@coffeekraken/sugar/js/string/upperFirst'\n upperFirst('hello world') // Hello world"},"Sugar.node.string.unquote":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.string.unquote","body":"Sugar.node.string.unquote(${1:string}, ${2:quotesToRemove})","description":" Remove the quotes of a string\n Types of quotes removed :\n - `\"`, `'`, `”`, '`'\n\nExample:\n\n import unquote from '@coffeekraken/sugar/js/string/unquote'\n unquote(\"'Hello world'\") // \"Hello world\""},"Sugar.node.string.uniqid":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.string.uniqid","body":"Sugar.node.string.uniqid()","description":" Generate a uniqid string of 8 bytes. Work using the [uniqid](https://www.npmjs.com/package/uniqid) npm package under the hood.\n\nExample:\n\n import uniqid from '@coffeekraken/sugar/js/string/uniqid';\n console.log(uniqid()); // => 4n5pxq24"},"Sugar.node.string.uncamelize":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.string.uncamelize","body":"Sugar.node.string.uncamelize(${1:string}, ${2:separator})","description":" Uncamelize a string\n\nExample:\n\n import uncamelize from '@coffeekraken/sugar/js/string/uncamelize'\n uncamelize('helloWorldAndUniverse') // hello-world-and-universe"},"Sugar.node.string.toString":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.string.toString","body":"Sugar.node.string.toString(${1:value})","description":" Convert passed value to a string\n\nExample:\n\n import toString from '@coffeekraken/sugar/js/string/toString'\n toString({\n \tid:'hello'\n }) // '{\"id\":\"hello\"}'"},"Sugar.node.string.sprintf":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.string.sprintf","body":"Sugar.node.string.sprintf(${1:format}, ${2:...replacements})","description":" Javascript implementation of the sprintf php function.\n >For more infos, check [this github repository](https://github.com/alexei/sprintf.js)\n\nExample:\n\n import sprintf from '@coffeekraken/sugar/js/string/sprintf'\n sprintf('Hello %s', 'world') // Hello World\n const user = { name: 'Dolly' }\n sprintf('Hello %(name)s', user) // Hello Dolly"},"Sugar.node.string.splitEvery":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.string.splitEvery","body":"Sugar.node.string.splitEvery(${1:text}, ${2:every}, ${3:splitWords})","description":" Split a string every n chars either by taking care of not spliting the words, or by simply spliting without any attention to that...\n\nExample:\n\n const splitEvery = require('@coffeekraken/node/string/splitEvery');\n splitEvery('Hello World', 2, true); // => ['He','ll','o ','Wo','rl','d']"},"Sugar.node.string.rtrim":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.string.rtrim","body":"Sugar.node.string.rtrim(${1:string}, ${2:needle}, ${3:trimResult})","description":" Trim right a specified string\n\nExample:\n\n import rtrim from '@coffeekraken/sugar/js/string/rtrim'\n rtrim('Hello World', 'ld') // Hello Wor"},"Sugar.node.string.printf":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.string.printf","body":"Sugar.node.string.printf(${1:source}, ${2:values...})","description":" printf php equavalent\n\nExample:\n\n import printf from '@coffeekraken/sugar/js/string/printf';\n printf('Hello %s', 'world'); // => Hello world\n printf('Hello %s, I\\'m %s', 'world', 'John Doe'); // Hello world, I'm John Doe\n printf('Hello %(first)s, I\\'m %(name)s', { first : 'world', name : 'John Doe'}); // Hello world, I'm John Doe"},"Sugar.node.string.parse":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.string.parse","body":"Sugar.node.string.parse(${1:value})","description":" Parse a string and convert it into his native data type like date, number, boolean, etc...\n\nExample:\n\n import parse from '@coffeekraken/sugar/js/string/parse';\n parse('10'); // => 10"},"Sugar.node.string.ltrim":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.string.ltrim","body":"Sugar.node.string.ltrim(${1:string}, ${2:needle}, ${3:trimResult})","description":" Trim left a specified string\n\nExample:\n\n import ltrim from '@coffeekraken/sugar/js/string/ltrim'\n ltrim('Hello World', 'Hello') // World"},"Sugar.node.string.lowerFirst":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.string.lowerFirst","body":"Sugar.node.string.lowerFirst(${1:string})","description":" Lower first letter\n\nExample:\n\n import lowerFirst from '@coffeekraken/sugar/js/string/lowerFirst'\n lowerFirst('Hello world') // hello world"},"Sugar.node.string.crop":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.string.crop","body":"Sugar.node.string.crop(${1:text}, ${2:length}, ${3:settings})","description":" Allows you to crop a string at a certain length (this length take care of the croping characters like \"...\")\n\nExample:\n\n import crop from '@coffeekraken/sugar/js/string/crop';\n crop('Hello World', 10); // => Hello w..."},"Sugar.node.string.countLine":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.string.countLine","body":"Sugar.node.string.countLine(${1:line}, ${2:count})","description":" Count how many characters their is in the passed line.\n This function will exclude the characters like the html tags like <red>, etc...\n\nExample:\n\n const countLine = require('@coffeekraken/sugar/js/string/countLine');\n countLine('Hello <red>World</red>'); // 11"},"Sugar.node.string.camelize":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.string.camelize","body":"Sugar.node.string.camelize(${1:text}, ${2:charsRange})","description":" Camelize a string\n\nExample:\n\n import camelize from '@coffeekraken/sugar/js/string/camelize';\n camelize('hello world'); // => helloWorld"},"Sugar.node.string.autoCast":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.string.autoCast","body":"Sugar.node.string.autoCast(${1:string})","description":" Auto cast the string into the correct variable type\n\nExample:\n\n import autoCast from '@coffeekraken/sugar/js/strings/autoCast'\n autoCast('12') // => 12\n autoCast('window.HTMLElement') // => HTMLElement\n autoCast('{\"hello\":\"world\"}') // {hello:'world'}"},"Sugar.node.promise.SPromise":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.promise.SPromise","body":"new Sugar.node.promise.SPromise()","description":" This class works the same as the default Promise one. The difference is that you have more control on this one like\n the possibility to resolve it multiple times. Here's a list of the \"differences\" and the \"features\" that this class provide:\n\n - Pass the normal \"resolve\" and \"reject\" function to the passed executor\n - Pass a new function to the passed executor called \"trigger\" that let you launch your registered callbacks like \"then\", \"catch\", etc... but without resolving the master promise. Here's some examples:\n    - new SPromise((resolve, reject, trigger, cancel) => { trigger('then', 'myCoolValue'); }).then(value => { ... });\n    - new SPromise((resolve, reject, trigger, cancel) => { trigger('then,catch', 'myCoolValue') }).then(value => { ... });\n - Pass a new function to the passed executor called \"cancel\" that let you stop/cancel the promise execution without triggering your registered callbacks unless the \"cancel\" once...\n - Expose the normal \"then\" and \"catch\" methods to register your callbacks\n - Expose some new callbacks registration functions described here:\n    - Expose a method called \"resolved\" that let you register callbacks called only when the \"resolve\" function has been called\n    - Expose a method called \"rejected\" that let you register callbacks called only when the \"reject\" function has been called\n    - Expose a method called \"finally\" that let you register callbacks called when the \"resolve\" or \"reject\" function has been called\n    - Expose a method called \"cancel\" that let you register callbacks called only when the \"cancel\" function has been called\n - Every callbacks registration methods accept as first argument the number of time that your callback will be called at max. Here's some examples:\n    - new SPromise((...)).then(value => { // do something... }).catch(error => { // do something... }).start();\n    - new SPromise((...)).then(1, value => { // do something... }).catch(3, error => { // do something... }).start();\n - Expose a method called \"on\" that can be used to register callbacks the same as the \"then\", \"catch\", etc... methods but you can register a same callback function to multiple callbacks type at once:\n    - new SPromise((...)).on('then', value => { ... }).on('then,catch', value => { ... }).start();\n    - Specify the max number of time to call your callback function like so: new SPromise((...)).on('then:2', value => { ... }).on('then:1,catch', value => { ... }).start();\n - A new method called \"start\" is exposed. This method is useful when you absolutely need that your executor function is launched right after the callbacks registrations.\n    - If you don't call the \"start\" method, the executor function passed to the SPromise constructor will be called on the next javascript execution loop\n - Support the Promises chaining through the callbacks like to:\n    ```js\n      const result = await new SPromise((resolve, reject, trigger, cancel) => {\n        resolve('hello');\n      }).then(value => {\n        return new Promise((resolve) => {\n          setTimeout(() => {\n            resolve(value + 'World');\n          }, 1000);\n        });\n      }).then(value => {\n        return value + 'Promise';\n      }).start();\n      console.log(result); // => helloWorldPromise\n    ```\n\nExample:\n\n import SPromise from '@coffeekraken/sugar/js/promise/SPromise';\n function myCoolFunction() {\n    return new SPromise((resolve, reject, trigger, cancel) => {\n        // do something...\n        setInterval(() => {\n            // resolve the promise\n            resolve('something'); *\n        }, 1000);\n    });\n }\n\n // calling the function and get back the SPromise instance\n myCoolFunction().then(value => {\n    // do something here...\n }).then(1, value => {\n    // do something just once...\n }).catch(error => {\n    // do something with the returned reason of failure...\n }).start();"},"Sugar.node.object.whenProperty":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.object.whenProperty","body":"Sugar.node.object.whenProperty(${1:object}, ${2:property}, ${3:checkFn})","description":" Resolve a promise when the wanted property on the passed object exist or pass the check function provided\n\nExample:\n\n import whenProperty from '@coffeekraken/sugar/js/object/whenProperty'\n\n const myObj = {\n  \ttitle : 'Hello'\n };\n\n whenProperty(myObj, 'title').then((value) => {\n \t\t// the object has a title property now\n });\n\n // with a checkFn\n whenProperty(myObj, 'title', (newVal, oldVal) => {\n \t\t// when the property is 'Hello World'\n \t\treturn newVal === 'Hello World';\n }).then((value) => {\n \t\t// do something with your Hello World\n });\n\n setTimeout(() => {\n \t\t// this will resolve the promise\n \t\tmyObj.title = 'Hello World';\n },1000);"},"Sugar.node.object.watch":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.object.watch","body":"Sugar.node.object.watch(${1:target}, ${2:globs}, ${3:handlerFn})","description":" This method is a simple wrapper around the SWatch class that allows you to watch some action on object and arrays\n\nExample:\n\n import watch from '@coffeekraken/sugar/js/object/watch';\n let myObj = watch({\n    hello: 'world'\n }, '**', (event) => {\n    // do something when an event appends\n    console.log(event.action); // => Object.set\n });\n myObj.hello = 'plop';"},"Sugar.node.object.uid":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.object.uid","body":"Sugar.node.object.uid(${1:objects...}, ${2:format}, ${3:key})","description":" This function allows you to generate a uniqid based on the objects you pass as parameters.\n The uid is hashed into a SHA256 32bits string but you can specify it using the \"format\" parameter described above\n\nExample:\n\n const uid = require('@coffeekraken/sugar/node/object/uid');\n uid({ hello: 'world' }, { plop: 'coco' }); // => ijfw89uf98jhw9ef8whef87hw7e8q87wegfh78wgf87gw8fgw8e7fzghwz8efgw8fwzuheihgbweuzf"},"Sugar.node.object.toQueryString":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.object.toQueryString","body":"Sugar.node.object.toQueryString(${1:obj})","description":" Transform an object (key => pairs) to a query string like \"?var1=value1&var2\"\n\nExample:\n\n import toQueryString from '@coffeekraken/sugar/js/object/toQueryString'\n console.log(toQueryString({\n \tvalue1 : 'coco',\n \tvalue1 : 'plop'\n }));\n // => ?value1=coco&value2=plop"},"Sugar.node.object.sort":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.object.sort","body":"Sugar.node.object.sort(${1:object}, ${2:sort})","description":" Sort an object properties the same way as the Array.sort do it\n\nExample:\n\n import sortObject from '@coffeekraken/sugar/js/object/sort';\n sortObject({\n    coco: { weight: 10 },\n    lolo: { weight: 2 },\n    plop: { weight: 5 }\n }, (a, b) => {\n   return a.weight - b.weight;\n });\n // {\n //   lolo: { weight: 2 },\n //   plop: { weight: 5 },\n //   coco: { weight: 10 }\n // }"},"Sugar.node.object.set":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.object.set","body":"Sugar.node.object.set(${1:obj}, ${2:path}, ${3:value})","description":" Set an object value using a dotted object path like \"myObject.myProperty.myValue\" to set his position\n\nExample:\n\n import set from '@coffeekraken/sugar/js/object/set';\n set('myObject.cool.value', 'Hello world'); // => Hello world\n\n/"},"Sugar.node.object.propertyProxy":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.object.propertyProxy","body":"Sugar.node.object.propertyProxy(${1:obj}, ${2:property}, ${3:descriptor}, ${4:applySetterAtStart})","description":" Create a proxy for and object property.\n This gives you the possibility to process the data of the property\n when it is getted or setted.\n\nExample:\n\n import propertyProxy from '@coffeekraken/sugar/js/object/propertyProxy';\n const myObject = {\n \t\ttitle : 'World'\n };\n // create the proxy\n propertyProxy(myObject, 'title', {\n \t\tget : (value) => {\n \t\t\treturn `Hello ${value}`;\n \t\t},\n \t\tset : (value) => {\n \t\t\treturn `Youhou ${value}`;\n \t\t}\n });\n console.log(myObject.title) => 'Hello World';\n myObject.title = 'Universe';\n console.log(myObject.title) => 'Hello Youhou Universe';"},"Sugar.node.object.map":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.object.map","body":"Sugar.node.object.map(${1:object}, ${2:processor})","description":" This is the same function as the \"Array.map\" but for objects. It will iterate over all the properties\n of the passed object and pass the value to your process function. It will then save the property\n with your processed value\n\nExample:\n\n import map from '@coffeekraken/sugar/js/object/map';\n const myObject = {\n    hello: 'world',\n    cat: 'Nelson'\n };\n map(myObject, (value, prop) => {\n    return prop === 'hello' ? 'universe' : value;\n });\n {\n    hello: 'universe',\n    cat: 'Nelson'\n }"},"Sugar.node.object.getKeyByValue":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.object.getKeyByValue","body":"Sugar.node.object.getKeyByValue(${1:object}, ${2:value})","description":" Return the key that correspond to the passed value in the passed object\n\nExample:\n\n import getKeyByValue from '@coffeekraken/sugar/js/object/getKeyByValue';\n console.log(getKeyByValue({ hello: 'world' }, 'world')); // => hello"},"Sugar.node.object.get":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.object.get","body":"Sugar.node.object.get(${1:obj}, ${2:path})","description":" Retreive an object value using a dotted path like \"myObject.myProperty.myValue\"\n\nExample:\n\n import get from '@coffeekraken/sugar/js/object/get';\n get('myObject.cool.value'); // => 'Hello world'\n\n/"},"Sugar.node.object.flatten":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.object.flatten","body":"Sugar.node.object.flatten(${1:object}, ${2:separation}, ${3:flattenArrays})","description":" Transform the passed multiple level object into a single level one\n\nExample:\n\n import flatten from '@coffeekraken/sugar/js/object/flatten';\n flatten({\n    hello: {\n      world: 'Coco'\n    }\n });"},"Sugar.node.object.filter":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.object.filter","body":"Sugar.node.object.filter(${1:object}, ${2:filter})","description":" Allow to filter an object using a function. It works the same as the filter method on the Array object type.\n The passed filter function will have as parameter each object properties and must return true or false depending if you want the\n passed property in the filtered object\n\nExample:\n\n import filter from '@coffeekraken/sugar/js/object/filter';\n filter({\n    coco: 'hello',\n    plop: true\n }, (item, name) => typeof item === 'string');\n // { coco: 'hello' }"},"Sugar.node.object.ensureExists":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.object.ensureExists","body":"Sugar.node.object.ensureExists(${1:obj}, ${2:path}, ${3:value})","description":" Pass a string like \"my.cool.object\" and the value it has to be and this function will ensure that this deep object exist\n\nExample:\n\n import ensureExists from '@coffeekraken/sugar/js/object/ensureExists';\n const myObj = { hello: 'world' }«\n ensureExists(myObj, 'cool.object', {});\n // { hello: 'world', cool: { object: {} } }"},"Sugar.node.object.diff":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.object.diff","body":"Sugar.node.object.diff(${1:object1}, ${2:object2}, ${3:settings})","description":" This function take two objects and return an object that contains only what has been changed between the two.\n This function is a simple wrapper around the nice object-diff package from Thomas Jensen that you can find here: https://www.npmjs.com/package/object-diff\n\nExample:\n\n import diff from '@coffeekraken/sugar/js/object/diff';\n const myObject1 = {\n    hello: 'world',\n    plop: 'yop'\n };\n const myObject2 = {\n    coco: 'plop',\n    hello: 'hey!',\n    plop: 'yop'\n };\n diff(myObject1, myObject2);\n {\n    coco: 'plop',\n    hello: 'hey!'\n }"},"Sugar.node.object.delete":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.object.delete","body":"Sugar.node.object.delete(${1:object}, ${2:dotPath})","description":" Delete an object property using a dotPath like \"something.else\"\n\nExample:\n\n import delete from '@coffeekraken/sugar/js/object/delete';\n const myObject = {\n    hello: 'world',\n    plop: 'yop'\n };\n delete(myObject, 'plop');"},"Sugar.node.object.deepProxy":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.object.deepProxy","body":"Sugar.node.object.deepProxy(${1:object}, ${2:handlerFn})","description":" This function allows you to add Proxy to an object in deep fashion.\n Normally the Proxy process only the level on which it has been added. Here we add Proxy to all the\n object levels and to new properties as well.\n\nExample:\n\n import deepProxy from '@coffeekraken/sugar/js/object/deepProxy';\n const a = deepProxy({\n    hello: 'world'\n }, {\n    set: (obj) => {\n      // do something with the update object\n    }\n });\n a.hello = 'coco';"},"Sugar.node.object.deepMergeErase":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.object.deepMergeErase","body":"Sugar.node.object.deepMergeErase(${1:obj})","description":" This function allows you to tell the deepMerge one to use ONLY the passed value as final value and to not merge it as normal...\n This seemd maybe a little bit weird but it will be more understandable in the example bellow...\n\nExample:\n\n import deepMerge from '@coffeekraken/sugar/node/object/deepMerge';\n import deepMergeErase from '@coffeekraken/sugar/node/object/deepMergeErase';\n const obj1 = {\n    value: {\n      hello: 'world',\n      coco: 'plop'\n    }\n };\n const obj2 = {\n    value: deepMergeErase({\n      yop: 'cool value'\n    })\n };\n deepMerge(obj1, obj2);\n {\n    value: {\n      yop: 'cool value'\n    }\n }"},"Sugar.node.object.deepMerge":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.object.deepMerge","body":"Sugar.node.object.deepMerge(${1:objects...})","description":" Deep merge one object with another and return the merged object result\n\nExample:\n\n import deepMerge from '@coffeekraken/sugar/node/object/deepMerge';\n deepMerge({a: {b: {c: 'c', d: 'd'}}}, {a: {b: {e: 'e', f: 'f'}}});\n // => { a: { b: { c: 'c', d: 'd', e: 'e', f: 'f' } } }"},"Sugar.node.object.constructorName":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.object.constructorName","body":"Sugar.node.object.constructorName(${1:obj})","description":" Return the constructor name of the passed object\n\nExample:\n\n import constructorName from '@coffeekraken/sugar/js/object/constructorName';\n class MyCoolClass {\n \t\t// class implementation...\n }\n const myObj = new MyCoolClass();\n console.log(constructorName(myObj)); => MyCoolClass"},"Sugar.node.object.SWatch":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.object.SWatch","body":"new Sugar.node.object.SWatch()","description":" This class allows you to easily monitor some object properties and get the new and old value of it\n\nExample:\n\n // create the watcher instance\n const watcher = new SWatch();\n\n // object to watch\n let myObject = {\n \t\ttitle : 'Hello World'\n };\n\n // watch the object\n watcher.watch(myObject, 'title', (newVal, oldVal) => {\n  \t// do something when the title changes\n });\n\n // update the title\n myObject.title = 'Hello Universe';"},"Sugar.node.number.pad":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.number.pad","body":"Sugar.node.number.pad(${1:number}, ${2:width}, ${3:character})","description":" Pad a number n of x 0 or another passed character\n\nExample:\n\n import pad from '@coffeekraken/sugar/js/numbers/pad'\n pad(123, 4) // 0123"},"Sugar.node.number.constrain":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.number.constrain","body":"Sugar.node.number.constrain(${1:value}, ${2:min}, ${3:max})","description":" Constrain a value between a min and a max value\n\nExample:\n\n import constrain from '@coffeekraken/sugar/js/numbers/constrain'\n constrain(100, 0, 50) // 50"},"Sugar.node.log.warn":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.log.warn","body":"Sugar.node.log.warn(${1:message})","description":" This function is a simple wrapper around the SLog class that let you use the warn features quickly\n\nExample:\n\n import warn from '@coffeekraken/sugar/js/log/warn';\n warn('Hello world');"},"Sugar.node.log.log":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.log.log","body":"Sugar.node.log.log(${1:message})","description":" This function is a simple wrapper around the SLog class that let you use the log features quickly\n\nExample:\n\n import log from '@coffeekraken/sugar/js/log/log';\n log('Hello world');"},"Sugar.node.log.info":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.log.info","body":"Sugar.node.log.info(${1:message})","description":" This function is a simple wrapper around the SLog class that let you use the info features quickly\n\nExample:\n\n import info from '@coffeekraken/sugar/js/log/info';\n info('Hello world');"},"Sugar.node.log.htmlPresets.mail":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.log.htmlPresets.mail","body":"Sugar.node.log.htmlPresets.mail(${1:text})","description":" Replace all the \"log\" html tags like \"<red>\", \"<bold>\", etc... with the corresponding syntax for mail formating"},"Sugar.node.log.htmlPresets.files":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.log.htmlPresets.files","body":"Sugar.node.log.htmlPresets.files(${1:text})","description":" Replace all the \"log\" html tags like \"<red>\", \"<bold>\", etc... with the corresponding syntax for the files"},"Sugar.node.log.htmlPresets.console":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.log.htmlPresets.console","body":"Sugar.node.log.htmlPresets.console(${1:text})","description":" Replace all the \"log\" html tags like \"<red>\", \"<bold>\", etc... with the corresponding syntax for the terminal"},"Sugar.node.log.error":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.log.error","body":"Sugar.node.log.error(${1:message})","description":" This function is a simple wrapper around the SLog class that let you use the error features quickly\n\nExample:\n\n import error from '@coffeekraken/sugar/js/log/error';\n error('Hello world');"},"Sugar.node.log.debug":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.log.debug","body":"Sugar.node.log.debug(${1:message})","description":" This function is a simple wrapper around the SLog class that let you use the debug features quickly\n\nExample:\n\n import debug from '@coffeekraken/sugar/js/log/debug';\n debug('Hello world');"},"Sugar.js.log.SLogFilesAdapter":{"scope":"javascript,node,nodejs","prefix":"Sugar.js.log.SLogFilesAdapter","body":"new Sugar.js.log.SLogFilesAdapter()","description":" This class allows you to log your messages, errors, etc... easily and store them in some files where you want on your file system.\n\nExample:\n\n conse SLog = require('@coffeekraken/sugar/js/log/SLog');\n const SLogFilesAdapter = require('@coffeekraken/sugar/node/log/adapters/SLogFilesAdapter');\n const logger = new SLog({\n    adapters: [\n      new SLogFilesAdapter()\n    ]\n });\n logger.log('Something cool happend...');"},"Sugar.js.log.constructor":{"scope":"javascript,node,nodejs","prefix":"Sugar.js.log.constructor","body":"Sugar.js.log.constructor(${1:settings})","description":" Constructor"},"Sugar.js.log.log":{"scope":"javascript,node,nodejs","prefix":"Sugar.js.log.log","body":"Sugar.js.log.log(${1:message}, ${2:level})","description":" This is the main method of the logger. It actually log the message passed as parameter to the confilesole\n\nExample:\n\n await consoleAdapter.log('hello world');"},"Sugar.node.log.adapters.SLogConsoleAdapter":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.log.adapters.SLogConsoleAdapter","body":"new Sugar.node.log.adapters.SLogConsoleAdapter()","description":" This class allows you to log your messages, errors, etc... easily through some adapters that cover some targets like \"console\" of course,\n \"mail\", \"slack\", etc...\n\nExample:\n\n import SLog from '@coffeekraken/sugar/js/log/SLog';\n import SLogConsoleAdapter from '@coffeekraken/sugar/js/log/adapters/SLogConsoleAdapter';\n const logger = new SLog({\n    adapters: [\n      new SLogConsoleAdapter()\n    ]\n });\n logger.log('Something cool happend...');"},"Sugar.node.log.SLog":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.log.SLog","body":"new Sugar.node.log.SLog()","description":" This class allows you to log your messages, errors, etc... easily through some adapters that cover some targets like \"console\" of course,\n \"mail\", \"slack\", etc...\n\nExample:\n\n import SLog from '@coffeekraken/sugar/js/log/SLog';\n import SLogConsoleAdapter from '@coffeekraken/sugar/js/log/adapters/SLogConsoleAdapter';\n const logger = new SLog({\n    adapters: {\n      console: new SLogConsoleAdapter()\n    }\n });\n logger.log('Something cool happend...');"},"Sugar.node.is.isYyyymmddDate":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.isYyyymmddDate","body":"Sugar.node.is.isYyyymmddDate(${1:date})","description":" Check if is a valid yyyy.mm.dd date\n This will match : yyyy.mm.dd | yyyy/mm/dd | yyyy-mm-dd | yyyy mm dd\n\nExample:\n\n import isYyyymmddDate from '@coffeekraken/sugar/js/is/yyyymmddDate'\n if (isYyyymmddDate('2018.12.25')) {\n     // do something cool\n }"},"Sugar.node.is.windows":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.windows","body":"Sugar.node.is.windows()","description":" Check if the app run on mac OS X or not\n\nExample:\n\n import isOsx from '@coffeekraken/sugar/js/is/windows';\n isWindows(); // => true"},"Sugar.node.is.isUrl":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.isUrl","body":"Sugar.node.is.isUrl(${1:value})","description":" Check if the passed value is a valid url\n\nExample:\n\n import isUrl from '@coffeekraken/sugar/js/is/url';\n isUrl('http://google.com') => true\n isUrl('ftp://web.coco.com:2222') => true\n isUrl('hello') => false\n/"},"Sugar.node.is.isUcBrowser":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.isUcBrowser","body":"Sugar.node.is.isUcBrowser(${1:ua})","description":" Detect if is the UC stock browser that is running the page\n\nExample:\n\n import isUcBrowser from '@coffeekraken/sugar/js/is/ucBrowser'\n if (isUcBrowser()) {\n   // do something\n }"},"Sugar.node.is.isTablet":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.isTablet","body":"Sugar.node.is.isTablet(${1:ua})","description":" Detect if is a tablet device\n\nExample:\n\n import isTablet from '@coffeekraken/sugar/js/is/tablet'\n if (isTablet()) {\n   // do something cool...\n }"},"Sugar.node.is.isString":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.isString","body":"Sugar.node.is.isString(${1:value})","description":" Check if the passed value is a js String\n\nExample:\n\n import isString from '@coffeekraken/sugar/js/is/String'\n if (isString({}) {\n   // do something\n }"},"Sugar.node.is.isSamsumgBrowser":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.isSamsumgBrowser","body":"Sugar.node.is.isSamsumgBrowser(${1:ua})","description":" Detect if is the samsung stock browser that is running the page\n\nExample:\n\n import isSamsumgBrowser from '@coffeekraken/sugar/js/is/samsungBrowser'\n if (isSamsumgBrowser()) {\n   // do something\n }"},"Sugar.node.is.isSafari":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.isSafari","body":"Sugar.node.is.isSafari(${1:ua})","description":" Detect if is safari\n\nExample:\n\n import isSafari from '@coffeekraken/sugar/js/is/safari'\n if (isSafari()) {\n   // do something cool\n }"},"Sugar.node.is.isRegexp":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.isRegexp","body":"Sugar.node.is.isRegexp(${1:value})","description":" Check if the passed value is a js Regexp\n\nExample:\n\n import isRegexp from '@coffeekraken/sugar/js/is/regexp'\n if (isRegexp(/^hello$/g) {\n   // do something\n }"},"Sugar.node.is.plainObject":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.plainObject","body":"Sugar.node.is.plainObject(${1:object})","description":" Check if the passed object (or array of objects) is/are plain object(s)\n\nExample:\n\n const isPlainObject = require('@coffeekraken/sugar/js/is/plainObject');\n isPlainObject({ hello: 'world'}); // => true"},"Sugar.node.is.isPhone":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.isPhone","body":"Sugar.node.is.isPhone(${1:ua})","description":" Detect if is a phone device\n\nExample:\n\n import isPhone from '@coffeekraken/sugar/js/is/phone'\n if (isPhone()) {\n   // do something cool...\n }"},"Sugar.node.is.path":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.path","body":"Sugar.node.is.path(${1:path}, ${2:checkExistence})","description":" Check if the passed string is a valid path or not\n\nExample:\n\n const isPath = require('@coffeekraken/sugar/node/is/path');\n isPath('hello/world'); // => true"},"Sugar.node.is.osx":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.osx","body":"Sugar.node.is.osx()","description":" Check if the app run on mac OS X or not\n\nExample:\n\n import isOsx from '@coffeekraken/sugar/js/is/osx';\n isOsx(); // => true"},"Sugar.node.is.isOpera":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.isOpera","body":"Sugar.node.is.isOpera(${1:ua})","description":" Detect if is opera\n\nExample:\n\n import isOpera from '@coffeekraken/sugar/js/is/opera'\n if (isOpera()) {\n   // do something cool\n }"},"Sugar.node.is.isOdd":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.isOdd","body":"Sugar.node.is.isOdd(${1:value})","description":" Check if a number is odd or not\n\nExample:\n\n import isOdd from '@coffeekraken/sugar/js/is/odd'\n isOdd(1) // true\n isOdd(2) // false\n/"},"Sugar.node.is.isObject":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.isObject","body":"Sugar.node.is.isObject(${1:value})","description":" Check if the passed value is a js object\n\nExample:\n\n import isObject from '@coffeekraken/sugar/js/is/object'\n if (isObject({}) {\n   // do something\n }"},"Sugar.node.is.isNumber":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.isNumber","body":"Sugar.node.is.isNumber(${1:value})","description":" Check if the passed value is a number\n\nExample:\n\n import isNumber from '@coffeekraken/sugar/js/is/number';\n isNumber(12) => true\n isNumber(22.3) => true\n isNumber('20') => false"},"Sugar.node.is.isNode":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.isNode","body":"Sugar.node.is.isNode()","description":" Check if the current script is running under node runtime or not...\n\nExample:\n\n import isNode from '@coffeekraken/sugar/js/is/node';\n isNode(); // => true"},"Sugar.node.is.isMobile":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.isMobile","body":"Sugar.node.is.isMobile(${1:ua})","description":" Detect if is a mobile device (phone or tablet)\n\nExample:\n\n import isMobile from 'coffeekraken-sugar/js/is/mobile'\n if (isMobile()) {\n   // do something cool...\n }"},"Sugar.node.is.isMmddyyyyDate":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.isMmddyyyyDate","body":"Sugar.node.is.isMmddyyyyDate(${1:date})","description":" Check if is a valid mm.dd.yyyy date\n This will match : mm.dd.yyyy | mm/dd/yyyy | mm-dd-yyyy | mm dd yyyy\n\nExample:\n\n import isMmddyyyyDate from '@coffeekraken/sugar/js/is/mmddyyyyDate'\n if (isMmddyyyyDate('12.25.2018')) {\n     // do something cool\n }"},"Sugar.node.is.linux":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.linux","body":"Sugar.node.is.linux()","description":" Check if the app run on linux\n\nExample:\n\n import isLinux from '@coffeekraken/sugar/js/is/linux';\n isLinux(); // => true"},"Sugar.node.is.isJson":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.isJson","body":"Sugar.node.is.isJson(${1:value})","description":" Check if the passed value is a valid json\n\nExample:\n\n import isJson from '@coffeekraken/sugar/js/is/json'\n if (isJson('[{id:10}]')) {\n   // do something\n }"},"Sugar.node.is.isJs":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.isJs","body":"Sugar.node.is.isJs()","description":" Check if the current script is running under javascript runtime or not...\n\nExample:\n\n import isJs from '@coffeekraken/sugar/js/is/js';\n isJs(); // => true"},"Sugar.node.is.isInteger":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.isInteger","body":"Sugar.node.is.isInteger(${1:value})","description":" Check if the passed value is an integer\n\nExample:\n\n import isInteger from '@coffeekraken/sugar/js/is/integer';\n isInteger(10) => true\n isInteger('hello') => false"},"Sugar.node.is.isIe":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.isIe","body":"Sugar.node.is.isIe(${1:ua})","description":" Detect if is ie (internet explorer)\n\nExample:\n\n import isIe from '@coffeekraken/sugar/js/is/ie'\n if (isIe()) {\n   // do something cool\n }"},"Sugar.node.is.isFunction":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.isFunction","body":"Sugar.node.is.isFunction(${1:value})","description":" Check if the passed value is a js function\n\nExample:\n\n import isFunction from '@coffeekraken/sugar/js/is/function'\n if (isFunction(function() {})) {\n   // do something\n }"},"Sugar.node.is.isFirefox":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.isFirefox","body":"Sugar.node.is.isFirefox(${1:ua})","description":" Detect if is firefox\n\nExample:\n\n import isFirefox from '@coffeekraken/sugar/js/is/firefox'\n if (isFirefox()) {\n   // do something cool\n }"},"Sugar.node.is.isEven":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.isEven","body":"Sugar.node.is.isEven(${1:value})","description":" Check if a number is even or not\n\nExample:\n\n import isEven from '@coffeekraken/sugar/js/is/even'\n isEven(1) // false\n isEven(2) // true\n/"},"Sugar.node.is.isEmail":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.isEmail","body":"Sugar.node.is.isEmail(${1:value})","description":" Check if the passed value is a valid email address\n\nExample:\n\n import isEmail from '@coffeekraken/sugar/js/is/email';\n isEmail('john.doe@gmail.com') => true\n isEmail('plop@yop.com') => true\n isEmail('hello') => false"},"Sugar.node.is.isEdge":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.isEdge","body":"Sugar.node.is.isEdge(${1:ua})","description":" Detect if is edge\n\nExample:\n\n import isEdge from '@coffeekraken/sugar/js/is/edge'\n if (isEdge()) {\n   // do something cool\n }"},"Sugar.node.is.isDdmmyyyyDate":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.isDdmmyyyyDate","body":"Sugar.node.is.isDdmmyyyyDate(${1:date})","description":" Check if is a valid dd.mm.yyyy date\n This will match : dd.mm.yyyy | dd/mm/yyyy | dd-mm-yyyy | dd mm yyyy\n\nExample:\n\n import isDdmmyyyyDate from '@coffeekraken/sugar/js/is/ddmmyyyyDate'\n if (isDdmmyyyyDate('20.12.2018')) {\n     // do something cool\n }"},"Sugar.node.is.isColor":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.isColor","body":"Sugar.node.is.isColor(${1:value})","description":" Check if the passed value is a color\n\nExample:\n\n import isColor from '@coffeekraken/sugar/js/is/color';\n isColor('red') => true\n isColor('#fff') => true\n isColor('hello') => false"},"Sugar.node.is.class":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.class","body":"Sugar.node.is.class(${1:variable})","description":" Check if the passed variable (or array of variables) is/are plain variable(s)\n\nExample:\n\n import isClass = from '@coffeekraken/sugar/js/is/class';\n isClass({ hello: 'world'}); // => false\n const myCoolClass = class Coco{};\n isClass(myCoolClass); // => true"},"Sugar.node.is.isChrome":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.isChrome","body":"Sugar.node.is.isChrome(${1:ua})","description":" Detect if is chrome\n\nExample:\n\n import isChrome from '@coffeekraken/sugar/js/is/chrome'\n if (isChrome()) {\n   // do something cool\n }"},"Sugar.node.is.isBoolean":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.isBoolean","body":"Sugar.node.is.isBoolean(${1:value})","description":" Check if the passed value is a js Boolean\n\nExample:\n\n import isBoolean from '@coffeekraken/sugar/js/is/boolean'\n if (isBoolean(true) {\n   // do something\n }"},"Sugar.node.is.isBase64":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.isBase64","body":"Sugar.node.is.isBase64(${1:value})","description":" Check if the passed value is a base 64 string\n\nExample:\n\n import isBase64 from '@coffeekraken/sugar/js/is/base64'\n if (isBase64(true) {\n   // do something\n }"},"Sugar.node.is.isArray":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.is.isArray","body":"Sugar.node.is.isArray(${1:value})","description":" Check if the passed value is a js Array\n\nExample:\n\n import isArray from '@coffeekraken/sugar/js/is/array'\n if (isArray([]) {\n   // do something\n }"},"Sugar.node.http.request":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.http.request","body":"Sugar.node.http.request(${1:settings})","description":" Easily create and send an http request. This will return an instance of the SAjax class.\n\nExample:\n\n import request from '@coffeekraken/sugar/js/http/request';\n request({\n    url: 'https://api.github.com/something/cool',\n    method: 'get'\n }).then(response => {\n    // do something...\n });"},"Sugar.node.http.SRequestConfig":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.http.SRequestConfig","body":"new Sugar.node.http.SRequestConfig()","description":" Class that represent an ajax request that will be passed to an SRequest instance.\n All the axios settings are supported by this class\n\nExample:\n\n const request = new SRequestConfig({\n  \turl : '/api/...',\n  \tmethod : 'GET',\n  \tdata : {\n  \t\tmyVar : 'myVal'\n  \t}\n });"},"Sugar.node.http.SRequest":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.http.SRequest","body":"new Sugar.node.http.SRequest()","description":" Class that allows to simply handle ajax requests with ease.\n This class give some useful features like :\n - Promise support\n - Recursive requests\n\nExample:\n\n const request = new SRequest({\n \t\turl : 'api/...',\n \t\tmethod : 'GET',\n \t\tdata : {\n \t\t\tmyVar : 'myVal'\n \t\t}\n });\n\n // send and listen for data\n request.send().then((response) => {\n \t\t// do something with response here...\n }).catch((error) => {\n \t\t// something went wrong...\n });"},"Sugar.node.html.toString":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.html.toString","body":"Sugar.node.html.toString(${1:html}, ${2:deep})","description":" Return the string version of a dom node or the dom node and his children\n\nExample:\n\n import toString from '@coffeekraken/sugar/js/string/toString'\n const myDomNode = document.querySelector('.my-dom-node')\n toString(myDomNode, false) // <div class=\"my-dom-node\"></div>"},"Sugar.node.html.striptags":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.html.striptags","body":"Sugar.node.html.striptags(${1:html}, ${2:allowableTags}, ${3:tagReplacement})","description":" Strip tags of an html string.\n This is a simple wrapper of the nice \"striptags\" package that you can find here: https://www.npmjs.com/package/striptags\n\nExample:\n\n import striptags from '@coffeekraken/sugar/js/string/striptags'\n striptags('<p><span>Hello</span> world</p>', '<span>') // <span>Hello</span> world"},"Sugar.node.html.replaceTags":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.html.replaceTags","body":"Sugar.node.html.replaceTags(${1:text}, ${2:tags})","description":" Replace all the html tags that you specify by something else that you can fully choose\n\nExample:\n\n import replaceTags from '@coffeekraken/sugar/js/html/replaceTags';\n replaceTags('<span>Hello</span> world', {\n    span: (tag, content) => `<div>${content}</div>`; // => <div>Hello</div> world\n });"},"Sugar.node.google.SGoogleCustomSearch":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.google.SGoogleCustomSearch","body":"new Sugar.node.google.SGoogleCustomSearch()","description":" This class let you make with ease search requests to the google custom search service\n with useful features like:\n - Simple pagination system\n - Promise support\n\nExample:\n\n // create a google search instance\n const googleSearch = new SGoogleCustomSearch('myApiKey', 'myCustomSearchContextKey');\n\n // make a search...\n googleSearch.search('hello world').then((response) => {\n \t\t// do something with the google response...\n });\n\n // get the nexts results\n googleSearch.next().then((response) => {\n \t\t// do something with the new response...\n });"},"Sugar.node.geom.distanceBetween":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.geom.distanceBetween","body":"Sugar.node.geom.distanceBetween(${1:point1}, ${2:point2})","description":" Get the distance between two points\n\nExample:\n\n import distanceBetween from '@coffeekraken/sugar/js/geom/2d/distanceBetween'\n distanceBetween({\n \tx: 10, y: 20\n }, {\n \tx: 10, y: 30\n }) // 10"},"Sugar.node.geom.circleConstrain":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.geom.circleConstrain","body":"Sugar.node.geom.circleConstrain(${1:center}, ${2:radius}, ${3:point})","description":" Take as parameter a central point, a radius and a points to constrain inside the circle defined by the radius\n\nExample:\n\n import circleConstrain from '@coffeekraken/sugar/js/geom/2d/circleConstrain'\n circleConstrain({\n \tx: 10, y: 10\n }, 10, {\n \tx: 10, y: 5\n })"},"Sugar.node.function.throttle":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.function.throttle","body":"Sugar.node.function.throttle()","description":" This utils function allows you to make sure that a function that will normally be called\n several times, for example during a scroll event, to be called once each threshhold time\n\nExample:\n\n import throttle from '@coffeekraken/sugar/js/function/throttle';\n const myThrottledFn = throttle(() => {\n \t\t// my function content that will be\n \t\t// executed only once each second\n }, 1000);\n\n document.addEventListener('scroll', (e) => {\n \t\t// call my throttled function\n \t\tmyThrottledFn();\n });"},"Sugar.node.function.debounce":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.function.debounce","body":"Sugar.node.function.debounce()","description":" This utils function allows you to make sure that a function that will normally be called\n several times, for example during a scroll event, to be called only once after\n the delay passed\n\nExample:\n\n import debounce from '@coffeekraken/sugar/js/function/debounce';\n const myDebouncedFn = debounce(() => {\n \t\t// my function content that will be\n \t\t// executed only once after the 1 second delay\n }, 1000);\n\n document.addEventListener('scroll', (e) => {\n \t\t// call my debounced function\n \t\tmyDebouncedFn();\n });"},"Sugar.node.function.setRecursiveTimeout":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.function.setRecursiveTimeout","body":"Sugar.node.function.setRecursiveTimeout(${1:fn}, ${2:timeout}, ${3:duration}, ${4:spread})","description":" This utils function allows you to call a passed function each x time during a certain duration\n\nExample:\n\n import setRecursiveTimeout from '@coffeekraken/sugar/js/function/setRecursiveTimeout';\n setRecursiveTimeout(() => {\n \t\t// I will be executed 10 times\n }, 1000, 10000);"},"Sugar.node.fs.writeJsonSync":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.fs.writeJsonSync","body":"Sugar.node.fs.writeJsonSync(${1:path}, ${2:object}, ${3:options})","description":" Write a JSON file. If don't exist, will be created as well as the directory structure if needed... (sync)\n\nExample:\n\n const writeJsonSync = require('@coffeekraken/node/fs/writeJsonSync');\n try {\n    writeJsonSync('my/cool/file.json', { hello: 'world' });\n } catch(e) {}"},"Sugar.node.fs.writeJson":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.fs.writeJson","body":"Sugar.node.fs.writeJson(${1:path}, ${2:object}, ${3:options})","description":" Write a JSON file. If don't exist, will be created as well as the directory structure if needed... ( (async)\n\nExample:\n\n const writeJson = require('@coffeekraken/node/fs/writeJson');\n writeJson('my/cool/file.json', { hello: 'world' }).then(() => {\n    // do something on complete...\n });"},"Sugar.node.fs.writeFileSync":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.fs.writeFileSync","body":"Sugar.node.fs.writeFileSync(${1:path}, ${2:data}, ${3:options})","description":" Write a file. If don't exist, will be created as well as the directory structure if needed... (sync)\n\nExample:\n\n const writeFileSync = require('@coffeekraken/node/fs/writeFileSync');\n try {\n    writeFileSync('my/cool/file.txt', 'Hello World');\n } catch(e) {}"},"Sugar.node.fs.writeFile":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.fs.writeFile","body":"Sugar.node.fs.writeFile(${1:path}, ${2:data}, ${3:options})","description":" CWrite a file. If don't exist, will be created as well as the directory structure if needed... ( (async)\n\nExample:\n\n const writeFile = require('@coffeekraken/node/fs/writeFile');\n writeFile('my/cool/file.txt', 'Hello World').then(() => {\n    // do something on complete...\n });"},"Sugar.node.fs.tmpDir":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.fs.tmpDir","body":"Sugar.node.fs.tmpDir()","description":" Return the os temp directory path\n\nExample:\n\n const tmpDir = require('@coffeekraken/node/fs/tmpDir');\n tmpDir(); // => '/private/var/folders/3x/jf5977fn79jbglr7rk0tq4d00000gn/T'"},"Sugar.node.fs.removeSync":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.fs.removeSync","body":"Sugar.node.fs.removeSync(${1:path})","description":" Removes a file or directory. The directory can have contents. If the path does not exist, silently does nothing. Like rm -rf (sync)\n\nExample:\n\n const removeSync = require('@coffeekraken/node/fs/removeSync');\n try {\n    removeSync('my/cool/file.json');\n } catch(e) {}"},"Sugar.node.fs.remove":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.fs.remove","body":"Sugar.node.fs.remove(${1:path})","description":" Removes a file or directory. The directory can have contents. If the path does not exist, silently does nothing. Like rm -rf (async)\n\nExample:\n\n const remove = require('@coffeekraken/node/fs/remove');\n remove('my/cool/file.json').then(() => {\n    // do something on complete...\n });"},"Sugar.node.fs.moveSync":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.fs.moveSync","body":"Sugar.node.fs.moveSync(${1:src}, ${2:dest})","description":" Moves a file or directory, even across devices (sync)\n\nExample:\n\n const moveSync = require('@coffeekraken/node/fs/moveSync');\n try {\n    moveSync('my/cool/dir', 'another/place/for/directory');\n } catch(e) {}"},"Sugar.node.fs.move":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.fs.move","body":"Sugar.node.fs.move(${1:src}, ${2:dest})","description":" Moves a file or directory, even across devices (async)\n\nExample:\n\n const move = require('@coffeekraken/node/fs/move');\n move('my/cool/dir', 'another/place/for/directory').then(() => {\n    // do something...\n });"},"Sugar.node.fs.isPath":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.fs.isPath","body":"Sugar.node.fs.isPath(${1:path}, ${2:checkExistence})","description":" Check if the passed string is a valid path or not\n\nExample:\n\n const isPath = require('@coffeekraken/sugar/node/fs/isPath');\n isPath('hello/world'); // => true"},"Sugar.node.fs.formatFileSize":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.fs.formatFileSize","body":"Sugar.node.fs.formatFileSize(${1:size}, ${2:settings})","description":" Transform into human readable string a file size from a number (float or integer) or string.\n This function use the wonderfull \"filesize\" npm package under the houd.\n\nExample:\n\n const formatFilesize = require('@coffeekraken/sugar/node/fs/formatFileSize');\n formatFileSize(163931); // => 326.86 KB"},"Sugar.node.fs.folderSize":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.fs.folderSize","body":"Sugar.node.fs.folderSize(${1:folderPath}, ${2:rawFormat})","description":" Calculate the size of the passed folder and return it through a promise, either in raw format, either in human readdable one...\n\nExample:\n\n const folderSize = require('@coffeekraken/sugar/node/fs/folderSize');\n folderSize('my/cool/folder').then((size) => {\n      // do something...\n });"},"Sugar.node.fs.filename":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.fs.filename","body":"Sugar.node.fs.filename(${1:path}, ${2:withExtension})","description":" Return the filename from the passed path with or without the extension\n\nExample:\n\n const filename = require('@coffeekraken/sugar/node/fs/filename');\n filename('hello/world.js'); // => world.js"},"Sugar.node.fs.extension":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.fs.extension","body":"Sugar.node.fs.extension(${1:path})","description":" Return the passed file path extension\n\nExample:\n\n const extension = require('@coffeekraken/sugar/node/fs/extension');\n extension('hello/world.jpg'); // => jpg"},"Sugar.node.fs.ensureFileSync":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.fs.ensureFileSync","body":"Sugar.node.fs.ensureFileSync(${1:file})","description":" Ensure that the passed file exists. If not, will be created... (async)\n\nExample:\n\n const ensureFileSync = require('@coffeekraken/node/fs/ensureFileSync');\n try {\n    ensureFileSync('my/cool/file.jpg');\n } catch(e) {}"},"Sugar.node.fs.ensureFile":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.fs.ensureFile","body":"Sugar.node.fs.ensureFile(${1:file})","description":" Ensure that the passed file exists. If not, it will be created... (async)\n\nExample:\n\n const ensureFile = require('@coffeekraken/node/fs/ensureFile');\n ensureFile('my/cool/file.jpg').then(() => {\n    // do something...\n });"},"Sugar.node.fs.ensureDirSync":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.fs.ensureDirSync","body":"Sugar.node.fs.ensureDirSync(${1:dir})","description":" Ensure that the passed directory exists. If not, will be created recursively... (sync)\n\nExample:\n\n const ensureDirSync = require('@coffeekraken/node/fs/ensureDirSync');\n try {\n    ensureDirSync('my/cool/dir');\n } catch(e) {}"},"Sugar.node.fs.ensureDir":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.fs.ensureDir","body":"Sugar.node.fs.ensureDir(${1:dir})","description":" Ensure that the passed directory exists. If not, will be created recursively... (async)\n\nExample:\n\n const ensureDir = require('@coffeekraken/node/fs/ensureDir');\n ensureDir('my/cool/dir').then(() => {\n    // do something...\n });"},"Sugar.node.fs.emptyDirSync":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.fs.emptyDirSync","body":"Sugar.node.fs.emptyDirSync(${1:dir})","description":" Empty a directory (sync)\n\nExample:\n\n const emptyDirSync = require('@coffeekraken/node/fs/emptyDirSync');\n try {\n    emptyDirSync('my/cool/directory');\n } catch(e) {}"},"Sugar.node.fs.emptyDir":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.fs.emptyDir","body":"Sugar.node.fs.emptyDir(${1:dir})","description":" Empty a directory (async)\n\nExample:\n\n const emptyDir = require('@coffeekraken/node/fs/emptyDir');\n emptyDir('my/cool/directory').then(() => {\n    // do something...\n });"},"Sugar.node.fs.downloadFile":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.fs.downloadFile","body":"Sugar.node.fs.downloadFile(${1:downloadUrl}, ${2:destinationPath}, ${3:callback})","description":" Download a file and save it on the file system\n\nExample:\n\n const downloadFile = require('@coffeekraken/node/fs/downloadFile');\n downloadFile('https://myCoolFileUrl.ch/coco.json').then((dest) => {\n    console.log('file downloeaded and saved here', dest);\n }).catch(err) => {});"},"Sugar.node.fs.copySync":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.fs.copySync","body":"Sugar.node.fs.copySync(${1:src}, ${2:dest})","description":" Copy a file or directory (sync)\n\nExample:\n\n const copySync = require('@coffeekraken/node/fs/copySync');\n try {\n    copySync('my/cool/file.jpg', 'my/new/file.jpg');\n } catch(e) {}"},"Sugar.node.fs.copy":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.fs.copy","body":"Sugar.node.fs.copy(${1:src}, ${2:dest})","description":" Copy a file or directory (async)\n\nExample:\n\n const copy = require('@coffeekraken/node/fs/copy');\n copy('my/cool/file.jpg', 'my/new/file.jpg').then(() => {\n    // do something on complete...\n });"},"Sugar.node.encoding.base64":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.encoding.base64","body":"Sugar.node.encoding.base64","description":" This return an object containing the \"encode\" and \"decode\" function that you can use\n to encode/decode base64 Strings.\n\nExample:\n\n import base64 from '@coffeekraken/sugar/js/encoding/base64';\n base64.encode('Hello world');\n base64.decode('SGVsbG8gV29ybGQh');"},"Sugar.node.docblock.parse":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.docblock.parse","body":"Sugar.node.docblock.parse(${1:string}, ${2:settings})","description":" This function allows you to simply parse any strings that contains docblock(s) and return\n the parsed version un object format\n\nExample:\n\n import parse from '@coffeekraken/sugar/js/docblock/parse';\n parse(myString);"},"Sugar.node.dev.getArgsNames":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.dev.getArgsNames","body":"Sugar.node.dev.getArgsNames(${1:func})","description":" Get the arguments names of the passed function. Return an array of the arguments names\n\nExample:\n\n import getArgsNames from '@coffeekraken/sugar/js/dev/getArgsNames';\n function hello(world, coco, plop) { }\n getArgsNames(hello); // => ['world', 'coco', 'plop']"},"Sugar.node.dev.dataTypesArray":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.dev.dataTypesArray","body":"Sugar.node.dev.dataTypesArray","description":" This is just a list of data types available in the\n current language (node/js)"},"Sugar.node.crypt.encrypt":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.crypt.encrypt","body":"Sugar.node.crypt.encrypt(${1:message}, ${2:key})","description":" Encrypt"},"Sugar.node.core.env":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.core.env","body":"Sugar.node.core.env(${1:dotPath}, ${2:value})","description":" This function allows you to access environment variables through the same method in node and javascript\n\nExample:\n\n import env from '@coffeekraken/sugar/js/dev/env';\n console.log(env('node_env')); // => production\n env('something.cool', { hello: 'world' });"},"Sugar.node.config.adapters.SConfigFsAdapter":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.config.adapters.SConfigFsAdapter","body":"new Sugar.node.config.adapters.SConfigFsAdapter(${1:settings})","description":" The JSON data adapter for the SConfig class that let you define a filename where you want to save your configs, how you want to encrypt/decrypt it\n and then you just have to use the SConfig class and that's it..."},"Sugar.node.config.adapters.SConfigAdapter":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.config.adapters.SConfigAdapter","body":"new Sugar.node.config.adapters.SConfigAdapter()","description":" Base class for SCache adapters\n\nExample:\n\n class SConfigCoolAdapter extends SConfigAdapter {\n    constructor(settings = {}) {\n      super(settings);\n      // settings are accessible through this._settings\n    }\n    async load() {\n      // load the config the way you want and return it in Object format\n      return {};\n    }\n    async save(newConfig) {\n      // save the newConfig object the way you want and return true when all it ok\n      return true;\n    }\n }"},"Sugar.node.config.config":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.config.config","body":"new Sugar.node.config.config()","description":" This class allows you to quickly access/update some configuration depending on the data adapters specified.\n The base available data adapters are \"json\" and \"js\" allowing you to store data inside files on the server drive.\n\nExample:\n\n import SConfig from '@coffeekraken/sugar/js/config/SConfig';\n const config = new SConfig({\n    json: {\n      filename: process.cwd() + '/config.json',\n      encrypt: base64.encrypt,\n      decrypt: base64.decrypt\n    }\n });\n await config.get('log.frontend.mail.host'); // => gmail.google.com\n await config.set('log.frontend.mail.host', 'mailchimp.com');"},"Sugar.node.color.rgba2hsv":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.color.rgba2hsv","body":"Sugar.node.color.rgba2hsv(${1:r}, ${2:g}, ${3:b}, ${4:a})","description":" RGBA to HSV\n\nExample:\n\n import rgba2hsv from '@coffeekraken/sugar/js/color/rgba2hsv';\n rgba2hsv(10,20,50,10);"},"Sugar.node.color.rgba2hsl":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.color.rgba2hsl","body":"Sugar.node.color.rgba2hsl(${1:r}, ${2:g}, ${3:b}, ${4:a})","description":" RGBA to HSL\n\nExample:\n\n import rgba2hsl from '@coffeekraken/sugar/js/color/rgba2hsl';\n rgba2hsl(10,20,50,10);"},"Sugar.node.color.rgba2hex":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.color.rgba2hex","body":"Sugar.node.color.rgba2hex(${1:r}, ${2:g}, ${3:b}, ${4:a})","description":" RGBA to HEX\n\nExample:\n\n import rgba2hex from '@coffeekraken/sugar/js/color/rgba2hex';\n rgba2hex(10,20,30,10);"},"Sugar.node.color.parseRgba":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.color.parseRgba","body":"Sugar.node.color.parseRgba(${1:rgbaString})","description":" Parse RGBA string and return an object\n\nExample:\n\n import parseRgba from '@coffeekraken/sugar/js/color/parseRgba';\n parseRgba('rgba(20,10,100,20)');"},"Sugar.node.color.parseHsv":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.color.parseHsv","body":"Sugar.node.color.parseHsv(${1:hsvString})","description":" Parse HSV\n\nExample:\n\n import parseHsv from '@coffeekraken/sugar/js/color/parseHsv';\n parseHsv('hsv(10,10,10)');"},"Sugar.node.color.parseHsl":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.color.parseHsl","body":"Sugar.node.color.parseHsl(${1:hslString})","description":" Parse HSL\n\nExample:\n\n import parseHsl from '@coffeekraken/sugar/color/parseHsl';\n parseHsl('hsl(20,20,20)');"},"Sugar.node.color.hsv2rgba":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.color.hsv2rgba","body":"Sugar.node.color.hsv2rgba(${1:h}, ${2:s}, ${3:v}, ${4:a})","description":" HSV to RGBA\n\nExample:\n\n import hsv2rgba from '@coffeekraken/sugar/js/color/hsv2rgba';\n hsv2rgba(10,20,30);"},"Sugar.node.color.hsl2rgba":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.color.hsl2rgba","body":"Sugar.node.color.hsl2rgba(${1:h}, ${2:s}, ${3:l}, ${4:a})","description":" HSL to RGBA\n\nExample:\n\n import hsl2rgba from '@coffeekraken/sugar/js/color/hsl2rgba';\n hsl2rgba(10,20,30);"},"Sugar.node.color.hex2rgba":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.color.hex2rgba","body":"Sugar.node.color.hex2rgba(${1:hex})","description":" Hex to RGBA\n\nExample:\n\n import hex2rgba from '@coffeekraken/sugar/js/color/hex2rgba';\n hex2rgba('#ff00ff');"},"Sugar.node.color.convert":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.color.convert","body":"Sugar.node.color.convert(${1:input}, ${2:format})","description":" This function take as input any color format like rgba Object, hsl Object, hsv Object, hex String, rgba String, hsl String or hsv String\n and convert it into the wanted format like \"rgba\", \"hsl\", \"hsv\", \"hex\", \"rgbaString\", \"hslString\" or \"hsvString\"\n\nExample:\n\n import convert from '@coffeekraken/sugar/js/color/convert';\n convert('rgba(10,20,30,100)', 'rgba'); // => { r: 10, g: 20, b: 30, a: 100 }"},"Sugar.node.color.color":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.color.color","body":"Sugar.node.color.color(${1:color})","description":" Simple wrapper to create an SColor instance quickly\n\nExample:\n\n import color from '@coffeekraken/sugar/js/color/color';\n const myColor = color('#ff00ff');"},"Sugar.node.color.SColor":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.color.SColor","body":"new Sugar.node.color.SColor()","description":" Class that provide complete and simple to use color manupilation capabilities like:\n - Modifiers\n \t- opacity\n \t- darken\n \t- lighten\n \t- desaturate\n \t- saturate\n \t- spin (change hue)\n \t- transparentize\n \t- alpha\n \t- grayscale\n - Conversions\n \t- rgba\n \t- hsl\n \t- hsv\n \t- hex\n - Print out formats\n \t- toRgbaString\n \t- toHslString\n \t- toHsvString\n \t- toHexString\n \t- toString(format = null)\n\nExample:\n\n import SColor from '@coffeekraken/sugar/js/classes/SColor'\n let myColor = new SColor(#ff0000);\n // get a lighter color\n let ligtherColor = myColor.lighten(20);\n // print the color to rgba\n console.log(lighterColor.toRgbaString());"},"Sugar.node.cli.parseArgs":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.cli.parseArgs","body":"Sugar.node.cli.parseArgs(${1:string}, ${2:argsDefinitions}, ${3:settings})","description":" Parse a string to find the provided arguments into the list and return a corresponding object.\n\nExample:\n\n import parseArgs from '@coffeekraken/sugar/js/string/parseArgs';\n parseArgs('hello -w 10 yop \"hello world\" -b --hello.world Nelson --help \"coco yep\" #blop', {\n    param1: { type: 'String', alias: 'p' },\n    world: { type: 'Array', alias: 'w', validator: value => {\n      return Array.isArray(value);\n    }},\n    bool: { type: 'Boolean', alias: 'b', default: false, required: true },\n    'hello.world': { type: 'String' },\n    help: { type: 'String', alias: 'h' },\n    id: { type: 'String', alias: 'i', regexp: /^#([\\S]+)$/ }\n }, {\n    treatDotsAsObject: true,\n    handleOrphanOptions: true\n });\n {\n    param1: 'hello',\n    world: [10, 'yop', 'hello world'],\n    bool: true,\n    hello: {\n      world: 'Nelson'\n    },\n    help: 'coco yep',\n    id: '#blop'\n }"},"Sugar.node.class.toPlainObject":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.class.toPlainObject","body":"Sugar.node.class.toPlainObject(${1:instance})","description":" This function take a instance as parameter and return a plain object of it\n\nExample:\n\n import toPlainObject from '@coffeekraken/sugar/js/class/toPlainObject';\n class Coco {\n    constructor() {\n      this.hello = 'world';\n    }\n }\n toPlainObject(new Coco()); // => { hello: 'world' }"},"Sugar.node.class.methodExists":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.class.methodExists","body":"Sugar.node.class.methodExists(${1:instance}, ${2:...methods})","description":" Check if one or more methods exists on a class instance\n\nExample:\n\n class Coco {\n    hello() {}\n }\n import methodExists from '@coffeekraken/sugar/node/class/methodExists';\n const myInstance = new Coco();\n methodExists(myInstance, 'hello', 'world'); // => ['world'];"},"Sugar.node.fs.cacheAdapters.SCacheFsAdapter":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.fs.cacheAdapters.SCacheFsAdapter","body":"new Sugar.node.fs.cacheAdapters.SCacheFsAdapter()","description":" A filesystem SCache adapter that allows you to store your cache items on the user system\n\nExample:\n\n const cache = new SCache({\n    ttl: 100,\n    adapter: new SCacheFsAdapter({\n      path: '/my/cool/folder\n    })\n });"},"Sugar.node.fs.cacheAdapters.constructor":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.fs.cacheAdapters.constructor","body":"Sugar.node.fs.cacheAdapters.constructor(${1:settings})","description":" Construct the SCacheFsAdapter instance with the settings passed in object format. See description bellow."},"Sugar.node.fs.cacheAdapters.set":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.fs.cacheAdapters.set","body":"Sugar.node.fs.cacheAdapters.set(${1:name}, ${2:value}, ${3:settings})","description":" Set a cache item on the filesystem\n\nExample:\n\n await myCache.set('myCoolItem', { hello: 'world' }, {\n    ttl: 40000\n });"},"Sugar.node.fs.cacheAdapters.get":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.fs.cacheAdapters.get","body":"Sugar.node.fs.cacheAdapters.get(${1:name})","description":" Get a cache item on the filesystem\n\nExample:\n\n await myCache.get('myCoolItem');"},"Sugar.node.fs.cacheAdapters.delete":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.fs.cacheAdapters.delete","body":"Sugar.node.fs.cacheAdapters.delete(${1:name})","description":" Delete a cache item on the filesystem\n\nExample:\n\n await myCache.delete('myCoolItem');"},"Sugar.node.fs.cacheAdapters.clear":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.fs.cacheAdapters.clear","body":"Sugar.node.fs.cacheAdapters.clear(${1:cacheName})","description":" Clear all the items in the current cache\n\nExample:\n\n await myCache.clear;"},"Sugar.node.cache.SCache":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.cache.SCache","body":"new Sugar.node.cache.SCache()","description":" Gives you the ability to manage cache through some defaults available adapters or using yours.\n This cache class take care of these features:\n - Standard and custom TTL by cache item\n - Delete cache items on expires or not\n\nExample:\n\n import SCache from '@coffeekraken/sugar/js/cache/SCache';\n const cache = new SCache({\n  ttl: '10s' // 10 seconds\n });\n cache.set('myCoolCacheItem', someData);"},"Sugar.node.array.splitEvery":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.array.splitEvery","body":"Sugar.node.array.splitEvery(${1:array}, ${2:every})","description":" Split an array every N items\n\nExample:\n\n import splitEvery from '@coffeekraken/sugar/js/array/splitEvery';\n splitEvery([1,2,3,4,5,6,7,8,9], 3);\n // [[1,2,3],[4,5,6],[7,8,9]]"},"Sugar.node.array.keysLast":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.array.keysLast","body":"Sugar.node.array.keysLast(${1:array}, ${2:keys})","description":" Make sure the passed array ends with the passed keys\n\nExample:\n\n import keysLast from '@coffeekraken/sugar/js/array/keysLast'\n keysLast(['a','b','d','g','c'], ['d','g'])\n // ['a','b','c','d','g']"},"Sugar.node.array.keysFirst":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.array.keysFirst","body":"Sugar.node.array.keysFirst(${1:array}, ${2:keys})","description":" Make sure the passed array start with the passed keys\n\nExample:\n\n import keysFirst from '@coffeekraken/sugar/js/array/keysFirst'\n keysFirst(['a','b','d','g','c'], ['d','g'])\n // ['d','g','a','b','c']"},"Sugar.node.array.asyncForEach":{"scope":"javascript,node,nodejs","prefix":"Sugar.node.array.asyncForEach","body":"Sugar.node.array.asyncForEach(${1:array}, ${2:asyncFn})","description":" Allow to make some async foreach on your arrays\n\nExample:\n\n import asyncForEach from '@coffeekraken/sugar/js/array/asyncForEach';\n const waitFor = (ms) => new Promise(r => setTimeout(r, ms));\n asyncForEach([0,1,2,3], async (item) => {\n    await waitWor(50);\n    console.log(item);\n });\n // 0\n // 1\n // 2\n // 3"}}

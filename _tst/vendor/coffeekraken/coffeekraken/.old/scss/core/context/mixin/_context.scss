@use 'sass:meta';
@use 'sass:string';
@use 'sass:map';
/**
 * @name      context
 * @namespace            scss.core.context.mixin
 * @type      mixin
 *
 * Set a context to be used inside the mixin
 *
 * @param 			{String|Map} 			$name-or-map 		The name of a registered context or a map
 *
 * @example     scss
 * // register a context
 * \@include Sugar.context-setup(my-cool-context, (
 * 		look-and-feel : (
 * 			padding-vertical : (
 * 				default : 0.6em
 * 			)
 * 		)
 * ));
 *
 * // registered context
 * \@include Sugar.context(my-cool-context) {
 * 		// your code here...
 * }
 *
 * // inline context
 * \@include Sugar.context((
 * 		look-and-feel : (
 * 			padding-vertical : (
 * 				default : .3em
 * 			)
 * 		)
 * )) {
 * 		// your code here...
 * }
 *
 * @author 	        Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
@mixin context($name, $settings: null) {
  $name: test-argument('Sugar.context', 'name-or-map', 'string', $name);

  // if the passes argument is a context map
  // register this context as new one
  @if $settings != null and type-of($settings) == map {
    @include context-setup($name, $settings);
  }

  $previous-context: $__current-context;
  $__current-context: $name !global;
  @content;
  $__current-context: $previous-context !global;
}

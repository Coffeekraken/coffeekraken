@charset "UTF-8";
/**
 * Return the last item of the passed list
 *
 * @param     {List}    $list     The list to get the last item from
 * @return    {Mixed}             The last item of the list
 *
 * @example
 * sugar.list-last-nth(('hello', 'world')); // 'world'
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Set a map property with the passed value
 * @param 			{Map} 			$map 		The map to modify
 * @param       {String}    $key    The key to set the propery to
 * @param       {Mixed}     $value  The value to set
 * @return 			{Map} 					    The updated map
 *
 * @example
 * $my-map : sugar.map-set($my-map, 'coco', 'Something cool');
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Split one string into multiple ones using a delimiter
 */
/**
* This file contains all the default settings that can be overrided by the [s-setup mixin](./mixins/_s-setup.scss).
*
* @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
*/
/**
 * Return the color in a modifier list
 * @param 			{List} 			$modifiers 		The modifiers list
 * @return 			{String} 						The color name
 *
 * @example
 * $my-color : sugar.color-modifier(outline primary); // => primary
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Return the name of the top level component setted with the [../mixins/_component.scss] mixin
 *
 * @param 			{String} 			[$default=null] 		The name to return if no top component name exist
 * @return 			{String} 									The component name
 *
 * @example
 * sugar.component('hello') // => 'hello'
 * \@include sugar.component('my-component') {
 * 		sugar.component('hello') // => 'my-component'
 * 		\@include sugar.component('another-component') {
 * 			sugar.component('hello') // => 'my-component'
 * 		}
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com);
 */
/**
 * Return a number without any units
 *
 * @param 			{Number} 		$number 		The number to process
 * @return 			{Number} 						The number without units
 *
 * @example
 * sugar.strip-units(12px); // => 12
 * sugar.strip-units(30rem); // => 30
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Get a settings from the global settings stack
 *
 * @param 				{String} 			$path 						The setting path wanted separated by dots
 * @param 				{String} 			[$context=s-context()] 		The context name to get the setting
 * @param 				{Mixed} 			[$default=null] 			The value to return if no value is found
 * @return 				{Mixed} 										The setting valueÂ¨
 *
 * @example
 * $font-size : s-setting('typography.font-size');
 * // etc...
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Return the unit context if has been set by the [s-unit-context mixin](../mixins/_s-unit-context.scss)
 *
 * @return 		{String} 				The unit context setted
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Convert a passed value to the wanted unit
 * The conversion between some units that depends on a font-size will take the settings.typography.font-size value as reference.
 *
 * Available conversions
 * - from px
 * 	- to em
 * 	- to rem
 * 	- to pt
 * 	- to %
 *
 * - from em
 * 	- to rem
 * 	- to px
 * 	- to pt
 * 	- to %
 *
 * - from pt
 * 	- to em
 * 	- to rem
 * 	- to px
 * 	- to pt
 * 	- to %
 *
 * - from rem
 * 	- to em
 * 	- to px
 * 	- to pt
 * 	- to %
 *
 * @param 			{Number} 		$value 			The value to convert
 * @param 			{String} 		$unit 			The unit in which to convert the value
 * @return 			{Number} 						The converted value
 *
 * @example
 * // if the settings.typography.font-size === 16px
 * sugar.convert(24px, rem) // 1.5rem
 * sugar.convert(3rem, pt) // 36pt
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Transform a dash notation value into a map
 * Dash notation value is : -key1 value1 -key2 value2
 *
 * @param 			{List} 			$dash 			The dash list notation to transform
 * @return 			{Map} 							The map generated
 *
 * @example
 * $dash : -hello world -coco universe
 * sugar.dash-to-map($dash);
 * // (
 * // 	hello : world,
 * // 	coco : universe
 * // )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Convert the passed value to em
 *
 * @param 			{Number} 		$value 		The value to convert
 * @return 			{Number} 					The em converted value
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Convert the passed value to the closest even value
 *
 * @param 			{Number} 		$value 		The value to convert
 * @return 			{Number} 					The closest even converted value
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Take a filter as parameter and parse it to return the {Map} corresponding
 * The $filter parameter can be either a registered filter name or a filter formated like `filterName(filterValue)`
 *
 * @param 			{List}<String> 			$filter 			The registered filter name or the filter string to transform into map
 * @return 			{Map} 										The corresponding filter map properties
 *
 * @example
 * // register a filter
 * \@include sugar.setup((
 * 		filters : (
 * 			myCoolFilter : box-shadow(#000 0 0 10px) blur(30px),
 * 			// other filters...
 * 		)
 * ));
 *
 * // registered filter
 * sugar.filter-map(myCoolFilter);
 * // {
 * // 	box-shadow : #000 0 0 10px,
 * // 	blur : 30px
 * // }
 *
 * // custom filter
 * sugar.filter-map(blur(10px));
 * // {
 * // 	blur : 10px
 * // }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */

/*# sourceMappingURL=style.css.map */

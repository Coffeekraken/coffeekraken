/**
 * @name      classes
 * @namespace     gridle
 * @type    Mixin
 *
 * Generate the classes
 *
 * @example     scss
 * @include gridle.classes();
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
@mixin classes() {

  /**
   * Container
   */
  .container {
    max-width: var(--g-container-max-width);
    width: var(--g-container-width);
    margin: 0 auto;
    box-sizing: border-box;
  }

  /**
   * Grid
   */
  .gr {
    display: grid;
    grid-template-columns: repeat(var(--g-columns), 1fr);
    grid-column-gap: var(--g-gutter-unit);
    justify-items: stretch;
    align-items: stretch;
    justify-content: stretch;
    align-content: stretch;
    box-sizing: border-box;
  }

  /**
   * Grid flex
   */
  .gr--flex {
    display: flex;
    margin: 0 calc(#{gutters(1)} / 2 * -1);
  }

  /**
   * Column
   */
  .col {
    box-sizing: border-box;
  }

  /**
   * Row
   */
  .row {
    box-sizing: border-box;
  }

  /**
   * Grid gutters
   */
  .gr--gutters {
    grid-column-gap: var(--g-gutter-unit);
    grid-row-gap: var(--g-gutter-unit);

    &.gr--flex {
      margin-top: calc(#{gutters(1)} / 2 * -1);
      margin-bottom: calc(#{gutters(1)} / 2 * -1);
    }

    &.gr--flex > .col {
      margin: calc(#{gutters(1)} / 2);
    }
  }
  .gr--no-gutter {
    grid-row-gap: 0;
    grid-column-gap: 0;
    margin-left: 0;
    margin-right: 0;

    &.gr--flex > .col {
      margin: 0;
    }
  }
  .gr--gutters-side {
    grid-column-gap: var(--g-gutter-unit);
    grid-row-gap: 0;

    &.gr--flex {
      margin-left: calc(#{gutters(1)} / 2 * -1);
      margin-right: calc(#{gutters(1)} / 2 * -1);
    }

    &.gr--flex > .col {
      margin: 0 calc(#{gutters(1)} / 2);
    }
  }
  .gr--gutters-updown {
    grid-column-gap: 0;
    grid-row-gap: var(--g-gutter-unit);

    &.gr--flex {
      margin-top: calc(#{gutters(1)} / 2 * -1);
      margin-bottom: calc(#{gutters(1)} / 2 * -1);
    }

    &.gr--flex > .col {
      margin: calc(#{gutters(1)} / 2) 0;
    }
  }
  .gr--no-gutter-side {
    grid-row-gap: 0;

    &.gr--flex {
      margin-left: 0;
      margin-right: 0;
    }

    &.gr--flex > .col {
      margin-left: 0;
      margin-right: 0;
    }
  }
  .gr--no-gutter-updown {
    grid-column-gap: 0;

    &.gr--flex {
      margin-top: 0;
      margin-bottom: 0;
    }

    &.gr--flex > .col {
      margin-top: 0;
      margin-bottom: 0;
    }
  }

  // process each states
  @each $stateName in states-names() {
    @include state($stateName) {

      /**
       * Apply the settings through variables
       */
      :root {
        /* Grid proportions */
        --g-width: #{state-var(width, $stateName)};
        --g-column-width: #{state-var(column-width, $stateName)};
        --g-columns: #{state-var(columns, $stateName)};
        --g-rows: #{state-var(rows, $stateName)};

        /* Grid logic */
        --g-gutters: calc(var(--g-columns) - 1);

        /* Grid proportion logic */
        --g-column-proportion: calc(var(--g-column-width) / var(--g-width));
        --g-gutter-proportion: calc((1 - (var(--g-columns) * var(--g-column-proportion))) / var(--g-gutters));

        /* Container Units */
        --g-column-unit: calc(var(--g-column-proportion) * var(--g-container-width));
        @if state-var(gutter-width, $stateName) {
          --g-gutter-unit: #{state-var(gutter-width, $stateName)};
        } @else {
          --g-gutter-unit: calc(var(--g-gutter-proportion) * var(--g-container-width));
        }
        --g-column-and-gutter-unit: calc(var(--g-column-unit) + var(--g-gutter-unit));

        /* Container Width */
        --g-container-width: #{state-var(container-width, $stateName)};
        --g-container-max-width: #{state-var(container-max-width, $stateName)};
      }

      /**
       * Row wrap and nowrap
       */
      #{process-selector('.gr--wrap\\@#{$stateName}')} {
        flex-wrap: wrap;
      }
      #{process-selector('.gr--nowrap\\@#{$stateName}')} {
        flex-wrap: nowrap;
      }

      /**
       * Row alignements
       */
      #{process-selector('.gr--start\\@#{$stateName}')} {
        align-content: start; // grid
        align-items: flex-start; // flex
      }
      #{process-selector('.gr--middle\\@#{$stateName}')} {
        align-content: center; // grid
        align-items: center; // flex
      }
      #{process-selector('.gr--end\\@#{$stateName}')} {
        align-content: end; // grid
        align-items: flex-end; // flex
      }

      /**
       * Grid cells alignements
       */
      #{process-selector('.col--start\\@#{$stateName}')} {
        align-self: start;

        .gr--flex & {
          align-self: flex-start;
        }
      }
      #{process-selector('.col--middle\\@#{$stateName}')} {
        align-self: center;
      }
      #{process-selector('.col--end\\@#{$stateName}')} {
        align-self: end;

        .gr--flex & {
          align-self: flex-end;
        }
      }

      /**
       * Grid cells
       */
      @for $i from 1 through state-var(columns) {
        #{process-selector('.col--#{$i}\\@#{$stateName}')} {
          grid-column-end: span $i;

          .gr--flex & {
            flex: 0 0 auto;
            width: calc(100% / var(--g-columns) * #{$i} - #{gutters(1)});
            flex-basis: calc(100% / var(--g-columns) * #{$i} - #{gutters(1)});
            margin: 0 calc(#{g-gutters(1)} / 2);
          }
          .gr--flex.gr--no-gutter &,
          .gr--flex.gr--no-gutter-side & {
            width: calc(100% / var(--g-columns) * #{$i});
            flex-basis: calc(100% / var(--g-columns) * #{$i});
          }
        }
        #{process-selector('.col--start-#{$i}\\@#{$stateName}')} {
          grid-column-start: #{$i};
        }
        #{process-selector('.col--height-#{$i}\\@#{$stateName}')} {
          height: calc(#{columns($i)} + #{gutters($i - 1)});
        }
      }
      @for $i from 1 through state-var(rows) {
        #{process-selector('.gr--rows-#{$i}\\@#{$stateName}')} {
          grid-template-rows: repeat($i, 1fr);
        }
        #{process-selector('.row--#{$i}\\@#{$stateName}')} {
          grid-row-end: span $i;
        }
        #{process-selector('.row--start-#{$i}\\@#{$stateName}')} {
          grid-row-start: #{$i};
        }
      }

      /**
       * Flex grid cells
       */
      #{process-selector('.col--adapt\\@#{$stateName}')} {
        .gr--flex & {
          width: auto !important;
          flex-basis: auto !important;
          flex: 0 0 auto;
          margin: 0 calc(#{gutters(1)} / 2);
        }
      }
      #{process-selector('.col--grow\\@#{$stateName}')} {
        .gr--flex & {
          width: auto !important;
          flex-basis: auto !important;
          flex: 1 1 auto;
          margin: 0 calc(#{gutters(1)} / 2);
        }
      }

      /**
       * Utilities
       */
      #{process-selector('.hide\\@#{$stateName}')} {
        display: none;
      }
      #{process-selector('.show\\@#{$stateName}')} {
        display: block;
      }
      #{process-selector('.show-inline\\@#{$stateName}')} {
        display: inline-block;
      }
    }
  }
}

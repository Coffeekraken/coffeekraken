import{S as f,n as h,h as c,i as y,u as _,c as w,l as S}from"./index.esm.js";class m extends f{static get _definition(){return{apiKey:{type:"String",description:"Specify the google api key to use. You can specify it in the config.google.map.apiKey configuration for your project if you prefer",default:h.get("google.map.apiKey"),required:!0},mapId:{type:"String",description:"Specify your mapId that you can create [here](https://console.cloud.google.com/google/maps-apis/studio/maps)",required:!0},lat:{type:"Number",description:"Specify the map latitude",required:!0},lng:{type:"Number",description:"Specify the map longitude",required:!0},zoom:{type:"Number",description:"Specify the google map zoom"},bounds:{type:"Boolean",description:"Specify if you want your map to be bounds on current markers",default:!0},icons:{type:"Object",description:"Specify some icons to be used across your maps",default:{marker:'<i class="fa-solid fa-location-dot"></i>'}},zoomControl:{type:"Boolean",description:"Specify if you want the zom control or not",default:!1},mapTypeControl:{type:"Boolean",description:"Specify if you want the map type control or not",default:!1},scaleControl:{type:"Boolean",description:"Specify if you want the map scale control or not",default:!1},streetViewControl:{type:"Boolean",description:"Specify if you want the streeview control or not",default:!1},rotateControl:{type:"Boolean",description:"Specify if you want the rotate control or not",default:!1},fullscreenControl:{type:"Boolean",description:"Specify if you want the fullscreen control or not",default:!1}}}}const b=`.s-google-map{display:block;position:relative}.s-google-map:not([mounted]){opacity:.001;pointer-events:none}.s-google-map>div[style]{background:none!important}.s-google-map .gm-style{font:inherit}
`;var v=globalThis&&globalThis.__awaiter||function(a,t,e,o){return new(e=e||Promise)(function(i,l){function u(r){try{s(o.next(r))}catch(n){l(n)}}function d(r){try{s(o.throw(r))}catch(n){l(n)}}function s(r){var n;r.done?i(r.value):((n=r.value)instanceof e?n:new e(function(g){g(n)})).then(u,d)}s((o=o.apply(a,t||[])).next())})};class p extends c{static get properties(){return c.propertiesFromInterface({},m)}static get styles(){return y`
            ${_(b)}
        `}static loadApi(t){return this._loadApiPromise||(this._loadApiPromise=new Promise(e=>{var o=document.createElement("script");o.setAttribute("id","s-google-map-component"),o.src=`https://maps.googleapis.com/maps/api/js?key=${t}&v=beta&libraries=marker&callback=_initMap`,o.async=!0,window._initMap=function(){e(null)},document.head.appendChild(o)})),this._loadApiPromise}constructor(){super(w({name:"s-google-map",interface:m})),this._markers=this._getMarkers()}mount(){return v(this,void 0,void 0,function*(){yield this.constructor.loadApi(this.props.apiKey),this._map=new google.maps.Map(this,{center:{lat:this.props.lat,lng:this.props.lng},zoom:8,mapId:this.props.mapId,zoomControl:this.props.zoomControl,mapTypeControl:this.props.mapTypeControl,scaleControl:this.props.scaleControl,streetViewControl:this.props.streetViewControl,rotateControl:this.props.rotateControl,fullscreenControl:this.props.fullscreenControl,disableDefaultUI:!0}),this._createMarkers(this._markers),this._handleBoundsAndZoom()})}_handleBoundsAndZoom(){const t=this._map.addListener("bounds_changed",()=>{google.maps.event.removeListener(t),this.props.bounds&&this._bounds(this._markers),this.props.zoom&&this._map.setZoom(this.props.zoom)})}_bounds(t){var e,o=new google.maps.LatLngBounds;for(e of t){var i=new google.maps.LatLng(e.lat,e.lng);o.extend(i)}this._map.fitBounds(o)}_createMarkers(t){for(var e of t){var o,i={lat:e.lat,lng:e.lng};e.content||(document.createElement("div"),o=new DOMParser().parseFromString(`
                        <div class="${this.utils.cls("-marker")}">
                            <div class="${this.utils.cls("-marker__icon")}">
                                ${this.props.icons.marker}
                            </div>
                        </div>
                    `,"text/html"),e.content=o.body.children[0]),e.marker=new google.maps.marker.AdvancedMarkerView({map:this._map,content:e.content,position:i})}}_getMarkers(){return Array.from(this.querySelectorAll(this.tagName.toLowerCase()+"-marker")).map(t=>{var e;return{lat:parseFloat((e=t.getAttribute("lat"))!=null?e:"0"),lng:parseFloat((e=t.getAttribute("lng"))!=null?e:"0"),icon:t.getAttribute("icon"),content:t.children.length?t.children[0]:null}})}render(){return S``}}function k(a={},t="s-google-map",e){p.define(t,p,a,e)}p.state={};export{k as default};

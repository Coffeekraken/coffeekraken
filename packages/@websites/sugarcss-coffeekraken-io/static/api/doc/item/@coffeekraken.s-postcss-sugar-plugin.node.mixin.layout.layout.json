{
    "id": "@coffeekraken.s-postcss-sugar-plugin.node.mixin.layout.layout",
    "name": "layout",
    "as": "@s.layout",
    "type": {
        "types": [
            {
                "type": "PostcssMixin"
            }
        ],
        "raw": "PostcssMixin"
    },
    "param": {
        "layout": {
            "name": "layout",
            "type": {
                "types": [
                    {
                        "type": "String"
                    }
                ],
                "raw": "String"
            },
            "description": "The layout you want to generate",
            "defaultStr": ""
        }
    },
    "return": {
        "type": {
            "types": [
                {
                    "type": "Css"
                }
            ],
            "raw": "Css"
        },
        "description": "The generated css"
    },
    "platform": [
        {
            "name": "postcss",
            "description": ""
        }
    ],
    "description": "This mixin allows you to generate all the css needed for complex grids with multiple\ncolumns and rows like:\n\n|-|----|-|\n|--|--|--|\n|-----|--|\n\nThe mixin accept 1 parameter called layout. Here's some simple layouts to\nillustrate how it works:\n\n- layout 1: <span class=\"s-color-accent\">'1 2 3 4 5 6'</span> : This describe a simple 6 columns layout\n- layout 2: <span class=\"s-color-accent\">'1 1 2'</span>: This describe a two columns layout with the first columns taking 2/3 of the space and the second one taking 1/3 of it\n- layout 3: <span class=\"s-color-accent\">'1 2 _ 3 3'</span>: This describe 2 rows with the first having two columns and the second just one",
    "namespace": "@coffeekraken.s-postcss-sugar-plugin.node.mixin.layout",
    "status": "stable",
    "snippet": {
        "label": "@s.layout($1)"
    },
    "example": [
        {
            "language": "css",
            "code": ".my-element {\n   @s.layout(\n     1 1 1 2 2\n     3 3 4 4 4\n   );\n}"
        },
        {
            "language": "html",
            "code": "<div class=\"my-element\">\n   <div>Area 1</div>\n   <div>Area 2</div>\n   <div>Area 3</div>\n   <div>Area 4</div>\n</div>"
        }
    ],
    "since": "2.0.0",
    "author": {
        "name": "Olivier Bossel",
        "email": "olivier.bossel@gmail.com",
        "url": "https://coffeekraken.io"
    },
    "filename": "layout.ts",
    "extension": "ts",
    "relPath": "src/node/mixins/layout/layout.ts",
    "children": {},
    "isDependency": true,
    "package": {
        "name": "@coffeekraken/s-postcss-sugar-plugin",
        "description": "Postcss Coffeekraken plugin that gives you access to a ton of sugar like \"@sugar.when.dark\", \"@sugar.classes\", etc... mixins as well as functions like \"sugar.padding\", \"sugar.color\", etc... All of these makes uses of your theme configuration defined using the @coffeekraken/s-sugar-config system.",
        "version": "2.0.0-beta.1",
        "author": "Olivier Bossel <olivier.bossel@gmail.com> (https://coffeekraken.io)",
        "license": "MIT",
        "type": "npm"
    },
    "path": "/Users/olivierbossel/data/web/coffeekraken/coffeekraken/node_modules/@coffeekraken/s-postcss-sugar-plugin/src/node/mixins/layout/layout.ts",
    "docblocks": [
        {
            "name": "layout",
            "as": "@s.layout",
            "namespace": "@coffeekraken.s-postcss-sugar-plugin.node.mixin.layout",
            "type": {
                "types": [
                    {
                        "type": "PostcssMixin"
                    }
                ],
                "raw": "PostcssMixin"
            },
            "platform": [
                {
                    "name": "postcss",
                    "description": ""
                }
            ],
            "status": "stable",
            "description": "This mixin allows you to generate all the css needed for complex grids with multiple\ncolumns and rows like:\n\n|-|----|-|\n|--|--|--|\n|-----|--|\n\nThe mixin accept 1 parameter called layout. Here's some simple layouts to\nillustrate how it works:\n\n- layout 1: <span class=\"s-color-accent\">'1 2 3 4 5 6'</span> : This describe a simple 6 columns layout\n- layout 2: <span class=\"s-color-accent\">'1 1 2'</span>: This describe a two columns layout with the first columns taking 2/3 of the space and the second one taking 1/3 of it\n- layout 3: <span class=\"s-color-accent\">'1 2 _ 3 3'</span>: This describe 2 rows with the first having two columns and the second just one",
            "param": {
                "layout": {
                    "name": "layout",
                    "type": {
                        "types": [
                            {
                                "type": "String"
                            }
                        ],
                        "raw": "String"
                    },
                    "description": "The layout you want to generate",
                    "defaultStr": ""
                }
            },
            "return": {
                "type": {
                    "types": [
                        {
                            "type": "Css"
                        }
                    ],
                    "raw": "Css"
                },
                "description": "The generated css"
            },
            "snippet": {
                "label": "@s.layout($1)"
            },
            "example": [
                {
                    "language": "css",
                    "code": ".my-element {\n   @s.layout(\n     1 1 1 2 2\n     3 3 4 4 4\n   );\n}"
                },
                {
                    "language": "html",
                    "code": "<div class=\"my-element\">\n   <div>Area 1</div>\n   <div>Area 2</div>\n   <div>Area 3</div>\n   <div>Area 4</div>\n</div>"
                }
            ],
            "since": "2.0.0",
            "author": {
                "name": "Olivier Bossel",
                "email": "olivier.bossel@gmail.com",
                "url": "https://coffeekraken.io"
            },
            "raw": "/**\n*\n* @name           layout\n* @as              @s.layout\n* @namespace      node.mixin.layout\n* @type           PostcssMixin\n* @platform      postcss\n* @status        stable\n*\n* This mixin allows you to generate all the css needed for complex grids with multiple\n* columns and rows like:\n*\n* |-|----|-|\n* |--|--|--|\n* |-----|--|\n*\n* The mixin accept 1 parameter called layout. Here's some simple layouts to\n* illustrate how it works:\n*\n* - layout 1: <span class=\"s-color-accent\">'1 2 3 4 5 6'</span> : This describe a simple 6 columns layout\n* - layout 2: <span class=\"s-color-accent\">'1 1 2'</span>: This describe a two columns layout with the first columns taking 2/3 of the space and the second one taking 1/3 of it\n* - layout 3: <span class=\"s-color-accent\">'1 2 _ 3 3'</span>: This describe 2 rows with the first having two columns and the second just one\n*\n* @param       {String}        layout      The layout you want to generate\n* @return        {Css}         The generated css\n*\n* @snippet         @s.layout($1)\n*\n* @example        css\n* .my-element {\n*    @s.layout(\n*      1 1 1 2 2\n*      3 3 4 4 4\n*    );\n* }\n*\n* @example     html\n* <div class=\"my-element\">\n*    <div>Area 1</div>\n*    <div>Area 2</div>\n*    <div>Area 3</div>\n*    <div>Area 4</div>\n* </div>\n*\n* @since       2.0.0\n* @author         Olivier Bossel <olivier.bossel@gmail.com> (https://coffeekraken.io)\n\n*/",
            "id": "@coffeekraken.s-postcss-sugar-plugin.node.mixin.layout.layout"
        }
    ]
}
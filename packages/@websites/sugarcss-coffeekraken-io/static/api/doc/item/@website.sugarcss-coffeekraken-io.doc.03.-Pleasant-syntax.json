{
    "id": "@website.sugarcss-coffeekraken-io.doc.03.-Pleasant-syntax",
    "name": "03. Pleasant syntax",
    "type": {
        "types": [
            {
                "type": "Markdown"
            }
        ],
        "raw": "Markdown"
    },
    "menu": {
        "tree": [
            "Documentation"
        ],
        "slug": "/doc/pleasant-syntax"
    },
    "platform": [
        {
            "name": "md",
            "description": ""
        }
    ],
    "namespace": "@website.sugarcss-coffeekraken-io.doc",
    "status": "stable",
    "since": "2.0.0",
    "author": {
        "name": "Olivier Bossel",
        "email": "olivier.bossel@gmail.com",
        "url": "https://coffeekraken.io"
    },
    "filename": "10-pleasantSyntax.md.twig",
    "extension": "md",
    "relPath": "src/doc/10-pleasantSyntax.md.twig",
    "children": {},
    "isDependency": false,
    "package": {
        "name": "@website/sugarcss-coffeekraken-io",
        "description": "The frontend toolkit that works for everyone. Experts, professionals and new-comers",
        "version": "2.0.0-beta.1",
        "author": "Olivier Bossel <olivier.bossel@gmail.com> (https://coffeekraken.io)",
        "license": "MIT",
        "type": "npm"
    },
    "path": "/Users/olivierbossel/data/web/coffeekraken/coffeekraken/packages/@websites/sugarcss-coffeekraken-io/src/doc/10-pleasantSyntax.md.twig",
    "docHtml": "<!-- This file has been generated using\n     the \"@coffeekraken/s-markdown-builder\" package.\n     !!! Do not edit it directly... -->\n\n<!-- body -->\n\n<!--\n/**\n* @name            03. Pleasant syntax\n* @namespace       doc\n* @type            Markdown\n* @platform        md\n* @status          stable\n* @menu            Documentation           /doc/pleasant-syntax\n*\n* @since           2.0.0\n* @author    Olivier Bossel <olivier.bossel@gmail.com> (https://coffeekraken.io)\n*/\n-->\n\n<h1 id=\"pleasant-syntax\">Pleasant syntax</h1>\n<p>Pleasant syntax is a way to write your classes into your HTML that let you apply complex behaviors with minimal classes names like so:</p>\n<s-code-example>\n   <template language=\"html\">\n\n<!-- this class: -->\n<!-- s-font:20:bold:italic s-p:40 s-typo:h2 @tablet s-typo:h5 -->\n<!-- will be transformed into -->\n<div\n  class=\"s-font s-font-20 s-font-bold s-font-italic s-p s-p-40 s-typo s-typo-h2 s-typo-h5_tablet\"\n>\n  Hello world\n</div>\n\n\n   </template>\n</s-code-example>\n\n<h2 id=\"preprocessors\">Preprocessors</h2>\n<p>In order for this transformation to happen, you&#39;ll need to use one of these transformers:</p>\n<h4 id=\"node--js\">Node / Js</h4>\n<p><strong>expandPleasantCssClassnames</strong>: This will take your classes string and expand theme:</p>\n<s-code-example>\n   <template language=\"js\">\n\nimport { __expandPleasantCssClassnames } from '@coffeekraken/sugar/html';\n__expandPleasantCssClassnames('...');\n\n\n   </template>\n</s-code-example>\n\n<h4 id=\"js\">Js</h4>\n<p><strong>expandPleasantCssClassnamesLive</strong>: This will monitor your app and transform classes live when they appears into the HTML.</p>\n<s-code-example>\n   <template language=\"js\">\n\nimport { __expandPleasantCssClassnamesLive } from '@coffeekraken/sugar/html';\n__expandPleasantCssClassnamesLive();\n\n\n   </template>\n</s-code-example>\n\n<blockquote>\n<p>This behavior is builted-in the <a href=\"/package/@coffeekraken/s-sugar-feature/doc/readme\">@coffeekraken/s-sugar-feature</a> feature with other convinient stuffs...</p>\n</blockquote>\n<h4 id=\"php\">PHP</h4>\n<p><strong>\\Sugar\\html\\expandPleasantCssClassnames</strong>: This will transform all the classes from the HTML string passed.</p>\n<s-code-example>\n   <template language=\"php\">\n\n\n$processed = \\Sugar\\html\\expandPleasantCssClassnames('...');\n\n\n   </template>\n</s-code-example>\n\n<h4 id=\"specifications\">Specifications</h4>\n<p>Here&#39;s the specification that a transformer MUST integrate in order to be considered as a valid one:</p>\n<ol>\n<li>Transform <code>:</code> with <code>-</code></li>\n<li>Repeat base class like so:<ul>\n<li>From: <code>s-font:bold:italic</code></li>\n<li>To: <code>s-font s-font-bold s-font-italic</code></li>\n</ul>\n</li>\n<li>Support the <code>@mediaName</code> syntax like so:<ul>\n<li>From: <code>s-font:bold @mobile s-font:italic</code></li>\n<li>To: <code>s-font s-font-bold s-font-italic_mobile</code></li>\n</ul>\n</li>\n</ol>\n"
}
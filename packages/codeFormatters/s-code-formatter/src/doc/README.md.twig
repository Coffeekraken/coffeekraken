{% extends 'sugar/readme/layouts/main/main.twig' %}
{% block body %}

<!--
/**
 * @name            README
 * @namespace       doc
 * @type            Markdown
 * @platform        md
 * @status          stable
 * @menu            Documentation           /doc/readme
 *
 * @since           2.0.0
 * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://coffeekraken.io)
 */
-->

## SBuilder

This package expose a simple `SBuilder` class that is meant to be extended for each builder you want to create.

For now, this class is the main one used in builders like:

-   [@coffeekraken/s-favicon-builder](/package/@coffeekraken/s-favicon-builder/doc/readme)
-   [@coffeekraken/s-images-builder](/package/@coffeekraken/s-images-builder/doc/readme)
-   [@coffeekraken/s-markdown-builder](/package/@coffeekraken/s-markdown-builder/doc/readme)
-   [@coffeekraken/s-postcss-builder](/package/@coffeekraken/s-postcss-builder/doc/readme)
-   [@coffeekraken/s-sitemap-builder](/package/@coffeekraken/s-sitemap-builder/doc/readme)
-   [@coffeekraken/s-static-builder](/package/@coffeekraken/s-static-builder/doc/readme)
-   [@coffeekraken/s-typescript-builder](/package/@coffeekraken/s-typescript-builder/doc/readme)

## Features

This simple base class gives you some features like:

-   Specify a [@coffeekraken/s-interface](/package/@coffeekraken/s-interface/doc/readme) interface
-   Expose a `build` method that accepts a `params` object which reflect your interface
-   Let you define a `_build` method that will be called with your resolved `params` object

## Usage

Here's a simple example of a custom builder:

```js
import SBuilder from '@coffeekraken/s-builder';
import SPromise from '@coffeekraken/s-promise';
class MyBuilder extends SBuilder {
    constructor(settings = {}) {
        super(settings);
    }
    _build(params, settings) {
        return new SPromise(({ resolve, reject, emit }) => {
            // compilation logic
        });
    }
}
```

{% endblock %}

<s-activate>

  <style type="postcss">
    :host {
      display: inline-block;
    }
  </style>

  <script>
    import __SActivateComponentInterface from './interface/SActivateComponentInterface.ts';
    import __SComponentUtils from '@coffeekraken/s-component-utils';

    export default {
      $targets: undefined,
      $groupElements: undefined,
      targetSelector: undefined,
      onBeforeMount() {

        this.component = new __SComponentUtils(this.root, this.props, {
          interface: __SActivateComponentInterface
        });

        // save state
        if (this.component.props.saveState) {
          if (!this.root.id) throw new Error(`<red>[s-activate]</red> In order to use the "<yellow>saveState</yellow>" property, you MUST specify an "<cyan>id</cyan>" on your s-activate component`);
          this.component.props.active = localStorage.getItem(`s-activate-state-${this.root.id}`) !== null;
        }

        if (this.component.props.target) {
          if (!this.component.props.target.match(/^(\.|\[])/)) {
            this.targetSelector = `#${this.component.props.target}`;
          } else {
            this.targetSelector = this.component.props.target;
          }
        }

      },
      onMounted() {
        // handle target check
        const targets = Array.from(document.querySelectorAll(this.targetSelector));
        if (targets.length) this.$targets = targets;

        if (this.component.props.group) {
          this.$groupElements = Array.from(document.querySelectorAll(`s-activate[group="${this.component.props.group}"]`));
        }

        this.component.props.trigger.forEach(trigger => {
          switch(trigger) {
            case 'click':
              this.root.addEventListener('click', (e) => {
                if (this.isActive() && this.component.props.toggle) {
                  this.unactivate();
                } else {
                  this.activate();
                }
              });
            break;
            case 'anchor':
              if (document.location.hash === this.targetSelector) {
                this.activate();
              }
              window.addEventListener('hashchange', (e) => {
                if (document.location.hash === this.targetSelector) {
                  this.activate();
                }
              });

            break;
          }
        });

        // expose API
        this.root.activate = this.activate.bind(this);
        this.root.unactivate = this.unactivate.bind(this);
        this.root.isActive = this.isActive.bind(this);

        // activate if has the "active" attribute
        if (this.component.props.active) {
          this.activate(true);
        }

      },
      isActive() {
        return this.root.hasAttribute('active');
      },
      activate(force = false) {

        // protect from activating multiple times
        if (!force && this.isActive()) return;

        // save state
        if (this.component.props.saveState) {
          if (!this.root.id) throw new Error(`<red>[s-activate]</red> In order to use the "<yellow>saveState</yellow>" property, you MUST specify an "<cyan>id</cyan>" on your s-activate component`);
          localStorage.setItem(`s-activate-state-${this.root.id}`, true);
        }

        // history
        if (this.component.props.history) {
          document.location.hash = this.targetSelector;
        }

        // check if we have some elements in the group
        if (this.$groupElements) {
          this.$groupElements.forEach($element => {
            if ($element === this.root) return;
            try {
              $element.unactivate();
            } catch(e) {}
          });
        }

        // add the "active" attribute to the component
        this.root.setAttribute('active', true);

        // loop on targets to activate them
        if (this.$targets) {
          this.$targets.forEach($target => {
            $target.classList.add('active');
          });
        }

      },
      unactivate() {

        // protect from unactivating multiple times
        if (!this.isActive()) return;

        // save state
        if (this.component.props.saveState) {
          if (!this.root.id) throw new Error(`<red>[s-activate]</red> In order to use the "<yellow>saveState</yellow>" property, you MUST specify an "<cyan>id</cyan>" on your s-activate component`);
          localStorage.removeItem(`s-activate-state-${this.root.id}`);
        }

        // remove the "active" attribute to the component
        this.root.removeAttribute('active');

        // loop on targets to unactivate them
        if (this.$targets) {
          this.$targets.forEach($target => {
            $target.classList.remove('active');
          });
        }
      }
    }
  </script>
</s-activate>
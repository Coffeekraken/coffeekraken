import*as t from"riot";import e from"@coffeekraken/s-interface";import o from"@coffeekraken/s-component-utils";class i extends e{}i.definition={target:{type:"String"},group:{type:"String"},toggle:{type:{type:"Boolean",nullishAsTrue:!0},default:!1},history:{type:{type:"Boolean",nullishAsTrue:!0},default:!1},active:{type:{type:"Boolean",nullishAsTrue:!0},default:!1},saveState:{type:"Boolean",default:!1},trigger:{type:{type:"Array<String>",splitChars:[","]},default:["click"]}};const s={css:'s-activate,[is="s-activate"]{ display: inline-block; }',exports:{$targets:void 0,$groupElements:void 0,targetSelector:void 0,onBeforeMount(){if(this.component=new o(this.root,this.props,{interface:i}),this.component.props.saveState){if(!this.root.id)throw new Error('<red>[s-activate]</red> In order to use the "<yellow>saveState</yellow>" property, you MUST specify an "<cyan>id</cyan>" on your s-activate component');this.component.props.active=null!==localStorage.getItem(`s-activate-state-${this.root.id}`)}this.component.props.target&&(this.component.props.target.match(/^(\.|\[])/)?this.targetSelector=this.component.props.target:this.targetSelector=`#${this.component.props.target}`)},onMounted(){const t=Array.from(document.querySelectorAll(this.targetSelector));t.length&&(this.$targets=t),this.component.props.group&&(this.$groupElements=Array.from(document.querySelectorAll(`s-activate[group="${this.component.props.group}"]`))),this.component.props.trigger.forEach((t=>{switch(t){case"click":this.root.addEventListener("click",(t=>{this.isActive()&&this.component.props.toggle?this.unactivate():this.activate()}));break;case"anchor":document.location.hash===this.targetSelector&&this.activate(),window.addEventListener("hashchange",(t=>{document.location.hash===this.targetSelector&&this.activate()}))}})),this.root.activate=this.activate.bind(this),this.root.unactivate=this.unactivate.bind(this),this.root.isActive=this.isActive.bind(this),this.component.props.active&&this.activate(!0)},isActive(){return this.root.hasAttribute("active")},activate(t=!1){if(t||!this.isActive()){if(this.component.props.saveState){if(!this.root.id)throw new Error('<red>[s-activate]</red> In order to use the "<yellow>saveState</yellow>" property, you MUST specify an "<cyan>id</cyan>" on your s-activate component');localStorage.setItem(`s-activate-state-${this.root.id}`,!0)}this.component.props.history&&(document.location.hash=this.targetSelector),this.$groupElements&&this.$groupElements.forEach((t=>{if(t!==this.root)try{t.unactivate()}catch(e){}})),this.root.setAttribute("active",!0),this.$targets&&this.$targets.forEach((t=>{t.classList.add("active")}))}},unactivate(){if(this.isActive()){if(this.component.props.saveState){if(!this.root.id)throw new Error('<red>[s-activate]</red> In order to use the "<yellow>saveState</yellow>" property, you MUST specify an "<cyan>id</cyan>" on your s-activate component');localStorage.removeItem(`s-activate-state-${this.root.id}`)}this.root.removeAttribute("active"),this.$targets&&this.$targets.forEach((t=>{t.classList.remove("active")}))}}},template:null,name:"s-activate"};t.register("s-activate",s),setTimeout((()=>{t.mount("s-activate")})),s.mount=()=>{t.mount("s-activate")},window.env||(window.env={SUGAR:{}}),window.env.SUGAR=JSON.parse('{"ENVIRONMENT":"development"}');export default s;

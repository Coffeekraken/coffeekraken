import{css,unsafeCSS,html}from"lit";import{unsafeHTML}from"lit/directives/unsafe-html.js";import __SInterface from"@coffeekraken/s-interface";import __SLitComponent from"@coffeekraken/s-lit-component";import __deepMerge from"@coffeekraken/sugar/shared/object/deepMerge";import __isPlainObject from"@coffeekraken/sugar/shared/is/plainObject";import __cursorToEnd from"@coffeekraken/sugar/js/dom/input/cursorToEnd";import __clone from"@coffeekraken/sugar/shared/object/clone";import __distanceFromElementTopToViewportBottom from"@coffeekraken/sugar/js/dom/distance/fromElementTopToViewportBottom";import __getStyleProperty from"@coffeekraken/sugar/js/dom/style/getStyleProperty";import __distanceFromElementTopToViewportTop from"@coffeekraken/sugar/js/dom/distance/fromElementTopToViewportTop";import __hotkey from"@coffeekraken/sugar/js/keyboard/hotkey";import __stripTags from"@coffeekraken/sugar/js/dom/manipulate/stripTags";import __onScrollEnd from"@coffeekraken/sugar/js/dom/detect/onScrollEnd";class SFiltrableInputComponentInterface extends __SInterface{static get _definition(){return{items:{description:'Specify an array of items to use in your filtrable list. Can be a JSON string, a function that take an object with the "value" property and must return an array of items to use',type:"String|Function"},value:{description:"Specify the attribute in your items to use as a value. Can be also a function that will be called with an object containing the selected item and must return the string you want to use as value",type:"String",default:"value"},label:{description:"Specify the attribute in your items to use as a label. Can be also a function that will be called with an object containing the selected item and must return the string you want to use as label",type:"String|Function",default:"value"},emptyText:{description:'Specify the text to use for the default "empty" (no result) state',type:"String",default:"No item to display"},searchValuePreprocess:{description:"Specify a function used to preprocess the value just before actually searching through the items",type:"Function"},loadingText:{description:'Specify the text to use for the default "loading" state',type:"String",default:"Loading please wait..."},filterItems:{description:"Specify a function to use to filter the items. Must return the filtered list of items",type:"Function"},filtrable:{description:'Specify all the properties of your "item" to use as source for the filtrable process',type:{type:"Array<String>",splitChars:[","]},default:[]},templates:{description:'Specify either an object with properties like "item", "empty" and "loading", or a function returning the good template depending on tne "type" argument property',type:"Object|Function"},closeTimeout:{description:"Specify the duration before closing the list when having selected an item",type:"Number",default:100},interactive:{description:"Specify if your items in the list are interactive or not to let the user click and interact with them",type:"Boolean",default:!1},closeOnSelect:{description:"Specify if you wantr to close the list when selecting an item",type:"Boolean",default:!1},notSelectable:{description:"Specify if you want the items to be not selectable",type:"Boolean",default:!1},maxItems:{description:"Specify the maximum number of items to display at first in the list",type:"Number",default:25}}}}var __css=".s-filtrable-input {\n    font-size: calc(1rem * var(--s-scale, 1));\n    display: inline-block;\n    position: relative;\n}\n\n    .s-filtrable-input .s-filtrable-input__input {\n    }\n\n    .s-filtrable-input .s-filtrable-input__before,\n    .s-filtrable-input .s-filtrable-input__after {\n        flex-grow: 0;\n        width: 100%;\n    }\n\n    .s-filtrable-input .s-filtrable-input__dropdown {\n        position: absolute;\n        top: 100%;\n        left: 0;\n        opacity: 0;\n        max-width: calc(100vw - 100px);\n        pointer-events: none;\n        margin: 20px 0;\n        display: flex;\n        flex-direction: column;\n    }\n\n    .s-filtrable-input:focus-within .s-filtrable-input__dropdown {\n        pointer-events: all;\n        opacity: 1;\n    }\n\n    .s-filtrable-input.s-filtrable-input--top .s-filtrable-input__dropdown {\n            top: auto;\n            bottom: 100%;\n        }\n\n    .s-filtrable-input .s-filtrable-input__input:focus + .s-filtrable-input__dropdown,\n    .s-filtrable-input .s-filtrable-input__dropdown:focus,\n    .s-filtrable-input .s-filtrable-input__dropdown:focus-within {\n        opacity: 1;\n        pointer-events: all !important;\n    }\n\n    .s-filtrable-input .s-filtrable-input__list {\n        overflow-x: hidden;\n        overflow-y: auto;\n    }\n\n    .s-filtrable-input .s-filtrable-input__list-item {\n        position: relative;\n        -webkit-user-select: none;\n           -moz-user-select: none;\n            -ms-user-select: none;\n                user-select: none;\n    }\n\n    .s-filtrable-input:not([interactive]) .s-filtrable-input__list-item {\n        cursor: pointer;\n    }\n\n    .s-filtrable-input:not([interactive]) .s-filtrable-input__list-item * {\n            pointer-events: none;\n        }\n",__awaiter=globalThis&&globalThis.__awaiter||function(t,a,r,o){return new(r=r||Promise)(function(s,e){function i(t){try{n(o.next(t))}catch(t){e(t)}}function l(t){try{n(o.throw(t))}catch(t){e(t)}}function n(t){var e;t.done?s(t.value):((e=t.value)instanceof r?e:new r(function(t){t(e)})).then(i,l)}n((o=o.apply(t,a||[])).next())})};class SFiltrableInput extends __SLitComponent{constructor(){var t;super(__deepMerge({litComponent:{shadowDom:!1},componentUtils:{interface:SFiltrableInputComponentInterface}})),this._templatesFromHtml={},this.state={baseTemplates:{},preselectedItem:{},preselectedItemIdx:-1,selectedItemIdx:-1,selectedItem:{},displayedMaxItems:0,value:"",isActive:!1,isLoading:!1,items:[],filteredItems:[]},this.state.displayedMaxItems=this.props.maxItems,!this.props.items||"string"!=typeof this.props.items||(t=document.querySelector(this.props.items))&&(this.state.items=JSON.parse(t.innerHTML),this.requestUpdate()),this.state.baseTemplates=({type:t,item:e,html:s})=>{switch(t){case"item":return s`
                        <div class="${this.componentUtils.className("__item")}">
                            ${unsafeHTML("function"==typeof this.props.label?this.props.label({item:e}):e[this.props.label])}
                        </div>
                    `;case"empty":return s`
                        <div
                            class="${this.componentUtils.className("__empty")}"
                        >
                            ${this.props.emptyText}
                        </div>
                    `;case"loading":return s`
                        <div
                            class="${this.componentUtils.className("__loading")}"
                        >
                            ${this.props.loadingText}
                        </div>
                    `}}}static get styles(){return css`
            ${unsafeCSS(__css)}
        `}firstUpdated(){var t;return __awaiter(this,void 0,void 0,function*(){this.$input=this.querySelector("input"),this.$input.setAttribute("autocomplete","off"),this.$form=this.$input.form,this.$form.addEventListener("submit",t=>{this.state.isActive&&t.preventDefault()}),this._grabTemplates(),this.props.bare||null!==(t=this.$input.classList)&&void 0!==t&&t.add("s-input"),this.$input.addEventListener("keyup",t=>{this.state.isActive=!0;t=t.target.value;this.state.value=t,this.state.displayedMaxItems=this.props.maxItems,this.filterItems()}),this.$input.addEventListener("focus",t=>{t=t.target.value;this.state.value=t,this.state.isActive=!0,this.filterItems(),this._updateListSizeAndPosition()}),this.$input.classList.add(this.componentUtils.className("__input")),(this.$container=this).$container.classList.add("s-filtrable-input"),this.$container.classList.add(this.componentUtils.className()),this.$list=this.querySelector("ul"),this.$dropdown=this.querySelector(".s-filtrable-input__dropdown"),this.prepend(this.$input),this.filterItems(),document.addEventListener("scroll",()=>{this._updateListSizeAndPosition()}),this._updateListSizeAndPosition(),__onScrollEnd(this.$list,()=>{var t;this.state.displayedMaxItems=(null!==(t=this.state.displayedMaxItems)&&void 0!==t?t:0)+this.props.maxItems,this.filterItems(!1)}),__hotkey("escape").on("press",t=>{t.preventDefault(),this.state.isActive&&this.close()}),__hotkey("up").on("press",t=>{if(t.preventDefault(),this.state.isActive){this.state.preselectedItemIdx=0<this.state.preselectedItemIdx?this.state.preselectedItemIdx-1:0,this.requestUpdate();const e=this.$list.children[this.state.preselectedItemIdx];e.focus()}}),__hotkey("down").on("press",t=>{if(t.preventDefault(),this.state.isActive){this.state.preselectedItemIdx=this.state.preselectedItemIdx>=this.state.filteredItems.length-1?this.state.filteredItems.length-1:this.state.preselectedItemIdx+1,this.requestUpdate();const e=this.$list.children[this.state.preselectedItemIdx];e.focus()}}),__hotkey("return").on("press",t=>{this.state.isActive&&this.validateAndClose()}),this.$input.value&&(this.state.value=this.$input.value,__cursorToEnd(this.$input),this.filterItems(!0))})}_grabTemplates(){this.querySelectorAll("template").forEach(t=>{t.hasAttribute("type")&&(this._templatesFromHtml[t.getAttribute("type")]=t.innerHTML)})}_getTemplate(t){if(this.props.templates){var e=this.props.templates({type:t,html:html});if(e)return e}return this._templatesFromHtml[t]?html`
                ${unsafeHTML(this._templatesFromHtml[t])}
            `:this.state.baseTemplates({type:t,html:html})}get selectedItem(){if(-1!==this.state.selectedItemIdx)return this.state.filteredItems[this.state.selectedItemIdx]}get preselectedItem(){if(-1!==this.state.preselectedItemIdx)return this.state.filteredItems[this.state.preselectedItemIdx]}validate(){var t,e;if(-1!==this.state.preselectedItemIdx){if(this.preselectedItem){const i=__deepMerge(Object.assign({},this.props),null!==(t=this.state.preselectedItem.props)&&void 0!==t?t:{});if("string"==typeof i.value&&null!==(e=this.preselectedItem)&&void 0!==e&&e[i.value])this.$input.value=__stripTags(this.preselectedItem[i.value]);else if("function"==typeof i.value){var s=i.value({item:this.state.filteredItems[this.state.preselectedItemIdx]});if("string"!=typeof s)throw new Error(`<red>[s-filtrable-input]</red> Sorry but the returned value "<yellow>${s}</yellow>" has to be a string...`);this.$input.value=__stripTags(s)}}this.state.selectedItemIdx=this.state.preselectedItemIdx;s=this.$list.children[this.state.selectedItemIdx],s=new CustomEvent("selectItem",{bubbles:!0,detail:{item:this.selectedItem,$elm:s}});this.dispatchEvent(s),this.state.value=this.$input.value,this.requestUpdate(),this.props.closeOnSelect&&(this.reset(),this.filterItems(),this.close())}}validateAndClose(){this.validate(),setTimeout(()=>{this.close()},this.props.closeTimeout)}resetSelected(){this.state.preselectedItemIdx=-1,this.state.preselectedItem={},this.state.selectedItemIdx=-1,this.state.selectedItem={}}reset(){this.resetSelected(),this.$input.value=""}close(){__cursorToEnd(this.$input),this.$input.blur(),this.state.isActive=!1}refreshItems(){return __awaiter(this,void 0,void 0,function*(){if("function"==typeof this.props.items){this.state.isLoading=!0,this.requestUpdate();var t=yield this.props.items({value:this.$input.value});if(__isPlainObject(t))this.state.items=Object.values(t);else{if(!Array.isArray(t))throw new Error('Sorry but the "items" MUST be an Array...');this.state.items=t}}})}filterItems(s=!0){return __awaiter(this,void 0,void 0,function*(){s&&(yield this.refreshItems()),this.resetSelected();let t=this.state.items,a=this.state.value;this.props.searchValuePreprocess&&(a=this.props.searchValuePreprocess(a));let e=t.map(t=>__clone(t));if(this.props.filterItems)e=yield this.props.filterItems(e,a,this.state);else{let t=0;e=e.filter(e=>{if(t>=this.state.displayedMaxItems)return!1;if(!this.props.filtrable.length)return!0;let s=!1;for(let t=0;t<Object.keys(e).length;t++){const l=Object.keys(e)[t],n=e[l];var i;"string"==typeof n&&-1!==this.props.filtrable.indexOf(l)&&(i=new RegExp(a.split(" ").join("|"),"gi"),n.match(i)&&(s=!0,a&&""!==a&&(i=new RegExp(a.split(" ").join("|"),"gi"),i=n.replace(i,t=>`<span class="${this.componentUtils.className("__list-item-highlight")} s-highlight"
                                                    >${t}</span>`),e[l]=i)))}return s&&t++,s})}this.state.filteredItems=e,this.state.isLoading=!1,this.requestUpdate()})}select(t){this._setPreselectedItemByIdx(t)}preselectAndValidate(t){this._setPreselectedItemByIdx(t),this.validate()}preselectValidateAndClose(t){this._setPreselectedItemByIdx(t),this.validateAndClose()}_setSelectedItemByIdx(t){this.props.notSelectable||(this.state.selectedItemIdx=t,this.state.selectedItem=this.selectedItem,this.requestUpdate())}_setPreselectedItemByIdx(t){this.props.notSelectable||(this.state.preselectedItemIdx=t,this.state.preselectedItem=this.preselectedItem,this.requestUpdate())}_updateListSizeAndPosition(){if(this.state.isActive){var e=__getStyleProperty(this.$dropdown,"marginTop");__getStyleProperty(this.$dropdown,"marginLeft"),__getStyleProperty(this.$dropdown,"marginRight");var s=__getStyleProperty(this.$dropdown,"marginBottom"),i=__distanceFromElementTopToViewportTop(this.$input),l=__distanceFromElementTopToViewportBottom(this.$input)-this.$input.clientHeight;let t;t=l<i?(this.$container.classList.add("s-filtrable-input--top"),this.$dropdown.style.top="auto",this.$dropdown.style.bottom=`calc(100% - ${s})`,i-parseInt(e)):(this.$container.classList.remove("s-filtrable-input--top"),this.$dropdown.style.bottom="auto",this.$dropdown.style.top=`calc(100% - ${e})`,l-parseInt(s)),this.$dropdown.style.maxHeight=t+"px"}}render(){var t,e,s,i;return html`
            <div class="s-filtrable-input__dropdown">
                <div class="s-filtrable-input__before" tabindex="0">
                    ${this._getTemplate("before")}
                </div>
                <ul class="s-filtrable-input__list">
                    ${this.state.isLoading?html`
                            <li
                                class="s-filtrable-input__list-item s-filtrable-input__list-loading"
                            >
                                ${null!==(e=null===(t=(e=this.props).templates)||void 0===t?void 0:t.call(e,{type:"loading",html:html}))&&void 0!==e?e:this.state.baseTemplates({type:"loading",html:html})}
                            </li>
                        `:!this.state.isLoading&&this.state.filteredItems.length<=0?html`
                            <li
                                class="s-filtrable-input__list-item s-filtrable-input__list-no-item"
                            >
                                ${null!==(i=null===(i=(s=this.props).templates)||void 0===i?void 0:i.call(s,{type:"empty",html:html}))&&void 0!==i?i:this.state.baseTemplates({type:"empty",html:html})}
                            </li>
                        `:!this.state.isLoading&&this.state.filteredItems.length?this.state.filteredItems.map((t,e)=>{var s,i;return e<this.state.displayedMaxItems?html`
                                        <li
                                            @click=${()=>this.preselectAndValidate(e)}
                                            @dblclick=${()=>this.preselectValidateAndClose(e)}
                                            @focus=${()=>this._setPreselectedItemByIdx(e)}
                                            style="z-index: ${999999999-e}"
                                            tabindex="0"
                                            class="s-filtrable-input__list-item ${this.state.selectedItemIdx===e?"active":""}"
                                            hoverable
                                        >
                                            ${null!==(i=null===(s=(i=this.props).templates)||void 0===s?void 0:s.call(i,{type:"item",html:html,unsafeHTML:unsafeHTML,item:t,idx:e}))&&void 0!==i?i:this.state.baseTemplates({type:"item",html:html,unsafeHTML:unsafeHTML,item:t,idx:e})}
                                        </li>
                                    `:""}):""}
                </ul>
                <div class="s-filtrable-input__after" tabindex="0">
                    ${null===(i=(s=this.props).templates)||void 0===i?void 0:i.call(s,{type:"after",html:html})}
                </div>
            </div>
        `}}function define(t={},e="s-filtrable-input"){__SLitComponent.setDefaultProps(e,t),customElements.define(e,SFiltrableInput)}export{SFiltrableInput as default,define};
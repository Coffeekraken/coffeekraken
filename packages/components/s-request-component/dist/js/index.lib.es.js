import*as e from"riot";import t from"@coffeekraken/s-request";import o from"@coffeekraken/s-interface";import n from"@coffeekraken/s-component-utils";import{v4 as r}from"uuid";class i extends o{}i.definition={method:{type:"String",values:["get","post"],default:"get"},url:{type:"String",required:!0},trigger:{type:"String",values:["event"],default:"event"},on:{type:"String"}};const s={css:'s-request,[is="s-request"]{ display: none; }',exports:{_inlineProxyObj:void 0,async onBeforeMount(){this.component=new n(this.root,this.props,{interface:i});const e=this.root.querySelector("script");if(e){const t=r();let o=e.innerText.trim();o=o.replace(/^export default /,`window['s-request-script-${t}'] = `);const n=document.createElement("script");n.text=o,e.parentNode.insertBefore(n,e),e.remove(),this._inlineProxyObj=window[`s-request-script-${t}`]}switch(this.component.props.trigger){case"event":if(!this.component.props.on)throw new Error(`<red>[s-request${this.root.id?`#${this.root.id}`:""}]</red> When using the trigger "event", you MUST specify the "<yellow>on</yellow>" property to tell the component which event to listen to`);if(!this.component.$targets.length)throw new Error(`<red>[s-request${this.root.id?`#${this.root.id}`:""}]</red> When using the trigger "event", you MUST specify the "<yellow>target</yellow>" property to tell the component which other HTMLElement to listen to`);this.component.addTargetsEventListener(this.component.props.on,(async e=>await this._request(e.detail)))}},async _request(e){var o,n;(null==(o=this._inlineProxyObj)?void 0:o.send)&&(e=this._inlineProxyObj.send(e));const r=new t({type:this.component.props.type,url:this.component.props.url});let i=await r.send();return(null==(n=this._inlineProxyObj)?void 0:n.receive)&&(i=this._inlineProxyObj.receive(i)),i},onMounted(){}},template:null,name:"s-request"};e.register("s-request",s),setTimeout((()=>{e.mount("s-request")})),s.mount=()=>{e.mount("s-request")},window.env||(window.env={SUGAR:{}}),window.env.SUGAR=JSON.parse('{"ENVIRONMENT":"development"}');

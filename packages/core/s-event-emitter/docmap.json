{
    "map": {},
    "extends": [],
    "generated": {
        "extends": [
            "@coffeekraken/cli",
            "@coffeekraken/coffeekraken-io",
            "@coffeekraken/s-activate-feature",
            "@coffeekraken/s-bench",
            "@coffeekraken/s-builder",
            "@coffeekraken/s-class",
            "@coffeekraken/s-clipboard-copy-component",
            "@coffeekraken/s-code-example-component",
            "@coffeekraken/s-color-picker-component",
            "@coffeekraken/s-color",
            "@coffeekraken/s-component-utils",
            "@coffeekraken/s-conductor",
            "@coffeekraken/s-config-adapter",
            "@coffeekraken/s-config-folder-adapter",
            "@coffeekraken/s-config-inline-adapter",
            "@coffeekraken/s-config",
            "@coffeekraken/s-dashboard",
            "@coffeekraken/s-data-file-generic",
            "@coffeekraken/s-data-file-js",
            "@coffeekraken/s-data-file-php",
            "@coffeekraken/s-datetime-picker-component",
            "@coffeekraken/s-descriptor",
            "@coffeekraken/s-docblock",
            "@coffeekraken/s-docmap",
            "@coffeekraken/s-duration",
            "@coffeekraken/s-env",
            "@coffeekraken/s-favicon-builder",
            "@coffeekraken/s-feature",
            "@coffeekraken/s-file",
            "@coffeekraken/s-filtrable-input-component",
            "@coffeekraken/s-floating-feature",
            "@coffeekraken/s-form-validate-feature",
            "@coffeekraken/s-frontend-checker",
            "@coffeekraken/s-frontend-server",
            "@coffeekraken/s-frontspec",
            "@coffeekraken/s-kitchen",
            "@coffeekraken/s-glob",
            "@coffeekraken/s-handlebars",
            "@coffeekraken/s-images-builder",
            "@coffeekraken/s-inline-feature",
            "@coffeekraken/s-interface",
            "@coffeekraken/s-lit-component",
            "@coffeekraken/s-log",
            "@coffeekraken/s-markdown-builder",
            "@coffeekraken/s-monorepo",
            "@coffeekraken/s-notification",
            "@coffeekraken/s-package",
            "@coffeekraken/s-page-transition-feature",
            "@coffeekraken/s-panel-component",
            "@coffeekraken/s-postcss-builder",
            "@coffeekraken/s-postcss-sugar-plugin",
            "@coffeekraken/s-process",
            "@coffeekraken/s-promise",
            "@coffeekraken/s-range-component",
            "@coffeekraken/s-refocus-feature",
            "@coffeekraken/s-request",
            "@coffeekraken/s-scroll-component",
            "@coffeekraken/s-sitemap-builder",
            "@coffeekraken/s-slider-component",
            "@coffeekraken/s-static-builder",
            "@coffeekraken/s-stdio",
            "@coffeekraken/s-sugar-config",
            "@coffeekraken/s-sugar-element",
            "@coffeekraken/s-sugar-feature",
            "@coffeekraken/s-sugar-json",
            "@coffeekraken/s-theme",
            "@coffeekraken/s-timer",
            "@coffeekraken/s-type",
            "@coffeekraken/s-typescript-builder",
            "@coffeekraken/s-url",
            "@coffeekraken/s-validator",
            "@coffeekraken/s-view-renderer-engine-blade",
            "@coffeekraken/s-view-renderer-engine-lit",
            "@coffeekraken/s-view-renderer-engine-twig",
            "@coffeekraken/s-view-renderer",
            "@coffeekraken/s-vite-postcss-plugin",
            "@coffeekraken/s-vite-sugar-plugin",
            "@coffeekraken/s-vite",
            "@coffeekraken/sugar"
        ],
        "map": {
            "@coffeekraken.s-event-emitter.doc.README": {
                "id": "@coffeekraken.s-event-emitter.doc.README",
                "name": "README",
                "type": "Markdown",
                "menu": {
                    "tree": [
                        "Documentation"
                    ],
                    "slug": "/doc/readme"
                },
                "platform": [
                    {
                        "name": "md",
                        "description": ""
                    }
                ],
                "namespace": "@coffeekraken.s-event-emitter.doc",
                "status": "stable",
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://coffeekraken.io"
                },
                "filename": "README.md",
                "extension": "md",
                "relPath": "src/doc/README.md",
                "children": {}
            },
            "@coffeekraken.s-event-emitter.sugar.js.event.SEventEmitter": {
                "id": "@coffeekraken.s-event-emitter.sugar.js.event.SEventEmitter",
                "name": "SEventEmitter",
                "type": "Class",
                "namespace": "@coffeekraken.s-event-emitter.sugar.js.event",
                "status": "beta",
                "example": [
                    {
                        "language": "js",
                        "code": "import SEventEmitter from '@coffeekraken/sugar/js/event/SEventEmitter';"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com"
                },
                "filename": "SEventEmitter.ts",
                "extension": "ts",
                "relPath": "src/shared/SEventEmitter.ts",
                "children": {
                    "global": {
                        "id": "b87454041a358fd3462a266b2fa2d370a45d3d5c6156fe60c77d702b4197d914",
                        "name": "global",
                        "type": "SEventEmitter",
                        "description": "This static property store a global event emitter instance that you can use to\ncommunicate between processes with ease or simply into a same process\nbetween all of your running things",
                        "static": "true",
                        "since": "2.0.0"
                    },
                    "pipe": {
                        "id": "2ec81abd9b243cf2b39447d137afc26424b2b00630407c03c4203f6746409de2",
                        "name": "pipe",
                        "type": "Function",
                        "description": "This method is the same as the ```pipe```and ```pipeFrom``` one but it's just act as the inverse.\nHere you specify whenre you want to pipe this instance events and not from which you want to pipe them here...",
                        "since": "2.0.0",
                        "author": {
                            "name": "Olivier Bossel",
                            "email": "olivier.bossel@gmail.com"
                        }
                    },
                    "constructor": {
                        "id": "3d98fac23aa320e2fd3553e4c27de61b2b55848a5c925e1407a92f4bedbf8466",
                        "name": "constructor",
                        "type": "Function",
                        "description": "Constructor",
                        "example": [
                            {
                                "language": "js",
                                "code": "const promise = new SEventEmitter(({ resolve, reject, emit }) => {\n   // do something...\n}).then(value => {\n   // do something...\n}).finally(value => {\n   // do something...\n});"
                            }
                        ],
                        "author": {
                            "name": "Olivier Bossel",
                            "email": "olivier.bossel@gmail.com"
                        }
                    },
                    "bind": {
                        "id": "ef537e46683b13b619c3a3dc82a2b8d92e784ef0874438cb2821e6ac496c158d",
                        "name": "bind",
                        "type": "Function",
                        "description": "This method allows you to bind another object as the emitter.",
                        "since": "2.0.0",
                        "author": {
                            "name": "Olivier Bossel",
                            "email": "olivier.bossel@gmail.com"
                        }
                    },
                    "pipeerrors": {
                        "id": "4283df1c23b4bd1a5fd0f9b48e45646323c4bca37db93339da028b674b6dc42a",
                        "name": "pipeErrors",
                        "type": "Function",
                        "description": "This is the exact same as the original ```pipe``` method. It's just pipe only the errors.",
                        "since": "2.0.0",
                        "author": {
                            "name": "Olivier Bossel",
                            "email": "olivier.bossel@gmail.com"
                        }
                    },
                    "pipefrom": {
                        "id": "eafde1c534959fb4c9be20410255d01ccc38d98744dc9d20a3851c7fce93941e",
                        "name": "pipeFrom",
                        "type": "Function",
                        "description": "This is the exacte same as the original ```pipe``` method. It's just an aliasw.",
                        "since": "2.0.0",
                        "author": {
                            "name": "Olivier Bossel",
                            "email": "olivier.bossel@gmail.com"
                        }
                    },
                    "start": {
                        "id": "f6580f0283a84e03291d61846d836a08b5b493d5874dd74a768bb08bdf37f15f",
                        "name": "start",
                        "type": "Function",
                        "description": "This method has to be called when you want to start the event emissions.\nThis is usefull only if you set the setting ```asyncStart``` to true.\nUntill you call this method, all the emitted events\nare store in memory and emitted after.",
                        "since": "2.0.0",
                        "author": {
                            "name": "Olivier Bossel",
                            "email": "olivier.bossel@gmail.com"
                        }
                    },
                    "emit": {
                        "id": "9b4335bfcca269f0eb0951055b453166d35aad98b334124190a1eb1d2f167f5b",
                        "name": "emit",
                        "type": "Function",
                        "description": "This is the method that allows you to emit the callbacks like \"catch\", \"finally\", etc... without actually resolving the Promise itself",
                        "example": [],
                        "async": "true",
                        "author": {
                            "name": "Olivier Bossel",
                            "email": "olivier.bossel@gmail.com"
                        }
                    },
                    "on": {
                        "id": "9243d9613701cb5572d7ab68d81278b7969ce3947220a8d9fb826e6f5bde5576",
                        "name": "on",
                        "type": "Function",
                        "description": "This method allows the SEventEmitter user to register a function that will be called every time the \"resolve\" one is called in the executor\nThe context of the callback will be the SEventEmitter instance itself so you can call all the methods available like \"resolve\", \"release\", \"on\", etc using\nthe \"this.resolve('something')\" statusment. In an arrow function like \"(value) => { ... }\", the \"this\" keyword will be bound to the current context where you define\nyour function. You can access to the SEventEmitter instance through the last parameter like so \"(value, SEventEmitterInstance) => { ... }\".",
                        "example": [],
                        "author": {
                            "name": "Olivier Bossel",
                            "email": "olivier.bossel@gmail.com"
                        }
                    },
                    "off": {
                        "id": "8e6fe8675c51e057e83570b2415aea7786dfd0229663ab481d8bf61de6346f64",
                        "name": "off",
                        "type": "Function",
                        "description": "This method allows you to unsubscribe to an event by passing the event name an optionally the callback function.\nIf you don't pass the callback function, all the subscribed events the same as the passed one will be unsubscribed.",
                        "since": "2.0.0",
                        "author": {
                            "name": "Olivier Bossel",
                            "email": "olivier.bossel@gmail.com"
                        }
                    },
                    "destroy": {
                        "id": "3366167084bd81ba7a6e4c863aec31d40d9d53c2db959569eb3cd87a1e2660fe",
                        "name": "destroy",
                        "type": "Function",
                        "description": "Destroying the SEventEmitter instance by unregister all the callbacks, etc...",
                        "author": {
                            "name": "Olivier Bossel",
                            "email": "olivier.bossel@gmail.com"
                        }
                    }
                }
            }
        }
    }
}
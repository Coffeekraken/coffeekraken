{
    "map": {},
    "extends": [],
    "generated": {
        "extends": [
            "@coffeekraken/cli",
            "@coffeekraken/coffeekraken-io",
            "@coffeekraken/prettier-plugin-coffeekraken",
            "@coffeekraken/s-activate-feature",
            "@coffeekraken/s-bench",
            "@coffeekraken/s-builder",
            "@coffeekraken/s-class",
            "@coffeekraken/s-clipboard-copy-component",
            "@coffeekraken/s-code-example-component",
            "@coffeekraken/s-color-picker-component",
            "@coffeekraken/s-color",
            "@coffeekraken/s-component-utils",
            "@coffeekraken/s-conductor",
            "@coffeekraken/s-config",
            "@coffeekraken/s-css-animation",
            "@coffeekraken/s-data-handler-generic",
            "@coffeekraken/s-data-handler-js",
            "@coffeekraken/s-date-picker-component",
            "@coffeekraken/s-descriptor",
            "@coffeekraken/s-docblock",
            "@coffeekraken/s-docmap",
            "@coffeekraken/s-duration",
            "@coffeekraken/s-env",
            "@coffeekraken/s-event-emitter",
            "@coffeekraken/s-favicon-builder",
            "@coffeekraken/s-feature",
            "@coffeekraken/s-file",
            "@coffeekraken/s-filtrable-input-component",
            "@coffeekraken/s-floating-feature",
            "@coffeekraken/s-frontend-server",
            "@coffeekraken/s-frontspec",
            "@coffeekraken/s-frontstack",
            "@coffeekraken/s-glob",
            "@coffeekraken/s-handlebars",
            "@coffeekraken/s-images-builder",
            "@coffeekraken/s-interface",
            "@coffeekraken/s-jest-tester",
            "@coffeekraken/s-lit-component",
            "@coffeekraken/s-log",
            "@coffeekraken/s-markdown-builder",
            "@coffeekraken/s-monorepo",
            "@coffeekraken/s-notification",
            "@coffeekraken/s-package",
            "@coffeekraken/s-page-transition-feature",
            "@coffeekraken/s-panel-component",
            "@coffeekraken/s-parallax-feature",
            "@coffeekraken/s-postcss-builder",
            "@coffeekraken/s-postcss-sugar-plugin",
            "@coffeekraken/s-process",
            "@coffeekraken/s-promise",
            "@coffeekraken/s-range-component",
            "@coffeekraken/s-refocus-feature",
            "@coffeekraken/s-request",
            "@coffeekraken/s-riotjs-plugin-postcss-preprocessor",
            "@coffeekraken/s-scroll-component",
            "@coffeekraken/s-sitemap-builder",
            "@coffeekraken/s-slider-component",
            "@coffeekraken/s-static-builder",
            "@coffeekraken/s-stdio",
            "@coffeekraken/s-sugar-config",
            "@coffeekraken/s-sugar-element",
            "@coffeekraken/s-sugar-feature",
            "@coffeekraken/s-sugar-json",
            "@coffeekraken/s-theme",
            "@coffeekraken/s-timer",
            "@coffeekraken/s-type",
            "@coffeekraken/s-typescript-builder",
            "@coffeekraken/s-url",
            "@coffeekraken/s-view-renderer-engine-blade",
            "@coffeekraken/s-view-renderer-engine-twig",
            "@coffeekraken/s-view-renderer",
            "@coffeekraken/s-vite-plugin-postcss",
            "@coffeekraken/s-vite-plugin-riotjs",
            "@coffeekraken/s-vite-plugin-sugar",
            "@coffeekraken/s-vite",
            "@coffeekraken/sugar"
        ],
        "map": {
            "@coffeekraken.s-form-validate-feature.js.SFormValidateFeature": {
                "name": "SFormValidateFeature",
                "type": "Feature",
                "menu": {
                    "tree": [
                        "Styleguide",
                        "Features"
                    ],
                    "slug": "/styleguide/feature/s-form-validate-feature"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "This feature allows you to validate your forms by using under the hood the **AMAZING joi library**.\nFor now, you can validate data types like `string`, `number` or  `boolean` with options like `email`,\n`date`, `greater`, `less`, `min`, `max`, and a lot more.",
                "namespace": "@coffeekraken.s-form-validate-feature.js",
                "status": "beta",
                "example": [
                    {
                        "language": "html",
                        "title": "Email field",
                        "code": "<label class=\"s-label:responsive\" s-form-validate email email-message=\"Coco\" required-message=\"PLOP\">\n   Email address\n   <input type=\"text\" class=\"s-input s-width:60\" required placeholder=\"olivier.bossel@coffeekraken.io\" />\n</label>"
                    },
                    {
                        "language": "html",
                        "title": "Domain field",
                        "code": "<label class=\"s-label:responsive\" s-form-validate domain>\n   Domain name\n   <input type=\"text\" class=\"s-input s-width:60\" placeholder=\"coffeekraken.io\" />\n</label>"
                    },
                    {
                        "language": "html",
                        "title": "Alphanumeric field",
                        "code": "<label class=\"s-label:responsive\" s-form-validate alphanum>\n   Alphanumeric\n   <input type=\"text\" class=\"s-input s-width:60\" placeholder=\"a-zA-Z0-9\" />\n</label>"
                    },
                    {
                        "language": "html",
                        "title": "Credit card field",
                        "code": "<label class=\"s-label:responsive\" s-form-validate credit-card>\n   Credit card\n   <input type=\"text\" class=\"s-input s-width:60\" placeholder=\"340716737808634\" />\n</label>"
                    },
                    {
                        "language": "html",
                        "title": "Min / Max",
                        "code": "<label class=\"s-label:responsive\" s-form-validate min=\"3\" max=\"6\">\n   Min and max\n   <input type=\"text\" class=\"s-input s-width:60\" placeholder=\"3 to 6\" />\n</label>"
                    },
                    {
                        "language": "html",
                        "title": "Select field",
                        "code": "<label class=\"s-label:responsive\" s-form-validate>\n   Select\n   <select class=\"s-select s-width:60\">\n       <option value=\"value 1\">This is the first option...</option>\n       <option value=\"value 2\">This is the second...</option>\n       <option value=\"value 3\">Third...</option>\n   </select>\n</label>"
                    },
                    {
                        "language": "html",
                        "title": "Select min / max",
                        "code": "<label class=\"s-label:responsive\" s-form-validate min=\"2\" max=\"2\">\n   Multiple select\n   <select multiple class=\"s-select s-width:60\">\n       <option value=\"value 1\">This is the first option...</option>\n       <option value=\"value 2\">This is the second...</option>\n       <option value=\"value 3\">Third...</option>\n   </select>\n</label>"
                    },
                    {
                        "language": "html",
                        "title": "ISO date field",
                        "code": "<label class=\"s-label:responsive\" s-form-validate iso-date>\n   ISO date\n   <s-date-picker input button name=\"my-cool-date\" placeholder=\"2021-09-16\" class=\"s-width:60\"></s-date-picker>\n</label>"
                    },
                    {
                        "language": "html",
                        "title": "Range min / max",
                        "code": "<label class=\"s-label:responsive\" s-form-validate min=\"25\" max=\"75\">\n   Value between 25 and 75\n   <s-range class=\"s-width:60\" min=\"0\" max=\"100\" tooltip></s-range>\n</label>"
                    },
                    {
                        "language": "html",
                        "title": "Checkboxes min / max",
                        "code": "<label class=\"s-label\" s-form-validate min=\"2\" max=\"2\">\n     Choose at least 2 items\n     <div class=\"\">\n        <label class=\"s-label s-mb:20\">\n           Item 1\n           <input type=\"checkbox\" class=\"s-checkbox\" value=\"value 1\" />\n        </label>\n        <label class=\"s-label s-mb:20\">\n           Item 1\n           <input type=\"checkbox\" class=\"s-checkbox\" value=\"value 2\" />\n        </label>\n        <label class=\"s-label s-mb:20\">\n           Item 1\n           <input type=\"checkbox\" class=\"s-checkbox\" value=\"value 3\" />\n        </label>\n     </div>\n</label>"
                    },
                    {
                        "language": "html",
                        "title": "Custom validation",
                        "code": "<label class=\"s-label:responsive\" s-form-validate coffeekraken>\n   Try taping \"coffeekraken\"\n   <input type=\"text\" class=\"s-input s-width:60\" placeholder=\"coffeekraken\" />\n</label>"
                    },
                    {
                        "language": "html",
                        "title": "Submit / Reset",
                        "code": "<form>\n<label class=\"s-label:responsive\" s-form-validate min=\"3\" max=\"6\">\n   Min and max\n   <input type=\"text\" class=\"s-input s-width:60\" placeholder=\"3 to 6\" />\n</label>\n<label class=\"s-label:responsive s-mbs:30\" s-form-validate min=\"2\" max=\"2\">\n   Multiple select\n   <select multiple class=\"s-select s-width:60\">\n       <option value=\"value 1\">This is the first option...</option>\n       <option value=\"value 2\">This is the second...</option>\n       <option value=\"value 3\">Third...</option>\n   </select>\n</label>\n<div class=\"s-text:end s-mbs:30\">\n     <input type=\"reset\" class=\"s-btn\" value=\"Reset!\" />\n     <input type=\"submit\" class=\"s-btn s-color:complementary s-ml:20\" value=\"Submit!\" />\n</div>\n</form>"
                    }
                ],
                "interface": {
                    "name": "SFormValidateFeatureInterface",
                    "description": "",
                    "definition": {
                        "type": {
                            "description": "Specify the validation type. Usually automatically detected depending on the field type",
                            "type": "String",
                            "default": "text"
                        },
                        "on": {
                            "description": "Specify when to trigger a validation. Can be \"change\",\"submit\",\"enter\" and/or \"reset\"",
                            "type": "Array<String>",
                            "values": [
                                "keyup",
                                "change",
                                "submit",
                                "enter",
                                "reset"
                            ],
                            "default": [
                                "keyup",
                                "change",
                                "submit",
                                "enter",
                                "reset"
                            ]
                        },
                        "wrap": {
                            "description": "Specify if you want to wrap your s-form-validate element when theres an error",
                            "type": "Boolean",
                            "default": false
                        },
                        "errorClass": {
                            "description": "Specify the class to apply when theres an error",
                            "type": "String",
                            "default": "s-form-validate--error s-color--error"
                        },
                        "validClass": {
                            "description": "Specify the class to apply on your s-form-validate element when validation is passed successfully",
                            "type": "String",
                            "default": "s-form-validate--valid s-color--success"
                        },
                        "customValidations": {
                            "description": "Specify some custom validations [key]: function(value, helpers). For mor info check out the [Joi](https://joi.dev/api/?v=17.4.2#anycustommethod-description) custom validation doc",
                            "type": "Object",
                            "default": {}
                        },
                        "joiOptions": {
                            "description": "Specify some [Joi](https://joi.dev/) options to use for your validation",
                            "type": "Object",
                            "default": {}
                        },
                        "messages": {
                            "description": "Specify some custom messages for your errors",
                            "type": "Object",
                            "default": {}
                        },
                        "language": {
                            "description": "Specify the language you want to use for messages",
                            "type": "String",
                            "default": "fr"
                        },
                        "displayError": {
                            "description": "Specify if you want to display the error messages or not",
                            "type": "Boolean",
                            "default": true
                        },
                        "alphanum": {
                            "type": "Boolean",
                            "description": "String: Requires the string value to only contain a-z, A-Z, and 0-9."
                        },
                        "base64": {
                            "type": "Boolean",
                            "description": "String: Requires the string value to be a valid base64 string; does not check the decoded value."
                        },
                        "case": {
                            "type": "String",
                            "values": [
                                "upper",
                                "lower"
                            ],
                            "description": "String: Sets the required string case"
                        },
                        "creditCard": {
                            "type": "Boolean",
                            "description": "String: Requires the number to be a credit card number (Using Luhn Algorithm)."
                        },
                        "dataUri": {
                            "type": "Boolean",
                            "description": "String: Requires the string value to be a valid data URI string."
                        },
                        "domain": {
                            "type": "Boolean|String",
                            "description": "String: Requires the string value to be a valid domain name."
                        },
                        "email": {
                            "type": "Boolean|String",
                            "description": "String: Requires the string value to be a valid email address."
                        },
                        "guid": {
                            "type": "Boolean|String",
                            "description": "String: Requires the string value to be a valid GUID."
                        },
                        "hex": {
                            "type": "Boolean|String",
                            "description": "String: Requires the string value to be a valid hexadecimal string."
                        },
                        "hostname": {
                            "type": "Boolean|String",
                            "description": "String: Requires the string value to be a valid hostname as per RFC1123."
                        },
                        "insensitive": {
                            "type": "Boolean|String",
                            "description": "String: Allows the value to match any value in the allowed list or disallowed list in a case insensitive comparison."
                        },
                        "ip": {
                            "type": "Boolean|String",
                            "description": "String: Requires the string value to be a valid ip address."
                        },
                        "isoDate": {
                            "type": "Boolean|String",
                            "description": "String: Requires the string value to be in valid ISO 8601 date format."
                        },
                        "isoDuration": {
                            "type": "Boolean|String",
                            "description": "String: Requires the string value to be in valid ISO 8601 duration format."
                        },
                        "length": {
                            "type": "Number",
                            "description": "String: Specifies the exact string length required"
                        },
                        "lowercase": {
                            "type": "Boolean|String",
                            "description": "String: Requires the string value to be all lowercase. If the validation convert option is on (enabled by default), the string will be forced to lowercase."
                        },
                        "max": {
                            "type": "Number",
                            "description": "String: String: Specifies the maximum number of string characters\nDate: Specifies the latest date allowed\nNumber: Specifies the minimum value"
                        },
                        "min": {
                            "type": "Number",
                            "description": "String: String: Specifies the minimum number string characters\nDate: Specifies the oldest date allowed\nNumber: Specifies the minimum value"
                        },
                        "normalize": {
                            "type": "String",
                            "description": "String: Requires the string value to be in a Unicode normalized form. If the validation convert option is on (enabled by default), the string will be normalized."
                        },
                        "pattern": {
                            "type": "String",
                            "description": "String: a regular expression object the string value must match against. Note that if the pattern is a regular expression, for it to match the entire key name, it must begin with ^ and end with $."
                        },
                        "token": {
                            "type": "Boolean",
                            "description": "String: Requires the string value to only contain a-z, A-Z, 0-9, and underscore _."
                        },
                        "trim": {
                            "type": "Boolean",
                            "description": "String: Requires the string value to contain no whitespace before or after. If the validation convert option is on (enabled by default), the string will be trimmed."
                        },
                        "truncate": {
                            "type": "Boolean",
                            "description": "String: Specifies whether the string.max() limit should be used as a truncation."
                        },
                        "uppercase": {
                            "type": "Boolean",
                            "description": "String: Requires the string value to be all uppercase. If the validation convert option is on (enabled by default), the string will be forced to uppercase."
                        },
                        "uri": {
                            "type": "Boolean|String",
                            "description": "String: Requires the string value to be a valid RFC 3986 URI."
                        },
                        "greater": {
                            "type": "String",
                            "description": "String: Date: Specifies that the value must be greater than date (or a reference)\nNumber: Specifies that the value must be greater than limit or a reference."
                        },
                        "less": {
                            "type": "String",
                            "description": "String: Date: Specifies that the value must be less than date (or a reference)\nNumber: Specifies that the value must be less than limit or a reference."
                        },
                        "iso": {
                            "type": "Boolean",
                            "description": "Date: Requires the string value to be in valid ISO 8601 date format."
                        },
                        "timestamp": {
                            "type": "Boolean|String",
                            "description": "Date: Requires the value to be a timestamp interval from Unix Time"
                        },
                        "integer": {
                            "type": "Boolean",
                            "description": "Number: Requires the number to be an integer (no floating point)."
                        },
                        "multiple": {
                            "type": "Number",
                            "description": "Number: Specifies that the value must be a multiple of base (or a reference):"
                        },
                        "negative": {
                            "type": "Boolean",
                            "description": "Number: Requires the number to be negative"
                        },
                        "port": {
                            "type": "Boolean",
                            "description": "Number: Requires the number to be a TCP port, so between 0 and 65535."
                        },
                        "positive": {
                            "type": "Boolean",
                            "description": "Number: Requires the number to be positive"
                        },
                        "precision": {
                            "type": "Number",
                            "description": "Number: Specifies the maximum number of decimal places"
                        },
                        "unsafe": {
                            "type": "Boolean",
                            "description": "Number: By default, numbers must be within JavaScript's safety range (Number.MIN_SAFE_INTEGER & Number.MAX_SAFE_INTEGER), and when given a string, should be converted without loss of information. You can allow unsafe numbers at your own risks by calling number.unsafe()."
                        }
                    }
                },
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://coffeekraken.io"
                },
                "filename": "SFormValidateFeature.ts",
                "extension": "ts",
                "relPath": "src/js/SFormValidateFeature.ts",
                "children": {}
            },
            "@coffeekraken.s-form-validate-feature.js.interface.SFormValidateFeatureInterface": {
                "name": "SFormValidateFeatureInterface",
                "type": ".                      Class",
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "This interface represent the attributes of the SFormValidateFeature",
                "namespace": "@coffeekraken.s-form-validate-feature.js.interface",
                "status": "beta",
                "interface": {
                    "name": "SFormValidateFeatureInterface",
                    "description": "",
                    "definition": {
                        "type": {
                            "description": "Specify the validation type. Usually automatically detected depending on the field type",
                            "type": "String",
                            "default": "text"
                        },
                        "on": {
                            "description": "Specify when to trigger a validation. Can be \"change\",\"submit\",\"enter\" and/or \"reset\"",
                            "type": "Array<String>",
                            "values": [
                                "keyup",
                                "change",
                                "submit",
                                "enter",
                                "reset"
                            ],
                            "default": [
                                "keyup",
                                "change",
                                "submit",
                                "enter",
                                "reset"
                            ]
                        },
                        "wrap": {
                            "description": "Specify if you want to wrap your s-form-validate element when theres an error",
                            "type": "Boolean",
                            "default": false
                        },
                        "errorClass": {
                            "description": "Specify the class to apply when theres an error",
                            "type": "String",
                            "default": "s-form-validate--error s-color--error"
                        },
                        "validClass": {
                            "description": "Specify the class to apply on your s-form-validate element when validation is passed successfully",
                            "type": "String",
                            "default": "s-form-validate--valid s-color--success"
                        },
                        "customValidations": {
                            "description": "Specify some custom validations [key]: function(value, helpers). For mor info check out the [Joi](https://joi.dev/api/?v=17.4.2#anycustommethod-description) custom validation doc",
                            "type": "Object",
                            "default": {}
                        },
                        "joiOptions": {
                            "description": "Specify some [Joi](https://joi.dev/) options to use for your validation",
                            "type": "Object",
                            "default": {}
                        },
                        "messages": {
                            "description": "Specify some custom messages for your errors",
                            "type": "Object",
                            "default": {}
                        },
                        "language": {
                            "description": "Specify the language you want to use for messages",
                            "type": "String",
                            "default": "fr"
                        },
                        "displayError": {
                            "description": "Specify if you want to display the error messages or not",
                            "type": "Boolean",
                            "default": true
                        },
                        "alphanum": {
                            "type": "Boolean",
                            "description": "String: Requires the string value to only contain a-z, A-Z, and 0-9."
                        },
                        "base64": {
                            "type": "Boolean",
                            "description": "String: Requires the string value to be a valid base64 string; does not check the decoded value."
                        },
                        "case": {
                            "type": "String",
                            "values": [
                                "upper",
                                "lower"
                            ],
                            "description": "String: Sets the required string case"
                        },
                        "creditCard": {
                            "type": "Boolean",
                            "description": "String: Requires the number to be a credit card number (Using Luhn Algorithm)."
                        },
                        "dataUri": {
                            "type": "Boolean",
                            "description": "String: Requires the string value to be a valid data URI string."
                        },
                        "domain": {
                            "type": "Boolean|String",
                            "description": "String: Requires the string value to be a valid domain name."
                        },
                        "email": {
                            "type": "Boolean|String",
                            "description": "String: Requires the string value to be a valid email address."
                        },
                        "guid": {
                            "type": "Boolean|String",
                            "description": "String: Requires the string value to be a valid GUID."
                        },
                        "hex": {
                            "type": "Boolean|String",
                            "description": "String: Requires the string value to be a valid hexadecimal string."
                        },
                        "hostname": {
                            "type": "Boolean|String",
                            "description": "String: Requires the string value to be a valid hostname as per RFC1123."
                        },
                        "insensitive": {
                            "type": "Boolean|String",
                            "description": "String: Allows the value to match any value in the allowed list or disallowed list in a case insensitive comparison."
                        },
                        "ip": {
                            "type": "Boolean|String",
                            "description": "String: Requires the string value to be a valid ip address."
                        },
                        "isoDate": {
                            "type": "Boolean|String",
                            "description": "String: Requires the string value to be in valid ISO 8601 date format."
                        },
                        "isoDuration": {
                            "type": "Boolean|String",
                            "description": "String: Requires the string value to be in valid ISO 8601 duration format."
                        },
                        "length": {
                            "type": "Number",
                            "description": "String: Specifies the exact string length required"
                        },
                        "lowercase": {
                            "type": "Boolean|String",
                            "description": "String: Requires the string value to be all lowercase. If the validation convert option is on (enabled by default), the string will be forced to lowercase."
                        },
                        "max": {
                            "type": "Number",
                            "description": "String: String: Specifies the maximum number of string characters\nDate: Specifies the latest date allowed\nNumber: Specifies the minimum value"
                        },
                        "min": {
                            "type": "Number",
                            "description": "String: String: Specifies the minimum number string characters\nDate: Specifies the oldest date allowed\nNumber: Specifies the minimum value"
                        },
                        "normalize": {
                            "type": "String",
                            "description": "String: Requires the string value to be in a Unicode normalized form. If the validation convert option is on (enabled by default), the string will be normalized."
                        },
                        "pattern": {
                            "type": "String",
                            "description": "String: a regular expression object the string value must match against. Note that if the pattern is a regular expression, for it to match the entire key name, it must begin with ^ and end with $."
                        },
                        "token": {
                            "type": "Boolean",
                            "description": "String: Requires the string value to only contain a-z, A-Z, 0-9, and underscore _."
                        },
                        "trim": {
                            "type": "Boolean",
                            "description": "String: Requires the string value to contain no whitespace before or after. If the validation convert option is on (enabled by default), the string will be trimmed."
                        },
                        "truncate": {
                            "type": "Boolean",
                            "description": "String: Specifies whether the string.max() limit should be used as a truncation."
                        },
                        "uppercase": {
                            "type": "Boolean",
                            "description": "String: Requires the string value to be all uppercase. If the validation convert option is on (enabled by default), the string will be forced to uppercase."
                        },
                        "uri": {
                            "type": "Boolean|String",
                            "description": "String: Requires the string value to be a valid RFC 3986 URI."
                        },
                        "greater": {
                            "type": "String",
                            "description": "String: Date: Specifies that the value must be greater than date (or a reference)\nNumber: Specifies that the value must be greater than limit or a reference."
                        },
                        "less": {
                            "type": "String",
                            "description": "String: Date: Specifies that the value must be less than date (or a reference)\nNumber: Specifies that the value must be less than limit or a reference."
                        },
                        "iso": {
                            "type": "Boolean",
                            "description": "Date: Requires the string value to be in valid ISO 8601 date format."
                        },
                        "timestamp": {
                            "type": "Boolean|String",
                            "description": "Date: Requires the value to be a timestamp interval from Unix Time"
                        },
                        "integer": {
                            "type": "Boolean",
                            "description": "Number: Requires the number to be an integer (no floating point)."
                        },
                        "multiple": {
                            "type": "Number",
                            "description": "Number: Specifies that the value must be a multiple of base (or a reference):"
                        },
                        "negative": {
                            "type": "Boolean",
                            "description": "Number: Requires the number to be negative"
                        },
                        "port": {
                            "type": "Boolean",
                            "description": "Number: Requires the number to be a TCP port, so between 0 and 65535."
                        },
                        "positive": {
                            "type": "Boolean",
                            "description": "Number: Requires the number to be positive"
                        },
                        "precision": {
                            "type": "Number",
                            "description": "Number: Specifies the maximum number of decimal places"
                        },
                        "unsafe": {
                            "type": "Boolean",
                            "description": "Number: By default, numbers must be within JavaScript's safety range (Number.MIN_SAFE_INTEGER & Number.MAX_SAFE_INTEGER), and when given a string, should be converted without loss of information. You can allow unsafe numbers at your own risks by calling number.unsafe()."
                        }
                    }
                },
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://coffeekraken.io"
                },
                "filename": "SFormValidateFeatureInterface.ts",
                "extension": "ts",
                "relPath": "src/js/interface/SFormValidateFeatureInterface.ts",
                "children": {}
            }
        }
    }
}
{
    "map": {},
    "extends": [],
    "generated": {
        "extends": [
            "@coffeekraken/cli",
            "@coffeekraken/coffeekraken-io",
            "@coffeekraken/s-activate-feature",
            "@coffeekraken/s-appear-feature",
            "@coffeekraken/s-bench",
            "@coffeekraken/s-builder",
            "@coffeekraken/s-class",
            "@coffeekraken/s-clipboard-copy-component",
            "@coffeekraken/s-code-example-component",
            "@coffeekraken/s-code-formatter-prettier",
            "@coffeekraken/s-code-formatter",
            "@coffeekraken/s-color-picker-component",
            "@coffeekraken/s-color",
            "@coffeekraken/s-component-utils",
            "@coffeekraken/s-conductor",
            "@coffeekraken/s-config-adapter",
            "@coffeekraken/s-config-folder-adapter",
            "@coffeekraken/s-config-inline-adapter",
            "@coffeekraken/s-config",
            "@coffeekraken/s-css-animation",
            "@coffeekraken/s-dashboard",
            "@coffeekraken/s-data-file-generic",
            "@coffeekraken/s-data-file-js",
            "@coffeekraken/s-data-file-php",
            "@coffeekraken/s-datetime-picker-component",
            "@coffeekraken/s-descriptor",
            "@coffeekraken/s-docblock",
            "@coffeekraken/s-docmap",
            "@coffeekraken/s-duration",
            "@coffeekraken/s-env",
            "@coffeekraken/s-event-emitter",
            "@coffeekraken/s-favicon-builder",
            "@coffeekraken/s-feature",
            "@coffeekraken/s-file",
            "@coffeekraken/s-filtrable-input-component",
            "@coffeekraken/s-floating-feature",
            "@coffeekraken/s-form-validate-feature",
            "@coffeekraken/s-frontend-checker",
            "@coffeekraken/s-frontend-server",
            "@coffeekraken/s-frontspec",
            "@coffeekraken/s-glob",
            "@coffeekraken/s-handlebars",
            "@coffeekraken/s-images-builder",
            "@coffeekraken/s-inline-feature",
            "@coffeekraken/s-interface",
            "@coffeekraken/s-kitchen",
            "@coffeekraken/s-lit-component",
            "@coffeekraken/s-log",
            "@coffeekraken/s-markdown-builder",
            "@coffeekraken/s-monorepo",
            "@coffeekraken/s-package",
            "@coffeekraken/s-page-transition-feature",
            "@coffeekraken/s-panel-component",
            "@coffeekraken/s-parallax-feature",
            "@coffeekraken/s-postcss-builder",
            "@coffeekraken/s-postcss-sugar-plugin",
            "@coffeekraken/s-process",
            "@coffeekraken/s-promise",
            "@coffeekraken/s-range-component",
            "@coffeekraken/s-rating-component",
            "@coffeekraken/s-refocus-feature",
            "@coffeekraken/s-request",
            "@coffeekraken/s-scroll-component",
            "@coffeekraken/s-sitemap-builder",
            "@coffeekraken/s-slider-component",
            "@coffeekraken/s-static-builder",
            "@coffeekraken/s-stdio",
            "@coffeekraken/s-sugar-config",
            "@coffeekraken/s-sugar-element",
            "@coffeekraken/s-sugar-feature",
            "@coffeekraken/s-sugar-json",
            "@coffeekraken/s-theme-switcher-component",
            "@coffeekraken/s-theme",
            "@coffeekraken/s-timer",
            "@coffeekraken/s-type",
            "@coffeekraken/s-typescript-builder",
            "@coffeekraken/s-url",
            "@coffeekraken/s-validator",
            "@coffeekraken/s-view-renderer-engine-blade",
            "@coffeekraken/s-view-renderer-engine-lit",
            "@coffeekraken/s-view-renderer-engine-twig",
            "@coffeekraken/s-view-renderer",
            "@coffeekraken/s-vite-postcss-plugin",
            "@coffeekraken/s-vite-sugar-plugin",
            "@coffeekraken/s-vite",
            "@coffeekraken/sugar"
        ],
        "map": {
            "@coffeekraken.s-state.node.SState": {
                "id": "@coffeekraken.s-state.node.SState",
                "name": "SState",
                "type": {
                    "types": [
                        {
                            "type": "Class"
                        }
                    ],
                    "raw": "Class"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This class represent a state in your application. This state can be updated, saved, restored, etc...\nYou can subscribe to a state to be notified when data are updating inside, etc...",
                "namespace": "@coffeekraken.s-state.node",
                "status": "beta",
                "example": [
                    {
                        "language": "js",
                        "code": "import SState from '@coffeekraken/s-state';\nconst myState = new SState({\n     myProp: 'hello',\n     sub: {\n         title: 'world'\n     }\n});\nmyState.$set('', (actionObj) => {\n    // do something when your props are updating\n});\nmyState.$set('myProp', (actionObj) => {\n    // do something when the prop \"myProp\" is updated\n});\nmyState.$set('sub.', (actionObj) => {\n    // do something when the sub.title prop is updated\n});\n\n// updating the state as a normal object\nmyState.sub.title = 'plop';"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://coffeekraken.io"
                },
                "filename": "SState.ts",
                "extension": "ts",
                "relPath": "src/shared/SState.ts",
                "children": {
                    "constructor": {
                        "id": "s25157e6a4133a99a095f14428f2e6cfbeaf0016f59b7d54942bf3c86ee65eec1",
                        "name": "constructor",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "Constructor",
                        "since": "2.0.0",
                        "author": {
                            "name": "Olivier Bossel",
                            "email": "olivier.bossel@gmail.com",
                            "url": "https://coffeekraken.io"
                        }
                    }
                }
            },
            "@coffeekraken.s-state.node.SStateManager": {
                "id": "@coffeekraken.s-state.node.SStateManager",
                "name": "SStateManager",
                "type": {
                    "types": [
                        {
                            "type": "Class"
                        }
                    ],
                    "raw": "Class"
                },
                "platform": [
                    {
                        "name": "node",
                        "description": ""
                    }
                ],
                "description": "This class represent a state in your application. This state can be updated, saved, restored, etc...\nYou can subscribe to a state to be notified when data are updating inside, etc...",
                "namespace": "@coffeekraken.s-state.node",
                "status": "beta",
                "example": [
                    {
                        "language": "js",
                        "code": "import SStateManager from '@coffeekraken/s-state';\nconst myState = new SStateManager({\n     myProp: 'hello',\n     sub: {\n         title: 'world'\n     }\n});\nmyState.$set('', (actionObj) => {\n    // do something when your props are updating\n});\nmyState.$set('myProp', (actionObj) => {\n    // do something when the prop \"myProp\" is updated\n});\nmyState.$set('sub.', (actionObj) => {\n    // do something when the sub.title prop is updated\n});\n\n// updating the state as a normal object\nmyState.sub.title = 'plop';"
                    }
                ],
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com",
                    "url": "https://coffeekraken.io"
                },
                "filename": "SStateManager.ts",
                "extension": "ts",
                "relPath": "src/shared/SStateManager.ts",
                "children": {
                    "constructor": {
                        "id": "s25157e6a4133a99a095f14428f2e6cfbeaf0016f59b7d54942bf3c86ee65eec1",
                        "name": "constructor",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "Constructor",
                        "since": "2.0.0",
                        "author": {
                            "name": "Olivier Bossel",
                            "email": "olivier.bossel@gmail.com",
                            "url": "https://coffeekraken.io"
                        }
                    },
                    "define": {
                        "id": "s96b98f568e2f4435cab8edaea8eb35e1a5f330ab7a7109dc33b35de236dd7575",
                        "name": "define",
                        "type": {
                            "types": [
                                {
                                    "type": "Function"
                                }
                            ],
                            "raw": "Function"
                        },
                        "description": "This method allows you to define a new state inside the state manager.\nIt's like creating a new SState instance but quicker",
                        "since": "2.0.0",
                        "author": {
                            "name": "Olivier Bossel",
                            "email": "olivier.bossel@gmail.com",
                            "url": "https://coffeekraken.io"
                        }
                    }
                }
            },
            "@coffeekraken.s-state.js.adapters.SStateLsAdapter": {
                "id": "@coffeekraken.s-state.js.adapters.SStateLsAdapter",
                "name": "SStateLsAdapter",
                "type": {
                    "types": [
                        {
                            "type": "ISStateAdapter"
                        }
                    ],
                    "raw": "ISStateAdapter"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "This state adapter allows you to save your state in the localStorage of the browser",
                "namespace": "@coffeekraken.s-state.js.adapters",
                "status": "beta",
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com"
                },
                "filename": "SStateLsAdapter.ts",
                "extension": "ts",
                "relPath": "src/js/adapters/SStateLsAdapter.ts",
                "children": {}
            },
            "@coffeekraken.s-state.js.adapters.SStateFsAdapter": {
                "id": "@coffeekraken.s-state.js.adapters.SStateFsAdapter",
                "name": "SStateFsAdapter",
                "type": {
                    "types": [
                        {
                            "type": "ISStateAdapter"
                        }
                    ],
                    "raw": "ISStateAdapter"
                },
                "platform": [
                    {
                        "name": "js",
                        "description": ""
                    }
                ],
                "description": "This state adapter allows you to save your state in the localStorage of the browser",
                "namespace": "@coffeekraken.s-state.js.adapters",
                "status": "beta",
                "since": "2.0.0",
                "author": {
                    "name": "Olivier Bossel",
                    "email": "olivier.bossel@gmail.com"
                },
                "filename": "SStateFsAdapter.ts",
                "extension": "ts",
                "relPath": "src/node/adapters/SStateFsAdapter.ts",
                "children": {}
            }
        }
    }
}
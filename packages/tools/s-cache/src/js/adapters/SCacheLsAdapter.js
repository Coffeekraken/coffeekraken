// @ts-nocheck
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@coffeekraken/sugar/src/shared/object/deepMerge"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const deepMerge_1 = __importDefault(require("@coffeekraken/sugar/src/shared/object/deepMerge"));
    /**
     * @name                                SCacheFsAdapter
     * @namespace           sugar.js.cache.adapters
     * @type                                Class
     *
     * A filesystem SCache adapter that allows you to store your cache items on the user system
     *
     * @todo      interface
     * @todo      doc
     *
     * @example             js
     * const cache = new SCache({
     *    ttl: 100,
     *    adapter: new SCacheLsAdapter({
     *    })
     * });
     *
     * @since     2.0.0
     * @author         Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
     */
    class SCacheLsAdapter extends __SCacheAdapter {
        /**
         * @name                              constructor
         * @type                              Function
         *
         * Construct the SCacheFsAdapter instance with the settings passed in object format. See description bellow.
         *
         * @param         {Object}          [settings={}]             An object to configure the SCacheFsAdapter instance. This is specific to each adapters.settings.settings...
         *
         * @author         Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
         */
        constructor(settings = {}) {
            super(deepMerge_1.default({}, settings));
        }
        /**
         * @name                          set
         * @type                          Function
         *
         * Set a cache item in the localstorage
         *
         * @param             {String}              name              The item name
         * @param             {Mixed}               value             The value to save
         * @param             {Object}              [settings={}]     A settings object to override the default ones defined on the SCache instance
         * @return            {Object|Boolean}                        Return the objectToSave generated by the "this.processItem" method, or false if something goes wrong...
         *
         * @example           js
         * await myCache.set('myCoolItem', { hello: 'world' }, {
         *    ttl: 40000
         * });
         *
         * @author         Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
         */
        set(name, value) {
            return __awaiter(this, void 0, void 0, function* () {
                // store data into localStorage
                window.localStorage.setItem(`${this.cache.id}.${name}`, value);
                // write has been done correctly
                return true;
            });
        }
        /**
         * @name                          get
         * @type                          Function
         *
         * Get a cache item in the localstorage
         *
         * @param             {String}              name              The item name
         * @return            {Object|Boolean}                        Return the objectToSave generated by the "this.processItem" method, or false if something goes wrong...
         *
         * @example           js
         * await myCache.get('myCoolItem');
         *
         * @author         Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
         */
        get(name) {
            return __awaiter(this, void 0, void 0, function* () {
                return window.localStorage.getItem(`${this.cache.id}.${name}`);
            });
        }
        /**
         * @name                          delete
         * @type                          Function
         *
         * Delete a cache item on the filesystem
         *
         * @param             {String}              name              The item name
         * @return            {Boolean}                               true if all of, false if not...
         *
         * @example           js
         * await myCache.delete('myCoolItem');
         *
         * @author         Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
         */
        delete(name) {
            return __awaiter(this, void 0, void 0, function* () {
                // delete the item from the localStorage
                window.localStorage.removeItem(`${this.cache.id}.${name}`);
                // return true cause all went well
                return true;
            });
        }
        /**
         * @name                          clear
         * @type                          Function
         *
         * Clear all the items in the current cache
         *
         * @return            {Boolean}                               true if all of, false if not...
         *
         * @example           js
         * await myCache.clear;
         *
         * @author         Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
         */
        clear() {
            return __awaiter(this, void 0, void 0, function* () {
                // get all the localStorage keys to filter them
                const keys = Object.keys(window.localStorage);
                // filter the keys to delete
                const keysToDelete = keys.filter((key) => {
                    return key.startsWith(`${this.cache.id}.`);
                });
                // loop on each keys to delete
                keysToDelete.forEach((k) => {
                    window.localStorage.removeItem(k);
                });
                // return true cause all went well
                return true;
            });
        }
        /**
         * @name                      keys
         * @type                      Function
         * @async
         *
         * Return an array of all the items keys saved in this cache instance
         *
         * @return        {Promise}                     A promise resolved with the array of keys
         *
         * @example         js
         * const keys = await myCache.keys(); // => ['item1','item2']
         *
         * @author         Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
         */
        keys() {
            return __awaiter(this, void 0, void 0, function* () {
                // get all the localStorage keys to filter them
                const keys = Object.keys(window.localStorage);
                // filter the keys to get only the ones that bellongs to this cache instance
                const cacheKeys = keys.filter((key) => {
                    return key.startsWith(`${this.cache.id}.`);
                });
                // return the cache keys
                return cacheKeys;
            });
        }
    }
    exports.default = SCacheLsAdapter;
    SCacheLsAdapter.id = 'ls';
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU0NhY2hlTHNBZGFwdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvdG9vbHMvcy1jYWNoZS9zcmMvanMvYWRhcHRlcnMvU0NhY2hlTHNBZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGNBQWM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQUVkLGdHQUEwRTtJQUUxRTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQW1CRztJQUNILE1BQXFCLGVBQWdCLFNBQVEsZUFBZTtRQUcxRDs7Ozs7Ozs7O1dBU0c7UUFDSCxZQUFZLFFBQVEsR0FBRyxFQUFFO1lBQ3ZCLEtBQUssQ0FBQyxtQkFBVyxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ25DLENBQUM7UUFFRDs7Ozs7Ozs7Ozs7Ozs7Ozs7V0FpQkc7UUFDRyxHQUFHLENBQUMsSUFBSSxFQUFFLEtBQUs7O2dCQUNuQiwrQkFBK0I7Z0JBQy9CLE1BQU0sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksSUFBSSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7Z0JBQy9ELGdDQUFnQztnQkFDaEMsT0FBTyxJQUFJLENBQUM7WUFDZCxDQUFDO1NBQUE7UUFFRDs7Ozs7Ozs7Ozs7OztXQWFHO1FBQ0csR0FBRyxDQUFDLElBQUk7O2dCQUNaLE9BQU8sTUFBTSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1lBQ2pFLENBQUM7U0FBQTtRQUVEOzs7Ozs7Ozs7Ozs7O1dBYUc7UUFDRyxNQUFNLENBQUMsSUFBSTs7Z0JBQ2Ysd0NBQXdDO2dCQUN4QyxNQUFNLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLENBQUM7Z0JBRTNELGtDQUFrQztnQkFDbEMsT0FBTyxJQUFJLENBQUM7WUFDZCxDQUFDO1NBQUE7UUFFRDs7Ozs7Ozs7Ozs7O1dBWUc7UUFDRyxLQUFLOztnQkFDVCwrQ0FBK0M7Z0JBQy9DLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO2dCQUU5Qyw0QkFBNEI7Z0JBQzVCLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtvQkFDdkMsT0FBTyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUM3QyxDQUFDLENBQUMsQ0FBQztnQkFFSCw4QkFBOEI7Z0JBQzlCLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtvQkFDekIsTUFBTSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BDLENBQUMsQ0FBQyxDQUFDO2dCQUVILGtDQUFrQztnQkFDbEMsT0FBTyxJQUFJLENBQUM7WUFDZCxDQUFDO1NBQUE7UUFFRDs7Ozs7Ozs7Ozs7OztXQWFHO1FBQ0csSUFBSTs7Z0JBQ1IsK0NBQStDO2dCQUMvQyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFFOUMsNEVBQTRFO2dCQUM1RSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7b0JBQ3BDLE9BQU8sR0FBRyxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDN0MsQ0FBQyxDQUFDLENBQUM7Z0JBRUgsd0JBQXdCO2dCQUN4QixPQUFPLFNBQVMsQ0FBQztZQUNuQixDQUFDO1NBQUE7O0lBMUlILGtDQTJJQztJQTFJUSxrQkFBRSxHQUFHLElBQUksQ0FBQyJ9
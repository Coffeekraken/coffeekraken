"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const s_sugar_config_1 = __importDefault(require("@coffeekraken/s-sugar-config"));
const ensureDirSync_1 = __importDefault(require("@coffeekraken/sugar/src/node/fs/ensureDirSync"));
const removeSync_1 = __importDefault(require("@coffeekraken/sugar/src/node/fs/removeSync"));
const tmpDir_1 = __importDefault(require("@coffeekraken/sugar/src/node/path/tmpDir"));
const deepMerge_1 = __importDefault(require("@coffeekraken/sugar/src/shared/object/deepMerge"));
const fs_1 = __importDefault(require("fs"));
const SCacheAdapter_1 = __importDefault(require("./SCacheAdapter"));
/**
 * @name                                SCacheFsAdapter
 * @namespace           sugar.node.fs.cacheAdapters
 * @type                                Class
 * @status              beta
 *
 * A filesystem SCache adapter that allows you to store your cache items on the user system
 *
 * @example             js
 * const cache = new SCache({
 *    ttl: 100,
 *    adapter: new SCacheFsAdapter({
 *      rootDir: '/my/cool/folder
 *    })
 * });
 *
 * @todo      interface
 * @todo      doc
 * @todo      tests
 *
 * @since         2.0.0
 * @author         Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
class SCacheFsAdapter extends SCacheAdapter_1.default {
    /**
     * @name                              constructor
     * @type                              Function
     *
     * Construct the SCacheFsAdapter instance with the settings passed in object format. See description bellow.
     *
     * @param         {Object}          [settings={}]             An object to configure the SCacheFsAdapter instance. This is specific to each adapters.settings.settings...
     * - rootDir (config.storage.cacheDir) {String}: Specify the root directory where to put all the files to cache
     *
     * @author         Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
     */
    constructor(settings = {}) {
        super(deepMerge_1.default({
            fsCacheAdapter: {
                rootDir: s_sugar_config_1.default('storage.cacheDir') || `${tmpDir_1.default()}/SCache`
            }
        }, settings));
    }
    /**
     * @name      fsCacheAdapter
     * @type      any
     * @get
     *
     * Access the fs cache adapter settings
     *
     * @since       2.0.0
     * @author         Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
     */
    get fsCacheAdapterSettings() {
        return this._settings.fsCacheAdapter;
    }
    /**
     * @name                          set
     * @type                          Function
     *
     * Set a cache item on the filesystem
     *
     * @param             {String}              name              The item name
     * @param             {Mixed}               value             The value to save
     * @param             {Object}              [settings={}]     A settings object to override the default ones defined on the SCache instance
     * @return            {Object|Boolean}                        Return the objectToSave generated by the "this.processItem" method, or false if something goes wrong...
     *
     * @example           js
     * await myCache.set('myCoolItem', { hello: 'world' }, {
     *    ttl: 40000
     * });
     *
     * @author         Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
     */
    set(name, value) {
        return __awaiter(this, void 0, void 0, function* () {
            // generate the item fs name
            const fsName = `${this.cache.id}/${name}.json`.replace(/\/\//gm, '/');
            // ensure we have the folder
            ensureDirSync_1.default(`${this.fsCacheAdapterSettings.rootDir}/${fsName
                .split('/')
                .slice(0, -1)
                .join('/')}`);
            // write the json file
            fs_1.default.writeFileSync(`${this.fsCacheAdapterSettings.rootDir}/${fsName}`, value);
            // write has been done correctly
            return true;
        });
    }
    /**
     * @name                          get
     * @type                          Function
     *
     * Get a cache item on the filesystem
     *
     * @param             {String}              name              The item name
     * @return            {Object|Boolean}                        Return the objectToSave generated by the "this.processItem" method, or false if something goes wrong...
     *
     * @example           js
     * await myCache.get('myCoolItem');
     *
     * @author         Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
     */
    get(name) {
        return __awaiter(this, void 0, void 0, function* () {
            // generate the item fs name
            if (name.slice(0, 1) === '/')
                name = name.slice(1);
            const fsName = `${this.cache.id}/${name}.json`;
            // check that the file exists
            if (!fs_1.default.existsSync(`${this.fsCacheAdapterSettings.rootDir}/${fsName}`))
                return null;
            // read the json file
            return fs_1.default.readFileSync(`${this.fsCacheAdapterSettings.rootDir}/${fsName}`, 'utf8');
        });
    }
    /**
     * @name                          delete
     * @type                          Function
     *
     * Delete a cache item on the filesystem
     *
     * @param             {String}              name              The item name
     * @return            {Boolean}                               true if all of, false if not...
     *
     * @example           js
     * await myCache.delete('myCoolItem');
     *
     * @author         Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
     */
    delete(name) {
        return __awaiter(this, void 0, void 0, function* () {
            // generate the item fs name
            const fsName = `${this.cache.id}/${name}.json`;
            // read the json file
            return fs_1.default.unlinkSync(`${this.fsCacheAdapterSettings.rootDir}/${fsName}`);
        });
    }
    /**
     * @name                          clear
     * @type                          Function
     *
     * Clear all the items in the current cache
     *
     * @return            {Boolean}                               true if all of, false if not...
     *
     * @example           js
     * await myCache.clear();
     *
     * @author         Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
     */
    clear() {
        return __awaiter(this, void 0, void 0, function* () {
            // read the json file
            return removeSync_1.default(`${this.fsCacheAdapterSettings.rootDir}/${this.cache.id}`);
        });
    }
    /**
     * @name                          keys
     * @type                          Function
     *
     * Get all the items keys stored in cache
     *
     * @return            {Boolean}                               true if all of, false if not...
     *
     * @todo      implement this feature
     *
     * @example           js
     * await myCache.keys();
     *
     * @author         Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
     */
    keys() {
        return __awaiter(this, void 0, void 0, function* () {
            return [];
        });
    }
}
exports.default = SCacheFsAdapter;
SCacheFsAdapter.id = 'fs';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU0NhY2hlRnNBZGFwdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiU0NhY2hlRnNBZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUEsa0ZBQXlEO0FBQ3pELGtHQUE0RTtBQUM1RSw0RkFBc0U7QUFDdEUsc0ZBQWdFO0FBQ2hFLGdHQUEwRTtBQUMxRSw0Q0FBc0I7QUFDdEIsb0VBQThDO0FBRTlDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBc0JHO0FBQ0gsTUFBcUIsZUFBZ0IsU0FBUSx1QkFBZTtJQWlCMUQ7Ozs7Ozs7Ozs7T0FVRztJQUNILFlBQVksUUFBUSxHQUFHLEVBQUU7UUFDdkIsS0FBSyxDQUNILG1CQUFXLENBQ1Q7WUFDRSxjQUFjLEVBQUU7Z0JBQ2QsT0FBTyxFQUFFLHdCQUFhLENBQUMsa0JBQWtCLENBQUMsSUFBSSxHQUFHLGdCQUFRLEVBQUUsU0FBUzthQUNyRTtTQUNGLEVBQ0QsUUFBUSxDQUNULENBQ0YsQ0FBQztJQUNKLENBQUM7SUFwQ0Q7Ozs7Ozs7OztPQVNHO0lBQ0gsSUFBSSxzQkFBc0I7UUFDeEIsT0FBYSxJQUFLLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQztJQUM5QyxDQUFDO0lBMEJEOzs7Ozs7Ozs7Ozs7Ozs7OztPQWlCRztJQUNHLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSzs7WUFDbkIsNEJBQTRCO1lBQzVCLE1BQU0sTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUV0RSw0QkFBNEI7WUFDNUIsdUJBQWUsQ0FDYixHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLElBQUksTUFBTTtpQkFDN0MsS0FBSyxDQUFDLEdBQUcsQ0FBQztpQkFDVixLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUNaLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUNmLENBQUM7WUFFRixzQkFBc0I7WUFDdEIsWUFBSSxDQUFDLGFBQWEsQ0FDaEIsR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsT0FBTyxJQUFJLE1BQU0sRUFBRSxFQUNsRCxLQUFLLENBQ04sQ0FBQztZQUNGLGdDQUFnQztZQUNoQyxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7S0FBQTtJQUVEOzs7Ozs7Ozs7Ozs7O09BYUc7SUFDRyxHQUFHLENBQUMsSUFBSTs7WUFDWiw0QkFBNEI7WUFFNUIsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHO2dCQUFFLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25ELE1BQU0sTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLElBQUksSUFBSSxPQUFPLENBQUM7WUFFL0MsNkJBQTZCO1lBQzdCLElBQUksQ0FBQyxZQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUFDLE9BQU8sSUFBSSxNQUFNLEVBQUUsQ0FBQztnQkFDdEUsT0FBTyxJQUFJLENBQUM7WUFDZCxxQkFBcUI7WUFDckIsT0FBTyxZQUFJLENBQUMsWUFBWSxDQUN0QixHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLElBQUksTUFBTSxFQUFFLEVBQ2xELE1BQU0sQ0FDUCxDQUFDO1FBQ0osQ0FBQztLQUFBO0lBRUQ7Ozs7Ozs7Ozs7Ozs7T0FhRztJQUNHLE1BQU0sQ0FBQyxJQUFJOztZQUNmLDRCQUE0QjtZQUM1QixNQUFNLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLElBQUksT0FBTyxDQUFDO1lBQy9DLHFCQUFxQjtZQUNyQixPQUFPLFlBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUMsT0FBTyxJQUFJLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDN0UsQ0FBQztLQUFBO0lBRUQ7Ozs7Ozs7Ozs7OztPQVlHO0lBQ0csS0FBSzs7WUFDVCxxQkFBcUI7WUFDckIsT0FBTyxvQkFBWSxDQUNqQixHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FDMUQsQ0FBQztRQUNKLENBQUM7S0FBQTtJQUVEOzs7Ozs7Ozs7Ozs7OztPQWNHO0lBQ0csSUFBSTs7WUFDUixPQUFPLEVBQUUsQ0FBQztRQUNaLENBQUM7S0FBQTs7QUF4S0gsa0NBeUtDO0FBeEtRLGtCQUFFLEdBQUcsSUFBSSxDQUFDIn0=
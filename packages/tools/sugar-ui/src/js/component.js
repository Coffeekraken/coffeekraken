/* component.svelte generated by Svelte v3.35.0 */
import {
	SvelteElement,
	add_location,
	append_dev,
	attribute_to_object,
	detach_dev,
	dispatch_dev,
	element,
	globals,
	init,
	insert_dev,
	noop,
	safe_not_equal,
	validate_slots
} from "svelte/internal";

const { Object: Object_1, console: console_1 } = globals;
const file = "component.svelte";

function create_fragment(ctx) {
	let div;
	let h1;

	const block = {
		c: function create() {
			div = element("div");
			h1 = element("h1");
			h1.textContent = "Hello worlc";
			this.c = noop;
			add_location(h1, file, 54, 1, 1998);
			add_location(div, file, 53, 0, 1991);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, h1);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("my-element", slots, []);

	var __extends = this && this.__extends || (function () {
		var extendStatics = function (d, b) {
			extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
				d.__proto__ = b;
			} || function (d, b) {
				for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
			};

			return extendStatics(d, b);
		};

		return function (d, b) {
			if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
			extendStatics(d, b);

			function __() {
				this.constructor = d;
			}

			d.prototype = b === null
			? Object.create(b)
			: (__.prototype = b.prototype, new __());
		};
	})();

	var __importDefault = this && this.__importDefault || function (mod) {
		return mod && mod.__esModule ? mod : { "default": mod };
	};

	(function (factory) {
		if (typeof module === "object" && typeof module.exports === "object") {
			var v = factory(require, exports);
			if (v !== undefined) module.exports = v;
		} else if (typeof define === "function" && define.amd) {
			define(["require", "exports", "@coffeekraken/sugar/js/svelte/SSvelteComponent"], factory);
		}
	})(function (require, exports) {
		"use strict";
		Object.defineProperty(exports, "__esModule", { value: true });
		var SSvelteComponent_1 = __importDefault(require("@coffeekraken/sugar/js/svelte/SSvelteComponent"));

		var MyCoolComponent = /** @class */ (function (_super) {
			__extends(MyCoolComponent, _super);

			function MyCoolComponent() {
				return _super.call(this, { svelteComponent: {} }) || this;
			}

			return MyCoolComponent;
		})(SSvelteComponent_1.default);

		console.log("DFF");
		new MyCoolComponent();
	});

	const writable_props = [];

	Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<my-element> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ __extends, __importDefault });

	$$self.$inject_state = $$props => {
		if ("__extends" in $$props) __extends = $$props.__extends;
		if ("__importDefault" in $$props) __importDefault = $$props.__importDefault;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [];
}

class Component extends SvelteElement {
	constructor(options) {
		super();
		this.shadowRoot.innerHTML = `<style>h1{color:blue;background:red}</style>`;

		init(
			this,
			{
				target: this.shadowRoot,
				props: attribute_to_object(this.attributes),
				customElement: true
			},
			instance,
			create_fragment,
			safe_not_equal,
			{}
		);

		if (options) {
			if (options.target) {
				insert_dev(options.target, this, options.anchor);
			}
		}
	}
}

customElements.define("my-element", Component);
export default Component;
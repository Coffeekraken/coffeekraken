{
    "cli.sugar.cli": {
        "name": "sugar.cli",
        "type": "File",
        "description": "This is the main sugar cli file that split the commands\nby calling the proper files with the parsed cli args",
        "namespace": "cli",
        "filename": "sugar.cli.ts",
        "extension": "cli",
        "path": "src/cli/sugar.cli.ts",
        "directory": "src/cli",
        "children": {},
        "relPath": "src/cli/sugar.cli.ts",
        "relDirectory": "src/cli"
    },
    "node.index": {
        "name": "index",
        "description": "This file is the \"initialisation\" one for the sugar node toolkit.\nIt's optional to include it but if you do, you will get these features \"for free\":\n- Logging: Get the powerfull options of the SLog class without any change in your codebase",
        "namespace": "node",
        "since": "2.0.0",
        "filename": "index.ts",
        "extension": "ts",
        "path": "src/node/index.ts",
        "directory": "src/node",
        "children": {},
        "relPath": "src/node/index.ts",
        "relDirectory": "src/node"
    },
    "drawer-webcomponent.DrawerWebcomponent": {
        "name": "DrawerWebcomponent",
        "type": "Class",
        "description": "Simple webcomponent to create fully customizable drawers.\nFeatures:\n1. Fully customizable\n2. Support all sides (top, right, bottom and left)\n3. Support 3 animation types (push, slide and reveal)",
        "namespace": "drawer-webcomponent",
        "extends": "SWebComponent",
        "filename": "testing.ts",
        "extension": "ts",
        "path": "src/data/tests/testing.ts",
        "directory": "src/data/tests",
        "relPath": "src/data/tests/testing.ts",
        "relDirectory": "src/data/tests"
    },
    "drawer-webcomponent.open": {
        "name": "open",
        "type": "Function",
        "description": "Open the drawer",
        "namespace": "drawer-webcomponent",
        "filename": "testing.ts",
        "extension": "ts",
        "path": "src/data/tests/testing.ts",
        "directory": "src/data/tests",
        "relPath": "src/data/tests/testing.ts",
        "relDirectory": "src/data/tests"
    },
    "drawer-webcomponent.close": {
        "name": "close",
        "type": "Function",
        "description": "Close the drawer",
        "namespace": "drawer-webcomponent",
        "filename": "testing.ts",
        "extension": "ts",
        "path": "src/data/tests/testing.ts",
        "directory": "src/data/tests",
        "relPath": "src/data/tests/testing.ts",
        "relDirectory": "src/data/tests"
    },
    "drawer-webcomponent.isOpen": {
        "name": "isOpen",
        "type": "Function",
        "description": "Check if is opened",
        "namespace": "drawer-webcomponent",
        "filename": "testing.ts",
        "extension": "ts",
        "path": "src/data/tests/testing.ts",
        "directory": "src/data/tests",
        "children": {
            "undefined": {}
        },
        "relPath": "src/data/tests/testing.ts",
        "relDirectory": "src/data/tests"
    },
    "sugar.js.array.asyncForEach": {
        "name": "asyncForEach",
        "type": "Function",
        "description": "Allow to make some async foreach on your arrays",
        "namespace": "sugar.js.array",
        "status": "beta",
        "filename": "asyncForEach.ts",
        "extension": "ts",
        "path": "src/node/array/asyncForEach.ts",
        "directory": "src/node/array",
        "children": {},
        "relPath": "src/node/array/asyncForEach.ts",
        "relDirectory": "src/node/array"
    },
    "sugar.js.array.keysFirst": {
        "name": "keysFirst",
        "type": "Function",
        "description": "Make sure the passed array start with the passed keys",
        "namespace": "sugar.js.array",
        "filename": "keysFirst.ts",
        "extension": "ts",
        "path": "src/node/array/keysFirst.ts",
        "directory": "src/node/array",
        "children": {},
        "relPath": "src/node/array/keysFirst.ts",
        "relDirectory": "src/node/array"
    },
    "sugar.js.array.keysLast": {
        "name": "keysLast",
        "type": "Function",
        "description": "Make sure the passed array ends with the passed keys",
        "namespace": "sugar.js.array",
        "filename": "keysLast.ts",
        "extension": "ts",
        "path": "src/node/array/keysLast.ts",
        "directory": "src/node/array",
        "children": {},
        "relPath": "src/node/array/keysLast.ts",
        "relDirectory": "src/node/array"
    },
    "sugar.js.array.proxy": {
        "name": "proxy",
        "type": "Function",
        "description": "This function override the passed array prototype to intercept changes made through",
        "namespace": "sugar.js.array",
        "status": "wip",
        "filename": "proxy.ts",
        "extension": "ts",
        "path": "src/node/array/proxy.ts",
        "directory": "src/node/array",
        "children": {
            "watch": {
                "name": "watch",
                "type": "Function",
                "description": "This method allows you to specify which Array methods you want to watch by passing an array of methods names like ['push','pop'].\nYou can also specify the handler function that will be called on each array updates, etc..."
            },
            "unwatch": {
                "name": "unwatch",
                "type": "Function",
                "description": "This methods allows you to unwatch a process started with the \"watch\" method.\nYou have to pass as parameter the watchId that the \"watch\" method has returned you."
            }
        },
        "relPath": "src/node/array/proxy.ts",
        "relDirectory": "src/node/array"
    },
    "sugar.js.array.splitEvery": {
        "name": "splitEvery",
        "type": "Function",
        "description": "Split an array every N items",
        "namespace": "sugar.js.array",
        "status": "beta",
        "filename": "splitEvery.ts",
        "extension": "ts",
        "path": "src/node/array/splitEvery.ts",
        "directory": "src/node/array",
        "children": {},
        "relPath": "src/node/array/splitEvery.ts",
        "relDirectory": "src/node/array"
    },
    "sugar.js.array.unique": {
        "name": "unique",
        "type": "Function",
        "description": "This function simply take an array as parameter and return a new one\nwith all the duplicates values removed.",
        "namespace": "sugar.js.array",
        "status": "beta",
        "since": "2.0.0",
        "filename": "unique.ts",
        "extension": "ts",
        "path": "src/node/array/unique.ts",
        "directory": "src/node/array",
        "children": {},
        "relPath": "src/node/array/unique.ts",
        "relDirectory": "src/node/array"
    },
    "sugar.js.ascii.sugarHeading": {
        "name": "sugarHeading",
        "type": "Function",
        "description": "This function returns an ascii version of the sugar logo",
        "namespace": "sugar.js.ascii",
        "since": "2.0.0",
        "filename": "sugarHeading.ts",
        "extension": "ts",
        "path": "src/node/ascii/sugarHeading.ts",
        "directory": "src/node/ascii",
        "children": {},
        "relPath": "src/node/ascii/sugarHeading.ts",
        "relDirectory": "src/node/ascii"
    },
    "sugar.js.cache.SCache": {
        "name": "SCache",
        "type": "Class",
        "description": "Gives you the ability to manage cache through some defaults available adapters or using yours.\nThis cache class take care of these features:\n- Standard and custom TTL by cache item\n- Delete cache items on expires or not",
        "namespace": "sugar.js.cache",
        "status": "beta",
        "since": "2.0.0",
        "filename": "SCache.ts",
        "extension": "ts",
        "path": "src/node/cache/SCache.ts",
        "directory": "src/node/cache",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Construct the SCache instance with the settings passed in object format. See description bellow."
            },
            "adapter": {
                "name": "adapter",
                "type": "SCacheAdapter",
                "description": "Access this cache instance adapter"
            },
            "get": {
                "name": "get",
                "type": "Function",
                "description": "Get a value back from the cache using the specified adapter in the settings"
            },
            "set": {
                "name": "set",
                "type": "Function",
                "description": "Set a value to the cache system using the specified adapter with some settings like described bellow"
            },
            "exists": {
                "name": "exists",
                "type": "Function",
                "description": "Check if the passed cache item id exists"
            },
            "delete": {
                "name": "delete",
                "type": "Function",
                "description": "Delete an item in the cache by his name"
            },
            "clear": {
                "name": "clear",
                "type": "Function",
                "description": "Delete all the items in the current cache instance"
            }
        },
        "relPath": "src/node/cache/SCache.ts",
        "relDirectory": "src/node/cache"
    },
    "sugar.js.class.functionToClass": {
        "name": "functionToClass",
        "type": "Function",
        "description": "Transform ES5 Functions to ES6 Classes",
        "namespace": "sugar.js.class",
        "since": "2.0.0",
        "filename": "functionToClass.ts",
        "extension": "ts",
        "path": "src/node/class/functionToClass.ts",
        "directory": "src/node/class",
        "children": {},
        "relPath": "src/node/class/functionToClass.ts",
        "relDirectory": "src/node/class"
    },
    "sugar.js.class.getExtendsStack": {
        "name": "getExtendsStack",
        "type": "Function",
        "description": "This function take a class as parameter and return an array of all the class names used to extends this one...",
        "namespace": "sugar.js.class",
        "since": "2.0.0",
        "filename": "getExtendsStack.ts",
        "extension": "ts",
        "path": "src/node/class/getExtendsStack.ts",
        "directory": "src/node/class",
        "children": {},
        "relPath": "src/node/class/getExtendsStack.ts",
        "relDirectory": "src/node/class"
    },
    "sugar.js.class.getMethods": {
        "name": "getMethods",
        "type": "Function",
        "description": "This function take an instance as parameter and return all the methods in array format",
        "namespace": "sugar.js.class",
        "since": "2.0.0",
        "filename": "getMethods.ts",
        "extension": "ts",
        "path": "src/node/class/getMethods.ts",
        "directory": "src/node/class",
        "children": {},
        "relPath": "src/node/class/getMethods.ts",
        "relDirectory": "src/node/class"
    },
    "sugar.js.class.methodExists": {
        "name": "methodExists",
        "type": "Function",
        "description": "Check if one or more methods exists on a class instance",
        "namespace": "sugar.js.class",
        "since": "2.0.0",
        "filename": "methodExists.ts",
        "extension": "ts",
        "path": "src/node/class/methodExists.ts",
        "directory": "src/node/class",
        "children": {},
        "relPath": "src/node/class/methodExists.ts",
        "relDirectory": "src/node/class"
    },
    "sugar.js.class.multipleExtends": {
        "name": "multipleExtends",
        "type": "Function",
        "description": "This function allows you to extends your class with multiple other ones.",
        "namespace": "sugar.js.class",
        "since": "2.0.0",
        "filename": "multipleExtends.ts",
        "extension": "ts",
        "path": "src/node/class/multipleExtends.ts",
        "directory": "src/node/class",
        "children": {},
        "relPath": "src/node/class/multipleExtends.ts",
        "relDirectory": "src/node/class"
    },
    "sugar.js.class.SClass": {
        "name": "SClass",
        "type": "Class",
        "description": "This class is a simple and effective one that manage the ```_settings``` property\nand some others features that will be documented asap",
        "namespace": "sugar.js.class",
        "status": "beta",
        "since": "2.0.0",
        "filename": "SClass.ts",
        "extension": "ts",
        "path": "src/node/class/SClass.ts",
        "directory": "src/node/class",
        "children": {
            "id": {
                "name": "id",
                "type": "String",
                "description": "Access the id setted in the ```_settings.id```\nBy default, the id will be the ```constructor.name```",
                "since": "2.0.0"
            },
            "name": {
                "name": "name",
                "type": "String",
                "description": "Access the name setted in the ```_settings.name```\nBy default, the name will be the ```constructor.name```",
                "since": "2.0.0"
            },
            "formattedName": {
                "name": "formattedName",
                "type": "String",
                "description": "Access the process name and (not the same as a node process name)",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/class/SClass.ts",
        "relDirectory": "src/node/class"
    },
    "sugar.js.class.SInterface": {
        "name": "SInterface",
        "type": "Function",
        "description": "This class allows you to define an interface that you can later apply to an object instance\nto make sure this particular instance has all the features, methods and properties you want.",
        "namespace": "sugar.js.class",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SInterface.ts",
        "extension": "ts",
        "path": "src/node/class/SInterface.ts",
        "directory": "src/node/class",
        "children": {
            "settings": {
                "name": "settings",
                "type": "Object",
                "description": "Store the default settings that will be passed to the ```apply``` function",
                "static": true,
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/class/SInterface.ts",
        "relDirectory": "src/node/class"
    },
    "sugar.js.class.toPlainObject": {
        "name": "toPlainObject",
        "type": "Function",
        "description": "This function take a instance as parameter and return a plain object of it",
        "namespace": "sugar.js.class",
        "since": "2.0.0",
        "filename": "toPlainObject.ts",
        "extension": "ts",
        "path": "src/node/class/toPlainObject.ts",
        "directory": "src/node/class",
        "children": {},
        "relPath": "src/node/class/toPlainObject.ts",
        "relDirectory": "src/node/class"
    },
    "sugar.js.cli.argsToObject": {
        "name": "argsToObject",
        "type": "Function",
        "description": "This function take a simple object, a definition object and return you the string version that you can pass\ndirectly to the command line interface",
        "namespace": "sugar.js.cli",
        "status": "beta",
        "since": "2.0.0",
        "filename": "argsToObject.ts",
        "extension": "ts",
        "path": "src/node/cli/argsToObject.ts",
        "directory": "src/node/cli",
        "children": {},
        "relPath": "src/node/cli/argsToObject.ts",
        "relDirectory": "src/node/cli"
    },
    "sugar.js.cli.argsToString": {
        "name": "argsToString",
        "type": "Function",
        "description": "This function take a simple object, a definition object and return you the string version that you can pass\ndirectly to the command line interface",
        "namespace": "sugar.js.cli",
        "status": "beta",
        "since": "2.0.0",
        "filename": "argsToString.ts",
        "extension": "ts",
        "path": "src/node/cli/argsToString.ts",
        "directory": "src/node/cli",
        "children": {},
        "relPath": "src/node/cli/argsToString.ts",
        "relDirectory": "src/node/cli"
    },
    "sugar.js.cli.buildCommandLine": {
        "name": "buildCommandLine",
        "type": "Function",
        "description": "This function takes as parameters a command line (with tokens), an arguments object and a definition object to\ngenerate the final command line string to launch.\nA token is simply a string that begin with \"[\" and end with \"]\" like so: \"[mytoken]\".\nEach arguments of the definition object can be a token. If you have an argument called \"hostname\", the corresponding token will be \"[hostname]\".\nA special token called \"[arguments]\" is needed if you want the passed arguments to be integrated to the builded command line.",
        "namespace": "sugar.js.cli",
        "status": "beta",
        "since": "2.0.0",
        "filename": "buildCommandLine.ts",
        "extension": "ts",
        "path": "src/node/cli/buildCommandLine.ts",
        "directory": "src/node/cli",
        "children": {},
        "relPath": "src/node/cli/buildCommandLine.ts",
        "relDirectory": "src/node/cli"
    },
    "sugar.js.cli.completeArgsObject": {
        "name": "completeArgsObject",
        "type": "Function",
        "description": "This function take an arguments object and complete it with the definition object default values\nfor missing args",
        "namespace": "sugar.js.cli",
        "status": "beta",
        "since": "2.0.0",
        "filename": "completeArgsObject.ts",
        "extension": "ts",
        "path": "src/node/cli/completeArgsObject.ts",
        "directory": "src/node/cli",
        "children": {},
        "relPath": "src/node/cli/completeArgsObject.ts",
        "relDirectory": "src/node/cli"
    },
    "sugar.js.cli.parseArgs": {
        "name": "parseArgs",
        "type": "Function",
        "description": "Parse a string to find the provided arguments into the list and return a corresponding object.",
        "namespace": "sugar.js.cli",
        "since": "2.0.0",
        "filename": "parseArgs.ts",
        "extension": "ts",
        "path": "src/node/cli/parseArgs.ts",
        "directory": "src/node/cli",
        "children": {},
        "relPath": "src/node/cli/parseArgs.ts",
        "relDirectory": "src/node/cli"
    },
    "sugar.js.code.SCodeSplitter": {
        "name": "SCodeSplitter",
        "type": "Class",
        "description": "This class allows you to specify some \"splitters\" that will be used to split the code accordingly.\nA \"splitter\" is an object of these properties:\n- type (null) {String}: A simple word used as \"type\" to define the splitted blocks\n- prefix (null) {Regex}: A regex used to detect the start of a block\n- suffix (null) {Regex}: A regex used to detect what can be after the block\n- open ('{') {String}: A 1 character string that specify the opening of a code block like \"{\", etc...\n- close ('}') {String}: A 1 character string that specify the closing of a code block like \"}\", etc...\n- exclude (null) {Array<Regex>}: An array of regex used to exclude some previously matched blocks of this splitter",
        "namespace": "sugar.js.code",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SCodeSplitter.ts",
        "extension": "ts",
        "path": "src/node/__thinking__/code/SCodeSplitter.ts",
        "directory": "src/node/__thinking__/code",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "split": {
                "name": "split",
                "type": "Function",
                "description": "This method is the main one that allows you to actually split the passed code\ninto small pieces.",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/__thinking__/code/SCodeSplitter.ts",
        "relDirectory": "src/node/__thinking__/code"
    },
    "sugar.js.color.color": {
        "name": "color",
        "type": "Function",
        "description": "Simple wrapper to create an SColor instance quickly",
        "namespace": "sugar.js.color",
        "filename": "color.ts",
        "extension": "ts",
        "path": "src/js/color/color.ts",
        "directory": "src/js/color",
        "children": {},
        "relPath": "src/js/color/color.ts",
        "relDirectory": "src/js/color"
    },
    "sugar.js.color.convert": {
        "name": "convert",
        "type": "Function",
        "description": "This function take as input any color format like rgba Object, hsl Object, hsv Object, hex String, rgba String, hsl String or hsv String\nand convert it into the wanted format like \"rgba\", \"hsl\", \"hsv\", \"hex\", \"rgbaString\", \"hslString\" or \"hsvString\"",
        "namespace": "sugar.js.color",
        "since": "2.0.0",
        "filename": "convert.ts",
        "extension": "ts",
        "path": "src/node/color/convert.ts",
        "directory": "src/node/color",
        "children": {},
        "relPath": "src/node/color/convert.ts",
        "relDirectory": "src/node/color"
    },
    "sugar.js.color.hex2rgba": {
        "name": "hex2rgba",
        "type": "Function",
        "description": "Hex to RGBA",
        "namespace": "sugar.js.color",
        "since": "2.0.0",
        "filename": "hex2rgba.ts",
        "extension": "ts",
        "path": "src/node/color/hex2rgba.ts",
        "directory": "src/node/color",
        "children": {},
        "relPath": "src/node/color/hex2rgba.ts",
        "relDirectory": "src/node/color"
    },
    "sugar.js.color.hsl2rgba": {
        "name": "hsl2rgba",
        "type": "Function",
        "description": "HSL to RGBA",
        "namespace": "sugar.js.color",
        "since": "2.0.0",
        "filename": "hsl2rgba.ts",
        "extension": "ts",
        "path": "src/node/color/hsl2rgba.ts",
        "directory": "src/node/color",
        "children": {},
        "relPath": "src/node/color/hsl2rgba.ts",
        "relDirectory": "src/node/color"
    },
    "sugar.js.color.hsv2rgba": {
        "name": "hsv2rgba",
        "type": "Function",
        "description": "HSV to RGBA",
        "namespace": "sugar.js.color",
        "since": "2.0.0",
        "filename": "hsv2rgba.ts",
        "extension": "ts",
        "path": "src/node/color/hsv2rgba.ts",
        "directory": "src/node/color",
        "children": {},
        "relPath": "src/node/color/hsv2rgba.ts",
        "relDirectory": "src/node/color"
    },
    "sugar.js.color.parseHsl": {
        "name": "parseHsl",
        "type": "Function",
        "description": "Parse HSL",
        "namespace": "sugar.js.color",
        "since": "2.0.0",
        "filename": "parseHsl.ts",
        "extension": "ts",
        "path": "src/node/color/parseHsl.ts",
        "directory": "src/node/color",
        "children": {},
        "relPath": "src/node/color/parseHsl.ts",
        "relDirectory": "src/node/color"
    },
    "sugar.js.color.parseHsv": {
        "name": "parseHsv",
        "type": "Function",
        "description": "Parse HSV",
        "namespace": "sugar.js.color",
        "since": "2.0.0",
        "filename": "parseHsv.ts",
        "extension": "ts",
        "path": "src/node/color/parseHsv.ts",
        "directory": "src/node/color",
        "children": {},
        "relPath": "src/node/color/parseHsv.ts",
        "relDirectory": "src/node/color"
    },
    "sugar.js.color.parseRgba": {
        "name": "parseRgba",
        "type": "Function",
        "description": "Parse RGBA string and return an object",
        "namespace": "sugar.js.color",
        "since": "2.0.0",
        "filename": "parseRgba.ts",
        "extension": "ts",
        "path": "src/node/color/parseRgba.ts",
        "directory": "src/node/color",
        "children": {},
        "relPath": "src/node/color/parseRgba.ts",
        "relDirectory": "src/node/color"
    },
    "sugar.js.color.rgba2hex": {
        "name": "rgba2hex",
        "type": "Function",
        "description": "RGBA to HEX",
        "namespace": "sugar.js.color",
        "since": "2.0.0",
        "filename": "rgba2hex.ts",
        "extension": "ts",
        "path": "src/node/color/rgba2hex.ts",
        "directory": "src/node/color",
        "children": {},
        "relPath": "src/node/color/rgba2hex.ts",
        "relDirectory": "src/node/color"
    },
    "sugar.js.color.rgba2hsl": {
        "name": "rgba2hsl",
        "type": "Function",
        "description": "RGBA to HSL",
        "namespace": "sugar.js.color",
        "since": "2.0.0",
        "filename": "rgba2hsl.ts",
        "extension": "ts",
        "path": "src/node/color/rgba2hsl.ts",
        "directory": "src/node/color",
        "children": {},
        "relPath": "src/node/color/rgba2hsl.ts",
        "relDirectory": "src/node/color"
    },
    "sugar.js.color.rgba2hsv": {
        "name": "rgba2hsv",
        "type": "Function",
        "description": "RGBA to HSV",
        "namespace": "sugar.js.color",
        "since": "2.0.0",
        "filename": "rgba2hsv.ts",
        "extension": "ts",
        "path": "src/node/color/rgba2hsv.ts",
        "directory": "src/node/color",
        "children": {},
        "relPath": "src/node/color/rgba2hsv.ts",
        "relDirectory": "src/node/color"
    },
    "sugar.js.color.SColor": {
        "name": "SColor",
        "type": "Class",
        "description": "Class that provide complete and simple to use color manupilation capabilities like:\n- Modifiers\n- opacity\n- darken\n- lighten\n- desaturate\n- saturate\n- spin (change hue)\n- transparentize\n- alpha\n- grayscale\n- Conversions\n- rgba\n- hsl\n- hsv\n- hex\n- Print out formats\n- toRgbaString\n- toHslString\n- toHsvString\n- toHexString\n- toString(format = null)",
        "namespace": "sugar.js.color",
        "status": "beta",
        "since": "2.0.0",
        "filename": "SColor.ts",
        "extension": "ts",
        "path": "src/node/color/SColor.ts",
        "directory": "src/node/color",
        "children": {
            "colors": {
                "name": "colors",
                "type": "Object",
                "description": "Static color names map",
                "static": true
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "getColor": {
                "name": "getColor",
                "type": "Function",
                "description": "This method take as parameter the passed color to the constructor and has to return the\nactual real color like color from the static colors listed in the SColor class or maybe\nfrom the Sugar configured colors"
            },
            "toHex": {
                "name": "toHex",
                "type": "Function",
                "description": "To hex"
            },
            "toHsl": {
                "name": "toHsl",
                "type": "Function",
                "description": "To hsl"
            },
            "toHsv": {
                "name": "toHsv",
                "type": "Function",
                "description": "To hsv"
            },
            "toRgba": {
                "name": "toRgba",
                "type": "Function",
                "description": "To rgba"
            },
            "r": {
                "name": "r",
                "type": "Number",
                "description": "Get/set the red value"
            },
            "g": {
                "name": "g",
                "type": "Number",
                "description": "Get/set the green value"
            },
            "b": {
                "name": "b",
                "type": "Number",
                "description": "Get/set the blue value"
            },
            "a": {
                "name": "a",
                "type": "Number",
                "description": "Get/set the alpha value"
            },
            "l": {
                "name": "l",
                "type": "Number",
                "description": "The luminence value"
            },
            "s": {
                "name": "s",
                "type": "Number",
                "description": "The saturation value"
            },
            "v": {
                "name": "v",
                "type": "Number",
                "description": "The value of the HSV format"
            },
            "h": {
                "name": "h",
                "type": "Number",
                "description": "Get/set the hue"
            },
            "reset": {
                "name": "reset",
                "type": "Function",
                "description": "Reset to the original color"
            },
            "desaturate": {
                "name": "desaturate",
                "type": "Function",
                "description": "Desaturate"
            },
            "saturate": {
                "name": "saturate",
                "type": "Function",
                "description": "Saturate"
            },
            "grayscale": {
                "name": "grayscale",
                "type": "Function",
                "description": "Return a new SColor instance of the color to grayscale"
            },
            "spin": {
                "name": "spin",
                "type": "Function",
                "description": "Spin the hue on the passed value (max 360)"
            },
            "transparentize": {
                "name": "transparentize",
                "type": "Function",
                "description": "Transparentize"
            },
            "alpha": {
                "name": "alpha",
                "type": "Function",
                "description": "Set the alpha"
            },
            "opacity": {
                "name": "opacity",
                "type": "Function",
                "description": "Set the opacity (alias for alpha)"
            },
            "opacify": {
                "name": "opacify",
                "type": "Function",
                "description": "Opacify"
            },
            "darken": {
                "name": "darken",
                "type": "Function",
                "description": "Darken"
            },
            "lighten": {
                "name": "lighten",
                "type": "Function",
                "description": "Lighten"
            },
            "toHexString": {
                "name": "toHexString",
                "type": "Function",
                "description": "To hex string"
            },
            "toRgbaString": {
                "name": "toRgbaString",
                "type": "Function",
                "description": "To rgba string"
            },
            "toHslString": {
                "name": "toHslString",
                "type": "Function",
                "description": "To hsl string"
            },
            "toHsvString": {
                "name": "toHsvString",
                "type": "Function",
                "description": "To hsv string"
            },
            "toString": {
                "name": "toString",
                "type": "Function",
                "description": "To string"
            }
        },
        "relPath": "src/node/color/SColor.ts",
        "relDirectory": "src/node/color"
    },
    "sugar.js.config.config": {
        "name": "config",
        "type": "Class",
        "description": "This class allows you to quickly access/update some configuration depending on the data adapters specified.\nThe base available data adapters are:\n- For node:\n- File system adapter: @coffeekraken/sugar/node/config/adapters/SConfigFsAdapter\n- For js:\n- Localstorage adapter: @coffeekraken/sugar/js/config/adapters/SConfigLsAdapter",
        "namespace": "sugar.js.config",
        "status": "beta",
        "since": "2.0.0",
        "filename": "SConfig.ts",
        "extension": "ts",
        "path": "src/node/config/SConfig.ts",
        "directory": "src/node/config",
        "relPath": "src/node/config/SConfig.ts",
        "relDirectory": "src/node/config"
    },
    "node.config.SConfig.set": {
        "name": "set",
        "type": "Function",
        "description": "Get a config depending on the dotted object path passed and either using the first registered adapter found, or the passed one",
        "namespace": "node.config.SConfig",
        "filename": "SConfig.ts",
        "extension": "ts",
        "path": "src/node/config/SConfig.ts",
        "directory": "src/node/config",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Init the config instance by passing a name and a settings object to configure your instance"
            },
            "load": {
                "name": "load",
                "type": "Function",
                "description": "Load the config from the default adapter or from the passed adapter"
            },
            "save": {
                "name": "save",
                "type": "Function",
                "description": "Save the config through all the registered adapters or just the one specify in params"
            },
            "get": {
                "name": "get",
                "type": "Function",
                "description": "Get a config depending on the dotted object path passed and either using the first registered adapter found, or the passed one"
            }
        },
        "relPath": "src/node/config/SConfig.ts",
        "relDirectory": "src/node/config"
    },
    "sugar.js.console.parseHtml": {
        "name": "parseHtml",
        "type": "Function",
        "description": "Parse the simple html tags to format the console message",
        "namespace": "sugar.js.console",
        "since": "2.0.0",
        "filename": "parseHtml.ts",
        "extension": "ts",
        "path": "src/node/console/parseHtml.ts",
        "directory": "src/node/console",
        "children": {},
        "relPath": "src/node/console/parseHtml.ts",
        "relDirectory": "src/node/console"
    },
    "sugar.js.convert.toHtml": {
        "name": "toHtml",
        "type": "Function",
        "description": "Take a string as input and convert it to HTML.",
        "namespace": "sugar.js.convert",
        "status": "wip",
        "since": "2.0.0",
        "filename": "toHtml.ts",
        "extension": "ts",
        "path": "src/node/convert/toHtml.ts",
        "directory": "src/node/convert",
        "children": {
            "undefined": {}
        },
        "relPath": "src/node/convert/toHtml.ts",
        "relDirectory": "src/node/convert"
    },
    "sugar.js.core.activeSpace": {
        "name": "activeSpace",
        "type": "Object",
        "description": "This object expose some functions that are usefull to manage the \"active\" space of your application.\nAn active space is represented by a string formated like so \"something.cool.hello\". This mean that your app is\nin the \"something.cool.hello\" space and depending on that, you can enable or disable some features like for example\nkeypress that have to be active only in certain \"space\" of your application.\nThe exposed functions are these ones:\n- set: This allows you to set the active space\n- get: This allows you to get the current active space\n- is: This allows you to check if the passed active space string is in the current active space\n- previous: This allows you to go back 1 activeSpace in the stack\n- on: This allows you to register callbacks attached to an activeSpace\n- append: This allows you to append an activeSpace string to the current one",
        "namespace": "sugar.js.core",
        "status": "wip",
        "since": "2.0.0",
        "filename": "activeSpace.ts",
        "extension": "ts",
        "path": "src/node/core/activeSpace.ts",
        "directory": "src/node/core",
        "children": {
            "get": {
                "name": "get",
                "type": "Function",
                "description": "This function allows you to get the current active space",
                "since": "2.0.0"
            },
            "set": {
                "name": "set",
                "type": "Function",
                "description": "This function allows you to set the current active space",
                "since": "2.0.0"
            },
            "append": {
                "name": "append",
                "type": "Function",
                "description": "This function take the current activeSpace string and add the passed one to set the new activeSpace string",
                "since": "2.0.0"
            },
            "remove": {
                "name": "remove",
                "type": "Function",
                "description": "This function simply remove the passed string from the activeSpace stack",
                "since": "2.0.0"
            },
            "previous": {
                "name": "previous",
                "type": "Function",
                "description": "This function simply go back by 1 in the activeSpace stack",
                "since": "2.0.0"
            },
            "is": {
                "name": "is",
                "type": "Function",
                "description": "This function allows you to check if the active space string that you pass match with the current active space or not.\nThe checking process is done using the \"minimatch\" package that let you use cool features like \"\", \"**\", etc...",
                "since": "2.0.0"
            },
            "on": {
                "name": "on",
                "type": "Function",
                "description": "This function allows you to register a callback linked with an activeSpace string\nthat will be called once the activeSpace is matched",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/core/activeSpace.ts",
        "relDirectory": "src/node/core"
    },
    "sugar.js.core.env": {
        "name": "env",
        "type": "Function",
        "description": "This function allows you to access environment variables through the same method in node and javascript",
        "namespace": "sugar.js.core",
        "status": "wip",
        "since": "2.0.0",
        "filename": "env.ts",
        "extension": "ts",
        "path": "src/node/core/env.ts",
        "directory": "src/node/core",
        "children": {},
        "relPath": "src/node/core/env.ts",
        "relDirectory": "src/node/core"
    },
    "sugar.js.crypt.aes": {
        "name": "aes",
        "type": "Object",
        "description": "Expose two function named \"encrypt\" and \"decrypt\" that you can use to process your content using the aes algorithm",
        "namespace": "sugar.js.crypt",
        "status": "wip",
        "since": "1.0.0",
        "filename": "aes.ts",
        "extension": "ts",
        "path": "src/node/crypt/aes.ts",
        "directory": "src/node/crypt",
        "children": {
            "encrypt": {
                "name": "encrypt",
                "type": "Function",
                "description": "Encrypt"
            },
            "decrypt": {
                "name": "decrypt",
                "type": "Function",
                "description": "Decrypt"
            }
        },
        "relPath": "src/node/crypt/aes.ts",
        "relDirectory": "src/node/crypt"
    },
    "sugar.js.crypt.base64": {
        "name": "base64",
        "type": "Object",
        "description": "Expose two function named \"encrypt\" and \"decrypt\" that you can use to process your content using the base64 algorithm",
        "namespace": "sugar.js.crypt",
        "status": "wip",
        "since": "2.0.0",
        "filename": "base64.ts",
        "extension": "ts",
        "path": "src/node/crypt/base64.ts",
        "directory": "src/node/crypt",
        "children": {
            "encrypt": {
                "name": "encrypt",
                "type": "Function",
                "description": "Encrypt",
                "since": "2.0.0"
            },
            "decrypt": {
                "name": "decrypt",
                "type": "Function",
                "description": "Decrypt",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/crypt/base64.ts",
        "relDirectory": "src/node/crypt"
    },
    "sugar.js.crypt.md5": {
        "name": "md5",
        "type": "Object",
        "description": "Expose two function named \"encrypt\" and \"decrypt\" that you can use to process your content using the md5 algorithm",
        "namespace": "sugar.js.crypt",
        "status": "wip",
        "since": "2.0.0",
        "filename": "md5.ts",
        "extension": "ts",
        "path": "src/node/crypt/md5.ts",
        "directory": "src/node/crypt",
        "children": {
            "encrypt": {
                "name": "encrypt",
                "type": "Function",
                "description": "Encrypt"
            },
            "decrypt": {
                "name": "decrypt",
                "type": "Function",
                "description": "Decrypt"
            }
        },
        "relPath": "src/node/crypt/md5.ts",
        "relDirectory": "src/node/crypt"
    },
    "sugar.js.crypt.object": {
        "name": "object",
        "type": "Object",
        "description": "Expose two function named \"encrypt\" and \"decrypt\" that you can use to process your content using the object algorithm",
        "namespace": "sugar.js.crypt",
        "status": "wip",
        "since": "2.0.0",
        "filename": "object.ts",
        "extension": "ts",
        "path": "src/node/crypt/object.ts",
        "directory": "src/node/crypt",
        "children": {
            "encrypt": {
                "name": "encrypt",
                "type": "Function",
                "description": "Encrypt"
            },
            "decrypt": {
                "name": "decrypt",
                "type": "Function",
                "description": "Decrypt"
            }
        },
        "relPath": "src/node/crypt/object.ts",
        "relDirectory": "src/node/crypt"
    },
    "sugar.js.crypt.sha256": {
        "name": "sha256",
        "type": "Object",
        "description": "Expose two function named \"encrypt\" and \"decrypt\" that you can use to process your content using the sha256 algorithm",
        "namespace": "sugar.js.crypt",
        "status": "wip",
        "since": "2.0.0",
        "filename": "sha256.ts",
        "extension": "ts",
        "path": "src/node/crypt/sha256.ts",
        "directory": "src/node/crypt",
        "children": {
            "encrypt": {
                "name": "encrypt",
                "type": "Function",
                "description": "Encrypt"
            },
            "decrypt": {
                "name": "decrypt",
                "type": "Function",
                "description": "Decrypt"
            }
        },
        "relPath": "src/node/crypt/sha256.ts",
        "relDirectory": "src/node/crypt"
    },
    "sugar.js.crypt.sha512": {
        "name": "sha512",
        "type": "Object",
        "description": "Expose two function named \"encrypt\" and \"decrypt\" that you can use to process your content using the sha512 algorithm",
        "namespace": "sugar.js.crypt",
        "status": "wip",
        "since": "2.0.0",
        "filename": "sha512.ts",
        "extension": "ts",
        "path": "src/node/crypt/sha512.ts",
        "directory": "src/node/crypt",
        "children": {
            "encrypt": {
                "name": "encrypt",
                "type": "Function",
                "description": "Encrypt"
            },
            "decrypt": {
                "name": "decrypt",
                "type": "Function",
                "description": "Decrypt"
            }
        },
        "relPath": "src/node/crypt/sha512.ts",
        "relDirectory": "src/node/crypt"
    },
    "sugar.js.css.injectStyle": {
        "name": "injectStyle",
        "type": "Function",
        "description": "Inject a passed style string in the DOM",
        "namespace": "sugar.js.css",
        "status": "wip",
        "since": "2.0.0",
        "filename": "injectStyle.ts",
        "extension": "ts",
        "path": "src/js/css/injectStyle.ts",
        "directory": "src/js/css",
        "children": {},
        "relPath": "src/js/css/injectStyle.ts",
        "relDirectory": "src/js/css"
    },
    "sugar.js.css.stripCssComments": {
        "name": "stripCssComments",
        "type": "Function",
        "description": "This function simply remove all the css comments like:\n- Multiline blocks css comments begining with / *, ending with * /\n- Single line comments begining with //",
        "namespace": "sugar.js.css",
        "status": "wip",
        "since": "2.0.0",
        "filename": "stripCssComments.ts",
        "extension": "ts",
        "path": "src/node/css/stripCssComments.ts",
        "directory": "src/node/css",
        "children": {},
        "relPath": "src/node/css/stripCssComments.ts",
        "relDirectory": "src/node/css"
    },
    "sugar.js.descriptor.SDescriptor": {
        "name": "SDescriptor",
        "type": "Class",
        "description": "This class is the main one that MUST be used as parent one\nwhen creating any descriptor like object, string, etc...",
        "namespace": "sugar.js.descriptor",
        "status": "beta",
        "since": "2.0.0",
        "filename": "_SDescriptor.ts",
        "extension": "ts",
        "path": "src/node/descriptor/_SDescriptor.ts",
        "directory": "src/node/descriptor",
        "children": {
            "rules": {
                "name": "rules",
                "type": "Object",
                "description": "Store the registered rules into a simple object",
                "static": true,
                "since": "2.0.0"
            },
            "type": {
                "name": "type",
                "type": "String",
                "description": "Specify the type of the values that this descriptor is made for.\nCan be:",
                "static": true,
                "since": "2.0.0"
            },
            "settings": {
                "name": "settings",
                "type": "ISDescriptorSettings",
                "description": "Store the default settings for this particular descriptor class",
                "static": true,
                "since": "2.0.0"
            },
            "registerRule": {
                "name": "registerRule",
                "type": "Function",
                "description": "This static method allows you to register a new rule\nby passing a valid ISDescriptorRule object",
                "static": true,
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "name": {
                "name": "name",
                "type": "String",
                "description": "Access the descriptor name. Either the value of settings.name, or the constructor name",
                "since": "2.0.0"
            },
            "id": {
                "name": "id",
                "type": "String",
                "description": "Access the descriptor id. Either the value of settings.name, or the constructor name",
                "since": "2.0.0"
            },
            "apply": {
                "name": "apply",
                "type": "Function",
                "description": "This method simply apply the descriptor instance on the passed value.\nThe value can be anything depending on the descriptor you use.\nWhen you pass an Array, by default it will apply the descriptor on\neach array items. If you don't want this behavior and the Array passed has to be\ntreated as a single value, pass the \"arrayAsValue\" setting to true",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/descriptor/_SDescriptor.ts",
        "relDirectory": "src/node/descriptor"
    },
    "sugar.js.descriptor.SDescriptorResult": {
        "name": "SDescriptorResult",
        "type": "Class",
        "description": "This class is the main one that MUST be used as parent one\nwhen creating any descriptor like object, string, etc...",
        "namespace": "sugar.js.descriptor",
        "since": "2.0.0",
        "filename": "SDescriptorResult.ts",
        "extension": "ts",
        "path": "src/node/descriptor/SDescriptorResult.ts",
        "directory": "src/node/descriptor",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "hasIssues": {
                "name": "hasIssues",
                "type": "Function",
                "description": "This method return true if theirs no issues, false if not",
                "since": "2.0.0"
            },
            "add": {
                "name": "add",
                "type": "Function",
                "description": "This method is used to add a rule result to the global descriptor result.",
                "since": "2.0.0"
            },
            "toString": {
                "name": "toString",
                "type": "Functio n",
                "description": "This method return a string terminal compatible of this result object",
                "since": "2.0.0"
            },
            "toConsole": {
                "name": "toConsole",
                "type": "Function",
                "description": "This method return a string terminal compatible of this result object",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/descriptor/SDescriptorResult.ts",
        "relDirectory": "src/node/descriptor"
    },
    "sugar.js.dev.dataTypesArray": {
        "name": "dataTypesArray",
        "type": "Array",
        "description": "This is just a list of data types available in the\ncurrent language (node/js)",
        "namespace": "sugar.js.dev",
        "status": "wip",
        "since": "2.0.0",
        "filename": "dataTypesArray.ts",
        "extension": "ts",
        "path": "src/node/dev/dataTypesArray.ts",
        "directory": "src/node/dev",
        "children": {},
        "relPath": "src/node/dev/dataTypesArray.ts",
        "relDirectory": "src/node/dev"
    },
    "sugar.js.dev.getArgsNames": {
        "name": "getArgsNames",
        "type": "Function",
        "description": "Get the arguments names of the passed function. Return an array of the arguments names",
        "namespace": "sugar.js.dev",
        "status": "wip",
        "since": "2.0.0",
        "filename": "getArgsNames.ts",
        "extension": "ts",
        "path": "src/node/dev/getArgsNames.ts",
        "directory": "src/node/dev",
        "children": {},
        "relPath": "src/node/dev/getArgsNames.ts",
        "relDirectory": "src/node/dev"
    },
    "sugar.js.docblock.Dockblock": {
        "name": "Dockblock",
        "type": "Class",
        "description": "This is the main class that expose the methods like \"parse\", etc...\nYou have to instanciate it by passing a settings object. Here's the available options:",
        "namespace": "sugar.js.docblock",
        "extends": "SClass",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SDocblock.ts",
        "extension": "ts",
        "path": "src/node/docblock/SDocblock.ts",
        "directory": "src/node/docblock",
        "children": {
            "docblockSettings": {
                "name": "docblockSettings",
                "type": "ISDocblockSettings",
                "description": "Access the docblock settings",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "sort": {
                "name": "sort",
                "type": "Function",
                "description": "This method allows you to set the order in which you want to get the\nblocks back when using the methods like get blocks, etc...",
                "since": "2.0.0"
            },
            "blocks": {
                "name": "blocks",
                "type": "Array",
                "description": "Access the parsed blocks array"
            },
            "parse": {
                "name": "parse",
                "type": "Function",
                "description": "This method is the principal one. Use it to parse a string\nand get back the object version of it",
                "since": "2.0.0"
            },
            "undefined": {},
            "toObject": {
                "name": "toObject",
                "type": "Function",
                "description": "This method convert the parsed docblocks to a simple object",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/docblock/SDocblock.ts",
        "relDirectory": "src/node/docblock"
    },
    "sugar.js.docblock.SDocblockBlock": {
        "name": "SDocblockBlock",
        "type": "Class",
        "description": "This class represent a docblock object that contains all the \"tags\" values and some features like:\n- Converting the block to markdown\n- More to come...",
        "namespace": "sugar.js.docblock",
        "extends": "SClass",
        "since": "2.0.0",
        "filename": "SDocblockBlock.ts",
        "extension": "ts",
        "path": "src/node/docblock/SDocblockBlock.ts",
        "directory": "src/node/docblock",
        "children": {
            "tagsMap": {
                "name": "tagsMap",
                "type": "Object",
                "description": "Store the default tags mapping to their parsing functions",
                "static": true
            },
            "registerTag": {
                "name": "registerTag",
                "type": "Function",
                "description": "This static method allows you to register a new tag that will\nbe recognized by the SDocblockBlock class.",
                "static": true,
                "since": "2.0.0"
            },
            "docblockBlockSettings": {
                "name": "docblockBlockSettings",
                "type": "ISDocblockBlockSettings",
                "description": "Access the docblockBlock settings",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "toString": {
                "name": "toString",
                "type": "Function",
                "description": "This method return the passed source string"
            },
            "toObject": {
                "name": "toObject",
                "type": "Function",
                "description": "This method return the parsed docblock object"
            },
            "undefined": {}
        },
        "relPath": "src/node/docblock/SDocblockBlock.ts",
        "relDirectory": "src/node/docblock"
    },
    "sugar.js.docblock.SDocblockOutput": {
        "name": "SDocblockOutput",
        "type": "Class",
        "description": "This class represent an SDocblock output like \"markdown\", \"html\", etc...",
        "namespace": "sugar.js.docblock",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SDocblockOutput.ts",
        "extension": "ts",
        "path": "src/node/docblock/SDocblockOutput.ts",
        "directory": "src/node/docblock",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "renderBlock": {
                "name": "renderBlock",
                "type": "Function",
                "description": "This method is the one take will render a block using the correct block template\nand the passed block object data",
                "since": "2.0.0"
            },
            "getPartialsTemplateObj": {
                "name": "getPartialsTemplateObj",
                "type": "Function",
                "description": "This method loop on all the partials and read them with their stats if we are in node context",
                "since": "2.0.0"
            },
            "getTemplateObj": {
                "name": "getTemplateObj",
                "type": "Function",
                "description": "This method take the template url setted in the settings object and\nresolve it to get back a full template object with the path and the stats is we are in node context",
                "since": "2.0.0"
            },
            "render": {
                "name": "render",
                "type": "Function",
                "description": "This method is the main one that will take each blocks in the docblock instance\nand render them by passing each tags to the ```renderTag``` method.",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/docblock/SDocblockOutput.ts",
        "relDirectory": "src/node/docblock"
    },
    "sugar.js.dom.addAnimationClass": {
        "name": "addAnimationClass",
        "type": "Function",
        "description": "Add a class that trigger an animation and remove it at the end",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "addAnimationClass.ts",
        "extension": "ts",
        "path": "src/js/dom/addAnimationClass.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/addAnimationClass.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.addEventListener": {
        "name": "addEventListener",
        "type": "Function",
        "description": "Add an event listener on an element and return the function to remove the event listener",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "addEventListener.ts",
        "extension": "ts",
        "path": "src/js/dom/addEventListener.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/addEventListener.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.addEventListenerOnce": {
        "name": "addEventListenerOnce",
        "type": "Function",
        "description": "Add an event listener that will be trigerred only once",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "addEventListenerOnce.ts",
        "extension": "ts",
        "path": "src/js/dom/addEventListenerOnce.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/addEventListenerOnce.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.appendScriptTag": {
        "name": "appendScriptTag",
        "type": "Function",
        "description": "Append a script tag either to the head or the body",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "appendScriptTag.ts",
        "extension": "ts",
        "path": "src/js/dom/appendScriptTag.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/appendScriptTag.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.appendStylesheetLink": {
        "name": "appendStylesheetLink",
        "type": "Function",
        "description": "Append a stylesheet link to the page head",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "appendStylesheetLink.ts",
        "extension": "ts",
        "path": "src/js/dom/appendStylesheetLink.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/appendStylesheetLink.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.appendStyleTag": {
        "name": "appendStyleTag",
        "type": "Function",
        "description": "Append a style tag either to the head or the body",
        "namespace": "sugar.js.dom",
        "since": "2.0.0",
        "filename": "appendStyleTag.ts",
        "extension": "ts",
        "path": "src/js/dom/appendStyleTag.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/appendStyleTag.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.backgroundImageLoaded": {
        "name": "backgroundImageLoaded",
        "type": "Function",
        "description": "Detect when a background image has been loaded on an HTMLElement",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "backgroundImageLoaded.ts",
        "extension": "ts",
        "path": "src/js/dom/backgroundImageLoaded.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/backgroundImageLoaded.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.canHaveChildren": {
        "name": "canHaveChildren",
        "type": "Function",
        "description": "This function take as input either a tagName String like \"img\", \"div\", etc... or an HTMLElement node\nand return true or false depending if this element is supposed to have children or not.",
        "namespace": "sugar.js.dom",
        "since": "2.0.0",
        "filename": "canHaveChildren.ts",
        "extension": "ts",
        "path": "src/js/dom/canHaveChildren.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/canHaveChildren.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.closest": {
        "name": "closest",
        "type": "Function",
        "description": "Go up the dom three to find the first element that matches the passed selector",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "closest.ts",
        "extension": "ts",
        "path": "src/js/dom/closest.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/closest.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.closestNotVisible": {
        "name": "closestNotVisible",
        "type": "Function",
        "description": "Go up the dom three to find the first element that is not visible.\nNot visible mean that has either an opacity to 0, a visibility to hidden or a display to none",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "closestNotVisible.ts",
        "extension": "ts",
        "path": "src/js/dom/closestNotVisible.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/closestNotVisible.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.dataset": {
        "name": "dataset",
        "type": "Function",
        "description": "Get or set a value on the passed element with the passed name",
        "namespace": "sugar.js.dom",
        "status": "wip",
        "since": "1.0.0",
        "filename": "dataset.ts",
        "extension": "ts",
        "path": "src/js/dom/dataset.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/dataset.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.detectInOutDirection": {
        "name": "detectInOutDirection",
        "type": "Function",
        "description": "Detect the mouse direction when entered on the passed element. The direction can be up, down, left or right and will be passed to the two callbacks available.\nThe first one is the `onIn` callback, and the second one is the `onOut`.",
        "namespace": "sugar.js.dom",
        "status": "wip",
        "since": "1.0.0",
        "filename": "detectInOutDirection.ts",
        "extension": "ts",
        "path": "src/js/dom/detectInOutDirection.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/detectInOutDirection.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.dispatchEvent": {
        "name": "dispatchEvent",
        "type": "Function",
        "description": "Helper to quickly display an event with some optional data attached to it",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "dispatchEvent.ts",
        "extension": "ts",
        "path": "src/js/dom/dispatchEvent.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/dispatchEvent.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.domReady": {
        "name": "domReady",
        "type": "Function",
        "description": "Wait that the dom is ready before resolving the promise",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "domready.ts",
        "extension": "ts",
        "path": "src/js/dom/domready.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/domready.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.emptyNode": {
        "name": "emptyNode",
        "type": "Function",
        "description": "Empty a node by removing each childs one after the other",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "emptyNode.ts",
        "extension": "ts",
        "path": "src/js/dom/emptyNode.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/emptyNode.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.exitFullscreen": {
        "name": "exitFullscreen",
        "type": "Function",
        "description": "Exit the fullscreen mode",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "exitFullscreen.ts",
        "extension": "ts",
        "path": "src/js/dom/exitFullscreen.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/exitFullscreen.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.forceRedraw": {
        "name": "forceRedraw",
        "type": "Function",
        "description": "Force the element to be painted again in case of visual issues",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "forceRedraw.ts",
        "extension": "ts",
        "path": "src/js/dom/forceRedraw.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/forceRedraw.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.getAnimationProperties": {
        "name": "getAnimationProperties",
        "type": "Function",
        "description": "Get the css animation properties from an HTMLElement in an object format",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "getAnimationProperties.ts",
        "extension": "ts",
        "path": "src/js/dom/getAnimationProperties.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/getAnimationProperties.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.getStyleProperty": {
        "name": "getStyleProperty",
        "type": "Function",
        "description": "Get a style property on the passed element through the computed style.\nThis function try to store the actual style to not trigger more that 1 redraw\neach js execution loop.",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "getStyleProperty.ts",
        "extension": "ts",
        "path": "src/js/dom/getStyleProperty.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/getStyleProperty.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.getTransitionProperties": {
        "name": "getTransitionProperties",
        "type": "Function",
        "description": "Get the css transition properties from an HTMLElement in an object format",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "getTransitionProperties.ts",
        "extension": "ts",
        "path": "src/js/dom/getTransitionProperties.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/getTransitionProperties.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.getTranslateProperties": {
        "name": "getTranslateProperties",
        "type": "Function",
        "description": "Get a translate properties of an HTMLElement",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "getTranslateProperties.ts",
        "extension": "ts",
        "path": "src/js/dom/getTranslateProperties.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/getTranslateProperties.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.imageLoaded": {
        "name": "imageLoaded",
        "type": "Function",
        "description": "Wait until the passed image is fully loaded",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "imageLoaded.ts",
        "extension": "ts",
        "path": "src/js/dom/imageLoaded.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/imageLoaded.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.imagesLoaded": {
        "name": "imagesLoaded",
        "type": "Function",
        "description": "Detect when some images are loaded. This function take advantage of the SPromise class\nand trigger an event called \"img.loaded\" that will be triggered on each loaded images and another called \"loaded\" once all the images are loaded.\nSee in the example bellow.",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "imagesLoaded.ts",
        "extension": "ts",
        "path": "src/js/dom/imagesLoaded.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/imagesLoaded.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.innerHtml": {
        "name": "innerHtml",
        "type": "Function",
        "description": "Change the content of a Node with the possibility to animate the change using one of these animations:\n- fade\n- fadeUp\n- fadeDown\n- fadeLeft\n- fadeRight\nYou can also choose between 3 actions which are: replace, append and prepend",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "innerHtml.ts",
        "extension": "ts",
        "path": "src/js/dom/innerHtml.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/innerHtml.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.insertAfter": {
        "name": "insertAfter",
        "type": "Function",
        "description": "Insert an HTMLElement after another HTMLElement",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "insertAfter.ts",
        "extension": "ts",
        "path": "src/js/dom/insertAfter.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/insertAfter.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.inViewportPercentage": {
        "name": "inViewportPercentage",
        "type": "Function",
        "description": "Return how many percent the passed element is visible in the viewport",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "inViewportPercentage.ts",
        "extension": "ts",
        "path": "src/js/dom/inViewportPercentage.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/inViewportPercentage.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.inViewportStatusChange": {
        "name": "inViewportStatusChange",
        "type": "Function",
        "description": "Monitor when the passed element enter or exit the viewport",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "inViewportStatusChange.ts",
        "extension": "ts",
        "path": "src/js/dom/inViewportStatusChange.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/inViewportStatusChange.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.isHover": {
        "name": "isHover",
        "type": "Function",
        "description": "Check if the mouse is hover the passed HTMLElement",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "isHover.ts",
        "extension": "ts",
        "path": "src/js/dom/isHover.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/isHover.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.isInIframe": {
        "name": "isInIframe",
        "type": "Function",
        "description": "Check if the page is loaded inside an iframe",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "isInIframe.ts",
        "extension": "ts",
        "path": "src/js/dom/isInIframe.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/isInIframe.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.isInViewport": {
        "name": "isInViewport",
        "type": "Function",
        "description": "Check if the passed HTMLElement is in the viewport or not",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "isInViewport.ts",
        "extension": "ts",
        "path": "src/js/dom/isInViewport.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/isInViewport.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.isVisible": {
        "name": "isVisible",
        "type": "Function",
        "description": "Check if the passed HTMLElement is visible or not.\nVisible mean that it has not an opacity of 0, not a visibility of hidden and not a display of none",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "isVisible.ts",
        "extension": "ts",
        "path": "src/js/dom/isVisible.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/isVisible.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.linkLoaded": {
        "name": "linkLoaded",
        "type": "Function",
        "description": "Wait until the passed HTMLLinkElement is fully loaded",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "linkLoaded.ts",
        "extension": "ts",
        "path": "src/js/dom/linkLoaded.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/linkLoaded.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.matches": {
        "name": "matches",
        "type": "Function",
        "description": "Polyfill for the Element.matches function",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "matches.ts",
        "extension": "ts",
        "path": "src/js/dom/matches.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/matches.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.next": {
        "name": "next",
        "type": "Function",
        "description": "Browse the passed element next siblings to find the first element that matches the passed selector",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "next.ts",
        "extension": "ts",
        "path": "src/js/dom/next.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/next.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.nodeIndex": {
        "name": "nodeIndex",
        "type": "Function",
        "description": "Return the inde of the passed node inside the html",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "nodeIndex.ts",
        "extension": "ts",
        "path": "src/js/dom/nodeIndex.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/nodeIndex.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.observeAttributes": {
        "name": "observeAttributes",
        "type": "Function",
        "description": "Observe attributes on an HTMLElement and get mutations through the SPromise instance",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "observeAttributes.ts",
        "extension": "ts",
        "path": "src/js/dom/observeAttributes.ts",
        "directory": "src/js/dom",
        "children": {
            "attributes": {
                "name": "attributes",
                "type": "{Array}"
            }
        },
        "relPath": "src/js/dom/observeAttributes.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.observeMutations": {
        "name": "observeMutations",
        "type": "Function",
        "description": "Observe mutations on an HTMLElement and get them through the observable subscription.\nYou can pass the mutation observer settings through the second argument. By default, here's his values:\n- attributes: true,\n- childList: false,\n- subtree: false",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "observeMutations.ts",
        "extension": "ts",
        "path": "src/js/dom/observeMutations.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/observeMutations.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.offset": {
        "name": "offset",
        "type": "Function",
        "description": "Get the offset top and left of the passed element from the document top left point",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "offset.ts",
        "extension": "ts",
        "path": "src/js/dom/offset.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/offset.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.offsetParent": {
        "name": "offsetParent",
        "type": "Function",
        "description": "Get the offset top and left of the passed element from his parent top left point",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "offsetParent.ts",
        "extension": "ts",
        "path": "src/js/dom/offsetParent.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/offsetParent.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.onSwipe": {
        "name": "onSwipe",
        "type": "Function",
        "description": "Detect swipes gestures on touch devices.",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "onSwipe.ts",
        "extension": "ts",
        "path": "src/js/dom/onSwipe.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/onSwipe.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.prependChild": {
        "name": "prependChild",
        "type": "Function",
        "description": "Prepend an HTMLElement into another HTMLElement",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "prependChild.ts",
        "extension": "ts",
        "path": "src/js/dom/prependChild.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/prependChild.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.previous": {
        "name": "previous",
        "type": "Function",
        "description": "Browse the passed element previous siblings to find the first element that matches the passed selector",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "previous.ts",
        "extension": "ts",
        "path": "src/js/dom/previous.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/previous.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.querySelector": {
        "name": "querySelector",
        "type": "Function",
        "description": "Enhanced proxy of the Element.querySelector function that let you specify\nif you want an element that is visible, or even that is in the viewport",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "querySelector.ts",
        "extension": "ts",
        "path": "src/js/dom/querySelector.ts",
        "directory": "src/js/dom",
        "children": {
            "visible": {
                "name": "visible",
                "type": "{Boolean}"
            },
            "inViewport": {
                "name": "inViewport",
                "type": "{Boolean}"
            },
            "rootNode": {
                "name": "rootNode",
                "type": "{HTMLElement}"
            }
        },
        "relPath": "src/js/dom/querySelector.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.querySelectorAll": {
        "name": "querySelectorAll",
        "type": "Function",
        "description": "Enhanced proxy of the Element.querySelectorAll function that let you specify\nif you want elements that are visible, or even that are in the viewport",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "querySelectorAll.ts",
        "extension": "ts",
        "path": "src/js/dom/querySelectorAll.ts",
        "directory": "src/js/dom",
        "children": {
            "visible": {
                "name": "visible",
                "type": "{Boolean}"
            },
            "inViewport": {
                "name": "inViewport",
                "type": "{Boolean}"
            },
            "rootNode": {
                "name": "rootNode",
                "type": "{HTMLElement}"
            }
        },
        "relPath": "src/js/dom/querySelectorAll.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.querySelectorAllWithStyle": {
        "name": "querySelectorAllWithStyle",
        "type": "Function",
        "description": "Select all node that match the style object passed as parameter",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "querySelectorAllWithStyle.ts",
        "extension": "ts",
        "path": "src/js/dom/querySelectorAllWithStyle.ts",
        "directory": "src/js/dom",
        "children": {
            "settings.rootNode": {
                "name": "settings.rootNode",
                "type": "{HTMLElement}"
            }
        },
        "relPath": "src/js/dom/querySelectorAllWithStyle.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.querySelectorLive": {
        "name": "querySelectorLive",
        "type": "Function",
        "description": "Observe the dom to get all the elements that matches a passed css selector at any point in time.\nBe warned that this use the mutation observer API and will monitor all the document for new nodes. Make sure to use it\nwhen you don't have the chance to use the custom elements API instead",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "querySelectorLive.ts",
        "extension": "ts",
        "path": "src/js/dom/querySelectorLive.ts",
        "directory": "src/js/dom",
        "children": {
            "settings.rootNode": {
                "name": "settings.rootNode",
                "type": "{HTMLElement}"
            },
            "settings.once": {
                "name": "settings.once",
                "type": "{Boolean}"
            }
        },
        "relPath": "src/js/dom/querySelectorLive.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.realHeight": {
        "name": "realHeight",
        "type": "Function",
        "description": "Return the full height of an element that has maybe a max-height, etc...",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "realHeight.ts",
        "extension": "ts",
        "path": "src/js/dom/realHeight.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/realHeight.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.removeClassOnAnimationEnd": {
        "name": "removeClassOnAnimationEnd",
        "type": "Function",
        "description": "Remove some class on animation end",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "removeClassOnAnimationEnd.ts",
        "extension": "ts",
        "path": "src/js/dom/removeClassOnAnimationEnd.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/removeClassOnAnimationEnd.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.requestAnimationFrame": {
        "name": "requestAnimationFrame",
        "type": "Function",
        "description": "Proxy for the window.requestAnimationFrame function",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "requestAnimationFrame.ts",
        "extension": "ts",
        "path": "src/js/dom/requestAnimationFrame.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/requestAnimationFrame.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.requestFullscreen": {
        "name": "requestFullscreen",
        "type": "Function",
        "description": "Request fullscreen on the passed DOM element",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "requestFullscreen.ts",
        "extension": "ts",
        "path": "src/js/dom/requestFullscreen.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/requestFullscreen.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.scriptLoaded": {
        "name": "scriptLoaded",
        "type": "Function",
        "description": "Detect when a script has been fully loaded",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "scriptLoaded.ts",
        "extension": "ts",
        "path": "src/js/dom/scriptLoaded.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/scriptLoaded.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.scrollLeft": {
        "name": "scrollLeft",
        "type": "Function",
        "description": "Get the amount of scroll left",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "scrollLeft.ts",
        "extension": "ts",
        "path": "src/js/dom/scrollLeft.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/scrollLeft.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.scrollTo": {
        "name": "scrollTo",
        "type": "Function",
        "description": "Function that let you make a smooth page scroll to a specific element in the page",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "scrollTo.ts",
        "extension": "ts",
        "path": "src/js/dom/scrollTo.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/scrollTo.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.scrollToLocationHash": {
        "name": "scrollToLocationHash",
        "type": "Function",
        "description": "Scroll to the location hash if an hash is present.\nThis function will try to get the target element from the hash and scroll to it",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "scrollToLocationHash.ts",
        "extension": "ts",
        "path": "src/js/dom/scrollToLocationHash.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/scrollToLocationHash.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.scrollTop": {
        "name": "scrollTop",
        "type": "Function",
        "description": "Return the amount of scroll top that the user as made in the page",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "scrollTop.ts",
        "extension": "ts",
        "path": "src/js/dom/scrollTop.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/scrollTop.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.sendForm": {
        "name": "sendForm",
        "type": "Function",
        "description": "Send a form through an ajax call and return back a promise resolved with the server response",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "sendForm.ts",
        "extension": "ts",
        "path": "src/js/dom/sendForm.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/sendForm.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.splitLetters": {
        "name": "splitLetters",
        "type": "Function",
        "description": "Split each letters inside an HTMLElement by scoping them inside multiple tags.\nHere's an result sample for : Hello World\n```html\n<span style=\"white-space:nowrap\">\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">H</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">e</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">l</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">l</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">o</span>\n</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">&nbsp;</span>\n</span>\n<span style=\"white-space:nowrap\">\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">W</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">o</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">r</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">l</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">d</span>\n</span>\n</span>\n```",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "splitLetters.ts",
        "extension": "ts",
        "path": "src/js/dom/splitLetters.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/splitLetters.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.splitLines": {
        "name": "splitLines",
        "type": "Function",
        "description": "Split each lines inside an HTMLElement by scoping them inside some tags.\nHere's an result sample for :\nHello\nWorld\n\n```html\n<p class=\"s-split-lines\">Hello</p>\n<p class=\"s-split-lines\">World</p>\n```",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "splitLines.ts",
        "extension": "ts",
        "path": "src/js/dom/splitLines.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/splitLines.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.splitWords": {
        "name": "splitWords",
        "type": "Function",
        "description": "Split each words inside an HTMLElement by scoping them inside some tags.\nHere's an result sample for :\nHello World\n\n```html\n<span class=\"s-split-words\">Hello</span>\n<span class=\"s-split-words\">World</span>\n```",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "splitWords.ts",
        "extension": "ts",
        "path": "src/js/dom/splitWords.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/splitWords.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.stripTags": {
        "name": "stripTags",
        "type": "Function",
        "description": "Strip the tags of the passed text",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "stripTags.ts",
        "extension": "ts",
        "path": "src/js/dom/stripTags.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/stripTags.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.style": {
        "name": "style",
        "type": "Function",
        "description": "Set or remove a css style property on an HTMLElement",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "style.ts",
        "extension": "ts",
        "path": "src/js/dom/style.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/style.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.styleObject2String": {
        "name": "styleObject2String",
        "type": "Function",
        "description": "Transform a style object to inline string separated by ;",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "styleObject2String.ts",
        "extension": "ts",
        "path": "src/js/dom/styleObject2String.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/styleObject2String.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.stylesheetsReady": {
        "name": "stylesheetsReady",
        "type": "Function",
        "description": "Wait until all the HTMLLinkElement's are properly loaded",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "stylesheetsReady.ts",
        "extension": "ts",
        "path": "src/js/dom/stylesheetsReady.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/stylesheetsReady.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.styleString2Object": {
        "name": "styleString2Object",
        "type": "Function",
        "description": "Transform a style string to an object representation",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "styleString2Object.ts",
        "extension": "ts",
        "path": "src/js/dom/styleString2Object.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/styleString2Object.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.textWidth": {
        "name": "textWidth",
        "type": "Function",
        "description": "Get the text width in px of a passed string or the passed HTMLElement",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "textWidth.ts",
        "extension": "ts",
        "path": "src/js/dom/textWidth.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/textWidth.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.toDomNodes": {
        "name": "toDomNodes",
        "type": "Function",
        "description": "Return a usable nodeTree from a variable source like selector, an html string, an html template tag or a node that will be cloned.",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "toDomNodes.ts",
        "extension": "ts",
        "path": "src/js/dom/toDomNodes.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/toDomNodes.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.toggleFullscreen": {
        "name": "toggleFullscreen",
        "type": "Function",
        "description": "Toggle the fullscreen mode",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "toggleFullscreen.ts",
        "extension": "ts",
        "path": "src/js/dom/toggleFullscreen.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/toggleFullscreen.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.when": {
        "name": "when",
        "type": "Function",
        "description": "Return a promise that will be resolved when the wanted status has been applied on the passed HTMLElement.\nThe status that can be requested are:\n- attribute : Detect when a special attribute has been applied on the element\n--- settings.attribute : Specify the attribute to check\n--- settings.checkFn : An optional function to check the attribute. The promise is resolved when this function return true\n\n- inViewport : Detect when the element enter in the viewport\n--- settings.offset : Specify an offset to detect the in viewport state\n\n- outOfViewport : Detect when the element exit the viewport\n--- settings.offset : Specify an offset to detect the out viewport state\n\n- transitionEnd : Detect when the css transition is finished on the element\n--- settings.callback : An optional callback function if you prefer instead of the promise\n\n- visible : Detect when the element become visible\n--- settings.callback : An optional callback function if you prefer instead of the promise",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "when.ts",
        "extension": "ts",
        "path": "src/js/dom/when.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/when.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.whenAttribute": {
        "name": "whenAttribute",
        "type": "Function",
        "description": "Resolve a promise when the wanted attribute on the passed HTMLElement exist or pass the check function provided",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "whenAttribute.ts",
        "extension": "ts",
        "path": "src/js/dom/whenAttribute.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/whenAttribute.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.whenInViewport": {
        "name": "whenInViewport",
        "type": "Function",
        "description": "Monitor an HTMLElement to be notified when it is in the viewport",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "whenInViewport.ts",
        "extension": "ts",
        "path": "src/js/dom/whenInViewport.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/whenInViewport.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.whenOutOfViewport": {
        "name": "whenOutOfViewport",
        "type": "Function",
        "description": "Monitor an HTMLElement to be notified when it exit the viewport",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "whenOutOfViewport.ts",
        "extension": "ts",
        "path": "src/js/dom/whenOutOfViewport.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/whenOutOfViewport.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.whenTransitionEnd": {
        "name": "whenTransitionEnd",
        "type": "Function",
        "description": "Monitor an HTMLElement to be notified when his transition has ended",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "whenTransitionEnd.ts",
        "extension": "ts",
        "path": "src/js/dom/whenTransitionEnd.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/whenTransitionEnd.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.whenVisible": {
        "name": "whenVisible",
        "type": "Function",
        "description": "Monitor an HTMLElement to be notified when it is visible",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "whenVisible.ts",
        "extension": "ts",
        "path": "src/js/dom/whenVisible.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/whenVisible.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.wrap": {
        "name": "wrap",
        "type": "Function",
        "description": "Wrap an HTMLElement inside another `$wrapper` one",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "wrap.ts",
        "extension": "ts",
        "path": "src/js/dom/wrap.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/wrap.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.dom.wrapInner": {
        "name": "wrapInner",
        "type": "Function",
        "description": "Wrap the content of the passed `$parent` inside a the passed HTMLElement `$wrapper`",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "wrapInner.ts",
        "extension": "ts",
        "path": "src/js/dom/wrapInner.ts",
        "directory": "src/js/dom",
        "children": {},
        "relPath": "src/js/dom/wrapInner.ts",
        "relDirectory": "src/js/dom"
    },
    "sugar.js.easing.availableEasingsArray": {
        "name": "availableEasingsArray",
        "type": "Function",
        "description": "This function simply return back an array of all the available easings function in the sugar toolkit",
        "namespace": "sugar.js.easing",
        "since": "2.0.0",
        "filename": "availableEasingsArray.ts",
        "extension": "ts",
        "path": "src/node/easing/availableEasingsArray.ts",
        "directory": "src/node/easing",
        "children": {},
        "relPath": "src/node/easing/availableEasingsArray.ts",
        "relDirectory": "src/node/easing"
    },
    "sugar.js.easing.easeInCubic": {
        "name": "easeInCubic",
        "type": "Function",
        "description": "Ease in cubic function",
        "namespace": "sugar.js.easing",
        "since": "1.0.0",
        "filename": "easeInCubic.ts",
        "extension": "ts",
        "path": "src/node/easing/easeInCubic.ts",
        "directory": "src/node/easing",
        "children": {},
        "relPath": "src/node/easing/easeInCubic.ts",
        "relDirectory": "src/node/easing"
    },
    "sugar.js.easing.easeInOutCubic": {
        "name": "easeInOutCubic",
        "type": "Function",
        "description": "Ease in out cubic function",
        "namespace": "sugar.js.easing",
        "since": "1.0.0",
        "filename": "easeInOutCubic.ts",
        "extension": "ts",
        "path": "src/node/easing/easeInOutCubic.ts",
        "directory": "src/node/easing",
        "children": {},
        "relPath": "src/node/easing/easeInOutCubic.ts",
        "relDirectory": "src/node/easing"
    },
    "sugar.js.easing.easeInOutQuad": {
        "name": "easeInOutQuad",
        "type": "Function",
        "description": "Ease in out quad function",
        "namespace": "sugar.js.easing",
        "since": "1.0.0",
        "filename": "easeInOutQuad.ts",
        "extension": "ts",
        "path": "src/node/easing/easeInOutQuad.ts",
        "directory": "src/node/easing",
        "children": {},
        "relPath": "src/node/easing/easeInOutQuad.ts",
        "relDirectory": "src/node/easing"
    },
    "sugar.js.easing.easeInOutQuart": {
        "name": "easeInOutQuart",
        "type": "Function",
        "description": "Ease in out quart function",
        "namespace": "sugar.js.easing",
        "since": "1.0.0",
        "filename": "easeInOutQuart.ts",
        "extension": "ts",
        "path": "src/node/easing/easeInOutQuart.ts",
        "directory": "src/node/easing",
        "children": {},
        "relPath": "src/node/easing/easeInOutQuart.ts",
        "relDirectory": "src/node/easing"
    },
    "sugar.js.easing.easeInOutQuint": {
        "name": "easeInOutQuint",
        "type": "Function",
        "description": "Ease in out quint function",
        "namespace": "sugar.js.easing",
        "since": "1.0.0",
        "filename": "easeInOutQuint.ts",
        "extension": "ts",
        "path": "src/node/easing/easeInOutQuint.ts",
        "directory": "src/node/easing",
        "children": {},
        "relPath": "src/node/easing/easeInOutQuint.ts",
        "relDirectory": "src/node/easing"
    },
    "sugar.js.easing.easeInQuad": {
        "name": "easeInQuad",
        "type": "Function",
        "description": "Ease in quad function",
        "namespace": "sugar.js.easing",
        "since": "1.0.0",
        "filename": "easeInQuad.ts",
        "extension": "ts",
        "path": "src/node/easing/easeInQuad.ts",
        "directory": "src/node/easing",
        "children": {},
        "relPath": "src/node/easing/easeInQuad.ts",
        "relDirectory": "src/node/easing"
    },
    "sugar.js.easing.easeInQuart": {
        "name": "easeInQuart",
        "type": "Function",
        "description": "Ease in quart function",
        "namespace": "sugar.js.easing",
        "since": "1.0.0",
        "filename": "easeInQuart.ts",
        "extension": "ts",
        "path": "src/node/easing/easeInQuart.ts",
        "directory": "src/node/easing",
        "children": {},
        "relPath": "src/node/easing/easeInQuart.ts",
        "relDirectory": "src/node/easing"
    },
    "sugar.js.easing.easeInQuint": {
        "name": "easeInQuint",
        "type": "Function",
        "description": "Ease in quint function",
        "namespace": "sugar.js.easing",
        "since": "1.0.0",
        "filename": "easeInQuint.ts",
        "extension": "ts",
        "path": "src/node/easing/easeInQuint.ts",
        "directory": "src/node/easing",
        "children": {},
        "relPath": "src/node/easing/easeInQuint.ts",
        "relDirectory": "src/node/easing"
    },
    "sugar.js.easing.easeOutCubic": {
        "name": "easeOutCubic",
        "type": "Function",
        "description": "Ease out cubic function",
        "namespace": "sugar.js.easing",
        "since": "1.0.0",
        "filename": "easeOutCubic.ts",
        "extension": "ts",
        "path": "src/node/easing/easeOutCubic.ts",
        "directory": "src/node/easing",
        "children": {},
        "relPath": "src/node/easing/easeOutCubic.ts",
        "relDirectory": "src/node/easing"
    },
    "sugar.js.easing.easeOutQuad": {
        "name": "easeOutQuad",
        "type": "Function",
        "description": "Ease out quad function",
        "namespace": "sugar.js.easing",
        "since": "1.0.0",
        "filename": "easeOutQuad.ts",
        "extension": "ts",
        "path": "src/node/easing/easeOutQuad.ts",
        "directory": "src/node/easing",
        "children": {},
        "relPath": "src/node/easing/easeOutQuad.ts",
        "relDirectory": "src/node/easing"
    },
    "sugar.js.easing.easeOutQuart": {
        "name": "easeOutQuart",
        "type": "Function",
        "description": "Ease out quart function",
        "namespace": "sugar.js.easing",
        "since": "1.0.0",
        "filename": "easeOutQuart.ts",
        "extension": "ts",
        "path": "src/node/easing/easeOutQuart.ts",
        "directory": "src/node/easing",
        "children": {},
        "relPath": "src/node/easing/easeOutQuart.ts",
        "relDirectory": "src/node/easing"
    },
    "sugar.js.easing.easeOutQuint": {
        "name": "easeOutQuint",
        "type": "Function",
        "description": "Ease out quint function",
        "namespace": "sugar.js.easing",
        "since": "1.0.0",
        "filename": "easeOutQuint.ts",
        "extension": "ts",
        "path": "src/node/easing/easeOutQuint.ts",
        "directory": "src/node/easing",
        "children": {},
        "relPath": "src/node/easing/easeOutQuint.ts",
        "relDirectory": "src/node/easing"
    },
    "sugar.js.easing.linear": {
        "name": "linear",
        "type": "Function",
        "description": "Ease linear function",
        "namespace": "sugar.js.easing",
        "since": "1.0.0",
        "filename": "linear.ts",
        "extension": "ts",
        "path": "src/node/easing/linear.ts",
        "directory": "src/node/easing",
        "children": {},
        "relPath": "src/node/easing/linear.ts",
        "relDirectory": "src/node/easing"
    },
    "sugar.js.es6.SEs6Import": {
        "name": "SEs6Import",
        "type": "Class",
        "description": "This class represent an es6 import statement with properties like:\n- path {String}: The import path\n- default {String}: The default import name\n- star {String}: The start import name \"import  as something from ...\"\n- named {Array<Object>}: THe named imports\n- raw {String}: The raw import statement",
        "namespace": "sugar.js.es6",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SEs6Import.ts",
        "extension": "ts",
        "path": "src/node/es6/SEs6Import.ts",
        "directory": "src/node/es6",
        "children": {
            "parseCode": {
                "name": "parseCode",
                "type": "Function",
                "description": "This function simply parse the passed code and return an array of all the\nfounded es6 imports",
                "static": true,
                "since": "2.0.0"
            },
            "raw": {
                "name": "raw",
                "type": "String",
                "description": "Store the raw statement string",
                "since": "2.0.0"
            },
            "path": {
                "name": "path",
                "type": "String",
                "description": "Store the statement path",
                "since": "2.0.0"
            },
            "default": {
                "name": "default",
                "type": "String",
                "description": "Store the statement default import name",
                "since": "2.0.0"
            },
            "star": {
                "name": "star",
                "type": "String",
                "description": "Store the statement star name like \"import * as coco from ...\"",
                "since": "2.0.0"
            },
            "named": {
                "name": "named",
                "type": "Array<Object>",
                "description": "Store the statement named imports with these properties:\n- name {String}: The import name\n- as {String}: The import as alias",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "toString": {
                "name": "toString",
                "type": "Function",
                "description": "Return the builded version of the import",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/es6/SEs6Import.ts",
        "relDirectory": "src/node/es6"
    },
    "sugar.js.event.emit": {
        "name": "emit",
        "type": "Function",
        "description": "This function can ben used to emit an event globally.\nYou can subscribe to these events using the \"sugar.js.event.subscribe\" function",
        "namespace": "sugar.js.event",
        "since": "2.0.0",
        "filename": "emit.ts",
        "extension": "ts",
        "path": "src/js/event/emit.ts",
        "directory": "src/js/event",
        "children": {},
        "relPath": "src/js/event/emit.ts",
        "relDirectory": "src/js/event"
    },
    "sugar.js.event.on": {
        "name": "on",
        "type": "Function",
        "description": "This function allows you to subscribe to global events triggered by the \"sugar.js.event.dispatch\" function\nIt use under the hood an SPromise instance",
        "namespace": "sugar.js.event",
        "since": "2.0.0",
        "filename": "on.ts",
        "extension": "ts",
        "path": "src/js/event/on.ts",
        "directory": "src/js/event",
        "children": {},
        "relPath": "src/js/event/on.ts",
        "relDirectory": "src/js/event"
    },
    "sugar.js.event.SEvent": {
        "name": "SEvent",
        "type": "Class",
        "description": "Proxy class to create custom events that can be dispatched\nthrough the standard dispatch method on any HTMLElement",
        "namespace": "sugar.js.event",
        "since": "2.0.0",
        "filename": "SEvent.ts",
        "extension": "ts",
        "path": "src/js/event/SEvent.ts",
        "directory": "src/js/event",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Construct the event"
            },
            "settings.cancelable": {
                "name": "settings.cancelable",
                "type": "Boolean",
                "description": "Set if the event is cancelable or not"
            },
            "settings.bubbles": {
                "name": "settings.bubbles",
                "type": "Boolean",
                "description": "Set if the event will bubble or not"
            },
            "settings.detail": {
                "name": "settings.detail",
                "type": "Object",
                "description": "Pass an object that will be sent with the event"
            }
        },
        "relPath": "src/js/event/SEvent.ts",
        "relDirectory": "src/js/event"
    },
    "sugar.js.event.SEventEmitter": {
        "name": "SEventEmitter",
        "type": "Class",
        "namespace": "sugar.js.event",
        "status": "beta",
        "since": "2.0.0",
        "filename": "SEventEmitter.ts",
        "extension": "ts",
        "path": "src/node/event/SEventEmitter.ts",
        "directory": "src/node/event",
        "children": {
            "pipe": {
                "name": "pipe",
                "type": "Function",
                "description": "This method is the same as the ```pipe```and ```pipeFrom``` one but it's just act as the inverse.\nHere you specify whenre you want to pipe this instance events and not from which you want to pipe them here...",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "pipeFrom": {
                "name": "pipeFrom",
                "type": "Function",
                "description": "This is the exacte same as the original ```pipe``` method. It's just an aliasw.",
                "since": "2.0.0"
            },
            "emit": {
                "name": "emit",
                "type": "Function",
                "description": "This is the method that allows you to emit the callbacks like \"catch\", \"finally\", etc... without actually resolving the Promise itself"
            },
            "on": {
                "name": "on",
                "type": "Function",
                "description": "This method allows the SEventEmitter user to register a function that will be called every time the \"resolve\" one is called in the executor\nThe context of the callback will be the SEventEmitter instance itself so you can call all the methods available like \"resolve\", \"release\", \"on\", etc using\nthe \"this.resolve('something')\" statusment. In an arrow function like \"(value) => { ... }\", the \"this\" keyword will be bound to the current context where you define\nyour function. You can access to the SEventEmitter instance through the last parameter like so \"(value, SEventEmitterInstance) => { ... }\"."
            },
            "off": {
                "name": "off",
                "type": "Function",
                "description": "This method allows you to unsubscribe to an event by passing the event name an optionally the callback function.\nIf you don't pass the callback function, all the subscribed events the same as the passed one will be unsubscribed.",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/event/SEventEmitter.ts",
        "relDirectory": "src/node/event"
    },
    "sugar.js.feature.autoScrollAnchorLinks": {
        "name": "autoScrollAnchorLinks",
        "type": "Function",
        "description": "Listen for links contains an hash to init them for scroll to target on click",
        "namespace": "sugar.js.feature",
        "since": "2.0.0",
        "filename": "autoScrollAnchorLinks.ts",
        "extension": "ts",
        "path": "src/js/feature/autoScrollAnchorLinks.ts",
        "directory": "src/js/feature",
        "children": {},
        "relPath": "src/js/feature/autoScrollAnchorLinks.ts",
        "relDirectory": "src/js/feature"
    },
    "sugar.js.feature.imagesLazySrcAttribute": {
        "name": "imagesLazySrcAttribute",
        "type": "Feature",
        "description": "Add support for the `lazy-src` attribute on `img` elements.\nThe video `src` attribute will be populated when the `img` element enter the viewport",
        "namespace": "sugar.js.feature",
        "since": "2.0.0",
        "filename": "imagesLazySrcAttribute.ts",
        "extension": "ts",
        "path": "src/js/feature/imagesLazySrcAttribute.ts",
        "directory": "src/js/feature",
        "children": {},
        "relPath": "src/js/feature/imagesLazySrcAttribute.ts",
        "relDirectory": "src/js/feature"
    },
    "sugar.js.feature.imagesLoadedAttribute": {
        "name": "imagesLoadedAttribute",
        "type": "Feature",
        "description": "Add on every images the attribute \"loaded\" when it has been fully loaded. This is useful\nfor styling purposes and for others thinks as well.",
        "namespace": "sugar.js.feature",
        "since": "1.0.0",
        "filename": "imagesLoadedAttribute.ts",
        "extension": "ts",
        "path": "src/js/feature/imagesLoadedAttribute.ts",
        "directory": "src/js/feature",
        "children": {},
        "relPath": "src/js/feature/imagesLoadedAttribute.ts",
        "relDirectory": "src/js/feature"
    },
    "sugar.js.feature.handleInputAttributes": {
        "name": "handleInputAttributes",
        "type": "Feature",
        "description": "Add some events on some DOM Elements. Here's the list:\n- enter (onenter): Triggered when user tap ```enter``` on his keyboard from a *input*** or **textarea** element\n- escape (onescape): Triggered when user tap ```escape``` on his keyboard from a *input*** or **textarea** element",
        "namespace": "sugar.js.feature",
        "since": "1.0.0",
        "filename": "inputAdditionalEvents.ts",
        "extension": "ts",
        "path": "src/js/feature/inputAdditionalEvents.ts",
        "directory": "src/js/feature",
        "children": {},
        "relPath": "src/js/feature/inputAdditionalEvents.ts",
        "relDirectory": "src/js/feature"
    },
    "sugar.js.feature.linksScrollHrefAttribute": {
        "name": "linksScrollHrefAttribute",
        "type": "Feature",
        "description": "Add the ability to set links href attribute with \"scroll:#target\" in order to animate the scroll to this target element",
        "namespace": "sugar.js.feature",
        "since": "1.0.0",
        "filename": "linksScrollHrefAttribute.ts",
        "extension": "ts",
        "path": "src/js/feature/linksScrollHrefAttribute.ts",
        "directory": "src/js/feature",
        "children": {},
        "relPath": "src/js/feature/linksScrollHrefAttribute.ts",
        "relDirectory": "src/js/feature"
    },
    "sugar.js.feature.videoLazySrcAttribute": {
        "name": "videoLazySrcAttribute",
        "type": "Feature",
        "description": "Add support for the `lazy-src` attribute on `video` elements.\nThe video `src` attribute will be populated when the `video` element enter the viewport",
        "namespace": "sugar.js.feature",
        "filename": "videosLazySrcAttribute.ts",
        "extension": "ts",
        "path": "src/js/feature/videosLazySrcAttribute.ts",
        "directory": "src/js/feature",
        "children": {},
        "relPath": "src/js/feature/videosLazySrcAttribute.ts",
        "relDirectory": "src/js/feature"
    },
    "sugar.js.file.extension": {
        "name": "extension",
        "type": "Function",
        "description": "Return the passed file path extension",
        "namespace": "sugar.js.file",
        "since": "2.0.0",
        "filename": "extension.ts",
        "extension": "ts",
        "path": "src/node/file/extension.ts",
        "directory": "src/node/file",
        "children": {},
        "relPath": "src/node/file/extension.ts",
        "relDirectory": "src/node/file"
    },
    "sugar.js.filter.SGooeySvgFilter": {
        "name": "SGooeySvgFilter",
        "type": "Class",
        "description": "This class allows you to create with ease some complexe SVG filters and to apply it on any HTMLElement that you want\nby extending this class like so",
        "namespace": "sugar.js.filter",
        "since": "1.0.0",
        "filename": "SSvgFilter.ts",
        "extension": "ts",
        "path": "src/js/filter/SSvgFilter.ts",
        "directory": "src/js/filter",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "applyTo": {
                "name": "applyTo",
                "type": "Function",
                "description": "Apply the filter to an element"
            },
            "unapplyFrom": {
                "name": "unapplyFrom",
                "type": "Function",
                "description": "Unapply from"
            },
            "destroy": {
                "name": "destroy",
                "type": "Function",
                "description": "Destroy the filter"
            }
        },
        "relPath": "src/js/filter/SSvgFilter.ts",
        "relDirectory": "src/js/filter"
    },
    "sugar.js.filter.SGradientSvgFilter": {
        "name": "SGradientSvgFilter",
        "type": "Class",
        "description": "This SVG filter class apply either a linear or a radial gradient of your choice\non an HTMLElement.\nThis is useful cause the gradient will only be applied on part of the elements that is really visible and will respect the opacity\nof each parts",
        "namespace": "sugar.js.filter",
        "extends": "SSvgFilter",
        "since": "1.0.0",
        "filename": "SGradientSvgFilter.ts",
        "extension": "ts",
        "path": "src/js/filter/SGradientSvgFilter.ts",
        "directory": "src/js/filter",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "linear": {
                "name": "linear",
                "type": "Function",
                "description": "Linear gradient"
            },
            "radial": {
                "name": "radial",
                "type": "Function",
                "description": "Radial gradient"
            },
            "applyTo": {
                "name": "applyTo",
                "type": "Function",
                "description": "Apply the filter to element"
            },
            "unapplyFrom": {
                "name": "unapplyFrom",
                "type": "Function",
                "description": "Remove the filter from element"
            }
        },
        "relPath": "src/js/filter/SGradientSvgFilter.ts",
        "relDirectory": "src/js/filter"
    },
    "sugar.js.filter.SMotionblurSvgFilter": {
        "name": "SMotionblurSvgFilter",
        "type": "Class",
        "description": "This class represent a motion blur svg filter that will blur your\nelement depending on his movements, direction and speed",
        "namespace": "sugar.js.filter",
        "since": "1.0.0",
        "filename": "SMotionblurSvgFilter.ts",
        "extension": "ts",
        "path": "src/js/filter/SMotionblurSvgFilter.ts",
        "directory": "src/js/filter",
        "children": {
            "amount": {
                "name": "amount",
                "type": "Number",
                "description": "Store the amount of motion blur to apply"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "applyTo": {
                "name": "applyTo",
                "type": "Function",
                "description": "Apply the filter to element"
            },
            "unapplyFrom": {
                "name": "unapplyFrom",
                "type": "Function",
                "description": "Remove the filter from element"
            },
            "destroy": {
                "name": "destroy",
                "type": "Function",
                "description": "Destroy the filter"
            }
        },
        "relPath": "src/js/filter/SMotionblurSvgFilter.ts",
        "relDirectory": "src/js/filter"
    },
    "sugar.js.filter.SOutlineSvgFilter": {
        "name": "SOutlineSvgFilter",
        "type": "Class",
        "description": "This class represent an outline filter that can be applied on any HTMLElement.",
        "namespace": "sugar.js.filter",
        "extends": "SSvgFilter",
        "since": "1.0.0",
        "filename": "SOutlineSvgFilter.ts",
        "extension": "ts",
        "path": "src/js/filter/SOutlineSvgFilter.ts",
        "directory": "src/js/filter",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "radius": {
                "name": "radius",
                "type": "Number",
                "description": "Get/Set the radius to produce the effect"
            }
        },
        "relPath": "src/js/filter/SOutlineSvgFilter.ts",
        "relDirectory": "src/js/filter"
    },
    "sugar.js.function.debounce": {
        "name": "debounce",
        "type": "Function",
        "description": "This utils function allows you to make sure that a function that will normally be called\nseveral times, for example during a scroll event, to be called only once after\nthe delay passed",
        "namespace": "sugar.js.function",
        "since": "2.0.0",
        "filename": "debounce.ts",
        "extension": "ts",
        "path": "src/node/function/debounce.ts",
        "directory": "src/node/function",
        "children": {},
        "relPath": "src/node/function/debounce.ts",
        "relDirectory": "src/node/function"
    },
    "sugar.js.function.setRecursiveTimeout": {
        "name": "setRecursiveTimeout",
        "type": "Function",
        "description": "This utils function allows you to call a passed function each x time during a certain duration",
        "namespace": "sugar.js.function",
        "since": "2.0.0",
        "filename": "setRecursiveTimeout.ts",
        "extension": "ts",
        "path": "src/node/function/setRecursiveTimeout.ts",
        "directory": "src/node/function",
        "children": {},
        "relPath": "src/node/function/setRecursiveTimeout.ts",
        "relDirectory": "src/node/function"
    },
    "sugar.js.function.sleep": {
        "name": "sleep",
        "type": "Function",
        "description": "Simple sleep function that can be used using \"await\" syntax in an \"async\" function",
        "namespace": "sugar.js.function",
        "since": "2.0.0",
        "filename": "sleep.ts",
        "extension": "ts",
        "path": "src/node/function/sleep.ts",
        "directory": "src/node/function",
        "children": {},
        "relPath": "src/node/function/sleep.ts",
        "relDirectory": "src/node/function"
    },
    "sugar.js.function.throttle": {
        "name": "throttle",
        "type": "Function",
        "description": "This utils function allows you to make sure that a function that will normally be called\nseveral times, for example during a scroll event, to be called once each threshhold time",
        "namespace": "sugar.js.function",
        "since": "2.0.0",
        "filename": "throttle.ts",
        "extension": "ts",
        "path": "src/node/function/throttle.ts",
        "directory": "src/node/function",
        "children": {},
        "relPath": "src/node/function/throttle.ts",
        "relDirectory": "src/node/function"
    },
    "sugar.js.geom.2d.circleConstrain": {
        "name": "circleConstrain",
        "type": "Function",
        "description": "Take as parameter a central point, a radius and a points to constrain inside the circle defined by the radius",
        "namespace": "sugar.js.geom.2d",
        "since": "2.0.0",
        "filename": "circleConstrain.ts",
        "extension": "ts",
        "path": "src/node/geom/circleConstrain.ts",
        "directory": "src/node/geom",
        "children": {},
        "relPath": "src/node/geom/circleConstrain.ts",
        "relDirectory": "src/node/geom"
    },
    "sugar.js.geom.2d.distanceBetween": {
        "name": "distanceBetween",
        "type": "Function",
        "description": "Get the distance between two points",
        "namespace": "sugar.js.geom.2d",
        "since": "2.0.0",
        "filename": "distanceBetween.ts",
        "extension": "ts",
        "path": "src/node/geom/distanceBetween.ts",
        "directory": "src/node/geom",
        "children": {},
        "relPath": "src/node/geom/distanceBetween.ts",
        "relDirectory": "src/node/geom"
    },
    "sugar.js.glob.extractGlob": {
        "name": "extractGlob",
        "type": "Function",
        "description": "This function simply return you the glob part of a passed string",
        "namespace": "sugar.js.glob",
        "since": "2.0.0",
        "filename": "extractGlob.ts",
        "extension": "ts",
        "path": "src/node/glob/extractGlob.ts",
        "directory": "src/node/glob",
        "children": {},
        "relPath": "src/node/glob/extractGlob.ts",
        "relDirectory": "src/node/glob"
    },
    "sugar.js.glob.extractNoneGlob": {
        "name": "extractNoneGlob",
        "type": "Function",
        "description": "This function simply return you the none glob part of a passed string",
        "namespace": "sugar.js.glob",
        "since": "2.0.0",
        "filename": "extractNoneGlob.ts",
        "extension": "ts",
        "path": "src/node/glob/extractNoneGlob.ts",
        "directory": "src/node/glob",
        "children": {},
        "relPath": "src/node/glob/extractNoneGlob.ts",
        "relDirectory": "src/node/glob"
    },
    "sugar.js.google.SGoogleCustomSearch": {
        "name": "SGoogleCustomSearch",
        "type": "Class",
        "description": "This class let you make with ease search requests to the google custom search service\nwith useful features like:\n- Simple pagination system\n- Promise support",
        "namespace": "sugar.js.google",
        "since": "2.0.0",
        "filename": "SGoogleCustomSearch.ts",
        "extension": "ts",
        "path": "src/node/google/SGoogleCustomSearch.ts",
        "directory": "src/node/google",
        "children": {
            "num": {
                "name": "num",
                "type": "Number",
                "description": "How many results by page wanted\nCan be between 1 and 10"
            },
            "page": {
                "name": "page",
                "type": "Number",
                "description": "The page to request"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "search": {
                "name": "search",
                "type": "Function",
                "description": "Launch a search"
            },
            "next": {
                "name": "next",
                "type": "Function",
                "description": "Load the next page"
            },
            "previous": {
                "name": "previous",
                "type": "Function",
                "description": "Load the previous page"
            }
        },
        "relPath": "src/node/google/SGoogleCustomSearch.ts",
        "relDirectory": "src/node/google"
    },
    "sugar.js.string.decodeHtmlEntities": {
        "name": "decodeHtmlEntities",
        "type": "Function",
        "description": "Decode an htmlentities encoded string",
        "namespace": "sugar.js.string",
        "since": "1.0.0",
        "filename": "decodeHtmlEntities.ts",
        "extension": "ts",
        "path": "src/js/html/decodeHtmlEntities.ts",
        "directory": "src/js/html",
        "children": {},
        "relPath": "src/js/html/decodeHtmlEntities.ts",
        "relDirectory": "src/js/html"
    },
    "sugar.js.html.getHtmlClassFromTagName": {
        "name": "getHtmlClassFromTagName",
        "type": "Function",
        "description": "This function simply return the HTML{name}Element class depending on the passed\ntag name like \"p\", \"input\", \"textarea\", etc...",
        "namespace": "sugar.js.html",
        "since": "2.0.0",
        "filename": "getHtmlClassFromTagName.ts",
        "extension": "ts",
        "path": "src/js/html/getHtmlClassFromTagName.ts",
        "directory": "src/js/html",
        "children": {},
        "relPath": "src/js/html/getHtmlClassFromTagName.ts",
        "relDirectory": "src/js/html"
    },
    "sugar.js.html.getHtmlhtmlClassFromHtmlClass": {
        "name": "getHtmlhtmlClassFromHtmlClass",
        "type": "Function",
        "description": "This function simply return the tagname depending on the passed HTML class\nlike HTMLAnchorElement, HTMLLinkElement, etc...",
        "namespace": "sugar.js.html",
        "since": "2.0.0",
        "filename": "getTagNameFromHtmlClass.ts",
        "extension": "ts",
        "path": "src/js/html/getTagNameFromHtmlClass.ts",
        "directory": "src/js/html",
        "children": {},
        "relPath": "src/js/html/getTagNameFromHtmlClass.ts",
        "relDirectory": "src/js/html"
    },
    "sugar.js.html.HtmlTagToHtmlClassMap": {
        "name": "HtmlTagToHtmlClassMap",
        "type": "Object",
        "description": "This export an object mapping the HTML tag name to his corresponding HTML class (object not css class)",
        "namespace": "sugar.js.html",
        "since": "2.0.0",
        "filename": "htmlTagToHtmlClassMap.ts",
        "extension": "ts",
        "path": "src/js/html/htmlTagToHtmlClassMap.ts",
        "directory": "src/js/html",
        "children": {},
        "relPath": "src/js/html/htmlTagToHtmlClassMap.ts",
        "relDirectory": "src/js/html"
    },
    "sugar.js.html.replaceTags": {
        "name": "replaceTags",
        "type": "Function",
        "description": "Replace all the html tags that you specify by something else that you can fully choose",
        "namespace": "sugar.js.html",
        "since": "1.0.0",
        "filename": "replaceTags.ts",
        "extension": "ts",
        "path": "src/node/html/replaceTags.ts",
        "directory": "src/node/html",
        "children": {},
        "relPath": "src/node/html/replaceTags.ts",
        "relDirectory": "src/node/html"
    },
    "sugar.js.html.striptags": {
        "name": "striptags",
        "type": "Function",
        "description": "Strip tags of an html string.\nThis is a simple wrapper of the nice \"striptags\" package that you can find here: https://www.npmjs.com/package/striptags",
        "namespace": "sugar.js.html",
        "since": "2.0.0",
        "filename": "striptags.ts",
        "extension": "ts",
        "path": "src/node/html/striptags.ts",
        "directory": "src/node/html",
        "children": {},
        "relPath": "src/node/html/striptags.ts",
        "relDirectory": "src/node/html"
    },
    "sugar.js.html.strToHtml": {
        "name": "strToHtml",
        "type": "Function",
        "description": "Return the html (dom) version of a string",
        "namespace": "sugar.js.html",
        "since": "1.0.0",
        "filename": "strToHtml.ts",
        "extension": "ts",
        "path": "src/js/html/strToHtml.ts",
        "directory": "src/js/html",
        "children": {},
        "relPath": "src/js/html/strToHtml.ts",
        "relDirectory": "src/js/html"
    },
    "sugar.js.html.toString": {
        "name": "toString",
        "type": "Function",
        "description": "Return the string version of a dom node or the dom node and his children",
        "namespace": "sugar.js.html",
        "since": "1.0.0",
        "filename": "toString.ts",
        "extension": "ts",
        "path": "src/node/html/toString.ts",
        "directory": "src/node/html",
        "children": {},
        "relPath": "src/node/html/toString.ts",
        "relDirectory": "src/node/html"
    },
    "sugar.js.http.request": {
        "name": "request",
        "type": "Function",
        "description": "Easily create and send an http request. This will return an instance of the SAjax class.",
        "namespace": "sugar.js.http",
        "status": "wip",
        "since": "2.0.0",
        "filename": "request.ts",
        "extension": "ts",
        "path": "src/node/http/request.ts",
        "directory": "src/node/http",
        "children": {},
        "relPath": "src/node/http/request.ts",
        "relDirectory": "src/node/http"
    },
    "sugar.js.http.SRequest": {
        "name": "SRequest",
        "type": "Class",
        "description": "Class that allows to simply handle ajax requests with ease.\nThis class give some useful features like :\n- Promise support\n- Recursive requests",
        "namespace": "sugar.js.http",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SRequest.ts",
        "extension": "ts",
        "path": "src/node/http/SRequest.ts",
        "directory": "src/node/http",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "retry": {
                "name": "retry",
                "type": "Function",
                "description": "Reset the request settings variables and relaunch the request"
            },
            "send": {
                "name": "send",
                "type": "Function",
                "description": "Send the request and return a promise that will be resolved once all the requests\nhave been made or rejected if one of the requests has returned an error..."
            }
        },
        "relPath": "src/node/http/SRequest.ts",
        "relDirectory": "src/node/http"
    },
    "sugar.js.http.SRequestConfig": {
        "name": "SRequestConfig",
        "type": "Class",
        "description": "Class that represent an ajax request that will be passed to an SRequest instance.\nAll the axios settings are supported by this class",
        "namespace": "sugar.js.http",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SRequestConfig.ts",
        "extension": "ts",
        "path": "src/node/http/SRequestConfig.ts",
        "directory": "src/node/http",
        "children": {
            "url": {
                "name": "url",
                "type": "String",
                "description": "The url to call"
            },
            "baseURL": {
                "name": "baseURL",
                "type": "String",
                "description": "Specify the base url to call like \"https://api.github.com/2.0\" for example.\nIf the \"url\" setting is absolute, this setting will don't have any impact on your request..."
            },
            "method": {
                "name": "method",
                "type": "String",
                "description": "The request method to use like GET, POST, DELETE or PUT"
            },
            "headers": {
                "name": "headers",
                "type": "Object",
                "description": "Specify some headers to add to the request"
            },
            "params": {
                "name": "params",
                "type": "Object",
                "description": "Specify some params to be sent through the URL.\nMust be a plain object or a URLSearchParams object"
            },
            "data": {
                "name": "data",
                "type": "String|Object|ArrayBuffer|ArrayBufferView|URLSearchParams|FormData|File|Blob|Stream|Buffer",
                "description": "Specify some data you want to send with the request.\nThis setting is available only for 'PUT', 'POST', and 'PATCH' requests..."
            },
            "timeout": {
                "name": "timeout",
                "type": "Number",
                "description": "Specify time to wait before aborting the actual request. If setted in number format, this will mean milliseconds.\nYou can also specify this settings using string format like so: '2s', '1h', '4m', etc..."
            },
            "sendInterval": {
                "name": "sendInterval",
                "type": "Number",
                "description": "Set the interval time between each requests if the sendCount setting is specified.\nIf setted in number format, this is taken as millisenconds. You can also set the interval\nin string format like '34s', '1h', '10ms', '2d', etc..."
            },
            "sendCount": {
                "name": "sendCount",
                "type": "Number",
                "description": "Set how many times the request has to be sent"
            },
            "everyResponse": {
                "name": "everyResponse",
                "type": "Function",
                "description": "Specify a function to call on every response. The parameters passed to the function are:\n- response {Object}: The actual request response\n- requestIdx {Number}: The request index"
            },
            "responseType": {
                "name": "responseType",
                "type": "String",
                "description": "Indicates the type of data that the server will respond with"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            }
        },
        "relPath": "src/node/http/SRequestConfig.ts",
        "relDirectory": "src/node/http"
    },
    "sugar.js.interface.getAvailableInterfaceTypes": {
        "name": "getAvailableInterfaceTypes",
        "type": "Function",
        "description": "This function simply return an object with all the promoted as types interfaces.",
        "namespace": "sugar.js.interface",
        "status": "beta",
        "since": "2.0.0",
        "filename": "getAvailableInterfaceTypes.ts",
        "extension": "ts",
        "path": "src/node/interface/getAvailableInterfaceTypes.ts",
        "directory": "src/node/interface",
        "children": {},
        "relPath": "src/node/interface/getAvailableInterfaceTypes.ts",
        "relDirectory": "src/node/interface"
    },
    "sugar.js.interface.SInterface": {
        "name": "SInterface",
        "type": "Class",
        "description": "This class allows you to define some rules that some object or instance\nhave to follow. You will be able to apply these rules and see what\ndoes not fit correctly.",
        "namespace": "sugar.js.interface",
        "since": "2.0.0",
        "filename": "SInterface.ts",
        "extension": "ts",
        "path": "src/node/interface/SInterface.ts",
        "directory": "src/node/interface",
        "children": {
            "definition": {
                "name": "definition",
                "type": "ISDescriptorRules",
                "description": "This property store all the SDescriptor rules that this interface\nimplements for each properties",
                "static": true,
                "since": "2.0.0"
            },
            "overrie": {
                "name": "overrie",
                "type": "Function",
                "description": "This static method is usefull to make a duplicate of the base interface with some updates\nin the definition object.",
                "static": true,
                "since": "2.0.0"
            },
            "getAvailableTypes": {
                "name": "getAvailableTypes",
                "type": "Function",
                "description": "This static method allows you to get the types that have been make widely available\nusing the ```makeAvailableAsType``` method.",
                "static": true,
                "since": "2.0.0"
            },
            "makeAvailableAsType": {
                "name": "makeAvailableAsType",
                "type": "Function",
                "description": "This static method allows you to promote your interface at the level where it can be\nused in the \"type\" interface definition property like so \"Object<MyCoolType>\"",
                "static": true,
                "since": "2.0.0"
            },
            "settings": {
                "name": "settings",
                "type": "ISDescriptorRules",
                "description": "This property store all the settings for your SInterface class. These settings\ncan be overrided at instance level",
                "static": true,
                "since": "2.0.0"
            },
            "defaults": {
                "name": "defaults",
                "type": "Function",
                "description": "This function simply returns you the default interface values in object format",
                "static": true,
                "since": "2.0.0"
            },
            "apply": {
                "name": "apply",
                "type": "Function",
                "description": "This method allows you to apply the interface on an object instance.\nBy default, if something is wrong in your class implementation, an error with the\ndescription of what's wrong will be thrown. You can change that behavior if you prefer having\ntrue returned when all is ok, or a string describing the current issue by specify the \"settings.throw\" property to false.",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/interface/SInterface.ts",
        "relDirectory": "src/node/interface"
    },
    "sugar.js.interface.SInterfaceResult": {
        "name": "SInterfaceResult",
        "type": "Class",
        "description": "This class represent what you will get back from the ```SInterface.apply``` method.\nYou will be able to generate some string terminal version of the return as well as some html\nversion if needed",
        "namespace": "sugar.js.interface",
        "since": "2.0.0",
        "filename": "SInterfaceResult.ts",
        "extension": "ts",
        "path": "src/node/interface/SInterfaceResult.ts",
        "directory": "src/node/interface",
        "children": {
            "value": {
                "name": "value",
                "type": "Object",
                "description": "Access to the resulting value",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "hasIssues": {
                "name": "hasIssues",
                "type": "Function",
                "description": "Return true if some issues have been detected, false if not",
                "since": "2.0.0"
            },
            "toString": {
                "name": "toString",
                "type": "Functio n",
                "description": "This method return a string terminal compatible or html of this result object",
                "since": "2.0.0"
            },
            "toConsole": {
                "name": "toConsole",
                "type": "Function",
                "description": "This method simply returns you a terminal compatible string\nof the interface checking result",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/interface/SInterfaceResult.ts",
        "relDirectory": "src/node/interface"
    },
    "sugar.js.is.isArray": {
        "name": "isArray",
        "type": "Function",
        "description": "Check if the passed value is a js Array",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "array.ts",
        "extension": "ts",
        "path": "src/node/is/array.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/array.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.isBase64": {
        "name": "isBase64",
        "type": "Function",
        "description": "Check if the passed value is a base 64 string",
        "namespace": "sugar.js.is",
        "since": "2.0.0",
        "filename": "base64.ts",
        "extension": "ts",
        "path": "src/node/is/base64.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/base64.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.isBoolean": {
        "name": "isBoolean",
        "type": "Function",
        "description": "Check if the passed value is a js Boolean",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "boolean.ts",
        "extension": "ts",
        "path": "src/node/is/boolean.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/boolean.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.isBrowser": {
        "name": "isBrowser",
        "type": "Function",
        "description": "Check if the script is running inside a browser or not",
        "namespace": "sugar.js.is",
        "since": "2.0.0",
        "filename": "browser.ts",
        "extension": "ts",
        "path": "src/node/is/browser.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/browser.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.childProcess": {
        "name": "childProcess",
        "type": "Function",
        "description": "Check if the current script is running as a child process or not by checking if the ```process.send``` exists, or is the environment variable ```IS_CHILD_PROCESS``` is true.",
        "namespace": "sugar.js.is",
        "since": "2.0.0",
        "filename": "childProcess.ts",
        "extension": "ts",
        "path": "src/js/is/childProcess.ts",
        "directory": "src/js/is",
        "children": {},
        "relPath": "src/js/is/childProcess.ts",
        "relDirectory": "src/js/is"
    },
    "sugar.js.is.isChrome": {
        "name": "isChrome",
        "type": "Function",
        "description": "Detect if is chrome",
        "namespace": "sugar.js.is",
        "since": "2.0.0",
        "filename": "chrome.ts",
        "extension": "ts",
        "path": "src/node/is/chrome.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/chrome.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.class": {
        "name": "class",
        "type": "Function",
        "description": "Check if the passed variable (or array of variables) is/are plain variable(s)",
        "namespace": "sugar.js.is",
        "since": "2.0.0",
        "filename": "class.ts",
        "extension": "ts",
        "path": "src/node/is/class.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/class.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.isColor": {
        "name": "isColor",
        "type": "Function",
        "description": "Check if the passed value is a color",
        "namespace": "sugar.js.is",
        "since": "2.0.0",
        "filename": "color.ts",
        "extension": "ts",
        "path": "src/node/is/color.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/color.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.isDdmmyyyyDate": {
        "name": "isDdmmyyyyDate",
        "type": "Function",
        "description": "Check if is a valid dd.mm.yyyy date\nThis will match : dd.mm.yyyy | dd/mm/yyyy | dd-mm-yyyy | dd mm yyyy",
        "namespace": "sugar.js.is",
        "since": "2.0.0",
        "filename": "ddmmyyyyDate.ts",
        "extension": "ts",
        "path": "src/node/is/ddmmyyyyDate.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/ddmmyyyyDate.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.isEdge": {
        "name": "isEdge",
        "type": "Function",
        "description": "Detect if is edge",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "edge.ts",
        "extension": "ts",
        "path": "src/node/is/edge.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/edge.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.isEmail": {
        "name": "isEmail",
        "type": "Function",
        "description": "Check if the passed value is a valid email address",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "email.ts",
        "extension": "ts",
        "path": "src/node/is/email.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/email.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.isEven": {
        "name": "isEven",
        "type": "Function",
        "description": "Check if a number is even or not",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "even.ts",
        "extension": "ts",
        "path": "src/node/is/even.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/even.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.isFirefox": {
        "name": "isFirefox",
        "type": "Function",
        "description": "Detect if is firefox",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "firefox.ts",
        "extension": "ts",
        "path": "src/node/is/firefox.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/firefox.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.isFunction": {
        "name": "isFunction",
        "type": "Function",
        "description": "Check if the passed value is a js function",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "function.ts",
        "extension": "ts",
        "path": "src/node/is/function.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/function.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.isGlob": {
        "name": "isGlob",
        "type": "Function",
        "description": "Check if the passed string is a valid glob pattern or not",
        "namespace": "sugar.js.is",
        "since": "2.0.0",
        "filename": "glob.ts",
        "extension": "ts",
        "path": "src/node/is/glob.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/glob.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.isIe": {
        "name": "isIe",
        "type": "Function",
        "description": "Detect if is ie (internet explorer)",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "ie.ts",
        "extension": "ts",
        "path": "src/node/is/ie.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/ie.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.isInteger": {
        "name": "isInteger",
        "type": "Function",
        "description": "Check if the passed value is an integer",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "integer.ts",
        "extension": "ts",
        "path": "src/node/is/integer.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/integer.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.isJs": {
        "name": "isJs",
        "type": "Function",
        "description": "Check if the current script is running under javascript runtime or not...",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "js.ts",
        "extension": "ts",
        "path": "src/node/is/js.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/js.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.isJson": {
        "name": "isJson",
        "type": "Function",
        "description": "Check if the passed value is a valid json",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "json.ts",
        "extension": "ts",
        "path": "src/node/is/json.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/json.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.linux": {
        "name": "linux",
        "type": "Function",
        "description": "Check if the app run on linux",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "linux.ts",
        "extension": "ts",
        "path": "src/node/is/linux.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/linux.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.isMap": {
        "name": "isMap",
        "type": "Function",
        "description": "Check if the passed value is a js Map",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "map.ts",
        "extension": "ts",
        "path": "src/node/is/map.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/map.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.isMmddyyyyDate": {
        "name": "isMmddyyyyDate",
        "type": "Function",
        "description": "Check if is a valid mm.dd.yyyy date\nThis will match : mm.dd.yyyy | mm/dd/yyyy | mm-dd-yyyy | mm dd yyyy",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "mmddyyyyDate.ts",
        "extension": "ts",
        "path": "src/node/is/mmddyyyyDate.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/mmddyyyyDate.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.isMobile": {
        "name": "isMobile",
        "type": "Function",
        "description": "Detect if is a mobile device (phone or tablet)",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "mobile.ts",
        "extension": "ts",
        "path": "src/node/is/mobile.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/mobile.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.isNode": {
        "name": "isNode",
        "type": "Function",
        "description": "Check if the current script is running under node runtime or not...",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "node.ts",
        "extension": "ts",
        "path": "src/node/is/node.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/node.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.isNumber": {
        "name": "isNumber",
        "type": "Function",
        "description": "Check if the passed value is a number",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "number.ts",
        "extension": "ts",
        "path": "src/node/is/number.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/number.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.isObject": {
        "name": "isObject",
        "type": "Function",
        "description": "Check if the passed value is a js object",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "object.ts",
        "extension": "ts",
        "path": "src/node/is/object.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/object.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.isOdd": {
        "name": "isOdd",
        "type": "Function",
        "description": "Check if a number is odd or not",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "odd.ts",
        "extension": "ts",
        "path": "src/node/is/odd.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/odd.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.ofType": {
        "name": "ofType",
        "type": "Function",
        "description": "This function take the value to check and an argument type definition string like \"String\", \"Array<String>\", etc... and return true or false depending\nif the value pass the test or not...",
        "namespace": "sugar.js.is",
        "status": "beta",
        "since": "2.0.0",
        "filename": "ofType.ts",
        "extension": "ts",
        "path": "src/node/is/ofType.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/ofType.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.isOpera": {
        "name": "isOpera",
        "type": "Function",
        "description": "Detect if is opera",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "opera.ts",
        "extension": "ts",
        "path": "src/node/is/opera.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/opera.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.osx": {
        "name": "osx",
        "type": "Function",
        "description": "Check if the app run on mac OS X or not",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "osx.ts",
        "extension": "ts",
        "path": "src/node/is/osx.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/osx.ts",
        "relDirectory": "src/node/is"
    },
    "node.is.path": {
        "name": "path",
        "type": "Function",
        "description": "Check if the passed string is a valid path or not",
        "namespace": "node.is",
        "since": "1.0.0",
        "filename": "path.ts",
        "extension": "ts",
        "path": "src/js/is/path.ts",
        "directory": "src/js/is",
        "children": {},
        "relPath": "src/js/is/path.ts",
        "relDirectory": "src/js/is"
    },
    "sugar.js.is.isPhone": {
        "name": "isPhone",
        "type": "Function",
        "description": "Detect if is a phone device",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "phone.ts",
        "extension": "ts",
        "path": "src/node/is/phone.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/phone.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.plainObject": {
        "name": "plainObject",
        "type": "Function",
        "description": "Check if the passed object (or array of objects) is/are plain object(s)",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "plainObject.ts",
        "extension": "ts",
        "path": "src/node/is/plainObject.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/plainObject.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.isRegexp": {
        "name": "isRegexp",
        "type": "Function",
        "description": "Check if the passed value is a js Regexp",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "regexp.ts",
        "extension": "ts",
        "path": "src/node/is/regexp.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/regexp.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.isSafari": {
        "name": "isSafari",
        "type": "Function",
        "description": "Detect if is safari",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "safari.ts",
        "extension": "ts",
        "path": "src/node/is/safari.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/safari.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.isSamsumgBrowser": {
        "name": "isSamsumgBrowser",
        "type": "Function",
        "description": "Detect if is the samsung stock browser that is running the page",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "samsungBrowser.ts",
        "extension": "ts",
        "path": "src/node/is/samsungBrowser.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/samsungBrowser.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.isString": {
        "name": "isString",
        "type": "Function",
        "description": "Check if the passed value is a js String",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "string.ts",
        "extension": "ts",
        "path": "src/node/is/string.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/string.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.isTablet": {
        "name": "isTablet",
        "type": "Function",
        "description": "Detect if is a tablet device",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "tablet.ts",
        "extension": "ts",
        "path": "src/node/is/tablet.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/tablet.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.isTerminal": {
        "name": "isTerminal",
        "type": "Function",
        "description": "This function simply returns if the process runs inside a terminal or not",
        "namespace": "sugar.js.is",
        "since": "2.0.0",
        "filename": "terminal.ts",
        "extension": "ts",
        "path": "src/node/is/terminal.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/terminal.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.testEnv": {
        "name": "testEnv",
        "type": "Function",
        "description": "Check if the current environment is in a test process or not",
        "namespace": "sugar.js.is",
        "since": "2.0.0",
        "filename": "testEnv.ts",
        "extension": "ts",
        "path": "src/node/is/testEnv.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/testEnv.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.isUcBrowser": {
        "name": "isUcBrowser",
        "type": "Function",
        "description": "Detect if is the UC stock browser that is running the page",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "ucBrowser.ts",
        "extension": "ts",
        "path": "src/node/is/ucBrowser.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/ucBrowser.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.isUrl": {
        "name": "isUrl",
        "type": "Function",
        "description": "Check if the passed value is a valid url",
        "namespace": "sugar.js.is",
        "status": "beta",
        "since": "2.0.0",
        "filename": "url.ts",
        "extension": "ts",
        "path": "src/node/is/url.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/url.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.windows": {
        "name": "windows",
        "type": "Function",
        "description": "Check if the app run on mac OS X or not",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "windows.ts",
        "extension": "ts",
        "path": "src/node/is/windows.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/windows.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.is.isYyyymmddDate": {
        "name": "isYyyymmddDate",
        "type": "Function",
        "description": "Check if is a valid yyyy.mm.dd date\nThis will match : yyyy.mm.dd | yyyy/mm/dd | yyyy-mm-dd | yyyy mm dd",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "yyyymmddDate.ts",
        "extension": "ts",
        "path": "src/node/is/yyyymmddDate.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/yyyymmddDate.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.js.iterable.map": {
        "name": "map",
        "type": "Function",
        "description": "This function take an iterable value like an Array, an Object, a Map, a String, an Integer, a Set, etc... and\nsimply iterate over like a forEach.",
        "namespace": "sugar.js.iterable",
        "since": "2.0.0",
        "filename": "map.ts",
        "extension": "ts",
        "path": "src/node/iterable/map.ts",
        "directory": "src/node/iterable",
        "children": {},
        "relPath": "src/node/iterable/map.ts",
        "relDirectory": "src/node/iterable"
    },
    "sugar.js.json.stringify": {
        "name": "stringify",
        "type": "Function",
        "description": "This function do the same as the ```JSON.stringify``` one but add some features.",
        "namespace": "sugar.js.json",
        "status": "beta",
        "since": "2.0.0",
        "filename": "stringify.ts",
        "extension": "ts",
        "path": "src/node/json/stringify.ts",
        "directory": "src/node/json",
        "children": {},
        "relPath": "src/node/json/stringify.ts",
        "relDirectory": "src/node/json"
    },
    "sugar.js.keyboard.hotkey": {
        "name": "hotkey",
        "type": "Function",
        "description": "Simple function to add a hotkey like \"ctrl+a\" and an handler function that will be called when the hotkey has been pressed\nThe following keys are supported:\n- shift, option, alt, ctrl, control, command\n- backspace, tab, clear, enter, return, esc, escape, space, up, down, left, right, home, end, pageup, pagedown, del, delete\n- from f1 to f19\n- all the letters keys\n\nYou can pass an option object to your hotkey function call.",
        "namespace": "sugar.js.keyboard",
        "status": "beta",
        "since": "2.0.0",
        "filename": "hotkey.ts",
        "extension": "ts",
        "path": "src/js/keyboard/hotkey.ts",
        "directory": "src/js/keyboard",
        "children": {},
        "relPath": "src/js/keyboard/hotkey.ts",
        "relDirectory": "src/js/keyboard"
    },
    "sugar.node.parseAndFormatLog": {
        "name": "parseAndFormatLog",
        "type": "Function",
        "description": "This function take as input either a string with some arguments like \"--type group --title 'hello world'\", etc... or directly an object\nwith arguments as properties and format that into a valid ILog formated object",
        "namespace": "sugar.node",
        "since": "2.0.0",
        "filename": "parseAndFormatLog.ts",
        "extension": "ts",
        "path": "src/node/log/parseAndFormatLog.ts",
        "directory": "src/node/log",
        "children": {},
        "relPath": "src/node/log/parseAndFormatLog.ts",
        "relDirectory": "src/node/log"
    },
    "sugar.js.log.SLog": {
        "name": "SLog",
        "type": "Class",
        "description": "This class allows you to log your messages, errors, etc... easily through some adapters that cover some targets like \"console\" of course,\n\"mail\", \"slack\", etc...",
        "namespace": "sugar.js.log",
        "status": "beta",
        "since": "2.0.0",
        "filename": "SLog.ts",
        "extension": "ts",
        "path": "src/node/log/SLog.ts",
        "directory": "src/node/log",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "log": {
                "name": "log",
                "type": "Function",
                "description": "The main log method that log a normal message"
            },
            "info": {
                "name": "info",
                "type": "Function",
                "description": "The info method that log a message with the \"info\" level"
            },
            "warn": {
                "name": "warn",
                "type": "Function",
                "description": "The warn method that log a message with the \"warn\" level"
            },
            "debug": {
                "name": "debug",
                "type": "Function",
                "description": "The debug method that log a message with the \"debug\" level"
            },
            "error": {
                "name": "error",
                "type": "Function",
                "description": "The error method that log a message with the \"error\" level"
            },
            "trace": {
                "name": "trace",
                "type": "Function",
                "description": "The trace method that log a message with the \"trace\" level"
            }
        },
        "relPath": "src/node/log/SLog.ts",
        "relDirectory": "src/node/log"
    },
    "sugar.js.map.mapToObject": {
        "name": "mapToObject",
        "type": "Function",
        "description": "This function simply take a Map object and convert it to a plain object",
        "namespace": "sugar.js.map",
        "since": "2.0.0",
        "filename": "mapToObject.ts",
        "extension": "ts",
        "path": "src/node/map/mapToObject.ts",
        "directory": "src/node/map",
        "children": {},
        "relPath": "src/node/map/mapToObject.ts",
        "relDirectory": "src/node/map"
    },
    "sugar.js.npm.parseAuthorString": {
        "name": "parseAuthorString",
        "type": "Function",
        "description": "This function simply take an author string like \"Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\" and\ntransform it into a plain object with these properties: name, email and url",
        "namespace": "sugar.js.npm",
        "since": "2.0.0",
        "filename": "parseAuthorString.ts",
        "extension": "ts",
        "path": "src/node/npm/parseAuthorString.ts",
        "directory": "src/node/npm",
        "children": {},
        "relPath": "src/node/npm/parseAuthorString.ts",
        "relDirectory": "src/node/npm"
    },
    "sugar.js.npm.standardizeJson": {
        "name": "standardizeJson",
        "type": "Function",
        "description": "This function simply take a package.json JSON formatted object and standardize\nsome fields like the \"author\" one to be sure it is an object at the end,\nthe \"contributors\" array the same way as the \"author\" one, etc... Here's the list\nof processed actions:\n1. Transform the string version of the \"author\" field into an object with the properties \"name\", \"email\" and \"url\"\n2. Transform the string version of the \"contributors\" field into an object with the properties \"name\", \"email\" and \"url\"",
        "namespace": "sugar.js.npm",
        "status": "beta",
        "since": "2.0.0",
        "filename": "standardizeJson.ts",
        "extension": "ts",
        "path": "src/node/npm/standardizeJson.ts",
        "directory": "src/node/npm",
        "children": {},
        "relPath": "src/node/npm/standardizeJson.ts",
        "relDirectory": "src/node/npm"
    },
    "sugar.js.number.constrain": {
        "name": "constrain",
        "type": "Function",
        "description": "Constrain a value between a min and a max value",
        "namespace": "sugar.js.number",
        "since": "1.0.0",
        "filename": "constrain.ts",
        "extension": "ts",
        "path": "src/node/number/constrain.ts",
        "directory": "src/node/number",
        "children": {},
        "relPath": "src/node/number/constrain.ts",
        "relDirectory": "src/node/number"
    },
    "sugar.js.number.pad": {
        "name": "pad",
        "type": "Function",
        "description": "Pad a number n of x 0 or another passed character",
        "namespace": "sugar.js.number",
        "since": "1.0.0",
        "filename": "pad.ts",
        "extension": "ts",
        "path": "src/node/number/pad.ts",
        "directory": "src/node/number",
        "children": {},
        "relPath": "src/node/number/pad.ts",
        "relDirectory": "src/node/number"
    },
    "sugar.js.object.clone": {
        "name": "clone",
        "type": "Function",
        "description": "This function allows you to clone an object either at 1 level, or deeply.",
        "namespace": "sugar.js.object",
        "since": "1.0.0",
        "filename": "clone.ts",
        "extension": "ts",
        "path": "src/node/object/clone.ts",
        "directory": "src/node/object",
        "children": {},
        "relPath": "src/node/object/clone.ts",
        "relDirectory": "src/node/object"
    },
    "sugar.js.object.constructorName": {
        "name": "constructorName",
        "type": "Function",
        "description": "Return the constructor name of the passed object",
        "namespace": "sugar.js.object",
        "since": "1.0.0",
        "filename": "constructorName.ts",
        "extension": "ts",
        "path": "src/node/object/constructorName.ts",
        "directory": "src/node/object",
        "children": {},
        "relPath": "src/node/object/constructorName.ts",
        "relDirectory": "src/node/object"
    },
    "sugar.js.object.decycle": {
        "name": "decycle",
        "type": "Function",
        "description": "This method simply remove the circular references in the passed object",
        "namespace": "sugar.js.object",
        "since": "2.0.0",
        "filename": "decycle.ts",
        "extension": "ts",
        "path": "src/node/object/decycle.ts",
        "directory": "src/node/object",
        "children": {},
        "relPath": "src/node/object/decycle.ts",
        "relDirectory": "src/node/object"
    },
    "sugar.js.object.deepAssign": {
        "name": "deepAssign",
        "type": "Function",
        "description": "This function take as first parameter the object you want to assign others to,\nthen others objects you want to assign to the first.\nThe difference with the ```deepMerge``` function is that this one keep the first\npassed object as reference and update it directly. The ```deepMerge``` one create a new\nobject with the merging result",
        "namespace": "sugar.js.object",
        "since": "2.0.0",
        "filename": "deepAssign.ts",
        "extension": "ts",
        "path": "src/node/object/deepAssign.ts",
        "directory": "src/node/object",
        "children": {},
        "relPath": "src/node/object/deepAssign.ts",
        "relDirectory": "src/node/object"
    },
    "sugar.js.object.deepize": {
        "name": "deepize",
        "type": "Function",
        "description": "This function simply take an object like this one:\n{\n'something.cool': 'hello'\n}\nand convert it to something like this:\n{\nsomething: {\ncool: 'hello'\n}\n}",
        "namespace": "sugar.js.object",
        "since": "2.0.0",
        "filename": "deepize.ts",
        "extension": "ts",
        "path": "src/node/object/deepize.ts",
        "directory": "src/node/object",
        "children": {},
        "relPath": "src/node/object/deepize.ts",
        "relDirectory": "src/node/object"
    },
    "sugar.js.object.deepMap": {
        "name": "deepMap",
        "type": "Function",
        "description": "This function is the same as the \"map\" one. The only difference is that this one goes deep into the object",
        "namespace": "sugar.js.object",
        "since": "2.0.0",
        "filename": "deepMap.ts",
        "extension": "ts",
        "path": "src/node/object/deepMap.ts",
        "directory": "src/node/object",
        "children": {},
        "relPath": "src/node/object/deepMap.ts",
        "relDirectory": "src/node/object"
    },
    "sugar.js.object.deepMerge": {
        "name": "deepMerge",
        "type": "Function",
        "description": "Deep merge one object with another and return the merged object result. This merging implementation support:\n- Merging object with getters/setters\n- n numbers of objects as arguments",
        "namespace": "sugar.js.object",
        "since": "2.0.0",
        "filename": "deepMerge.ts",
        "extension": "ts",
        "path": "src/node/object/deepMerge.ts",
        "directory": "src/node/object",
        "children": {},
        "relPath": "src/node/object/deepMerge.ts",
        "relDirectory": "src/node/object"
    },
    "sugar.js.object.deepProxy": {
        "name": "deepProxy",
        "type": "Function",
        "description": "This function allows you to add Proxy to an object in deep fashion.\nNormally the Proxy process only the level on which it has been added. Here we add Proxy to all the\nobject levels and to new properties as well.\n\nOn the returned proxied object, you will have access to the ```revoke``` method that you can call to revoke the proxy applied.\nThis method will return you a shallow version of the proxied object that you can use as you want",
        "namespace": "sugar.js.object",
        "status": "wip",
        "since": "2.0.0",
        "filename": "deepProxy.ts",
        "extension": "ts",
        "path": "src/node/object/deepProxy.ts",
        "directory": "src/node/object",
        "children": {},
        "relPath": "src/node/object/deepProxy.ts",
        "relDirectory": "src/node/object"
    },
    "sugar.js.object.delete": {
        "name": "delete",
        "type": "Function",
        "description": "Delete an object property using a dotPath like \"something.else\"",
        "namespace": "sugar.js.object",
        "since": "2.0.0",
        "filename": "delete.ts",
        "extension": "ts",
        "path": "src/node/object/delete.ts",
        "directory": "src/node/object",
        "children": {},
        "relPath": "src/node/object/delete.ts",
        "relDirectory": "src/node/object"
    },
    "sugar.js.object.diff": {
        "name": "diff",
        "type": "Function",
        "description": "This function take two objects and return an object that contains only what has been changed between the two.\nThis function is a simple wrapper around the nice object-diff package from Thomas Jensen that you can find here: https://www.npmjs.com/package/object-diff",
        "namespace": "sugar.js.object",
        "status": "beta",
        "since": "2.0.0",
        "filename": "diff.ts",
        "extension": "ts",
        "path": "src/node/object/diff.ts",
        "directory": "src/node/object",
        "children": {},
        "relPath": "src/node/object/diff.ts",
        "relDirectory": "src/node/object"
    },
    "sugar.js.object.ensureExists": {
        "name": "ensureExists",
        "type": "Function",
        "description": "Pass a string like \"my.cool.object\" and the value it has to be and this function will ensure that this deep object exist",
        "namespace": "sugar.js.object",
        "since": "2.0.0",
        "filename": "ensureExists.ts",
        "extension": "ts",
        "path": "src/node/object/ensureExists.ts",
        "directory": "src/node/object",
        "children": {},
        "relPath": "src/node/object/ensureExists.ts",
        "relDirectory": "src/node/object"
    },
    "sugar.js.object.extractValues": {
        "name": "extractValues",
        "type": "Function",
        "description": "This function take an array of objects and a key name as parameters and return an array containing\nonly the specified object key value.",
        "namespace": "sugar.js.object",
        "since": "2.0.0",
        "filename": "extractValues.ts",
        "extension": "ts",
        "path": "src/node/object/extractValues.ts",
        "directory": "src/node/object",
        "children": {},
        "relPath": "src/node/object/extractValues.ts",
        "relDirectory": "src/node/object"
    },
    "sugar.js.object.filter": {
        "name": "filter",
        "type": "Function",
        "description": "Allow to filter an object using a function. It works the same as the filter method on the Array object type.\nThe passed filter function will have as parameter each object properties and must return true or false depending if you want the\npassed property in the filtered object",
        "namespace": "sugar.js.object",
        "since": "2.0.0",
        "filename": "filter.ts",
        "extension": "ts",
        "path": "src/node/object/filter.ts",
        "directory": "src/node/object",
        "children": {},
        "relPath": "src/node/object/filter.ts",
        "relDirectory": "src/node/object"
    },
    "sugar.js.object.flatten": {
        "name": "flatten",
        "type": "Function",
        "description": "Transform the passed multiple level object into a single level one",
        "namespace": "sugar.js.object",
        "since": "2.0.0",
        "filename": "flatten.ts",
        "extension": "ts",
        "path": "src/node/object/flatten.ts",
        "directory": "src/node/object",
        "children": {},
        "relPath": "src/node/object/flatten.ts",
        "relDirectory": "src/node/object"
    },
    "sugar.js.object.get": {
        "name": "get",
        "type": "Function",
        "description": "Retreive an object value using a dotted path like \"myObject.myProperty.myValue\"",
        "namespace": "sugar.js.object",
        "since": "2.0.0",
        "filename": "get.ts",
        "extension": "ts",
        "path": "src/node/object/get.ts",
        "directory": "src/node/object",
        "children": {},
        "relPath": "src/node/object/get.ts",
        "relDirectory": "src/node/object"
    },
    "sugar.js.object.getGlob": {
        "name": "getGlob",
        "type": "Function",
        "description": "Retreive an object value using a dotted path like \"myObject.myProperty.myValue\".\nIt support glob patterns like \"something..id\" and returns you a new object containing\nall values with the path that matches the passed glob pattern.",
        "namespace": "sugar.js.object",
        "since": "2.0.0",
        "filename": "getGlob.ts",
        "extension": "ts",
        "path": "src/node/object/getGlob.ts",
        "directory": "src/node/object",
        "children": {},
        "relPath": "src/node/object/getGlob.ts",
        "relDirectory": "src/node/object"
    },
    "sugar.js.object.getKeyByValue": {
        "name": "getKeyByValue",
        "type": "Function",
        "description": "Return the key that correspond to the passed value in the passed object",
        "namespace": "sugar.js.object",
        "since": "2.0.0",
        "filename": "getKeyByValue.ts",
        "extension": "ts",
        "path": "src/node/object/getKeyByValue.ts",
        "directory": "src/node/object",
        "children": {},
        "relPath": "src/node/object/getKeyByValue.ts",
        "relDirectory": "src/node/object"
    },
    "sugar.js.object.map": {
        "name": "map",
        "type": "Function",
        "description": "This is the same function as the \"Array.map\" but for objects. It will iterate over all the properties\nof the passed object and pass the value to your process function. It will then save the property\nwith your processed value",
        "namespace": "sugar.js.object",
        "since": "2.0.0",
        "filename": "map.ts",
        "extension": "ts",
        "path": "src/node/object/map.ts",
        "directory": "src/node/object",
        "children": {},
        "relPath": "src/node/object/map.ts",
        "relDirectory": "src/node/object"
    },
    "sugar.js.object.propertyProxy": {
        "name": "propertyProxy",
        "type": "Function",
        "description": "Create a proxy for and object property.\nThis gives you the possibility to process the data of the property\nwhen it is getted or setted.",
        "namespace": "sugar.js.object",
        "status": "beta",
        "since": "2.0.0",
        "filename": "propertyProxy.ts",
        "extension": "ts",
        "path": "src/node/object/propertyProxy.ts",
        "directory": "src/node/object",
        "children": {},
        "relPath": "src/node/object/propertyProxy.ts",
        "relDirectory": "src/node/object"
    },
    "sugar.js.object.resolveTokens": {
        "name": "resolveTokens",
        "type": "Function",
        "description": "This function take an object and propare it to accept tokens like:\n- '{this.something.else}'\n- etc...",
        "namespace": "sugar.js.object",
        "status": "wip",
        "since": "2.0.0",
        "filename": "resolveTokens.ts",
        "extension": "ts",
        "path": "src/node/object/resolveTokens.ts",
        "directory": "src/node/object",
        "children": {},
        "relPath": "src/node/object/resolveTokens.ts",
        "relDirectory": "src/node/object"
    },
    "sugar.js.object.set": {
        "name": "set",
        "type": "Function",
        "description": "Set an object value using a dotted object path like \"myObject.myProperty.myValue\" to set his position",
        "namespace": "sugar.js.object",
        "since": "2.0.0",
        "filename": "set.ts",
        "extension": "ts",
        "path": "src/node/object/set.ts",
        "directory": "src/node/object",
        "children": {},
        "relPath": "src/node/object/set.ts",
        "relDirectory": "src/node/object"
    },
    "sugar.js.object.sort": {
        "name": "sort",
        "type": "Function",
        "description": "Sort an object properties the same way as the Array.sort do it",
        "namespace": "sugar.js.object",
        "since": "2.0.0",
        "filename": "sort.ts",
        "extension": "ts",
        "path": "src/node/object/sort.ts",
        "directory": "src/node/object",
        "children": {},
        "relPath": "src/node/object/sort.ts",
        "relDirectory": "src/node/object"
    },
    "sugar.js.object.SWatch": {
        "name": "SWatch",
        "type": "Class",
        "description": "This class allows you to easily monitor some object properties and get the new and old value of it",
        "namespace": "sugar.js.object",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SWatch.ts",
        "extension": "ts",
        "path": "src/node/object/SWatch.ts",
        "directory": "src/node/object",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            }
        },
        "relPath": "src/node/object/SWatch.ts",
        "relDirectory": "src/node/object"
    },
    "sugar.js.object.toQueryString": {
        "name": "toQueryString",
        "type": "Function",
        "description": "Transform an object (key => pairs) to a query string like \"?var1=value1&var2\"",
        "namespace": "sugar.js.object",
        "since": "2.0.0",
        "filename": "toQueryString.ts",
        "extension": "ts",
        "path": "src/node/object/toQueryString.ts",
        "directory": "src/node/object",
        "children": {},
        "relPath": "src/node/object/toQueryString.ts",
        "relDirectory": "src/node/object"
    },
    "node.object.uid": {
        "name": "uid",
        "type": "Function",
        "description": "This function allows you to generate a uniqid based on the objects you pass as parameters.\nThe uid is hashed into a SHA256 32bits string but you can specify it using the \"format\" parameter described above",
        "namespace": "node.object",
        "since": "2.0.0",
        "filename": "uid.ts",
        "extension": "ts",
        "path": "src/node/object/uid.ts",
        "directory": "src/node/object",
        "children": {},
        "relPath": "src/node/object/uid.ts",
        "relDirectory": "src/node/object"
    },
    "sugar.js.object.watch": {
        "name": "watch",
        "type": "Function",
        "description": "This method is a simple wrapper around the SWatch class that allows you to watch some action on object and arrays",
        "namespace": "sugar.js.object",
        "status": "wip",
        "since": "2.0.0",
        "filename": "watch.ts",
        "extension": "ts",
        "path": "src/node/object/watch.ts",
        "directory": "src/node/object",
        "children": {},
        "relPath": "src/node/object/watch.ts",
        "relDirectory": "src/node/object"
    },
    "sugar.js.path.packageRoot": {
        "name": "packageRoot",
        "type": "Function",
        "description": "This function return the path where stands the package in the filesystem.\n!!! This function works only in development mode cause it will be dangerous to\nexpose this kind on information on a website...\nIf the environment is not the good one, this function will simply return an empty string",
        "namespace": "sugar.js.path",
        "status": "beta",
        "since": "2.0.0",
        "filename": "packageRoot.ts",
        "extension": "ts",
        "path": "src/js/path/packageRoot.ts",
        "directory": "src/js/path",
        "children": {},
        "relPath": "src/js/path/packageRoot.ts",
        "relDirectory": "src/js/path"
    },
    "sugar.js.promise.SPromise": {
        "name": "SPromise",
        "type": "Class",
        "description": "This class works the same as the default Promise one. The difference is that you have more control on this one like\nthe possibility to resolve it multiple times. Here's a list of the \"differences\" and the \"features\" that this class provide:",
        "namespace": "sugar.js.promise",
        "status": "beta",
        "since": "2.0.0",
        "filename": "SPromise.ts",
        "extension": "ts",
        "path": "src/node/promise/SPromise.ts",
        "directory": "src/node/promise",
        "children": {
            "treatAsValue": {
                "name": "treatAsValue",
                "type": "Function",
                "description": "This method wrap the promise into a revocable proxy to allow\npassing this Promise to methods like ```then```, etc... and make\nthis promise treated as a value and not as a chained promise.\nOnce you have done with this behavior, you just have to call\nthe ```restorePromiseBehavior``` on the returned proxy and\nthe default promise behavior will be restored",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "promiseState": {
                "name": "promiseState",
                "type": "String",
                "description": "Access the promise state. Can be one of these:\n- pending: When the promise is waiting for resolution or rejection\n- resolved: When the promise has been resolved\n- rejected: When the promise has been rejected\n- canceled: When the promise has been canceled\n- destroyed: When the promise has been destroyed"
            },
            "is": {
                "name": "is",
                "type": "Function",
                "description": "Check is the promise is on one of the passed status"
            },
            "isPending": {
                "name": "isPending",
                "type": "Function",
                "description": "Return back true or false depending on the promise status"
            },
            "isResolved": {
                "name": "isResolved",
                "type": "Function",
                "description": "Return back true or false depending on the promise status"
            },
            "isRejected": {
                "name": "isRejected",
                "type": "Function",
                "description": "Return back true or false depending on the promise status"
            },
            "isCanceled": {
                "name": "isCanceled",
                "type": "Function",
                "description": "Return back true or false depending on the promise status"
            },
            "isDestroyed": {
                "name": "isDestroyed",
                "type": "Function",
                "description": "Return back true or false depending on the promise status"
            },
            "resolve": {
                "name": "resolve",
                "type": "Function",
                "description": "This is the \"resolve\" method exposed on the promise itself for convinience"
            },
            "reject": {
                "name": "reject",
                "type": "Function",
                "description": "This is the \"reject\" method exposed on the promise itself for convinience"
            },
            "cancel": {
                "name": "cancel",
                "type": "Function",
                "description": "This is the \"cancel\" method exposed on the promise itself for convinience"
            },
            "catch": {
                "name": "catch",
                "type": "Function",
                "description": "This method allows the SPromise user to register a function that will be called every time the \"reject\" one is called in the executor\nThe context of the callback will be the SPromise instance itself so you can call all the methods available like \"resolve\", \"catch\", etc using\nthe \"this.resolve('something')\" statusment. In an arrow function like \"(value) => { ... }\", the \"this\" keyword will be bound to the current context where you define\nyour function. You can access to the SPromise instance through the last parameter like so \"(value, sPromiseInstance) => { ... }\"."
            },
            "finally": {
                "name": "finally",
                "type": "Function",
                "description": "This method allows the SPromise user to register a function that will be called every time the \"reject\" one is called in the executor\nThe context of the callback will be the SPromise instance itself so you can call all the methods available like \"resolve\", \"catch\", etc using\nthe \"this.resolve('something')\" statusment. In an arrow function like \"(value) => { ... }\", the \"this\" keyword will be bound to the current context where you define\nyour function. You can access to the SPromise instance through the last parameter like so \"(value, sPromiseInstance) => { ... }\"."
            },
            "resolved": {
                "name": "resolved",
                "type": "Function",
                "description": "This method allows the SPromise user to register a function that will be called every time the \"reject\" one is called in the executor\nThe context of the callback will be the SPromise instance itself so you can call all the methods available like \"resolve\", \"catch\", etc using\nthe \"this.resolve('something')\" statusment. In an arrow function like \"(value) => { ... }\", the \"this\" keyword will be bound to the current context where you define\nyour function. You can access to the SPromise instance through the last parameter like so \"(value, sPromiseInstance) => { ... }\"."
            },
            "rejected": {
                "name": "rejected",
                "type": "Function",
                "description": "This method allows the SPromise user to register a function that will be called every time the \"reject\" one is called in the executor\nThe context of the callback will be the SPromise instance itself so you can call all the methods available like \"resolve\", \"catch\", etc using\nthe \"this.resolve('something')\" statusment. In an arrow function like \"(value) => { ... }\", the \"this\" keyword will be bound to the current context where you define\nyour function. You can access to the SPromise instance through the last parameter like so \"(value, sPromiseInstance) => { ... }\"."
            },
            "canceled": {
                "name": "canceled",
                "type": "Function",
                "description": "This method allows the SPromise user to register a function that will be called once when the \"revoke\" function has been called\nThe context of the callback will be the SPromise instance itself so you can call all the methods available like \"resolve\", \"catch\", etc using\nthe \"this.resolve('something')\" statusment. In an arrow function like \"(value) => { ... }\", the \"this\" keyword will be bound to the current context where you define\nyour function. You can access to the SPromise instance through the last parameter like so \"(value, sPromiseInstance) => { ... }\"."
            }
        },
        "relPath": "src/node/promise/SPromise.ts",
        "relDirectory": "src/node/promise"
    },
    "sugar.js.promise.treatAsValue": {
        "name": "treatAsValue",
        "type": "Function",
        "description": "This function allows you to wrap a promise in a ```resolve``` call to prevent\nthis promise to be treated as a \"chaining\" promise but to be treated as\nnormal value passed in the resolve call.",
        "namespace": "sugar.js.promise",
        "status": "beta",
        "since": "2.0.0",
        "filename": "treatAsValue.ts",
        "extension": "ts",
        "path": "src/node/promise/treatAsValue.ts",
        "directory": "src/node/promise",
        "children": {},
        "relPath": "src/node/promise/treatAsValue.ts",
        "relDirectory": "src/node/promise"
    },
    "sugar.js.responsive.SMediaQuery": {
        "name": "SMediaQuery",
        "type": "Class",
        "description": "This class expose some nice and easy methods to get the active media query defined in the config.media.queries configuration\nstack, as well as register to some events list \"match\" or \"unmatch\".",
        "namespace": "sugar.js.responsive",
        "extends": "SPromise",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SMediaQuery.ts",
        "extension": "ts",
        "path": "src/js/responsive/SMediaQuery.ts",
        "directory": "src/js/responsive",
        "children": {
            "this._activeMedia": {
                "name": "this._activeMedia",
                "type": "String",
                "description": "Store the active media name",
                "static": true,
                "since": "2.0.0"
            },
            "startListener": {
                "name": "startListener",
                "type": "Function",
                "description": "Add the global listener based on the \"init-body-media-queries\" scss mixin",
                "static": true,
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            }
        },
        "relPath": "src/js/responsive/SMediaQuery.ts",
        "relDirectory": "src/js/responsive"
    },
    "sugar.js.stream.SActionStream": {
        "name": "SActionStream",
        "type": "Class",
        "description": "This class represent the base of a actions stream.\nAn action stream if simply some functions that are called one after the other\nand that pass to each other some value(s) on which to work.\nHere's all the \"events\" that you can subscribe on the SActionStream instance, or on the returned SPromise when calling the \"start\" method:\n- start: emited when the overall actions stream starts\n- {actionName}.start: emited when the specified action starts\n- {actionName}.reject: emited when the specified action has been rejected\n- {actionName}.complete: emited when the specified action has been completed\n- complete: emited when the overall actions stream has been completed\n- resolve: Trigerred when the overall actions stream has been completed\n- log: emited when a log message has been set\n- cancel: emited when the stream has been canceled using the \"cancel\" method of the returned SPromise when calling the \"start\" method",
        "namespace": "sugar.js.stream",
        "extends": "SPromise",
        "status": "beta",
        "since": "2.0.0",
        "filename": "SActionsStream.ts",
        "extension": "ts",
        "path": "src/node/stream/SActionsStream.ts",
        "directory": "src/node/stream",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "hasCurrentStreamErrors": {
                "name": "hasCurrentStreamErrors",
                "type": "Function",
                "description": "This method return true or false depending if the current stream has some errors or not",
                "since": "2.0.0"
            },
            "start": {
                "name": "start",
                "type": "Function",
                "description": "This method launch the action stream and return an SPromise instance for this particular stream \"process\""
            },
            "log": {
                "name": "log",
                "type": "Function",
                "description": "THis method allows you to log something that will be passed upward through the SPromise events \"stdout\".",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/stream/SActionsStream.ts",
        "relDirectory": "src/node/stream"
    },
    "sugar.js.stream.SActionStreamAction": {
        "name": "SActionStreamAction",
        "type": "Class",
        "description": "This class represent the base of a actions stream action.\nAn action stream action represent an action that you can register in the SActionsStream instance and\nprodive you some usefull features like \"emit\" some events, set/get data from the streamObj, defining some required streamObj properties\nto work with, etc...",
        "namespace": "sugar.js.stream",
        "extends": "SPromise",
        "status": "beta",
        "since": "2.0.0",
        "filename": "SActionsStreamAction.ts",
        "extension": "ts",
        "path": "src/node/stream/SActionsStreamAction.ts",
        "directory": "src/node/stream",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "checkStreamObject": {
                "name": "checkStreamObject",
                "type": "Function",
                "description": "This method take the streamObj object passed to the \"run\" method and check it depending on the definition\nspecified in the static definition property."
            },
            "skipNextActions": {
                "name": "skipNextActions",
                "type": "Function",
                "description": "This method allows you to tell the SActionStream class that you want to skip\nthe next actions. If you don't specify anything, it means that you want to skip\nALL the next actions. You can pass a number that mean that you want to skip x next action(s),\nor an array with the actions names that you want to skip.",
                "since": "2.0.0"
            },
            "registerCallback": {
                "name": "registerCallback",
                "type": "Function",
                "description": "This method allows you to register some callbacks during the stream action process.\nYou can specify when you want to register this callback like \"before\" or \"after\", and specify if\nit's before/after the entire stream process or a particular action.",
                "since": "2.0.0"
            },
            "run": {
                "name": "run",
                "type": "Function",
                "description": "This method is the one that has to be overrided.\nIt will be called to run the actions on want on the streamObj passed as parameter\nand MUST return a Promise instance that you need to resolve at the end of your processed\nand pass it the updated streamObject."
            },
            "error": {
                "name": "error",
                "type": "Function",
                "description": "This method allows you to error a message that will be catched by the parent manager class"
            },
            "warn": {
                "name": "warn",
                "type": "Function",
                "description": "This method allows you to warn a message that will be catched by the parent manager class"
            },
            "log": {
                "name": "log",
                "type": "Function",
                "description": "This method allows you to log a message that will be catched by the parent manager class"
            }
        },
        "relPath": "src/node/stream/SActionsStreamAction.ts",
        "relDirectory": "src/node/stream"
    },
    "sugar.js.string.autoCast": {
        "name": "autoCast",
        "type": "Function",
        "description": "Auto cast the string into the correct variable type",
        "namespace": "sugar.js.string",
        "since": "2.0.0",
        "filename": "autoCast.ts",
        "extension": "ts",
        "path": "src/node/string/autoCast.ts",
        "directory": "src/node/string",
        "children": {},
        "relPath": "src/node/string/autoCast.ts",
        "relDirectory": "src/node/string"
    },
    "sugar.js.string.camelize": {
        "name": "camelize",
        "type": "Function",
        "description": "Camelize a string",
        "namespace": "sugar.js.string",
        "since": "2.0.0",
        "filename": "camelize.ts",
        "extension": "ts",
        "path": "src/node/string/camelize.ts",
        "directory": "src/node/string",
        "children": {},
        "relPath": "src/node/string/camelize.ts",
        "relDirectory": "src/node/string"
    },
    "sugar.js.string.countLine": {
        "name": "countLine",
        "type": "Function",
        "description": "Count how many characters their is in the passed line.\nThis function will exclude the characters like the html tags like <red>, etc...",
        "namespace": "sugar.js.string",
        "since": "2.0.0",
        "filename": "countLine.ts",
        "extension": "ts",
        "path": "src/node/string/countLine.ts",
        "directory": "src/node/string",
        "children": {},
        "relPath": "src/node/string/countLine.ts",
        "relDirectory": "src/node/string"
    },
    "sugar.js.string.crop": {
        "name": "crop",
        "type": "Function",
        "description": "Allows you to crop a string at a certain length (this length take care of the croping characters like \"...\")",
        "namespace": "sugar.js.string",
        "since": "2.0.0",
        "filename": "crop.ts",
        "extension": "ts",
        "path": "src/node/string/crop.ts",
        "directory": "src/node/string",
        "children": {},
        "relPath": "src/node/string/crop.ts",
        "relDirectory": "src/node/string"
    },
    "sugar.js.string.dedupe": {
        "name": "dedupe",
        "type": "Function",
        "description": "This function simple make sure that you don't have duplicate statements in the passed string",
        "namespace": "sugar.js.string",
        "since": "2.0.0",
        "filename": "dedupe.ts",
        "extension": "ts",
        "path": "src/node/string/dedupe.ts",
        "directory": "src/node/string",
        "children": {},
        "relPath": "src/node/string/dedupe.ts",
        "relDirectory": "src/node/string"
    },
    "sugar.js.string.extractSame": {
        "name": "extractSame",
        "type": "Function",
        "description": "This function return you what has been find the same in the two passed string.\nIt will return you either an array of same string parts or a simple string\nrepresenting the first same part found.",
        "namespace": "sugar.js.string",
        "since": "2.0.0",
        "filename": "extractSame.ts",
        "extension": "ts",
        "path": "src/node/string/extractSame.ts",
        "directory": "src/node/string",
        "children": {},
        "relPath": "src/node/string/extractSame.ts",
        "relDirectory": "src/node/string"
    },
    "sugar.js.string.includes": {
        "name": "includes",
        "type": "Function",
        "description": "Same as the native String.includes function but accept either an array of items\nor a simple comma separated string like \"something,cool,hello,world\"",
        "namespace": "sugar.js.string",
        "since": "2.0.0",
        "filename": "includes.ts",
        "extension": "ts",
        "path": "src/node/string/includes.ts",
        "directory": "src/node/string",
        "children": {},
        "relPath": "src/node/string/includes.ts",
        "relDirectory": "src/node/string"
    },
    "sugar.js.string.lowerFirst": {
        "name": "lowerFirst",
        "type": "Function",
        "description": "Lower first letter",
        "namespace": "sugar.js.string",
        "since": "2.0.0",
        "filename": "lowerFirst.ts",
        "extension": "ts",
        "path": "src/node/string/lowerFirst.ts",
        "directory": "src/node/string",
        "children": {},
        "relPath": "src/node/string/lowerFirst.ts",
        "relDirectory": "src/node/string"
    },
    "sugar.js.string.ltrim": {
        "name": "ltrim",
        "type": "Function",
        "description": "Trim left a specified string",
        "namespace": "sugar.js.string",
        "since": "2.0.0",
        "filename": "ltrim.ts",
        "extension": "ts",
        "path": "src/node/string/ltrim.ts",
        "directory": "src/node/string",
        "children": {},
        "relPath": "src/node/string/ltrim.ts",
        "relDirectory": "src/node/string"
    },
    "sugar.js.string.paramCase": {
        "name": "paramCase",
        "type": "Function",
        "description": "This function transform a string into a param case one like so \"something-cool\"",
        "namespace": "sugar.js.string",
        "since": "2.0.0",
        "filename": "paramCase.ts",
        "extension": "ts",
        "path": "src/node/string/paramCase.ts",
        "directory": "src/node/string",
        "children": {},
        "relPath": "src/node/string/paramCase.ts",
        "relDirectory": "src/node/string"
    },
    "sugar.js.string.parse": {
        "name": "parse",
        "type": "Function",
        "description": "Parse a string and convert it into his native data type like date, number, boolean, etc...",
        "namespace": "sugar.js.string",
        "since": "2.0.0",
        "filename": "parse.ts",
        "extension": "ts",
        "path": "src/node/string/parse.ts",
        "directory": "src/node/string",
        "children": {},
        "relPath": "src/node/string/parse.ts",
        "relDirectory": "src/node/string"
    },
    "sugar.js.string.printf": {
        "name": "printf",
        "type": "Function",
        "description": "printf php equavalent",
        "namespace": "sugar.js.string",
        "since": "2.0.0",
        "filename": "printf.ts",
        "extension": "ts",
        "path": "src/node/string/printf.ts",
        "directory": "src/node/string",
        "children": {},
        "relPath": "src/node/string/printf.ts",
        "relDirectory": "src/node/string"
    },
    "sugar.js.string.replaceTokens": {
        "name": "replaceTokens",
        "type": "Function",
        "description": "This function takes as parameter a tokened string like \"something [cool]\", an object\nof arguments/values and return the processed string with the tokens replaced by the arguments values.",
        "namespace": "sugar.js.string",
        "since": "2.0.0",
        "filename": "replaceTokens.ts",
        "extension": "ts",
        "path": "src/node/string/replaceTokens.ts",
        "directory": "src/node/string",
        "children": {},
        "relPath": "src/node/string/replaceTokens.ts",
        "relDirectory": "src/node/string"
    },
    "sugar.js.string.rtrim": {
        "name": "rtrim",
        "type": "Function",
        "description": "Trim right a specified string",
        "namespace": "sugar.js.string",
        "since": "2.0.0",
        "filename": "rtrim.ts",
        "extension": "ts",
        "path": "src/node/string/rtrim.ts",
        "directory": "src/node/string",
        "children": {},
        "relPath": "src/node/string/rtrim.ts",
        "relDirectory": "src/node/string"
    },
    "sugar.js.string.simply": {
        "name": "simply",
        "type": "Function",
        "description": "This function take a string with accents, etc and convert it to a more simply\nversion like \"éàddö\" to \"eaddo\"",
        "namespace": "sugar.js.string",
        "since": "2.0.0",
        "filename": "simplify.ts",
        "extension": "ts",
        "path": "src/node/string/simplify.ts",
        "directory": "src/node/string",
        "children": {},
        "relPath": "src/node/string/simplify.ts",
        "relDirectory": "src/node/string"
    },
    "sugar.js.string.splitEvery": {
        "name": "splitEvery",
        "type": "Function",
        "description": "Split a string every n chars either by taking care of not spliting the words, or by simply spliting without any attention to that...",
        "namespace": "sugar.js.string",
        "since": "2.0.0",
        "filename": "splitEvery.ts",
        "extension": "ts",
        "path": "src/node/string/splitEvery.ts",
        "directory": "src/node/string",
        "children": {},
        "relPath": "src/node/string/splitEvery.ts",
        "relDirectory": "src/node/string"
    },
    "sugar.js.string.sprintf": {
        "name": "sprintf",
        "type": "Function",
        "description": "Javascript implementation of the sprintf php function.\n>For more infos, check [this github repository](https://github.com/alexei/sprintf.js)",
        "namespace": "sugar.js.string",
        "since": "2.0.0",
        "filename": "sprintf.ts",
        "extension": "ts",
        "path": "src/node/string/sprintf.ts",
        "directory": "src/node/string",
        "children": {},
        "relPath": "src/node/string/sprintf.ts",
        "relDirectory": "src/node/string"
    },
    "sugar.js.string.toString": {
        "name": "toString",
        "type": "Function",
        "description": "Convert passed value to a string",
        "namespace": "sugar.js.string",
        "since": "2.0.0",
        "filename": "toString.ts",
        "extension": "ts",
        "path": "src/node/string/toString.ts",
        "directory": "src/node/string",
        "children": {},
        "relPath": "src/node/string/toString.ts",
        "relDirectory": "src/node/string"
    },
    "sugar.js.string.trimLines": {
        "name": "trimLines",
        "type": "Function",
        "description": "This function take a string and trim each lines",
        "namespace": "sugar.js.string",
        "since": "2.0.0",
        "filename": "trimLines.ts",
        "extension": "ts",
        "path": "src/node/string/trimLines.ts",
        "directory": "src/node/string",
        "children": {},
        "relPath": "src/node/string/trimLines.ts",
        "relDirectory": "src/node/string"
    },
    "sugar.js.string.uncamelize": {
        "name": "uncamelize",
        "type": "Function",
        "description": "Uncamelize a string",
        "namespace": "sugar.js.string",
        "since": "2.0.0",
        "filename": "uncamelize.ts",
        "extension": "ts",
        "path": "src/node/string/uncamelize.ts",
        "directory": "src/node/string",
        "children": {},
        "relPath": "src/node/string/uncamelize.ts",
        "relDirectory": "src/node/string"
    },
    "sugar.js.string.uniqid": {
        "name": "uniqid",
        "type": "Function",
        "description": "Generate a uniqid string of 8 bytes. Work using the [uniqid](https://www.npmjs.com/package/uniqid) npm package under the hood.",
        "namespace": "sugar.js.string",
        "since": "2.0.0",
        "filename": "uniqid.ts",
        "extension": "ts",
        "path": "src/node/string/uniqid.ts",
        "directory": "src/node/string",
        "children": {},
        "relPath": "src/node/string/uniqid.ts",
        "relDirectory": "src/node/string"
    },
    "sugar.js.string.unquote": {
        "name": "unquote",
        "type": "Function",
        "description": "Remove the quotes of a string\nTypes of quotes removed :\n- `\"`, `'`, `”`, '`'",
        "namespace": "sugar.js.string",
        "since": "2.0.0",
        "filename": "unquote.ts",
        "extension": "ts",
        "path": "src/node/string/unquote.ts",
        "directory": "src/node/string",
        "children": {},
        "relPath": "src/node/string/unquote.ts",
        "relDirectory": "src/node/string"
    },
    "sugar.js.string.upperFirst": {
        "name": "upperFirst",
        "type": "Function",
        "description": "Upper first",
        "namespace": "sugar.js.string",
        "since": "2.0.0",
        "filename": "upperFirst.ts",
        "extension": "ts",
        "path": "src/node/string/upperFirst.ts",
        "directory": "src/node/string",
        "children": {},
        "relPath": "src/node/string/upperFirst.ts",
        "relDirectory": "src/node/string"
    },
    "sugar.js.time.convert": {
        "name": "convert",
        "type": "Function",
        "description": "This function allows you to convert time like seconds, ms, hours, minutes, etc... from one format to another",
        "namespace": "sugar.js.time",
        "since": "2.0.0",
        "filename": "convert.ts",
        "extension": "ts",
        "path": "src/node/time/convert.ts",
        "directory": "src/node/time",
        "children": {},
        "relPath": "src/node/time/convert.ts",
        "relDirectory": "src/node/time"
    },
    "sugar.js.time.SDuration": {
        "name": "SDuration",
        "type": "Class",
        "description": "This class represent a duration tracking process. Simply instanciate it,\nthen call the ```instance.get()``` method and you will get back\nthe duration between the instanciation and the ```get``` method call",
        "namespace": "sugar.js.time",
        "status": "beta",
        "since": "2.0.0",
        "filename": "SDuration.ts",
        "extension": "ts",
        "path": "src/node/time/SDuration.ts",
        "directory": "src/node/time",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "toObject": {
                "name": "toObject",
                "type": "Function",
                "description": "This method end the duration if needed and return an object with these properties:\n- startTime: the start timestamp\n- endTime: the end timestamp\n- duration: the duration in miliseconds\n- formatedDuration: the duration formated",
                "since": "2.0.0"
            },
            "start": {
                "name": "start",
                "type": "Function",
                "description": "Start the duration process either with the current timestamp, or with a passed timestamp you prefer",
                "since": "2.0.0"
            },
            "end": {
                "name": "end",
                "type": "Function",
                "description": "Stop the duration counter and return the result in the passed format or in the format setted in the settings",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/time/SDuration.ts",
        "relDirectory": "src/node/time"
    },
    "sugar.js.time.STimer": {
        "name": "STimer",
        "type": "Class",
        "description": "Class that let you create and handle timer with ease.\nWith this class you can set some callback function that will be\ncalled each x ms or tell that you want your callbacks to be called\na certain number of time during the timer time.\nThis class extends the SPromise one, meaning that you can subscribe to differents \"events\" emited by the timer instance. Here's the list:\n- complete: emited when the timer is completed\n- tick: emited at each ticks depending on your settings\n- duration: emited when the duration has been changed\n- tickCount: emited when the tickCount has been changed\n- reset: emited when the timer has been reseted\n- start: emited when the timer starts\n- pause: emited when the timer has been paused\n- stop: emited when the timer has been stoped\n- destroy: emited when the timer has been destroyed",
        "namespace": "sugar.js.time",
        "extends": "SPromise",
        "status": "beta",
        "since": "2.0.0",
        "filename": "STimer.ts",
        "extension": "ts",
        "path": "src/node/time/STimer.ts",
        "directory": "src/node/time",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "remaing": {
                "name": "remaing",
                "type": "Number",
                "description": "Get the remaining time in ms"
            },
            "duration": {
                "name": "duration",
                "type": "Number",
                "description": "Set or get the duration. Can be a number in milliseconds, or a time string like '1m', '2s', etc..."
            },
            "tickCount": {
                "name": "tickCount",
                "type": "Number",
                "description": "Set of get the tickCount"
            },
            "percentage": {
                "name": "percentage",
                "type": "Number",
                "description": "Get the current timer advancement percentage"
            },
            "reset": {
                "name": "reset",
                "type": "Function",
                "description": "Reset the timer"
            },
            "start": {
                "name": "start",
                "type": "Function",
                "description": "Start the timer"
            },
            "pause": {
                "name": "pause",
                "type": "Function",
                "description": "Pause the timer"
            },
            "stop": {
                "name": "stop",
                "type": "Function",
                "description": "Stop the timer"
            },
            "destroy": {
                "name": "destroy",
                "type": "Function",
                "description": "Destroy the timer"
            },
            "isStarted": {
                "name": "isStarted",
                "type": "Function",
                "description": "Check if the timer is started"
            }
        },
        "relPath": "src/node/time/STimer.ts",
        "relDirectory": "src/node/time"
    },
    "sugar.js.time.wait": {
        "name": "wait",
        "type": "Function",
        "description": "This function is a simple \"setTimeout\" wrapper inside a promise.",
        "namespace": "sugar.js.time",
        "since": "2.0.0",
        "filename": "wait.ts",
        "extension": "ts",
        "path": "src/node/time/wait.ts",
        "directory": "src/node/time",
        "children": {},
        "relPath": "src/node/time/wait.ts",
        "relDirectory": "src/node/time"
    },
    "sugar.js.type.SType": {
        "name": "SType",
        "type": "Class",
        "description": "This class is the main one that MUST be used as parent one\nwhen creating any type like object, string, etc...",
        "namespace": "sugar.js.type",
        "since": "2.0.0",
        "filename": "_SType.ts",
        "extension": "ts",
        "path": "src/node/type/_SType.ts",
        "directory": "src/node/type",
        "children": {
            "typeString": {
                "name": "typeString",
                "type": "String",
                "description": "This store the typeString passed in the constructor",
                "since": "2.0.0"
            },
            "types": {
                "name": "types",
                "type": "IParseTypeStringResultObj[]",
                "description": "This specify the type represented by this SType instance",
                "since": "2.0.0"
            },
            "registerType": {
                "name": "registerType",
                "type": "Function",
                "description": "This static method allows you to register a new rule\nby passing a valid ISDescriptorRule object",
                "static": true,
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "is": {
                "name": "is",
                "type": "Function",
                "description": "This method allows you to make sure the passed value correspond with the type(s)\nthis instance represent",
                "since": "2.0.0"
            },
            "cast": {
                "name": "cast",
                "type": "Function",
                "description": "This method allows you to cast the passed value to the wanted type.\n!!! If multiple types are passed in the typeString, the first one that\nis \"castable\" to will be used.",
                "since": "2.0.0"
            },
            "canHaveChilds": {
                "name": "canHaveChilds",
                "type": "Function",
                "description": "This method simply take a value and return true if can have child(s), false if not",
                "since": "2.0.0"
            },
            "name": {
                "name": "name",
                "type": "String",
                "description": "Access the descriptor name. Either the value of settings.name, or the constructor name",
                "since": "2.0.0"
            },
            "id": {
                "name": "id",
                "type": "String",
                "description": "Access the descriptor id. Either the value of settings.name, or the constructor name",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/type/_SType.ts",
        "relDirectory": "src/node/type"
    },
    "sugar.js.type.parseTypeString": {
        "name": "parseTypeString",
        "type": "Function",
        "description": "This method simply parse the passed typeString like \"string | number\", or \"string & path\", etc... and return\nan object defining this type string",
        "namespace": "sugar.js.type",
        "since": "2.0.0",
        "filename": "parseTypeString.ts",
        "extension": "ts",
        "path": "src/node/type/parseTypeString.ts",
        "directory": "src/node/type",
        "children": {},
        "relPath": "src/node/type/parseTypeString.ts",
        "relDirectory": "src/node/type"
    },
    "sugar.js.type.STypeResult": {
        "name": "STypeResult",
        "type": "Class",
        "description": "This class represent what you will get back from the ```SType.apply``` method.\nYou will be able to generate some string terminal version of the return as well as some html\nversion if needed",
        "namespace": "sugar.js.type",
        "since": "2.0.0",
        "filename": "STypeResult.ts",
        "extension": "ts",
        "path": "src/node/type/STypeResult.ts",
        "directory": "src/node/type",
        "children": {
            "typeString": {
                "name": "typeString",
                "type": "string",
                "description": "Access the type in string format",
                "since": "2.0.0"
            },
            "value": {
                "name": "value",
                "type": "string",
                "description": "Access the value passed to be type validated",
                "since": "2.0.0"
            },
            "received": {
                "name": "received",
                "type": "ISTypeResultReceived",
                "description": "Access the received descriptor object",
                "since": "2.0.0"
            },
            "expected": {
                "name": "expected",
                "type": "ISTypeResultExpected",
                "description": "Access the expected descriptor object",
                "since": "2.0.0"
            },
            "issues": {
                "name": "issues",
                "type": "ISTypeResultIssueObj[]",
                "description": "Access the issues array",
                "since": "2.0.0"
            },
            "settings": {
                "name": "settings",
                "type": "ISTypeResultSettings",
                "description": "Access the settings object",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "hasIssues": {
                "name": "hasIssues",
                "type": "Function",
                "description": "Return true if some issues have been detected, false if not",
                "since": "2.0.0"
            },
            "toString": {
                "name": "toString",
                "type": "Functio n",
                "description": "This method return a string terminal compatible or html of this result object",
                "since": "2.0.0"
            },
            "toConsole": {
                "name": "toConsole",
                "type": "Function",
                "description": "This method simply returns you a terminal compatible string\nof the interface checking result",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/type/STypeResult.ts",
        "relDirectory": "src/node/type"
    },
    "sugar.js.unit.convert": {
        "name": "convert",
        "type": "Function",
        "description": "Convert a passed unit to the wanted one. If the passed unit is a number and not a string like \"10rem\", the unit is take as pixels",
        "namespace": "sugar.js.unit",
        "since": "2.0.0",
        "filename": "convert.ts",
        "extension": "ts",
        "path": "src/node/unit/convert.ts",
        "directory": "src/node/unit",
        "children": {},
        "relPath": "src/node/unit/convert.ts",
        "relDirectory": "src/node/unit"
    },
    "sugar.js.unit.em2px": {
        "name": "em2px",
        "type": "Function",
        "description": "Convert rem value to a px one",
        "namespace": "sugar.js.unit",
        "since": "2.0.0",
        "filename": "em2px.ts",
        "extension": "ts",
        "path": "src/node/unit/em2px.ts",
        "directory": "src/node/unit",
        "children": {},
        "relPath": "src/node/unit/em2px.ts",
        "relDirectory": "src/node/unit"
    },
    "sugar.js.unit.px2em": {
        "name": "px2em",
        "type": "Function",
        "description": "Convert rem value to a px one",
        "namespace": "sugar.js.unit",
        "since": "2.0.0",
        "filename": "px2em.ts",
        "extension": "ts",
        "path": "src/node/unit/px2em.ts",
        "directory": "src/node/unit",
        "children": {},
        "relPath": "src/node/unit/px2em.ts",
        "relDirectory": "src/node/unit"
    },
    "sugar.js.unit.px2rem": {
        "name": "px2rem",
        "type": "Function",
        "description": "Convert rem value to a px one",
        "namespace": "sugar.js.unit",
        "since": "2.0.0",
        "filename": "px2rem.ts",
        "extension": "ts",
        "path": "src/node/unit/px2rem.ts",
        "directory": "src/node/unit",
        "children": {},
        "relPath": "src/node/unit/px2rem.ts",
        "relDirectory": "src/node/unit"
    },
    "sugar.js.unit.rem2px": {
        "name": "rem2px",
        "type": "Function",
        "description": "Convert rem value to a px one",
        "namespace": "sugar.js.unit",
        "since": "2.0.0",
        "filename": "rem2px.ts",
        "extension": "ts",
        "path": "src/node/unit/rem2px.ts",
        "directory": "src/node/unit",
        "children": {},
        "relPath": "src/node/unit/rem2px.ts",
        "relDirectory": "src/node/unit"
    },
    "sugar.js.url.gravatarUrl": {
        "name": "gravatarUrl",
        "type": "Function",
        "description": "Return a gravatar url depending on the passed user email and size",
        "namespace": "sugar.js.url",
        "since": "2.0.0",
        "filename": "gravatarUrl.ts",
        "extension": "ts",
        "path": "src/node/url/gravatarUrl.ts",
        "directory": "src/node/url",
        "children": {},
        "relPath": "src/node/url/gravatarUrl.ts",
        "relDirectory": "src/node/url"
    },
    "sugar.js.url.parseSchema": {
        "name": "parseSchema",
        "type": "Function",
        "description": "This function take two arguments. The first one is the url to parse and the second is a schema to scan the url with.\nThe schema describe the pathname of an url and tell's how to analyze it.\nHere's a little description with some example of schemas:\n- \"{param1}/{param2}/{param3}\": This schema describe that your Url must have 3 \"values\" named param1, param2 and param3\n- If my Url is \"something.com/hello/world/plop\", my schema is respected and I can have access to the values through the \"schema.params.param1\", \"schema.params.param2\", etc...\n- \"{hello:string}/{world:number}/{?idx:number}\": This schema describe that the Url can have 3 \"values\" but the last one is optional\n- If my Url is \"something.com/plop/3/1\", my schema is respected\n- If my Url is \"something.com/plop/2\", my schema is respected\n- If my Url is \"something.com/plop/hello/2\", my schema is not respected due to the fact that the param named \"world\" has to be a number",
        "namespace": "sugar.js.url",
        "status": "wip",
        "since": "2.0.0",
        "filename": "parseSchema.ts",
        "extension": "ts",
        "path": "src/node/url/parseSchema.ts",
        "directory": "src/node/url",
        "children": {},
        "relPath": "src/node/url/parseSchema.ts",
        "relDirectory": "src/node/url"
    },
    "sugar.js.url.queryStringToObject": {
        "name": "queryStringToObject",
        "type": "Function",
        "description": "Transform a query string into his object (key => pairs) representation",
        "namespace": "sugar.js.url",
        "since": "2.0.0",
        "filename": "queryStringToObject.ts",
        "extension": "ts",
        "path": "src/node/url/queryStringToObject.ts",
        "directory": "src/node/url",
        "children": {},
        "relPath": "src/node/url/queryStringToObject.ts",
        "relDirectory": "src/node/url"
    },
    "sugar.js.url.SUrl": {
        "name": "SUrl",
        "type": "Class",
        "description": "Simple class that is useful to parse a URL (or the current browser URL) and gives you back\nan instance that has all these values availables as well as functions to modify the instancied URL:\n- protocol: The protocol scheme of the URL (e.g. http:).\n- slashes: A boolean which indicates whether the protocol is followed by two forward slashes (//).\n- auth: Authentication information portion (e.g. username:password).\n- username: Username of basic authentication.\n- password: Password of basic authentication.\n- host: Host name with port number.\n- hostname: Host name without port number.\n- port: Optional port number.\n- pathname: URL path.\n- query: Parsed object containing query string\n- queryString: Origin query string from the URL\n- hash: The \"fragment\" portion of the URL including the pound-sign (#).\n- href: The full URL.\n- origin: The origin of the URL.\n- schema: The schema property gives you access to an object containing these properties (only if you have provided the settings.schema setting):\n- match (true) {Boolean}: Tells you if your current url match the passed schema\n- errors (null) {Object}: Gives you access to which param(s) is/are in error\n- params (null) {Object}: Gives you access to each params specified in the schema with their values, etc...\n\nThis class use internally the `url-parse` npm module that you can find here: https://www.npmjs.com/package/url-parse",
        "namespace": "sugar.js.url",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SUrl.ts",
        "extension": "ts",
        "path": "src/node/url/SUrl.ts",
        "directory": "src/node/url",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "schema": {
                "name": "schema",
                "type": "Object",
                "description": "Access the schema parsing result if the settings.schema has been provided.\nThis object contain these properties:\n- params ({}) {Object}: Store the path params found like /{client}/{name}\n- errors ({}) {Object}: Store the parsing errors if has some\n- match (true) {Boolean}: Store if the current url match with the provided schema"
            },
            "protocol": {
                "name": "protocol",
                "type": "String",
                "description": "Get/set the protocol"
            },
            "slashes": {
                "name": "slashes",
                "type": "Boolean",
                "description": "A boolean which indicates whether the protocol is followed by two forward slashes (//)."
            },
            "auth": {
                "name": "auth",
                "type": "String",
                "description": "Authentication information portion (e.g. username:password)."
            },
            "username": {
                "name": "username",
                "type": "String",
                "description": "Get/set username of basic authentication"
            },
            "password": {
                "name": "password",
                "type": "String",
                "description": "Get/set password of basic authentication"
            },
            "host": {
                "name": "host",
                "type": "String",
                "description": "Get/set Host name with port number"
            },
            "hostname": {
                "name": "hostname",
                "type": "String",
                "description": "Get/set host name without port number"
            },
            "port": {
                "name": "port",
                "type": "Number",
                "description": "Optional port number"
            },
            "pathname": {
                "name": "pathname",
                "type": "String",
                "description": "URL path"
            },
            "pathnameArray": {
                "name": "pathnameArray",
                "type": "Array",
                "description": "URL path in array format"
            },
            "query": {
                "name": "query",
                "type": "String",
                "description": "Parsed object containing query string"
            },
            "queryString": {
                "name": "queryString",
                "type": "String",
                "description": "Origin query string from the URL"
            },
            "hash": {
                "name": "hash",
                "type": "String",
                "description": "The \"fragment\" portion of the URL including the pound-sign (#)"
            },
            "href": {
                "name": "href",
                "type": "String",
                "description": "The full URL"
            },
            "origin": {
                "name": "origin",
                "type": "String",
                "description": "The origin of the URL"
            },
            "toString": {
                "name": "toString",
                "type": "Function",
                "description": "Return the full URL in string format"
            }
        },
        "relPath": "src/node/url/SUrl.ts",
        "relDirectory": "src/node/url"
    },
    "sugar.js.value.typeDefinitionArrayObjectToString": {
        "name": "typeDefinitionArrayObjectToString",
        "type": "Function",
        "description": "This function take as parameter a type definition object like this one:\n{\ntype: [{\ntype: 'Array',\nof: [{\ntype: 'Boolean'\n}]\n}]\n}\nan transform it to a string like so \"Array<Boolean>\"",
        "namespace": "sugar.js.value",
        "status": "beta",
        "since": "2.0.0",
        "filename": "typeDefinitionArrayObjectToString.ts",
        "extension": "ts",
        "path": "src/node/value/typeDefinitionArrayObjectToString.ts",
        "directory": "src/node/value",
        "children": {},
        "relPath": "src/node/value/typeDefinitionArrayObjectToString.ts",
        "relDirectory": "src/node/value"
    },
    "sugar.js.value.typeof": {
        "name": "typeof",
        "type": "Function",
        "description": "This function return the correct type of the passed value.\nIt support the recognition of arrays and return 'Array' as property type.\nYou can olso ask the function to gives you the \"of\" types of the passed value. This mean that if you\npass an Array like so \"[10,'Hello',true]\" and that you ask for \"of\" types, it will returns you\n\"Array<Integer|String|Boolean>\".\nAnother feature is to ask the result as an object like so:\n{\ntype: 'Array',\nof: ['Integer','String','Boolean']\n}\nYou can ask also the typeof function to returns you the actual class name if the passed value is an instance\nof an custom class.",
        "namespace": "sugar.js.value",
        "status": "beta",
        "since": "2.0.0",
        "filename": "typeof.ts",
        "extension": "ts",
        "path": "src/node/value/typeof.ts",
        "directory": "src/node/value",
        "children": {},
        "relPath": "src/node/value/typeof.ts",
        "relDirectory": "src/node/value"
    },
    "sugar.js.webcomponent.SLitHtmlWebComponent": {
        "name": "SLitHtmlWebComponent",
        "type": "Class",
        "description": "// TODO: example\n\nBase class that you can extends to create some SWebComponent with Lit Html rendering capabilities",
        "namespace": "sugar.js.webcomponent",
        "extends": "SWebComponent",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SLitHtmlWebComponent.ts",
        "extension": "ts",
        "path": "src/js/webcomponent/SLitHtmlWebComponent.ts",
        "directory": "src/js/webcomponent",
        "children": {
            "template": {
                "name": "template",
                "type": "Function",
                "description": "This static variable store a function that has as parameter the state object\nof your component and the lit-html ```html``` function that you can use in your template.\nThis function MUST return a template string representing your component HTML depending on the state\nobject at this point.",
                "static": true
            },
            "lit": {
                "name": "lit",
                "type": "Object",
                "description": "Store all the litHtml functions that you may need"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "$root": {
                "name": "$root",
                "type": "Function",
                "description": "Access the root element of the webcomponent from which the requests like ```$``` and ```$$``` will be executed",
                "since": "2.0.0"
            },
            "update": {
                "name": "update",
                "type": "Function",
                "description": "This method allows you to update your componment manually if needed.\n- call the ```render``` method of this class\n- call the ```update``` method of the SWebComponent parent class",
                "since": "2.0.0"
            },
            "render": {
                "name": "render",
                "type": "Function",
                "description": "This method is called every time an update has been made in the state object"
            }
        },
        "relPath": "src/js/webcomponent/SLitHtmlWebComponent.ts",
        "relDirectory": "src/js/webcomponent"
    },
    "sugar.js.webcomponent.SWebComponent": {
        "name": "SWebComponent",
        "type": "Class",
        "description": "// TODO: example\n\nBase class that allows you to create easily new webcomponents and handle things like attributes updates,\nbase css (scss) importing, etc... Here's a list a features that this class covers:\n- Listen for attributes changes\n- Mount the component at a certain point in time (inViewport, visible, etc...)\n- *Automatically cast the attributes** to their proper js variable types (Array, Object, String, etc...)\n- *Physical props** : Specify some props that will ALWAYS be present as attribute on the component for styling purpose\n- Define some *default CSS** that will be injected in the head automatically\n- Specify some *required props**\n- *Full lifecycle management** through \"events\":\n- attach: Dispatched when the component is attached to the DOM\n- detach: Dispatched when the component is detached from the DOM\n- mounting: Dispatched when the component starts to mount itself (before mountWhen and mountDependencies execution)\n- mounted: Dispatched when the component has be mounted properly\n- prop|prop.{name}: Dispatched when a property has been updated, removed or added\n- The object format sended with the event is this one:\n- { prop: 'propName', action: 'update|remove|add', value: 'Something', previousValue: 'Other' }\n- *Mount dependencies** : This will allows you to set some promises that have to be resolved before mounting the component",
        "namespace": "sugar.js.webcomponent",
        "extends": "HTMLElement",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SWebComponent.ts",
        "extension": "ts",
        "path": "src/js/webcomponent/SWebComponent.ts",
        "directory": "src/js/webcomponent",
        "children": {
            "observedAttributes": {
                "name": "observedAttributes",
                "type": "Function",
                "description": "This medhod simply return the list of props that will be\nobserved by the customElements under the hood system.",
                "static": true
            },
            "componentName": {
                "name": "componentName",
                "type": "String",
                "description": "Store the name of the component in camelcase",
                "static": true,
                "since": "2.0.0"
            },
            "getComponentMetas": {
                "name": "getComponentMetas",
                "type": "Function",
                "description": "This static method return the component metas information like:\n- name: The camelcase component name\n- dashName: The component name in dash case\n- class: The component class\n- extends: The HTML class that the component extends\n- settings: An object of settings",
                "static": true,
                "since": "2.0.0"
            },
            "define": {
                "name": "define",
                "type": "Function",
                "description": "This method allows you to define your component as a webcomponent recognized by the browser",
                "static": true,
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "settings": {
                "name": "settings",
                "type": "Function",
                "description": "Get the settings object",
                "since": "2.0.0"
            },
            "$root": {
                "name": "$root",
                "type": "Function",
                "description": "Access the root element of the webcomponent from which the requests like ```$``` and ```$$``` will be executed",
                "since": "2.0.0"
            },
            "update": {
                "name": "update",
                "type": "Function",
                "description": "This method allows you to update your component manually if needed",
                "since": "2.0.0"
            },
            "$": {
                "name": "$",
                "type": "Function",
                "description": "This method is a shortcut to the ```querySelector``` function",
                "since": "2.0.0"
            },
            "$$": {
                "name": "$$",
                "type": "Function",
                "description": "This method is a shortcut to the ```querySelectorAll``` function",
                "since": "2.0.0"
            },
            "registerContext": {
                "name": "registerContext",
                "type": "Function",
                "description": "This method allows you to register some additional contexts that \"this\"\nfor the component to be able to find expressions like ```:on-select=\"doSometing\"```\nIt is used by all the SWebComponent instances to find their parent components for example",
                "since": "2.0.0"
            },
            "setProp": {
                "name": "setProp",
                "type": "Function",
                "description": "This method allows you to set a prop and specify the \"media\" for which you want to set this value\nThe media parameter can be one of the media queries defined in the configuration config.media.queries",
                "since": "2.0.0"
            },
            "getProp": {
                "name": "getProp",
                "type": "Function",
                "description": "This method allows you to get a prop and specify the \"media\" for which you want to get this value\nThe media parameter can be one of the media queries defined in the configuration config.media.queries",
                "since": "2.0.0"
            },
            "setSettings": {
                "name": "setSettings",
                "type": "Function",
                "description": "This method allows you to set some settings by merging the actual once with your new once",
                "since": "2.0.0"
            },
            "addClass": {
                "name": "addClass",
                "type": "Function",
                "description": "This method can be used to add class(es) to an element in the component.\nThis will take care of adding the pcomponent name prefix as well as the ```cssName```prefix\nif needed",
                "since": "2.0.0"
            },
            "removeClass": {
                "name": "removeClass",
                "type": "Function",
                "description": "This method can be used to remove class(es) to an element in the component.\nThis will take care of adding the component name prefix as well as the ```cssName```prefix\nif needed",
                "since": "2.0.0"
            },
            "metas": {
                "name": "metas",
                "type": "Object",
                "description": "This property store all the component metas informations like the name,\nthe type, what it is extending, etc...",
                "since": "2.0.0"
            },
            "on": {
                "name": "on",
                "type": "Function",
                "description": "Method used to subscribe to the \"events\" dispatched\nduring the lifecycle of the component. Here's the list of events:\n- attach: Dispatched when the component is attached to the DOM\n- detach: Dispatched when the component is detached from the DOM\n- mounting: Dispatched when the component starts to mount itself (before mountWhen and mountDependencies execution)\n- mounted: Dispatched when the component has be mounted properly\n- prop|prop.{name}: Dispatched when a property has been updated, removed or added\n- The object format sended with the event is this one:\n- { prop: 'propName', action: 'update|remove|add', value: 'Something', previousValue: 'Other' }",
                "since": "2.0.0"
            },
            "off": {
                "name": "off",
                "type": "Function",
                "description": "Method used to unsubscribe to a previously subscribed event",
                "since": "2.0.0"
            },
            "connectedCallback": {
                "name": "connectedCallback",
                "type": "Function",
                "description": "Called when the component is attached to the dom"
            },
            "disconnectedCallback": {
                "name": "disconnectedCallback",
                "type": "Function",
                "description": "Called when the component is detached from the dom"
            },
            "attributeChangedCallback": {
                "name": "attributeChangedCallback",
                "type": "Function",
                "description": "Called when an attribute is removed, added or updated"
            },
            "selector": {
                "name": "selector",
                "type": "Function",
                "description": "This method return you a selector generated depending on the\nwebcomponent name",
                "since": "2.0.0"
            }
        },
        "relPath": "src/js/webcomponent/SWebComponent.ts",
        "relDirectory": "src/js/webcomponent"
    },
    "sugar.node.blessed.SBlessedComponent": {
        "name": "SBlessedComponent",
        "type": "Class",
        "description": "This class is the base one for all the sugar blessed components like input, panel, etc...",
        "namespace": "sugar.node.blessed",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SBlessedComponent.ts",
        "extension": "ts",
        "path": "src/node/blessed/SBlessedComponent.ts",
        "directory": "src/node/blessed",
        "children": {
            "getScreen": {
                "name": "getScreen",
                "type": "Function",
                "description": "Get the screen initiated when using some SBlessedComponent instances",
                "static": true,
                "since": "2.0.0"
            },
            "destroyScreen": {
                "name": "destroyScreen",
                "type": "Function",
                "description": "Get the screen initiated when using some SBlessedComponent instances",
                "static": true,
                "since": "2.0.0"
            },
            "screen": {
                "name": "screen",
                "type": "__blessed.screen",
                "description": "Store the global screen initiated by the first component",
                "static": true,
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "innerWidth": {
                "name": "innerWidth",
                "type": "Integer",
                "description": "Access the inner width of the component. This mean the actual width\nminus the left/right padding",
                "since": "2.0.0"
            },
            "setFramerate": {
                "name": "setFramerate",
                "type": "Function",
                "description": "This method allows you to simply change the interval timeout between the screen renders process.\nNote that calling this will change the GLOBAL render screen interval so use with caution...",
                "since": "2.0.0"
            },
            "update": {
                "name": "update",
                "type": "Function",
                "description": "This method simply update the screen if the component is a child of one"
            },
            "isDisplayed": {
                "name": "isDisplayed",
                "type": "Function",
                "description": "Check if the component is in the display list of the screen",
                "since": "2.0.0"
            },
            "isDestroyed": {
                "name": "isDestroyed",
                "type": "Function",
                "description": "Check if the component (screen) has been destroyed",
                "since": "2.0.0"
            },
            "emit": {
                "name": "emit",
                "type": "Function",
                "description": "emit some \"events\" through the SPromise instance",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/blessed/SBlessedComponent.ts",
        "relDirectory": "src/node/blessed"
    },
    "sugar.node.cache.SFileCache": {
        "name": "SFileCache",
        "type": "Class",
        "description": "This class can be used to cache some files.\nIt featured all the capabilities of the SCache class\nbut take as ```get``` and ```set``` name parameter, the actual absolute\nfile path to cache.",
        "namespace": "sugar.node.cache",
        "extends": "SCache",
        "status": "beta",
        "since": "2.0.0",
        "filename": "SFileCache.ts",
        "extension": "ts",
        "path": "src/node/cache/SFileCache.ts",
        "directory": "src/node/cache",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "get": {
                "name": "get",
                "type": "Function",
                "description": "Get a value back from the cache using the specified adapter in the settings"
            },
            "set": {
                "name": "set",
                "type": "Function",
                "description": "Set a value to the cache system using the specified adapter with some settings like described bellow"
            }
        },
        "relPath": "src/node/cache/SFileCache.ts",
        "relDirectory": "src/node/cache"
    },
    "sugar.node.cli.SCli": {
        "name": "SCli",
        "type": "Class",
        "description": "This class represent a basic CLI command with his definition object, his command string, etc...",
        "namespace": "sugar.node.cli",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SCli.ts",
        "extension": "ts",
        "path": "src/node/cli/SCli.ts",
        "directory": "src/node/cli",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "parseArgs": {
                "name": "parseArgs",
                "type": "Function",
                "description": "This static method take a simple cli configuration string and returns you\nan object representing each values passed.\nThis methods uses the static definition object of the class to do his job.",
                "static": true,
                "since": "2.0.0"
            },
            "command": {
                "name": "command",
                "type": "String",
                "description": "Access the command string"
            },
            "interface": {
                "name": "interface",
                "type": "String",
                "description": "Access the definition object"
            },
            "runningParamsObj": {
                "name": "runningParamsObj",
                "type": "Object",
                "description": "Get the current process lauched with \"run\" or \"runWithOutput\" methods arguments"
            },
            "run": {
                "name": "run",
                "type": "Function",
                "description": "This method run a new child process with the provided arguments and the definition object.\nThe returned object MUST be an SPromise instance that emit these \"events\":\n- start: emited when the command start a process\n- close: emited when the process is closed\n- kill: emited when the process has been killed\n- success: emited when the process has finished without any error\n- error: emited when the process has had an error\n- log: emited when some data are pushed in the stdout channel"
            },
            "toString": {
                "name": "toString",
                "type": "Function",
                "description": "This method allows you to pass an arguments object and return the builded command line string depending on the definition object."
            },
            "isRunning": {
                "name": "isRunning",
                "type": "Function",
                "description": "This method simply return true or false if the child process is running or not"
            },
            "kill": {
                "name": "kill",
                "type": "Function",
                "description": "This method simply kill the running child process if their's one, otherwise it will do nothing."
            }
        },
        "relPath": "src/node/cli/SCli.ts",
        "relDirectory": "src/node/cli"
    },
    "sugar.node.clipboard.copy": {
        "name": "copy",
        "type": "Function",
        "description": "Simple function to copy things into the system clipboard.\nThis is using https://www.npmjs.com/package/clipboardy under the hood.",
        "namespace": "sugar.node.clipboard",
        "since": "2.0.0",
        "filename": "copy.ts",
        "extension": "ts",
        "path": "src/node/clipboard/copy.ts",
        "directory": "src/node/clipboard",
        "children": {},
        "relPath": "src/node/clipboard/copy.ts",
        "relDirectory": "src/node/clipboard"
    },
    "sugar.node.clipboard.paste": {
        "name": "paste",
        "type": "Function",
        "description": "Simple function to paste things from the system clipboard.\nThis is using https://www.npmjs.com/package/clipboardy under the hood.",
        "namespace": "sugar.node.clipboard",
        "since": "2.0.0",
        "filename": "paste.ts",
        "extension": "ts",
        "path": "src/node/clipboard/paste.ts",
        "directory": "src/node/clipboard",
        "children": {},
        "relPath": "src/node/clipboard/paste.ts",
        "relDirectory": "src/node/clipboard"
    },
    "sugar.node.color.color": {
        "name": "color",
        "type": "Function",
        "description": "Simple wrapper to create an SColor instance quickly",
        "namespace": "sugar.node.color",
        "since": "2.0.0",
        "filename": "color.ts",
        "extension": "ts",
        "path": "src/node/color/color.ts",
        "directory": "src/node/color",
        "children": {},
        "relPath": "src/node/color/color.ts",
        "relDirectory": "src/node/color"
    },
    "sugar.node.compiler.SCompiler": {
        "name": "SCompiler",
        "type": "Class",
        "description": "This represent the main compiler class that has to be extended for compilers like typescript, scss, etc...\nHis main goal is to provide basic features like storing the inputs, settings, etc...",
        "namespace": "sugar.node.compiler",
        "extends": "SEventEmitter",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SCompiler.ts",
        "extension": "ts",
        "path": "src/node/compiler/SCompiler.ts",
        "directory": "src/node/compiler",
        "children": {
            "initialParams": {
                "name": "initialParams",
                "type": "Object",
                "description": "Store the initial params object",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "compile": {
                "name": "compile",
                "type": "Function",
                "description": "This method is the one you have to call when you want to launch a compilation process.\nIt will call the ```_compile``` one which MUST return an instance of the SPromise class.",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/compiler/SCompiler.ts",
        "relDirectory": "src/node/compiler"
    },
    "sugar.node.config.sugar": {
        "name": "sugar",
        "type": "Function",
        "description": "This function allows you to access easily the configurations stored in the ```sugar.config.js```.\nThe returned configuration is the result of the default sugar config stored in the toolkit and the\napp defined config stored in current application root folder",
        "namespace": "sugar.node.config",
        "status": "beta",
        "since": "2.0.0",
        "filename": "sugar.ts",
        "extension": "ts",
        "path": "src/node/config/sugar.ts",
        "directory": "src/node/config",
        "children": {},
        "relPath": "src/node/config/sugar.ts",
        "relDirectory": "src/node/config"
    },
    "sugar.node.css.classname": {
        "name": "classname",
        "type": "Function",
        "description": "This function take a classname you want to generate and returns you the prefixed (if prefix exists in config.classes) classname",
        "namespace": "sugar.node.css",
        "status": "beta",
        "since": "2.0.0",
        "filename": "classname.ts",
        "extension": "ts",
        "path": "src/node/css/classname.ts",
        "directory": "src/node/css",
        "children": {},
        "relPath": "src/node/css/classname.ts",
        "relDirectory": "src/node/css"
    },
    "sugar.node.deamon.SDeamon": {
        "name": "SDeamon",
        "type": "Class",
        "description": "This class is the base one for all the \"Deamons\" classes like SFsDeamon, etc...",
        "namespace": "sugar.node.deamon",
        "extends": "SPromise",
        "status": "wip",
        "filename": "SDeamon.ts",
        "extension": "ts",
        "path": "src/node/deamon/SDeamon.ts",
        "directory": "src/node/deamon",
        "children": {
            "state": {
                "name": "state",
                "type": "String",
                "description": "Store the watching process state",
                "since": "2.0.0"
            },
            "logs": {
                "name": "logs",
                "type": "Object",
                "description": "Store the different logs messages like:\n- watching: Displayed when the deamon pass in watching mode\n- paused: Displayed when the deamon pass in pause mode",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "on": {
                "name": "on",
                "type": "Function",
                "description": "Override the ```on``` SPromise method to allow the use of the \"update\" shortcut.\nWhen using the \"update\" shortcut, the registered events will actually be the one\nspecified in the ```settings.updateStacks```.",
                "since": "2.0.0"
            },
            "getUpdateLog": {
                "name": "getUpdateLog",
                "type": "Function",
                "description": "This function is used to generate the update log string\ndepending on the updated file, data, etc...",
                "since": "2.0.0"
            },
            "processParams": {
                "name": "processParams",
                "type": "Function",
                "description": "This method can be called to process the passed params object\nusing the function setted in the settings.processParams",
                "since": "2.0.0"
            },
            "watch": {
                "name": "watch",
                "type": "Function",
                "description": "This method take the extended watch method promise as parameter\nto listen on it automatically for events like \"close\", etc...\nIt also pipe the events from the promise on the instance directly\nto you can listen for event directly on the class instance itself",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/deamon/SDeamon.ts",
        "relDirectory": "src/node/deamon"
    },
    "sugar.node.docblock.firstDocblockWithNamespaceInFolder": {
        "name": "firstDocblockWithNamespaceInFolder",
        "type": "Function",
        "description": "This function search in the passed folder for files containing a \"@namespace\" tag (and an \"@name\" optional one)\nand generate a SNav instance with all these founded files as sources...",
        "namespace": "sugar.node.docblock",
        "status": "wip",
        "since": "2.0.0",
        "filename": "firstDocblocksWithNamespaceInFolder.ts",
        "extension": "ts",
        "path": "src/node/docblock/firstDocblocksWithNamespaceInFolder.ts",
        "directory": "src/node/docblock",
        "children": {},
        "relPath": "src/node/docblock/firstDocblocksWithNamespaceInFolder.ts",
        "relDirectory": "src/node/docblock"
    },
    "sugar.node.build.docMap.SBuildDocMapProcess": {
        "name": "SBuildDocMapProcess",
        "type": "Class",
        "description": "This class represent the process that build the docMap.json file",
        "namespace": "sugar.node.build.docMap",
        "extends": "SProcess",
        "since": "2.0.0",
        "filename": "SBuildDocMapProcess.ts",
        "extension": "ts",
        "path": "src/node/docMap/SBuildDocMapProcess.ts",
        "directory": "src/node/docMap",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "process": {
                "name": "process",
                "type": "Function",
                "description": "Method that execute the actual process code",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/docMap/SBuildDocMapProcess.ts",
        "relDirectory": "src/node/docMap"
    },
    "sugar.node.doc.SDocMap": {
        "name": "SDocMap",
        "type": "Class",
        "description": "This class represent the ```docMap.json``` file and allows you to build it from some sources (glob pattern(s))\nand save it inside a directory you choose.",
        "namespace": "sugar.node.doc",
        "extends": "SPromise",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SDocMap.ts",
        "extension": "ts",
        "path": "src/node/docMap/SDocMap.ts",
        "directory": "src/node/docMap",
        "children": {
            "docMapSettings": {
                "name": "docMapSettings",
                "type": "Object",
                "description": "Access the docMap settings",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "find": {
                "name": "find",
                "type": "Function",
                "description": "This static method allows you to search for docMap.json files and get back the array of pathes where to\nfind the found files",
                "since": "2.0.0"
            },
            "read": {
                "name": "read",
                "type": "Function",
                "description": "This static method allows you to search for docMap.json files and read them to get\nback the content of them in one call. It can take advantage of the cache if\nthe setting.cache property is setted to true",
                "since": "2.0.0"
            },
            "build": {
                "name": "build",
                "type": "Function",
                "description": "This method allows you to specify one or more glob patterns to scan files for \"@namespace\" docblock tags\nand extract all the necessary informations to build the docMap.json file",
                "since": "2.0.0"
            },
            "save": {
                "name": "save",
                "type": "Function",
                "description": "This method save the docMap.json file in the outputDir setted in the settings.\nYou can specify an output path as parameter to use this instead of the instance level settings.",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/docMap/SDocMap.ts",
        "relDirectory": "src/node/docMap"
    },
    "sugar.node.error.handleError": {
        "name": "handleError",
        "type": "Function",
        "description": "This function take a thrown error and try to display it the best way possible.\nSimply add the \"uncaughtException\" and the \"unhandledRejection\" listeners on the process object,\npass this function as the handler one and that's it...",
        "namespace": "sugar.node.error",
        "status": "wip",
        "since": "2.0.0",
        "filename": "handleError.ts",
        "extension": "ts",
        "path": "src/node/error/handleError.ts",
        "directory": "src/node/error",
        "children": {},
        "relPath": "src/node/error/handleError.ts",
        "relDirectory": "src/node/error"
    },
    "sugar.node.event.emit": {
        "name": "emit",
        "type": "Function",
        "description": "This function can ben used to emit an event globally.\nYou can subscribe to these events using the \"sugar.node.event.subscribe\" function",
        "namespace": "sugar.node.event",
        "status": "beta",
        "since": "2.0.0",
        "filename": "emit.ts",
        "extension": "ts",
        "path": "src/node/event/emit.ts",
        "directory": "src/node/event",
        "children": {},
        "relPath": "src/node/event/emit.ts",
        "relDirectory": "src/node/event"
    },
    "sugar.node.event.on": {
        "name": "on",
        "type": "Function",
        "description": "This function allows you to subscribe to global events emited by the \"sugar.node.event.dispatch\" function\nIt use under the hood an SPromise instance",
        "namespace": "sugar.node.event",
        "status": "beta",
        "since": "2.0.0",
        "filename": "on.ts",
        "extension": "ts",
        "path": "src/node/event/on.ts",
        "directory": "src/node/event",
        "children": {},
        "relPath": "src/node/event/on.ts",
        "relDirectory": "src/node/event"
    },
    "sugar.node.doc.SFrontspec": {
        "name": "SFrontspec",
        "type": "Class",
        "description": "This class represent the ```frontspec.json``` file and allows you to generate it from some sources (glob pattern(s))\nand save it inside a directory you choose.",
        "namespace": "sugar.node.doc",
        "extends": "SPromise",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SFrontspec.ts",
        "extension": "ts",
        "path": "src/node/frontspec/SFrontspec.ts",
        "directory": "src/node/frontspec",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "search": {
                "name": "search",
                "type": "Function",
                "description": "This method allows you to search for frontspec.json files and get back the array of pathes where to\nfind the found files",
                "since": "2.0.0"
            },
            "json": {
                "name": "json",
                "type": "Function",
                "description": "Generate the frontspec JSON by searching for \"childs\" one as well as generating the \"root\" one\nstored at the root of your package.",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/frontspec/SFrontspec.ts",
        "relDirectory": "src/node/frontspec"
    },
    "sugar.node.fs.copy": {
        "name": "copy",
        "type": "Function",
        "description": "Copy a file or directory (async)",
        "namespace": "sugar.node.fs",
        "since": "2.0.0",
        "filename": "copy.ts",
        "extension": "ts",
        "path": "src/node/fs/copy.ts",
        "directory": "src/node/fs",
        "children": {},
        "relPath": "src/node/fs/copy.ts",
        "relDirectory": "src/node/fs"
    },
    "sugar.node.fs.copySync": {
        "name": "copySync",
        "type": "Function",
        "description": "Copy a file or directory (sync)",
        "namespace": "sugar.node.fs",
        "since": "2.0.0",
        "filename": "copySync.ts",
        "extension": "ts",
        "path": "src/node/fs/copySync.ts",
        "directory": "src/node/fs",
        "children": {},
        "relPath": "src/node/fs/copySync.ts",
        "relDirectory": "src/node/fs"
    },
    "sugar.node.fs.downloadFile": {
        "name": "downloadFile",
        "type": "Function",
        "description": "Download a file and save it on the file system",
        "namespace": "sugar.node.fs",
        "since": "2.0.0",
        "filename": "downloadFile.ts",
        "extension": "ts",
        "path": "src/node/fs/downloadFile.ts",
        "directory": "src/node/fs",
        "children": {},
        "relPath": "src/node/fs/downloadFile.ts",
        "relDirectory": "src/node/fs"
    },
    "sugar.node.fs.emptyDir": {
        "name": "emptyDir",
        "type": "Function",
        "description": "Empty a directory (async)",
        "namespace": "sugar.node.fs",
        "since": "2.0.0",
        "filename": "emptyDir.ts",
        "extension": "ts",
        "path": "src/node/fs/emptyDir.ts",
        "directory": "src/node/fs",
        "children": {},
        "relPath": "src/node/fs/emptyDir.ts",
        "relDirectory": "src/node/fs"
    },
    "sugar.node.fs.emptyDirSync": {
        "name": "emptyDirSync",
        "type": "Function",
        "description": "Empty a directory (sync)",
        "namespace": "sugar.node.fs",
        "since": "2.0.0",
        "filename": "emptyDirSync.ts",
        "extension": "ts",
        "path": "src/node/fs/emptyDirSync.ts",
        "directory": "src/node/fs",
        "children": {},
        "relPath": "src/node/fs/emptyDirSync.ts",
        "relDirectory": "src/node/fs"
    },
    "sugar.node.fs.ensureDir": {
        "name": "ensureDir",
        "type": "Function",
        "description": "Ensure that the passed directory exists. If not, will be created recursively... (async)",
        "namespace": "sugar.node.fs",
        "since": "2.0.0",
        "filename": "ensureDir.ts",
        "extension": "ts",
        "path": "src/node/fs/ensureDir.ts",
        "directory": "src/node/fs",
        "children": {},
        "relPath": "src/node/fs/ensureDir.ts",
        "relDirectory": "src/node/fs"
    },
    "sugar.node.fs.ensureDirSync": {
        "name": "ensureDirSync",
        "type": "Function",
        "description": "Ensure that the passed directory exists. If not, will be created recursively... (sync)",
        "namespace": "sugar.node.fs",
        "since": "2.0.0",
        "filename": "ensureDirSync.ts",
        "extension": "ts",
        "path": "src/node/fs/ensureDirSync.ts",
        "directory": "src/node/fs",
        "children": {},
        "relPath": "src/node/fs/ensureDirSync.ts",
        "relDirectory": "src/node/fs"
    },
    "sugar.node.fs.ensureFile": {
        "name": "ensureFile",
        "type": "Function",
        "description": "Ensure that the passed file exists. If not, it will be created... (async)",
        "namespace": "sugar.node.fs",
        "since": "2.0.0",
        "filename": "ensureFile.ts",
        "extension": "ts",
        "path": "src/node/fs/ensureFile.ts",
        "directory": "src/node/fs",
        "children": {},
        "relPath": "src/node/fs/ensureFile.ts",
        "relDirectory": "src/node/fs"
    },
    "sugar.node.fs.ensureFileSync": {
        "name": "ensureFileSync",
        "type": "Function",
        "description": "Ensure that the passed file exists. If not, will be created... (async)",
        "namespace": "sugar.node.fs",
        "since": "2.0.0",
        "filename": "ensureFileSync.ts",
        "extension": "ts",
        "path": "src/node/fs/ensureFileSync.ts",
        "directory": "src/node/fs",
        "children": {},
        "relPath": "src/node/fs/ensureFileSync.ts",
        "relDirectory": "src/node/fs"
    },
    "sugar.node.fs.extension": {
        "name": "extension",
        "type": "Function",
        "description": "Return the passed file path extension",
        "namespace": "sugar.node.fs",
        "since": "2.0.0",
        "filename": "extension.ts",
        "extension": "ts",
        "path": "src/node/fs/extension.ts",
        "directory": "src/node/fs",
        "children": {},
        "relPath": "src/node/fs/extension.ts",
        "relDirectory": "src/node/fs"
    },
    "sugar.node.fs.filename": {
        "name": "filename",
        "type": "Function",
        "description": "Return the filename from the passed path with or without the extension",
        "namespace": "sugar.node.fs",
        "since": "2.0.0",
        "filename": "filename.ts",
        "extension": "ts",
        "path": "src/node/fs/filename.ts",
        "directory": "src/node/fs",
        "children": {},
        "relPath": "src/node/fs/filename.ts",
        "relDirectory": "src/node/fs"
    },
    "sugar.node.fs.findUp": {
        "name": "findUp",
        "type": "Function",
        "description": "This function simply walk across upper folders to search for a file\nand returns you the first finded",
        "namespace": "sugar.node.fs",
        "since": "2.0.0",
        "filename": "findUp.ts",
        "extension": "ts",
        "path": "src/node/fs/findUp.ts",
        "directory": "src/node/fs",
        "children": {},
        "relPath": "src/node/fs/findUp.ts",
        "relDirectory": "src/node/fs"
    },
    "sugar.node.fs.folderPath": {
        "name": "folderPath",
        "type": "Function",
        "description": "This function returns you the folder path of the file path passed.\nYou can tell the function to check for file existence before getting\nthe folder path with the second parameter.",
        "namespace": "sugar.node.fs",
        "since": "2.0.0",
        "filename": "folderPath.ts",
        "extension": "ts",
        "path": "src/node/fs/folderPath.ts",
        "directory": "src/node/fs",
        "children": {},
        "relPath": "src/node/fs/folderPath.ts",
        "relDirectory": "src/node/fs"
    },
    "sugar.node.fs.folderSize": {
        "name": "folderSize",
        "type": "Function",
        "description": "Calculate the size of the passed folder and return it through a promise, either in raw format, either in human readdable one...",
        "namespace": "sugar.node.fs",
        "since": "2.0.0",
        "filename": "folderSize.ts",
        "extension": "ts",
        "path": "src/node/fs/folderSize.ts",
        "directory": "src/node/fs",
        "children": {},
        "relPath": "src/node/fs/folderSize.ts",
        "relDirectory": "src/node/fs"
    },
    "sugar.node.fs.formatFileSize": {
        "name": "formatFileSize",
        "type": "Function",
        "description": "Transform into human readable string a file size from a number (float or integer) or string.\nThis function use the wonderfull \"filesize\" npm package under the houd.",
        "namespace": "sugar.node.fs",
        "since": "2.0.0",
        "filename": "formatFileSize.ts",
        "extension": "ts",
        "path": "src/node/fs/formatFileSize.ts",
        "directory": "src/node/fs",
        "children": {},
        "relPath": "src/node/fs/formatFileSize.ts",
        "relDirectory": "src/node/fs"
    },
    "sugar.node.fs.isPath": {
        "name": "isPath",
        "type": "Function",
        "description": "Check if the passed string is a valid path or not",
        "namespace": "sugar.node.fs",
        "since": "2.0.0",
        "filename": "isPath.ts",
        "extension": "ts",
        "path": "src/node/fs/isPath.ts",
        "directory": "src/node/fs",
        "children": {},
        "relPath": "src/node/fs/isPath.ts",
        "relDirectory": "src/node/fs"
    },
    "sugar.node.fs.move": {
        "name": "move",
        "type": "Function",
        "description": "Moves a file or directory, even across devices (async)",
        "namespace": "sugar.node.fs",
        "since": "2.0.0",
        "filename": "move.ts",
        "extension": "ts",
        "path": "src/node/fs/move.ts",
        "directory": "src/node/fs",
        "children": {},
        "relPath": "src/node/fs/move.ts",
        "relDirectory": "src/node/fs"
    },
    "sugar.node.fs.moveSync": {
        "name": "moveSync",
        "type": "Function",
        "description": "Moves a file or directory, even across devices (sync)",
        "namespace": "sugar.node.fs",
        "since": "2.0.0",
        "filename": "moveSync.ts",
        "extension": "ts",
        "path": "src/node/fs/moveSync.ts",
        "directory": "src/node/fs",
        "children": {},
        "relPath": "src/node/fs/moveSync.ts",
        "relDirectory": "src/node/fs"
    },
    "sugar.node.fs.remove": {
        "name": "remove",
        "type": "Function",
        "description": "Removes a file or directory. The directory can have contents. If the path does not exist, silently does nothing. Like rm -rf (async)",
        "namespace": "sugar.node.fs",
        "since": "2.0.0",
        "filename": "remove.ts",
        "extension": "ts",
        "path": "src/node/fs/remove.ts",
        "directory": "src/node/fs",
        "children": {},
        "relPath": "src/node/fs/remove.ts",
        "relDirectory": "src/node/fs"
    },
    "sugar.node.fs.removeSync": {
        "name": "removeSync",
        "type": "Function",
        "description": "Removes a file or directory. The directory can have contents. If the path does not exist, silently does nothing. Like rm -rf (sync)",
        "namespace": "sugar.node.fs",
        "since": "2.0.0",
        "filename": "removeSync.ts",
        "extension": "ts",
        "path": "src/node/fs/removeSync.ts",
        "directory": "src/node/fs",
        "children": {},
        "relPath": "src/node/fs/removeSync.ts",
        "relDirectory": "src/node/fs"
    },
    "sugar.node.fs.SFile": {
        "name": "SFile",
        "type": "Class",
        "description": "This class represent a file in the filesystem. With it you can simply instanciate one by passing the file path,\nand get access to all the nice meta data like:\n- name: The file name\n- path: The full path to the file\n- cwd: The root directory specified through the settings.cwd property\n- relPath: The relative file path from the cwd\n- dirPath: The path to the folder where is the file\n- extension: The file extension\n- size: The file size in megabytes\n- bytes: The file siz in bytes\n- exists:Bytestrue if the file exists on the disk, false otherwise",
        "namespace": "sugar.node.fs",
        "extends": "SPromise",
        "status": "beta",
        "since": "2.0.0",
        "filename": "SFile.ts",
        "extension": "ts",
        "path": "src/node/fs/SFile.ts",
        "directory": "src/node/fs",
        "children": {
            "SFileReadSettingsInterface": {
                "name": "SFileReadSettingsInterface",
                "type": "Class",
                "description": "Watch settings interface",
                "extends": "SInterface",
                "status": "beta",
                "since": "2.0.0"
            },
            "SFileWriteSettingsInterface": {
                "name": "SFileWriteSettingsInterface",
                "type": "Class",
                "description": "Watch settings interface",
                "extends": "SInterface",
                "status": "beta",
                "since": "2.0.0"
            },
            "SFileWatchSettingsInterface": {
                "name": "SFileWatchSettingsInterface",
                "type": "Class",
                "description": "Watch settings interface",
                "extends": "SInterface",
                "status": "beta",
                "since": "2.0.0"
            },
            "SFileSettingsInterface": {
                "name": "SFileSettingsInterface",
                "type": "Class",
                "description": "Settings infertage",
                "extends": "SInterface",
                "status": "beta",
                "since": "2.0.0"
            },
            "name": {
                "name": "name",
                "type": "String",
                "description": "Store the full file name",
                "since": "2.0.0"
            },
            "path": {
                "name": "path",
                "type": "String",
                "description": "Store the full file path\nSome tokens can be used in the file path like:\n- %tmpDir: return the absolute tmp package directory path\n- %localDir: return the absolute .local package directory path\n- %cacheDir: return the absolute cache package directory path\n- %rootDir: return the absolute package root directory path\n- %srcDir: return the absolute source package directory path\n- %distDir: return the absolute dist package directory path",
                "since": "2.0.0"
            },
            "cwd": {
                "name": "cwd",
                "type": "String",
                "description": "Store the root directory where the file actually lives.\nThe root directory can be for example ```src/js``` for a file that lives under ```/my/cool/path/src/js/array/sort.js```.\nTo set this property, you need to pass the ```cwd``` setting through the constructor...",
                "since": "2.0.0"
            },
            "exists": {
                "name": "exists",
                "type": "Boolean",
                "description": "Specify if the file exists on the filesystem or not",
                "since": "2.0.0"
            },
            "relPath": {
                "name": "relPath",
                "type": "String",
                "description": "Store the path relative to the ```cwd``` property. To have access to this property, you MUST\nspecify the settings.cwd through the constructor",
                "since": "2.0.0"
            },
            "dirPath": {
                "name": "dirPath",
                "type": "String",
                "description": "Store the path to the folder where the file lives",
                "since": "2.0.0"
            },
            "extension": {
                "name": "extension",
                "type": "String",
                "description": "Store the file extension",
                "since": "2.0.0"
            },
            "fileSettings": {
                "name": "fileSettings",
                "type": "ISFileSettings",
                "description": "Access the file settings setted in the ```settings.file``` property",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "hash": {
                "name": "hash",
                "type": "String",
                "description": "Get the file `md5` hash",
                "since": "2.0.0"
            },
            "stats": {
                "name": "stats",
                "type": "Object",
                "description": "Access the file stats like the updated timestamp, sizes, etc...",
                "since": "2.0.0"
            },
            "content": {
                "name": "content",
                "type": "String",
                "description": "Access the file content",
                "since": "2.0.0"
            },
            "toObject": {
                "name": "toObject",
                "type": "Function",
                "description": "This method transform this instance into a plain object",
                "since": "2.0.0"
            },
            "startWatch": {
                "name": "startWatch",
                "type": "Function",
                "description": "This method allows you to start watching the file for events like \"update\", etc...",
                "since": "2.0.0"
            },
            "stopWatch": {
                "name": "stopWatch",
                "type": "Function",
                "description": "This method allows you to stop the watching process of the file",
                "since": "2.0.0"
            },
            "toString": {
                "name": "toString",
                "type": "Function",
                "description": "Return the string version of the file. Here, the path...",
                "since": "2.0.0"
            },
            "read": {
                "name": "read",
                "type": "Function",
                "description": "This method allows you to read the file asycronously",
                "since": "2.0.0"
            },
            "readSync": {
                "name": "readSync",
                "type": "Function",
                "description": "This method allows you to read the file syncronously",
                "since": "2.0.0"
            },
            "write": {
                "name": "write",
                "type": "Function",
                "description": "This method allows you to write the file asycronously",
                "since": "2.0.0"
            },
            "writeSync": {
                "name": "writeSync",
                "type": "Function",
                "description": "This method allows you to write the file sycronously",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/fs/SFile.ts",
        "relDirectory": "src/node/fs"
    },
    "sugar.node.fs.watch": {
        "name": "watch",
        "type": "Function",
        "description": "This function wrap the \"chokidar\" awesome library into an SPromise based \"api\" with some\ncool features like getting back an SFile instance for each files updated, etc...",
        "namespace": "sugar.node.fs",
        "status": "beta",
        "since": "2.0.0",
        "filename": "watch.ts",
        "extension": "ts",
        "path": "src/node/fs/watch.ts",
        "directory": "src/node/fs",
        "children": {
            "undefined": {}
        },
        "relPath": "src/node/fs/watch.ts",
        "relDirectory": "src/node/fs"
    },
    "sugar.node.fs.writeFile": {
        "name": "writeFile",
        "type": "Function",
        "description": "CWrite a file. If don't exist, will be created as well as the directory structure if needed... ( (async)",
        "namespace": "sugar.node.fs",
        "since": "2.0.0",
        "filename": "writeFile.ts",
        "extension": "ts",
        "path": "src/node/fs/writeFile.ts",
        "directory": "src/node/fs",
        "children": {},
        "relPath": "src/node/fs/writeFile.ts",
        "relDirectory": "src/node/fs"
    },
    "sugar.node.fs.writeFileSync": {
        "name": "writeFileSync",
        "type": "Function",
        "description": "Write a file. If don't exist, will be created as well as the directory structure if needed... (sync)",
        "namespace": "sugar.node.fs",
        "since": "2.0.0",
        "filename": "writeFileSync.ts",
        "extension": "ts",
        "path": "src/node/fs/writeFileSync.ts",
        "directory": "src/node/fs",
        "children": {},
        "relPath": "src/node/fs/writeFileSync.ts",
        "relDirectory": "src/node/fs"
    },
    "sugar.node.fs.writeJson": {
        "name": "writeJson",
        "type": "Function",
        "description": "Write a JSON file. If don't exist, will be created as well as the directory structure if needed... ( (async)",
        "namespace": "sugar.node.fs",
        "since": "2.0.0",
        "filename": "writeJson.ts",
        "extension": "ts",
        "path": "src/node/fs/writeJson.ts",
        "directory": "src/node/fs",
        "children": {},
        "relPath": "src/node/fs/writeJson.ts",
        "relDirectory": "src/node/fs"
    },
    "sugar.node.fs.writeJsonSync": {
        "name": "writeJsonSync",
        "type": "Function",
        "description": "Write a JSON file. If don't exist, will be created as well as the directory structure if needed... (sync)",
        "namespace": "sugar.node.fs",
        "since": "2.0.0",
        "filename": "writeJsonSync.ts",
        "extension": "ts",
        "path": "src/node/fs/writeJsonSync.ts",
        "directory": "src/node/fs",
        "children": {},
        "relPath": "src/node/fs/writeJsonSync.ts",
        "relDirectory": "src/node/fs"
    },
    "sugar.node.glob.resolveGlob": {
        "name": "resolveGlob",
        "type": "Function",
        "description": "This function simply resolve the passed glob pattern(s) and resolve his promise\nwith an Array of SFile instances to work with",
        "namespace": "sugar.node.glob",
        "status": "beta",
        "since": "2.0.0",
        "filename": "resolveGlob.ts",
        "extension": "ts",
        "path": "src/node/glob/resolveGlob.ts",
        "directory": "src/node/glob",
        "children": {},
        "relPath": "src/node/glob/resolveGlob.ts",
        "relDirectory": "src/node/glob"
    },
    "sugar.node.glob.SGlob": {
        "name": "SGlob",
        "type": "Class",
        "description": "This class represent a glob pattern and can be used to resolve some globs and get back\nan array of SFile instances or to extract some part of the pattern, etc...",
        "namespace": "sugar.node.glob",
        "status": "beta",
        "since": "2.0.0",
        "filename": "SGlob.ts",
        "extension": "ts",
        "path": "src/node/glob/SGlob.ts",
        "directory": "src/node/glob",
        "children": {
            "resolve": {
                "name": "resolve",
                "type": "Function",
                "description": "Alias to the ```resolveGlob``` function available under \"node/glob/resolveGlob\"",
                "static": true,
                "since": "2.0.0"
            },
            "extractGlob": {
                "name": "extractGlob",
                "type": "Function",
                "description": "Alias to the ```extractGlob``` function available under \"node/glob/extractGlob\"",
                "since": "2.0.0"
            },
            "extractNoneGlob": {
                "name": "extractNoneGlob",
                "type": "Function",
                "description": "Alias to the ```extractNoneGlob``` function available under \"node/glob/extractNoneGlob\"",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/glob/SGlob.ts",
        "relDirectory": "src/node/glob"
    },
    "sugar.node.init.initEnv": {
        "name": "initEnv",
        "type": "Function",
        "description": "This function \"simply\" init some environment variables that can be useful.\nHere's the list of added environment variables available:\n\n- PACKAGE_ROOT (null) {String}: Hold the filsystem package root path",
        "namespace": "sugar.node.init",
        "status": "wip",
        "since": "2.0.0",
        "filename": "initEnv.ts",
        "extension": "ts",
        "path": "src/node/init/initEnv.ts",
        "directory": "src/node/init",
        "children": {},
        "relPath": "src/node/init/initEnv.ts",
        "relDirectory": "src/node/init"
    },
    "sugar.node.ipc.SIpcClient": {
        "name": "SIpcClient",
        "type": "Class",
        "description": "This script check if a global ipc server exists aulready and if it is not the case,\nit will start one that you can use to communicate between your child process, etc...",
        "namespace": "sugar.node.ipc",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SIpcClient.ts",
        "extension": "ts",
        "path": "src/node/ipc/SIpcClient.ts",
        "directory": "src/node/ipc",
        "children": {
            "connectToParent": {
                "name": "connectToParent",
                "type": "Function",
                "description": "This static function allows you to connect to the parent process\nif their's one.",
                "static": true,
                "since": "2.0.0"
            },
            "hasParentServer": {
                "name": "hasParentServer",
                "type": "Function",
                "description": "This static function allows you to check if a parent server exists",
                "static": true,
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "id": {
                "name": "id",
                "type": "String",
                "description": "Access the id.",
                "since": "2.0.0"
            },
            "connect": {
                "name": "connect",
                "type": "Function",
                "description": "This method can be used to connect to a running server using his id.",
                "since": "2.0.0"
            },
            "emit": {
                "name": "emit",
                "type": "Function",
                "description": "This method override the SPromise one to add the ipc \"emit\" functionality to it.",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/ipc/SIpcClient.ts",
        "relDirectory": "src/node/ipc"
    },
    "sugar.node.ipc.SIpc": {
        "name": "SIpc",
        "type": "Class",
        "description": "This script check if a global ipc server exists aulready and if it is not the case,\nit will start one that you can use to communicate between your child process, etc...",
        "namespace": "sugar.node.ipc",
        "extends": "SPromise",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SIpcServer.ts",
        "extension": "ts",
        "path": "src/node/ipc/SIpcServer.ts",
        "directory": "src/node/ipc",
        "children": {
            "connexionParams": {
                "name": "connexionParams",
                "type": "Object",
                "description": "Store the server connexion params like \"port\", \"hostname\", \"id\", etc...",
                "since": "2.0.0"
            },
            "hasGlobalServer": {
                "name": "hasGlobalServer",
                "type": "Function",
                "description": "This static method check if a global server exists or not",
                "static": true,
                "since": "2.0.0"
            },
            "getGlobalServer": {
                "name": "getGlobalServer",
                "type": "Function",
                "description": "This method simply create a global server instance and returns it\nif needed, otherwise simply returns it",
                "static": true,
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "id": {
                "name": "id",
                "type": "String",
                "description": "Access the id.",
                "since": "2.0.0"
            },
            "start": {
                "name": "start",
                "type": "Function",
                "description": "This method simply start the server to let other clients connect to it",
                "since": "2.0.0"
            },
            "stop": {
                "name": "stop",
                "type": "Function",
                "description": "This method simply stop the server",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/ipc/SIpcServer.ts",
        "relDirectory": "src/node/ipc"
    },
    "sugar.node.is.childProcess": {
        "name": "childProcess",
        "type": "Function",
        "description": "Check if the current script is running as a child process or not by checking if the ```process.send``` exists, or is the environment variable ```IS_CHILD_PROCESS``` is true.",
        "namespace": "sugar.node.is",
        "status": "beta",
        "since": "2.0.0",
        "filename": "childProcess.ts",
        "extension": "ts",
        "path": "src/node/is/childProcess.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/childProcess.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.node.is.directory": {
        "name": "directory",
        "type": "Function",
        "description": "This function check if the passed string path is a directory or not",
        "namespace": "sugar.node.is",
        "since": "2.0.0",
        "filename": "directory.ts",
        "extension": "ts",
        "path": "src/node/is/directory.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/directory.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.node.is.inPackage": {
        "name": "inPackage",
        "type": "Function",
        "description": "This function check if the we are in (one of) the package(s) passed as parameter",
        "namespace": "sugar.node.is",
        "since": "2.0.0",
        "filename": "inPackage.ts",
        "extension": "ts",
        "path": "src/node/is/inPackage.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/inPackage.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.node.is.path": {
        "name": "path",
        "type": "Function",
        "description": "Check if the passed string is a valid path or not",
        "namespace": "sugar.node.is",
        "since": "2.0.0",
        "filename": "path.ts",
        "extension": "ts",
        "path": "src/node/is/path.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/path.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.node.is.symlink": {
        "name": "symlink",
        "type": "Function",
        "description": "This function check if the passed string path is a sySlink or not",
        "namespace": "sugar.node.is",
        "since": "2.0.0",
        "filename": "symlink.ts",
        "extension": "ts",
        "path": "src/node/is/symlink.ts",
        "directory": "src/node/is",
        "children": {},
        "relPath": "src/node/is/symlink.ts",
        "relDirectory": "src/node/is"
    },
    "sugar.node.js.SJsFile": {
        "name": "SJsFile",
        "type": "Class",
        "description": "This represent a javascript file",
        "namespace": "sugar.node.js",
        "extends": "SFile",
        "status": "beta",
        "since": "2.0.0",
        "filename": "SJsFile.ts",
        "extension": "ts",
        "path": "src/node/js/SJsFile.ts",
        "directory": "src/node/js",
        "children": {
            "SJsFileSettingsInterface": {
                "name": "SJsFileSettingsInterface",
                "type": "Class",
                "description": "The interface describing the jsFile settings",
                "extends": "SInterface",
                "status": "beta",
                "since": "2.0.0"
            },
            "SJsFileCtorSettingsInterface": {
                "name": "SJsFileCtorSettingsInterface",
                "type": "Class",
                "description": "The interface describing the jsFile settings",
                "extends": "SInterface",
                "status": "beta",
                "since": "2.0.0"
            },
            "jsFileSettings": {
                "name": "jsFileSettings",
                "type": "ISJsFileSettings",
                "description": "Access the jsFile settings",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "compile": {
                "name": "compile",
                "type": "Function",
                "description": "Simply compile the file using the settings that you can pass as argument",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/js/SJsFile.ts",
        "relDirectory": "src/node/js"
    },
    "sugar.node.keyboard.hotkey": {
        "name": "hotkey",
        "type": "Function",
        "description": "This function allows you to add keyboard listening process and subscribe to some sequences\nusing the SPromise instance returned.",
        "namespace": "sugar.node.keyboard",
        "status": "beta",
        "since": "2.0.0",
        "filename": "hotkey.ts",
        "extension": "ts",
        "path": "src/node/keyboard/hotkey.ts",
        "directory": "src/node/keyboard",
        "children": {},
        "relPath": "src/node/keyboard/hotkey.ts",
        "relDirectory": "src/node/keyboard"
    },
    "sugar.node.module.buildInNodeModules": {
        "name": "buildInNodeModules",
        "type": "Object",
        "description": "This object store the list of built-in node module\nwith a polyfill property for each that point to some\npolyfill depending on the context wanted. It can be \"browser\"\nor some others to come depending on the needs...",
        "namespace": "sugar.node.module",
        "since": "2.0.0",
        "filename": "buildInNodeModules.ts",
        "extension": "ts",
        "path": "src/node/module/buildInNodeModules.ts",
        "directory": "src/node/module",
        "children": {},
        "relPath": "src/node/module/buildInNodeModules.ts",
        "relDirectory": "src/node/module"
    },
    "sugar.node.monorepo.findPackages": {
        "name": "findPackages",
        "type": "Function",
        "description": "This function simply let you search for packages (that are not dependencies) inside\nthe passed folder and returns a object with relative paths as keys and package.json\ncontent value",
        "namespace": "sugar.node.monorepo",
        "status": "beta",
        "since": "2.0.0",
        "filename": "findPackages.ts",
        "extension": "ts",
        "path": "src/node/monorepo/findPackages.ts",
        "directory": "src/node/monorepo",
        "children": {},
        "relPath": "src/node/monorepo/findPackages.ts",
        "relDirectory": "src/node/monorepo"
    },
    "sugar.node.monorepo.linkPackages": {
        "name": "linkPackages",
        "type": "Function",
        "description": "This function simply check all the packages available in the monorepo\nand link then together using symbolic links in each node_modules folders",
        "namespace": "sugar.node.monorepo",
        "status": "beta",
        "since": "2.0.0",
        "filename": "linkPackages.ts",
        "extension": "ts",
        "path": "src/node/monorepo/linkPackages.ts",
        "directory": "src/node/monorepo",
        "children": {},
        "relPath": "src/node/monorepo/linkPackages.ts",
        "relDirectory": "src/node/monorepo"
    },
    "sugar.node.http.getFreePort": {
        "name": "getFreePort",
        "type": "Function",
        "description": "This function simply returns you a free port.\nYou can pass a port to check as parameter and if it is free, you will get it back as result",
        "namespace": "sugar.node.http",
        "status": "beta",
        "since": "2.0.0",
        "filename": "getFreePort.ts",
        "extension": "ts",
        "path": "src/node/network/getFreePort.ts",
        "directory": "src/node/network",
        "children": {},
        "relPath": "src/node/network/getFreePort.ts",
        "relDirectory": "src/node/network"
    },
    "sugar.node.network.ipAddress": {
        "name": "ipAddress",
        "type": "Function",
        "description": "This function allows you to get your ip address",
        "namespace": "sugar.node.network",
        "status": "beta",
        "since": "2.0.0",
        "filename": "ipAddress.ts",
        "extension": "ts",
        "path": "src/node/network/ipAddress.ts",
        "directory": "src/node/network",
        "children": {},
        "relPath": "src/node/network/ipAddress.ts",
        "relDirectory": "src/node/network"
    },
    "sugar.node.http.isPortFree": {
        "name": "isPortFree",
        "type": "Function",
        "description": "This function simply check if the passed port is free or not",
        "namespace": "sugar.node.http",
        "status": "beta",
        "since": "2.0.0",
        "filename": "isPortFree.ts",
        "extension": "ts",
        "path": "src/node/network/isPortFree.ts",
        "directory": "src/node/network",
        "children": {},
        "relPath": "src/node/network/isPortFree.ts",
        "relDirectory": "src/node/network"
    },
    "sugar.node.npm.SNpmBinProcess": {
        "name": "SNpmBinProcess",
        "type": "Class",
        "description": "This class represent the npm bin capabilities like install a bin globally or locally, uninstall it, etc...",
        "namespace": "sugar.node.npm",
        "extends": "SProcess",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SNpmBinProcess.ts",
        "extension": "ts",
        "path": "src/node/npm/SNpmBinProcess.ts",
        "directory": "src/node/npm",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "process": {
                "name": "process",
                "type": "Function",
                "description": "Method that actually execute the process",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/npm/SNpmBinProcess.ts",
        "relDirectory": "src/node/npm"
    },
    "sugar.node.package.json": {
        "name": "json",
        "type": "Function",
        "description": "This function return you the package.json of the current working package into object format",
        "namespace": "sugar.node.package",
        "status": "beta",
        "since": "2.0.0",
        "filename": "json.ts",
        "extension": "ts",
        "path": "src/node/package/json.ts",
        "directory": "src/node/package",
        "children": {},
        "relPath": "src/node/package/json.ts",
        "relDirectory": "src/node/package"
    },
    "sugar.node.package.namespace": {
        "name": "namespace",
        "type": "Function",
        "description": "This function take a string as parameter like a path, or a doted string like \"something.cool\" and return you\na proper namespace build using the package name, your passed string sanitized, etc...",
        "namespace": "sugar.node.package",
        "status": "wip",
        "since": "2.0.0",
        "filename": "namespace.ts",
        "extension": "ts",
        "path": "src/node/package/namespace.ts",
        "directory": "src/node/package",
        "children": {},
        "relPath": "src/node/package/namespace.ts",
        "relDirectory": "src/node/package"
    },
    "sugar.node.package.rootPath": {
        "name": "rootPath",
        "type": "Function",
        "description": "This function return the absolute path of your current working package",
        "namespace": "sugar.node.package",
        "status": "beta",
        "since": "2.0.0",
        "filename": "rootPath.ts",
        "extension": "ts",
        "path": "src/node/package/rootPath.ts",
        "directory": "src/node/package",
        "children": {},
        "relPath": "src/node/package/rootPath.ts",
        "relDirectory": "src/node/package"
    },
    "sugar.js.path.absolute": {
        "name": "absolute",
        "type": "Function",
        "description": "This function take as input either a string or an array of string and transform the pathes to absolute\ndepending on the second argument which is the \"from\" one.",
        "namespace": "sugar.js.path",
        "status": "beta",
        "since": "2.0.0",
        "filename": "absolute.ts",
        "extension": "ts",
        "path": "src/node/path/absolute.ts",
        "directory": "src/node/path",
        "children": {},
        "relPath": "src/node/path/absolute.ts",
        "relDirectory": "src/node/path"
    },
    "sugar.node.path.cacheDir": {
        "name": "cacheDir",
        "type": "Function",
        "description": "Return the package cache directory path",
        "namespace": "sugar.node.path",
        "since": "2.0.0",
        "filename": "cacheDir.ts",
        "extension": "ts",
        "path": "src/node/path/cacheDir.ts",
        "directory": "src/node/path",
        "children": {},
        "relPath": "src/node/path/cacheDir.ts",
        "relDirectory": "src/node/path"
    },
    "sugar.node.path.distDir": {
        "name": "distDir",
        "type": "Function",
        "description": "Return the package dist directory path",
        "namespace": "sugar.node.path",
        "since": "2.0.0",
        "filename": "distDir.ts",
        "extension": "ts",
        "path": "src/node/path/distDir.ts",
        "directory": "src/node/path",
        "children": {},
        "relPath": "src/node/path/distDir.ts",
        "relDirectory": "src/node/path"
    },
    "sugar.node.path.isInPackage": {
        "name": "isInPackage",
        "type": "Function",
        "description": "Return the path to either the first finded package root going up the folders, or the highest package root finded",
        "namespace": "sugar.node.path",
        "filename": "isInPackage.ts",
        "extension": "ts",
        "path": "src/node/path/isInPackage.ts",
        "directory": "src/node/path",
        "children": {},
        "relPath": "src/node/path/isInPackage.ts",
        "relDirectory": "src/node/path"
    },
    "sugar.node.fs.localDir": {
        "name": "localDir",
        "type": "Function",
        "description": "Return the .local directory path",
        "namespace": "sugar.node.fs",
        "since": "2.0.0",
        "filename": "localDir.ts",
        "extension": "ts",
        "path": "src/node/path/localDir.ts",
        "directory": "src/node/path",
        "children": {},
        "relPath": "src/node/path/localDir.ts",
        "relDirectory": "src/node/path"
    },
    "sugar.node.path.packageRoot": {
        "name": "packageRoot",
        "type": "Function",
        "description": "Return the path to either the first finded package root going up the folders, or the highest package root finded",
        "namespace": "sugar.node.path",
        "filename": "packageRoot.ts",
        "extension": "ts",
        "path": "src/node/path/packageRoot.ts",
        "directory": "src/node/path",
        "children": {},
        "relPath": "src/node/path/packageRoot.ts",
        "relDirectory": "src/node/path"
    },
    "sugar.js.path.relative": {
        "name": "relative",
        "type": "Function",
        "description": "This function take as input either a string or an array of string and transform the pathes to relative\ndepending on the second argument which is the \"from\" one.",
        "namespace": "sugar.js.path",
        "status": "beta",
        "since": "2.0.0",
        "filename": "relative.ts",
        "extension": "ts",
        "path": "src/node/path/relative.ts",
        "directory": "src/node/path",
        "children": {},
        "relPath": "src/node/path/relative.ts",
        "relDirectory": "src/node/path"
    },
    "sugar.node.path.rootDir": {
        "name": "rootDir",
        "type": "Function",
        "description": "Return the package root directory path",
        "namespace": "sugar.node.path",
        "since": "2.0.0",
        "filename": "rootDir.ts",
        "extension": "ts",
        "path": "src/node/path/rootDir.ts",
        "directory": "src/node/path",
        "children": {},
        "relPath": "src/node/path/rootDir.ts",
        "relDirectory": "src/node/path"
    },
    "sugar.node.path.srcDir": {
        "name": "srcDir",
        "type": "Function",
        "description": "Return the package dist directory path",
        "namespace": "sugar.node.path",
        "since": "2.0.0",
        "filename": "srcDir.ts",
        "extension": "ts",
        "path": "src/node/path/srcDir.ts",
        "directory": "src/node/path",
        "children": {},
        "relPath": "src/node/path/srcDir.ts",
        "relDirectory": "src/node/path"
    },
    "sugar.node.path.tmpDir": {
        "name": "tmpDir",
        "type": "Function",
        "description": "Return the os temp directory path",
        "namespace": "sugar.node.path",
        "since": "2.0.0",
        "filename": "tmpDir.ts",
        "extension": "ts",
        "path": "src/node/path/tmpDir.ts",
        "directory": "src/node/path",
        "children": {},
        "relPath": "src/node/path/tmpDir.ts",
        "relDirectory": "src/node/path"
    },
    "sugar.node.process.exitCleanup": {
        "name": "exitCleanup",
        "type": "Function",
        "description": "This function simply cleanup all the processes and other things that stay alive after that\nthe main process has been terminated",
        "namespace": "sugar.node.process",
        "status": "wip",
        "since": "2.0.0",
        "filename": "exitCleanup.ts",
        "extension": "ts",
        "path": "src/node/process/exitCleanup.ts",
        "directory": "src/node/process",
        "children": {},
        "relPath": "src/node/process/exitCleanup.ts",
        "relDirectory": "src/node/process"
    },
    "sugar.node.process.getRegisteredProcesses": {
        "name": "getRegisteredProcesses",
        "type": "Function",
        "description": "This function gives you back the processes stack registered using the \"registerProcess\" function.",
        "namespace": "sugar.node.process",
        "status": "wip",
        "since": "2.0.0",
        "filename": "getRegisteredProcesses.ts",
        "extension": "ts",
        "path": "src/node/process/getRegisteredProcesses.ts",
        "directory": "src/node/process",
        "children": {},
        "relPath": "src/node/process/getRegisteredProcesses.ts",
        "relDirectory": "src/node/process"
    },
    "sugar.node.process.hasExitCleanup": {
        "name": "hasExitCleanup",
        "type": "Function",
        "description": "This function return simply if the exit cleanup process using the \"node.process.hasExitCleanup\" function has been inited",
        "namespace": "sugar.node.process",
        "status": "wip",
        "since": "2.0.0",
        "filename": "hasExitCleanup.ts",
        "extension": "ts",
        "path": "src/node/process/hasExitCleanup.ts",
        "directory": "src/node/process",
        "children": {},
        "relPath": "src/node/process/hasExitCleanup.ts",
        "relDirectory": "src/node/process"
    },
    "sugar.node.process.onProcessExit": {
        "name": "onProcessExit",
        "type": "Function",
        "description": "This function allows you to register a callback to execute when the process\nis exiting by one of these events:\n- exit: when app is closing\n- SIGINT: on ctrl+c\n- SIGUSR1, SIGUSR2: catches \"kill pid\"\n- uncaughtException: catches uncaught exceptions",
        "namespace": "sugar.node.process",
        "status": "beta",
        "since": "2.0.0",
        "filename": "onProcessExit.ts",
        "extension": "ts",
        "path": "src/node/process/onProcessExit.ts",
        "directory": "src/node/process",
        "children": {},
        "relPath": "src/node/process/onProcessExit.ts",
        "relDirectory": "src/node/process"
    },
    "sugar.node.process.registerProcess": {
        "name": "registerProcess",
        "type": "Function",
        "description": "This function register a (child) process in a global stack.\nYou can access these registered processes using the \"getRegisteredProcesses\" function.",
        "namespace": "sugar.node.process",
        "status": "wip",
        "since": "2.0.0",
        "filename": "registerProcess.ts",
        "extension": "ts",
        "path": "src/node/process/registerProcess.ts",
        "directory": "src/node/process",
        "children": {},
        "relPath": "src/node/process/registerProcess.ts",
        "relDirectory": "src/node/process"
    },
    "sugar.node.process.SCliProcess": {
        "name": "SCliProcess",
        "description": "This class represent a subset of the SProcess class to make the use of command lines based process easy\nand clean.",
        "namespace": "sugar.node.process",
        "since": "2.0.0",
        "filename": "SCliProcess.ts",
        "extension": "ts",
        "path": "src/node/process/SCliProcess.ts",
        "directory": "src/node/process",
        "children": {
            "command": {
                "name": "command",
                "type": "String",
                "description": "Store the constructor passed command",
                "since": "2.0.0"
            },
            "cliProcessSettings": {
                "name": "cliProcessSettings",
                "type": "ISCliProcessSettings",
                "description": "",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "process": {
                "name": "process",
                "type": "Function",
                "description": "Override the ```SProcess.process``` method to allow the execution\nof command line process",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/process/SCliProcess.ts",
        "relDirectory": "src/node/process"
    },
    "sugar.node.process.spawn": {
        "name": "spawn",
        "type": "Function",
        "description": "This function allows you to spawn a new child process just like the native ```spawn``` node function\nbut add the support for SPromise and SIpc communication layers",
        "namespace": "sugar.node.process",
        "status": "wip",
        "since": "2.0.0",
        "filename": "spawn.ts",
        "extension": "ts",
        "path": "src/node/process/spawn.ts",
        "directory": "src/node/process",
        "children": {},
        "relPath": "src/node/process/spawn.ts",
        "relDirectory": "src/node/process"
    },
    "sugar.node.process.SProcess": {
        "name": "SProcess",
        "type": "Class",
        "description": "This class represent an SProcess run iteration that store things like\nthe value, the startTime, endTime, duration, state, etc...",
        "namespace": "sugar.node.process",
        "extends": "SEventEmitter",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SProcess.ts",
        "extension": "ts",
        "path": "src/node/process/SProcess.ts",
        "directory": "src/node/process",
        "children": {
            "params": {
                "name": "params",
                "type": "String",
                "description": "Access the process params",
                "since": "2.0.0"
            },
            "stdio": {
                "name": "stdio",
                "type": "SProcessOutput",
                "description": "Access the stdio class initiated if exists",
                "since": "2.0.0"
            },
            "state": {
                "name": "state",
                "type": "String",
                "description": "Access the process state like 'idle', 'ready', 'running', 'killed', 'error', 'success'",
                "since": "2.0.0"
            },
            "executionsStack": {
                "name": "executionsStack",
                "type": "ISProcessProcessObj[]",
                "description": "This array store each executions informations in separated objects\nthat store the duration, startTime, endTime, state, etc...",
                "since": "2.0.0"
            },
            "currentExecutionObj": {
                "name": "currentExecutionObj",
                "type": "ISProcessProcessObj",
                "description": "Store the current execution object info like startTime, endTime, duration, state, etc...",
                "since": "2.0.0"
            },
            "paramsInterface": {
                "name": "paramsInterface",
                "type": "Object",
                "description": "Store the parameters interface to apply on the params object and on the initialParams object.\nCan come from the static ```interfaces.params``` property or the ```settings.paramsInterface``` one.",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "process": {
                "name": "process",
                "type": "Function",
                "description": "This is the method you have to implement in you SProcess class. It will be called\nwhen you call the ```run``` method with the params, etc...\nYou have to return an SPromise instance in order that the SProcess class is able to keep\ntrack of your process state, logs, etc...",
                "since": "2.0.0"
            },
            "ready": {
                "name": "ready",
                "type": "Function",
                "description": "This method allows you to set the process in the \"ready\" state.\nThis will make the stdio initialize, etc...",
                "since": "2.0.0"
            },
            "run": {
                "name": "run",
                "type": "Function",
                "description": "Run the process by calling the ```process``` method implemented on your\nSProcess class (if exists).\nTake care of starting timers for duration tracking, etc...",
                "since": "2.0.0"
            },
            "kill": {
                "name": "kill",
                "type": "Function",
                "description": "This method will simply kill the process and call the \"cancel\" method\non the SPromise super instance as well as on the passed \"promise\" instance",
                "since": "2.0.0"
            },
            "cancel": {
                "name": "cancel",
                "type": "Function",
                "description": "This method allows you to cancel the process",
                "since": "2.0.0"
            },
            "isRunning": {
                "name": "isRunning",
                "type": "Function",
                "description": "This method allows you to check if the process is currently running or not",
                "since": "2.0.0"
            },
            "isIdle": {
                "name": "isIdle",
                "type": "Function",
                "description": "This method allows you to check if the process is currently idle or not",
                "since": "2.0.0"
            },
            "isReady": {
                "name": "isReady",
                "type": "Function",
                "description": "This method allows you to check if the process is currently ready or not",
                "since": "2.0.0"
            },
            "isKilled": {
                "name": "isKilled",
                "type": "Function",
                "description": "This method allows you to check if the process has been killed or not",
                "since": "2.0.0"
            },
            "isError": {
                "name": "isError",
                "type": "Function",
                "description": "This method allows you to check if the process is in error state or not",
                "since": "2.0.0"
            },
            "isSuccess": {
                "name": "isSuccess",
                "type": "Function",
                "description": "This method allows you to check if the process is in success state or not",
                "since": "2.0.0"
            },
            "log": {
                "name": "log",
                "type": "Function",
                "description": "This method allows you to log a message that will be catched by the parent manager class"
            },
            "error": {
                "name": "error",
                "type": "Function",
                "description": "This method allows you to error a message that will be catched by the parent manager class"
            }
        },
        "relPath": "src/node/process/SProcess.ts",
        "relDirectory": "src/node/process"
    },
    "sugar.node.process.SProcessManager": {
        "name": "SProcessManager",
        "type": "Class",
        "description": "This class represent a process handler class that will fire up some SProcess processes",
        "namespace": "sugar.node.process",
        "extends": "SPromise",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SProcessManager.ts",
        "extension": "ts",
        "path": "src/node/process/SProcessManager.ts",
        "directory": "src/node/process",
        "children": {
            "initialParams": {
                "name": "initialParams",
                "type": "Object",
                "description": "Store the initial params object",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "deamon": {
                "name": "deamon",
                "type": "SDeamon",
                "description": "Access the deamon used with this process. If not exist, will return undefined",
                "since": "2.0.0"
            },
            "kill": {
                "name": "kill",
                "type": "Function",
                "description": "This method take care of the things to do when the process\nhas beek killed like update the state, etc...",
                "since": "2.0.0"
            },
            "run": {
                "name": "run",
                "type": "Function",
                "description": "This method is meant to be overrided by the subclass\nin order to run the actual process code.\nYour ```run``` method has to call this one at the end and pass it an SPromise instance that represent your process.\nThis will be usefull to automate some tasks like the duration calculation, updating the state automatically,\npipe the events from your process promise to this process class directly, etc...",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/process/SProcessManager.ts",
        "relDirectory": "src/node/process"
    },
    "sugar.node.process.SProcessPipe": {
        "name": "SProcessPipe",
        "type": "Class",
        "description": "This class allows you to handle easily some process pipes.\nA process pipe is simply multiple processes that will execute one after\nthe other by passing the params to one after the other\nand will be resolved once all the processes have been executed correctly",
        "namespace": "sugar.node.process",
        "since": "2.0.0",
        "filename": "SProcessPipe.ts",
        "extension": "ts",
        "path": "src/node/process/SProcessPipe.ts",
        "directory": "src/node/process",
        "children": {
            "processPipeSettings": {
                "name": "processPipeSettings",
                "type": "ISProcessPipeSettings",
                "description": "Access the process pipe settings",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "run": {
                "name": "run",
                "type": "Function",
                "description": "Execute the processes pipe",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/process/SProcessPipe.ts",
        "relDirectory": "src/node/process"
    },
    "sugar.node.scss.SScssFile": {
        "name": "SScssFile",
        "type": "Class",
        "description": "This represent an scss file with some additional properties like \"dependencies\", etc...",
        "namespace": "sugar.node.scss",
        "extends": "SFile",
        "status": "beta",
        "since": "2.0.0",
        "filename": "SScssFile.ts",
        "extension": "ts",
        "path": "src/node/scss/SScssFile.ts",
        "directory": "src/node/scss",
        "children": {
            "SScssFileSettingsInterface": {
                "name": "SScssFileSettingsInterface",
                "type": "Class",
                "description": "Scss file settings interface",
                "extends": "SInterface",
                "status": "beta",
                "since": "2.0.0"
            },
            "SScssFileCtorSettingsInterface": {
                "name": "SScssFileCtorSettingsInterface",
                "type": "Class",
                "description": "Scss file constructor settings interface",
                "extends": "SInterface",
                "status": "beta",
                "since": "2.0.0"
            },
            "scssFileSettings": {
                "name": "scssFileSettings",
                "type": "ISScssFileSettings",
                "description": "Access the scssFile settings",
                "since": "2.0.0"
            },
            "dependencyType": {
                "name": "dependencyType",
                "type": "String",
                "description": "Store the dependendy type of this file.",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "dependencies": {
                "name": "dependencies",
                "type": "Object<SScssFile>",
                "description": "Get the dependencies of this file",
                "since": "2.0.0"
            },
            "dependenciesHash": {
                "name": "dependenciesHash",
                "type": "String",
                "description": "Parse the content of the file to find the dependencies like import and use statements,\nthen generate a hash depending on these dependencies",
                "since": "2.0.0"
            },
            "mixinsAndVariables": {
                "name": "mixinsAndVariables",
                "type": "String",
                "description": "Get the mixins and variables from the file content",
                "since": "2.0.0"
            },
            "compile": {
                "name": "compile",
                "type": "Function",
                "description": "Simply compile the file using the settings that you can pass as argument",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/scss/SScssFile.ts",
        "relDirectory": "src/node/scss"
    },
    "sugar.node.search.SSearchResultItem": {
        "name": "SSearchResultItem",
        "type": "Class",
        "description": "This class represent a search result with all his fields, etc...",
        "namespace": "sugar.node.search",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SSearchResultItem.ts",
        "extension": "ts",
        "path": "src/node/search/SSearchResultItem.ts",
        "directory": "src/node/search",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "title": {
                "name": "title",
                "type": "String",
                "description": "Access the title property"
            },
            "description": {
                "name": "description",
                "type": "String",
                "description": "Access the description property"
            },
            "action": {
                "name": "action",
                "type": "String",
                "description": "Access the action property"
            },
            "toJson": {
                "name": "toJson",
                "type": "Function",
                "description": "This method return a JSON version of the docMap item"
            }
        },
        "relPath": "src/node/search/SSearchResultItem.ts",
        "relDirectory": "src/node/search"
    },
    "sugar.node.stdio.SStdio": {
        "name": "SStdio",
        "type": "Class",
        "description": "This class represent the base one for all the \"Stdio\"\ncompatible setting.",
        "namespace": "sugar.node.stdio",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SStdio.ts",
        "extension": "ts",
        "path": "src/node/stdio/SStdio.ts",
        "directory": "src/node/stdio",
        "children": {
            "registeredComponents": {
                "name": "registeredComponents",
                "type": "ISStdioRegisteredComponents",
                "description": "Store the registered stdio components",
                "static": true,
                "since": "2.0.0"
            },
            "registerComponent": {
                "name": "registerComponent",
                "type": "Function",
                "description": "This static method allows you to register a new Stdio component\nthat you will be able to use then through the \"type\" property of\nthe logObj passed to the STerminalStdio instance.",
                "static": true,
                "since": "2.0.0"
            },
            "stdioSettings": {
                "name": "stdioSettings",
                "type": "ISStdioSettings",
                "description": "Access the stdio settings",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "display": {
                "name": "display",
                "type": "Function",
                "description": "This method tells the stdio instance that it has been showned.",
                "since": "2.0.0"
            },
            "hide": {
                "name": "hide",
                "type": "Function",
                "description": "This method tells the stdio instance that it has been hided",
                "since": "2.0.0"
            },
            "registerSource": {
                "name": "registerSource",
                "type": "Function",
                "description": "This method simply listen to the process and log the values getted\nfrom it into the panel"
            },
            "log": {
                "name": "log",
                "type": "Function",
                "description": "This method is the one called to log something.\nIt will call the ```_log``` method that each implementation of the\nSStdio class MUST have",
                "since": "2.0.0"
            },
            "isDisplayed": {
                "name": "isDisplayed",
                "type": "Boolean",
                "description": "true if the stdio if actually displayed, false if not",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/stdio/SStdio.ts",
        "relDirectory": "src/node/stdio"
    },
    "sugar.node.stdio.stdio": {
        "name": "stdio",
        "type": "Function",
        "description": "This function simply take a SProcess compatible process instance and display the Stdio\naccordingly to the context where this process is running. If the Stdio is in a childProcess,\nit will just console.log the log, error, etc... to the terminal but if the\nprocess is in the main terminal instance, it will be wrapped inside a blessed box instance\nand displayed nicely.",
        "namespace": "sugar.node.stdio",
        "status": "wip",
        "since": "2.0.0",
        "filename": "stdio.ts",
        "extension": "ts",
        "path": "src/node/stdio/stdio.ts",
        "directory": "src/node/stdio",
        "children": {},
        "relPath": "src/node/stdio/stdio.ts",
        "relDirectory": "src/node/stdio"
    },
    "sugar.node.svelte.SSvelteFile": {
        "name": "SSvelteFile",
        "type": "Class",
        "description": "This represent a svelte file",
        "namespace": "sugar.node.svelte",
        "extends": "SFile",
        "status": "beta",
        "since": "2.0.0",
        "filename": "SSvelteFile.ts",
        "extension": "ts",
        "path": "src/node/svelte/SSvelteFile.ts",
        "directory": "src/node/svelte",
        "children": {
            "SSvelteFileSettingsInterface": {
                "name": "SSvelteFileSettingsInterface",
                "type": "Class",
                "description": "The interface describing the svelteFile settings",
                "extends": "SInterface",
                "status": "beta",
                "since": "2.0.0"
            },
            "SSvelteFileCtorSettingsInterface": {
                "name": "SSvelteFileCtorSettingsInterface",
                "type": "Class",
                "description": "The interface describing the svelteFile settings",
                "extends": "SInterface",
                "status": "beta",
                "since": "2.0.0"
            },
            "svelteFileSettings": {
                "name": "svelteFileSettings",
                "type": "ISSvelteFileSettings",
                "description": "Access the svelteFile settings",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "compile": {
                "name": "compile",
                "type": "Function",
                "description": "Simply compile the file using the settings that you can pass as argument",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/svelte/SSvelteFile.ts",
        "relDirectory": "src/node/svelte"
    },
    "sugar.node.template.render": {
        "name": "render",
        "type": "Function",
        "description": "This function take a view path, a data object and optionaly a settings object to compile\nthe view and return a simple Promise that will be resolved or rejected depending on the\nprocess status.",
        "namespace": "sugar.node.template",
        "status": "wip",
        "since": "2.0.0",
        "filename": "render.ts",
        "extension": "ts",
        "path": "src/node/template/render.ts",
        "directory": "src/node/template",
        "children": {},
        "relPath": "src/node/template/render.ts",
        "relDirectory": "src/node/template"
    },
    "sugar.node.template.STemplate": {
        "name": "STemplate",
        "type": "Class",
        "description": "This class represent a template that can be rendered using all the supported render engines listed in the features bellow.",
        "namespace": "sugar.node.template",
        "status": "wip",
        "since": "2.0.0",
        "filename": "STemplate.ts",
        "extension": "ts",
        "path": "src/node/template/STemplate.ts",
        "directory": "src/node/template",
        "children": {
            "engines": {
                "name": "engines",
                "type": "Object",
                "description": "Store the registered engines using the ```registerEngine``` static method",
                "static": true,
                "since": "2.0.0"
            },
            "dataHandlers": {
                "name": "dataHandlers",
                "type": "Object",
                "description": "Store the registered dataHandlers using the ```registerDataHandler``` static method",
                "static": true,
                "since": "2.0.0"
            },
            "defaultRootDirs": {
                "name": "defaultRootDirs",
                "type": "Array",
                "description": "This static property store the default root directories where the class\nwill search for views to render",
                "static": true,
                "since": "2.0.0"
            },
            "getRootDirs": {
                "name": "getRootDirs",
                "type": "Function",
                "description": "This function accept an array of root directories\nand return the final array with the default root directories\nadded correctly",
                "static": true,
                "since": "2.0.0"
            },
            "registerEngine": {
                "name": "registerEngine",
                "type": "Function",
                "description": "This static method can be used to register a compatible __STemplateEngine engine class\ninto the available STemplate engines.",
                "static": true,
                "since": "2.0.0"
            },
            "registerDataHandler": {
                "name": "registerDataHandler",
                "type": "Function",
                "description": "This static method can be used to register a compatible __STemplateEngine engine class\ninto the available STemplate engines.",
                "static": true,
                "since": "2.0.0"
            },
            "getViewInfo": {
                "name": "getViewInfo",
                "type": "Function",
                "description": "This static method allows you to give a \"potential\" view path (with or without the extension) and get\nback an object that describe the view with infos like \"type\", \"path\", \"extension\", etc...\nIf nothing is found, you will get ```false``` back.",
                "static": true,
                "since": true
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "render": {
                "name": "render",
                "type": "Function",
                "description": "Main method to render your view by passing it an object of data to use as well as an object of settings to override the default passed onces",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/template/STemplate.ts",
        "relDirectory": "src/node/template"
    },
    "sugar.node.terminal.center": {
        "name": "center",
        "type": "Function",
        "description": "Allow to center one or more lines in the terminal depending on the process.env.STDOUT_PADDING environment variable\nSettings:\n- spaceChar (~) {String}: Which character to consider as a space that will be replaced by an actual space",
        "namespace": "sugar.node.terminal",
        "status": "beta",
        "since": "2.0.0",
        "filename": "center.ts",
        "extension": "ts",
        "path": "src/node/terminal/center.ts",
        "directory": "src/node/terminal",
        "children": {},
        "relPath": "src/node/terminal/center.ts",
        "relDirectory": "src/node/terminal"
    },
    "sugar.node.terminal.columns": {
        "name": "columns",
        "type": "Function",
        "description": "Display your content using columns. The number of columns is defined by the number of items in the content array",
        "namespace": "sugar.node.terminal",
        "status": "beta",
        "since": "2.0.0",
        "filename": "columns.ts",
        "extension": "ts",
        "path": "src/node/terminal/columns.ts",
        "directory": "src/node/terminal",
        "children": {},
        "relPath": "src/node/terminal/columns.ts",
        "relDirectory": "src/node/terminal"
    },
    "sugar.node.terminal.cursorPos": {
        "name": "cursorPos",
        "type": "Function",
        "description": "Return the terminal cursor position in {x,y} format.",
        "namespace": "sugar.node.terminal",
        "status": "wip",
        "since": "2.0.0",
        "filename": "cursorPos.ts",
        "extension": "ts",
        "path": "src/node/terminal/cursorPos.ts",
        "directory": "src/node/terminal",
        "children": {},
        "relPath": "src/node/terminal/cursorPos.ts",
        "relDirectory": "src/node/terminal"
    },
    "sugar.node.blessed.escapeStack": {
        "name": "escapeStack",
        "type": "Function",
        "description": "This function allows you to register a callback to know when it's time to \"close\" or do whatever you want on escape click.\nThe principle is that when you register a callback, the system will save the \"index\" at which you have registered this callback\nand increase this \"index\" for the next callback registration. When you press escape key, the \"index\" will decrease and the callback(s)\nregistered at the new index will be called.",
        "namespace": "sugar.node.blessed",
        "status": "wip",
        "since": "2.0.0",
        "filename": "escapeStack.ts",
        "extension": "ts",
        "path": "src/node/terminal/escapeStack.ts",
        "directory": "src/node/terminal",
        "children": {},
        "relPath": "src/node/terminal/escapeStack.ts",
        "relDirectory": "src/node/terminal"
    },
    "sugar.node.terminal.parseHtml": {
        "name": "parseHtml",
        "type": "Function",
        "description": "Parse the simple html tags to format the terminal message",
        "namespace": "sugar.node.terminal",
        "status": "wip",
        "since": "2.0.0",
        "filename": "parseHtml.ts",
        "extension": "ts",
        "path": "src/node/terminal/parseHtml.ts",
        "directory": "src/node/terminal",
        "children": {},
        "relPath": "src/node/terminal/parseHtml.ts",
        "relDirectory": "src/node/terminal"
    },
    "sugar.node.terminal.parseMarkdown": {
        "name": "parseMarkdown",
        "type": "Function",
        "description": "Parse the simple markdown tags to format the terminal message",
        "namespace": "sugar.node.terminal",
        "status": "wip",
        "since": "2.0.0",
        "filename": "parseMarkdown.ts",
        "extension": "ts",
        "path": "src/node/terminal/parseMarkdown.ts",
        "directory": "src/node/terminal",
        "children": {},
        "relPath": "src/node/terminal/parseMarkdown.ts",
        "relDirectory": "src/node/terminal"
    },
    "sugar.node.terminal.SApp": {
        "name": "SApp",
        "type": "Class",
        "description": "This class define an application in the terminal that you can easily configure to have the look and feel that you want\nthrough simple settings described bellow.",
        "namespace": "sugar.node.terminal",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SApp.ts",
        "extension": "ts",
        "path": "src/node/terminal/SApp.ts",
        "directory": "src/node/terminal",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "nextMenu": {
                "name": "nextMenu",
                "type": "Function",
                "description": "This method allows you to pass to the next menu item"
            },
            "previousMenu": {
                "name": "previousMenu",
                "type": "Function",
                "description": "This method allows you to pass to the next menu item"
            },
            "goTo": {
                "name": "goTo",
                "type": "Function",
                "description": "This method allows you to change the \"page\" by passing a simple url like 'build/scss' depending on the registered routes in your app."
            },
            "isActive": {
                "name": "isActive",
                "type": "Function",
                "description": "This method allows you to check if the passed url is the active one"
            }
        },
        "relPath": "src/node/terminal/SApp.ts",
        "relDirectory": "src/node/terminal"
    },
    "sugar.node.terminal.SHeader": {
        "name": "SHeader",
        "type": "Class",
        "description": "This class define a \"header\" in the terminal that you can easily configure to have the look and feel that you want\nthrough simple settings described bellow.",
        "namespace": "sugar.node.terminal",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SHeader.ts",
        "extension": "ts",
        "path": "src/node/terminal/SHeader.ts",
        "directory": "src/node/terminal",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            }
        },
        "relPath": "src/node/terminal/SHeader.ts",
        "relDirectory": "src/node/terminal"
    },
    "sugar.node.terminal.SSimpleApp": {
        "name": "SSimpleApp",
        "type": "Class",
        "description": "This class define an application in the terminal that you can easily configure to have the look and feel that you want\nthrough simple settings described bellow.",
        "namespace": "sugar.node.terminal",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SSimpleApp.ts",
        "extension": "ts",
        "path": "src/node/terminal/SSimpleApp.ts",
        "directory": "src/node/terminal",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            }
        },
        "relPath": "src/node/terminal/SSimpleApp.ts",
        "relDirectory": "src/node/terminal"
    },
    "sugar.node.transition.objectProperties": {
        "name": "objectProperties",
        "type": "Function",
        "description": "This function take a start object and a target object and proceed to the transition of all properties\ndepending on the passed settings object that is documented bellow.",
        "namespace": "sugar.node.transition",
        "status": "beta",
        "since": "2.0.0",
        "filename": "objectProperties.ts",
        "extension": "ts",
        "path": "src/node/transition/objectProperties.ts",
        "directory": "src/node/transition",
        "children": {},
        "relPath": "src/node/transition/objectProperties.ts",
        "relDirectory": "src/node/transition"
    },
    "sugar.node.typescript.STsFile": {
        "name": "STsFile",
        "type": "Class",
        "description": "This represent a typescript file",
        "namespace": "sugar.node.typescript",
        "extends": "SFile",
        "status": "beta",
        "since": "2.0.0",
        "filename": "STsFile.ts",
        "extension": "ts",
        "path": "src/node/typescript/STsFile.ts",
        "directory": "src/node/typescript",
        "children": {
            "tsFileSettings": {
                "name": "tsFileSettings",
                "type": "ISTsFileSettings",
                "description": "Access the tsFile settings",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "compile": {
                "name": "compile",
                "type": "Function",
                "description": "Simply compile the file using the settings that you can pass as argument",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/typescript/STsFile.ts",
        "relDirectory": "src/node/typescript"
    },
    "sugar.php.array.Sugar\\ar\\merge_deep": {
        "name": "Sugar\\ar\\merge_deep",
        "type": "Function",
        "description": "This function take two arrays and merge them deeply by keeping distinct\nproperty keys.",
        "namespace": "sugar.php.array",
        "since": "2.0.0",
        "filename": "merge_deep.php",
        "extension": "php",
        "path": "src/php/array/merge_deep.php",
        "directory": "src/php/array",
        "children": {},
        "relPath": "src/php/array/merge_deep.php",
        "relDirectory": "src/php/array"
    },
    "sugar.php.path.Sugar\\path\\is_absolute": {
        "name": "Sugar\\path\\is_absolute",
        "type": "Function",
        "description": "This method simply check if the passed path is absolute or not",
        "namespace": "sugar.php.path",
        "since": "2.0.0",
        "filename": "is_absolute.php",
        "extension": "php",
        "path": "src/php/path/is_absolute.php",
        "directory": "src/php/path",
        "children": {},
        "relPath": "src/php/path/is_absolute.php",
        "relDirectory": "src/php/path"
    },
    "sugar.php.url.Sugar\\url\\is_url": {
        "name": "Sugar\\url\\is_url",
        "type": "Function",
        "description": "This function simply check if the passed string a an url or not",
        "namespace": "sugar.php.url",
        "since": "2.0.0",
        "filename": "is_url.php",
        "extension": "php",
        "path": "src/php/url/is_url.php",
        "directory": "src/php/url",
        "children": {},
        "relPath": "src/php/url/is_url.php",
        "relDirectory": "src/php/url"
    },
    "sugar.scss.core.init": {
        "name": "init",
        "type": "Mixin",
        "description": "Init the sugar toolkit.\nThis has to be called *AFTER** all the [./_s-setup.scss] mixin call\nand *BEFORE** all the others sugar mixins and functions calls",
        "namespace": "sugar.scss.core",
        "filename": "_init.scss",
        "extension": "scss",
        "path": "src/scss/core/_init.scss",
        "directory": "src/scss/core",
        "children": {},
        "relPath": "src/scss/core/_init.scss",
        "relDirectory": "src/scss/core"
    },
    "sugar.scss.core.mixin.setup": {
        "name": "setup",
        "type": "mixin",
        "description": "Setup sugar toolkit by overriding the default [settings](../_settings.scss)\nThis has to be called *BEFORE** the [s-init mixin](./_s-init.scss)",
        "namespace": "sugar.scss.core.mixin",
        "filename": "_setup.scss",
        "extension": "scss",
        "path": "src/scss/core/_setup.scss",
        "directory": "src/scss/core",
        "children": {},
        "relPath": "src/scss/core/_setup.scss",
        "relDirectory": "src/scss/core"
    },
    "sugar.js.cache.cacheAdapters.SCacheAdapter": {
        "name": "SCacheAdapter",
        "type": "Class",
        "description": "Base class for SCache adapters",
        "namespace": "sugar.js.cache.cacheAdapters",
        "since": "2.0.0",
        "filename": "SCacheAdapter.ts",
        "extension": "ts",
        "path": "src/node/cache/adapters/SCacheAdapter.ts",
        "directory": "src/node/cache/adapters",
        "children": {
            "cache": {
                "name": "cache",
                "type": "SCache",
                "description": "Store the cache instance which if used",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Construct the SCacheAdapter instance with the settings passed in object format. See description bellow."
            }
        },
        "relPath": "src/node/cache/adapters/SCacheAdapter.ts",
        "relDirectory": "src/node/cache/adapters"
    },
    "sugar.js.cache.adapters.SCacheFsAdapter": {
        "name": "SCacheFsAdapter",
        "type": "Class",
        "description": "A filesystem SCache adapter that allows you to store your cache items on the user system",
        "namespace": "sugar.js.cache.adapters",
        "since": "2.0.0",
        "filename": "SCacheLsAdapter.ts",
        "extension": "ts",
        "path": "src/js/cache/adapters/SCacheLsAdapter.ts",
        "directory": "src/js/cache/adapters",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Construct the SCacheFsAdapter instance with the settings passed in object format. See description bellow."
            },
            "set": {
                "name": "set",
                "type": "Function",
                "description": "Set a cache item in the localstorage"
            },
            "get": {
                "name": "get",
                "type": "Function",
                "description": "Get a cache item in the localstorage"
            },
            "delete": {
                "name": "delete",
                "type": "Function",
                "description": "Delete a cache item on the filesystem"
            },
            "clear": {
                "name": "clear",
                "type": "Function",
                "description": "Clear all the items in the current cache"
            },
            "keys": {
                "name": "keys",
                "type": "Function",
                "description": "Return an array of all the items keys saved in this cache instance"
            }
        },
        "relPath": "src/js/cache/adapters/SCacheLsAdapter.ts",
        "relDirectory": "src/js/cache/adapters"
    },
    "sugar.js.config.adapters.SConfigAdapter": {
        "name": "SConfigAdapter",
        "type": "Class",
        "description": "Base class for SCache adapters",
        "namespace": "sugar.js.config.adapters",
        "status": "beta",
        "since": "2.0.0",
        "filename": "SConfigAdapter.ts",
        "extension": "ts",
        "path": "src/node/config/adapters/SConfigAdapter.ts",
        "directory": "src/node/config/adapters",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Construct the SConfigAdapter instance with the settings passed in object format. See description bellow."
            },
            "name": {
                "name": "name",
                "type": "String",
                "description": "Access the adapter setted name"
            },
            "settings": {
                "name": "settings",
                "type": "Object",
                "description": "Access the adapter setted settings"
            }
        },
        "relPath": "src/node/config/adapters/SConfigAdapter.ts",
        "relDirectory": "src/node/config/adapters"
    },
    "sugar.js.config.adapters.SConfigLsAdapter": {
        "name": "SConfigLsAdapter",
        "type": "Class",
        "description": "This Local Storage adapter for the SConfig class let you define a name for your config and then you can just\nlet the SConfig class do the work for you...",
        "namespace": "sugar.js.config.adapters",
        "filename": "SConfigLsAdapter.ts",
        "extension": "ts",
        "path": "src/js/config/adapters/SConfigLsAdapter.ts",
        "directory": "src/js/config/adapters",
        "children": {},
        "relPath": "src/js/config/adapters/SConfigLsAdapter.ts",
        "relDirectory": "src/js/config/adapters"
    },
    "sugar.js.console.html.tagsMap": {
        "name": "tagsMap",
        "type": "Object",
        "description": "Store the tag->function map used in ```parseHtml``` function for example",
        "namespace": "sugar.js.console.html",
        "since": "2.0.0",
        "filename": "tagsMap.ts",
        "extension": "ts",
        "path": "src/node/console/html/tagsMap.ts",
        "directory": "src/node/console/html",
        "children": {},
        "relPath": "src/node/console/html/tagsMap.ts",
        "relDirectory": "src/node/console/html"
    },
    "sugar.js.convert.undefined": {
        "type": "Function",
        "description": "Take a markdown string as input and convert it to HTML.",
        "namespace": "sugar.js.convert",
        "status": "wip",
        "since": "2.0.0",
        "filename": "htmlFromDocblocks.ts",
        "extension": "ts",
        "path": "src/node/convert/html/htmlFromDocblocks.ts",
        "directory": "src/node/convert/html",
        "children": {},
        "relPath": "src/node/convert/html/htmlFromDocblocks.ts",
        "relDirectory": "src/node/convert/html"
    },
    "sugar.js.convert.htmlFromMarkdown": {
        "name": "htmlFromMarkdown",
        "type": "Function",
        "description": "Take a markdown string as input and convert it to HTML.",
        "namespace": "sugar.js.convert",
        "status": "wip",
        "since": "2.0.0",
        "filename": "htmlFromMarkdown.ts",
        "extension": "ts",
        "path": "src/node/convert/html/htmlFromMarkdown.ts",
        "directory": "src/node/convert/html",
        "children": {},
        "relPath": "src/node/convert/html/htmlFromMarkdown.ts",
        "relDirectory": "src/node/convert/html"
    },
    "sugar.js.descriptor.rules.maxRule": {
        "name": "maxRule",
        "type": "ISDescriptorRule",
        "description": "This rule allows you to make sure a value is not under a certain value",
        "namespace": "sugar.js.descriptor.rules",
        "since": "2.0.0",
        "filename": "maxRule.ts",
        "extension": "ts",
        "path": "src/node/descriptor/rules/maxRule.ts",
        "directory": "src/node/descriptor/rules",
        "children": {},
        "relPath": "src/node/descriptor/rules/maxRule.ts",
        "relDirectory": "src/node/descriptor/rules"
    },
    "sugar.js.descriptor.rules.minRule": {
        "name": "minRule",
        "type": "ISDescriptorRule",
        "description": "This rule allows you to make sure a value is not under a certain value",
        "namespace": "sugar.js.descriptor.rules",
        "since": "2.0.0",
        "filename": "minRule.ts",
        "extension": "ts",
        "path": "src/node/descriptor/rules/minRule.ts",
        "directory": "src/node/descriptor/rules",
        "children": {},
        "relPath": "src/node/descriptor/rules/minRule.ts",
        "relDirectory": "src/node/descriptor/rules"
    },
    "sugar.js.descriptor.rules.requiredRule": {
        "name": "requiredRule",
        "type": "ISDescriptorRule",
        "description": "This rule allows you to make sure that your value is not ```undefined```\nor a nullish value like ```null``` or ```''```.",
        "namespace": "sugar.js.descriptor.rules",
        "since": "2.0.0",
        "filename": "requiredRule.ts",
        "extension": "ts",
        "path": "src/node/descriptor/rules/requiredRule.ts",
        "directory": "src/node/descriptor/rules",
        "children": {},
        "relPath": "src/node/descriptor/rules/requiredRule.ts",
        "relDirectory": "src/node/descriptor/rules"
    },
    "sugar.js.descriptor.rules.sFileRule": {
        "name": "sFileRule",
        "type": "ISDescriptorRule",
        "description": "This rule allows you to make sure that your value is not ```undefined```\nor a nullish value like ```null``` or ```''```.",
        "namespace": "sugar.js.descriptor.rules",
        "since": "2.0.0",
        "filename": "sFileRule.ts",
        "extension": "ts",
        "path": "src/node/descriptor/rules/sFileRule.ts",
        "directory": "src/node/descriptor/rules",
        "children": {},
        "relPath": "src/node/descriptor/rules/sFileRule.ts",
        "relDirectory": "src/node/descriptor/rules"
    },
    "sugar.js.descriptor.rules.typeRule": {
        "name": "typeRule",
        "type": "ISDescriptorRule",
        "description": "This rule allows you to make sure a value does match the passed type like:\n- String | Array<String>\n- Boolean\n- Number\n- etc...",
        "namespace": "sugar.js.descriptor.rules",
        "since": "2.0.0",
        "filename": "typeRule.ts",
        "extension": "ts",
        "path": "src/node/descriptor/rules/typeRule.ts",
        "directory": "src/node/descriptor/rules",
        "children": {},
        "relPath": "src/node/descriptor/rules/typeRule.ts",
        "relDirectory": "src/node/descriptor/rules"
    },
    "sugar.js.docblock.outputs.SDocblockHtmlOutput": {
        "name": "SDocblockHtmlOutput",
        "type": "Class",
        "description": "This class represent an SDocblock output like \"html\", \"html\", etc...\nSupported docblock tags:\n- @type\n- @namespace\n- @name\n- @static\n- @get\n- @set\n- @since\n- @description\n- @param\n- @example\n- @author",
        "namespace": "sugar.js.docblock.outputs",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SDocblockHtmlOutput.ts",
        "extension": "ts",
        "path": "src/node/docblock/outputs/SDocblockHtmlOutput.ts",
        "directory": "src/node/docblock/outputs",
        "children": {
            "supportedTags": {
                "name": "supportedTags",
                "type": "Array<String>",
                "description": "Store the list of supported docblock tags",
                "static": true,
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/docblock/outputs/SDocblockHtmlOutput.ts",
        "relDirectory": "src/node/docblock/outputs"
    },
    "sugar.js.docblock.outputs.SDocblockMarkdownOutput": {
        "name": "SDocblockMarkdownOutput",
        "type": "Class",
        "description": "This class represent an SDocblock output like \"markdown\", \"html\", etc...\nSupported docblock tags:\n- @type\n- @namespace\n- @name\n- @static\n- @get\n- @set\n- @since\n- @description\n- @param\n- @example\n- @author",
        "namespace": "sugar.js.docblock.outputs",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SDocblockMarkdownOutput.ts",
        "extension": "ts",
        "path": "src/node/docblock/outputs/SDocblockMarkdownOutput.ts",
        "directory": "src/node/docblock/outputs",
        "children": {
            "supportedTags": {
                "name": "supportedTags",
                "type": "Array<String>",
                "description": "Store the list of supported docblock tags",
                "static": true,
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/docblock/outputs/SDocblockMarkdownOutput.ts",
        "relDirectory": "src/node/docblock/outputs"
    },
    "sugar.js.docblock.tags.author": {
        "name": "author",
        "type": "Function",
        "description": "Parse the author tag",
        "namespace": "sugar.js.docblock.tags",
        "status": "wip",
        "since": "2.0.0",
        "filename": "author.ts",
        "extension": "ts",
        "path": "src/node/docblock/tags/author.ts",
        "directory": "src/node/docblock/tags",
        "children": {},
        "relPath": "src/node/docblock/tags/author.ts",
        "relDirectory": "src/node/docblock/tags"
    },
    "sugar.js.docblock.tags.description": {
        "name": "description",
        "type": "Function",
        "description": "Parse the description tag",
        "namespace": "sugar.js.docblock.tags",
        "status": "wip",
        "since": "2.0.0",
        "filename": "description.ts",
        "extension": "ts",
        "path": "src/node/docblock/tags/description.ts",
        "directory": "src/node/docblock/tags",
        "children": {},
        "relPath": "src/node/docblock/tags/description.ts",
        "relDirectory": "src/node/docblock/tags"
    },
    "sugar.js.docblock.tags.example": {
        "name": "example",
        "type": "Function",
        "description": "Parse the example tag",
        "namespace": "sugar.js.docblock.tags",
        "status": "wip",
        "since": "2.0.0",
        "filename": "example.ts",
        "extension": "ts",
        "path": "src/node/docblock/tags/example.ts",
        "directory": "src/node/docblock/tags",
        "children": {},
        "relPath": "src/node/docblock/tags/example.ts",
        "relDirectory": "src/node/docblock/tags"
    },
    "sugar.js.docblock.tags.param": {
        "name": "param",
        "type": "Function",
        "description": "Parse the param tag",
        "namespace": "sugar.js.docblock.tags",
        "status": "wip",
        "since": "2.0.0",
        "filename": "param.ts",
        "extension": "ts",
        "path": "src/node/docblock/tags/param.ts",
        "directory": "src/node/docblock/tags",
        "children": {},
        "relPath": "src/node/docblock/tags/param.ts",
        "relDirectory": "src/node/docblock/tags"
    },
    "sugar.js.docblock.tags.return": {
        "name": "return",
        "type": "Function",
        "description": "Parse the return tag",
        "namespace": "sugar.js.docblock.tags",
        "status": "wip",
        "since": "2.0.0",
        "filename": "return.ts",
        "extension": "ts",
        "path": "src/node/docblock/tags/return.ts",
        "directory": "src/node/docblock/tags",
        "children": {},
        "relPath": "src/node/docblock/tags/return.ts",
        "relDirectory": "src/node/docblock/tags"
    },
    "sugar.js.docblock.tags.simpleValue": {
        "name": "simpleValue",
        "type": "Function",
        "description": "Parse the simpleValue tag",
        "namespace": "sugar.js.docblock.tags",
        "status": "wip",
        "since": "2.0.0",
        "filename": "simpleValue.ts",
        "extension": "ts",
        "path": "src/node/docblock/tags/simpleValue.ts",
        "directory": "src/node/docblock/tags",
        "children": {},
        "relPath": "src/node/docblock/tags/simpleValue.ts",
        "relDirectory": "src/node/docblock/tags"
    },
    "sugar.js.docblock.tags.snippet": {
        "name": "snippet",
        "type": "Function",
        "description": "Parse the snippet tag",
        "namespace": "sugar.js.docblock.tags",
        "status": "wip",
        "since": "2.0.0",
        "filename": "snippet.ts",
        "extension": "ts",
        "path": "src/node/docblock/tags/snippet.ts",
        "directory": "src/node/docblock/tags",
        "children": {},
        "relPath": "src/node/docblock/tags/snippet.ts",
        "relDirectory": "src/node/docblock/tags"
    },
    "sugar.js.log.SLogConsoleAdapter": {
        "name": "SLogConsoleAdapter",
        "type": "Class",
        "description": "This class allows you to log your messages, errors, etc... easily through some adapters that cover some targets like \"console\" of course,\n\"mail\", \"slack\", etc...",
        "namespace": "sugar.js.log",
        "status": "beta",
        "since": "2.0.0",
        "filename": "SLogConsoleAdapter.ts",
        "extension": "ts",
        "path": "src/node/log/adapters/SLogConsoleAdapter.ts",
        "directory": "src/node/log/adapters",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "log": {
                "name": "log",
                "type": "Function",
                "description": "This is the main method of the logger. It actually log the message passed as parameter to the console"
            }
        },
        "relPath": "src/node/log/adapters/SLogConsoleAdapter.ts",
        "relDirectory": "src/node/log/adapters"
    },
    "sugar.js.log.SLogMailAdapter": {
        "name": "SLogMailAdapter",
        "type": "Class",
        "description": "This class allows you to log your messages, errors, etc... easily through some adapters that cover some targets like \"console\" of course,\n\"mail\", \"slack\", etc...",
        "namespace": "sugar.js.log",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SLogMailAdapter.ts",
        "extension": "ts",
        "path": "src/node/log/adapters/SLogMailAdapter.ts",
        "directory": "src/node/log/adapters",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "log": {
                "name": "log",
                "type": "Function",
                "description": "This is the main method of the logger. It actually log the message passed as parameter to the console"
            }
        },
        "relPath": "src/node/log/adapters/SLogMailAdapter.ts",
        "relDirectory": "src/node/log/adapters"
    },
    "sugar.js.log.htmlPresets.console": {
        "name": "console",
        "type": "Function",
        "description": "Replace all the \"log\" html tags like \"<red>\", \"<bold>\", etc... with the corresponding syntax for the terminal",
        "namespace": "sugar.js.log.htmlPresets",
        "status": "wip",
        "since": "2.0.0",
        "filename": "console.ts",
        "extension": "ts",
        "path": "src/node/log/htmlPresets/console.ts",
        "directory": "src/node/log/htmlPresets",
        "children": {},
        "relPath": "src/node/log/htmlPresets/console.ts",
        "relDirectory": "src/node/log/htmlPresets"
    },
    "sugar.js.log.htmlPresets.files": {
        "name": "files",
        "type": "Function",
        "description": "Replace all the \"log\" html tags like \"<red>\", \"<bold>\", etc... with the corresponding syntax for the files",
        "namespace": "sugar.js.log.htmlPresets",
        "status": "wip",
        "since": "2.0.0",
        "filename": "files.ts",
        "extension": "ts",
        "path": "src/node/log/htmlPresets/files.ts",
        "directory": "src/node/log/htmlPresets",
        "children": {},
        "relPath": "src/node/log/htmlPresets/files.ts",
        "relDirectory": "src/node/log/htmlPresets"
    },
    "sugar.js.log.htmlPresets.mail": {
        "name": "mail",
        "type": "Function",
        "description": "Replace all the \"log\" html tags like \"<red>\", \"<bold>\", etc... with the corresponding syntax for mail formating",
        "namespace": "sugar.js.log.htmlPresets",
        "status": "wip",
        "since": "2.0.0",
        "filename": "mail.ts",
        "extension": "ts",
        "path": "src/node/log/htmlPresets/mail.ts",
        "directory": "src/node/log/htmlPresets",
        "children": {},
        "relPath": "src/node/log/htmlPresets/mail.ts",
        "relDirectory": "src/node/log/htmlPresets"
    },
    "sugar.js.type.descriptor.arrayTypeDescriptor": {
        "name": "arrayTypeDescriptor",
        "type": "ISTypeDescriptor",
        "description": "Describe the type \"array\" with some utilities methods like \"is\", \"cast\", etc...",
        "namespace": "sugar.js.type.descriptor",
        "since": "2.0.0",
        "filename": "arrayTypeDescriptor.ts",
        "extension": "ts",
        "path": "src/node/type/descriptors/arrayTypeDescriptor.ts",
        "directory": "src/node/type/descriptors",
        "children": {},
        "relPath": "src/node/type/descriptors/arrayTypeDescriptor.ts",
        "relDirectory": "src/node/type/descriptors"
    },
    "sugar.js.type.descriptor.bigintTypeDescriptor": {
        "name": "bigintTypeDescriptor",
        "type": "ISTypeDescriptor",
        "description": "Describe the type \"bigint\" with some utilities methods like \"is\", \"cast\", etc...",
        "namespace": "sugar.js.type.descriptor",
        "since": "2.0.0",
        "filename": "bigintTypeDescriptor.ts",
        "extension": "ts",
        "path": "src/node/type/descriptors/bigintTypeDescriptor.ts",
        "directory": "src/node/type/descriptors",
        "children": {},
        "relPath": "src/node/type/descriptors/bigintTypeDescriptor.ts",
        "relDirectory": "src/node/type/descriptors"
    },
    "sugar.js.type.descriptor.booleanTypeDescriptor": {
        "name": "booleanTypeDescriptor",
        "type": "ISTypeDescriptor",
        "description": "Describe the type \"boolean\" with some utilities methods like \"is\", \"cast\", etc...",
        "namespace": "sugar.js.type.descriptor",
        "since": "2.0.0",
        "filename": "booleanTypeDescriptor.ts",
        "extension": "ts",
        "path": "src/node/type/descriptors/booleanTypeDescriptor.ts",
        "directory": "src/node/type/descriptors",
        "children": {},
        "relPath": "src/node/type/descriptors/booleanTypeDescriptor.ts",
        "relDirectory": "src/node/type/descriptors"
    },
    "sugar.js.type.descriptor.classTypeDescriptor": {
        "name": "classTypeDescriptor",
        "type": "ISTypeDescriptor",
        "description": "Describe the type \"class\" with some utilities methods like \"is\", \"cast\", etc...",
        "namespace": "sugar.js.type.descriptor",
        "since": "2.0.0",
        "filename": "classTypeDescriptor.ts",
        "extension": "ts",
        "path": "src/node/type/descriptors/classTypeDescriptor.ts",
        "directory": "src/node/type/descriptors",
        "children": {},
        "relPath": "src/node/type/descriptors/classTypeDescriptor.ts",
        "relDirectory": "src/node/type/descriptors"
    },
    "sugar.js.type.descriptor.dateTypeDescriptor": {
        "name": "dateTypeDescriptor",
        "type": "ISTypeDescriptor",
        "description": "Describe the type \"date\" with some utilities methods like \"is\", \"cast\", etc...",
        "namespace": "sugar.js.type.descriptor",
        "since": "2.0.0",
        "filename": "dateTypeDescriptor.ts",
        "extension": "ts",
        "path": "src/node/type/descriptors/dateTypeDescriptor.ts",
        "directory": "src/node/type/descriptors",
        "children": {},
        "relPath": "src/node/type/descriptors/dateTypeDescriptor.ts",
        "relDirectory": "src/node/type/descriptors"
    },
    "sugar.js.type.descriptor.functionTypeDescriptor": {
        "name": "functionTypeDescriptor",
        "type": "ISTypeDescriptor",
        "description": "Describe the type \"function\" with some utilities methods like \"is\", \"cast\", etc...",
        "namespace": "sugar.js.type.descriptor",
        "since": "2.0.0",
        "filename": "functionTypeDescriptor.ts",
        "extension": "ts",
        "path": "src/node/type/descriptors/functionTypeDescriptor.ts",
        "directory": "src/node/type/descriptors",
        "children": {},
        "relPath": "src/node/type/descriptors/functionTypeDescriptor.ts",
        "relDirectory": "src/node/type/descriptors"
    },
    "sugar.js.type.descriptor.integerTypeDescriptor": {
        "name": "integerTypeDescriptor",
        "type": "ISTypeDescriptor",
        "description": "Describe the type \"integer\" with some utilities methods like \"is\", \"cast\", etc...",
        "namespace": "sugar.js.type.descriptor",
        "since": "2.0.0",
        "filename": "integerTypeDescriptor.ts",
        "extension": "ts",
        "path": "src/node/type/descriptors/integerTypeDescriptor.ts",
        "directory": "src/node/type/descriptors",
        "children": {},
        "relPath": "src/node/type/descriptors/integerTypeDescriptor.ts",
        "relDirectory": "src/node/type/descriptors"
    },
    "sugar.js.type.descriptor.mapTypeDescriptor": {
        "name": "mapTypeDescriptor",
        "type": "ISTypeDescriptor",
        "description": "Describe the type \"set\" with some utilities methods like \"is\", \"cast\", etc...",
        "namespace": "sugar.js.type.descriptor",
        "since": "2.0.0",
        "filename": "setTypeDescriptor.ts",
        "extension": "ts",
        "path": "src/node/type/descriptors/setTypeDescriptor.ts",
        "directory": "src/node/type/descriptors",
        "children": {},
        "relPath": "src/node/type/descriptors/setTypeDescriptor.ts",
        "relDirectory": "src/node/type/descriptors"
    },
    "sugar.js.type.descriptor.nullTypeDescriptor": {
        "name": "nullTypeDescriptor",
        "type": "ISTypeDescriptor",
        "description": "Describe the type \"null\" with some utilities methods like \"is\", \"cast\", etc...",
        "namespace": "sugar.js.type.descriptor",
        "since": "2.0.0",
        "filename": "nullTypeDescriptor.ts",
        "extension": "ts",
        "path": "src/node/type/descriptors/nullTypeDescriptor.ts",
        "directory": "src/node/type/descriptors",
        "children": {},
        "relPath": "src/node/type/descriptors/nullTypeDescriptor.ts",
        "relDirectory": "src/node/type/descriptors"
    },
    "sugar.js.type.descriptor.numberTypeDescriptor": {
        "name": "numberTypeDescriptor",
        "type": "ISTypeDescriptor",
        "description": "Describe the type \"number\" with some utilities methods like \"is\", \"cast\", etc...",
        "namespace": "sugar.js.type.descriptor",
        "since": "2.0.0",
        "filename": "numberTypeDescriptor.ts",
        "extension": "ts",
        "path": "src/node/type/descriptors/numberTypeDescriptor.ts",
        "directory": "src/node/type/descriptors",
        "children": {},
        "relPath": "src/node/type/descriptors/numberTypeDescriptor.ts",
        "relDirectory": "src/node/type/descriptors"
    },
    "sugar.js.type.descriptor.objectTypeDescriptor": {
        "name": "objectTypeDescriptor",
        "type": "ISTypeDescriptor",
        "description": "Describe the type \"object\" with some utilities methods like \"is\", \"cast\", etc...",
        "namespace": "sugar.js.type.descriptor",
        "since": "2.0.0",
        "filename": "objectTypeDescriptor.ts",
        "extension": "ts",
        "path": "src/node/type/descriptors/objectTypeDescriptor.ts",
        "directory": "src/node/type/descriptors",
        "children": {},
        "relPath": "src/node/type/descriptors/objectTypeDescriptor.ts",
        "relDirectory": "src/node/type/descriptors"
    },
    "sugar.js.type.descriptor.stringTypeDescriptor": {
        "name": "stringTypeDescriptor",
        "type": "ISTypeDescriptor",
        "description": "Describe the type \"string\" with some utilities methods like \"is\", \"cast\", etc...",
        "namespace": "sugar.js.type.descriptor",
        "since": "2.0.0",
        "filename": "stringTypeDescriptor.ts",
        "extension": "ts",
        "path": "src/node/type/descriptors/stringTypeDescriptor.ts",
        "directory": "src/node/type/descriptors",
        "children": {},
        "relPath": "src/node/type/descriptors/stringTypeDescriptor.ts",
        "relDirectory": "src/node/type/descriptors"
    },
    "sugar.js.type.descriptor.symbolTypeDescriptor": {
        "name": "symbolTypeDescriptor",
        "type": "ISTypeDescriptor",
        "description": "Describe the type \"symbol\" with some utilities methods like \"is\", \"cast\", etc...",
        "namespace": "sugar.js.type.descriptor",
        "since": "2.0.0",
        "filename": "symbolTypeDescriptor.ts",
        "extension": "ts",
        "path": "src/node/type/descriptors/symbolTypeDescriptor.ts",
        "directory": "src/node/type/descriptors",
        "children": {},
        "relPath": "src/node/type/descriptors/symbolTypeDescriptor.ts",
        "relDirectory": "src/node/type/descriptors"
    },
    "sugar.js.type.descriptor.undefinedTypeDescriptor": {
        "name": "undefinedTypeDescriptor",
        "type": "ISTypeDescriptor",
        "description": "Describe the type \"undefined\" with some utilities methods like \"is\", \"cast\", etc...",
        "namespace": "sugar.js.type.descriptor",
        "since": "2.0.0",
        "filename": "undefinedTypeDescriptor.ts",
        "extension": "ts",
        "path": "src/node/type/descriptors/undefinedTypeDescriptor.ts",
        "directory": "src/node/type/descriptors",
        "children": {},
        "relPath": "src/node/type/descriptors/undefinedTypeDescriptor.ts",
        "relDirectory": "src/node/type/descriptors"
    },
    "sugar.js.type.descriptor.weakmapTypeDescriptor": {
        "name": "weakmapTypeDescriptor",
        "type": "ISTypeDescriptor",
        "description": "Describe the type \"map\" with some utilities methods like \"is\", \"cast\", etc...",
        "namespace": "sugar.js.type.descriptor",
        "since": "2.0.0",
        "filename": "weakmapTypeDescriptor.ts",
        "extension": "ts",
        "path": "src/node/type/descriptors/weakmapTypeDescriptor.ts",
        "directory": "src/node/type/descriptors",
        "children": {},
        "relPath": "src/node/type/descriptors/weakmapTypeDescriptor.ts",
        "relDirectory": "src/node/type/descriptors"
    },
    "sugar.js.type.descriptor.weaksetTypeDescriptor": {
        "name": "weaksetTypeDescriptor",
        "type": "ISTypeDescriptor",
        "description": "Describe the type \"WeakSet\" with some utilities methods like \"is\", \"cast\", etc...",
        "namespace": "sugar.js.type.descriptor",
        "since": "2.0.0",
        "filename": "weaksetTypeDescriptor.ts",
        "extension": "ts",
        "path": "src/node/type/descriptors/weaksetTypeDescriptor.ts",
        "directory": "src/node/type/descriptors",
        "children": {},
        "relPath": "src/node/type/descriptors/weaksetTypeDescriptor.ts",
        "relDirectory": "src/node/type/descriptors"
    },
    "sugar.node.ui.sugar.SSugarApp": {
        "name": "SSugarApp",
        "type": "Class",
        "description": "This class represent the main sugar ui one. His work it to:\n- Aggregate all the wanted modules registered through the ```sugar-app.config.js``` file\n- Instantiate all the modules like frontend server, build scss, etc...\n- Configure the frontend server to serve all the needed files like js or css ones, etc...\n- Open a socket connection to allow the front modules parts to talk with the back parts easily",
        "namespace": "sugar.node.ui.sugar",
        "extends": "SPromise",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SSugarApp.ts",
        "extension": "ts",
        "path": "src/node/app/sugar/SSugarApp.ts",
        "directory": "src/node/app/sugar",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/app/sugar/SSugarApp.ts",
        "relDirectory": "src/node/app/sugar"
    },
    "sugar.node.ui.sugar.SSugarAppModule": {
        "name": "SSugarAppModule",
        "type": "Class",
        "description": "This class represent the process that expose every registered \"modules\"\nthrough through a socket connection and handle the talk between\nthe backend parts with the frontend parts of each modules.",
        "namespace": "sugar.node.ui.sugar",
        "extends": "SEventEmitter",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SSugarAppModule.ts",
        "extension": "ts",
        "path": "src/node/app/sugar/SSugarAppModule.ts",
        "directory": "src/node/app/sugar",
        "children": {
            "state": {
                "name": "state",
                "type": "String",
                "description": "Store the module state",
                "since": "2.0.0"
            },
            "shortcuts": {
                "name": "shortcuts",
                "type": "ISSugarAppModuleShortcuts",
                "description": "Store the shortcuts provided",
                "since": "2.0.0"
            },
            "description": {
                "name": "description",
                "type": "String",
                "description": "Access the module description",
                "since": "2.0.0"
            },
            "params": {
                "name": "params",
                "type": "Object",
                "description": "Store the passed module parameters",
                "since": "2.0.0"
            },
            "settings": {
                "name": "settings",
                "type": "Object",
                "description": "Store the passed module settings",
                "since": "2.0.0"
            },
            "processPath": {
                "name": "processPath",
                "type": "String",
                "description": "Store the passed module process path",
                "since": "2.0.0"
            },
            "stdio": {
                "name": "stdio",
                "type": "Function",
                "description": "Access the blessed based UI of this module",
                "since": "2.0.0"
            },
            "undefined": {
                "type": "blessed.box|SBlessedStdio",
                "description": "Store the stdio instance used to be displayed in the GUI",
                "since": "2.0.'0"
            },
            "getRegisteredModules": {
                "name": "getRegisteredModules",
                "type": "Function",
                "description": "This static method allows you to get back all the registered modules during this process",
                "static": true,
                "since": "2.0.0"
            },
            "getRegisteredModuleById": {
                "name": "getRegisteredModuleById",
                "type": "Function",
                "description": "This static method allows you to get back one of the registered modules using his id",
                "static": true,
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "process": {
                "name": "process",
                "type": "SProcess",
                "description": "Access the \"main\" registered process",
                "since": "2.0.0"
            },
            "processIdUsedForState": {
                "name": "processIdUsedForState",
                "type": "String",
                "description": "Get the process id that is used for setting the module state",
                "since": "2.0.0"
            },
            "activate": {
                "name": "activate",
                "type": "Function",
                "description": "This method allows you to activate the module.\nThis mean that the shortcuts, etc will be usable",
                "since": "2.0.0"
            },
            "unactivate": {
                "name": "unactivate",
                "type": "Function",
                "description": "This method allows you to unactivate the module.\nThis mean that the shortcuts, etc will be unusable",
                "since": "2.0.0"
            },
            "isActive": {
                "name": "isActive",
                "type": "Function",
                "description": "This method simply return true or false depending on the active module state",
                "since": "2.0.0"
            },
            "ready": {
                "name": "ready",
                "type": "Function",
                "description": "This method simply notify the main SugarUi class that this module\nis ready",
                "since": "2.0.0"
            },
            "error": {
                "name": "error",
                "type": "Function",
                "description": "This method simply notify the main SugarUi class that this module\nhas an error",
                "since": "2.0.0"
            },
            "registerProcess": {
                "name": "registerProcess",
                "type": "Function",
                "description": "This method allows you to register a new process \"SProcess\" based instance\nthat you will be able to use later on by calling the \"run\" or \"stop\" module method.",
                "since": "2.0.0"
            },
            "getProcess": {
                "name": "getProcess",
                "type": "Function",
                "description": "This method allows you to get a process instance using his id.\nIf no id is passed, the \"main\" one will be retreived",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/app/sugar/SSugarAppModule.ts",
        "relDirectory": "src/node/app/sugar"
    },
    "sugar.node.app.sugar.SSugarAppModuleTerminalUi": {
        "name": "SSugarAppModuleTerminalUi",
        "type": "Class",
        "description": "This class represent the main one to create some UI that fit in the SSugarAppTerminalUi\nbased terminal interface",
        "namespace": "sugar.node.app.sugar",
        "extends": "SBlessedComponent",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SSugarAppModuleTerminalUi.ts",
        "extension": "ts",
        "path": "src/node/app/sugar/SSugarAppModuleTerminalUi.ts",
        "directory": "src/node/app/sugar",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "log": {
                "name": "log",
                "type": "Function",
                "description": "This is an alias of the this.$log.log SBlessedOutput method",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/app/sugar/SSugarAppModuleTerminalUi.ts",
        "relDirectory": "src/node/app/sugar"
    },
    "sugar.node.ui.sugar.SSugarAppProcess": {
        "name": "SSugarAppProcess",
        "type": "Class",
        "description": "This class represent the process that expose every registered \"modules\"\nthrough through a socket connection and handle the talk between\nthe backend parts with the frontend parts of each modules.",
        "namespace": "sugar.node.ui.sugar",
        "extends": "SProcess",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SSugarAppProcess.ts",
        "extension": "ts",
        "path": "src/node/app/sugar/SSugarAppProcess.ts",
        "directory": "src/node/app/sugar",
        "children": {
            "loadedModules": {
                "name": "loadedModules",
                "type": "ISSugarAppModulesDescriptor",
                "description": "Store the loaded modules objects",
                "since": "2.0.0"
            },
            "sugarAppSettings": {
                "name": "sugarAppSettings",
                "type": "ISSugarAppSettings",
                "description": "Access the sugar app settings",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "process": {
                "name": "process",
                "type": "Function",
                "description": "Method that execute the frontend server code, listen for errors, etc...",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/app/sugar/SSugarAppProcess.ts",
        "relDirectory": "src/node/app/sugar"
    },
    "sugar.node.app.sugar.SSugarAppProcessModule": {
        "name": "SSugarAppProcessModule",
        "type": "Class",
        "description": "This class represent the simple process module for the Sugar UI.",
        "namespace": "sugar.node.app.sugar",
        "extends": "SSugarAppModule",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SSugarAppProcessModule.ts",
        "extension": "ts",
        "path": "src/node/app/sugar/SSugarAppProcessModule.ts",
        "directory": "src/node/app/sugar",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/app/sugar/SSugarAppProcessModule.ts",
        "relDirectory": "src/node/app/sugar"
    },
    "sugar.node.ui.sugar.SSugarAppTerminalStdio": {
        "name": "SSugarAppTerminalStdio",
        "type": "Class",
        "description": "This class represent the Sugar UI interface in the terminal.",
        "namespace": "sugar.node.ui.sugar",
        "extends": "SBlessedComponent",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SSugarAppTerminalStdio.ts",
        "extension": "ts",
        "path": "src/node/app/sugar/SSugarAppTerminalStdio.ts",
        "directory": "src/node/app/sugar",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/app/sugar/SSugarAppTerminalStdio.ts",
        "relDirectory": "src/node/app/sugar"
    },
    "sugar.node.babel.ast.isAtTopLevel": {
        "name": "isAtTopLevel",
        "type": "Function",
        "description": "Check if the passed path is at top level of the AST or not",
        "namespace": "sugar.node.babel.ast",
        "status": "wip",
        "since": "2.0.0",
        "filename": "isAtTopLevel.ts",
        "extension": "ts",
        "path": "src/node/babel/ast/isAtTopLevel.ts",
        "directory": "src/node/babel/ast",
        "children": {},
        "relPath": "src/node/babel/ast/isAtTopLevel.ts",
        "relDirectory": "src/node/babel/ast"
    },
    "sugar.node.blessed.box.SBlessedWindowBox": {
        "name": "SBlessedWindowBox",
        "type": "Class",
        "description": "This class gives you the ability to display windowed style boxes with a header, a body and a footer",
        "namespace": "sugar.node.blessed.box",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SWindowBox.ts",
        "extension": "ts",
        "path": "src/node/blessed/box/SWindowBox.ts",
        "directory": "src/node/blessed/box",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            }
        },
        "relPath": "src/node/blessed/box/SWindowBox.ts",
        "relDirectory": "src/node/blessed/box"
    },
    "sugar.node.blessed.input.SBlessedInput": {
        "name": "SBlessedInput",
        "type": "Class",
        "description": "This class represent a simple input",
        "namespace": "sugar.node.blessed.input",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SInput.ts",
        "extension": "ts",
        "path": "src/node/blessed/form/SInput.ts",
        "directory": "src/node/blessed/form",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            }
        },
        "relPath": "src/node/blessed/form/SInput.ts",
        "relDirectory": "src/node/blessed/form"
    },
    "sugar.node.blessed.notification.SBlessedNotification": {
        "name": "SBlessedNotification",
        "type": "Class",
        "description": "This class represent a notification that will be in a corner of the terminal\nwith some features like:\n- Timeout\n- On click action\n- and more...",
        "namespace": "sugar.node.blessed.notification",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SNotification.ts",
        "extension": "ts",
        "path": "src/node/blessed/notification/SNotification.ts",
        "directory": "src/node/blessed/notification",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/blessed/notification/SNotification.ts",
        "relDirectory": "src/node/blessed/notification"
    },
    "sugar.node.blessed.popup.SBlessedInputPopup": {
        "name": "SBlessedInputPopup",
        "type": "Class",
        "description": "This class represent a simple input in a popup",
        "namespace": "sugar.node.blessed.popup",
        "extends": "SBlessedPopup",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SInputPopup.ts",
        "extension": "ts",
        "path": "src/node/blessed/popup/SInputPopup.ts",
        "directory": "src/node/blessed/popup",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            }
        },
        "relPath": "src/node/blessed/popup/SInputPopup.ts",
        "relDirectory": "src/node/blessed/popup"
    },
    "sugar.node.blessed.popup.SBlessedPopup": {
        "name": "SBlessedPopup",
        "type": "Class",
        "description": "This class is the base one for all the sugar blessed components like input, panel, etc...",
        "namespace": "sugar.node.blessed.popup",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SPopup.ts",
        "extension": "ts",
        "path": "src/node/blessed/popup/SPopup.ts",
        "directory": "src/node/blessed/popup",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "append": {
                "name": "append",
                "type": "Function",
                "description": "This method is simply used to append content inside the popup"
            },
            "update": {
                "name": "update",
                "type": "Function",
                "description": "This method simply draw the header"
            }
        },
        "relPath": "src/node/blessed/popup/SPopup.ts",
        "relDirectory": "src/node/blessed/popup"
    },
    "sugar.node.blessed.utils.innerWidth": {
        "name": "innerWidth",
        "type": "Function",
        "description": "This function simply returns you the actual inner width (width - left/right paddings)\nof the passed component.\nReturns -1 if the component or it's parent is not displayed...",
        "namespace": "sugar.node.blessed.utils",
        "since": "2.0.0",
        "filename": "innerWidth.ts",
        "extension": "ts",
        "path": "src/node/blessed/utils/innerWidth.ts",
        "directory": "src/node/blessed/utils",
        "children": {},
        "relPath": "src/node/blessed/utils/innerWidth.ts",
        "relDirectory": "src/node/blessed/utils"
    },
    "sugar.node.fs.cacheAdapters.SCacheFsAdapter": {
        "name": "SCacheFsAdapter",
        "type": "Class",
        "description": "A filesystem SCache adapter that allows you to store your cache items on the user system",
        "namespace": "sugar.node.fs.cacheAdapters",
        "status": "beta",
        "since": "2.0.0",
        "filename": "SCacheFsAdapter.ts",
        "extension": "ts",
        "path": "src/node/cache/adapters/SCacheFsAdapter.ts",
        "directory": "src/node/cache/adapters",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Construct the SCacheFsAdapter instance with the settings passed in object format. See description bellow."
            },
            "set": {
                "name": "set",
                "type": "Function",
                "description": "Set a cache item on the filesystem"
            },
            "get": {
                "name": "get",
                "type": "Function",
                "description": "Get a cache item on the filesystem"
            },
            "delete": {
                "name": "delete",
                "type": "Function",
                "description": "Delete a cache item on the filesystem"
            },
            "clear": {
                "name": "clear",
                "type": "Function",
                "description": "Clear all the items in the current cache"
            }
        },
        "relPath": "src/node/cache/adapters/SCacheFsAdapter.ts",
        "relDirectory": "src/node/cache/adapters"
    },
    "sugar.node.blessed.interface.SCliInterface": {
        "name": "SCliInterface",
        "type": "Class",
        "description": "This class represent the interface that describe the minimum requirement\nneeded for an element passed to the SOutput ```log``` method.",
        "namespace": "sugar.node.blessed.interface",
        "extends": "SInterface",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SCliInterface.ts",
        "extension": "ts",
        "path": "src/node/cli/interface/SCliInterface.ts",
        "directory": "src/node/cli/interface",
        "children": {},
        "relPath": "src/node/cli/interface/SCliInterface.ts",
        "relDirectory": "src/node/cli/interface"
    },
    "sugar.node.config.adapters.SConfigFolderAdapter": {
        "name": "SConfigFolderAdapter",
        "type": "Class",
        "description": "This adapter let you specify a folder in which to put all the config files and access it normaly as you would with the SConfig system.\nEach file in the folder will be the first level of the final config object like for example the file \"colors.config.js\" will be stored\nin the final object under ```{ colors: ... }```.",
        "namespace": "sugar.node.config.adapters",
        "status": "beta",
        "since": "2.0.0",
        "filename": "SConfigFolderAdapter.ts",
        "extension": "ts",
        "path": "src/node/config/adapters/SConfigFolderAdapter.ts",
        "directory": "src/node/config/adapters",
        "children": {},
        "relPath": "src/node/config/adapters/SConfigFolderAdapter.ts",
        "relDirectory": "src/node/config/adapters"
    },
    "sugar.node.config.adapters.SConfigFsAdapter": {
        "name": "SConfigFsAdapter",
        "type": "Class",
        "description": "The JSON data adapter for the SConfig class that let you define a filename where you want to save your configs, how you want to encrypt/decrypt it\nand then you just have to use the SConfig class and that's it...",
        "namespace": "sugar.node.config.adapters",
        "status": "beta",
        "since": "2.0.0",
        "filename": "SConfigFsAdapter.ts",
        "extension": "ts",
        "path": "src/node/config/adapters/SConfigFsAdapter.ts",
        "directory": "src/node/config/adapters",
        "children": {},
        "relPath": "src/node/config/adapters/SConfigFsAdapter.ts",
        "relDirectory": "src/node/config/adapters"
    },
    "sugar.node.deamon.fs.SFsDeamon": {
        "name": "SFsDeamon",
        "type": "Class",
        "description": "This class is a wrapper of the SFsDeamonCli and the SFsDeamonProcess to allows you to\nstart quickly some watch processes and kill them with ease",
        "namespace": "sugar.node.deamon.fs",
        "extends": "SDeamon",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SFsDeamon.ts",
        "extension": "ts",
        "path": "src/node/deamon/fs/SFsDeamon.ts",
        "directory": "src/node/deamon/fs",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "watch": {
                "name": "watch",
                "type": "Function",
                "description": "This method allows you to start a watch process on some files\nby passing either a simple path, a glob pattern or an Array of these.",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/deamon/fs/SFsDeamon.ts",
        "relDirectory": "src/node/deamon/fs"
    },
    "sugar.node.deamon.fs.SFsDeamonProcess": {
        "name": "SFsDeamonProcess",
        "type": "Class",
        "description": "This class allows you to simply launch some watch processes in order to be notified when some files are\nupdated, deleted or created on the filesystem.",
        "namespace": "sugar.node.deamon.fs",
        "extends": "SProcess",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SFsDeamonProcess.ts",
        "extension": "ts",
        "path": "src/node/deamon/fs/SFsDeamonProcess.ts",
        "directory": "src/node/deamon/fs",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "process": {
                "name": "process",
                "type": "Function",
                "description": "This method start the watching process and returns you an SPromise instance on which you can subscribe\nfor these events:\n- update: emited when a file has been updated\n- delete: emited when a file has been deleted\n- add: emited when a file has been added\nThe parameter passed along these events are an ```SFileInterface``` compatible object",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/deamon/fs/SFsDeamonProcess.ts",
        "relDirectory": "src/node/deamon/fs"
    },
    "sugar.node.deamon.interface.SDeamonInterface": {
        "name": "SDeamonInterface",
        "type": "Class",
        "description": "This class represent the interface that describe the minimum requirement\nneeded for an element that is capable of \"watching\" some events/actions, and respond\nto it by launching function, or whatever you want.",
        "namespace": "sugar.node.deamon.interface",
        "extends": "SInterface",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SDeamonInterface.ts",
        "extension": "ts",
        "path": "src/node/deamon/interface/SDeamonInterface.ts",
        "directory": "src/node/deamon/interface",
        "children": {},
        "relPath": "src/node/deamon/interface/SDeamonInterface.ts",
        "relDirectory": "src/node/deamon/interface"
    },
    "sugar.node.build.docMap.interface.SDocMapSettingsInterface": {
        "name": "SDocMapSettingsInterface",
        "type": "Class",
        "description": "This class represent the interface that describe the minimum requirement\nneeded to build the docMap.json file",
        "namespace": "sugar.node.build.docMap.interface",
        "extends": "SInterface",
        "since": "2.0.0",
        "filename": "SDocMapSettingsInterface.ts",
        "extension": "ts",
        "path": "src/node/docMap/interface/SDocMapSettingsInterface.ts",
        "directory": "src/node/docMap/interface",
        "children": {},
        "relPath": "src/node/docMap/interface/SDocMapSettingsInterface.ts",
        "relDirectory": "src/node/docMap/interface"
    },
    "sugar.node.build.frontspec.SBuildFrontspecActionsStream": {
        "name": "SBuildFrontspecActionsStream",
        "type": "Class",
        "description": "This class represent a pre-configured action stream to build easily frontspec files",
        "namespace": "sugar.node.build.frontspec",
        "extends": "SActionsStream",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SBuildFrontspecActionsStream.ts",
        "extension": "ts",
        "path": "src/node/frontspec/build/SBuildFrontspecActionsStream.ts",
        "directory": "src/node/frontspec/build",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            }
        },
        "relPath": "src/node/frontspec/build/SBuildFrontspecActionsStream.ts",
        "relDirectory": "src/node/frontspec/build"
    },
    "sugar.node.build.frontspec.SBuildFrontspecProcess": {
        "name": "SBuildFrontspecProcess",
        "type": "Class",
        "description": "This class represent the process that build the frontspec.json file",
        "namespace": "sugar.node.build.frontspec",
        "extends": "SProcess",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SBuildFrontspecProcess.ts",
        "extension": "ts",
        "path": "src/node/frontspec/build/SBuildFrontspecProcess.ts",
        "directory": "src/node/frontspec/build",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "process": {
                "name": "process",
                "type": "Function",
                "description": "Method that execute the actual process",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/frontspec/build/SBuildFrontspecProcess.ts",
        "relDirectory": "src/node/frontspec/build"
    },
    "sugar.node.build.scss.SBuildFrontspecSugarAppModule": {
        "name": "SBuildFrontspecSugarAppModule",
        "type": "Class",
        "description": "This class represent the build SCSS module for the Sugar UI.",
        "namespace": "sugar.node.build.scss",
        "extends": "SSugarAppModule",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SBuildFrontspecSugarAppModule.ts",
        "extension": "ts",
        "path": "src/node/frontspec/build/SBuildFrontspecSugarAppModule.ts",
        "directory": "src/node/frontspec/build",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "start": {
                "name": "start",
                "type": "Function",
                "description": "This method is the one called by the SugarUi main class when all is ready\nto start the modules. Take this as your kind of \"launcher\" function.",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/frontspec/build/SBuildFrontspecSugarAppModule.ts",
        "relDirectory": "src/node/frontspec/build"
    },
    "sugar.node.build.frontspec.SBuildFrontspecSugarAppTerminalUi": {
        "name": "SBuildFrontspecSugarAppTerminalUi",
        "type": "Class",
        "description": "This class represent the display of the build js module for the terminal",
        "namespace": "sugar.node.build.frontspec",
        "extends": "SSugarAppModuleTerminalUi",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SBuildFrontspecSugarAppTerminalUi.ts",
        "extension": "ts",
        "path": "src/node/frontspec/build/SBuildFrontspecSugarAppTerminalUi.ts",
        "directory": "src/node/frontspec/build",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/frontspec/build/SBuildFrontspecSugarAppTerminalUi.ts",
        "relDirectory": "src/node/frontspec/build"
    },
    "sugar.node.fs.interface.SFileInterface": {
        "name": "SFileInterface",
        "type": "Class",
        "description": "This class represent the interface that describe the minimum requirement\nneeded for a \"file\" descriptor element",
        "namespace": "sugar.node.fs.interface",
        "extends": "SInterface",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SFileInterface.ts",
        "extension": "ts",
        "path": "src/node/fs/interface/SFileInterface.ts",
        "directory": "src/node/fs/interface",
        "children": {},
        "relPath": "src/node/fs/interface/SFileInterface.ts",
        "relDirectory": "src/node/fs/interface"
    },
    "sugar.node.js.compile.SJsCompiler": {
        "name": "SJsCompiler",
        "type": "Class",
        "description": "This class wrap the \"esbuild\" compiler with some additional features which are:",
        "namespace": "sugar.node.js.compile",
        "extends": "SCompiler",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SJsCompiler.ts",
        "extension": "ts",
        "path": "src/node/js/compile/SJsCompiler.ts",
        "directory": "src/node/js/compile",
        "children": {
            "jsCompilerSettings": {
                "name": "jsCompilerSettings",
                "type": "ISJsCompilerSettings",
                "description": "Access to the esbuild compiler settings",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/js/compile/SJsCompiler.ts",
        "relDirectory": "src/node/js/compile"
    },
    "sugar.node.js.compile.SJsCompilerProcess": {
        "name": "SJsCompilerProcess",
        "type": "Class",
        "description": "This class represent the js compilation process to compile raw js files to es2015 js one",
        "namespace": "sugar.node.js.compile",
        "extends": "SProcess",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SJsCompilerProcess.ts",
        "extension": "ts",
        "path": "src/node/js/compile/SJsCompilerProcess.ts",
        "directory": "src/node/js/compile",
        "children": {
            "jsCompileProcessSettings": {
                "name": "jsCompileProcessSettings",
                "type": "ISJsCompilerProcessSettings",
                "description": "Access the ```scssCompileProcess``` settings",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "process": {
                "name": "process",
                "type": "Function",
                "description": "Method that actually execute the process",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/js/compile/SJsCompilerProcess.ts",
        "relDirectory": "src/node/js/compile"
    },
    "js.log.SLogFilesAdapter": {
        "name": "SLogFilesAdapter",
        "type": "Class",
        "description": "This class allows you to log your messages, errors, etc... easily and store them in some files where you want on your file system.",
        "namespace": "js.log",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SLogFilesAdapter.ts",
        "extension": "ts",
        "path": "src/node/log/adapters/SLogFilesAdapter.ts",
        "directory": "src/node/log/adapters",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "log": {
                "name": "log",
                "type": "Function",
                "description": "This is the main method of the logger. It actually log the message passed as parameter to the confilesole"
            }
        },
        "relPath": "src/node/log/adapters/SLogFilesAdapter.ts",
        "relDirectory": "src/node/log/adapters"
    },
    "sugar.node.process.interface.SProcessDeamonSettingInterface": {
        "name": "SProcessDeamonSettingInterface",
        "type": "Class",
        "description": "This class represent the interface that describe the minimum requirement\nneeded for the passed \"deamon\" setting in a process",
        "namespace": "sugar.node.process.interface",
        "extends": "SInterface",
        "since": "2.0.0",
        "filename": "SProcessDeamonSettingInterface.ts",
        "extension": "ts",
        "path": "src/node/process/interface/SProcessDeamonSettingInterface.ts",
        "directory": "src/node/process/interface",
        "children": {},
        "relPath": "src/node/process/interface/SProcessDeamonSettingInterface.ts",
        "relDirectory": "src/node/process/interface"
    },
    "sugar.node.process.interface.SProcessInterface": {
        "name": "SProcessInterface",
        "type": "Class",
        "description": "This class represent the interface that describe the minimum requirement\nneeded for a process instance usable across the toolkit like in an SCli instance, etc...",
        "namespace": "sugar.node.process.interface",
        "extends": "SInterface",
        "since": "2.0.0",
        "filename": "SProcessInterface.ts",
        "extension": "ts",
        "path": "src/node/process/interface/SProcessInterface.ts",
        "directory": "src/node/process/interface",
        "children": {},
        "relPath": "src/node/process/interface/SProcessInterface.ts",
        "relDirectory": "src/node/process/interface"
    },
    "sugar.node.process.interface.SProcessManagerInterface": {
        "name": "SProcessManagerInterface",
        "type": "Class",
        "description": "This class represent the interface that describe the minimum requirement\nneeded for a process instance usable across the toolkit like in an SCli instance, etc...",
        "namespace": "sugar.node.process.interface",
        "extends": "SInterface",
        "since": "2.0.0",
        "filename": "SProcessManagerInterface.ts",
        "extension": "ts",
        "path": "src/node/process/interface/SProcessManagerInterface.ts",
        "directory": "src/node/process/interface",
        "children": {},
        "relPath": "src/node/process/interface/SProcessManagerInterface.ts",
        "relDirectory": "src/node/process/interface"
    },
    "sugar.node.scss.SScssCompiler": {
        "name": "SScssCompiler",
        "type": "Class",
        "description": "This class wrap the \"sass\" compiler with some additional features which are:",
        "namespace": "sugar.node.scss",
        "extends": "SCompiler",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SScssCompiler.ts",
        "extension": "ts",
        "path": "src/node/scss/compile/SScssCompiler.ts",
        "directory": "src/node/scss/compile",
        "children": {
            "scssCompilerSettings": {
                "name": "scssCompilerSettings",
                "type": "ISScssCompilerSettings",
                "description": "Access the scss compiler settings",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/scss/compile/SScssCompiler.ts",
        "relDirectory": "src/node/scss/compile"
    },
    "sugar.node.scss.compile.SScssCompilerProcess": {
        "name": "SScssCompilerProcess",
        "type": "Class",
        "description": "This class represent the tsc compilation process to compile typescript to js",
        "namespace": "sugar.node.scss.compile",
        "extends": "SProcess",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SScssCompilerProcess.ts",
        "extension": "ts",
        "path": "src/node/scss/compile/SScssCompilerProcess.ts",
        "directory": "src/node/scss/compile",
        "children": {
            "scssCompileProcessSettings": {
                "name": "scssCompileProcessSettings",
                "type": "ISScssCompilerProcessSettings",
                "description": "Access the ```scssCompileProcess``` settings",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "process": {
                "name": "process",
                "type": "Function",
                "description": "Method that actually execute the process",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/scss/compile/SScssCompilerProcess.ts",
        "relDirectory": "src/node/scss/compile"
    },
    "sugar.node.scss.utils.ensureNoDuplicateImportStatements": {
        "name": "ensureNoDuplicateImportStatements",
        "type": "Function",
        "description": "This function simply parse the passed string and make sure their's no duplicate import and use statements",
        "namespace": "sugar.node.scss.utils",
        "status": "beta",
        "since": "2.0.0",
        "filename": "ensureNoDuplicateImportStatements.ts",
        "extension": "ts",
        "path": "src/node/scss/utils/ensureNoDuplicateImportStatements.ts",
        "directory": "src/node/scss/utils",
        "children": {},
        "relPath": "src/node/scss/utils/ensureNoDuplicateImportStatements.ts",
        "relDirectory": "src/node/scss/utils"
    },
    "sugar.node.scss.utils.findImportStatements": {
        "name": "findImportStatements",
        "type": "Function",
        "description": "This function simply parse the passed string to extract all the @import and @use statements",
        "namespace": "sugar.node.scss.utils",
        "status": "beta",
        "since": "2.0.0",
        "filename": "findImportStatements.ts",
        "extension": "ts",
        "path": "src/node/scss/utils/findImportStatements.ts",
        "directory": "src/node/scss/utils",
        "children": {},
        "relPath": "src/node/scss/utils/findImportStatements.ts",
        "relDirectory": "src/node/scss/utils"
    },
    "sugar.node.scss.utils.getScssSharedResourcesString": {
        "name": "getScssSharedResourcesString",
        "type": "Function",
        "description": "This function simply check the @config.build.scss.imports config and return the correct imports array",
        "namespace": "sugar.node.scss.utils",
        "status": "wip",
        "since": "2.0.0",
        "filename": "getSharedResourcesString.ts",
        "extension": "ts",
        "path": "src/node/scss/utils/getSharedResourcesString.ts",
        "directory": "src/node/scss/utils",
        "children": {},
        "relPath": "src/node/scss/utils/getSharedResourcesString.ts",
        "relDirectory": "src/node/scss/utils"
    },
    "sugar.node.scss.utils.putUseStatementsOnTop": {
        "name": "putUseStatementsOnTop",
        "type": "Function",
        "description": "This function simply search for \"@use\" statements in the passed content\nand put them on top of the string",
        "namespace": "sugar.node.scss.utils",
        "status": "beta",
        "since": "2.0.0",
        "filename": "putUseStatementsOnTop.ts",
        "extension": "ts",
        "path": "src/node/scss/utils/putUseStatementsOnTop.ts",
        "directory": "src/node/scss/utils",
        "children": {},
        "relPath": "src/node/scss/utils/putUseStatementsOnTop.ts",
        "relDirectory": "src/node/scss/utils"
    },
    "sugar.node.scss.utils.resolveDependency": {
        "name": "resolveDependency",
        "type": "Function",
        "description": "This function simply take an scss import or use path and resolve it using the passed includePaths array",
        "namespace": "sugar.node.scss.utils",
        "status": "beta",
        "since": "2.0.0",
        "filename": "resolveDependency.ts",
        "extension": "ts",
        "path": "src/node/scss/utils/resolveDependency.ts",
        "directory": "src/node/scss/utils",
        "children": {},
        "relPath": "src/node/scss/utils/resolveDependency.ts",
        "relDirectory": "src/node/scss/utils"
    },
    "sugar.node.search.handlers.search": {
        "name": "search",
        "type": "Function",
        "description": "This function is responsible of handling the docMap search\nby filtering the docMap and send back the serch result json.",
        "namespace": "sugar.node.search.handlers",
        "status": "wip",
        "since": "2.0.0",
        "filename": "docMap.ts",
        "extension": "ts",
        "path": "src/node/search/handlers/docMap.ts",
        "directory": "src/node/search/handlers",
        "children": {},
        "relPath": "src/node/search/handlers/docMap.ts",
        "relDirectory": "src/node/search/handlers"
    },
    "sugar.node.server.frontend.express": {
        "name": "express",
        "type": "Function",
        "description": "This function take care of starting a frontend express based server",
        "namespace": "sugar.node.server.frontend",
        "status": "wip",
        "since": "2.0.0",
        "filename": "frontend.ts",
        "extension": "ts",
        "path": "src/node/server/frontend/frontend.ts",
        "directory": "src/node/server/frontend",
        "children": {},
        "relPath": "src/node/server/frontend/frontend.ts",
        "relDirectory": "src/node/server/frontend"
    },
    "sugar.node.server.frontend.SFrontendServerProcess": {
        "name": "SFrontendServerProcess",
        "type": "Class",
        "description": "This class represent the frontend server Cli based on the express server one",
        "namespace": "sugar.node.server.frontend",
        "extends": "SProcess",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SFrontendServerProcess.ts",
        "extension": "ts",
        "path": "src/node/server/frontend/SFrontendServerProcess.ts",
        "directory": "src/node/server/frontend",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "process": {
                "name": "process",
                "type": "Function",
                "description": "Method that actually execute the process",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/server/frontend/SFrontendServerProcess.ts",
        "relDirectory": "src/node/server/frontend"
    },
    "sugar.node.server.frontend.SFrontendServerSugarAppModule": {
        "name": "SFrontendServerSugarAppModule",
        "type": "Class",
        "description": "This class represent the frontend server module for the Sugar UI.",
        "namespace": "sugar.node.server.frontend",
        "extends": "SSugarAppModule",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SFrontendServerSugarAppModule.ts",
        "extension": "ts",
        "path": "src/node/server/frontend/SFrontendServerSugarAppModule.ts",
        "directory": "src/node/server/frontend",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "start": {
                "name": "start",
                "type": "Function",
                "description": "This method is the one called by the SugarUi main class when all is ready\nto start the modules. Take this as your kind of \"launcher\" function.",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/server/frontend/SFrontendServerSugarAppModule.ts",
        "relDirectory": "src/node/server/frontend"
    },
    "sugar.node.blessed.Stdio.SBlessedStdio": {
        "name": "SBlessedStdio",
        "type": "Class",
        "description": "This class is a simple SPanel extended one that accesp an SStdio instance\nto log the data's from and display an simple UI depending on the SStdio configured keys",
        "namespace": "sugar.node.blessed.Stdio",
        "extends": "SStdio",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SBlessedStdio.ts",
        "extension": "ts",
        "path": "src/node/stdio/blessed/SBlessedStdio.ts",
        "directory": "src/node/stdio/blessed",
        "children": {
            "$container": {
                "name": "$container",
                "type": "SBlessedComponent",
                "description": "Store the main blessed container for this blessed stdio instance",
                "since": "2.0.0"
            },
            "blessedStdioSettings": {
                "name": "blessedStdioSettings",
                "type": "ISBlessedStdioSettings",
                "description": "",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "clear": {
                "name": "clear",
                "type": "Function",
                "description": "This method simply clear the Stdio",
                "since": "2.0.0"
            },
            "log": {
                "name": "log",
                "type": "Function",
                "description": "This method simply log the passed arguments"
            },
            "isDisplayed": {
                "name": "isDisplayed",
                "type": "Function",
                "description": "true if is displayed, false if not",
                "since": "2.0.0"
            },
            "update": {
                "name": "update",
                "type": "Function",
                "description": "This method take the content of the this._content property and display it correctly on the screen",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/stdio/blessed/SBlessedStdio.ts",
        "relDirectory": "src/node/stdio/blessed"
    },
    "sugar.node.stdio.terminal.STerminalStdio": {
        "name": "STerminalStdio",
        "type": "Class",
        "description": "This class represent a \"terminal\" strandard in out interface.",
        "namespace": "sugar.node.stdio.terminal",
        "since": "2.0.0",
        "filename": "STerminalStdio.ts",
        "extension": "ts",
        "path": "src/node/stdio/terminal/STerminalStdio.ts",
        "directory": "src/node/stdio/terminal",
        "children": {
            "terminalStdioSettings": {
                "name": "terminalStdioSettings",
                "type": "ISTerminalStdioSettings",
                "description": "Access the stdio settings",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/stdio/terminal/STerminalStdio.ts",
        "relDirectory": "src/node/stdio/terminal"
    },
    "sugar.node.stream.actions.SExtractDocblocksIntoFiles": {
        "name": "SExtractDocblocksIntoFiles",
        "type": "Class",
        "description": "This actions allows you to extract the docblocks into separated files depending on their \"namespace\" tag",
        "namespace": "sugar.node.stream.actions",
        "extends": "SActionsStreamAction",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SExtractDocblocksIntoFilesStreamAction.ts",
        "extension": "ts",
        "path": "src/node/stream/actions/SExtractDocblocksIntoFilesStreamAction.ts",
        "directory": "src/node/stream/actions",
        "children": {
            "definition": {
                "name": "definition",
                "type": "Object",
                "description": "Store the definition object that specify the streamObj required properties, types, etc...",
                "static": true
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "run": {
                "name": "run",
                "type": "Function",
                "description": "Override the base class run method"
            },
            "undefined": {}
        },
        "relPath": "src/node/stream/actions/SExtractDocblocksIntoFilesStreamAction.ts",
        "relDirectory": "src/node/stream/actions"
    },
    "sugar.node.stream.actions.SExtractStreamAction": {
        "name": "SExtractStreamAction",
        "type": "Class",
        "description": "This actions allows you to extract some data from the specified streamObj property using custom comments syntax like \"/* extract:propName *\\/ ... /* extract *\\/\".\nThis \"propName\" specify in which streamObj property you want to save the extracted content.",
        "namespace": "sugar.node.stream.actions",
        "extends": "SActionsStreamAction",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SExtractStreamAction.ts",
        "extension": "ts",
        "path": "src/node/stream/actions/SExtractStreamAction.ts",
        "directory": "src/node/stream/actions",
        "children": {
            "interface": {
                "name": "interface",
                "type": "Object",
                "description": "Store the definition object that specify the streamObj required properties, types, etc...",
                "static": true
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "run": {
                "name": "run",
                "type": "Function",
                "description": "Override the base class run method"
            }
        },
        "relPath": "src/node/stream/actions/SExtractStreamAction.ts",
        "relDirectory": "src/node/stream/actions"
    },
    "sugar.node.stream.actions.SFrontspecJsStreamAction": {
        "name": "SFrontspecJsStreamAction",
        "type": "Class",
        "description": "This action take care of integrating the previous finded \"frontspec.json\" files\ninto the actual codebase handled by this stream action.",
        "namespace": "sugar.node.stream.actions",
        "extends": "SActionsStreamAction",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SFrontspecJsStreamAction.ts",
        "extension": "ts",
        "path": "src/node/stream/actions/SFrontspecJsStreamAction.ts",
        "directory": "src/node/stream/actions",
        "children": {
            "interface": {
                "name": "interface",
                "type": "Object",
                "description": "Store the definition object that specify the streamObj required properties, types, etc...",
                "static": true
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "run": {
                "name": "run",
                "type": "Function",
                "description": "Override the base class run method"
            }
        },
        "relPath": "src/node/stream/actions/SFrontspecJsStreamAction.ts",
        "relDirectory": "src/node/stream/actions"
    },
    "sugar.node.stream.actions.SFrontspecScssStreamAction": {
        "name": "SFrontspecScssStreamAction",
        "type": "Class",
        "description": "This action take care of integrating the previous finded \"frontspec.json\" files\ninto the actual codebase handled by this stream action.",
        "namespace": "sugar.node.stream.actions",
        "extends": "SActionsStreamAction",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SFrontspecScssStreamAction.ts",
        "extension": "ts",
        "path": "src/node/stream/actions/SFrontspecScssStreamAction.ts",
        "directory": "src/node/stream/actions",
        "children": {
            "interface": {
                "name": "interface",
                "type": "Object",
                "description": "Store the definition object that specify the streamObj required properties, types, etc...",
                "static": true
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "run": {
                "name": "run",
                "type": "Function",
                "description": "Override the base class run method"
            }
        },
        "relPath": "src/node/stream/actions/SFrontspecScssStreamAction.ts",
        "relDirectory": "src/node/stream/actions"
    },
    "sugar.node.stream.actions.SFsCacheStreamAction": {
        "name": "SFsCacheStreamAction",
        "type": "Class",
        "description": "This action allows you to make profit of the filesystem cache.\nYou can specify which streamObj property will be the cache id as well as\nin which condition you want to bypass the cached value.\nBy default the cached value will be regenerated if the \"input\" property is a file and that this file has been saved after the cached value.",
        "namespace": "sugar.node.stream.actions",
        "extends": "SActionsStreamAction",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SFsCacheStreamAction.ts",
        "extension": "ts",
        "path": "src/node/stream/actions/SFsCacheStreamAction.ts",
        "directory": "src/node/stream/actions",
        "children": {
            "interface": {
                "name": "interface",
                "type": "Object",
                "description": "Store the definition object that specify the streamObj required properties, types, etc...",
                "static": true
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "run": {
                "name": "run",
                "type": "Function",
                "description": "Override the base class run method"
            }
        },
        "relPath": "src/node/stream/actions/SFsCacheStreamAction.ts",
        "relDirectory": "src/node/stream/actions"
    },
    "sugar.node.stream.actions.SFsCopyStreamAction": {
        "name": "SFsCopyStreamAction",
        "type": "Class",
        "description": "This class is a stream action that allows you to copy some files or folders from one location to another",
        "namespace": "sugar.node.stream.actions",
        "extends": "SActionsStreamAction",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SFsCopyStreamAction.ts",
        "extension": "ts",
        "path": "src/node/stream/actions/SFsCopyStreamAction.ts",
        "directory": "src/node/stream/actions",
        "children": {
            "interface": {
                "name": "interface",
                "type": "Object",
                "description": "Store the definition object that specify the streamObj required properties, types, etc...",
                "static": true
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "run": {
                "name": "run",
                "type": "Function",
                "description": "Override the base class run method"
            }
        },
        "relPath": "src/node/stream/actions/SFsCopyStreamAction.ts",
        "relDirectory": "src/node/stream/actions"
    },
    "node.stream.actions.SFindInFileStreamAction": {
        "name": "SFindInFileStreamAction",
        "type": "Class",
        "description": "This class is a stream action that allows you search inside files for a certain string/pattern\nAnd get back the list of founded files.",
        "namespace": "node.stream.actions",
        "extends": "SActionsStreamAction",
        "status": "beta",
        "since": "2.0.0",
        "filename": "SFsFilesResolverStreamAction.ts",
        "extension": "ts",
        "path": "src/node/stream/actions/SFsFilesResolverStreamAction.ts",
        "directory": "src/node/stream/actions",
        "children": {
            "interface": {
                "name": "interface",
                "type": "Object",
                "description": "Store the definition object that specify the streamObj required properties, types, etc...",
                "static": true
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "run": {
                "name": "run",
                "type": "Function",
                "description": "Override the base class run method"
            }
        },
        "relPath": "src/node/stream/actions/SFsFilesResolverStreamAction.ts",
        "relDirectory": "src/node/stream/actions"
    },
    "sugar.node.stream.actions.SFsOutputStreamAction": {
        "name": "SFsOutputStreamAction",
        "type": "Class",
        "description": "This class is a stream action that allows you to save file(s) to the filesystem",
        "namespace": "sugar.node.stream.actions",
        "extends": "SActionsStreamAction",
        "status": "beta",
        "since": "2.0.0",
        "filename": "SFsOutputStreamAction.ts",
        "extension": "ts",
        "path": "src/node/stream/actions/SFsOutputStreamAction.ts",
        "directory": "src/node/stream/actions",
        "children": {
            "interface": {
                "name": "interface",
                "type": "Object",
                "description": "Store the definition object that specify the streamObj required properties, types, etc...",
                "static": true
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "run": {
                "name": "run",
                "type": "Function",
                "description": "Override the base class run method"
            }
        },
        "relPath": "src/node/stream/actions/SFsOutputStreamAction.ts",
        "relDirectory": "src/node/stream/actions"
    },
    "sugar.node.stream.actions.SFsReadFileStreamAction": {
        "name": "SFsReadFileStreamAction",
        "type": "Class",
        "description": "This class is a stream action that allows you to read file(s) to the filesystem",
        "namespace": "sugar.node.stream.actions",
        "extends": "SActionsStreamAction",
        "status": "beta",
        "since": "2.0.0",
        "filename": "SFsReadFileStreamAction.ts",
        "extension": "ts",
        "path": "src/node/stream/actions/SFsReadFileStreamAction.ts",
        "directory": "src/node/stream/actions",
        "children": {
            "interface": {
                "name": "interface",
                "type": "Object",
                "description": "Store the definition object that specify the streamObj required properties, types, etc...",
                "static": true
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "run": {
                "name": "run",
                "type": "Function",
                "description": "Override the base class run method"
            }
        },
        "relPath": "src/node/stream/actions/SFsReadFileStreamAction.ts",
        "relDirectory": "src/node/stream/actions"
    },
    "sugar.node.stream.actions.SFsUnlinkStreamAction": {
        "name": "SFsUnlinkStreamAction",
        "type": "Class",
        "description": "This class is an action that allows you to delete some files / folders depending on the \"unlink\" property of the streamObj.\nYou can specify some glob patterns if you want",
        "namespace": "sugar.node.stream.actions",
        "extends": "SActionsStreamAction",
        "status": "beta",
        "since": "2.0.0",
        "filename": "SFsUnlinkStreamAction.ts",
        "extension": "ts",
        "path": "src/node/stream/actions/SFsUnlinkStreamAction.ts",
        "directory": "src/node/stream/actions",
        "children": {
            "interface": {
                "name": "interface",
                "type": "Object",
                "description": "Store the definition object that specify the streamObj required properties, types, etc...",
                "static": true
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "run": {
                "name": "run",
                "type": "Function",
                "description": "Override the base class run method"
            }
        },
        "relPath": "src/node/stream/actions/SFsUnlinkStreamAction.ts",
        "relDirectory": "src/node/stream/actions"
    },
    "sugar.node.stream.actions.SGlobResolverStreamAction": {
        "name": "SGlobResolverStreamAction",
        "type": "Class",
        "description": "This class is a stream action that allows you resolve glob pattern by specifying the streamObj property that\nis one. It will then return an array of streamObj handled normally by the SActionsStream instance",
        "namespace": "sugar.node.stream.actions",
        "extends": "SActionsStreamAction",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SGlobResolverStreamAction.ts",
        "extension": "ts",
        "path": "src/node/stream/actions/SGlobResolverStreamAction.ts",
        "directory": "src/node/stream/actions",
        "children": {
            "interface": {
                "name": "interface",
                "type": "Object",
                "description": "Store the definition object that specify the streamObj required properties, types, etc...",
                "static": true
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "run": {
                "name": "run",
                "type": "Function",
                "description": "Override the base class run method"
            }
        },
        "relPath": "src/node/stream/actions/SGlobResolverStreamAction.ts",
        "relDirectory": "src/node/stream/actions"
    },
    "sugar.node.stream.actions.SJestStreamAction": {
        "name": "SJestStreamAction",
        "type": "Class",
        "description": "This class is a stream action that allows you execute attached jest tests ([filename.test.js|__tests__/[filename].test.js])",
        "namespace": "sugar.node.stream.actions",
        "extends": "SActionsStreamAction",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SJestStreamAction.ts",
        "extension": "ts",
        "path": "src/node/stream/actions/SJestStreamAction.ts",
        "directory": "src/node/stream/actions",
        "children": {
            "interface": {
                "name": "interface",
                "type": "Object",
                "description": "Store the definition object that specify the streamObj required properties, types, etc...",
                "static": true
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "run": {
                "name": "run",
                "type": "Function",
                "description": "Override the base class run method"
            }
        },
        "relPath": "src/node/stream/actions/SJestStreamAction.ts",
        "relDirectory": "src/node/stream/actions"
    },
    "sugar.node.svelte.SSvelteCompiler": {
        "name": "SSvelteCompiler",
        "type": "Class",
        "description": "This class wrap the \"svelte\" compiler with some additional features which are:",
        "namespace": "sugar.node.svelte",
        "extends": "SCompiler",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SSvelteCompiler.ts",
        "extension": "ts",
        "path": "src/node/svelte/compile/SSvelteCompiler.ts",
        "directory": "src/node/svelte/compile",
        "children": {
            "svelteCompilerSettings": {
                "name": "svelteCompilerSettings",
                "type": "ISSvelteCompilerSettings",
                "description": "Access to the svelte compiler settings",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/svelte/compile/SSvelteCompiler.ts",
        "relDirectory": "src/node/svelte/compile"
    },
    "sugar.node.svelte.compile.SSvelteCompilerProcess": {
        "name": "SSvelteCompilerProcess",
        "type": "Class",
        "description": "This class represent the svelte compilation process to compile svelte files to js",
        "namespace": "sugar.node.svelte.compile",
        "extends": "SProcess",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SSvelteCompilerProcess.ts",
        "extension": "ts",
        "path": "src/node/svelte/compile/SSvelteCompilerProcess.ts",
        "directory": "src/node/svelte/compile",
        "children": {
            "svelteCompileProcessSettings": {
                "name": "svelteCompileProcessSettings",
                "type": "ISSvelteCompilerProcessSettings",
                "description": "Access the ```scssCompileProcess``` settings",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "process": {
                "name": "process",
                "type": "Function",
                "description": "Method that actually execute the process",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/svelte/compile/SSvelteCompilerProcess.ts",
        "relDirectory": "src/node/svelte/compile"
    },
    "sugar.node.template.dataHandlers.js": {
        "name": "js",
        "type": "Function",
        "description": "This function simply take the .data.js file path and return\nthe resulting object",
        "namespace": "sugar.node.template.dataHandlers",
        "status": "beta",
        "since": "2.0.0",
        "filename": "js.ts",
        "extension": "ts",
        "path": "src/node/template/dataHandlers/js.ts",
        "directory": "src/node/template/dataHandlers",
        "children": {},
        "relPath": "src/node/template/dataHandlers/js.ts",
        "relDirectory": "src/node/template/dataHandlers"
    },
    "sugar.node.template.dataHandlers.json": {
        "name": "json",
        "type": "Function",
        "description": "This function simply take the .data.json file path and return\nthe resulting object",
        "namespace": "sugar.node.template.dataHandlers",
        "status": "beta",
        "since": "2.0.0",
        "filename": "json.ts",
        "extension": "ts",
        "path": "src/node/template/dataHandlers/json.ts",
        "directory": "src/node/template/dataHandlers",
        "children": {},
        "relPath": "src/node/template/dataHandlers/json.ts",
        "relDirectory": "src/node/template/dataHandlers"
    },
    "sugar.node.template.engines.SBladeTemplateEngine": {
        "name": "SBladeTemplateEngine",
        "type": "Class",
        "description": "This class represent the blade php template engine that you can use by itself through this class, or through the ```STemplate``` class\nthat take care of a lot of works for you...",
        "namespace": "sugar.node.template.engines",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SBladeTemplateEngine.ts",
        "extension": "ts",
        "path": "src/node/template/engines/SBladeTemplateEngine.ts",
        "directory": "src/node/template/engines",
        "children": {
            "input": {
                "name": "input",
                "type": "String",
                "description": "Specify the input type this template engine want",
                "static": true,
                "since": "2.0.0"
            },
            "canRender": {
                "name": "canRender",
                "type": "Function",
                "description": "Method that take as parameter the template string to analyze and send back true or false depending if the passed string is renderable by this engine",
                "static": true,
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "render": {
                "name": "render",
                "type": "Function",
                "description": "Main render method",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/template/engines/SBladeTemplateEngine.ts",
        "relDirectory": "src/node/template/engines"
    },
    "sugar.node.template.engines.STemplateEngine": {
        "name": "STemplateEngine",
        "type": "Class",
        "description": "This class represent the base for a compatible ```STemplate``` engine\nA template engine class MUST have some basic methods like:\n- ```input```: A simple static property that tells if your template engine work with a \"path\" as input, or with a \"string\" (templateString) either...\n- ```canRender```: A simple static method that take the template string as parameter and must return true if it can handle it and false if not\n- ```render```: The main method that take as parameter either the view path to render, either directly the template string depending on his exposed static property ```input``` that can be either ```path``` or ```string``` as well as a data object to use for rendering process\n-",
        "namespace": "sugar.node.template.engines",
        "status": "wip",
        "since": "2.0.0",
        "filename": "STemplateEngine.ts",
        "extension": "ts",
        "path": "src/node/template/engines/STemplateEngine.ts",
        "directory": "src/node/template/engines",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/template/engines/STemplateEngine.ts",
        "relDirectory": "src/node/template/engines"
    },
    "sugar.node.test.interface.STestInterface": {
        "name": "STestInterface",
        "type": "Class",
        "description": "This class represent the interface that describe the cli parameters for the\ntest process.",
        "namespace": "sugar.node.test.interface",
        "extends": "SInterface",
        "status": "wip",
        "since": "2.0.0",
        "filename": "STestInterface.ts",
        "extension": "ts",
        "path": "src/node/test/interface/STestInterface.ts",
        "directory": "src/node/test/interface",
        "children": {},
        "relPath": "src/node/test/interface/STestInterface.ts",
        "relDirectory": "src/node/test/interface"
    },
    "sugar.node.test.jest.STestJestCli": {
        "name": "STestJestCli",
        "type": "Class",
        "description": "This class represent the tests jest cli",
        "namespace": "sugar.node.test.jest",
        "extends": "SCli",
        "status": "wip",
        "since": "2.0.0",
        "filename": "STestJestCli.ts",
        "extension": "ts",
        "path": "src/node/test/jest/STestJestCli.ts",
        "directory": "src/node/test/jest",
        "children": {
            "command": {
                "name": "command",
                "type": "String",
                "description": "Store the command string",
                "static": true
            },
            "interface": {
                "name": "interface",
                "type": "Object",
                "description": "Store the definition object",
                "static": true
            },
            "processClass": {
                "name": "processClass",
                "type": "SProcess",
                "description": "Store the process class that will be used to run the test jest process",
                "static": true
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            }
        },
        "relPath": "src/node/test/jest/STestJestCli.ts",
        "relDirectory": "src/node/test/jest"
    },
    "sugar.node.test.jest.STestJestProcess": {
        "name": "STestJestProcess",
        "type": "Class",
        "description": "This class represent the process that launch the tests on javascript files",
        "namespace": "sugar.node.test.jest",
        "extends": "SProcess",
        "status": "wip",
        "since": "2.0.0",
        "filename": "STestJestProcessManager.ts",
        "extension": "ts",
        "path": "src/node/test/jest/STestJestProcessManager.ts",
        "directory": "src/node/test/jest",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "run": {
                "name": "run",
                "type": "Function",
                "description": "Method that execute the frontend server code, listen for errors, etc...",
                "since": "2.0.0"
            },
            "kill": {
                "name": "kill",
                "type": "Function",
                "description": "Method that allows you to kill the process",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/test/jest/STestJestProcessManager.ts",
        "relDirectory": "src/node/test/jest"
    },
    "sugar.js.type.descriptor.fileTypeDescriptor": {
        "name": "fileTypeDescriptor",
        "type": "ISTypeDescriptor",
        "description": "Describe the type \"file\" with some utilities methods like \"is\", \"cast\", etc...",
        "namespace": "sugar.js.type.descriptor",
        "since": "2.0.0",
        "filename": "fileTypeDescriptor.ts",
        "extension": "ts",
        "path": "src/node/type/descriptors/fileTypeDescriptor.ts",
        "directory": "src/node/type/descriptors",
        "children": {},
        "relPath": "src/node/type/descriptors/fileTypeDescriptor.ts",
        "relDirectory": "src/node/type/descriptors"
    },
    "sugar.node.typescript.STsCompiler": {
        "name": "STsCompiler",
        "type": "Class",
        "description": "This class wrap the \"typescript\" compiler with some additional features which are:",
        "namespace": "sugar.node.typescript",
        "extends": "SCompiler",
        "status": "wip",
        "since": "2.0.0",
        "filename": "STsCompiler.ts",
        "extension": "ts",
        "path": "src/node/typescript/compile/STsCompiler.ts",
        "directory": "src/node/typescript/compile",
        "children": {
            "tsCompilerSettings": {
                "name": "tsCompilerSettings",
                "type": "ISTsCompilerSettings",
                "description": "Access to the ts compiler settings",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "getStack": {
                "name": "getStack",
                "type": "Function",
                "description": "Check if the passed string is the name of a defined stack or not",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/typescript/compile/STsCompiler.ts",
        "relDirectory": "src/node/typescript/compile"
    },
    "sugar.node.typescript.compile.STsCompilerProcess": {
        "name": "STsCompilerProcess",
        "type": "Class",
        "description": "This class represent the tsc compilation process to compile typescript to js",
        "namespace": "sugar.node.typescript.compile",
        "extends": "SProcess",
        "status": "wip",
        "since": "2.0.0",
        "filename": "STsCompilerProcess.ts",
        "extension": "ts",
        "path": "src/node/typescript/compile/STsCompilerProcess.ts",
        "directory": "src/node/typescript/compile",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "process": {
                "name": "process",
                "type": "Function",
                "description": "Method that actually execute the process",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/typescript/compile/STsCompilerProcess.ts",
        "relDirectory": "src/node/typescript/compile"
    },
    "sugar.node.typescript.interface.STsFileInterface": {
        "name": "STsFileInterface",
        "type": "Class",
        "description": "The interface describing the tsFile instance",
        "namespace": "sugar.node.typescript.interface",
        "extends": "SInterface",
        "status": "beta",
        "since": "2.0.0",
        "filename": "STsFileInterface.ts",
        "extension": "ts",
        "path": "src/node/typescript/interface/STsFileInterface.ts",
        "directory": "src/node/typescript/interface",
        "children": {
            "STsFileSettingsInterface": {
                "name": "STsFileSettingsInterface",
                "type": "Class",
                "description": "The interface describing the tsFile settings",
                "extends": "SInterface",
                "status": "beta",
                "since": "2.0.0"
            }
        },
        "relPath": "src/node/typescript/interface/STsFileInterface.ts",
        "relDirectory": "src/node/typescript/interface"
    },
    "sugar.node.typescript.utils.tsconfigToCommandLine": {
        "name": "tsconfigToCommandLine",
        "type": "Function",
        "description": "This function simply take a tsconfig file path and\ntransform it into a ```tsc``` command line arguments",
        "namespace": "sugar.node.typescript.utils",
        "since": "2.0.0",
        "filename": "tsconfigToCommandLine.ts",
        "extension": "ts",
        "path": "src/node/typescript/utils/tsconfigToCommandLine.ts",
        "directory": "src/node/typescript/utils",
        "children": {},
        "relPath": "src/node/typescript/utils/tsconfigToCommandLine.ts",
        "relDirectory": "src/node/typescript/utils"
    },
    "sugar.scss.animation.mixin.animation": {
        "name": "animation",
        "type": "mixin",
        "description": "Print out the animation property calculated with the passed arguments\nThis mixin support all the standard css animation properties like name, duration, delay, ease, direction and fill-mode.\nThe $animations argument will be parsed with the [../functions/_s-parse-properties.scss] function.\nIf you specify multiple animations at a time, this mixin will take care\nof the delay calculation for each animations and make them play one after another",
        "namespace": "sugar.scss.animation.mixin",
        "filename": "_animation.scss",
        "extension": "scss",
        "path": "src/scss/animation/mixin/_animation.scss",
        "directory": "src/scss/animation/mixin",
        "children": {},
        "relPath": "src/scss/animation/mixin/_animation.scss",
        "relDirectory": "src/scss/animation/mixin"
    },
    "sugar.scss.coffeekraken.mixin.coffeekraken-logo": {
        "name": "coffeekraken-logo",
        "type": "mixin",
        "description": "Display a coffeekraken logo with two specified colors",
        "namespace": "sugar.scss.coffeekraken.mixin",
        "since": "1.0.0",
        "filename": "_coffeekraken-logo.scss",
        "extension": "scss",
        "path": "src/scss/coffeekraken/mixin/_coffeekraken-logo.scss",
        "directory": "src/scss/coffeekraken/mixin",
        "children": {},
        "relPath": "src/scss/coffeekraken/mixin/_coffeekraken-logo.scss",
        "relDirectory": "src/scss/coffeekraken/mixin"
    },
    "sugar.scss.color.class.color-classes": {
        "name": "color-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"color\" related classes.",
        "namespace": "sugar.scss.color.class",
        "since": "2.0.0",
        "filename": "_color.scss",
        "extension": "scss",
        "path": "src/scss/color/class/_color.scss",
        "directory": "src/scss/color/class",
        "relPath": "src/scss/color/class/_color.scss",
        "relDirectory": "src/scss/color/class"
    },
    "sugar.scss.colo.class.#{$cls}": {
        "name": "#{$cls}",
        "type": "Classname",
        "description": "Specify the color to **#{$name}**",
        "namespace": "sugar.scss.colo.class",
        "since": "1.0.0",
        "filename": "_color.scss",
        "extension": "scss",
        "path": "src/scss/color/class/_color.scss",
        "directory": "src/scss/color/class",
        "relPath": "src/scss/color/class/_color.scss",
        "relDirectory": "src/scss/color/class"
    },
    "sugar.scss.color.class.#{$cls}": {
        "name": "#{$cls}",
        "type": "class",
        "description": "Specify the background color to **#{$name}--#{$mod-name}**",
        "namespace": "sugar.scss.color.class",
        "since": "1.0.0",
        "filename": "_color.scss",
        "extension": "scss",
        "path": "src/scss/color/class/_color.scss",
        "directory": "src/scss/color/class",
        "children": {},
        "relPath": "src/scss/color/class/_color.scss",
        "relDirectory": "src/scss/color/class"
    },
    "sugar.scss.core.color.color-hue": {
        "name": "color-hue",
        "type": "Function",
        "description": "Return the hue of the passed color",
        "namespace": "sugar.scss.core.color",
        "since": "1.0.0",
        "filename": "_color-hue.scss",
        "extension": "scss",
        "path": "src/scss/color/function/_color-hue.scss",
        "directory": "src/scss/color/function",
        "children": {},
        "relPath": "src/scss/color/function/_color-hue.scss",
        "relDirectory": "src/scss/color/function"
    },
    "sugar.scss.core.color.color-lightness": {
        "name": "color-lightness",
        "type": "Function",
        "description": "Return the lightness of the passed color",
        "namespace": "sugar.scss.core.color",
        "since": "1.0.0",
        "filename": "_color-lightness.scss",
        "extension": "scss",
        "path": "src/scss/color/function/_color-lightness.scss",
        "directory": "src/scss/color/function",
        "children": {},
        "relPath": "src/scss/color/function/_color-lightness.scss",
        "relDirectory": "src/scss/color/function"
    },
    "sugar.scss.core.color.color-modifier": {
        "name": "color-modifier",
        "type": "function",
        "description": "Return the color in a modifier list",
        "namespace": "sugar.scss.core.color",
        "filename": "_color-modifier.scss",
        "extension": "scss",
        "path": "src/scss/color/function/_color-modifier.scss",
        "directory": "src/scss/color/function",
        "children": {},
        "relPath": "src/scss/color/function/_color-modifier.scss",
        "relDirectory": "src/scss/color/function"
    },
    "sugar.scss.core.color.color-opacity": {
        "name": "color-opacity",
        "type": "Function",
        "description": "Return the opacity of the passed color",
        "namespace": "sugar.scss.core.color",
        "since": "1.0.0",
        "filename": "_color-opacity.scss",
        "extension": "scss",
        "path": "src/scss/color/function/_color-opacity.scss",
        "directory": "src/scss/color/function",
        "children": {},
        "relPath": "src/scss/color/function/_color-opacity.scss",
        "relDirectory": "src/scss/color/function"
    },
    "sugar.scss.core.color.color-saturation": {
        "name": "color-saturation",
        "type": "Function",
        "description": "Return the saturation of the passed color",
        "namespace": "sugar.scss.core.color",
        "since": "1.0.0",
        "filename": "_color-saturation.scss",
        "extension": "scss",
        "path": "src/scss/color/function/_color-saturation.scss",
        "directory": "src/scss/color/function",
        "children": {},
        "relPath": "src/scss/color/function/_color-saturation.scss",
        "relDirectory": "src/scss/color/function"
    },
    "sugar.scss.core.color.color-schema": {
        "name": "color-schema",
        "type": "mixin",
        "description": "Print out the scoped color schema css",
        "namespace": "sugar.scss.core.color",
        "filename": "_color-schema.scss",
        "extension": "scss",
        "path": "src/scss/color/function/_color-schema.scss",
        "directory": "src/scss/color/function",
        "children": {},
        "relPath": "src/scss/color/function/_color-schema.scss",
        "relDirectory": "src/scss/color/function"
    },
    "sugar.scss.core.color.color-transparentize": {
        "name": "color-transparentize",
        "type": "Function",
        "description": "Makes $color more transparent.\nThe $amount must be a number between 0 and 1 (inclusive). Decreases the alpha channel of $color by that amount.",
        "namespace": "sugar.scss.core.color",
        "since": "1.0.0",
        "filename": "_color-transparentize.scss",
        "extension": "scss",
        "path": "src/scss/color/function/_color-transparentize.scss",
        "directory": "src/scss/color/function",
        "children": {},
        "relPath": "src/scss/color/function/_color-transparentize.scss",
        "relDirectory": "src/scss/color/function"
    },
    "sugar.scss.core.color.color": {
        "name": "color",
        "type": "function",
        "description": "Get a registered color by name or wrap a new color into a sugar.color call\nto manipulate it with ease.\nSupported actions :\n- hue {Deg}\n- lighten {Percent}\n- darken {Percent}\n- saturate {Percent}\n- desaturate {Percent}\n- grayscale {Boolean}\n- complement {Boolean}\n- invert {Boolean}\n- opacity {Percent}\n- mix {Color}\n- lightness {Percent}\n- saturation {Percent}",
        "namespace": "sugar.scss.core.color",
        "filename": "_color.scss",
        "extension": "scss",
        "path": "src/scss/color/function/_color.scss",
        "directory": "src/scss/color/function",
        "children": {},
        "relPath": "src/scss/color/function/_color.scss",
        "relDirectory": "src/scss/color/function"
    },
    "sugar.scss.core.color.has-color": {
        "name": "has-color",
        "type": "function",
        "description": "Check if the provided color is a registered one or not",
        "namespace": "sugar.scss.core.color",
        "filename": "_has-color.scss",
        "extension": "scss",
        "path": "src/scss/color/function/_has-color.scss",
        "directory": "src/scss/color/function",
        "children": {},
        "relPath": "src/scss/color/function/_has-color.scss",
        "relDirectory": "src/scss/color/function"
    },
    "sugar.scss.core.color.docblock-colors": {
        "name": "docblock-colors",
        "type": "mixin",
        "description": "Print the styleguide docblocks for the registered sugar colors",
        "namespace": "sugar.scss.core.color",
        "filename": "_docblock-colors.scss",
        "extension": "scss",
        "path": "src/scss/color/mixin/_docblock-colors.scss",
        "directory": "src/scss/color/mixin",
        "children": {},
        "relPath": "src/scss/color/mixin/_docblock-colors.scss",
        "relDirectory": "src/scss/color/mixin"
    },
    "sugar.scss.component.mixin.card-classes": {
        "name": "card-classes",
        "type": "Mixin",
        "description": "This mixin generate all the css needed to display properly some cards.",
        "namespace": "sugar.scss.component.mixin",
        "since": "2.0.0",
        "filename": "_card.scss",
        "extension": "scss",
        "path": "src/scss/component/mixin/_card.scss",
        "directory": "src/scss/component/mixin",
        "relPath": "src/scss/component/mixin/_card.scss",
        "relDirectory": "src/scss/component/mixin"
    },
    "sugar.scss.component.mixin.card.card-bare-classes": {
        "name": "card-bare-classes",
        "type": "Mixin",
        "description": "This mixin generate all the bare classes depending on the parameters you set.",
        "namespace": "sugar.scss.component.mixin.card",
        "since": "2.0.0",
        "filename": "_card.scss",
        "extension": "scss",
        "path": "src/scss/component/mixin/_card.scss",
        "directory": "src/scss/component/mixin",
        "relPath": "src/scss/component/mixin/_card.scss",
        "relDirectory": "src/scss/component/mixin"
    },
    "sugar.scss.component.mixin.card.card-style-classes": {
        "name": "card-style-classes",
        "type": "Mixin",
        "description": "This mixin generate all the style classes depending on the parameters you set.",
        "namespace": "sugar.scss.component.mixin.card",
        "since": "2.0.0",
        "filename": "_card.scss",
        "extension": "scss",
        "path": "src/scss/component/mixin/_card.scss",
        "directory": "src/scss/component/mixin",
        "relPath": "src/scss/component/mixin/_card.scss",
        "relDirectory": "src/scss/component/mixin"
    },
    "sugar.scss.component.mixin.card.card": {
        "name": "card",
        "type": "Mixin",
        "description": "This mixin generate all the properties for a button depending on the parameters you set.",
        "namespace": "sugar.scss.component.mixin.card",
        "since": "2.0.0",
        "filename": "_card.scss",
        "extension": "scss",
        "path": "src/scss/component/mixin/_card.scss",
        "directory": "src/scss/component/mixin",
        "relPath": "src/scss/component/mixin/_card.scss",
        "relDirectory": "src/scss/component/mixin"
    },
    "sugar.scss.component.mixin.card.card-bare": {
        "name": "card-bare",
        "type": "Mixin",
        "description": "This mixin generate all the bare properties for a button depending on the parameters you set.",
        "namespace": "sugar.scss.component.mixin.card",
        "since": "2.0.0",
        "filename": "_card.scss",
        "extension": "scss",
        "path": "src/scss/component/mixin/_card.scss",
        "directory": "src/scss/component/mixin",
        "relPath": "src/scss/component/mixin/_card.scss",
        "relDirectory": "src/scss/component/mixin"
    },
    "sugar.scss.component.mixin.card.card-style": {
        "name": "card-style",
        "type": "Mixin",
        "description": "This mixin generate all the style properties for a button depending on the parameters you set.",
        "namespace": "sugar.scss.component.mixin.card",
        "since": "2.0.0",
        "filename": "_card.scss",
        "extension": "scss",
        "path": "src/scss/component/mixin/_card.scss",
        "directory": "src/scss/component/mixin",
        "children": {},
        "relPath": "src/scss/component/mixin/_card.scss",
        "relDirectory": "src/scss/component/mixin"
    },
    "sugar.scss.component.mixin.inline-bar": {
        "name": "inline-bar",
        "type": "Mixin",
        "description": "This mixin allows you to display an inline styled bar.\nPretty simple you may think but this is very usefull for somple displays like\nshields display, links, etc...\nTheir's also the mixin ```inline-bar-bare``` and ```inline-bar-style``` that you\ncan use if you need more controls.",
        "namespace": "sugar.scss.component.mixin",
        "since": "2.0.0",
        "filename": "_inline-bar.scss",
        "extension": "scss",
        "path": "src/scss/component/mixin/_inline-bar.scss",
        "directory": "src/scss/component/mixin",
        "children": {},
        "relPath": "src/scss/component/mixin/_inline-bar.scss",
        "relDirectory": "src/scss/component/mixin"
    },
    "sugar.scss.component.mixin.user-avatar": {
        "name": "user-avatar",
        "type": "Mixin",
        "description": "This mixin display a user-avatar with a name and an image.\nTheir's also the mixin ```user-avatar-bare``` and ```user-avatar-style``` that you\ncan use if you need more controls.",
        "namespace": "sugar.scss.component.mixin",
        "since": "2.0.0",
        "filename": "_user-avatar.scss",
        "extension": "scss",
        "path": "src/scss/component/mixin/_user-avatar.scss",
        "directory": "src/scss/component/mixin",
        "children": {},
        "relPath": "src/scss/component/mixin/_user-avatar.scss",
        "relDirectory": "src/scss/component/mixin"
    },
    "sugar.scss.core.class.classes": {
        "name": "classes",
        "type": "mixin",
        "description": "Print out all wanted registered classes like padding helpers, margin helpers, font helpers, etc...",
        "namespace": "sugar.scss.core.class",
        "filename": "_classes.scss",
        "extension": "scss",
        "path": "src/scss/core/class/_classes.scss",
        "directory": "src/scss/core/class",
        "children": {},
        "relPath": "src/scss/core/class/_classes.scss",
        "relDirectory": "src/scss/core/class"
    },
    "sugar.scss.core.class.scope": {
        "name": "scope",
        "type": "mixin",
        "description": "This mixin allows you to wrap css code and specify which scope it refers to.\nThis will allows you to generate only the css scope you want like \"bare\", \"style\" or \"all\"",
        "namespace": "sugar.scss.core.class",
        "since": "2.0.0",
        "filename": "_scope.scss",
        "extension": "scss",
        "path": "src/scss/core/class/_scope.scss",
        "directory": "src/scss/core/class",
        "children": {},
        "relPath": "src/scss/core/class/_scope.scss",
        "relDirectory": "src/scss/core/class"
    },
    "sugar.scss.core.var.var-define": {
        "name": "var-define",
        "type": "Function",
        "description": "This mixin simply take a variable name (or doted path) and generate the css code to define this variable",
        "namespace": "sugar.scss.core.var",
        "since": "2.0.0",
        "filename": "_define.scss",
        "extension": "scss",
        "path": "src/scss/core/var/_define.scss",
        "directory": "src/scss/core/var",
        "children": {},
        "relPath": "src/scss/core/var/_define.scss",
        "relDirectory": "src/scss/core/var"
    },
    "sugar.scss.core.var.var-name": {
        "name": "var-name",
        "type": "Function",
        "description": "This function simply take a variable name (or doted path) and generate the sugar scope name for it",
        "namespace": "sugar.scss.core.var",
        "since": "2.0.0",
        "filename": "_name.scss",
        "extension": "scss",
        "path": "src/scss/core/var/_name.scss",
        "directory": "src/scss/core/var",
        "children": {},
        "relPath": "src/scss/core/var/_name.scss",
        "relDirectory": "src/scss/core/var"
    },
    "sugar.scss.core.var.var-output": {
        "name": "var-output",
        "type": "Mixin",
        "description": "This mixin simply print out the variables that you have defined in your project",
        "namespace": "sugar.scss.core.var",
        "since": "2.0.0",
        "filename": "_output.scss",
        "extension": "scss",
        "path": "src/scss/core/var/_output.scss",
        "directory": "src/scss/core/var",
        "children": {},
        "relPath": "src/scss/core/var/_output.scss",
        "relDirectory": "src/scss/core/var"
    },
    "sugar.scss.effect.mixin.effect-bubble": {
        "name": "effect-bubble",
        "type": "mixin",
        "description": "Create an arrow bubble effect",
        "namespace": "sugar.scss.effect.mixin",
        "since": "1.0.0",
        "filename": "_effect-bubble.scss",
        "extension": "scss",
        "path": "src/scss/effect/mixin/_effect-bubble.scss",
        "directory": "src/scss/effect/mixin",
        "children": {},
        "relPath": "src/scss/effect/mixin/_effect-bubble.scss",
        "relDirectory": "src/scss/effect/mixin"
    },
    "sugar.scss.effect.mixin.effect-depth": {
        "name": "effect-depth",
        "type": "mixin",
        "description": "Generate a drop shadow depending on the depth specified",
        "namespace": "sugar.scss.effect.mixin",
        "since": "1.0.0",
        "filename": "_effect-depth.scss",
        "extension": "scss",
        "path": "src/scss/effect/mixin/_effect-depth.scss",
        "directory": "src/scss/effect/mixin",
        "children": {},
        "relPath": "src/scss/effect/mixin/_effect-depth.scss",
        "relDirectory": "src/scss/effect/mixin"
    },
    "sugar.scss.effect.mixin.effect-hey": {
        "name": "effect-hey",
        "type": "mixin",
        "description": "Create a poping dot effect to catch user attention on a particular item\nThis mixin affect the :before and :after pseudo selector of the item",
        "namespace": "sugar.scss.effect.mixin",
        "since": "1.0.0",
        "filename": "_effect-hey.scss",
        "extension": "scss",
        "path": "src/scss/effect/mixin/_effect-hey.scss",
        "directory": "src/scss/effect/mixin",
        "children": {},
        "relPath": "src/scss/effect/mixin/_effect-hey.scss",
        "relDirectory": "src/scss/effect/mixin"
    },
    "sugar.scss.effect.mixin.effect-long-shadow": {
        "name": "effect-long-shadow",
        "type": "mixin",
        "description": "Generate a long shadow effect like [this](https://www.google.ch/search?q=long+shadow&espv=2&biw=2560&bih=1316&source=lnms&tbm=isch&sa=X&ved=0ahUKEwjjne6x49LPAhVBHRQKHat8AW8Q_AUIBigB)",
        "namespace": "sugar.scss.effect.mixin",
        "since": "1.0.0",
        "filename": "_effect-long-shadow.scss",
        "extension": "scss",
        "path": "src/scss/effect/mixin/_effect-long-shadow.scss",
        "directory": "src/scss/effect/mixin",
        "children": {},
        "relPath": "src/scss/effect/mixin/_effect-long-shadow.scss",
        "relDirectory": "src/scss/effect/mixin"
    },
    "sugar.scss.effect.mixin.effect-side-lined": {
        "name": "effect-side-lined",
        "type": "mixin",
        "description": "Create side lines around an item",
        "namespace": "sugar.scss.effect.mixin",
        "since": "1.0.0",
        "filename": "_effect-side-lined.scss",
        "extension": "scss",
        "path": "src/scss/effect/mixin/_effect-side-lined.scss",
        "directory": "src/scss/effect/mixin",
        "children": {},
        "relPath": "src/scss/effect/mixin/_effect-side-lined.scss",
        "relDirectory": "src/scss/effect/mixin"
    },
    "sugar.scss.filter.class.filter-classes": {
        "name": "filter-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"filter\" related classes.",
        "namespace": "sugar.scss.filter.class",
        "since": "2.0.0",
        "filename": "_filter.scss",
        "extension": "scss",
        "path": "src/scss/filter/class/_filter.scss",
        "directory": "src/scss/filter/class",
        "relPath": "src/scss/filter/class/_filter.scss",
        "relDirectory": "src/scss/filter/class"
    },
    "sugar.scss.filter.class.#{sel(fi-#{$name})}": {
        "name": "#{sel(fi-#{$name})}",
        "type": "Classname",
        "description": "Apply the filter **#{$name}**",
        "namespace": "sugar.scss.filter.class",
        "since": "1.0.0",
        "filename": "_filter.scss",
        "extension": "scss",
        "path": "src/scss/filter/class/_filter.scss",
        "directory": "src/scss/filter/class",
        "children": {},
        "relPath": "src/scss/filter/class/_filter.scss",
        "relDirectory": "src/scss/filter/class"
    },
    "sugar.scss.map.function.filter-map": {
        "name": "filter-map",
        "type": "function",
        "description": "Take a filter as parameter and parse it to return the {Map} corresponding\nThe $filter parameter can be either a registered filter name or a filter formated like `filterName(filterValue)`",
        "namespace": "sugar.scss.map.function",
        "filename": "_filter-map.scss",
        "extension": "scss",
        "path": "src/scss/filter/function/_filter-map.scss",
        "directory": "src/scss/filter/function",
        "children": {},
        "relPath": "src/scss/filter/function/_filter-map.scss",
        "relDirectory": "src/scss/filter/function"
    },
    "sugar.scss.filter.function.filter": {
        "name": "filter",
        "type": "function",
        "description": "Return a list with all the filters that are passed as argument\nThis will use the [./_s-filter-map.scss] function to parse the filters",
        "namespace": "sugar.scss.filter.function",
        "filename": "_filter.scss",
        "extension": "scss",
        "path": "src/scss/filter/function/_filter.scss",
        "directory": "src/scss/filter/function",
        "children": {},
        "relPath": "src/scss/filter/function/_filter.scss",
        "relDirectory": "src/scss/filter/function"
    },
    "sugar.scss.filter.mixin.filter": {
        "name": "filter",
        "type": "mixin",
        "description": "Print out a list with all the filters that are passed as argument\nThis will use the [../functions/_filter-map.scss] function to parse the filters",
        "namespace": "sugar.scss.filter.mixin",
        "filename": "_filter.scss",
        "extension": "scss",
        "path": "src/scss/filter/mixin/_filter.scss",
        "directory": "src/scss/filter/mixin",
        "children": {},
        "relPath": "src/scss/filter/mixin/_filter.scss",
        "relDirectory": "src/scss/filter/mixin"
    },
    "sugar.scss.font.class.font-classes": {
        "name": "font-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"font\" related classes.",
        "namespace": "sugar.scss.font.class",
        "since": "2.0.0",
        "filename": "_font.scss",
        "extension": "scss",
        "path": "src/scss/font/class/_font.scss",
        "directory": "src/scss/font/class",
        "relPath": "src/scss/font/class/_font.scss",
        "relDirectory": "src/scss/font/class"
    },
    "sugar.scss.font.class.#{sel(font-#{$name})}": {
        "name": "#{sel(font-#{$name})}",
        "type": "Classname",
        "description": "Apply the font size **#{$name}** (**#{$size}**)",
        "namespace": "sugar.scss.font.class",
        "since": "1.0.0",
        "filename": "_font.scss",
        "extension": "scss",
        "path": "src/scss/font/class/_font.scss",
        "directory": "src/scss/font/class",
        "children": {},
        "relPath": "src/scss/font/class/_font.scss",
        "relDirectory": "src/scss/font/class"
    },
    "sugar.scss.font.function.font-family": {
        "name": "font-family",
        "type": "function",
        "description": "Return the font-family string or a registered font",
        "namespace": "sugar.scss.font.function",
        "filename": "_font-family.scss",
        "extension": "scss",
        "path": "src/scss/font/function/_font-family.scss",
        "directory": "src/scss/font/function",
        "children": {},
        "relPath": "src/scss/font/function/_font-family.scss",
        "relDirectory": "src/scss/font/function"
    },
    "sugar.scss.font.function.font": {
        "name": "font",
        "type": "function",
        "description": "Return the font {Map} that correspond to the passed arguments",
        "namespace": "sugar.scss.font.function",
        "filename": "_font.scss",
        "extension": "scss",
        "path": "src/scss/font/function/_font.scss",
        "directory": "src/scss/font/function",
        "children": {},
        "relPath": "src/scss/font/function/_font.scss",
        "relDirectory": "src/scss/font/function"
    },
    "sugar.scss.font.mixin.font-face": {
        "name": "font-face",
        "type": "mixin",
        "description": "Helper to print a font-face",
        "namespace": "sugar.scss.font.mixin",
        "filename": "_font-face.scss",
        "extension": "scss",
        "path": "src/scss/font/mixin/_font-face.scss",
        "directory": "src/scss/font/mixin",
        "children": {
            "#{$font-family}": {
                "name": "#{$font-family}"
            }
        },
        "relPath": "src/scss/font/mixin/_font-face.scss",
        "relDirectory": "src/scss/font/mixin"
    },
    "sugar.scss.font.mixin.font": {
        "name": "font",
        "type": "mixin",
        "description": "Print all the fonts properties that correspond to the passed arguments",
        "namespace": "sugar.scss.font.mixin",
        "filename": "_font.scss",
        "extension": "scss",
        "path": "src/scss/font/mixin/_font.scss",
        "directory": "src/scss/font/mixin",
        "children": {},
        "relPath": "src/scss/font/mixin/_font.scss",
        "relDirectory": "src/scss/font/mixin"
    },
    "sugar.scss.form.mixin.input-placeholder": {
        "name": "input-placeholder",
        "type": "mixin",
        "description": "Set the placeholder style for inputs, etc...",
        "namespace": "sugar.scss.form.mixin",
        "since": "1.0.0",
        "filename": "_input-placeholder.scss",
        "extension": "scss",
        "path": "src/scss/form/mixin/_input-placeholder.scss",
        "directory": "src/scss/form/mixin",
        "children": {},
        "relPath": "src/scss/form/mixin/_input-placeholder.scss",
        "relDirectory": "src/scss/form/mixin"
    },
    "sugar.scss.helper.class.helper-block-classes": {
        "name": "helper-block-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"block\" related helper classes.",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_block.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_block.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_block.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(block-center)}": {
        "name": "#{sel(block-center)}",
        "type": "class",
        "description": "Set the element to as ```display:block``` and center it",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_block.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_block.scss",
        "directory": "src/scss/helper/class",
        "children": {},
        "relPath": "src/scss/helper/class/_block.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.helper-border-classes": {
        "name": "helper-border-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"border\" related helper classes.",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_border.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_border.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_border.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{$cls}": {
        "name": "#{$cls}",
        "type": "class",
        "description": "Remove the y (top and bottom) borders",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_border.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_border.scss",
        "directory": "src/scss/helper/class",
        "children": {},
        "relPath": "src/scss/helper/class/_border.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.helper-clear-classes": {
        "name": "helper-clear-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"clear\" related helper classes.",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_clear.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_clear.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_clear.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(clear-left)}": {
        "name": "#{sel(clear-left)}",
        "type": "class",
        "description": "Clear the left float on the element",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_clear.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_clear.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_clear.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(clear-right)}": {
        "name": "#{sel(clear-right)}",
        "type": "class",
        "description": "Clear the right float on the element",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_clear.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_clear.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_clear.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(clear)}": {
        "name": "#{sel(clear)}",
        "type": "class",
        "description": "Clear both float on the element",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_clear.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_clear.scss",
        "directory": "src/scss/helper/class",
        "children": {},
        "relPath": "src/scss/helper/class/_clear.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.helper-clearfix-classes": {
        "name": "helper-clearfix-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"clearfix\" related helper classes.",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_clearfix.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_clearfix.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_clearfix.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(clearfix)}": {
        "name": "#{sel(clearfix)}",
        "type": "class",
        "description": "Apply the micro clearfix on the element",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_clearfix.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_clearfix.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_clearfix.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(clearfix-float)}": {
        "name": "#{sel(clearfix-float)}",
        "type": "class",
        "description": "Apply the float clearfix on the element",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_clearfix.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_clearfix.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_clearfix.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(clearfix-micro)}": {
        "name": "#{sel(clearfix-micro)}",
        "type": "class",
        "description": "Apply the micro clearfix on the element",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_clearfix.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_clearfix.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_clearfix.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(clearfix-overflow)}": {
        "name": "#{sel(clearfix-overflow)}",
        "type": "class",
        "description": "Apply the overflow clearfix on the element",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_clearfix.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_clearfix.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_clearfix.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(clearfix-facebook)}": {
        "name": "#{sel(clearfix-facebook)}",
        "type": "class",
        "description": "Apply the facebook clearfix on the element",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_clearfix.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_clearfix.scss",
        "directory": "src/scss/helper/class",
        "children": {},
        "relPath": "src/scss/helper/class/_clearfix.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.helper-display-classes": {
        "name": "helper-display-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"display\" related helper classes.",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_display.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_display.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_display.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(block)}": {
        "name": "#{sel(block)}",
        "type": "class",
        "description": "Display the element as ```block```",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_display.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_display.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_display.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(inline)}": {
        "name": "#{sel(inline)}",
        "type": "class",
        "description": "Display the element as ```inline```",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_display.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_display.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_display.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(inline-block)}": {
        "name": "#{sel(inline-block)}",
        "type": "class",
        "description": "Display the element as ```inline-block```",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_display.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_display.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_display.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(show)}": {
        "name": "#{sel(show)}",
        "type": "class",
        "description": "Display the element as ```block```",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_display.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_display.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_display.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(show-inline)}": {
        "name": "#{sel(show-inline)}",
        "type": "class",
        "description": "Display the element as ```inline-block```",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_display.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_display.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_display.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(hidden)}": {
        "name": "#{sel(hidden)}",
        "type": "class",
        "description": "Hide the element by setting the display to ```none```",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_display.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_display.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_display.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(hide)}": {
        "name": "#{sel(hide)}",
        "type": "class",
        "description": "Hide the element by setting the display to ```none```",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_display.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_display.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_display.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(visible)}": {
        "name": "#{sel(visible)}",
        "type": "class",
        "description": "Display the element by setting the visibility to ```visible```",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_display.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_display.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_display.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(invisible)}": {
        "name": "#{sel(invisible)}",
        "type": "class",
        "description": "Display the element by setting the visibility to ```hidden```",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_display.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_display.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_display.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(visually-hidden)}": {
        "name": "#{sel(visually-hidden)}",
        "type": "class",
        "description": "Hide the element from display but not for SEO.\nThis class use some tricks to make the element dissapear without using some ```display:none;```, etc...",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_display.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_display.scss",
        "directory": "src/scss/helper/class",
        "children": {},
        "relPath": "src/scss/helper/class/_display.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.helper-flex-classes": {
        "name": "helper-flex-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"flex\" related helper classes.",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_flex.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_flex.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(flex)}": {
        "name": "#{sel(flex)}",
        "type": "class",
        "description": "Apply the display flex styling to the element",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_flex.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_flex.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(flex-inline)}": {
        "name": "#{sel(flex-inline)}",
        "type": "class",
        "description": "Apply the display flex-inline styling to the element",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_flex.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_flex.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(flex-justify-start)}": {
        "name": "#{sel(flex-justify-start)}",
        "type": "class",
        "description": "Apply the property ```justify-content``` to **start**",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_flex.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_flex.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(flex-justify-end)}": {
        "name": "#{sel(flex-justify-end)}",
        "type": "class",
        "description": "Apply the property ```justify-content``` to **end**",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_flex.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_flex.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(flex-justify-center)}": {
        "name": "#{sel(flex-justify-center)}",
        "type": "class",
        "description": "Apply the property ```justify-content``` to **center**",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_flex.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_flex.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(flex-justify-between)}": {
        "name": "#{sel(flex-justify-between)}",
        "type": "class",
        "description": "Apply the property ```justify-content``` to **space-between**",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_flex.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_flex.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(flex-justify-around)}": {
        "name": "#{sel(flex-justify-around)}",
        "type": "class",
        "description": "Apply the property ```justify-content``` to **space-around**",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_flex.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_flex.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(flex-align-start)}": {
        "name": "#{sel(flex-align-start)}",
        "type": "class",
        "description": "Apply the property ```align-items``` to **flex-start**",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_flex.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_flex.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(flex-align-end)}": {
        "name": "#{sel(flex-align-end)}",
        "type": "class",
        "description": "Apply the property ```align-items``` to **flex-end**",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_flex.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_flex.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(flex-align-center)}": {
        "name": "#{sel(flex-align-center)}",
        "type": "class",
        "description": "Apply the property ```align-items``` to **center**",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_flex.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_flex.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(flex-align-baseline)}": {
        "name": "#{sel(flex-align-baseline)}",
        "type": "class",
        "description": "Apply the property ```align-items``` to **baseline**",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_flex.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_flex.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(flex-align-stretch)}": {
        "name": "#{sel(flex-align-stretch)}",
        "type": "class",
        "description": "Apply the property ```align-items``` to **stretch**",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_flex.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_flex.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(flex-align-self-start)}": {
        "name": "#{sel(flex-align-self-start)}",
        "type": "class",
        "description": "Apply the property ```align-self``` to **flex-start**",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_flex.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_flex.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(flex-align-self-end)}": {
        "name": "#{sel(flex-align-self-end)}",
        "type": "class",
        "description": "Apply the property ```align-self``` to **flex-end**",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_flex.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_flex.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(flex-align-self-center)}": {
        "name": "#{sel(flex-align-self-center)}",
        "type": "class",
        "description": "Apply the property ```align-self``` to **flex-center**",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_flex.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_flex.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(flex-align-self-baseline)}": {
        "name": "#{sel(flex-align-self-baseline)}",
        "type": "class",
        "description": "Apply the property ```align-self``` to **flex-baseline**",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_flex.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_flex.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(flex-align-self-stretch)}": {
        "name": "#{sel(flex-align-self-stretch)}",
        "type": "class",
        "description": "Apply the property ```align-self``` to **flex-stretch**",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_flex.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_flex.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(flex-nowrap)}": {
        "name": "#{sel(flex-nowrap)}",
        "type": "class",
        "description": "Apply the ```flex-wrap``` property to **nowrap**",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_flex.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_flex.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(flex-wrap)}": {
        "name": "#{sel(flex-wrap)}",
        "type": "class",
        "description": "Apply the ```flex-wrap``` property to **wrap**",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_flex.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_flex.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(flex-wrap-reverse)}": {
        "name": "#{sel(flex-wrap-reverse)}",
        "type": "class",
        "description": "Apply the ```flex-wrap``` property to **wrap-reverse**",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_flex.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_flex.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(flex-order-#{i})}": {
        "name": "#{sel(flex-order-#{i})}",
        "type": "class",
        "description": "Set the order on a specific flex item.\nYou will have <primary>#{$ordersCount}</primary> available. This can be\nchanged by updating the *config.scss.helpers.flex.order-count** configuration.",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_flex.scss",
        "directory": "src/scss/helper/class",
        "children": {},
        "relPath": "src/scss/helper/class/_flex.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.helper-link-classes": {
        "name": "helper-link-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"link\" related helper classes.",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_link.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_link.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_link.scss",
        "relDirectory": "src/scss/helper/class"
    },
    ")}            sugar.scss.helper.class.#{sel(link-stretched": {
        "name": "#{sel(link-stretched",
        "type": "class",
        "description": "Make a link become the size of it's parent (absolute, relative)\nbut only using the :after pseudo class so visually it will stay the same...",
        "namespace": ")}            sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_link.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_link.scss",
        "directory": "src/scss/helper/class",
        "children": {},
        "relPath": "src/scss/helper/class/_link.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.helper-margin-classes": {
        "name": "helper-margin-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"margin\" related helper classes.",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_margin.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_margin.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_margin.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.core.class.#{$cname}": {
        "name": "#{$cname}",
        "type": "Classname",
        "description": "Set the **top and bottom** padding to the **#{$name}**",
        "namespace": "sugar.scss.core.class",
        "since": "1.0.0",
        "filename": "_padding.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_padding.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_padding.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.core.class.#{sel(no-m)}": {
        "name": "#{sel(no-m)}",
        "type": "class",
        "description": "Reset all margins",
        "namespace": "sugar.scss.core.class",
        "since": "1.0.0",
        "filename": "_margin.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_margin.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_margin.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.core.class.#{sel(no-margin-top)}": {
        "name": "#{sel(no-margin-top)}",
        "type": "class",
        "description": "Reset **top** margin",
        "namespace": "sugar.scss.core.class",
        "since": "1.0.0",
        "filename": "_margin.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_margin.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_margin.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.core.class.#{sel(no-margin-right)}": {
        "name": "#{sel(no-margin-right)}",
        "type": "class",
        "description": "Reset **right** margin",
        "namespace": "sugar.scss.core.class",
        "since": "1.0.0",
        "filename": "_margin.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_margin.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_margin.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.core.class.#{sel(no-margin-bottom)}": {
        "name": "#{sel(no-margin-bottom)}",
        "type": "class",
        "description": "Reset **bottom** margin",
        "namespace": "sugar.scss.core.class",
        "since": "1.0.0",
        "filename": "_margin.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_margin.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_margin.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.core.class.#{sel(no-margin-left)}": {
        "name": "#{sel(no-margin-left)}",
        "type": "class",
        "description": "Reset **left** margin",
        "namespace": "sugar.scss.core.class",
        "since": "1.0.0",
        "filename": "_margin.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_margin.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_margin.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.core.class.#{sel(no-margin-x)}": {
        "name": "#{sel(no-margin-x)}",
        "type": "class",
        "description": "Reset **left** and **right** margins",
        "namespace": "sugar.scss.core.class",
        "since": "1.0.0",
        "filename": "_margin.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_margin.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_margin.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.core.class.#{sel(no-margin-y)}": {
        "name": "#{sel(no-margin-y)}",
        "type": "class",
        "description": "Reset **top** and **bottom** margins",
        "namespace": "sugar.scss.core.class",
        "since": "1.0.0",
        "filename": "_margin.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_margin.scss",
        "directory": "src/scss/helper/class",
        "children": {},
        "relPath": "src/scss/helper/class/_margin.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.helper-media-classes": {
        "name": "helper-media-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"media object\" related helper classes.",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_media-object.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_media-object.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_media-object.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(media-object)} #{sel(media-object--center)} #{sel(media-object__content)}": {
        "name": "#{sel(media-object)} #{sel(media-object--center)} #{sel(media-object__content)}",
        "type": "class",
        "description": "Famous media object class",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_media-object.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_media-object.scss",
        "directory": "src/scss/helper/class",
        "children": {},
        "relPath": "src/scss/helper/class/_media-object.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.helper-overflow-classes": {
        "name": "helper-overflow-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"overflow\" related helper classes.",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_overflow.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_overflow.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_overflow.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(overflow-hidden)}": {
        "name": "#{sel(overflow-hidden)}",
        "type": "Classname",
        "description": "Set the overflow to hidden",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_overflow.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_overflow.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_overflow.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(overflow-auto)}": {
        "name": "#{sel(overflow-auto)}",
        "type": "Classname",
        "description": "Set the overflow to auto",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_overflow.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_overflow.scss",
        "directory": "src/scss/helper/class",
        "children": {},
        "relPath": "src/scss/helper/class/_overflow.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.helper-padding-classes": {
        "name": "helper-padding-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"padding\" related helper classes.",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_padding.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_padding.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_padding.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.core.class.#{sel(no-p)}": {
        "name": "#{sel(no-p)}",
        "type": "Classname",
        "description": "Reset **all** paddings",
        "namespace": "sugar.scss.core.class",
        "since": "1.0.0",
        "filename": "_padding.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_padding.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_padding.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.core.class.#{sel(no-p-t)}": {
        "name": "#{sel(no-p-t)}",
        "type": "Classname",
        "description": "Reset **top** padding",
        "namespace": "sugar.scss.core.class",
        "since": "1.0.0",
        "filename": "_padding.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_padding.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_padding.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.core.class.#{sel(no-p-r)}": {
        "name": "#{sel(no-p-r)}",
        "type": "Classname",
        "description": "Reset **right** padding",
        "namespace": "sugar.scss.core.class",
        "since": "1.0.0",
        "filename": "_padding.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_padding.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_padding.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.core.class.#{sel(no-p-b)}": {
        "name": "#{sel(no-p-b)}",
        "type": "class",
        "description": "Reset **bottom** padding",
        "namespace": "sugar.scss.core.class",
        "since": "1.0.0",
        "filename": "_padding.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_padding.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_padding.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.core.class.#{sel(no-p-l)}": {
        "name": "#{sel(no-p-l)}",
        "type": "class",
        "description": "Reset **left** padding",
        "namespace": "sugar.scss.core.class",
        "since": "1.0.0",
        "filename": "_padding.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_padding.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_padding.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.core.class.#{sel(no-p-s)}": {
        "name": "#{sel(no-p-s)}",
        "type": "class",
        "description": "Reset **left** and **right** paddings",
        "namespace": "sugar.scss.core.class",
        "since": "1.0.0",
        "filename": "_padding.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_padding.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_padding.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.core.class.#{sel(no-p-y)}": {
        "name": "#{sel(no-p-y)}",
        "type": "class",
        "description": "Reset **top** and **bottom** paddings",
        "namespace": "sugar.scss.core.class",
        "since": "1.0.0",
        "filename": "_padding.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_padding.scss",
        "directory": "src/scss/helper/class",
        "children": {},
        "relPath": "src/scss/helper/class/_padding.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.helper-pointer-classes": {
        "name": "helper-pointer-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"pointer\" related helper classes.",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_pointer.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_pointer.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_pointer.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(pointer-events-none)}": {
        "name": "#{sel(pointer-events-none)}",
        "type": "Classname",
        "description": "Disable any pointer events",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_pointer.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_pointer.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_pointer.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(pointer-events-all)}": {
        "name": "#{sel(pointer-events-all)}",
        "type": "Classname",
        "description": "Enable any pointer events",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_pointer.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_pointer.scss",
        "directory": "src/scss/helper/class",
        "children": {},
        "relPath": "src/scss/helper/class/_pointer.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.helper-position-classes": {
        "name": "helper-position-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"position\" related helper classes.",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_position.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_position.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_position.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(relative)}": {
        "name": "#{sel(relative)}",
        "type": "Classname",
        "description": "Set an element position as ```relative```",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_position.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_position.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_position.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(absolute)}": {
        "name": "#{sel(absolute)}",
        "type": "Classname",
        "description": "Set an element position as ```absolute```",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_position.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_position.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_position.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(fixed)}": {
        "name": "#{sel(fixed)}",
        "type": "Classname",
        "description": "Set an element position as ```fixed```",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_position.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_position.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_position.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(fixed-top)}": {
        "name": "#{sel(fixed-top)}",
        "type": "Classname",
        "description": "Set an element position as ```fixed``` top",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_position.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_position.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_position.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(fixed-bottom)}": {
        "name": "#{sel(fixed-bottom)}",
        "type": "Classname",
        "description": "Set an element position as ```fixed``` bottom",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_position.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_position.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_position.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(sticky)}": {
        "name": "#{sel(sticky)}",
        "type": "Classname",
        "description": "Set an element position as ```sticky```",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_position.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_position.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_position.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(sticky-top)}": {
        "name": "#{sel(sticky-top)}",
        "type": "Classname",
        "description": "Set an element position as ```sticky``` top",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_position.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_position.scss",
        "directory": "src/scss/helper/class",
        "children": {},
        "relPath": "src/scss/helper/class/_position.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.helper-pull-classes": {
        "name": "helper-pull-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"pull\" related helper classes.",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_pull.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_pull.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_pull.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(pull-left)}": {
        "name": "#{sel(pull-left)}",
        "type": "Classname",
        "description": "Allows you to pull an element to the left side",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_pull.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_pull.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_pull.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(pull-right)}": {
        "name": "#{sel(pull-right)}",
        "type": "Classname",
        "description": "Allows you to pull an element to the right side",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_pull.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_pull.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_pull.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(pull-none)}": {
        "name": "#{sel(pull-none)}",
        "type": "Classname",
        "description": "Reset the pull (float) styling on the element",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_pull.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_pull.scss",
        "directory": "src/scss/helper/class",
        "children": {},
        "relPath": "src/scss/helper/class/_pull.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.helper-ratio-classes": {
        "name": "helper-ratio-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"ratio\" related helper classes.",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_ratio.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_ratio.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_ratio.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{$cname}": {
        "name": "#{$cname}",
        "type": "Classname",
        "description": "Set the **ratio** to the **#{$name}**",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_ratio.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_ratio.scss",
        "directory": "src/scss/helper/class",
        "children": {},
        "relPath": "src/scss/helper/class/_ratio.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.helper-screen-reader-classes": {
        "name": "helper-screen-reader-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"screen-reader\" related helper classes.",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_screen-reader.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_screen-reader.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_screen-reader.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(screen-reader-only)}": {
        "name": "#{sel(screen-reader-only)}",
        "type": "Classname",
        "description": "Display the element only on screen readers",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_screen-reader.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_screen-reader.scss",
        "directory": "src/scss/helper/class",
        "children": {},
        "relPath": "src/scss/helper/class/_screen-reader.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.helper-size-classes": {
        "name": "helper-size-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"size\" related helper classes.",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_size.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_size.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(abs-cover)}": {
        "name": "#{sel(abs-cover)}",
        "type": "Classname",
        "description": "Set a size that will cover the entire parent surface by positionning it in absolute",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_size.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_size.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(abs-cover--top)}": {
        "name": "#{sel(abs-cover--top)}",
        "type": "Classname",
        "description": "This will align an \"abs-cover\" content to the top",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_size.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_size.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(abs-cover--middle)}": {
        "name": "#{sel(abs-cover--middle)}",
        "type": "Classname",
        "description": "This will align an \"abs-cover\" content to the middle",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_size.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_size.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(abs-cover--bottom)}": {
        "name": "#{sel(abs-cover--bottom)}",
        "type": "Classname",
        "description": "This will align an \"abs-cover\" content to the bottom",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_size.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_size.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(abs-cover--left)}": {
        "name": "#{sel(abs-cover--left)}",
        "type": "Classname",
        "description": "This will align an \"abs-cover\" content to the left",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_size.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_size.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(abs-cover--center)}": {
        "name": "#{sel(abs-cover--center)}",
        "type": "Classname",
        "description": "This will align an \"abs-cover\" content to the center",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_size.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_size.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(abs-cover--right)}": {
        "name": "#{sel(abs-cover--right)}",
        "type": "Classname",
        "description": "This will align an \"abs-cover\" content to the right",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_size.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_size.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(abs-contain)}": {
        "name": "#{sel(abs-contain)}",
        "type": "Classname",
        "description": "Set a size that will contain the entire parent surface by positionning it in absolute",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_size.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_size.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(abs-contain--top)}": {
        "name": "#{sel(abs-contain--top)}",
        "type": "Classname",
        "description": "This will align an \"abs-contain\" content to the top",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_size.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_size.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(abs-contain--middle)}": {
        "name": "#{sel(abs-contain--middle)}",
        "type": "Classname",
        "description": "This will align an \"abs-contain\" content to the middle",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_size.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_size.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(abs-contain--bottom)}": {
        "name": "#{sel(abs-contain--bottom)}",
        "type": "Classname",
        "description": "This will align an \"abs-contain\" content to the bottom",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_size.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_size.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(abs-contain--left)}": {
        "name": "#{sel(abs-contain--left)}",
        "type": "Classname",
        "description": "This will align an \"abs-contain\" content to the left",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_size.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_size.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(abs-contain--center)}": {
        "name": "#{sel(abs-contain--center)}",
        "type": "Classname",
        "description": "This will align an \"abs-contain\" content to the center",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_size.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_size.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(abs-contain--right)}": {
        "name": "#{sel(abs-contain--right)}",
        "type": "Classname",
        "description": "This will align an \"abs-contain\" content to the right",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_size.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_size.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(abs-fit)}": {
        "name": "#{sel(abs-fit)}",
        "type": "Classname",
        "description": "Set a size that will fit the entire parent surface by positionning it in absolute",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_size.scss",
        "directory": "src/scss/helper/class",
        "children": {},
        "relPath": "src/scss/helper/class/_size.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.helper-text-classes": {
        "name": "helper-text-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"text\" related helper classes.",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_text.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_text.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(t-#{$size})}": {
        "name": "#{sel(t-#{$size})}",
        "type": "class",
        "description": "Set the size **#{$size}** relative to the root element",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_text.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_text.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(t-#{$size}-rel)}": {
        "name": "#{sel(t-#{$size}-rel)}",
        "type": "Classname",
        "description": "Set the size **#{$size}** relative to my parent",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_text.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_text.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(t-hidden)}": {
        "name": "#{sel(t-hidden)}",
        "type": "Classname",
        "description": "Hide the text",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_text.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_text.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(t-truncate)}": {
        "name": "#{sel(t-truncate)}",
        "type": "Classname",
        "description": "Truncate the text",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_text.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_text.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(t-left)}": {
        "name": "#{sel(t-left)}",
        "type": "Classname",
        "description": "Align the text to the left",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_text.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_text.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(t-right)}": {
        "name": "#{sel(t-right)}",
        "type": "Classname",
        "description": "Align the text to the right",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_text.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_text.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(t-center)}": {
        "name": "#{sel(t-center)}",
        "type": "Classname",
        "description": "Align the text to the center",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_text.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_text.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(t-justify)}": {
        "name": "#{sel(t-justify)}",
        "type": "Classname",
        "description": "Make the text justified",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_text.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_text.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(t-lowercase)}": {
        "name": "#{sel(t-lowercase)}",
        "type": "Classname",
        "description": "Transform the text to lowercase",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_text.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_text.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(t-uppercase)}": {
        "name": "#{sel(t-uppercase)}",
        "type": "Classname",
        "description": "Transform the text to uppercase",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_text.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_text.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(t-capitalize)}": {
        "name": "#{sel(t-capitalize)}",
        "type": "Classname",
        "description": "Capizalize the words",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_text.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_text.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(t-bold)}": {
        "name": "#{sel(t-bold)}",
        "type": "Classname",
        "description": "Make the text bold",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_text.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_text.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(t-bolder)}": {
        "name": "#{sel(t-bolder)}",
        "type": "Classname",
        "description": "Make the text bolder",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_text.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_text.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(t-normal)}": {
        "name": "#{sel(t-normal)}",
        "type": "Classname",
        "description": "Make the text normal",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_text.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_text.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(t-light)}": {
        "name": "#{sel(t-light)}",
        "type": "Classname",
        "description": "Make the text light",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_text.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_text.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(t-lighter)}": {
        "name": "#{sel(t-lighter)}",
        "type": "Classname",
        "description": "Make the text lighter",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_text.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_text.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(t-italic)}": {
        "name": "#{sel(t-italic)}",
        "type": "Classname",
        "description": "Make the text italic",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_text.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_text.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(t-#{$name})}": {
        "name": "#{sel(t-#{$name})}",
        "type": "Classname",
        "description": "Apply the font \"#{$name}\"",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_text.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_text.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(t-reset)}": {
        "name": "#{sel(t-reset)}",
        "type": "Classname",
        "description": "Reset the text (font-weight, family, color, etc...)",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_text.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_text.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(t-decoration-none)}": {
        "name": "#{sel(t-decoration-none)}",
        "type": "Classname",
        "description": "Remove the text decoration",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_text.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_text.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(t-underline)}": {
        "name": "#{sel(t-underline)}",
        "type": "Classname",
        "description": "Apply the decoration underline",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_text.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_text.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(t-line-through)}": {
        "name": "#{sel(t-line-through)}",
        "type": "Classname",
        "description": "Apply the decoration line-through",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_text.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_text.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(t-overline)}": {
        "name": "#{sel(t-overline)}",
        "type": "Classname",
        "description": "Apply the decoration overline",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_text.scss",
        "directory": "src/scss/helper/class",
        "children": {},
        "relPath": "src/scss/helper/class/_text.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.helper-transmation-classes": {
        "name": "helper-transmation-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"transmation\" related helper classes.",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_transmation.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_transmation.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_transmation.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(no-transition)}": {
        "name": "#{sel(no-transition)}",
        "type": "Classname",
        "description": "Disable the transitions **only on the element**",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_transmation.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_transmation.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_transmation.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(clear-transition)}": {
        "name": "#{sel(clear-transition)}",
        "type": "Classname",
        "description": "Disable the transitions **on the element and all his children**",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_transmation.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_transmation.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_transmation.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(no-animation)}": {
        "name": "#{sel(no-animation)}",
        "type": "Classname",
        "description": "Disable the animations **only on the element**",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_transmation.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_transmation.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_transmation.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(clear-animation)}": {
        "name": "#{sel(clear-animation)}",
        "type": "Classname",
        "description": "Disable the transitions **on the element and all his children**",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_transmation.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_transmation.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_transmation.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(no-transmation)}": {
        "name": "#{sel(no-transmation)}",
        "type": "Classname",
        "description": "Disable the animations and transitions **only on the element**",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_transmation.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_transmation.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_transmation.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(clear-transmation)}": {
        "name": "#{sel(clear-transmation)}",
        "type": "Classname",
        "description": "Disable the animations and transitions **on the element and all his children**",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_transmation.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_transmation.scss",
        "directory": "src/scss/helper/class",
        "children": {},
        "relPath": "src/scss/helper/class/_transmation.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.helper-user-select-classes": {
        "name": "helper-user-select-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"user-select\" related helper classes.",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_user-select.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_user-select.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_user-select.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(user-select-none)}": {
        "name": "#{sel(user-select-none)}",
        "type": "Classname",
        "description": "Disable the selection for this element",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_user-select.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_user-select.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_user-select.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(user-select-all)}": {
        "name": "#{sel(user-select-all)}",
        "type": "Classname",
        "description": "Enable the selection for this element",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_user-select.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_user-select.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_user-select.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(user-select-text)}": {
        "name": "#{sel(user-select-text)}",
        "type": "Classname",
        "description": "The text can be selected only",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_user-select.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_user-select.scss",
        "directory": "src/scss/helper/class",
        "children": {},
        "relPath": "src/scss/helper/class/_user-select.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.helper-vertical-align-classes": {
        "name": "helper-vertical-align-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"vertical-align\" related helper classes.",
        "namespace": "sugar.scss.helper.class",
        "since": "2.0.0",
        "filename": "_vertical-align.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_vertical-align.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_vertical-align.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class..#{sel(align-top)}": {
        "name": ".#{sel(align-top)}",
        "type": "Classname",
        "description": "Align vertically top",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_vertical-align.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_vertical-align.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_vertical-align.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class..#{sel(align-bottom)}": {
        "name": ".#{sel(align-bottom)}",
        "type": "Classname",
        "description": "Align vertically bottom",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_vertical-align.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_vertical-align.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_vertical-align.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class..#{sel(align-middle)}": {
        "name": ".#{sel(align-middle)}",
        "type": "Classname",
        "description": "Align vertically middle",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_vertical-align.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_vertical-align.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_vertical-align.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class..#{sel(align-baseline)}": {
        "name": ".#{sel(align-baseline)}",
        "type": "Classname",
        "description": "Align vertically baseline",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_vertical-align.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_vertical-align.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_vertical-align.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(align-text-top)}": {
        "name": "#{sel(align-text-top)}",
        "type": "Classname",
        "description": "Align vertically text-top",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_vertical-align.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_vertical-align.scss",
        "directory": "src/scss/helper/class",
        "relPath": "src/scss/helper/class/_vertical-align.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.class.#{sel(align-text-bottom)}": {
        "name": "#{sel(align-text-bottom)}",
        "type": "Classname",
        "description": "Align vertically text-bottom",
        "namespace": "sugar.scss.helper.class",
        "since": "1.0.0",
        "filename": "_vertical-align.scss",
        "extension": "scss",
        "path": "src/scss/helper/class/_vertical-align.scss",
        "directory": "src/scss/helper/class",
        "children": {},
        "relPath": "src/scss/helper/class/_vertical-align.scss",
        "relDirectory": "src/scss/helper/class"
    },
    "sugar.scss.helper.function.is": {
        "name": "is",
        "type": "function",
        "description": "Check if the passed value is of a certain type\n\nHere's the available types that you can check\n- mixed => mean anything\n- null\n- url\n- px\n- pt\n- rem\n- em\n- percent | %\n- vw\n- vh\n- ex\n- ch\n- cm\n- mm\n- in\n- pc\n- s | second\n- boolean | bool\n- function\n- number\n- int | integer\n- string\n- color\n- list\n- map\n- deg | degree\n- list-{type} => check if is a list of the specified type\n- map-{type} => check if is a map of the specified type",
        "namespace": "sugar.scss.helper.function",
        "since": "1.0.0",
        "filename": "_is.scss",
        "extension": "scss",
        "path": "src/scss/helper/function/_is.scss",
        "directory": "src/scss/helper/function",
        "children": {},
        "relPath": "src/scss/helper/function/_is.scss",
        "relDirectory": "src/scss/helper/function"
    },
    "sugar.scss.helper.function.type-of": {
        "name": "type-of",
        "type": "function",
        "description": "Get the type of the passed variable",
        "namespace": "sugar.scss.helper.function",
        "since": "1.0.0",
        "filename": "_type-of.scss",
        "extension": "scss",
        "path": "src/scss/helper/function/_type-of.scss",
        "directory": "src/scss/helper/function",
        "children": {},
        "relPath": "src/scss/helper/function/_type-of.scss",
        "relDirectory": "src/scss/helper/function"
    },
    "sugar.scss.helper.mixin.border-radius": {
        "name": "border-radius",
        "type": "mixin",
        "description": "Apply some border radius",
        "namespace": "sugar.scss.helper.mixin",
        "since": "1.0.0",
        "filename": "_border-radius.scss",
        "extension": "scss",
        "path": "src/scss/helper/mixin/_border-radius.scss",
        "directory": "src/scss/helper/mixin",
        "children": {},
        "relPath": "src/scss/helper/mixin/_border-radius.scss",
        "relDirectory": "src/scss/helper/mixin"
    },
    "sugar.scss.helper.mixin.center-block": {
        "name": "center-block",
        "type": "mixin",
        "description": "Center a block element using margins etc...",
        "namespace": "sugar.scss.helper.mixin",
        "since": "1.0.0",
        "filename": "_center-block.scss",
        "extension": "scss",
        "path": "src/scss/helper/mixin/_center-block.scss",
        "directory": "src/scss/helper/mixin",
        "children": {},
        "relPath": "src/scss/helper/mixin/_center-block.scss",
        "relDirectory": "src/scss/helper/mixin"
    },
    "sugar.scss.helper.mixin.clearfix": {
        "name": "clearfix",
        "type": "mixin",
        "description": "Apply a clearfix on the element.\nSupported methods:\n- micro\n- facebook\n- float\n- micro",
        "namespace": "sugar.scss.helper.mixin",
        "since": "1.0.0",
        "filename": "_clearfix.scss",
        "extension": "scss",
        "path": "src/scss/helper/mixin/_clearfix.scss",
        "directory": "src/scss/helper/mixin",
        "children": {},
        "relPath": "src/scss/helper/mixin/_clearfix.scss",
        "relDirectory": "src/scss/helper/mixin"
    },
    "sugar.scss.helper.mixin.corner": {
        "name": "corner",
        "type": "mixin",
        "description": "Apply some border radius",
        "namespace": "sugar.scss.helper.mixin",
        "since": "1.0.0",
        "filename": "_corner.scss",
        "extension": "scss",
        "path": "src/scss/helper/mixin/_corner.scss",
        "directory": "src/scss/helper/mixin",
        "children": {},
        "relPath": "src/scss/helper/mixin/_corner.scss",
        "relDirectory": "src/scss/helper/mixin"
    },
    "sugar.scss.helper.mixin.fit": {
        "name": "fit",
        "type": "mixin",
        "description": "Make the element fit his container.",
        "namespace": "sugar.scss.helper.mixin",
        "since": "1.0.0",
        "filename": "_fit.scss",
        "extension": "scss",
        "path": "src/scss/helper/mixin/_fit.scss",
        "directory": "src/scss/helper/mixin",
        "children": {},
        "relPath": "src/scss/helper/mixin/_fit.scss",
        "relDirectory": "src/scss/helper/mixin"
    },
    "sugar.scss.helper.mixin.normalize": {
        "name": "normalize",
        "type": "mixin",
        "description": "Print out a normalize css",
        "namespace": "sugar.scss.helper.mixin",
        "since": "1.0.0",
        "filename": "_normalize.scss",
        "extension": "scss",
        "path": "src/scss/helper/mixin/_normalize.scss",
        "directory": "src/scss/helper/mixin",
        "children": {
            "undefined": {}
        },
        "relPath": "src/scss/helper/mixin/_normalize.scss",
        "relDirectory": "src/scss/helper/mixin"
    },
    "sugar.scss.helper.mixin.position": {
        "name": "position",
        "type": "mixin",
        "description": "Set a complexe position styling like position:absolute; top:0; left:100%; etc...\nThis mixin gives you some shortcuts to align your element top, bottom, middle, center, etc...",
        "namespace": "sugar.scss.helper.mixin",
        "since": "1.0.0",
        "filename": "_position.scss",
        "extension": "scss",
        "path": "src/scss/helper/mixin/_position.scss",
        "directory": "src/scss/helper/mixin",
        "children": {},
        "relPath": "src/scss/helper/mixin/_position.scss",
        "relDirectory": "src/scss/helper/mixin"
    },
    "sugar.scss.helper.mixin.reset": {
        "name": "reset",
        "type": "mixin",
        "description": "Print out a reset css",
        "namespace": "sugar.scss.helper.mixin",
        "since": "1.0.0",
        "filename": "_reset.scss",
        "extension": "scss",
        "path": "src/scss/helper/mixin/_reset.scss",
        "directory": "src/scss/helper/mixin",
        "children": {
            "undefined": {}
        },
        "relPath": "src/scss/helper/mixin/_reset.scss",
        "relDirectory": "src/scss/helper/mixin"
    },
    "sugar.scss.helper.mixin.sanitize": {
        "name": "sanitize",
        "type": "mixin",
        "description": "Print out a sanitize css",
        "namespace": "sugar.scss.helper.mixin",
        "since": "1.0.0",
        "filename": "_sanitize.scss",
        "extension": "scss",
        "path": "src/scss/helper/mixin/_sanitize.scss",
        "directory": "src/scss/helper/mixin",
        "children": {
            "undefined": {}
        },
        "relPath": "src/scss/helper/mixin/_sanitize.scss",
        "relDirectory": "src/scss/helper/mixin"
    },
    "sugar.scss.helper.mixin.size": {
        "name": "size",
        "type": "mixin",
        "description": "Quicky and easily set simple or complexe size to any element",
        "namespace": "sugar.scss.helper.mixin",
        "since": "1.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "path": "src/scss/helper/mixin/_size.scss",
        "directory": "src/scss/helper/mixin",
        "children": {},
        "relPath": "src/scss/helper/mixin/_size.scss",
        "relDirectory": "src/scss/helper/mixin"
    },
    "sugar.scss.helper.mixin.translate": {
        "name": "translate",
        "type": "mixin",
        "description": "Quicky set some translates",
        "namespace": "sugar.scss.helper.mixin",
        "since": "1.0.0",
        "filename": "_translate.scss",
        "extension": "scss",
        "path": "src/scss/helper/mixin/_translate.scss",
        "directory": "src/scss/helper/mixin",
        "children": {},
        "relPath": "src/scss/helper/mixin/_translate.scss",
        "relDirectory": "src/scss/helper/mixin"
    },
    "sugar.scss.helper.mixin.vertical-aligner": {
        "name": "vertical-aligner",
        "type": "mixin",
        "description": "Vertically align content by using the inline-block middle trick",
        "namespace": "sugar.scss.helper.mixin",
        "since": "1.0.0",
        "filename": "_vertical-aligner.scss",
        "extension": "scss",
        "path": "src/scss/helper/mixin/_vertical-aligner.scss",
        "directory": "src/scss/helper/mixin",
        "children": {},
        "relPath": "src/scss/helper/mixin/_vertical-aligner.scss",
        "relDirectory": "src/scss/helper/mixin"
    },
    "sugar.scss.helper.mixin.visually-hidden": {
        "name": "visually-hidden",
        "type": "mixin",
        "description": "Hide an element only visually. This ensure that the element is still correctly displayed in the page for SEO\nbut will not being visible to the user",
        "namespace": "sugar.scss.helper.mixin",
        "since": "1.0.0",
        "filename": "_visually-hidden.scss",
        "extension": "scss",
        "path": "src/scss/helper/mixin/_visually-hidden.scss",
        "directory": "src/scss/helper/mixin",
        "children": {},
        "relPath": "src/scss/helper/mixin/_visually-hidden.scss",
        "relDirectory": "src/scss/helper/mixin"
    },
    "sugar.scss.image.mixin.background": {
        "name": "background",
        "type": "mixin",
        "description": "Helper mixin to set a background image",
        "namespace": "sugar.scss.image.mixin",
        "since": "1.0.0",
        "filename": "_background.scss",
        "extension": "scss",
        "path": "src/scss/image/mixin/_background.scss",
        "directory": "src/scss/image/mixin",
        "children": {},
        "relPath": "src/scss/image/mixin/_background.scss",
        "relDirectory": "src/scss/image/mixin"
    },
    "sugar.scss.image.mixin.image-rendering": {
        "name": "image-rendering",
        "type": "mixin",
        "description": "Set how to render the image",
        "namespace": "sugar.scss.image.mixin",
        "since": "1.0.0",
        "filename": "_image-rendering.scss",
        "extension": "scss",
        "path": "src/scss/image/mixin/_image-rendering.scss",
        "directory": "src/scss/image/mixin",
        "children": {},
        "relPath": "src/scss/image/mixin/_image-rendering.scss",
        "relDirectory": "src/scss/image/mixin"
    },
    "sugar.scss.layout.function.columns-map": {
        "name": "columns-map",
        "type": "function",
        "description": "Return the Map representation of a columns properties",
        "namespace": "sugar.scss.layout.function",
        "since": "1.0.0",
        "filename": "_columns-map.scss",
        "extension": "scss",
        "path": "src/scss/layout/function/_columns-map.scss",
        "directory": "src/scss/layout/function",
        "children": {},
        "relPath": "src/scss/layout/function/_columns-map.scss",
        "relDirectory": "src/scss/layout/function"
    },
    "sugar.scss.layout.mixin.columns": {
        "name": "columns",
        "type": "mixin",
        "description": "Create a column layout my setting each columns properties at once",
        "namespace": "sugar.scss.layout.mixin",
        "since": "1.0.0",
        "filename": "_columns.scss",
        "extension": "scss",
        "path": "src/scss/layout/mixin/_columns.scss",
        "directory": "src/scss/layout/mixin",
        "children": {},
        "relPath": "src/scss/layout/mixin/_columns.scss",
        "relDirectory": "src/scss/layout/mixin"
    },
    "sugar.scss.layout.mixin.ratio": {
        "name": "ratio",
        "type": "mixin",
        "description": "Apply a ratio css styling. This will apply a before or after content that will make the element keep the specified ratio.\nThe content need to be displayed as absolute top left and fit in size.",
        "namespace": "sugar.scss.layout.mixin",
        "since": "1.0.0",
        "filename": "_ratio.scss",
        "extension": "scss",
        "path": "src/scss/layout/mixin/_ratio.scss",
        "directory": "src/scss/layout/mixin",
        "children": {},
        "relPath": "src/scss/layout/mixin/_ratio.scss",
        "relDirectory": "src/scss/layout/mixin"
    },
    "sugar.scss.link.mixin.link-stretched": {
        "name": "link-stretched",
        "type": "Mixin",
        "description": "Make a link become the size of it's parent (absolute, relative)\nbut only using the :after pseudo class so visually it will stay the same...",
        "namespace": "sugar.scss.link.mixin",
        "since": "2.0.0",
        "filename": "_link-stretched.scss",
        "extension": "scss",
        "path": "src/scss/link/mixin/_link-stretched.scss",
        "directory": "src/scss/link/mixin",
        "children": {},
        "relPath": "src/scss/link/mixin/_link-stretched.scss",
        "relDirectory": "src/scss/link/mixin"
    },
    "sugar.scss.list.mixin.list-bullet": {
        "name": "list-bullet",
        "type": "mixin",
        "description": "Set how the list bullet has to be displayed.",
        "namespace": "sugar.scss.list.mixin",
        "since": "1.0.0",
        "filename": "_list-bullet.scss",
        "extension": "scss",
        "path": "src/scss/list/mixin/_list-bullet.scss",
        "directory": "src/scss/list/mixin",
        "children": {},
        "relPath": "src/scss/list/mixin/_list-bullet.scss",
        "relDirectory": "src/scss/list/mixin"
    },
    "sugar.scss.list.mixin.list-start": {
        "name": "list-start",
        "type": "mixin",
        "description": "Start a new list",
        "namespace": "sugar.scss.list.mixin",
        "since": "1.0.0",
        "filename": "_list-start.scss",
        "extension": "scss",
        "path": "src/scss/list/mixin/_list-start.scss",
        "directory": "src/scss/list/mixin",
        "children": {},
        "relPath": "src/scss/list/mixin/_list-start.scss",
        "relDirectory": "src/scss/list/mixin"
    },
    "sugar.scss.loader.mixin.loader-bars": {
        "name": "loader-bars",
        "type": "function",
        "description": "Generate a full animated, single element, bars loader",
        "namespace": "sugar.scss.loader.mixin",
        "since": "1.0.0",
        "filename": "_loader-bars.scss",
        "extension": "scss",
        "path": "src/scss/loader/mixin/_loader-bars.scss",
        "directory": "src/scss/loader/mixin",
        "children": {},
        "relPath": "src/scss/loader/mixin/_loader-bars.scss",
        "relDirectory": "src/scss/loader/mixin"
    },
    "sugar.scss.loader.mixin.loader-circle": {
        "name": "loader-circle",
        "type": "Mixin",
        "description": "Generate a full animated, single element, circle loader",
        "namespace": "sugar.scss.loader.mixin",
        "since": "1.0.0",
        "filename": "_loader-circle.scss",
        "extension": "scss",
        "path": "src/scss/loader/mixin/_loader-circle.scss",
        "directory": "src/scss/loader/mixin",
        "children": {},
        "relPath": "src/scss/loader/mixin/_loader-circle.scss",
        "relDirectory": "src/scss/loader/mixin"
    },
    "sugar.scss.loader.mixin.loader-couch-potato": {
        "name": "loader-couch-potato",
        "type": "function",
        "description": "Generate a full animated, single element, couch-potato style loader",
        "namespace": "sugar.scss.loader.mixin",
        "since": "1.0.0",
        "filename": "_loader-couch-potato.scss",
        "extension": "scss",
        "path": "src/scss/loader/mixin/_loader-couch-potato.scss",
        "directory": "src/scss/loader/mixin",
        "children": {},
        "relPath": "src/scss/loader/mixin/_loader-couch-potato.scss",
        "relDirectory": "src/scss/loader/mixin"
    },
    "sugar.scss.loader.mixin.loader-flip-ball": {
        "name": "loader-flip-ball",
        "type": "Mixin",
        "description": "Generate a full animated, single element, flip ball style loader",
        "namespace": "sugar.scss.loader.mixin",
        "since": "1.0.0",
        "filename": "_loader-flip-ball.scss",
        "extension": "scss",
        "path": "src/scss/loader/mixin/_loader-flip-ball.scss",
        "directory": "src/scss/loader/mixin",
        "children": {},
        "relPath": "src/scss/loader/mixin/_loader-flip-ball.scss",
        "relDirectory": "src/scss/loader/mixin"
    },
    "sugar.scss.loader.mixin.loader-grid": {
        "name": "loader-grid",
        "type": "function",
        "description": "Generate a grid style loader",
        "namespace": "sugar.scss.loader.mixin",
        "since": "1.0.0",
        "filename": "_loader-grid.scss",
        "extension": "scss",
        "path": "src/scss/loader/mixin/_loader-grid.scss",
        "directory": "src/scss/loader/mixin",
        "children": {},
        "relPath": "src/scss/loader/mixin/_loader-grid.scss",
        "relDirectory": "src/scss/loader/mixin"
    },
    "sugar.scss.loader.mixin.loader-radial": {
        "name": "loader-radial",
        "type": "function",
        "description": "Generate a radial styled loader",
        "namespace": "sugar.scss.loader.mixin",
        "since": "1.0.0",
        "filename": "_loader-radial.scss",
        "extension": "scss",
        "path": "src/scss/loader/mixin/_loader-radial.scss",
        "directory": "src/scss/loader/mixin",
        "children": {},
        "relPath": "src/scss/loader/mixin/_loader-radial.scss",
        "relDirectory": "src/scss/loader/mixin"
    },
    "sugar.scss.loader.mixin.loader-spinner": {
        "name": "loader-spinner",
        "type": "function",
        "description": "Generate a spinner loader",
        "namespace": "sugar.scss.loader.mixin",
        "since": "1.0.0",
        "filename": "_loader-spinner.scss",
        "extension": "scss",
        "path": "src/scss/loader/mixin/_loader-spinner.scss",
        "directory": "src/scss/loader/mixin",
        "children": {},
        "relPath": "src/scss/loader/mixin/_loader-spinner.scss",
        "relDirectory": "src/scss/loader/mixin"
    },
    "sugar.scss.core.look-and-feel.lnf": {
        "name": "lnf",
        "type": "function",
        "description": "Alias to the [./_look-and-feel.scss] function\n\nReturn a settings.look-and-feel stack value",
        "namespace": "sugar.scss.core.look-and-feel",
        "filename": "_lnf.scss",
        "extension": "scss",
        "path": "src/scss/look-and-feel/function/_lnf.scss",
        "directory": "src/scss/look-and-feel/function",
        "children": {},
        "relPath": "src/scss/look-and-feel/function/_lnf.scss",
        "relDirectory": "src/scss/look-and-feel/function"
    },
    "sugar.scss.core.look-and-feel.look-and-feel": {
        "name": "look-and-feel",
        "type": "function",
        "description": "Return a settings.look-and-feel stack value",
        "namespace": "sugar.scss.core.look-and-feel",
        "filename": "_look-and-feel.scss",
        "extension": "scss",
        "path": "src/scss/look-and-feel/function/_look-and-feel.scss",
        "directory": "src/scss/look-and-feel/function",
        "children": {},
        "relPath": "src/scss/look-and-feel/function/_look-and-feel.scss",
        "relDirectory": "src/scss/look-and-feel/function"
    },
    "sugar.scss.meta.function.to-base64-url": {
        "name": "to-base64-url",
        "type": "function",
        "description": "Convert the passed svg code to an embadable base64 url",
        "namespace": "sugar.scss.meta.function",
        "since": "1.0.0",
        "filename": "_to-base64-url.scss",
        "extension": "scss",
        "path": "src/scss/meta/function/_to-base64-url.scss",
        "directory": "src/scss/meta/function",
        "children": {},
        "relPath": "src/scss/meta/function/_to-base64-url.scss",
        "relDirectory": "src/scss/meta/function"
    },
    "sugar.scss.meta.function.to-base64": {
        "name": "to-base64",
        "type": "function",
        "description": "Convert the passed svg code to base64 embedable url",
        "namespace": "sugar.scss.meta.function",
        "since": "1.0.0",
        "filename": "_to-base64.scss",
        "extension": "scss",
        "path": "src/scss/meta/function/_to-base64.scss",
        "directory": "src/scss/meta/function",
        "children": {},
        "relPath": "src/scss/meta/function/_to-base64.scss",
        "relDirectory": "src/scss/meta/function"
    },
    "sugar.scss.responsive.function.mediaQueryString": {
        "name": "mediaQueryString",
        "type": "Function",
        "description": "This function return the media query string depending on the query asked.\nThe queries are defined in the config.media.queries configuration.",
        "namespace": "sugar.scss.responsive.function",
        "since": "2.0.0",
        "filename": "_mediaQueryString.scss",
        "extension": "scss",
        "path": "src/scss/responsive/function/_mediaQueryString.scss",
        "directory": "src/scss/responsive/function",
        "children": {},
        "relPath": "src/scss/responsive/function/_mediaQueryString.scss",
        "relDirectory": "src/scss/responsive/function"
    },
    "sugar.scss.responsive.mixin.init-body-media-queries": {
        "name": "init-body-media-queries",
        "type": "Mixin",
        "description": "This mixin apply on the body all the media queries defines in the @config.media.queries configuration.\nThis mixin apply an animation that do nothing but will dispatch the animationEnd event catchable by javascript\nSo it will be easy to use the \"mediaQuery\" function that you can find in the \"@coffeekraken/sugar/js/responsive/mediaQuery\"\nnamespace.",
        "namespace": "sugar.scss.responsive.mixin",
        "since": "2.0.0",
        "filename": "_initBodyMediaQueries.scss",
        "extension": "scss",
        "path": "src/scss/responsive/mixin/_initBodyMediaQueries.scss",
        "directory": "src/scss/responsive/mixin",
        "children": {},
        "relPath": "src/scss/responsive/mixin/_initBodyMediaQueries.scss",
        "relDirectory": "src/scss/responsive/mixin"
    },
    "sugar.scss.responsive.media": {
        "name": "media",
        "type": "mixin",
        "description": "Easy to use media query mixin that support cssua classes to target specific browsers",
        "namespace": "sugar.scss.responsive",
        "filename": "_media.old.scss",
        "extension": "old",
        "path": "src/scss/responsive/mixin/_media.old.scss",
        "directory": "src/scss/responsive/mixin",
        "children": {},
        "relPath": "src/scss/responsive/mixin/_media.old.scss",
        "relDirectory": "src/scss/responsive/mixin"
    },
    "sugar.scss.responsive.mixin.mediaQuery": {
        "name": "mediaQuery",
        "type": "Mixin",
        "description": "This mixin allows you to specify easily which media (defined in the media.config.js file) has to be targeted.\nYou can specify multiple medias if needed and specify how you want to target the specific media.\nCheck out the examples for more info.\nBy default, the Sugar toolkit offer these medias to be targeted:\n- mobile\n- mobile-portrait\n- mobile-landscape\n- tablet\n- tablet-portrait\n- tablet-landscape\n- desktop\n\nYou can use some \"actions\" to specify your target. The available actions are:\n- '>': Greater than...\n- '<': Lower than...\n- '=': Equal...\n- '>=': Greater or equal...\n- '>=': Lower or equal...\n\nYour media queries can be something like this: '<tablet', '>mobile <desktop', '=tablet-landscape'.\nIf you don't specicy any action in your queries, by default the \"defaultAction\" property in the media.config.js file will\nbe applied and this default action is setted to \">=\". This is setted like this to work in \"mobile first\" schema by default.",
        "namespace": "sugar.scss.responsive.mixin",
        "since": "2.0.0",
        "filename": "_mediaQuery.scss",
        "extension": "scss",
        "path": "src/scss/responsive/mixin/_mediaQuery.scss",
        "directory": "src/scss/responsive/mixin",
        "children": {},
        "relPath": "src/scss/responsive/mixin/_mediaQuery.scss",
        "relDirectory": "src/scss/responsive/mixin"
    },
    "sugar.scss.screen-reader.mixin.screen-reader-only": {
        "name": "screen-reader-only",
        "type": "Mixin",
        "description": "Make the element visible only for the screen readers",
        "namespace": "sugar.scss.screen-reader.mixin",
        "since": "2.0.0",
        "filename": "_screen-reader-only.scss",
        "extension": "scss",
        "path": "src/scss/screen-reader/mixin/_screen-reader-only.scss",
        "directory": "src/scss/screen-reader/mixin",
        "children": {},
        "relPath": "src/scss/screen-reader/mixin/_screen-reader-only.scss",
        "relDirectory": "src/scss/screen-reader/mixin"
    },
    "sugar.scss.core.selector.function.selector": {
        "name": "selector",
        "type": "function",
        "description": "Process selector to avoid having --default, etc...",
        "namespace": "sugar.scss.core.selector.function",
        "filename": "_selector.scss",
        "extension": "scss",
        "path": "src/scss/selector/function/_selector.scss",
        "directory": "src/scss/selector/function",
        "children": {},
        "relPath": "src/scss/selector/function/_selector.scss",
        "relDirectory": "src/scss/selector/function"
    },
    "sugar.scss.shape.mixin.round-overflow": {
        "name": "round-overflow",
        "type": "mixin",
        "description": "Apply some css to have a rounded element with already an overflow on it",
        "namespace": "sugar.scss.shape.mixin",
        "since": "1.0.0",
        "filename": "_round-overflow.scss",
        "extension": "scss",
        "path": "src/scss/shape/mixin/_round-overflow.scss",
        "directory": "src/scss/shape/mixin",
        "children": {},
        "relPath": "src/scss/shape/mixin/_round-overflow.scss",
        "relDirectory": "src/scss/shape/mixin"
    },
    "sugar.scss.shape.mixin.triangle": {
        "name": "triangle",
        "type": "mixin",
        "description": "Generate a triangle shape",
        "namespace": "sugar.scss.shape.mixin",
        "since": "1.0.0",
        "filename": "_triangle.scss",
        "extension": "scss",
        "path": "src/scss/shape/mixin/_triangle.scss",
        "directory": "src/scss/shape/mixin",
        "children": {},
        "relPath": "src/scss/shape/mixin/_triangle.scss",
        "relDirectory": "src/scss/shape/mixin"
    },
    "sugar.scss.transition.class.transition-classes": {
        "name": "transition-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"transition\" related classes.",
        "namespace": "sugar.scss.transition.class",
        "since": "2.0.0",
        "filename": "_transition.scss",
        "extension": "scss",
        "path": "src/scss/transition/class/_transition.scss",
        "directory": "src/scss/transition/class",
        "relPath": "src/scss/transition/class/_transition.scss",
        "relDirectory": "src/scss/transition/class"
    },
    "sugar.scss.transition.class.#{sel(tr-#{$name})}": {
        "name": "#{sel(tr-#{$name})}",
        "type": "Classname",
        "description": "Apply the transition **#{$name}**",
        "namespace": "sugar.scss.transition.class",
        "since": "1.0.0",
        "filename": "_transition.scss",
        "extension": "scss",
        "path": "src/scss/transition/class/_transition.scss",
        "directory": "src/scss/transition/class",
        "children": {},
        "relPath": "src/scss/transition/class/_transition.scss",
        "relDirectory": "src/scss/transition/class"
    },
    "sugar.scss.core.transition.function.transition-map": {
        "name": "transition-map",
        "type": "function",
        "description": "Take a transition as parameter and parse it to return the {Map} corresponding\nThe $transition parameter can be either a registered transition name or a custom css transition like : all .2s ease-in-out 2s\nThe $transition argument will be parsed with the [./_parse-properties.scss] function.",
        "namespace": "sugar.scss.core.transition.function",
        "since": "1.0.0",
        "filename": "_transition-map.scss",
        "extension": "scss",
        "path": "src/scss/transition/function/_transition-map.scss",
        "directory": "src/scss/transition/function",
        "children": {},
        "relPath": "src/scss/transition/function/_transition-map.scss",
        "relDirectory": "src/scss/transition/function"
    },
    "sugar.scss.core.transition.function.transition": {
        "name": "transition",
        "type": "function",
        "description": "Take a transition as parameter and parse it to return the {List} corresponding\nThe $transitions parameter can be either a registered transition name or a custom css transition like : all .2s ease-in-out 2s\nThe $transitions argument will be parsed with the [./_parse-properties.scss] function.",
        "namespace": "sugar.scss.core.transition.function",
        "since": "1.0.0",
        "filename": "_transition.scss",
        "extension": "scss",
        "path": "src/scss/transition/function/_transition.scss",
        "directory": "src/scss/transition/function",
        "children": {},
        "relPath": "src/scss/transition/function/_transition.scss",
        "relDirectory": "src/scss/transition/function"
    },
    "sugar.scss.core.transition.mixin.transition": {
        "name": "transition",
        "type": "mixin",
        "description": "Take a transition as parameter and print the corresponding transition property\nThe $transitions parameter can be either a registered transition name or a custom css transition like : all .2s ease-in-out 2s\nThe $transitions argument will be parsed with the [./_parse-properties.scss] function.",
        "namespace": "sugar.scss.core.transition.mixin",
        "since": "1.0.0",
        "filename": "_transition.scss",
        "extension": "scss",
        "path": "src/scss/transition/mixin/_transition.scss",
        "directory": "src/scss/transition/mixin",
        "children": {},
        "relPath": "src/scss/transition/mixin/_transition.scss",
        "relDirectory": "src/scss/transition/mixin"
    },
    "sugar.scss.typography.function.rhythm-width": {
        "name": "rhythm-width",
        "type": "function",
        "description": "Return the Map properties representation for the rhythme width\nThe rhythme width is the width of an element that target a certain number of letters by line",
        "namespace": "sugar.scss.typography.function",
        "since": "1.0.0",
        "filename": "_rhythm-width.scss",
        "extension": "scss",
        "path": "src/scss/typography/function/_rhythm-width.scss",
        "directory": "src/scss/typography/function",
        "children": {},
        "relPath": "src/scss/typography/function/_rhythm-width.scss",
        "relDirectory": "src/scss/typography/function"
    },
    "sugar.scss.typography.function.tf-class": {
        "name": "tf-class",
        "type": "function",
        "description": "Return the text-format setting scope class",
        "namespace": "sugar.scss.typography.function",
        "since": "1.0.0",
        "filename": "_tf-class.scss",
        "extension": "scss",
        "path": "src/scss/typography/function/_tf-class.scss",
        "directory": "src/scss/typography/function",
        "children": {},
        "relPath": "src/scss/typography/function/_tf-class.scss",
        "relDirectory": "src/scss/typography/function"
    },
    "sugar.scss.typography.function.vr-class": {
        "name": "vr-class",
        "type": "function",
        "description": "Return the vertical-rhythm setting scope class",
        "namespace": "sugar.scss.typography.function",
        "since": "1.0.0",
        "filename": "_vr-class.scss",
        "extension": "scss",
        "path": "src/scss/typography/function/_vr-class.scss",
        "directory": "src/scss/typography/function",
        "children": {},
        "relPath": "src/scss/typography/function/_vr-class.scss",
        "relDirectory": "src/scss/typography/function"
    },
    "sugar.scss.typography.mixin.rhythm-width": {
        "name": "rhythm-width",
        "type": "mixin",
        "description": "Print out the css on a container that will make the lines displays a maximum number of characters.",
        "namespace": "sugar.scss.typography.mixin",
        "since": "1.0.0",
        "filename": "_rhythm-width.scss",
        "extension": "scss",
        "path": "src/scss/typography/mixin/_rhythm-width.scss",
        "directory": "src/scss/typography/mixin",
        "children": {},
        "relPath": "src/scss/typography/mixin/_rhythm-width.scss",
        "relDirectory": "src/scss/typography/mixin"
    },
    "sugar.scss.typography.mixin.selection": {
        "name": "selection",
        "type": "mixin",
        "description": "Set the user selection styling with ease",
        "namespace": "sugar.scss.typography.mixin",
        "since": "1.0.0",
        "filename": "_selection.scss",
        "extension": "scss",
        "path": "src/scss/typography/mixin/_selection.scss",
        "directory": "src/scss/typography/mixin",
        "children": {},
        "relPath": "src/scss/typography/mixin/_selection.scss",
        "relDirectory": "src/scss/typography/mixin"
    },
    "sugar.scss.typography.mixin.show-vr": {
        "name": "show-vr",
        "type": "mixin",
        "description": "Display the vertical rhythme",
        "namespace": "sugar.scss.typography.mixin",
        "since": "1.0.0",
        "filename": "_show-vr.scss",
        "extension": "scss",
        "path": "src/scss/typography/mixin/_show-vr.scss",
        "directory": "src/scss/typography/mixin",
        "children": {},
        "relPath": "src/scss/typography/mixin/_show-vr.scss",
        "relDirectory": "src/scss/typography/mixin"
    },
    "sugar.scss.typography.mixin.text-ellipsis": {
        "name": "text-ellipsis",
        "type": "mixin",
        "description": "Crop the text on 1 line if needed",
        "namespace": "sugar.scss.typography.mixin",
        "since": "2.0.0",
        "filename": "_text-ellipsis.scss",
        "extension": "scss",
        "path": "src/scss/typography/mixin/_text-ellipsis.scss",
        "directory": "src/scss/typography/mixin",
        "children": {},
        "relPath": "src/scss/typography/mixin/_text-ellipsis.scss",
        "relDirectory": "src/scss/typography/mixin"
    },
    "sugar.scss.typography.mixin.text-hide": {
        "name": "text-hide",
        "type": "mixin",
        "description": "Hide the contained text",
        "namespace": "sugar.scss.typography.mixin",
        "since": "1.0.0",
        "filename": "_text-hide.scss",
        "extension": "scss",
        "path": "src/scss/typography/mixin/_text-hide.scss",
        "directory": "src/scss/typography/mixin",
        "children": {},
        "relPath": "src/scss/typography/mixin/_text-hide.scss",
        "relDirectory": "src/scss/typography/mixin"
    },
    "sugar.scss.typography.mixin.text-truncate": {
        "name": "text-truncate",
        "type": "mixin",
        "description": "Print out the style to truncate the text if needed",
        "namespace": "sugar.scss.typography.mixin",
        "since": "1.0.0",
        "filename": "_text-truncate.scss",
        "extension": "scss",
        "path": "src/scss/typography/mixin/_text-truncate.scss",
        "directory": "src/scss/typography/mixin",
        "children": {},
        "relPath": "src/scss/typography/mixin/_text-truncate.scss",
        "relDirectory": "src/scss/typography/mixin"
    },
    "sugar.scss.typography.mixin.tf-scope": {
        "name": "tf-scope",
        "type": "mixin",
        "description": "Scope the content inside the `settings.typography.tf-scope-class` class",
        "namespace": "sugar.scss.typography.mixin",
        "since": "1.0.0",
        "filename": "_tf-scope.scss",
        "extension": "scss",
        "path": "src/scss/typography/mixin/_tf-scope.scss",
        "directory": "src/scss/typography/mixin",
        "children": {},
        "relPath": "src/scss/typography/mixin/_tf-scope.scss",
        "relDirectory": "src/scss/typography/mixin"
    },
    "sugar.scss.typography.mixin.vr-scope": {
        "name": "vr-scope",
        "type": "mixin",
        "description": "Scope the content inside the `settings.typography.vr-class` class",
        "namespace": "sugar.scss.typography.mixin",
        "since": "1.0.0",
        "filename": "_vr-scope.scss",
        "extension": "scss",
        "path": "src/scss/typography/mixin/_vr-scope.scss",
        "directory": "src/scss/typography/mixin",
        "children": {},
        "relPath": "src/scss/typography/mixin/_vr-scope.scss",
        "relDirectory": "src/scss/typography/mixin"
    },
    "sugar.scss.unit.function.convert": {
        "name": "convert",
        "type": "function",
        "description": "Convert a passed value to the wanted unit\nThe conversion between some units that depends on a font-size will take the settings.typography.font-size value as reference.\n\nAvailable conversions\n- from px\n- to em\n- to rem\n- to pt\n- to %\n\n- from em\n- to rem\n- to px\n- to pt\n- to %\n\n- from pt\n- to em\n- to rem\n- to px\n- to pt\n- to %\n\n- from rem\n- to em\n- to px\n- to pt\n- to %",
        "namespace": "sugar.scss.unit.function",
        "since": "1.0.0",
        "filename": "_convert.scss",
        "extension": "scss",
        "path": "src/scss/unit/function/_convert.scss",
        "directory": "src/scss/unit/function",
        "children": {},
        "relPath": "src/scss/unit/function/_convert.scss",
        "relDirectory": "src/scss/unit/function"
    },
    "sugar.scss.unit.function.is-unitless": {
        "name": "is-unitless",
        "type": "function",
        "description": "Check if the passed variable is unitless or not",
        "namespace": "sugar.scss.unit.function",
        "since": "1.0.0",
        "filename": "_is-unitless.scss",
        "extension": "scss",
        "path": "src/scss/unit/function/_is-unitless.scss",
        "directory": "src/scss/unit/function",
        "children": {},
        "relPath": "src/scss/unit/function/_is-unitless.scss",
        "relDirectory": "src/scss/unit/function"
    },
    "sugar.scss.unit.function.strip-units": {
        "name": "strip-units",
        "type": "function",
        "description": "Return a number without any units",
        "namespace": "sugar.scss.unit.function",
        "since": "1.0.0",
        "filename": "_strip-units.scss",
        "extension": "scss",
        "path": "src/scss/unit/function/_strip-units.scss",
        "directory": "src/scss/unit/function",
        "children": {},
        "relPath": "src/scss/unit/function/_strip-units.scss",
        "relDirectory": "src/scss/unit/function"
    },
    "sugar.scss.unit.function.to-em": {
        "name": "to-em",
        "type": "function",
        "description": "Convert the passed value to em",
        "namespace": "sugar.scss.unit.function",
        "since": "1.0.0",
        "filename": "_to-em.scss",
        "extension": "scss",
        "path": "src/scss/unit/function/_to-em.scss",
        "directory": "src/scss/unit/function",
        "children": {},
        "relPath": "src/scss/unit/function/_to-em.scss",
        "relDirectory": "src/scss/unit/function"
    },
    "sugar.scss.unit.function.to-percent": {
        "name": "to-percent",
        "type": "function",
        "description": "Convert the passed value to %",
        "namespace": "sugar.scss.unit.function",
        "since": "1.0.0",
        "filename": "_to-percent.scss",
        "extension": "scss",
        "path": "src/scss/unit/function/_to-percent.scss",
        "directory": "src/scss/unit/function",
        "children": {},
        "relPath": "src/scss/unit/function/_to-percent.scss",
        "relDirectory": "src/scss/unit/function"
    },
    "sugar.scss.unit.function.to-pt": {
        "name": "to-pt",
        "type": "function",
        "description": "Convert the passed value to pt",
        "namespace": "sugar.scss.unit.function",
        "since": "1.0.0",
        "filename": "_to-pt.scss",
        "extension": "scss",
        "path": "src/scss/unit/function/_to-pt.scss",
        "directory": "src/scss/unit/function",
        "children": {},
        "relPath": "src/scss/unit/function/_to-pt.scss",
        "relDirectory": "src/scss/unit/function"
    },
    "sugar.scss.unit.function.to-px": {
        "name": "to-px",
        "type": "function",
        "description": "Convert the passed value to px",
        "namespace": "sugar.scss.unit.function",
        "since": "1.0.0",
        "filename": "_to-px.scss",
        "extension": "scss",
        "path": "src/scss/unit/function/_to-px.scss",
        "directory": "src/scss/unit/function",
        "children": {},
        "relPath": "src/scss/unit/function/_to-px.scss",
        "relDirectory": "src/scss/unit/function"
    },
    "sugar.scss.unit.function.to-rem": {
        "name": "to-rem",
        "type": "function",
        "description": "Convert the passed value to rem",
        "namespace": "sugar.scss.unit.function",
        "since": "1.0.0",
        "filename": "_to-rem.scss",
        "extension": "scss",
        "path": "src/scss/unit/function/_to-rem.scss",
        "directory": "src/scss/unit/function",
        "children": {},
        "relPath": "src/scss/unit/function/_to-rem.scss",
        "relDirectory": "src/scss/unit/function"
    },
    "sugar.scss.unit.function.unit": {
        "name": "unit",
        "type": "function",
        "description": "Return the unit of the passed number",
        "namespace": "sugar.scss.unit.function",
        "since": "1.0.0",
        "filename": "_unit.scss",
        "extension": "scss",
        "path": "src/scss/unit/function/_unit.scss",
        "directory": "src/scss/unit/function",
        "children": {},
        "relPath": "src/scss/unit/function/_unit.scss",
        "relDirectory": "src/scss/unit/function"
    },
    "sugar.scss.util.function.border-map": {
        "name": "border-map",
        "type": "function",
        "description": "Parse and return the Map respresentation of a border property\nThe $border argument will be parsed with the [s-parse-properties](../core/functions/_s-parse-properties.scss) function.",
        "namespace": "sugar.scss.util.function",
        "since": "1.0.0",
        "filename": "_border-map.scss",
        "extension": "scss",
        "path": "src/scss/util/function/_border-map.scss",
        "directory": "src/scss/util/function",
        "children": {},
        "relPath": "src/scss/util/function/_border-map.scss",
        "relDirectory": "src/scss/util/function"
    },
    "sugar.scss.util.function.margin-map": {
        "name": "margin-map",
        "type": "function",
        "description": "Parse and return the Map respresentation of a margin property\nThe $margin argument will be parsed with the [s-parse-properties](../core/functions/_s-parse-properties.scss) function.",
        "namespace": "sugar.scss.util.function",
        "since": "1.0.0",
        "filename": "_margin-map.scss",
        "extension": "scss",
        "path": "src/scss/util/function/_margin-map.scss",
        "directory": "src/scss/util/function",
        "children": {},
        "relPath": "src/scss/util/function/_margin-map.scss",
        "relDirectory": "src/scss/util/function"
    },
    "sugar.scss.util.function.position-map": {
        "name": "position-map",
        "type": "function",
        "description": "Return the representation of a position styling like position:absolute; top:0; left:100%; etc...\nThis function gives you some shortcuts to align your element top, bottom, middle, center, etc...",
        "namespace": "sugar.scss.util.function",
        "since": "1.0.0",
        "filename": "_position-map.scss",
        "extension": "scss",
        "path": "src/scss/util/function/_position-map.scss",
        "directory": "src/scss/util/function",
        "children": {},
        "relPath": "src/scss/util/function/_position-map.scss",
        "relDirectory": "src/scss/util/function"
    },
    "sugar.scss.util.function.translate-map": {
        "name": "translate-map",
        "type": "function",
        "description": "Return the Map properties representation of a translate x,y and z",
        "namespace": "sugar.scss.util.function",
        "since": "1.0.0",
        "filename": "_translate-map.scss",
        "extension": "scss",
        "path": "src/scss/util/function/_translate-map.scss",
        "directory": "src/scss/util/function",
        "children": {},
        "relPath": "src/scss/util/function/_translate-map.scss",
        "relDirectory": "src/scss/util/function"
    },
    "sugar.js.code.splitters.scss.includeBlockSplitter": {
        "name": "includeBlockSplitter",
        "type": "Object",
        "description": "This represent the SCSS \"@include... { ... }\" block splitter.\nIt will match all the include blocks like \"@include something('hello') { ... }\", etc...\nand split the code accordingly",
        "namespace": "sugar.js.code.splitters.scss",
        "status": "wip",
        "since": "2.0.0",
        "filename": "includeBlockSplitter.ts",
        "extension": "ts",
        "path": "src/node/__thinking__/code/splitters/scss/includeBlockSplitter.ts",
        "directory": "src/node/__thinking__/code/splitters/scss",
        "children": {},
        "relPath": "src/node/__thinking__/code/splitters/scss/includeBlockSplitter.ts",
        "relDirectory": "src/node/__thinking__/code/splitters/scss"
    },
    "sugar.js.code.splitters.scss.includeInlineSplitter": {
        "name": "includeInlineSplitter",
        "type": "Object",
        "description": "This represent the SCSS \"@include...\" splitter.\nIt will match all the inline includes like \"@include something('hello');\", etc...\nand split the code accordingly",
        "namespace": "sugar.js.code.splitters.scss",
        "status": "wip",
        "since": "2.0.0",
        "filename": "includeInlineSplitter.ts",
        "extension": "ts",
        "path": "src/node/__thinking__/code/splitters/scss/includeInlineSplitter.ts",
        "directory": "src/node/__thinking__/code/splitters/scss",
        "children": {},
        "relPath": "src/node/__thinking__/code/splitters/scss/includeInlineSplitter.ts",
        "relDirectory": "src/node/__thinking__/code/splitters/scss"
    },
    "sugar.js.code.splitters.scss.mediaQuerySplitter": {
        "name": "mediaQuerySplitter",
        "type": "Object",
        "description": "This represent the SCSS media queries splitter.\nIt will match all the media queries blocks like \"@media (...) { ... }\", etc...\nand split the code accordingly",
        "namespace": "sugar.js.code.splitters.scss",
        "status": "wip",
        "since": "2.0.0",
        "filename": "mediaQuerySplitter.ts",
        "extension": "ts",
        "path": "src/node/__thinking__/code/splitters/scss/mediaQuerySplitter.ts",
        "directory": "src/node/__thinking__/code/splitters/scss",
        "children": {},
        "relPath": "src/node/__thinking__/code/splitters/scss/mediaQuerySplitter.ts",
        "relDirectory": "src/node/__thinking__/code/splitters/scss"
    },
    "sugar.js.code.splitters.scss.mixinBlockSplitter": {
        "name": "mixinBlockSplitter",
        "type": "Object",
        "description": "This represent the SCSS mixin splitter.\nIt will match all the mixin blocks like \"@mixin something(...) { ... }\", etc...\nand split the code accordingly",
        "namespace": "sugar.js.code.splitters.scss",
        "status": "wip",
        "since": "2.0.0",
        "filename": "mixinBlockSplitter.ts",
        "extension": "ts",
        "path": "src/node/__thinking__/code/splitters/scss/mixinBlockSplitter.ts",
        "directory": "src/node/__thinking__/code/splitters/scss",
        "children": {},
        "relPath": "src/node/__thinking__/code/splitters/scss/mixinBlockSplitter.ts",
        "relDirectory": "src/node/__thinking__/code/splitters/scss"
    },
    "sugar.js.code.splitters.scss.selectorBlockSplitter": {
        "name": "selectorBlockSplitter",
        "type": "Object",
        "description": "This represent the SCSS selectors splitter.\nIt will match all the selectors blocks like \".hello #world, p:before { ... }\", etc...\nand split the code accordingly",
        "namespace": "sugar.js.code.splitters.scss",
        "status": "wip",
        "since": "2.0.0",
        "filename": "selectorBlockSplitter.ts",
        "extension": "ts",
        "path": "src/node/__thinking__/code/splitters/scss/selectorBlockSplitter.ts",
        "directory": "src/node/__thinking__/code/splitters/scss",
        "children": {},
        "relPath": "src/node/__thinking__/code/splitters/scss/selectorBlockSplitter.ts",
        "relDirectory": "src/node/__thinking__/code/splitters/scss"
    },
    "sugar.node.ui.sugar.interface.SSugarAppInterface": {
        "name": "SSugarAppInterface",
        "type": "Class",
        "description": "This class represent the interface that describe de arguments supported\nwhen using the SSugarCli class",
        "namespace": "sugar.node.ui.sugar.interface",
        "extends": "SInterface",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SSugarAppInterface.ts",
        "extension": "ts",
        "path": "src/node/app/sugar/interface/SSugarAppInterface.ts",
        "directory": "src/node/app/sugar/interface",
        "children": {},
        "relPath": "src/node/app/sugar/interface/SSugarAppInterface.ts",
        "relDirectory": "src/node/app/sugar/interface"
    },
    "sugar.node.app.sugar.interface.SSugarAppModuleInterface": {
        "name": "SSugarAppModuleInterface",
        "type": "Class",
        "description": "This interface represent the sugar app module instance requirements and defaults",
        "namespace": "sugar.node.app.sugar.interface",
        "extends": "SInterface",
        "since": "2.0.0",
        "filename": "SSugarAppModuleInterface.ts",
        "extension": "ts",
        "path": "src/node/app/sugar/interface/SSugarAppModuleInterface.ts",
        "directory": "src/node/app/sugar/interface",
        "children": {},
        "relPath": "src/node/app/sugar/interface/SSugarAppModuleInterface.ts",
        "relDirectory": "src/node/app/sugar/interface"
    },
    "sugar.node.ui.sugar.interface.SSugarAppModuleObjInterface": {
        "name": "SSugarAppModuleObjInterface",
        "type": "Class",
        "description": "This class represent the interface that describe a sugar ui module object\nstructure and requirements",
        "namespace": "sugar.node.ui.sugar.interface",
        "extends": "SInterface",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SSugarAppModuleObjInterface.ts",
        "extension": "ts",
        "path": "src/node/app/sugar/interface/SSugarAppModuleObjInterface.ts",
        "directory": "src/node/app/sugar/interface",
        "children": {},
        "relPath": "src/node/app/sugar/interface/SSugarAppModuleObjInterface.ts",
        "relDirectory": "src/node/app/sugar/interface"
    },
    "sugar.node.ui.sugar.interface.SSugarAppModulePresetInterface": {
        "name": "SSugarAppModulePresetInterface",
        "type": "Class",
        "description": "This class represent the interface that describe a sugar ui module object\nstructure and requirements",
        "namespace": "sugar.node.ui.sugar.interface",
        "extends": "SInterface",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SSugarAppModulePresetInterface.ts",
        "extension": "ts",
        "path": "src/node/app/sugar/interface/SSugarAppModulePresetInterface.ts",
        "directory": "src/node/app/sugar/interface",
        "children": {},
        "relPath": "src/node/app/sugar/interface/SSugarAppModulePresetInterface.ts",
        "relDirectory": "src/node/app/sugar/interface"
    },
    "sugar.node.ui.sugar.interface.SSugarAppModuleSettingsInterface": {
        "name": "SSugarAppModuleSettingsInterface",
        "type": "Class",
        "description": "This class represent the interface that describe the base Sugar UI module settings object",
        "namespace": "sugar.node.ui.sugar.interface",
        "extends": "SInterface",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SSugarAppModuleSettingsInterface.ts",
        "extension": "ts",
        "path": "src/node/app/sugar/interface/SSugarAppModuleSettingsInterface.ts",
        "directory": "src/node/app/sugar/interface",
        "children": {},
        "relPath": "src/node/app/sugar/interface/SSugarAppModuleSettingsInterface.ts",
        "relDirectory": "src/node/app/sugar/interface"
    },
    "sugar.node.deamon.fs.interface.SFsDeamonInterface": {
        "name": "SFsDeamonInterface",
        "type": "Class",
        "description": "This class represent the interface that describe the minimum requirement\nneeded for an element that is capable of \"watching\" some events/actions, and respond\nto it by launching function, or whatever you want.",
        "namespace": "sugar.node.deamon.fs.interface",
        "extends": "SInterface",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SFsDeamonInterface.ts",
        "extension": "ts",
        "path": "src/node/deamon/fs/interface/SFsDeamonInterface.ts",
        "directory": "src/node/deamon/fs/interface",
        "children": {},
        "relPath": "src/node/deamon/fs/interface/SFsDeamonInterface.ts",
        "relDirectory": "src/node/deamon/fs/interface"
    },
    "sugar.node.build.scss.actions.SBuildFrontspecStreamAction": {
        "name": "SBuildFrontspecStreamAction",
        "type": "Class",
        "description": "This function is responsible of rendering the sass string in the \"data\" property",
        "namespace": "sugar.node.build.scss.actions",
        "extends": "SActionsStreamAction",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SBuildFrontspecStreamAction.ts",
        "extension": "ts",
        "path": "src/node/frontspec/build/actions/SBuildFrontspecStreamAction.ts",
        "directory": "src/node/frontspec/build/actions",
        "children": {
            "interface": {
                "name": "interface",
                "type": "Object",
                "description": "Store the definition object that specify the streamObj required properties, types, etc...",
                "static": true
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "run": {
                "name": "run",
                "type": "Function",
                "description": "Override the base class run method"
            }
        },
        "relPath": "src/node/frontspec/build/actions/SBuildFrontspecStreamAction.ts",
        "relDirectory": "src/node/frontspec/build/actions"
    },
    "sugar.node.build.scss.interface.SBuildScssInterface": {
        "name": "SBuildScssInterface",
        "type": "Class",
        "description": "This class represent the interface that describe the minimum requirement\nneeded for an express server process.",
        "namespace": "sugar.node.build.scss.interface",
        "extends": "SInterface",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SBuildFrontspecInterface.ts",
        "extension": "ts",
        "path": "src/node/frontspec/build/interface/SBuildFrontspecInterface.ts",
        "directory": "src/node/frontspec/build/interface",
        "children": {},
        "relPath": "src/node/frontspec/build/interface/SBuildFrontspecInterface.ts",
        "relDirectory": "src/node/frontspec/build/interface"
    },
    "sugar.node.js.compile.interface.SJsCompilerParamsInterface": {
        "name": "SJsCompilerParamsInterface",
        "type": "Class",
        "description": "This class represent the interface that describe parameters of the SJsCompiler",
        "namespace": "sugar.node.js.compile.interface",
        "extends": "SInterface",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SJsCompilerParamsInterface.ts",
        "extension": "ts",
        "path": "src/node/js/compile/interface/SJsCompilerParamsInterface.ts",
        "directory": "src/node/js/compile/interface",
        "children": {},
        "relPath": "src/node/js/compile/interface/SJsCompilerParamsInterface.ts",
        "relDirectory": "src/node/js/compile/interface"
    },
    "sugar.node.scss.compile.interface.SScssCompilerParamsInterface": {
        "name": "SScssCompilerParamsInterface",
        "type": "Class",
        "description": "This class represent the interface that describe the minimum requirement\nneeded for an express server process.",
        "namespace": "sugar.node.scss.compile.interface",
        "extends": "SInterface",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SScssCompilerParamsInterface.ts",
        "extension": "ts",
        "path": "src/node/scss/compile/interface/SScssCompilerParamsInterface.ts",
        "directory": "src/node/scss/compile/interface",
        "children": {},
        "relPath": "src/node/scss/compile/interface/SScssCompilerParamsInterface.ts",
        "relDirectory": "src/node/scss/compile/interface"
    },
    "sugar.node.server.frontend.handlers.doc": {
        "name": "doc",
        "type": "Function",
        "description": "This function is responsible of responding to express requests made on the doc pages",
        "namespace": "sugar.node.server.frontend.handlers",
        "status": "wip",
        "since": "2.0.0",
        "filename": "doc.ts",
        "extension": "ts",
        "path": "src/node/server/frontend/handlers/doc.ts",
        "directory": "src/node/server/frontend/handlers",
        "children": {},
        "relPath": "src/node/server/frontend/handlers/doc.ts",
        "relDirectory": "src/node/server/frontend/handlers"
    },
    "sugar.node.server.frontend.handlers.js": {
        "name": "js",
        "type": "Function",
        "description": "This function is responsible of responding to express requests made on the home page",
        "namespace": "sugar.node.server.frontend.handlers",
        "status": "wip",
        "since": "2.0.0",
        "filename": "js.ts",
        "extension": "ts",
        "path": "src/node/server/frontend/handlers/js.ts",
        "directory": "src/node/server/frontend/handlers",
        "children": {},
        "relPath": "src/node/server/frontend/handlers/js.ts",
        "relDirectory": "src/node/server/frontend/handlers"
    },
    "sugar.node.server.frontend.handlers.scss": {
        "name": "scss",
        "type": "Function",
        "description": "This function is responsible of responding to express requests made on the home page",
        "namespace": "sugar.node.server.frontend.handlers",
        "status": "wip",
        "since": "2.0.0",
        "filename": "scss.ts",
        "extension": "ts",
        "path": "src/node/server/frontend/handlers/scss.ts",
        "directory": "src/node/server/frontend/handlers",
        "children": {},
        "relPath": "src/node/server/frontend/handlers/scss.ts",
        "relDirectory": "src/node/server/frontend/handlers"
    },
    "sugar.node.server.frontend.handlers.ts": {
        "name": "ts",
        "type": "Function",
        "description": "This function is responsible of responding to express requests made on the home page",
        "namespace": "sugar.node.server.frontend.handlers",
        "status": "wip",
        "since": "2.0.0",
        "filename": "ts.ts",
        "extension": "ts",
        "path": "src/node/server/frontend/handlers/ts.ts",
        "directory": "src/node/server/frontend/handlers",
        "children": {},
        "relPath": "src/node/server/frontend/handlers/ts.ts",
        "relDirectory": "src/node/server/frontend/handlers"
    },
    "sugar.node.server.frontend.handlers.views": {
        "name": "views",
        "type": "Function",
        "description": "This function is responsible of responding to express requests made on the \"views\" section",
        "namespace": "sugar.node.server.frontend.handlers",
        "status": "wip",
        "since": "2.0.0",
        "filename": "views.ts",
        "extension": "ts",
        "path": "src/node/server/frontend/handlers/views.ts",
        "directory": "src/node/server/frontend/handlers",
        "children": {},
        "relPath": "src/node/server/frontend/handlers/views.ts",
        "relDirectory": "src/node/server/frontend/handlers"
    },
    "sugar.node.server.express.interface.SFrontendServerInterface": {
        "name": "SFrontendServerInterface",
        "type": "Class",
        "description": "This class represent the interface that describe the minimum requirement\nneeded for a frontend server process.",
        "namespace": "sugar.node.server.express.interface",
        "extends": "SInterface",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SFrontendServerInterface.ts",
        "extension": "ts",
        "path": "src/node/server/frontend/interface/SFrontendServerInterface.ts",
        "directory": "src/node/server/frontend/interface",
        "children": {},
        "relPath": "src/node/server/frontend/interface/SFrontendServerInterface.ts",
        "relDirectory": "src/node/server/frontend/interface"
    },
    "sugar.node.server.frontend.middleware.envMiddleware": {
        "name": "envMiddleware",
        "type": "Function",
        "description": "This function describe the middleware that will add the \"env\" property to the ```res.templateData``` object",
        "namespace": "sugar.node.server.frontend.middleware",
        "status": "beta",
        "since": "2.0.0",
        "filename": "envMiddleware.ts",
        "extension": "ts",
        "path": "src/node/server/frontend/middleware/envMiddleware.ts",
        "directory": "src/node/server/frontend/middleware",
        "children": {},
        "relPath": "src/node/server/frontend/middleware/envMiddleware.ts",
        "relDirectory": "src/node/server/frontend/middleware"
    },
    "sugar.node.server.frontend.middleware.frontspecMiddleware": {
        "name": "frontspecMiddleware",
        "type": "Function",
        "description": "This function describe the middleware that will fetch the ```frontspec.json``` file at the root of\nyour server directory and add it to the template data sended to the rendered view",
        "namespace": "sugar.node.server.frontend.middleware",
        "status": "wip",
        "since": "2.0.0",
        "filename": "frontspecMiddleware.ts",
        "extension": "ts",
        "path": "src/node/server/frontend/middleware/frontspecMiddleware.ts",
        "directory": "src/node/server/frontend/middleware",
        "children": {},
        "relPath": "src/node/server/frontend/middleware/frontspecMiddleware.ts",
        "relDirectory": "src/node/server/frontend/middleware"
    },
    "sugar.node.server.frontend.middleware.packageJsonMiddleware": {
        "name": "packageJsonMiddleware",
        "type": "Function",
        "description": "This function describe the middleware that will fetch the ```package.json``` file at the root of\nyour server directory and add it to the template data sended to the rendered view",
        "namespace": "sugar.node.server.frontend.middleware",
        "status": "beta",
        "since": "2.0.0",
        "filename": "packageJsonMiddleware.ts",
        "extension": "ts",
        "path": "src/node/server/frontend/middleware/packageJsonMiddleware.ts",
        "directory": "src/node/server/frontend/middleware",
        "children": {},
        "relPath": "src/node/server/frontend/middleware/packageJsonMiddleware.ts",
        "relDirectory": "src/node/server/frontend/middleware"
    },
    "sugar.node.server.frontend.middleware.resolveExtensionFreePath": {
        "name": "resolveExtensionFreePath",
        "type": "Function",
        "description": "This function will try to resolve extension free requests like node modules, etc...",
        "namespace": "sugar.node.server.frontend.middleware",
        "status": "wip",
        "since": "2.0.0",
        "filename": "resolveExtensionFreePath.ts",
        "extension": "ts",
        "path": "src/node/server/frontend/middleware/resolveExtensionFreePath.ts",
        "directory": "src/node/server/frontend/middleware",
        "children": {},
        "relPath": "src/node/server/frontend/middleware/resolveExtensionFreePath.ts",
        "relDirectory": "src/node/server/frontend/middleware"
    },
    "sugar.node.server.frontend.pages.error": {
        "name": "error",
        "type": "Function",
        "description": "This function simply return the 404 page content to send to the user\nwith the passed data object described here:",
        "namespace": "sugar.node.server.frontend.pages",
        "status": "wip",
        "since": "2.0.0",
        "filename": "error.ts",
        "extension": "ts",
        "path": "src/node/server/frontend/pages/error.ts",
        "directory": "src/node/server/frontend/pages",
        "children": {},
        "relPath": "src/node/server/frontend/pages/error.ts",
        "relDirectory": "src/node/server/frontend/pages"
    },
    "sugar.node.stdio.blessed.components.defaultBlessedStdioComponent": {
        "name": "defaultBlessedStdioComponent",
        "type": "ISStdioComponent",
        "description": "Blessed stdio component",
        "namespace": "sugar.node.stdio.blessed.components",
        "since": "2.0.0",
        "filename": "warningBlessedStdioComponent.ts",
        "extension": "ts",
        "path": "src/node/stdio/blessed/components/warningBlessedStdioComponent.ts",
        "directory": "src/node/stdio/blessed/components",
        "children": {},
        "relPath": "src/node/stdio/blessed/components/warningBlessedStdioComponent.ts",
        "relDirectory": "src/node/stdio/blessed/components"
    },
    "sugar.node.stdio.blessed.components.headingBlessedStdioComponent": {
        "name": "headingBlessedStdioComponent",
        "type": "ISStdioComponent",
        "description": "Blessed stdio component",
        "namespace": "sugar.node.stdio.blessed.components",
        "since": "2.0.0",
        "filename": "headingBlessedStdioComponent.ts",
        "extension": "ts",
        "path": "src/node/stdio/blessed/components/headingBlessedStdioComponent.ts",
        "directory": "src/node/stdio/blessed/components",
        "children": {},
        "relPath": "src/node/stdio/blessed/components/headingBlessedStdioComponent.ts",
        "relDirectory": "src/node/stdio/blessed/components"
    },
    "sugar.node.stdio.blessed.components.timeBlessedStdioComponent": {
        "name": "timeBlessedStdioComponent",
        "type": "ISStdioComponent",
        "description": "Blessed stdio component",
        "namespace": "sugar.node.stdio.blessed.components",
        "since": "2.0.0",
        "filename": "timeBlessedStdioComponent.ts",
        "extension": "ts",
        "path": "src/node/stdio/blessed/components/timeBlessedStdioComponent.ts",
        "directory": "src/node/stdio/blessed/components",
        "children": {},
        "relPath": "src/node/stdio/blessed/components/timeBlessedStdioComponent.ts",
        "relDirectory": "src/node/stdio/blessed/components"
    },
    "sugar.node.stdio.terminal.components.defaultTerminalStdioComponent": {
        "name": "defaultTerminalStdioComponent",
        "type": "ISStdioComponent",
        "description": "Terminal stdio component",
        "namespace": "sugar.node.stdio.terminal.components",
        "since": "2.0.0",
        "filename": "defaultTerminalStdioComponent.ts",
        "extension": "ts",
        "path": "src/node/stdio/terminal/components/defaultTerminalStdioComponent.ts",
        "directory": "src/node/stdio/terminal/components",
        "children": {},
        "relPath": "src/node/stdio/terminal/components/defaultTerminalStdioComponent.ts",
        "relDirectory": "src/node/stdio/terminal/components"
    },
    "sugar.node.stdio.terminal.components.errorTerminalStdioComponent": {
        "name": "errorTerminalStdioComponent",
        "type": "ISStdioComponent",
        "description": "Terminal stdio component",
        "namespace": "sugar.node.stdio.terminal.components",
        "since": "2.0.0",
        "filename": "errorTerminalStdioComponent.ts",
        "extension": "ts",
        "path": "src/node/stdio/terminal/components/errorTerminalStdioComponent.ts",
        "directory": "src/node/stdio/terminal/components",
        "children": {},
        "relPath": "src/node/stdio/terminal/components/errorTerminalStdioComponent.ts",
        "relDirectory": "src/node/stdio/terminal/components"
    },
    "sugar.node.stdio.terminal.components.fileTerminalStdioComponent": {
        "name": "fileTerminalStdioComponent",
        "type": "ISStdioComponent",
        "description": "Terminal stdio component",
        "namespace": "sugar.node.stdio.terminal.components",
        "since": "2.0.0",
        "filename": "fileTerminalStdioComponent.ts",
        "extension": "ts",
        "path": "src/node/stdio/terminal/components/fileTerminalStdioComponent.ts",
        "directory": "src/node/stdio/terminal/components",
        "children": {},
        "relPath": "src/node/stdio/terminal/components/fileTerminalStdioComponent.ts",
        "relDirectory": "src/node/stdio/terminal/components"
    },
    "sugar.node.stdio.terminal.components.headingTerminalStdioComponent": {
        "name": "headingTerminalStdioComponent",
        "type": "ISStdioComponent",
        "description": "Terminal stdio component",
        "namespace": "sugar.node.stdio.terminal.components",
        "since": "2.0.0",
        "filename": "headingTerminalStdioComponent.ts",
        "extension": "ts",
        "path": "src/node/stdio/terminal/components/headingTerminalStdioComponent.ts",
        "directory": "src/node/stdio/terminal/components",
        "children": {},
        "relPath": "src/node/stdio/terminal/components/headingTerminalStdioComponent.ts",
        "relDirectory": "src/node/stdio/terminal/components"
    },
    "sugar.node.stdio.terminal.components.separatorTerminalStdioComponent": {
        "name": "separatorTerminalStdioComponent",
        "type": "ISStdioComponent",
        "description": "Terminal stdio component",
        "namespace": "sugar.node.stdio.terminal.components",
        "since": "2.0.0",
        "filename": "separatorTerminalStdioComponent.ts",
        "extension": "ts",
        "path": "src/node/stdio/terminal/components/separatorTerminalStdioComponent.ts",
        "directory": "src/node/stdio/terminal/components",
        "children": {},
        "relPath": "src/node/stdio/terminal/components/separatorTerminalStdioComponent.ts",
        "relDirectory": "src/node/stdio/terminal/components"
    },
    "sugar.node.stdio.terminal.components.timeTerminalStdioComponent": {
        "name": "timeTerminalStdioComponent",
        "type": "ISStdioComponent",
        "description": "Terminal stdio component",
        "namespace": "sugar.node.stdio.terminal.components",
        "since": "2.0.0",
        "filename": "timeTerminalStdioComponent.ts",
        "extension": "ts",
        "path": "src/node/stdio/terminal/components/timeTerminalStdioComponent.ts",
        "directory": "src/node/stdio/terminal/components",
        "children": {},
        "relPath": "src/node/stdio/terminal/components/timeTerminalStdioComponent.ts",
        "relDirectory": "src/node/stdio/terminal/components"
    },
    "sugar.node.stdio.terminal.components.warningTerminalStdioComponent": {
        "name": "warningTerminalStdioComponent",
        "type": "ISStdioComponent",
        "description": "Terminal stdio component",
        "namespace": "sugar.node.stdio.terminal.components",
        "since": "2.0.0",
        "filename": "warningTerminalStdioComponent.ts",
        "extension": "ts",
        "path": "src/node/stdio/terminal/components/warningTerminalStdioComponent.ts",
        "directory": "src/node/stdio/terminal/components",
        "children": {},
        "relPath": "src/node/stdio/terminal/components/warningTerminalStdioComponent.ts",
        "relDirectory": "src/node/stdio/terminal/components"
    },
    "sugar.node.svelte.compile.interface.SSvelteCompilerParamsInterface": {
        "name": "SSvelteCompilerParamsInterface",
        "type": "Class",
        "description": "This class represent the interface that describe parameters of the SSvelteCompiler",
        "namespace": "sugar.node.svelte.compile.interface",
        "extends": "SInterface",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SSvelteCompilerParamsInterface.ts",
        "extension": "ts",
        "path": "src/node/svelte/compile/interface/SSvelteCompilerParamsInterface.ts",
        "directory": "src/node/svelte/compile/interface",
        "children": {},
        "relPath": "src/node/svelte/compile/interface/SSvelteCompilerParamsInterface.ts",
        "relDirectory": "src/node/svelte/compile/interface"
    },
    "sugar.node.template.engines.interface.STemplateEngineInterface": {
        "name": "STemplateEngineInterface",
        "type": "Class",
        "description": "This class represent the interface that describe the minimum requirement\nneeded for a STemplateEngine based class",
        "namespace": "sugar.node.template.engines.interface",
        "extends": "SInterface",
        "status": "wip",
        "since": "2.0.0",
        "filename": "STemplateEngineInterface.ts",
        "extension": "ts",
        "path": "src/node/template/engines/interface/STemplateEngineInterface.ts",
        "directory": "src/node/template/engines/interface",
        "children": {},
        "relPath": "src/node/template/engines/interface/STemplateEngineInterface.ts",
        "relDirectory": "src/node/template/engines/interface"
    },
    "sugar.node.test.jest.interface.STestJestCliInterface": {
        "name": "STestJestCliInterface",
        "type": "Class",
        "description": "This class represent the interface that describe the cli parameters for the\ntest jest process.",
        "namespace": "sugar.node.test.jest.interface",
        "extends": "SInterface",
        "status": "wip",
        "since": "2.0.0",
        "filename": "STestJestInterface.ts",
        "extension": "ts",
        "path": "src/node/test/jest/interface/STestJestInterface.ts",
        "directory": "src/node/test/jest/interface",
        "children": {},
        "relPath": "src/node/test/jest/interface/STestJestInterface.ts",
        "relDirectory": "src/node/test/jest/interface"
    },
    "sugar.node.typescript.compile.interface.STsCompilerParamsInterface": {
        "name": "STsCompilerParamsInterface",
        "type": "Class",
        "description": "This class represent the interface that describe the minimum requirement\nneeded for a typescript compilation.",
        "namespace": "sugar.node.typescript.compile.interface",
        "extends": "SInterface",
        "status": "wip",
        "since": "2.0.0",
        "filename": "STsCompilerParamsInterface.ts",
        "extension": "ts",
        "path": "src/node/typescript/compile/interface/STsCompilerParamsInterface.ts",
        "directory": "src/node/typescript/compile/interface",
        "children": {},
        "relPath": "src/node/typescript/compile/interface/STsCompilerParamsInterface.ts",
        "relDirectory": "src/node/typescript/compile/interface"
    },
    "php.views.layouts.main": {
        "name": "main",
        "type": "blade",
        "description": "Main layout that handle things like scripts import, stylesheets import, etc...",
        "namespace": "php.views.layouts",
        "since": "2.0.0",
        "filename": "main.blade.php",
        "extension": "blade",
        "path": "src/php/views/blade/layouts/main.blade.php",
        "directory": "src/php/views/blade/layouts",
        "children": {
            "undefined": {}
        },
        "relPath": "src/php/views/blade/layouts/main.blade.php",
        "relDirectory": "src/php/views/blade/layouts"
    },
    "sugar.scss.component.button.class.button-classes": {
        "name": "button-classes",
        "type": "Mixin",
        "description": "This mixin generate all the css needed to display properly some buttons.",
        "namespace": "sugar.scss.component.button.class",
        "since": "2.0.0",
        "filename": "_button.scss",
        "extension": "scss",
        "path": "src/scss/component/button/class/_button.scss",
        "directory": "src/scss/component/button/class",
        "relPath": "src/scss/component/button/class/_button.scss",
        "relDirectory": "src/scss/component/button/class"
    },
    "sugar.scss.component.button..#{sel($name)}, .#{sel(#{tf-class()})} button": {
        "name": ".#{sel($name)}, .#{sel(#{tf-class()})} button",
        "type": "Classname",
        "description": "This class can be applied on any ```#{$name}``` component",
        "namespace": "sugar.scss.component.button",
        "since": "2.0.0",
        "filename": "_button.scss",
        "extension": "scss",
        "path": "src/scss/component/button/class/_button.scss",
        "directory": "src/scss/component/button/class",
        "children": {},
        "relPath": "src/scss/component/button/class/_button.scss",
        "relDirectory": "src/scss/component/button/class"
    },
    "sugar.scss.component.button.mixin.button": {
        "name": "button",
        "type": "Mixin",
        "description": "This mixin generate all the properties for a button depending on the parameters you set.",
        "namespace": "sugar.scss.component.button.mixin",
        "since": "2.0.0",
        "filename": "_button.scss",
        "extension": "scss",
        "path": "src/scss/component/button/mixin/_button.scss",
        "directory": "src/scss/component/button/mixin",
        "children": {},
        "relPath": "src/scss/component/button/mixin/_button.scss",
        "relDirectory": "src/scss/component/button/mixin"
    },
    "sugar.scss.core.class.icons.#{sel(icon-#{$name})}": {
        "name": "#{sel(icon-#{$name})}",
        "type": "class",
        "description": "```.icon-#{$name}``` icon class",
        "namespace": "sugar.scss.core.class.icons",
        "since": "2.0.0",
        "filename": "_icons.scss",
        "extension": "scss",
        "path": "src/scss/component/icon/class/_icons.scss",
        "directory": "src/scss/component/icon/class",
        "children": {},
        "relPath": "src/scss/component/icon/class/_icons.scss",
        "relDirectory": "src/scss/component/icon/class"
    },
    "sugar.scss.icon.mixin.icon": {
        "name": "icon",
        "type": "mixin",
        "description": "Apply an icon on the element. This mixin support font-awesome and custom icons systems that have an icon name formated like \"icon-{name}\"\nThe custom icon style if you pass as name \"user\" will extend %icon, %icon-user, .icon and .icon-user classes",
        "namespace": "sugar.scss.icon.mixin",
        "filename": "_icon.scss",
        "extension": "scss",
        "path": "src/scss/component/icon/mixin/_icon.scss",
        "directory": "src/scss/component/icon/mixin",
        "children": {},
        "relPath": "src/scss/component/icon/mixin/_icon.scss",
        "relDirectory": "src/scss/component/icon/mixin"
    },
    "sugar.scss.icon.mixin.icons": {
        "name": "icons",
        "type": "mixin",
        "description": "Generate some icon classes like .icon-$icon-name",
        "namespace": "sugar.scss.icon.mixin",
        "since": "1.0.0",
        "filename": "_icons.scss",
        "extension": "scss",
        "path": "src/scss/component/icon/mixin/_icons.scss",
        "directory": "src/scss/component/icon/mixin",
        "children": {},
        "relPath": "src/scss/component/icon/mixin/_icons.scss",
        "relDirectory": "src/scss/component/icon/mixin"
    },
    "sugar.scss.icon.mixin.register-svg-icon": {
        "name": "register-svg-icon",
        "type": "mixin",
        "description": "Register a new icon to be used as base64 encoded url.\nIf you want your icon to be colorable, you need to specify this code on your paths: `style=\"fill:%color\"`",
        "namespace": "sugar.scss.icon.mixin",
        "since": "1.0.0",
        "filename": "_register-svg-icon.scss",
        "extension": "scss",
        "path": "src/scss/component/icon/mixin/_register-svg-icon.scss",
        "directory": "src/scss/component/icon/mixin",
        "children": {},
        "relPath": "src/scss/component/icon/mixin/_register-svg-icon.scss",
        "relDirectory": "src/scss/component/icon/mixin"
    },
    "sugar.scss.component.ol.class.ol-classes": {
        "name": "ol-classes",
        "type": "Mixin",
        "description": "This mixin generate all the css needed to display properly some ordered lists.",
        "namespace": "sugar.scss.component.ol.class",
        "since": "2.0.0",
        "filename": "_ol.scss",
        "extension": "scss",
        "path": "src/scss/component/ol/class/_ol.scss",
        "directory": "src/scss/component/ol/class",
        "relPath": "src/scss/component/ol/class/_ol.scss",
        "relDirectory": "src/scss/component/ol/class"
    },
    "sugar.scss.component..#{sel(#{$name}--#{$size})}": {
        "name": ".#{sel(#{$name}--#{$size})}",
        "type": "Classname",
        "description": "This class can be applied on any ```#{$name}``` component to specify his size to ```#{$size}```",
        "namespace": "sugar.scss.component",
        "since": "2.0.0",
        "filename": "_ol.scss",
        "extension": "scss",
        "path": "src/scss/component/ol/class/_ol.scss",
        "directory": "src/scss/component/ol/class",
        "relPath": "src/scss/component/ol/class/_ol.scss",
        "relDirectory": "src/scss/component/ol/class"
    },
    "sugar.scss.component..#{sel(#{$name}--#{$color})}": {
        "name": ".#{sel(#{$name}--#{$color})}",
        "type": "Classname",
        "description": "This class can be applied on any ```#{$name}``` component to specify his size to ```#{$color}```",
        "namespace": "sugar.scss.component",
        "since": "2.0.0",
        "filename": "_ol.scss",
        "extension": "scss",
        "path": "src/scss/component/ol/class/_ol.scss",
        "directory": "src/scss/component/ol/class",
        "children": {},
        "relPath": "src/scss/component/ol/class/_ol.scss",
        "relDirectory": "src/scss/component/ol/class"
    },
    "sugar.scss.component.ol.mixin.ol": {
        "name": "ol",
        "type": "Mixin",
        "description": "Generate the properties and child css for the ol component",
        "namespace": "sugar.scss.component.ol.mixin",
        "since": "2.0.0",
        "filename": "_ol.scss",
        "extension": "scss",
        "path": "src/scss/component/ol/mixin/_ol.scss",
        "directory": "src/scss/component/ol/mixin",
        "children": {},
        "relPath": "src/scss/component/ol/mixin/_ol.scss",
        "relDirectory": "src/scss/component/ol/mixin"
    },
    "sugar.scss.component.paragraph.class.paragraph-classes": {
        "name": "paragraph-classes",
        "type": "Mixin",
        "description": "This mixin generate all the css needed to display properly some paragraphs.",
        "namespace": "sugar.scss.component.paragraph.class",
        "since": "2.0.0",
        "filename": "_paragraph.scss",
        "extension": "scss",
        "path": "src/scss/component/paragraph/class/_paragraph.scss",
        "directory": "src/scss/component/paragraph/class",
        "relPath": "src/scss/component/paragraph/class/_paragraph.scss",
        "relDirectory": "src/scss/component/paragraph/class"
    },
    "sugar.scss.component..#{sel(#{$name}--#{$n})}, .#{sel(#{tf-class()})} #{sel('p.#{$n}', null)}": {
        "name": ".#{sel(#{$name}--#{$n})}, .#{sel(#{tf-class()})} #{sel('p.#{$n}', null)}",
        "type": "Classname",
        "description": "This class can be applied on any ```#{$name}``` component to specify his style",
        "namespace": "sugar.scss.component",
        "since": "2.0.0",
        "filename": "_paragraph.scss",
        "extension": "scss",
        "path": "src/scss/component/paragraph/class/_paragraph.scss",
        "directory": "src/scss/component/paragraph/class",
        "children": {},
        "relPath": "src/scss/component/paragraph/class/_paragraph.scss",
        "relDirectory": "src/scss/component/paragraph/class"
    },
    "sugar.scss.component.paragraph.mixin.paragraph": {
        "name": "paragraph",
        "type": "Mixin",
        "description": "This mixin generate all the properties for a paragraph depending on the parameters you set.",
        "namespace": "sugar.scss.component.paragraph.mixin",
        "since": "2.0.0",
        "filename": "_paragraph.scss",
        "extension": "scss",
        "path": "src/scss/component/paragraph/mixin/_paragraph.scss",
        "directory": "src/scss/component/paragraph/mixin",
        "children": {},
        "relPath": "src/scss/component/paragraph/mixin/_paragraph.scss",
        "relDirectory": "src/scss/component/paragraph/mixin"
    },
    "sugar.scss.shadow.class.#{sel(shadow)}": {
        "name": "#{sel(shadow)}",
        "type": "class",
        "description": "Apply the default shadow to the element",
        "namespace": "sugar.scss.shadow.class",
        "since": "2.0.0",
        "filename": "_shadow.scss",
        "extension": "scss",
        "path": "src/scss/component/shadow/class/_shadow.scss",
        "directory": "src/scss/component/shadow/class",
        "relPath": "src/scss/component/shadow/class/_shadow.scss",
        "relDirectory": "src/scss/component/shadow/class"
    },
    "sugar.scss.shadow.class.#{sel(shadow--small)}": {
        "name": "#{sel(shadow--small)}",
        "type": "class",
        "description": "Apply the small shadow to the element",
        "namespace": "sugar.scss.shadow.class",
        "since": "2.0.0",
        "filename": "_shadow.scss",
        "extension": "scss",
        "path": "src/scss/component/shadow/class/_shadow.scss",
        "directory": "src/scss/component/shadow/class",
        "relPath": "src/scss/component/shadow/class/_shadow.scss",
        "relDirectory": "src/scss/component/shadow/class"
    },
    "sugar.scss.shadow.class.#{sel(shadow--big)}": {
        "name": "#{sel(shadow--big)}",
        "type": "class",
        "description": "Apply the big shadow to the element",
        "namespace": "sugar.scss.shadow.class",
        "since": "2.0.0",
        "filename": "_shadow.scss",
        "extension": "scss",
        "path": "src/scss/component/shadow/class/_shadow.scss",
        "directory": "src/scss/component/shadow/class",
        "children": {},
        "relPath": "src/scss/component/shadow/class/_shadow.scss",
        "relDirectory": "src/scss/component/shadow/class"
    },
    "sugar.scss.component.title.title-classes": {
        "name": "title-classes",
        "type": "Mixin",
        "description": "This mixin generate all the css needed to display properly some titles.",
        "namespace": "sugar.scss.component.title",
        "since": "2.0.0",
        "filename": "_title.scss",
        "extension": "scss",
        "path": "src/scss/component/title/class/_title.scss",
        "directory": "src/scss/component/title/class",
        "relPath": "src/scss/component/title/class/_title.scss",
        "relDirectory": "src/scss/component/title/class"
    },
    "sugar.scss.component.title..#{sel(#{$name}#{$i})}, .#{sel(#{tf-class()})} h#{$i}": {
        "name": ".#{sel(#{$name}#{$i})}, .#{sel(#{tf-class()})} h#{$i}",
        "type": "Classname",
        "description": "This class can be applied on any ```#{$name}``` component to specify his size to ```#{$i}```",
        "namespace": "sugar.scss.component.title",
        "since": "2.0.0",
        "filename": "_title.scss",
        "extension": "scss",
        "path": "src/scss/component/title/class/_title.scss",
        "directory": "src/scss/component/title/class",
        "children": {},
        "relPath": "src/scss/component/title/class/_title.scss",
        "relDirectory": "src/scss/component/title/class"
    },
    "sugar.scss.component.title.title": {
        "name": "title",
        "type": "Mixin",
        "description": "This mixin generate all the properties for a title depending on the parameters you set.",
        "namespace": "sugar.scss.component.title",
        "since": "2.0.0",
        "filename": "_title.scss",
        "extension": "scss",
        "path": "src/scss/component/title/mixin/_title.scss",
        "directory": "src/scss/component/title/mixin",
        "children": {},
        "relPath": "src/scss/component/title/mixin/_title.scss",
        "relDirectory": "src/scss/component/title/mixin"
    },
    "sugar.scss.component.ul.class.ul-classes": {
        "name": "ul-classes",
        "type": "Mixin",
        "description": "This mixin generate all the css needed to display properly some unordered lists.",
        "namespace": "sugar.scss.component.ul.class",
        "since": "2.0.0",
        "filename": "_ul.scss",
        "extension": "scss",
        "path": "src/scss/component/ul/class/_ul.scss",
        "directory": "src/scss/component/ul/class",
        "children": {},
        "relPath": "src/scss/component/ul/class/_ul.scss",
        "relDirectory": "src/scss/component/ul/class"
    },
    "sugar.scss.component.ul.mixin.ul": {
        "name": "ul",
        "type": "Mixin",
        "description": "Generate the properties and child css for the ul component",
        "namespace": "sugar.scss.component.ul.mixin",
        "since": "2.0.0",
        "filename": "_ul.scss",
        "extension": "scss",
        "path": "src/scss/component/ul/mixin/_ul.scss",
        "directory": "src/scss/component/ul/mixin",
        "children": {},
        "relPath": "src/scss/component/ul/mixin/_ul.scss",
        "relDirectory": "src/scss/component/ul/mixin"
    },
    "sugar.scss.core.context.function.context": {
        "name": "context",
        "type": "function",
        "namespace": "sugar.scss.core.context.function",
        "filename": "_context.scss",
        "extension": "scss",
        "path": "src/scss/core/context/function/_context.scss",
        "directory": "src/scss/core/context/function",
        "children": {},
        "relPath": "src/scss/core/context/function/_context.scss",
        "relDirectory": "src/scss/core/context/function"
    },
    "sugar.scss.core.context.mixin.context-setup": {
        "name": "context-setup",
        "type": "mixin",
        "description": "Register a context with a name to use it later",
        "namespace": "sugar.scss.core.context.mixin",
        "filename": "_context-setup.scss",
        "extension": "scss",
        "path": "src/scss/core/context/mixin/_context-setup.scss",
        "directory": "src/scss/core/context/mixin",
        "children": {},
        "relPath": "src/scss/core/context/mixin/_context-setup.scss",
        "relDirectory": "src/scss/core/context/mixin"
    },
    "sugar.scss.core.context.mixin.context": {
        "name": "context",
        "type": "mixin",
        "description": "Set a context to be used inside the mixin",
        "namespace": "sugar.scss.core.context.mixin",
        "filename": "_context.scss",
        "extension": "scss",
        "path": "src/scss/core/context/mixin/_context.scss",
        "directory": "src/scss/core/context/mixin",
        "children": {},
        "relPath": "src/scss/core/context/mixin/_context.scss",
        "relDirectory": "src/scss/core/context/mixin"
    },
    "sugar.scss.core.dev.test-argument": {
        "name": "test-argument",
        "type": "function",
        "description": "Test an argument passed to a function or a mixin to ensure his type, value, etc...\nIf the argument does not pass the test, an error will be thrown, unless the $check-only argument is true",
        "namespace": "sugar.scss.core.dev",
        "filename": "_test-argument.scss",
        "extension": "scss",
        "path": "src/scss/core/dev/function/_test-argument.scss",
        "directory": "src/scss/core/dev/function",
        "children": {},
        "relPath": "src/scss/core/dev/function/_test-argument.scss",
        "relDirectory": "src/scss/core/dev/function"
    },
    "sugar.scss.core.list.function.list-append": {
        "name": "list-append",
        "type": "function",
        "description": "Append a value to the passed list",
        "namespace": "sugar.scss.core.list.function",
        "since": "1.0.0",
        "filename": "_list-append.scss",
        "extension": "scss",
        "path": "src/scss/core/list/function/_list-append.scss",
        "directory": "src/scss/core/list/function",
        "children": {},
        "relPath": "src/scss/core/list/function/_list-append.scss",
        "relDirectory": "src/scss/core/list/function"
    },
    "sugar.scss.core.list.function.list-first": {
        "name": "list-first",
        "type": "function",
        "description": "Return the first element of the passed list",
        "namespace": "sugar.scss.core.list.function",
        "since": "1.0.0",
        "filename": "_list-first.scss",
        "extension": "scss",
        "path": "src/scss/core/list/function/_list-first.scss",
        "directory": "src/scss/core/list/function",
        "children": {},
        "relPath": "src/scss/core/list/function/_list-first.scss",
        "relDirectory": "src/scss/core/list/function"
    },
    "sugar.scss.core.list.function.list-implode": {
        "name": "list-implode",
        "type": "function",
        "description": "Join all the list items using the passed glue and return a string",
        "namespace": "sugar.scss.core.list.function",
        "since": "1.0.0",
        "filename": "_list-implode.scss",
        "extension": "scss",
        "path": "src/scss/core/list/function/_list-implode.scss",
        "directory": "src/scss/core/list/function",
        "children": {},
        "relPath": "src/scss/core/list/function/_list-implode.scss",
        "relDirectory": "src/scss/core/list/function"
    },
    "sugar.scss.core.list.function.list-index": {
        "name": "list-index",
        "type": "function",
        "description": "Return the index of the wanted value in the passed list.",
        "namespace": "sugar.scss.core.list.function",
        "since": "1.0.0",
        "filename": "_list-index.scss",
        "extension": "scss",
        "path": "src/scss/core/list/function/_list-index.scss",
        "directory": "src/scss/core/list/function",
        "children": {},
        "relPath": "src/scss/core/list/function/_list-index.scss",
        "relDirectory": "src/scss/core/list/function"
    },
    "sugar.scss.core.list.function.list-join": {
        "name": "list-join",
        "type": "function",
        "description": "Return a string representing all the list items",
        "namespace": "sugar.scss.core.list.function",
        "since": "1.0.0",
        "filename": "_list-join.scss",
        "extension": "scss",
        "path": "src/scss/core/list/function/_list-join.scss",
        "directory": "src/scss/core/list/function",
        "children": {},
        "relPath": "src/scss/core/list/function/_list-join.scss",
        "relDirectory": "src/scss/core/list/function"
    },
    "sugar.scss.core.list.function.list-last-nth": {
        "name": "list-last-nth",
        "type": "function",
        "description": "Return the last item of the passed list",
        "namespace": "sugar.scss.core.list.function",
        "since": "1.0.0",
        "filename": "_list-last-nth.scss",
        "extension": "scss",
        "path": "src/scss/core/list/function/_list-last-nth.scss",
        "directory": "src/scss/core/list/function",
        "children": {},
        "relPath": "src/scss/core/list/function/_list-last-nth.scss",
        "relDirectory": "src/scss/core/list/function"
    },
    "sugar.scss.core.list.function.list-length": {
        "name": "list-length",
        "type": "function",
        "description": "Return the number of item in the passed list",
        "namespace": "sugar.scss.core.list.function",
        "since": "1.0.0",
        "filename": "_list-length.scss",
        "extension": "scss",
        "path": "src/scss/core/list/function/_list-length.scss",
        "directory": "src/scss/core/list/function",
        "children": {},
        "relPath": "src/scss/core/list/function/_list-length.scss",
        "relDirectory": "src/scss/core/list/function"
    },
    "sugar.scss.core.list.function.list-nth": {
        "name": "list-nth",
        "type": "function",
        "description": "Return the item of the list at the passed index",
        "namespace": "sugar.scss.core.list.function",
        "since": "1.0.0",
        "filename": "_list-nth.scss",
        "extension": "scss",
        "path": "src/scss/core/list/function/_list-nth.scss",
        "directory": "src/scss/core/list/function",
        "children": {},
        "relPath": "src/scss/core/list/function/_list-nth.scss",
        "relDirectory": "src/scss/core/list/function"
    },
    "sugar.scss.core.list.function.list-pop": {
        "name": "list-pop",
        "type": "function",
        "description": "Remove the last item of the passed list",
        "namespace": "sugar.scss.core.list.function",
        "since": "1.0.0",
        "filename": "_list-pop.scss",
        "extension": "scss",
        "path": "src/scss/core/list/function/_list-pop.scss",
        "directory": "src/scss/core/list/function",
        "children": {},
        "relPath": "src/scss/core/list/function/_list-pop.scss",
        "relDirectory": "src/scss/core/list/function"
    },
    "sugar.scss.core.list.function.list-prepend": {
        "name": "list-prepend",
        "type": "function",
        "description": "Prepend a value in the passed list",
        "namespace": "sugar.scss.core.list.function",
        "since": "1.0.0",
        "filename": "_list-prepend.scss",
        "extension": "scss",
        "path": "src/scss/core/list/function/_list-prepend.scss",
        "directory": "src/scss/core/list/function",
        "children": {},
        "relPath": "src/scss/core/list/function/_list-prepend.scss",
        "relDirectory": "src/scss/core/list/function"
    },
    "sugar.scss.core.list.function.list-remove-nth": {
        "name": "list-remove-nth",
        "type": "function",
        "description": "Remove item from list using an index",
        "namespace": "sugar.scss.core.list.function",
        "since": "1.0.0",
        "filename": "_list-remove-nth.scss",
        "extension": "scss",
        "path": "src/scss/core/list/function/_list-remove-nth.scss",
        "directory": "src/scss/core/list/function",
        "children": {},
        "relPath": "src/scss/core/list/function/_list-remove-nth.scss",
        "relDirectory": "src/scss/core/list/function"
    },
    "sugar.scss.core.list.function.list-search": {
        "name": "list-search",
        "type": "function",
        "description": "Search for the passed value in the passed list and return true if exist, false if not",
        "namespace": "sugar.scss.core.list.function",
        "since": "1.0.0",
        "filename": "_list-search.scss",
        "extension": "scss",
        "path": "src/scss/core/list/function/_list-search.scss",
        "directory": "src/scss/core/list/function",
        "children": {},
        "relPath": "src/scss/core/list/function/_list-search.scss",
        "relDirectory": "src/scss/core/list/function"
    },
    "sugar.scss.core.list.function.list-set-nth": {
        "name": "list-set-nth",
        "type": "function",
        "description": "Set a value in the passed list at the passed index. The original value at the passed index will be replaced with the passed value",
        "namespace": "sugar.scss.core.list.function",
        "since": "1.0.0",
        "filename": "_list-set-nth.scss",
        "extension": "scss",
        "path": "src/scss/core/list/function/_list-set-nth.scss",
        "directory": "src/scss/core/list/function",
        "children": {},
        "relPath": "src/scss/core/list/function/_list-set-nth.scss",
        "relDirectory": "src/scss/core/list/function"
    },
    "sugar.scss.core.map.function.dash-to-map": {
        "name": "dash-to-map",
        "type": "function",
        "description": "Transform a dash notation value into a map\nDash notation value is : -key1 value1 -key2 value2",
        "namespace": "sugar.scss.core.map.function",
        "since": "1.0.0",
        "filename": "_dash-to-map.scss",
        "extension": "scss",
        "path": "src/scss/core/map/function/_dash-to-map.scss",
        "directory": "src/scss/core/map/function",
        "children": {},
        "relPath": "src/scss/core/map/function/_dash-to-map.scss",
        "relDirectory": "src/scss/core/map/function"
    },
    "sugar.scss.core.map.function.map-deep-values": {
        "name": "map-deep-values",
        "type": "function",
        "description": "Get values of a map even if it is deep",
        "namespace": "sugar.scss.core.map.function",
        "since": "1.0.0",
        "filename": "_map-deep-values.scss",
        "extension": "scss",
        "path": "src/scss/core/map/function/_map-deep-values.scss",
        "directory": "src/scss/core/map/function",
        "children": {},
        "relPath": "src/scss/core/map/function/_map-deep-values.scss",
        "relDirectory": "src/scss/core/map/function"
    },
    "sugar.scss.core.map.function.map-extend": {
        "name": "map-extend",
        "type": "function",
        "description": "Extend the passed map with the others passed map(s)",
        "namespace": "sugar.scss.core.map.function",
        "since": "1.0.0",
        "filename": "_map-extend.scss",
        "extension": "scss",
        "path": "src/scss/core/map/function/_map-extend.scss",
        "directory": "src/scss/core/map/function",
        "children": {},
        "relPath": "src/scss/core/map/function/_map-extend.scss",
        "relDirectory": "src/scss/core/map/function"
    },
    "sugar.scss.core.map.function.map-filter-by-namespace": {
        "name": "map-filter-by-namespace",
        "type": "function",
        "description": "Return all the map values that have a key that match the passed namespace",
        "namespace": "sugar.scss.core.map.function",
        "since": "1.0.0",
        "filename": "_map-filter-by-namespace.scss",
        "extension": "scss",
        "path": "src/scss/core/map/function/_map-filter-by-namespace.scss",
        "directory": "src/scss/core/map/function",
        "children": {},
        "relPath": "src/scss/core/map/function/_map-filter-by-namespace.scss",
        "relDirectory": "src/scss/core/map/function"
    },
    "sugar.scss.core.map.function.map-filter": {
        "name": "map-filter",
        "type": "function",
        "description": "Filter a map by key, value and the passed processor function",
        "namespace": "sugar.scss.core.map.function",
        "since": "2.0.0",
        "filename": "_map-filter.scss",
        "extension": "scss",
        "path": "src/scss/core/map/function/_map-filter.scss",
        "directory": "src/scss/core/map/function",
        "children": {},
        "relPath": "src/scss/core/map/function/_map-filter.scss",
        "relDirectory": "src/scss/core/map/function"
    },
    "sugar.scss.core.map.function.map-flatten": {
        "name": "map-flatten",
        "type": "Function",
        "description": "This function take a map (that can be a deep one) and returns you a new map with all the\nproperties flatten using the passed \"separator\"",
        "namespace": "sugar.scss.core.map.function",
        "since": "2.0.0",
        "filename": "_map-flatten.scss",
        "extension": "scss",
        "path": "src/scss/core/map/function/_map-flatten.scss",
        "directory": "src/scss/core/map/function",
        "children": {},
        "relPath": "src/scss/core/map/function/_map-flatten.scss",
        "relDirectory": "src/scss/core/map/function"
    },
    "sugar.scss.core.map.function.map-get": {
        "name": "map-get",
        "type": "function",
        "description": "Get a value in the passed map using the passed key",
        "namespace": "sugar.scss.core.map.function",
        "since": "1.0.0",
        "filename": "_map-get.scss",
        "extension": "scss",
        "path": "src/scss/core/map/function/_map-get.scss",
        "directory": "src/scss/core/map/function",
        "children": {},
        "relPath": "src/scss/core/map/function/_map-get.scss",
        "relDirectory": "src/scss/core/map/function"
    },
    "sugar.scss.core.map.function.map-has-key": {
        "name": "map-has-key",
        "type": "function",
        "description": "Check if the passed map has the passed key. Return true if has, false if not",
        "namespace": "sugar.scss.core.map.function",
        "since": "1.0.0",
        "filename": "_map-has-key.scss",
        "extension": "scss",
        "path": "src/scss/core/map/function/_map-has-key.scss",
        "directory": "src/scss/core/map/function",
        "children": {},
        "relPath": "src/scss/core/map/function/_map-has-key.scss",
        "relDirectory": "src/scss/core/map/function"
    },
    "sugar.scss.core.map.function.map-keys": {
        "name": "map-keys",
        "type": "function",
        "description": "Return a comma separated list of the map keys",
        "namespace": "sugar.scss.core.map.function",
        "since": "1.0.0",
        "filename": "_map-keys.scss",
        "extension": "scss",
        "path": "src/scss/core/map/function/_map-keys.scss",
        "directory": "src/scss/core/map/function",
        "children": {},
        "relPath": "src/scss/core/map/function/_map-keys.scss",
        "relDirectory": "src/scss/core/map/function"
    },
    "sugar.scss.core.map.function.map-merge": {
        "name": "map-merge",
        "type": "function",
        "description": "Merge the first passed map with the second passed one and return the result",
        "namespace": "sugar.scss.core.map.function",
        "since": "1.0.0",
        "filename": "_map-merge.scss",
        "extension": "scss",
        "path": "src/scss/core/map/function/_map-merge.scss",
        "directory": "src/scss/core/map/function",
        "children": {},
        "relPath": "src/scss/core/map/function/_map-merge.scss",
        "relDirectory": "src/scss/core/map/function"
    },
    "sugar.scss.core.map.function.map-remove": {
        "name": "map-remove",
        "type": "function",
        "description": "Remove one or multiple keys from the passed map",
        "namespace": "sugar.scss.core.map.function",
        "since": "1.0.0",
        "filename": "_map-remove.scss",
        "extension": "scss",
        "path": "src/scss/core/map/function/_map-remove.scss",
        "directory": "src/scss/core/map/function",
        "children": {},
        "relPath": "src/scss/core/map/function/_map-remove.scss",
        "relDirectory": "src/scss/core/map/function"
    },
    "sugar.scss.core.map.function.map-set": {
        "name": "map-set",
        "type": "function",
        "description": "Set a map property with the passed value",
        "namespace": "sugar.scss.core.map.function",
        "since": "1.0.0",
        "filename": "_map-set.scss",
        "extension": "scss",
        "path": "src/scss/core/map/function/_map-set.scss",
        "directory": "src/scss/core/map/function",
        "children": {},
        "relPath": "src/scss/core/map/function/_map-set.scss",
        "relDirectory": "src/scss/core/map/function"
    },
    "sugar.scss.core.map.function.map-to-css-variables": {
        "name": "map-to-css-variables",
        "type": "Mixin",
        "description": "THis mixin simply take a single level map and convert it to\ncss variables declarations like ```--my-cool-variable: 10px```",
        "namespace": "sugar.scss.core.map.function",
        "since": "2.0.0",
        "filename": "_map-to-css-variables.scss",
        "extension": "scss",
        "path": "src/scss/core/map/function/_map-to-css-variables.scss",
        "directory": "src/scss/core/map/function",
        "children": {},
        "relPath": "src/scss/core/map/function/_map-to-css-variables.scss",
        "relDirectory": "src/scss/core/map/function"
    },
    "sugar.scss.core.math.function.math-abs": {
        "name": "math-abs",
        "type": "function",
        "description": "Return the absolute version of the passed number",
        "namespace": "sugar.scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-abs.scss",
        "extension": "scss",
        "path": "src/scss/core/math/function/_math-abs.scss",
        "directory": "src/scss/core/math/function",
        "children": {},
        "relPath": "src/scss/core/math/function/_math-abs.scss",
        "relDirectory": "src/scss/core/math/function"
    },
    "sugar.scss.core.math.function.math-acos": {
        "name": "math-acos",
        "type": "function",
        "description": "Calculate the cosinus inverse of the passed angle",
        "namespace": "sugar.scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-acos.scss",
        "extension": "scss",
        "path": "src/scss/core/math/function/_math-acos.scss",
        "directory": "src/scss/core/math/function",
        "children": {},
        "relPath": "src/scss/core/math/function/_math-acos.scss",
        "relDirectory": "src/scss/core/math/function"
    },
    "sugar.scss.core.math.function.math-asin": {
        "name": "math-asin",
        "type": "function",
        "description": "Calculate the sinus inverse",
        "namespace": "sugar.scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-asin.scss",
        "extension": "scss",
        "path": "src/scss/core/math/function/_math-asin.scss",
        "directory": "src/scss/core/math/function",
        "children": {},
        "relPath": "src/scss/core/math/function/_math-asin.scss",
        "relDirectory": "src/scss/core/math/function"
    },
    "sugar.scss.core.math.function.math-atan": {
        "name": "math-atan",
        "type": "function",
        "description": "Calculate the tangent inverse of the passed angle",
        "namespace": "sugar.scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-atan.scss",
        "extension": "scss",
        "path": "src/scss/core/math/function/_math-atan.scss",
        "directory": "src/scss/core/math/function",
        "children": {},
        "relPath": "src/scss/core/math/function/_math-atan.scss",
        "relDirectory": "src/scss/core/math/function"
    },
    "sugar.scss.core.math.function.math-ceil": {
        "name": "math-ceil",
        "type": "function",
        "description": "Rounds $number up to the next highest whole number",
        "namespace": "sugar.scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-ceil.scss",
        "extension": "scss",
        "path": "src/scss/core/math/function/_math-ceil.scss",
        "directory": "src/scss/core/math/function",
        "children": {},
        "relPath": "src/scss/core/math/function/_math-ceil.scss",
        "relDirectory": "src/scss/core/math/function"
    },
    "sugar.scss.core.math.function.math-convert-angle": {
        "name": "math-convert-angle",
        "type": "function",
        "description": "Convert the passed angle into another unit like rad, deg, grad or turn",
        "namespace": "sugar.scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-convert-angle.scss",
        "extension": "scss",
        "path": "src/scss/core/math/function/_math-convert-angle.scss",
        "directory": "src/scss/core/math/function",
        "children": {},
        "relPath": "src/scss/core/math/function/_math-convert-angle.scss",
        "relDirectory": "src/scss/core/math/function"
    },
    "sugar.scss.core.math.function.math-cos": {
        "name": "math-cos",
        "type": "function",
        "description": "Calculate the cosinus of the passed angle",
        "namespace": "sugar.scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-cos.scss",
        "extension": "scss",
        "path": "src/scss/core/math/function/_math-cos.scss",
        "directory": "src/scss/core/math/function",
        "children": {},
        "relPath": "src/scss/core/math/function/_math-cos.scss",
        "relDirectory": "src/scss/core/math/function"
    },
    "sugar.scss.core.math.function.math-deg": {
        "name": "math-deg",
        "type": "function",
        "description": "Convert the passed unitless angle to degree",
        "namespace": "sugar.scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-deg.scss",
        "extension": "scss",
        "path": "src/scss/core/math/function/_math-deg.scss",
        "directory": "src/scss/core/math/function",
        "children": {},
        "relPath": "src/scss/core/math/function/_math-deg.scss",
        "relDirectory": "src/scss/core/math/function"
    },
    "sugar.scss.core.math.function.math-even": {
        "name": "math-even",
        "type": "function",
        "description": "Convert the passed value to the closest even value",
        "namespace": "sugar.scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-even.scss",
        "extension": "scss",
        "path": "src/scss/core/math/function/_math-even.scss",
        "directory": "src/scss/core/math/function",
        "children": {},
        "relPath": "src/scss/core/math/function/_math-even.scss",
        "relDirectory": "src/scss/core/math/function"
    },
    "sugar.scss.core.math.function.math-fact": {
        "name": "math-fact",
        "type": "function",
        "description": "Returns the factorial of desired number",
        "namespace": "sugar.scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-fact.scss",
        "extension": "scss",
        "path": "src/scss/core/math/function/_math-fact.scss",
        "directory": "src/scss/core/math/function",
        "children": {},
        "relPath": "src/scss/core/math/function/_math-fact.scss",
        "relDirectory": "src/scss/core/math/function"
    },
    "sugar.scss.core.math.function.math-grad": {
        "name": "math-grad",
        "type": "function",
        "description": "Convert the passed unitless angle to gradian",
        "namespace": "sugar.scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-grad.scss",
        "extension": "scss",
        "path": "src/scss/core/math/function/_math-grad.scss",
        "directory": "src/scss/core/math/function",
        "children": {},
        "relPath": "src/scss/core/math/function/_math-grad.scss",
        "relDirectory": "src/scss/core/math/function"
    },
    "sugar.scss.core.math.function.math-odd": {
        "name": "math-odd",
        "type": "function",
        "description": "Convert the passed value to the closest odd value",
        "namespace": "sugar.scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-odd.scss",
        "extension": "scss",
        "path": "src/scss/core/math/function/_math-odd.scss",
        "directory": "src/scss/core/math/function",
        "children": {},
        "relPath": "src/scss/core/math/function/_math-odd.scss",
        "relDirectory": "src/scss/core/math/function"
    },
    "sugar.scss.core.math.function.math-percentage": {
        "name": "math-percentage",
        "type": "function",
        "description": "Converts a unitless $number (usually a decimal between 0 and 1) to a percentage.",
        "namespace": "sugar.scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-percentage.scss",
        "extension": "scss",
        "path": "src/scss/core/math/function/_math-percentage.scss",
        "directory": "src/scss/core/math/function",
        "children": {},
        "relPath": "src/scss/core/math/function/_math-percentage.scss",
        "relDirectory": "src/scss/core/math/function"
    },
    "sugar.scss.core.math.function.math-pow": {
        "name": "math-pow",
        "type": "function",
        "description": "Return the calculated power of the passed base using the passed exponent",
        "namespace": "sugar.scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-pow.scss",
        "extension": "scss",
        "path": "src/scss/core/math/function/_math-pow.scss",
        "directory": "src/scss/core/math/function",
        "children": {},
        "relPath": "src/scss/core/math/function/_math-pow.scss",
        "relDirectory": "src/scss/core/math/function"
    },
    "sugar.scss.core.math.function.math-rad": {
        "name": "math-rad",
        "type": "function",
        "description": "Convert the passed unitless angle to radian",
        "namespace": "sugar.scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-rad.scss",
        "extension": "scss",
        "path": "src/scss/core/math/function/_math-rad.scss",
        "directory": "src/scss/core/math/function",
        "children": {},
        "relPath": "src/scss/core/math/function/_math-rad.scss",
        "relDirectory": "src/scss/core/math/function"
    },
    "sugar.scss.core.math.function.math-random": {
        "name": "math-random",
        "type": "function",
        "description": "If $limit is null, returns a random decimal number between 0 and 1.",
        "namespace": "sugar.scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-random.scss",
        "extension": "scss",
        "path": "src/scss/core/math/function/_math-random.scss",
        "directory": "src/scss/core/math/function",
        "children": {},
        "relPath": "src/scss/core/math/function/_math-random.scss",
        "relDirectory": "src/scss/core/math/function"
    },
    "sugar.scss.core.math.function.render-round-even": {
        "name": "render-round-even",
        "type": "function",
        "description": "Return the passed values in the same unit but that has been even rounded on the corresponding px value\nThis ensure that your passed value will be a round px value for final rander in the viewport",
        "namespace": "sugar.scss.core.math.function",
        "filename": "_math-render-round-even.scss",
        "extension": "scss",
        "path": "src/scss/core/math/function/_math-render-round-even.scss",
        "directory": "src/scss/core/math/function",
        "children": {},
        "relPath": "src/scss/core/math/function/_math-render-round-even.scss",
        "relDirectory": "src/scss/core/math/function"
    },
    "sugar.scss.core.math.function.render-round-odd": {
        "name": "render-round-odd",
        "type": "function",
        "description": "Return the passed values in the same unit but that has been odd rounded on the corresponding px value\nThis ensure that your passed value will be a round px value for final rander in the viewport",
        "namespace": "sugar.scss.core.math.function",
        "filename": "_math-render-round-odd.scss",
        "extension": "scss",
        "path": "src/scss/core/math/function/_math-render-round-odd.scss",
        "directory": "src/scss/core/math/function",
        "children": {},
        "relPath": "src/scss/core/math/function/_math-render-round-odd.scss",
        "relDirectory": "src/scss/core/math/function"
    },
    "sugar.scss.core.math.function.render-round": {
        "name": "render-round",
        "type": "function",
        "description": "Return the passed values in the same unit but that has been rounded on the corresponding px value\nThis ensure that your passed value will be a round px value for final rander in the viewport",
        "namespace": "sugar.scss.core.math.function",
        "filename": "_math-render-round.scss",
        "extension": "scss",
        "path": "src/scss/core/math/function/_math-render-round.scss",
        "directory": "src/scss/core/math/function",
        "children": {},
        "relPath": "src/scss/core/math/function/_math-render-round.scss",
        "relDirectory": "src/scss/core/math/function"
    },
    "sugar.scss.core.math.function.math-round": {
        "name": "math-round",
        "type": "function",
        "description": "Rounds $number to the nearest whole number.",
        "namespace": "sugar.scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-round.scss",
        "extension": "scss",
        "path": "src/scss/core/math/function/_math-round.scss",
        "directory": "src/scss/core/math/function",
        "children": {},
        "relPath": "src/scss/core/math/function/_math-round.scss",
        "relDirectory": "src/scss/core/math/function"
    },
    "sugar.scss.core.math.function.math-sin": {
        "name": "math-sin",
        "type": "function",
        "description": "Calculate the sinus of the passed angle",
        "namespace": "sugar.scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-sin.scss",
        "extension": "scss",
        "path": "src/scss/core/math/function/_math-sin.scss",
        "directory": "src/scss/core/math/function",
        "children": {},
        "relPath": "src/scss/core/math/function/_math-sin.scss",
        "relDirectory": "src/scss/core/math/function"
    },
    "sugar.scss.core.math.function.math-sqrt": {
        "name": "math-sqrt",
        "type": "function",
        "description": "Return the square root of the passed number",
        "namespace": "sugar.scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-sqrt.scss",
        "extension": "scss",
        "path": "src/scss/core/math/function/_math-sqrt.scss",
        "directory": "src/scss/core/math/function",
        "children": {},
        "relPath": "src/scss/core/math/function/_math-sqrt.scss",
        "relDirectory": "src/scss/core/math/function"
    },
    "sugar.scss.core.math.function.math-tan": {
        "name": "math-tan",
        "type": "function",
        "description": "Calculate the tangent of the passed angle",
        "namespace": "sugar.scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-tan.scss",
        "extension": "scss",
        "path": "src/scss/core/math/function/_math-tan.scss",
        "directory": "src/scss/core/math/function",
        "children": {},
        "relPath": "src/scss/core/math/function/_math-tan.scss",
        "relDirectory": "src/scss/core/math/function"
    },
    "sugar.scss.core.math.function.math-turn": {
        "name": "math-turn",
        "type": "function",
        "description": "Convert the passed unitless angle to turn",
        "namespace": "sugar.scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-turn.scss",
        "extension": "scss",
        "path": "src/scss/core/math/function/_math-turn.scss",
        "directory": "src/scss/core/math/function",
        "children": {},
        "relPath": "src/scss/core/math/function/_math-turn.scss",
        "relDirectory": "src/scss/core/math/function"
    },
    "sugar.scss.core.setting.function.setting-var": {
        "name": "setting-var",
        "type": "function",
        "description": "Get a settings from the global settings stack and return it in var(...) format",
        "namespace": "sugar.scss.core.setting.function",
        "since": "2.0.0",
        "filename": "_setting-var.scss",
        "extension": "scss",
        "path": "src/scss/core/setting/function/_setting-var.scss",
        "directory": "src/scss/core/setting/function",
        "children": {},
        "relPath": "src/scss/core/setting/function/_setting-var.scss",
        "relDirectory": "src/scss/core/setting/function"
    },
    "sugar.scss.core.setting.function.setting": {
        "name": "setting",
        "type": "function",
        "description": "Get a settings from the global settings stack",
        "namespace": "sugar.scss.core.setting.function",
        "since": "1.0.0",
        "filename": "_setting.scss",
        "extension": "scss",
        "path": "src/scss/core/setting/function/_setting.scss",
        "directory": "src/scss/core/setting/function",
        "children": {},
        "relPath": "src/scss/core/setting/function/_setting.scss",
        "relDirectory": "src/scss/core/setting/function"
    },
    "sugar.scss.core.size.function.interpolate": {
        "name": "interpolate",
        "type": "function",
        "description": "Return the specified or calculated value of the given stack and size\ndepending on the settings.sizes ratios stack",
        "namespace": "sugar.scss.core.size.function",
        "since": "1.0.0",
        "filename": "_interpolate.scss",
        "extension": "scss",
        "path": "src/scss/core/size/function/_interpolate.scss",
        "directory": "src/scss/core/size/function",
        "children": {},
        "relPath": "src/scss/core/size/function/_interpolate.scss",
        "relDirectory": "src/scss/core/size/function"
    },
    "sugar.scss.core.space.function.space": {
        "name": "space",
        "type": "function",
        "description": "Return a value interpolated from the settings.spaces stack",
        "namespace": "sugar.scss.core.space.function",
        "since": "1.0.0",
        "filename": "_space.scss",
        "extension": "scss",
        "path": "src/scss/core/space/function/_space.scss",
        "directory": "src/scss/core/space/function",
        "children": {},
        "relPath": "src/scss/core/space/function/_space.scss",
        "relDirectory": "src/scss/core/space/function"
    },
    "sugar.scss.core.string.function.parse-properties": {
        "name": "parse-properties",
        "type": "function",
        "description": "Parse a given string/list properties and return the Map corresponding to the Map description",
        "namespace": "sugar.scss.core.string.function",
        "since": "1.0.0",
        "filename": "_parse-properties.scss",
        "extension": "scss",
        "path": "src/scss/core/string/function/_parse-properties.scss",
        "directory": "src/scss/core/string/function",
        "children": {},
        "relPath": "src/scss/core/string/function/_parse-properties.scss",
        "relDirectory": "src/scss/core/string/function"
    },
    "sugar.scss.core.string.function.replace-tokens": {
        "name": "replace-tokens",
        "type": "function",
        "description": "Search and replace tokens like colors #primary in a passed string, list or map\nSupported tokens types :\n1. Colors : #{colorName}",
        "namespace": "sugar.scss.core.string.function",
        "since": "1.0.0",
        "filename": "_replace-tokens.scss",
        "extension": "scss",
        "path": "src/scss/core/string/function/_replace-tokens.scss",
        "directory": "src/scss/core/string/function",
        "children": {},
        "relPath": "src/scss/core/string/function/_replace-tokens.scss",
        "relDirectory": "src/scss/core/string/function"
    },
    "sugar.scss.core.string.function.str-index": {
        "name": "str-index",
        "type": "function",
        "description": "Returns the first index of $substring in $string, or null if $string doesn’t contain $substring.",
        "namespace": "sugar.scss.core.string.function",
        "since": "1.0.0",
        "filename": "_str-index.scss",
        "extension": "scss",
        "path": "src/scss/core/string/function/_str-index.scss",
        "directory": "src/scss/core/string/function",
        "children": {},
        "relPath": "src/scss/core/string/function/_str-index.scss",
        "relDirectory": "src/scss/core/string/function"
    },
    "sugar.scss.core.string.function.str-is-url": {
        "name": "str-is-url",
        "type": "function",
        "description": "Check if a string is a url or not",
        "namespace": "sugar.scss.core.string.function",
        "since": "1.0.0",
        "filename": "_str-is-url.scss",
        "extension": "scss",
        "path": "src/scss/core/string/function/_str-is-url.scss",
        "directory": "src/scss/core/string/function",
        "children": {},
        "relPath": "src/scss/core/string/function/_str-is-url.scss",
        "relDirectory": "src/scss/core/string/function"
    },
    "sugar.scss.core.string.function.str-length": {
        "name": "str-length",
        "type": "function",
        "description": "Return the number of characters in the passed string",
        "namespace": "sugar.scss.core.string.function",
        "since": "1.0.0",
        "filename": "_str-length.scss",
        "extension": "scss",
        "path": "src/scss/core/string/function/_str-length.scss",
        "directory": "src/scss/core/string/function",
        "children": {},
        "relPath": "src/scss/core/string/function/_str-length.scss",
        "relDirectory": "src/scss/core/string/function"
    },
    "sugar.scss.core.string.function.str-replace": {
        "name": "str-replace",
        "type": "function",
        "description": "Replace the passed string with another one in a specific string",
        "namespace": "sugar.scss.core.string.function",
        "since": "1.0.0",
        "filename": "_str-replace.scss",
        "extension": "scss",
        "path": "src/scss/core/string/function/_str-replace.scss",
        "directory": "src/scss/core/string/function",
        "children": {},
        "relPath": "src/scss/core/string/function/_str-replace.scss",
        "relDirectory": "src/scss/core/string/function"
    },
    "sugar.scss.core.string.function.str-slice": {
        "name": "str-slice",
        "type": "function",
        "description": "Returns the slice of $string starting at index $start-at and ending at index $end-at (both inclusive).",
        "namespace": "sugar.scss.core.string.function",
        "since": "1.0.0",
        "filename": "_str-slice.scss",
        "extension": "scss",
        "path": "src/scss/core/string/function/_str-slice.scss",
        "directory": "src/scss/core/string/function",
        "children": {},
        "relPath": "src/scss/core/string/function/_str-slice.scss",
        "relDirectory": "src/scss/core/string/function"
    },
    "sugar.scss.core.string.function.str-split": {
        "name": "str-split",
        "type": "function",
        "description": "Split a string using a delimiter",
        "namespace": "sugar.scss.core.string.function",
        "since": "1.0.0",
        "filename": "_str-split.scss",
        "extension": "scss",
        "path": "src/scss/core/string/function/_str-split.scss",
        "directory": "src/scss/core/string/function",
        "children": {},
        "relPath": "src/scss/core/string/function/_str-split.scss",
        "relDirectory": "src/scss/core/string/function"
    },
    "sugar.scss.core.string.function.str-trim": {
        "name": "str-trim",
        "type": "function",
        "description": "trim the passed string",
        "namespace": "sugar.scss.core.string.function",
        "since": "1.0.0",
        "filename": "_str-trim.scss",
        "extension": "scss",
        "path": "src/scss/core/string/function/_str-trim.scss",
        "directory": "src/scss/core/string/function",
        "children": {},
        "relPath": "src/scss/core/string/function/_str-trim.scss",
        "relDirectory": "src/scss/core/string/function"
    },
    "sugar.scss.core.string.function.str-unique-id": {
        "name": "str-unique-id",
        "type": "function",
        "description": "Generate a unique id in string format",
        "namespace": "sugar.scss.core.string.function",
        "since": "1.0.0",
        "filename": "_str-unique-id.scss",
        "extension": "scss",
        "path": "src/scss/core/string/function/_str-unique-id.scss",
        "directory": "src/scss/core/string/function",
        "children": {},
        "relPath": "src/scss/core/string/function/_str-unique-id.scss",
        "relDirectory": "src/scss/core/string/function"
    },
    "sugar.scss.core.string.function.str-unquote": {
        "name": "str-unquote",
        "type": "function",
        "description": "Return an unquoted version of the passed string",
        "namespace": "sugar.scss.core.string.function",
        "since": "1.0.0",
        "filename": "_str-unquote.scss",
        "extension": "scss",
        "path": "src/scss/core/string/function/_str-unquote.scss",
        "directory": "src/scss/core/string/function",
        "children": {},
        "relPath": "src/scss/core/string/function/_str-unquote.scss",
        "relDirectory": "src/scss/core/string/function"
    },
    "sugar.scss.core.string.function.str-url-ext": {
        "name": "str-url-ext",
        "type": "function",
        "description": "Check if a string is a url or not",
        "namespace": "sugar.scss.core.string.function",
        "since": "1.0.0",
        "filename": "_str-url-ext.scss",
        "extension": "scss",
        "path": "src/scss/core/string/function/_str-url-ext.scss",
        "directory": "src/scss/core/string/function",
        "children": {},
        "relPath": "src/scss/core/string/function/_str-url-ext.scss",
        "relDirectory": "src/scss/core/string/function"
    }
}
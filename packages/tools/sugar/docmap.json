{
    "cli.sugar.cli": {
        "name": "sugar.cli",
        "type": "File",
        "description": "This is the main sugar cli file that split the commands\nby calling the proper files with the parsed cli args",
        "namespace": "cli",
        "filename": "sugar.cli.ts",
        "extension": "cli",
        "relPath": "src/cli/sugar.cli.ts",
        "children": {}
    },
    "node.index": {
        "name": "index",
        "description": "This file is the \"initialisation\" one for the sugar node toolkit.\nIt's optional to include it but if you do, you will get these features \"for free\":\n- Logging: Get the powerfull options of the SLog class without any change in your codebase",
        "namespace": "node",
        "since": "2.0.0",
        "filename": "index.ts",
        "extension": "ts",
        "relPath": "src/node/index.ts",
        "children": {}
    },
    "js.array.asyncForEach": {
        "name": "asyncForEach",
        "type": "Function",
        "description": "Allow to make some async foreach on your arrays",
        "namespace": "js.array",
        "status": "beta",
        "filename": "asyncForEach.ts",
        "extension": "ts",
        "relPath": "src/shared/array/asyncForEach.ts",
        "children": {}
    },
    "js.array.keysFirst": {
        "name": "keysFirst",
        "type": "Function",
        "description": "Make sure the passed array start with the passed keys",
        "namespace": "js.array",
        "filename": "keysFirst.ts",
        "extension": "ts",
        "relPath": "src/shared/array/keysFirst.ts",
        "children": {}
    },
    "js.array.keysLast": {
        "name": "keysLast",
        "type": "Function",
        "description": "Make sure the passed array ends with the passed keys",
        "namespace": "js.array",
        "filename": "keysLast.ts",
        "extension": "ts",
        "relPath": "src/shared/array/keysLast.ts",
        "children": {}
    },
    "shared.array.pickRandom": {
        "name": "pickRandom",
        "type": "Function",
        "description": "Pick a random item in the passed array",
        "namespace": "shared.array",
        "since": "2.0.0",
        "filename": "pickRandom.ts",
        "extension": "ts",
        "relPath": "src/shared/array/pickRandom.ts",
        "children": {}
    },
    "js.array.proxy": {
        "name": "proxy",
        "type": "Function",
        "description": "This function override the passed array prototype to intercept changes made through",
        "namespace": "js.array",
        "status": "wip",
        "filename": "proxy.ts",
        "extension": "ts",
        "relPath": "src/shared/array/proxy.ts",
        "children": {
            "watch": {
                "name": "watch",
                "type": "Function",
                "description": "This method allows you to specify which Array methods you want to watch by passing an array of methods names like ['push','pop'].\nYou can also specify the handler function that will be called on each array updates, etc..."
            },
            "unwatch": {
                "name": "unwatch",
                "type": "Function",
                "description": "This methods allows you to unwatch a process started with the \"watch\" method.\nYou have to pass as parameter the watchId that the \"watch\" method has returned you."
            }
        }
    },
    "js.array.splitEvery": {
        "name": "splitEvery",
        "type": "Function",
        "description": "Split an array every N items",
        "namespace": "js.array",
        "status": "beta",
        "filename": "splitEvery.ts",
        "extension": "ts",
        "relPath": "src/shared/array/splitEvery.ts",
        "children": {}
    },
    "js.array.unique": {
        "name": "unique",
        "type": "Function",
        "description": "This function simply take an array as parameter and return a new one\nwith all the duplicates values removed.",
        "namespace": "js.array",
        "status": "beta",
        "since": "2.0.0",
        "filename": "unique.ts",
        "extension": "ts",
        "relPath": "src/shared/array/unique.ts",
        "children": {}
    },
    "shared.ascii.sugarBanner": {
        "name": "sugarBanner",
        "type": "Function",
        "description": "This function returns an ascii version of the sugar logo",
        "namespace": "shared.ascii",
        "since": "2.0.0",
        "filename": "sugarBanner.ts",
        "extension": "ts",
        "relPath": "src/shared/ascii/sugarBanner.ts",
        "children": {}
    },
    "js.cli.argsToString": {
        "name": "argsToString",
        "type": "Function",
        "description": "This function take a simple object, a definition object and return you the string version that you can pass\ndirectly to the command line interface",
        "namespace": "js.cli",
        "status": "beta",
        "since": "2.0.0",
        "filename": "argsToString.ts",
        "extension": "ts",
        "relPath": "src/shared/cli/argsToString.ts",
        "children": {}
    },
    "js.cli.buildCommandLine": {
        "name": "buildCommandLine",
        "type": "Function",
        "description": "This function takes as parameters a command line (with tokens), an arguments object and a definition object to\ngenerate the final command line string to launch.\nA token is simply a string that begin with \"[\" and end with \"]\" like so: \"[mytoken]\".\nEach arguments of the definition object can be a token. If you have an argument called \"hostname\", the corresponding token will be \"[hostname]\".\nA special token called \"[arguments]\" is needed if you want the passed arguments to be integrated to the builded command line.",
        "namespace": "js.cli",
        "status": "beta",
        "since": "2.0.0",
        "filename": "buildCommandLine.ts",
        "extension": "ts",
        "relPath": "src/shared/cli/buildCommandLine.ts",
        "children": {}
    },
    "js.cli.parseArgs": {
        "name": "parseArgs",
        "type": "Function",
        "description": "Parse a string to find the provided arguments into the list and return a corresponding object.",
        "namespace": "js.cli",
        "since": "2.0.0",
        "filename": "parseArgs.ts",
        "extension": "ts",
        "relPath": "src/shared/cli/parseArgs.ts",
        "children": {}
    },
    "js.color.SColor": {
        "name": "SColor",
        "type": "Class",
        "description": "Class that provide complete and simple to use color manupilation capabilities like:\n- Modifiers\n- opacity\n- darken\n- lighten\n- desaturate\n- saturate\n- spin (change hue)\n- transparentize\n- alpha\n- grayscale\n- Conversions\n- rgba\n- hsl\n- hsv\n- hex\n- Print out formats\n- toRgbaString\n- toHslString\n- toHsvString\n- toHexString\n- toString(format = null)",
        "namespace": "js.color",
        "status": "beta",
        "since": "2.0.0",
        "filename": "SColor.ts",
        "extension": "ts",
        "relPath": "src/shared/color/SColor.ts",
        "children": {
            "colors": {
                "name": "colors",
                "type": "Object",
                "description": "Static color names map",
                "static": true
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "getColor": {
                "name": "getColor",
                "type": "Function",
                "description": "This method take as parameter the passed color to the constructor and has to return the\nactual real color like color from the static colors listed in the SColor class or maybe\nfrom the Sugar configured colors"
            },
            "toHex": {
                "name": "toHex",
                "type": "Function",
                "description": "To hex"
            },
            "toHsl": {
                "name": "toHsl",
                "type": "Function",
                "description": "To hsl"
            },
            "toHsv": {
                "name": "toHsv",
                "type": "Function",
                "description": "To hsv"
            },
            "toRgba": {
                "name": "toRgba",
                "type": "Function",
                "description": "To rgba"
            },
            "r": {
                "name": "r",
                "type": "Number",
                "description": "Get/set the red value"
            },
            "g": {
                "name": "g",
                "type": "Number",
                "description": "Get/set the green value"
            },
            "b": {
                "name": "b",
                "type": "Number",
                "description": "Get/set the blue value"
            },
            "a": {
                "name": "a",
                "type": "Number",
                "description": "Get/set the alpha value"
            },
            "l": {
                "name": "l",
                "type": "Number",
                "description": "The luminence value"
            },
            "s": {
                "name": "s",
                "type": "Number",
                "description": "The saturation value"
            },
            "v": {
                "name": "v",
                "type": "Number",
                "description": "The value of the HSV format"
            },
            "h": {
                "name": "h",
                "type": "Number",
                "description": "Get/set the hue"
            },
            "reset": {
                "name": "reset",
                "type": "Function",
                "description": "Reset to the original color"
            },
            "desaturate": {
                "name": "desaturate",
                "type": "Function",
                "description": "Desaturate"
            },
            "saturate": {
                "name": "saturate",
                "type": "Function",
                "description": "Saturate"
            },
            "grayscale": {
                "name": "grayscale",
                "type": "Function",
                "description": "Return a new SColor instance of the color to grayscale"
            },
            "spin": {
                "name": "spin",
                "type": "Function",
                "description": "Spin the hue on the passed value (max 360)"
            },
            "transparentize": {
                "name": "transparentize",
                "type": "Function",
                "description": "Transparentize"
            },
            "alpha": {
                "name": "alpha",
                "type": "Function",
                "description": "Set the alpha"
            },
            "opacity": {
                "name": "opacity",
                "type": "Function",
                "description": "Set the opacity (alias for alpha)"
            },
            "opacify": {
                "name": "opacify",
                "type": "Function",
                "description": "Opacify"
            },
            "darken": {
                "name": "darken",
                "type": "Function",
                "description": "Darken"
            },
            "lighten": {
                "name": "lighten",
                "type": "Function",
                "description": "Lighten"
            },
            "toHexString": {
                "name": "toHexString",
                "type": "Function",
                "description": "To hex string"
            },
            "toRgbaString": {
                "name": "toRgbaString",
                "type": "Function",
                "description": "To rgba string"
            },
            "toHslString": {
                "name": "toHslString",
                "type": "Function",
                "description": "To hsl string"
            },
            "toHsvString": {
                "name": "toHsvString",
                "type": "Function",
                "description": "To hsv string"
            },
            "toString": {
                "name": "toString",
                "type": "Function",
                "description": "To string"
            }
        }
    },
    "js.color.convert": {
        "name": "convert",
        "type": "Function",
        "description": "This function take as input any color format like rgba Object, hsl Object, hsv Object, hex String, rgba String, hsl String or hsv String\nand convert it into the wanted format like \"rgba\", \"hsl\", \"hsv\", \"hex\", \"rgbaString\", \"hslString\" or \"hsvString\"",
        "namespace": "js.color",
        "since": "2.0.0",
        "filename": "convert.ts",
        "extension": "ts",
        "relPath": "src/shared/color/convert.ts",
        "children": {}
    },
    "js.color.hex2rgba": {
        "name": "hex2rgba",
        "type": "Function",
        "description": "Hex to RGBA",
        "namespace": "js.color",
        "since": "2.0.0",
        "filename": "hex2rgba.ts",
        "extension": "ts",
        "relPath": "src/shared/color/hex2rgba.ts",
        "children": {}
    },
    "js.color.hsl2rgba": {
        "name": "hsl2rgba",
        "type": "Function",
        "description": "HSL to RGBA",
        "namespace": "js.color",
        "since": "2.0.0",
        "filename": "hsl2rgba.ts",
        "extension": "ts",
        "relPath": "src/shared/color/hsl2rgba.ts",
        "children": {}
    },
    "js.color.hsv2rgba": {
        "name": "hsv2rgba",
        "type": "Function",
        "description": "HSV to RGBA",
        "namespace": "js.color",
        "since": "2.0.0",
        "filename": "hsv2rgba.ts",
        "extension": "ts",
        "relPath": "src/shared/color/hsv2rgba.ts",
        "children": {}
    },
    "js.color.parseHsl": {
        "name": "parseHsl",
        "type": "Function",
        "description": "Parse HSL",
        "namespace": "js.color",
        "since": "2.0.0",
        "filename": "parseHsl.ts",
        "extension": "ts",
        "relPath": "src/shared/color/parseHsl.ts",
        "children": {}
    },
    "js.color.parseHsv": {
        "name": "parseHsv",
        "type": "Function",
        "description": "Parse HSV",
        "namespace": "js.color",
        "since": "2.0.0",
        "filename": "parseHsv.ts",
        "extension": "ts",
        "relPath": "src/shared/color/parseHsv.ts",
        "children": {}
    },
    "js.color.parseRgba": {
        "name": "parseRgba",
        "type": "Function",
        "description": "Parse RGBA string and return an object",
        "namespace": "js.color",
        "since": "2.0.0",
        "filename": "parseRgba.ts",
        "extension": "ts",
        "relPath": "src/shared/color/parseRgba.ts",
        "children": {}
    },
    "js.color.rgba2hex": {
        "name": "rgba2hex",
        "type": "Function",
        "description": "RGBA to HEX",
        "namespace": "js.color",
        "since": "2.0.0",
        "filename": "rgba2hex.ts",
        "extension": "ts",
        "relPath": "src/shared/color/rgba2hex.ts",
        "children": {}
    },
    "js.color.rgba2hsl": {
        "name": "rgba2hsl",
        "type": "Function",
        "description": "RGBA to HSL",
        "namespace": "js.color",
        "since": "2.0.0",
        "filename": "rgba2hsl.ts",
        "extension": "ts",
        "relPath": "src/shared/color/rgba2hsl.ts",
        "children": {}
    },
    "js.color.rgba2hsv": {
        "name": "rgba2hsv",
        "type": "Function",
        "description": "RGBA to HSV",
        "namespace": "js.color",
        "since": "2.0.0",
        "filename": "rgba2hsv.ts",
        "extension": "ts",
        "relPath": "src/shared/color/rgba2hsv.ts",
        "children": {}
    },
    "js.console.parseHtml": {
        "name": "parseHtml",
        "type": "Function",
        "description": "Parse the simple html tags to format the console message",
        "namespace": "js.console",
        "since": "2.0.0",
        "filename": "parseHtml.ts",
        "extension": "ts",
        "relPath": "src/shared/console/parseHtml.ts",
        "children": {}
    },
    "js.core.activeSpace": {
        "name": "activeSpace",
        "type": "Object",
        "description": "This object expose some functions that are usefull to manage the \"active\" space of your application.\nAn active space is represented by a string formated like so \"something.cool.hello\". This mean that your app is\nin the \"something.cool.hello\" space and depending on that, you can enable or disable some features like for example\nkeypress that have to be active only in certain \"space\" of your application.\nThe exposed functions are these ones:\n- set: This allows you to set the active space\n- get: This allows you to get the current active space\n- is: This allows you to check if the passed active space string is in the current active space\n- previous: This allows you to go back 1 activeSpace in the stack\n- on: This allows you to register callbacks attached to an activeSpace\n- append: This allows you to append an activeSpace string to the current one",
        "namespace": "js.core",
        "status": "wip",
        "since": "2.0.0",
        "filename": "activeSpace.ts",
        "extension": "ts",
        "relPath": "src/shared/core/activeSpace.ts",
        "children": {
            "get": {
                "name": "get",
                "type": "Function",
                "description": "This function allows you to get the current active space",
                "since": "2.0.0"
            },
            "set": {
                "name": "set",
                "type": "Function",
                "description": "This function allows you to set the current active space",
                "since": "2.0.0"
            },
            "append": {
                "name": "append",
                "type": "Function",
                "description": "This function take the current activeSpace string and add the passed one to set the new activeSpace string",
                "since": "2.0.0"
            },
            "remove": {
                "name": "remove",
                "type": "Function",
                "description": "This function simply remove the passed string from the activeSpace stack",
                "since": "2.0.0"
            },
            "previous": {
                "name": "previous",
                "type": "Function",
                "description": "This function simply go back by 1 in the activeSpace stack",
                "since": "2.0.0"
            },
            "is": {
                "name": "is",
                "type": "Function",
                "description": "This function allows you to check if the active space string that you pass match with the current active space or not.\nThe checking process is done using the \"minimatch\" package that let you use cool features like \"\", \"**\", etc...",
                "since": "2.0.0"
            },
            "on": {
                "name": "on",
                "type": "Function",
                "description": "This function allows you to register a callback linked with an activeSpace string\nthat will be called once the activeSpace is matched",
                "since": "2.0.0"
            }
        }
    },
    "js.core.env": {
        "name": "env",
        "type": "Function",
        "description": "This function allows you to access environment variables through the same method in node and javascript",
        "namespace": "js.core",
        "status": "wip",
        "since": "2.0.0",
        "filename": "env.ts",
        "extension": "ts",
        "relPath": "src/shared/core/env.ts",
        "children": {}
    },
    "js.crypt.aes": {
        "name": "aes",
        "type": "Object",
        "description": "Expose two function named \"encrypt\" and \"decrypt\" that you can use to process your content using the aes algorithm",
        "namespace": "js.crypt",
        "status": "wip",
        "since": "1.0.0",
        "filename": "aes.ts",
        "extension": "ts",
        "relPath": "src/shared/crypt/aes.ts",
        "children": {
            "encrypt": {
                "name": "encrypt",
                "type": "Function",
                "description": "Encrypt"
            },
            "decrypt": {
                "name": "decrypt",
                "type": "Function",
                "description": "Decrypt"
            }
        }
    },
    "js.crypt.base64": {
        "name": "base64",
        "type": "Object",
        "description": "Expose two function named \"encrypt\" and \"decrypt\" that you can use to process your content using the base64 algorithm",
        "namespace": "js.crypt",
        "status": "wip",
        "since": "2.0.0",
        "filename": "base64.ts",
        "extension": "ts",
        "relPath": "src/shared/crypt/base64.ts",
        "children": {
            "encrypt": {
                "name": "encrypt",
                "type": "Function",
                "description": "Encrypt",
                "since": "2.0.0"
            },
            "decrypt": {
                "name": "decrypt",
                "type": "Function",
                "description": "Decrypt",
                "since": "2.0.0"
            }
        }
    },
    "js.crypt.md5": {
        "name": "md5",
        "type": "Object",
        "description": "Expose two function named \"encrypt\" and \"decrypt\" that you can use to process your content using the md5 algorithm",
        "namespace": "js.crypt",
        "status": "wip",
        "since": "2.0.0",
        "filename": "md5.ts",
        "extension": "ts",
        "relPath": "src/shared/crypt/md5.ts",
        "children": {
            "encrypt": {
                "name": "encrypt",
                "type": "Function",
                "description": "Encrypt"
            },
            "decrypt": {
                "name": "decrypt",
                "type": "Function",
                "description": "Decrypt"
            }
        }
    },
    "js.crypt.object": {
        "name": "object",
        "type": "Object",
        "description": "Expose two function named \"encrypt\" and \"decrypt\" that you can use to process your content using the object algorithm",
        "namespace": "js.crypt",
        "status": "wip",
        "since": "2.0.0",
        "filename": "object.ts",
        "extension": "ts",
        "relPath": "src/shared/crypt/object.ts",
        "children": {
            "encrypt": {
                "name": "encrypt",
                "type": "Function",
                "description": "Encrypt"
            },
            "decrypt": {
                "name": "decrypt",
                "type": "Function",
                "description": "Decrypt"
            }
        }
    },
    "js.crypt.sha256": {
        "name": "sha256",
        "type": "Object",
        "description": "Expose two function named \"encrypt\" and \"decrypt\" that you can use to process your content using the sha256 algorithm",
        "namespace": "js.crypt",
        "status": "wip",
        "since": "2.0.0",
        "filename": "sha256.ts",
        "extension": "ts",
        "relPath": "src/shared/crypt/sha256.ts",
        "children": {
            "encrypt": {
                "name": "encrypt",
                "type": "Function",
                "description": "Encrypt"
            },
            "decrypt": {
                "name": "decrypt",
                "type": "Function",
                "description": "Decrypt"
            }
        }
    },
    "js.crypt.sha512": {
        "name": "sha512",
        "type": "Object",
        "description": "Expose two function named \"encrypt\" and \"decrypt\" that you can use to process your content using the sha512 algorithm",
        "namespace": "js.crypt",
        "status": "wip",
        "since": "2.0.0",
        "filename": "sha512.ts",
        "extension": "ts",
        "relPath": "src/shared/crypt/sha512.ts",
        "children": {
            "encrypt": {
                "name": "encrypt",
                "type": "Function",
                "description": "Encrypt"
            },
            "decrypt": {
                "name": "decrypt",
                "type": "Function",
                "description": "Decrypt"
            }
        }
    },
    "js.css.stripCssComments": {
        "name": "stripCssComments",
        "type": "Function",
        "description": "This function simply remove all the css comments like:\n- Multiline blocks css comments begining with / *, ending with * /\n- Single line comments begining with //",
        "namespace": "js.css",
        "status": "wip",
        "since": "2.0.0",
        "filename": "stripCssComments.ts",
        "extension": "ts",
        "relPath": "src/shared/css/stripCssComments.ts",
        "children": {}
    },
    "js.easing.availableEasingsArray": {
        "name": "availableEasingsArray",
        "type": "Function",
        "description": "This function simply return back an array of all the available easings function in the sugar toolkit",
        "namespace": "js.easing",
        "since": "2.0.0",
        "filename": "availableEasingsArray.ts",
        "extension": "ts",
        "relPath": "src/shared/easing/availableEasingsArray.ts",
        "children": {}
    },
    "js.easing.easeInCubic": {
        "name": "easeInCubic",
        "type": "Function",
        "description": "Ease in cubic function",
        "namespace": "js.easing",
        "since": "1.0.0",
        "filename": "easeInCubic.ts",
        "extension": "ts",
        "relPath": "src/shared/easing/easeInCubic.ts",
        "children": {}
    },
    "js.easing.easeInOutCubic": {
        "name": "easeInOutCubic",
        "type": "Function",
        "description": "Ease in out cubic function",
        "namespace": "js.easing",
        "since": "1.0.0",
        "filename": "easeInOutCubic.ts",
        "extension": "ts",
        "relPath": "src/shared/easing/easeInOutCubic.ts",
        "children": {}
    },
    "js.easing.easeInOutQuad": {
        "name": "easeInOutQuad",
        "type": "Function",
        "description": "Ease in out quad function",
        "namespace": "js.easing",
        "since": "1.0.0",
        "filename": "easeInOutQuad.ts",
        "extension": "ts",
        "relPath": "src/shared/easing/easeInOutQuad.ts",
        "children": {}
    },
    "js.easing.easeInOutQuart": {
        "name": "easeInOutQuart",
        "type": "Function",
        "description": "Ease in out quart function",
        "namespace": "js.easing",
        "since": "1.0.0",
        "filename": "easeInOutQuart.ts",
        "extension": "ts",
        "relPath": "src/shared/easing/easeInOutQuart.ts",
        "children": {}
    },
    "js.easing.easeInOutQuint": {
        "name": "easeInOutQuint",
        "type": "Function",
        "description": "Ease in out quint function",
        "namespace": "js.easing",
        "since": "1.0.0",
        "filename": "easeInOutQuint.ts",
        "extension": "ts",
        "relPath": "src/shared/easing/easeInOutQuint.ts",
        "children": {}
    },
    "js.easing.easeInQuad": {
        "name": "easeInQuad",
        "type": "Function",
        "description": "Ease in quad function",
        "namespace": "js.easing",
        "since": "1.0.0",
        "filename": "easeInQuad.ts",
        "extension": "ts",
        "relPath": "src/shared/easing/easeInQuad.ts",
        "children": {}
    },
    "js.easing.easeInQuart": {
        "name": "easeInQuart",
        "type": "Function",
        "description": "Ease in quart function",
        "namespace": "js.easing",
        "since": "1.0.0",
        "filename": "easeInQuart.ts",
        "extension": "ts",
        "relPath": "src/shared/easing/easeInQuart.ts",
        "children": {}
    },
    "js.easing.easeInQuint": {
        "name": "easeInQuint",
        "type": "Function",
        "description": "Ease in quint function",
        "namespace": "js.easing",
        "since": "1.0.0",
        "filename": "easeInQuint.ts",
        "extension": "ts",
        "relPath": "src/shared/easing/easeInQuint.ts",
        "children": {}
    },
    "js.easing.easeOutCubic": {
        "name": "easeOutCubic",
        "type": "Function",
        "description": "Ease out cubic function",
        "namespace": "js.easing",
        "since": "1.0.0",
        "filename": "easeOutCubic.ts",
        "extension": "ts",
        "relPath": "src/shared/easing/easeOutCubic.ts",
        "children": {}
    },
    "js.easing.easeOutQuad": {
        "name": "easeOutQuad",
        "type": "Function",
        "description": "Ease out quad function",
        "namespace": "js.easing",
        "since": "1.0.0",
        "filename": "easeOutQuad.ts",
        "extension": "ts",
        "relPath": "src/shared/easing/easeOutQuad.ts",
        "children": {}
    },
    "js.easing.easeOutQuart": {
        "name": "easeOutQuart",
        "type": "Function",
        "description": "Ease out quart function",
        "namespace": "js.easing",
        "since": "1.0.0",
        "filename": "easeOutQuart.ts",
        "extension": "ts",
        "relPath": "src/shared/easing/easeOutQuart.ts",
        "children": {}
    },
    "js.easing.easeOutQuint": {
        "name": "easeOutQuint",
        "type": "Function",
        "description": "Ease out quint function",
        "namespace": "js.easing",
        "since": "1.0.0",
        "filename": "easeOutQuint.ts",
        "extension": "ts",
        "relPath": "src/shared/easing/easeOutQuint.ts",
        "children": {}
    },
    "js.easing.linear": {
        "name": "linear",
        "type": "Function",
        "description": "Ease linear function",
        "namespace": "js.easing",
        "since": "1.0.0",
        "filename": "linear.ts",
        "extension": "ts",
        "relPath": "src/shared/easing/linear.ts",
        "children": {}
    },
    "js.es6.SEs6Import": {
        "name": "SEs6Import",
        "type": "Class",
        "description": "This class represent an es6 import statement with properties like:\n- path {String}: The import path\n- default {String}: The default import name\n- star {String}: The start import name \"import  as something from ...\"\n- named {Array<Object>}: THe named imports\n- raw {String}: The raw import statement",
        "namespace": "js.es6",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SEs6Import.ts",
        "extension": "ts",
        "relPath": "src/shared/es6/SEs6Import.ts",
        "children": {
            "parseCode": {
                "name": "parseCode",
                "type": "Function",
                "description": "This function simply parse the passed code and return an array of all the\nfounded es6 imports",
                "static": true,
                "since": "2.0.0"
            },
            "raw": {
                "name": "raw",
                "type": "String",
                "description": "Store the raw statement string",
                "since": "2.0.0"
            },
            "path": {
                "name": "path",
                "type": "String",
                "description": "Store the statement path",
                "since": "2.0.0"
            },
            "default": {
                "name": "default",
                "type": "String",
                "description": "Store the statement default import name",
                "since": "2.0.0"
            },
            "star": {
                "name": "star",
                "type": "String",
                "description": "Store the statement star name like \"import * as coco from ...\"",
                "since": "2.0.0"
            },
            "named": {
                "name": "named",
                "type": "Array<Object>",
                "description": "Store the statement named imports with these properties:\n- name {String}: The import name\n- as {String}: The import as alias",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "toString": {
                "name": "toString",
                "type": "Function",
                "description": "Return the builded version of the import",
                "since": "2.0.0"
            }
        }
    },
    "js.function.debounce": {
        "name": "debounce",
        "type": "Function",
        "description": "This utils function allows you to make sure that a function that will normally be called\nseveral times, for example during a scroll event, to be called only once after\nthe delay passed",
        "namespace": "js.function",
        "since": "2.0.0",
        "filename": "debounce.ts",
        "extension": "ts",
        "relPath": "src/shared/function/debounce.ts",
        "children": {}
    },
    "shared.function.getArgsNames": {
        "name": "getArgsNames",
        "type": "Function",
        "description": "Get the arguments names of the passed function. Return an array of the arguments names",
        "namespace": "shared.function",
        "status": "wip",
        "since": "2.0.0",
        "filename": "getArgsNames.ts",
        "extension": "ts",
        "relPath": "src/shared/function/getArgsNames.ts",
        "children": {}
    },
    "js.function.setRecursiveTimeout": {
        "name": "setRecursiveTimeout",
        "type": "Function",
        "description": "This utils function allows you to call a passed function each x time during a certain duration",
        "namespace": "js.function",
        "since": "2.0.0",
        "filename": "setRecursiveTimeout.ts",
        "extension": "ts",
        "relPath": "src/shared/function/setRecursiveTimeout.ts",
        "children": {}
    },
    "js.function.sleep": {
        "name": "sleep",
        "type": "Function",
        "description": "Simple sleep function that can be used using \"await\" syntax in an \"async\" function",
        "namespace": "js.function",
        "since": "2.0.0",
        "filename": "sleep.ts",
        "extension": "ts",
        "relPath": "src/shared/function/sleep.ts",
        "children": {}
    },
    "js.function.throttle": {
        "name": "throttle",
        "type": "Function",
        "description": "This utils function allows you to make sure that a function that will normally be called\nseveral times, for example during a scroll event, to be called once each threshhold time",
        "namespace": "js.function",
        "since": "2.0.0",
        "filename": "throttle.ts",
        "extension": "ts",
        "relPath": "src/shared/function/throttle.ts",
        "children": {}
    },
    "js.geom.2d.circleConstrain": {
        "name": "circleConstrain",
        "type": "Function",
        "description": "Take as parameter a central point, a radius and a points to constrain inside the circle defined by the radius",
        "namespace": "js.geom.2d",
        "since": "2.0.0",
        "filename": "circleConstrain.ts",
        "extension": "ts",
        "relPath": "src/shared/geom/circleConstrain.ts",
        "children": {}
    },
    "js.geom.2d.distanceBetween": {
        "name": "distanceBetween",
        "type": "Function",
        "description": "Get the distance between two points",
        "namespace": "js.geom.2d",
        "since": "2.0.0",
        "filename": "distanceBetween.ts",
        "extension": "ts",
        "relPath": "src/shared/geom/distanceBetween.ts",
        "children": {}
    },
    "js.glob.expandGlob": {
        "name": "expandGlob",
        "type": "Function",
        "description": "This function take some extended glob pattern(s) and expand them to standard supported\nglob patterns. With this, you will have access to some syntax sugar like these:\n- /something{2,4}/.ts => **{2,4} = search in level 2 bis level 4",
        "namespace": "js.glob",
        "since": "2.0.0",
        "filename": "expandGlob.ts",
        "extension": "ts",
        "relPath": "src/shared/glob/expandGlob.ts",
        "children": {}
    },
    "js.glob.extractGlob": {
        "name": "extractGlob",
        "type": "Function",
        "description": "This function simply return you the glob part of a passed string",
        "namespace": "js.glob",
        "since": "2.0.0",
        "filename": "extractGlob.ts",
        "extension": "ts",
        "relPath": "src/shared/glob/extractGlob.ts",
        "children": {}
    },
    "js.glob.extractNoneGlob": {
        "name": "extractNoneGlob",
        "type": "Function",
        "description": "This function simply return you the none glob part of a passed string",
        "namespace": "js.glob",
        "since": "2.0.0",
        "filename": "extractNoneGlob.ts",
        "extension": "ts",
        "relPath": "src/shared/glob/extractNoneGlob.ts",
        "children": {}
    },
    "js.html.replaceTags": {
        "name": "replaceTags",
        "type": "Function",
        "description": "Replace all the html tags that you specify by something else that you can fully choose",
        "namespace": "js.html",
        "since": "1.0.0",
        "filename": "replaceTags.ts",
        "extension": "ts",
        "relPath": "src/shared/html/replaceTags.ts",
        "children": {}
    },
    "js.html.striptags": {
        "name": "striptags",
        "type": "Function",
        "description": "Strip tags of an html string.\nThis is a simple wrapper of the nice \"striptags\" package that you can find here: https://www.npmjs.com/package/striptags",
        "namespace": "js.html",
        "since": "2.0.0",
        "filename": "striptags.ts",
        "extension": "ts",
        "relPath": "src/shared/html/striptags.ts",
        "children": {}
    },
    "js.is.isArray": {
        "name": "isArray",
        "type": "Function",
        "description": "Check if the passed value is a js Array",
        "namespace": "js.is",
        "since": "1.0.0",
        "filename": "array.ts",
        "extension": "ts",
        "relPath": "src/shared/is/array.ts",
        "children": {}
    },
    "js.is.isBase64": {
        "name": "isBase64",
        "type": "Function",
        "description": "Check if the passed value is a base 64 string",
        "namespace": "js.is",
        "since": "2.0.0",
        "filename": "base64.ts",
        "extension": "ts",
        "relPath": "src/shared/is/base64.ts",
        "children": {}
    },
    "js.is.isBoolean": {
        "name": "isBoolean",
        "type": "Function",
        "description": "Check if the passed value is a js Boolean",
        "namespace": "js.is",
        "since": "1.0.0",
        "filename": "boolean.ts",
        "extension": "ts",
        "relPath": "src/shared/is/boolean.ts",
        "children": {}
    },
    "js.is.isBrowser": {
        "name": "isBrowser",
        "type": "Function",
        "description": "Check if the script is running inside a browser or not",
        "namespace": "js.is",
        "since": "2.0.0",
        "filename": "browser.ts",
        "extension": "ts",
        "relPath": "src/shared/is/browser.ts",
        "children": {}
    },
    "js.is.class": {
        "name": "class",
        "type": "Function",
        "description": "Check if the passed variable (or array of variables) is/are plain variable(s)",
        "namespace": "js.is",
        "since": "2.0.0",
        "filename": "class.ts",
        "extension": "ts",
        "relPath": "src/shared/is/class.ts",
        "children": {}
    },
    "shared.is.isClassInstance": {
        "name": "isClassInstance",
        "type": "Function",
        "description": "Check if the passed item is an object class and not a plain object.",
        "namespace": "shared.is",
        "since": "2.0.0",
        "filename": "classInstance.ts",
        "extension": "ts",
        "relPath": "src/shared/is/classInstance.ts",
        "children": {}
    },
    "js.is.isColor": {
        "name": "isColor",
        "type": "Function",
        "description": "Check if the passed value is a color",
        "namespace": "js.is",
        "since": "2.0.0",
        "filename": "color.ts",
        "extension": "ts",
        "relPath": "src/shared/is/color.ts",
        "children": {}
    },
    "js.is.isDdmmyyyyDate": {
        "name": "isDdmmyyyyDate",
        "type": "Function",
        "description": "Check if is a valid dd.mm.yyyy date\nThis will match : dd.mm.yyyy | dd/mm/yyyy | dd-mm-yyyy | dd mm yyyy",
        "namespace": "js.is",
        "since": "2.0.0",
        "filename": "ddmmyyyyDate.ts",
        "extension": "ts",
        "relPath": "src/shared/is/ddmmyyyyDate.ts",
        "children": {}
    },
    "js.is.isEmail": {
        "name": "isEmail",
        "type": "Function",
        "description": "Check if the passed value is a valid email address",
        "namespace": "js.is",
        "since": "1.0.0",
        "filename": "email.ts",
        "extension": "ts",
        "relPath": "src/shared/is/email.ts",
        "children": {}
    },
    "js.is.isEven": {
        "name": "isEven",
        "type": "Function",
        "description": "Check if a number is even or not",
        "namespace": "js.is",
        "since": "1.0.0",
        "filename": "even.ts",
        "extension": "ts",
        "relPath": "src/shared/is/even.ts",
        "children": {}
    },
    "js.is.isFunction": {
        "name": "isFunction",
        "type": "Function",
        "description": "Check if the passed value is a js function",
        "namespace": "js.is",
        "since": "1.0.0",
        "filename": "function.ts",
        "extension": "ts",
        "relPath": "src/shared/is/function.ts",
        "children": {}
    },
    "js.is.isGlob": {
        "name": "isGlob",
        "type": "Function",
        "description": "Check if the passed string is a valid glob pattern or not",
        "namespace": "js.is",
        "since": "2.0.0",
        "filename": "glob.ts",
        "extension": "ts",
        "relPath": "src/shared/is/glob.ts",
        "children": {}
    },
    "js.is.isInteger": {
        "name": "isInteger",
        "type": "Function",
        "description": "Check if the passed value is an integer",
        "namespace": "js.is",
        "since": "1.0.0",
        "filename": "integer.ts",
        "extension": "ts",
        "relPath": "src/shared/is/integer.ts",
        "children": {}
    },
    "js.is.isJs": {
        "name": "isJs",
        "type": "Function",
        "description": "Check if the current script is running under javascript runtime or not...",
        "namespace": "js.is",
        "since": "1.0.0",
        "filename": "js.ts",
        "extension": "ts",
        "relPath": "src/shared/is/js.ts",
        "children": {}
    },
    "js.is.isJson": {
        "name": "isJson",
        "type": "Function",
        "description": "Check if the passed value is a valid json",
        "namespace": "js.is",
        "since": "1.0.0",
        "filename": "json.ts",
        "extension": "ts",
        "relPath": "src/shared/is/json.ts",
        "children": {}
    },
    "js.is.linux": {
        "name": "linux",
        "type": "Function",
        "description": "Check if the app run on linux",
        "namespace": "js.is",
        "since": "1.0.0",
        "filename": "linux.ts",
        "extension": "ts",
        "relPath": "src/shared/is/linux.ts",
        "children": {}
    },
    "js.is.isMap": {
        "name": "isMap",
        "type": "Function",
        "description": "Check if the passed value is a js Map",
        "namespace": "js.is",
        "since": "1.0.0",
        "filename": "map.ts",
        "extension": "ts",
        "relPath": "src/shared/is/map.ts",
        "children": {}
    },
    "js.is.isMmddyyyyDate": {
        "name": "isMmddyyyyDate",
        "type": "Function",
        "description": "Check if is a valid mm.dd.yyyy date\nThis will match : mm.dd.yyyy | mm/dd/yyyy | mm-dd-yyyy | mm dd yyyy",
        "namespace": "js.is",
        "since": "1.0.0",
        "filename": "mmddyyyyDate.ts",
        "extension": "ts",
        "relPath": "src/shared/is/mmddyyyyDate.ts",
        "children": {}
    },
    "js.is.isNode": {
        "name": "isNode",
        "type": "Function",
        "description": "Check if the current script is running under node runtime or not...",
        "namespace": "js.is",
        "since": "1.0.0",
        "filename": "node.ts",
        "extension": "ts",
        "relPath": "src/shared/is/node.ts",
        "children": {}
    },
    "js.is.isNumber": {
        "name": "isNumber",
        "type": "Function",
        "description": "Check if the passed value is a number",
        "namespace": "js.is",
        "since": "1.0.0",
        "filename": "number.ts",
        "extension": "ts",
        "relPath": "src/shared/is/number.ts",
        "children": {}
    },
    "js.is.isObject": {
        "name": "isObject",
        "type": "Function",
        "description": "Check if the passed value is a js object",
        "namespace": "js.is",
        "since": "1.0.0",
        "filename": "object.ts",
        "extension": "ts",
        "relPath": "src/shared/is/object.ts",
        "children": {}
    },
    "js.is.isOdd": {
        "name": "isOdd",
        "type": "Function",
        "description": "Check if a number is odd or not",
        "namespace": "js.is",
        "since": "1.0.0",
        "filename": "odd.ts",
        "extension": "ts",
        "relPath": "src/shared/is/odd.ts",
        "children": {}
    },
    "js.is.ofType": {
        "name": "ofType",
        "type": "Function",
        "description": "This function take the value to check and an argument type definition string like \"String\", \"Array<String>\", etc... and return true or false depending\nif the value pass the test or not...",
        "namespace": "js.is",
        "status": "beta",
        "since": "2.0.0",
        "filename": "ofType.ts",
        "extension": "ts",
        "relPath": "src/shared/is/ofType.ts",
        "children": {}
    },
    "js.is.osx": {
        "name": "osx",
        "type": "Function",
        "description": "Check if the app run on mac OS X or not",
        "namespace": "js.is",
        "since": "1.0.0",
        "filename": "osx.ts",
        "extension": "ts",
        "relPath": "src/shared/is/osx.ts",
        "children": {}
    },
    "node.is.path": {
        "name": "path",
        "type": "Function",
        "description": "Check if the passed string is a valid path or not",
        "namespace": "node.is",
        "since": "2.0.0",
        "filename": "path.ts",
        "extension": "ts",
        "relPath": "src/node/is/path.ts",
        "children": {}
    },
    "js.is.plainObject": {
        "name": "plainObject",
        "type": "Function",
        "description": "Check if the passed object (or array of objects) is/are plain object(s)",
        "namespace": "js.is",
        "since": "1.0.0",
        "filename": "plainObject.ts",
        "extension": "ts",
        "relPath": "src/shared/is/plainObject.ts",
        "children": {}
    },
    "js.is.isRegexp": {
        "name": "isRegexp",
        "type": "Function",
        "description": "Check if the passed value is a js Regexp",
        "namespace": "js.is",
        "since": "1.0.0",
        "filename": "regexp.ts",
        "extension": "ts",
        "relPath": "src/shared/is/regexp.ts",
        "children": {}
    },
    "js.is.isString": {
        "name": "isString",
        "type": "Function",
        "description": "Check if the passed value is a js String",
        "namespace": "js.is",
        "since": "1.0.0",
        "filename": "string.ts",
        "extension": "ts",
        "relPath": "src/shared/is/string.ts",
        "children": {}
    },
    "js.is.isTerminal": {
        "name": "isTerminal",
        "type": "Function",
        "description": "This function simply returns if the process runs inside a terminal or not",
        "namespace": "js.is",
        "since": "2.0.0",
        "filename": "terminal.ts",
        "extension": "ts",
        "relPath": "src/shared/is/terminal.ts",
        "children": {}
    },
    "js.is.testEnv": {
        "name": "testEnv",
        "type": "Function",
        "description": "Check if the current environment is in a test process or not",
        "namespace": "js.is",
        "since": "2.0.0",
        "filename": "testEnv.ts",
        "extension": "ts",
        "relPath": "src/shared/is/testEnv.ts",
        "children": {}
    },
    "js.is.isUrl": {
        "name": "isUrl",
        "type": "Function",
        "description": "Check if the passed value is a valid url",
        "namespace": "js.is",
        "status": "beta",
        "since": "2.0.0",
        "filename": "url.ts",
        "extension": "ts",
        "relPath": "src/shared/is/url.ts",
        "children": {}
    },
    "js.is.windows": {
        "name": "windows",
        "type": "Function",
        "description": "Check if the app run on mac OS X or not",
        "namespace": "js.is",
        "since": "1.0.0",
        "filename": "windows.ts",
        "extension": "ts",
        "relPath": "src/shared/is/windows.ts",
        "children": {}
    },
    "js.is.isYyyymmddDate": {
        "name": "isYyyymmddDate",
        "type": "Function",
        "description": "Check if is a valid yyyy.mm.dd date\nThis will match : yyyy.mm.dd | yyyy/mm/dd | yyyy-mm-dd | yyyy mm dd",
        "namespace": "js.is",
        "since": "1.0.0",
        "filename": "yyyymmddDate.ts",
        "extension": "ts",
        "relPath": "src/shared/is/yyyymmddDate.ts",
        "children": {}
    },
    "js.iterable.map": {
        "name": "map",
        "type": "Function",
        "description": "This function take an iterable value like an Array, an Object, a Map, a String, an Integer, a Set, etc... and\nsimply iterate over like a forEach.",
        "namespace": "js.iterable",
        "since": "2.0.0",
        "filename": "map.ts",
        "extension": "ts",
        "relPath": "src/shared/iterable/map.ts",
        "children": {}
    },
    "js.json.stringify": {
        "name": "stringify",
        "type": "Function",
        "description": "This function do the same as the ```JSON.stringify``` one but add some features.",
        "namespace": "js.json",
        "status": "beta",
        "since": "2.0.0",
        "filename": "stringify.ts",
        "extension": "ts",
        "relPath": "src/shared/json/stringify.ts",
        "children": {}
    },
    "js.map.mapToObject": {
        "name": "mapToObject",
        "type": "Function",
        "description": "This function simply take a Map object and convert it to a plain object",
        "namespace": "js.map",
        "since": "2.0.0",
        "filename": "mapToObject.ts",
        "extension": "ts",
        "relPath": "src/shared/map/mapToObject.ts",
        "children": {}
    },
    "js.number.constrain": {
        "name": "constrain",
        "type": "Function",
        "description": "Constrain a value between a min and a max value",
        "namespace": "js.number",
        "since": "1.0.0",
        "filename": "constrain.ts",
        "extension": "ts",
        "relPath": "src/shared/number/constrain.ts",
        "children": {}
    },
    "js.number.pad": {
        "name": "pad",
        "type": "Function",
        "description": "Pad a number n of x 0 or another passed character",
        "namespace": "js.number",
        "since": "1.0.0",
        "filename": "pad.ts",
        "extension": "ts",
        "relPath": "src/shared/number/pad.ts",
        "children": {}
    },
    "js.object.SWatch": {
        "name": "SWatch",
        "type": "Class",
        "description": "This class allows you to easily monitor some object properties and get the new and old value of it",
        "namespace": "js.object",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SWatch.ts",
        "extension": "ts",
        "relPath": "src/shared/object/SWatch.ts",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            }
        }
    },
    "js.object.clone": {
        "name": "clone",
        "type": "Function",
        "description": "This function allows you to clone an object either at 1 level, or deeply.",
        "namespace": "js.object",
        "since": "1.0.0",
        "filename": "clone.ts",
        "extension": "ts",
        "relPath": "src/shared/object/clone.ts",
        "children": {}
    },
    "js.object.constructorName": {
        "name": "constructorName",
        "type": "Function",
        "description": "Return the constructor name of the passed object",
        "namespace": "js.object",
        "since": "1.0.0",
        "filename": "constructorName.ts",
        "extension": "ts",
        "relPath": "src/shared/object/constructorName.ts",
        "children": {}
    },
    "js.object.decycle": {
        "name": "decycle",
        "type": "Function",
        "description": "This method simply remove the circular references in the passed object",
        "namespace": "js.object",
        "since": "2.0.0",
        "filename": "decycle.ts",
        "extension": "ts",
        "relPath": "src/shared/object/decycle.ts",
        "children": {}
    },
    "js.object.deepAssign": {
        "name": "deepAssign",
        "type": "Function",
        "description": "This function take as first parameter the object you want to assign others to,\nthen others objects you want to assign to the first.\nThe difference with the ```deepMerge``` function is that this one keep the first\npassed object as reference and update it directly. The ```deepMerge``` one create a new\nobject with the merging result",
        "namespace": "js.object",
        "since": "2.0.0",
        "filename": "deepAssign.ts",
        "extension": "ts",
        "relPath": "src/shared/object/deepAssign.ts",
        "children": {}
    },
    "js.object.deepMap": {
        "name": "deepMap",
        "type": "Function",
        "description": "This function is the same as the \"map\" one. The only difference is that this one goes deep into the object",
        "namespace": "js.object",
        "since": "2.0.0",
        "filename": "deepMap.ts",
        "extension": "ts",
        "relPath": "src/shared/object/deepMap.ts",
        "children": {}
    },
    "js.object.deepMerge": {
        "name": "deepMerge",
        "type": "Function",
        "description": "Deep merge one object with another and return the merged object result. This merging implementation support:\n- Merging object with getters/setters\n- n numbers of objects as arguments",
        "namespace": "js.object",
        "since": "2.0.0",
        "filename": "deepMerge.ts",
        "extension": "ts",
        "relPath": "src/shared/object/deepMerge.ts",
        "children": {}
    },
    "js.object.deepProxy": {
        "name": "deepProxy",
        "type": "Function",
        "description": "This function allows you to add Proxy to an object in deep fashion.\nNormally the Proxy process only the level on which it has been added. Here we add Proxy to all the\nobject levels and to new properties as well.\n\nOn the returned proxied object, you will have access to the ```revoke``` method that you can call to revoke the proxy applied.\nThis method will return you a shallow version of the proxied object that you can use as you want",
        "namespace": "js.object",
        "status": "wip",
        "since": "2.0.0",
        "filename": "deepProxy.ts",
        "extension": "ts",
        "relPath": "src/shared/object/deepProxy.ts",
        "children": {}
    },
    "js.object.deepize": {
        "name": "deepize",
        "type": "Function",
        "description": "This function simply take an object like this one:\n{\n'something.cool': 'hello'\n}\nand convert it to something like this:\n{\nsomething: {\ncool: 'hello'\n}\n}",
        "namespace": "js.object",
        "since": "2.0.0",
        "filename": "deepize.ts",
        "extension": "ts",
        "relPath": "src/shared/object/deepize.ts",
        "children": {}
    },
    "js.object.delete": {
        "name": "delete",
        "type": "Function",
        "description": "Delete an object property using a dotPath like \"something.else\"",
        "namespace": "js.object",
        "since": "2.0.0",
        "filename": "delete.ts",
        "extension": "ts",
        "relPath": "src/shared/object/delete.ts",
        "children": {}
    },
    "js.object.diff": {
        "name": "diff",
        "type": "Function",
        "description": "This function take two objects and return an object that contains only what has been changed between the two.\nThis function is a simple wrapper around the nice object-diff package from Thomas Jensen that you can find here: https://www.npmjs.com/package/object-diff",
        "namespace": "js.object",
        "status": "beta",
        "since": "2.0.0",
        "filename": "diff.ts",
        "extension": "ts",
        "relPath": "src/shared/object/diff.ts",
        "children": {}
    },
    "js.object.ensureExists": {
        "name": "ensureExists",
        "type": "Function",
        "description": "Pass a string like \"my.cool.object\" and the value it has to be and this function will ensure that this deep object exist",
        "namespace": "js.object",
        "since": "2.0.0",
        "filename": "ensureExists.ts",
        "extension": "ts",
        "relPath": "src/shared/object/ensureExists.ts",
        "children": {}
    },
    "js.object.extractValues": {
        "name": "extractValues",
        "type": "Function",
        "description": "This function take an array of objects and a key name as parameters and return an array containing\nonly the specified object key value.",
        "namespace": "js.object",
        "since": "2.0.0",
        "filename": "extractValues.ts",
        "extension": "ts",
        "relPath": "src/shared/object/extractValues.ts",
        "children": {}
    },
    "js.object.filter": {
        "name": "filter",
        "type": "Function",
        "description": "Allow to filter an object using a function. It works the same as the filter method on the Array object type.\nThe passed filter function will have as parameter each object properties and must return true or false depending if you want the\npassed property in the filtered object",
        "namespace": "js.object",
        "since": "2.0.0",
        "filename": "filter.ts",
        "extension": "ts",
        "relPath": "src/shared/object/filter.ts",
        "children": {}
    },
    "js.object.flatten": {
        "name": "flatten",
        "type": "Function",
        "description": "Transform the passed multiple level object into a single level one",
        "namespace": "js.object",
        "since": "2.0.0",
        "filename": "flatten.ts",
        "extension": "ts",
        "relPath": "src/shared/object/flatten.ts",
        "children": {}
    },
    "js.object.get": {
        "name": "get",
        "type": "Function",
        "description": "Retreive an object value using a dotted path like \"myObject.myProperty.myValue\"",
        "namespace": "js.object",
        "since": "2.0.0",
        "filename": "get.ts",
        "extension": "ts",
        "relPath": "src/shared/object/get.ts",
        "children": {}
    },
    "js.object.getGlob": {
        "name": "getGlob",
        "type": "Function",
        "description": "Retreive an object value using a dotted path like \"myObject.myProperty.myValue\".\nIt support glob patterns like \"something..id\" and returns you a new object containing\nall values with the path that matches the passed glob pattern.",
        "namespace": "js.object",
        "since": "2.0.0",
        "filename": "getGlob.ts",
        "extension": "ts",
        "relPath": "src/shared/object/getGlob.ts",
        "children": {}
    },
    "js.object.getKeyByValue": {
        "name": "getKeyByValue",
        "type": "Function",
        "description": "Return the key that correspond to the passed value in the passed object",
        "namespace": "js.object",
        "since": "2.0.0",
        "filename": "getKeyByValue.ts",
        "extension": "ts",
        "relPath": "src/shared/object/getKeyByValue.ts",
        "children": {}
    },
    "js.object.map": {
        "name": "map",
        "type": "Function",
        "description": "This is the same function as the \"Array.map\" but for objects. It will iterate over all the properties\nof the passed object and pass the value to your process function. It will then save the property\nwith your processed value",
        "namespace": "js.object",
        "since": "2.0.0",
        "filename": "map.ts",
        "extension": "ts",
        "relPath": "src/shared/object/map.ts",
        "children": {}
    },
    "js.object.propertyProxy": {
        "name": "propertyProxy",
        "type": "Function",
        "description": "Create a proxy for and object property.\nThis gives you the possibility to process the data of the property\nwhen it is getted or setted.",
        "namespace": "js.object",
        "status": "beta",
        "since": "2.0.0",
        "filename": "propertyProxy.ts",
        "extension": "ts",
        "relPath": "src/shared/object/propertyProxy.ts",
        "children": {}
    },
    "js.object.resolveTokens": {
        "name": "resolveTokens",
        "type": "Function",
        "description": "This function take an object and propare it to accept tokens like:\n- '{this.something.else}'\n- etc...",
        "namespace": "js.object",
        "status": "wip",
        "since": "2.0.0",
        "filename": "resolveTokens.ts",
        "extension": "ts",
        "relPath": "src/shared/object/resolveTokens.ts",
        "children": {}
    },
    "js.object.set": {
        "name": "set",
        "type": "Function",
        "description": "Set an object value using a dotted object path like \"myObject.myProperty.myValue\" to set his position",
        "namespace": "js.object",
        "since": "2.0.0",
        "filename": "set.ts",
        "extension": "ts",
        "relPath": "src/shared/object/set.ts",
        "children": {}
    },
    "js.object.sort": {
        "name": "sort",
        "type": "Function",
        "description": "Sort an object properties the same way as the Array.sort do it",
        "namespace": "js.object",
        "since": "2.0.0",
        "filename": "sort.ts",
        "extension": "ts",
        "relPath": "src/shared/object/sort.ts",
        "children": {}
    },
    "shared.object.toJson": {
        "name": "toJson",
        "type": "Function",
        "description": "Convert class instances to plain JSON object",
        "namespace": "shared.object",
        "since": "2.0.0",
        "filename": "toJson.ts",
        "extension": "ts",
        "relPath": "src/shared/object/toJson.ts",
        "children": {}
    },
    "js.object.toQueryString": {
        "name": "toQueryString",
        "type": "Function",
        "description": "Transform an object (key => pairs) to a query string like \"?var1=value1&var2\"",
        "namespace": "js.object",
        "since": "2.0.0",
        "filename": "toQueryString.ts",
        "extension": "ts",
        "relPath": "src/shared/object/toQueryString.ts",
        "children": {}
    },
    "node.object.uid": {
        "name": "uid",
        "type": "Function",
        "description": "This function allows you to generate a uniqid based on the objects you pass as parameters.\nThe uid is hashed into a SHA256 32bits string but you can specify it using the \"format\" parameter described above",
        "namespace": "node.object",
        "since": "2.0.0",
        "filename": "uid.ts",
        "extension": "ts",
        "relPath": "src/shared/object/uid.ts",
        "children": {}
    },
    "js.object.watch": {
        "name": "watch",
        "type": "Function",
        "description": "This method is a simple wrapper around the SWatch class that allows you to watch some action on object and arrays",
        "namespace": "js.object",
        "status": "wip",
        "since": "2.0.0",
        "filename": "watch.ts",
        "extension": "ts",
        "relPath": "src/shared/object/watch.ts",
        "children": {}
    },
    "js.path.packageRoot": {
        "name": "packageRoot",
        "type": "Function",
        "description": "This function return the path where stands the package in the filesystem.\n!!! This function works only in development mode cause it will be dangerous to\nexpose this kind on information on a website...\nIf the environment is not the good one, this function will simply return an empty string",
        "namespace": "js.path",
        "status": "beta",
        "since": "2.0.0",
        "filename": "packageRoot.ts",
        "extension": "ts",
        "relPath": "src/shared/path/packageRoot.ts",
        "children": {}
    },
    "js.string.autoCast": {
        "name": "autoCast",
        "type": "Function",
        "description": "Auto cast the string into the correct variable type",
        "namespace": "js.string",
        "since": "2.0.0",
        "filename": "autoCast.ts",
        "extension": "ts",
        "relPath": "src/shared/string/autoCast.ts",
        "children": {}
    },
    "js.string.camelize": {
        "name": "camelize",
        "type": "Function",
        "description": "Camelize a string",
        "namespace": "js.string",
        "since": "2.0.0",
        "filename": "camelize.ts",
        "extension": "ts",
        "relPath": "src/shared/string/camelize.ts",
        "children": {}
    },
    "js.string.countLine": {
        "name": "countLine",
        "type": "Function",
        "description": "Count how many characters their is in the passed line.\nThis function will exclude the characters like the html tags like <red>, etc...",
        "namespace": "js.string",
        "since": "2.0.0",
        "filename": "countLine.ts",
        "extension": "ts",
        "relPath": "src/shared/string/countLine.ts",
        "children": {}
    },
    "js.string.crop": {
        "name": "crop",
        "type": "Function",
        "description": "Allows you to crop a string at a certain length (this length take care of the croping characters like \"...\")",
        "namespace": "js.string",
        "since": "2.0.0",
        "filename": "crop.ts",
        "extension": "ts",
        "relPath": "src/shared/string/crop.ts",
        "children": {}
    },
    "js.string.dedupe": {
        "name": "dedupe",
        "type": "Function",
        "description": "This function simple make sure that you don't have duplicate statements in the passed string",
        "namespace": "js.string",
        "since": "2.0.0",
        "filename": "dedupe.ts",
        "extension": "ts",
        "relPath": "src/shared/string/dedupe.ts",
        "children": {}
    },
    "js.string.extractSame": {
        "name": "extractSame",
        "type": "Function",
        "description": "This function return you what has been find the same in the two passed string.\nIt will return you either an array of same string parts or a simple string\nrepresenting the first same part found.",
        "namespace": "js.string",
        "since": "2.0.0",
        "filename": "extractSame.ts",
        "extension": "ts",
        "relPath": "src/shared/string/extractSame.ts",
        "children": {}
    },
    "js.string.includes": {
        "name": "includes",
        "type": "Function",
        "description": "Same as the native String.includes function but accept either an array of items\nor a simple comma separated string like \"something,cool,hello,world\"",
        "namespace": "js.string",
        "since": "2.0.0",
        "filename": "includes.ts",
        "extension": "ts",
        "relPath": "src/shared/string/includes.ts",
        "children": {}
    },
    "js.string.lowerFirst": {
        "name": "lowerFirst",
        "type": "Function",
        "description": "Lower first letter",
        "namespace": "js.string",
        "since": "2.0.0",
        "filename": "lowerFirst.ts",
        "extension": "ts",
        "relPath": "src/shared/string/lowerFirst.ts",
        "children": {}
    },
    "js.string.ltrim": {
        "name": "ltrim",
        "type": "Function",
        "description": "Trim left a specified string",
        "namespace": "js.string",
        "since": "2.0.0",
        "filename": "ltrim.ts",
        "extension": "ts",
        "relPath": "src/shared/string/ltrim.ts",
        "children": {}
    },
    "js.string.paramCase": {
        "name": "paramCase",
        "type": "Function",
        "description": "This function transform a string into a param case one like so \"something-cool\"",
        "namespace": "js.string",
        "since": "2.0.0",
        "filename": "paramCase.ts",
        "extension": "ts",
        "relPath": "src/shared/string/paramCase.ts",
        "children": {}
    },
    "js.string.parse": {
        "name": "parse",
        "type": "Function",
        "description": "Parse a string and convert it into his native data type like date, number, boolean, etc...",
        "namespace": "js.string",
        "since": "2.0.0",
        "filename": "parse.ts",
        "extension": "ts",
        "relPath": "src/shared/string/parse.ts",
        "children": {}
    },
    "js.string.printf": {
        "name": "printf",
        "type": "Function",
        "description": "printf php equavalent",
        "namespace": "js.string",
        "since": "2.0.0",
        "filename": "printf.ts",
        "extension": "ts",
        "relPath": "src/shared/string/printf.ts",
        "children": {}
    },
    "js.string.replaceTokens": {
        "name": "replaceTokens",
        "type": "Function",
        "description": "This function takes as parameter a tokened string like \"something [cool]\", an object\nof arguments/values and return the processed string with the tokens replaced by the arguments values.",
        "namespace": "js.string",
        "since": "2.0.0",
        "filename": "replaceTokens.ts",
        "extension": "ts",
        "relPath": "src/shared/string/replaceTokens.ts",
        "children": {}
    },
    "js.string.rtrim": {
        "name": "rtrim",
        "type": "Function",
        "description": "Trim right a specified string",
        "namespace": "js.string",
        "since": "2.0.0",
        "filename": "rtrim.ts",
        "extension": "ts",
        "relPath": "src/shared/string/rtrim.ts",
        "children": {}
    },
    "js.string.simply": {
        "name": "simply",
        "type": "Function",
        "description": "This function take a string with accents, etc and convert it to a more simply\nversion like \"éàddö\" to \"eaddo\"",
        "namespace": "js.string",
        "since": "2.0.0",
        "filename": "simplify.ts",
        "extension": "ts",
        "relPath": "src/shared/string/simplify.ts",
        "children": {}
    },
    "js.string.splitEvery": {
        "name": "splitEvery",
        "type": "Function",
        "description": "Split a string every n chars either by taking care of not spliting the words, or by simply spliting without any attention to that...",
        "namespace": "js.string",
        "since": "2.0.0",
        "filename": "splitEvery.ts",
        "extension": "ts",
        "relPath": "src/shared/string/splitEvery.ts",
        "children": {}
    },
    "js.string.sprintf": {
        "name": "sprintf",
        "type": "Function",
        "description": "Javascript implementation of the sprintf php function.\n>For more infos, check [this github repository](https://github.com/alexei/sprintf.js)",
        "namespace": "js.string",
        "since": "2.0.0",
        "filename": "sprintf.ts",
        "extension": "ts",
        "relPath": "src/shared/string/sprintf.ts",
        "children": {}
    },
    "js.string.stripAnsi": {
        "name": "stripAnsi",
        "type": "Function",
        "description": "This function simply strip all the ansi characters in a string",
        "namespace": "js.string",
        "since": "2.0.0",
        "filename": "stripAnsi.ts",
        "extension": "ts",
        "relPath": "src/shared/string/stripAnsi.ts",
        "children": {}
    },
    "js.string.toString": {
        "name": "toString",
        "type": "Function",
        "description": "Convert passed value to a string",
        "namespace": "js.string",
        "since": "2.0.0",
        "filename": "toString.ts",
        "extension": "ts",
        "relPath": "src/shared/string/toString.ts",
        "children": {}
    },
    "js.string.trimLines": {
        "name": "trimLines",
        "type": "Function",
        "description": "This function take a string and trim each lines",
        "namespace": "js.string",
        "since": "2.0.0",
        "filename": "trimLines.ts",
        "extension": "ts",
        "relPath": "src/shared/string/trimLines.ts",
        "children": {}
    },
    "js.string.uncamelize": {
        "name": "uncamelize",
        "type": "Function",
        "description": "Uncamelize a string",
        "namespace": "js.string",
        "since": "2.0.0",
        "filename": "uncamelize.ts",
        "extension": "ts",
        "relPath": "src/shared/string/uncamelize.ts",
        "children": {}
    },
    "js.string.uniqid": {
        "name": "uniqid",
        "type": "Function",
        "description": "Generate a uniqid string of 8 bytes. Work using the [uniqid](https://www.npmjs.com/package/uniqid) npm package under the hood.",
        "namespace": "js.string",
        "since": "2.0.0",
        "filename": "uniqid.ts",
        "extension": "ts",
        "relPath": "src/shared/string/uniqid.ts",
        "children": {}
    },
    "js.string.unquote": {
        "name": "unquote",
        "type": "Function",
        "description": "Remove the quotes of a string\nTypes of quotes removed :\n- `\"`, `'`, `”`, '`'",
        "namespace": "js.string",
        "since": "2.0.0",
        "filename": "unquote.ts",
        "extension": "ts",
        "relPath": "src/shared/string/unquote.ts",
        "children": {}
    },
    "js.string.upperFirst": {
        "name": "upperFirst",
        "type": "Function",
        "description": "Upper first",
        "namespace": "js.string",
        "since": "2.0.0",
        "filename": "upperFirst.ts",
        "extension": "ts",
        "relPath": "src/shared/string/upperFirst.ts",
        "children": {}
    },
    "node.sugar.sanitizeSugarJson": {
        "name": "sanitizeSugarJson",
        "type": "Function",
        "description": "This function allows you to sanitize a sugarJson JSON to be sure you'll get\nthe same structure everytime",
        "namespace": "node.sugar",
        "since": "2.0.0",
        "filename": "sanitizeSugarJson.ts",
        "extension": "ts",
        "relPath": "src/shared/sugar/sanitizeSugarJson.ts",
        "children": {}
    },
    "js.time.convert": {
        "name": "convert",
        "type": "Function",
        "description": "This function allows you to convert time like seconds, ms, hours, minutes, etc... from one format to another",
        "namespace": "js.time",
        "since": "2.0.0",
        "filename": "convert.ts",
        "extension": "ts",
        "relPath": "src/shared/time/convert.ts",
        "children": {}
    },
    "js.time.wait": {
        "name": "wait",
        "type": "Function",
        "description": "This function is a simple \"setTimeout\" wrapper inside a promise.",
        "namespace": "js.time",
        "since": "2.0.0",
        "filename": "wait.ts",
        "extension": "ts",
        "relPath": "src/shared/time/wait.ts",
        "children": {}
    },
    "js.unit.convert": {
        "name": "convert",
        "type": "Function",
        "description": "Convert a passed unit to the wanted one. If the passed unit is a number and not a string like \"10rem\", the unit is take as pixels",
        "namespace": "js.unit",
        "since": "2.0.0",
        "filename": "convert.ts",
        "extension": "ts",
        "relPath": "src/shared/unit/convert.ts",
        "children": {}
    },
    "js.unit.em2px": {
        "name": "em2px",
        "type": "Function",
        "description": "Convert rem value to a px one",
        "namespace": "js.unit",
        "since": "2.0.0",
        "filename": "em2px.ts",
        "extension": "ts",
        "relPath": "src/shared/unit/em2px.ts",
        "children": {}
    },
    "js.unit.px2em": {
        "name": "px2em",
        "type": "Function",
        "description": "Convert rem value to a px one",
        "namespace": "js.unit",
        "since": "2.0.0",
        "filename": "px2em.ts",
        "extension": "ts",
        "relPath": "src/shared/unit/px2em.ts",
        "children": {}
    },
    "js.unit.px2rem": {
        "name": "px2rem",
        "type": "Function",
        "description": "Convert rem value to a px one",
        "namespace": "js.unit",
        "since": "2.0.0",
        "filename": "px2rem.ts",
        "extension": "ts",
        "relPath": "src/shared/unit/px2rem.ts",
        "children": {}
    },
    "js.unit.rem2px": {
        "name": "rem2px",
        "type": "Function",
        "description": "Convert rem value to a px one",
        "namespace": "js.unit",
        "since": "2.0.0",
        "filename": "rem2px.ts",
        "extension": "ts",
        "relPath": "src/shared/unit/rem2px.ts",
        "children": {}
    },
    "js.url.SUrl": {
        "name": "SUrl",
        "type": "Class",
        "description": "Simple class that is useful to parse a URL (or the current browser URL) and gives you back\nan instance that has all these values availables as well as functions to modify the instancied URL:\n- protocol: The protocol scheme of the URL (e.g. http:).\n- slashes: A boolean which indicates whether the protocol is followed by two forward slashes (//).\n- auth: Authentication information portion (e.g. username:password).\n- username: Username of basic authentication.\n- password: Password of basic authentication.\n- host: Host name with port number.\n- hostname: Host name without port number.\n- port: Optional port number.\n- pathname: URL path.\n- query: Parsed object containing query string\n- queryString: Origin query string from the URL\n- hash: The \"fragment\" portion of the URL including the pound-sign (#).\n- href: The full URL.\n- origin: The origin of the URL.\n- schema: The schema property gives you access to an object containing these properties (only if you have provided the settings.schema setting):\n- match (true) {Boolean}: Tells you if your current url match the passed schema\n- errors (null) {Object}: Gives you access to which param(s) is/are in error\n- params (null) {Object}: Gives you access to each params specified in the schema with their values, etc...\n\nThis class use internally the `url-parse` npm module that you can find here: https://www.npmjs.com/package/url-parse",
        "namespace": "js.url",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SUrl.js",
        "extension": "js",
        "relPath": "src/shared/url/SUrl.js",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "schema": {
                "name": "schema",
                "type": "Object",
                "description": "Access the schema parsing result if the settings.schema has been provided.\nThis object contain these properties:\n- params ({}) {Object}: Store the path params found like /{client}/{name}\n- errors ({}) {Object}: Store the parsing errors if has some\n- match (true) {Boolean}: Store if the current url match with the provided schema"
            },
            "protocol": {
                "name": "protocol",
                "type": "String",
                "description": "Get/set the protocol"
            },
            "slashes": {
                "name": "slashes",
                "type": "Boolean",
                "description": "A boolean which indicates whether the protocol is followed by two forward slashes (//)."
            },
            "auth": {
                "name": "auth",
                "type": "String",
                "description": "Authentication information portion (e.g. username:password)."
            },
            "username": {
                "name": "username",
                "type": "String",
                "description": "Get/set username of basic authentication"
            },
            "password": {
                "name": "password",
                "type": "String",
                "description": "Get/set password of basic authentication"
            },
            "host": {
                "name": "host",
                "type": "String",
                "description": "Get/set Host name with port number"
            },
            "hostname": {
                "name": "hostname",
                "type": "String",
                "description": "Get/set host name without port number"
            },
            "port": {
                "name": "port",
                "type": "Number",
                "description": "Optional port number"
            },
            "pathname": {
                "name": "pathname",
                "type": "String",
                "description": "URL path"
            },
            "pathnameArray": {
                "name": "pathnameArray",
                "type": "Array",
                "description": "URL path in array format"
            },
            "query": {
                "name": "query",
                "type": "String",
                "description": "Parsed object containing query string"
            },
            "queryString": {
                "name": "queryString",
                "type": "String",
                "description": "Origin query string from the URL"
            },
            "hash": {
                "name": "hash",
                "type": "String",
                "description": "The \"fragment\" portion of the URL including the pound-sign (#)"
            },
            "href": {
                "name": "href",
                "type": "String",
                "description": "The full URL"
            },
            "origin": {
                "name": "origin",
                "type": "String",
                "description": "The origin of the URL"
            },
            "toString": {
                "name": "toString",
                "type": "Function",
                "description": "Return the full URL in string format"
            }
        }
    },
    "js.url.gravatarUrl": {
        "name": "gravatarUrl",
        "type": "Function",
        "description": "Return a gravatar url depending on the passed user email and size",
        "namespace": "js.url",
        "since": "2.0.0",
        "filename": "gravatarUrl.ts",
        "extension": "ts",
        "relPath": "src/shared/url/gravatarUrl.ts",
        "children": {}
    },
    "js.url.parseSchema": {
        "name": "parseSchema",
        "type": "Function",
        "description": "This function take two arguments. The first one is the url to parse and the second is a schema to scan the url with.\nThe schema describe the pathname of an url and tell's how to analyze it.\nHere's a little description with some example of schemas:\n- \"{param1}/{param2}/{param3}\": This schema describe that your Url must have 3 \"values\" named param1, param2 and param3\n- If my Url is \"something.com/hello/world/plop\", my schema is respected and I can have access to the values through the \"schema.params.param1\", \"schema.params.param2\", etc...\n- \"{hello:string}/{world:number}/{?idx:number}\": This schema describe that the Url can have 3 \"values\" but the last one is optional\n- If my Url is \"something.com/plop/3/1\", my schema is respected\n- If my Url is \"something.com/plop/2\", my schema is respected\n- If my Url is \"something.com/plop/hello/2\", my schema is not respected due to the fact that the param named \"world\" has to be a number",
        "namespace": "js.url",
        "status": "wip",
        "since": "2.0.0",
        "filename": "parseSchema.ts",
        "extension": "ts",
        "relPath": "src/shared/url/parseSchema.ts",
        "children": {}
    },
    "js.url.queryStringToObject": {
        "name": "queryStringToObject",
        "type": "Function",
        "description": "Transform a query string into his object (key => pairs) representation",
        "namespace": "js.url",
        "since": "2.0.0",
        "filename": "queryStringToObject.ts",
        "extension": "ts",
        "relPath": "src/shared/url/queryStringToObject.ts",
        "children": {}
    },
    "js.value.typeDefinitionArrayObjectToString": {
        "name": "typeDefinitionArrayObjectToString",
        "type": "Function",
        "description": "This function take as parameter a type definition object like this one:\n{\ntype: [{\ntype: 'Array',\nof: [{\ntype: 'Boolean'\n}]\n}]\n}\nan transform it to a string like so \"Array<Boolean>\"",
        "namespace": "js.value",
        "status": "beta",
        "since": "2.0.0",
        "filename": "typeDefinitionArrayObjectToString.ts",
        "extension": "ts",
        "relPath": "src/shared/value/typeDefinitionArrayObjectToString.ts",
        "children": {}
    },
    "js.value.typeof": {
        "name": "typeof",
        "type": "Function",
        "description": "This function return the correct type of the passed value.\nIt support the recognition of arrays and return 'Array' as property type.\nYou can olso ask the function to gives you the \"of\" types of the passed value. This mean that if you\npass an Array like so \"[10,'Hello',true]\" and that you ask for \"of\" types, it will returns you\n\"Array<Integer|String|Boolean>\".\nAnother feature is to ask the result as an object like so:\n{\ntype: 'Array',\nof: ['Integer','String','Boolean']\n}\nYou can ask also the typeof function to returns you the actual class name if the passed value is an instance\nof an custom class.",
        "namespace": "js.value",
        "status": "beta",
        "since": "2.0.0",
        "filename": "typeof.ts",
        "extension": "ts",
        "relPath": "src/shared/value/typeof.ts",
        "children": {}
    },
    "js.npm.parseAuthorString": {
        "name": "parseAuthorString",
        "type": "Function",
        "description": "This function simply take an author string like \"Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\" and\ntransform it into a plain object with these properties: name, email and url",
        "namespace": "js.npm",
        "since": "2.0.0",
        "filename": "parseAuthorString.ts",
        "extension": "ts",
        "relPath": "src/shared/npm/utils/parseAuthorString.ts",
        "children": {}
    },
    "js.npm.standardizeJson": {
        "name": "standardizeJson",
        "type": "Function",
        "description": "This function simply take a package.json JSON formatted object and standardize\nsome fields like the \"author\" one to be sure it is an object at the end,\nthe \"contributors\" array the same way as the \"author\" one, etc... Here's the list\nof processed actions:\n1. Transform the string version of the \"author\" field into an object with the properties \"name\", \"email\" and \"url\"\n2. Transform the string version of the \"contributors\" field into an object with the properties \"name\", \"email\" and \"url\"",
        "namespace": "js.npm",
        "status": "beta",
        "since": "2.0.0",
        "filename": "standardizeJson.ts",
        "extension": "ts",
        "relPath": "src/shared/npm/utils/standardizeJson.ts",
        "children": {}
    },
    "shared.dev.colors.availableColors": {
        "name": "availableColors",
        "type": "Function",
        "description": "Return the list of color names you can access using the ```colorValue``` function.\nThese colors are specified in the config.terminal configuration file under the \"colors\" property.",
        "namespace": "shared.dev.colors",
        "since": "2.0.0",
        "filename": "availableColors.ts",
        "extension": "ts",
        "relPath": "src/shared/dev/color/availableColors.ts",
        "children": {}
    },
    "shared.dev.colors.colorValue": {
        "name": "colorValue",
        "type": "Function",
        "description": "Return the list of color names you can access using the ```getColor``` function.\nThese colors are specified in the config.terminal configuration file under the \"colors\" property.",
        "namespace": "shared.dev.colors",
        "since": "2.0.0",
        "filename": "colorValue.ts",
        "extension": "ts",
        "relPath": "src/shared/dev/color/colorValue.ts",
        "children": {}
    },
    "shared.dev.color.getColorFor": {
        "name": "getColorFor",
        "type": "Function",
        "description": "This function let you pass anything like an object, a string, etc... and get the same\ncolor back everytime you pass the same value.\nThis if usefull for output logs, etc...",
        "namespace": "shared.dev.color",
        "since": "2.0.0",
        "filename": "getColorFor.ts",
        "extension": "ts",
        "relPath": "src/shared/dev/color/getColorFor.ts",
        "children": {}
    },
    "shared.dev.types.dataTypesArray": {
        "name": "dataTypesArray",
        "type": "Array",
        "description": "This is just a list of data types available in the\ncurrent language (node/js)",
        "namespace": "shared.dev.types",
        "status": "wip",
        "since": "2.0.0",
        "filename": "dataTypesArray.ts",
        "extension": "ts",
        "relPath": "src/shared/dev/types/dataTypesArray.ts",
        "children": {}
    },
    "js.console.html.tagsMap": {
        "name": "tagsMap",
        "type": "Object",
        "description": "Store the tag->function map used in ```parseHtml``` function for example",
        "namespace": "js.console.html",
        "since": "2.0.0",
        "filename": "tagsMap.ts",
        "extension": "ts",
        "relPath": "src/shared/console/html/tagsMap.ts",
        "children": {}
    },
    "js.class.utils.functionToClass": {
        "name": "functionToClass",
        "type": "Function",
        "description": "Transform ES5 Functions to ES6 Classes",
        "namespace": "js.class.utils",
        "since": "2.0.0",
        "filename": "functionToClass.ts",
        "extension": "ts",
        "relPath": "src/shared/class/utils/functionToClass.ts",
        "children": {}
    },
    "shared.class.utils.getExtendsStack": {
        "name": "getExtendsStack",
        "type": "Function",
        "description": "This function take a class as parameter and return an array of all the class names used to extends this one...",
        "namespace": "shared.class.utils",
        "since": "2.0.0",
        "filename": "getExtendsStack.ts",
        "extension": "ts",
        "relPath": "src/shared/class/utils/getExtendsStack.ts",
        "children": {}
    },
    "js.class.getMethods": {
        "name": "getMethods",
        "type": "Function",
        "description": "This function take an instance as parameter and return all the methods in array format",
        "namespace": "js.class",
        "since": "2.0.0",
        "filename": "getMethods.ts",
        "extension": "ts",
        "relPath": "src/shared/class/utils/getMethods.ts",
        "children": {}
    },
    "js.class.utils.methodExists": {
        "name": "methodExists",
        "type": "Function",
        "description": "Check if one or more methods exists on a class instance",
        "namespace": "js.class.utils",
        "since": "2.0.0",
        "filename": "methodExists.ts",
        "extension": "ts",
        "relPath": "src/shared/class/utils/methodExists.ts",
        "children": {}
    },
    "shared.class.utils.multipleExtends": {
        "name": "multipleExtends",
        "type": "Function",
        "description": "This function allows you to extends your class with multiple other ones.",
        "namespace": "shared.class.utils",
        "since": "2.0.0",
        "filename": "multipleExtends.ts",
        "extension": "ts",
        "relPath": "src/shared/class/utils/multipleExtends.ts",
        "children": {}
    },
    "shared.class.utils.toPlainObject": {
        "name": "toPlainObject",
        "type": "Function",
        "description": "This function take a instance as parameter and return a plain object of it",
        "namespace": "shared.class.utils",
        "since": "2.0.0",
        "filename": "toPlainObject.ts",
        "extension": "ts",
        "relPath": "src/shared/class/utils/toPlainObject.ts",
        "children": {}
    },
    "scss.core.mixin.setup": {
        "name": "setup",
        "type": "mixin",
        "description": "Setup sugar toolkit by overriding the default [settings](../_settings.scss)\nThis has to be called *BEFORE** the [s-init mixin](./_s-init.scss)",
        "namespace": "scss.core.mixin",
        "filename": "_setup.scss",
        "extension": "scss",
        "relPath": "src/scss/core/_setup.scss",
        "children": {}
    },
    "scss.util.function.border-map": {
        "name": "border-map",
        "type": "function",
        "description": "Parse and return the Map respresentation of a border property\nThe $border argument will be parsed with the [s-parse-properties](../core/functions/_s-parse-properties.scss) function.",
        "namespace": "scss.util.function",
        "since": "1.0.0",
        "filename": "_border-map.scss",
        "extension": "scss",
        "relPath": "src/scss/util/function/_border-map.scss",
        "children": {}
    },
    "scss.util.function.margin-map": {
        "name": "margin-map",
        "type": "function",
        "description": "Parse and return the Map respresentation of a margin property\nThe $margin argument will be parsed with the [s-parse-properties](../core/functions/_s-parse-properties.scss) function.",
        "namespace": "scss.util.function",
        "since": "1.0.0",
        "filename": "_margin-map.scss",
        "extension": "scss",
        "relPath": "src/scss/util/function/_margin-map.scss",
        "children": {}
    },
    "scss.util.function.position-map": {
        "name": "position-map",
        "type": "function",
        "description": "Return the representation of a position styling like position:absolute; top:0; left:100%; etc...\nThis function gives you some shortcuts to align your element top, bottom, middle, center, etc...",
        "namespace": "scss.util.function",
        "since": "1.0.0",
        "filename": "_position-map.scss",
        "extension": "scss",
        "relPath": "src/scss/util/function/_position-map.scss",
        "children": {}
    },
    "scss.util.function.translate-map": {
        "name": "translate-map",
        "type": "function",
        "description": "Return the Map properties representation of a translate x,y and z",
        "namespace": "scss.util.function",
        "since": "1.0.0",
        "filename": "_translate-map.scss",
        "extension": "scss",
        "relPath": "src/scss/util/function/_translate-map.scss",
        "children": {}
    },
    "scss.unit.function.convert": {
        "name": "convert",
        "type": "function",
        "description": "Convert a passed value to the wanted unit\nThe conversion between some units that depends on a font-size will take the settings.typography.font-size value as reference.\n\nAvailable conversions\n- from px\n- to em\n- to rem\n- to pt\n- to %\n\n- from em\n- to rem\n- to px\n- to pt\n- to %\n\n- from pt\n- to em\n- to rem\n- to px\n- to pt\n- to %\n\n- from rem\n- to em\n- to px\n- to pt\n- to %",
        "namespace": "scss.unit.function",
        "since": "1.0.0",
        "filename": "_convert.scss",
        "extension": "scss",
        "relPath": "src/scss/unit/function/_convert.scss",
        "children": {}
    },
    "scss.unit.function.is-unitless": {
        "name": "is-unitless",
        "type": "function",
        "description": "Check if the passed variable is unitless or not",
        "namespace": "scss.unit.function",
        "since": "1.0.0",
        "filename": "_is-unitless.scss",
        "extension": "scss",
        "relPath": "src/scss/unit/function/_is-unitless.scss",
        "children": {}
    },
    "scss.unit.function.strip-units": {
        "name": "strip-units",
        "type": "function",
        "description": "Return a number without any units",
        "namespace": "scss.unit.function",
        "since": "1.0.0",
        "filename": "_strip-units.scss",
        "extension": "scss",
        "relPath": "src/scss/unit/function/_strip-units.scss",
        "children": {}
    },
    "scss.unit.function.to-em": {
        "name": "to-em",
        "type": "function",
        "description": "Convert the passed value to em",
        "namespace": "scss.unit.function",
        "since": "1.0.0",
        "filename": "_to-em.scss",
        "extension": "scss",
        "relPath": "src/scss/unit/function/_to-em.scss",
        "children": {}
    },
    "scss.unit.function.to-percent": {
        "name": "to-percent",
        "type": "function",
        "description": "Convert the passed value to %",
        "namespace": "scss.unit.function",
        "since": "1.0.0",
        "filename": "_to-percent.scss",
        "extension": "scss",
        "relPath": "src/scss/unit/function/_to-percent.scss",
        "children": {}
    },
    "scss.unit.function.to-pt": {
        "name": "to-pt",
        "type": "function",
        "description": "Convert the passed value to pt",
        "namespace": "scss.unit.function",
        "since": "1.0.0",
        "filename": "_to-pt.scss",
        "extension": "scss",
        "relPath": "src/scss/unit/function/_to-pt.scss",
        "children": {}
    },
    "scss.unit.function.to-px": {
        "name": "to-px",
        "type": "function",
        "description": "Convert the passed value to px",
        "namespace": "scss.unit.function",
        "since": "1.0.0",
        "filename": "_to-px.scss",
        "extension": "scss",
        "relPath": "src/scss/unit/function/_to-px.scss",
        "children": {}
    },
    "scss.unit.function.to-rem": {
        "name": "to-rem",
        "type": "function",
        "description": "Convert the passed value to rem",
        "namespace": "scss.unit.function",
        "since": "1.0.0",
        "filename": "_to-rem.scss",
        "extension": "scss",
        "relPath": "src/scss/unit/function/_to-rem.scss",
        "children": {}
    },
    "scss.unit.function.unit": {
        "name": "unit",
        "type": "function",
        "description": "Return the unit of the passed number",
        "namespace": "scss.unit.function",
        "since": "1.0.0",
        "filename": "_unit.scss",
        "extension": "scss",
        "relPath": "src/scss/unit/function/_unit.scss",
        "children": {}
    },
    "scss.typography.function.rhythm-width": {
        "name": "rhythm-width",
        "type": "function",
        "description": "Return the Map properties representation for the rhythme width\nThe rhythme width is the width of an element that target a certain number of letters by line",
        "namespace": "scss.typography.function",
        "since": "1.0.0",
        "filename": "_rhythm-width.scss",
        "extension": "scss",
        "relPath": "src/scss/typography/function/_rhythm-width.scss",
        "children": {}
    },
    "scss.typography.function.tf-class": {
        "name": "tf-class",
        "type": "function",
        "description": "Return the text-format setting scope class",
        "namespace": "scss.typography.function",
        "since": "1.0.0",
        "filename": "_tf-class.scss",
        "extension": "scss",
        "relPath": "src/scss/typography/function/_tf-class.scss",
        "children": {}
    },
    "scss.typography.function.vr-class": {
        "name": "vr-class",
        "type": "function",
        "description": "Return the vertical-rhythm setting scope class",
        "namespace": "scss.typography.function",
        "since": "1.0.0",
        "filename": "_vr-class.scss",
        "extension": "scss",
        "relPath": "src/scss/typography/function/_vr-class.scss",
        "children": {}
    },
    "scss.typography.mixin.rhythm-width": {
        "name": "rhythm-width",
        "type": "mixin",
        "description": "Print out the css on a container that will make the lines displays a maximum number of characters.",
        "namespace": "scss.typography.mixin",
        "since": "1.0.0",
        "filename": "_rhythm-width.scss",
        "extension": "scss",
        "relPath": "src/scss/typography/mixin/_rhythm-width.scss",
        "children": {}
    },
    "scss.typography.mixin.selection": {
        "name": "selection",
        "type": "mixin",
        "description": "Set the user selection styling with ease",
        "namespace": "scss.typography.mixin",
        "since": "1.0.0",
        "filename": "_selection.scss",
        "extension": "scss",
        "relPath": "src/scss/typography/mixin/_selection.scss",
        "children": {}
    },
    "scss.typography.mixin.show-vr": {
        "name": "show-vr",
        "type": "mixin",
        "description": "Display the vertical rhythme",
        "namespace": "scss.typography.mixin",
        "since": "1.0.0",
        "filename": "_show-vr.scss",
        "extension": "scss",
        "relPath": "src/scss/typography/mixin/_show-vr.scss",
        "children": {}
    },
    "scss.typography.mixin.text-ellipsis": {
        "name": "text-ellipsis",
        "type": "mixin",
        "description": "Crop the text on 1 line if needed",
        "namespace": "scss.typography.mixin",
        "since": "2.0.0",
        "filename": "_text-ellipsis.scss",
        "extension": "scss",
        "relPath": "src/scss/typography/mixin/_text-ellipsis.scss",
        "children": {}
    },
    "scss.typography.mixin.text-hide": {
        "name": "text-hide",
        "type": "mixin",
        "description": "Hide the contained text",
        "namespace": "scss.typography.mixin",
        "since": "1.0.0",
        "filename": "_text-hide.scss",
        "extension": "scss",
        "relPath": "src/scss/typography/mixin/_text-hide.scss",
        "children": {}
    },
    "scss.typography.mixin.text-truncate": {
        "name": "text-truncate",
        "type": "mixin",
        "description": "Print out the style to truncate the text if needed",
        "namespace": "scss.typography.mixin",
        "since": "1.0.0",
        "filename": "_text-truncate.scss",
        "extension": "scss",
        "relPath": "src/scss/typography/mixin/_text-truncate.scss",
        "children": {}
    },
    "scss.typography.mixin.tf-scope": {
        "name": "tf-scope",
        "type": "mixin",
        "description": "Scope the content inside the `settings.typography.tf-scope-class` class",
        "namespace": "scss.typography.mixin",
        "since": "1.0.0",
        "filename": "_tf-scope.scss",
        "extension": "scss",
        "relPath": "src/scss/typography/mixin/_tf-scope.scss",
        "children": {}
    },
    "scss.typography.mixin.vr-scope": {
        "name": "vr-scope",
        "type": "mixin",
        "description": "Scope the content inside the `settings.typography.vr-class` class",
        "namespace": "scss.typography.mixin",
        "since": "1.0.0",
        "filename": "_vr-scope.scss",
        "extension": "scss",
        "relPath": "src/scss/typography/mixin/_vr-scope.scss",
        "children": {}
    },
    "scss.transition.class.transition-classes": {
        "name": "transition-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"transition\" related classes.",
        "namespace": "scss.transition.class",
        "since": "2.0.0",
        "filename": "_transition.scss",
        "extension": "scss",
        "relPath": "src/scss/transition/class/_transition.scss"
    },
    "scss.transition.class.#{sel(tr-#{$name})}": {
        "name": "#{sel(tr-#{$name})}",
        "type": "Classname",
        "description": "Apply the transition **#{$name}**",
        "namespace": "scss.transition.class",
        "since": "1.0.0",
        "filename": "_transition.scss",
        "extension": "scss",
        "relPath": "src/scss/transition/class/_transition.scss",
        "children": {}
    },
    "scss.core.transition.function.transition-map": {
        "name": "transition-map",
        "type": "function",
        "description": "Take a transition as parameter and parse it to return the {Map} corresponding\nThe $transition parameter can be either a registered transition name or a custom css transition like : all .2s ease-in-out 2s\nThe $transition argument will be parsed with the [./_parse-properties.scss] function.",
        "namespace": "scss.core.transition.function",
        "since": "1.0.0",
        "filename": "_transition-map.scss",
        "extension": "scss",
        "relPath": "src/scss/transition/function/_transition-map.scss",
        "children": {}
    },
    "scss.core.transition.function.transition": {
        "name": "transition",
        "type": "function",
        "description": "Take a transition as parameter and parse it to return the {List} corresponding\nThe $transitions parameter can be either a registered transition name or a custom css transition like : all .2s ease-in-out 2s\nThe $transitions argument will be parsed with the [./_parse-properties.scss] function.",
        "namespace": "scss.core.transition.function",
        "since": "1.0.0",
        "filename": "_transition.scss",
        "extension": "scss",
        "relPath": "src/scss/transition/function/_transition.scss",
        "children": {}
    },
    "scss.core.transition.mixin.transition": {
        "name": "transition",
        "type": "mixin",
        "description": "Take a transition as parameter and print the corresponding transition property\nThe $transitions parameter can be either a registered transition name or a custom css transition like : all .2s ease-in-out 2s\nThe $transitions argument will be parsed with the [./_parse-properties.scss] function.",
        "namespace": "scss.core.transition.mixin",
        "since": "1.0.0",
        "filename": "_transition.scss",
        "extension": "scss",
        "relPath": "src/scss/transition/mixin/_transition.scss",
        "children": {}
    },
    "scss.shape.mixin.round-overflow": {
        "name": "round-overflow",
        "type": "mixin",
        "description": "Apply some css to have a rounded element with already an overflow on it",
        "namespace": "scss.shape.mixin",
        "since": "1.0.0",
        "filename": "_round-overflow.scss",
        "extension": "scss",
        "relPath": "src/scss/shape/mixin/_round-overflow.scss",
        "children": {}
    },
    "scss.shape.mixin.triangle": {
        "name": "triangle",
        "type": "mixin",
        "description": "Generate a triangle shape",
        "namespace": "scss.shape.mixin",
        "since": "1.0.0",
        "filename": "_triangle.scss",
        "extension": "scss",
        "relPath": "src/scss/shape/mixin/_triangle.scss",
        "children": {}
    },
    "scss.core.selector.function.selector": {
        "name": "selector",
        "type": "function",
        "description": "Process selector to avoid having --default, etc...",
        "namespace": "scss.core.selector.function",
        "filename": "_selector.scss",
        "extension": "scss",
        "relPath": "src/scss/selector/function/_selector.scss",
        "children": {}
    },
    "scss.screen-reader.mixin.screen-reader-only": {
        "name": "screen-reader-only",
        "type": "Mixin",
        "description": "Make the element visible only for the screen readers",
        "namespace": "scss.screen-reader.mixin",
        "since": "2.0.0",
        "filename": "_screen-reader-only.scss",
        "extension": "scss",
        "relPath": "src/scss/screen-reader/mixin/_screen-reader-only.scss",
        "children": {}
    },
    "scss.responsive.function.mediaQueryString": {
        "name": "mediaQueryString",
        "type": "Function",
        "description": "This function return the media query string depending on the query asked.\nThe queries are defined in the config.media.queries configuration.",
        "namespace": "scss.responsive.function",
        "since": "2.0.0",
        "filename": "_mediaQueryString.scss",
        "extension": "scss",
        "relPath": "src/scss/responsive/function/_mediaQueryString.scss",
        "children": {}
    },
    "scss.responsive.mixin.init-body-media-queries": {
        "name": "init-body-media-queries",
        "type": "Mixin",
        "description": "This mixin apply on the body all the media queries defines in the @config.media.queries configuration.\nThis mixin apply an animation that do nothing but will dispatch the animationEnd event catchable by javascript\nSo it will be easy to use the \"mediaQuery\" function that you can find in the \"@coffeekraken/sugar/js/responsive/mediaQuery\"\nnamespace.",
        "namespace": "scss.responsive.mixin",
        "since": "2.0.0",
        "filename": "_initBodyMediaQueries.scss",
        "extension": "scss",
        "relPath": "src/scss/responsive/mixin/_initBodyMediaQueries.scss",
        "children": {}
    },
    "scss.responsive.media": {
        "name": "media",
        "type": "mixin",
        "description": "Easy to use media query mixin that support cssua classes to target specific browsers",
        "namespace": "scss.responsive",
        "filename": "_media.old.scss",
        "extension": "old",
        "relPath": "src/scss/responsive/mixin/_media.old.scss",
        "children": {}
    },
    "scss.responsive.mixin.mediaQuery": {
        "name": "mediaQuery",
        "type": "Mixin",
        "description": "This mixin allows you to specify easily which media (defined in the media.config.js file) has to be targeted.\nYou can specify multiple medias if needed and specify how you want to target the specific media.\nCheck out the examples for more info.\nBy default, the Sugar toolkit offer these medias to be targeted:\n- mobile\n- mobile-portrait\n- mobile-landscape\n- tablet\n- tablet-portrait\n- tablet-landscape\n- desktop\n\nYou can use some \"actions\" to specify your target. The available actions are:\n- '>': Greater than...\n- '<': Lower than...\n- '=': Equal...\n- '>=': Greater or equal...\n- '>=': Lower or equal...\n\nYour media queries can be something like this: '<tablet', '>mobile <desktop', '=tablet-landscape'.\nIf you don't specicy any action in your queries, by default the \"defaultAction\" property in the media.config.js file will\nbe applied and this default action is setted to \">=\". This is setted like this to work in \"mobile first\" schema by default.",
        "namespace": "scss.responsive.mixin",
        "since": "2.0.0",
        "filename": "_mediaQuery.scss",
        "extension": "scss",
        "relPath": "src/scss/responsive/mixin/_mediaQuery.scss",
        "children": {}
    },
    "scss.meta.function.to-base64-url": {
        "name": "to-base64-url",
        "type": "function",
        "description": "Convert the passed svg code to an embadable base64 url",
        "namespace": "scss.meta.function",
        "since": "1.0.0",
        "filename": "_to-base64-url.scss",
        "extension": "scss",
        "relPath": "src/scss/meta/function/_to-base64-url.scss",
        "children": {}
    },
    "scss.meta.function.to-base64": {
        "name": "to-base64",
        "type": "function",
        "description": "Convert the passed svg code to base64 embedable url",
        "namespace": "scss.meta.function",
        "since": "1.0.0",
        "filename": "_to-base64.scss",
        "extension": "scss",
        "relPath": "src/scss/meta/function/_to-base64.scss",
        "children": {}
    },
    "scss.core.look-and-feel.lnf": {
        "name": "lnf",
        "type": "function",
        "description": "Alias to the [./_look-and-feel.scss] function\n\nReturn a settings.look-and-feel stack value",
        "namespace": "scss.core.look-and-feel",
        "filename": "_lnf.scss",
        "extension": "scss",
        "relPath": "src/scss/look-and-feel/function/_lnf.scss",
        "children": {}
    },
    "scss.core.look-and-feel.look-and-feel": {
        "name": "look-and-feel",
        "type": "function",
        "description": "Return a settings.look-and-feel stack value",
        "namespace": "scss.core.look-and-feel",
        "filename": "_look-and-feel.scss",
        "extension": "scss",
        "relPath": "src/scss/look-and-feel/function/_look-and-feel.scss",
        "children": {}
    },
    "scss.loader.mixin.loader-bars": {
        "name": "loader-bars",
        "type": "function",
        "description": "Generate a full animated, single element, bars loader",
        "namespace": "scss.loader.mixin",
        "since": "1.0.0",
        "filename": "_loader-bars.scss",
        "extension": "scss",
        "relPath": "src/scss/loader/mixin/_loader-bars.scss",
        "children": {}
    },
    "scss.loader.mixin.loader-circle": {
        "name": "loader-circle",
        "type": "Mixin",
        "description": "Generate a full animated, single element, circle loader",
        "namespace": "scss.loader.mixin",
        "since": "1.0.0",
        "filename": "_loader-circle.scss",
        "extension": "scss",
        "relPath": "src/scss/loader/mixin/_loader-circle.scss",
        "children": {}
    },
    "scss.loader.mixin.loader-couch-potato": {
        "name": "loader-couch-potato",
        "type": "function",
        "description": "Generate a full animated, single element, couch-potato style loader",
        "namespace": "scss.loader.mixin",
        "since": "1.0.0",
        "filename": "_loader-couch-potato.scss",
        "extension": "scss",
        "relPath": "src/scss/loader/mixin/_loader-couch-potato.scss",
        "children": {}
    },
    "scss.loader.mixin.loader-flip-ball": {
        "name": "loader-flip-ball",
        "type": "Mixin",
        "description": "Generate a full animated, single element, flip ball style loader",
        "namespace": "scss.loader.mixin",
        "since": "1.0.0",
        "filename": "_loader-flip-ball.scss",
        "extension": "scss",
        "relPath": "src/scss/loader/mixin/_loader-flip-ball.scss",
        "children": {}
    },
    "scss.loader.mixin.loader-grid": {
        "name": "loader-grid",
        "type": "function",
        "description": "Generate a grid style loader",
        "namespace": "scss.loader.mixin",
        "since": "1.0.0",
        "filename": "_loader-grid.scss",
        "extension": "scss",
        "relPath": "src/scss/loader/mixin/_loader-grid.scss",
        "children": {}
    },
    "scss.loader.mixin.loader-radial": {
        "name": "loader-radial",
        "type": "function",
        "description": "Generate a radial styled loader",
        "namespace": "scss.loader.mixin",
        "since": "1.0.0",
        "filename": "_loader-radial.scss",
        "extension": "scss",
        "relPath": "src/scss/loader/mixin/_loader-radial.scss",
        "children": {}
    },
    "scss.loader.mixin.loader-spinner": {
        "name": "loader-spinner",
        "type": "function",
        "description": "Generate a spinner loader",
        "namespace": "scss.loader.mixin",
        "since": "1.0.0",
        "filename": "_loader-spinner.scss",
        "extension": "scss",
        "relPath": "src/scss/loader/mixin/_loader-spinner.scss",
        "children": {}
    },
    "scss.list.mixin.list-bullet": {
        "name": "list-bullet",
        "type": "mixin",
        "description": "Set how the list bullet has to be displayed.",
        "namespace": "scss.list.mixin",
        "since": "1.0.0",
        "filename": "_list-bullet.scss",
        "extension": "scss",
        "relPath": "src/scss/list/mixin/_list-bullet.scss",
        "children": {}
    },
    "scss.list.mixin.list-start": {
        "name": "list-start",
        "type": "mixin",
        "description": "Start a new list",
        "namespace": "scss.list.mixin",
        "since": "1.0.0",
        "filename": "_list-start.scss",
        "extension": "scss",
        "relPath": "src/scss/list/mixin/_list-start.scss",
        "children": {}
    },
    "scss.link.mixin.link-stretched": {
        "name": "link-stretched",
        "type": "Mixin",
        "description": "Make a link become the size of it's parent (absolute, relative)\nbut only using the :after pseudo class so visually it will stay the same...",
        "namespace": "scss.link.mixin",
        "since": "2.0.0",
        "filename": "_link-stretched.scss",
        "extension": "scss",
        "relPath": "src/scss/link/mixin/_link-stretched.scss",
        "children": {}
    },
    "scss.layout.function.columns-map": {
        "name": "columns-map",
        "type": "function",
        "description": "Return the Map representation of a columns properties",
        "namespace": "scss.layout.function",
        "since": "1.0.0",
        "filename": "_columns-map.scss",
        "extension": "scss",
        "relPath": "src/scss/layout/function/_columns-map.scss",
        "children": {}
    },
    "scss.layout.mixin.columns": {
        "name": "columns",
        "type": "mixin",
        "description": "Create a column layout my setting each columns properties at once",
        "namespace": "scss.layout.mixin",
        "since": "1.0.0",
        "filename": "_columns.scss",
        "extension": "scss",
        "relPath": "src/scss/layout/mixin/_columns.scss",
        "children": {}
    },
    "scss.layout.mixin.ratio": {
        "name": "ratio",
        "type": "mixin",
        "description": "Apply a ratio css styling. This will apply a before or after content that will make the element keep the specified ratio.\nThe content need to be displayed as absolute top left and fit in size.",
        "namespace": "scss.layout.mixin",
        "since": "1.0.0",
        "filename": "_ratio.scss",
        "extension": "scss",
        "relPath": "src/scss/layout/mixin/_ratio.scss",
        "children": {}
    },
    "scss.image.mixin.background": {
        "name": "background",
        "type": "mixin",
        "description": "Helper mixin to set a background image",
        "namespace": "scss.image.mixin",
        "since": "1.0.0",
        "filename": "_background.scss",
        "extension": "scss",
        "relPath": "src/scss/image/mixin/_background.scss",
        "children": {}
    },
    "scss.image.mixin.image-rendering": {
        "name": "image-rendering",
        "type": "mixin",
        "description": "Set how to render the image",
        "namespace": "scss.image.mixin",
        "since": "1.0.0",
        "filename": "_image-rendering.scss",
        "extension": "scss",
        "relPath": "src/scss/image/mixin/_image-rendering.scss",
        "children": {}
    },
    "scss.helper.class.helper-block-classes": {
        "name": "helper-block-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"block\" related helper classes.",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_block.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_block.scss"
    },
    "scss.helper.class.#{sel(block-center)}": {
        "name": "#{sel(block-center)}",
        "type": "class",
        "description": "Set the element to as ```display:block``` and center it",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_block.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_block.scss",
        "children": {}
    },
    "scss.helper.class.helper-border-classes": {
        "name": "helper-border-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"border\" related helper classes.",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_border.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_border.scss"
    },
    "scss.helper.class.#{$cls}": {
        "name": "#{$cls}",
        "type": "class",
        "description": "Remove the y (top and bottom) borders",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_border.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_border.scss",
        "children": {}
    },
    "scss.helper.class.helper-clear-classes": {
        "name": "helper-clear-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"clear\" related helper classes.",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_clear.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_clear.scss"
    },
    "scss.helper.class.#{sel(clear-left)}": {
        "name": "#{sel(clear-left)}",
        "type": "class",
        "description": "Clear the left float on the element",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_clear.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_clear.scss"
    },
    "scss.helper.class.#{sel(clear-right)}": {
        "name": "#{sel(clear-right)}",
        "type": "class",
        "description": "Clear the right float on the element",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_clear.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_clear.scss"
    },
    "scss.helper.class.#{sel(clear)}": {
        "name": "#{sel(clear)}",
        "type": "class",
        "description": "Clear both float on the element",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_clear.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_clear.scss",
        "children": {}
    },
    "scss.helper.class.helper-clearfix-classes": {
        "name": "helper-clearfix-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"clearfix\" related helper classes.",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_clearfix.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_clearfix.scss"
    },
    "scss.helper.class.#{sel(clearfix)}": {
        "name": "#{sel(clearfix)}",
        "type": "class",
        "description": "Apply the micro clearfix on the element",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_clearfix.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_clearfix.scss"
    },
    "scss.helper.class.#{sel(clearfix-float)}": {
        "name": "#{sel(clearfix-float)}",
        "type": "class",
        "description": "Apply the float clearfix on the element",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_clearfix.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_clearfix.scss"
    },
    "scss.helper.class.#{sel(clearfix-micro)}": {
        "name": "#{sel(clearfix-micro)}",
        "type": "class",
        "description": "Apply the micro clearfix on the element",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_clearfix.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_clearfix.scss"
    },
    "scss.helper.class.#{sel(clearfix-overflow)}": {
        "name": "#{sel(clearfix-overflow)}",
        "type": "class",
        "description": "Apply the overflow clearfix on the element",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_clearfix.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_clearfix.scss"
    },
    "scss.helper.class.#{sel(clearfix-facebook)}": {
        "name": "#{sel(clearfix-facebook)}",
        "type": "class",
        "description": "Apply the facebook clearfix on the element",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_clearfix.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_clearfix.scss",
        "children": {}
    },
    "scss.helper.class.helper-display-classes": {
        "name": "helper-display-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"display\" related helper classes.",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_display.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_display.scss"
    },
    "scss.helper.class.#{sel(block)}": {
        "name": "#{sel(block)}",
        "type": "class",
        "description": "Display the element as ```block```",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_display.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_display.scss"
    },
    "scss.helper.class.#{sel(inline)}": {
        "name": "#{sel(inline)}",
        "type": "class",
        "description": "Display the element as ```inline```",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_display.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_display.scss"
    },
    "scss.helper.class.#{sel(inline-block)}": {
        "name": "#{sel(inline-block)}",
        "type": "class",
        "description": "Display the element as ```inline-block```",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_display.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_display.scss"
    },
    "scss.helper.class.#{sel(show)}": {
        "name": "#{sel(show)}",
        "type": "class",
        "description": "Display the element as ```block```",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_display.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_display.scss"
    },
    "scss.helper.class.#{sel(show-inline)}": {
        "name": "#{sel(show-inline)}",
        "type": "class",
        "description": "Display the element as ```inline-block```",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_display.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_display.scss"
    },
    "scss.helper.class.#{sel(hidden)}": {
        "name": "#{sel(hidden)}",
        "type": "class",
        "description": "Hide the element by setting the display to ```none```",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_display.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_display.scss"
    },
    "scss.helper.class.#{sel(hide)}": {
        "name": "#{sel(hide)}",
        "type": "class",
        "description": "Hide the element by setting the display to ```none```",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_display.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_display.scss"
    },
    "scss.helper.class.#{sel(visible)}": {
        "name": "#{sel(visible)}",
        "type": "class",
        "description": "Display the element by setting the visibility to ```visible```",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_display.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_display.scss"
    },
    "scss.helper.class.#{sel(invisible)}": {
        "name": "#{sel(invisible)}",
        "type": "class",
        "description": "Display the element by setting the visibility to ```hidden```",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_display.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_display.scss"
    },
    "scss.helper.class.#{sel(visually-hidden)}": {
        "name": "#{sel(visually-hidden)}",
        "type": "class",
        "description": "Hide the element from display but not for SEO.\nThis class use some tricks to make the element dissapear without using some ```display:none;```, etc...",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_display.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_display.scss",
        "children": {}
    },
    "scss.helper.class.helper-flex-classes": {
        "name": "helper-flex-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"flex\" related helper classes.",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_flex.scss"
    },
    "scss.helper.class.#{sel(flex)}": {
        "name": "#{sel(flex)}",
        "type": "class",
        "description": "Apply the display flex styling to the element",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_flex.scss"
    },
    "scss.helper.class.#{sel(flex-inline)}": {
        "name": "#{sel(flex-inline)}",
        "type": "class",
        "description": "Apply the display flex-inline styling to the element",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_flex.scss"
    },
    "scss.helper.class.#{sel(flex-justify-start)}": {
        "name": "#{sel(flex-justify-start)}",
        "type": "class",
        "description": "Apply the property ```justify-content``` to **start**",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_flex.scss"
    },
    "scss.helper.class.#{sel(flex-justify-end)}": {
        "name": "#{sel(flex-justify-end)}",
        "type": "class",
        "description": "Apply the property ```justify-content``` to **end**",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_flex.scss"
    },
    "scss.helper.class.#{sel(flex-justify-center)}": {
        "name": "#{sel(flex-justify-center)}",
        "type": "class",
        "description": "Apply the property ```justify-content``` to **center**",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_flex.scss"
    },
    "scss.helper.class.#{sel(flex-justify-between)}": {
        "name": "#{sel(flex-justify-between)}",
        "type": "class",
        "description": "Apply the property ```justify-content``` to **space-between**",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_flex.scss"
    },
    "scss.helper.class.#{sel(flex-justify-around)}": {
        "name": "#{sel(flex-justify-around)}",
        "type": "class",
        "description": "Apply the property ```justify-content``` to **space-around**",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_flex.scss"
    },
    "scss.helper.class.#{sel(flex-align-start)}": {
        "name": "#{sel(flex-align-start)}",
        "type": "class",
        "description": "Apply the property ```align-items``` to **flex-start**",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_flex.scss"
    },
    "scss.helper.class.#{sel(flex-align-end)}": {
        "name": "#{sel(flex-align-end)}",
        "type": "class",
        "description": "Apply the property ```align-items``` to **flex-end**",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_flex.scss"
    },
    "scss.helper.class.#{sel(flex-align-center)}": {
        "name": "#{sel(flex-align-center)}",
        "type": "class",
        "description": "Apply the property ```align-items``` to **center**",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_flex.scss"
    },
    "scss.helper.class.#{sel(flex-align-baseline)}": {
        "name": "#{sel(flex-align-baseline)}",
        "type": "class",
        "description": "Apply the property ```align-items``` to **baseline**",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_flex.scss"
    },
    "scss.helper.class.#{sel(flex-align-stretch)}": {
        "name": "#{sel(flex-align-stretch)}",
        "type": "class",
        "description": "Apply the property ```align-items``` to **stretch**",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_flex.scss"
    },
    "scss.helper.class.#{sel(flex-align-self-start)}": {
        "name": "#{sel(flex-align-self-start)}",
        "type": "class",
        "description": "Apply the property ```align-self``` to **flex-start**",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_flex.scss"
    },
    "scss.helper.class.#{sel(flex-align-self-end)}": {
        "name": "#{sel(flex-align-self-end)}",
        "type": "class",
        "description": "Apply the property ```align-self``` to **flex-end**",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_flex.scss"
    },
    "scss.helper.class.#{sel(flex-align-self-center)}": {
        "name": "#{sel(flex-align-self-center)}",
        "type": "class",
        "description": "Apply the property ```align-self``` to **flex-center**",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_flex.scss"
    },
    "scss.helper.class.#{sel(flex-align-self-baseline)}": {
        "name": "#{sel(flex-align-self-baseline)}",
        "type": "class",
        "description": "Apply the property ```align-self``` to **flex-baseline**",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_flex.scss"
    },
    "scss.helper.class.#{sel(flex-align-self-stretch)}": {
        "name": "#{sel(flex-align-self-stretch)}",
        "type": "class",
        "description": "Apply the property ```align-self``` to **flex-stretch**",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_flex.scss"
    },
    "scss.helper.class.#{sel(flex-nowrap)}": {
        "name": "#{sel(flex-nowrap)}",
        "type": "class",
        "description": "Apply the ```flex-wrap``` property to **nowrap**",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_flex.scss"
    },
    "scss.helper.class.#{sel(flex-wrap)}": {
        "name": "#{sel(flex-wrap)}",
        "type": "class",
        "description": "Apply the ```flex-wrap``` property to **wrap**",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_flex.scss"
    },
    "scss.helper.class.#{sel(flex-wrap-reverse)}": {
        "name": "#{sel(flex-wrap-reverse)}",
        "type": "class",
        "description": "Apply the ```flex-wrap``` property to **wrap-reverse**",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_flex.scss"
    },
    "scss.helper.class.#{sel(flex-order-#{i})}": {
        "name": "#{sel(flex-order-#{i})}",
        "type": "class",
        "description": "Set the order on a specific flex item.\nYou will have <primary>#{$ordersCount}</primary> available. This can be\nchanged by updating the *config.scss.helpers.flex.order-count** configuration.",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_flex.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_flex.scss",
        "children": {}
    },
    "scss.helper.class.helper-link-classes": {
        "name": "helper-link-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"link\" related helper classes.",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_link.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_link.scss"
    },
    ")}             scss.helper.class.#{sel(link-stretched": {
        "name": "#{sel(link-stretched",
        "type": "class",
        "description": "Make a link become the size of it's parent (absolute, relative)\nbut only using the :after pseudo class so visually it will stay the same...",
        "namespace": ")}             scss.helper.class",
        "since": "2.0.0",
        "filename": "_link.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_link.scss",
        "children": {}
    },
    "scss.helper.class.helper-margin-classes": {
        "name": "helper-margin-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"margin\" related helper classes.",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_margin.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_margin.scss"
    },
    "scss.core.class.#{$cname}": {
        "name": "#{$cname}",
        "type": "Classname",
        "description": "Set the **top and bottom** padding to the **#{$name}**",
        "namespace": "scss.core.class",
        "since": "1.0.0",
        "filename": "_padding.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_padding.scss"
    },
    "scss.core.class.#{sel(no-mar)}": {
        "name": "#{sel(no-mar)}",
        "type": "class",
        "description": "Reset all margins",
        "namespace": "scss.core.class",
        "since": "1.0.0",
        "filename": "_margin.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_margin.scss"
    },
    "scss.core.class.#{sel(no-mar-t)}": {
        "name": "#{sel(no-mar-t)}",
        "type": "class",
        "description": "Reset **top** margin",
        "namespace": "scss.core.class",
        "since": "1.0.0",
        "filename": "_margin.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_margin.scss"
    },
    "scss.core.class.#{sel(no-mar-r)}": {
        "name": "#{sel(no-mar-r)}",
        "type": "class",
        "description": "Reset **right** margin",
        "namespace": "scss.core.class",
        "since": "1.0.0",
        "filename": "_margin.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_margin.scss"
    },
    "scss.core.class.#{sel(no-mar-b)}": {
        "name": "#{sel(no-mar-b)}",
        "type": "class",
        "description": "Reset **bottom** margin",
        "namespace": "scss.core.class",
        "since": "1.0.0",
        "filename": "_margin.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_margin.scss"
    },
    "scss.core.class.#{sel(no-mar-l)}": {
        "name": "#{sel(no-mar-l)}",
        "type": "class",
        "description": "Reset **left** margin",
        "namespace": "scss.core.class",
        "since": "1.0.0",
        "filename": "_margin.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_margin.scss"
    },
    "scss.core.class.#{sel(no-mar-x)}": {
        "name": "#{sel(no-mar-x)}",
        "type": "class",
        "description": "Reset **left** and **right** margins",
        "namespace": "scss.core.class",
        "since": "1.0.0",
        "filename": "_margin.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_margin.scss"
    },
    "scss.core.class.#{sel(no-mar-y)}": {
        "name": "#{sel(no-mar-y)}",
        "type": "class",
        "description": "Reset **top** and **bottom** margins",
        "namespace": "scss.core.class",
        "since": "1.0.0",
        "filename": "_margin.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_margin.scss",
        "children": {}
    },
    "scss.helper.class.helper-media-classes": {
        "name": "helper-media-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"media object\" related helper classes.",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_media-object.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_media-object.scss"
    },
    "scss.helper.class.#{sel(media-object)} #{sel(media-object--center)} #{sel(media-object__content)}": {
        "name": "#{sel(media-object)} #{sel(media-object--center)} #{sel(media-object__content)}",
        "type": "class",
        "description": "Famous media object class",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_media-object.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_media-object.scss",
        "children": {}
    },
    "scss.helper.class.helper-overflow-classes": {
        "name": "helper-overflow-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"overflow\" related helper classes.",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_overflow.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_overflow.scss"
    },
    "scss.helper.class.#{sel(overflow-hidden)}": {
        "name": "#{sel(overflow-hidden)}",
        "type": "Classname",
        "description": "Set the overflow to hidden",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_overflow.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_overflow.scss"
    },
    "scss.helper.class.#{sel(overflow-auto)}": {
        "name": "#{sel(overflow-auto)}",
        "type": "Classname",
        "description": "Set the overflow to auto",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_overflow.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_overflow.scss",
        "children": {}
    },
    "scss.helper.class.helper-padding-classes": {
        "name": "helper-padding-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"padding\" related helper classes.",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_padding.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_padding.scss"
    },
    "scss.core.class.#{sel(no-pad)}": {
        "name": "#{sel(no-pad)}",
        "type": "Classname",
        "description": "Reset **all** paddings",
        "namespace": "scss.core.class",
        "since": "1.0.0",
        "filename": "_padding.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_padding.scss"
    },
    "scss.core.class.#{sel(no-pad-t)}": {
        "name": "#{sel(no-pad-t)}",
        "type": "Classname",
        "description": "Reset **top** padding",
        "namespace": "scss.core.class",
        "since": "1.0.0",
        "filename": "_padding.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_padding.scss"
    },
    "scss.core.class.#{sel(no-pad-r)}": {
        "name": "#{sel(no-pad-r)}",
        "type": "Classname",
        "description": "Reset **right** padding",
        "namespace": "scss.core.class",
        "since": "1.0.0",
        "filename": "_padding.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_padding.scss"
    },
    "scss.core.class.#{sel(no-pad-b)}": {
        "name": "#{sel(no-pad-b)}",
        "type": "class",
        "description": "Reset **bottom** padding",
        "namespace": "scss.core.class",
        "since": "1.0.0",
        "filename": "_padding.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_padding.scss"
    },
    "scss.core.class.#{sel(no-pad-l)}": {
        "name": "#{sel(no-pad-l)}",
        "type": "class",
        "description": "Reset **left** padding",
        "namespace": "scss.core.class",
        "since": "1.0.0",
        "filename": "_padding.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_padding.scss"
    },
    "scss.core.class.#{sel(no-pad-x)}": {
        "name": "#{sel(no-pad-x)}",
        "type": "class",
        "description": "Reset **left** and **right** paddings",
        "namespace": "scss.core.class",
        "since": "1.0.0",
        "filename": "_padding.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_padding.scss"
    },
    "scss.core.class.#{sel(no-pad-y)}": {
        "name": "#{sel(no-pad-y)}",
        "type": "class",
        "description": "Reset **top** and **bottom** paddings",
        "namespace": "scss.core.class",
        "since": "1.0.0",
        "filename": "_padding.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_padding.scss",
        "children": {}
    },
    "scss.helper.class.helper-pointer-classes": {
        "name": "helper-pointer-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"pointer\" related helper classes.",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_pointer.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_pointer.scss"
    },
    "scss.helper.class.#{sel(pointer-events-none)}": {
        "name": "#{sel(pointer-events-none)}",
        "type": "Classname",
        "description": "Disable any pointer events",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_pointer.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_pointer.scss"
    },
    "scss.helper.class.#{sel(pointer-events-all)}": {
        "name": "#{sel(pointer-events-all)}",
        "type": "Classname",
        "description": "Enable any pointer events",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_pointer.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_pointer.scss",
        "children": {}
    },
    "scss.helper.class.helper-position-classes": {
        "name": "helper-position-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"position\" related helper classes.",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_position.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_position.scss"
    },
    "scss.helper.class.#{sel(relative)}": {
        "name": "#{sel(relative)}",
        "type": "Classname",
        "description": "Set an element position as ```relative```",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_position.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_position.scss"
    },
    "scss.helper.class.#{sel(absolute)}": {
        "name": "#{sel(absolute)}",
        "type": "Classname",
        "description": "Set an element position as ```absolute```",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_position.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_position.scss"
    },
    "scss.helper.class.#{sel(fixed)}": {
        "name": "#{sel(fixed)}",
        "type": "Classname",
        "description": "Set an element position as ```fixed```",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_position.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_position.scss"
    },
    "scss.helper.class.#{sel(fixed-top)}": {
        "name": "#{sel(fixed-top)}",
        "type": "Classname",
        "description": "Set an element position as ```fixed``` top",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_position.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_position.scss"
    },
    "scss.helper.class.#{sel(fixed-bottom)}": {
        "name": "#{sel(fixed-bottom)}",
        "type": "Classname",
        "description": "Set an element position as ```fixed``` bottom",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_position.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_position.scss"
    },
    "scss.helper.class.#{sel(sticky)}": {
        "name": "#{sel(sticky)}",
        "type": "Classname",
        "description": "Set an element position as ```sticky```",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_position.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_position.scss"
    },
    "scss.helper.class.#{sel(sticky-top)}": {
        "name": "#{sel(sticky-top)}",
        "type": "Classname",
        "description": "Set an element position as ```sticky``` top",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_position.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_position.scss",
        "children": {}
    },
    "scss.helper.class.helper-pull-classes": {
        "name": "helper-pull-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"pull\" related helper classes.",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_pull.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_pull.scss"
    },
    "scss.helper.class.#{sel(pull-left)}": {
        "name": "#{sel(pull-left)}",
        "type": "Classname",
        "description": "Allows you to pull an element to the left side",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_pull.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_pull.scss"
    },
    "scss.helper.class.#{sel(pull-right)}": {
        "name": "#{sel(pull-right)}",
        "type": "Classname",
        "description": "Allows you to pull an element to the right side",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_pull.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_pull.scss"
    },
    "scss.helper.class.#{sel(pull-none)}": {
        "name": "#{sel(pull-none)}",
        "type": "Classname",
        "description": "Reset the pull (float) styling on the element",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_pull.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_pull.scss",
        "children": {}
    },
    "scss.helper.class.helper-ratio-classes": {
        "name": "helper-ratio-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"ratio\" related helper classes.",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_ratio.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_ratio.scss"
    },
    "scss.helper.class.#{$cname}": {
        "name": "#{$cname}",
        "type": "Classname",
        "description": "Set the **ratio** to the **#{$name}**",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_ratio.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_ratio.scss",
        "children": {}
    },
    "scss.helper.class.helper-screen-reader-classes": {
        "name": "helper-screen-reader-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"screen-reader\" related helper classes.",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_screen-reader.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_screen-reader.scss"
    },
    "scss.helper.class.#{sel(screen-reader-only)}": {
        "name": "#{sel(screen-reader-only)}",
        "type": "Classname",
        "description": "Display the element only on screen readers",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_screen-reader.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_screen-reader.scss",
        "children": {}
    },
    "scss.helper.class.helper-size-classes": {
        "name": "helper-size-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"size\" related helper classes.",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_size.scss"
    },
    "scss.helper.class.#{sel(abs-cover)}": {
        "name": "#{sel(abs-cover)}",
        "type": "Classname",
        "description": "Set a size that will cover the entire parent surface by positionning it in absolute",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_size.scss"
    },
    "scss.helper.class.#{sel(abs-cover--top)}": {
        "name": "#{sel(abs-cover--top)}",
        "type": "Classname",
        "description": "This will align an \"abs-cover\" content to the top",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_size.scss"
    },
    "scss.helper.class.#{sel(abs-cover--middle)}": {
        "name": "#{sel(abs-cover--middle)}",
        "type": "Classname",
        "description": "This will align an \"abs-cover\" content to the middle",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_size.scss"
    },
    "scss.helper.class.#{sel(abs-cover--bottom)}": {
        "name": "#{sel(abs-cover--bottom)}",
        "type": "Classname",
        "description": "This will align an \"abs-cover\" content to the bottom",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_size.scss"
    },
    "scss.helper.class.#{sel(abs-cover--left)}": {
        "name": "#{sel(abs-cover--left)}",
        "type": "Classname",
        "description": "This will align an \"abs-cover\" content to the left",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_size.scss"
    },
    "scss.helper.class.#{sel(abs-cover--center)}": {
        "name": "#{sel(abs-cover--center)}",
        "type": "Classname",
        "description": "This will align an \"abs-cover\" content to the center",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_size.scss"
    },
    "scss.helper.class.#{sel(abs-cover--right)}": {
        "name": "#{sel(abs-cover--right)}",
        "type": "Classname",
        "description": "This will align an \"abs-cover\" content to the right",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_size.scss"
    },
    "scss.helper.class.#{sel(abs-contain)}": {
        "name": "#{sel(abs-contain)}",
        "type": "Classname",
        "description": "Set a size that will contain the entire parent surface by positionning it in absolute",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_size.scss"
    },
    "scss.helper.class.#{sel(abs-contain--top)}": {
        "name": "#{sel(abs-contain--top)}",
        "type": "Classname",
        "description": "This will align an \"abs-contain\" content to the top",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_size.scss"
    },
    "scss.helper.class.#{sel(abs-contain--middle)}": {
        "name": "#{sel(abs-contain--middle)}",
        "type": "Classname",
        "description": "This will align an \"abs-contain\" content to the middle",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_size.scss"
    },
    "scss.helper.class.#{sel(abs-contain--bottom)}": {
        "name": "#{sel(abs-contain--bottom)}",
        "type": "Classname",
        "description": "This will align an \"abs-contain\" content to the bottom",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_size.scss"
    },
    "scss.helper.class.#{sel(abs-contain--left)}": {
        "name": "#{sel(abs-contain--left)}",
        "type": "Classname",
        "description": "This will align an \"abs-contain\" content to the left",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_size.scss"
    },
    "scss.helper.class.#{sel(abs-contain--center)}": {
        "name": "#{sel(abs-contain--center)}",
        "type": "Classname",
        "description": "This will align an \"abs-contain\" content to the center",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_size.scss"
    },
    "scss.helper.class.#{sel(abs-contain--right)}": {
        "name": "#{sel(abs-contain--right)}",
        "type": "Classname",
        "description": "This will align an \"abs-contain\" content to the right",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_size.scss"
    },
    "scss.helper.class.#{sel(abs-fit)}": {
        "name": "#{sel(abs-fit)}",
        "type": "Classname",
        "description": "Set a size that will fit the entire parent surface by positionning it in absolute",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_size.scss",
        "children": {}
    },
    "scss.helper.class.helper-text-classes": {
        "name": "helper-text-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"text\" related helper classes.",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_text.scss"
    },
    "scss.helper.class.#{sel(t-#{$size})}": {
        "name": "#{sel(t-#{$size})}",
        "type": "class",
        "description": "Set the size **#{$size}** relative to the root element",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_text.scss"
    },
    "scss.helper.class.#{sel(t-#{$size}-rel)}": {
        "name": "#{sel(t-#{$size}-rel)}",
        "type": "Classname",
        "description": "Set the size **#{$size}** relative to my parent",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_text.scss"
    },
    "scss.helper.class.#{sel(t-hidden)}": {
        "name": "#{sel(t-hidden)}",
        "type": "Classname",
        "description": "Hide the text",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_text.scss"
    },
    "scss.helper.class.#{sel(t-truncate)}": {
        "name": "#{sel(t-truncate)}",
        "type": "Classname",
        "description": "Truncate the text",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_text.scss"
    },
    "scss.helper.class.#{sel(t-left)}": {
        "name": "#{sel(t-left)}",
        "type": "Classname",
        "description": "Align the text to the left",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_text.scss"
    },
    "scss.helper.class.#{sel(t-right)}": {
        "name": "#{sel(t-right)}",
        "type": "Classname",
        "description": "Align the text to the right",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_text.scss"
    },
    "scss.helper.class.#{sel(t-center)}": {
        "name": "#{sel(t-center)}",
        "type": "Classname",
        "description": "Align the text to the center",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_text.scss"
    },
    "scss.helper.class.#{sel(t-justify)}": {
        "name": "#{sel(t-justify)}",
        "type": "Classname",
        "description": "Make the text justified",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_text.scss"
    },
    "scss.helper.class.#{sel(t-lowercase)}": {
        "name": "#{sel(t-lowercase)}",
        "type": "Classname",
        "description": "Transform the text to lowercase",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_text.scss"
    },
    "scss.helper.class.#{sel(t-uppercase)}": {
        "name": "#{sel(t-uppercase)}",
        "type": "Classname",
        "description": "Transform the text to uppercase",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_text.scss"
    },
    "scss.helper.class.#{sel(t-capitalize)}": {
        "name": "#{sel(t-capitalize)}",
        "type": "Classname",
        "description": "Capizalize the words",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_text.scss"
    },
    "scss.helper.class.#{sel(t-bold)}": {
        "name": "#{sel(t-bold)}",
        "type": "Classname",
        "description": "Make the text bold",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_text.scss"
    },
    "scss.helper.class.#{sel(t-bolder)}": {
        "name": "#{sel(t-bolder)}",
        "type": "Classname",
        "description": "Make the text bolder",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_text.scss"
    },
    "scss.helper.class.#{sel(t-normal)}": {
        "name": "#{sel(t-normal)}",
        "type": "Classname",
        "description": "Make the text normal",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_text.scss"
    },
    "scss.helper.class.#{sel(t-light)}": {
        "name": "#{sel(t-light)}",
        "type": "Classname",
        "description": "Make the text light",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_text.scss"
    },
    "scss.helper.class.#{sel(t-lighter)}": {
        "name": "#{sel(t-lighter)}",
        "type": "Classname",
        "description": "Make the text lighter",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_text.scss"
    },
    "scss.helper.class.#{sel(t-italic)}": {
        "name": "#{sel(t-italic)}",
        "type": "Classname",
        "description": "Make the text italic",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_text.scss"
    },
    "scss.helper.class.#{sel(t-#{$name})}": {
        "name": "#{sel(t-#{$name})}",
        "type": "Classname",
        "description": "Apply the font \"#{$name}\"",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_text.scss"
    },
    "scss.helper.class.#{sel(t-reset)}": {
        "name": "#{sel(t-reset)}",
        "type": "Classname",
        "description": "Reset the text (font-weight, family, color, etc...)",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_text.scss"
    },
    "scss.helper.class.#{sel(t-decoration-none)}": {
        "name": "#{sel(t-decoration-none)}",
        "type": "Classname",
        "description": "Remove the text decoration",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_text.scss"
    },
    "scss.helper.class.#{sel(t-underline)}": {
        "name": "#{sel(t-underline)}",
        "type": "Classname",
        "description": "Apply the decoration underline",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_text.scss"
    },
    "scss.helper.class.#{sel(t-line-through)}": {
        "name": "#{sel(t-line-through)}",
        "type": "Classname",
        "description": "Apply the decoration line-through",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_text.scss"
    },
    "scss.helper.class.#{sel(t-overline)}": {
        "name": "#{sel(t-overline)}",
        "type": "Classname",
        "description": "Apply the decoration overline",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_text.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_text.scss",
        "children": {}
    },
    "scss.helper.class.helper-transmation-classes": {
        "name": "helper-transmation-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"transmation\" related helper classes.",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_transmation.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_transmation.scss"
    },
    "scss.helper.class.#{sel(no-transition)}": {
        "name": "#{sel(no-transition)}",
        "type": "Classname",
        "description": "Disable the transitions **only on the element**",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_transmation.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_transmation.scss"
    },
    "scss.helper.class.#{sel(clear-transition)}": {
        "name": "#{sel(clear-transition)}",
        "type": "Classname",
        "description": "Disable the transitions **on the element and all his children**",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_transmation.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_transmation.scss"
    },
    "scss.helper.class.#{sel(no-animation)}": {
        "name": "#{sel(no-animation)}",
        "type": "Classname",
        "description": "Disable the animations **only on the element**",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_transmation.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_transmation.scss"
    },
    "scss.helper.class.#{sel(clear-animation)}": {
        "name": "#{sel(clear-animation)}",
        "type": "Classname",
        "description": "Disable the transitions **on the element and all his children**",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_transmation.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_transmation.scss"
    },
    "scss.helper.class.#{sel(no-transmation)}": {
        "name": "#{sel(no-transmation)}",
        "type": "Classname",
        "description": "Disable the animations and transitions **only on the element**",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_transmation.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_transmation.scss"
    },
    "scss.helper.class.#{sel(clear-transmation)}": {
        "name": "#{sel(clear-transmation)}",
        "type": "Classname",
        "description": "Disable the animations and transitions **on the element and all his children**",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_transmation.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_transmation.scss",
        "children": {}
    },
    "scss.helper.class.helper-user-select-classes": {
        "name": "helper-user-select-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"user-select\" related helper classes.",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_user-select.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_user-select.scss"
    },
    "scss.helper.class.#{sel(user-select-none)}": {
        "name": "#{sel(user-select-none)}",
        "type": "Classname",
        "description": "Disable the selection for this element",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_user-select.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_user-select.scss"
    },
    "scss.helper.class.#{sel(user-select-all)}": {
        "name": "#{sel(user-select-all)}",
        "type": "Classname",
        "description": "Enable the selection for this element",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_user-select.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_user-select.scss"
    },
    "scss.helper.class.#{sel(user-select-text)}": {
        "name": "#{sel(user-select-text)}",
        "type": "Classname",
        "description": "The text can be selected only",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_user-select.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_user-select.scss",
        "children": {}
    },
    "scss.helper.class.helper-vertical-align-classes": {
        "name": "helper-vertical-align-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"vertical-align\" related helper classes.",
        "namespace": "scss.helper.class",
        "since": "2.0.0",
        "filename": "_vertical-align.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_vertical-align.scss"
    },
    "scss.helper.class..#{sel(align-top)}": {
        "name": ".#{sel(align-top)}",
        "type": "Classname",
        "description": "Align vertically top",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_vertical-align.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_vertical-align.scss"
    },
    "scss.helper.class..#{sel(align-bottom)}": {
        "name": ".#{sel(align-bottom)}",
        "type": "Classname",
        "description": "Align vertically bottom",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_vertical-align.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_vertical-align.scss"
    },
    "scss.helper.class..#{sel(align-middle)}": {
        "name": ".#{sel(align-middle)}",
        "type": "Classname",
        "description": "Align vertically middle",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_vertical-align.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_vertical-align.scss"
    },
    "scss.helper.class..#{sel(align-baseline)}": {
        "name": ".#{sel(align-baseline)}",
        "type": "Classname",
        "description": "Align vertically baseline",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_vertical-align.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_vertical-align.scss"
    },
    "scss.helper.class.#{sel(align-text-top)}": {
        "name": "#{sel(align-text-top)}",
        "type": "Classname",
        "description": "Align vertically text-top",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_vertical-align.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_vertical-align.scss"
    },
    "scss.helper.class.#{sel(align-text-bottom)}": {
        "name": "#{sel(align-text-bottom)}",
        "type": "Classname",
        "description": "Align vertically text-bottom",
        "namespace": "scss.helper.class",
        "since": "1.0.0",
        "filename": "_vertical-align.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/class/_vertical-align.scss",
        "children": {}
    },
    "scss.helper.function.is": {
        "name": "is",
        "type": "function",
        "description": "Check if the passed value is of a certain type\n\nHere's the available types that you can check\n- mixed => mean anything\n- null\n- url\n- px\n- pt\n- rem\n- em\n- percent | %\n- vw\n- vh\n- ex\n- ch\n- cm\n- mm\n- in\n- pc\n- s | second\n- boolean | bool\n- function\n- number\n- int | integer\n- string\n- color\n- list\n- map\n- deg | degree\n- list-{type} => check if is a list of the specified type\n- map-{type} => check if is a map of the specified type",
        "namespace": "scss.helper.function",
        "since": "1.0.0",
        "filename": "_is.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/function/_is.scss",
        "children": {}
    },
    "scss.helpers.function.margin": {
        "name": "margin",
        "type": "Function",
        "description": "This function allows you to get margin values just like the ```margin``` property but using the margins.config values",
        "namespace": "scss.helpers.function",
        "since": "2.0.0",
        "filename": "_margin.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/function/_margin.scss",
        "children": {}
    },
    "scss.helpers.function.padding": {
        "name": "padding",
        "type": "Function",
        "description": "This function allows you to get padding values just like the ```padding``` property but using the paddings.config values",
        "namespace": "scss.helpers.function",
        "since": "2.0.0",
        "filename": "_padding.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/function/_padding.scss",
        "children": {}
    },
    "scss.helper.function.type-of": {
        "name": "type-of",
        "type": "function",
        "description": "Get the type of the passed variable",
        "namespace": "scss.helper.function",
        "since": "1.0.0",
        "filename": "_type-of.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/function/_type-of.scss",
        "children": {}
    },
    "scss.helper.mixin.border-radius": {
        "name": "border-radius",
        "type": "mixin",
        "description": "Apply some border radius",
        "namespace": "scss.helper.mixin",
        "since": "1.0.0",
        "filename": "_border-radius.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/mixin/_border-radius.scss",
        "children": {}
    },
    "scss.helper.mixin.center-block": {
        "name": "center-block",
        "type": "mixin",
        "description": "Center a block element using margins etc...",
        "namespace": "scss.helper.mixin",
        "since": "1.0.0",
        "filename": "_center-block.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/mixin/_center-block.scss",
        "children": {}
    },
    "scss.helper.mixin.clearfix": {
        "name": "clearfix",
        "type": "mixin",
        "description": "Apply a clearfix on the element.\nSupported methods:\n- micro\n- facebook\n- float\n- micro",
        "namespace": "scss.helper.mixin",
        "since": "1.0.0",
        "filename": "_clearfix.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/mixin/_clearfix.scss",
        "children": {}
    },
    "scss.helper.mixin.corner": {
        "name": "corner",
        "type": "mixin",
        "description": "Apply some border radius",
        "namespace": "scss.helper.mixin",
        "since": "1.0.0",
        "filename": "_corner.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/mixin/_corner.scss",
        "children": {}
    },
    "scss.helper.mixin.fit": {
        "name": "fit",
        "type": "mixin",
        "description": "Make the element fit his container.",
        "namespace": "scss.helper.mixin",
        "since": "1.0.0",
        "filename": "_fit.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/mixin/_fit.scss",
        "children": {}
    },
    "scss.helper.mixin.position": {
        "name": "position",
        "type": "mixin",
        "description": "Set a complexe position styling like position:absolute; top:0; left:100%; etc...\nThis mixin gives you some shortcuts to align your element top, bottom, middle, center, etc...",
        "namespace": "scss.helper.mixin",
        "since": "1.0.0",
        "filename": "_position.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/mixin/_position.scss",
        "children": {}
    },
    "scss.helper.mixin.reset": {
        "name": "reset",
        "type": "mixin",
        "description": "Print out a reset css",
        "namespace": "scss.helper.mixin",
        "since": "1.0.0",
        "filename": "_reset.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/mixin/_reset.scss",
        "children": {}
    },
    "scss.helper.mixin.size": {
        "name": "size",
        "type": "mixin",
        "description": "Quicky and easily set simple or complexe size to any element",
        "namespace": "scss.helper.mixin",
        "since": "1.0.0",
        "filename": "_size.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/mixin/_size.scss",
        "children": {}
    },
    "scss.helper.mixin.translate": {
        "name": "translate",
        "type": "mixin",
        "description": "Quicky set some translates",
        "namespace": "scss.helper.mixin",
        "since": "1.0.0",
        "filename": "_translate.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/mixin/_translate.scss",
        "children": {}
    },
    "scss.helper.mixin.vertical-aligner": {
        "name": "vertical-aligner",
        "type": "mixin",
        "description": "Vertically align content by using the inline-block middle trick",
        "namespace": "scss.helper.mixin",
        "since": "1.0.0",
        "filename": "_vertical-aligner.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/mixin/_vertical-aligner.scss",
        "children": {}
    },
    "scss.helper.mixin.visually-hidden": {
        "name": "visually-hidden",
        "type": "mixin",
        "description": "Hide an element only visually. This ensure that the element is still correctly displayed in the page for SEO\nbut will not being visible to the user",
        "namespace": "scss.helper.mixin",
        "since": "1.0.0",
        "filename": "_visually-hidden.scss",
        "extension": "scss",
        "relPath": "src/scss/helper/mixin/_visually-hidden.scss",
        "children": {}
    },
    "scss.form.mixin.input-placeholder": {
        "name": "input-placeholder",
        "type": "mixin",
        "description": "Set the placeholder style for inputs, etc...",
        "namespace": "scss.form.mixin",
        "since": "1.0.0",
        "filename": "_input-placeholder.scss",
        "extension": "scss",
        "relPath": "src/scss/form/mixin/_input-placeholder.scss",
        "children": {}
    },
    "scss.font.class.font-classes": {
        "name": "font-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"font\" related classes.",
        "namespace": "scss.font.class",
        "since": "2.0.0",
        "filename": "_font.scss",
        "extension": "scss",
        "relPath": "src/scss/font/class/_font.scss"
    },
    "scss.font.class.#{sel(f-#{$name})}": {
        "name": "#{sel(f-#{$name})}",
        "type": "Classname",
        "description": "Apply the font size **#{$name}** (**#{$size}**)",
        "namespace": "scss.font.class",
        "since": "1.0.0",
        "filename": "_font.scss",
        "extension": "scss",
        "relPath": "src/scss/font/class/_font.scss",
        "children": {}
    },
    "scss.font.function.font-family": {
        "name": "font-family",
        "type": "function",
        "description": "Return the font-family string or a registered font",
        "namespace": "scss.font.function",
        "filename": "_font-family.scss",
        "extension": "scss",
        "relPath": "src/scss/font/function/_font-family.scss",
        "children": {}
    },
    "scss.font.function.font": {
        "name": "font",
        "type": "function",
        "description": "Return the font {Map} that correspond to the passed arguments",
        "namespace": "scss.font.function",
        "filename": "_font.scss",
        "extension": "scss",
        "relPath": "src/scss/font/function/_font.scss",
        "children": {}
    },
    "scss.font.mixin.font-face": {
        "name": "font-face",
        "type": "mixin",
        "description": "Helper to print a font-face",
        "namespace": "scss.font.mixin",
        "filename": "_font-face.scss",
        "extension": "scss",
        "relPath": "src/scss/font/mixin/_font-face.scss",
        "children": {
            "#{$font-family}": {
                "name": "#{$font-family}"
            }
        }
    },
    "scss.font.mixin.font": {
        "name": "font",
        "type": "mixin",
        "description": "Print all the fonts properties that correspond to the passed arguments",
        "namespace": "scss.font.mixin",
        "filename": "_font.scss",
        "extension": "scss",
        "relPath": "src/scss/font/mixin/_font.scss",
        "children": {}
    },
    "scss.filter.class.filter-classes": {
        "name": "filter-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"filter\" related classes.",
        "namespace": "scss.filter.class",
        "since": "2.0.0",
        "filename": "_filter.scss",
        "extension": "scss",
        "relPath": "src/scss/filter/class/_filter.scss"
    },
    "scss.filter.class.#{sel(fi-#{$name})}": {
        "name": "#{sel(fi-#{$name})}",
        "type": "Classname",
        "description": "Apply the filter **#{$name}**",
        "namespace": "scss.filter.class",
        "since": "1.0.0",
        "filename": "_filter.scss",
        "extension": "scss",
        "relPath": "src/scss/filter/class/_filter.scss",
        "children": {}
    },
    "scss.map.function.filter-map": {
        "name": "filter-map",
        "type": "function",
        "description": "Take a filter as parameter and parse it to return the {Map} corresponding\nThe $filter parameter can be either a registered filter name or a filter formated like `filterName(filterValue)`",
        "namespace": "scss.map.function",
        "filename": "_filter-map.scss",
        "extension": "scss",
        "relPath": "src/scss/filter/function/_filter-map.scss",
        "children": {}
    },
    "scss.filter.function.filter": {
        "name": "filter",
        "type": "function",
        "description": "Return a list with all the filters that are passed as argument\nThis will use the [./_s-filter-map.scss] function to parse the filters",
        "namespace": "scss.filter.function",
        "filename": "_filter.scss",
        "extension": "scss",
        "relPath": "src/scss/filter/function/_filter.scss",
        "children": {}
    },
    "scss.filter.mixin.filter": {
        "name": "filter",
        "type": "mixin",
        "description": "Print out a list with all the filters that are passed as argument\nThis will use the [../functions/_filter-map.scss] function to parse the filters",
        "namespace": "scss.filter.mixin",
        "filename": "_filter.scss",
        "extension": "scss",
        "relPath": "src/scss/filter/mixin/_filter.scss",
        "children": {}
    },
    "scss.effect.mixin.effect-bubble": {
        "name": "effect-bubble",
        "type": "mixin",
        "description": "Create an arrow bubble effect",
        "namespace": "scss.effect.mixin",
        "since": "1.0.0",
        "filename": "_effect-bubble.scss",
        "extension": "scss",
        "relPath": "src/scss/effect/mixin/_effect-bubble.scss",
        "children": {}
    },
    "scss.effect.mixin.effect-depth": {
        "name": "effect-depth",
        "type": "mixin",
        "description": "Generate a drop shadow depending on the depth specified",
        "namespace": "scss.effect.mixin",
        "since": "1.0.0",
        "filename": "_effect-depth.scss",
        "extension": "scss",
        "relPath": "src/scss/effect/mixin/_effect-depth.scss",
        "children": {}
    },
    "scss.effect.mixin.effect-hey": {
        "name": "effect-hey",
        "type": "mixin",
        "description": "Create a poping dot effect to catch user attention on a particular item\nThis mixin affect the :before and :after pseudo selector of the item",
        "namespace": "scss.effect.mixin",
        "since": "1.0.0",
        "filename": "_effect-hey.scss",
        "extension": "scss",
        "relPath": "src/scss/effect/mixin/_effect-hey.scss",
        "children": {}
    },
    "scss.effect.mixin.effect-long-shadow": {
        "name": "effect-long-shadow",
        "type": "mixin",
        "description": "Generate a long shadow effect like [this](https://www.google.ch/search?q=long+shadow&espv=2&biw=2560&bih=1316&source=lnms&tbm=isch&sa=X&ved=0ahUKEwjjne6x49LPAhVBHRQKHat8AW8Q_AUIBigB)",
        "namespace": "scss.effect.mixin",
        "since": "1.0.0",
        "filename": "_effect-long-shadow.scss",
        "extension": "scss",
        "relPath": "src/scss/effect/mixin/_effect-long-shadow.scss",
        "children": {}
    },
    "scss.effect.mixin.effect-side-lined": {
        "name": "effect-side-lined",
        "type": "mixin",
        "description": "Create side lines around an item",
        "namespace": "scss.effect.mixin",
        "since": "1.0.0",
        "filename": "_effect-side-lined.scss",
        "extension": "scss",
        "relPath": "src/scss/effect/mixin/_effect-side-lined.scss",
        "children": {}
    },
    "scss.core.class.classes": {
        "name": "classes",
        "type": "mixin",
        "description": "Print out all wanted registered classes like padding helpers, margin helpers, font helpers, etc...",
        "namespace": "scss.core.class",
        "filename": "_classes.scss",
        "extension": "scss",
        "relPath": "src/scss/core/class/_classes.scss",
        "children": {}
    },
    "scss.core.class.scope": {
        "name": "scope",
        "type": "mixin",
        "description": "This mixin allows you to wrap css code and specify which scope it refers to.\nThis will allows you to generate only the css scope you want like \"bare\", \"style\" or \"all\"",
        "namespace": "scss.core.class",
        "since": "2.0.0",
        "filename": "_scope.scss",
        "extension": "scss",
        "relPath": "src/scss/core/class/_scope.scss",
        "children": {}
    },
    "scss.core.var.var-define": {
        "name": "var-define",
        "type": "Function",
        "description": "This mixin simply take a variable name (or doted path) and generate the css code to define this variable",
        "namespace": "scss.core.var",
        "since": "2.0.0",
        "filename": "_define.scss",
        "extension": "scss",
        "relPath": "src/scss/core/var/_define.scss",
        "children": {}
    },
    "scss.core.var.var-name": {
        "name": "var-name",
        "type": "Function",
        "description": "This function simply take a variable name (or doted path) and generate the sugar scope name for it",
        "namespace": "scss.core.var",
        "since": "2.0.0",
        "filename": "_name.scss",
        "extension": "scss",
        "relPath": "src/scss/core/var/_name.scss",
        "children": {}
    },
    "scss.core.var.var-output": {
        "name": "var-output",
        "type": "Mixin",
        "description": "This mixin simply print out the variables that you have defined in your project",
        "namespace": "scss.core.var",
        "since": "2.0.0",
        "filename": "_output.scss",
        "extension": "scss",
        "relPath": "src/scss/core/var/_output.scss",
        "children": {}
    },
    "scss.core.string.function.parse-properties": {
        "name": "parse-properties",
        "type": "function",
        "description": "Parse a given string/list properties and return the Map corresponding to the Map description",
        "namespace": "scss.core.string.function",
        "since": "1.0.0",
        "filename": "_parse-properties.scss",
        "extension": "scss",
        "relPath": "src/scss/core/string/function/_parse-properties.scss",
        "children": {}
    },
    "scss.core.string.function.replace-tokens": {
        "name": "replace-tokens",
        "type": "function",
        "description": "Search and replace tokens like colors #primary in a passed string, list or map\nSupported tokens types :\n1. Colors : #{colorName}",
        "namespace": "scss.core.string.function",
        "since": "1.0.0",
        "filename": "_replace-tokens.scss",
        "extension": "scss",
        "relPath": "src/scss/core/string/function/_replace-tokens.scss",
        "children": {}
    },
    "scss.core.string.function.str-index": {
        "name": "str-index",
        "type": "function",
        "description": "Returns the first index of $substring in $string, or null if $string doesn’t contain $substring.",
        "namespace": "scss.core.string.function",
        "since": "1.0.0",
        "filename": "_str-index.scss",
        "extension": "scss",
        "relPath": "src/scss/core/string/function/_str-index.scss",
        "children": {}
    },
    "scss.core.string.function.str-is-url": {
        "name": "str-is-url",
        "type": "function",
        "description": "Check if a string is a url or not",
        "namespace": "scss.core.string.function",
        "since": "1.0.0",
        "filename": "_str-is-url.scss",
        "extension": "scss",
        "relPath": "src/scss/core/string/function/_str-is-url.scss",
        "children": {}
    },
    "scss.core.string.function.str-length": {
        "name": "str-length",
        "type": "function",
        "description": "Return the number of characters in the passed string",
        "namespace": "scss.core.string.function",
        "since": "1.0.0",
        "filename": "_str-length.scss",
        "extension": "scss",
        "relPath": "src/scss/core/string/function/_str-length.scss",
        "children": {}
    },
    "scss.core.string.function.str-replace": {
        "name": "str-replace",
        "type": "function",
        "description": "Replace the passed string with another one in a specific string",
        "namespace": "scss.core.string.function",
        "since": "1.0.0",
        "filename": "_str-replace.scss",
        "extension": "scss",
        "relPath": "src/scss/core/string/function/_str-replace.scss",
        "children": {}
    },
    "scss.core.string.function.str-slice": {
        "name": "str-slice",
        "type": "function",
        "description": "Returns the slice of $string starting at index $start-at and ending at index $end-at (both inclusive).",
        "namespace": "scss.core.string.function",
        "since": "1.0.0",
        "filename": "_str-slice.scss",
        "extension": "scss",
        "relPath": "src/scss/core/string/function/_str-slice.scss",
        "children": {}
    },
    "scss.core.string.function.str-split": {
        "name": "str-split",
        "type": "function",
        "description": "Split a string using a delimiter",
        "namespace": "scss.core.string.function",
        "since": "1.0.0",
        "filename": "_str-split.scss",
        "extension": "scss",
        "relPath": "src/scss/core/string/function/_str-split.scss",
        "children": {}
    },
    "scss.core.string.function.str-trim": {
        "name": "str-trim",
        "type": "function",
        "description": "trim the passed string",
        "namespace": "scss.core.string.function",
        "since": "1.0.0",
        "filename": "_str-trim.scss",
        "extension": "scss",
        "relPath": "src/scss/core/string/function/_str-trim.scss",
        "children": {}
    },
    "scss.core.string.function.str-unique-id": {
        "name": "str-unique-id",
        "type": "function",
        "description": "Generate a unique id in string format",
        "namespace": "scss.core.string.function",
        "since": "1.0.0",
        "filename": "_str-unique-id.scss",
        "extension": "scss",
        "relPath": "src/scss/core/string/function/_str-unique-id.scss",
        "children": {}
    },
    "scss.core.string.function.str-unquote": {
        "name": "str-unquote",
        "type": "function",
        "description": "Return an unquoted version of the passed string",
        "namespace": "scss.core.string.function",
        "since": "1.0.0",
        "filename": "_str-unquote.scss",
        "extension": "scss",
        "relPath": "src/scss/core/string/function/_str-unquote.scss",
        "children": {}
    },
    "scss.core.string.function.str-url-ext": {
        "name": "str-url-ext",
        "type": "function",
        "description": "Check if a string is a url or not",
        "namespace": "scss.core.string.function",
        "since": "1.0.0",
        "filename": "_str-url-ext.scss",
        "extension": "scss",
        "relPath": "src/scss/core/string/function/_str-url-ext.scss",
        "children": {}
    },
    "scss.core.space.function.space": {
        "name": "space",
        "type": "function",
        "description": "Return a value interpolated from the settings.spaces stack",
        "namespace": "scss.core.space.function",
        "since": "1.0.0",
        "filename": "_space.scss",
        "extension": "scss",
        "relPath": "src/scss/core/space/function/_space.scss",
        "children": {}
    },
    "scss.core.size.function.interpolate": {
        "name": "interpolate",
        "type": "function",
        "description": "Return the specified or calculated value of the given stack and size\ndepending on the settings.sizes ratios stack",
        "namespace": "scss.core.size.function",
        "since": "1.0.0",
        "filename": "_interpolate.scss",
        "extension": "scss",
        "relPath": "src/scss/core/size/function/_interpolate.scss",
        "children": {}
    },
    "scss.core.setting.function.setting-var": {
        "name": "setting-var",
        "type": "function",
        "description": "Get a settings from the global settings stack and return it in var(...) format",
        "namespace": "scss.core.setting.function",
        "since": "2.0.0",
        "filename": "_setting-var.scss",
        "extension": "scss",
        "relPath": "src/scss/core/setting/function/_setting-var.scss",
        "children": {}
    },
    "scss.core.setting.function.setting": {
        "name": "setting",
        "type": "function",
        "description": "Get a settings from the global settings stack",
        "namespace": "scss.core.setting.function",
        "since": "1.0.0",
        "filename": "_setting.scss",
        "extension": "scss",
        "relPath": "src/scss/core/setting/function/_setting.scss",
        "children": {}
    },
    "scss.core.math.function.math-abs": {
        "name": "math-abs",
        "type": "function",
        "description": "Return the absolute version of the passed number",
        "namespace": "scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-abs.scss",
        "extension": "scss",
        "relPath": "src/scss/core/math/function/_math-abs.scss",
        "children": {}
    },
    "scss.core.math.function.math-acos": {
        "name": "math-acos",
        "type": "function",
        "description": "Calculate the cosinus inverse of the passed angle",
        "namespace": "scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-acos.scss",
        "extension": "scss",
        "relPath": "src/scss/core/math/function/_math-acos.scss",
        "children": {}
    },
    "scss.core.math.function.math-asin": {
        "name": "math-asin",
        "type": "function",
        "description": "Calculate the sinus inverse",
        "namespace": "scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-asin.scss",
        "extension": "scss",
        "relPath": "src/scss/core/math/function/_math-asin.scss",
        "children": {}
    },
    "scss.core.math.function.math-atan": {
        "name": "math-atan",
        "type": "function",
        "description": "Calculate the tangent inverse of the passed angle",
        "namespace": "scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-atan.scss",
        "extension": "scss",
        "relPath": "src/scss/core/math/function/_math-atan.scss",
        "children": {}
    },
    "scss.core.math.function.math-ceil": {
        "name": "math-ceil",
        "type": "function",
        "description": "Rounds $number up to the next highest whole number",
        "namespace": "scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-ceil.scss",
        "extension": "scss",
        "relPath": "src/scss/core/math/function/_math-ceil.scss",
        "children": {}
    },
    "scss.core.math.function.math-convert-angle": {
        "name": "math-convert-angle",
        "type": "function",
        "description": "Convert the passed angle into another unit like rad, deg, grad or turn",
        "namespace": "scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-convert-angle.scss",
        "extension": "scss",
        "relPath": "src/scss/core/math/function/_math-convert-angle.scss",
        "children": {}
    },
    "scss.core.math.function.math-cos": {
        "name": "math-cos",
        "type": "function",
        "description": "Calculate the cosinus of the passed angle",
        "namespace": "scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-cos.scss",
        "extension": "scss",
        "relPath": "src/scss/core/math/function/_math-cos.scss",
        "children": {}
    },
    "scss.core.math.function.math-deg": {
        "name": "math-deg",
        "type": "function",
        "description": "Convert the passed unitless angle to degree",
        "namespace": "scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-deg.scss",
        "extension": "scss",
        "relPath": "src/scss/core/math/function/_math-deg.scss",
        "children": {}
    },
    "scss.core.math.function.math-even": {
        "name": "math-even",
        "type": "function",
        "description": "Convert the passed value to the closest even value",
        "namespace": "scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-even.scss",
        "extension": "scss",
        "relPath": "src/scss/core/math/function/_math-even.scss",
        "children": {}
    },
    "scss.core.math.function.math-fact": {
        "name": "math-fact",
        "type": "function",
        "description": "Returns the factorial of desired number",
        "namespace": "scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-fact.scss",
        "extension": "scss",
        "relPath": "src/scss/core/math/function/_math-fact.scss",
        "children": {}
    },
    "scss.core.math.function.math-grad": {
        "name": "math-grad",
        "type": "function",
        "description": "Convert the passed unitless angle to gradian",
        "namespace": "scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-grad.scss",
        "extension": "scss",
        "relPath": "src/scss/core/math/function/_math-grad.scss",
        "children": {}
    },
    "scss.core.math.function.math-odd": {
        "name": "math-odd",
        "type": "function",
        "description": "Convert the passed value to the closest odd value",
        "namespace": "scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-odd.scss",
        "extension": "scss",
        "relPath": "src/scss/core/math/function/_math-odd.scss",
        "children": {}
    },
    "scss.core.math.function.math-percentage": {
        "name": "math-percentage",
        "type": "function",
        "description": "Converts a unitless $number (usually a decimal between 0 and 1) to a percentage.",
        "namespace": "scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-percentage.scss",
        "extension": "scss",
        "relPath": "src/scss/core/math/function/_math-percentage.scss",
        "children": {}
    },
    "scss.core.math.function.math-pow": {
        "name": "math-pow",
        "type": "function",
        "description": "Return the calculated power of the passed base using the passed exponent",
        "namespace": "scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-pow.scss",
        "extension": "scss",
        "relPath": "src/scss/core/math/function/_math-pow.scss",
        "children": {}
    },
    "scss.core.math.function.math-rad": {
        "name": "math-rad",
        "type": "function",
        "description": "Convert the passed unitless angle to radian",
        "namespace": "scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-rad.scss",
        "extension": "scss",
        "relPath": "src/scss/core/math/function/_math-rad.scss",
        "children": {}
    },
    "scss.core.math.function.math-random": {
        "name": "math-random",
        "type": "function",
        "description": "If $limit is null, returns a random decimal number between 0 and 1.",
        "namespace": "scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-random.scss",
        "extension": "scss",
        "relPath": "src/scss/core/math/function/_math-random.scss",
        "children": {}
    },
    "scss.core.math.function.render-round-even": {
        "name": "render-round-even",
        "type": "function",
        "description": "Return the passed values in the same unit but that has been even rounded on the corresponding px value\nThis ensure that your passed value will be a round px value for final rander in the viewport",
        "namespace": "scss.core.math.function",
        "filename": "_math-render-round-even.scss",
        "extension": "scss",
        "relPath": "src/scss/core/math/function/_math-render-round-even.scss",
        "children": {}
    },
    "scss.core.math.function.render-round-odd": {
        "name": "render-round-odd",
        "type": "function",
        "description": "Return the passed values in the same unit but that has been odd rounded on the corresponding px value\nThis ensure that your passed value will be a round px value for final rander in the viewport",
        "namespace": "scss.core.math.function",
        "filename": "_math-render-round-odd.scss",
        "extension": "scss",
        "relPath": "src/scss/core/math/function/_math-render-round-odd.scss",
        "children": {}
    },
    "scss.core.math.function.render-round": {
        "name": "render-round",
        "type": "function",
        "description": "Return the passed values in the same unit but that has been rounded on the corresponding px value\nThis ensure that your passed value will be a round px value for final rander in the viewport",
        "namespace": "scss.core.math.function",
        "filename": "_math-render-round.scss",
        "extension": "scss",
        "relPath": "src/scss/core/math/function/_math-render-round.scss",
        "children": {}
    },
    "scss.core.math.function.math-round": {
        "name": "math-round",
        "type": "function",
        "description": "Rounds $number to the nearest whole number.",
        "namespace": "scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-round.scss",
        "extension": "scss",
        "relPath": "src/scss/core/math/function/_math-round.scss",
        "children": {}
    },
    "scss.core.math.function.math-sin": {
        "name": "math-sin",
        "type": "function",
        "description": "Calculate the sinus of the passed angle",
        "namespace": "scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-sin.scss",
        "extension": "scss",
        "relPath": "src/scss/core/math/function/_math-sin.scss",
        "children": {}
    },
    "scss.core.math.function.math-sqrt": {
        "name": "math-sqrt",
        "type": "function",
        "description": "Return the square root of the passed number",
        "namespace": "scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-sqrt.scss",
        "extension": "scss",
        "relPath": "src/scss/core/math/function/_math-sqrt.scss",
        "children": {}
    },
    "scss.core.math.function.math-tan": {
        "name": "math-tan",
        "type": "function",
        "description": "Calculate the tangent of the passed angle",
        "namespace": "scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-tan.scss",
        "extension": "scss",
        "relPath": "src/scss/core/math/function/_math-tan.scss",
        "children": {}
    },
    "scss.core.math.function.math-turn": {
        "name": "math-turn",
        "type": "function",
        "description": "Convert the passed unitless angle to turn",
        "namespace": "scss.core.math.function",
        "since": "1.0.0",
        "filename": "_math-turn.scss",
        "extension": "scss",
        "relPath": "src/scss/core/math/function/_math-turn.scss",
        "children": {}
    },
    "scss.core.map.function.dash-to-map": {
        "name": "dash-to-map",
        "type": "function",
        "description": "Transform a dash notation value into a map\nDash notation value is : -key1 value1 -key2 value2",
        "namespace": "scss.core.map.function",
        "since": "1.0.0",
        "filename": "_dash-to-map.scss",
        "extension": "scss",
        "relPath": "src/scss/core/map/function/_dash-to-map.scss",
        "children": {}
    },
    "scss.core.map.function.map-deep-values": {
        "name": "map-deep-values",
        "type": "function",
        "description": "Get values of a map even if it is deep",
        "namespace": "scss.core.map.function",
        "since": "1.0.0",
        "filename": "_map-deep-values.scss",
        "extension": "scss",
        "relPath": "src/scss/core/map/function/_map-deep-values.scss",
        "children": {}
    },
    "scss.core.map.function.map-extend": {
        "name": "map-extend",
        "type": "function",
        "description": "Extend the passed map with the others passed map(s)",
        "namespace": "scss.core.map.function",
        "since": "1.0.0",
        "filename": "_map-extend.scss",
        "extension": "scss",
        "relPath": "src/scss/core/map/function/_map-extend.scss",
        "children": {}
    },
    "scss.core.map.function.map-filter-by-namespace": {
        "name": "map-filter-by-namespace",
        "type": "function",
        "description": "Return all the map values that have a key that match the passed namespace",
        "namespace": "scss.core.map.function",
        "since": "1.0.0",
        "filename": "_map-filter-by-namespace.scss",
        "extension": "scss",
        "relPath": "src/scss/core/map/function/_map-filter-by-namespace.scss",
        "children": {}
    },
    "scss.core.map.function.map-filter": {
        "name": "map-filter",
        "type": "function",
        "description": "Filter a map by key, value and the passed processor function",
        "namespace": "scss.core.map.function",
        "since": "2.0.0",
        "filename": "_map-filter.scss",
        "extension": "scss",
        "relPath": "src/scss/core/map/function/_map-filter.scss",
        "children": {}
    },
    "scss.core.map.function.map-flatten": {
        "name": "map-flatten",
        "type": "Function",
        "description": "This function take a map (that can be a deep one) and returns you a new map with all the\nproperties flatten using the passed \"separator\"",
        "namespace": "scss.core.map.function",
        "since": "2.0.0",
        "filename": "_map-flatten.scss",
        "extension": "scss",
        "relPath": "src/scss/core/map/function/_map-flatten.scss",
        "children": {}
    },
    "scss.core.map.function.map-get": {
        "name": "map-get",
        "type": "function",
        "description": "Get a value in the passed map using the passed key",
        "namespace": "scss.core.map.function",
        "since": "1.0.0",
        "filename": "_map-get.scss",
        "extension": "scss",
        "relPath": "src/scss/core/map/function/_map-get.scss",
        "children": {}
    },
    "scss.core.map.function.map-has-key": {
        "name": "map-has-key",
        "type": "function",
        "description": "Check if the passed map has the passed key. Return true if has, false if not",
        "namespace": "scss.core.map.function",
        "since": "1.0.0",
        "filename": "_map-has-key.scss",
        "extension": "scss",
        "relPath": "src/scss/core/map/function/_map-has-key.scss",
        "children": {}
    },
    "scss.core.map.function.map-keys": {
        "name": "map-keys",
        "type": "function",
        "description": "Return a comma separated list of the map keys",
        "namespace": "scss.core.map.function",
        "since": "1.0.0",
        "filename": "_map-keys.scss",
        "extension": "scss",
        "relPath": "src/scss/core/map/function/_map-keys.scss",
        "children": {}
    },
    "scss.core.map.function.map-merge": {
        "name": "map-merge",
        "type": "function",
        "description": "Merge the first passed map with the second passed one and return the result",
        "namespace": "scss.core.map.function",
        "since": "1.0.0",
        "filename": "_map-merge.scss",
        "extension": "scss",
        "relPath": "src/scss/core/map/function/_map-merge.scss",
        "children": {}
    },
    "scss.core.map.function.map-remove": {
        "name": "map-remove",
        "type": "function",
        "description": "Remove one or multiple keys from the passed map",
        "namespace": "scss.core.map.function",
        "since": "1.0.0",
        "filename": "_map-remove.scss",
        "extension": "scss",
        "relPath": "src/scss/core/map/function/_map-remove.scss",
        "children": {}
    },
    "scss.core.map.function.map-set": {
        "name": "map-set",
        "type": "function",
        "description": "Set a map property with the passed value",
        "namespace": "scss.core.map.function",
        "since": "1.0.0",
        "filename": "_map-set.scss",
        "extension": "scss",
        "relPath": "src/scss/core/map/function/_map-set.scss",
        "children": {}
    },
    "scss.core.map.function.map-to-css-variables": {
        "name": "map-to-css-variables",
        "type": "Mixin",
        "description": "THis mixin simply take a single level map and convert it to\ncss variables declarations like ```--my-cool-variable: 10px```",
        "namespace": "scss.core.map.function",
        "since": "2.0.0",
        "filename": "_map-to-css-variables.scss",
        "extension": "scss",
        "relPath": "src/scss/core/map/function/_map-to-css-variables.scss",
        "children": {}
    },
    "scss.core.list.function.list-append": {
        "name": "list-append",
        "type": "function",
        "description": "Append a value to the passed list",
        "namespace": "scss.core.list.function",
        "since": "1.0.0",
        "filename": "_list-append.scss",
        "extension": "scss",
        "relPath": "src/scss/core/list/function/_list-append.scss",
        "children": {}
    },
    "scss.core.list.function.list-first": {
        "name": "list-first",
        "type": "function",
        "description": "Return the first element of the passed list",
        "namespace": "scss.core.list.function",
        "since": "1.0.0",
        "filename": "_list-first.scss",
        "extension": "scss",
        "relPath": "src/scss/core/list/function/_list-first.scss",
        "children": {}
    },
    "scss.core.list.function.list-implode": {
        "name": "list-implode",
        "type": "function",
        "description": "Join all the list items using the passed glue and return a string",
        "namespace": "scss.core.list.function",
        "since": "1.0.0",
        "filename": "_list-implode.scss",
        "extension": "scss",
        "relPath": "src/scss/core/list/function/_list-implode.scss",
        "children": {}
    },
    "scss.core.list.function.list-index": {
        "name": "list-index",
        "type": "function",
        "description": "Return the index of the wanted value in the passed list.",
        "namespace": "scss.core.list.function",
        "since": "1.0.0",
        "filename": "_list-index.scss",
        "extension": "scss",
        "relPath": "src/scss/core/list/function/_list-index.scss",
        "children": {}
    },
    "scss.core.list.function.list-join": {
        "name": "list-join",
        "type": "function",
        "description": "Return a string representing all the list items",
        "namespace": "scss.core.list.function",
        "since": "1.0.0",
        "filename": "_list-join.scss",
        "extension": "scss",
        "relPath": "src/scss/core/list/function/_list-join.scss",
        "children": {}
    },
    "scss.core.list.function.list-last-nth": {
        "name": "list-last-nth",
        "type": "function",
        "description": "Return the last item of the passed list",
        "namespace": "scss.core.list.function",
        "since": "1.0.0",
        "filename": "_list-last-nth.scss",
        "extension": "scss",
        "relPath": "src/scss/core/list/function/_list-last-nth.scss",
        "children": {}
    },
    "scss.core.list.function.list-length": {
        "name": "list-length",
        "type": "function",
        "description": "Return the number of item in the passed list",
        "namespace": "scss.core.list.function",
        "since": "1.0.0",
        "filename": "_list-length.scss",
        "extension": "scss",
        "relPath": "src/scss/core/list/function/_list-length.scss",
        "children": {}
    },
    "scss.core.list.function.list-nth": {
        "name": "list-nth",
        "type": "function",
        "description": "Return the item of the list at the passed index",
        "namespace": "scss.core.list.function",
        "since": "1.0.0",
        "filename": "_list-nth.scss",
        "extension": "scss",
        "relPath": "src/scss/core/list/function/_list-nth.scss",
        "children": {}
    },
    "scss.core.list.function.list-pop": {
        "name": "list-pop",
        "type": "function",
        "description": "Remove the last item of the passed list",
        "namespace": "scss.core.list.function",
        "since": "1.0.0",
        "filename": "_list-pop.scss",
        "extension": "scss",
        "relPath": "src/scss/core/list/function/_list-pop.scss",
        "children": {}
    },
    "scss.core.list.function.list-prepend": {
        "name": "list-prepend",
        "type": "function",
        "description": "Prepend a value in the passed list",
        "namespace": "scss.core.list.function",
        "since": "1.0.0",
        "filename": "_list-prepend.scss",
        "extension": "scss",
        "relPath": "src/scss/core/list/function/_list-prepend.scss",
        "children": {}
    },
    "scss.core.list.function.list-remove-nth": {
        "name": "list-remove-nth",
        "type": "function",
        "description": "Remove item from list using an index",
        "namespace": "scss.core.list.function",
        "since": "1.0.0",
        "filename": "_list-remove-nth.scss",
        "extension": "scss",
        "relPath": "src/scss/core/list/function/_list-remove-nth.scss",
        "children": {}
    },
    "scss.core.list.function.list-search": {
        "name": "list-search",
        "type": "function",
        "description": "Search for the passed value in the passed list and return true if exist, false if not",
        "namespace": "scss.core.list.function",
        "since": "1.0.0",
        "filename": "_list-search.scss",
        "extension": "scss",
        "relPath": "src/scss/core/list/function/_list-search.scss",
        "children": {}
    },
    "scss.core.list.function.list-set-nth": {
        "name": "list-set-nth",
        "type": "function",
        "description": "Set a value in the passed list at the passed index. The original value at the passed index will be replaced with the passed value",
        "namespace": "scss.core.list.function",
        "since": "1.0.0",
        "filename": "_list-set-nth.scss",
        "extension": "scss",
        "relPath": "src/scss/core/list/function/_list-set-nth.scss",
        "children": {}
    },
    "scss.core.dev.test-argument": {
        "name": "test-argument",
        "type": "function",
        "description": "Test an argument passed to a function or a mixin to ensure his type, value, etc...\nIf the argument does not pass the test, an error will be thrown, unless the $check-only argument is true",
        "namespace": "scss.core.dev",
        "filename": "_test-argument.scss",
        "extension": "scss",
        "relPath": "src/scss/core/dev/function/_test-argument.scss",
        "children": {}
    },
    "scss.core.context.function.context": {
        "name": "context",
        "type": "function",
        "namespace": "scss.core.context.function",
        "filename": "_context.scss",
        "extension": "scss",
        "relPath": "src/scss/core/context/function/_context.scss",
        "children": {}
    },
    "scss.core.context.mixin.context-setup": {
        "name": "context-setup",
        "type": "mixin",
        "description": "Register a context with a name to use it later",
        "namespace": "scss.core.context.mixin",
        "filename": "_context-setup.scss",
        "extension": "scss",
        "relPath": "src/scss/core/context/mixin/_context-setup.scss",
        "children": {}
    },
    "scss.core.context.mixin.context": {
        "name": "context",
        "type": "mixin",
        "description": "Set a context to be used inside the mixin",
        "namespace": "scss.core.context.mixin",
        "filename": "_context.scss",
        "extension": "scss",
        "relPath": "src/scss/core/context/mixin/_context.scss",
        "children": {}
    },
    "scss.component.mixin.card-classes": {
        "name": "card-classes",
        "type": "Mixin",
        "description": "This mixin generate all the css needed to display properly some cards.",
        "namespace": "scss.component.mixin",
        "since": "2.0.0",
        "filename": "_card.scss",
        "extension": "scss",
        "relPath": "src/scss/component/mixin/_card.scss"
    },
    "scss.component.mixin.card.card-bare-classes": {
        "name": "card-bare-classes",
        "type": "Mixin",
        "description": "This mixin generate all the bare classes depending on the parameters you set.",
        "namespace": "scss.component.mixin.card",
        "since": "2.0.0",
        "filename": "_card.scss",
        "extension": "scss",
        "relPath": "src/scss/component/mixin/_card.scss"
    },
    "scss.component.mixin.card.card-style-classes": {
        "name": "card-style-classes",
        "type": "Mixin",
        "description": "This mixin generate all the style classes depending on the parameters you set.",
        "namespace": "scss.component.mixin.card",
        "since": "2.0.0",
        "filename": "_card.scss",
        "extension": "scss",
        "relPath": "src/scss/component/mixin/_card.scss"
    },
    "scss.component.mixin.card.card": {
        "name": "card",
        "type": "Mixin",
        "description": "This mixin generate all the properties for a button depending on the parameters you set.",
        "namespace": "scss.component.mixin.card",
        "since": "2.0.0",
        "filename": "_card.scss",
        "extension": "scss",
        "relPath": "src/scss/component/mixin/_card.scss"
    },
    "scss.component.mixin.card.card-bare": {
        "name": "card-bare",
        "type": "Mixin",
        "description": "This mixin generate all the bare properties for a button depending on the parameters you set.",
        "namespace": "scss.component.mixin.card",
        "since": "2.0.0",
        "filename": "_card.scss",
        "extension": "scss",
        "relPath": "src/scss/component/mixin/_card.scss"
    },
    "scss.component.mixin.card.card-style": {
        "name": "card-style",
        "type": "Mixin",
        "description": "This mixin generate all the style properties for a button depending on the parameters you set.",
        "namespace": "scss.component.mixin.card",
        "since": "2.0.0",
        "filename": "_card.scss",
        "extension": "scss",
        "relPath": "src/scss/component/mixin/_card.scss",
        "children": {}
    },
    "scss.component.mixin.inline-bar": {
        "name": "inline-bar",
        "type": "Mixin",
        "description": "This mixin allows you to display an inline styled bar.\nPretty simple you may think but this is very usefull for somple displays like\nshields display, links, etc...\nTheir's also the mixin ```inline-bar-bare``` and ```inline-bar-style``` that you\ncan use if you need more controls.",
        "namespace": "scss.component.mixin",
        "since": "2.0.0",
        "filename": "_inline-bar.scss",
        "extension": "scss",
        "relPath": "src/scss/component/mixin/_inline-bar.scss",
        "children": {}
    },
    "scss.component.mixin.user-avatar": {
        "name": "user-avatar",
        "type": "Mixin",
        "description": "This mixin display a user-avatar with a name and an image.\nTheir's also the mixin ```user-avatar-bare``` and ```user-avatar-style``` that you\ncan use if you need more controls.",
        "namespace": "scss.component.mixin",
        "since": "2.0.0",
        "filename": "_user-avatar.scss",
        "extension": "scss",
        "relPath": "src/scss/component/mixin/_user-avatar.scss",
        "children": {}
    },
    "scss.component.ul.class.ul-classes": {
        "name": "ul-classes",
        "type": "Mixin",
        "description": "This mixin generate all the css needed to display properly some unordered lists.",
        "namespace": "scss.component.ul.class",
        "since": "2.0.0",
        "filename": "_ul.scss",
        "extension": "scss",
        "relPath": "src/scss/component/ul/class/_ul.scss",
        "children": {}
    },
    "scss.component.ul.mixin.ul": {
        "name": "ul",
        "type": "Mixin",
        "description": "Generate the properties and child css for the ul component",
        "namespace": "scss.component.ul.mixin",
        "since": "2.0.0",
        "filename": "_ul.scss",
        "extension": "scss",
        "relPath": "src/scss/component/ul/mixin/_ul.scss",
        "children": {}
    },
    "scss.component.title.title-classes": {
        "name": "title-classes",
        "type": "Mixin",
        "description": "This mixin generate all the css needed to display properly some titles.",
        "namespace": "scss.component.title",
        "since": "2.0.0",
        "filename": "_title.scss",
        "extension": "scss",
        "relPath": "src/scss/component/title/class/_title.scss"
    },
    "scss.component.title..#{sel(#{$name}#{$i})}, .#{sel(#{tf-class()})} h#{$i}": {
        "name": ".#{sel(#{$name}#{$i})}, .#{sel(#{tf-class()})} h#{$i}",
        "type": "Classname",
        "description": "This class can be applied on any ```#{$name}``` component to specify his size to ```#{$i}```",
        "namespace": "scss.component.title",
        "since": "2.0.0",
        "filename": "_title.scss",
        "extension": "scss",
        "relPath": "src/scss/component/title/class/_title.scss",
        "children": {}
    },
    "scss.component.title.title": {
        "name": "title",
        "type": "Mixin",
        "description": "This mixin generate all the properties for a title depending on the parameters you set.",
        "namespace": "scss.component.title",
        "since": "2.0.0",
        "filename": "_title.scss",
        "extension": "scss",
        "relPath": "src/scss/component/title/mixin/_title.scss",
        "children": {}
    },
    "scss.shadow.class.#{sel(shadow)}": {
        "name": "#{sel(shadow)}",
        "type": "class",
        "description": "Apply the default shadow to the element",
        "namespace": "scss.shadow.class",
        "since": "2.0.0",
        "filename": "_shadow.scss",
        "extension": "scss",
        "relPath": "src/scss/component/shadow/class/_shadow.scss"
    },
    "scss.shadow.class.#{sel(shadow--small)}": {
        "name": "#{sel(shadow--small)}",
        "type": "class",
        "description": "Apply the small shadow to the element",
        "namespace": "scss.shadow.class",
        "since": "2.0.0",
        "filename": "_shadow.scss",
        "extension": "scss",
        "relPath": "src/scss/component/shadow/class/_shadow.scss"
    },
    "scss.shadow.class.#{sel(shadow--big)}": {
        "name": "#{sel(shadow--big)}",
        "type": "class",
        "description": "Apply the big shadow to the element",
        "namespace": "scss.shadow.class",
        "since": "2.0.0",
        "filename": "_shadow.scss",
        "extension": "scss",
        "relPath": "src/scss/component/shadow/class/_shadow.scss",
        "children": {}
    },
    "scss.component.paragraph.class.paragraph-classes": {
        "name": "paragraph-classes",
        "type": "Mixin",
        "description": "This mixin generate all the css needed to display properly some paragraphs.",
        "namespace": "scss.component.paragraph.class",
        "since": "2.0.0",
        "filename": "_paragraph.scss",
        "extension": "scss",
        "relPath": "src/scss/component/paragraph/class/_paragraph.scss"
    },
    "scss.component..#{sel(#{$name}--#{$n})}, .#{sel(#{tf-class()})} #{sel('p.#{$n}', null)}": {
        "name": ".#{sel(#{$name}--#{$n})}, .#{sel(#{tf-class()})} #{sel('p.#{$n}', null)}",
        "type": "Classname",
        "description": "This class can be applied on any ```#{$name}``` component to specify his style",
        "namespace": "scss.component",
        "since": "2.0.0",
        "filename": "_paragraph.scss",
        "extension": "scss",
        "relPath": "src/scss/component/paragraph/class/_paragraph.scss",
        "children": {}
    },
    "scss.component.paragraph.mixin.paragraph": {
        "name": "paragraph",
        "type": "Mixin",
        "description": "This mixin generate all the properties for a paragraph depending on the parameters you set.",
        "namespace": "scss.component.paragraph.mixin",
        "since": "2.0.0",
        "filename": "_paragraph.scss",
        "extension": "scss",
        "relPath": "src/scss/component/paragraph/mixin/_paragraph.scss",
        "children": {}
    },
    "scss.component.ol.class.ol-classes": {
        "name": "ol-classes",
        "type": "Mixin",
        "description": "This mixin generate all the css needed to display properly some ordered lists.",
        "namespace": "scss.component.ol.class",
        "since": "2.0.0",
        "filename": "_ol.scss",
        "extension": "scss",
        "relPath": "src/scss/component/ol/class/_ol.scss"
    },
    "scss.component..#{sel(#{$name}--#{$size})}": {
        "name": ".#{sel(#{$name}--#{$size})}",
        "type": "Classname",
        "description": "This class can be applied on any ```#{$name}``` component to specify his size to ```#{$size}```",
        "namespace": "scss.component",
        "since": "2.0.0",
        "filename": "_ol.scss",
        "extension": "scss",
        "relPath": "src/scss/component/ol/class/_ol.scss"
    },
    "scss.component..#{sel(#{$name}--#{$color})}": {
        "name": ".#{sel(#{$name}--#{$color})}",
        "type": "Classname",
        "description": "This class can be applied on any ```#{$name}``` component to specify his size to ```#{$color}```",
        "namespace": "scss.component",
        "since": "2.0.0",
        "filename": "_ol.scss",
        "extension": "scss",
        "relPath": "src/scss/component/ol/class/_ol.scss",
        "children": {}
    },
    "scss.component.ol.mixin.ol": {
        "name": "ol",
        "type": "Mixin",
        "description": "Generate the properties and child css for the ol component",
        "namespace": "scss.component.ol.mixin",
        "since": "2.0.0",
        "filename": "_ol.scss",
        "extension": "scss",
        "relPath": "src/scss/component/ol/mixin/_ol.scss",
        "children": {}
    },
    "scss.core.class.icons.#{sel(icon-#{$name})}": {
        "name": "#{sel(icon-#{$name})}",
        "type": "class",
        "description": "```.icon-#{$name}``` icon class",
        "namespace": "scss.core.class.icons",
        "since": "2.0.0",
        "filename": "_icons.scss",
        "extension": "scss",
        "relPath": "src/scss/component/icon/class/_icons.scss",
        "children": {}
    },
    "scss.icon.mixin.icon": {
        "name": "icon",
        "type": "mixin",
        "description": "Apply an icon on the element. This mixin support font-awesome and custom icons systems that have an icon name formated like \"icon-{name}\"\nThe custom icon style if you pass as name \"user\" will extend %icon, %icon-user, .icon and .icon-user classes",
        "namespace": "scss.icon.mixin",
        "filename": "_icon.scss",
        "extension": "scss",
        "relPath": "src/scss/component/icon/mixin/_icon.scss",
        "children": {}
    },
    "scss.icon.mixin.icons": {
        "name": "icons",
        "type": "mixin",
        "description": "Generate some icon classes like .icon-$icon-name",
        "namespace": "scss.icon.mixin",
        "since": "1.0.0",
        "filename": "_icons.scss",
        "extension": "scss",
        "relPath": "src/scss/component/icon/mixin/_icons.scss",
        "children": {}
    },
    "scss.icon.mixin.register-svg-icon": {
        "name": "register-svg-icon",
        "type": "mixin",
        "description": "Register a new icon to be used as base64 encoded url.\nIf you want your icon to be colorable, you need to specify this code on your paths: `style=\"fill:%color\"`",
        "namespace": "scss.icon.mixin",
        "since": "1.0.0",
        "filename": "_register-svg-icon.scss",
        "extension": "scss",
        "relPath": "src/scss/component/icon/mixin/_register-svg-icon.scss",
        "children": {}
    },
    "scss.component.button.class.button-classes": {
        "name": "button-classes",
        "type": "Mixin",
        "description": "This mixin generate all the css needed to display properly some buttons.",
        "namespace": "scss.component.button.class",
        "since": "2.0.0",
        "filename": "_button.scss",
        "extension": "scss",
        "relPath": "src/scss/component/button/class/_button.scss"
    },
    "scss.component.button..#{sel($name)}, .#{sel(#{tf-class()})} button": {
        "name": ".#{sel($name)}, .#{sel(#{tf-class()})} button",
        "type": "Classname",
        "description": "This class can be applied on any ```#{$name}``` component",
        "namespace": "scss.component.button",
        "since": "2.0.0",
        "filename": "_button.scss",
        "extension": "scss",
        "relPath": "src/scss/component/button/class/_button.scss",
        "children": {}
    },
    "scss.component.button.mixin.button": {
        "name": "button",
        "type": "Mixin",
        "description": "This mixin generate all the properties for a button depending on the parameters you set.",
        "namespace": "scss.component.button.mixin",
        "since": "2.0.0",
        "filename": "_button.scss",
        "extension": "scss",
        "relPath": "src/scss/component/button/mixin/_button.scss",
        "children": {}
    },
    "scss.color.class.color-classes": {
        "name": "color-classes",
        "type": "Mixin",
        "description": "This mixin generate all the \"color\" related classes.",
        "namespace": "scss.color.class",
        "since": "2.0.0",
        "filename": "_color.scss",
        "extension": "scss",
        "relPath": "src/scss/color/class/_color.scss"
    },
    "scss.colo.class.#{$cls}": {
        "name": "#{$cls}",
        "type": "Classname",
        "description": "Specify the color to **#{$name}**",
        "namespace": "scss.colo.class",
        "since": "1.0.0",
        "filename": "_color.scss",
        "extension": "scss",
        "relPath": "src/scss/color/class/_color.scss"
    },
    "scss.color.class.#{$cls}": {
        "name": "#{$cls}",
        "type": "class",
        "description": "Specify the background color to **#{$name}--#{$mod-name}**",
        "namespace": "scss.color.class",
        "since": "1.0.0",
        "filename": "_color.scss",
        "extension": "scss",
        "relPath": "src/scss/color/class/_color.scss",
        "children": {}
    },
    "scss.core.color.color-hue": {
        "name": "color-hue",
        "type": "Function",
        "description": "Return the hue of the passed color",
        "namespace": "scss.core.color",
        "since": "1.0.0",
        "filename": "_color-hue.scss",
        "extension": "scss",
        "relPath": "src/scss/color/function/_color-hue.scss",
        "children": {}
    },
    "scss.core.color.color-lightness": {
        "name": "color-lightness",
        "type": "Function",
        "description": "Return the lightness of the passed color",
        "namespace": "scss.core.color",
        "since": "1.0.0",
        "filename": "_color-lightness.scss",
        "extension": "scss",
        "relPath": "src/scss/color/function/_color-lightness.scss",
        "children": {}
    },
    "scss.core.color.color-modifier": {
        "name": "color-modifier",
        "type": "function",
        "description": "Return the color in a modifier list",
        "namespace": "scss.core.color",
        "filename": "_color-modifier.scss",
        "extension": "scss",
        "relPath": "src/scss/color/function/_color-modifier.scss",
        "children": {}
    },
    "scss.core.color.color-opacity": {
        "name": "color-opacity",
        "type": "Function",
        "description": "Return the opacity of the passed color",
        "namespace": "scss.core.color",
        "since": "1.0.0",
        "filename": "_color-opacity.scss",
        "extension": "scss",
        "relPath": "src/scss/color/function/_color-opacity.scss",
        "children": {}
    },
    "scss.core.color.color-saturation": {
        "name": "color-saturation",
        "type": "Function",
        "description": "Return the saturation of the passed color",
        "namespace": "scss.core.color",
        "since": "1.0.0",
        "filename": "_color-saturation.scss",
        "extension": "scss",
        "relPath": "src/scss/color/function/_color-saturation.scss",
        "children": {}
    },
    "scss.core.color.color-schema": {
        "name": "color-schema",
        "type": "mixin",
        "description": "Print out the scoped color schema css",
        "namespace": "scss.core.color",
        "filename": "_color-schema.scss",
        "extension": "scss",
        "relPath": "src/scss/color/function/_color-schema.scss",
        "children": {}
    },
    "scss.core.color.color-transparentize": {
        "name": "color-transparentize",
        "type": "Function",
        "description": "Makes $color more transparent.\nThe $amount must be a number between 0 and 1 (inclusive). Decreases the alpha channel of $color by that amount.",
        "namespace": "scss.core.color",
        "since": "1.0.0",
        "filename": "_color-transparentize.scss",
        "extension": "scss",
        "relPath": "src/scss/color/function/_color-transparentize.scss",
        "children": {}
    },
    "scss.core.color.color-var": {
        "name": "color-var",
        "type": "function",
        "description": "Get a registered color by name or wrap a new color into a sugar.color call\nto manipulate it with ease.\nSupported modifier :\n- hue {Deg}\n- lighten {Percent}\n- darken {Percent}\n- saturate {Percent}\n- desaturate {Percent}\n- grayscale {Boolean}\n- complement {Boolean}\n- invert {Boolean}\n- opacity {Percent}\n- mix {Color}\n- lightness {Percent}\n- saturation {Percent}",
        "namespace": "scss.core.color",
        "filename": "_color-var.scss",
        "extension": "scss",
        "relPath": "src/scss/color/function/_color-var.scss",
        "children": {}
    },
    "scss.core.color.color": {
        "name": "color",
        "type": "function",
        "description": "Get a registered color by name or wrap a new color into a sugar.color call\nto manipulate it with ease.\nSupported actions :\n- hue {Deg}\n- lighten {Percent}\n- darken {Percent}\n- saturate {Percent}\n- desaturate {Percent}\n- grayscale {Boolean}\n- complement {Boolean}\n- invert {Boolean}\n- opacity {Percent}\n- mix {Color}\n- lightness {Percent}\n- saturation {Percent}",
        "namespace": "scss.core.color",
        "filename": "_color.scss",
        "extension": "scss",
        "relPath": "src/scss/color/function/_color.scss",
        "children": {}
    },
    "scss.core.color.has-color": {
        "name": "has-color",
        "type": "function",
        "description": "Check if the provided color is a registered one or not",
        "namespace": "scss.core.color",
        "filename": "_has-color.scss",
        "extension": "scss",
        "relPath": "src/scss/color/function/_has-color.scss",
        "children": {}
    },
    "scss.color.mixin.define-color-variables": {
        "name": "define-color-variables",
        "type": "Mixin",
        "description": "This mixin simply define correctly the color variables",
        "namespace": "scss.color.mixin",
        "since": "2.0.0",
        "filename": "_define-color-variables.scss",
        "extension": "scss",
        "relPath": "src/scss/color/mixin/_define-color-variables.scss",
        "children": {}
    },
    "scss.core.color.docblock-colors": {
        "name": "docblock-colors",
        "type": "mixin",
        "description": "Print the styleguide docblocks for the registered sugar colors",
        "namespace": "scss.core.color",
        "filename": "_docblock-colors.scss",
        "extension": "scss",
        "relPath": "src/scss/color/mixin/_docblock-colors.scss",
        "children": {}
    },
    "scss.coffeekraken.mixin.coffeekraken-logo": {
        "name": "coffeekraken-logo",
        "type": "mixin",
        "description": "Display a coffeekraken logo with two specified colors",
        "namespace": "scss.coffeekraken.mixin",
        "since": "1.0.0",
        "filename": "_coffeekraken-logo.scss",
        "extension": "scss",
        "relPath": "src/scss/coffeekraken/mixin/_coffeekraken-logo.scss",
        "children": {}
    },
    "scss.animation.mixin.animation": {
        "name": "animation",
        "type": "mixin",
        "description": "Print out the animation property calculated with the passed arguments\nThis mixin support all the standard css animation properties like name, duration, delay, ease, direction and fill-mode.\nThe $animations argument will be parsed with the [../functions/_s-parse-properties.scss] function.\nIf you specify multiple animations at a time, this mixin will take care\nof the delay calculation for each animations and make them play one after another",
        "namespace": "scss.animation.mixin",
        "filename": "_animation.scss",
        "extension": "scss",
        "relPath": "src/scss/animation/mixin/_animation.scss",
        "children": {}
    },
    "php.array.Sugar\\ar\\merge_deep": {
        "name": "Sugar\\ar\\merge_deep",
        "type": "Function",
        "description": "This function take two arrays and merge them deeply by keeping distinct\nproperty keys.",
        "namespace": "php.array",
        "since": "2.0.0",
        "filename": "merge_deep.php",
        "extension": "php",
        "relPath": "src/php/array/merge_deep.php",
        "children": {}
    },
    "php.network.ip_address": {
        "name": "ip_address",
        "type": "Function",
        "description": "This function allows you to get either your \"local\" ip in the local network, either\nyour public ip address on the internet.",
        "namespace": "php.network",
        "since": "2.0.0",
        "filename": "ip_address.php",
        "extension": "php",
        "relPath": "src/php/network/ip_address.php",
        "children": {}
    },
    "php.path.Sugar\\path\\is_absolute": {
        "name": "Sugar\\path\\is_absolute",
        "type": "Function",
        "description": "This method simply check if the passed path is absolute or not",
        "namespace": "php.path",
        "since": "2.0.0",
        "filename": "is_absolute.php",
        "extension": "php",
        "relPath": "src/php/path/is_absolute.php",
        "children": {}
    },
    "php.string.replace_tokens": {
        "name": "replace_tokens",
        "type": "Function",
        "description": "This function take care of replacing some tokens like \"%serverIp\", \"%clientIp\", etc...\nHere's the list of supported tokens: (this list can be updated with new tokens)\n- %serverIp: Server ip address\n- %clientIp: Client ip address",
        "namespace": "php.string",
        "since": "2.0.0",
        "filename": "replace_tokens.php",
        "extension": "php",
        "relPath": "src/php/string/replace_tokens.php",
        "children": {}
    },
    "php.url.Sugar\\url\\is_url": {
        "name": "Sugar\\url\\is_url",
        "type": "Function",
        "description": "This function simply check if the passed string a an url or not",
        "namespace": "php.url",
        "since": "2.0.0",
        "filename": "is_url.php",
        "extension": "php",
        "relPath": "src/php/url/is_url.php",
        "children": {}
    },
    "php.views.layouts.main": {
        "name": "main",
        "type": "blade",
        "description": "Main layout that handle things like scripts import, stylesheets import, etc...",
        "namespace": "php.views.layouts",
        "since": "2.0.0",
        "filename": "main.blade.php",
        "extension": "blade",
        "relPath": "src/php/views/blade/layouts/main.blade.php",
        "children": {}
    },
    "node.blessed.SBlessedComponent": {
        "name": "SBlessedComponent",
        "type": "Class",
        "description": "This class is the base one for all the sugar blessed components like input, panel, etc...",
        "namespace": "node.blessed",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SBlessedComponent.ts",
        "extension": "ts",
        "relPath": "src/node/blessed/SBlessedComponent.ts",
        "children": {
            "getScreen": {
                "name": "getScreen",
                "type": "Function",
                "description": "Get the screen initiated when using some SBlessedComponent instances",
                "static": true,
                "since": "2.0.0"
            },
            "destroyScreen": {
                "name": "destroyScreen",
                "type": "Function",
                "description": "Get the screen initiated when using some SBlessedComponent instances",
                "static": true,
                "since": "2.0.0"
            },
            "screen": {
                "name": "screen",
                "type": "__blessed.screen",
                "description": "Store the global screen initiated by the first component",
                "static": true,
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "innerWidth": {
                "name": "innerWidth",
                "type": "Integer",
                "description": "Access the inner width of the component. This mean the actual width\nminus the left/right padding",
                "since": "2.0.0"
            },
            "setFramerate": {
                "name": "setFramerate",
                "type": "Function",
                "description": "This method allows you to simply change the interval timeout between the screen renders process.\nNote that calling this will change the GLOBAL render screen interval so use with caution...",
                "since": "2.0.0"
            },
            "update": {
                "name": "update",
                "type": "Function",
                "description": "This method simply update the screen if the component is a child of one"
            },
            "isDisplayed": {
                "name": "isDisplayed",
                "type": "Function",
                "description": "Check if the component is in the display list of the screen",
                "since": "2.0.0"
            },
            "isDestroyed": {
                "name": "isDestroyed",
                "type": "Function",
                "description": "Check if the component (screen) has been destroyed",
                "since": "2.0.0"
            }
        }
    },
    "node.clipboard.copy": {
        "name": "copy",
        "type": "Function",
        "description": "Simple function to copy things into the system clipboard.\nThis is using https://www.npmjs.com/package/clipboardy under the hood.",
        "namespace": "node.clipboard",
        "since": "2.0.0",
        "filename": "copy.ts",
        "extension": "ts",
        "relPath": "src/node/clipboard/copy.ts",
        "children": {}
    },
    "node.clipboard.paste": {
        "name": "paste",
        "type": "Function",
        "description": "Simple function to paste things from the system clipboard.\nThis is using https://www.npmjs.com/package/clipboardy under the hood.",
        "namespace": "node.clipboard",
        "since": "2.0.0",
        "filename": "paste.ts",
        "extension": "ts",
        "relPath": "src/node/clipboard/paste.ts",
        "children": {}
    },
    "node.css.classname": {
        "name": "classname",
        "type": "Function",
        "description": "This function take a classname you want to generate and returns you the prefixed (if prefix exists in config.classes) classname",
        "namespace": "node.css",
        "status": "beta",
        "since": "2.0.0",
        "filename": "classname.ts",
        "extension": "ts",
        "relPath": "src/node/css/classname.ts",
        "children": {}
    },
    "node.error.handleError": {
        "name": "handleError",
        "type": "Function",
        "description": "This function take a thrown error and try to display it the best way possible.\nSimply add the \"uncaughtException\" and the \"unhandledRejection\" listeners on the process object,\npass this function as the handler one and that's it...",
        "namespace": "node.error",
        "status": "wip",
        "since": "2.0.0",
        "filename": "handleError.ts",
        "extension": "ts",
        "relPath": "src/node/error/handleError.ts",
        "children": {}
    },
    "node.event.emit": {
        "name": "emit",
        "type": "Function",
        "description": "This function can ben used to emit an event globally.\nYou can subscribe to these events using the \"sugar.node.event.subscribe\" function",
        "namespace": "node.event",
        "status": "beta",
        "since": "2.0.0",
        "filename": "emit.ts",
        "extension": "ts",
        "relPath": "src/node/event/emit.ts",
        "children": {}
    },
    "node.event.on": {
        "name": "on",
        "type": "Function",
        "description": "This function allows you to subscribe to global events emited by the \"sugar.node.event.dispatch\" function\nIt use under the hood an SPromise instance",
        "namespace": "node.event",
        "status": "beta",
        "since": "2.0.0",
        "filename": "on.ts",
        "extension": "ts",
        "relPath": "src/node/event/on.ts",
        "children": {}
    },
    "node.fs.checkPathWithMultipleExtensions": {
        "name": "checkPathWithMultipleExtensions",
        "type": "Function",
        "description": "This function take a path and some extensions to check if a file\nexists with one of these particular extensions.\nIf a file exists, the function return the path with the first extensions that matches",
        "namespace": "node.fs",
        "status": "stable",
        "since": "2.0.0",
        "filename": "checkPathWithMultipleExtensions.ts",
        "extension": "ts",
        "relPath": "src/node/fs/checkPathWithMultipleExtensions.ts",
        "children": {}
    },
    "node.fs.copy": {
        "name": "copy",
        "type": "Function",
        "description": "Copy a file or directory (async)\nSupport the ```replacePathTokens``` tokens",
        "namespace": "node.fs",
        "since": "2.0.0",
        "filename": "copy.ts",
        "extension": "ts",
        "relPath": "src/node/fs/copy.ts",
        "children": {}
    },
    "node.fs.copySync": {
        "name": "copySync",
        "type": "Function",
        "description": "Copy a file or directory (sync)\nSupport the ```replacePathTokens``` tokens",
        "namespace": "node.fs",
        "since": "2.0.0",
        "filename": "copySync.ts",
        "extension": "ts",
        "relPath": "src/node/fs/copySync.ts",
        "children": {}
    },
    "node.fs.downloadFile": {
        "name": "downloadFile",
        "type": "Function",
        "description": "Download a file and save it on the file system",
        "namespace": "node.fs",
        "since": "2.0.0",
        "filename": "downloadFile.ts",
        "extension": "ts",
        "relPath": "src/node/fs/downloadFile.ts",
        "children": {}
    },
    "node.fs.emptyDir": {
        "name": "emptyDir",
        "type": "Function",
        "description": "Empty a directory (async)\nSupport the ```replacePathTokens``` tokens",
        "namespace": "node.fs",
        "since": "2.0.0",
        "filename": "emptyDir.ts",
        "extension": "ts",
        "relPath": "src/node/fs/emptyDir.ts",
        "children": {}
    },
    "node.fs.emptyDirSync": {
        "name": "emptyDirSync",
        "type": "Function",
        "description": "Empty a directory (sync)\nSupport the ```replacePathTokens``` tokens",
        "namespace": "node.fs",
        "since": "2.0.0",
        "filename": "emptyDirSync.ts",
        "extension": "ts",
        "relPath": "src/node/fs/emptyDirSync.ts",
        "children": {}
    },
    "node.fs.ensureDir": {
        "name": "ensureDir",
        "type": "Function",
        "description": "Ensure that the passed directory exists. If not, will be created recursively... (async)\nSupport the ```replacePathTokens``` tokens",
        "namespace": "node.fs",
        "since": "2.0.0",
        "filename": "ensureDir.ts",
        "extension": "ts",
        "relPath": "src/node/fs/ensureDir.ts",
        "children": {}
    },
    "node.fs.ensureDirSync": {
        "name": "ensureDirSync",
        "type": "Function",
        "description": "Ensure that the passed directory exists. If not, will be created recursively... (sync)\nSupport the ```replacePathTokens``` tokens",
        "namespace": "node.fs",
        "since": "2.0.0",
        "filename": "ensureDirSync.ts",
        "extension": "ts",
        "relPath": "src/node/fs/ensureDirSync.ts",
        "children": {}
    },
    "node.fs.ensureFile": {
        "name": "ensureFile",
        "type": "Function",
        "description": "Ensure that the passed file exists. If not, it will be created... (async)\nSupport the ```replacePathTokens``` tokens",
        "namespace": "node.fs",
        "since": "2.0.0",
        "filename": "ensureFile.ts",
        "extension": "ts",
        "relPath": "src/node/fs/ensureFile.ts",
        "children": {}
    },
    "node.fs.ensureFileSync": {
        "name": "ensureFileSync",
        "type": "Function",
        "description": "Ensure that the passed file exists. If not, will be created... (async)\nSupport the ```replacePathTokens``` tokens",
        "namespace": "node.fs",
        "since": "2.0.0",
        "filename": "ensureFileSync.ts",
        "extension": "ts",
        "relPath": "src/node/fs/ensureFileSync.ts",
        "children": {}
    },
    "node.fs.exists": {
        "name": "exists",
        "type": "Function",
        "description": "This function simply check if the path passed exists.\nYou can specify what you want to take care of using the settings object",
        "namespace": "node.fs",
        "status": "stable",
        "since": "2.0.0",
        "filename": "exists.ts",
        "extension": "ts",
        "relPath": "src/node/fs/exists.ts",
        "children": {}
    },
    "node.fs.existsSync": {
        "name": "existsSync",
        "type": "Function",
        "description": "This function simply check if the path passed exists.\nYou can specify what you want to take care of using the settings object",
        "namespace": "node.fs",
        "status": "stable",
        "since": "2.0.0",
        "filename": "existsSync.ts",
        "extension": "ts",
        "relPath": "src/node/fs/existsSync.ts",
        "children": {}
    },
    "node.fs.extension": {
        "name": "extension",
        "type": "Function",
        "description": "Return the passed file path extension",
        "namespace": "node.fs",
        "since": "2.0.0",
        "filename": "extension.ts",
        "extension": "ts",
        "relPath": "src/node/fs/extension.ts",
        "children": {}
    },
    "node.fs.filename": {
        "name": "filename",
        "type": "Function",
        "description": "Return the filename from the passed path with or without the extension",
        "namespace": "node.fs",
        "since": "2.0.0",
        "filename": "filename.ts",
        "extension": "ts",
        "relPath": "src/node/fs/filename.ts",
        "children": {}
    },
    "node.fs.findUp": {
        "name": "findUp",
        "type": "Function",
        "description": "This function simply walk across upper folders to search for a file\nand returns you the first finded",
        "namespace": "node.fs",
        "since": "2.0.0",
        "filename": "findUp.ts",
        "extension": "ts",
        "relPath": "src/node/fs/findUp.ts",
        "children": {}
    },
    "node.fs.folderPath": {
        "name": "folderPath",
        "type": "Function",
        "description": "This function returns you the folder path of the file path passed.\nYou can tell the function to check for file existence before getting\nthe folder path with the second parameter.\nSupport the ```replacePathTokens``` tokens",
        "namespace": "node.fs",
        "since": "2.0.0",
        "filename": "folderPath.ts",
        "extension": "ts",
        "relPath": "src/node/fs/folderPath.ts",
        "children": {}
    },
    "node.fs.folderSize": {
        "name": "folderSize",
        "type": "Function",
        "description": "Calculate the size of the passed folder and return it through a promise, either in raw format, either in human readdable one...\nSupport the ```replacePathTokens``` tokens",
        "namespace": "node.fs",
        "since": "2.0.0",
        "filename": "folderSize.ts",
        "extension": "ts",
        "relPath": "src/node/fs/folderSize.ts",
        "children": {}
    },
    "node.fs.formatFileSize": {
        "name": "formatFileSize",
        "type": "Function",
        "description": "Transform into human readable string a file size from a number (float or integer) or string.\nThis function use the wonderfull \"filesize\" npm package under the houd.",
        "namespace": "node.fs",
        "since": "2.0.0",
        "filename": "formatFileSize.ts",
        "extension": "ts",
        "relPath": "src/node/fs/formatFileSize.ts",
        "children": {}
    },
    "node.fs.isPath": {
        "name": "isPath",
        "type": "Function",
        "description": "Check if the passed string is a valid path or not\nSupport the ```replacePathTokens``` tokens",
        "namespace": "node.fs",
        "since": "2.0.0",
        "filename": "isPath.ts",
        "extension": "ts",
        "relPath": "src/node/fs/isPath.ts",
        "children": {}
    },
    "node.fs.move": {
        "name": "move",
        "type": "Function",
        "description": "Moves a file or directory, even across devices (async)\nSupport the ```replacePathTokens``` tokens",
        "namespace": "node.fs",
        "since": "2.0.0",
        "filename": "move.ts",
        "extension": "ts",
        "relPath": "src/node/fs/move.ts",
        "children": {}
    },
    "node.fs.moveSync": {
        "name": "moveSync",
        "type": "Function",
        "description": "Moves a file or directory, even across devices (sync)\nSupport the ```replacePathTokens``` tokens",
        "namespace": "node.fs",
        "since": "2.0.0",
        "filename": "moveSync.ts",
        "extension": "ts",
        "relPath": "src/node/fs/moveSync.ts",
        "children": {}
    },
    "ts.fs.pool": {
        "name": "pool",
        "type": "Function",
        "description": "This function simply take as parameter a glob (or array of globs) pattern(s)\nand return an SPromise instance through which you can subscribe to events like:\n- file: Emitted for each file founded (or added)\n- files: Emitted with a list of founded (or added) files\n- update: Emitted when a file has been updated\n- unlink: Emitted when a file has been deleted\n- add: Emitted when a file has been added",
        "namespace": "ts.fs",
        "since": "2.0.0",
        "filename": "pool.ts",
        "extension": "ts",
        "relPath": "src/node/fs/pool.ts",
        "children": {}
    },
    "node.fs.registerSFileClasses": {
        "name": "registerSFileClasses",
        "type": "Function",
        "description": "This function is responsivle to register the SFile classes with their proper\nextensions.",
        "namespace": "node.fs",
        "since": "2.0.0",
        "filename": "registerSFileClasses.ts",
        "extension": "ts",
        "relPath": "src/node/fs/registerSFileClasses.ts",
        "children": {}
    },
    "node.fs.remove": {
        "name": "remove",
        "type": "Function",
        "description": "Removes a file or directory. The directory can have contents. If the path does not exist, silently does nothing. Like rm -rf (async)\nSupport the ```replacePathTokens``` tokens",
        "namespace": "node.fs",
        "since": "2.0.0",
        "filename": "remove.ts",
        "extension": "ts",
        "relPath": "src/node/fs/remove.ts",
        "children": {}
    },
    "node.fs.removeSync": {
        "name": "removeSync",
        "type": "Function",
        "description": "Removes a file or directory. The directory can have contents. If the path does not exist, silently does nothing. Like rm -rf (sync)\nSupport the ```replacePathTokens``` tokens",
        "namespace": "node.fs",
        "since": "2.0.0",
        "filename": "removeSync.ts",
        "extension": "ts",
        "relPath": "src/node/fs/removeSync.ts",
        "children": {}
    },
    "node.fs.writeFile": {
        "name": "writeFile",
        "type": "Function",
        "description": "CWrite a file. If don't exist, will be created as well as the directory structure if needed... ( (async)\nSupport the ```replacePathTokens``` tokens",
        "namespace": "node.fs",
        "since": "2.0.0",
        "filename": "writeFile.ts",
        "extension": "ts",
        "relPath": "src/node/fs/writeFile.ts",
        "children": {}
    },
    "node.fs.writeFileSync": {
        "name": "writeFileSync",
        "type": "Function",
        "description": "Write a file. If don't exist, will be created as well as the directory structure if needed... (sync)\nSupport the ```replacePathTokens``` tokens",
        "namespace": "node.fs",
        "since": "2.0.0",
        "filename": "writeFileSync.ts",
        "extension": "ts",
        "relPath": "src/node/fs/writeFileSync.ts",
        "children": {}
    },
    "node.fs.writeJson": {
        "name": "writeJson",
        "type": "Function",
        "description": "Write a JSON file. If don't exist, will be created as well as the directory structure if needed... ( (async)\nSupport the ```replacePathTokens``` tokens",
        "namespace": "node.fs",
        "since": "2.0.0",
        "filename": "writeJson.ts",
        "extension": "ts",
        "relPath": "src/node/fs/writeJson.ts",
        "children": {}
    },
    "node.fs.writeJsonSync": {
        "name": "writeJsonSync",
        "type": "Function",
        "description": "Write a JSON file. If don't exist, will be created as well as the directory structure if needed... (sync)\nSupport the ```replacePathTokens``` tokens",
        "namespace": "node.fs",
        "since": "2.0.0",
        "filename": "writeJsonSync.ts",
        "extension": "ts",
        "relPath": "src/node/fs/writeJsonSync.ts",
        "children": {}
    },
    "node.glob.SGlob": {
        "name": "SGlob",
        "type": "Class",
        "description": "This class represent a glob pattern and can be used to resolve some globs and get back\nan array of SFile instances or to extract some part of the pattern, etc...",
        "namespace": "node.glob",
        "status": "beta",
        "since": "2.0.0",
        "filename": "SGlob.ts",
        "extension": "ts",
        "relPath": "src/node/glob/SGlob.ts",
        "children": {
            "resolve": {
                "name": "resolve",
                "type": "Function",
                "description": "Alias to the ```resolveGlob``` function available under \"node/glob/resolveGlob\"",
                "static": true,
                "since": "2.0.0"
            },
            "extractGlob": {
                "name": "extractGlob",
                "type": "Function",
                "description": "Alias to the ```extractGlob``` function available under \"node/glob/extractGlob\"",
                "since": "2.0.0"
            },
            "extractNoneGlob": {
                "name": "extractNoneGlob",
                "type": "Function",
                "description": "Alias to the ```extractNoneGlob``` function available under \"node/glob/extractNoneGlob\"",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            }
        }
    },
    "node.glob.matchGlob": {
        "name": "matchGlob",
        "type": "Function",
        "description": "This function take as input a file path and a glob pattern that can be an extended one (this mean that is support the listed features above).\nThen it check if the passed filepath match the passed glob pattern or not and return true or false depending on the result.",
        "namespace": "node.glob",
        "since": "2.0.0",
        "filename": "matchGlob.ts",
        "extension": "ts",
        "relPath": "src/node/glob/matchGlob.ts",
        "children": {}
    },
    "node.glob.resolveGlob": {
        "name": "resolveGlob",
        "type": "Function",
        "description": "This function simply resolve the passed glob pattern(s) and resolve his promise\nwith an Array of SFile instances to work with",
        "namespace": "node.glob",
        "status": "beta",
        "since": "2.0.0",
        "filename": "resolveGlob.ts",
        "extension": "ts",
        "relPath": "src/node/glob/resolveGlob.ts",
        "children": {}
    },
    "node.init.initEnv": {
        "name": "initEnv",
        "type": "Function",
        "description": "This function \"simply\" init some environment variables that can be useful.\nHere's the list of added environment variables available:\n\n- PACKAGE_ROOT (null) {String}: Hold the filsystem package root path",
        "namespace": "node.init",
        "status": "wip",
        "since": "2.0.0",
        "filename": "initEnv.ts",
        "extension": "ts",
        "relPath": "src/node/init/initEnv.ts",
        "children": {}
    },
    "node.is.childProcess": {
        "name": "childProcess",
        "type": "Function",
        "description": "Check if the current script is running as a child process or not by checking if the ```process.send``` exists, or is the environment variable ```IS_CHILD_PROCESS``` is true.",
        "namespace": "node.is",
        "status": "beta",
        "since": "2.0.0",
        "filename": "childProcess.ts",
        "extension": "ts",
        "relPath": "src/node/is/childProcess.ts",
        "children": {}
    },
    "node.is.directory": {
        "name": "directory",
        "type": "Function",
        "description": "This function check if the passed string path is a directory or not",
        "namespace": "node.is",
        "since": "2.0.0",
        "filename": "directory.ts",
        "extension": "ts",
        "relPath": "src/node/is/directory.ts",
        "children": {}
    },
    "node.is.file": {
        "name": "file",
        "type": "Function",
        "description": "This function check if the passed string path is a file or not",
        "namespace": "node.is",
        "since": "2.0.0",
        "filename": "file.ts",
        "extension": "ts",
        "relPath": "src/node/is/file.ts",
        "children": {}
    },
    "node.is.folder": {
        "name": "folder",
        "type": "Function",
        "description": "This function check if the passed string path is a folder or not",
        "namespace": "node.is",
        "since": "2.0.0",
        "filename": "folder.ts",
        "extension": "ts",
        "relPath": "src/node/is/folder.ts",
        "children": {}
    },
    "node.is.inPackage": {
        "name": "inPackage",
        "type": "Function",
        "description": "This function check if the we are in (one of) the package(s) passed as parameter",
        "namespace": "node.is",
        "since": "2.0.0",
        "filename": "inPackage.ts",
        "extension": "ts",
        "relPath": "src/node/is/inPackage.ts",
        "children": {}
    },
    "node.is.symlink": {
        "name": "symlink",
        "type": "Function",
        "description": "This function check if the passed string path is a sySlink or not",
        "namespace": "node.is",
        "since": "2.0.0",
        "filename": "symlink.ts",
        "extension": "ts",
        "relPath": "src/node/is/symlink.ts",
        "children": {}
    },
    "node.keyboard.hotkey": {
        "name": "hotkey",
        "type": "Function",
        "description": "This function allows you to add keyboard listening process and subscribe to some sequences\nusing the SPromise instance returned.",
        "namespace": "node.keyboard",
        "status": "beta",
        "since": "2.0.0",
        "filename": "hotkey.ts",
        "extension": "ts",
        "relPath": "src/node/keyboard/hotkey.ts",
        "children": {}
    },
    "node.module.buildInNodeModules": {
        "name": "buildInNodeModules",
        "type": "Object",
        "description": "This object store the list of built-in node module\nwith a polyfill property for each that point to some\npolyfill depending on the context wanted. It can be \"browser\"\nor some others to come depending on the needs...",
        "namespace": "node.module",
        "since": "2.0.0",
        "filename": "buildInNodeModules.ts",
        "extension": "ts",
        "relPath": "src/node/module/buildInNodeModules.ts",
        "children": {}
    },
    "node.module.dependencyList": {
        "name": "dependencyList",
        "type": "Function",
        "description": "This function make use of the ```dependencyTree``` one and returns the result into a simple array of file pathes",
        "namespace": "node.module",
        "since": "2.0.0",
        "filename": "dependencyList.ts",
        "extension": "ts",
        "relPath": "src/node/module/dependencyList.ts",
        "children": {}
    },
    "node.module.dependencyTree": {
        "name": "dependencyTree",
        "type": "Function",
        "description": "Async wrapper around the amazing dependency-tree module made by mrjoelkemp.\nThis wrapper add some capabilities like caching already parsed dependencies.",
        "namespace": "node.module",
        "since": "2.0.0",
        "filename": "dependencyTree.ts",
        "extension": "ts",
        "relPath": "src/node/module/dependencyTree.ts",
        "children": {}
    },
    "node.module.exportsMatch": {
        "name": "exportsMatch",
        "type": "Function",
        "description": "This function take as parameter the content of the \"exports\" package.json field\nand the requested \"module\" string/path. With these informations, it will search\nfor a matching export file path and return it back.",
        "namespace": "node.module",
        "since": "2.0.0",
        "filename": "exportsMatch.ts",
        "extension": "ts",
        "relPath": "src/node/module/exportsMatch.ts",
        "children": {}
    },
    "node.module.extractImport": {
        "name": "extractImport",
        "type": "Function",
        "description": "This function simply parse a file content or a passed string directly and\nbuild the list of finded \"import ... from ...\" as well as commonjs \"require(...)\".\nYou will get back an array of object containing all the imformations about each\nimport and require statements",
        "namespace": "node.module",
        "status": "beta",
        "since": "2.0.0",
        "filename": "extractImport.ts",
        "extension": "ts",
        "relPath": "src/node/module/extractImport.ts",
        "children": {}
    },
    "node.module.resolve": {
        "name": "resolve",
        "type": "Function",
        "description": "This function take as parameter a module path to resolve and returns back the\ncorrect path to this module. It check for package.json file and fields like \"main\", \"module\", etc...",
        "namespace": "node.module",
        "since": "2.0.0",
        "filename": "resolve.ts",
        "extension": "ts",
        "relPath": "src/node/module/resolve.ts",
        "children": {}
    },
    "node.monorepo.findPackages": {
        "name": "findPackages",
        "type": "Function",
        "description": "This function simply let you search for packages (that are not dependencies) inside\nthe passed folder and returns a object with relative paths as keys and package.json\ncontent value",
        "namespace": "node.monorepo",
        "status": "beta",
        "since": "2.0.0",
        "filename": "findPackages.ts",
        "extension": "ts",
        "relPath": "src/node/monorepo/findPackages.ts",
        "children": {}
    },
    "node.monorepo.linkPackages": {
        "name": "linkPackages",
        "type": "Function",
        "description": "This function simply check all the packages available in the monorepo\nand link then together using symbolic links in each node_modules folders",
        "namespace": "node.monorepo",
        "status": "beta",
        "since": "2.0.0",
        "filename": "linkPackages.ts",
        "extension": "ts",
        "relPath": "src/node/monorepo/linkPackages.ts",
        "children": {}
    },
    "node.npm.SNpmUnusedProcess": {
        "name": "SNpmUnusedProcess",
        "type": "Class",
        "description": "This process is used to check npm unused dependencies, remove unsused once, etc...\nIt use under the hood the amazing depcheck package made by @rumpl and @lijunle",
        "namespace": "node.npm",
        "since": "2.0.0",
        "filename": "SNpmUnusedProcess.ts",
        "extension": "ts",
        "relPath": "src/node/npm/SNpmUnusedProcess.ts",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "process": {
                "name": "process",
                "type": "Function",
                "description": "Actual process execution",
                "since": "2.0.0"
            }
        }
    },
    "node.package.json": {
        "name": "json",
        "type": "Function",
        "description": "This function return you the package.json of the current working package into object format",
        "namespace": "node.package",
        "status": "beta",
        "since": "2.0.0",
        "filename": "json.ts",
        "extension": "ts",
        "relPath": "src/node/package/json.ts",
        "children": {}
    },
    "node.package.namespace": {
        "name": "namespace",
        "type": "Function",
        "description": "This function take a string as parameter like a path, or a doted string like \"something.cool\" and return you\na proper namespace build using the package name, your passed string sanitized, etc...",
        "namespace": "node.package",
        "status": "wip",
        "since": "2.0.0",
        "filename": "namespace.ts",
        "extension": "ts",
        "relPath": "src/node/package/namespace.ts",
        "children": {}
    },
    "node.package.rootPath": {
        "name": "rootPath",
        "type": "Function",
        "description": "This function return the absolute path of your current working package",
        "namespace": "node.package",
        "status": "beta",
        "since": "2.0.0",
        "filename": "rootPath.ts",
        "extension": "ts",
        "relPath": "src/node/package/rootPath.ts",
        "children": {}
    },
    "js.path.absolute": {
        "name": "absolute",
        "type": "Function",
        "description": "This function take as input either a string or an array of string and transform the pathes to absolute\ndepending on the second argument which is the \"from\" one.",
        "namespace": "js.path",
        "status": "beta",
        "since": "2.0.0",
        "filename": "absolute.ts",
        "extension": "ts",
        "relPath": "src/node/path/absolute.ts",
        "children": {}
    },
    "node.path.cacheDir": {
        "name": "cacheDir",
        "type": "Function",
        "description": "Return the package cache directory path",
        "namespace": "node.path",
        "since": "2.0.0",
        "filename": "cacheDir.ts",
        "extension": "ts",
        "relPath": "src/node/path/cacheDir.ts",
        "children": {}
    },
    "node.path.distDir": {
        "name": "distDir",
        "type": "Function",
        "description": "Return the package dist directory path",
        "namespace": "node.path",
        "since": "2.0.0",
        "filename": "distDir.ts",
        "extension": "ts",
        "relPath": "src/node/path/distDir.ts",
        "children": {}
    },
    "node.path.isInPackage": {
        "name": "isInPackage",
        "type": "Function",
        "description": "Return the path to either the first finded package root going up the folders, or the highest package root finded",
        "namespace": "node.path",
        "filename": "isInPackage.ts",
        "extension": "ts",
        "relPath": "src/node/path/isInPackage.ts",
        "children": {}
    },
    "node.fs.localDir": {
        "name": "localDir",
        "type": "Function",
        "description": "Return the .local directory path",
        "namespace": "node.fs",
        "since": "2.0.0",
        "filename": "localDir.ts",
        "extension": "ts",
        "relPath": "src/node/path/localDir.ts",
        "children": {}
    },
    "node.path.packageRoot": {
        "name": "packageRoot",
        "type": "Function",
        "description": "Return the path to either the first finded package root going up the folders, or the highest package root finded",
        "namespace": "node.path",
        "filename": "packageRoot.ts",
        "extension": "ts",
        "relPath": "src/node/path/packageRoot.ts",
        "children": {}
    },
    "js.path.relative": {
        "name": "relative",
        "type": "Function",
        "description": "This function take as input either a string or an array of string and transform the pathes to relative\ndepending on the second argument which is the \"from\" one.",
        "namespace": "js.path",
        "status": "beta",
        "since": "2.0.0",
        "filename": "relative.ts",
        "extension": "ts",
        "relPath": "src/node/path/relative.ts",
        "children": {}
    },
    "node.path.replacePathTokens": {
        "name": "replacePathTokens",
        "type": "Function",
        "description": "This function take as parameter either a path string, or an array of paths\nand return the according value type with the tokens (%tmpDir, %cacheDir, etc...) replaced",
        "namespace": "node.path",
        "since": "2.0.0",
        "filename": "replacePathTokens.ts",
        "extension": "ts",
        "relPath": "src/node/path/replacePathTokens.ts",
        "children": {}
    },
    "node.path.rootDir": {
        "name": "rootDir",
        "type": "Function",
        "description": "Return the package root directory path",
        "namespace": "node.path",
        "since": "2.0.0",
        "filename": "rootDir.ts",
        "extension": "ts",
        "relPath": "src/node/path/rootDir.ts",
        "children": {}
    },
    "node.path.srcDir": {
        "name": "srcDir",
        "type": "Function",
        "description": "Return the package dist directory path",
        "namespace": "node.path",
        "since": "2.0.0",
        "filename": "srcDir.ts",
        "extension": "ts",
        "relPath": "src/node/path/srcDir.ts",
        "children": {}
    },
    "node.path.sugarDir": {
        "name": "sugarDir",
        "type": "Function",
        "description": "Return the sugar package directory path",
        "namespace": "node.path",
        "since": "2.0.0",
        "filename": "sugarDir.ts",
        "extension": "ts",
        "relPath": "src/node/path/sugarDir.ts",
        "children": {}
    },
    "node.path.tmpDir": {
        "name": "tmpDir",
        "type": "Function",
        "description": "Return the os temp directory path",
        "namespace": "node.path",
        "since": "2.0.0",
        "filename": "tmpDir.ts",
        "extension": "ts",
        "relPath": "src/node/path/tmpDir.ts",
        "children": {}
    },
    "node.process.exitCleanup": {
        "name": "exitCleanup",
        "type": "Function",
        "description": "This function simply cleanup all the processes and other things that stay alive after that\nthe main process has been terminated",
        "namespace": "node.process",
        "status": "wip",
        "since": "2.0.0",
        "filename": "exitCleanup.ts",
        "extension": "ts",
        "relPath": "src/node/process/exitCleanup.ts",
        "children": {}
    },
    "node.process.onProcessExit": {
        "name": "onProcessExit",
        "type": "Function",
        "description": "This function allows you to register a callback to execute when the process\nis exiting by one of these events:\n- exit: when app is closing\n- SIGINT: on ctrl+c\n- SIGUSR1, SIGUSR2: catches \"kill pid\"\n- uncaughtException: catches uncaught exceptions",
        "namespace": "node.process",
        "status": "beta",
        "since": "2.0.0",
        "filename": "onProcessExit.ts",
        "extension": "ts",
        "relPath": "src/node/process/onProcessExit.ts",
        "children": {}
    },
    "node.process.spawn": {
        "name": "spawn",
        "type": "Function",
        "description": "This function allows you to spawn a new child process just like the native ```spawn``` node function\nbut add the support for SEventEmitter communication layers",
        "namespace": "node.process",
        "status": "wip",
        "since": "2.0.0",
        "filename": "spawn.ts",
        "extension": "ts",
        "relPath": "src/node/process/spawn.ts",
        "children": {}
    },
    "node.sugar.sugarJson": {
        "name": "sugarJson",
        "type": "Function",
        "description": "This function allows you to get back all the \"sugar.json\" that are at the root of\neach installed packages.",
        "namespace": "node.sugar",
        "since": "2.0.0",
        "filename": "sugarJson.ts",
        "extension": "ts",
        "relPath": "src/node/sugar/sugarJson.ts",
        "children": {}
    },
    "node.terminal.parseHtml": {
        "name": "parseHtml",
        "type": "Function",
        "description": "Parse the simple html tags to format the terminal message",
        "namespace": "node.terminal",
        "status": "wip",
        "since": "2.0.0",
        "filename": "parseHtml.ts",
        "extension": "ts",
        "relPath": "src/node/terminal/parseHtml.ts",
        "children": {}
    },
    "node.transition.objectProperties": {
        "name": "objectProperties",
        "type": "Function",
        "description": "This function take a start object and a target object and proceed to the transition of all properties\ndepending on the passed settings object that is documented bellow.",
        "namespace": "node.transition",
        "status": "beta",
        "since": "2.0.0",
        "filename": "objectProperties.ts",
        "extension": "ts",
        "relPath": "src/node/transition/objectProperties.ts",
        "children": {}
    },
    "node.npm.interface.SNpmUnusedParamsInterface": {
        "name": "SNpmUnusedParamsInterface",
        "type": "Class",
        "description": "Interface that represent the SNpmDependenciesProcess parameters",
        "namespace": "node.npm.interface",
        "status": "beta",
        "since": "2.0.0",
        "filename": "SNpmUnusedParamsInterface.ts",
        "extension": "ts",
        "relPath": "src/node/npm/interface/SNpmUnusedParamsInterface.ts",
        "children": {}
    },
    "node.npm.utils.packageJson": {
        "name": "packageJson",
        "type": "Function",
        "description": "This function simply take a package name as parameter, and return the corresponding\npackage.json JSON content",
        "namespace": "node.npm.utils",
        "status": "beta",
        "since": "2.0.0",
        "filename": "packageJson.ts",
        "extension": "ts",
        "relPath": "src/node/npm/utils/packageJson.ts",
        "children": {}
    },
    "node.http.getFreePort": {
        "name": "getFreePort",
        "type": "Function",
        "description": "This function simply returns you a free port.\nYou can pass a port to check as parameter and if it is free, you will get it back as result",
        "namespace": "node.http",
        "status": "beta",
        "since": "2.0.0",
        "filename": "getFreePort.ts",
        "extension": "ts",
        "relPath": "src/node/network/utils/getFreePort.ts",
        "children": {}
    },
    "node.network.ipAddress": {
        "name": "ipAddress",
        "type": "Function",
        "description": "This function allows you to get your ip address",
        "namespace": "node.network",
        "status": "beta",
        "since": "2.0.0",
        "filename": "ipAddress.ts",
        "extension": "ts",
        "relPath": "src/node/network/utils/ipAddress.ts",
        "children": {}
    },
    "node.http.isPortFree": {
        "name": "isPortFree",
        "type": "Function",
        "description": "This function simply check if the passed port is free or not",
        "namespace": "node.http",
        "status": "beta",
        "since": "2.0.0",
        "filename": "isPortFree.ts",
        "extension": "ts",
        "relPath": "src/node/network/utils/isPortFree.ts",
        "children": {}
    },
    "node.module.interface.ResolveSettingsInterface": {
        "name": "ResolveSettingsInterface",
        "type": "Class",
        "description": "This represent the resolve settings interface",
        "namespace": "node.module.interface",
        "since": "2.0.0",
        "filename": "ResolveSettingsInterface.ts",
        "extension": "ts",
        "relPath": "src/node/module/interface/ResolveSettingsInterface.ts",
        "children": {}
    },
    "node.blessed.notification.SBlessedNotification": {
        "name": "SBlessedNotification",
        "type": "Class",
        "description": "This class represent a notification that will be in a corner of the terminal\nwith some features like:\n- Timeout\n- On click action\n- and more...",
        "namespace": "node.blessed.notification",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SBlessedNotification.ts",
        "extension": "ts",
        "relPath": "src/node/blessed/notification/SBlessedNotification.ts",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            }
        }
    },
    "node.blessed.utils.innerWidth": {
        "name": "innerWidth",
        "type": "Function",
        "description": "This function simply returns you the actual inner width (width - left/right paddings)\nof the passed component.\nReturns -1 if the component or it's parent is not displayed...",
        "namespace": "node.blessed.utils",
        "since": "2.0.0",
        "filename": "innerWidth.ts",
        "extension": "ts",
        "relPath": "src/node/blessed/utils/innerWidth.ts",
        "children": {}
    },
    "sugar.js.css.injectStyle": {
        "name": "injectStyle",
        "type": "Function",
        "description": "Inject a passed style string in the DOM",
        "namespace": "sugar.js.css",
        "status": "wip",
        "since": "2.0.0",
        "filename": "injectStyle.js",
        "extension": "js",
        "relPath": "src/js/css/injectStyle.js",
        "children": {}
    },
    "js.css.injectStyle": {
        "name": "injectStyle",
        "type": "Function",
        "description": "Inject a passed style string in the DOM",
        "namespace": "js.css",
        "status": "wip",
        "since": "2.0.0",
        "filename": "injectStyle.ts",
        "extension": "ts",
        "relPath": "src/js/css/injectStyle.ts",
        "children": {}
    },
    "sugar.js.dom.addAnimationClass": {
        "name": "addAnimationClass",
        "type": "Function",
        "description": "Add a class that trigger an animation and remove it at the end",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "addAnimationClass.js",
        "extension": "js",
        "relPath": "src/js/dom/addAnimationClass.js",
        "children": {}
    },
    "js.dom.addAnimationClass": {
        "name": "addAnimationClass",
        "type": "Function",
        "description": "Add a class that trigger an animation and remove it at the end",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "addAnimationClass.ts",
        "extension": "ts",
        "relPath": "src/js/dom/addAnimationClass.ts",
        "children": {}
    },
    "sugar.js.dom.addEventListener": {
        "name": "addEventListener",
        "type": "Function",
        "description": "Add an event listener on an element and return the function to remove the event listener",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "addEventListener.js",
        "extension": "js",
        "relPath": "src/js/dom/addEventListener.js",
        "children": {}
    },
    "js.dom.addEventListener": {
        "name": "addEventListener",
        "type": "Function",
        "description": "Add an event listener on an element and return the function to remove the event listener",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "addEventListener.ts",
        "extension": "ts",
        "relPath": "src/js/dom/addEventListener.ts",
        "children": {}
    },
    "sugar.js.dom.addEventListenerOnce": {
        "name": "addEventListenerOnce",
        "type": "Function",
        "description": "Add an event listener that will be trigerred only once",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "addEventListenerOnce.js",
        "extension": "js",
        "relPath": "src/js/dom/addEventListenerOnce.js",
        "children": {}
    },
    "js.dom.addEventListenerOnce": {
        "name": "addEventListenerOnce",
        "type": "Function",
        "description": "Add an event listener that will be trigerred only once",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "addEventListenerOnce.ts",
        "extension": "ts",
        "relPath": "src/js/dom/addEventListenerOnce.ts",
        "children": {}
    },
    "sugar.js.dom.appendScriptTag": {
        "name": "appendScriptTag",
        "type": "Function",
        "description": "Append a script tag either to the head or the body",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "appendScriptTag.js",
        "extension": "js",
        "relPath": "src/js/dom/appendScriptTag.js",
        "children": {}
    },
    "js.dom.appendScriptTag": {
        "name": "appendScriptTag",
        "type": "Function",
        "description": "Append a script tag either to the head or the body",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "appendScriptTag.ts",
        "extension": "ts",
        "relPath": "src/js/dom/appendScriptTag.ts",
        "children": {}
    },
    "sugar.js.dom.appendStyleTag": {
        "name": "appendStyleTag",
        "type": "Function",
        "description": "Append a style tag either to the head or the body",
        "namespace": "sugar.js.dom",
        "since": "2.0.0",
        "filename": "appendStyleTag.js",
        "extension": "js",
        "relPath": "src/js/dom/appendStyleTag.js",
        "children": {}
    },
    "js.dom.appendStyleTag": {
        "name": "appendStyleTag",
        "type": "Function",
        "description": "Append a style tag either to the head or the body",
        "namespace": "js.dom",
        "since": "2.0.0",
        "filename": "appendStyleTag.ts",
        "extension": "ts",
        "relPath": "src/js/dom/appendStyleTag.ts",
        "children": {}
    },
    "sugar.js.dom.appendStylesheetLink": {
        "name": "appendStylesheetLink",
        "type": "Function",
        "description": "Append a stylesheet link to the page head",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "appendStylesheetLink.js",
        "extension": "js",
        "relPath": "src/js/dom/appendStylesheetLink.js",
        "children": {}
    },
    "js.dom.appendStylesheetLink": {
        "name": "appendStylesheetLink",
        "type": "Function",
        "description": "Append a stylesheet link to the page head",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "appendStylesheetLink.ts",
        "extension": "ts",
        "relPath": "src/js/dom/appendStylesheetLink.ts",
        "children": {}
    },
    "sugar.js.dom.backgroundImageLoaded": {
        "name": "backgroundImageLoaded",
        "type": "Function",
        "description": "Detect when a background image has been loaded on an HTMLElement",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "backgroundImageLoaded.js",
        "extension": "js",
        "relPath": "src/js/dom/backgroundImageLoaded.js",
        "children": {}
    },
    "js.dom.backgroundImageLoaded": {
        "name": "backgroundImageLoaded",
        "type": "Function",
        "description": "Detect when a background image has been loaded on an HTMLElement",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "backgroundImageLoaded.ts",
        "extension": "ts",
        "relPath": "src/js/dom/backgroundImageLoaded.ts",
        "children": {}
    },
    "sugar.js.dom.canHaveChildren": {
        "name": "canHaveChildren",
        "type": "Function",
        "description": "This function take as input either a tagName String like \"img\", \"div\", etc... or an HTMLElement node\nand return true or false depending if this element is supposed to have children or not.",
        "namespace": "sugar.js.dom",
        "since": "2.0.0",
        "filename": "canHaveChildren.js",
        "extension": "js",
        "relPath": "src/js/dom/canHaveChildren.js",
        "children": {}
    },
    "js.dom.canHaveChildren": {
        "name": "canHaveChildren",
        "type": "Function",
        "description": "This function take as input either a tagName String like \"img\", \"div\", etc... or an HTMLElement node\nand return true or false depending if this element is supposed to have children or not.",
        "namespace": "js.dom",
        "since": "2.0.0",
        "filename": "canHaveChildren.ts",
        "extension": "ts",
        "relPath": "src/js/dom/canHaveChildren.ts",
        "children": {}
    },
    "sugar.js.dom.closest": {
        "name": "closest",
        "type": "Function",
        "description": "Go up the dom three to find the first element that matches the passed selector",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "closest.js",
        "extension": "js",
        "relPath": "src/js/dom/closest.js",
        "children": {}
    },
    "js.dom.closest": {
        "name": "closest",
        "type": "Function",
        "description": "Go up the dom three to find the first element that matches the passed selector",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "closest.ts",
        "extension": "ts",
        "relPath": "src/js/dom/closest.ts",
        "children": {}
    },
    "sugar.js.dom.closestNotVisible": {
        "name": "closestNotVisible",
        "type": "Function",
        "description": "Go up the dom three to find the first element that is not visible.\nNot visible mean that has either an opacity to 0, a visibility to hidden or a display to none",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "closestNotVisible.js",
        "extension": "js",
        "relPath": "src/js/dom/closestNotVisible.js",
        "children": {}
    },
    "js.dom.closestNotVisible": {
        "name": "closestNotVisible",
        "type": "Function",
        "description": "Go up the dom three to find the first element that is not visible.\nNot visible mean that has either an opacity to 0, a visibility to hidden or a display to none",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "closestNotVisible.ts",
        "extension": "ts",
        "relPath": "src/js/dom/closestNotVisible.ts",
        "children": {}
    },
    "sugar.js.dom.dataset": {
        "name": "dataset",
        "type": "Function",
        "description": "Get or set a value on the passed element with the passed name",
        "namespace": "sugar.js.dom",
        "status": "wip",
        "since": "1.0.0",
        "filename": "dataset.js",
        "extension": "js",
        "relPath": "src/js/dom/dataset.js",
        "children": {}
    },
    "js.dom.dataset": {
        "name": "dataset",
        "type": "Function",
        "description": "Get or set a value on the passed element with the passed name",
        "namespace": "js.dom",
        "status": "wip",
        "since": "1.0.0",
        "filename": "dataset.ts",
        "extension": "ts",
        "relPath": "src/js/dom/dataset.ts",
        "children": {}
    },
    "sugar.js.dom.detectInOutDirection": {
        "name": "detectInOutDirection",
        "type": "Function",
        "description": "Detect the mouse direction when entered on the passed element. The direction can be up, down, left or right and will be passed to the two callbacks available.\nThe first one is the `onIn` callback, and the second one is the `onOut`.",
        "namespace": "sugar.js.dom",
        "status": "wip",
        "since": "1.0.0",
        "filename": "detectInOutDirection.js",
        "extension": "js",
        "relPath": "src/js/dom/detectInOutDirection.js",
        "children": {}
    },
    "js.dom.detectInOutDirection": {
        "name": "detectInOutDirection",
        "type": "Function",
        "description": "Detect the mouse direction when entered on the passed element. The direction can be up, down, left or right and will be passed to the two callbacks available.\nThe first one is the `onIn` callback, and the second one is the `onOut`.",
        "namespace": "js.dom",
        "status": "wip",
        "since": "1.0.0",
        "filename": "detectInOutDirection.ts",
        "extension": "ts",
        "relPath": "src/js/dom/detectInOutDirection.ts",
        "children": {}
    },
    "sugar.js.dom.dispatchEvent": {
        "name": "dispatchEvent",
        "type": "Function",
        "description": "Helper to quickly display an event with some optional data attached to it",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "dispatchEvent.js",
        "extension": "js",
        "relPath": "src/js/dom/dispatchEvent.js",
        "children": {}
    },
    "js.dom.dispatchEvent": {
        "name": "dispatchEvent",
        "type": "Function",
        "description": "Helper to quickly display an event with some optional data attached to it",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "dispatchEvent.ts",
        "extension": "ts",
        "relPath": "src/js/dom/dispatchEvent.ts",
        "children": {}
    },
    "sugar.js.dom.domReady": {
        "name": "domReady",
        "type": "Function",
        "description": "Wait that the dom is ready before resolving the promise",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "domready.js",
        "extension": "js",
        "relPath": "src/js/dom/domready.js",
        "children": {}
    },
    "js.dom.domReady": {
        "name": "domReady",
        "type": "Function",
        "description": "Wait that the dom is ready before resolving the promise",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "domready.ts",
        "extension": "ts",
        "relPath": "src/js/dom/domready.ts",
        "children": {}
    },
    "sugar.js.dom.emptyNode": {
        "name": "emptyNode",
        "type": "Function",
        "description": "Empty a node by removing each childs one after the other",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "emptyNode.js",
        "extension": "js",
        "relPath": "src/js/dom/emptyNode.js",
        "children": {}
    },
    "js.dom.emptyNode": {
        "name": "emptyNode",
        "type": "Function",
        "description": "Empty a node by removing each childs one after the other",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "emptyNode.ts",
        "extension": "ts",
        "relPath": "src/js/dom/emptyNode.ts",
        "children": {}
    },
    "sugar.js.dom.exitFullscreen": {
        "name": "exitFullscreen",
        "type": "Function",
        "description": "Exit the fullscreen mode",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "exitFullscreen.js",
        "extension": "js",
        "relPath": "src/js/dom/exitFullscreen.js",
        "children": {}
    },
    "js.dom.exitFullscreen": {
        "name": "exitFullscreen",
        "type": "Function",
        "description": "Exit the fullscreen mode",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "exitFullscreen.ts",
        "extension": "ts",
        "relPath": "src/js/dom/exitFullscreen.ts",
        "children": {}
    },
    "sugar.js.dom.forceRedraw": {
        "name": "forceRedraw",
        "type": "Function",
        "description": "Force the element to be painted again in case of visual issues",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "forceRedraw.js",
        "extension": "js",
        "relPath": "src/js/dom/forceRedraw.js",
        "children": {}
    },
    "js.dom.forceRedraw": {
        "name": "forceRedraw",
        "type": "Function",
        "description": "Force the element to be painted again in case of visual issues",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "forceRedraw.ts",
        "extension": "ts",
        "relPath": "src/js/dom/forceRedraw.ts",
        "children": {}
    },
    "sugar.js.dom.getAnimationProperties": {
        "name": "getAnimationProperties",
        "type": "Function",
        "description": "Get the css animation properties from an HTMLElement in an object format",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "getAnimationProperties.js",
        "extension": "js",
        "relPath": "src/js/dom/getAnimationProperties.js",
        "children": {}
    },
    "js.dom.getAnimationProperties": {
        "name": "getAnimationProperties",
        "type": "Function",
        "description": "Get the css animation properties from an HTMLElement in an object format",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "getAnimationProperties.ts",
        "extension": "ts",
        "relPath": "src/js/dom/getAnimationProperties.ts",
        "children": {}
    },
    "sugar.js.dom.getStyleProperty": {
        "name": "getStyleProperty",
        "type": "Function",
        "description": "Get a style property on the passed element through the computed style.\nThis function try to store the actual style to not trigger more that 1 redraw\neach js execution loop.",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "getStyleProperty.js",
        "extension": "js",
        "relPath": "src/js/dom/getStyleProperty.js",
        "children": {}
    },
    "js.dom.getStyleProperty": {
        "name": "getStyleProperty",
        "type": "Function",
        "description": "Get a style property on the passed element through the computed style.\nThis function try to store the actual style to not trigger more that 1 redraw\neach js execution loop.",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "getStyleProperty.ts",
        "extension": "ts",
        "relPath": "src/js/dom/getStyleProperty.ts",
        "children": {}
    },
    "sugar.js.dom.getTransitionProperties": {
        "name": "getTransitionProperties",
        "type": "Function",
        "description": "Get the css transition properties from an HTMLElement in an object format",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "getTransitionProperties.js",
        "extension": "js",
        "relPath": "src/js/dom/getTransitionProperties.js",
        "children": {}
    },
    "js.dom.getTransitionProperties": {
        "name": "getTransitionProperties",
        "type": "Function",
        "description": "Get the css transition properties from an HTMLElement in an object format",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "getTransitionProperties.ts",
        "extension": "ts",
        "relPath": "src/js/dom/getTransitionProperties.ts",
        "children": {}
    },
    "sugar.js.dom.getTranslateProperties": {
        "name": "getTranslateProperties",
        "type": "Function",
        "description": "Get a translate properties of an HTMLElement",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "getTranslateProperties.js",
        "extension": "js",
        "relPath": "src/js/dom/getTranslateProperties.js",
        "children": {}
    },
    "js.dom.getTranslateProperties": {
        "name": "getTranslateProperties",
        "type": "Function",
        "description": "Get a translate properties of an HTMLElement",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "getTranslateProperties.ts",
        "extension": "ts",
        "relPath": "src/js/dom/getTranslateProperties.ts",
        "children": {}
    },
    "sugar.js.dom.imageLoaded": {
        "name": "imageLoaded",
        "type": "Function",
        "description": "Wait until the passed image is fully loaded",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "imageLoaded.js",
        "extension": "js",
        "relPath": "src/js/dom/imageLoaded.js",
        "children": {}
    },
    "js.dom.imageLoaded": {
        "name": "imageLoaded",
        "type": "Function",
        "description": "Wait until the passed image is fully loaded",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "imageLoaded.ts",
        "extension": "ts",
        "relPath": "src/js/dom/imageLoaded.ts",
        "children": {}
    },
    "sugar.js.dom.imagesLoaded": {
        "name": "imagesLoaded",
        "type": "Function",
        "description": "Detect when some images are loaded. This function take advantage of the SPromise class\nand trigger an event called \"img.loaded\" that will be triggered on each loaded images and another called \"loaded\" once all the images are loaded.\nSee in the example bellow.",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "imagesLoaded.js",
        "extension": "js",
        "relPath": "src/js/dom/imagesLoaded.js",
        "children": {}
    },
    "js.dom.imagesLoaded": {
        "name": "imagesLoaded",
        "type": "Function",
        "description": "Detect when some images are loaded. This function take advantage of the SPromise class\nand trigger an event called \"img.loaded\" that will be triggered on each loaded images and another called \"loaded\" once all the images are loaded.\nSee in the example bellow.",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "imagesLoaded.ts",
        "extension": "ts",
        "relPath": "src/js/dom/imagesLoaded.ts",
        "children": {}
    },
    "sugar.js.dom.inViewportPercentage": {
        "name": "inViewportPercentage",
        "type": "Function",
        "description": "Return how many percent the passed element is visible in the viewport",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "inViewportPercentage.js",
        "extension": "js",
        "relPath": "src/js/dom/inViewportPercentage.js",
        "children": {}
    },
    "js.dom.inViewportPercentage": {
        "name": "inViewportPercentage",
        "type": "Function",
        "description": "Return how many percent the passed element is visible in the viewport",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "inViewportPercentage.ts",
        "extension": "ts",
        "relPath": "src/js/dom/inViewportPercentage.ts",
        "children": {}
    },
    "sugar.js.dom.inViewportStatusChange": {
        "name": "inViewportStatusChange",
        "type": "Function",
        "description": "Monitor when the passed element enter or exit the viewport",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "inViewportStatusChange.js",
        "extension": "js",
        "relPath": "src/js/dom/inViewportStatusChange.js",
        "children": {}
    },
    "js.dom.inViewportStatusChange": {
        "name": "inViewportStatusChange",
        "type": "Function",
        "description": "Monitor when the passed element enter or exit the viewport",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "inViewportStatusChange.ts",
        "extension": "ts",
        "relPath": "src/js/dom/inViewportStatusChange.ts",
        "children": {}
    },
    "sugar.js.dom.innerHtml": {
        "name": "innerHtml",
        "type": "Function",
        "description": "Change the content of a Node with the possibility to animate the change using one of these animations:\n- fade\n- fadeUp\n- fadeDown\n- fadeLeft\n- fadeRight\nYou can also choose between 3 actions which are: replace, append and prepend",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "innerHtml.js",
        "extension": "js",
        "relPath": "src/js/dom/innerHtml.js",
        "children": {}
    },
    "js.dom.innerHtml": {
        "name": "innerHtml",
        "type": "Function",
        "description": "Change the content of a Node with the possibility to animate the change using one of these animations:\n- fade\n- fadeUp\n- fadeDown\n- fadeLeft\n- fadeRight\nYou can also choose between 3 actions which are: replace, append and prepend",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "innerHtml.ts",
        "extension": "ts",
        "relPath": "src/js/dom/innerHtml.ts",
        "children": {}
    },
    "sugar.js.dom.insertAfter": {
        "name": "insertAfter",
        "type": "Function",
        "description": "Insert an HTMLElement after another HTMLElement",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "insertAfter.js",
        "extension": "js",
        "relPath": "src/js/dom/insertAfter.js",
        "children": {}
    },
    "js.dom.insertAfter": {
        "name": "insertAfter",
        "type": "Function",
        "description": "Insert an HTMLElement after another HTMLElement",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "insertAfter.ts",
        "extension": "ts",
        "relPath": "src/js/dom/insertAfter.ts",
        "children": {}
    },
    "sugar.js.dom.isHover": {
        "name": "isHover",
        "type": "Function",
        "description": "Check if the mouse is hover the passed HTMLElement",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "isHover.js",
        "extension": "js",
        "relPath": "src/js/dom/isHover.js",
        "children": {}
    },
    "js.dom.isHover": {
        "name": "isHover",
        "type": "Function",
        "description": "Check if the mouse is hover the passed HTMLElement",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "isHover.ts",
        "extension": "ts",
        "relPath": "src/js/dom/isHover.ts",
        "children": {}
    },
    "sugar.js.dom.isInIframe": {
        "name": "isInIframe",
        "type": "Function",
        "description": "Check if the page is loaded inside an iframe",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "isInIframe.js",
        "extension": "js",
        "relPath": "src/js/dom/isInIframe.js",
        "children": {}
    },
    "js.dom.isInIframe": {
        "name": "isInIframe",
        "type": "Function",
        "description": "Check if the page is loaded inside an iframe",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "isInIframe.ts",
        "extension": "ts",
        "relPath": "src/js/dom/isInIframe.ts",
        "children": {}
    },
    "sugar.js.dom.isInViewport": {
        "name": "isInViewport",
        "type": "Function",
        "description": "Check if the passed HTMLElement is in the viewport or not",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "isInViewport.js",
        "extension": "js",
        "relPath": "src/js/dom/isInViewport.js",
        "children": {}
    },
    "js.dom.isInViewport": {
        "name": "isInViewport",
        "type": "Function",
        "description": "Check if the passed HTMLElement is in the viewport or not",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "isInViewport.ts",
        "extension": "ts",
        "relPath": "src/js/dom/isInViewport.ts",
        "children": {}
    },
    "sugar.js.dom.isVisible": {
        "name": "isVisible",
        "type": "Function",
        "description": "Check if the passed HTMLElement is visible or not.\nVisible mean that it has not an opacity of 0, not a visibility of hidden and not a display of none",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "isVisible.js",
        "extension": "js",
        "relPath": "src/js/dom/isVisible.js",
        "children": {}
    },
    "js.dom.isVisible": {
        "name": "isVisible",
        "type": "Function",
        "description": "Check if the passed HTMLElement is visible or not.\nVisible mean that it has not an opacity of 0, not a visibility of hidden and not a display of none",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "isVisible.ts",
        "extension": "ts",
        "relPath": "src/js/dom/isVisible.ts",
        "children": {}
    },
    "sugar.js.dom.linkLoaded": {
        "name": "linkLoaded",
        "type": "Function",
        "description": "Wait until the passed HTMLLinkElement is fully loaded",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "linkLoaded.js",
        "extension": "js",
        "relPath": "src/js/dom/linkLoaded.js",
        "children": {}
    },
    "js.dom.linkLoaded": {
        "name": "linkLoaded",
        "type": "Function",
        "description": "Wait until the passed HTMLLinkElement is fully loaded",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "linkLoaded.ts",
        "extension": "ts",
        "relPath": "src/js/dom/linkLoaded.ts",
        "children": {}
    },
    "sugar.js.dom.matches": {
        "name": "matches",
        "type": "Function",
        "description": "Polyfill for the Element.matches function",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "matches.js",
        "extension": "js",
        "relPath": "src/js/dom/matches.js",
        "children": {}
    },
    "js.dom.matches": {
        "name": "matches",
        "type": "Function",
        "description": "Polyfill for the Element.matches function",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "matches.ts",
        "extension": "ts",
        "relPath": "src/js/dom/matches.ts",
        "children": {}
    },
    "sugar.js.dom.next": {
        "name": "next",
        "type": "Function",
        "description": "Browse the passed element next siblings to find the first element that matches the passed selector",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "next.js",
        "extension": "js",
        "relPath": "src/js/dom/next.js",
        "children": {}
    },
    "js.dom.next": {
        "name": "next",
        "type": "Function",
        "description": "Browse the passed element next siblings to find the first element that matches the passed selector",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "next.ts",
        "extension": "ts",
        "relPath": "src/js/dom/next.ts",
        "children": {}
    },
    "sugar.js.dom.nodeIndex": {
        "name": "nodeIndex",
        "type": "Function",
        "description": "Return the inde of the passed node inside the html",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "nodeIndex.js",
        "extension": "js",
        "relPath": "src/js/dom/nodeIndex.js",
        "children": {}
    },
    "js.dom.nodeIndex": {
        "name": "nodeIndex",
        "type": "Function",
        "description": "Return the inde of the passed node inside the html",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "nodeIndex.ts",
        "extension": "ts",
        "relPath": "src/js/dom/nodeIndex.ts",
        "children": {}
    },
    "sugar.js.dom.observeAttributes": {
        "name": "observeAttributes",
        "type": "Function",
        "description": "Observe attributes on an HTMLElement and get mutations through the SPromise instance",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "observeAttributes.js",
        "extension": "js",
        "relPath": "src/js/dom/observeAttributes.js",
        "children": {
            "attributes": {
                "name": "attributes",
                "type": "{Array}"
            }
        }
    },
    "js.dom.observeAttributes": {
        "name": "observeAttributes",
        "type": "Function",
        "description": "Observe attributes on an HTMLElement and get mutations through the SPromise instance",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "observeAttributes.ts",
        "extension": "ts",
        "relPath": "src/js/dom/observeAttributes.ts",
        "children": {
            "attributes": {
                "name": "attributes",
                "type": "{Array}"
            }
        }
    },
    "sugar.js.dom.observeMutations": {
        "name": "observeMutations",
        "type": "Function",
        "description": "Observe mutations on an HTMLElement and get them through the observable subscription.\nYou can pass the mutation observer settings through the second argument. By default, here's his values:\n- attributes: true,\n- childList: false,\n- subtree: false",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "observeMutations.js",
        "extension": "js",
        "relPath": "src/js/dom/observeMutations.js",
        "children": {}
    },
    "js.dom.observeMutations": {
        "name": "observeMutations",
        "type": "Function",
        "description": "Observe mutations on an HTMLElement and get them through the observable subscription.\nYou can pass the mutation observer settings through the second argument. By default, here's his values:\n- attributes: true,\n- childList: false,\n- subtree: false",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "observeMutations.ts",
        "extension": "ts",
        "relPath": "src/js/dom/observeMutations.ts",
        "children": {}
    },
    "sugar.js.dom.offset": {
        "name": "offset",
        "type": "Function",
        "description": "Get the offset top and left of the passed element from the document top left point",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "offset.js",
        "extension": "js",
        "relPath": "src/js/dom/offset.js",
        "children": {}
    },
    "js.dom.offset": {
        "name": "offset",
        "type": "Function",
        "description": "Get the offset top and left of the passed element from the document top left point",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "offset.ts",
        "extension": "ts",
        "relPath": "src/js/dom/offset.ts",
        "children": {}
    },
    "sugar.js.dom.offsetParent": {
        "name": "offsetParent",
        "type": "Function",
        "description": "Get the offset top and left of the passed element from his parent top left point",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "offsetParent.js",
        "extension": "js",
        "relPath": "src/js/dom/offsetParent.js",
        "children": {}
    },
    "js.dom.offsetParent": {
        "name": "offsetParent",
        "type": "Function",
        "description": "Get the offset top and left of the passed element from his parent top left point",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "offsetParent.ts",
        "extension": "ts",
        "relPath": "src/js/dom/offsetParent.ts",
        "children": {}
    },
    "sugar.js.dom.onSwipe": {
        "name": "onSwipe",
        "type": "Function",
        "description": "Detect swipes gestures on touch devices.",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "onSwipe.js",
        "extension": "js",
        "relPath": "src/js/dom/onSwipe.js",
        "children": {}
    },
    "js.dom.onSwipe": {
        "name": "onSwipe",
        "type": "Function",
        "description": "Detect swipes gestures on touch devices.",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "onSwipe.ts",
        "extension": "ts",
        "relPath": "src/js/dom/onSwipe.ts",
        "children": {}
    },
    "sugar.js.dom.prependChild": {
        "name": "prependChild",
        "type": "Function",
        "description": "Prepend an HTMLElement into another HTMLElement",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "prependChild.js",
        "extension": "js",
        "relPath": "src/js/dom/prependChild.js",
        "children": {}
    },
    "js.dom.prependChild": {
        "name": "prependChild",
        "type": "Function",
        "description": "Prepend an HTMLElement into another HTMLElement",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "prependChild.ts",
        "extension": "ts",
        "relPath": "src/js/dom/prependChild.ts",
        "children": {}
    },
    "sugar.js.dom.previous": {
        "name": "previous",
        "type": "Function",
        "description": "Browse the passed element previous siblings to find the first element that matches the passed selector",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "previous.js",
        "extension": "js",
        "relPath": "src/js/dom/previous.js",
        "children": {}
    },
    "js.dom.previous": {
        "name": "previous",
        "type": "Function",
        "description": "Browse the passed element previous siblings to find the first element that matches the passed selector",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "previous.ts",
        "extension": "ts",
        "relPath": "src/js/dom/previous.ts",
        "children": {}
    },
    "sugar.js.dom.querySelector": {
        "name": "querySelector",
        "type": "Function",
        "description": "Enhanced proxy of the Element.querySelector function that let you specify\nif you want an element that is visible, or even that is in the viewport",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "querySelector.js",
        "extension": "js",
        "relPath": "src/js/dom/querySelector.js",
        "children": {
            "visible": {
                "name": "visible",
                "type": "{Boolean}"
            },
            "inViewport": {
                "name": "inViewport",
                "type": "{Boolean}"
            },
            "rootNode": {
                "name": "rootNode",
                "type": "{HTMLElement}"
            }
        }
    },
    "js.dom.querySelector": {
        "name": "querySelector",
        "type": "Function",
        "description": "Enhanced proxy of the Element.querySelector function that let you specify\nif you want an element that is visible, or even that is in the viewport",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "querySelector.ts",
        "extension": "ts",
        "relPath": "src/js/dom/querySelector.ts",
        "children": {
            "visible": {
                "name": "visible",
                "type": "{Boolean}"
            },
            "inViewport": {
                "name": "inViewport",
                "type": "{Boolean}"
            },
            "rootNode": {
                "name": "rootNode",
                "type": "{HTMLElement}"
            }
        }
    },
    "sugar.js.dom.querySelectorAll": {
        "name": "querySelectorAll",
        "type": "Function",
        "description": "Enhanced proxy of the Element.querySelectorAll function that let you specify\nif you want elements that are visible, or even that are in the viewport",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "querySelectorAll.js",
        "extension": "js",
        "relPath": "src/js/dom/querySelectorAll.js",
        "children": {
            "visible": {
                "name": "visible",
                "type": "{Boolean}"
            },
            "inViewport": {
                "name": "inViewport",
                "type": "{Boolean}"
            },
            "rootNode": {
                "name": "rootNode",
                "type": "{HTMLElement}"
            }
        }
    },
    "js.dom.querySelectorAll": {
        "name": "querySelectorAll",
        "type": "Function",
        "description": "Enhanced proxy of the Element.querySelectorAll function that let you specify\nif you want elements that are visible, or even that are in the viewport",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "querySelectorAll.ts",
        "extension": "ts",
        "relPath": "src/js/dom/querySelectorAll.ts",
        "children": {
            "visible": {
                "name": "visible",
                "type": "{Boolean}"
            },
            "inViewport": {
                "name": "inViewport",
                "type": "{Boolean}"
            },
            "rootNode": {
                "name": "rootNode",
                "type": "{HTMLElement}"
            }
        }
    },
    "sugar.js.dom.querySelectorAllWithStyle": {
        "name": "querySelectorAllWithStyle",
        "type": "Function",
        "description": "Select all node that match the style object passed as parameter",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "querySelectorAllWithStyle.js",
        "extension": "js",
        "relPath": "src/js/dom/querySelectorAllWithStyle.js",
        "children": {
            "settings.rootNode": {
                "name": "settings.rootNode",
                "type": "{HTMLElement}"
            }
        }
    },
    "js.dom.querySelectorAllWithStyle": {
        "name": "querySelectorAllWithStyle",
        "type": "Function",
        "description": "Select all node that match the style object passed as parameter",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "querySelectorAllWithStyle.ts",
        "extension": "ts",
        "relPath": "src/js/dom/querySelectorAllWithStyle.ts",
        "children": {
            "settings.rootNode": {
                "name": "settings.rootNode",
                "type": "{HTMLElement}"
            }
        }
    },
    "sugar.js.dom.querySelectorLive": {
        "name": "querySelectorLive",
        "type": "Function",
        "description": "Observe the dom to get all the elements that matches a passed css selector at any point in time.\nBe warned that this use the mutation observer API and will monitor all the document for new nodes. Make sure to use it\nwhen you don't have the chance to use the custom elements API instead",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "querySelectorLive.js",
        "extension": "js",
        "relPath": "src/js/dom/querySelectorLive.js",
        "children": {
            "settings.rootNode": {
                "name": "settings.rootNode",
                "type": "{HTMLElement}"
            },
            "settings.once": {
                "name": "settings.once",
                "type": "{Boolean}"
            }
        }
    },
    "js.dom.querySelectorLive": {
        "name": "querySelectorLive",
        "type": "Function",
        "description": "Observe the dom to get all the elements that matches a passed css selector at any point in time.\nBe warned that this use the mutation observer API and will monitor all the document for new nodes. Make sure to use it\nwhen you don't have the chance to use the custom elements API instead",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "querySelectorLive.ts",
        "extension": "ts",
        "relPath": "src/js/dom/querySelectorLive.ts",
        "children": {
            "settings.rootNode": {
                "name": "settings.rootNode",
                "type": "{HTMLElement}"
            },
            "settings.once": {
                "name": "settings.once",
                "type": "{Boolean}"
            }
        }
    },
    "sugar.js.dom.realHeight": {
        "name": "realHeight",
        "type": "Function",
        "description": "Return the full height of an element that has maybe a max-height, etc...",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "realHeight.js",
        "extension": "js",
        "relPath": "src/js/dom/realHeight.js",
        "children": {}
    },
    "js.dom.realHeight": {
        "name": "realHeight",
        "type": "Function",
        "description": "Return the full height of an element that has maybe a max-height, etc...",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "realHeight.ts",
        "extension": "ts",
        "relPath": "src/js/dom/realHeight.ts",
        "children": {}
    },
    "sugar.js.dom.removeClassOnAnimationEnd": {
        "name": "removeClassOnAnimationEnd",
        "type": "Function",
        "description": "Remove some class on animation end",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "removeClassOnAnimationEnd.js",
        "extension": "js",
        "relPath": "src/js/dom/removeClassOnAnimationEnd.js",
        "children": {}
    },
    "js.dom.removeClassOnAnimationEnd": {
        "name": "removeClassOnAnimationEnd",
        "type": "Function",
        "description": "Remove some class on animation end",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "removeClassOnAnimationEnd.ts",
        "extension": "ts",
        "relPath": "src/js/dom/removeClassOnAnimationEnd.ts",
        "children": {}
    },
    "sugar.js.dom.requestAnimationFrame": {
        "name": "requestAnimationFrame",
        "type": "Function",
        "description": "Proxy for the window.requestAnimationFrame function",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "requestAnimationFrame.js",
        "extension": "js",
        "relPath": "src/js/dom/requestAnimationFrame.js",
        "children": {}
    },
    "js.dom.requestAnimationFrame": {
        "name": "requestAnimationFrame",
        "type": "Function",
        "description": "Proxy for the window.requestAnimationFrame function",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "requestAnimationFrame.ts",
        "extension": "ts",
        "relPath": "src/js/dom/requestAnimationFrame.ts",
        "children": {}
    },
    "sugar.js.dom.requestFullscreen": {
        "name": "requestFullscreen",
        "type": "Function",
        "description": "Request fullscreen on the passed DOM element",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "requestFullscreen.js",
        "extension": "js",
        "relPath": "src/js/dom/requestFullscreen.js",
        "children": {}
    },
    "js.dom.requestFullscreen": {
        "name": "requestFullscreen",
        "type": "Function",
        "description": "Request fullscreen on the passed DOM element",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "requestFullscreen.ts",
        "extension": "ts",
        "relPath": "src/js/dom/requestFullscreen.ts",
        "children": {}
    },
    "sugar.js.dom.scriptLoaded": {
        "name": "scriptLoaded",
        "type": "Function",
        "description": "Detect when a script has been fully loaded",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "scriptLoaded.js",
        "extension": "js",
        "relPath": "src/js/dom/scriptLoaded.js",
        "children": {}
    },
    "js.dom.scriptLoaded": {
        "name": "scriptLoaded",
        "type": "Function",
        "description": "Detect when a script has been fully loaded",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "scriptLoaded.ts",
        "extension": "ts",
        "relPath": "src/js/dom/scriptLoaded.ts",
        "children": {}
    },
    "sugar.js.dom.scrollLeft": {
        "name": "scrollLeft",
        "type": "Function",
        "description": "Get the amount of scroll left",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "scrollLeft.js",
        "extension": "js",
        "relPath": "src/js/dom/scrollLeft.js",
        "children": {}
    },
    "js.dom.scrollLeft": {
        "name": "scrollLeft",
        "type": "Function",
        "description": "Get the amount of scroll left",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "scrollLeft.ts",
        "extension": "ts",
        "relPath": "src/js/dom/scrollLeft.ts",
        "children": {}
    },
    "sugar.js.dom.scrollTo": {
        "name": "scrollTo",
        "type": "Function",
        "description": "Function that let you make a smooth page scroll to a specific element in the page",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "scrollTo.js",
        "extension": "js",
        "relPath": "src/js/dom/scrollTo.js",
        "children": {}
    },
    "js.dom.scrollTo": {
        "name": "scrollTo",
        "type": "Function",
        "description": "Function that let you make a smooth page scroll to a specific element in the page",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "scrollTo.ts",
        "extension": "ts",
        "relPath": "src/js/dom/scrollTo.ts",
        "children": {}
    },
    "sugar.js.dom.scrollToLocationHash": {
        "name": "scrollToLocationHash",
        "type": "Function",
        "description": "Scroll to the location hash if an hash is present.\nThis function will try to get the target element from the hash and scroll to it",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "scrollToLocationHash.js",
        "extension": "js",
        "relPath": "src/js/dom/scrollToLocationHash.js",
        "children": {}
    },
    "js.dom.scrollToLocationHash": {
        "name": "scrollToLocationHash",
        "type": "Function",
        "description": "Scroll to the location hash if an hash is present.\nThis function will try to get the target element from the hash and scroll to it",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "scrollToLocationHash.ts",
        "extension": "ts",
        "relPath": "src/js/dom/scrollToLocationHash.ts",
        "children": {}
    },
    "sugar.js.dom.scrollTop": {
        "name": "scrollTop",
        "type": "Function",
        "description": "Return the amount of scroll top that the user as made in the page",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "scrollTop.js",
        "extension": "js",
        "relPath": "src/js/dom/scrollTop.js",
        "children": {}
    },
    "js.dom.scrollTop": {
        "name": "scrollTop",
        "type": "Function",
        "description": "Return the amount of scroll top that the user as made in the page",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "scrollTop.ts",
        "extension": "ts",
        "relPath": "src/js/dom/scrollTop.ts",
        "children": {}
    },
    "sugar.js.dom.sendForm": {
        "name": "sendForm",
        "type": "Function",
        "description": "Send a form through an ajax call and return back a promise resolved with the server response",
        "namespace": "sugar.js.dom",
        "status": "wip",
        "since": "1.0.0",
        "filename": "sendForm.js",
        "extension": "js",
        "relPath": "src/js/dom/sendForm.js",
        "children": {}
    },
    "js.dom.sendForm": {
        "name": "sendForm",
        "type": "Function",
        "description": "Send a form through an ajax call and return back a promise resolved with the server response",
        "namespace": "js.dom",
        "status": "wip",
        "since": "1.0.0",
        "filename": "sendForm.ts",
        "extension": "ts",
        "relPath": "src/js/dom/sendForm.ts",
        "children": {}
    },
    "sugar.js.dom.splitLetters": {
        "name": "splitLetters",
        "type": "Function",
        "description": "Split each letters inside an HTMLElement by scoping them inside multiple tags.\nHere's an result sample for : Hello World\n```html\n<span style=\"white-space:nowrap\">\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">H</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">e</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">l</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">l</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">o</span>\n</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">&nbsp;</span>\n</span>\n<span style=\"white-space:nowrap\">\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">W</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">o</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">r</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">l</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">d</span>\n</span>\n</span>\n```",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "splitLetters.js",
        "extension": "js",
        "relPath": "src/js/dom/splitLetters.js",
        "children": {}
    },
    "js.dom.splitLetters": {
        "name": "splitLetters",
        "type": "Function",
        "description": "Split each letters inside an HTMLElement by scoping them inside multiple tags.\nHere's an result sample for : Hello World\n```html\n<span style=\"white-space:nowrap\">\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">H</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">e</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">l</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">l</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">o</span>\n</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">&nbsp;</span>\n</span>\n<span style=\"white-space:nowrap\">\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">W</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">o</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">r</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">l</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">d</span>\n</span>\n</span>\n```",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "splitLetters.ts",
        "extension": "ts",
        "relPath": "src/js/dom/splitLetters.ts",
        "children": {}
    },
    "sugar.js.dom.splitLines": {
        "name": "splitLines",
        "type": "Function",
        "description": "Split each lines inside an HTMLElement by scoping them inside some tags.\nHere's an result sample for :\nHello\nWorld\n\n```html\n<p class=\"s-split-lines\">Hello</p>\n<p class=\"s-split-lines\">World</p>\n```",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "splitLines.js",
        "extension": "js",
        "relPath": "src/js/dom/splitLines.js",
        "children": {}
    },
    "js.dom.splitLines": {
        "name": "splitLines",
        "type": "Function",
        "description": "Split each lines inside an HTMLElement by scoping them inside some tags.\nHere's an result sample for :\nHello\nWorld\n\n```html\n<p class=\"s-split-lines\">Hello</p>\n<p class=\"s-split-lines\">World</p>\n```",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "splitLines.ts",
        "extension": "ts",
        "relPath": "src/js/dom/splitLines.ts",
        "children": {}
    },
    "sugar.js.dom.splitWords": {
        "name": "splitWords",
        "type": "Function",
        "description": "Split each words inside an HTMLElement by scoping them inside some tags.\nHere's an result sample for :\nHello World\n\n```html\n<span class=\"s-split-words\">Hello</span>\n<span class=\"s-split-words\">World</span>\n```",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "splitWords.js",
        "extension": "js",
        "relPath": "src/js/dom/splitWords.js",
        "children": {}
    },
    "js.dom.splitWords": {
        "name": "splitWords",
        "type": "Function",
        "description": "Split each words inside an HTMLElement by scoping them inside some tags.\nHere's an result sample for :\nHello World\n\n```html\n<span class=\"s-split-words\">Hello</span>\n<span class=\"s-split-words\">World</span>\n```",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "splitWords.ts",
        "extension": "ts",
        "relPath": "src/js/dom/splitWords.ts",
        "children": {}
    },
    "sugar.js.dom.stripTags": {
        "name": "stripTags",
        "type": "Function",
        "description": "Strip the tags of the passed text",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "stripTags.js",
        "extension": "js",
        "relPath": "src/js/dom/stripTags.js",
        "children": {}
    },
    "js.dom.stripTags": {
        "name": "stripTags",
        "type": "Function",
        "description": "Strip the tags of the passed text",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "stripTags.ts",
        "extension": "ts",
        "relPath": "src/js/dom/stripTags.ts",
        "children": {}
    },
    "sugar.js.dom.style": {
        "name": "style",
        "type": "Function",
        "description": "Set or remove a css style property on an HTMLElement",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "style.js",
        "extension": "js",
        "relPath": "src/js/dom/style.js",
        "children": {}
    },
    "js.dom.style": {
        "name": "style",
        "type": "Function",
        "description": "Set or remove a css style property on an HTMLElement",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "style.ts",
        "extension": "ts",
        "relPath": "src/js/dom/style.ts",
        "children": {}
    },
    "sugar.js.dom.styleObject2String": {
        "name": "styleObject2String",
        "type": "Function",
        "description": "Transform a style object to inline string separated by ;",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "styleObject2String.js",
        "extension": "js",
        "relPath": "src/js/dom/styleObject2String.js",
        "children": {}
    },
    "js.dom.styleObject2String": {
        "name": "styleObject2String",
        "type": "Function",
        "description": "Transform a style object to inline string separated by ;",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "styleObject2String.ts",
        "extension": "ts",
        "relPath": "src/js/dom/styleObject2String.ts",
        "children": {}
    },
    "sugar.js.dom.styleString2Object": {
        "name": "styleString2Object",
        "type": "Function",
        "description": "Transform a style string to an object representation",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "styleString2Object.js",
        "extension": "js",
        "relPath": "src/js/dom/styleString2Object.js",
        "children": {}
    },
    "js.dom.styleString2Object": {
        "name": "styleString2Object",
        "type": "Function",
        "description": "Transform a style string to an object representation",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "styleString2Object.ts",
        "extension": "ts",
        "relPath": "src/js/dom/styleString2Object.ts",
        "children": {}
    },
    "sugar.js.dom.stylesheetsReady": {
        "name": "stylesheetsReady",
        "type": "Function",
        "description": "Wait until all the HTMLLinkElement's are properly loaded",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "stylesheetsReady.js",
        "extension": "js",
        "relPath": "src/js/dom/stylesheetsReady.js",
        "children": {}
    },
    "js.dom.stylesheetsReady": {
        "name": "stylesheetsReady",
        "type": "Function",
        "description": "Wait until all the HTMLLinkElement's are properly loaded",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "stylesheetsReady.ts",
        "extension": "ts",
        "relPath": "src/js/dom/stylesheetsReady.ts",
        "children": {}
    },
    "sugar.js.dom.textWidth": {
        "name": "textWidth",
        "type": "Function",
        "description": "Get the text width in px of a passed string or the passed HTMLElement",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "textWidth.js",
        "extension": "js",
        "relPath": "src/js/dom/textWidth.js",
        "children": {}
    },
    "js.dom.textWidth": {
        "name": "textWidth",
        "type": "Function",
        "description": "Get the text width in px of a passed string or the passed HTMLElement",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "textWidth.ts",
        "extension": "ts",
        "relPath": "src/js/dom/textWidth.ts",
        "children": {}
    },
    "sugar.js.dom.toDomNodes": {
        "name": "toDomNodes",
        "type": "Function",
        "description": "Return a usable nodeTree from a variable source like selector, an html string, an html template tag or a node that will be cloned.",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "toDomNodes.js",
        "extension": "js",
        "relPath": "src/js/dom/toDomNodes.js",
        "children": {}
    },
    "js.dom.toDomNodes": {
        "name": "toDomNodes",
        "type": "Function",
        "description": "Return a usable nodeTree from a variable source like selector, an html string, an html template tag or a node that will be cloned.",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "toDomNodes.ts",
        "extension": "ts",
        "relPath": "src/js/dom/toDomNodes.ts",
        "children": {}
    },
    "sugar.js.dom.toggleFullscreen": {
        "name": "toggleFullscreen",
        "type": "Function",
        "description": "Toggle the fullscreen mode",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "toggleFullscreen.js",
        "extension": "js",
        "relPath": "src/js/dom/toggleFullscreen.js",
        "children": {}
    },
    "js.dom.toggleFullscreen": {
        "name": "toggleFullscreen",
        "type": "Function",
        "description": "Toggle the fullscreen mode",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "toggleFullscreen.ts",
        "extension": "ts",
        "relPath": "src/js/dom/toggleFullscreen.ts",
        "children": {}
    },
    "sugar.js.dom.when": {
        "name": "when",
        "type": "Function",
        "description": "Return a promise that will be resolved when the wanted status has been applied on the passed HTMLElement.\nThe status that can be requested are:\n- attribute : Detect when a special attribute has been applied on the element\n--- settings.attribute : Specify the attribute to check\n--- settings.checkFn : An optional function to check the attribute. The promise is resolved when this function return true\n\n- inViewport : Detect when the element enter in the viewport\n--- settings.offset : Specify an offset to detect the in viewport state\n\n- outOfViewport : Detect when the element exit the viewport\n--- settings.offset : Specify an offset to detect the out viewport state\n\n- transitionEnd : Detect when the css transition is finished on the element\n--- settings.callback : An optional callback function if you prefer instead of the promise\n\n- visible : Detect when the element become visible\n--- settings.callback : An optional callback function if you prefer instead of the promise",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "when.js",
        "extension": "js",
        "relPath": "src/js/dom/when.js",
        "children": {}
    },
    "js.dom.when": {
        "name": "when",
        "type": "Function",
        "description": "Return a promise that will be resolved when the wanted status has been applied on the passed HTMLElement.\nThe status that can be requested are:\n- attribute : Detect when a special attribute has been applied on the element\n--- settings.attribute : Specify the attribute to check\n--- settings.checkFn : An optional function to check the attribute. The promise is resolved when this function return true\n\n- inViewport : Detect when the element enter in the viewport\n--- settings.offset : Specify an offset to detect the in viewport state\n\n- outOfViewport : Detect when the element exit the viewport\n--- settings.offset : Specify an offset to detect the out viewport state\n\n- transitionEnd : Detect when the css transition is finished on the element\n--- settings.callback : An optional callback function if you prefer instead of the promise\n\n- visible : Detect when the element become visible\n--- settings.callback : An optional callback function if you prefer instead of the promise",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "when.ts",
        "extension": "ts",
        "relPath": "src/js/dom/when.ts",
        "children": {}
    },
    "sugar.js.dom.whenAttribute": {
        "name": "whenAttribute",
        "type": "Function",
        "description": "Resolve a promise when the wanted attribute on the passed HTMLElement exist or pass the check function provided",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "whenAttribute.js",
        "extension": "js",
        "relPath": "src/js/dom/whenAttribute.js",
        "children": {}
    },
    "js.dom.whenAttribute": {
        "name": "whenAttribute",
        "type": "Function",
        "description": "Resolve a promise when the wanted attribute on the passed HTMLElement exist or pass the check function provided",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "whenAttribute.ts",
        "extension": "ts",
        "relPath": "src/js/dom/whenAttribute.ts",
        "children": {}
    },
    "sugar.js.dom.whenInViewport": {
        "name": "whenInViewport",
        "type": "Function",
        "description": "Monitor an HTMLElement to be notified when it is in the viewport",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "whenInViewport.js",
        "extension": "js",
        "relPath": "src/js/dom/whenInViewport.js",
        "children": {}
    },
    "js.dom.whenInViewport": {
        "name": "whenInViewport",
        "type": "Function",
        "description": "Monitor an HTMLElement to be notified when it is in the viewport",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "whenInViewport.ts",
        "extension": "ts",
        "relPath": "src/js/dom/whenInViewport.ts",
        "children": {}
    },
    "sugar.js.dom.whenOutOfViewport": {
        "name": "whenOutOfViewport",
        "type": "Function",
        "description": "Monitor an HTMLElement to be notified when it exit the viewport",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "whenOutOfViewport.js",
        "extension": "js",
        "relPath": "src/js/dom/whenOutOfViewport.js",
        "children": {}
    },
    "js.dom.whenOutOfViewport": {
        "name": "whenOutOfViewport",
        "type": "Function",
        "description": "Monitor an HTMLElement to be notified when it exit the viewport",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "whenOutOfViewport.ts",
        "extension": "ts",
        "relPath": "src/js/dom/whenOutOfViewport.ts",
        "children": {}
    },
    "sugar.js.dom.whenTransitionEnd": {
        "name": "whenTransitionEnd",
        "type": "Function",
        "description": "Monitor an HTMLElement to be notified when his transition has ended",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "whenTransitionEnd.js",
        "extension": "js",
        "relPath": "src/js/dom/whenTransitionEnd.js",
        "children": {}
    },
    "js.dom.whenTransitionEnd": {
        "name": "whenTransitionEnd",
        "type": "Function",
        "description": "Monitor an HTMLElement to be notified when his transition has ended",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "whenTransitionEnd.ts",
        "extension": "ts",
        "relPath": "src/js/dom/whenTransitionEnd.ts",
        "children": {}
    },
    "sugar.js.dom.whenVisible": {
        "name": "whenVisible",
        "type": "Function",
        "description": "Monitor an HTMLElement to be notified when it is visible",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "whenVisible.js",
        "extension": "js",
        "relPath": "src/js/dom/whenVisible.js",
        "children": {}
    },
    "js.dom.whenVisible": {
        "name": "whenVisible",
        "type": "Function",
        "description": "Monitor an HTMLElement to be notified when it is visible",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "whenVisible.ts",
        "extension": "ts",
        "relPath": "src/js/dom/whenVisible.ts",
        "children": {}
    },
    "sugar.js.dom.wrap": {
        "name": "wrap",
        "type": "Function",
        "description": "Wrap an HTMLElement inside another `$wrapper` one",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "wrap.js",
        "extension": "js",
        "relPath": "src/js/dom/wrap.js",
        "children": {}
    },
    "js.dom.wrap": {
        "name": "wrap",
        "type": "Function",
        "description": "Wrap an HTMLElement inside another `$wrapper` one",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "wrap.ts",
        "extension": "ts",
        "relPath": "src/js/dom/wrap.ts",
        "children": {}
    },
    "sugar.js.dom.wrapInner": {
        "name": "wrapInner",
        "type": "Function",
        "description": "Wrap the content of the passed `$parent` inside a the passed HTMLElement `$wrapper`",
        "namespace": "sugar.js.dom",
        "since": "1.0.0",
        "filename": "wrapInner.js",
        "extension": "js",
        "relPath": "src/js/dom/wrapInner.js",
        "children": {}
    },
    "js.dom.wrapInner": {
        "name": "wrapInner",
        "type": "Function",
        "description": "Wrap the content of the passed `$parent` inside a the passed HTMLElement `$wrapper`",
        "namespace": "js.dom",
        "since": "1.0.0",
        "filename": "wrapInner.ts",
        "extension": "ts",
        "relPath": "src/js/dom/wrapInner.ts",
        "children": {}
    },
    "sugar.js.event.SEvent": {
        "name": "SEvent",
        "type": "Class",
        "description": "Proxy class to create custom events that can be dispatched\nthrough the standard dispatch method on any HTMLElement",
        "namespace": "sugar.js.event",
        "since": "2.0.0",
        "filename": "SEvent.js",
        "extension": "js",
        "relPath": "src/js/event/SEvent.js",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Construct the event"
            },
            "settings.cancelable": {
                "name": "settings.cancelable",
                "type": "Boolean",
                "description": "Set if the event is cancelable or not"
            },
            "settings.bubbles": {
                "name": "settings.bubbles",
                "type": "Boolean",
                "description": "Set if the event will bubble or not"
            },
            "settings.detail": {
                "name": "settings.detail",
                "type": "Object",
                "description": "Pass an object that will be sent with the event"
            }
        }
    },
    "js.event.SEvent": {
        "name": "SEvent",
        "type": "Class",
        "description": "Proxy class to create custom events that can be dispatched\nthrough the standard dispatch method on any HTMLElement",
        "namespace": "js.event",
        "since": "2.0.0",
        "filename": "SEvent.ts",
        "extension": "ts",
        "relPath": "src/js/event/SEvent.ts",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Construct the event"
            },
            "settings.cancelable": {
                "name": "settings.cancelable",
                "type": "Boolean",
                "description": "Set if the event is cancelable or not"
            },
            "settings.bubbles": {
                "name": "settings.bubbles",
                "type": "Boolean",
                "description": "Set if the event will bubble or not"
            },
            "settings.detail": {
                "name": "settings.detail",
                "type": "Object",
                "description": "Pass an object that will be sent with the event"
            }
        }
    },
    "sugar.js.event.emit": {
        "name": "emit",
        "type": "Function",
        "description": "This function can ben used to emit an event globally.\nYou can subscribe to these events using the \"sugar.js.event.subscribe\" function",
        "namespace": "sugar.js.event",
        "since": "2.0.0",
        "filename": "emit.js",
        "extension": "js",
        "relPath": "src/js/event/emit.js",
        "children": {}
    },
    "js.event.emit": {
        "name": "emit",
        "type": "Function",
        "description": "This function can ben used to emit an event globally.\nYou can subscribe to these events using the \"sugar.js.event.subscribe\" function",
        "namespace": "js.event",
        "since": "2.0.0",
        "filename": "emit.ts",
        "extension": "ts",
        "relPath": "src/js/event/emit.ts",
        "children": {}
    },
    "sugar.js.event.on": {
        "name": "on",
        "type": "Function",
        "description": "This function allows you to subscribe to global events triggered by the \"sugar.js.event.dispatch\" function\nIt use under the hood an SPromise instance",
        "namespace": "sugar.js.event",
        "since": "2.0.0",
        "filename": "on.js",
        "extension": "js",
        "relPath": "src/js/event/on.js",
        "children": {}
    },
    "js.event.on": {
        "name": "on",
        "type": "Function",
        "description": "This function allows you to subscribe to global events triggered by the \"sugar.js.event.dispatch\" function\nIt use under the hood an SPromise instance",
        "namespace": "js.event",
        "since": "2.0.0",
        "filename": "on.ts",
        "extension": "ts",
        "relPath": "src/js/event/on.ts",
        "children": {}
    },
    "sugar.js.feature.autoScrollAnchorLinks": {
        "name": "autoScrollAnchorLinks",
        "type": "Function",
        "description": "Listen for links contains an hash to init them for scroll to target on click",
        "namespace": "sugar.js.feature",
        "since": "2.0.0",
        "filename": "autoScrollAnchorLinks.js",
        "extension": "js",
        "relPath": "src/js/feature/autoScrollAnchorLinks.js",
        "children": {}
    },
    "js.feature.autoScrollAnchorLinks": {
        "name": "autoScrollAnchorLinks",
        "type": "Function",
        "description": "Listen for links contains an hash to init them for scroll to target on click",
        "namespace": "js.feature",
        "since": "2.0.0",
        "filename": "autoScrollAnchorLinks.ts",
        "extension": "ts",
        "relPath": "src/js/feature/autoScrollAnchorLinks.ts",
        "children": {}
    },
    "sugar.js.feature.imagesLazySrcAttribute": {
        "name": "imagesLazySrcAttribute",
        "type": "Feature",
        "description": "Add support for the `lazy-src` attribute on `img` elements.\nThe video `src` attribute will be populated when the `img` element enter the viewport",
        "namespace": "sugar.js.feature",
        "since": "2.0.0",
        "filename": "imagesLazySrcAttribute.js",
        "extension": "js",
        "relPath": "src/js/feature/imagesLazySrcAttribute.js",
        "children": {}
    },
    "js.feature.imagesLazySrcAttribute": {
        "name": "imagesLazySrcAttribute",
        "type": "Feature",
        "description": "Add support for the `lazy-src` attribute on `img` elements.\nThe video `src` attribute will be populated when the `img` element enter the viewport",
        "namespace": "js.feature",
        "since": "2.0.0",
        "filename": "imagesLazySrcAttribute.ts",
        "extension": "ts",
        "relPath": "src/js/feature/imagesLazySrcAttribute.ts",
        "children": {}
    },
    "sugar.js.feature.imagesLoadedAttribute": {
        "name": "imagesLoadedAttribute",
        "type": "Feature",
        "description": "Add on every images the attribute \"loaded\" when it has been fully loaded. This is useful\nfor styling purposes and for others thinks as well.",
        "namespace": "sugar.js.feature",
        "since": "1.0.0",
        "filename": "imagesLoadedAttribute.js",
        "extension": "js",
        "relPath": "src/js/feature/imagesLoadedAttribute.js",
        "children": {}
    },
    "js.feature.imagesLoadedAttribute": {
        "name": "imagesLoadedAttribute",
        "type": "Feature",
        "description": "Add on every images the attribute \"loaded\" when it has been fully loaded. This is useful\nfor styling purposes and for others thinks as well.",
        "namespace": "js.feature",
        "since": "1.0.0",
        "filename": "imagesLoadedAttribute.ts",
        "extension": "ts",
        "relPath": "src/js/feature/imagesLoadedAttribute.ts",
        "children": {}
    },
    "sugar.js.feature.handleInputAttributes": {
        "name": "handleInputAttributes",
        "type": "Feature",
        "description": "Add some events on some DOM Elements. Here's the list:\n- enter (onenter): Triggered when user tap ```enter``` on his keyboard from a *input*** or **textarea** element\n- escape (onescape): Triggered when user tap ```escape``` on his keyboard from a *input*** or **textarea** element",
        "namespace": "sugar.js.feature",
        "since": "1.0.0",
        "filename": "inputAdditionalEvents.js",
        "extension": "js",
        "relPath": "src/js/feature/inputAdditionalEvents.js",
        "children": {}
    },
    "js.feature.handleInputAttributes": {
        "name": "handleInputAttributes",
        "type": "Feature",
        "description": "Add some events on some DOM Elements. Here's the list:\n- enter (onenter): Triggered when user tap ```enter``` on his keyboard from a *input*** or **textarea** element\n- escape (onescape): Triggered when user tap ```escape``` on his keyboard from a *input*** or **textarea** element",
        "namespace": "js.feature",
        "since": "1.0.0",
        "filename": "inputAdditionalEvents.ts",
        "extension": "ts",
        "relPath": "src/js/feature/inputAdditionalEvents.ts",
        "children": {}
    },
    "sugar.js.feature.linksScrollHrefAttribute": {
        "name": "linksScrollHrefAttribute",
        "type": "Feature",
        "description": "Add the ability to set links href attribute with \"scroll:#target\" in order to animate the scroll to this target element",
        "namespace": "sugar.js.feature",
        "since": "1.0.0",
        "filename": "linksScrollHrefAttribute.js",
        "extension": "js",
        "relPath": "src/js/feature/linksScrollHrefAttribute.js",
        "children": {}
    },
    "js.feature.linksScrollHrefAttribute": {
        "name": "linksScrollHrefAttribute",
        "type": "Feature",
        "description": "Add the ability to set links href attribute with \"scroll:#target\" in order to animate the scroll to this target element",
        "namespace": "js.feature",
        "since": "1.0.0",
        "filename": "linksScrollHrefAttribute.ts",
        "extension": "ts",
        "relPath": "src/js/feature/linksScrollHrefAttribute.ts",
        "children": {}
    },
    "sugar.js.feature.videoLazySrcAttribute": {
        "name": "videoLazySrcAttribute",
        "type": "Feature",
        "description": "Add support for the `lazy-src` attribute on `video` elements.\nThe video `src` attribute will be populated when the `video` element enter the viewport",
        "namespace": "sugar.js.feature",
        "filename": "videosLazySrcAttribute.js",
        "extension": "js",
        "relPath": "src/js/feature/videosLazySrcAttribute.js",
        "children": {}
    },
    "js.feature.videoLazySrcAttribute": {
        "name": "videoLazySrcAttribute",
        "type": "Feature",
        "description": "Add support for the `lazy-src` attribute on `video` elements.\nThe video `src` attribute will be populated when the `video` element enter the viewport",
        "namespace": "js.feature",
        "filename": "videosLazySrcAttribute.ts",
        "extension": "ts",
        "relPath": "src/js/feature/videosLazySrcAttribute.ts",
        "children": {}
    },
    "sugar.js.filter.SGooeySvgFilter": {
        "name": "SGooeySvgFilter",
        "type": "Class",
        "description": "This class allows you to create with ease some complexe SVG filters and to apply it on any HTMLElement that you want\nby extending this class like so",
        "namespace": "sugar.js.filter",
        "status": "wip",
        "since": "1.0.0",
        "filename": "SSvgFilter.js",
        "extension": "js",
        "relPath": "src/js/filter/SSvgFilter.js",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "applyTo": {
                "name": "applyTo",
                "type": "Function",
                "description": "Apply the filter to an element"
            },
            "unapplyFrom": {
                "name": "unapplyFrom",
                "type": "Function",
                "description": "Unapply from"
            },
            "destroy": {
                "name": "destroy",
                "type": "Function",
                "description": "Destroy the filter"
            }
        }
    },
    "js.filter.SGooeySvgFilter": {
        "name": "SGooeySvgFilter",
        "type": "Class",
        "description": "This class allows you to create with ease some complexe SVG filters and to apply it on any HTMLElement that you want\nby extending this class like so",
        "namespace": "js.filter",
        "status": "wip",
        "since": "1.0.0",
        "filename": "SSvgFilter.ts",
        "extension": "ts",
        "relPath": "src/js/filter/SSvgFilter.ts",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "applyTo": {
                "name": "applyTo",
                "type": "Function",
                "description": "Apply the filter to an element"
            },
            "unapplyFrom": {
                "name": "unapplyFrom",
                "type": "Function",
                "description": "Unapply from"
            },
            "destroy": {
                "name": "destroy",
                "type": "Function",
                "description": "Destroy the filter"
            }
        }
    },
    "sugar.js.filter.SGradientSvgFilter": {
        "name": "SGradientSvgFilter",
        "type": "Class",
        "description": "This SVG filter class apply either a linear or a radial gradient of your choice\non an HTMLElement.\nThis is useful cause the gradient will only be applied on part of the elements that is really visible and will respect the opacity\nof each parts",
        "namespace": "sugar.js.filter",
        "since": "1.0.0",
        "filename": "SGradientSvgFilter.js",
        "extension": "js",
        "relPath": "src/js/filter/SGradientSvgFilter.js",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "linear": {
                "name": "linear",
                "type": "Function",
                "description": "Linear gradient"
            },
            "radial": {
                "name": "radial",
                "type": "Function",
                "description": "Radial gradient"
            },
            "applyTo": {
                "name": "applyTo",
                "type": "Function",
                "description": "Apply the filter to element"
            },
            "unapplyFrom": {
                "name": "unapplyFrom",
                "type": "Function",
                "description": "Remove the filter from element"
            }
        }
    },
    "js.filter.SGradientSvgFilter": {
        "name": "SGradientSvgFilter",
        "type": "Class",
        "description": "This SVG filter class apply either a linear or a radial gradient of your choice\non an HTMLElement.\nThis is useful cause the gradient will only be applied on part of the elements that is really visible and will respect the opacity\nof each parts",
        "namespace": "js.filter",
        "since": "1.0.0",
        "filename": "SGradientSvgFilter.ts",
        "extension": "ts",
        "relPath": "src/js/filter/SGradientSvgFilter.ts",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "linear": {
                "name": "linear",
                "type": "Function",
                "description": "Linear gradient"
            },
            "radial": {
                "name": "radial",
                "type": "Function",
                "description": "Radial gradient"
            },
            "applyTo": {
                "name": "applyTo",
                "type": "Function",
                "description": "Apply the filter to element"
            },
            "unapplyFrom": {
                "name": "unapplyFrom",
                "type": "Function",
                "description": "Remove the filter from element"
            }
        }
    },
    "sugar.js.filter.SMotionblurSvgFilter": {
        "name": "SMotionblurSvgFilter",
        "type": "Class",
        "description": "This class represent a motion blur svg filter that will blur your\nelement depending on his movements, direction and speed",
        "namespace": "sugar.js.filter",
        "since": "1.0.0",
        "filename": "SMotionblurSvgFilter.js",
        "extension": "js",
        "relPath": "src/js/filter/SMotionblurSvgFilter.js",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "amount": {
                "name": "amount",
                "type": "Number",
                "description": "Store the amount of motion blur to apply"
            },
            "applyTo": {
                "name": "applyTo",
                "type": "Function",
                "description": "Apply the filter to element"
            },
            "unapplyFrom": {
                "name": "unapplyFrom",
                "type": "Function",
                "description": "Remove the filter from element"
            },
            "destroy": {
                "name": "destroy",
                "type": "Function",
                "description": "Destroy the filter"
            }
        }
    },
    "js.filter.SMotionblurSvgFilter": {
        "name": "SMotionblurSvgFilter",
        "type": "Class",
        "description": "This class represent a motion blur svg filter that will blur your\nelement depending on his movements, direction and speed",
        "namespace": "js.filter",
        "since": "1.0.0",
        "filename": "SMotionblurSvgFilter.ts",
        "extension": "ts",
        "relPath": "src/js/filter/SMotionblurSvgFilter.ts",
        "children": {
            "amount": {
                "name": "amount",
                "type": "Number",
                "description": "Store the amount of motion blur to apply"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "applyTo": {
                "name": "applyTo",
                "type": "Function",
                "description": "Apply the filter to element"
            },
            "unapplyFrom": {
                "name": "unapplyFrom",
                "type": "Function",
                "description": "Remove the filter from element"
            },
            "destroy": {
                "name": "destroy",
                "type": "Function",
                "description": "Destroy the filter"
            }
        }
    },
    "sugar.js.filter.SOutlineSvgFilter": {
        "name": "SOutlineSvgFilter",
        "type": "Class",
        "description": "This class represent an outline filter that can be applied on any HTMLElement.",
        "namespace": "sugar.js.filter",
        "since": "1.0.0",
        "filename": "SOutlineSvgFilter.js",
        "extension": "js",
        "relPath": "src/js/filter/SOutlineSvgFilter.js",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "radius": {
                "name": "radius",
                "type": "Number",
                "description": "Get/Set the radius to produce the effect"
            }
        }
    },
    "js.filter.SOutlineSvgFilter": {
        "name": "SOutlineSvgFilter",
        "type": "Class",
        "description": "This class represent an outline filter that can be applied on any HTMLElement.",
        "namespace": "js.filter",
        "since": "1.0.0",
        "filename": "SOutlineSvgFilter.ts",
        "extension": "ts",
        "relPath": "src/js/filter/SOutlineSvgFilter.ts",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "radius": {
                "name": "radius",
                "type": "Number",
                "description": "Get/Set the radius to produce the effect"
            }
        }
    },
    "sugar.js.string.decodeHtmlEntities": {
        "name": "decodeHtmlEntities",
        "type": "Function",
        "description": "Decode an htmlentities encoded string",
        "namespace": "sugar.js.string",
        "since": "1.0.0",
        "filename": "decodeHtmlEntities.js",
        "extension": "js",
        "relPath": "src/js/html/decodeHtmlEntities.js",
        "children": {}
    },
    "js.string.decodeHtmlEntities": {
        "name": "decodeHtmlEntities",
        "type": "Function",
        "description": "Decode an htmlentities encoded string",
        "namespace": "js.string",
        "since": "1.0.0",
        "filename": "decodeHtmlEntities.ts",
        "extension": "ts",
        "relPath": "src/js/html/decodeHtmlEntities.ts",
        "children": {}
    },
    "sugar.js.html.getHtmlClassFromTagName": {
        "name": "getHtmlClassFromTagName",
        "type": "Function",
        "description": "This function simply return the HTML{name}Element class depending on the passed\ntag name like \"p\", \"input\", \"textarea\", etc...",
        "namespace": "sugar.js.html",
        "since": "2.0.0",
        "filename": "getHtmlClassFromTagName.js",
        "extension": "js",
        "relPath": "src/js/html/getHtmlClassFromTagName.js",
        "children": {}
    },
    "js.html.getHtmlClassFromTagName": {
        "name": "getHtmlClassFromTagName",
        "type": "Function",
        "description": "This function simply return the HTML{name}Element class depending on the passed\ntag name like \"p\", \"input\", \"textarea\", etc...",
        "namespace": "js.html",
        "since": "2.0.0",
        "filename": "getHtmlClassFromTagName.ts",
        "extension": "ts",
        "relPath": "src/js/html/getHtmlClassFromTagName.ts",
        "children": {}
    },
    "sugar.js.html.getHtmlhtmlClassFromHtmlClass": {
        "name": "getHtmlhtmlClassFromHtmlClass",
        "type": "Function",
        "description": "This function simply return the tagname depending on the passed HTML class\nlike HTMLAnchorElement, HTMLLinkElement, etc...",
        "namespace": "sugar.js.html",
        "since": "2.0.0",
        "filename": "getTagNameFromHtmlClass.js",
        "extension": "js",
        "relPath": "src/js/html/getTagNameFromHtmlClass.js",
        "children": {}
    },
    "js.html.getHtmlhtmlClassFromHtmlClass": {
        "name": "getHtmlhtmlClassFromHtmlClass",
        "type": "Function",
        "description": "This function simply return the tagname depending on the passed HTML class\nlike HTMLAnchorElement, HTMLLinkElement, etc...",
        "namespace": "js.html",
        "since": "2.0.0",
        "filename": "getTagNameFromHtmlClass.ts",
        "extension": "ts",
        "relPath": "src/js/html/getTagNameFromHtmlClass.ts",
        "children": {}
    },
    "sugar.js.html.HtmlTagToHtmlClassMap": {
        "name": "HtmlTagToHtmlClassMap",
        "type": "Object",
        "description": "This export an object mapping the HTML tag name to his corresponding HTML class (object not css class)",
        "namespace": "sugar.js.html",
        "since": "2.0.0",
        "filename": "htmlTagToHtmlClassMap.js",
        "extension": "js",
        "relPath": "src/js/html/htmlTagToHtmlClassMap.js",
        "children": {}
    },
    "js.html.HtmlTagToHtmlClassMap": {
        "name": "HtmlTagToHtmlClassMap",
        "type": "Object",
        "description": "This export an object mapping the HTML tag name to his corresponding HTML class (object not css class)",
        "namespace": "js.html",
        "since": "2.0.0",
        "filename": "htmlTagToHtmlClassMap.ts",
        "extension": "ts",
        "relPath": "src/js/html/htmlTagToHtmlClassMap.ts",
        "children": {}
    },
    "sugar.js.html.strToHtml": {
        "name": "strToHtml",
        "type": "Function",
        "description": "Return the html (dom) version of a string",
        "namespace": "sugar.js.html",
        "since": "1.0.0",
        "filename": "strToHtml.js",
        "extension": "js",
        "relPath": "src/js/html/strToHtml.js",
        "children": {}
    },
    "js.html.strToHtml": {
        "name": "strToHtml",
        "type": "Function",
        "description": "Return the html (dom) version of a string",
        "namespace": "js.html",
        "since": "1.0.0",
        "filename": "strToHtml.ts",
        "extension": "ts",
        "relPath": "src/js/html/strToHtml.ts",
        "children": {}
    },
    "sugar.js.html.toString": {
        "name": "toString",
        "type": "Function",
        "description": "Return the string version of a dom node or the dom node and his children",
        "namespace": "sugar.js.html",
        "since": "1.0.0",
        "filename": "toString.js",
        "extension": "js",
        "relPath": "src/js/html/toString.js",
        "children": {}
    },
    "js.html.toString": {
        "name": "toString",
        "type": "Function",
        "description": "Return the string version of a dom node or the dom node and his children",
        "namespace": "js.html",
        "since": "1.0.0",
        "filename": "toString.ts",
        "extension": "ts",
        "relPath": "src/js/html/toString.ts",
        "children": {}
    },
    "sugar.js.is.isChrome": {
        "name": "isChrome",
        "type": "Function",
        "description": "Detect if is chrome",
        "namespace": "sugar.js.is",
        "since": "2.0.0",
        "filename": "chrome.js",
        "extension": "js",
        "relPath": "src/js/is/chrome.js",
        "children": {}
    },
    "js.is.isChrome": {
        "name": "isChrome",
        "type": "Function",
        "description": "Detect if is chrome",
        "namespace": "js.is",
        "since": "2.0.0",
        "filename": "chrome.ts",
        "extension": "ts",
        "relPath": "src/js/is/chrome.ts",
        "children": {}
    },
    "sugar.js.is.isEdge": {
        "name": "isEdge",
        "type": "Function",
        "description": "Detect if is edge",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "edge.js",
        "extension": "js",
        "relPath": "src/js/is/edge.js",
        "children": {}
    },
    "js.is.isEdge": {
        "name": "isEdge",
        "type": "Function",
        "description": "Detect if is edge",
        "namespace": "js.is",
        "since": "1.0.0",
        "filename": "edge.ts",
        "extension": "ts",
        "relPath": "src/js/is/edge.ts",
        "children": {}
    },
    "sugar.js.is.isFirefox": {
        "name": "isFirefox",
        "type": "Function",
        "description": "Detect if is firefox",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "firefox.js",
        "extension": "js",
        "relPath": "src/js/is/firefox.js",
        "children": {}
    },
    "js.is.isFirefox": {
        "name": "isFirefox",
        "type": "Function",
        "description": "Detect if is firefox",
        "namespace": "js.is",
        "since": "1.0.0",
        "filename": "firefox.ts",
        "extension": "ts",
        "relPath": "src/js/is/firefox.ts",
        "children": {}
    },
    "sugar.js.is.isIe": {
        "name": "isIe",
        "type": "Function",
        "description": "Detect if is ie (internet explorer)",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "ie.js",
        "extension": "js",
        "relPath": "src/js/is/ie.js",
        "children": {}
    },
    "js.is.isIe": {
        "name": "isIe",
        "type": "Function",
        "description": "Detect if is ie (internet explorer)",
        "namespace": "js.is",
        "since": "1.0.0",
        "filename": "ie.ts",
        "extension": "ts",
        "relPath": "src/js/is/ie.ts",
        "children": {}
    },
    "sugar.js.is.isMobile": {
        "name": "isMobile",
        "type": "Function",
        "description": "Detect if is a mobile device (phone or tablet)",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "mobile.js",
        "extension": "js",
        "relPath": "src/js/is/mobile.js",
        "children": {}
    },
    "js.is.isMobile": {
        "name": "isMobile",
        "type": "Function",
        "description": "Detect if is a mobile device (phone or tablet)",
        "namespace": "js.is",
        "since": "1.0.0",
        "filename": "mobile.ts",
        "extension": "ts",
        "relPath": "src/js/is/mobile.ts",
        "children": {}
    },
    "sugar.js.is.isOpera": {
        "name": "isOpera",
        "type": "Function",
        "description": "Detect if is opera",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "opera.js",
        "extension": "js",
        "relPath": "src/js/is/opera.js",
        "children": {}
    },
    "js.is.isOpera": {
        "name": "isOpera",
        "type": "Function",
        "description": "Detect if is opera",
        "namespace": "js.is",
        "since": "1.0.0",
        "filename": "opera.ts",
        "extension": "ts",
        "relPath": "src/js/is/opera.ts",
        "children": {}
    },
    "sugar.js.is.isPhone": {
        "name": "isPhone",
        "type": "Function",
        "description": "Detect if is a phone device",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "phone.js",
        "extension": "js",
        "relPath": "src/js/is/phone.js",
        "children": {}
    },
    "js.is.isPhone": {
        "name": "isPhone",
        "type": "Function",
        "description": "Detect if is a phone device",
        "namespace": "js.is",
        "since": "1.0.0",
        "filename": "phone.ts",
        "extension": "ts",
        "relPath": "src/js/is/phone.ts",
        "children": {}
    },
    "sugar.js.is.isSafari": {
        "name": "isSafari",
        "type": "Function",
        "description": "Detect if is safari",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "safari.js",
        "extension": "js",
        "relPath": "src/js/is/safari.js",
        "children": {}
    },
    "js.is.isSafari": {
        "name": "isSafari",
        "type": "Function",
        "description": "Detect if is safari",
        "namespace": "js.is",
        "since": "1.0.0",
        "filename": "safari.ts",
        "extension": "ts",
        "relPath": "src/js/is/safari.ts",
        "children": {}
    },
    "sugar.js.is.isSamsumgBrowser": {
        "name": "isSamsumgBrowser",
        "type": "Function",
        "description": "Detect if is the samsung stock browser that is running the page",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "samsungBrowser.js",
        "extension": "js",
        "relPath": "src/js/is/samsungBrowser.js",
        "children": {}
    },
    "js.is.isSamsumgBrowser": {
        "name": "isSamsumgBrowser",
        "type": "Function",
        "description": "Detect if is the samsung stock browser that is running the page",
        "namespace": "js.is",
        "since": "1.0.0",
        "filename": "samsungBrowser.ts",
        "extension": "ts",
        "relPath": "src/js/is/samsungBrowser.ts",
        "children": {}
    },
    "sugar.js.is.isTablet": {
        "name": "isTablet",
        "type": "Function",
        "description": "Detect if is a tablet device",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "tablet.js",
        "extension": "js",
        "relPath": "src/js/is/tablet.js",
        "children": {}
    },
    "js.is.isTablet": {
        "name": "isTablet",
        "type": "Function",
        "description": "Detect if is a tablet device",
        "namespace": "js.is",
        "since": "1.0.0",
        "filename": "tablet.ts",
        "extension": "ts",
        "relPath": "src/js/is/tablet.ts",
        "children": {}
    },
    "sugar.js.is.isUcBrowser": {
        "name": "isUcBrowser",
        "type": "Function",
        "description": "Detect if is the UC stock browser that is running the page",
        "namespace": "sugar.js.is",
        "since": "1.0.0",
        "filename": "ucBrowser.js",
        "extension": "js",
        "relPath": "src/js/is/ucBrowser.js",
        "children": {}
    },
    "js.is.isUcBrowser": {
        "name": "isUcBrowser",
        "type": "Function",
        "description": "Detect if is the UC stock browser that is running the page",
        "namespace": "js.is",
        "since": "1.0.0",
        "filename": "ucBrowser.ts",
        "extension": "ts",
        "relPath": "src/js/is/ucBrowser.ts",
        "children": {}
    },
    "sugar.js.keyboard.hotkey": {
        "name": "hotkey",
        "type": "Function",
        "description": "Simple function to add a hotkey like \"ctrl+a\" and an handler function that will be called when the hotkey has been pressed\nThe following keys are supported:\n- shift, option, alt, ctrl, control, command\n- backspace, tab, clear, enter, return, esc, escape, space, up, down, left, right, home, end, pageup, pagedown, del, delete\n- from f1 to f19\n- all the letters keys\n\nYou can pass an option object to your hotkey function call.",
        "namespace": "sugar.js.keyboard",
        "status": "beta",
        "since": "2.0.0",
        "filename": "hotkey.js",
        "extension": "js",
        "relPath": "src/js/keyboard/hotkey.js",
        "children": {}
    },
    "js.keyboard.hotkey": {
        "name": "hotkey",
        "type": "Function",
        "description": "Simple function to add a hotkey like \"ctrl+a\" and an handler function that will be called when the hotkey has been pressed\nThe following keys are supported:\n- shift, option, alt, ctrl, control, command\n- backspace, tab, clear, enter, return, esc, escape, space, up, down, left, right, home, end, pageup, pagedown, del, delete\n- from f1 to f19\n- all the letters keys\n\nYou can pass an option object to your hotkey function call.",
        "namespace": "js.keyboard",
        "status": "beta",
        "since": "2.0.0",
        "filename": "hotkey.ts",
        "extension": "ts",
        "relPath": "src/js/keyboard/hotkey.ts",
        "children": {}
    },
    "sugar.js.responsive.SMediaQuery": {
        "name": "SMediaQuery",
        "type": "Class",
        "description": "This class expose some nice and easy methods to get the active media query defined in the config.media.queries configuration\nstack, as well as register to some events list \"match\" or \"unmatch\".",
        "namespace": "sugar.js.responsive",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SMediaQuery.js",
        "extension": "js",
        "relPath": "src/js/responsive/SMediaQuery.js",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "startListener": {
                "name": "startListener",
                "type": "Function",
                "description": "Add the global listener based on the \"init-body-media-queries\" scss mixin",
                "static": true,
                "since": "2.0.0"
            },
            "this._activeMedia": {
                "name": "this._activeMedia",
                "type": "String",
                "description": "Store the active media name",
                "static": true,
                "since": "2.0.0"
            }
        }
    },
    "js.responsive.SMediaQuery": {
        "name": "SMediaQuery",
        "type": "Class",
        "description": "This class expose some nice and easy methods to get the active media query defined in the config.media.queries configuration\nstack, as well as register to some events list \"match\" or \"unmatch\".",
        "namespace": "js.responsive",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SMediaQuery.ts",
        "extension": "ts",
        "relPath": "src/js/responsive/SMediaQuery.ts",
        "children": {
            "this._activeMedia": {
                "name": "this._activeMedia",
                "type": "String",
                "description": "Store the active media name",
                "static": true,
                "since": "2.0.0"
            },
            "startListener": {
                "name": "startListener",
                "type": "Function",
                "description": "Add the global listener based on the \"init-body-media-queries\" scss mixin",
                "static": true,
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            }
        }
    },
    "sugar.js.webcomponent.SLitHtmlWebComponent": {
        "name": "SLitHtmlWebComponent",
        "type": "Class",
        "description": "// TODO: example\n\nBase class that you can extends to create some SWebComponent with Lit Html rendering capabilities",
        "namespace": "sugar.js.webcomponent",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SLitHtmlWebComponent.js",
        "extension": "js",
        "relPath": "src/js/webcomponent/SLitHtmlWebComponent.js",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "lit": {
                "name": "lit",
                "type": "Object",
                "description": "Store all the litHtml functions that you may need"
            },
            "$root": {
                "name": "$root",
                "type": "Function",
                "description": "Access the root element of the webcomponent from which the requests like ```$``` and ```$$``` will be executed",
                "since": "2.0.0"
            },
            "update": {
                "name": "update",
                "type": "Function",
                "description": "This method allows you to update your componment manually if needed.\n- call the ```render``` method of this class\n- call the ```update``` method of the SWebComponent parent class",
                "since": "2.0.0"
            },
            "render": {
                "name": "render",
                "type": "Function",
                "description": "This method is called every time an update has been made in the state object"
            },
            "template": {
                "name": "template",
                "type": "Function",
                "description": "This static variable store a function that has as parameter the state object\nof your component and the lit-html ```html``` function that you can use in your template.\nThis function MUST return a template string representing your component HTML depending on the state\nobject at this point.",
                "static": true
            }
        }
    },
    "js.webcomponent.SLitHtmlWebComponent": {
        "name": "SLitHtmlWebComponent",
        "type": "Class",
        "description": "// TODO: example\n\nBase class that you can extends to create some SWebComponent with Lit Html rendering capabilities",
        "namespace": "js.webcomponent",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SLitHtmlWebComponent.ts",
        "extension": "ts",
        "relPath": "src/js/webcomponent/SLitHtmlWebComponent.ts",
        "children": {
            "template": {
                "name": "template",
                "type": "Function",
                "description": "This static variable store a function that has as parameter the state object\nof your component and the lit-html ```html``` function that you can use in your template.\nThis function MUST return a template string representing your component HTML depending on the state\nobject at this point.",
                "static": true
            },
            "lit": {
                "name": "lit",
                "type": "Object",
                "description": "Store all the litHtml functions that you may need"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "$root": {
                "name": "$root",
                "type": "Function",
                "description": "Access the root element of the webcomponent from which the requests like ```$``` and ```$$``` will be executed",
                "since": "2.0.0"
            },
            "update": {
                "name": "update",
                "type": "Function",
                "description": "This method allows you to update your componment manually if needed.\n- call the ```render``` method of this class\n- call the ```update``` method of the SWebComponent parent class",
                "since": "2.0.0"
            },
            "render": {
                "name": "render",
                "type": "Function",
                "description": "This method is called every time an update has been made in the state object"
            }
        }
    },
    "sugar.js.webcomponent.SWebComponent": {
        "name": "SWebComponent",
        "type": "Class",
        "description": "// TODO: example\n\nBase class that allows you to create easily new webcomponents and handle things like attributes updates,\nbase css (scss) importing, etc... Here's a list a features that this class covers:\n- Listen for attributes changes\n- Mount the component at a certain point in time (inViewport, visible, etc...)\n- *Automatically cast the attributes** to their proper js variable types (Array, Object, String, etc...)\n- *Physical props** : Specify some props that will ALWAYS be present as attribute on the component for styling purpose\n- Define some *default CSS** that will be injected in the head automatically\n- Specify some *required props**\n- *Full lifecycle management** through \"events\":\n- attach: Dispatched when the component is attached to the DOM\n- detach: Dispatched when the component is detached from the DOM\n- mounting: Dispatched when the component starts to mount itself (before mountWhen and mountDependencies execution)\n- mounted: Dispatched when the component has be mounted properly\n- prop|prop.{name}: Dispatched when a property has been updated, removed or added\n- The object format sended with the event is this one:\n- { prop: 'propName', action: 'update|remove|add', value: 'Something', previousValue: 'Other' }\n- *Mount dependencies** : This will allows you to set some promises that have to be resolved before mounting the component",
        "namespace": "sugar.js.webcomponent",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SWebComponent.js",
        "extension": "js",
        "relPath": "src/js/webcomponent/SWebComponent.js",
        "children": {
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "observedAttributes": {
                "name": "observedAttributes",
                "type": "Function",
                "description": "This medhod simply return the list of props that will be\nobserved by the customElements under the hood system.",
                "static": true
            },
            "getComponentMetas": {
                "name": "getComponentMetas",
                "type": "Function",
                "description": "This static method return the component metas information like:\n- name: The camelcase component name\n- dashName: The component name in dash case\n- class: The component class\n- extends: The HTML class that the component extends\n- settings: An object of settings",
                "static": true,
                "since": "2.0.0"
            },
            "define": {
                "name": "define",
                "type": "Function",
                "description": "This method allows you to define your component as a webcomponent recognized by the browser",
                "static": true,
                "since": "2.0.0"
            },
            "settings": {
                "name": "settings",
                "type": "Function",
                "description": "Get the settings object",
                "since": "2.0.0"
            },
            "$root": {
                "name": "$root",
                "type": "Function",
                "description": "Access the root element of the webcomponent from which the requests like ```$``` and ```$$``` will be executed",
                "since": "2.0.0"
            },
            "update": {
                "name": "update",
                "type": "Function",
                "description": "This method allows you to update your component manually if needed",
                "since": "2.0.0"
            },
            "$": {
                "name": "$",
                "type": "Function",
                "description": "This method is a shortcut to the ```querySelector``` function",
                "since": "2.0.0"
            },
            "$$": {
                "name": "$$",
                "type": "Function",
                "description": "This method is a shortcut to the ```querySelectorAll``` function",
                "since": "2.0.0"
            },
            "registerContext": {
                "name": "registerContext",
                "type": "Function",
                "description": "This method allows you to register some additional contexts that \"this\"\nfor the component to be able to find expressions like ```:on-select=\"doSometing\"```\nIt is used by all the SWebComponent instances to find their parent components for example",
                "since": "2.0.0"
            },
            "setProp": {
                "name": "setProp",
                "type": "Function",
                "description": "This method allows you to set a prop and specify the \"media\" for which you want to set this value\nThe media parameter can be one of the media queries defined in the configuration config.media.queries",
                "since": "2.0.0"
            },
            "getProp": {
                "name": "getProp",
                "type": "Function",
                "description": "This method allows you to get a prop and specify the \"media\" for which you want to get this value\nThe media parameter can be one of the media queries defined in the configuration config.media.queries",
                "since": "2.0.0"
            },
            "setSettings": {
                "name": "setSettings",
                "type": "Function",
                "description": "This method allows you to set some settings by merging the actual once with your new once",
                "since": "2.0.0"
            },
            "addClass": {
                "name": "addClass",
                "type": "Function",
                "description": "This method can be used to add class(es) to an element in the component.\nThis will take care of adding the pcomponent name prefix as well as the ```cssName```prefix\nif needed",
                "since": "2.0.0"
            },
            "removeClass": {
                "name": "removeClass",
                "type": "Function",
                "description": "This method can be used to remove class(es) to an element in the component.\nThis will take care of adding the component name prefix as well as the ```cssName```prefix\nif needed",
                "since": "2.0.0"
            },
            "metas": {
                "name": "metas",
                "type": "Object",
                "description": "This property store all the component metas informations like the name,\nthe type, what it is extending, etc...",
                "since": "2.0.0"
            },
            "on": {
                "name": "on",
                "type": "Function",
                "description": "Method used to subscribe to the \"events\" dispatched\nduring the lifecycle of the component. Here's the list of events:\n- attach: Dispatched when the component is attached to the DOM\n- detach: Dispatched when the component is detached from the DOM\n- mounting: Dispatched when the component starts to mount itself (before mountWhen and mountDependencies execution)\n- mounted: Dispatched when the component has be mounted properly\n- prop|prop.{name}: Dispatched when a property has been updated, removed or added\n- The object format sended with the event is this one:\n- { prop: 'propName', action: 'update|remove|add', value: 'Something', previousValue: 'Other' }",
                "since": "2.0.0"
            },
            "off": {
                "name": "off",
                "type": "Function",
                "description": "Method used to unsubscribe to a previously subscribed event",
                "since": "2.0.0"
            },
            "connectedCallback": {
                "name": "connectedCallback",
                "type": "Function",
                "description": "Called when the component is attached to the dom"
            },
            "disconnectedCallback": {
                "name": "disconnectedCallback",
                "type": "Function",
                "description": "Called when the component is detached from the dom"
            },
            "attributeChangedCallback": {
                "name": "attributeChangedCallback",
                "type": "Function",
                "description": "Called when an attribute is removed, added or updated"
            },
            "selector": {
                "name": "selector",
                "type": "Function",
                "description": "This method return you a selector generated depending on the\nwebcomponent name",
                "since": "2.0.0"
            },
            "componentName": {
                "name": "componentName",
                "type": "String",
                "description": "Store the name of the component in camelcase",
                "static": true,
                "since": "2.0.0"
            }
        }
    },
    "js.webcomponent.SWebComponent": {
        "name": "SWebComponent",
        "type": "Class",
        "description": "// TODO: example\n\nBase class that allows you to create easily new webcomponents and handle things like attributes updates,\nbase css (scss) importing, etc... Here's a list a features that this class covers:\n- Listen for attributes changes\n- Mount the component at a certain point in time (inViewport, visible, etc...)\n- *Automatically cast the attributes** to their proper js variable types (Array, Object, String, etc...)\n- *Physical props** : Specify some props that will ALWAYS be present as attribute on the component for styling purpose\n- Define some *default CSS** that will be injected in the head automatically\n- Specify some *required props**\n- *Full lifecycle management** through \"events\":\n- attach: Dispatched when the component is attached to the DOM\n- detach: Dispatched when the component is detached from the DOM\n- mounting: Dispatched when the component starts to mount itself (before mountWhen and mountDependencies execution)\n- mounted: Dispatched when the component has be mounted properly\n- prop|prop.{name}: Dispatched when a property has been updated, removed or added\n- The object format sended with the event is this one:\n- { prop: 'propName', action: 'update|remove|add', value: 'Something', previousValue: 'Other' }\n- *Mount dependencies** : This will allows you to set some promises that have to be resolved before mounting the component",
        "namespace": "js.webcomponent",
        "status": "wip",
        "since": "2.0.0",
        "filename": "SWebComponent.ts",
        "extension": "ts",
        "relPath": "src/js/webcomponent/SWebComponent.ts",
        "children": {
            "observedAttributes": {
                "name": "observedAttributes",
                "type": "Function",
                "description": "This medhod simply return the list of props that will be\nobserved by the customElements under the hood system.",
                "static": true
            },
            "componentName": {
                "name": "componentName",
                "type": "String",
                "description": "Store the name of the component in camelcase",
                "static": true,
                "since": "2.0.0"
            },
            "getComponentMetas": {
                "name": "getComponentMetas",
                "type": "Function",
                "description": "This static method return the component metas information like:\n- name: The camelcase component name\n- dashName: The component name in dash case\n- class: The component class\n- extends: The HTML class that the component extends\n- settings: An object of settings",
                "static": true,
                "since": "2.0.0"
            },
            "define": {
                "name": "define",
                "type": "Function",
                "description": "This method allows you to define your component as a webcomponent recognized by the browser",
                "static": true,
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor"
            },
            "settings": {
                "name": "settings",
                "type": "Function",
                "description": "Get the settings object",
                "since": "2.0.0"
            },
            "$root": {
                "name": "$root",
                "type": "Function",
                "description": "Access the root element of the webcomponent from which the requests like ```$``` and ```$$``` will be executed",
                "since": "2.0.0"
            },
            "update": {
                "name": "update",
                "type": "Function",
                "description": "This method allows you to update your component manually if needed",
                "since": "2.0.0"
            },
            "$": {
                "name": "$",
                "type": "Function",
                "description": "This method is a shortcut to the ```querySelector``` function",
                "since": "2.0.0"
            },
            "$$": {
                "name": "$$",
                "type": "Function",
                "description": "This method is a shortcut to the ```querySelectorAll``` function",
                "since": "2.0.0"
            },
            "registerContext": {
                "name": "registerContext",
                "type": "Function",
                "description": "This method allows you to register some additional contexts that \"this\"\nfor the component to be able to find expressions like ```:on-select=\"doSometing\"```\nIt is used by all the SWebComponent instances to find their parent components for example",
                "since": "2.0.0"
            },
            "setProp": {
                "name": "setProp",
                "type": "Function",
                "description": "This method allows you to set a prop and specify the \"media\" for which you want to set this value\nThe media parameter can be one of the media queries defined in the configuration config.media.queries",
                "since": "2.0.0"
            },
            "getProp": {
                "name": "getProp",
                "type": "Function",
                "description": "This method allows you to get a prop and specify the \"media\" for which you want to get this value\nThe media parameter can be one of the media queries defined in the configuration config.media.queries",
                "since": "2.0.0"
            },
            "setSettings": {
                "name": "setSettings",
                "type": "Function",
                "description": "This method allows you to set some settings by merging the actual once with your new once",
                "since": "2.0.0"
            },
            "addClass": {
                "name": "addClass",
                "type": "Function",
                "description": "This method can be used to add class(es) to an element in the component.\nThis will take care of adding the pcomponent name prefix as well as the ```cssName```prefix\nif needed",
                "since": "2.0.0"
            },
            "removeClass": {
                "name": "removeClass",
                "type": "Function",
                "description": "This method can be used to remove class(es) to an element in the component.\nThis will take care of adding the component name prefix as well as the ```cssName```prefix\nif needed",
                "since": "2.0.0"
            },
            "metas": {
                "name": "metas",
                "type": "Object",
                "description": "This property store all the component metas informations like the name,\nthe type, what it is extending, etc...",
                "since": "2.0.0"
            },
            "on": {
                "name": "on",
                "type": "Function",
                "description": "Method used to subscribe to the \"events\" dispatched\nduring the lifecycle of the component. Here's the list of events:\n- attach: Dispatched when the component is attached to the DOM\n- detach: Dispatched when the component is detached from the DOM\n- mounting: Dispatched when the component starts to mount itself (before mountWhen and mountDependencies execution)\n- mounted: Dispatched when the component has be mounted properly\n- prop|prop.{name}: Dispatched when a property has been updated, removed or added\n- The object format sended with the event is this one:\n- { prop: 'propName', action: 'update|remove|add', value: 'Something', previousValue: 'Other' }",
                "since": "2.0.0"
            },
            "off": {
                "name": "off",
                "type": "Function",
                "description": "Method used to unsubscribe to a previously subscribed event",
                "since": "2.0.0"
            },
            "connectedCallback": {
                "name": "connectedCallback",
                "type": "Function",
                "description": "Called when the component is attached to the dom"
            },
            "disconnectedCallback": {
                "name": "disconnectedCallback",
                "type": "Function",
                "description": "Called when the component is detached from the dom"
            },
            "attributeChangedCallback": {
                "name": "attributeChangedCallback",
                "type": "Function",
                "description": "Called when an attribute is removed, added or updated"
            },
            "selector": {
                "name": "selector",
                "type": "Function",
                "description": "This method return you a selector generated depending on the\nwebcomponent name",
                "since": "2.0.0"
            }
        }
    },
    "sugar.js.class.SApp": {
        "name": "SApp",
        "type": "Class",
        "description": "This class represent an application route class. This mean that you can create an application class that extend this one\nand your instance will have access to a whole package of data like the application name taken from the package.json file, the version,\nthe description, the author(s), the contributor(s), etc...",
        "namespace": "sugar.js.class",
        "filename": "SApp.js",
        "extension": "js",
        "relPath": "src/js/html/__wip__.wip/SApp.js"
    },
    "sugar.js.class.SApp.config": {
        "name": "config",
        "type": "Function",
        "description": "Get a configuration value from the backend using an ajax call",
        "namespace": "sugar.js.class.SApp",
        "filename": "SApp.js",
        "extension": "js",
        "relPath": "src/js/html/__wip__.wip/SApp.js"
    },
    "sugar.js.class.SApp.meta": {
        "name": "meta",
        "type": "Function",
        "description": "Usefull function that give you back an application meta taken depending on your passed dotted object path",
        "namespace": "sugar.js.class.SApp",
        "filename": "SApp.js",
        "extension": "js",
        "relPath": "src/js/html/__wip__.wip/SApp.js"
    },
    "squid.js.log.log": {
        "name": "log",
        "type": "Function",
        "description": "Log a message using the transports log system.",
        "namespace": "squid.js.log",
        "filename": "SApp.ts",
        "extension": "ts",
        "relPath": "src/js/html/__wip__.wip/SApp.ts",
        "children": {}
    },
    "js.class.SApp": {
        "name": "SApp",
        "type": "Class",
        "description": "This class represent an application route class. This mean that you can create an application class that extend this one\nand your instance will have access to a whole package of data like the application name taken from the package.json file, the version,\nthe description, the author(s), the contributor(s), etc...",
        "namespace": "js.class",
        "filename": "SApp.ts",
        "extension": "ts",
        "relPath": "src/js/html/__wip__.wip/SApp.ts"
    },
    "js.class.SApp.config": {
        "name": "config",
        "type": "Function",
        "description": "Get a configuration value from the backend using an ajax call",
        "namespace": "js.class.SApp",
        "filename": "SApp.ts",
        "extension": "ts",
        "relPath": "src/js/html/__wip__.wip/SApp.ts"
    },
    "js.class.SApp.meta": {
        "name": "meta",
        "type": "Function",
        "description": "Usefull function that give you back an application meta taken depending on your passed dotted object path",
        "namespace": "js.class.SApp",
        "filename": "SApp.ts",
        "extension": "ts",
        "relPath": "src/js/html/__wip__.wip/SApp.ts"
    },
    "sugar.js.class.SBind": {
        "name": "SBind",
        "type": "Class",
        "description": "This class allows to bind properties between objects, object to HTMLElement attribute and vice versa.",
        "namespace": "sugar.js.class",
        "filename": "SBind.js",
        "extension": "js",
        "relPath": "src/js/html/__wip__.wip/SBind.js",
        "children": {
            "bind": {
                "name": "bind",
                "type": "Function",
                "description": "This method allows you to bind an Object|HTMLElement property to another Object|HTMLElement property\nThis mean that when the property of the first passed element is updated, the same property on the second\nelement will be updated as well"
            }
        }
    },
    "js.class.SBind": {
        "name": "SBind",
        "type": "Class",
        "description": "This class allows to bind properties between objects, object to HTMLElement attribute and vice versa.",
        "namespace": "js.class",
        "filename": "SBind.ts",
        "extension": "ts",
        "relPath": "src/js/html/__wip__.wip/SBind.ts",
        "children": {
            "bind": {
                "name": "bind",
                "type": "Function",
                "description": "This method allows you to bind an Object|HTMLElement property to another Object|HTMLElement property\nThis mean that when the property of the first passed element is updated, the same property on the second\nelement will be updated as well"
            }
        }
    },
    "sugar.js.class.SLocalStorageFonts": {
        "name": "SLocalStorageFonts",
        "type": "Class",
        "description": "This class allows to easily store and load custom fonts from the localStorage",
        "namespace": "sugar.js.class",
        "filename": "SLocalStorageFonts.js",
        "extension": "js",
        "relPath": "src/js/html/__wip__.wip/SLocalStorageFonts.js",
        "children": {}
    },
    "js.class.SLocalStorageFonts": {
        "name": "SLocalStorageFonts",
        "type": "Class",
        "description": "This class allows to easily store and load custom fonts from the localStorage",
        "namespace": "js.class",
        "filename": "SLocalStorageFonts.ts",
        "extension": "ts",
        "relPath": "src/js/html/__wip__.wip/SLocalStorageFonts.ts",
        "children": {}
    },
    "sugar.js.socket.syncDom": {
        "name": "syncDom",
        "type": "Function",
        "description": "Simply connect to a backend socket.io server and listen for specifics messages from it to refresh automatically the DOM.\nThe messages that are listened are:\n- 'SSocketDom.html': Used to send some html to \"inject/replace\" in the current page HTML\n- 'SSocketDom.script': Used to add a script tag to the page\n- 'SSocketDom.style': Used to add a style tag to the page",
        "namespace": "sugar.js.socket",
        "status": "wip",
        "filename": "SSocketDom.js",
        "extension": "js",
        "relPath": "src/js/html/__wip__.wip/SSocketDom.js"
    },
    "sugar.js.class.settings.node": {
        "name": "settings.node",
        "type": "HTMLElement",
        "description": "The root node where the html contents will be injected if no node is passed with the event",
        "namespace": "sugar.js.class",
        "filename": "SSocketDom.js",
        "extension": "js",
        "relPath": "src/js/html/__wip__.wip/SSocketDom.js"
    },
    "js class.settings.action": {
        "name": "settings.action",
        "type": "String",
        "description": "Specify which action will be executed if no one is passed with the event.\nIt can be one of these:\n- 'append': Will append the HTML content to the existing one\n- 'replace': Will replace the HTML content with the new one\n- 'prepend': Will inject the HTML content before the existing one",
        "namespace": "js class",
        "filename": "SSocketDom.ts",
        "extension": "ts",
        "relPath": "src/js/html/__wip__.wip/SSocketDom.ts"
    },
    "sugar.js.class.settings.events": {
        "name": "settings.events",
        "type": "Object",
        "description": "Save the events scoped settings objects",
        "namespace": "sugar.js.class",
        "filename": "SSocketDom.js",
        "extension": "js",
        "relPath": "src/js/html/__wip__.wip/SSocketDom.js"
    },
    "sugar.js.class.emit": {
        "name": "emit",
        "type": "Function",
        "description": "Emit an event with an object containing some values to pass to the server",
        "namespace": "sugar.js.class",
        "filename": "SSocketDom.js",
        "extension": "js",
        "relPath": "src/js/html/__wip__.wip/SSocketDom.js"
    },
    "sugar.js.class.registerEvent": {
        "name": "registerEvent",
        "type": "Function",
        "description": "Register a new event with an handler function that will handle the event content",
        "namespace": "sugar.js.class",
        "filename": "SSocketDom.js",
        "extension": "js",
        "relPath": "src/js/html/__wip__.wip/SSocketDom.js",
        "children": {}
    },
    "js.socket.syncDom": {
        "name": "syncDom",
        "type": "Function",
        "description": "Simply connect to a backend socket.io server and listen for specifics messages from it to refresh automatically the DOM.\nThe messages that are listened are:\n- 'SSocketDom.html': Used to send some html to \"inject/replace\" in the current page HTML\n- 'SSocketDom.script': Used to add a script tag to the page\n- 'SSocketDom.style': Used to add a style tag to the page",
        "namespace": "js.socket",
        "status": "wip",
        "filename": "SSocketDom.ts",
        "extension": "ts",
        "relPath": "src/js/html/__wip__.wip/SSocketDom.ts"
    },
    "js.class.settings.node": {
        "name": "settings.node",
        "type": "HTMLElement",
        "description": "The root node where the html contents will be injected if no node is passed with the event",
        "namespace": "js.class",
        "filename": "SSocketDom.ts",
        "extension": "ts",
        "relPath": "src/js/html/__wip__.wip/SSocketDom.ts"
    },
    "js.class.settings.events": {
        "name": "settings.events",
        "type": "Object",
        "description": "Save the events scoped settings objects",
        "namespace": "js.class",
        "filename": "SSocketDom.ts",
        "extension": "ts",
        "relPath": "src/js/html/__wip__.wip/SSocketDom.ts"
    },
    "js.class.emit": {
        "name": "emit",
        "type": "Function",
        "description": "Emit an event with an object containing some values to pass to the server",
        "namespace": "js.class",
        "filename": "SSocketDom.ts",
        "extension": "ts",
        "relPath": "src/js/html/__wip__.wip/SSocketDom.ts"
    },
    "js.class.registerEvent": {
        "name": "registerEvent",
        "type": "Function",
        "description": "Register a new event with an handler function that will handle the event content",
        "namespace": "js.class",
        "filename": "SSocketDom.ts",
        "extension": "ts",
        "relPath": "src/js/html/__wip__.wip/SSocketDom.ts",
        "children": {}
    },
    "drawer-webcomponent.DrawerWebcomponent": {
        "name": "DrawerWebcomponent",
        "type": "Class",
        "description": "Simple webcomponent to create fully customizable drawers.\nFeatures:\n1. Fully customizable\n2. Support all sides (top, right, bottom and left)\n3. Support 3 animation types (push, slide and reveal)",
        "namespace": "drawer-webcomponent",
        "filename": "testing.ts",
        "extension": "ts",
        "relPath": "src/data/tests/testing.ts"
    },
    "drawer-webcomponent.open": {
        "name": "open",
        "type": "Function",
        "description": "Open the drawer",
        "namespace": "drawer-webcomponent",
        "filename": "testing.ts",
        "extension": "ts",
        "relPath": "src/data/tests/testing.ts"
    },
    "drawer-webcomponent.close": {
        "name": "close",
        "type": "Function",
        "description": "Close the drawer",
        "namespace": "drawer-webcomponent",
        "filename": "testing.ts",
        "extension": "ts",
        "relPath": "src/data/tests/testing.ts"
    },
    "drawer-webcomponent.isOpen": {
        "name": "isOpen",
        "type": "Function",
        "description": "Check if is opened",
        "namespace": "drawer-webcomponent",
        "filename": "testing.ts",
        "extension": "ts",
        "relPath": "src/data/tests/testing.ts",
        "children": {}
    },
    "node.process.SProcessPipe": {
        "name": "SProcessPipe",
        "type": "Class",
        "description": "This class allows you to handle easily some process pipes.\nA process pipe is simply multiple processes that will execute one after\nthe other by passing the params to one after the other\nand will be resolved once all the processes have been executed correctly",
        "namespace": "node.process",
        "since": "2.0.0",
        "filename": "frontend.cli.ts",
        "extension": "cli",
        "relPath": "src/cli/server/frontend.cli.ts",
        "children": {
            "processPipeSettings": {
                "name": "processPipeSettings",
                "type": "ISProcessPipeSettings",
                "description": "Access the process pipe settings",
                "since": "2.0.0"
            },
            "constructor": {
                "name": "constructor",
                "type": "Function",
                "description": "Constructor",
                "since": "2.0.0"
            },
            "run": {
                "name": "run",
                "type": "Function",
                "description": "Execute the processes pipe",
                "since": "2.0.0"
            }
        }
    }
}
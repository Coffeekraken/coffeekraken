"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const deepMerge_1 = __importDefault(require("../../object/deepMerge"));
const tmpDir_1 = __importDefault(require("../../fs/tmpDir"));
const fs_1 = __importDefault(require("fs"));
const ensureDirSync_1 = __importDefault(require("../../fs/ensureDirSync"));
const removeSync_1 = __importDefault(require("../../fs/removeSync"));
const sugar_1 = __importDefault(require("../../config/sugar"));
const SCacheAdapter_1 = __importDefault(require("../../_js/cache/adapters/SCacheAdapter"));
/**
 * @name                                SCacheFsAdapter
 * @namespace           sugar.node.fs.cacheAdapters
 * @type                                Class
 *
 * A filesystem SCache adapter that allows you to store your cache items on the user system
 *
 * @example             js
 * const cache = new SCache({
 *    ttl: 100,
 *    adapter: new SCacheFsAdapter({
 *      rootDir: '/my/cool/folder
 *    })
 * });
 *
 * @author         Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
class SCacheFsAdapter extends SCacheAdapter_1.default {
    /**
     * @name                              constructor
     * @type                              Function
     *
     * Construct the SCacheFsAdapter instance with the settings passed in object format. See description bellow.
     *
     * @param         {Object}          [settings={}]             An object to configure the SCacheFsAdapter instance. This is specific to each adapters.settings.settings...
     * - rootDir (config.cache.fs.rootDir) {String}: Specify the root directory where to put all the files to cache
     *
     * @author         Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
     */
    constructor(settings = {}) {
        super(deepMerge_1.default({
            rootDir: sugar_1.default('cache.fs.rootDir') || `${tmpDir_1.default()}/SCache`
        }, settings));
    }
    /**
     * @name                          set
     * @type                          Function
     *
     * Set a cache item on the filesystem
     *
     * @param             {String}              name              The item name
     * @param             {Mixed}               value             The value to save
     * @param             {Object}              [settings={}]     A settings object to override the default ones defined on the SCache instance
     * @return            {Object|Boolean}                        Return the objectToSave generated by the "this.processItem" method, or false if something goes wrong...
     *
     * @example           js
     * await myCache.set('myCoolItem', { hello: 'world' }, {
     *    ttl: 40000
     * });
     *
     * @author         Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
     */
    async set(name, value) {
        // generate the item fs name
        const fsName = `${this._settings.name}/${name}.json`;
        // ensure we have the folder
        ensureDirSync_1.default(`${this._settings.rootDir}/${fsName.split('/').slice(0, -1).join('/')}`);
        // write the json file
        fs_1.default.writeFileSync(`${this._settings.rootDir}/${fsName}`, value);
        // write has been done correctly
        return true;
    }
    /**
     * @name                          get
     * @type                          Function
     *
     * Get a cache item on the filesystem
     *
     * @param             {String}              name              The item name
     * @return            {Object|Boolean}                        Return the objectToSave generated by the "this.processItem" method, or false if something goes wrong...
     *
     * @example           js
     * await myCache.get('myCoolItem');
     *
     * @author         Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
     */
    async get(name) {
        // generate the item fs name
        const fsName = `${this._settings.name}/${name}.json`;
        // check that the file exists
        if (!fs_1.default.existsSync(`${this._settings.rootDir}/${fsName}`))
            return null;
        // read the json file
        return fs_1.default.readFileSync(`${this._settings.rootDir}/${fsName}`, 'utf8');
    }
    /**
     * @name                          delete
     * @type                          Function
     *
     * Delete a cache item on the filesystem
     *
     * @param             {String}              name              The item name
     * @return            {Boolean}                               true if all of, false if not...
     *
     * @example           js
     * await myCache.delete('myCoolItem');
     *
     * @author         Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
     */
    async delete(name) {
        // generate the item fs name
        const fsName = `${this._settings.name}/${name}.json`;
        // read the json file
        return fs_1.default.unlinkSync(`${this._settings.rootDir}/${fsName}`);
    }
    /**
     * @name                          clear
     * @type                          Function
     *
     * Clear all the items in the current cache
     *
     * @param             {String}              cacheName              The current cache name to delete
     * @return            {Boolean}                               true if all of, false if not...
     *
     * @example           js
     * await myCache.clear;
     *
     * @author         Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
     */
    async clear(cacheName) {
        // read the json file
        return removeSync_1.default(`${this._settings.rootDir}/${cacheName}`);
    }
}
exports.default = SCacheFsAdapter;
;

"use strict";
// @ts-nocheck
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const deepMerge_1 = __importDefault(require("../../object/deepMerge"));
const tmpDir_1 = __importDefault(require("../../fs/tmpDir"));
const fs_1 = __importDefault(require("fs"));
const ensureDirSync_1 = __importDefault(require("../../fs/ensureDirSync"));
const removeSync_1 = __importDefault(require("../../fs/removeSync"));
const sugar_1 = __importDefault(require("../../config/sugar"));
const SCacheAdapter_1 = __importDefault(require("./SCacheAdapter"));
module.exports = class SCacheFsAdapter extends SCacheAdapter_1.default {
    /**
     * @name                              constructor
     * @type                              Function
     *
     * Construct the SCacheFsAdapter instance with the settings passed in object format. See description bellow.
     *
     * @param         {Object}          [settings={}]             An object to configure the SCacheFsAdapter instance. This is specific to each adapters.settings.settings...
     * - rootDir (config.storage.cacheDir) {String}: Specify the root directory where to put all the files to cache
     *
     * @author         Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
     */
    constructor(cache, settings = {}) {
        super(cache, deepMerge_1.default({
            rootDir: sugar_1.default('storage.cacheDir') || `${tmpDir_1.default()}/SCache`
        }, settings));
    }
    /**
     * @name                          set
     * @type                          Function
     *
     * Set a cache item on the filesystem
     *
     * @param             {String}              name              The item name
     * @param             {Mixed}               value             The value to save
     * @param             {Object}              [settings={}]     A settings object to override the default ones defined on the SCache instance
     * @return            {Object|Boolean}                        Return the objectToSave generated by the "this.processItem" method, or false if something goes wrong...
     *
     * @example           js
     * await myCache.set('myCoolItem', { hello: 'world' }, {
     *    ttl: 40000
     * });
     *
     * @author         Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
     */
    set(name, value) {
        return __awaiter(this, void 0, void 0, function* () {
            // generate the item fs name
            const fsName = `${this.cache.name}/${name}.json`.replace(/\/\//gm, '/');
            // ensure we have the folder
            ensureDirSync_1.default(`${this._settings.rootDir}/${fsName.split('/').slice(0, -1).join('/')}`);
            // write the json file
            fs_1.default.writeFileSync(`${this._settings.rootDir}/${fsName}`, value);
            // write has been done correctly
            return true;
        });
    }
    /**
     * @name                          get
     * @type                          Function
     *
     * Get a cache item on the filesystem
     *
     * @param             {String}              name              The item name
     * @return            {Object|Boolean}                        Return the objectToSave generated by the "this.processItem" method, or false if something goes wrong...
     *
     * @example           js
     * await myCache.get('myCoolItem');
     *
     * @author         Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
     */
    get(name) {
        return __awaiter(this, void 0, void 0, function* () {
            // generate the item fs name
            if (name.slice(0, 1) === '/')
                name = name.slice(1);
            const fsName = `${this.cache.name}/${name}.json`;
            // check that the file exists
            if (!fs_1.default.existsSync(`${this._settings.rootDir}/${fsName}`))
                return null;
            // read the json file
            return fs_1.default.readFileSync(`${this._settings.rootDir}/${fsName}`, 'utf8');
        });
    }
    /**
     * @name                          delete
     * @type                          Function
     *
     * Delete a cache item on the filesystem
     *
     * @param             {String}              name              The item name
     * @return            {Boolean}                               true if all of, false if not...
     *
     * @example           js
     * await myCache.delete('myCoolItem');
     *
     * @author         Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
     */
    delete(name) {
        return __awaiter(this, void 0, void 0, function* () {
            // generate the item fs name
            const fsName = `${this.cache.name}/${name}.json`;
            // read the json file
            return fs_1.default.unlinkSync(`${this._settings.rootDir}/${fsName}`);
        });
    }
    /**
     * @name                          clear
     * @type                          Function
     *
     * Clear all the items in the current cache
     *
     * @return            {Boolean}                               true if all of, false if not...
     *
     * @example           js
     * await myCache.clear;
     *
     * @author         Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
     */
    clear() {
        return __awaiter(this, void 0, void 0, function* () {
            // read the json file
            return removeSync_1.default(`${this._settings.rootDir}/${this.cache.name}`);
        });
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU0NhY2hlRnNBZGFwdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiU0NhY2hlRnNBZGFwdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxjQUFjOzs7Ozs7Ozs7Ozs7O0FBRWQsdUVBQWlEO0FBQ2pELDZEQUF1QztBQUN2Qyw0Q0FBc0I7QUFDdEIsMkVBQXFEO0FBQ3JELHFFQUErQztBQUMvQywrREFBK0M7QUFFL0Msb0VBQThDO0FBeUI5QyxpQkFBUyxNQUFNLGVBQWdCLFNBQVEsdUJBQWU7SUFDcEQ7Ozs7Ozs7Ozs7T0FVRztJQUNILFlBQVksS0FBSyxFQUFFLFFBQVEsR0FBRyxFQUFFO1FBQzlCLEtBQUssQ0FDSCxLQUFLLEVBQ0wsbUJBQVcsQ0FDVDtZQUNFLE9BQU8sRUFBRSxlQUFhLENBQUMsa0JBQWtCLENBQUMsSUFBSSxHQUFHLGdCQUFRLEVBQUUsU0FBUztTQUNyRSxFQUNELFFBQVEsQ0FDVCxDQUNGLENBQUM7SUFDSixDQUFDO0lBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7O09BaUJHO0lBQ0csR0FBRyxDQUFDLElBQUksRUFBRSxLQUFLOztZQUNuQiw0QkFBNEI7WUFDNUIsTUFBTSxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBRXhFLDRCQUE0QjtZQUM1Qix1QkFBZSxDQUNiLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQ3hFLENBQUM7WUFFRixzQkFBc0I7WUFDdEIsWUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxJQUFJLE1BQU0sRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ2pFLGdDQUFnQztZQUNoQyxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7S0FBQTtJQUVEOzs7Ozs7Ozs7Ozs7O09BYUc7SUFDRyxHQUFHLENBQUMsSUFBSTs7WUFDWiw0QkFBNEI7WUFDNUIsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxHQUFHO2dCQUFFLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25ELE1BQU0sTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksSUFBSSxPQUFPLENBQUM7WUFDakQsNkJBQTZCO1lBQzdCLElBQUksQ0FBQyxZQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLElBQUksTUFBTSxFQUFFLENBQUM7Z0JBQUUsT0FBTyxJQUFJLENBQUM7WUFDekUscUJBQXFCO1lBQ3JCLE9BQU8sWUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxJQUFJLE1BQU0sRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzFFLENBQUM7S0FBQTtJQUVEOzs7Ozs7Ozs7Ozs7O09BYUc7SUFDRyxNQUFNLENBQUMsSUFBSTs7WUFDZiw0QkFBNEI7WUFDNUIsTUFBTSxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxJQUFJLE9BQU8sQ0FBQztZQUNqRCxxQkFBcUI7WUFDckIsT0FBTyxZQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLElBQUksTUFBTSxFQUFFLENBQUMsQ0FBQztRQUNoRSxDQUFDO0tBQUE7SUFFRDs7Ozs7Ozs7Ozs7O09BWUc7SUFDRyxLQUFLOztZQUNULHFCQUFxQjtZQUNyQixPQUFPLG9CQUFZLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDdEUsQ0FBQztLQUFBO0NBQ0YsQ0FBQyJ9
@use "sass:color";
@use "sass:map";
@use "sass:math";
@use "sass:meta";

/**
 * @name      color
 * @namespace           sugar.scss.core.color
 * @type      function
 *
 * Get a registered color by name or wrap a new color into a sugar.color call
 * to manipulate it with ease.
 * Supported actions :
 * - hue {Deg}
 * - lighten {Percent}
 * - darken {Percent}
 * - saturate {Percent}
 * - desaturate {Percent}
 * - grayscale {Boolean}
 * - complement {Boolean}
 * - invert {Boolean}
 * - opacity {Percent}
 * - mix {Color}
 * - lightness {Percent}
 * - saturation {Percent}
 *
 * @param 		{String|Color} 		$color 				The color name or the color value to manipulate
 * @param 		{String} 			[$modifiers=null] 	The color modifiers to apply. See color-mod css function signature for more infos: https://www.digitalocean.com/community/tutorials/css-color-function
 * @return 		{Color} 									The actual color value
 *
 * @example 	 	scss
 * // default color (settings.colors.default)
 * $myColor : Sugar.color(default);
 *
 * @author 	        Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
@function color($name, $modifiers: null, $id: null) {
  // test parameters
  $name: test-argument('color', 'name', 'color|string', $name);
  $modifiers: test-argument(
    'color',
    'modifiers',
    'string|list|number',
    $modifiers
  );

  $colorColor: null;

  @if is($name, color) {
    $colorColor: $name;
    $name: null;
  } @else if is($name, string) {
    $colorColor: setting('colors.#{$name}.color');
  }

  @if is($colorColor, string) {
    $colorColor: color($colorColor, $modifiers);
  }

  @if not $colorColor {
    @error ('Sorry but the requested color "#{$name}" does not exists in the settings');
  }

  $modifiersMap: null;

  @if type-of($modifiers) == list {
    $modifiersMap: dash-to-map($modifiers);
  } @else if type-of($modifiers) == string or type-of($modifiers) == number {
    $modifier: $modifiers;
    $modifierArgs: setting('colors.#{$name}.modifiers.#{$modifier}');

    @if is($modifierArgs, color) {
      @return $modifierArgs;
    } @else if
      type-of($modifierArgs) ==
      list or
      type-of($modifierArgs) ==
      string
    {
      $modifiersMap: dash-to-map($modifierArgs);
    } @else if type-of($modifierArgs) == map {
      $modifiersMap: $modifierArgs;
    }
  }

  $color: _color-process($colorColor, $modifiersMap);

  // @if $id != null {
  //   :root {
  //     --s-custom-color-#{$id}: $color;
  //   }
  //   @return var(--s-custom-color-#{$id}, $color);
  // }

  // $modifier: null;
  // $actionsMap: null;

  // @if type-of($actions) == list {
  //   $actionsMap: dash-to-map($actions);
  // } @else if type-of($actions) == string or type-of($actions) == number {
  //   $modifier: $actions;
  //   $modifierArgs: setting('colors.#{$name}.modifiers.#{$modifier}');
  //   @if type-of($modifierArgs) == list or type-of($modifierArgs) == string {
  //     $actionsMap: dash-to-map($modifierArgs);
  //   } @else if type-of($modifierArgs) == map {
  //     $actionsMap: $modifierArgs;
  //   }
  // }

  // return the color
  // $color: _color-process($colorColor, $actionsMap);
  @return $color;
}

@function _color-process($color, $actions: ()) {
  @if $actions == null {
    $actions: ();
  }

  $hue: test-argument('color', 'actions.hue', number, map.get($actions, hue));
  $lighten: test-argument(
    'color',
    'actions.lighten',
    number,
    map.get($actions, lighten)
  );
  $darken: test-argument(
    'color',
    'actions.darken',
    number,
    map.get($actions, darken)
  );
  $saturate: test-argument(
    'color',
    'actions.saturate',
    number,
    map.get($actions, saturate)
  );
  $desaturate: test-argument(
    'color',
    'actions.desaturate',
    number,
    map.get($actions, desaturate)
  );
  $grayscale: test-argument(
    'color',
    'actions.grayscale',
    boolean,
    map.get($actions, grayscale)
  );
  $complement: test-argument(
    'color',
    'actions.complement',
    boolean,
    map.get($actions, complement)
  );
  $invert: test-argument(
    'color',
    'actions.invert',
    boolean,
    map.get($actions, invert)
  );
  $opacity: test-argument(
    'color',
    'actions.opacity',
    number,
    map.get($actions, opacity)
  );
  $mix: test-argument('color', 'actions.mix', color, map.get($actions, mix));
  $saturation: test-argument(
    'color',
    'actions.saturation',
    number,
    map.get($actions, saturation)
  );
  $lightness: test-argument(
    'color',
    'actions.lightness',
    number,
    map.get($actions, lightness)
  );

  // loop on each action to process to keep order
  @each $action, $value in $actions {
    // hue
    @if $action == hue {
      $color: color.adjust($color, $hue: $value);
    }
    // lighten
    @if $action == lighten {
      $color: color.adjust($color, $lightness: $value);
    }
    // darken
    @if $action == darken {
      $color: color.adjust($color, $lightness: - ($value));
    }
    // saturate
    @if $action == saturate {
      $color: color.adjust($color, $saturation: $value);
    }
    // desaturate
    @if $action == desaturate {
      $color: color.adjust($color, $saturation: - ($value));
    }
    // grayscale
    @if $action == grayscale and $value == true {
      $color: color.grayscale($color);
    }
    // complement
    @if $action == complement and $value == true {
      $color: color.complement($color);
    }
    // invert
    @if $action == invert and $value == true {
      $color: color.invert($color);
    }
    // opacity
    @if $action == opacity and meta.type-of($value) == number {
      $transparentize: 1 - strip-units($value);
      @if math.unit($value) == '%' {
        $transparentize: (100 - strip-units($value)) / 100;
      }
      $color: color.adjust($color, $alpha: -$transparentize);
    }
    // mix
    @if $action == mix and meta.type-of($value) == color {
      $color: color.mix($color, $value);
    }
    // saturation
    @if $action == saturation and meta.type-of($value) == number {
      $color: color.change($color, $saturation: $value);
    }
    // lightness
    @if $action == lightness and meta.type-of($value) == number {
      $color: color.change($color, $lightness: $value);
    }
  }
  @return $color;
}

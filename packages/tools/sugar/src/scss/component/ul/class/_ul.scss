/**
  * @name            ul-classes
  * @namespace       sugar.scss.component.ul.class
  * @type            Mixin
  *
  * This mixin generate all the css needed to display properly some unordered lists.
  *
  * @feature
  *
  * @param       {List}      [$colors:map-keys(setting('colors'))]       The colors you want to generate
  * @param       {List}      [$sizes:map-keys(setting('sizes'))]       The sizes you want to generate
  * @param       {String}      [$bullet='setting.bullet']         The bullet you want to use
  * @param       {Number}      [$line-height='setting.look-and-feel.line-height']      Specify the line height you want to use
  *
  * @example         html
  * <ul class="#{sel(ul)}">
  *   <li>I'm a cool unordered list item</li>
  *   <li>I'm a cool unordered list item</li>
  *   <li>I'm a cool unordered list item</li>
  *   <li>I'm a cool unordered list item</li>
  *   <li>I'm a cool unordered list item</li>
  *   <li>I'm a cool unordered list item</li>
  *   <li>I'm a cool unordered list item</li>
  * </ul>
  *
  * @example           scss
  * @include Sugar.ul-classes();
  *
  * @since       2.0.0
  * @author 	        Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
  */
@mixin ul-classes(
  $colors: map-keys(setting('colors')),
  $sizes: map-keys(setting('sizes')),
  $bullet: null,
  $line-height: null,
  $name: 'ul'
) {
  @if class-match-namespace('sugar.component.ul') {
    @if scope('bare') {
      @each $size in $sizes {
        /**
      * @name              .#{sel(#{$name}--#{$size})}, .#{sel(#{tf-class()})} ul.#{sel($size)}
      * @namespace         sugar.scss.component.ul.size.#{$size}
      * @type              Classname
      *
      * This class can be applied on any ```#{$name}``` component to specify his size to ```#{$size}```
      *
      * @example         html
      * <ol class="#{sel(#{$name}--#{$size})}">
        *   <li>I'm a cool unordered list item</li>
        *   <li>I'm a cool unordered list item</li>
        *   <li>I'm a cool unordered list item</li>
        *   <li>I'm a cool unordered list item</li>
        *   <li>I'm a cool unordered list item</li>
        *   <li>I'm a cool unordered list item</li>
        *   <li>I'm a cool unordered list item</li>
        * </ol>    *
      * @since       2.0.0
      * @author 	        Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
      */
        .#{sel(#{tf-class()})} #{$name}.#{$size},
        .#{sel($name)}.#{sel('#{$name}--#{$size}')} {
          @include ul(
            $size: $size,
            $bullet: $bullet,
            $line-height: $line-height,
            $scope: 'bare'
          );
        }
      }
    }

    @if scope('style') {
      @each $color in $colors {
        /**
      * @name              .#{sel(#{$name}--#{$color})}, .#{sel(#{tf-class()})} ul.#{sel($color)}
      * @namespace         sugar.scss.component.ul.color.#{$color}
      * @type              Classname
      *
      * This class can be applied on any ```#{$name}``` component to specify his size to ```#{$color}```
      *
      * @example         html
      * <ul class="#{sel(#{$name})} #{sel(#{$name}--#{$color})}">
        *   <li>I'm a cool unordered list item</li>
        *   <li>I'm a cool unordered list item</li>
        *   <li>I'm a cool unordered list item</li>
        *   <li>I'm a cool unordered list item</li>
        *   <li>I'm a cool unordered list item</li>
        *   <li>I'm a cool unordered list item</li>
        *   <li>I'm a cool unordered list item</li>
        * </ul>    *
      * @since       2.0.0
      * @author 	        Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
      */
        .#{sel(#{tf-class()})} #{$name}.#{$color},
        .#{sel($name)}.#{sel('#{$name}--#{$color}')} {
          @include ul(
            $color: $color,
            $bullet: $bullet,
            $line-height: $line-height,
            $scope: 'style'
          );
        }
      }
    }
  }
}

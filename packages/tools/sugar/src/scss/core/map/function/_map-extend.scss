@use 'sass:list';
@use 'sass:string';
@use 'sass:map';
@use 'sass:meta';
/**
 * @name      map-extend
 * @namespace           sugar.scss.core.map.function
 * @type      function
 *
 * Extend the passed map with the others passed map(s)
 *
 * @param           {Map}         $map        The map to @extend
 * @param           {Map|List-Map}  $maps     The map(s) used to extend the first one
 * @return          {Map}                     The extended map
 *
 * @example     scss
 * Sugar.map-extend((
 *  'hello': 'world'
 * ), (
 *  'coco': 'plop'
 * ));
 * // returned map:
 * (
 *  'hello': 'world',
 *  'coco': 'plop'
 * )
 *
 * @since       1.0.0
 * @author 	        Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
@function map-extend($map, $maps... /*, $deep */) {
  $last: list.nth($maps, -1);
  $deep: $last == true;
  $max: if($deep, list.length($maps) - 1, list.length($maps));

  // Loop through all maps in $maps...
  @for $i from 1 through $max {
    // Store current map
    $current: list.nth($maps, $i);

    // If not in deep mode, simply merge current map with map
    @if not $deep {
      $map: map.merge($map, $current);
    } @else {
      // If in deep mode, loop through all tuples in current map
      @each $key, $value in $current {
        // If value is a nested map and same key from map is a nested map as well
        // @if type-of($value) == "map" and type-of(map-get($map, $key)) == "map" {
        // 	// Recursive extend
        // 	$value: map-extend(map-get($map, $key), $value, true);
        // }
        @if (
          meta.type-of($value) ==
            'map' and
            meta.type-of(map.get($map, $key)) ==
            'map'
        ) {
          // Recursive extend
          $value: map-extend(map.get($map, $key), $value, true);
        } @else if meta.type-of($value) == 'list' and list.length($value) <= 0 {
          $value: map.get($map, $key);
        }

        // Merge current tuple with map
        $map: map.merge(
          $map,
          (
            $key: $value
          )
        );
      }
    }
  }

  @return $map;
}

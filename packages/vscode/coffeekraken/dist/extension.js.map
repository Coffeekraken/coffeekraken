{"version":3,"file":"extension.js","mappings":"yFAEA,eAEA,SAUA,mBAAuCA,GACnC,MAAMC,EAAkB,GAGxB,IAAK,IAAKC,EAAKC,KAAcC,OAAOC,QAAQL,GAAa,CACrD,MAAMM,EAAOH,EAAUG,MAAMC,KAAKC,gBAGlC,GAAa,iBAATF,EACA,SAIJ,IAAIG,GAAa,EACjB,IAAK,IAAIC,KAAeP,EAAUQ,SAC9B,GAAyB,YAArBD,EAAYE,MAA2C,QAArBF,EAAYE,KAAgB,CAC9DH,GAAa,EACb,K,CAGR,IAAKA,EACD,SAGJ,IAAII,EAAW,GACXC,EAAM,UAAUX,EAAUY,GACrBC,MAAM,KACNC,MAAM,GACNC,QAAQC,GACDA,IAAMN,IAGVA,EAAWM,GACJ,KAEVC,KAAK,KAELC,QAAQ,cAAe,MAC5BC,EAAQ,GAAGR,IAEfX,EAAUoB,OAAST,EAEnB,MAAMU,EAAoB,IAAIC,EAAOC,eAAeZ,GACpDU,EAAkBG,KAAOF,EAAOG,mBAAmBC,SACnDL,EAAkBF,MAAQA,EAC1BE,EAAkBM,WAAa,GAAG3B,EAAU4B,aAAaT,IACzDE,EAAkBQ,WAAa,IAAIP,EAAOQ,cAAcnB,GACxDU,EAAkBU,IAMlB,MAAMC,GAAY,aAAehC,EAAW,CACxCiC,MAAOtB,IAEXU,EAAkBa,cAAgBF,EAClClC,EAASqC,KAAKd,E,CAGlBC,EAAOc,UAAUC,sBACb,CACI,CACIC,OAAQ,OACRC,SAAU,QAGlB,CACIC,aAAaC,EAAKC,EAAKC,GACnB,MAAMC,EAAStB,EAAOuB,OAAOC,iBAGvBC,EAAQH,GAAQI,SAASC,uBAC3B,IAAI3B,EAAO4B,SAASR,EAAIS,KAAMT,EAAIU,GAClC,sBAIAC,GADYT,GAAQI,SAASM,OAAOZ,EAAIS,MAAMI,KAChCX,GAAQI,SAASQ,QAAQT,IAE3C,IAAKM,EACD,OAGJ,MAAMrD,EA5FtB,SAA6BH,EAAiBY,GAC1C,IAAK,IAAKmB,EAAW5B,KAAcC,OAAOC,QAAQL,GAC9C,GAAIY,IAAST,EAAUoB,OACnB,OAAOpB,CAGnB,CAsFkCyD,CAAoB5D,EAAYwD,GAElD,OAAKrD,EAOE,CACH0D,SAAU,EAJU,aAAe1D,EAAW,CAC9CiC,MAAOjC,EAAUoB,gBALrB,CAUJ,IAIRE,EAAOc,UAAUuB,+BACb,CACI,CACIrB,OAAQ,OACRC,SAAU,QAGlB,CACIqB,uBAAsB,CAACZ,EAAUa,EAAUlB,EAAOmB,IACvChE,GAIvB,C,iEC7HA,eAEA,SAUA,mBAAsCD,GAClC,MAAMC,EAAkB,GAExBwB,EAAOyC,SAASC,gBACZ,+BACChE,IAEG,OADaA,EAAUG,MAAMC,KAAKC,gBAC1BL,EAAUiE,WACd,IAAK,KACL,IAAK,KACD,GAAIjE,EAAUkE,SAASC,OAAQ,CAG3B,IAAIC,EAFiBpE,EAAUkE,QAAQ,GAEVG,KAAKxD,MAAM,MAAM,GAC9C,IAAKuD,EAAUE,MAAM,aACjB,OAKJ,MAAM1B,EAAStB,EAAOuB,OAAOC,iBACzByB,EAAS3B,EAAO4B,UAAUC,OAExBC,EAAkB9B,GAAQ4B,UAAUC,OAAOE,KAC7CJ,EAAOK,EAAI,EACXL,EAAOnB,GAGX,GAAIR,EAAQ,CAER,GACIA,GAAQI,SAASQ,UAAUqB,SAAST,GAEpC,OAEJxB,EAAOkC,cACH,IAAIxD,EAAOQ,cAAc,GAAGsC,OAC5B,IAAI9C,EAAO4B,SAAS,EAAG,IAE3B,IAAI6B,EAAe,IAAIzD,EAAO0D,UAC1BN,EACAA,GAEJ9B,EAAO4B,UAAYO,C,OAS3C,IAAK,IAAKhF,EAAKC,KAAcC,OAAOC,QAAQL,GAAa,CACrD,MAAMM,EAAOH,EAAUG,MAAMC,KAAKC,gBAGlC,GAAa,aAATF,GAAgC,UAATA,EACvB,SAIJ,IAAIG,GAAa,EACjB,IAAK,IAAIC,KAAeP,EAAUQ,SAC9B,GAAyB,OAArBD,EAAYE,MAAsC,SAArBF,EAAYE,KAAiB,CAC1DH,GAAa,EACb,K,CAGR,IAAKA,EACD,SAGJ,IAAIK,EAAM,KAAKX,EAAUS,OACrBU,EAAQ,GAAGR,IAEf,MAAMU,EAAoB,IAAIC,EAAOC,eAAeZ,GACpDU,EAAkBG,KAAOF,EAAOG,mBAAmBC,SACnDL,EAAkBF,MAAQA,EAC1BE,EAAkBM,WAAa,GAAG3B,EAAU4B,aAAaT,IACzDE,EAAkBQ,WAAa,IAAIP,EAAOQ,cAAcnB,GACxDU,EAAkBU,IAClBV,EAAkB4D,QAAU,CACxBC,UAAW,CAAClF,GACZiF,QAAS,+BAGb,MAAMjD,GAAY,aAAehC,GACjCqB,EAAkBa,cAAgBF,EAClClC,EAASqC,KAAKd,E,CAGlBC,EAAOc,UAAUC,sBACb,CACI,CACIC,OAAQ,OACRC,SAAU,cAEd,CACID,OAAQ,OACRC,SAAU,eAGlB,CACIC,aAAaC,EAAKC,EAAKC,GACnB,MAAMC,EAAStB,EAAOuB,OAAOC,iBAGvBC,EAAQH,GAAQI,SAASC,uBAC3B,IAAI3B,EAAO4B,SAASR,EAAIS,KAAMT,EAAIU,IAEhCC,EAAcT,GAAQI,SAASQ,QAAQT,GAE7C,IAAKM,EACD,OAGJ,MAAMrD,EA5HtB,SAA4BH,EAAiBY,GACzC,IAAK,IAAKmB,EAAW5B,KAAcC,OAAOC,QAAQL,GAC9C,GAAIY,IAAST,EAAUS,MAAQA,IAAS,KAAKT,EAAUS,OACnD,OAAOT,CAGnB,CAsHkCmF,CAAmBtF,EAAYwD,GAEjD,OAAKrD,EAKE,CACH0D,SAAU,EAFU,aAAe1D,UAJvC,CAQJ,IAIRsB,EAAOc,UAAUuB,+BACb,CACI,CACIrB,OAAQ,OACRC,SAAU,cAEd,CACID,OAAQ,OACRC,SAAU,eAGlB,CACIqB,uBAAsB,CAACZ,EAAUa,EAAUlB,EAAOmB,IACvChE,GAIvB,C,iEC/JA,eAEA,SAUA,mBAAuCD,GACnC,MAAMC,EAAkB,GAGxB,IAAK,IAAKC,EAAKC,KAAcC,OAAOC,QAAQL,GAAa,CACrD,MAAMM,EAAOH,EAAUG,MAAMC,KAAKC,gBAGlC,GAAa,aAATF,GAAgC,UAATA,EACvB,SAIJ,IAAIG,GAAa,EACjB,IAAK,IAAIC,KAAeP,EAAUQ,SAC9B,GAAyB,QAArBD,EAAYE,KAAgB,CAC5BH,GAAa,EACb,K,CAGR,IAAKA,EACD,SAGJ,IAAIK,EAAM,YAAYX,EAAUY,GACvBC,MAAM,KACNC,MAAM,GACNG,KAAK,KACLC,QAAQ,OAAQ,QACrBC,EAAQ,GAAGR,IAEfX,EAAUoF,OAASzE,EAEnB,MAAMU,EAAoB,IAAIC,EAAOC,eAAeZ,GACpDU,EAAkBG,KAAOF,EAAOG,mBAAmBC,SACnDL,EAAkBF,MAAQA,EAC1BE,EAAkBM,WAAa,GAAG3B,EAAU4B,aAAaT,IACzDE,EAAkBQ,WAAa,IAAIP,EAAOQ,cAAcnB,GAExD,MAAMqB,GAAY,aAAehC,EAAW,CACxCiC,MAAOtB,IAEXU,EAAkBa,cAAgBF,EAClClC,EAASqC,KAAKd,E,CAGlBC,EAAOc,UAAUC,sBACb,CACI,CACIC,OAAQ,OACRC,SAAU,QAGlB,CACIC,aAAaC,EAAKC,EAAKC,GACnB,MAAMC,EAAStB,EAAOuB,OAAOC,iBAGvBC,EAAQH,GAAQI,SAASC,uBAC3B,IAAI3B,EAAO4B,SAASR,EAAIS,KAAMT,EAAIU,GAClC,oBAIAC,GADYT,GAAQI,SAASM,OAAOZ,EAAIS,MAAMI,KAChCX,GAAQI,SAASQ,QAAQT,IAE3C,IAAKM,EACD,OAGJ,MAAMrD,EA9EtB,SAA6BH,EAAiBY,GAC1C,IAAK,IAAKmB,EAAW5B,KAAcC,OAAOC,QAAQL,GAC9C,GAAIY,IAAST,EAAUoF,OACnB,OAAOpF,CAGnB,CAwEkCqF,CAAoBxF,EAAYwD,GAElD,OAAKrD,EAOE,CACH0D,SAAU,EAJU,aAAe1D,EAAW,CAC9CiC,MAAOjC,EAAUoF,gBALrB,CAUJ,IAIR9D,EAAOc,UAAUuB,+BACb,CACI,CACIrB,OAAQ,OACRC,SAAU,QAGlB,CACIqB,uBAAsB,CAACZ,EAAUa,EAAUlB,EAAOmB,IACvChE,GAIvB,C,iEC/GA,eAEA,SAUA,mBAAwCD,GACpC,MAAMC,EAAkB,GAGxB,IAAK,IAAKC,EAAKC,KAAcC,OAAOC,QAAQL,GAAa,CACrD,MAAMM,EAAOH,EAAUG,MAAMC,KAAKC,gBAGlC,GAAa,iBAATF,GAAoC,eAATA,EAC3B,SAIJ,IAAIG,GAAa,EACjB,IAAK,IAAIC,KAAeP,EAAUQ,SAC9B,GAAyB,SAArBD,EAAYE,KAAiB,CAC7BH,GAAa,EACb,K,CAGR,IAAKA,EACD,SAGJ,IAAIK,EAAM,KAAKX,EAAUS,OACrBU,EAAQ,GAAGR,IAEf,MAAMU,EAAoB,IAAIC,EAAOC,eAAeZ,GACpDU,EAAkBG,KAAOF,EAAOG,mBAAmBC,SACnDL,EAAkBF,MAAQA,EAC1BE,EAAkBM,WAAa,GAAG3B,EAAU4B,aAAaT,IACzDE,EAAkBQ,WAAa,IAAIP,EAAOQ,cAAcnB,GAExD,MAAMqB,GAAY,aAAehC,GACjCqB,EAAkBa,cAAgBF,EAClClC,EAASqC,KAAKd,E,CAGlBC,EAAOc,UAAUC,sBACb,CACI,CACIC,OAAQ,OACRC,SAAU,SAGlB,CACIC,aAAaC,EAAKC,EAAKC,GACnB,MAAMC,EAAStB,EAAOuB,OAAOC,iBACzBC,EAAQH,GAAQI,SAASC,uBACrB,IAAI3B,EAAO4B,SAASR,EAAIS,KAAMT,EAAIU,IAEtCC,EAAcT,GAAQI,SAASQ,QAAQT,GAE3C,IAAKM,EACD,OAGJ,MAAMrD,EAjEtB,SAA4BH,EAAiBY,GACzC,IAAK,IAAKmB,EAAW5B,KAAcC,OAAOC,QAAQL,GAC9C,GAAIY,IAAST,EAAUS,MAAQA,IAAS,KAAKT,EAAUS,OACnD,OAAOT,CAGnB,CA2DkCmF,CAAmBtF,EAAYwD,GAEjD,OAAKrD,EAKE,CACH0D,SAAU,EAFU,aAAe1D,UAJvC,CAQJ,IAIRsB,EAAOc,UAAUuB,+BACb,CACI,CACIrB,OAAQ,OACRC,SAAU,SAGlB,CACIqB,uBAAsB,CAACZ,EAAUa,EAAUlB,EAAOmB,IACvChE,GAIvB,C,+DChGA,UAAe,CACXwF,MAAO,UACPC,IAAK,UACLC,MAAO,UACPC,OAAQ,UACRC,KAAM,UACNC,QAAS,UACTC,KAAM,UACNC,MAAO,UACPC,KAAM,U,iECTV,eACA,SAEA,qBACI,MAAMC,EAAUzE,EAAO0E,UAAUC,iBAAiB,GAAGC,IAAIC,OAEzD,IACIC,EAAgB,CAAC,EAWrB,MAAMC,EAAkB,GAAGN,iBAC3B,IAAKO,EAAKC,WAAWF,GACjB,MAAO,CAAC,EAGZ,MAAMG,EAAcC,KAAKC,MACrBJ,EAAKK,aAAaN,GAAiBO,YAEjCC,EAAO,IACLL,EAAYM,iBAAmB,CAAC,KAChCN,EAAYO,cAAgB,CAAC,GAG/BC,EAAQjB,EAAQlF,MAAM,KAC5B,IAAIoG,EACJ,KAAOD,EAAM7C,QAAU,GAEnB,GADA6C,EAAME,MACFZ,EAAKC,WAAW,GAAGS,EAAM/F,KAAK,qBAAsB,CACpDgG,EAAcD,EAAM/F,KAAK,KACzB,K,CAIRhB,OAAOkH,KAAKN,GAAMO,SAASC,IAEvB,MAAMC,EAAc,GAAGvB,kBAAwBsB,gBAC3CE,EAAkB,GACdN,GAAe,mBACFI,gBAErB,IAAIG,EAEJ,GAAIlB,EAAKC,WAAWe,GAChBE,EAAwBlB,EAAKmB,aAAaH,OACvC,KAAIhB,EAAKC,WAAWgB,GAGvB,OAFAC,EAAwBlB,EAAKmB,aAAaF,E,CAK9C,MAAMG,EAAoBjB,KAAKC,MAC3BJ,EAAKK,aAAaa,GAAuBZ,YAGzCc,EAAkBC,WAAWC,MAC7BxB,EAAgB,IACTA,KACAsB,EAAkBC,UAAUC,K,IAM3C,IAAK,IAAK7H,EAAKC,KAAcC,OAAOC,QAAQkG,GAAgB,CACxD,IAAIyB,GAAU,EACd,MAAM1H,EAAOH,EAAUG,MAAMC,KAAKC,gBAG7B,CACG,QACA,WACA,eACA,kBACA,eACA,cACFwE,SAAS1E,IAOVH,EAAU8H,QACXC,QAAQC,IACJ,gCAAgChI,EAAUY,0CAGzB,SAArBZ,EAAU8H,QAA0C,WAArB9H,EAAU8H,SACzCD,GAAU,GAGT7H,EAAUiI,QAAQxH,OACnBsH,QAAQC,IACJ,gCAAgChI,EAAUY,0CAE9CiH,GAAU,GAGT7H,EAAUQ,WACXuH,QAAQC,IACJ,gCAAgChI,EAAUY,4CAE9CiH,GAAU,GAGTA,UACMzB,EAAcrG,WA7BdqG,EAAcrG,E,CAiC7B,OAAOqG,CACX,C,iECvHA,eACA,SAMA,mBACIpG,EACAkI,GAEA,MAAMC,EAASnI,EAAUoI,OAAS,CAAC,EAC/BC,EAAWrI,EAAUsI,SAAW,CAAC,EAE/BC,EAAU,MAAML,GAAOjG,OAAS,KAAKjC,EAAUS,8BACpC,UAASqF,UAAU9F,EAAUY,8CAErB,SAArBZ,EAAU8H,OACJ,UAASvC,IACY,WAArBvF,EAAU8H,OACV,UAAStC,MACT,UAASD,WACXvF,EAAU8H,QAAU,+CACxB,UAASnC,eACL3F,EAAUwI,OAAS,qBAE7BvI,OAAOkH,KAAKgB,GACTP,KAAKQ,IACF,MAAMK,EAAWN,EAAOC,GACxB,MAAO,wBACM,UAAS3C,cAClBgD,EAASC,WAAa,IAAIN,KAASK,EAASC,cAAgBN,aACpD,SAASO,OACjB,GAAKP,EAAMjE,QAAU,EAAI,GAAKiE,EAAMjE,OAAS,wBAC1B,UAASyB,aAC5B6C,EAAStI,KAAKC,uBAExBqI,EAASG,aAAa,IAEnB3H,KAAK,UAENhB,OAAOkH,KAAKkB,GAAUlE,OAChB,mBAGA,SAGRlE,OAAOkH,KAAKkB,GACTT,KAAKU,IACF,MAAMO,EAAaR,EAASC,GAC5B,MAAO,wBACM,UAAS7C,cAClBoD,EAAWH,WACL,IAAIJ,KAAWO,EAAWH,cAC1BJ,aACE,SAASK,OACjB,GAAKL,EAAQnE,QAAU,EAAI,GAAKmE,EAAQnE,OAAS,wBAC9B,UAASyB,aAC5BiD,EAAW1I,KAAKC,uBAE1ByI,EAAWD,aAAa,IAErB3H,KAAK,YAERjB,EAAUkE,SACN0D,OACGkB,GAAe,SAClBA,EAAW7G,OAAS,sBAElB6G,EAAWvG,aACjBuG,EAAWzE,mBAIRpD,KAAK,+BAIRjB,EAAU4I,kBAGR5I,EAAUiI,OACJ,mBAENjI,EAAUiI,OAAOxH,SAAST,EAAUiI,OAAOc,iBAAiB/I,EAAUiI,OAAOc,SACvE,6JAO2C/I,EAAUY,+MAOrDoB,EAAY,IAAIV,EAAO0H,eAAeT,GAG5C,OAFAvG,EAAKiH,aAAc,EACnBjH,EAAKkH,WAAY,EACVlH,CACX,C,UC1GAmH,EAAOC,QAAUC,QAAQ,S,UCAzBF,EAAOC,QAAUC,QAAQ,K,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,uGCbA,eAEA,SACA,SACA,SACA,SAIA,WAAOQ,eAAwB9F,GAE3B,MAAMjE,GAAa,gBAGnB,aAAgBA,IAGhB,aAAiBA,IAGjB,aAAkBA,IAGlB,aAAiBA,EACrB,EAGA,wBAA8B,C","sources":["webpack://coffeekraken/./src/integrations/css.ts","webpack://coffeekraken/./src/integrations/js.ts","webpack://coffeekraken/./src/integrations/php.ts","webpack://coffeekraken/./src/integrations/twig.ts","webpack://coffeekraken/./src/lib/colors.ts","webpack://coffeekraken/./src/lib/docmapJson.ts","webpack://coffeekraken/./src/lib/popinContent.ts","webpack://coffeekraken/external commonjs \"vscode\"","webpack://coffeekraken/external node-commonjs \"fs\"","webpack://coffeekraken/webpack/bootstrap","webpack://coffeekraken/./src/extension.ts"],"sourcesContent":["// @ts-nocheck\n\nimport * as vscode from 'vscode';\nimport __colors from '../lib/colors';\nimport __popinContent from '../lib/popinContent';\n\nfunction getDocmapObjByCssId(docmapJson: any, name: string): any {\n    for (let [namespace, docmapObj] of Object.entries(docmapJson)) {\n        if (name === docmapObj._cssId) {\n            return docmapObj;\n        }\n    }\n}\n\nexport default function cssIntegration(docmapJson: any): void {\n    const snippets: any[] = [];\n\n    // snippets\n    for (let [key, docmapObj] of Object.entries(docmapJson)) {\n        const type = docmapObj.type?.raw?.toLowerCase?.();\n\n        // handle only class and functions\n        if (type !== 'postcssmixin') {\n            continue;\n        }\n\n        // handle only css stuff\n        let isEligible = false;\n        for (let platformObj of docmapObj.platform) {\n            if (platformObj.name === 'postcss' || platformObj.name === 'css') {\n                isEligible = true;\n                break;\n            }\n        }\n        if (!isEligible) {\n            continue;\n        }\n\n        let lastPart = '';\n        let str = `@sugar.${docmapObj.id\n                .split('.')\n                .slice(2)\n                .filter((p) => {\n                    if (p === lastPart) {\n                        return false;\n                    }\n                    lastPart = p;\n                    return true;\n                })\n                .join('.')\n\n                .replace('node.mixin.', '')}`,\n            label = `${str}`;\n\n        docmapObj._cssId = str;\n\n        const snippetCompletion = new vscode.CompletionItem(str);\n        snippetCompletion.kind = vscode.CompletionItemKind.Function;\n        snippetCompletion.label = label;\n        snippetCompletion.filterText = `${docmapObj.namespace}.${label}`;\n        snippetCompletion.insertText = new vscode.SnippetString(str);\n        snippetCompletion.sup;\n        // snippetCompletion.command = {\n        //     arguments: [docmapObj],\n        //     command: 'coffeekraken.s.sugar.css.import',\n        // };\n\n        const docs: any = __popinContent(docmapObj, {\n            title: str,\n        });\n        snippetCompletion.documentation = docs;\n        snippets.push(snippetCompletion);\n    }\n\n    vscode.languages.registerHoverProvider(\n        [\n            {\n                scheme: 'file',\n                language: 'css',\n            },\n        ],\n        {\n            provideHover(doc, pos, token) {\n                const editor = vscode.window.activeTextEditor;\n\n                // pos.e\n                const range = editor?.document.getWordRangeAtPosition(\n                    new vscode.Position(pos.line, pos.e),\n                    /[a-zA-Z0-9-_\\.\\@]+/,\n                );\n\n                const lineStr = editor?.document.lineAt(pos.line).text,\n                    hoveredText = editor?.document.getText(range);\n\n                if (!hoveredText) {\n                    return;\n                }\n\n                const docmapObj = getDocmapObjByCssId(docmapJson, hoveredText);\n\n                if (!docmapObj) {\n                    return;\n                }\n\n                const popinContentStr = __popinContent(docmapObj, {\n                    title: docmapObj._cssId,\n                });\n                return {\n                    contents: [popinContentStr],\n                };\n            },\n        },\n    );\n\n    vscode.languages.registerCompletionItemProvider(\n        [\n            {\n                scheme: 'file',\n                language: 'css',\n            },\n        ],\n        {\n            provideCompletionItems(document, position, token, context) {\n                return snippets;\n            },\n        },\n    );\n}\n","// @ts-nocheck\n\nimport * as vscode from 'vscode';\nimport __colors from '../lib/colors';\nimport __popinContent from '../lib/popinContent';\n\nfunction getDocmapObjByName(docmapJson: any, name: string): any {\n    for (let [namespace, docmapObj] of Object.entries(docmapJson)) {\n        if (name === docmapObj.name || name === `__${docmapObj.name}`) {\n            return docmapObj;\n        }\n    }\n}\n\nexport default function jsIntegration(docmapJson: any): void {\n    const snippets: any[] = [];\n\n    vscode.commands.registerCommand(\n        'coffeekraken.s.sugar.import',\n        (docmapObj) => {\n            const type = docmapObj.type?.raw?.toLowerCase?.();\n            switch (docmapObj.extension) {\n                case 'js':\n                case 'ts':\n                    if (docmapObj.example?.length) {\n                        const firstExample = docmapObj.example[0];\n\n                        let importStr = firstExample.code.split('\\n')[0];\n                        if (!importStr.match(/^import\\s/)) {\n                            return;\n                        }\n\n                        // ending \";\"\n\n                        const editor = vscode.window.activeTextEditor,\n                            curPos = editor.selection.active;\n\n                        const restorePosition = editor?.selection.active.with(\n                            curPos.c + 1,\n                            curPos.e,\n                        );\n\n                        if (editor) {\n                            // avoid multiple add\n                            if (\n                                editor?.document.getText().includes(importStr)\n                            ) {\n                                return;\n                            }\n                            editor.insertSnippet(\n                                new vscode.SnippetString(`${importStr}\\n`),\n                                new vscode.Position(0, 0),\n                            );\n                            var newSelection = new vscode.Selection(\n                                restorePosition,\n                                restorePosition,\n                            );\n                            editor.selection = newSelection;\n                        }\n                    }\n                    break;\n            }\n        },\n    );\n\n    // snippets\n    for (let [key, docmapObj] of Object.entries(docmapJson)) {\n        const type = docmapObj.type?.raw?.toLowerCase?.();\n\n        // handle only class and functions\n        if (type !== 'function' && type !== 'class') {\n            continue;\n        }\n\n        // handle only js stuff\n        let isEligible = false;\n        for (let platformObj of docmapObj.platform) {\n            if (platformObj.name === 'js' || platformObj.name === 'node') {\n                isEligible = true;\n                break;\n            }\n        }\n        if (!isEligible) {\n            continue;\n        }\n\n        let str = `__${docmapObj.name}`,\n            label = `${str}`;\n\n        const snippetCompletion = new vscode.CompletionItem(str);\n        snippetCompletion.kind = vscode.CompletionItemKind.Function;\n        snippetCompletion.label = label;\n        snippetCompletion.filterText = `${docmapObj.namespace}.${label}`;\n        snippetCompletion.insertText = new vscode.SnippetString(str);\n        snippetCompletion.sup;\n        snippetCompletion.command = {\n            arguments: [docmapObj],\n            command: 'coffeekraken.s.sugar.import',\n        };\n\n        const docs: any = __popinContent(docmapObj);\n        snippetCompletion.documentation = docs;\n        snippets.push(snippetCompletion);\n    }\n\n    vscode.languages.registerHoverProvider(\n        [\n            {\n                scheme: 'file',\n                language: 'typescript',\n            },\n            {\n                scheme: 'file',\n                language: 'javascript',\n            },\n        ],\n        {\n            provideHover(doc, pos, token) {\n                const editor = vscode.window.activeTextEditor;\n\n                // pos.e\n                const range = editor?.document.getWordRangeAtPosition(\n                    new vscode.Position(pos.line, pos.e),\n                );\n                const hoveredText = editor?.document.getText(range);\n\n                if (!hoveredText) {\n                    return;\n                }\n\n                const docmapObj = getDocmapObjByName(docmapJson, hoveredText);\n\n                if (!docmapObj) {\n                    return;\n                }\n\n                const popinContentStr = __popinContent(docmapObj);\n                return {\n                    contents: [popinContentStr],\n                };\n            },\n        },\n    );\n\n    vscode.languages.registerCompletionItemProvider(\n        [\n            {\n                scheme: 'file',\n                language: 'typescript',\n            },\n            {\n                scheme: 'file',\n                language: 'javascript',\n            },\n        ],\n        {\n            provideCompletionItems(document, position, token, context) {\n                return snippets;\n            },\n        },\n    );\n}\n","// @ts-nocheck\n\nimport * as vscode from 'vscode';\nimport __colors from '../lib/colors';\nimport __popinContent from '../lib/popinContent';\n\nfunction getDocmapObjByPhpId(docmapJson: any, name: string): any {\n    for (let [namespace, docmapObj] of Object.entries(docmapJson)) {\n        if (name === docmapObj._phpId) {\n            return docmapObj;\n        }\n    }\n}\n\nexport default function phpIntegration(docmapJson: any): void {\n    const snippets: any[] = [];\n\n    // snippets\n    for (let [key, docmapObj] of Object.entries(docmapJson)) {\n        const type = docmapObj.type?.raw?.toLowerCase?.();\n\n        // handle only class and functions\n        if (type !== 'function' && type !== 'class') {\n            continue;\n        }\n\n        // handle only css stuff\n        let isEligible = false;\n        for (let platformObj of docmapObj.platform) {\n            if (platformObj.name === 'php') {\n                isEligible = true;\n                break;\n            }\n        }\n        if (!isEligible) {\n            continue;\n        }\n\n        let str = `\\\\Sugar\\\\${docmapObj.id\n                .split('.')\n                .slice(3)\n                .join('.')\n                .replace(/\\./gm, '\\\\')}`,\n            label = `${str}`;\n\n        docmapObj._phpId = str;\n\n        const snippetCompletion = new vscode.CompletionItem(str);\n        snippetCompletion.kind = vscode.CompletionItemKind.Function;\n        snippetCompletion.label = label;\n        snippetCompletion.filterText = `${docmapObj.namespace}.${label}`;\n        snippetCompletion.insertText = new vscode.SnippetString(str);\n\n        const docs: any = __popinContent(docmapObj, {\n            title: str,\n        });\n        snippetCompletion.documentation = docs;\n        snippets.push(snippetCompletion);\n    }\n\n    vscode.languages.registerHoverProvider(\n        [\n            {\n                scheme: 'file',\n                language: 'php',\n            },\n        ],\n        {\n            provideHover(doc, pos, token) {\n                const editor = vscode.window.activeTextEditor;\n\n                // pos.e\n                const range = editor?.document.getWordRangeAtPosition(\n                    new vscode.Position(pos.line, pos.e),\n                    /[a-zA-Z0-9-_\\\\]+/,\n                );\n\n                const lineStr = editor?.document.lineAt(pos.line).text,\n                    hoveredText = editor?.document.getText(range);\n\n                if (!hoveredText) {\n                    return;\n                }\n\n                const docmapObj = getDocmapObjByPhpId(docmapJson, hoveredText);\n\n                if (!docmapObj) {\n                    return;\n                }\n\n                const popinContentStr = __popinContent(docmapObj, {\n                    title: docmapObj._phpId,\n                });\n                return {\n                    contents: [popinContentStr],\n                };\n            },\n        },\n    );\n\n    vscode.languages.registerCompletionItemProvider(\n        [\n            {\n                scheme: 'file',\n                language: 'php',\n            },\n        ],\n        {\n            provideCompletionItems(document, position, token, context) {\n                return snippets;\n            },\n        },\n    );\n}\n","// @ts-nocheck\n\nimport * as vscode from 'vscode';\nimport __colors from '../lib/colors';\nimport __popinContent from '../lib/popinContent';\n\nfunction getDocmapObjByName(docmapJson: any, name: string): any {\n    for (let [namespace, docmapObj] of Object.entries(docmapJson)) {\n        if (name === docmapObj.name || name === `__${docmapObj.name}`) {\n            return docmapObj;\n        }\n    }\n}\n\nexport default function twigIntegration(docmapJson: any): void {\n    const snippets: any[] = [];\n\n    // snippets\n    for (let [key, docmapObj] of Object.entries(docmapJson)) {\n        const type = docmapObj.type?.raw?.toLowerCase?.();\n\n        // handle only class and functions\n        if (type !== 'twigfunction' && type !== 'twigfilter') {\n            continue;\n        }\n\n        // handle only js stuff\n        let isEligible = false;\n        for (let platformObj of docmapObj.platform) {\n            if (platformObj.name === 'twig') {\n                isEligible = true;\n                break;\n            }\n        }\n        if (!isEligible) {\n            continue;\n        }\n\n        let str = `__${docmapObj.name}`,\n            label = `${str}`;\n\n        const snippetCompletion = new vscode.CompletionItem(str);\n        snippetCompletion.kind = vscode.CompletionItemKind.Function;\n        snippetCompletion.label = label;\n        snippetCompletion.filterText = `${docmapObj.namespace}.${label}`;\n        snippetCompletion.insertText = new vscode.SnippetString(str);\n\n        const docs: any = __popinContent(docmapObj);\n        snippetCompletion.documentation = docs;\n        snippets.push(snippetCompletion);\n    }\n\n    vscode.languages.registerHoverProvider(\n        [\n            {\n                scheme: 'file',\n                language: 'twig',\n            },\n        ],\n        {\n            provideHover(doc, pos, token) {\n                const editor = vscode.window.activeTextEditor,\n                    range = editor?.document.getWordRangeAtPosition(\n                        new vscode.Position(pos.line, pos.e),\n                    ),\n                    hoveredText = editor?.document.getText(range);\n\n                if (!hoveredText) {\n                    return;\n                }\n\n                const docmapObj = getDocmapObjByName(docmapJson, hoveredText);\n\n                if (!docmapObj) {\n                    return;\n                }\n\n                const popinContentStr = __popinContent(docmapObj);\n                return {\n                    contents: [popinContentStr],\n                };\n            },\n        },\n    );\n\n    vscode.languages.registerCompletionItemProvider(\n        [\n            {\n                scheme: 'file',\n                language: 'twig',\n            },\n        ],\n        {\n            provideCompletionItems(document, position, token, context) {\n                return snippets;\n            },\n        },\n    );\n}\n","// @ts-nocheck\n\nexport default {\n    black: '#3b4252',\n    red: '#bf616a',\n    green: '#a3be8c',\n    yellow: '#ebcb8b',\n    blue: '#81a1c1',\n    magenta: '#b48ead',\n    cyan: '#88c0d0',\n    white: '#e5e9f0',\n    grey: '#666666',\n};\n","// @ts-nocheck\n\nimport * as vscode from 'vscode';\nimport * as __fs from 'fs';\n\nexport default function docmapJson(): any {\n    const rootDir = vscode.workspace.workspaceFolders[0].uri.fsPath;\n\n    let docmapJson = {},\n        docmapJsonMap = {};\n\n    // if (__fs.existsSync(`${rootDir}/docmap.json`)) {\n    //     docmapJson = JSON.parse(\n    //         __fs.readFileSync(`${rootDir}/docmap.json`).toString(),\n    //     );\n    //     if (docmapJson.generated?.map) {\n    //         docmapJsonMap = docmapJson.generated.map;\n    //     }\n    // }\n\n    const packageJsonPath = `${rootDir}/package.json`;\n    if (!__fs.existsSync(packageJsonPath)) {\n        return {};\n    }\n\n    const packageJson = JSON.parse(\n        __fs.readFileSync(packageJsonPath).toString(),\n    );\n    const deps = {\n        ...(packageJson.devDependencies ?? {}),\n        ...(packageJson.dependencies ?? {}),\n    };\n\n    const parts = rootDir.split('/');\n    let monoRootDir: string;\n    while (parts.length >= 1) {\n        parts.pop();\n        if (__fs.existsSync(`${parts.join('/')}/node_modules`)) {\n            monoRootDir = parts.join('/');\n            break;\n        }\n    }\n\n    Object.keys(deps).forEach((packageName) => {\n        // const pkgDocmapJsonPath = await import(`${pkg}/docmap.json`);\n        const packagePath = `${rootDir}/node_modules/${packageName}/docmap.json`,\n            monoPackagePath = `${\n                monoRootDir ?? ''\n            }/node_modules/${packageName}/docmap.json`;\n\n        let packageDocmapJsonPath;\n\n        if (__fs.existsSync(packagePath)) {\n            packageDocmapJsonPath = __fs.realpathSync(packagePath);\n        } else if (__fs.existsSync(monoPackagePath)) {\n            packageDocmapJsonPath = __fs.realpathSync(monoPackagePath);\n        } else {\n            return;\n        }\n\n        const packageDocmapJson = JSON.parse(\n            __fs.readFileSync(packageDocmapJsonPath).toString(),\n        );\n\n        if (packageDocmapJson.generated?.map) {\n            docmapJsonMap = {\n                ...docmapJsonMap,\n                ...packageDocmapJson.generated.map,\n            };\n        }\n    });\n\n    // filter docmap with only what we want for this extension\n    for (let [key, docmapObj] of Object.entries(docmapJsonMap)) {\n        let isValid = true;\n        const type = docmapObj.type?.raw?.toLowerCase?.();\n\n        if (\n            ![\n                'class',\n                'function',\n                'postcssmixin',\n                'postcssfunction',\n                'twigfunction',\n                'twigfilter',\n            ].includes(type)\n        ) {\n            delete docmapJsonMap[key];\n            continue;\n        }\n\n        // only beta and stable items\n        if (!docmapObj.status) {\n            console.log(\n                `[Coffeekraken] The namespace ${docmapObj.id} does not have any status defined...`,\n            );\n        }\n        if (docmapObj.status !== 'beta' && docmapObj.status !== 'stable') {\n            isValid = false;\n        }\n\n        if (!docmapObj.author?.name) {\n            console.log(\n                `[Coffeekraken] The namespace ${docmapObj.id} does not have any author defined...`,\n            );\n            isValid = false;\n        }\n\n        if (!docmapObj.platform) {\n            console.log(\n                `[Coffeekraken] The namespace ${docmapObj.id} does not have any platform defined...`,\n            );\n            isValid = false;\n        }\n\n        if (!isValid) {\n            delete docmapJsonMap[key];\n        }\n    }\n\n    return docmapJsonMap;\n}\n","// @ts-nocheck\n\nimport * as vscode from 'vscode';\nimport __colors from './colors';\n\nexport interface IPopinContentMetas {\n    title: string;\n}\n\nexport default function popinContent(\n    docmapObj: any,\n    metas?: Partial<IPopinContentMetas>,\n): void {\n    const params = docmapObj.param ?? {},\n        settings = docmapObj.setting ?? {};\n\n    const content = `## ${metas?.title ?? `__${docmapObj.name}`}\n<span style=\"color:${__colors.grey};\">${docmapObj.id}</span><br/>\nStatus: <span style=\"color:${\n        docmapObj.status === 'beta'\n            ? __colors.red\n            : docmapObj.status === 'stable'\n            ? __colors.green\n            : __colors.red\n    };\">**${docmapObj.status ?? 'beta'}**</span> | Since: <span style=\"color:${\n        __colors.magenta\n    };\">**${docmapObj.since ?? '...'}**</span>\n\n${Object.keys(params)\n    .map((param) => {\n        const paramObj = params[param];\n        return `\n<span style=\"color:${__colors.yellow};\">**${\n            paramObj.defaultStr ? `[${param}=${paramObj.defaultStr}]` : param\n        }**</span>${'&nbsp;'.repeat(\n            20 - param.length >= 0 ? 20 - param.length : 1,\n        )}<span style=\"color:${__colors.cyan};\">__{${\n            paramObj.type.raw\n        }}__</span><br/>\n${paramObj.description}`;\n    })\n    .join('\\n')}\n${\n    Object.keys(settings).length\n        ? `\n### Settings\n`\n        : ''\n}\n\n${Object.keys(settings)\n    .map((setting) => {\n        const settingObj = settings[setting];\n        return `\n<span style=\"color:${__colors.yellow};\">**${\n            settingObj.defaultStr\n                ? `[${setting}=${settingObj.defaultStr}]`\n                : setting\n        }**</span>${'&nbsp;'.repeat(\n            20 - setting.length >= 0 ? 20 - setting.length : 1,\n        )}<span style=\"color:${__colors.cyan};\">__{${\n            settingObj.type.raw\n        }}__</span><br/>\n${settingObj.description}`;\n    })\n    .join('\\n')}\n\n${docmapObj.example\n    ?.map?.(\n        (exampleObj) => `\n### ${exampleObj.title ?? 'Example'}\n\n\\`\\`\\`${exampleObj.language}\n${exampleObj.code}\n\\`\\`\\`\n`,\n    )\n    .join('\\n')}\n\n### Description\n\n${docmapObj.description}\n\n${\n    docmapObj.author\n        ? `### Author\n\n- ${docmapObj.author.name} [${docmapObj.author.email}](mailto:${docmapObj.author.email})`\n        : ''\n}\n\n### More\n\n![Coffeekraken](https://cdnv2.coffeekraken.io/coffeekraken-logo-vscode-popin.png)\n\n- [Full documentation](https://coffeekraken.io/api/${docmapObj.id})\n- [Report an issue](https://github.com/Coffeekraken/coffeekraken/issues)\n- [Join us on Discord](https://discord.com/login?redirect_to=%2Fchannels%2F940362961682333767%2F940362962223378494)\n\n\n    `;\n\n    const docs: any = new vscode.MarkdownString(content);\n    docs.supportHtml = true;\n    docs.isTrusted = true;\n    return docs;\n}\n","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// @ts-nocheck\n\n// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\n// import __SDocmap from '@coffeekraken/s-docmap';\nimport * as __fs from 'fs';\nimport * as __glob from 'glob';\nimport __colors from './lib/colors';\nimport __docmapJson from './lib/docmapJson';\n\nimport __jsIntegration from './integrations/js';\nimport __cssIntegration from './integrations/css';\nimport __twigIntegration from './integrations/twig';\nimport __phpIntegration from './integrations/php';\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\nexport async function activate(context: vscode.ExtensionContext) {\n    // load the docmap\n    const docmapJson = __docmapJson();\n\n    // js integration\n    __jsIntegration(docmapJson);\n\n    // css integration\n    __cssIntegration(docmapJson);\n\n    // twig integration\n    __twigIntegration(docmapJson);\n\n    // php integration\n    __phpIntegration(docmapJson);\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n"],"names":["docmapJson","snippets","key","docmapObj","Object","entries","type","raw","toLowerCase","isEligible","platformObj","platform","name","lastPart","str","id","split","slice","filter","p","join","replace","label","_cssId","snippetCompletion","vscode","CompletionItem","kind","CompletionItemKind","Function","filterText","namespace","insertText","SnippetString","sup","docs","title","documentation","push","languages","registerHoverProvider","scheme","language","provideHover","doc","pos","token","editor","window","activeTextEditor","range","document","getWordRangeAtPosition","Position","line","e","hoveredText","lineAt","text","getText","getDocmapObjByCssId","contents","registerCompletionItemProvider","provideCompletionItems","position","context","commands","registerCommand","extension","example","length","importStr","code","match","curPos","selection","active","restorePosition","with","c","includes","insertSnippet","newSelection","Selection","command","arguments","getDocmapObjByName","_phpId","getDocmapObjByPhpId","black","red","green","yellow","blue","magenta","cyan","white","grey","rootDir","workspace","workspaceFolders","uri","fsPath","docmapJsonMap","packageJsonPath","__fs","existsSync","packageJson","JSON","parse","readFileSync","toString","deps","devDependencies","dependencies","parts","monoRootDir","pop","keys","forEach","packageName","packagePath","monoPackagePath","packageDocmapJsonPath","realpathSync","packageDocmapJson","generated","map","isValid","status","console","log","author","metas","params","param","settings","setting","content","since","paramObj","defaultStr","repeat","description","settingObj","exampleObj","email","MarkdownString","supportHtml","isTrusted","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","async"],"sourceRoot":""}
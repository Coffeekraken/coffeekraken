/* index.svelte generated by Svelte v3.37.0 */
import {
	SvelteElement,
	add_location,
	assign,
	attr_dev,
	attribute_to_object,
	detach_dev,
	dispatch_dev,
	element,
	exclude_internal_props,
	flush,
	init,
	insert_dev,
	noop,
	safe_not_equal,
	validate_slots
} from "svelte/internal";

import __SSvelteComponent from "@coffeekraken/s-svelte-component";
import __SDocblockToHtmlComponentInterface from "./interface/SDocblockToHtmlComponentInterface";
import __SDocblock from "@coffeekraken/s-docblock";
import { SDocblockHtmlRenderer } from "@coffeekraken/s-docblock-renderer";
const file = "index.svelte";

function create_fragment(ctx) {
	let div;
	let div_class_value;

	const block = {
		c: function create() {
			div = element("div");
			this.c = noop;
			attr_dev(div, "class", div_class_value = /*component*/ ctx[0].className());
			add_location(div, file, 40, 0, 1834);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("s-docblock-to-html", slots, []);

	var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P
			? value
			: new P(function (resolve) {
						resolve(value);
					});
		}

		return new (P || (P = Promise))(function (resolve, reject) {
				function fulfilled(value) {
					try {
						step(generator.next(value));
					} catch(e) {
						reject(e);
					}
				}

				function rejected(value) {
					try {
						step(generator["throw"](value));
					} catch(e) {
						reject(e);
					}
				}

				function step(result) {
					result.done
					? resolve(result.value)
					: adopt(result.value).then(fulfilled, rejected);
				}

				step((generator = generator.apply(thisArg, _arguments || [])).next());
			});
	};

	class MyCoolComponent extends __SSvelteComponent {
		constructor(params) {
			super(params, { svelteComponent: {} });
		}
	}

	MyCoolComponent.interface = __SDocblockToHtmlComponentInterface;

	const component = new __SSvelteComponent($$props,
	{
			svelteComponent: {
				classPrefix: "s-docblock-to-html",
				interface: __SDocblockToHtmlComponentInterface
			}
		});

	let {  } = component.props;

	component.beforeUpdate(() => {
		
	});

	component.onMount(() => __awaiter(void 0, void 0, void 0, function* () {
		console.log("MOU");
		const docblock = new __SDocblock(component.$elm.innerHTML);
		const docblockHtmlRenderer = new SDocblockHtmlRenderer(docblock);
		const html = yield docblockHtmlRenderer.render();
		console.log("HTML", html);
	}));

	$$self.$$set = $$new_props => {
		$$invalidate(3, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({
		__awaiter,
		__SSvelteComponent,
		__SDocblockToHtmlComponentInterface,
		__SDocblock,
		SDocblockHtmlRenderer,
		MyCoolComponent,
		component
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(3, $$props = assign(assign({}, $$props), $$new_props));
		if ("__awaiter" in $$props) __awaiter = $$new_props.__awaiter;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [component];
}

class Index extends SvelteElement {
	constructor(options) {
		super();

		init(
			this,
			{
				target: this.shadowRoot,
				props: attribute_to_object(this.attributes),
				customElement: true
			},
			instance,
			create_fragment,
			safe_not_equal,
			{}
		);

		if (options) {
			if (options.target) {
				insert_dev(options.target, this, options.anchor);
			}

			if (options.props) {
				this.$set(options.props);
				flush();
			}
		}
	}
}

customElements.define("s-docblock-to-html", Index);
export default Index;
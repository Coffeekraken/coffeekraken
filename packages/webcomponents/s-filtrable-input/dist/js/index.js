/* index.svelte generated by Svelte v3.37.0 */
import {
	HtmlTag,
	SvelteElement,
	add_location,
	append_dev,
	assign,
	attr_dev,
	attribute_to_object,
	destroy_each,
	detach_dev,
	dispatch_dev,
	element,
	empty,
	exclude_internal_props,
	flush,
	init,
	insert_dev,
	noop,
	safe_not_equal,
	set_style,
	text,
	validate_each_argument,
	validate_slots
} from "svelte/internal";

import __SSvelteComponent from "@coffeekraken/s-svelte-component";
import __SFiltrableInputComponentInterface from "./interface/SFiltrableInputComponentInterface";
import __clone from "@coffeekraken/sugar/shared/object/clone";
const file = "index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i];
	child_ctx[15] = i;
	return child_ctx;
}

// (109:4) {:else}
function create_else_block(ctx) {
	let each_1_anchor;
	let each_value = /*filteredItems*/ ctx[2];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*component, template, filteredItems*/ 21) {
				each_value = /*filteredItems*/ ctx[2];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(109:4) {:else}",
		ctx
	});

	return block;
}

// (105:4) {#if !filteredItems.length}
function create_if_block(ctx) {
	let li;
	let raw_value = /*component*/ ctx[4].compileMustache(/*noItemTemplate*/ ctx[1], {}) + "";
	let li_class_value;

	const block = {
		c: function create() {
			li = element("li");
			attr_dev(li, "class", li_class_value = /*component*/ ctx[4].className("__list-item __list-no-item"));
			add_location(li, file, 105, 6, 3468);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			li.innerHTML = raw_value;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*noItemTemplate*/ 2 && raw_value !== (raw_value = /*component*/ ctx[4].compileMustache(/*noItemTemplate*/ ctx[1], {}) + "")) li.innerHTML = raw_value;;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(105:4) {#if !filteredItems.length}",
		ctx
	});

	return block;
}

// (110:6) {#each filteredItems as item, idx}
function create_each_block(ctx) {
	let li;
	let html_tag;
	let raw_value = /*component*/ ctx[4].compileMustache(/*template*/ ctx[0], /*item*/ ctx[13]) + "";
	let t;
	let li_class_value;

	const block = {
		c: function create() {
			li = element("li");
			t = text("\n        ");
			html_tag = new HtmlTag(t);
			set_style(li, "z-index", 999999999 - /*idx*/ ctx[15]);
			attr_dev(li, "class", li_class_value = /*component*/ ctx[4].className("__list-item"));
			add_location(li, file, 110, 8, 3666);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			html_tag.m(raw_value, li);
			append_dev(li, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*template, filteredItems*/ 5 && raw_value !== (raw_value = /*component*/ ctx[4].compileMustache(/*template*/ ctx[0], /*item*/ ctx[13]) + "")) html_tag.p(raw_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(110:6) {#each filteredItems as item, idx}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div;
	let html_tag;
	let t;
	let ul;
	let ul_class_value;
	let div_class_value;

	function select_block_type(ctx, dirty) {
		if (!/*filteredItems*/ ctx[2].length) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			div = element("div");
			t = text("\n  ");
			ul = element("ul");
			if_block.c();
			this.c = noop;
			html_tag = new HtmlTag(t);
			attr_dev(ul, "class", ul_class_value = /*component*/ ctx[4].className("__list"));
			add_location(ul, file, 103, 2, 3387);
			attr_dev(div, "class", div_class_value = /*component*/ ctx[4].className());
			add_location(div, file, 101, 0, 3330);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			html_tag.m(/*inputStr*/ ctx[3], div);
			append_dev(div, t);
			append_dev(div, ul);
			if_block.m(ul, null);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*inputStr*/ 8) html_tag.p(/*inputStr*/ ctx[3]);

			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(ul, null);
				}
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("s-filtrable-input", slots, []);

	class MyCoolComponent extends __SSvelteComponent {
		constructor(params) {
			super(params, { svelteComponent: {} });
		}
	}

	MyCoolComponent.interface = __SFiltrableInputComponentInterface;

	const component = new __SSvelteComponent($$props,
	{
			svelteComponent: {
				classPrefix: "s-filtrable-input",
				interface: __SFiltrableInputComponentInterface
			}
		});

	let { value, template, noItemTemplate, filtrable, maxItems } = component.props;
	let input;

	const items = [
		{
			title: "Hello",
			body: `Lorem Ipsum is simply dummy text of the printing`
		},
		{
			title: "Coco",
			body: `Lorem Ipsum is simply dummy text of the printing`
		},
		{
			title: "Plopfopof",
			body: `Lorem Ipsum is simply dummy text of the printing`
		}
	];

	for (let i = 0; i < 1000; i++) {
		items.push({
			title: "Coco " + i,
			body: `Lorem Ipsum is simply dummy text of the printing`
		});
	}

	let filteredItems = items;

	function filterItems() {
		let matchedItemsCount = 0;

		$$invalidate(2, filteredItems = items.map(item => __clone(item)).filter(item => {
			if (matchedItemsCount >= maxItems) return false;
			let matchFilter = false;

			for (let i = 0; i < Object.keys(item).length; i++) {
				const propName = Object.keys(item)[i], propValue = item[propName];

				// prevent not string value
				if (typeof propValue !== "string") continue;

				// check if the current propName is specified in the filtrable list
				if (filtrable.indexOf(propName) !== -1) {
					const reg = new RegExp(value, "gi");

					if (propValue.match(reg)) {
						matchedItemsCount++;
						matchFilter = true;

						if (value && value !== "") {
							const reg = new RegExp(value, "gi");

							const finalString = propValue.replace(reg, str => {
								return `<span class="${component.className("__list-item-highlight")}">${str}</span>`;
							});

							item[propName] = finalString;
						}
					}
				}
			}

			return matchFilter;
		}));
	}

	component.beforeUpdate(() => {
		if (!inputStr) {
			
		}

		if (!template) {
			const templateElm = document.querySelector("s-filtrable-input template#item");

			if (templateElm) {
				$$invalidate(0, template = templateElm.innerHTML);
			}
		}

		if (!noItemTemplate) {
			const templateElm = document.querySelector("s-filtrable-input template#no-item");

			if (templateElm) {
				$$invalidate(1, noItemTemplate = templateElm.innerHTML);
			}
		}
	});

	let inputStr;
	inputStr = component.rootElm.querySelector("input").outerHTML;
	

	if (inputStr.includes("class=\"")) {
		inputStr = inputStr.replace("class=\"", `class="${component.className("__input")} `);
	}

	component.onMount(() => {
		filterItems();
	});

	$$self.$$set = $$new_props => {
		$$invalidate(12, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({
		__SSvelteComponent,
		__SFiltrableInputComponentInterface,
		__clone,
		MyCoolComponent,
		component,
		value,
		template,
		noItemTemplate,
		filtrable,
		maxItems,
		input,
		items,
		filteredItems,
		filterItems,
		inputStr
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(12, $$props = assign(assign({}, $$props), $$new_props));
		if ("value" in $$props) value = $$new_props.value;
		if ("template" in $$props) $$invalidate(0, template = $$new_props.template);
		if ("noItemTemplate" in $$props) $$invalidate(1, noItemTemplate = $$new_props.noItemTemplate);
		if ("filtrable" in $$props) filtrable = $$new_props.filtrable;
		if ("maxItems" in $$props) maxItems = $$new_props.maxItems;
		if ("input" in $$props) input = $$new_props.input;
		if ("filteredItems" in $$props) $$invalidate(2, filteredItems = $$new_props.filteredItems);
		if ("inputStr" in $$props) $$invalidate(3, inputStr = $$new_props.inputStr);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [template, noItemTemplate, filteredItems, inputStr, component];
}

class Index extends SvelteElement {
	constructor(options) {
		super();

		this.shadowRoot.innerHTML = `<style>.s-filtrable-input:not(.s-no-bare .s-filtrable-input):not(.no-bare){display:inline-block;position:relative
}.s-filtrable-input:not(.s-no-bare .s-filtrable-input):not(.no-bare) .s-filtrable-input__list{position:absolute;top:100%;left:0;overflow-x:hidden;overflow-y:auto;opacity:0;max-width:calc(100vw - 100px);pointer-events:none
}.s-filtrable-input:not(.s-no-bare .s-filtrable-input):not(.no-bare) .s-filtrable-input__input:focus+.s-filtrable-input__list,.s-filtrable-input:not(.s-no-bare .s-filtrable-input):not(.no-bare) .s-filtrable-input__list:focus{opacity:1;pointer-events:all
}.s-filtrable-input:not(.s-no-bare .s-filtrable-input):not(.no-bare) .s-filtrable-input__list-item{cursor:pointer;position:relative
}.s-filtrable-input:not(.s-no-bare .s-filtrable-input):not(.no-bare) .s-filtrable-input__list-item *{pointer-events:none
}.s-filtrable-input:not(.s-no-lnf .s-filtrable-input):not(.s-no-lnf){}.s-filtrable-input:not(.s-no-lnf .s-filtrable-input):not(.s-no-lnf) .s-filtrable-input__list{background-color:var(--s-theme-color-surface-default, #ffffff);padding:var(--s-theme-space-20, 0.4rem);min-width:500px;border-radius:5px;box-shadow:0 0.6px 0.5px rgba(0, 0, 0, 0.017),0 1.5px 1.1px rgba(0, 0, 0, 0.024),0 2.8px 2.1px rgba(0, 0, 0, 0.03),0 4.9px 3.8px rgba(0, 0, 0, 0.036),0 9.2px 7.1px rgba(0, 0, 0, 0.043),0 22px 17px rgba(0, 0, 0, 0.06)
}.s-filtrable-input:not(.s-no-lnf .s-filtrable-input):not(.s-no-lnf) .s-filtrable-input__list>li{border-radius:5px;padding:var(--s-theme-space-40, 0.8rem)
}.s-filtrable-input:not(.s-no-lnf .s-filtrable-input):not(.s-no-lnf) .s-filtrable-input__list>li:hover{background-color:var(--s-theme-color-primary-20, #fae7b7)
}.s-filtrable-input:not(.s-no-lnf .s-filtrable-input):not(.s-no-lnf) .s-filtrable-input__list-item-highlight{background-color:var(--s-theme-color-primary-default, #f2bc2b)
}.s-style-list{background-color:var(--s-theme-color-surface-default, #ffffff);padding:var(--s-theme-space-20, 0.4rem);min-width:500px;border-radius:5px;box-shadow:0 0.6px 0.5px rgba(0, 0, 0, 0.017),0 1.5px 1.1px rgba(0, 0, 0, 0.024),0 2.8px 2.1px rgba(0, 0, 0, 0.03),0 4.9px 3.8px rgba(0, 0, 0, 0.036),0 9.2px 7.1px rgba(0, 0, 0, 0.043),0 22px 17px rgba(0, 0, 0, 0.06)
}.s-style-list>li{border-radius:5px;padding:var(--s-theme-space-40, 0.8rem)
}.s-style-list>li:hover{background-color:var(--s-theme-color-primary-20, #fae7b7)
}</style>`;

		init(
			this,
			{
				target: this.shadowRoot,
				props: attribute_to_object(this.attributes),
				customElement: true
			},
			instance,
			create_fragment,
			safe_not_equal,
			{}
		);

		if (options) {
			if (options.target) {
				insert_dev(options.target, this, options.anchor);
			}

			if (options.props) {
				this.$set(options.props);
				flush();
			}
		}
	}
}

customElements.define("s-filtrable-input", Index);
export default Index;
/* index.svelte generated by Svelte v3.37.0 */
import {
	SvelteElement,
	add_location,
	append_dev,
	assign,
	attr_dev,
	attribute_to_object,
	binding_callbacks,
	detach_dev,
	dispatch_dev,
	element,
	exclude_internal_props,
	flush,
	init,
	insert_dev,
	noop,
	safe_not_equal,
	validate_slots
} from "svelte/internal";

import prism from "prismjs";
import "prismjs/components/prism-javascript";
import "prismjs/components/prism-css";
import "prismjs/components/prism-markup";
import "prismjs/components/prism-bash";
import __SSvelteComponent from "@coffeekraken/s-svelte-component";
import __SHighlightJsComponentInterface from "./interface/SHighlightJsComponentInterface";
const file = "index.svelte";

function create_fragment(ctx) {
	let pre;
	let code;
	let pre_class_value;

	const block = {
		c: function create() {
			pre = element("pre");
			code = element("code");
			this.c = noop;
			add_location(code, file, 38, 1, 1262);
			attr_dev(pre, "class", pre_class_value = "language-" + /*language*/ ctx[1]);
			add_location(pre, file, 37, 0, 1227);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, pre, anchor);
			append_dev(pre, code);
			/*code_binding*/ ctx[2](code);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(pre);
			/*code_binding*/ ctx[2](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("s-highlight-js", slots, []);

	class MyCoolComponent extends __SSvelteComponent {
		constructor(params) {
			super(params, { svelteComponent: {} });
		}
	}

	MyCoolComponent.interface = __SHighlightJsComponentInterface;
	const component = new MyCoolComponent($$props);
	let { theme, language } = component.props;
	let codeElement;
	const text = document.querySelector("s-highlight-js").innerHTML;

	component.onMount(() => {
		const themeImport = `@import url('${theme}');`;
		const $style = document.createElement("style");
		$style.type = "text/css";
		$style.appendChild(document.createTextNode(themeImport));
		const result = prism.highlight(text.trim(), prism.languages.javascript, "javascript");
		$$invalidate(0, codeElement.innerHTML = result, codeElement);
		codeElement.appendChild($style);
	});

	function code_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			codeElement = $$value;
			$$invalidate(0, codeElement);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(7, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
	};

	$$self.$capture_state = () => ({
		prism,
		__SSvelteComponent,
		__SHighlightJsComponentInterface,
		MyCoolComponent,
		component,
		theme,
		language,
		codeElement,
		text
	});

	$$self.$inject_state = $$new_props => {
		$$invalidate(7, $$props = assign(assign({}, $$props), $$new_props));
		if ("theme" in $$props) theme = $$new_props.theme;
		if ("language" in $$props) $$invalidate(1, language = $$new_props.language);
		if ("codeElement" in $$props) $$invalidate(0, codeElement = $$new_props.codeElement);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$props = exclude_internal_props($$props);
	return [codeElement, language, code_binding];
}

class Index extends SvelteElement {
	constructor(options) {
		super();

		init(
			this,
			{
				target: this.shadowRoot,
				props: attribute_to_object(this.attributes),
				customElement: true
			},
			instance,
			create_fragment,
			safe_not_equal,
			{}
		);

		if (options) {
			if (options.target) {
				insert_dev(options.target, this, options.anchor);
			}

			if (options.props) {
				this.$set(options.props);
				flush();
			}
		}
	}
}

customElements.define("s-highlight-js", Index);
export default Index;
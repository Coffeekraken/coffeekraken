/* index.svelte generated by Svelte v3.37.0 */
import {
	SvelteElement,
	add_location,
	append_dev,
	attribute_to_object,
	binding_callbacks,
	detach_dev,
	dispatch_dev,
	element,
	flush,
	init,
	insert_dev,
	noop,
	safe_not_equal,
	validate_slots
} from "svelte/internal";

import { onMount } from "svelte";
import hljs from "highlight.js";
import javascript from "highlight.js/lib/languages/javascript";
import __SSvelteComponent from "@coffeekraken/s-svelte-component";
import __SHighlightJsComponentInterface from "./interface/SHighlightJsComponentInterface";
const file = "index.svelte";

function create_fragment(ctx) {
	let pre;
	let code;
	let slot;

	const block = {
		c: function create() {
			pre = element("pre");
			code = element("code");
			slot = element("slot");
			this.c = noop;
			add_location(slot, file, 35, 2, 943);
			add_location(code, file, 34, 1, 934);
			add_location(pre, file, 33, 0, 904);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, pre, anchor);
			append_dev(pre, code);
			append_dev(code, slot);
			/*pre_binding*/ ctx[2](pre);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(pre);
			/*pre_binding*/ ctx[2](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("s-highlight-js", slots, []);
	hljs.registerLanguage("javascript", javascript);

	class MyCoolComponent extends __SSvelteComponent {
		constructor() {
			super({ svelteComponent: {} });
		}
	}

	MyCoolComponent.interface = __SHighlightJsComponentInterface;
	let { theme } = $$props;
	let preElement;

	onMount(() => {
		const component = new MyCoolComponent({ theme });
		hljs.highlightElement(preElement);
	});

	const writable_props = ["theme"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<s-highlight-js> was created with unknown prop '${key}'`);
	});

	function pre_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			preElement = $$value;
			$$invalidate(0, preElement);
		});
	}

	$$self.$$set = $$props => {
		if ("theme" in $$props) $$invalidate(1, theme = $$props.theme);
	};

	$$self.$capture_state = () => ({
		onMount,
		hljs,
		javascript,
		__SSvelteComponent,
		__SHighlightJsComponentInterface,
		MyCoolComponent,
		theme,
		preElement
	});

	$$self.$inject_state = $$props => {
		if ("theme" in $$props) $$invalidate(1, theme = $$props.theme);
		if ("preElement" in $$props) $$invalidate(0, preElement = $$props.preElement);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [preElement, theme, pre_binding];
}

class Index extends SvelteElement {
	constructor(options) {
		super();
		this.shadowRoot.innerHTML = `<style>@import url(https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/styles/atom-one-dark.min.css);pre{}</style>`;

		init(
			this,
			{
				target: this.shadowRoot,
				props: attribute_to_object(this.attributes),
				customElement: true
			},
			instance,
			create_fragment,
			safe_not_equal,
			{ theme: 1 }
		);

		const { ctx } = this.$$;
		const props = this.attributes;

		if (/*theme*/ ctx[1] === undefined && !("theme" in props)) {
			console.warn("<s-highlight-js> was created without expected prop 'theme'");
		}

		if (options) {
			if (options.target) {
				insert_dev(options.target, this, options.anchor);
			}

			if (options.props) {
				this.$set(options.props);
				flush();
			}
		}
	}

	static get observedAttributes() {
		return ["theme"];
	}

	get theme() {
		return this.$$.ctx[1];
	}

	set theme(theme) {
		this.$set({ theme });
		flush();
	}
}

customElements.define("s-highlight-js", Index);
export default Index;
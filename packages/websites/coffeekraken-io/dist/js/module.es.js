var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __spreadValues = (a2, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a2, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a2, prop, b[prop]);
    }
  return a2;
};
var __spreadProps = (a2, b) => __defProps(a2, __getOwnPropDescs(b));
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
/* Riot v5.4.2, @license MIT */
function camelToDashCase(string) {
  return string.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
}
function dashToCamelCase(string) {
  return string.replace(/-(\w)/g, (_2, c2) => c2.toUpperCase());
}
function DOMattributesToObject(element) {
  return Array.from(element.attributes).reduce((acc, attribute) => {
    acc[dashToCamelCase(attribute.name)] = attribute.value;
    return acc;
  }, {});
}
function moveChildren(source3, target) {
  if (source3.firstChild) {
    target.appendChild(source3.firstChild);
    moveChildren(source3, target);
  }
}
function cleanNode(node) {
  clearChildren(node.childNodes);
}
function clearChildren(children) {
  Array.from(children).forEach(removeChild);
}
const removeChild = (node) => node && node.parentNode && node.parentNode.removeChild(node);
const insertBefore$2 = (newNode, refNode) => refNode && refNode.parentNode && refNode.parentNode.insertBefore(newNode, refNode);
const replaceChild = (newNode, replaced) => replaced && replaced.parentNode && replaced.parentNode.replaceChild(newNode, replaced);
const COMPONENTS_IMPLEMENTATION_MAP$1 = new Map(), DOM_COMPONENT_INSTANCE_PROPERTY$1 = Symbol("riot-component"), PLUGINS_SET$1 = new Set(), IS_DIRECTIVE = "is", VALUE_ATTRIBUTE = "value", MOUNT_METHOD_KEY = "mount", UPDATE_METHOD_KEY = "update", UNMOUNT_METHOD_KEY = "unmount", SHOULD_UPDATE_KEY = "shouldUpdate", ON_BEFORE_MOUNT_KEY = "onBeforeMount", ON_MOUNTED_KEY = "onMounted", ON_BEFORE_UPDATE_KEY = "onBeforeUpdate", ON_UPDATED_KEY = "onUpdated", ON_BEFORE_UNMOUNT_KEY = "onBeforeUnmount", ON_UNMOUNTED_KEY = "onUnmounted", PROPS_KEY = "props", STATE_KEY = "state", SLOTS_KEY = "slots", ROOT_KEY = "root", IS_PURE_SYMBOL = Symbol("pure"), IS_COMPONENT_UPDATING = Symbol("is_updating"), PARENT_KEY_SYMBOL = Symbol("parent"), ATTRIBUTES_KEY_SYMBOL = Symbol("attributes"), TEMPLATE_KEY_SYMBOL = Symbol("template");
var globals = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  COMPONENTS_IMPLEMENTATION_MAP: COMPONENTS_IMPLEMENTATION_MAP$1,
  DOM_COMPONENT_INSTANCE_PROPERTY: DOM_COMPONENT_INSTANCE_PROPERTY$1,
  PLUGINS_SET: PLUGINS_SET$1,
  IS_DIRECTIVE,
  VALUE_ATTRIBUTE,
  MOUNT_METHOD_KEY,
  UPDATE_METHOD_KEY,
  UNMOUNT_METHOD_KEY,
  SHOULD_UPDATE_KEY,
  ON_BEFORE_MOUNT_KEY,
  ON_MOUNTED_KEY,
  ON_BEFORE_UPDATE_KEY,
  ON_UPDATED_KEY,
  ON_BEFORE_UNMOUNT_KEY,
  ON_UNMOUNTED_KEY,
  PROPS_KEY,
  STATE_KEY,
  SLOTS_KEY,
  ROOT_KEY,
  IS_PURE_SYMBOL,
  IS_COMPONENT_UPDATING,
  PARENT_KEY_SYMBOL,
  ATTRIBUTES_KEY_SYMBOL,
  TEMPLATE_KEY_SYMBOL
});
const EACH = 0;
const IF = 1;
const SIMPLE = 2;
const TAG = 3;
const SLOT = 4;
var bindingTypes = {
  EACH,
  IF,
  SIMPLE,
  TAG,
  SLOT
};
const ATTRIBUTE = 0;
const EVENT = 1;
const TEXT = 2;
const VALUE = 3;
var expressionTypes = {
  ATTRIBUTE,
  EVENT,
  TEXT,
  VALUE
};
const HEAD_SYMBOL = Symbol("head");
const TAIL_SYMBOL = Symbol("tail");
function createHeadTailPlaceholders() {
  const head = document.createComment("fragment head");
  const tail = document.createComment("fragment tail");
  head[HEAD_SYMBOL] = true;
  tail[TAIL_SYMBOL] = true;
  return {
    head,
    tail
  };
}
function createTemplateMeta(componentTemplate) {
  const fragment = componentTemplate.dom.cloneNode(true);
  const {
    head,
    tail
  } = createHeadTailPlaceholders();
  return {
    avoidDOMInjection: true,
    fragment,
    head,
    tail,
    children: [head, ...Array.from(fragment.childNodes), tail]
  };
}
function getFragmentChildren(_ref) {
  let {
    head,
    tail
  } = _ref;
  const nodes = walkNodes([head], head.nextSibling, (n2) => n2 === tail, false);
  nodes.push(tail);
  return nodes;
}
function walkNodes(children, node, check, isFilterActive) {
  const {
    nextSibling
  } = node;
  if (!isFilterActive && !node[HEAD_SYMBOL] && !node[TAIL_SYMBOL]) {
    children.push(node);
  }
  if (!nextSibling || check(node))
    return children;
  return walkNodes(children, nextSibling, check, isFilterActive && !node[TAIL_SYMBOL] || nextSibling[HEAD_SYMBOL]);
}
function checkType(element, type) {
  return typeof element === type;
}
function isSvg(el) {
  const owner = el.ownerSVGElement;
  return !!owner || owner === null;
}
function isTemplate(el) {
  return !isNil(el.content);
}
function isFunction$5(value) {
  return checkType(value, "function");
}
function isBoolean$2(value) {
  return checkType(value, "boolean");
}
function isObject$4(value) {
  return !isNil(value) && value.constructor === Object;
}
function isNil(value) {
  return value === null || value === void 0;
}
var udomdiff = (a2, b, get2, before) => {
  const bLength = b.length;
  let aEnd = a2.length;
  let bEnd = bLength;
  let aStart = 0;
  let bStart = 0;
  let map = null;
  while (aStart < aEnd || bStart < bEnd) {
    if (aEnd === aStart) {
      const node = bEnd < bLength ? bStart ? get2(b[bStart - 1], -0).nextSibling : get2(b[bEnd - bStart], 0) : before;
      while (bStart < bEnd)
        insertBefore$2(get2(b[bStart++], 1), node);
    } else if (bEnd === bStart) {
      while (aStart < aEnd) {
        if (!map || !map.has(a2[aStart]))
          removeChild(get2(a2[aStart], -1));
        aStart++;
      }
    } else if (a2[aStart] === b[bStart]) {
      aStart++;
      bStart++;
    } else if (a2[aEnd - 1] === b[bEnd - 1]) {
      aEnd--;
      bEnd--;
    } else if (a2[aStart] === b[bEnd - 1] && b[bStart] === a2[aEnd - 1]) {
      const node = get2(a2[--aEnd], -1).nextSibling;
      insertBefore$2(get2(b[bStart++], 1), get2(a2[aStart++], -1).nextSibling);
      insertBefore$2(get2(b[--bEnd], 1), node);
      a2[aEnd] = b[bEnd];
    } else {
      if (!map) {
        map = new Map();
        let i2 = bStart;
        while (i2 < bEnd)
          map.set(b[i2], i2++);
      }
      if (map.has(a2[aStart])) {
        const index = map.get(a2[aStart]);
        if (bStart < index && index < bEnd) {
          let i2 = aStart;
          let sequence = 1;
          while (++i2 < aEnd && i2 < bEnd && map.get(a2[i2]) === index + sequence)
            sequence++;
          if (sequence > index - bStart) {
            const node = get2(a2[aStart], 0);
            while (bStart < index)
              insertBefore$2(get2(b[bStart++], 1), node);
          } else {
            replaceChild(get2(b[bStart++], 1), get2(a2[aStart++], -1));
          }
        } else
          aStart++;
      } else
        removeChild(get2(a2[aStart++], -1));
    }
  }
  return b;
};
const UNMOUNT_SCOPE = Symbol("unmount");
const EachBinding = {
  nodes: [],
  mount(scope, parentScope) {
    return this.update(scope, parentScope);
  },
  update(scope, parentScope) {
    const {
      placeholder,
      nodes,
      childrenMap
    } = this;
    const collection = scope === UNMOUNT_SCOPE ? null : this.evaluate(scope);
    const items = collection ? Array.from(collection) : [];
    const {
      newChildrenMap,
      batches,
      futureNodes
    } = createPatch(items, scope, parentScope, this);
    udomdiff(nodes, futureNodes, patch(Array.from(childrenMap.values()), parentScope), placeholder);
    batches.forEach((fn2) => fn2());
    this.childrenMap = newChildrenMap;
    this.nodes = futureNodes;
    markEdgeNodes(this.nodes);
    return this;
  },
  unmount(scope, parentScope) {
    this.update(UNMOUNT_SCOPE, parentScope);
    return this;
  }
};
function patch(redundant, parentScope) {
  return (item, info) => {
    if (info < 0) {
      const element = redundant[redundant.length - 1];
      if (element) {
        const {
          template: template2,
          nodes,
          context
        } = element;
        nodes.pop();
        if (nodes.length === 0) {
          redundant.pop();
          template2.unmount(context, parentScope, null);
        }
      }
    }
    return item;
  };
}
function mustFilterItem(condition, context) {
  return condition ? Boolean(condition(context)) === false : false;
}
function extendScope(scope, _ref) {
  let {
    itemName,
    indexName,
    index,
    item
  } = _ref;
  scope[itemName] = item;
  if (indexName)
    scope[indexName] = index;
  return scope;
}
function markEdgeNodes(nodes) {
  const first = nodes[0];
  const last2 = nodes[nodes.length - 1];
  if (first)
    first[HEAD_SYMBOL] = true;
  if (last2)
    last2[TAIL_SYMBOL] = true;
}
function createPatch(items, scope, parentScope, binding) {
  const {
    condition,
    template: template2,
    childrenMap,
    itemName,
    getKey,
    indexName,
    root,
    isTemplateTag
  } = binding;
  const newChildrenMap = new Map();
  const batches = [];
  const futureNodes = [];
  items.forEach((item, index) => {
    const context = extendScope(Object.create(scope), {
      itemName,
      indexName,
      index,
      item
    });
    const key = getKey ? getKey(context) : index;
    const oldItem = childrenMap.get(key);
    const nodes = [];
    if (mustFilterItem(condition, context)) {
      return;
    }
    const mustMount = !oldItem;
    const componentTemplate = oldItem ? oldItem.template : template2.clone();
    const el = componentTemplate.el || root.cloneNode();
    const meta = isTemplateTag && mustMount ? createTemplateMeta(componentTemplate) : componentTemplate.meta;
    if (mustMount) {
      batches.push(() => componentTemplate.mount(el, context, parentScope, meta));
    } else {
      batches.push(() => componentTemplate.update(context, parentScope));
    }
    if (isTemplateTag) {
      nodes.push(...mustMount ? meta.children : getFragmentChildren(meta));
    } else {
      nodes.push(el);
    }
    childrenMap.delete(key);
    futureNodes.push(...nodes);
    newChildrenMap.set(key, {
      nodes,
      template: componentTemplate,
      context,
      index
    });
  });
  return {
    newChildrenMap,
    batches,
    futureNodes
  };
}
function create$6(node, _ref2) {
  let {
    evaluate,
    condition,
    itemName,
    indexName,
    getKey,
    template: template2
  } = _ref2;
  const placeholder = document.createTextNode("");
  const root = node.cloneNode();
  insertBefore$2(placeholder, node);
  removeChild(node);
  return Object.assign({}, EachBinding, {
    childrenMap: new Map(),
    node,
    root,
    condition,
    evaluate,
    isTemplateTag: isTemplate(root),
    template: template2.createDOM(node),
    getKey,
    indexName,
    itemName,
    placeholder
  });
}
const IfBinding = {
  mount(scope, parentScope) {
    return this.update(scope, parentScope);
  },
  update(scope, parentScope) {
    const value = !!this.evaluate(scope);
    const mustMount = !this.value && value;
    const mustUnmount = this.value && !value;
    const mount2 = () => {
      const pristine = this.node.cloneNode();
      insertBefore$2(pristine, this.placeholder);
      this.template = this.template.clone();
      this.template.mount(pristine, scope, parentScope);
    };
    switch (true) {
      case mustMount:
        mount2();
        break;
      case mustUnmount:
        this.unmount(scope);
        break;
      default:
        if (value)
          this.template.update(scope, parentScope);
    }
    this.value = value;
    return this;
  },
  unmount(scope, parentScope) {
    this.template.unmount(scope, parentScope, true);
    return this;
  }
};
function create$5(node, _ref) {
  let {
    evaluate,
    template: template2
  } = _ref;
  const placeholder = document.createTextNode("");
  insertBefore$2(placeholder, node);
  removeChild(node);
  return Object.assign({}, IfBinding, {
    node,
    evaluate,
    placeholder,
    template: template2.createDOM(node)
  });
}
function panic(message) {
  throw new Error(message);
}
function memoize(fn2) {
  const cache = new Map();
  const cached = (val) => {
    return cache.has(val) ? cache.get(val) : cache.set(val, fn2.call(this, val)) && cache.get(val);
  };
  cached.cache = cache;
  return cached;
}
function evaluateAttributeExpressions(attributes) {
  return attributes.reduce((acc, attribute) => {
    const {
      value,
      type
    } = attribute;
    switch (true) {
      case (!attribute.name && type === ATTRIBUTE):
        return Object.assign({}, acc, value);
      case type === VALUE:
        acc.value = attribute.value;
        break;
      default:
        acc[dashToCamelCase(attribute.name)] = attribute.value;
    }
    return acc;
  }, {});
}
const ElementProto = typeof Element === "undefined" ? {} : Element.prototype;
const isNativeHtmlProperty = memoize((name2) => ElementProto.hasOwnProperty(name2));
function setAllAttributes(node, attributes) {
  Object.entries(attributes).forEach((_ref) => {
    let [name2, value] = _ref;
    return attributeExpression(node, {
      name: name2
    }, value);
  });
}
function removeAllAttributes(node, newAttributes, oldAttributes) {
  const newKeys = newAttributes ? Object.keys(newAttributes) : [];
  Object.keys(oldAttributes).filter((name2) => !newKeys.includes(name2)).forEach((attribute) => node.removeAttribute(attribute));
}
function canRenderAttribute(value) {
  return value === true || ["string", "number"].includes(typeof value);
}
function shouldRemoveAttribute(value) {
  return isNil(value) || value === false || value === "";
}
function attributeExpression(node, _ref2, value, oldValue) {
  let {
    name: name2
  } = _ref2;
  if (!name2) {
    if (oldValue) {
      removeAllAttributes(node, value, oldValue);
    }
    if (value) {
      setAllAttributes(node, value);
    }
    return;
  }
  if (!isNativeHtmlProperty(name2) && (isBoolean$2(value) || isObject$4(value) || isFunction$5(value))) {
    node[name2] = value;
  }
  if (shouldRemoveAttribute(value)) {
    node.removeAttribute(name2);
  } else if (canRenderAttribute(value)) {
    node.setAttribute(name2, normalizeValue(name2, value));
  }
}
function normalizeValue(name2, value) {
  if (value === true)
    return name2;
  return value;
}
const RE_EVENTS_PREFIX = /^on/;
const getCallbackAndOptions = (value) => Array.isArray(value) ? value : [value, false];
const EventListener = {
  handleEvent(event) {
    this[event.type](event);
  }
};
const ListenersWeakMap = new WeakMap();
const createListener = (node) => {
  const listener = Object.create(EventListener);
  ListenersWeakMap.set(node, listener);
  return listener;
};
function eventExpression(node, _ref, value) {
  let {
    name: name2
  } = _ref;
  const normalizedEventName = name2.replace(RE_EVENTS_PREFIX, "");
  const eventListener = ListenersWeakMap.get(node) || createListener(node);
  const [callback, options] = getCallbackAndOptions(value);
  const handler = eventListener[normalizedEventName];
  const mustRemoveEvent = handler && !callback;
  const mustAddEvent = callback && !handler;
  if (mustRemoveEvent) {
    node.removeEventListener(normalizedEventName, eventListener);
  }
  if (mustAddEvent) {
    node.addEventListener(normalizedEventName, eventListener, options);
  }
  eventListener[normalizedEventName] = callback;
}
function normalizeStringValue(value) {
  return isNil(value) ? "" : value;
}
const getTextNode = (node, childNodeIndex) => {
  const target = node.childNodes[childNodeIndex];
  if (target.nodeType === Node.COMMENT_NODE) {
    const textNode = document.createTextNode("");
    node.replaceChild(textNode, target);
    return textNode;
  }
  return target;
};
function textExpression(node, data, value) {
  node.data = normalizeStringValue(value);
}
function valueExpression(node, expression, value) {
  node.value = normalizeStringValue(value);
}
var expressions = {
  [ATTRIBUTE]: attributeExpression,
  [EVENT]: eventExpression,
  [TEXT]: textExpression,
  [VALUE]: valueExpression
};
const Expression = {
  mount(scope) {
    this.value = this.evaluate(scope);
    apply(this, this.value);
    return this;
  },
  update(scope) {
    const value = this.evaluate(scope);
    if (this.value !== value) {
      apply(this, value);
      this.value = value;
    }
    return this;
  },
  unmount() {
    if (this.type === EVENT)
      apply(this, null);
    return this;
  }
};
function apply(expression, value) {
  return expressions[expression.type](expression.node, expression, value, expression.value);
}
function create$4(node, data) {
  return Object.assign({}, Expression, data, {
    node: data.type === TEXT ? getTextNode(node, data.childNodeIndex) : node
  });
}
function flattenCollectionMethods(collection, methods, context) {
  return methods.reduce((acc, method) => {
    return Object.assign({}, acc, {
      [method]: (scope) => {
        return collection.map((item) => item[method](scope)) && context;
      }
    });
  }, {});
}
function create$3(node, _ref) {
  let {
    expressions: expressions2
  } = _ref;
  return Object.assign({}, flattenCollectionMethods(expressions2.map((expression) => create$4(node, expression)), ["mount", "update", "unmount"]));
}
function extendParentScope(attributes, scope, parentScope) {
  if (!attributes || !attributes.length)
    return parentScope;
  const expressions2 = attributes.map((attr) => Object.assign({}, attr, {
    value: attr.evaluate(scope)
  }));
  return Object.assign(Object.create(parentScope || null), evaluateAttributeExpressions(expressions2));
}
const getRealParent = (scope, parentScope) => scope[PARENT_KEY_SYMBOL] || parentScope;
const SlotBinding = {
  attributes: [],
  getTemplateScope(scope, parentScope) {
    return extendParentScope(this.attributes, scope, parentScope);
  },
  mount(scope, parentScope) {
    const templateData = scope.slots ? scope.slots.find((_ref) => {
      let {
        id: id2
      } = _ref;
      return id2 === this.name;
    }) : false;
    const {
      parentNode
    } = this.node;
    const realParent = getRealParent(scope, parentScope);
    this.template = templateData && create(templateData.html, templateData.bindings).createDOM(parentNode);
    if (this.template) {
      this.template.mount(this.node, this.getTemplateScope(scope, realParent), realParent);
      this.template.children = Array.from(this.node.childNodes);
      moveSlotInnerContent(this.node);
    }
    removeChild(this.node);
    return this;
  },
  update(scope, parentScope) {
    if (this.template) {
      const realParent = getRealParent(scope, parentScope);
      this.template.update(this.getTemplateScope(scope, realParent), realParent);
    }
    return this;
  },
  unmount(scope, parentScope, mustRemoveRoot) {
    if (this.template) {
      this.template.unmount(this.getTemplateScope(scope, parentScope), null, mustRemoveRoot);
    }
    return this;
  }
};
function moveSlotInnerContent(slot) {
  const child = slot && slot.firstChild;
  if (!child)
    return;
  insertBefore$2(child, slot);
  moveSlotInnerContent(slot);
}
function createSlot(node, _ref2) {
  let {
    name: name2,
    attributes
  } = _ref2;
  return Object.assign({}, SlotBinding, {
    attributes,
    node,
    name: name2
  });
}
function getTag(component, slots, attributes) {
  if (slots === void 0) {
    slots = [];
  }
  if (attributes === void 0) {
    attributes = [];
  }
  if (component) {
    return component({
      slots,
      attributes
    });
  }
  return create(slotsToMarkup(slots), [...slotBindings(slots), {
    expressions: attributes.map((attr) => {
      return Object.assign({
        type: ATTRIBUTE
      }, attr);
    })
  }]);
}
function slotBindings(slots) {
  return slots.reduce((acc, _ref) => {
    let {
      bindings: bindings2
    } = _ref;
    return acc.concat(bindings2);
  }, []);
}
function slotsToMarkup(slots) {
  return slots.reduce((acc, slot) => {
    return acc + slot.html;
  }, "");
}
const TagBinding = {
  mount(scope) {
    return this.update(scope);
  },
  update(scope, parentScope) {
    const name2 = this.evaluate(scope);
    if (name2 && name2 === this.name) {
      this.tag.update(scope);
    } else {
      this.unmount(scope, parentScope, true);
      this.name = name2;
      this.tag = getTag(this.getComponent(name2), this.slots, this.attributes);
      this.tag.mount(this.node, scope);
    }
    return this;
  },
  unmount(scope, parentScope, keepRootTag) {
    if (this.tag) {
      this.tag.unmount(keepRootTag);
    }
    return this;
  }
};
function create$2(node, _ref2) {
  let {
    evaluate,
    getComponent,
    slots,
    attributes
  } = _ref2;
  return Object.assign({}, TagBinding, {
    node,
    evaluate,
    slots,
    attributes,
    getComponent
  });
}
var bindings = {
  [IF]: create$5,
  [SIMPLE]: create$3,
  [EACH]: create$6,
  [TAG]: create$2,
  [SLOT]: createSlot
};
function fixTextExpressionsOffset(expressions2, textExpressionsOffset) {
  return expressions2.map((e2) => e2.type === TEXT ? Object.assign({}, e2, {
    childNodeIndex: e2.childNodeIndex + textExpressionsOffset
  }) : e2);
}
function create$1(root, binding, templateTagOffset) {
  const {
    selector,
    type,
    redundantAttribute,
    expressions: expressions2
  } = binding;
  const node = selector ? root.querySelector(selector) : root;
  if (redundantAttribute)
    node.removeAttribute(redundantAttribute);
  const bindingExpressions = expressions2 || [];
  return (bindings[type] || bindings[SIMPLE])(node, Object.assign({}, binding, {
    expressions: templateTagOffset && !selector ? fixTextExpressionsOffset(bindingExpressions, templateTagOffset) : bindingExpressions
  }));
}
function createHTMLTree(html2, root) {
  const template2 = isTemplate(root) ? root : document.createElement("template");
  template2.innerHTML = html2;
  return template2.content;
}
function createSVGTree(html2, container) {
  const svgNode = container.ownerDocument.importNode(new window.DOMParser().parseFromString(`<svg xmlns="http://www.w3.org/2000/svg">${html2}</svg>`, "application/xml").documentElement, true);
  return svgNode;
}
function createDOMTree(root, html2) {
  if (isSvg(root))
    return createSVGTree(html2, root);
  return createHTMLTree(html2, root);
}
function injectDOM(el, dom) {
  switch (true) {
    case isSvg(el):
      moveChildren(dom, el);
      break;
    case isTemplate(el):
      el.parentNode.replaceChild(dom, el);
      break;
    default:
      el.appendChild(dom);
  }
}
function createTemplateDOM(el, html2) {
  return html2 && (typeof html2 === "string" ? createDOMTree(el, html2) : html2);
}
const TemplateChunk = Object.freeze({
  createDOM(el) {
    this.dom = this.dom || createTemplateDOM(el, this.html);
    return this;
  },
  mount(el, scope, parentScope, meta) {
    if (meta === void 0) {
      meta = {};
    }
    if (!el)
      throw new Error("Please provide DOM node to mount properly your template");
    if (this.el)
      this.unmount(scope);
    const {
      fragment,
      children,
      avoidDOMInjection
    } = meta;
    const {
      parentNode
    } = children ? children[0] : el;
    const isTemplateTag = isTemplate(el);
    const templateTagOffset = isTemplateTag ? Math.max(Array.from(parentNode.childNodes).indexOf(el), 0) : null;
    this.isTemplateTag = isTemplateTag;
    this.createDOM(el);
    if (this.dom) {
      this.fragment = fragment || this.dom.cloneNode(true);
    }
    this.el = this.isTemplateTag ? parentNode : el;
    this.children = this.isTemplateTag ? children || Array.from(this.fragment.childNodes) : null;
    if (!avoidDOMInjection && this.fragment)
      injectDOM(el, this.fragment);
    this.bindings = this.bindingsData.map((binding) => create$1(this.el, binding, templateTagOffset));
    this.bindings.forEach((b) => b.mount(scope, parentScope));
    this.meta = meta;
    return this;
  },
  update(scope, parentScope) {
    this.bindings.forEach((b) => b.update(scope, parentScope));
    return this;
  },
  unmount(scope, parentScope, mustRemoveRoot) {
    if (this.el) {
      this.bindings.forEach((b) => b.unmount(scope, parentScope, mustRemoveRoot));
      switch (true) {
        case this.el[IS_PURE_SYMBOL]:
          break;
        case (this.children && mustRemoveRoot !== null):
          clearChildren(this.children);
          break;
        case mustRemoveRoot === true:
          removeChild(this.el);
          break;
        case mustRemoveRoot !== null:
          cleanNode(this.el);
          break;
      }
      this.el = null;
    }
    return this;
  },
  clone() {
    return Object.assign({}, this, {
      meta: {},
      el: null
    });
  }
});
function create(html2, bindings2) {
  if (bindings2 === void 0) {
    bindings2 = [];
  }
  return Object.assign({}, TemplateChunk, {
    html: html2,
    bindingsData: bindings2
  });
}
function noop$1() {
  return this;
}
function autobindMethods(source3, methods) {
  methods.forEach((method) => {
    source3[method] = source3[method].bind(source3);
  });
  return source3;
}
function callOrAssign(source3) {
  return isFunction$5(source3) ? source3.prototype && source3.prototype.constructor ? new source3() : source3() : source3;
}
function defineProperty(source3, key, value, options) {
  if (options === void 0) {
    options = {};
  }
  Object.defineProperty(source3, key, Object.assign({
    value,
    enumerable: false,
    writable: false,
    configurable: true
  }, options));
  return source3;
}
function defineProperties(source3, properties2, options) {
  Object.entries(properties2).forEach((_ref) => {
    let [key, value] = _ref;
    defineProperty(source3, key, value, options);
  });
  return source3;
}
function defineDefaults(source3, defaults2) {
  Object.entries(defaults2).forEach((_ref2) => {
    let [key, value] = _ref2;
    if (!source3[key])
      source3[key] = value;
  });
  return source3;
}
function domToArray(els) {
  if (!Array.isArray(els)) {
    if (/^\[object (HTMLCollection|NodeList|Object)\]$/.test(Object.prototype.toString.call(els)) && typeof els.length === "number")
      return Array.from(els);
    else
      return [els];
  }
  return els;
}
function $$9(selector, ctx) {
  return domToArray(typeof selector === "string" ? (ctx || document).querySelectorAll(selector) : selector);
}
const normalize = (values) => values.length === 1 ? values[0] : values;
function parseNodes(els, name2, method) {
  const names = typeof name2 === "string" ? [name2] : name2;
  return normalize(domToArray(els).map((el) => {
    return normalize(names.map((n2) => el[method](n2)));
  }));
}
function set$1(els, name2, value) {
  const attrs = typeof name2 === "object" ? name2 : {
    [name2]: value
  };
  const props = Object.keys(attrs);
  domToArray(els).forEach((el) => {
    props.forEach((prop) => el.setAttribute(prop, attrs[prop]));
  });
  return els;
}
function get$1(els, name2) {
  return parseNodes(els, name2, "getAttribute");
}
const CSS_BY_NAME = new Map();
const STYLE_NODE_SELECTOR = "style[riot]";
const getStyleNode = ((style) => {
  return () => {
    if (style)
      return style;
    style = $$9(STYLE_NODE_SELECTOR)[0] || document.createElement("style");
    set$1(style, "type", "text/css");
    if (!style.parentNode)
      document.head.appendChild(style);
    return style;
  };
})();
var cssManager = {
  CSS_BY_NAME,
  add(name2, css2) {
    if (!CSS_BY_NAME.has(name2)) {
      CSS_BY_NAME.set(name2, css2);
      this.inject();
    }
    return this;
  },
  inject() {
    getStyleNode().innerHTML = [...CSS_BY_NAME.values()].join("\n");
    return this;
  },
  remove(name2) {
    if (CSS_BY_NAME.has(name2)) {
      CSS_BY_NAME.delete(name2);
      this.inject();
    }
    return this;
  }
};
function curry(fn2) {
  for (var _len = arguments.length, acc = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    acc[_key - 1] = arguments[_key];
  }
  return function() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    args = [...acc, ...args];
    return args.length < fn2.length ? curry(fn2, ...args) : fn2(...args);
  };
}
function getName(element) {
  return get$1(element, IS_DIRECTIVE) || element.tagName.toLowerCase();
}
const COMPONENT_CORE_HELPERS = Object.freeze({
  $(selector) {
    return $$9(selector, this.root)[0];
  },
  $$(selector) {
    return $$9(selector, this.root);
  }
});
const PURE_COMPONENT_API = Object.freeze({
  [MOUNT_METHOD_KEY]: noop$1,
  [UPDATE_METHOD_KEY]: noop$1,
  [UNMOUNT_METHOD_KEY]: noop$1
});
const COMPONENT_LIFECYCLE_METHODS = Object.freeze({
  [SHOULD_UPDATE_KEY]: noop$1,
  [ON_BEFORE_MOUNT_KEY]: noop$1,
  [ON_MOUNTED_KEY]: noop$1,
  [ON_BEFORE_UPDATE_KEY]: noop$1,
  [ON_UPDATED_KEY]: noop$1,
  [ON_BEFORE_UNMOUNT_KEY]: noop$1,
  [ON_UNMOUNTED_KEY]: noop$1
});
const MOCKED_TEMPLATE_INTERFACE = Object.assign({}, PURE_COMPONENT_API, {
  clone: noop$1,
  createDOM: noop$1
});
const memoizedCreateComponent = memoize(createComponent);
function evaluateInitialProps(element, initialProps) {
  if (initialProps === void 0) {
    initialProps = {};
  }
  return Object.assign({}, DOMattributesToObject(element), callOrAssign(initialProps));
}
const bindDOMNodeToComponentObject = (node, component) => node[DOM_COMPONENT_INSTANCE_PROPERTY$1] = component;
function createCoreAPIMethods(mapFunction) {
  return [MOUNT_METHOD_KEY, UPDATE_METHOD_KEY, UNMOUNT_METHOD_KEY].reduce((acc, method) => {
    acc[method] = mapFunction(method);
    return acc;
  }, {});
}
function componentTemplateFactory(template2, componentShell) {
  const components = createSubcomponents(componentShell.exports ? componentShell.exports.components : {});
  return template2(create, expressionTypes, bindingTypes, (name2) => {
    if (name2 === componentShell.name)
      return memoizedCreateComponent(componentShell);
    return components[name2] || COMPONENTS_IMPLEMENTATION_MAP$1.get(name2);
  });
}
function createPureComponent(pureFactoryFunction, _ref) {
  let {
    slots,
    attributes,
    props,
    css: css2,
    template: template2
  } = _ref;
  if (template2)
    panic("Pure components can not have html");
  if (css2)
    panic("Pure components do not have css");
  const component = defineDefaults(pureFactoryFunction({
    slots,
    attributes,
    props
  }), PURE_COMPONENT_API);
  return createCoreAPIMethods((method) => function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (method === MOUNT_METHOD_KEY) {
      const [el] = args;
      el[IS_PURE_SYMBOL] = true;
      bindDOMNodeToComponentObject(el, component);
    }
    component[method](...args);
    return component;
  });
}
function createComponent(componentShell) {
  const {
    css: css2,
    template: template2,
    exports,
    name: name2
  } = componentShell;
  const templateFn = template2 ? componentTemplateFactory(template2, componentShell) : MOCKED_TEMPLATE_INTERFACE;
  return (_ref2) => {
    let {
      slots,
      attributes,
      props
    } = _ref2;
    if (exports && exports[IS_PURE_SYMBOL])
      return createPureComponent(exports, {
        slots,
        attributes,
        props,
        css: css2,
        template: template2
      });
    const componentAPI = callOrAssign(exports) || {};
    const component = defineComponent({
      css: css2,
      template: templateFn,
      componentAPI,
      name: name2
    })({
      slots,
      attributes,
      props
    });
    return {
      mount(element, parentScope, state) {
        return component.mount(element, state, parentScope);
      },
      update(parentScope, state) {
        return component.update(state, parentScope);
      },
      unmount(preserveRoot) {
        return component.unmount(preserveRoot);
      }
    };
  };
}
function defineComponent(_ref3) {
  let {
    css: css2,
    template: template2,
    componentAPI,
    name: name2
  } = _ref3;
  if (css2 && name2)
    cssManager.add(name2, css2);
  return curry(enhanceComponentAPI)(defineProperties(defineDefaults(componentAPI, Object.assign({}, COMPONENT_LIFECYCLE_METHODS, {
    [PROPS_KEY]: {},
    [STATE_KEY]: {}
  })), Object.assign({
    [SLOTS_KEY]: null,
    [ROOT_KEY]: null
  }, COMPONENT_CORE_HELPERS, {
    name: name2,
    css: css2,
    template: template2
  })));
}
function createAttributeBindings(node, attributes) {
  if (attributes === void 0) {
    attributes = [];
  }
  const expressions2 = attributes.map((a2) => create$4(node, a2));
  const binding = {};
  return Object.assign(binding, Object.assign({
    expressions: expressions2
  }, createCoreAPIMethods((method) => (scope) => {
    expressions2.forEach((e2) => e2[method](scope));
    return binding;
  })));
}
function createSubcomponents(components) {
  if (components === void 0) {
    components = {};
  }
  return Object.entries(callOrAssign(components)).reduce((acc, _ref4) => {
    let [key, value] = _ref4;
    acc[camelToDashCase(key)] = createComponent(value);
    return acc;
  }, {});
}
function runPlugins(component) {
  return [...PLUGINS_SET$1].reduce((c2, fn2) => fn2(c2) || c2, component);
}
function computeState(oldState, newState) {
  return Object.assign({}, oldState, callOrAssign(newState));
}
function addCssHook(element, name2) {
  if (getName(element) !== name2) {
    set$1(element, IS_DIRECTIVE, name2);
  }
}
function enhanceComponentAPI(component, _ref5) {
  let {
    slots,
    attributes,
    props
  } = _ref5;
  return autobindMethods(runPlugins(defineProperties(isObject$4(component) ? Object.create(component) : component, {
    mount(element, state, parentScope) {
      if (state === void 0) {
        state = {};
      }
      this[PARENT_KEY_SYMBOL] = parentScope;
      this[ATTRIBUTES_KEY_SYMBOL] = createAttributeBindings(element, attributes).mount(parentScope);
      defineProperty(this, PROPS_KEY, Object.freeze(Object.assign({}, evaluateInitialProps(element, props), evaluateAttributeExpressions(this[ATTRIBUTES_KEY_SYMBOL].expressions))));
      this[STATE_KEY] = computeState(this[STATE_KEY], state);
      this[TEMPLATE_KEY_SYMBOL] = this.template.createDOM(element).clone();
      bindDOMNodeToComponentObject(element, this);
      component.name && addCssHook(element, component.name);
      defineProperty(this, ROOT_KEY, element);
      defineProperty(this, SLOTS_KEY, slots);
      this[ON_BEFORE_MOUNT_KEY](this[PROPS_KEY], this[STATE_KEY]);
      this[TEMPLATE_KEY_SYMBOL].mount(element, this, parentScope);
      this[ON_MOUNTED_KEY](this[PROPS_KEY], this[STATE_KEY]);
      return this;
    },
    update(state, parentScope) {
      if (state === void 0) {
        state = {};
      }
      if (parentScope) {
        this[PARENT_KEY_SYMBOL] = parentScope;
        this[ATTRIBUTES_KEY_SYMBOL].update(parentScope);
      }
      const newProps = evaluateAttributeExpressions(this[ATTRIBUTES_KEY_SYMBOL].expressions);
      if (this[SHOULD_UPDATE_KEY](newProps, this[PROPS_KEY]) === false)
        return;
      defineProperty(this, PROPS_KEY, Object.freeze(Object.assign({}, this[PROPS_KEY], newProps)));
      this[STATE_KEY] = computeState(this[STATE_KEY], state);
      this[ON_BEFORE_UPDATE_KEY](this[PROPS_KEY], this[STATE_KEY]);
      if (!this[IS_COMPONENT_UPDATING]) {
        this[IS_COMPONENT_UPDATING] = true;
        this[TEMPLATE_KEY_SYMBOL].update(this, this[PARENT_KEY_SYMBOL]);
      }
      this[ON_UPDATED_KEY](this[PROPS_KEY], this[STATE_KEY]);
      this[IS_COMPONENT_UPDATING] = false;
      return this;
    },
    unmount(preserveRoot) {
      this[ON_BEFORE_UNMOUNT_KEY](this[PROPS_KEY], this[STATE_KEY]);
      this[ATTRIBUTES_KEY_SYMBOL].unmount();
      this[TEMPLATE_KEY_SYMBOL].unmount(this, this[PARENT_KEY_SYMBOL], preserveRoot === null ? null : !preserveRoot);
      this[ON_UNMOUNTED_KEY](this[PROPS_KEY], this[STATE_KEY]);
      return this;
    }
  })), Object.keys(component).filter((prop) => isFunction$5(component[prop])));
}
function mountComponent(element, initialProps, componentName) {
  const name2 = componentName || getName(element);
  if (!COMPONENTS_IMPLEMENTATION_MAP$1.has(name2))
    panic(`The component named "${name2}" was never registered`);
  const component = COMPONENTS_IMPLEMENTATION_MAP$1.get(name2)({
    props: initialProps
  });
  return component.mount(element);
}
const {
  DOM_COMPONENT_INSTANCE_PROPERTY,
  COMPONENTS_IMPLEMENTATION_MAP,
  PLUGINS_SET
} = globals;
function register(name2, _ref) {
  let {
    css: css2,
    template: template2,
    exports
  } = _ref;
  if (COMPONENTS_IMPLEMENTATION_MAP.has(name2))
    panic(`The component "${name2}" was already registered`);
  COMPONENTS_IMPLEMENTATION_MAP.set(name2, createComponent({
    name: name2,
    css: css2,
    template: template2,
    exports
  }));
  return COMPONENTS_IMPLEMENTATION_MAP;
}
function mount(selector, initialProps, name2) {
  return $$9(selector).map((element) => mountComponent(element, initialProps, name2));
}
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x2) {
  return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
}
function getAugmentedNamespace(n2) {
  if (n2.__esModule)
    return n2;
  var a2 = Object.defineProperty({}, "__esModule", {value: true});
  Object.keys(n2).forEach(function(k2) {
    var d2 = Object.getOwnPropertyDescriptor(n2, k2);
    Object.defineProperty(a2, k2, d2.get ? d2 : {
      enumerable: true,
      get: function() {
        return n2[k2];
      }
    });
  });
  return a2;
}
var isClass = {exports: {}};
(function(module, exports) {
  (function(root) {
    const toString3 = Function.prototype.toString;
    function fnBody(fn2) {
      return toString3.call(fn2).replace(/^[^{]*{\s*/, "").replace(/\s*}[^}]*$/, "");
    }
    function isClass2(fn2) {
      if (typeof fn2 !== "function") {
        return false;
      }
      if (/^class[\s{]/.test(toString3.call(fn2))) {
        return true;
      }
      const body = fnBody(fn2);
      return /classCallCheck\(/.test(body) || /TypeError\("Cannot call a class as a function"\)/.test(body);
    }
    {
      if (module.exports) {
        exports = module.exports = isClass2;
      }
      exports.isClass = isClass2;
    }
  })();
})(isClass, isClass.exports);
var __isClass = isClass.exports;
function cls$1(cls2) {
  if (!Array.isArray(cls2))
    cls2 = [cls2];
  for (let i2 = 0; i2 < cls2.length; i2++) {
    if (!__isClass(cls2[i2]))
      return false;
  }
  return true;
}
const fn$5 = function(cls2, settings = {}) {
  const stack = {};
  if (!cls$1(cls2)) {
    cls2 = cls2.constructor;
  }
  if (settings.includeBaseClass === true) {
    stack[cls2.name] = cls2;
  }
  let baseClass = cls2;
  while (baseClass) {
    const newBaseClass = Object.getPrototypeOf(baseClass);
    if (newBaseClass && newBaseClass !== Object && newBaseClass.name) {
      stack[newBaseClass.name] = newBaseClass;
      baseClass = newBaseClass;
    } else {
      break;
    }
  }
  return stack;
};
function plainObject$1(object) {
  if (!object)
    return false;
  if (typeof object !== "object")
    return false;
  if (object.constructor && object.constructor.name !== "Object")
    return false;
  if (Object.prototype.toString.call(object) !== "[object Object]")
    return false;
  if (object !== Object(object))
    return false;
  return true;
}
function unique$1(array) {
  const a2 = array.concat();
  for (let i2 = 0; i2 < a2.length; ++i2) {
    for (let j2 = i2 + 1; j2 < a2.length; ++j2) {
      if (a2[i2] === a2[j2])
        a2.splice(j2--, 1);
    }
  }
  return a2;
}
var lodash_clone = {exports: {}};
(function(module, exports) {
  var LARGE_ARRAY_SIZE = 200;
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  var MAX_SAFE_INTEGER = 9007199254740991;
  var argsTag = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", promiseTag = "[object Promise]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", weakMapTag = "[object WeakMap]";
  var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reFlags = /\w*$/;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
  var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function("return this")();
  var freeExports = exports && !exports.nodeType && exports;
  var freeModule = freeExports && true && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  function addMapEntry(map, pair) {
    map.set(pair[0], pair[1]);
    return map;
  }
  function addSetEntry(set2, value) {
    set2.add(value);
    return set2;
  }
  function arrayEach(array, iteratee) {
    var index = -1, length = array ? array.length : 0;
    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }
  function arrayPush(array, values) {
    var index = -1, length = values.length, offset2 = array.length;
    while (++index < length) {
      array[offset2 + index] = values[index];
    }
    return array;
  }
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1, length = array ? array.length : 0;
    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }
  function baseTimes(n2, iteratee) {
    var index = -1, result = Array(n2);
    while (++index < n2) {
      result[index] = iteratee(index);
    }
    return result;
  }
  function getValue(object, key) {
    return object == null ? void 0 : object[key];
  }
  function isHostObject(value) {
    var result = false;
    if (value != null && typeof value.toString != "function") {
      try {
        result = !!(value + "");
      } catch (e2) {
      }
    }
    return result;
  }
  function mapToArray(map) {
    var index = -1, result = Array(map.size);
    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }
  function setToArray(set2) {
    var index = -1, result = Array(set2.size);
    set2.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }
  var arrayProto = Array.prototype, funcProto = Function.prototype, objectProto = Object.prototype;
  var coreJsData = root["__core-js_shared__"];
  var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
    return uid ? "Symbol(src)_1." + uid : "";
  }();
  var funcToString = funcProto.toString;
  var hasOwnProperty2 = objectProto.hasOwnProperty;
  var objectToString2 = objectProto.toString;
  var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
  var Buffer2 = moduleExports ? root.Buffer : void 0, Symbol2 = root.Symbol, Uint8Array2 = root.Uint8Array, getPrototype = overArg(Object.getPrototypeOf, Object), objectCreate = Object.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice;
  var nativeGetSymbols = Object.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0, nativeKeys = overArg(Object.keys, Object);
  var DataView2 = getNative(root, "DataView"), Map2 = getNative(root, "Map"), Promise2 = getNative(root, "Promise"), Set2 = getNative(root, "Set"), WeakMap2 = getNative(root, "WeakMap"), nativeCreate = getNative(Object, "create");
  var dataViewCtorString = toSource(DataView2), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
  var symbolProto = Symbol2 ? Symbol2.prototype : void 0, symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
  function Hash2(entries) {
    var index = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
  }
  function hashDelete(key) {
    return this.has(key) && delete this.__data__[key];
  }
  function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? void 0 : result;
    }
    return hasOwnProperty2.call(data, key) ? data[key] : void 0;
  }
  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== void 0 : hasOwnProperty2.call(data, key);
  }
  function hashSet(key, value) {
    var data = this.__data__;
    data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
    return this;
  }
  Hash2.prototype.clear = hashClear;
  Hash2.prototype["delete"] = hashDelete;
  Hash2.prototype.get = hashGet;
  Hash2.prototype.has = hashHas;
  Hash2.prototype.set = hashSet;
  function ListCache(entries) {
    var index = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function listCacheClear() {
    this.__data__ = [];
  }
  function listCacheDelete(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    return true;
  }
  function listCacheGet(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    return index < 0 ? void 0 : data[index][1];
  }
  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }
  function listCacheSet(key, value) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype["delete"] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;
  function MapCache(entries) {
    var index = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function mapCacheClear() {
    this.__data__ = {
      "hash": new Hash2(),
      "map": new (Map2 || ListCache)(),
      "string": new Hash2()
    };
  }
  function mapCacheDelete(key) {
    return getMapData(this, key)["delete"](key);
  }
  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }
  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }
  function mapCacheSet(key, value) {
    getMapData(this, key).set(key, value);
    return this;
  }
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype["delete"] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;
  function Stack(entries) {
    this.__data__ = new ListCache(entries);
  }
  function stackClear() {
    this.__data__ = new ListCache();
  }
  function stackDelete(key) {
    return this.__data__["delete"](key);
  }
  function stackGet(key) {
    return this.__data__.get(key);
  }
  function stackHas(key) {
    return this.__data__.has(key);
  }
  function stackSet(key, value) {
    var cache = this.__data__;
    if (cache instanceof ListCache) {
      var pairs = cache.__data__;
      if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
        pairs.push([key, value]);
        return this;
      }
      cache = this.__data__ = new MapCache(pairs);
    }
    cache.set(key, value);
    return this;
  }
  Stack.prototype.clear = stackClear;
  Stack.prototype["delete"] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;
  function arrayLikeKeys(value, inherited) {
    var result = isArray2(value) || isArguments(value) ? baseTimes(value.length, String) : [];
    var length = result.length, skipIndexes = !!length;
    for (var key in value) {
      if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
        result.push(key);
      }
    }
    return result;
  }
  function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty2.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
      object[key] = value;
    }
  }
  function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }
  function baseAssign(object, source3) {
    return object && copyObject(source3, keys(source3), object);
  }
  function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
    var result;
    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }
    if (result !== void 0) {
      return result;
    }
    if (!isObject2(value)) {
      return value;
    }
    var isArr = isArray2(value);
    if (isArr) {
      result = initCloneArray(value);
      if (!isDeep) {
        return copyArray(value, result);
      }
    } else {
      var tag2 = getTag2(value), isFunc = tag2 == funcTag || tag2 == genTag;
      if (isBuffer2(value)) {
        return cloneBuffer(value, isDeep);
      }
      if (tag2 == objectTag || tag2 == argsTag || isFunc && !object) {
        if (isHostObject(value)) {
          return object ? value : {};
        }
        result = initCloneObject(isFunc ? {} : value);
        if (!isDeep) {
          return copySymbols(value, baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag2]) {
          return object ? value : {};
        }
        result = initCloneByTag(value, tag2, baseClone, isDeep);
      }
    }
    stack || (stack = new Stack());
    var stacked = stack.get(value);
    if (stacked) {
      return stacked;
    }
    stack.set(value, result);
    if (!isArr) {
      var props = isFull ? getAllKeys(value) : keys(value);
    }
    arrayEach(props || value, function(subValue, key2) {
      if (props) {
        key2 = subValue;
        subValue = value[key2];
      }
      assignValue(result, key2, baseClone(subValue, isDeep, isFull, customizer, key2, value, stack));
    });
    return result;
  }
  function baseCreate(proto2) {
    return isObject2(proto2) ? objectCreate(proto2) : {};
  }
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray2(object) ? result : arrayPush(result, symbolsFunc(object));
  }
  function baseGetTag(value) {
    return objectToString2.call(value);
  }
  function baseIsNative(value) {
    if (!isObject2(value) || isMasked(value)) {
      return false;
    }
    var pattern = isFunction3(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }
  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty2.call(object, key) && key != "constructor") {
        result.push(key);
      }
    }
    return result;
  }
  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }
    var result = new buffer.constructor(buffer.length);
    buffer.copy(result);
    return result;
  }
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
    return result;
  }
  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }
  function cloneMap(map, isDeep, cloneFunc) {
    var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
    return arrayReduce(array, addMapEntry, new map.constructor());
  }
  function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }
  function cloneSet(set2, isDeep, cloneFunc) {
    var array = isDeep ? cloneFunc(setToArray(set2), true) : setToArray(set2);
    return arrayReduce(array, addSetEntry, new set2.constructor());
  }
  function cloneSymbol(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
  }
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }
  function copyArray(source3, array) {
    var index = -1, length = source3.length;
    array || (array = Array(length));
    while (++index < length) {
      array[index] = source3[index];
    }
    return array;
  }
  function copyObject(source3, props, object, customizer) {
    object || (object = {});
    var index = -1, length = props.length;
    while (++index < length) {
      var key = props[index];
      var newValue = customizer ? customizer(object[key], source3[key], key, object, source3) : void 0;
      assignValue(object, key, newValue === void 0 ? source3[key] : newValue);
    }
    return object;
  }
  function copySymbols(source3, object) {
    return copyObject(source3, getSymbols(source3), object);
  }
  function getAllKeys(object) {
    return baseGetAllKeys(object, keys, getSymbols);
  }
  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
  }
  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : void 0;
  }
  var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;
  var getTag2 = baseGetTag;
  if (DataView2 && getTag2(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag2(new Map2()) != mapTag || Promise2 && getTag2(Promise2.resolve()) != promiseTag || Set2 && getTag2(new Set2()) != setTag || WeakMap2 && getTag2(new WeakMap2()) != weakMapTag) {
    getTag2 = function(value) {
      var result = objectToString2.call(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : void 0;
      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag;
          case mapCtorString:
            return mapTag;
          case promiseCtorString:
            return promiseTag;
          case setCtorString:
            return setTag;
          case weakMapCtorString:
            return weakMapTag;
        }
      }
      return result;
    };
  }
  function initCloneArray(array) {
    var length = array.length, result = array.constructor(length);
    if (length && typeof array[0] == "string" && hasOwnProperty2.call(array, "index")) {
      result.index = array.index;
      result.input = array.input;
    }
    return result;
  }
  function initCloneObject(object) {
    return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
  }
  function initCloneByTag(object, tag2, cloneFunc, isDeep) {
    var Ctor = object.constructor;
    switch (tag2) {
      case arrayBufferTag:
        return cloneArrayBuffer(object);
      case boolTag:
      case dateTag:
        return new Ctor(+object);
      case dataViewTag:
        return cloneDataView(object, isDeep);
      case float32Tag:
      case float64Tag:
      case int8Tag:
      case int16Tag:
      case int32Tag:
      case uint8Tag:
      case uint8ClampedTag:
      case uint16Tag:
      case uint32Tag:
        return cloneTypedArray(object, isDeep);
      case mapTag:
        return cloneMap(object, isDeep, cloneFunc);
      case numberTag:
      case stringTag:
        return new Ctor(object);
      case regexpTag:
        return cloneRegExp(object);
      case setTag:
        return cloneSet(object, isDeep, cloneFunc);
      case symbolTag:
        return cloneSymbol(object);
    }
  }
  function isIndex(value, length) {
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
  }
  function isKeyable(value) {
    var type = typeof value;
    return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
  }
  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }
  function isPrototype(value) {
    var Ctor = value && value.constructor, proto2 = typeof Ctor == "function" && Ctor.prototype || objectProto;
    return value === proto2;
  }
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e2) {
      }
      try {
        return func + "";
      } catch (e2) {
      }
    }
    return "";
  }
  function clone2(value) {
    return baseClone(value, false, true);
  }
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }
  function isArguments(value) {
    return isArrayLikeObject(value) && hasOwnProperty2.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString2.call(value) == argsTag);
  }
  var isArray2 = Array.isArray;
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction3(value);
  }
  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }
  var isBuffer2 = nativeIsBuffer || stubFalse;
  function isFunction3(value) {
    var tag2 = isObject2(value) ? objectToString2.call(value) : "";
    return tag2 == funcTag || tag2 == genTag;
  }
  function isLength(value) {
    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }
  function isObject2(value) {
    var type = typeof value;
    return !!value && (type == "object" || type == "function");
  }
  function isObjectLike(value) {
    return !!value && typeof value == "object";
  }
  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }
  function stubArray() {
    return [];
  }
  function stubFalse() {
    return false;
  }
  module.exports = clone2;
})(lodash_clone, lodash_clone.exports);
var __clone = lodash_clone.exports;
var lodash_clonedeep = {exports: {}};
(function(module, exports) {
  var LARGE_ARRAY_SIZE = 200;
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  var MAX_SAFE_INTEGER = 9007199254740991;
  var argsTag = "[object Arguments]", arrayTag = "[object Array]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", objectTag = "[object Object]", promiseTag = "[object Promise]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", weakMapTag = "[object WeakMap]";
  var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reFlags = /\w*$/;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
  var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function("return this")();
  var freeExports = exports && !exports.nodeType && exports;
  var freeModule = freeExports && true && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  function addMapEntry(map, pair) {
    map.set(pair[0], pair[1]);
    return map;
  }
  function addSetEntry(set2, value) {
    set2.add(value);
    return set2;
  }
  function arrayEach(array, iteratee) {
    var index = -1, length = array ? array.length : 0;
    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }
  function arrayPush(array, values) {
    var index = -1, length = values.length, offset2 = array.length;
    while (++index < length) {
      array[offset2 + index] = values[index];
    }
    return array;
  }
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1, length = array ? array.length : 0;
    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }
  function baseTimes(n2, iteratee) {
    var index = -1, result = Array(n2);
    while (++index < n2) {
      result[index] = iteratee(index);
    }
    return result;
  }
  function getValue(object, key) {
    return object == null ? void 0 : object[key];
  }
  function isHostObject(value) {
    var result = false;
    if (value != null && typeof value.toString != "function") {
      try {
        result = !!(value + "");
      } catch (e2) {
      }
    }
    return result;
  }
  function mapToArray(map) {
    var index = -1, result = Array(map.size);
    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }
  function setToArray(set2) {
    var index = -1, result = Array(set2.size);
    set2.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }
  var arrayProto = Array.prototype, funcProto = Function.prototype, objectProto = Object.prototype;
  var coreJsData = root["__core-js_shared__"];
  var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
    return uid ? "Symbol(src)_1." + uid : "";
  }();
  var funcToString = funcProto.toString;
  var hasOwnProperty2 = objectProto.hasOwnProperty;
  var objectToString2 = objectProto.toString;
  var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
  var Buffer2 = moduleExports ? root.Buffer : void 0, Symbol2 = root.Symbol, Uint8Array2 = root.Uint8Array, getPrototype = overArg(Object.getPrototypeOf, Object), objectCreate = Object.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice;
  var nativeGetSymbols = Object.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0, nativeKeys = overArg(Object.keys, Object);
  var DataView2 = getNative(root, "DataView"), Map2 = getNative(root, "Map"), Promise2 = getNative(root, "Promise"), Set2 = getNative(root, "Set"), WeakMap2 = getNative(root, "WeakMap"), nativeCreate = getNative(Object, "create");
  var dataViewCtorString = toSource(DataView2), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
  var symbolProto = Symbol2 ? Symbol2.prototype : void 0, symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
  function Hash2(entries) {
    var index = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
  }
  function hashDelete(key) {
    return this.has(key) && delete this.__data__[key];
  }
  function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? void 0 : result;
    }
    return hasOwnProperty2.call(data, key) ? data[key] : void 0;
  }
  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== void 0 : hasOwnProperty2.call(data, key);
  }
  function hashSet(key, value) {
    var data = this.__data__;
    data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
    return this;
  }
  Hash2.prototype.clear = hashClear;
  Hash2.prototype["delete"] = hashDelete;
  Hash2.prototype.get = hashGet;
  Hash2.prototype.has = hashHas;
  Hash2.prototype.set = hashSet;
  function ListCache(entries) {
    var index = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function listCacheClear() {
    this.__data__ = [];
  }
  function listCacheDelete(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    return true;
  }
  function listCacheGet(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    return index < 0 ? void 0 : data[index][1];
  }
  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }
  function listCacheSet(key, value) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype["delete"] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;
  function MapCache(entries) {
    var index = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function mapCacheClear() {
    this.__data__ = {
      "hash": new Hash2(),
      "map": new (Map2 || ListCache)(),
      "string": new Hash2()
    };
  }
  function mapCacheDelete(key) {
    return getMapData(this, key)["delete"](key);
  }
  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }
  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }
  function mapCacheSet(key, value) {
    getMapData(this, key).set(key, value);
    return this;
  }
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype["delete"] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;
  function Stack(entries) {
    this.__data__ = new ListCache(entries);
  }
  function stackClear() {
    this.__data__ = new ListCache();
  }
  function stackDelete(key) {
    return this.__data__["delete"](key);
  }
  function stackGet(key) {
    return this.__data__.get(key);
  }
  function stackHas(key) {
    return this.__data__.has(key);
  }
  function stackSet(key, value) {
    var cache = this.__data__;
    if (cache instanceof ListCache) {
      var pairs = cache.__data__;
      if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
        pairs.push([key, value]);
        return this;
      }
      cache = this.__data__ = new MapCache(pairs);
    }
    cache.set(key, value);
    return this;
  }
  Stack.prototype.clear = stackClear;
  Stack.prototype["delete"] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;
  function arrayLikeKeys(value, inherited) {
    var result = isArray2(value) || isArguments(value) ? baseTimes(value.length, String) : [];
    var length = result.length, skipIndexes = !!length;
    for (var key in value) {
      if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
        result.push(key);
      }
    }
    return result;
  }
  function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty2.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
      object[key] = value;
    }
  }
  function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }
  function baseAssign(object, source3) {
    return object && copyObject(source3, keys(source3), object);
  }
  function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
    var result;
    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }
    if (result !== void 0) {
      return result;
    }
    if (!isObject2(value)) {
      return value;
    }
    var isArr = isArray2(value);
    if (isArr) {
      result = initCloneArray(value);
      if (!isDeep) {
        return copyArray(value, result);
      }
    } else {
      var tag2 = getTag2(value), isFunc = tag2 == funcTag || tag2 == genTag;
      if (isBuffer2(value)) {
        return cloneBuffer(value, isDeep);
      }
      if (tag2 == objectTag || tag2 == argsTag || isFunc && !object) {
        if (isHostObject(value)) {
          return object ? value : {};
        }
        result = initCloneObject(isFunc ? {} : value);
        if (!isDeep) {
          return copySymbols(value, baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag2]) {
          return object ? value : {};
        }
        result = initCloneByTag(value, tag2, baseClone, isDeep);
      }
    }
    stack || (stack = new Stack());
    var stacked = stack.get(value);
    if (stacked) {
      return stacked;
    }
    stack.set(value, result);
    if (!isArr) {
      var props = isFull ? getAllKeys(value) : keys(value);
    }
    arrayEach(props || value, function(subValue, key2) {
      if (props) {
        key2 = subValue;
        subValue = value[key2];
      }
      assignValue(result, key2, baseClone(subValue, isDeep, isFull, customizer, key2, value, stack));
    });
    return result;
  }
  function baseCreate(proto2) {
    return isObject2(proto2) ? objectCreate(proto2) : {};
  }
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray2(object) ? result : arrayPush(result, symbolsFunc(object));
  }
  function baseGetTag(value) {
    return objectToString2.call(value);
  }
  function baseIsNative(value) {
    if (!isObject2(value) || isMasked(value)) {
      return false;
    }
    var pattern = isFunction3(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }
  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty2.call(object, key) && key != "constructor") {
        result.push(key);
      }
    }
    return result;
  }
  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }
    var result = new buffer.constructor(buffer.length);
    buffer.copy(result);
    return result;
  }
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
    return result;
  }
  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }
  function cloneMap(map, isDeep, cloneFunc) {
    var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
    return arrayReduce(array, addMapEntry, new map.constructor());
  }
  function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }
  function cloneSet(set2, isDeep, cloneFunc) {
    var array = isDeep ? cloneFunc(setToArray(set2), true) : setToArray(set2);
    return arrayReduce(array, addSetEntry, new set2.constructor());
  }
  function cloneSymbol(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
  }
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }
  function copyArray(source3, array) {
    var index = -1, length = source3.length;
    array || (array = Array(length));
    while (++index < length) {
      array[index] = source3[index];
    }
    return array;
  }
  function copyObject(source3, props, object, customizer) {
    object || (object = {});
    var index = -1, length = props.length;
    while (++index < length) {
      var key = props[index];
      var newValue = customizer ? customizer(object[key], source3[key], key, object, source3) : void 0;
      assignValue(object, key, newValue === void 0 ? source3[key] : newValue);
    }
    return object;
  }
  function copySymbols(source3, object) {
    return copyObject(source3, getSymbols(source3), object);
  }
  function getAllKeys(object) {
    return baseGetAllKeys(object, keys, getSymbols);
  }
  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
  }
  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : void 0;
  }
  var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;
  var getTag2 = baseGetTag;
  if (DataView2 && getTag2(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag2(new Map2()) != mapTag || Promise2 && getTag2(Promise2.resolve()) != promiseTag || Set2 && getTag2(new Set2()) != setTag || WeakMap2 && getTag2(new WeakMap2()) != weakMapTag) {
    getTag2 = function(value) {
      var result = objectToString2.call(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : void 0;
      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag;
          case mapCtorString:
            return mapTag;
          case promiseCtorString:
            return promiseTag;
          case setCtorString:
            return setTag;
          case weakMapCtorString:
            return weakMapTag;
        }
      }
      return result;
    };
  }
  function initCloneArray(array) {
    var length = array.length, result = array.constructor(length);
    if (length && typeof array[0] == "string" && hasOwnProperty2.call(array, "index")) {
      result.index = array.index;
      result.input = array.input;
    }
    return result;
  }
  function initCloneObject(object) {
    return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
  }
  function initCloneByTag(object, tag2, cloneFunc, isDeep) {
    var Ctor = object.constructor;
    switch (tag2) {
      case arrayBufferTag:
        return cloneArrayBuffer(object);
      case boolTag:
      case dateTag:
        return new Ctor(+object);
      case dataViewTag:
        return cloneDataView(object, isDeep);
      case float32Tag:
      case float64Tag:
      case int8Tag:
      case int16Tag:
      case int32Tag:
      case uint8Tag:
      case uint8ClampedTag:
      case uint16Tag:
      case uint32Tag:
        return cloneTypedArray(object, isDeep);
      case mapTag:
        return cloneMap(object, isDeep, cloneFunc);
      case numberTag:
      case stringTag:
        return new Ctor(object);
      case regexpTag:
        return cloneRegExp(object);
      case setTag:
        return cloneSet(object, isDeep, cloneFunc);
      case symbolTag:
        return cloneSymbol(object);
    }
  }
  function isIndex(value, length) {
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
  }
  function isKeyable(value) {
    var type = typeof value;
    return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
  }
  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }
  function isPrototype(value) {
    var Ctor = value && value.constructor, proto2 = typeof Ctor == "function" && Ctor.prototype || objectProto;
    return value === proto2;
  }
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e2) {
      }
      try {
        return func + "";
      } catch (e2) {
      }
    }
    return "";
  }
  function cloneDeep(value) {
    return baseClone(value, true, true);
  }
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }
  function isArguments(value) {
    return isArrayLikeObject(value) && hasOwnProperty2.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString2.call(value) == argsTag);
  }
  var isArray2 = Array.isArray;
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction3(value);
  }
  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }
  var isBuffer2 = nativeIsBuffer || stubFalse;
  function isFunction3(value) {
    var tag2 = isObject2(value) ? objectToString2.call(value) : "";
    return tag2 == funcTag || tag2 == genTag;
  }
  function isLength(value) {
    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }
  function isObject2(value) {
    var type = typeof value;
    return !!value && (type == "object" || type == "function");
  }
  function isObjectLike(value) {
    return !!value && typeof value == "object";
  }
  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }
  function stubArray() {
    return [];
  }
  function stubFalse() {
    return false;
  }
  module.exports = cloneDeep;
})(lodash_clonedeep, lodash_clonedeep.exports);
var __deepClone = lodash_clonedeep.exports;
function clone$1(object, settings = {}) {
  settings = Object.assign({deep: false}, settings);
  if (settings.deep) {
    return __deepClone(object);
  }
  return __clone(object);
}
function deepAssign(referenceObj, ...objects) {
  const settings = {
    array: false,
    object: true,
    cloneChilds: true
  };
  function merge2(refObj, mixWithObj) {
    for (const key of Object.keys(mixWithObj)) {
      if (settings.array === true && Array.isArray(refObj[key]) && Array.isArray(mixWithObj[key])) {
        const newArray = unique$1([...refObj[key], ...mixWithObj[key]]);
        refObj[key] = newArray;
        continue;
      }
      if (settings.object === true && plainObject$1(refObj[key]) && plainObject$1(mixWithObj[key])) {
        refObj[key] = merge2(refObj[key], mixWithObj[key]);
        continue;
      }
      if (plainObject$1(mixWithObj[key]) && settings.cloneChilds) {
        refObj[key] = clone$1(mixWithObj[key], {
          deep: true
        });
      } else {
        refObj[key] = mixWithObj[key];
      }
    }
    return refObj;
  }
  const potentialSettingsObj = objects[objects.length - 1] || {};
  if (potentialSettingsObj.array && typeof potentialSettingsObj.array === "boolean" || potentialSettingsObj.object && typeof potentialSettingsObj.object === "boolean") {
    if (potentialSettingsObj.array !== void 0)
      settings.array = potentialSettingsObj.array;
    if (potentialSettingsObj.object !== void 0)
      settings.object = potentialSettingsObj.object;
    objects.pop();
  }
  for (let i2 = 0; i2 < objects.length; i2++) {
    const toMergeObj = objects[i2] || {};
    merge2(referenceObj, toMergeObj);
  }
  return referenceObj;
}
/*!
* copy-to - index.js
* Copyright(c) 2014 dead_horse <dead_horse@qq.com>
* MIT Licensed
*/
var slice$1 = Array.prototype.slice;
var copyTo = Copy;
function Copy(src, withAccess) {
  if (!(this instanceof Copy))
    return new Copy(src, withAccess);
  this.src = src;
  this._withAccess = withAccess;
}
Copy.prototype.withAccess = function(w2) {
  this._withAccess = w2 !== false;
  return this;
};
Copy.prototype.pick = function(keys) {
  if (!Array.isArray(keys)) {
    keys = slice$1.call(arguments);
  }
  if (keys.length) {
    this.keys = keys;
  }
  return this;
};
Copy.prototype.to = function(to) {
  to = to || {};
  if (!this.src)
    return to;
  var keys = this.keys || Object.keys(this.src);
  if (!this._withAccess) {
    for (var i2 = 0; i2 < keys.length; i2++) {
      key = keys[i2];
      if (to[key] !== void 0)
        continue;
      to[key] = this.src[key];
    }
    return to;
  }
  for (var i2 = 0; i2 < keys.length; i2++) {
    var key = keys[i2];
    if (!notDefined(to, key))
      continue;
    var getter = this.src.__lookupGetter__(key);
    var setter = this.src.__lookupSetter__(key);
    if (getter)
      to.__defineGetter__(key, getter);
    if (setter)
      to.__defineSetter__(key, setter);
    if (!getter && !setter) {
      to[key] = this.src[key];
    }
  }
  return to;
};
Copy.prototype.toCover = function(to) {
  var keys = this.keys || Object.keys(this.src);
  for (var i2 = 0; i2 < keys.length; i2++) {
    var key = keys[i2];
    delete to[key];
    var getter = this.src.__lookupGetter__(key);
    var setter = this.src.__lookupSetter__(key);
    if (getter)
      to.__defineGetter__(key, getter);
    if (setter)
      to.__defineSetter__(key, setter);
    if (!getter && !setter) {
      to[key] = this.src[key];
    }
  }
};
Copy.prototype.override = Copy.prototype.toCover;
Copy.prototype.and = function(obj) {
  var src = {};
  this.to(src);
  this.src = obj;
  this.to(src);
  this.src = src;
  return this;
};
function notDefined(obj, key) {
  return obj[key] === void 0 && obj.__lookupGetter__(key) === void 0 && obj.__lookupSetter__(key) === void 0;
}
function deepMerge$1(...args) {
  const settings = {
    array: false,
    object: true
  };
  function merge2(firstObj, secondObj) {
    const newObj = {};
    if (!firstObj && secondObj)
      return secondObj;
    if (!secondObj && firstObj)
      return firstObj;
    if (!firstObj && !secondObj)
      return {};
    copyTo(firstObj).override(newObj);
    for (const key of Object.keys(secondObj)) {
      if (settings.array === true && Array.isArray(firstObj[key]) && Array.isArray(secondObj[key])) {
        const newArray = unique$1([...firstObj[key], ...secondObj[key]]);
        newObj[key] = newArray;
        continue;
      } else if (settings.object === true && plainObject$1(firstObj[key]) && plainObject$1(secondObj[key])) {
        newObj[key] = merge2(firstObj[key], secondObj[key]);
        continue;
      }
      copyTo(secondObj).pick(key).toCover(newObj);
    }
    return newObj;
  }
  const potentialSettingsObj = args[args.length - 1] || {};
  if (potentialSettingsObj.array && typeof potentialSettingsObj.array === "boolean" || potentialSettingsObj.object && typeof potentialSettingsObj.object === "boolean") {
    if (potentialSettingsObj.array !== void 0)
      settings.array = potentialSettingsObj.array;
    if (potentialSettingsObj.object !== void 0)
      settings.object = potentialSettingsObj.object;
    args.pop();
  }
  let currentObj = {};
  for (let i2 = 0; i2 < args.length; i2++) {
    const toMergeObj = args[i2] || {};
    currentObj = merge2(currentObj, toMergeObj);
  }
  return currentObj;
}
function unquote(string, quotesToRemove = ['"', "'", "\u201D", "`"]) {
  string = string.trim();
  quotesToRemove.forEach((quote) => {
    if (string.substr(0, 1) === quote && string.substr(-1) === quote) {
      string = string.substr(1);
      string = string.substr(0, string.length - 1);
      return;
    }
  });
  return string;
}
function get(obj, path2, settings = {}) {
  settings = Object.assign({}, settings);
  if (obj[path2] !== void 0)
    return obj[path2];
  if (!path2 || path2 === "" || path2 === ".")
    return obj;
  path2 = path2.replace(/\[(\w+)\]/g, ".$1");
  path2 = path2.replace(/^\./, "");
  let potentialPaths = [path2.replace(/\?/gm, "")];
  const parts = path2.split(".");
  for (let i2 = parts.length - 1; i2 >= 0; i2--) {
    const part = parts[i2];
    if (part.match(/\?$/)) {
      const before = parts.slice(0, i2);
      const after = parts.slice(i2 + 1);
      potentialPaths.push([...before, ...after].join("."));
      potentialPaths.push([...before, ...after.filter((a2) => !a2.match(/\?$/))].join("."));
    }
  }
  potentialPaths = unique$1(potentialPaths.map((s2) => s2.replace(/\?/gm, "")));
  for (let i2 = 0; i2 < potentialPaths.length; i2++) {
    const path3 = potentialPaths[i2];
    const result = __get(obj, path3, settings);
    if (result !== void 0)
      return result;
  }
}
function __get(obj, path2, settings = {}) {
  settings = Object.assign({}, settings);
  if (obj[path2] !== void 0)
    return obj[path2];
  if (!path2 || path2 === "" || path2 === ".")
    return obj;
  const a2 = path2.split(/(?!\B"[^"]*)\.(?![^"]*"\B)/gm).map((p2) => unquote(p2));
  let o2 = obj;
  while (a2.length) {
    const n2 = a2.shift().replace(/\?$/, "");
    if (typeof o2 !== "object" || !(n2 in o2)) {
      return;
    }
    o2 = o2[n2];
  }
  return o2;
}
var md5$1 = {exports: {}};
var core$1 = {exports: {}};
var __viteBrowserExternal_crypto = new Proxy({}, {
  get() {
    throw new Error('Module "crypto" has been externalized for browser compatibility and cannot be accessed in client code.');
  }
});
var __viteBrowserExternal_crypto$1 = /* @__PURE__ */ Object.freeze({__proto__: null, [Symbol.toStringTag]: "Module", "default": __viteBrowserExternal_crypto});
var require$$0$1 = /* @__PURE__ */ getAugmentedNamespace(__viteBrowserExternal_crypto$1);
(function(module, exports) {
  (function(root, factory) {
    {
      module.exports = factory();
    }
  })(commonjsGlobal, function() {
    var CryptoJS = CryptoJS || function(Math2, undefined$1) {
      var crypto2;
      if (typeof window !== "undefined" && window.crypto) {
        crypto2 = window.crypto;
      }
      if (!crypto2 && typeof window !== "undefined" && window.msCrypto) {
        crypto2 = window.msCrypto;
      }
      if (!crypto2 && typeof commonjsGlobal !== "undefined" && commonjsGlobal.crypto) {
        crypto2 = commonjsGlobal.crypto;
      }
      if (!crypto2 && typeof require === "function") {
        try {
          crypto2 = require$$0$1;
        } catch (err) {
        }
      }
      var cryptoSecureRandomInt = function() {
        if (crypto2) {
          if (typeof crypto2.getRandomValues === "function") {
            try {
              return crypto2.getRandomValues(new Uint32Array(1))[0];
            } catch (err) {
            }
          }
          if (typeof crypto2.randomBytes === "function") {
            try {
              return crypto2.randomBytes(4).readInt32LE();
            } catch (err) {
            }
          }
        }
        throw new Error("Native crypto module could not be used to get secure random number.");
      };
      var create3 = Object.create || function() {
        function F() {
        }
        return function(obj) {
          var subtype;
          F.prototype = obj;
          subtype = new F();
          F.prototype = null;
          return subtype;
        };
      }();
      var C = {};
      var C_lib = C.lib = {};
      var Base = C_lib.Base = function() {
        return {
          extend: function(overrides) {
            var subtype = create3(this);
            if (overrides) {
              subtype.mixIn(overrides);
            }
            if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
              subtype.init = function() {
                subtype.$super.init.apply(this, arguments);
              };
            }
            subtype.init.prototype = subtype;
            subtype.$super = this;
            return subtype;
          },
          create: function() {
            var instance = this.extend();
            instance.init.apply(instance, arguments);
            return instance;
          },
          init: function() {
          },
          mixIn: function(properties2) {
            for (var propertyName in properties2) {
              if (properties2.hasOwnProperty(propertyName)) {
                this[propertyName] = properties2[propertyName];
              }
            }
            if (properties2.hasOwnProperty("toString")) {
              this.toString = properties2.toString;
            }
          },
          clone: function() {
            return this.init.prototype.extend(this);
          }
        };
      }();
      var WordArray = C_lib.WordArray = Base.extend({
        init: function(words, sigBytes) {
          words = this.words = words || [];
          if (sigBytes != undefined$1) {
            this.sigBytes = sigBytes;
          } else {
            this.sigBytes = words.length * 4;
          }
        },
        toString: function(encoder) {
          return (encoder || Hex).stringify(this);
        },
        concat: function(wordArray) {
          var thisWords = this.words;
          var thatWords = wordArray.words;
          var thisSigBytes = this.sigBytes;
          var thatSigBytes = wordArray.sigBytes;
          this.clamp();
          if (thisSigBytes % 4) {
            for (var i2 = 0; i2 < thatSigBytes; i2++) {
              var thatByte = thatWords[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
              thisWords[thisSigBytes + i2 >>> 2] |= thatByte << 24 - (thisSigBytes + i2) % 4 * 8;
            }
          } else {
            for (var i2 = 0; i2 < thatSigBytes; i2 += 4) {
              thisWords[thisSigBytes + i2 >>> 2] = thatWords[i2 >>> 2];
            }
          }
          this.sigBytes += thatSigBytes;
          return this;
        },
        clamp: function() {
          var words = this.words;
          var sigBytes = this.sigBytes;
          words[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
          words.length = Math2.ceil(sigBytes / 4);
        },
        clone: function() {
          var clone2 = Base.clone.call(this);
          clone2.words = this.words.slice(0);
          return clone2;
        },
        random: function(nBytes) {
          var words = [];
          for (var i2 = 0; i2 < nBytes; i2 += 4) {
            words.push(cryptoSecureRandomInt());
          }
          return new WordArray.init(words, nBytes);
        }
      });
      var C_enc = C.enc = {};
      var Hex = C_enc.Hex = {
        stringify: function(wordArray) {
          var words = wordArray.words;
          var sigBytes = wordArray.sigBytes;
          var hexChars = [];
          for (var i2 = 0; i2 < sigBytes; i2++) {
            var bite = words[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
            hexChars.push((bite >>> 4).toString(16));
            hexChars.push((bite & 15).toString(16));
          }
          return hexChars.join("");
        },
        parse: function(hexStr) {
          var hexStrLength = hexStr.length;
          var words = [];
          for (var i2 = 0; i2 < hexStrLength; i2 += 2) {
            words[i2 >>> 3] |= parseInt(hexStr.substr(i2, 2), 16) << 24 - i2 % 8 * 4;
          }
          return new WordArray.init(words, hexStrLength / 2);
        }
      };
      var Latin1 = C_enc.Latin1 = {
        stringify: function(wordArray) {
          var words = wordArray.words;
          var sigBytes = wordArray.sigBytes;
          var latin1Chars = [];
          for (var i2 = 0; i2 < sigBytes; i2++) {
            var bite = words[i2 >>> 2] >>> 24 - i2 % 4 * 8 & 255;
            latin1Chars.push(String.fromCharCode(bite));
          }
          return latin1Chars.join("");
        },
        parse: function(latin1Str) {
          var latin1StrLength = latin1Str.length;
          var words = [];
          for (var i2 = 0; i2 < latin1StrLength; i2++) {
            words[i2 >>> 2] |= (latin1Str.charCodeAt(i2) & 255) << 24 - i2 % 4 * 8;
          }
          return new WordArray.init(words, latin1StrLength);
        }
      };
      var Utf8 = C_enc.Utf8 = {
        stringify: function(wordArray) {
          try {
            return decodeURIComponent(escape(Latin1.stringify(wordArray)));
          } catch (e2) {
            throw new Error("Malformed UTF-8 data");
          }
        },
        parse: function(utf8Str) {
          return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
        }
      };
      var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
        reset: function() {
          this._data = new WordArray.init();
          this._nDataBytes = 0;
        },
        _append: function(data) {
          if (typeof data == "string") {
            data = Utf8.parse(data);
          }
          this._data.concat(data);
          this._nDataBytes += data.sigBytes;
        },
        _process: function(doFlush) {
          var processedWords;
          var data = this._data;
          var dataWords = data.words;
          var dataSigBytes = data.sigBytes;
          var blockSize = this.blockSize;
          var blockSizeBytes = blockSize * 4;
          var nBlocksReady = dataSigBytes / blockSizeBytes;
          if (doFlush) {
            nBlocksReady = Math2.ceil(nBlocksReady);
          } else {
            nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
          }
          var nWordsReady = nBlocksReady * blockSize;
          var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
          if (nWordsReady) {
            for (var offset2 = 0; offset2 < nWordsReady; offset2 += blockSize) {
              this._doProcessBlock(dataWords, offset2);
            }
            processedWords = dataWords.splice(0, nWordsReady);
            data.sigBytes -= nBytesReady;
          }
          return new WordArray.init(processedWords, nBytesReady);
        },
        clone: function() {
          var clone2 = Base.clone.call(this);
          clone2._data = this._data.clone();
          return clone2;
        },
        _minBufferSize: 0
      });
      C_lib.Hasher = BufferedBlockAlgorithm.extend({
        cfg: Base.extend(),
        init: function(cfg) {
          this.cfg = this.cfg.extend(cfg);
          this.reset();
        },
        reset: function() {
          BufferedBlockAlgorithm.reset.call(this);
          this._doReset();
        },
        update: function(messageUpdate) {
          this._append(messageUpdate);
          this._process();
          return this;
        },
        finalize: function(messageUpdate) {
          if (messageUpdate) {
            this._append(messageUpdate);
          }
          var hash = this._doFinalize();
          return hash;
        },
        blockSize: 512 / 32,
        _createHelper: function(hasher) {
          return function(message, cfg) {
            return new hasher.init(cfg).finalize(message);
          };
        },
        _createHmacHelper: function(hasher) {
          return function(message, key) {
            return new C_algo.HMAC.init(hasher, key).finalize(message);
          };
        }
      });
      var C_algo = C.algo = {};
      return C;
    }(Math);
    return CryptoJS;
  });
})(core$1);
(function(module, exports) {
  (function(root, factory) {
    {
      module.exports = factory(core$1.exports);
    }
  })(commonjsGlobal, function(CryptoJS) {
    (function(Math2) {
      var C = CryptoJS;
      var C_lib = C.lib;
      var WordArray = C_lib.WordArray;
      var Hasher = C_lib.Hasher;
      var C_algo = C.algo;
      var T = [];
      (function() {
        for (var i2 = 0; i2 < 64; i2++) {
          T[i2] = Math2.abs(Math2.sin(i2 + 1)) * 4294967296 | 0;
        }
      })();
      var MD5 = C_algo.MD5 = Hasher.extend({
        _doReset: function() {
          this._hash = new WordArray.init([
            1732584193,
            4023233417,
            2562383102,
            271733878
          ]);
        },
        _doProcessBlock: function(M2, offset2) {
          for (var i2 = 0; i2 < 16; i2++) {
            var offset_i = offset2 + i2;
            var M_offset_i = M2[offset_i];
            M2[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
          }
          var H = this._hash.words;
          var M_offset_0 = M2[offset2 + 0];
          var M_offset_1 = M2[offset2 + 1];
          var M_offset_2 = M2[offset2 + 2];
          var M_offset_3 = M2[offset2 + 3];
          var M_offset_4 = M2[offset2 + 4];
          var M_offset_5 = M2[offset2 + 5];
          var M_offset_6 = M2[offset2 + 6];
          var M_offset_7 = M2[offset2 + 7];
          var M_offset_8 = M2[offset2 + 8];
          var M_offset_9 = M2[offset2 + 9];
          var M_offset_10 = M2[offset2 + 10];
          var M_offset_11 = M2[offset2 + 11];
          var M_offset_12 = M2[offset2 + 12];
          var M_offset_13 = M2[offset2 + 13];
          var M_offset_14 = M2[offset2 + 14];
          var M_offset_15 = M2[offset2 + 15];
          var a2 = H[0];
          var b = H[1];
          var c2 = H[2];
          var d2 = H[3];
          a2 = FF(a2, b, c2, d2, M_offset_0, 7, T[0]);
          d2 = FF(d2, a2, b, c2, M_offset_1, 12, T[1]);
          c2 = FF(c2, d2, a2, b, M_offset_2, 17, T[2]);
          b = FF(b, c2, d2, a2, M_offset_3, 22, T[3]);
          a2 = FF(a2, b, c2, d2, M_offset_4, 7, T[4]);
          d2 = FF(d2, a2, b, c2, M_offset_5, 12, T[5]);
          c2 = FF(c2, d2, a2, b, M_offset_6, 17, T[6]);
          b = FF(b, c2, d2, a2, M_offset_7, 22, T[7]);
          a2 = FF(a2, b, c2, d2, M_offset_8, 7, T[8]);
          d2 = FF(d2, a2, b, c2, M_offset_9, 12, T[9]);
          c2 = FF(c2, d2, a2, b, M_offset_10, 17, T[10]);
          b = FF(b, c2, d2, a2, M_offset_11, 22, T[11]);
          a2 = FF(a2, b, c2, d2, M_offset_12, 7, T[12]);
          d2 = FF(d2, a2, b, c2, M_offset_13, 12, T[13]);
          c2 = FF(c2, d2, a2, b, M_offset_14, 17, T[14]);
          b = FF(b, c2, d2, a2, M_offset_15, 22, T[15]);
          a2 = GG(a2, b, c2, d2, M_offset_1, 5, T[16]);
          d2 = GG(d2, a2, b, c2, M_offset_6, 9, T[17]);
          c2 = GG(c2, d2, a2, b, M_offset_11, 14, T[18]);
          b = GG(b, c2, d2, a2, M_offset_0, 20, T[19]);
          a2 = GG(a2, b, c2, d2, M_offset_5, 5, T[20]);
          d2 = GG(d2, a2, b, c2, M_offset_10, 9, T[21]);
          c2 = GG(c2, d2, a2, b, M_offset_15, 14, T[22]);
          b = GG(b, c2, d2, a2, M_offset_4, 20, T[23]);
          a2 = GG(a2, b, c2, d2, M_offset_9, 5, T[24]);
          d2 = GG(d2, a2, b, c2, M_offset_14, 9, T[25]);
          c2 = GG(c2, d2, a2, b, M_offset_3, 14, T[26]);
          b = GG(b, c2, d2, a2, M_offset_8, 20, T[27]);
          a2 = GG(a2, b, c2, d2, M_offset_13, 5, T[28]);
          d2 = GG(d2, a2, b, c2, M_offset_2, 9, T[29]);
          c2 = GG(c2, d2, a2, b, M_offset_7, 14, T[30]);
          b = GG(b, c2, d2, a2, M_offset_12, 20, T[31]);
          a2 = HH(a2, b, c2, d2, M_offset_5, 4, T[32]);
          d2 = HH(d2, a2, b, c2, M_offset_8, 11, T[33]);
          c2 = HH(c2, d2, a2, b, M_offset_11, 16, T[34]);
          b = HH(b, c2, d2, a2, M_offset_14, 23, T[35]);
          a2 = HH(a2, b, c2, d2, M_offset_1, 4, T[36]);
          d2 = HH(d2, a2, b, c2, M_offset_4, 11, T[37]);
          c2 = HH(c2, d2, a2, b, M_offset_7, 16, T[38]);
          b = HH(b, c2, d2, a2, M_offset_10, 23, T[39]);
          a2 = HH(a2, b, c2, d2, M_offset_13, 4, T[40]);
          d2 = HH(d2, a2, b, c2, M_offset_0, 11, T[41]);
          c2 = HH(c2, d2, a2, b, M_offset_3, 16, T[42]);
          b = HH(b, c2, d2, a2, M_offset_6, 23, T[43]);
          a2 = HH(a2, b, c2, d2, M_offset_9, 4, T[44]);
          d2 = HH(d2, a2, b, c2, M_offset_12, 11, T[45]);
          c2 = HH(c2, d2, a2, b, M_offset_15, 16, T[46]);
          b = HH(b, c2, d2, a2, M_offset_2, 23, T[47]);
          a2 = II(a2, b, c2, d2, M_offset_0, 6, T[48]);
          d2 = II(d2, a2, b, c2, M_offset_7, 10, T[49]);
          c2 = II(c2, d2, a2, b, M_offset_14, 15, T[50]);
          b = II(b, c2, d2, a2, M_offset_5, 21, T[51]);
          a2 = II(a2, b, c2, d2, M_offset_12, 6, T[52]);
          d2 = II(d2, a2, b, c2, M_offset_3, 10, T[53]);
          c2 = II(c2, d2, a2, b, M_offset_10, 15, T[54]);
          b = II(b, c2, d2, a2, M_offset_1, 21, T[55]);
          a2 = II(a2, b, c2, d2, M_offset_8, 6, T[56]);
          d2 = II(d2, a2, b, c2, M_offset_15, 10, T[57]);
          c2 = II(c2, d2, a2, b, M_offset_6, 15, T[58]);
          b = II(b, c2, d2, a2, M_offset_13, 21, T[59]);
          a2 = II(a2, b, c2, d2, M_offset_4, 6, T[60]);
          d2 = II(d2, a2, b, c2, M_offset_11, 10, T[61]);
          c2 = II(c2, d2, a2, b, M_offset_2, 15, T[62]);
          b = II(b, c2, d2, a2, M_offset_9, 21, T[63]);
          H[0] = H[0] + a2 | 0;
          H[1] = H[1] + b | 0;
          H[2] = H[2] + c2 | 0;
          H[3] = H[3] + d2 | 0;
        },
        _doFinalize: function() {
          var data = this._data;
          var dataWords = data.words;
          var nBitsTotal = this._nDataBytes * 8;
          var nBitsLeft = data.sigBytes * 8;
          dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
          var nBitsTotalH = Math2.floor(nBitsTotal / 4294967296);
          var nBitsTotalL = nBitsTotal;
          dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 16711935 | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 4278255360;
          dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 16711935 | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 4278255360;
          data.sigBytes = (dataWords.length + 1) * 4;
          this._process();
          var hash = this._hash;
          var H = hash.words;
          for (var i2 = 0; i2 < 4; i2++) {
            var H_i = H[i2];
            H[i2] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
          }
          return hash;
        },
        clone: function() {
          var clone2 = Hasher.clone.call(this);
          clone2._hash = this._hash.clone();
          return clone2;
        }
      });
      function FF(a2, b, c2, d2, x2, s2, t) {
        var n2 = a2 + (b & c2 | ~b & d2) + x2 + t;
        return (n2 << s2 | n2 >>> 32 - s2) + b;
      }
      function GG(a2, b, c2, d2, x2, s2, t) {
        var n2 = a2 + (b & d2 | c2 & ~d2) + x2 + t;
        return (n2 << s2 | n2 >>> 32 - s2) + b;
      }
      function HH(a2, b, c2, d2, x2, s2, t) {
        var n2 = a2 + (b ^ c2 ^ d2) + x2 + t;
        return (n2 << s2 | n2 >>> 32 - s2) + b;
      }
      function II(a2, b, c2, d2, x2, s2, t) {
        var n2 = a2 + (c2 ^ (b | ~d2)) + x2 + t;
        return (n2 << s2 | n2 >>> 32 - s2) + b;
      }
      C.MD5 = Hasher._createHelper(MD5);
      C.HmacMD5 = Hasher._createHmacHelper(MD5);
    })(Math);
    return CryptoJS.MD5;
  });
})(md5$1);
var md5 = md5$1.exports;
var ansiStyles$1 = {exports: {}};
var colorName = {
  "aliceblue": [240, 248, 255],
  "antiquewhite": [250, 235, 215],
  "aqua": [0, 255, 255],
  "aquamarine": [127, 255, 212],
  "azure": [240, 255, 255],
  "beige": [245, 245, 220],
  "bisque": [255, 228, 196],
  "black": [0, 0, 0],
  "blanchedalmond": [255, 235, 205],
  "blue": [0, 0, 255],
  "blueviolet": [138, 43, 226],
  "brown": [165, 42, 42],
  "burlywood": [222, 184, 135],
  "cadetblue": [95, 158, 160],
  "chartreuse": [127, 255, 0],
  "chocolate": [210, 105, 30],
  "coral": [255, 127, 80],
  "cornflowerblue": [100, 149, 237],
  "cornsilk": [255, 248, 220],
  "crimson": [220, 20, 60],
  "cyan": [0, 255, 255],
  "darkblue": [0, 0, 139],
  "darkcyan": [0, 139, 139],
  "darkgoldenrod": [184, 134, 11],
  "darkgray": [169, 169, 169],
  "darkgreen": [0, 100, 0],
  "darkgrey": [169, 169, 169],
  "darkkhaki": [189, 183, 107],
  "darkmagenta": [139, 0, 139],
  "darkolivegreen": [85, 107, 47],
  "darkorange": [255, 140, 0],
  "darkorchid": [153, 50, 204],
  "darkred": [139, 0, 0],
  "darksalmon": [233, 150, 122],
  "darkseagreen": [143, 188, 143],
  "darkslateblue": [72, 61, 139],
  "darkslategray": [47, 79, 79],
  "darkslategrey": [47, 79, 79],
  "darkturquoise": [0, 206, 209],
  "darkviolet": [148, 0, 211],
  "deeppink": [255, 20, 147],
  "deepskyblue": [0, 191, 255],
  "dimgray": [105, 105, 105],
  "dimgrey": [105, 105, 105],
  "dodgerblue": [30, 144, 255],
  "firebrick": [178, 34, 34],
  "floralwhite": [255, 250, 240],
  "forestgreen": [34, 139, 34],
  "fuchsia": [255, 0, 255],
  "gainsboro": [220, 220, 220],
  "ghostwhite": [248, 248, 255],
  "gold": [255, 215, 0],
  "goldenrod": [218, 165, 32],
  "gray": [128, 128, 128],
  "green": [0, 128, 0],
  "greenyellow": [173, 255, 47],
  "grey": [128, 128, 128],
  "honeydew": [240, 255, 240],
  "hotpink": [255, 105, 180],
  "indianred": [205, 92, 92],
  "indigo": [75, 0, 130],
  "ivory": [255, 255, 240],
  "khaki": [240, 230, 140],
  "lavender": [230, 230, 250],
  "lavenderblush": [255, 240, 245],
  "lawngreen": [124, 252, 0],
  "lemonchiffon": [255, 250, 205],
  "lightblue": [173, 216, 230],
  "lightcoral": [240, 128, 128],
  "lightcyan": [224, 255, 255],
  "lightgoldenrodyellow": [250, 250, 210],
  "lightgray": [211, 211, 211],
  "lightgreen": [144, 238, 144],
  "lightgrey": [211, 211, 211],
  "lightpink": [255, 182, 193],
  "lightsalmon": [255, 160, 122],
  "lightseagreen": [32, 178, 170],
  "lightskyblue": [135, 206, 250],
  "lightslategray": [119, 136, 153],
  "lightslategrey": [119, 136, 153],
  "lightsteelblue": [176, 196, 222],
  "lightyellow": [255, 255, 224],
  "lime": [0, 255, 0],
  "limegreen": [50, 205, 50],
  "linen": [250, 240, 230],
  "magenta": [255, 0, 255],
  "maroon": [128, 0, 0],
  "mediumaquamarine": [102, 205, 170],
  "mediumblue": [0, 0, 205],
  "mediumorchid": [186, 85, 211],
  "mediumpurple": [147, 112, 219],
  "mediumseagreen": [60, 179, 113],
  "mediumslateblue": [123, 104, 238],
  "mediumspringgreen": [0, 250, 154],
  "mediumturquoise": [72, 209, 204],
  "mediumvioletred": [199, 21, 133],
  "midnightblue": [25, 25, 112],
  "mintcream": [245, 255, 250],
  "mistyrose": [255, 228, 225],
  "moccasin": [255, 228, 181],
  "navajowhite": [255, 222, 173],
  "navy": [0, 0, 128],
  "oldlace": [253, 245, 230],
  "olive": [128, 128, 0],
  "olivedrab": [107, 142, 35],
  "orange": [255, 165, 0],
  "orangered": [255, 69, 0],
  "orchid": [218, 112, 214],
  "palegoldenrod": [238, 232, 170],
  "palegreen": [152, 251, 152],
  "paleturquoise": [175, 238, 238],
  "palevioletred": [219, 112, 147],
  "papayawhip": [255, 239, 213],
  "peachpuff": [255, 218, 185],
  "peru": [205, 133, 63],
  "pink": [255, 192, 203],
  "plum": [221, 160, 221],
  "powderblue": [176, 224, 230],
  "purple": [128, 0, 128],
  "rebeccapurple": [102, 51, 153],
  "red": [255, 0, 0],
  "rosybrown": [188, 143, 143],
  "royalblue": [65, 105, 225],
  "saddlebrown": [139, 69, 19],
  "salmon": [250, 128, 114],
  "sandybrown": [244, 164, 96],
  "seagreen": [46, 139, 87],
  "seashell": [255, 245, 238],
  "sienna": [160, 82, 45],
  "silver": [192, 192, 192],
  "skyblue": [135, 206, 235],
  "slateblue": [106, 90, 205],
  "slategray": [112, 128, 144],
  "slategrey": [112, 128, 144],
  "snow": [255, 250, 250],
  "springgreen": [0, 255, 127],
  "steelblue": [70, 130, 180],
  "tan": [210, 180, 140],
  "teal": [0, 128, 128],
  "thistle": [216, 191, 216],
  "tomato": [255, 99, 71],
  "turquoise": [64, 224, 208],
  "violet": [238, 130, 238],
  "wheat": [245, 222, 179],
  "white": [255, 255, 255],
  "whitesmoke": [245, 245, 245],
  "yellow": [255, 255, 0],
  "yellowgreen": [154, 205, 50]
};
const cssKeywords = colorName;
const reverseKeywords = {};
for (const key of Object.keys(cssKeywords)) {
  reverseKeywords[cssKeywords[key]] = key;
}
const convert$3 = {
  rgb: {channels: 3, labels: "rgb"},
  hsl: {channels: 3, labels: "hsl"},
  hsv: {channels: 3, labels: "hsv"},
  hwb: {channels: 3, labels: "hwb"},
  cmyk: {channels: 4, labels: "cmyk"},
  xyz: {channels: 3, labels: "xyz"},
  lab: {channels: 3, labels: "lab"},
  lch: {channels: 3, labels: "lch"},
  hex: {channels: 1, labels: ["hex"]},
  keyword: {channels: 1, labels: ["keyword"]},
  ansi16: {channels: 1, labels: ["ansi16"]},
  ansi256: {channels: 1, labels: ["ansi256"]},
  hcg: {channels: 3, labels: ["h", "c", "g"]},
  apple: {channels: 3, labels: ["r16", "g16", "b16"]},
  gray: {channels: 1, labels: ["gray"]}
};
var conversions$2 = convert$3;
for (const model of Object.keys(convert$3)) {
  if (!("channels" in convert$3[model])) {
    throw new Error("missing channels property: " + model);
  }
  if (!("labels" in convert$3[model])) {
    throw new Error("missing channel labels property: " + model);
  }
  if (convert$3[model].labels.length !== convert$3[model].channels) {
    throw new Error("channel and label counts mismatch: " + model);
  }
  const {channels, labels} = convert$3[model];
  delete convert$3[model].channels;
  delete convert$3[model].labels;
  Object.defineProperty(convert$3[model], "channels", {value: channels});
  Object.defineProperty(convert$3[model], "labels", {value: labels});
}
convert$3.rgb.hsl = function(rgb) {
  const r2 = rgb[0] / 255;
  const g2 = rgb[1] / 255;
  const b = rgb[2] / 255;
  const min = Math.min(r2, g2, b);
  const max = Math.max(r2, g2, b);
  const delta = max - min;
  let h2;
  let s2;
  if (max === min) {
    h2 = 0;
  } else if (r2 === max) {
    h2 = (g2 - b) / delta;
  } else if (g2 === max) {
    h2 = 2 + (b - r2) / delta;
  } else if (b === max) {
    h2 = 4 + (r2 - g2) / delta;
  }
  h2 = Math.min(h2 * 60, 360);
  if (h2 < 0) {
    h2 += 360;
  }
  const l2 = (min + max) / 2;
  if (max === min) {
    s2 = 0;
  } else if (l2 <= 0.5) {
    s2 = delta / (max + min);
  } else {
    s2 = delta / (2 - max - min);
  }
  return [h2, s2 * 100, l2 * 100];
};
convert$3.rgb.hsv = function(rgb) {
  let rdif;
  let gdif;
  let bdif;
  let h2;
  let s2;
  const r2 = rgb[0] / 255;
  const g2 = rgb[1] / 255;
  const b = rgb[2] / 255;
  const v2 = Math.max(r2, g2, b);
  const diff2 = v2 - Math.min(r2, g2, b);
  const diffc = function(c2) {
    return (v2 - c2) / 6 / diff2 + 1 / 2;
  };
  if (diff2 === 0) {
    h2 = 0;
    s2 = 0;
  } else {
    s2 = diff2 / v2;
    rdif = diffc(r2);
    gdif = diffc(g2);
    bdif = diffc(b);
    if (r2 === v2) {
      h2 = bdif - gdif;
    } else if (g2 === v2) {
      h2 = 1 / 3 + rdif - bdif;
    } else if (b === v2) {
      h2 = 2 / 3 + gdif - rdif;
    }
    if (h2 < 0) {
      h2 += 1;
    } else if (h2 > 1) {
      h2 -= 1;
    }
  }
  return [
    h2 * 360,
    s2 * 100,
    v2 * 100
  ];
};
convert$3.rgb.hwb = function(rgb) {
  const r2 = rgb[0];
  const g2 = rgb[1];
  let b = rgb[2];
  const h2 = convert$3.rgb.hsl(rgb)[0];
  const w2 = 1 / 255 * Math.min(r2, Math.min(g2, b));
  b = 1 - 1 / 255 * Math.max(r2, Math.max(g2, b));
  return [h2, w2 * 100, b * 100];
};
convert$3.rgb.cmyk = function(rgb) {
  const r2 = rgb[0] / 255;
  const g2 = rgb[1] / 255;
  const b = rgb[2] / 255;
  const k2 = Math.min(1 - r2, 1 - g2, 1 - b);
  const c2 = (1 - r2 - k2) / (1 - k2) || 0;
  const m2 = (1 - g2 - k2) / (1 - k2) || 0;
  const y2 = (1 - b - k2) / (1 - k2) || 0;
  return [c2 * 100, m2 * 100, y2 * 100, k2 * 100];
};
function comparativeDistance(x2, y2) {
  return (x2[0] - y2[0]) ** 2 + (x2[1] - y2[1]) ** 2 + (x2[2] - y2[2]) ** 2;
}
convert$3.rgb.keyword = function(rgb) {
  const reversed = reverseKeywords[rgb];
  if (reversed) {
    return reversed;
  }
  let currentClosestDistance = Infinity;
  let currentClosestKeyword;
  for (const keyword of Object.keys(cssKeywords)) {
    const value = cssKeywords[keyword];
    const distance = comparativeDistance(rgb, value);
    if (distance < currentClosestDistance) {
      currentClosestDistance = distance;
      currentClosestKeyword = keyword;
    }
  }
  return currentClosestKeyword;
};
convert$3.keyword.rgb = function(keyword) {
  return cssKeywords[keyword];
};
convert$3.rgb.xyz = function(rgb) {
  let r2 = rgb[0] / 255;
  let g2 = rgb[1] / 255;
  let b = rgb[2] / 255;
  r2 = r2 > 0.04045 ? ((r2 + 0.055) / 1.055) ** 2.4 : r2 / 12.92;
  g2 = g2 > 0.04045 ? ((g2 + 0.055) / 1.055) ** 2.4 : g2 / 12.92;
  b = b > 0.04045 ? ((b + 0.055) / 1.055) ** 2.4 : b / 12.92;
  const x2 = r2 * 0.4124 + g2 * 0.3576 + b * 0.1805;
  const y2 = r2 * 0.2126 + g2 * 0.7152 + b * 0.0722;
  const z = r2 * 0.0193 + g2 * 0.1192 + b * 0.9505;
  return [x2 * 100, y2 * 100, z * 100];
};
convert$3.rgb.lab = function(rgb) {
  const xyz = convert$3.rgb.xyz(rgb);
  let x2 = xyz[0];
  let y2 = xyz[1];
  let z = xyz[2];
  x2 /= 95.047;
  y2 /= 100;
  z /= 108.883;
  x2 = x2 > 8856e-6 ? x2 ** (1 / 3) : 7.787 * x2 + 16 / 116;
  y2 = y2 > 8856e-6 ? y2 ** (1 / 3) : 7.787 * y2 + 16 / 116;
  z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
  const l2 = 116 * y2 - 16;
  const a2 = 500 * (x2 - y2);
  const b = 200 * (y2 - z);
  return [l2, a2, b];
};
convert$3.hsl.rgb = function(hsl) {
  const h2 = hsl[0] / 360;
  const s2 = hsl[1] / 100;
  const l2 = hsl[2] / 100;
  let t2;
  let t3;
  let val;
  if (s2 === 0) {
    val = l2 * 255;
    return [val, val, val];
  }
  if (l2 < 0.5) {
    t2 = l2 * (1 + s2);
  } else {
    t2 = l2 + s2 - l2 * s2;
  }
  const t1 = 2 * l2 - t2;
  const rgb = [0, 0, 0];
  for (let i2 = 0; i2 < 3; i2++) {
    t3 = h2 + 1 / 3 * -(i2 - 1);
    if (t3 < 0) {
      t3++;
    }
    if (t3 > 1) {
      t3--;
    }
    if (6 * t3 < 1) {
      val = t1 + (t2 - t1) * 6 * t3;
    } else if (2 * t3 < 1) {
      val = t2;
    } else if (3 * t3 < 2) {
      val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
    } else {
      val = t1;
    }
    rgb[i2] = val * 255;
  }
  return rgb;
};
convert$3.hsl.hsv = function(hsl) {
  const h2 = hsl[0];
  let s2 = hsl[1] / 100;
  let l2 = hsl[2] / 100;
  let smin = s2;
  const lmin = Math.max(l2, 0.01);
  l2 *= 2;
  s2 *= l2 <= 1 ? l2 : 2 - l2;
  smin *= lmin <= 1 ? lmin : 2 - lmin;
  const v2 = (l2 + s2) / 2;
  const sv = l2 === 0 ? 2 * smin / (lmin + smin) : 2 * s2 / (l2 + s2);
  return [h2, sv * 100, v2 * 100];
};
convert$3.hsv.rgb = function(hsv) {
  const h2 = hsv[0] / 60;
  const s2 = hsv[1] / 100;
  let v2 = hsv[2] / 100;
  const hi = Math.floor(h2) % 6;
  const f2 = h2 - Math.floor(h2);
  const p2 = 255 * v2 * (1 - s2);
  const q2 = 255 * v2 * (1 - s2 * f2);
  const t = 255 * v2 * (1 - s2 * (1 - f2));
  v2 *= 255;
  switch (hi) {
    case 0:
      return [v2, t, p2];
    case 1:
      return [q2, v2, p2];
    case 2:
      return [p2, v2, t];
    case 3:
      return [p2, q2, v2];
    case 4:
      return [t, p2, v2];
    case 5:
      return [v2, p2, q2];
  }
};
convert$3.hsv.hsl = function(hsv) {
  const h2 = hsv[0];
  const s2 = hsv[1] / 100;
  const v2 = hsv[2] / 100;
  const vmin = Math.max(v2, 0.01);
  let sl;
  let l2;
  l2 = (2 - s2) * v2;
  const lmin = (2 - s2) * vmin;
  sl = s2 * vmin;
  sl /= lmin <= 1 ? lmin : 2 - lmin;
  sl = sl || 0;
  l2 /= 2;
  return [h2, sl * 100, l2 * 100];
};
convert$3.hwb.rgb = function(hwb) {
  const h2 = hwb[0] / 360;
  let wh = hwb[1] / 100;
  let bl = hwb[2] / 100;
  const ratio = wh + bl;
  let f2;
  if (ratio > 1) {
    wh /= ratio;
    bl /= ratio;
  }
  const i2 = Math.floor(6 * h2);
  const v2 = 1 - bl;
  f2 = 6 * h2 - i2;
  if ((i2 & 1) !== 0) {
    f2 = 1 - f2;
  }
  const n2 = wh + f2 * (v2 - wh);
  let r2;
  let g2;
  let b;
  switch (i2) {
    default:
    case 6:
    case 0:
      r2 = v2;
      g2 = n2;
      b = wh;
      break;
    case 1:
      r2 = n2;
      g2 = v2;
      b = wh;
      break;
    case 2:
      r2 = wh;
      g2 = v2;
      b = n2;
      break;
    case 3:
      r2 = wh;
      g2 = n2;
      b = v2;
      break;
    case 4:
      r2 = n2;
      g2 = wh;
      b = v2;
      break;
    case 5:
      r2 = v2;
      g2 = wh;
      b = n2;
      break;
  }
  return [r2 * 255, g2 * 255, b * 255];
};
convert$3.cmyk.rgb = function(cmyk) {
  const c2 = cmyk[0] / 100;
  const m2 = cmyk[1] / 100;
  const y2 = cmyk[2] / 100;
  const k2 = cmyk[3] / 100;
  const r2 = 1 - Math.min(1, c2 * (1 - k2) + k2);
  const g2 = 1 - Math.min(1, m2 * (1 - k2) + k2);
  const b = 1 - Math.min(1, y2 * (1 - k2) + k2);
  return [r2 * 255, g2 * 255, b * 255];
};
convert$3.xyz.rgb = function(xyz) {
  const x2 = xyz[0] / 100;
  const y2 = xyz[1] / 100;
  const z = xyz[2] / 100;
  let r2;
  let g2;
  let b;
  r2 = x2 * 3.2406 + y2 * -1.5372 + z * -0.4986;
  g2 = x2 * -0.9689 + y2 * 1.8758 + z * 0.0415;
  b = x2 * 0.0557 + y2 * -0.204 + z * 1.057;
  r2 = r2 > 31308e-7 ? 1.055 * r2 ** (1 / 2.4) - 0.055 : r2 * 12.92;
  g2 = g2 > 31308e-7 ? 1.055 * g2 ** (1 / 2.4) - 0.055 : g2 * 12.92;
  b = b > 31308e-7 ? 1.055 * b ** (1 / 2.4) - 0.055 : b * 12.92;
  r2 = Math.min(Math.max(0, r2), 1);
  g2 = Math.min(Math.max(0, g2), 1);
  b = Math.min(Math.max(0, b), 1);
  return [r2 * 255, g2 * 255, b * 255];
};
convert$3.xyz.lab = function(xyz) {
  let x2 = xyz[0];
  let y2 = xyz[1];
  let z = xyz[2];
  x2 /= 95.047;
  y2 /= 100;
  z /= 108.883;
  x2 = x2 > 8856e-6 ? x2 ** (1 / 3) : 7.787 * x2 + 16 / 116;
  y2 = y2 > 8856e-6 ? y2 ** (1 / 3) : 7.787 * y2 + 16 / 116;
  z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
  const l2 = 116 * y2 - 16;
  const a2 = 500 * (x2 - y2);
  const b = 200 * (y2 - z);
  return [l2, a2, b];
};
convert$3.lab.xyz = function(lab) {
  const l2 = lab[0];
  const a2 = lab[1];
  const b = lab[2];
  let x2;
  let y2;
  let z;
  y2 = (l2 + 16) / 116;
  x2 = a2 / 500 + y2;
  z = y2 - b / 200;
  const y22 = y2 ** 3;
  const x22 = x2 ** 3;
  const z2 = z ** 3;
  y2 = y22 > 8856e-6 ? y22 : (y2 - 16 / 116) / 7.787;
  x2 = x22 > 8856e-6 ? x22 : (x2 - 16 / 116) / 7.787;
  z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
  x2 *= 95.047;
  y2 *= 100;
  z *= 108.883;
  return [x2, y2, z];
};
convert$3.lab.lch = function(lab) {
  const l2 = lab[0];
  const a2 = lab[1];
  const b = lab[2];
  let h2;
  const hr = Math.atan2(b, a2);
  h2 = hr * 360 / 2 / Math.PI;
  if (h2 < 0) {
    h2 += 360;
  }
  const c2 = Math.sqrt(a2 * a2 + b * b);
  return [l2, c2, h2];
};
convert$3.lch.lab = function(lch) {
  const l2 = lch[0];
  const c2 = lch[1];
  const h2 = lch[2];
  const hr = h2 / 360 * 2 * Math.PI;
  const a2 = c2 * Math.cos(hr);
  const b = c2 * Math.sin(hr);
  return [l2, a2, b];
};
convert$3.rgb.ansi16 = function(args, saturation = null) {
  const [r2, g2, b] = args;
  let value = saturation === null ? convert$3.rgb.hsv(args)[2] : saturation;
  value = Math.round(value / 50);
  if (value === 0) {
    return 30;
  }
  let ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g2 / 255) << 1 | Math.round(r2 / 255));
  if (value === 2) {
    ansi += 60;
  }
  return ansi;
};
convert$3.hsv.ansi16 = function(args) {
  return convert$3.rgb.ansi16(convert$3.hsv.rgb(args), args[2]);
};
convert$3.rgb.ansi256 = function(args) {
  const r2 = args[0];
  const g2 = args[1];
  const b = args[2];
  if (r2 === g2 && g2 === b) {
    if (r2 < 8) {
      return 16;
    }
    if (r2 > 248) {
      return 231;
    }
    return Math.round((r2 - 8) / 247 * 24) + 232;
  }
  const ansi = 16 + 36 * Math.round(r2 / 255 * 5) + 6 * Math.round(g2 / 255 * 5) + Math.round(b / 255 * 5);
  return ansi;
};
convert$3.ansi16.rgb = function(args) {
  let color = args % 10;
  if (color === 0 || color === 7) {
    if (args > 50) {
      color += 3.5;
    }
    color = color / 10.5 * 255;
    return [color, color, color];
  }
  const mult = (~~(args > 50) + 1) * 0.5;
  const r2 = (color & 1) * mult * 255;
  const g2 = (color >> 1 & 1) * mult * 255;
  const b = (color >> 2 & 1) * mult * 255;
  return [r2, g2, b];
};
convert$3.ansi256.rgb = function(args) {
  if (args >= 232) {
    const c2 = (args - 232) * 10 + 8;
    return [c2, c2, c2];
  }
  args -= 16;
  let rem;
  const r2 = Math.floor(args / 36) / 5 * 255;
  const g2 = Math.floor((rem = args % 36) / 6) / 5 * 255;
  const b = rem % 6 / 5 * 255;
  return [r2, g2, b];
};
convert$3.rgb.hex = function(args) {
  const integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
  const string = integer.toString(16).toUpperCase();
  return "000000".substring(string.length) + string;
};
convert$3.hex.rgb = function(args) {
  const match2 = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
  if (!match2) {
    return [0, 0, 0];
  }
  let colorString = match2[0];
  if (match2[0].length === 3) {
    colorString = colorString.split("").map((char) => {
      return char + char;
    }).join("");
  }
  const integer = parseInt(colorString, 16);
  const r2 = integer >> 16 & 255;
  const g2 = integer >> 8 & 255;
  const b = integer & 255;
  return [r2, g2, b];
};
convert$3.rgb.hcg = function(rgb) {
  const r2 = rgb[0] / 255;
  const g2 = rgb[1] / 255;
  const b = rgb[2] / 255;
  const max = Math.max(Math.max(r2, g2), b);
  const min = Math.min(Math.min(r2, g2), b);
  const chroma = max - min;
  let grayscale;
  let hue;
  if (chroma < 1) {
    grayscale = min / (1 - chroma);
  } else {
    grayscale = 0;
  }
  if (chroma <= 0) {
    hue = 0;
  } else if (max === r2) {
    hue = (g2 - b) / chroma % 6;
  } else if (max === g2) {
    hue = 2 + (b - r2) / chroma;
  } else {
    hue = 4 + (r2 - g2) / chroma;
  }
  hue /= 6;
  hue %= 1;
  return [hue * 360, chroma * 100, grayscale * 100];
};
convert$3.hsl.hcg = function(hsl) {
  const s2 = hsl[1] / 100;
  const l2 = hsl[2] / 100;
  const c2 = l2 < 0.5 ? 2 * s2 * l2 : 2 * s2 * (1 - l2);
  let f2 = 0;
  if (c2 < 1) {
    f2 = (l2 - 0.5 * c2) / (1 - c2);
  }
  return [hsl[0], c2 * 100, f2 * 100];
};
convert$3.hsv.hcg = function(hsv) {
  const s2 = hsv[1] / 100;
  const v2 = hsv[2] / 100;
  const c2 = s2 * v2;
  let f2 = 0;
  if (c2 < 1) {
    f2 = (v2 - c2) / (1 - c2);
  }
  return [hsv[0], c2 * 100, f2 * 100];
};
convert$3.hcg.rgb = function(hcg) {
  const h2 = hcg[0] / 360;
  const c2 = hcg[1] / 100;
  const g2 = hcg[2] / 100;
  if (c2 === 0) {
    return [g2 * 255, g2 * 255, g2 * 255];
  }
  const pure = [0, 0, 0];
  const hi = h2 % 1 * 6;
  const v2 = hi % 1;
  const w2 = 1 - v2;
  let mg = 0;
  switch (Math.floor(hi)) {
    case 0:
      pure[0] = 1;
      pure[1] = v2;
      pure[2] = 0;
      break;
    case 1:
      pure[0] = w2;
      pure[1] = 1;
      pure[2] = 0;
      break;
    case 2:
      pure[0] = 0;
      pure[1] = 1;
      pure[2] = v2;
      break;
    case 3:
      pure[0] = 0;
      pure[1] = w2;
      pure[2] = 1;
      break;
    case 4:
      pure[0] = v2;
      pure[1] = 0;
      pure[2] = 1;
      break;
    default:
      pure[0] = 1;
      pure[1] = 0;
      pure[2] = w2;
  }
  mg = (1 - c2) * g2;
  return [
    (c2 * pure[0] + mg) * 255,
    (c2 * pure[1] + mg) * 255,
    (c2 * pure[2] + mg) * 255
  ];
};
convert$3.hcg.hsv = function(hcg) {
  const c2 = hcg[1] / 100;
  const g2 = hcg[2] / 100;
  const v2 = c2 + g2 * (1 - c2);
  let f2 = 0;
  if (v2 > 0) {
    f2 = c2 / v2;
  }
  return [hcg[0], f2 * 100, v2 * 100];
};
convert$3.hcg.hsl = function(hcg) {
  const c2 = hcg[1] / 100;
  const g2 = hcg[2] / 100;
  const l2 = g2 * (1 - c2) + 0.5 * c2;
  let s2 = 0;
  if (l2 > 0 && l2 < 0.5) {
    s2 = c2 / (2 * l2);
  } else if (l2 >= 0.5 && l2 < 1) {
    s2 = c2 / (2 * (1 - l2));
  }
  return [hcg[0], s2 * 100, l2 * 100];
};
convert$3.hcg.hwb = function(hcg) {
  const c2 = hcg[1] / 100;
  const g2 = hcg[2] / 100;
  const v2 = c2 + g2 * (1 - c2);
  return [hcg[0], (v2 - c2) * 100, (1 - v2) * 100];
};
convert$3.hwb.hcg = function(hwb) {
  const w2 = hwb[1] / 100;
  const b = hwb[2] / 100;
  const v2 = 1 - b;
  const c2 = v2 - w2;
  let g2 = 0;
  if (c2 < 1) {
    g2 = (v2 - c2) / (1 - c2);
  }
  return [hwb[0], c2 * 100, g2 * 100];
};
convert$3.apple.rgb = function(apple) {
  return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
};
convert$3.rgb.apple = function(rgb) {
  return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
};
convert$3.gray.rgb = function(args) {
  return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
};
convert$3.gray.hsl = function(args) {
  return [0, 0, args[0]];
};
convert$3.gray.hsv = convert$3.gray.hsl;
convert$3.gray.hwb = function(gray) {
  return [0, 100, gray[0]];
};
convert$3.gray.cmyk = function(gray) {
  return [0, 0, 0, gray[0]];
};
convert$3.gray.lab = function(gray) {
  return [gray[0], 0, 0];
};
convert$3.gray.hex = function(gray) {
  const val = Math.round(gray[0] / 100 * 255) & 255;
  const integer = (val << 16) + (val << 8) + val;
  const string = integer.toString(16).toUpperCase();
  return "000000".substring(string.length) + string;
};
convert$3.rgb.gray = function(rgb) {
  const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
  return [val / 255 * 100];
};
const conversions$1 = conversions$2;
function buildGraph() {
  const graph = {};
  const models2 = Object.keys(conversions$1);
  for (let len = models2.length, i2 = 0; i2 < len; i2++) {
    graph[models2[i2]] = {
      distance: -1,
      parent: null
    };
  }
  return graph;
}
function deriveBFS(fromModel) {
  const graph = buildGraph();
  const queue = [fromModel];
  graph[fromModel].distance = 0;
  while (queue.length) {
    const current = queue.pop();
    const adjacents = Object.keys(conversions$1[current]);
    for (let len = adjacents.length, i2 = 0; i2 < len; i2++) {
      const adjacent = adjacents[i2];
      const node = graph[adjacent];
      if (node.distance === -1) {
        node.distance = graph[current].distance + 1;
        node.parent = current;
        queue.unshift(adjacent);
      }
    }
  }
  return graph;
}
function link(from, to) {
  return function(args) {
    return to(from(args));
  };
}
function wrapConversion(toModel, graph) {
  const path2 = [graph[toModel].parent, toModel];
  let fn2 = conversions$1[graph[toModel].parent][toModel];
  let cur = graph[toModel].parent;
  while (graph[cur].parent) {
    path2.unshift(graph[cur].parent);
    fn2 = link(conversions$1[graph[cur].parent][cur], fn2);
    cur = graph[cur].parent;
  }
  fn2.conversion = path2;
  return fn2;
}
var route$1 = function(fromModel) {
  const graph = deriveBFS(fromModel);
  const conversion = {};
  const models2 = Object.keys(graph);
  for (let len = models2.length, i2 = 0; i2 < len; i2++) {
    const toModel = models2[i2];
    const node = graph[toModel];
    if (node.parent === null) {
      continue;
    }
    conversion[toModel] = wrapConversion(toModel, graph);
  }
  return conversion;
};
const conversions = conversions$2;
const route = route$1;
const convert$2 = {};
const models = Object.keys(conversions);
function wrapRaw(fn2) {
  const wrappedFn = function(...args) {
    const arg0 = args[0];
    if (arg0 === void 0 || arg0 === null) {
      return arg0;
    }
    if (arg0.length > 1) {
      args = arg0;
    }
    return fn2(args);
  };
  if ("conversion" in fn2) {
    wrappedFn.conversion = fn2.conversion;
  }
  return wrappedFn;
}
function wrapRounded(fn2) {
  const wrappedFn = function(...args) {
    const arg0 = args[0];
    if (arg0 === void 0 || arg0 === null) {
      return arg0;
    }
    if (arg0.length > 1) {
      args = arg0;
    }
    const result = fn2(args);
    if (typeof result === "object") {
      for (let len = result.length, i2 = 0; i2 < len; i2++) {
        result[i2] = Math.round(result[i2]);
      }
    }
    return result;
  };
  if ("conversion" in fn2) {
    wrappedFn.conversion = fn2.conversion;
  }
  return wrappedFn;
}
models.forEach((fromModel) => {
  convert$2[fromModel] = {};
  Object.defineProperty(convert$2[fromModel], "channels", {value: conversions[fromModel].channels});
  Object.defineProperty(convert$2[fromModel], "labels", {value: conversions[fromModel].labels});
  const routes = route(fromModel);
  const routeModels = Object.keys(routes);
  routeModels.forEach((toModel) => {
    const fn2 = routes[toModel];
    convert$2[fromModel][toModel] = wrapRounded(fn2);
    convert$2[fromModel][toModel].raw = wrapRaw(fn2);
  });
});
var colorConvert = convert$2;
(function(module) {
  const wrapAnsi16 = (fn2, offset2) => (...args) => {
    const code3 = fn2(...args);
    return `[${code3 + offset2}m`;
  };
  const wrapAnsi256 = (fn2, offset2) => (...args) => {
    const code3 = fn2(...args);
    return `[${38 + offset2};5;${code3}m`;
  };
  const wrapAnsi16m = (fn2, offset2) => (...args) => {
    const rgb = fn2(...args);
    return `[${38 + offset2};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
  };
  const ansi2ansi = (n2) => n2;
  const rgb2rgb = (r2, g2, b) => [r2, g2, b];
  const setLazyProperty = (object, property, get2) => {
    Object.defineProperty(object, property, {
      get: () => {
        const value = get2();
        Object.defineProperty(object, property, {
          value,
          enumerable: true,
          configurable: true
        });
        return value;
      },
      enumerable: true,
      configurable: true
    });
  };
  let colorConvert$1;
  const makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {
    if (colorConvert$1 === void 0) {
      colorConvert$1 = colorConvert;
    }
    const offset2 = isBackground ? 10 : 0;
    const styles2 = {};
    for (const [sourceSpace, suite] of Object.entries(colorConvert$1)) {
      const name2 = sourceSpace === "ansi16" ? "ansi" : sourceSpace;
      if (sourceSpace === targetSpace) {
        styles2[name2] = wrap(identity, offset2);
      } else if (typeof suite === "object") {
        styles2[name2] = wrap(suite[targetSpace], offset2);
      }
    }
    return styles2;
  };
  function assembleStyles() {
    const codes = new Map();
    const styles2 = {
      modifier: {
        reset: [0, 0],
        bold: [1, 22],
        dim: [2, 22],
        italic: [3, 23],
        underline: [4, 24],
        inverse: [7, 27],
        hidden: [8, 28],
        strikethrough: [9, 29]
      },
      color: {
        black: [30, 39],
        red: [31, 39],
        green: [32, 39],
        yellow: [33, 39],
        blue: [34, 39],
        magenta: [35, 39],
        cyan: [36, 39],
        white: [37, 39],
        blackBright: [90, 39],
        redBright: [91, 39],
        greenBright: [92, 39],
        yellowBright: [93, 39],
        blueBright: [94, 39],
        magentaBright: [95, 39],
        cyanBright: [96, 39],
        whiteBright: [97, 39]
      },
      bgColor: {
        bgBlack: [40, 49],
        bgRed: [41, 49],
        bgGreen: [42, 49],
        bgYellow: [43, 49],
        bgBlue: [44, 49],
        bgMagenta: [45, 49],
        bgCyan: [46, 49],
        bgWhite: [47, 49],
        bgBlackBright: [100, 49],
        bgRedBright: [101, 49],
        bgGreenBright: [102, 49],
        bgYellowBright: [103, 49],
        bgBlueBright: [104, 49],
        bgMagentaBright: [105, 49],
        bgCyanBright: [106, 49],
        bgWhiteBright: [107, 49]
      }
    };
    styles2.color.gray = styles2.color.blackBright;
    styles2.bgColor.bgGray = styles2.bgColor.bgBlackBright;
    styles2.color.grey = styles2.color.blackBright;
    styles2.bgColor.bgGrey = styles2.bgColor.bgBlackBright;
    for (const [groupName, group] of Object.entries(styles2)) {
      for (const [styleName, style] of Object.entries(group)) {
        styles2[styleName] = {
          open: `[${style[0]}m`,
          close: `[${style[1]}m`
        };
        group[styleName] = styles2[styleName];
        codes.set(style[0], style[1]);
      }
      Object.defineProperty(styles2, groupName, {
        value: group,
        enumerable: false
      });
    }
    Object.defineProperty(styles2, "codes", {
      value: codes,
      enumerable: false
    });
    styles2.color.close = "[39m";
    styles2.bgColor.close = "[49m";
    setLazyProperty(styles2.color, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, false));
    setLazyProperty(styles2.color, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, false));
    setLazyProperty(styles2.color, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, false));
    setLazyProperty(styles2.bgColor, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, true));
    setLazyProperty(styles2.bgColor, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, true));
    setLazyProperty(styles2.bgColor, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, true));
    return styles2;
  }
  Object.defineProperty(module, "exports", {
    enumerable: true,
    get: assembleStyles
  });
})(ansiStyles$1);
var browser = {
  stdout: false,
  stderr: false
};
const stringReplaceAll$1 = (string, substring, replacer) => {
  let index = string.indexOf(substring);
  if (index === -1) {
    return string;
  }
  const substringLength = substring.length;
  let endIndex = 0;
  let returnValue = "";
  do {
    returnValue += string.substr(endIndex, index - endIndex) + substring + replacer;
    endIndex = index + substringLength;
    index = string.indexOf(substring, endIndex);
  } while (index !== -1);
  returnValue += string.substr(endIndex);
  return returnValue;
};
const stringEncaseCRLFWithFirstIndex$1 = (string, prefix, postfix, index) => {
  let endIndex = 0;
  let returnValue = "";
  do {
    const gotCR = string[index - 1] === "\r";
    returnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? "\r\n" : "\n") + postfix;
    endIndex = index + 1;
    index = string.indexOf("\n", endIndex);
  } while (index !== -1);
  returnValue += string.substr(endIndex);
  return returnValue;
};
var util$6 = {
  stringReplaceAll: stringReplaceAll$1,
  stringEncaseCRLFWithFirstIndex: stringEncaseCRLFWithFirstIndex$1
};
const TEMPLATE_REGEX = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
const STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
const STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
const ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi;
const ESCAPES = new Map([
  ["n", "\n"],
  ["r", "\r"],
  ["t", "	"],
  ["b", "\b"],
  ["f", "\f"],
  ["v", "\v"],
  ["0", "\0"],
  ["\\", "\\"],
  ["e", ""],
  ["a", "\x07"]
]);
function unescape$1(c2) {
  const u = c2[0] === "u";
  const bracket = c2[1] === "{";
  if (u && !bracket && c2.length === 5 || c2[0] === "x" && c2.length === 3) {
    return String.fromCharCode(parseInt(c2.slice(1), 16));
  }
  if (u && bracket) {
    return String.fromCodePoint(parseInt(c2.slice(2, -1), 16));
  }
  return ESCAPES.get(c2) || c2;
}
function parseArguments(name2, arguments_) {
  const results = [];
  const chunks = arguments_.trim().split(/\s*,\s*/g);
  let matches2;
  for (const chunk of chunks) {
    const number = Number(chunk);
    if (!Number.isNaN(number)) {
      results.push(number);
    } else if (matches2 = chunk.match(STRING_REGEX)) {
      results.push(matches2[2].replace(ESCAPE_REGEX, (m2, escape2, character) => escape2 ? unescape$1(escape2) : character));
    } else {
      throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name2}')`);
    }
  }
  return results;
}
function parseStyle(style) {
  STYLE_REGEX.lastIndex = 0;
  const results = [];
  let matches2;
  while ((matches2 = STYLE_REGEX.exec(style)) !== null) {
    const name2 = matches2[1];
    if (matches2[2]) {
      const args = parseArguments(name2, matches2[2]);
      results.push([name2].concat(args));
    } else {
      results.push([name2]);
    }
  }
  return results;
}
function buildStyle(chalk2, styles2) {
  const enabled = {};
  for (const layer of styles2) {
    for (const style of layer.styles) {
      enabled[style[0]] = layer.inverse ? null : style.slice(1);
    }
  }
  let current = chalk2;
  for (const [styleName, styles3] of Object.entries(enabled)) {
    if (!Array.isArray(styles3)) {
      continue;
    }
    if (!(styleName in current)) {
      throw new Error(`Unknown Chalk style: ${styleName}`);
    }
    current = styles3.length > 0 ? current[styleName](...styles3) : current[styleName];
  }
  return current;
}
var templates = (chalk2, temporary) => {
  const styles2 = [];
  const chunks = [];
  let chunk = [];
  temporary.replace(TEMPLATE_REGEX, (m2, escapeCharacter, inverse, style, close, character) => {
    if (escapeCharacter) {
      chunk.push(unescape$1(escapeCharacter));
    } else if (style) {
      const string = chunk.join("");
      chunk = [];
      chunks.push(styles2.length === 0 ? string : buildStyle(chalk2, styles2)(string));
      styles2.push({inverse, styles: parseStyle(style)});
    } else if (close) {
      if (styles2.length === 0) {
        throw new Error("Found extraneous } in Chalk template literal");
      }
      chunks.push(buildStyle(chalk2, styles2)(chunk.join("")));
      chunk = [];
      styles2.pop();
    } else {
      chunk.push(character);
    }
  });
  chunks.push(chunk.join(""));
  if (styles2.length > 0) {
    const errMessage = `Chalk template literal is missing ${styles2.length} closing bracket${styles2.length === 1 ? "" : "s"} (\`}\`)`;
    throw new Error(errMessage);
  }
  return chunks.join("");
};
const ansiStyles = ansiStyles$1.exports;
const {stdout: stdoutColor, stderr: stderrColor} = browser;
const {
  stringReplaceAll,
  stringEncaseCRLFWithFirstIndex
} = util$6;
const {isArray: isArray$7} = Array;
const levelMapping = [
  "ansi",
  "ansi",
  "ansi256",
  "ansi16m"
];
const styles = Object.create(null);
const applyOptions = (object, options = {}) => {
  if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {
    throw new Error("The `level` option should be an integer from 0 to 3");
  }
  const colorLevel = stdoutColor ? stdoutColor.level : 0;
  object.level = options.level === void 0 ? colorLevel : options.level;
};
class ChalkClass {
  constructor(options) {
    return chalkFactory(options);
  }
}
const chalkFactory = (options) => {
  const chalk2 = {};
  applyOptions(chalk2, options);
  chalk2.template = (...arguments_) => chalkTag(chalk2.template, ...arguments_);
  Object.setPrototypeOf(chalk2, Chalk.prototype);
  Object.setPrototypeOf(chalk2.template, chalk2);
  chalk2.template.constructor = () => {
    throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.");
  };
  chalk2.template.Instance = ChalkClass;
  return chalk2.template;
};
function Chalk(options) {
  return chalkFactory(options);
}
for (const [styleName, style] of Object.entries(ansiStyles)) {
  styles[styleName] = {
    get() {
      const builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);
      Object.defineProperty(this, styleName, {value: builder});
      return builder;
    }
  };
}
styles.visible = {
  get() {
    const builder = createBuilder(this, this._styler, true);
    Object.defineProperty(this, "visible", {value: builder});
    return builder;
  }
};
const usedModels = ["rgb", "hex", "keyword", "hsl", "hsv", "hwb", "ansi", "ansi256"];
for (const model of usedModels) {
  styles[model] = {
    get() {
      const {level} = this;
      return function(...arguments_) {
        const styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);
        return createBuilder(this, styler, this._isEmpty);
      };
    }
  };
}
for (const model of usedModels) {
  const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
  styles[bgModel] = {
    get() {
      const {level} = this;
      return function(...arguments_) {
        const styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);
        return createBuilder(this, styler, this._isEmpty);
      };
    }
  };
}
const proto = Object.defineProperties(() => {
}, __spreadProps(__spreadValues({}, styles), {
  level: {
    enumerable: true,
    get() {
      return this._generator.level;
    },
    set(level) {
      this._generator.level = level;
    }
  }
}));
const createStyler = (open, close, parent) => {
  let openAll;
  let closeAll;
  if (parent === void 0) {
    openAll = open;
    closeAll = close;
  } else {
    openAll = parent.openAll + open;
    closeAll = close + parent.closeAll;
  }
  return {
    open,
    close,
    openAll,
    closeAll,
    parent
  };
};
const createBuilder = (self2, _styler, _isEmpty) => {
  const builder = (...arguments_) => {
    if (isArray$7(arguments_[0]) && isArray$7(arguments_[0].raw)) {
      return applyStyle(builder, chalkTag(builder, ...arguments_));
    }
    return applyStyle(builder, arguments_.length === 1 ? "" + arguments_[0] : arguments_.join(" "));
  };
  Object.setPrototypeOf(builder, proto);
  builder._generator = self2;
  builder._styler = _styler;
  builder._isEmpty = _isEmpty;
  return builder;
};
const applyStyle = (self2, string) => {
  if (self2.level <= 0 || !string) {
    return self2._isEmpty ? "" : string;
  }
  let styler = self2._styler;
  if (styler === void 0) {
    return string;
  }
  const {openAll, closeAll} = styler;
  if (string.indexOf("") !== -1) {
    while (styler !== void 0) {
      string = stringReplaceAll(string, styler.close, styler.open);
      styler = styler.parent;
    }
  }
  const lfIndex = string.indexOf("\n");
  if (lfIndex !== -1) {
    string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
  }
  return openAll + string + closeAll;
};
let template$1;
const chalkTag = (chalk2, ...strings) => {
  const [firstString] = strings;
  if (!isArray$7(firstString) || !isArray$7(firstString.raw)) {
    return strings.join(" ");
  }
  const arguments_ = strings.slice(1);
  const parts = [firstString.raw[0]];
  for (let i2 = 1; i2 < firstString.length; i2++) {
    parts.push(String(arguments_[i2 - 1]).replace(/[{}\\]/g, "\\$&"), String(firstString.raw[i2]));
  }
  if (template$1 === void 0) {
    template$1 = templates;
  }
  return template$1(chalk2, parts.join(""));
};
Object.defineProperties(Chalk.prototype, styles);
const chalk = Chalk();
chalk.supportsColor = stdoutColor;
chalk.stderr = Chalk({level: stderrColor ? stderrColor.level : 0});
chalk.stderr.supportsColor = stderrColor;
var source$D = chalk;
function classInstance$1(object) {
  if (!object)
    return false;
  if (typeof object !== "object")
    return false;
  if (object.constructor && object.constructor.name === "Object")
    return false;
  if (Object.prototype.toString.call(object) === "[object Object]")
    return false;
  if (object.constructor === Object)
    return false;
  return true;
}
function deepMap$1(objectOrArray, processor, settings = {}, _path = []) {
  settings = deepMerge$1({
    classInstances: false,
    array: true,
    privateProps: false,
    cloneFirst: true
  }, settings);
  const isArray2 = Array.isArray(objectOrArray);
  const newObject = isArray2 ? [] : settings.cloneFirst ? Object.assign({}, objectOrArray) : objectOrArray;
  Object.keys(objectOrArray).forEach((prop) => {
    if (!settings.privateProps && prop.match(/^_/))
      return;
    if (plainObject$1(objectOrArray[prop]) || classInstance$1(objectOrArray[prop]) && settings.classInstances || Array.isArray(objectOrArray[prop]) && settings.array) {
      const res2 = deepMap$1(objectOrArray[prop], processor, settings, [
        ..._path,
        prop
      ]);
      if (isArray2) {
        newObject.push(res2);
      } else {
        newObject[prop] = res2;
      }
      return;
    }
    const res = processor({
      object: objectOrArray,
      prop,
      value: objectOrArray[prop],
      path: [..._path, prop].join(".")
    });
    if (res === -1) {
      delete objectOrArray[prop];
      return;
    }
    if (isArray2)
      newObject.push(res);
    else
      newObject[prop] = res;
  });
  return newObject;
}
function isMap$1(value) {
  return value instanceof Map;
}
function isArray$6(value) {
  return value && typeof value === "object" && value.constructor === Array;
}
function isBoolean$1(value) {
  return typeof value === "boolean";
}
function isFunction$4(value) {
  return value && {}.toString.call(value) === "[object Function]";
}
function isJson$1(value) {
  try {
    const res = JSON.parse(value);
    if (Object.keys(res).length)
      return true;
    return false;
  } catch (e2) {
    return false;
  }
  return true;
}
function isObject$3(value) {
  return value && typeof value === "object" && value.constructor === Object;
}
function mapToObject$1(map) {
  const obj = {};
  for (const [k2, v2] of map)
    obj[k2] = v2;
  return obj;
}
var decycle_1;
const isArray$5 = (e2) => Array.isArray(e2), isObject$2 = (e2) => Object.prototype.toString.call(e2).slice(8, -1) === "Object", validate$1 = (e2) => {
  if (e2 === void 0)
    throw new Error("This method requires one parameter");
  if (!isArray$5(e2) && !isObject$2(e2))
    throw new TypeError("This method only accepts arrays and objects");
}, isRef = (e2) => isObject$2(e2) && e2.hasOwnProperty("$ref") && Object.keys(e2).length === 1 && !!e2.$ref && e2.$ref.charAt(0) === "$", encycle = (arg) => {
  validate$1(arg);
  const recurs = (value) => isArray$5(value) || isObject$2(value) ? isArray$5(value) ? value.map((elem, i) => isRef(elem) ? (value[i] = eval("arg" + elem.$ref.slice(1)), value) : recurs(elem)) : Object.keys(value).reduce((accum, key) => (accum[key] = isRef(value[key]) ? eval("arg" + value[key].$ref.slice(1)) : recurs(value[key]), accum), value) : value;
  return recurs(arg);
}, findRef = (e2, r2) => Object.keys(r2).find((a2) => r2[a2] === e2), decycle = (e2) => {
  validate$1(e2);
  let r2 = {};
  const a2 = (e3, c2 = "$") => {
    const s2 = findRef(e3, r2);
    return s2 ? {$ref: s2} : isArray$5(e3) || isObject$2(e3) ? (r2[c2] = e3, isArray$5(e3) ? e3.map((e4, r3) => a2(e4, `${c2}[${r3}]`)) : Object.keys(e3).reduce((r3, s3) => (r3[s3] = a2(e3[s3], `${c2}.${s3}`), r3), {})) : e3;
  };
  return a2(e2);
};
decycle_1 = decycle, encycle;
function fn$4(value, settings = {}) {
  settings = deepMerge$1({
    beautify: true,
    highlight: true,
    verbose: true,
    theme: {
      number: source$D.yellow,
      default: source$D.white,
      keyword: source$D.blue,
      regexp: source$D.red,
      string: source$D.whiteBright,
      class: source$D.yellow,
      function: source$D.yellow,
      comment: source$D.gray,
      variable: source$D.red,
      attr: source$D.green
    }
  }, settings);
  if (typeof value === "string")
    return value;
  if (value === null)
    return null;
  if (value === void 0)
    return void 0;
  if (value instanceof Error) {
    const errorStr = value.toString();
    const stackStr = value.stack;
    const messageStr = value.message;
    if (settings.verbose) {
      return [
        `<red>${value.constructor.name || "Error"}</red>`,
        "",
        messageStr,
        "",
        stackStr
      ].join("\n");
    }
    return errorStr;
  }
  if (isMap$1(value)) {
    value = mapToObject$1(value);
  }
  if (isObject$3(value) || isArray$6(value) || isJson$1(value)) {
    try {
      value = decycle_1(value);
    } catch (e2) {
    }
    value = deepMap$1(value, ({value: value2}) => {
      if (value2 instanceof Map)
        return mapToObject$1(value2);
      return value2;
    });
    let prettyString = JSON.stringify(value, null, settings.beautify ? 4 : 0);
    prettyString = prettyString.replace(/"([^"]+)":/g, "$1:").replace(/\uFFFF/g, '\\"');
    if (settings.highlight)
      ;
    return prettyString;
  }
  if (isBoolean$1(value)) {
    if (value)
      return "true";
    else
      return "false";
  }
  if (isFunction$4(value)) {
    return "" + value;
  }
  let returnString = "";
  try {
    value = decycle_1(value);
    returnString = JSON.stringify(value, null, settings.beautify ? 4 : 0);
  } catch (e2) {
    try {
      returnString = value.toString();
    } catch (e3) {
      returnString = value;
    }
  }
  return returnString;
}
var __parse = (value) => {
  if (typeof value !== "string")
    return value;
  value = value.split("\u2800").join("").trim();
  try {
    return Function(`
      "use strict";
      return (${value});
    `)();
  } catch (e2) {
    return value;
  }
};
const __encryptedMessages$1 = {};
var __md5$1 = {
  encrypt: function(message) {
    if (typeof message !== "string")
      message = fn$4(message);
    const string = md5(message).toString();
    __encryptedMessages$1[string] = message;
    return string;
  },
  decrypt: function(message) {
    if (!__encryptedMessages$1[message]) {
      console.warn(`The message "${message}" cannot be decrypted...`);
      return;
    }
    const string = __encryptedMessages$1[message];
    delete __encryptedMessages$1[message];
    return __parse(string);
  }
};
function availableColors(settings) {
  settings = Object.assign({excludeBasics: false}, settings !== null && settings !== void 0 ? settings : {});
  const _colors = [
    "yellow",
    "cyan",
    "green",
    "magenta",
    "red",
    "blue",
    "grey",
    "gray"
  ];
  let colors = _colors;
  if (settings.excludeBasics) {
    colors = _colors.filter((c2) => {
      return c2 !== "white" && c2 !== "black" && c2 !== "grey" && c2 !== "gray";
    });
  }
  return colors;
}
function pickRandom(array) {
  return array[Math.round(Math.random() * (array.length - 1))];
}
const _colorUsedByScope = {};
const _colorsStack = {};
function getColorFor(ref, settings) {
  settings = deepMerge$1({
    scope: "default",
    excludeBasics: true
  }, settings !== null && settings !== void 0 ? settings : {});
  const availableColors$1 = availableColors(settings);
  const scopeId = __md5$1.encrypt(settings.scope);
  const refId = __md5$1.encrypt(ref);
  if (_colorsStack[`${scopeId}.${refId}`])
    return _colorsStack[`${scopeId}.${refId}`];
  if (!_colorUsedByScope[scopeId])
    _colorUsedByScope[scopeId] = [];
  if (_colorUsedByScope[scopeId].length >= availableColors$1.length) {
    const color = pickRandom(availableColors$1);
    _colorsStack[`${scopeId}.${refId}`] = color;
    return color;
  } else {
    for (let i2 = 0; i2 < availableColors$1.length; i2++) {
      if (_colorUsedByScope[scopeId].indexOf(availableColors$1[i2]) === -1) {
        _colorUsedByScope[scopeId].push(availableColors$1[i2]);
        _colorsStack[`${scopeId}.${refId}`] = availableColors$1[i2];
        return availableColors$1[i2];
      }
    }
  }
}
var __set = (obj, path2, value, settings = {}) => {
  settings = Object.assign({}, settings);
  if (!path2 || path2 === "" || path2 === ".") {
    obj = value;
    return;
  }
  path2 = path2.replace(/\[(\w+)\]/g, ".[$1]");
  const a2 = unquote(path2).split(/(?!\B"[^"]*)\.(?![^"]*"\B)/gm).map((p2) => unquote(p2));
  let o2 = obj;
  while (a2.length - 1) {
    const n2 = a2.shift();
    if (!(n2 in o2)) {
      if (a2[0].match(/^\[[0-9]+\]$/))
        o2[n2] = [];
      else
        o2[n2] = {};
    }
    o2 = o2[n2];
  }
  if (a2[0].match(/^\[[0-9]+\]$/)) {
    if (!Array.isArray(o2))
      o2 = [];
    o2.push(value);
  } else {
    o2[a2[0]] = value;
  }
  return get(obj, path2);
};
function toJson(object) {
  const newObj = {};
  deepMap$1(object, ({value, path: path2}) => {
    __set(newObj, path2, value);
    return value;
  }, {
    privateProps: false,
    classInstances: true
  });
  return newObj;
}
class SClass {
  constructor(settings = {}) {
    this._settings = {};
    this._interfacesStack = {};
    generateInterfacesStack(this);
    setSettings(this, settings);
    applyInterfaces(this);
    this.metas = getMetas(this);
    Object.defineProperty(this, "metas", {
      enumerable: true,
      value: getMetas(this)
    });
  }
  get formattedName() {
    var _a2, _b, _c;
    let name2 = `<yellow>${((_a2 = this.metas) === null || _a2 === void 0 ? void 0 : _a2.name) || ""}</yellow>`;
    if ((_b = this.metas) === null || _b === void 0 ? void 0 : _b.id) {
      name2 += ` <cyan>${(_c = this.metas) === null || _c === void 0 ? void 0 : _c.id}</cyan>`;
    }
    return name2;
  }
  static extends(Cls) {
    class SClass2 extends Cls {
      constructor(settings, ...args) {
        super(...args);
        this._settings = {};
        this._interfacesStack = {};
        generateInterfacesStack(this);
        setSettings(this, settings);
        applyInterfaces(this);
        this.metas = getMetas(this);
        Object.defineProperty(this, "metas", {
          enumerable: true,
          value: getMetas(this)
        });
      }
      get formattedName() {
        let name2 = `<yellow>${this.name || ""}</yellow>`;
        if (this.id) {
          name2 += ` <cyan>${this.id}</cyan>`;
        }
        return name2;
      }
      expose(instance, settings) {
        return expose(this, instance, settings);
      }
      applyInterface(name2, on) {
        return applyInterface(this, name2, on);
      }
      getInterface(name2) {
        return getInterface(this, name2);
      }
      toPlainObject() {
        return toPlainObject(this);
      }
    }
    return SClass2;
  }
  expose(instance, settings) {
    return expose(this, instance, settings);
  }
  applyInterface(name2, on) {
    return applyInterface(this, name2, on);
  }
  getInterface(name2) {
    return getInterface(this, name2);
  }
  toPlainObject() {
    return toPlainObject(this);
  }
}
function getMetas(ctx) {
  var _a2, _b, _c, _d, _e, _f, _g, _h;
  let name2 = `<yellow>${((_a2 = ctx._settings.metas) === null || _a2 === void 0 ? void 0 : _a2.name) || ""}</yellow>`;
  if ((_b = ctx._settings.metas) === null || _b === void 0 ? void 0 : _b.id) {
    name2 += ` <cyan>${ctx._settings.metas.id}</cyan>`;
  }
  const metasObj = {
    id: (_d = (_c = ctx._settings.metas) === null || _c === void 0 ? void 0 : _c.id) !== null && _d !== void 0 ? _d : ctx.constructor.name,
    name: (_f = (_e = ctx._settings.metas) === null || _e === void 0 ? void 0 : _e.name) !== null && _f !== void 0 ? _f : ctx.constructor.name,
    formattedName: name2,
    color: (_h = (_g = ctx._settings.metas) === null || _g === void 0 ? void 0 : _g.color) !== null && _h !== void 0 ? _h : "yellow"
  };
  return metasObj;
}
function generateInterfacesStack(ctx) {
  const extendsStack = fn$5(ctx, {
    includeBaseClass: true
  });
  Object.keys(extendsStack).forEach((className) => {
    const cls2 = extendsStack[className];
    if (cls2.interfaces) {
      ctx._interfacesStack[className] = cls2.interfaces;
    }
  });
}
function expose(ctx, instance, settings) {
  settings = deepMerge$1({
    as: void 0,
    props: []
  }, settings);
  if (settings.as && typeof settings.as === "string") {
    ctx[settings.as] = instance;
  }
  if (settings.props) {
    settings.props.forEach((prop) => {
      ctx[prop] = instance[prop].bind(instance);
    });
  }
}
function getInterfaceObj(ctx, name2) {
  let interfaceObj = get(ctx._interfacesStack, name2);
  if (!interfaceObj) {
    const keys = Object.keys(ctx._interfacesStack);
    for (let i2 = 0; i2 < keys.length; i2++) {
      const interfacesObj = ctx._interfacesStack[keys[i2]];
      if (interfacesObj[name2] !== void 0) {
        if (plainObject$1(interfacesObj[name2])) {
          interfaceObj = interfacesObj[name2];
        } else {
          interfaceObj = {
            apply: true,
            on: name2 === "settings" ? "_settings" : name2 === "this" ? ctx : void 0,
            class: interfacesObj[name2]
          };
        }
        break;
      }
    }
  }
  if (name2 === "settings" && interfaceObj.on === void 0) {
    if (ctx.settings !== void 0)
      interfaceObj.on = "settings";
    else if (ctx._settings !== void 0)
      interfaceObj.on = "_settings";
  }
  return interfaceObj;
}
function toPlainObject(ctx) {
  return toJson(ctx);
}
function getInterface(ctx, name2) {
  const interfaceObj = getInterfaceObj(ctx, name2);
  if (plainObject$1(interfaceObj))
    return interfaceObj.class;
  return interfaceObj;
}
function applyInterfaces(ctx) {
  const keys = Object.keys(ctx._interfacesStack);
  for (let i2 = keys.length - 1; i2 >= 0; i2--) {
    const interfacesObj = ctx._interfacesStack[keys[i2]];
    const className = keys[i2];
    Object.keys(interfacesObj).forEach((name2) => {
      const interfaceObj = interfacesObj[name2];
      let settings;
      if (plainObject$1(interfaceObj)) {
        settings = Object.assign({}, Object.assign({apply: true, on: name2 === "settings" ? "_settings" : name2 === "this" ? ctx : void 0}, interfaceObj));
      } else {
        settings = Object.assign({}, {
          apply: true,
          on: name2 === "settings" ? "_settings" : name2 === "this" ? ctx : void 0,
          class: interfaceObj
        });
      }
      if (settings.apply !== true)
        return;
      if (settings.on) {
        if (typeof settings.on === "string" && get(ctx, settings.on) !== void 0) {
          applyInterface(ctx, `${className}.${name2}`, settings.on);
        } else if (typeof settings.on === "object") {
          applyInterface(ctx, `${className}.${name2}`, settings.on);
        } else if (ctx[name2] !== void 0) {
          applyInterface(ctx, `${className}.${name2}`);
        }
      }
    });
  }
}
function applyInterface(ctx, name2, on = null) {
  const interfaceObj = getInterfaceObj(ctx, `${name2}`);
  if (!interfaceObj) {
    throw new Error(`You try to apply the interface named "<yellow>${name2}</yellow>" on the context "<cyan>${ctx.name}</cyan>" but it does not exists...`);
  }
  if (on !== void 0)
    interfaceObj.on = on;
  if (!interfaceObj) {
    throw `Sorry the the asked interface "<yellow>${name2}</yellow>" does not exists on the class "<cyan>${ctx.constructor.name}</cyan>"`;
  }
  if (name2.includes(".")) {
    name2 = name2.split(".").slice(1).join(".");
  }
  if (plainObject$1(interfaceObj)) {
    let onValue;
    if (interfaceObj.on && typeof interfaceObj.on === "string") {
      onValue = get(ctx, interfaceObj.on);
    } else if (interfaceObj.on && typeof interfaceObj.on === "object") {
      onValue = interfaceObj.on;
    } else {
      onValue = get(ctx, name2);
    }
    let applyId = ctx.constructor.name;
    if (ctx.id)
      applyId += `(${ctx.id})`;
    if (name2)
      applyId += `.${name2}`;
    if (interfaceObj.on && interfaceObj.on.constructor)
      applyId += `.${interfaceObj.on.constructor.name}`;
    if (interfaceObj.on && interfaceObj.on.id)
      applyId += `(${interfaceObj.on.id})`;
    let res;
    if (name2 === "this") {
      res = interfaceObj.class.apply(onValue || {}, {
        id: applyId,
        complete: true,
        throw: true
      });
      deepAssign(ctx, res.value);
      return ctx;
    } else {
      res = interfaceObj.class.apply(onValue, {
        id: applyId,
        complete: true,
        throw: true
      });
      if (interfaceObj.on && typeof interfaceObj.on === "object") {
        const returnValue = deepAssign(interfaceObj.on, res);
        return returnValue;
      } else if (interfaceObj.on && typeof interfaceObj.on === "string") {
        return deepAssign(get(ctx, interfaceObj.on), res);
      } else if (ctx[name2] !== void 0) {
        return ctx[name2];
      } else {
        return res;
      }
    }
  }
}
function setSettings(ctx, settings = {}) {
  var _a2;
  ctx._settings = settings;
  if (!ctx._settings.metas)
    ctx._settings.metas = {};
  if (!((_a2 = ctx._settings.metas) === null || _a2 === void 0 ? void 0 : _a2.id))
    ctx._settings.metas.id = ctx.constructor.name;
  if (!ctx.constructor.name.match(/^SConfig/)) {
    if (!ctx._settings.metas.color)
      ctx._settings.metas.color = getColorFor(ctx.constructor.name, {
        scope: "class"
      });
  } else if (!ctx._settings.metas.color)
    ctx._settings.metas.color = "yellow";
}
function isInteger(data) {
  return typeof data === "number" && !isNaN(data) && function(x2) {
    return (x2 | 0) === x2;
  }(parseFloat(data));
}
function upperFirst(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}
function typeOf(value, settings = {}) {
  settings = deepMerge$1({
    of: false,
    customClass: true
  }, settings);
  let type;
  if (Array.isArray(value))
    type = "Array";
  else if (value instanceof Map)
    type = "Map";
  else if (value === null)
    type = "Null";
  else if (value === void 0)
    type = "Undefined";
  else if (typeof value === "string")
    type = "String";
  else if (isInteger(value))
    type = "Integer";
  else if (typeof value === "number")
    type = "Number";
  else if (typeof value === "boolean")
    type = "Boolean";
  else if (value instanceof RegExp)
    type = "RegExp";
  else if (settings.customClass === true && cls$1(value) && value.name !== void 0) {
    type = upperFirst(value.name);
  } else if (settings.customClass === true && value.constructor !== void 0 && value.constructor.name !== void 0) {
    type = upperFirst(value.constructor.name);
  } else if (settings.customClass === false && cls$1(value)) {
    type = "Class";
  } else if (typeof value === "function")
    type = "Function";
  else if (typeof value === "object")
    type = "Object";
  else
    type = "Unknown";
  const avoidTypes = [
    "Null",
    "Undefined",
    "String",
    "Integer",
    "Number",
    "Boolean",
    "Unknown"
  ];
  if (settings.of === true && !avoidTypes.includes(type)) {
    const loopOn = Array.isArray(value) ? [...value.keys()] : Object.keys(value);
    const receivedTypes = [];
    loopOn.forEach((valueIndex) => {
      const valueToCheck = value[valueIndex];
      const childType = typeOf(valueToCheck, {
        of: false,
        customClass: settings.customClass
      });
      if (!receivedTypes.includes(childType)) {
        receivedTypes.push(childType);
      }
    });
    type += `<${receivedTypes.join("|")}>`;
  }
  return type;
}
const fn$3 = function(stack, callback, settings = {}) {
  settings = Object.assign({newStack: false}, settings);
  const stackType = typeOf(stack).toLowerCase();
  let loopOnKeys;
  if (stackType === "object")
    loopOnKeys = Object.keys(stack);
  else if (stackType === "array")
    loopOnKeys = Array.from(Array(stack.length).keys());
  else if (stackType === "number" || stackType === "integer")
    loopOnKeys = Array.from(Array(Math.round(stack)).keys());
  else if (stackType === "string")
    loopOnKeys = Array.from(stack);
  else if (stackType === "set")
    loopOnKeys = Array.from(stack);
  else
    loopOnKeys = Array.from(stack.keys());
  if (stackType === "string" || stackType === "number" || stackType === "integer" || stackType === "set")
    settings.newStack = true;
  let newStack = [];
  if (stackType === "object")
    newStack = {};
  else if (stackType === "map")
    newStack = new Map();
  else if (stackType === "set")
    newStack = new Set();
  let value;
  let newValue;
  const _get = (s2, k2) => {
    switch (typeOf(s2).toLowerCase()) {
      case "array":
      case "object":
        return s2[k2];
      case "string":
        return k2;
      case "number":
      case "integer":
        return k2;
      case "map":
        return s2.get(k2);
      case "set":
        return k2;
    }
  };
  const _set = (s2, k2, v2) => {
    switch (typeOf(s2).toLowerCase()) {
      case "array":
        if (settings.newStack === true)
          s2.push(v2);
        else
          s2[k2] = v2;
        break;
      case "object":
        s2[k2] = v2;
        break;
      case "number":
      case "integer":
      case "string":
        s2.push(v2);
        break;
      case "map":
        s2.set(k2, v2);
        break;
      case "set":
        s2.add(v2);
        break;
    }
  };
  for (let i2 = 0; i2 < loopOnKeys.length; i2++) {
    const key = loopOnKeys[i2];
    value = _get(stack, key);
    newValue = callback({key, prop: key, value, i: i2, idx: i2});
    if (newValue === -1)
      break;
    _set(settings.newStack ? newStack : stack, key, newValue);
  }
  if (stackType === "string") {
    return newStack.join("");
  }
  return settings.newStack ? newStack : stack;
};
source$D.level = 3;
const tagsMap = {
  black: (tag2, content) => source$D.black(content),
  red: (tag2, content) => source$D.red(content),
  green: (tag2, content) => source$D.green(content),
  yellow: (tag2, content) => source$D.yellow(content),
  blue: (tag2, content) => source$D.blue(content),
  magenta: (tag2, content) => source$D.magenta(content),
  cyan: (tag2, content) => source$D.cyan(content),
  white: (tag2, content) => source$D.white(content),
  grey: (tag2, content) => source$D.grey(content),
  bgBlack: (tag2, content) => source$D.bgBlack(content),
  bgRed: (tag2, content) => source$D.bgRed(content),
  bgGreen: (tag2, content) => source$D.bgGreen(content),
  bgYellow: (tag2, content) => source$D.bgYellow(content),
  bgBlue: (tag2, content) => source$D.bgBlue(content),
  bgMagenta: (tag2, content) => source$D.bgMagenta(content),
  bgCyan: (tag2, content) => source$D.bgCyan(content),
  bgWhite: (tag2, content) => source$D.bgWhite(content),
  bold: (tag2, content) => source$D.bold(content),
  dim: (tag2, content) => source$D.dim(content),
  italic: (tag2, content) => source$D.italic(content),
  underline: (tag2, content) => source$D.underline(content),
  strike: (tag2, content) => source$D.strike(content),
  h1: (tag2, content) => {
    return source$D.underline(source$D.bold(content)) + "\n\n";
  },
  h2: (tag2, content) => {
    return source$D.bold(content) + "\n";
  },
  date: (tag2, content) => new Date().getDate().toString().padStart("0", 2) + "-" + (new Date().getMonth() + 1).toString().padStart("0", 2) + "-" + new Date().getFullYear().toString().padStart("0", 2),
  time: (tag2, content) => new Date().getHours().toString().padStart("0", 2) + ":" + new Date().getMinutes().toString().padStart("0", 2) + ":" + new Date().getMinutes().toString().padStart("0", 2),
  day: (tag2, content) => new Date().getDate().toString().padStart("0", 2),
  days: (tag2, content) => new Date().getDate().toString().padStart("0", 2),
  month: (tag2, content) => new Date().getMonth().toString().padStart("0", 2),
  months: (tag2, content) => new Date().getMonth().toString().padStart("0", 2),
  year: (tag2, content) => new Date().getFullYear().toString().padStart("0", 2),
  years: (tag2, content) => new Date().getFullYear().toString().padStart("0", 2),
  hour: (tag2, content) => new Date().getHours().toString().padStart("0", 2),
  hours: (tag2, content) => new Date().getHours().toString().padStart("0", 2),
  minute: (tag2, content) => new Date().getMinutes().toString().padStart("0", 2),
  minutes: (tag2, content) => new Date().getMinutes().toString().padStart("0", 2),
  second: (tag2, content) => new Date().getSeconds().toString().padStart("0", 2),
  seconds: (tag2, content) => new Date().getSeconds().toString().padStart("0", 2),
  br: (tag2, content) => "\n"
};
function replaceTags(text, tags) {
  if (!text)
    text = "";
  text = fn$4(text);
  let oneLineText = text.replace(/\r\n/g, "|rn|");
  oneLineText = oneLineText.replace(/\n/g, "|n|");
  oneLineText = oneLineText.replace(/\r/g, "|r|");
  Object.keys(tags).forEach((tagName) => {
    const reg = new RegExp(`<s*${tagName}[^>]*>((.*?))<\\s*/\\s*${tagName}>`, "g");
    const tagsArray = oneLineText.match(reg);
    const singleReg = new RegExp(`\\s?<${tagName}\\s?/>\\s?`, "g");
    const singleTagsArray = oneLineText.match(singleReg);
    if (tagsArray) {
      for (let i2 = 0; i2 < tagsArray.length; i2++) {
        const t = tagsArray[i2];
        const tagArgs = t.match(`<\\s*${tagName}[^>]*>((.*?))<\\s*/\\s*${tagName}>`);
        if (!tagArgs)
          continue;
        const tagToReplace = tagArgs[0];
        const tagContent = tagArgs[1];
        oneLineText = oneLineText.replace(tagToReplace, tags[tagName](tagName, tagContent));
      }
    }
    if (singleTagsArray) {
      for (let i2 = 0; i2 < singleTagsArray.length; i2++) {
        const t = singleTagsArray[i2];
        const tagArgs = t.match(`\\s?<${tagName}\\s?/>\\s?`);
        if (!tagArgs)
          continue;
        const tagToReplace = tagArgs[0];
        const tagContent = "";
        oneLineText = oneLineText.replace(tagToReplace, tags[tagName](tagName, tagContent));
      }
    }
  });
  oneLineText = oneLineText.replace(/\|rn\|/g, "\r\n");
  oneLineText = oneLineText.replace(/\|n\|/g, "\n");
  oneLineText = oneLineText.replace(/\|r\|/g, "\r");
  return oneLineText;
}
function parseHtml(message) {
  let isArray2 = false;
  if (Array.isArray(message)) {
    isArray2 = true;
  } else {
    message = [message];
  }
  message = message.map((m2) => {
    return replaceTags(m2, tagsMap);
  });
  if (isArray2)
    return message;
  return message[0];
}
function parseSingleTypeString(typeString) {
  let ofStr = "", typeStr2 = typeString;
  const ofPartsString = typeString.match(/<(.+)>$/gm);
  if (ofPartsString && ofPartsString.length) {
    ofStr = ofPartsString[0].replace("<", "").replace(">", "");
  }
  if (ofStr !== "") {
    typeStr2 = typeStr2.replace(`<${ofStr}>`, "");
  }
  let ofTypes = ofStr !== "" ? [ofStr.toLowerCase()] : void 0;
  if (ofStr !== void 0 && ofStr.includes("|")) {
    ofTypes = ofStr.split("|").map((t) => t.trim().toLowerCase());
  }
  return {
    type: typeStr2,
    of: ofTypes
  };
}
const fn$2 = function parseTypeString(typeString) {
  typeString = typeString.toLowerCase().trim();
  typeString = typeString.split("|").map((part) => {
    part = part.trim().replace(/^([a-zA-Z0-9-_]+)\[\]$/, "array<$1>");
    return part;
  }).join("|");
  typeString = typeString.split("|").map((part) => {
    part = part.trim().replace(/^([a-zA-Z0-9-_]+)\{\}$/, "object<$1>");
    return part;
  }).join("|");
  let types = [], inGroup = false, currentStr = "";
  for (let i2 = 0; i2 < typeString.length; i2++) {
    const char = typeString[i2];
    if (char === "<") {
      inGroup = true;
      currentStr += char;
    } else if (char === ">") {
      inGroup = false;
      currentStr += char;
    } else if (char === "|") {
      if (inGroup === false) {
        types.push(currentStr);
        currentStr = "";
      } else {
        currentStr += char;
      }
    } else {
      currentStr += char;
    }
  }
  types.push(currentStr);
  const finalTypes = [];
  types.forEach((type) => {
    finalTypes.push(parseSingleTypeString(type));
  });
  const res = {
    raw: typeString,
    types: finalTypes
  };
  return res;
};
var __isNode$1 = () => {
  return typeof process !== "undefined" && process.release && process.release.name === "node";
};
class STypeResult {
  constructor(data) {
    this._data = data;
  }
  get typeString() {
    return this._data.typeString;
  }
  get value() {
    return this._data.value;
  }
  get received() {
    return this._data.received;
  }
  get expected() {
    return this._data.expected;
  }
  get issues() {
    return this._data.issues;
  }
  get settings() {
    return this._data.settings;
  }
  hasIssues() {
    if (this._data)
      return true;
    return false;
  }
  toString() {
    if (__isNode$1()) {
      return this.toConsole();
    } else {
      return `The method "toHtml" has not being integrated for now...`;
    }
  }
  toConsole() {
    const headerArray = [
      `<underline><magenta>${this._data.settings.name}</magenta></underline>`,
      "",
      "<underline>Received value</underline>",
      "",
      `${fn$4(this._data.value, {
        beautify: true
      })}`,
      ""
    ];
    const issuesArray = [];
    Object.keys(this._data.issues).forEach((ruleId) => {
      const issueObj = this._data.issues[ruleId];
      const message = [];
      if (issueObj.expected.type) {
        message.push(`- Expected "<yellow>${issueObj.expected.type}</yellow>"`);
      }
      if (issueObj.received.type) {
        message.push(`- Received "<red>${issueObj.received.type}</red>"`);
      }
      if (issueObj.message) {
        message.push(["<underline>Details:</underline>", issueObj.message].join("\n"));
      }
      issuesArray.push(message.join("\n"));
    });
    const settingsArray = [
      "",
      `<underline>Settings</underline>`,
      "",
      `${fn$4(this._data.settings, {
        beautify: true
      })}`
    ];
    return parseHtml(`
${headerArray.join("\n")}
${issuesArray.join("\n")}
${this.settings.verbose ? settingsArray.join("\n") : ""}
    `).trim();
  }
}
class SType {
  constructor(typeString, settings = {}) {
    this.typeString = typeString;
    typeString = typeString.toLowerCase().trim();
    if (this.constructor._instanciatedTypes[typeString] !== void 0)
      return this.constructor._instanciatedTypes[typeString];
    this.types = fn$2(typeString).types;
    this._settings = deepMerge$1({
      id: this.constructor.name,
      name: this.constructor.name,
      customTypes: true,
      interfaces: true
    }, settings);
    this.constructor._instanciatedTypes[typeString] = this;
  }
  static registerType(type) {
    if (type.id === void 0 || typeof type.id !== "string") {
      throw new Error(`Sorry but you try to register a type that does not fit the ISTypeDescriptor interface...`);
    }
    this._registeredTypes[type.id] = type;
  }
  is(value, settings = {}) {
    const res = this.check(value, settings);
    if (res === true)
      return true;
    else if (res instanceof STypeResult)
      return !res.hasIssues();
    return true;
  }
  check(value, settings = {}) {
    settings = deepMerge$1(this._settings, settings);
    const issues = {};
    for (let i2 = 0; i2 < this.types.length; i2++) {
      const typeObj = this.types[i2], typeId = typeObj.type;
      const res2 = this._isType(value, typeId, settings);
      if (res2 === true) {
        if (typeObj.of === void 0)
          return true;
        const typeOf$1 = typeOf(value);
        if (typeOf$1 !== "Array" && typeOf$1 !== "Object" && typeOf$1 !== "Map") {
          throw new Error(`Sorry but you have specified a type string "<yellow>${this.typeString}</yellow>" with some "<...>" definition on a type "<cyan>${typeOf$1}</cyan>" that does not support "child" value(s)...`);
        }
        const loopOn = typeOf$1 === "Object" ? Object.keys(value) : Array.from(value.keys());
        if (!loopOn.length)
          return true;
        for (let k2 = 0; k2 < loopOn.length; k2++) {
          for (let j2 = 0; j2 < typeObj.of.length; j2++) {
            const type = typeObj.of[j2];
            const idx = loopOn[k2];
            const v2 = typeOf$1 === "Map" ? value.get(idx) : value[idx];
            const ofRes = this._isType(v2, type, settings);
            if (ofRes !== true) {
              issues[typeObj.type] = {
                expected: {
                  type: typeObj.type
                },
                received: {
                  type: typeOf(v2),
                  value: v2
                }
              };
            } else {
              return true;
            }
          }
        }
      } else {
        const issueObj = {
          expected: {
            type: typeObj.type
          },
          received: {
            type: typeOf(value),
            value
          }
        };
        if (res2 !== void 0 && res2 !== null && res2 !== false && res2.toString && typeof res2.toString === "function") {
          issueObj.message = res2.toString();
        }
        issues[typeObj.type] = issueObj;
      }
    }
    const res = new STypeResult({
      typeString: this.typeString,
      value,
      expected: {
        type: this.typeString
      },
      received: {
        type: typeOf(value)
      },
      issues,
      settings
    });
    return res;
  }
  _isType(value, type, settings = {}) {
    settings = deepMerge$1(this._settings, settings);
    if (this.constructor._registeredTypes[type.toLowerCase()] === void 0) {
      if (settings.interfaces === true) {
        const availableInterfaceTypes = SInterface.getAvailableTypes();
        if (availableInterfaceTypes[type] !== void 0) {
          const res = availableInterfaceTypes[type].apply(value, {});
          return res;
        }
      }
      if (settings.customTypes === true) {
        const typeOf$1 = typeOf(value).toLowerCase();
        const extendsStack = Object.keys(fn$5(value)).map((s2) => s2.toLowerCase());
        if (type === typeOf$1 || extendsStack.indexOf(type) !== -1)
          return true;
      }
      throw new Error(`Sorry but you try to validate a value with the type "<yellow>${type}</yellow>" but this type is not registered...`);
    }
    return this.constructor._registeredTypes[type.toLowerCase()].is(value);
  }
  cast(value, params, settings) {
    settings = deepMerge$1(this._settings, settings);
    const verboseObj = {
      value,
      issues: {},
      settings,
      toString() {
        const strAr = Object.entries(this.issues);
        return strAr.map((l2) => l2[1]).join("\n");
      }
    };
    if (this.is(value)) {
      return value;
    }
    for (let i2 = 0; i2 < this.types.length; i2++) {
      const typeObj = this.types[i2], typeId = typeObj.type;
      const descriptorObj = this.constructor._registeredTypes[typeId.toLowerCase()];
      if (descriptorObj === void 0) {
        continue;
      }
      if (descriptorObj.cast === void 0)
        continue;
      let castedValue;
      castedValue = descriptorObj.cast(value, params);
      if (castedValue instanceof Error) {
        verboseObj.issues[typeId] = castedValue.toString();
        continue;
      }
      if (typeObj.of !== void 0 && this.canHaveChilds(castedValue) === false) {
        const issueStr = `Sorry but the passed type "<yellow>${typeId}</yellow>" has some child(s) dependencies "<green>${typeObj.of.join("|")}</green>" but this type can not have child(s)`;
        throw new Error(parseHtml(issueStr));
      } else if (typeObj.of !== void 0) {
        const sTypeInstance = new SType(typeObj.of.join("|"));
        castedValue = fn$3(castedValue, ({value: value2}) => {
          return sTypeInstance.cast(value2, params, settings);
        });
      }
      if (castedValue === null && descriptorObj.id === "null")
        return null;
      if (castedValue === void 0 && descriptorObj.id === "undefined")
        return void 0;
      if (castedValue !== null && castedValue !== void 0)
        return castedValue;
      verboseObj.issues[typeId] = `Something goes wrong but no details are available... Sorry`;
    }
    const stack = [
      `Sorry but the value of type "<cyan>${typeOf(value)}</cyan>" passed to be casted in type "<yellow>${this.typeString}</yellow>" can not be casted correctly. Here's why:
`
    ];
    Object.keys(verboseObj.issues).forEach((descriptorId) => {
      stack.push(`- <red>${descriptorId}</red>: ${verboseObj.issues[descriptorId]}`);
    });
    throw new Error(parseHtml(stack.join("\n")));
  }
  canHaveChilds(value) {
    const type = typeOf(value);
    return type === "Array" || type === "Object" || type === "Map";
  }
  get name() {
    return this._settings.name;
  }
  get id() {
    return this._settings.id;
  }
}
SType._instanciatedTypes = {};
SType._registeredTypes = {};
function isString$1(value) {
  return typeof value === "string" || value instanceof String;
}
const descriptor$g = {
  name: "String",
  id: "string",
  is: (value) => isString$1(value),
  cast: (value) => fn$4(value, {
    beautify: true
  })
};
const descriptor$f = {
  name: "Map",
  id: "map",
  is: (value) => isMap$1(value),
  cast: (value) => {
    if (isMap$1(value))
      return value;
    const map = new Map();
    map.set("value", value);
    return map;
  }
};
const descriptor$e = {
  name: "Object",
  id: "object",
  is: (value) => isObject$3(value),
  cast: (value) => {
    if (isObject$3(value))
      return value;
    return {
      value
    };
  }
};
const descriptor$d = {
  name: "Array",
  id: "array",
  is: (value) => {
    return Array.isArray(value);
  },
  cast: (value, params = {}) => {
    if (!value)
      return [];
    if (params.splitChars && Array.isArray(params.splitChars)) {
      value = value.split(new RegExp(`(${params.splitChars.join("|")})`, "gm")).filter((l2) => l2.trim() !== "" && params.splitChars.indexOf(l2) === -1);
    }
    if (Array.isArray(value))
      return value;
    return [value];
  }
};
const descriptor$c = {
  name: "Integer",
  id: "integer",
  is: (value) => Number.isInteger(value),
  cast: (value) => {
    if (typeof value !== "string" && typeof value !== "number") {
      return new Error(`Sorry but only strings and numbers can be casted to integers... Passed value: ${value}`);
    }
    const res = parseInt(value);
    if (isNaN(res))
      return new Error(`Sorry but the conversion of "<yellow>${value}</yellow>" to a <green>Integer</green> does not work...`);
    return res;
  }
};
const descriptor$b = {
  name: "Number",
  id: "number",
  is: (value) => typeof value === "number",
  cast: (value) => {
    if (typeof value !== "string") {
      return new Error(`Sorry but only strings can be casted to numbers...`);
    }
    const res = parseFloat(value);
    if (isNaN(res))
      return new Error(`Sorry but the conversion of "<yellow>${value}</yellow>" to a <green>Number</green> does not work...`);
    return res;
  }
};
const descriptor$a = {
  name: "Boolean",
  id: "boolean",
  is: (value) => typeof value === "boolean",
  cast: (value, params = {}) => {
    if (value !== false && params && params.nullishAsTrue && !value) {
      return true;
    }
    if (typeof value === "boolean")
      return value;
    if (value === null || value === void 0)
      return false;
    if (typeof value === "number") {
      if (value > 0)
        return true;
      return false;
    }
    if (typeof value === "string") {
      return value.length > 0 ? true : false;
    }
    if (Array.isArray(value)) {
      if (value.length > 0)
        return true;
      return false;
    }
    if (typeof value === "object") {
      return Object.keys(value).length > 0 ? true : false;
    }
    return new Error([
      `Sorry but for now only these types can be casted to boolean:`,
      "- <yellow>null</yellow>: Will be casted as <red>false</red>",
      "- <yellow>undefined</yellow>: Will be casted as <red>false</red>",
      "- <yellow>Number</yellow>: Will be casted as <green>true</green> when greater than 0, <red>false</red> otherwise",
      "- <yellow>String</yellow>: Will be casted as <green>true</green> when longer than 0 characters, <red>false</red> otherwise",
      "- <yellow>Array</yellow>: Will be casted as <green>true</green> when having more than 0 items, <red>false</red> otherwise",
      "- <yellow>Object</yellow>: Will be casted as <green>true</green> when have more than 0 properties, <red>false</red> otherwise"
    ].join("\n"));
  }
};
const descriptor$9 = {
  name: "Undefined",
  id: "undefined",
  is: (value) => value === void 0,
  cast: (value) => {
    return void 0;
  }
};
const descriptor$8 = {
  name: "Null",
  id: "null",
  is: (value) => value === null,
  cast: (value) => {
    return null;
  }
};
const descriptor$7 = {
  name: "Symbol",
  id: "symbol",
  is: (value) => typeof value === "symbol",
  cast: (value) => {
    if (typeof value === "symbol")
      return value;
    return Symbol(value);
  }
};
const descriptor$6 = {
  name: "Bigint",
  id: "bigint",
  is: (value) => typeof value === "bigint",
  cast: (value) => {
    if (typeof value === "bigint")
      return value;
    if (typeof value !== "string" && typeof value !== "number") {
      return new Error(`Sorry but only <yellow>String</yellow> and <yellow>Number</yellow> can be casted to <green>Bigint</green>`);
    }
    let res;
    try {
      res = BigInt(value);
    } catch (e2) {
      res = new Error(`It seem's that the passed value "<yellow>${value}</yellow>" can not be casted to a <green>BigInt</green>`);
    }
    return res;
  }
};
const descriptor$5 = {
  name: "Date",
  id: "date",
  is: (value) => value instanceof Date,
  cast: (value) => {
    if (typeof value === "string") {
      return new Date(value);
    }
    if (typeof value === "number") {
      return new Date(Math.round(value));
    }
    if (plainObject$1(value)) {
      const now = new Date();
      let year = now.getFullYear(), month = 0, day = 1, hours = 0, minutes = 0, seconds = 0, milliseconds = 0;
      if (value.year && typeof value.year === "number") {
        year = value.year;
      }
      if (value.month && typeof value.month === "number") {
        month = value.month;
      }
      if (value.day && typeof value.day === "number") {
        day = value.day;
      }
      if (value.hours && typeof value.hours === "number") {
        hours = value.hours;
      }
      if (value.minutes && typeof value.minutes === "number") {
        minutes = value.minutes;
      }
      if (value.seconds && typeof value.seconds === "number") {
        seconds = value.seconds;
      }
      if (value.milliseconds && typeof value.milliseconds === "number") {
        milliseconds = value.milliseconds;
      }
      return new Date(year, month, day, hours, minutes, seconds, milliseconds);
    }
    return new Error(`Sorry but for now only <yellow>String</yellow>, <yellow>Number</yellow> and <yellow>Object</yellow> (with properties: year, month, day?, hours?, minutes?, seconds? and milliseconds?) are castable to Date`);
  }
};
const descriptor$4 = {
  name: "Function",
  id: "function",
  is: (value) => typeof value === "function",
  cast: (value) => {
    return new Error(`Sorry but nothing is castable to a Function`);
  }
};
const descriptor$3 = {
  name: "WeakMap",
  id: "weakmap",
  is: (value) => value instanceof WeakMap,
  cast: (value) => {
    return new Error(`Sorry but nothing can be casted to a WeakMap for now`);
  }
};
const descriptor$2 = {
  name: "WeakSet",
  id: "weakset",
  is: (value) => value instanceof WeakSet,
  cast: (value) => {
    return new Error(`Sorry but nothing can be casted to a WeakSet for now`);
  }
};
const descriptor$1 = {
  name: "Set",
  id: "set",
  is: (value) => value instanceof Set,
  cast: (value) => {
    if (value instanceof Set)
      return value;
    const set2 = new Set();
    set2.add(value);
    return set2;
  }
};
const descriptor = {
  name: "Class",
  id: "class",
  is: (value) => cls$1(value),
  cast: (value) => {
    return new Error(`Sorry but nothing is castable to a Class`);
  }
};
SType.registerType(descriptor$g);
SType.registerType(descriptor$f);
SType.registerType(descriptor$e);
SType.registerType(descriptor$d);
SType.registerType(descriptor$c);
SType.registerType(descriptor$b);
SType.registerType(descriptor$a);
SType.registerType(descriptor$9);
SType.registerType(descriptor$8);
SType.registerType(descriptor$7);
SType.registerType(descriptor$6);
SType.registerType(descriptor$5);
SType.registerType(descriptor$4);
SType.registerType(descriptor$3);
SType.registerType(descriptor$2);
SType.registerType(descriptor$1);
SType.registerType(descriptor);
function ofType(value, typeString, settings = {}) {
  settings = Object.assign({verbose: false}, settings);
  const typeInstance = new SType(typeString, settings);
  const res = typeInstance.is(value);
  return res;
}
class SDescriptorResult extends SClass {
  constructor(descriptor2, value, descriptorSettings) {
    super({});
    this._issues = {};
    this._descriptor = descriptor2;
    this._descriptorSettings = descriptorSettings;
    try {
      this._originalValue = clone$1(value, {deep: true});
    } catch (e2) {
      this._originalValue = value;
    }
    this.value = value;
  }
  hasIssues() {
    return Object.keys(this._issues).length >= 1;
  }
  add(ruleResult) {
    if (!ruleResult.__ruleObj.id)
      return;
    this._issues[ruleResult.__ruleObj.id] = ruleResult;
  }
  toString() {
    if (__isNode$1()) {
      return this.toConsole();
    } else {
      return `The method "toHtml" has not being integrated for now...`;
    }
  }
  toConsole() {
    const headerArray = [
      `<underline><magenta>${this._descriptor.metas.name}</magenta></underline>`,
      "",
      `${fn$4(this.value, {
        beautify: true
      })}`,
      ""
    ];
    const issuesArray = [];
    Object.keys(this._issues).forEach((ruleId) => {
      const ruleResult = this._issues[ruleId];
      let message = "";
      if (ruleResult.__error && ruleResult.__error instanceof Error) {
        message = ruleResult.__error.message;
      } else if (ruleResult.__ruleObj.message !== void 0 && typeof ruleResult.__ruleObj.message === "function") {
        message = ruleResult.__ruleObj.message(ruleResult);
      } else if (ruleResult.__ruleObj.message !== void 0 && typeof ruleResult.__ruleObj.message === "string") {
        message = ruleResult.__ruleObj.message;
      }
      issuesArray.push(`-${typeof ruleResult.__propName === "string" ? ` [<magenta>${ruleResult.__propName}</magenta>]` : ""} <red>${ruleId}</red>: ${message}`);
    });
    const settingsArray = [
      "",
      `<underline>Settings</underline>`,
      "",
      `${fn$4(this._descriptorSettings, {
        beautify: true
      })}`
    ];
    return parseHtml(`
${headerArray.join("\n")}
${issuesArray.join("\n")}
${settingsArray.join("\n")}
    `).trim();
  }
}
/*!
* is-extglob <https://github.com/jonschlinkert/is-extglob>
*
* Copyright (c) 2014-2016, Jon Schlinkert.
* Licensed under the MIT License.
*/
var isExtglob$1 = function isExtglob2(str) {
  if (typeof str !== "string" || str === "") {
    return false;
  }
  var match2;
  while (match2 = /(\\).|([@?!+*]\(.*\))/g.exec(str)) {
    if (match2[2])
      return true;
    str = str.slice(match2.index + match2[0].length);
  }
  return false;
};
/*!
* is-glob <https://github.com/jonschlinkert/is-glob>
*
* Copyright (c) 2014-2017, Jon Schlinkert.
* Released under the MIT License.
*/
var isExtglob = isExtglob$1;
var chars = {"{": "}", "(": ")", "[": "]"};
var strictRegex = /\\(.)|(^!|\*|[\].+)]\?|\[[^\\\]]+\]|\{[^\\}]+\}|\(\?[:!=][^\\)]+\)|\([^|]+\|[^\\)]+\))/;
var relaxedRegex = /\\(.)|(^!|[*?{}()[\]]|\(\?)/;
var isGlob = function isGlob2(str, options) {
  if (typeof str !== "string" || str === "") {
    return false;
  }
  if (isExtglob(str)) {
    return true;
  }
  var regex = strictRegex;
  var match2;
  if (options && options.strict === false) {
    regex = relaxedRegex;
  }
  while (match2 = regex.exec(str)) {
    if (match2[2])
      return true;
    var idx = match2.index + match2[0].length;
    var open = match2[1];
    var close = open ? chars[open] : null;
    if (open && close) {
      var n2 = str.indexOf(close, idx);
      if (n2 !== -1) {
        idx = n2 + 1;
      }
    }
    str = str.slice(idx);
  }
  return false;
};
var __isGlob = (string) => {
  return isGlob(string);
};
class SDescriptor extends SClass {
  constructor(settings) {
    super(deepMerge$1({
      descriptor: {
        rules: {},
        type: "Object",
        arrayAsValue: false,
        throwOnMissingRule: false,
        complete: true
      }
    }, settings !== null && settings !== void 0 ? settings : {}));
  }
  static registerRule(rule) {
    if (rule.id === void 0 || typeof rule.id !== "string") {
      throw new Error(`Sorry but you try to register a rule that does not fit the ISDescriptionRule interface...`);
    }
    this._registeredRules[rule.id] = rule;
  }
  get descriptorSettings() {
    return this._settings.descriptor;
  }
  apply(value, settings) {
    const set2 = deepMerge$1(this.descriptorSettings, settings || {});
    if (value === void 0 || value === null)
      value = {};
    const valuesObjToProcess = {}, finalValuesObj = {};
    this._descriptorResult = new SDescriptorResult(this, finalValuesObj, Object.assign({}, set2));
    const rules2 = set2.rules;
    if (!ofType(value, set2.type)) {
      throw new Error(`Sorry but this descriptor "<yellow>${this.metas.name}</yellow>" does not accept values of type "<cyan>${typeOf(value)}</cyan>" but only "<green>${set2.type}</green>"...`);
    }
    if (Array.isArray(value) && !set2.arrayAsValue) {
      throw new Error(`Sorry but the support for arrays like values has not been integrated for not...`);
    } else if (typeof value === "object" && value !== null && value !== void 0) {
      Object.keys(rules2).forEach((propName) => {
        if (__isGlob(propName) && value)
          ;
        else {
          valuesObjToProcess[propName] = get(value, propName);
        }
      });
      Object.keys(valuesObjToProcess).forEach((propName) => {
        const ruleObj2 = rules2[propName];
        if (valuesObjToProcess[propName] === void 0 && set2.complete && ruleObj2.default !== void 0) {
          valuesObjToProcess[propName] = ruleObj2.default;
        }
        if (ruleObj2.interface !== void 0) {
          const interfaceValue = valuesObjToProcess[propName];
          valuesObjToProcess[propName] = ruleObj2.interface.apply(interfaceValue || {}, {
            complete: true
          });
        }
        const validationResult = this._validate(valuesObjToProcess[propName], propName, ruleObj2, set2);
        if (validationResult !== void 0 && validationResult !== null) {
          __set(finalValuesObj, propName, validationResult);
        }
      });
    } else {
      console.warn(value);
      throw new Error(`You can apply an <yellow>SDescriptor</yellow> only on an Object like value...`);
    }
    if (this._descriptorResult.hasIssues()) {
      throw new Error(this._descriptorResult.toString());
    }
    return this._descriptorResult;
  }
  _validate(value, propName, rulesObj, settings) {
    if (rulesObj === void 0)
      return value;
    if (rulesObj.required === void 0 || rulesObj.required === false) {
      if (value === void 0 || value === null)
        return value;
    }
    let rulesNamesInOrder = Object.keys(rulesObj).filter((l2) => l2 !== "default");
    rulesNamesInOrder = rulesNamesInOrder.sort((a2, b) => {
      const objA = this.constructor._registeredRules[a2];
      const objB = this.constructor._registeredRules[b];
      if (!objA)
        return -1;
      if (!objB)
        return 1;
      if (objA.priority === void 0)
        objA.priority = 9999999999;
      if (objB.priority === void 0)
        objB.priority = 9999999999;
      return objA.priotity - objB.priority;
    }).reverse();
    let resultValue = value;
    rulesNamesInOrder.forEach((ruleName) => {
      const ruleValue = rulesObj[ruleName];
      if (this.constructor._registeredRules[ruleName] === void 0) {
        if (settings.throwOnMissingRule) {
          throw new Error(`Sorry but you try to validate a value using the "<yellow>${ruleName}</yellow>" rule but this rule is not registered. Here's the available rules:
              - ${Object.keys(this.constructor._registeredRules).join("\n- ")}`);
        }
      } else {
        const ruleObj2 = this.constructor._registeredRules[ruleName];
        const params = ruleObj2.processParams !== void 0 ? ruleObj2.processParams(ruleValue) : ruleValue;
        const ruleSettings = ruleObj2.settings !== void 0 ? ruleObj2.settings : {};
        if (ruleSettings.mapOnArray && Array.isArray(resultValue)) {
          let newResultValue = [];
          resultValue.forEach((v2) => {
            const processedValue = this._processRule(v2, ruleObj2, propName, params, ruleSettings, settings);
            if (Array.isArray(processedValue)) {
              newResultValue = [...newResultValue, ...processedValue];
            } else {
              newResultValue.push(processedValue);
            }
          });
          resultValue = newResultValue;
        } else {
          const processedValue = this._processRule(resultValue, ruleObj2, propName, params, ruleSettings, settings);
          resultValue = processedValue;
        }
      }
    });
    return resultValue;
  }
  _processRule(value, ruleObj2, propName, params, ruleSettings, settings) {
    const ruleResult = ruleObj2.apply(value, params, ruleSettings, Object.assign(Object.assign({}, settings), {propName, name: `${settings.name}.${propName}`}));
    if (params && params.type && params.type.toLowerCase() === "boolean" && ruleResult === true) {
      return true;
    }
    if (ruleResult instanceof Error) {
      const obj = {
        __error: ruleResult,
        __ruleObj: ruleObj2,
        __propName: propName
      };
      if (this._descriptorResult) {
        this._descriptorResult.add(obj);
        throw new Error(this._descriptorResult.toString());
      }
    } else {
      return ruleResult;
    }
  }
}
SDescriptor._registeredRules = {};
SDescriptor.rules = {};
SDescriptor.type = "Object";
const ruleObj$3 = {
  priority: 1,
  name: "Required",
  id: "required",
  settings: {
    when: [void 0, null]
  },
  message: "This value is required",
  processParams: (params) => {
    return {value: params};
  },
  apply: (value, params, ruleSettings, settings) => {
    if (params.value === true) {
      if (ruleSettings.when.indexOf(value) !== -1) {
        return new Error("This property is <yellow>required</yellow>");
      }
    }
    return value;
  }
};
const ruleObj$2 = {
  prority: 10,
  name: "Type",
  id: "type",
  settings: {},
  processParams: (params) => {
    var _a2, _b;
    if (!(params === null || params === void 0 ? void 0 : params.type) && typeof params !== "string") {
      throw new Error(`<yellow>[sugar.shared.type.descriptors.typeRule]</yellow> Sorry but to use the <magenta>type</magenta> descriptor rule you need to specify a type string either directly under the "type" property, or in an object under the "type.type" property...`);
    }
    return Object.assign(Object.assign({}, typeof params !== "string" ? params : {}), {type: (_a2 = params.type) !== null && _a2 !== void 0 ? _a2 : params, cast: (_b = params.cast) !== null && _b !== void 0 ? _b : true});
  },
  apply: (value, params, ruleSettings, settings) => {
    const type = new SType(params.type, {
      metas: {
        id: settings.id
      }
    });
    if (params.cast && !type.is(value)) {
      value = type.cast(value, params);
    }
    if (!type.is(value)) {
      return new Error(`The value must be of type "<yellow>${params.type}</yellow>" but you've passed a value of type "<cyan>${typeof value}</cyan>"`);
    }
    return value;
  }
};
const ruleObj$1 = {
  name: "Min",
  id: "min",
  settings: {},
  accept: "Number",
  message: (resultObj) => {
    return `This value has to be minimum "<yellow>${resultObj.min}</yellow>". Received "<red>${resultObj.received}</red>"`;
  },
  processParams: (params) => {
    return {value: params};
  },
  apply: (value, params, ruleSettings, settings) => {
    if (value < params.value) {
      return new Error(`<red>[minRule]</red> Sorry but the passed value "<yellow>${value}</yellow>" must be greater or equal at <cyan>${params.value}</cyan>`);
    }
    return value;
  }
};
const ruleObj = {
  name: "Max",
  id: "max",
  settings: {},
  accept: "Number",
  message: (resultObj) => {
    return `This value has to be maximum "<yellow>${resultObj.max}</yellow>". Received "<red>${resultObj.received}</red>"`;
  },
  processParams: (params) => {
    return {value: params};
  },
  apply: (value, params, ruleSettings, settings) => {
    if (value > params.value) {
      return new Error(`<red>[minRule]</red> Sorry but the passed value "<yellow>${value}</yellow>" must be lower or equal at <cyan>${params.value}</cyan>`);
    }
    return value;
  }
};
SDescriptor.registerRule(ruleObj$3);
SDescriptor.registerRule(ruleObj$2);
SDescriptor.registerRule(ruleObj$1);
SDescriptor.registerRule(ruleObj);
function parseArgs(string, settings = {}) {
  settings = deepMerge$1({
    throw: true,
    defaultObj: {},
    cast: true,
    valueQuote: void 0
  }, settings);
  string = string.trim();
  string = string.replace(/(["'`])--/gm, "$1--\xA7 --");
  let valueQuote = settings.valueQuote;
  if (!valueQuote) {
    for (let i2 = 0; i2 < string.length; i2++) {
      const char = string[i2];
      if (char === '"' || char === "`" || char === "'") {
        valueQuote = char;
        break;
      }
    }
    if (!valueQuote)
      valueQuote = '"';
  }
  let stringArray = [];
  let isFunctionStyle = false;
  if (string.match(/^\(/) && string.match(/\)$/)) {
    isFunctionStyle = true;
    string = string.slice(1, -1);
    let currentStr = "";
    let parenthesisCount = 0;
    let quotesCount = 0;
    for (let i2 = 0; i2 < string.length; i2++) {
      const char = string[i2];
      const previousChar = string[i2 - 1] || string[0];
      if (char === valueQuote && previousChar !== "\\" && !quotesCount) {
        quotesCount++;
      } else if (char === valueQuote && previousChar !== "\\" && quotesCount) {
        quotesCount--;
      }
      if (!quotesCount && char === "(") {
        parenthesisCount++;
      } else if (!quotesCount && char === ")") {
        parenthesisCount--;
      }
      if (char === ",") {
        if (quotesCount || parenthesisCount) {
          currentStr += char;
        } else {
          stringArray.push(currentStr.trim());
          currentStr = "";
        }
      } else {
        currentStr += char;
      }
    }
    if (parenthesisCount)
      currentStr += ")".repeat(parenthesisCount);
    stringArray.push(currentStr.trim());
  } else {
    let currentStr = "";
    let quotesCount = false;
    for (let i2 = 0; i2 < string.length; i2++) {
      const char = string[i2];
      const previousChar = string[i2 - 1] || string[0];
      if (char === valueQuote && previousChar !== "\\" && !quotesCount) {
        quotesCount = true;
      } else if (char === valueQuote && previousChar !== "\\" && quotesCount) {
        quotesCount = false;
      }
      if (char === " ") {
        if (quotesCount) {
          currentStr += char;
        } else {
          stringArray.push(currentStr.trim());
          currentStr = "";
        }
      } else {
        currentStr += char;
      }
    }
    stringArray.push(currentStr.trim());
  }
  stringArray = stringArray.map((item) => unquote(item));
  const argsObj = {};
  let currentArgName = void 0;
  let currentValue;
  stringArray = stringArray.forEach((part, i2) => {
    if (!isFunctionStyle && !part.includes(" ") && (part.slice(0, 2) === "--" || part.slice(0, 1) === "-")) {
      if (currentValue === void 0 && currentArgName !== -1 && currentArgName && argsObj[currentArgName] === void 0) {
        argsObj[currentArgName] = true;
      }
      currentArgName = part.replace(/^[-]{1,2}/, "");
      if (argsObj[currentArgName] === void 0) {
        argsObj[currentArgName] = true;
      }
    } else {
      let value;
      if (part && typeof part === "string") {
        value = part.replace(/^\\\\\\`/, "").replace(/\\\\\\`$/, "").replace(/^'/, "").replace(/'$/, "").replace(/^"/, "").replace(/"$/, "");
        if (value.match(/^\$[a-zA-Z0-9-_]+\s?:.*/)) {
          const parts = part.split(":");
          currentArgName = parts[0].trim().replace(/^\$/, "");
          value = parts.slice(1).join(":").trim();
        }
      }
      currentValue = __parse(value);
      if (typeof currentValue === "string") {
        currentValue = currentValue.replace("--\xA7 ", "");
      }
      if (currentArgName !== void 0) {
        if (argsObj[currentArgName] !== void 0 && argsObj[currentArgName] !== true) {
          if (!Array.isArray(argsObj[currentArgName])) {
            argsObj[currentArgName] = [argsObj[currentArgName]];
          }
          argsObj[currentArgName].push(currentValue);
        } else {
          argsObj[currentArgName] = currentValue;
        }
        currentValue = void 0;
        currentArgName = void 0;
      } else {
        argsObj[i2] = currentValue;
      }
    }
  });
  Object.keys(argsObj).forEach((key) => {
    const value = argsObj[key];
    if (value === void 0)
      delete argsObj[key];
  });
  return argsObj;
}
function getAvailableInterfaceTypes() {
  if (global !== void 0)
    return global._registeredInterfacesTypes || {};
  else if (window !== void 0)
    return window._registeredInterfacesTypes || {};
  else
    return {};
}
if (__isNode$1())
  global._registeredInterfacesTypes = {};
else
  window._registeredInterfacesTypes = {};
class SInterface extends SClass {
  constructor(settings) {
    super(deepMerge$1({
      interface: {}
    }, settings !== null && settings !== void 0 ? settings : {}));
    this._definition = {};
    this._definition = this.constructor.definition;
  }
  static get definition() {
    if (!this._definition.help) {
      this._definition.help = {
        type: "Boolean",
        description: `Display the help for this "<yellow>${this.name}</yellow>" interface...`,
        default: false
      };
    }
    return this._definition;
  }
  static set definition(value) {
    this._definition = value;
  }
  get interfaceSettings() {
    return this._settings.interface;
  }
  static registerRenderer(rendererClass) {
    if (!rendererClass.id) {
      throw new Error(`Sorry but the interface renderer "<yellow>${rendererClass.name}</yellow>" that you want to register is missing the required <yellow>static</yellow> <green>id</green> property...`);
    }
    this._registeredRenderers[rendererClass.id] = rendererClass;
  }
  static override(definition) {
    const _this = this;
    class SInterfaceOverrided extends this {
    }
    SInterfaceOverrided.overridedName = `${_this.name} (overrided)`;
    SInterfaceOverrided.definition = deepMerge$1(_this.definition, definition);
    return SInterfaceOverrided;
  }
  static getAvailableTypes() {
    return getAvailableInterfaceTypes();
  }
  static makeAvailableAsType(name2 = null) {
    const n2 = (name2 || this.name).toLowerCase();
    if (global !== void 0) {
      global._registeredInterfacesTypes[n2] = this;
      global._registeredInterfacesTypes[n2.replace("interface", "")] = this;
    } else if (window !== void 0) {
      window._registeredInterfacesTypes[n2] = this;
      window._registeredInterfacesTypes[n2.replace("interface", "")] = this;
    }
  }
  static defaults() {
    var _a2;
    return (_a2 = this.apply({}, {})) !== null && _a2 !== void 0 ? _a2 : {};
  }
  static apply(objectOrString, settings) {
    const int = new this({
      interface: settings !== null && settings !== void 0 ? settings : {}
    });
    return int.apply(objectOrString);
  }
  static render(renderer = "terminal", settings) {
    const set2 = deepMerge$1({
      renderer: "terminal",
      exclude: ["help"]
    }, settings);
    if (!this._registeredRenderers[renderer]) {
      throw new Error(`Sorry but the requested renderer "<yellow>${renderer}</yellow>" does not exists... Here's the available renderers: <green>${Object.keys(this._registeredRenderers).join(", ")}</green>`);
    }
    const rendererInstance = new this._registeredRenderers[renderer](this, set2);
    return rendererInstance.render();
  }
  apply(objectOrString, settings) {
    var _a2;
    const set2 = deepMerge$1(this.interfaceSettings, settings !== null && settings !== void 0 ? settings : {});
    let objectOnWhichToApplyInterface = objectOrString;
    if (typeof objectOrString === "string") {
      objectOnWhichToApplyInterface = parseArgs(objectOrString);
      Object.keys(objectOnWhichToApplyInterface).forEach((argName) => {
        for (let i2 = 0; i2 < Object.keys(this._definition).length; i2++) {
          const defArgName = Object.keys(this._definition)[i2];
          const obj = this._definition[defArgName];
          if (obj.explicit) {
            if (obj.alias && ` ${objectOrString} `.match(new RegExp(`\\s-${obj.alias}\\s`)))
              return;
            else if (` ${objectOrString} `.match(new RegExp(`\\s--${argName}\\s`)))
              return;
            delete objectOnWhichToApplyInterface[argName];
          }
        }
      });
      Object.keys(objectOnWhichToApplyInterface).forEach((argName) => {
        for (let i2 = 0; i2 < Object.keys(this._definition).length; i2++) {
          const defArgName = Object.keys(this._definition)[i2];
          const obj = this._definition[defArgName];
          if (!obj.alias)
            continue;
          if (obj.alias === argName && objectOnWhichToApplyInterface[defArgName] === void 0) {
            objectOnWhichToApplyInterface[defArgName] = objectOnWhichToApplyInterface[argName];
            delete objectOnWhichToApplyInterface[argName];
          }
        }
      });
      Object.keys(objectOnWhichToApplyInterface).forEach((argName, i2) => {
        if (argName === `${i2}`) {
          const definitionKeys = Object.keys(this._definition);
          if (definitionKeys[i2]) {
            objectOnWhichToApplyInterface[definitionKeys[i2]] = objectOnWhichToApplyInterface[argName];
          }
          delete objectOnWhichToApplyInterface[argName];
        }
      });
    }
    const descriptor2 = new SDescriptor({
      descriptor: Object.assign({type: "Object", rules: this._definition}, (_a2 = set2.descriptor) !== null && _a2 !== void 0 ? _a2 : {})
    });
    if (set2.baseObj) {
      objectOnWhichToApplyInterface = deepMerge$1(set2.baseObj, objectOnWhichToApplyInterface);
    }
    const descriptorResult = descriptor2.apply(objectOnWhichToApplyInterface);
    if (descriptorResult.hasIssues()) {
      throw new Error(descriptorResult.toString());
    }
    return descriptorResult.value;
  }
}
SInterface._definition = {};
SInterface._registeredRenderers = {};
class e extends SInterface {
}
e.definition = {src: {type: "String", required: true, alias: "s"}};
const n$4 = {css: 's-inline-svg,[is="s-inline-svg"]{ display: inline-block; }', exports: {async onBeforeMount() {
  this.$props = e.apply(this.props).value;
  const s2 = await fetch(this.$props.src), i2 = await s2.text();
  this.root.innerHTML = i2;
}}, template: null, name: "s-inline-svg"};
register("s-inline-svg", n$4), mount("s-inline-svg");
/*!
* mustache.js - Logic-less {{mustache}} templates with JavaScript
* http://github.com/janl/mustache.js
*/
var objectToString = Object.prototype.toString;
var isArray$4 = Array.isArray || function isArrayPolyfill(object) {
  return objectToString.call(object) === "[object Array]";
};
function isFunction$3(object) {
  return typeof object === "function";
}
function typeStr(obj) {
  return isArray$4(obj) ? "array" : typeof obj;
}
function escapeRegExp(string) {
  return string.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
}
function hasProperty(obj, propName) {
  return obj != null && typeof obj === "object" && propName in obj;
}
function primitiveHasOwnProperty(primitive, propName) {
  return primitive != null && typeof primitive !== "object" && primitive.hasOwnProperty && primitive.hasOwnProperty(propName);
}
var regExpTest = RegExp.prototype.test;
function testRegExp(re, string) {
  return regExpTest.call(re, string);
}
var nonSpaceRe = /\S/;
function isWhitespace$1(string) {
  return !testRegExp(nonSpaceRe, string);
}
var entityMap = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;",
  "/": "&#x2F;",
  "`": "&#x60;",
  "=": "&#x3D;"
};
function escapeHtml(string) {
  return String(string).replace(/[&<>"'`=\/]/g, function fromEntityMap(s2) {
    return entityMap[s2];
  });
}
var whiteRe = /\s*/;
var spaceRe = /\s+/;
var equalsRe = /\s*=/;
var curlyRe = /\s*\}/;
var tagRe = /#|\^|\/|>|\{|&|=|!/;
function parseTemplate(template2, tags) {
  if (!template2)
    return [];
  var lineHasNonSpace = false;
  var sections = [];
  var tokens = [];
  var spaces = [];
  var hasTag = false;
  var nonSpace = false;
  var indentation = "";
  var tagIndex = 0;
  function stripSpace() {
    if (hasTag && !nonSpace) {
      while (spaces.length)
        delete tokens[spaces.pop()];
    } else {
      spaces = [];
    }
    hasTag = false;
    nonSpace = false;
  }
  var openingTagRe, closingTagRe, closingCurlyRe;
  function compileTags(tagsToCompile) {
    if (typeof tagsToCompile === "string")
      tagsToCompile = tagsToCompile.split(spaceRe, 2);
    if (!isArray$4(tagsToCompile) || tagsToCompile.length !== 2)
      throw new Error("Invalid tags: " + tagsToCompile);
    openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + "\\s*");
    closingTagRe = new RegExp("\\s*" + escapeRegExp(tagsToCompile[1]));
    closingCurlyRe = new RegExp("\\s*" + escapeRegExp("}" + tagsToCompile[1]));
  }
  compileTags(tags || mustache.tags);
  var scanner = new Scanner(template2);
  var start, type, value, chr, token, openSection;
  while (!scanner.eos()) {
    start = scanner.pos;
    value = scanner.scanUntil(openingTagRe);
    if (value) {
      for (var i2 = 0, valueLength = value.length; i2 < valueLength; ++i2) {
        chr = value.charAt(i2);
        if (isWhitespace$1(chr)) {
          spaces.push(tokens.length);
          indentation += chr;
        } else {
          nonSpace = true;
          lineHasNonSpace = true;
          indentation += " ";
        }
        tokens.push(["text", chr, start, start + 1]);
        start += 1;
        if (chr === "\n") {
          stripSpace();
          indentation = "";
          tagIndex = 0;
          lineHasNonSpace = false;
        }
      }
    }
    if (!scanner.scan(openingTagRe))
      break;
    hasTag = true;
    type = scanner.scan(tagRe) || "name";
    scanner.scan(whiteRe);
    if (type === "=") {
      value = scanner.scanUntil(equalsRe);
      scanner.scan(equalsRe);
      scanner.scanUntil(closingTagRe);
    } else if (type === "{") {
      value = scanner.scanUntil(closingCurlyRe);
      scanner.scan(curlyRe);
      scanner.scanUntil(closingTagRe);
      type = "&";
    } else {
      value = scanner.scanUntil(closingTagRe);
    }
    if (!scanner.scan(closingTagRe))
      throw new Error("Unclosed tag at " + scanner.pos);
    if (type == ">") {
      token = [type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace];
    } else {
      token = [type, value, start, scanner.pos];
    }
    tagIndex++;
    tokens.push(token);
    if (type === "#" || type === "^") {
      sections.push(token);
    } else if (type === "/") {
      openSection = sections.pop();
      if (!openSection)
        throw new Error('Unopened section "' + value + '" at ' + start);
      if (openSection[1] !== value)
        throw new Error('Unclosed section "' + openSection[1] + '" at ' + start);
    } else if (type === "name" || type === "{" || type === "&") {
      nonSpace = true;
    } else if (type === "=") {
      compileTags(value);
    }
  }
  stripSpace();
  openSection = sections.pop();
  if (openSection)
    throw new Error('Unclosed section "' + openSection[1] + '" at ' + scanner.pos);
  return nestTokens(squashTokens(tokens));
}
function squashTokens(tokens) {
  var squashedTokens = [];
  var token, lastToken;
  for (var i2 = 0, numTokens = tokens.length; i2 < numTokens; ++i2) {
    token = tokens[i2];
    if (token) {
      if (token[0] === "text" && lastToken && lastToken[0] === "text") {
        lastToken[1] += token[1];
        lastToken[3] = token[3];
      } else {
        squashedTokens.push(token);
        lastToken = token;
      }
    }
  }
  return squashedTokens;
}
function nestTokens(tokens) {
  var nestedTokens = [];
  var collector = nestedTokens;
  var sections = [];
  var token, section;
  for (var i2 = 0, numTokens = tokens.length; i2 < numTokens; ++i2) {
    token = tokens[i2];
    switch (token[0]) {
      case "#":
      case "^":
        collector.push(token);
        sections.push(token);
        collector = token[4] = [];
        break;
      case "/":
        section = sections.pop();
        section[5] = token[2];
        collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;
        break;
      default:
        collector.push(token);
    }
  }
  return nestedTokens;
}
function Scanner(string) {
  this.string = string;
  this.tail = string;
  this.pos = 0;
}
Scanner.prototype.eos = function eos() {
  return this.tail === "";
};
Scanner.prototype.scan = function scan(re) {
  var match2 = this.tail.match(re);
  if (!match2 || match2.index !== 0)
    return "";
  var string = match2[0];
  this.tail = this.tail.substring(string.length);
  this.pos += string.length;
  return string;
};
Scanner.prototype.scanUntil = function scanUntil(re) {
  var index = this.tail.search(re), match2;
  switch (index) {
    case -1:
      match2 = this.tail;
      this.tail = "";
      break;
    case 0:
      match2 = "";
      break;
    default:
      match2 = this.tail.substring(0, index);
      this.tail = this.tail.substring(index);
  }
  this.pos += match2.length;
  return match2;
};
function Context(view, parentContext) {
  this.view = view;
  this.cache = {".": this.view};
  this.parent = parentContext;
}
Context.prototype.push = function push(view) {
  return new Context(view, this);
};
Context.prototype.lookup = function lookup2(name2) {
  var cache = this.cache;
  var value;
  if (cache.hasOwnProperty(name2)) {
    value = cache[name2];
  } else {
    var context = this, intermediateValue, names, index, lookupHit = false;
    while (context) {
      if (name2.indexOf(".") > 0) {
        intermediateValue = context.view;
        names = name2.split(".");
        index = 0;
        while (intermediateValue != null && index < names.length) {
          if (index === names.length - 1)
            lookupHit = hasProperty(intermediateValue, names[index]) || primitiveHasOwnProperty(intermediateValue, names[index]);
          intermediateValue = intermediateValue[names[index++]];
        }
      } else {
        intermediateValue = context.view[name2];
        lookupHit = hasProperty(context.view, name2);
      }
      if (lookupHit) {
        value = intermediateValue;
        break;
      }
      context = context.parent;
    }
    cache[name2] = value;
  }
  if (isFunction$3(value))
    value = value.call(this.view);
  return value;
};
function Writer() {
  this.templateCache = {
    _cache: {},
    set: function set2(key, value) {
      this._cache[key] = value;
    },
    get: function get2(key) {
      return this._cache[key];
    },
    clear: function clear() {
      this._cache = {};
    }
  };
}
Writer.prototype.clearCache = function clearCache() {
  if (typeof this.templateCache !== "undefined") {
    this.templateCache.clear();
  }
};
Writer.prototype.parse = function parse2(template2, tags) {
  var cache = this.templateCache;
  var cacheKey = template2 + ":" + (tags || mustache.tags).join(":");
  var isCacheEnabled = typeof cache !== "undefined";
  var tokens = isCacheEnabled ? cache.get(cacheKey) : void 0;
  if (tokens == void 0) {
    tokens = parseTemplate(template2, tags);
    isCacheEnabled && cache.set(cacheKey, tokens);
  }
  return tokens;
};
Writer.prototype.render = function render(template2, view, partials, config) {
  var tags = this.getConfigTags(config);
  var tokens = this.parse(template2, tags);
  var context = view instanceof Context ? view : new Context(view, void 0);
  return this.renderTokens(tokens, context, partials, template2, config);
};
Writer.prototype.renderTokens = function renderTokens(tokens, context, partials, originalTemplate, config) {
  var buffer = "";
  var token, symbol, value;
  for (var i2 = 0, numTokens = tokens.length; i2 < numTokens; ++i2) {
    value = void 0;
    token = tokens[i2];
    symbol = token[0];
    if (symbol === "#")
      value = this.renderSection(token, context, partials, originalTemplate, config);
    else if (symbol === "^")
      value = this.renderInverted(token, context, partials, originalTemplate, config);
    else if (symbol === ">")
      value = this.renderPartial(token, context, partials, config);
    else if (symbol === "&")
      value = this.unescapedValue(token, context);
    else if (symbol === "name")
      value = this.escapedValue(token, context, config);
    else if (symbol === "text")
      value = this.rawValue(token);
    if (value !== void 0)
      buffer += value;
  }
  return buffer;
};
Writer.prototype.renderSection = function renderSection(token, context, partials, originalTemplate, config) {
  var self2 = this;
  var buffer = "";
  var value = context.lookup(token[1]);
  function subRender(template2) {
    return self2.render(template2, context, partials, config);
  }
  if (!value)
    return;
  if (isArray$4(value)) {
    for (var j2 = 0, valueLength = value.length; j2 < valueLength; ++j2) {
      buffer += this.renderTokens(token[4], context.push(value[j2]), partials, originalTemplate, config);
    }
  } else if (typeof value === "object" || typeof value === "string" || typeof value === "number") {
    buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate, config);
  } else if (isFunction$3(value)) {
    if (typeof originalTemplate !== "string")
      throw new Error("Cannot use higher-order sections without the original template");
    value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);
    if (value != null)
      buffer += value;
  } else {
    buffer += this.renderTokens(token[4], context, partials, originalTemplate, config);
  }
  return buffer;
};
Writer.prototype.renderInverted = function renderInverted(token, context, partials, originalTemplate, config) {
  var value = context.lookup(token[1]);
  if (!value || isArray$4(value) && value.length === 0)
    return this.renderTokens(token[4], context, partials, originalTemplate, config);
};
Writer.prototype.indentPartial = function indentPartial(partial, indentation, lineHasNonSpace) {
  var filteredIndentation = indentation.replace(/[^ \t]/g, "");
  var partialByNl = partial.split("\n");
  for (var i2 = 0; i2 < partialByNl.length; i2++) {
    if (partialByNl[i2].length && (i2 > 0 || !lineHasNonSpace)) {
      partialByNl[i2] = filteredIndentation + partialByNl[i2];
    }
  }
  return partialByNl.join("\n");
};
Writer.prototype.renderPartial = function renderPartial(token, context, partials, config) {
  if (!partials)
    return;
  var tags = this.getConfigTags(config);
  var value = isFunction$3(partials) ? partials(token[1]) : partials[token[1]];
  if (value != null) {
    var lineHasNonSpace = token[6];
    var tagIndex = token[5];
    var indentation = token[4];
    var indentedValue = value;
    if (tagIndex == 0 && indentation) {
      indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);
    }
    var tokens = this.parse(indentedValue, tags);
    return this.renderTokens(tokens, context, partials, indentedValue, config);
  }
};
Writer.prototype.unescapedValue = function unescapedValue(token, context) {
  var value = context.lookup(token[1]);
  if (value != null)
    return value;
};
Writer.prototype.escapedValue = function escapedValue(token, context, config) {
  var escape2 = this.getConfigEscape(config) || mustache.escape;
  var value = context.lookup(token[1]);
  if (value != null)
    return typeof value === "number" && escape2 === mustache.escape ? String(value) : escape2(value);
};
Writer.prototype.rawValue = function rawValue(token) {
  return token[1];
};
Writer.prototype.getConfigTags = function getConfigTags(config) {
  if (isArray$4(config)) {
    return config;
  } else if (config && typeof config === "object") {
    return config.tags;
  } else {
    return void 0;
  }
};
Writer.prototype.getConfigEscape = function getConfigEscape(config) {
  if (config && typeof config === "object" && !isArray$4(config)) {
    return config.escape;
  } else {
    return void 0;
  }
};
var mustache = {
  name: "mustache.js",
  version: "4.2.0",
  tags: ["{{", "}}"],
  clearCache: void 0,
  escape: void 0,
  parse: void 0,
  render: void 0,
  Scanner: void 0,
  Context: void 0,
  Writer: void 0,
  set templateCache(cache) {
    defaultWriter.templateCache = cache;
  },
  get templateCache() {
    return defaultWriter.templateCache;
  }
};
var defaultWriter = new Writer();
mustache.clearCache = function clearCache2() {
  return defaultWriter.clearCache();
};
mustache.parse = function parse3(template2, tags) {
  return defaultWriter.parse(template2, tags);
};
mustache.render = function render2(template2, view, partials, config) {
  if (typeof template2 !== "string") {
    throw new TypeError('Invalid template! Template should be a "string" but "' + typeStr(template2) + '" was given as the first argument for mustache#render(template, view, partials)');
  }
  return defaultWriter.render(template2, view, partials, config);
};
mustache.escape = escapeHtml;
mustache.Scanner = Scanner;
mustache.Context = Context;
mustache.Writer = Writer;
var handlebars$2 = {exports: {}};
var handlebars_runtime = {exports: {}};
var base$1 = {};
var utils$e = {};
utils$e.__esModule = true;
utils$e.extend = extend$1;
utils$e.indexOf = indexOf;
utils$e.escapeExpression = escapeExpression;
utils$e.isEmpty = isEmpty;
utils$e.createFrame = createFrame;
utils$e.blockParams = blockParams;
utils$e.appendContextPath = appendContextPath;
var escape$2 = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#x27;",
  "`": "&#x60;",
  "=": "&#x3D;"
};
var badChars = /[&<>"'`=]/g, possible = /[&<>"'`=]/;
function escapeChar(chr) {
  return escape$2[chr];
}
function extend$1(obj) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    for (var key in arguments[i2]) {
      if (Object.prototype.hasOwnProperty.call(arguments[i2], key)) {
        obj[key] = arguments[i2][key];
      }
    }
  }
  return obj;
}
var toString$2 = Object.prototype.toString;
utils$e.toString = toString$2;
var isFunction$2 = function isFunction2(value) {
  return typeof value === "function";
};
if (isFunction$2(/x/)) {
  utils$e.isFunction = isFunction$2 = function(value) {
    return typeof value === "function" && toString$2.call(value) === "[object Function]";
  };
}
utils$e.isFunction = isFunction$2;
var isArray$3 = Array.isArray || function(value) {
  return value && typeof value === "object" ? toString$2.call(value) === "[object Array]" : false;
};
utils$e.isArray = isArray$3;
function indexOf(array, value) {
  for (var i2 = 0, len = array.length; i2 < len; i2++) {
    if (array[i2] === value) {
      return i2;
    }
  }
  return -1;
}
function escapeExpression(string) {
  if (typeof string !== "string") {
    if (string && string.toHTML) {
      return string.toHTML();
    } else if (string == null) {
      return "";
    } else if (!string) {
      return string + "";
    }
    string = "" + string;
  }
  if (!possible.test(string)) {
    return string;
  }
  return string.replace(badChars, escapeChar);
}
function isEmpty(value) {
  if (!value && value !== 0) {
    return true;
  } else if (isArray$3(value) && value.length === 0) {
    return true;
  } else {
    return false;
  }
}
function createFrame(object) {
  var frame = extend$1({}, object);
  frame._parent = object;
  return frame;
}
function blockParams(params, ids) {
  params.path = ids;
  return params;
}
function appendContextPath(contextPath, id2) {
  return (contextPath ? contextPath + "." : "") + id2;
}
var exception = {exports: {}};
(function(module, exports) {
  exports.__esModule = true;
  var errorProps = ["description", "fileName", "lineNumber", "endLineNumber", "message", "name", "number", "stack"];
  function Exception(message, node) {
    var loc = node && node.loc, line = void 0, endLineNumber = void 0, column = void 0, endColumn = void 0;
    if (loc) {
      line = loc.start.line;
      endLineNumber = loc.end.line;
      column = loc.start.column;
      endColumn = loc.end.column;
      message += " - " + line + ":" + column;
    }
    var tmp = Error.prototype.constructor.call(this, message);
    for (var idx = 0; idx < errorProps.length; idx++) {
      this[errorProps[idx]] = tmp[errorProps[idx]];
    }
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, Exception);
    }
    try {
      if (loc) {
        this.lineNumber = line;
        this.endLineNumber = endLineNumber;
        if (Object.defineProperty) {
          Object.defineProperty(this, "column", {
            value: column,
            enumerable: true
          });
          Object.defineProperty(this, "endColumn", {
            value: endColumn,
            enumerable: true
          });
        } else {
          this.column = column;
          this.endColumn = endColumn;
        }
      }
    } catch (nop) {
    }
  }
  Exception.prototype = new Error();
  exports["default"] = Exception;
  module.exports = exports["default"];
})(exception, exception.exports);
var helpers$1 = {};
var blockHelperMissing = {exports: {}};
(function(module, exports) {
  exports.__esModule = true;
  var _utils2 = utils$e;
  exports["default"] = function(instance) {
    instance.registerHelper("blockHelperMissing", function(context, options) {
      var inverse = options.inverse, fn2 = options.fn;
      if (context === true) {
        return fn2(this);
      } else if (context === false || context == null) {
        return inverse(this);
      } else if (_utils2.isArray(context)) {
        if (context.length > 0) {
          if (options.ids) {
            options.ids = [options.name];
          }
          return instance.helpers.each(context, options);
        } else {
          return inverse(this);
        }
      } else {
        if (options.data && options.ids) {
          var data = _utils2.createFrame(options.data);
          data.contextPath = _utils2.appendContextPath(options.data.contextPath, options.name);
          options = {data};
        }
        return fn2(context, options);
      }
    });
  };
  module.exports = exports["default"];
})(blockHelperMissing, blockHelperMissing.exports);
var each = {exports: {}};
(function(module, exports) {
  exports.__esModule = true;
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : {"default": obj};
  }
  var _utils2 = utils$e;
  var _exception3 = exception.exports;
  var _exception22 = _interopRequireDefault2(_exception3);
  exports["default"] = function(instance) {
    instance.registerHelper("each", function(context, options) {
      if (!options) {
        throw new _exception22["default"]("Must pass iterator to #each");
      }
      var fn2 = options.fn, inverse = options.inverse, i2 = 0, ret = "", data = void 0, contextPath = void 0;
      if (options.data && options.ids) {
        contextPath = _utils2.appendContextPath(options.data.contextPath, options.ids[0]) + ".";
      }
      if (_utils2.isFunction(context)) {
        context = context.call(this);
      }
      if (options.data) {
        data = _utils2.createFrame(options.data);
      }
      function execIteration(field, index, last2) {
        if (data) {
          data.key = field;
          data.index = index;
          data.first = index === 0;
          data.last = !!last2;
          if (contextPath) {
            data.contextPath = contextPath + field;
          }
        }
        ret = ret + fn2(context[field], {
          data,
          blockParams: _utils2.blockParams([context[field], field], [contextPath + field, null])
        });
      }
      if (context && typeof context === "object") {
        if (_utils2.isArray(context)) {
          for (var j2 = context.length; i2 < j2; i2++) {
            if (i2 in context) {
              execIteration(i2, i2, i2 === context.length - 1);
            }
          }
        } else if (commonjsGlobal.Symbol && context[commonjsGlobal.Symbol.iterator]) {
          var newContext = [];
          var iterator = context[commonjsGlobal.Symbol.iterator]();
          for (var it = iterator.next(); !it.done; it = iterator.next()) {
            newContext.push(it.value);
          }
          context = newContext;
          for (var j2 = context.length; i2 < j2; i2++) {
            execIteration(i2, i2, i2 === context.length - 1);
          }
        } else {
          (function() {
            var priorKey = void 0;
            Object.keys(context).forEach(function(key) {
              if (priorKey !== void 0) {
                execIteration(priorKey, i2 - 1);
              }
              priorKey = key;
              i2++;
            });
            if (priorKey !== void 0) {
              execIteration(priorKey, i2 - 1, true);
            }
          })();
        }
      }
      if (i2 === 0) {
        ret = inverse(this);
      }
      return ret;
    });
  };
  module.exports = exports["default"];
})(each, each.exports);
var helperMissing = {exports: {}};
(function(module, exports) {
  exports.__esModule = true;
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : {"default": obj};
  }
  var _exception3 = exception.exports;
  var _exception22 = _interopRequireDefault2(_exception3);
  exports["default"] = function(instance) {
    instance.registerHelper("helperMissing", function() {
      if (arguments.length === 1) {
        return void 0;
      } else {
        throw new _exception22["default"]('Missing helper: "' + arguments[arguments.length - 1].name + '"');
      }
    });
  };
  module.exports = exports["default"];
})(helperMissing, helperMissing.exports);
var _if = {exports: {}};
(function(module, exports) {
  exports.__esModule = true;
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : {"default": obj};
  }
  var _utils2 = utils$e;
  var _exception3 = exception.exports;
  var _exception22 = _interopRequireDefault2(_exception3);
  exports["default"] = function(instance) {
    instance.registerHelper("if", function(conditional, options) {
      if (arguments.length != 2) {
        throw new _exception22["default"]("#if requires exactly one argument");
      }
      if (_utils2.isFunction(conditional)) {
        conditional = conditional.call(this);
      }
      if (!options.hash.includeZero && !conditional || _utils2.isEmpty(conditional)) {
        return options.inverse(this);
      } else {
        return options.fn(this);
      }
    });
    instance.registerHelper("unless", function(conditional, options) {
      if (arguments.length != 2) {
        throw new _exception22["default"]("#unless requires exactly one argument");
      }
      return instance.helpers["if"].call(this, conditional, {
        fn: options.inverse,
        inverse: options.fn,
        hash: options.hash
      });
    });
  };
  module.exports = exports["default"];
})(_if, _if.exports);
var log$1 = {exports: {}};
(function(module, exports) {
  exports.__esModule = true;
  exports["default"] = function(instance) {
    instance.registerHelper("log", function() {
      var args = [void 0], options = arguments[arguments.length - 1];
      for (var i2 = 0; i2 < arguments.length - 1; i2++) {
        args.push(arguments[i2]);
      }
      var level = 1;
      if (options.hash.level != null) {
        level = options.hash.level;
      } else if (options.data && options.data.level != null) {
        level = options.data.level;
      }
      args[0] = level;
      instance.log.apply(instance, args);
    });
  };
  module.exports = exports["default"];
})(log$1, log$1.exports);
var lookup$1 = {exports: {}};
(function(module, exports) {
  exports.__esModule = true;
  exports["default"] = function(instance) {
    instance.registerHelper("lookup", function(obj, field, options) {
      if (!obj) {
        return obj;
      }
      return options.lookupProperty(obj, field);
    });
  };
  module.exports = exports["default"];
})(lookup$1, lookup$1.exports);
var _with = {exports: {}};
(function(module, exports) {
  exports.__esModule = true;
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : {"default": obj};
  }
  var _utils2 = utils$e;
  var _exception3 = exception.exports;
  var _exception22 = _interopRequireDefault2(_exception3);
  exports["default"] = function(instance) {
    instance.registerHelper("with", function(context, options) {
      if (arguments.length != 2) {
        throw new _exception22["default"]("#with requires exactly one argument");
      }
      if (_utils2.isFunction(context)) {
        context = context.call(this);
      }
      var fn2 = options.fn;
      if (!_utils2.isEmpty(context)) {
        var data = options.data;
        if (options.data && options.ids) {
          data = _utils2.createFrame(options.data);
          data.contextPath = _utils2.appendContextPath(options.data.contextPath, options.ids[0]);
        }
        return fn2(context, {
          data,
          blockParams: _utils2.blockParams([context], [data && data.contextPath])
        });
      } else {
        return options.inverse(this);
      }
    });
  };
  module.exports = exports["default"];
})(_with, _with.exports);
helpers$1.__esModule = true;
helpers$1.registerDefaultHelpers = registerDefaultHelpers;
helpers$1.moveHelperToHooks = moveHelperToHooks;
function _interopRequireDefault$6(obj) {
  return obj && obj.__esModule ? obj : {"default": obj};
}
var _helpersBlockHelperMissing = blockHelperMissing.exports;
var _helpersBlockHelperMissing2 = _interopRequireDefault$6(_helpersBlockHelperMissing);
var _helpersEach = each.exports;
var _helpersEach2 = _interopRequireDefault$6(_helpersEach);
var _helpersHelperMissing = helperMissing.exports;
var _helpersHelperMissing2 = _interopRequireDefault$6(_helpersHelperMissing);
var _helpersIf = _if.exports;
var _helpersIf2 = _interopRequireDefault$6(_helpersIf);
var _helpersLog = log$1.exports;
var _helpersLog2 = _interopRequireDefault$6(_helpersLog);
var _helpersLookup = lookup$1.exports;
var _helpersLookup2 = _interopRequireDefault$6(_helpersLookup);
var _helpersWith = _with.exports;
var _helpersWith2 = _interopRequireDefault$6(_helpersWith);
function registerDefaultHelpers(instance) {
  _helpersBlockHelperMissing2["default"](instance);
  _helpersEach2["default"](instance);
  _helpersHelperMissing2["default"](instance);
  _helpersIf2["default"](instance);
  _helpersLog2["default"](instance);
  _helpersLookup2["default"](instance);
  _helpersWith2["default"](instance);
}
function moveHelperToHooks(instance, helperName, keepHelper) {
  if (instance.helpers[helperName]) {
    instance.hooks[helperName] = instance.helpers[helperName];
    if (!keepHelper) {
      delete instance.helpers[helperName];
    }
  }
}
var decorators = {};
var inline = {exports: {}};
(function(module, exports) {
  exports.__esModule = true;
  var _utils2 = utils$e;
  exports["default"] = function(instance) {
    instance.registerDecorator("inline", function(fn2, props, container, options) {
      var ret = fn2;
      if (!props.partials) {
        props.partials = {};
        ret = function(context, options2) {
          var original = container.partials;
          container.partials = _utils2.extend({}, original, props.partials);
          var ret2 = fn2(context, options2);
          container.partials = original;
          return ret2;
        };
      }
      props.partials[options.args[0]] = options.fn;
      return ret;
    });
  };
  module.exports = exports["default"];
})(inline, inline.exports);
decorators.__esModule = true;
decorators.registerDefaultDecorators = registerDefaultDecorators;
function _interopRequireDefault$5(obj) {
  return obj && obj.__esModule ? obj : {"default": obj};
}
var _decoratorsInline = inline.exports;
var _decoratorsInline2 = _interopRequireDefault$5(_decoratorsInline);
function registerDefaultDecorators(instance) {
  _decoratorsInline2["default"](instance);
}
var logger$1 = {exports: {}};
(function(module, exports) {
  exports.__esModule = true;
  var _utils2 = utils$e;
  var logger2 = {
    methodMap: ["debug", "info", "warn", "error"],
    level: "info",
    lookupLevel: function lookupLevel(level) {
      if (typeof level === "string") {
        var levelMap = _utils2.indexOf(logger2.methodMap, level.toLowerCase());
        if (levelMap >= 0) {
          level = levelMap;
        } else {
          level = parseInt(level, 10);
        }
      }
      return level;
    },
    log: function log2(level) {
      level = logger2.lookupLevel(level);
      if (typeof console !== "undefined" && logger2.lookupLevel(logger2.level) <= level) {
        var method = logger2.methodMap[level];
        if (!console[method]) {
          method = "log";
        }
        for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          message[_key - 1] = arguments[_key];
        }
        console[method].apply(console, message);
      }
    }
  };
  exports["default"] = logger2;
  module.exports = exports["default"];
})(logger$1, logger$1.exports);
var protoAccess = {};
var createNewLookupObject$1 = {};
createNewLookupObject$1.__esModule = true;
createNewLookupObject$1.createNewLookupObject = createNewLookupObject;
var _utils$4 = utils$e;
function createNewLookupObject() {
  for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {
    sources[_key] = arguments[_key];
  }
  return _utils$4.extend.apply(void 0, [Object.create(null)].concat(sources));
}
protoAccess.__esModule = true;
protoAccess.createProtoAccessControl = createProtoAccessControl;
protoAccess.resultIsAllowed = resultIsAllowed;
protoAccess.resetLoggedProperties = resetLoggedProperties;
function _interopRequireWildcard$2(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};
    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key))
          newObj[key] = obj[key];
      }
    }
    newObj["default"] = obj;
    return newObj;
  }
}
var _createNewLookupObject = createNewLookupObject$1;
var _logger$1 = logger$1.exports;
var logger = _interopRequireWildcard$2(_logger$1);
var loggedProperties = Object.create(null);
function createProtoAccessControl(runtimeOptions) {
  var defaultMethodWhiteList = Object.create(null);
  defaultMethodWhiteList["constructor"] = false;
  defaultMethodWhiteList["__defineGetter__"] = false;
  defaultMethodWhiteList["__defineSetter__"] = false;
  defaultMethodWhiteList["__lookupGetter__"] = false;
  var defaultPropertyWhiteList = Object.create(null);
  defaultPropertyWhiteList["__proto__"] = false;
  return {
    properties: {
      whitelist: _createNewLookupObject.createNewLookupObject(defaultPropertyWhiteList, runtimeOptions.allowedProtoProperties),
      defaultValue: runtimeOptions.allowProtoPropertiesByDefault
    },
    methods: {
      whitelist: _createNewLookupObject.createNewLookupObject(defaultMethodWhiteList, runtimeOptions.allowedProtoMethods),
      defaultValue: runtimeOptions.allowProtoMethodsByDefault
    }
  };
}
function resultIsAllowed(result, protoAccessControl, propertyName) {
  if (typeof result === "function") {
    return checkWhiteList(protoAccessControl.methods, propertyName);
  } else {
    return checkWhiteList(protoAccessControl.properties, propertyName);
  }
}
function checkWhiteList(protoAccessControlForType, propertyName) {
  if (protoAccessControlForType.whitelist[propertyName] !== void 0) {
    return protoAccessControlForType.whitelist[propertyName] === true;
  }
  if (protoAccessControlForType.defaultValue !== void 0) {
    return protoAccessControlForType.defaultValue;
  }
  logUnexpecedPropertyAccessOnce(propertyName);
  return false;
}
function logUnexpecedPropertyAccessOnce(propertyName) {
  if (loggedProperties[propertyName] !== true) {
    loggedProperties[propertyName] = true;
    logger.log("error", 'Handlebars: Access has been denied to resolve the property "' + propertyName + '" because it is not an "own property" of its parent.\nYou can add a runtime option to disable the check or this warning:\nSee https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access for details');
  }
}
function resetLoggedProperties() {
  Object.keys(loggedProperties).forEach(function(propertyName) {
    delete loggedProperties[propertyName];
  });
}
base$1.__esModule = true;
base$1.HandlebarsEnvironment = HandlebarsEnvironment;
function _interopRequireDefault$4(obj) {
  return obj && obj.__esModule ? obj : {"default": obj};
}
var _utils$3 = utils$e;
var _exception$3 = exception.exports;
var _exception2$3 = _interopRequireDefault$4(_exception$3);
var _helpers$2 = helpers$1;
var _decorators = decorators;
var _logger = logger$1.exports;
var _logger2 = _interopRequireDefault$4(_logger);
var _internalProtoAccess$1 = protoAccess;
var VERSION = "4.7.7";
base$1.VERSION = VERSION;
var COMPILER_REVISION = 8;
base$1.COMPILER_REVISION = COMPILER_REVISION;
var LAST_COMPATIBLE_COMPILER_REVISION = 7;
base$1.LAST_COMPATIBLE_COMPILER_REVISION = LAST_COMPATIBLE_COMPILER_REVISION;
var REVISION_CHANGES = {
  1: "<= 1.0.rc.2",
  2: "== 1.0.0-rc.3",
  3: "== 1.0.0-rc.4",
  4: "== 1.x.x",
  5: "== 2.0.0-alpha.x",
  6: ">= 2.0.0-beta.1",
  7: ">= 4.0.0 <4.3.0",
  8: ">= 4.3.0"
};
base$1.REVISION_CHANGES = REVISION_CHANGES;
var objectType = "[object Object]";
function HandlebarsEnvironment(helpers2, partials, decorators2) {
  this.helpers = helpers2 || {};
  this.partials = partials || {};
  this.decorators = decorators2 || {};
  _helpers$2.registerDefaultHelpers(this);
  _decorators.registerDefaultDecorators(this);
}
HandlebarsEnvironment.prototype = {
  constructor: HandlebarsEnvironment,
  logger: _logger2["default"],
  log: _logger2["default"].log,
  registerHelper: function registerHelper(name2, fn2) {
    if (_utils$3.toString.call(name2) === objectType) {
      if (fn2) {
        throw new _exception2$3["default"]("Arg not supported with multiple helpers");
      }
      _utils$3.extend(this.helpers, name2);
    } else {
      this.helpers[name2] = fn2;
    }
  },
  unregisterHelper: function unregisterHelper(name2) {
    delete this.helpers[name2];
  },
  registerPartial: function registerPartial(name2, partial) {
    if (_utils$3.toString.call(name2) === objectType) {
      _utils$3.extend(this.partials, name2);
    } else {
      if (typeof partial === "undefined") {
        throw new _exception2$3["default"]('Attempting to register a partial called "' + name2 + '" as undefined');
      }
      this.partials[name2] = partial;
    }
  },
  unregisterPartial: function unregisterPartial(name2) {
    delete this.partials[name2];
  },
  registerDecorator: function registerDecorator(name2, fn2) {
    if (_utils$3.toString.call(name2) === objectType) {
      if (fn2) {
        throw new _exception2$3["default"]("Arg not supported with multiple decorators");
      }
      _utils$3.extend(this.decorators, name2);
    } else {
      this.decorators[name2] = fn2;
    }
  },
  unregisterDecorator: function unregisterDecorator(name2) {
    delete this.decorators[name2];
  },
  resetLoggedPropertyAccesses: function resetLoggedPropertyAccesses() {
    _internalProtoAccess$1.resetLoggedProperties();
  }
};
var log = _logger2["default"].log;
base$1.log = log;
base$1.createFrame = _utils$3.createFrame;
base$1.logger = _logger2["default"];
var safeString = {exports: {}};
(function(module, exports) {
  exports.__esModule = true;
  function SafeString(string) {
    this.string = string;
  }
  SafeString.prototype.toString = SafeString.prototype.toHTML = function() {
    return "" + this.string;
  };
  exports["default"] = SafeString;
  module.exports = exports["default"];
})(safeString, safeString.exports);
var runtime = {};
var wrapHelper$1 = {};
wrapHelper$1.__esModule = true;
wrapHelper$1.wrapHelper = wrapHelper;
function wrapHelper(helper, transformOptionsFn) {
  if (typeof helper !== "function") {
    return helper;
  }
  var wrapper = function wrapper2() {
    var options = arguments[arguments.length - 1];
    arguments[arguments.length - 1] = transformOptionsFn(options);
    return helper.apply(this, arguments);
  };
  return wrapper;
}
runtime.__esModule = true;
runtime.checkRevision = checkRevision;
runtime.template = template;
runtime.wrapProgram = wrapProgram;
runtime.resolvePartial = resolvePartial;
runtime.invokePartial = invokePartial;
runtime.noop = noop;
function _interopRequireDefault$3(obj) {
  return obj && obj.__esModule ? obj : {"default": obj};
}
function _interopRequireWildcard$1(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};
    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key))
          newObj[key] = obj[key];
      }
    }
    newObj["default"] = obj;
    return newObj;
  }
}
var _utils$2 = utils$e;
var Utils = _interopRequireWildcard$1(_utils$2);
var _exception$2 = exception.exports;
var _exception2$2 = _interopRequireDefault$3(_exception$2);
var _base = base$1;
var _helpers$1 = helpers$1;
var _internalWrapHelper = wrapHelper$1;
var _internalProtoAccess = protoAccess;
function checkRevision(compilerInfo) {
  var compilerRevision = compilerInfo && compilerInfo[0] || 1, currentRevision = _base.COMPILER_REVISION;
  if (compilerRevision >= _base.LAST_COMPATIBLE_COMPILER_REVISION && compilerRevision <= _base.COMPILER_REVISION) {
    return;
  }
  if (compilerRevision < _base.LAST_COMPATIBLE_COMPILER_REVISION) {
    var runtimeVersions = _base.REVISION_CHANGES[currentRevision], compilerVersions = _base.REVISION_CHANGES[compilerRevision];
    throw new _exception2$2["default"]("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version (" + runtimeVersions + ") or downgrade your runtime to an older version (" + compilerVersions + ").");
  } else {
    throw new _exception2$2["default"]("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version (" + compilerInfo[1] + ").");
  }
}
function template(templateSpec, env) {
  if (!env) {
    throw new _exception2$2["default"]("No environment passed to template");
  }
  if (!templateSpec || !templateSpec.main) {
    throw new _exception2$2["default"]("Unknown template object: " + typeof templateSpec);
  }
  templateSpec.main.decorator = templateSpec.main_d;
  env.VM.checkRevision(templateSpec.compiler);
  var templateWasPrecompiledWithCompilerV7 = templateSpec.compiler && templateSpec.compiler[0] === 7;
  function invokePartialWrapper(partial, context, options) {
    if (options.hash) {
      context = Utils.extend({}, context, options.hash);
      if (options.ids) {
        options.ids[0] = true;
      }
    }
    partial = env.VM.resolvePartial.call(this, partial, context, options);
    var extendedOptions = Utils.extend({}, options, {
      hooks: this.hooks,
      protoAccessControl: this.protoAccessControl
    });
    var result = env.VM.invokePartial.call(this, partial, context, extendedOptions);
    if (result == null && env.compile) {
      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
      result = options.partials[options.name](context, extendedOptions);
    }
    if (result != null) {
      if (options.indent) {
        var lines = result.split("\n");
        for (var i2 = 0, l2 = lines.length; i2 < l2; i2++) {
          if (!lines[i2] && i2 + 1 === l2) {
            break;
          }
          lines[i2] = options.indent + lines[i2];
        }
        result = lines.join("\n");
      }
      return result;
    } else {
      throw new _exception2$2["default"]("The partial " + options.name + " could not be compiled when running in runtime-only mode");
    }
  }
  var container = {
    strict: function strict(obj, name2, loc) {
      if (!obj || !(name2 in obj)) {
        throw new _exception2$2["default"]('"' + name2 + '" not defined in ' + obj, {
          loc
        });
      }
      return container.lookupProperty(obj, name2);
    },
    lookupProperty: function lookupProperty(parent, propertyName) {
      var result = parent[propertyName];
      if (result == null) {
        return result;
      }
      if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
        return result;
      }
      if (_internalProtoAccess.resultIsAllowed(result, container.protoAccessControl, propertyName)) {
        return result;
      }
      return void 0;
    },
    lookup: function lookup3(depths, name2) {
      var len = depths.length;
      for (var i2 = 0; i2 < len; i2++) {
        var result = depths[i2] && container.lookupProperty(depths[i2], name2);
        if (result != null) {
          return depths[i2][name2];
        }
      }
    },
    lambda: function lambda(current, context) {
      return typeof current === "function" ? current.call(context) : current;
    },
    escapeExpression: Utils.escapeExpression,
    invokePartial: invokePartialWrapper,
    fn: function fn2(i2) {
      var ret2 = templateSpec[i2];
      ret2.decorator = templateSpec[i2 + "_d"];
      return ret2;
    },
    programs: [],
    program: function program(i2, data, declaredBlockParams, blockParams2, depths) {
      var programWrapper = this.programs[i2], fn2 = this.fn(i2);
      if (data || depths || blockParams2 || declaredBlockParams) {
        programWrapper = wrapProgram(this, i2, fn2, data, declaredBlockParams, blockParams2, depths);
      } else if (!programWrapper) {
        programWrapper = this.programs[i2] = wrapProgram(this, i2, fn2);
      }
      return programWrapper;
    },
    data: function data(value, depth) {
      while (value && depth--) {
        value = value._parent;
      }
      return value;
    },
    mergeIfNeeded: function mergeIfNeeded(param, common) {
      var obj = param || common;
      if (param && common && param !== common) {
        obj = Utils.extend({}, common, param);
      }
      return obj;
    },
    nullContext: Object.seal({}),
    noop: env.VM.noop,
    compilerInfo: templateSpec.compiler
  };
  function ret(context) {
    var options = arguments.length <= 1 || arguments[1] === void 0 ? {} : arguments[1];
    var data = options.data;
    ret._setup(options);
    if (!options.partial && templateSpec.useData) {
      data = initData(context, data);
    }
    var depths = void 0, blockParams2 = templateSpec.useBlockParams ? [] : void 0;
    if (templateSpec.useDepths) {
      if (options.depths) {
        depths = context != options.depths[0] ? [context].concat(options.depths) : options.depths;
      } else {
        depths = [context];
      }
    }
    function main(context2) {
      return "" + templateSpec.main(container, context2, container.helpers, container.partials, data, blockParams2, depths);
    }
    main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams2);
    return main(context, options);
  }
  ret.isTop = true;
  ret._setup = function(options) {
    if (!options.partial) {
      var mergedHelpers = Utils.extend({}, env.helpers, options.helpers);
      wrapHelpersToPassLookupProperty(mergedHelpers, container);
      container.helpers = mergedHelpers;
      if (templateSpec.usePartial) {
        container.partials = container.mergeIfNeeded(options.partials, env.partials);
      }
      if (templateSpec.usePartial || templateSpec.useDecorators) {
        container.decorators = Utils.extend({}, env.decorators, options.decorators);
      }
      container.hooks = {};
      container.protoAccessControl = _internalProtoAccess.createProtoAccessControl(options);
      var keepHelperInHelpers = options.allowCallsToHelperMissing || templateWasPrecompiledWithCompilerV7;
      _helpers$1.moveHelperToHooks(container, "helperMissing", keepHelperInHelpers);
      _helpers$1.moveHelperToHooks(container, "blockHelperMissing", keepHelperInHelpers);
    } else {
      container.protoAccessControl = options.protoAccessControl;
      container.helpers = options.helpers;
      container.partials = options.partials;
      container.decorators = options.decorators;
      container.hooks = options.hooks;
    }
  };
  ret._child = function(i2, data, blockParams2, depths) {
    if (templateSpec.useBlockParams && !blockParams2) {
      throw new _exception2$2["default"]("must pass block params");
    }
    if (templateSpec.useDepths && !depths) {
      throw new _exception2$2["default"]("must pass parent depths");
    }
    return wrapProgram(container, i2, templateSpec[i2], data, 0, blockParams2, depths);
  };
  return ret;
}
function wrapProgram(container, i2, fn2, data, declaredBlockParams, blockParams2, depths) {
  function prog(context) {
    var options = arguments.length <= 1 || arguments[1] === void 0 ? {} : arguments[1];
    var currentDepths = depths;
    if (depths && context != depths[0] && !(context === container.nullContext && depths[0] === null)) {
      currentDepths = [context].concat(depths);
    }
    return fn2(container, context, container.helpers, container.partials, options.data || data, blockParams2 && [options.blockParams].concat(blockParams2), currentDepths);
  }
  prog = executeDecorators(fn2, prog, container, depths, data, blockParams2);
  prog.program = i2;
  prog.depth = depths ? depths.length : 0;
  prog.blockParams = declaredBlockParams || 0;
  return prog;
}
function resolvePartial(partial, context, options) {
  if (!partial) {
    if (options.name === "@partial-block") {
      partial = options.data["partial-block"];
    } else {
      partial = options.partials[options.name];
    }
  } else if (!partial.call && !options.name) {
    options.name = partial;
    partial = options.partials[partial];
  }
  return partial;
}
function invokePartial(partial, context, options) {
  var currentPartialBlock = options.data && options.data["partial-block"];
  options.partial = true;
  if (options.ids) {
    options.data.contextPath = options.ids[0] || options.data.contextPath;
  }
  var partialBlock = void 0;
  if (options.fn && options.fn !== noop) {
    (function() {
      options.data = _base.createFrame(options.data);
      var fn2 = options.fn;
      partialBlock = options.data["partial-block"] = function partialBlockWrapper(context2) {
        var options2 = arguments.length <= 1 || arguments[1] === void 0 ? {} : arguments[1];
        options2.data = _base.createFrame(options2.data);
        options2.data["partial-block"] = currentPartialBlock;
        return fn2(context2, options2);
      };
      if (fn2.partials) {
        options.partials = Utils.extend({}, options.partials, fn2.partials);
      }
    })();
  }
  if (partial === void 0 && partialBlock) {
    partial = partialBlock;
  }
  if (partial === void 0) {
    throw new _exception2$2["default"]("The partial " + options.name + " could not be found");
  } else if (partial instanceof Function) {
    return partial(context, options);
  }
}
function noop() {
  return "";
}
function initData(context, data) {
  if (!data || !("root" in data)) {
    data = data ? _base.createFrame(data) : {};
    data.root = context;
  }
  return data;
}
function executeDecorators(fn2, prog, container, depths, data, blockParams2) {
  if (fn2.decorator) {
    var props = {};
    prog = fn2.decorator(prog, props, container, depths && depths[0], data, blockParams2, depths);
    Utils.extend(prog, props);
  }
  return prog;
}
function wrapHelpersToPassLookupProperty(mergedHelpers, container) {
  Object.keys(mergedHelpers).forEach(function(helperName) {
    var helper = mergedHelpers[helperName];
    mergedHelpers[helperName] = passLookupPropertyOption(helper, container);
  });
}
function passLookupPropertyOption(helper, container) {
  var lookupProperty = container.lookupProperty;
  return _internalWrapHelper.wrapHelper(helper, function(options) {
    return Utils.extend({lookupProperty}, options);
  });
}
var noConflict = {exports: {}};
(function(module, exports) {
  exports.__esModule = true;
  exports["default"] = function(Handlebars) {
    var root = typeof commonjsGlobal !== "undefined" ? commonjsGlobal : window, $Handlebars = root.Handlebars;
    Handlebars.noConflict = function() {
      if (root.Handlebars === Handlebars) {
        root.Handlebars = $Handlebars;
      }
      return Handlebars;
    };
  };
  module.exports = exports["default"];
})(noConflict, noConflict.exports);
(function(module, exports) {
  exports.__esModule = true;
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : {"default": obj};
  }
  function _interopRequireWildcard2(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj["default"] = obj;
      return newObj;
    }
  }
  var _handlebarsBase = base$1;
  var base2 = _interopRequireWildcard2(_handlebarsBase);
  var _handlebarsSafeString = safeString.exports;
  var _handlebarsSafeString2 = _interopRequireDefault2(_handlebarsSafeString);
  var _handlebarsException = exception.exports;
  var _handlebarsException2 = _interopRequireDefault2(_handlebarsException);
  var _handlebarsUtils = utils$e;
  var Utils2 = _interopRequireWildcard2(_handlebarsUtils);
  var _handlebarsRuntime = runtime;
  var runtime$1 = _interopRequireWildcard2(_handlebarsRuntime);
  var _handlebarsNoConflict = noConflict.exports;
  var _handlebarsNoConflict2 = _interopRequireDefault2(_handlebarsNoConflict);
  function create3() {
    var hb = new base2.HandlebarsEnvironment();
    Utils2.extend(hb, base2);
    hb.SafeString = _handlebarsSafeString2["default"];
    hb.Exception = _handlebarsException2["default"];
    hb.Utils = Utils2;
    hb.escapeExpression = Utils2.escapeExpression;
    hb.VM = runtime$1;
    hb.template = function(spec) {
      return runtime$1.template(spec, hb);
    };
    return hb;
  }
  var inst = create3();
  inst.create = create3;
  _handlebarsNoConflict2["default"](inst);
  inst["default"] = inst;
  exports["default"] = inst;
  module.exports = exports["default"];
})(handlebars_runtime, handlebars_runtime.exports);
var ast = {exports: {}};
(function(module, exports) {
  exports.__esModule = true;
  var AST = {
    helpers: {
      helperExpression: function helperExpression(node) {
        return node.type === "SubExpression" || (node.type === "MustacheStatement" || node.type === "BlockStatement") && !!(node.params && node.params.length || node.hash);
      },
      scopedId: function scopedId(path2) {
        return /^\.|this\b/.test(path2.original);
      },
      simpleId: function simpleId(path2) {
        return path2.parts.length === 1 && !AST.helpers.scopedId(path2) && !path2.depth;
      }
    }
  };
  exports["default"] = AST;
  module.exports = exports["default"];
})(ast, ast.exports);
var base = {};
var parser$1 = {exports: {}};
(function(module, exports) {
  exports.__esModule = true;
  var handlebars2 = function() {
    var parser2 = {
      trace: function trace() {
      },
      yy: {},
      symbols_: {"error": 2, "root": 3, "program": 4, "EOF": 5, "program_repetition0": 6, "statement": 7, "mustache": 8, "block": 9, "rawBlock": 10, "partial": 11, "partialBlock": 12, "content": 13, "COMMENT": 14, "CONTENT": 15, "openRawBlock": 16, "rawBlock_repetition0": 17, "END_RAW_BLOCK": 18, "OPEN_RAW_BLOCK": 19, "helperName": 20, "openRawBlock_repetition0": 21, "openRawBlock_option0": 22, "CLOSE_RAW_BLOCK": 23, "openBlock": 24, "block_option0": 25, "closeBlock": 26, "openInverse": 27, "block_option1": 28, "OPEN_BLOCK": 29, "openBlock_repetition0": 30, "openBlock_option0": 31, "openBlock_option1": 32, "CLOSE": 33, "OPEN_INVERSE": 34, "openInverse_repetition0": 35, "openInverse_option0": 36, "openInverse_option1": 37, "openInverseChain": 38, "OPEN_INVERSE_CHAIN": 39, "openInverseChain_repetition0": 40, "openInverseChain_option0": 41, "openInverseChain_option1": 42, "inverseAndProgram": 43, "INVERSE": 44, "inverseChain": 45, "inverseChain_option0": 46, "OPEN_ENDBLOCK": 47, "OPEN": 48, "mustache_repetition0": 49, "mustache_option0": 50, "OPEN_UNESCAPED": 51, "mustache_repetition1": 52, "mustache_option1": 53, "CLOSE_UNESCAPED": 54, "OPEN_PARTIAL": 55, "partialName": 56, "partial_repetition0": 57, "partial_option0": 58, "openPartialBlock": 59, "OPEN_PARTIAL_BLOCK": 60, "openPartialBlock_repetition0": 61, "openPartialBlock_option0": 62, "param": 63, "sexpr": 64, "OPEN_SEXPR": 65, "sexpr_repetition0": 66, "sexpr_option0": 67, "CLOSE_SEXPR": 68, "hash": 69, "hash_repetition_plus0": 70, "hashSegment": 71, "ID": 72, "EQUALS": 73, "blockParams": 74, "OPEN_BLOCK_PARAMS": 75, "blockParams_repetition_plus0": 76, "CLOSE_BLOCK_PARAMS": 77, "path": 78, "dataName": 79, "STRING": 80, "NUMBER": 81, "BOOLEAN": 82, "UNDEFINED": 83, "NULL": 84, "DATA": 85, "pathSegments": 86, "SEP": 87, "$accept": 0, "$end": 1},
      terminals_: {2: "error", 5: "EOF", 14: "COMMENT", 15: "CONTENT", 18: "END_RAW_BLOCK", 19: "OPEN_RAW_BLOCK", 23: "CLOSE_RAW_BLOCK", 29: "OPEN_BLOCK", 33: "CLOSE", 34: "OPEN_INVERSE", 39: "OPEN_INVERSE_CHAIN", 44: "INVERSE", 47: "OPEN_ENDBLOCK", 48: "OPEN", 51: "OPEN_UNESCAPED", 54: "CLOSE_UNESCAPED", 55: "OPEN_PARTIAL", 60: "OPEN_PARTIAL_BLOCK", 65: "OPEN_SEXPR", 68: "CLOSE_SEXPR", 72: "ID", 73: "EQUALS", 75: "OPEN_BLOCK_PARAMS", 77: "CLOSE_BLOCK_PARAMS", 80: "STRING", 81: "NUMBER", 82: "BOOLEAN", 83: "UNDEFINED", 84: "NULL", 85: "DATA", 87: "SEP"},
      productions_: [0, [3, 2], [4, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [13, 1], [10, 3], [16, 5], [9, 4], [9, 4], [24, 6], [27, 6], [38, 6], [43, 2], [45, 3], [45, 1], [26, 3], [8, 5], [8, 5], [11, 5], [12, 3], [59, 5], [63, 1], [63, 1], [64, 5], [69, 1], [71, 3], [74, 3], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [56, 1], [56, 1], [79, 2], [78, 1], [86, 3], [86, 1], [6, 0], [6, 2], [17, 0], [17, 2], [21, 0], [21, 2], [22, 0], [22, 1], [25, 0], [25, 1], [28, 0], [28, 1], [30, 0], [30, 2], [31, 0], [31, 1], [32, 0], [32, 1], [35, 0], [35, 2], [36, 0], [36, 1], [37, 0], [37, 1], [40, 0], [40, 2], [41, 0], [41, 1], [42, 0], [42, 1], [46, 0], [46, 1], [49, 0], [49, 2], [50, 0], [50, 1], [52, 0], [52, 2], [53, 0], [53, 1], [57, 0], [57, 2], [58, 0], [58, 1], [61, 0], [61, 2], [62, 0], [62, 1], [66, 0], [66, 2], [67, 0], [67, 1], [70, 1], [70, 2], [76, 1], [76, 2]],
      performAction: function anonymous(yytext, yyleng, yylineno, yy2, yystate, $$10, _$) {
        var $0 = $$10.length - 1;
        switch (yystate) {
          case 1:
            return $$10[$0 - 1];
          case 2:
            this.$ = yy2.prepareProgram($$10[$0]);
            break;
          case 3:
            this.$ = $$10[$0];
            break;
          case 4:
            this.$ = $$10[$0];
            break;
          case 5:
            this.$ = $$10[$0];
            break;
          case 6:
            this.$ = $$10[$0];
            break;
          case 7:
            this.$ = $$10[$0];
            break;
          case 8:
            this.$ = $$10[$0];
            break;
          case 9:
            this.$ = {
              type: "CommentStatement",
              value: yy2.stripComment($$10[$0]),
              strip: yy2.stripFlags($$10[$0], $$10[$0]),
              loc: yy2.locInfo(this._$)
            };
            break;
          case 10:
            this.$ = {
              type: "ContentStatement",
              original: $$10[$0],
              value: $$10[$0],
              loc: yy2.locInfo(this._$)
            };
            break;
          case 11:
            this.$ = yy2.prepareRawBlock($$10[$0 - 2], $$10[$0 - 1], $$10[$0], this._$);
            break;
          case 12:
            this.$ = {path: $$10[$0 - 3], params: $$10[$0 - 2], hash: $$10[$0 - 1]};
            break;
          case 13:
            this.$ = yy2.prepareBlock($$10[$0 - 3], $$10[$0 - 2], $$10[$0 - 1], $$10[$0], false, this._$);
            break;
          case 14:
            this.$ = yy2.prepareBlock($$10[$0 - 3], $$10[$0 - 2], $$10[$0 - 1], $$10[$0], true, this._$);
            break;
          case 15:
            this.$ = {open: $$10[$0 - 5], path: $$10[$0 - 4], params: $$10[$0 - 3], hash: $$10[$0 - 2], blockParams: $$10[$0 - 1], strip: yy2.stripFlags($$10[$0 - 5], $$10[$0])};
            break;
          case 16:
            this.$ = {path: $$10[$0 - 4], params: $$10[$0 - 3], hash: $$10[$0 - 2], blockParams: $$10[$0 - 1], strip: yy2.stripFlags($$10[$0 - 5], $$10[$0])};
            break;
          case 17:
            this.$ = {path: $$10[$0 - 4], params: $$10[$0 - 3], hash: $$10[$0 - 2], blockParams: $$10[$0 - 1], strip: yy2.stripFlags($$10[$0 - 5], $$10[$0])};
            break;
          case 18:
            this.$ = {strip: yy2.stripFlags($$10[$0 - 1], $$10[$0 - 1]), program: $$10[$0]};
            break;
          case 19:
            var inverse = yy2.prepareBlock($$10[$0 - 2], $$10[$0 - 1], $$10[$0], $$10[$0], false, this._$), program = yy2.prepareProgram([inverse], $$10[$0 - 1].loc);
            program.chained = true;
            this.$ = {strip: $$10[$0 - 2].strip, program, chain: true};
            break;
          case 20:
            this.$ = $$10[$0];
            break;
          case 21:
            this.$ = {path: $$10[$0 - 1], strip: yy2.stripFlags($$10[$0 - 2], $$10[$0])};
            break;
          case 22:
            this.$ = yy2.prepareMustache($$10[$0 - 3], $$10[$0 - 2], $$10[$0 - 1], $$10[$0 - 4], yy2.stripFlags($$10[$0 - 4], $$10[$0]), this._$);
            break;
          case 23:
            this.$ = yy2.prepareMustache($$10[$0 - 3], $$10[$0 - 2], $$10[$0 - 1], $$10[$0 - 4], yy2.stripFlags($$10[$0 - 4], $$10[$0]), this._$);
            break;
          case 24:
            this.$ = {
              type: "PartialStatement",
              name: $$10[$0 - 3],
              params: $$10[$0 - 2],
              hash: $$10[$0 - 1],
              indent: "",
              strip: yy2.stripFlags($$10[$0 - 4], $$10[$0]),
              loc: yy2.locInfo(this._$)
            };
            break;
          case 25:
            this.$ = yy2.preparePartialBlock($$10[$0 - 2], $$10[$0 - 1], $$10[$0], this._$);
            break;
          case 26:
            this.$ = {path: $$10[$0 - 3], params: $$10[$0 - 2], hash: $$10[$0 - 1], strip: yy2.stripFlags($$10[$0 - 4], $$10[$0])};
            break;
          case 27:
            this.$ = $$10[$0];
            break;
          case 28:
            this.$ = $$10[$0];
            break;
          case 29:
            this.$ = {
              type: "SubExpression",
              path: $$10[$0 - 3],
              params: $$10[$0 - 2],
              hash: $$10[$0 - 1],
              loc: yy2.locInfo(this._$)
            };
            break;
          case 30:
            this.$ = {type: "Hash", pairs: $$10[$0], loc: yy2.locInfo(this._$)};
            break;
          case 31:
            this.$ = {type: "HashPair", key: yy2.id($$10[$0 - 2]), value: $$10[$0], loc: yy2.locInfo(this._$)};
            break;
          case 32:
            this.$ = yy2.id($$10[$0 - 1]);
            break;
          case 33:
            this.$ = $$10[$0];
            break;
          case 34:
            this.$ = $$10[$0];
            break;
          case 35:
            this.$ = {type: "StringLiteral", value: $$10[$0], original: $$10[$0], loc: yy2.locInfo(this._$)};
            break;
          case 36:
            this.$ = {type: "NumberLiteral", value: Number($$10[$0]), original: Number($$10[$0]), loc: yy2.locInfo(this._$)};
            break;
          case 37:
            this.$ = {type: "BooleanLiteral", value: $$10[$0] === "true", original: $$10[$0] === "true", loc: yy2.locInfo(this._$)};
            break;
          case 38:
            this.$ = {type: "UndefinedLiteral", original: void 0, value: void 0, loc: yy2.locInfo(this._$)};
            break;
          case 39:
            this.$ = {type: "NullLiteral", original: null, value: null, loc: yy2.locInfo(this._$)};
            break;
          case 40:
            this.$ = $$10[$0];
            break;
          case 41:
            this.$ = $$10[$0];
            break;
          case 42:
            this.$ = yy2.preparePath(true, $$10[$0], this._$);
            break;
          case 43:
            this.$ = yy2.preparePath(false, $$10[$0], this._$);
            break;
          case 44:
            $$10[$0 - 2].push({part: yy2.id($$10[$0]), original: $$10[$0], separator: $$10[$0 - 1]});
            this.$ = $$10[$0 - 2];
            break;
          case 45:
            this.$ = [{part: yy2.id($$10[$0]), original: $$10[$0]}];
            break;
          case 46:
            this.$ = [];
            break;
          case 47:
            $$10[$0 - 1].push($$10[$0]);
            break;
          case 48:
            this.$ = [];
            break;
          case 49:
            $$10[$0 - 1].push($$10[$0]);
            break;
          case 50:
            this.$ = [];
            break;
          case 51:
            $$10[$0 - 1].push($$10[$0]);
            break;
          case 58:
            this.$ = [];
            break;
          case 59:
            $$10[$0 - 1].push($$10[$0]);
            break;
          case 64:
            this.$ = [];
            break;
          case 65:
            $$10[$0 - 1].push($$10[$0]);
            break;
          case 70:
            this.$ = [];
            break;
          case 71:
            $$10[$0 - 1].push($$10[$0]);
            break;
          case 78:
            this.$ = [];
            break;
          case 79:
            $$10[$0 - 1].push($$10[$0]);
            break;
          case 82:
            this.$ = [];
            break;
          case 83:
            $$10[$0 - 1].push($$10[$0]);
            break;
          case 86:
            this.$ = [];
            break;
          case 87:
            $$10[$0 - 1].push($$10[$0]);
            break;
          case 90:
            this.$ = [];
            break;
          case 91:
            $$10[$0 - 1].push($$10[$0]);
            break;
          case 94:
            this.$ = [];
            break;
          case 95:
            $$10[$0 - 1].push($$10[$0]);
            break;
          case 98:
            this.$ = [$$10[$0]];
            break;
          case 99:
            $$10[$0 - 1].push($$10[$0]);
            break;
          case 100:
            this.$ = [$$10[$0]];
            break;
          case 101:
            $$10[$0 - 1].push($$10[$0]);
            break;
        }
      },
      table: [{3: 1, 4: 2, 5: [2, 46], 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46]}, {1: [3]}, {5: [1, 4]}, {5: [2, 2], 7: 5, 8: 6, 9: 7, 10: 8, 11: 9, 12: 10, 13: 11, 14: [1, 12], 15: [1, 20], 16: 17, 19: [1, 23], 24: 15, 27: 16, 29: [1, 21], 34: [1, 22], 39: [2, 2], 44: [2, 2], 47: [2, 2], 48: [1, 13], 51: [1, 14], 55: [1, 18], 59: 19, 60: [1, 24]}, {1: [2, 1]}, {5: [2, 47], 14: [2, 47], 15: [2, 47], 19: [2, 47], 29: [2, 47], 34: [2, 47], 39: [2, 47], 44: [2, 47], 47: [2, 47], 48: [2, 47], 51: [2, 47], 55: [2, 47], 60: [2, 47]}, {5: [2, 3], 14: [2, 3], 15: [2, 3], 19: [2, 3], 29: [2, 3], 34: [2, 3], 39: [2, 3], 44: [2, 3], 47: [2, 3], 48: [2, 3], 51: [2, 3], 55: [2, 3], 60: [2, 3]}, {5: [2, 4], 14: [2, 4], 15: [2, 4], 19: [2, 4], 29: [2, 4], 34: [2, 4], 39: [2, 4], 44: [2, 4], 47: [2, 4], 48: [2, 4], 51: [2, 4], 55: [2, 4], 60: [2, 4]}, {5: [2, 5], 14: [2, 5], 15: [2, 5], 19: [2, 5], 29: [2, 5], 34: [2, 5], 39: [2, 5], 44: [2, 5], 47: [2, 5], 48: [2, 5], 51: [2, 5], 55: [2, 5], 60: [2, 5]}, {5: [2, 6], 14: [2, 6], 15: [2, 6], 19: [2, 6], 29: [2, 6], 34: [2, 6], 39: [2, 6], 44: [2, 6], 47: [2, 6], 48: [2, 6], 51: [2, 6], 55: [2, 6], 60: [2, 6]}, {5: [2, 7], 14: [2, 7], 15: [2, 7], 19: [2, 7], 29: [2, 7], 34: [2, 7], 39: [2, 7], 44: [2, 7], 47: [2, 7], 48: [2, 7], 51: [2, 7], 55: [2, 7], 60: [2, 7]}, {5: [2, 8], 14: [2, 8], 15: [2, 8], 19: [2, 8], 29: [2, 8], 34: [2, 8], 39: [2, 8], 44: [2, 8], 47: [2, 8], 48: [2, 8], 51: [2, 8], 55: [2, 8], 60: [2, 8]}, {5: [2, 9], 14: [2, 9], 15: [2, 9], 19: [2, 9], 29: [2, 9], 34: [2, 9], 39: [2, 9], 44: [2, 9], 47: [2, 9], 48: [2, 9], 51: [2, 9], 55: [2, 9], 60: [2, 9]}, {20: 25, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33}, {20: 36, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33}, {4: 37, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46]}, {4: 38, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46]}, {15: [2, 48], 17: 39, 18: [2, 48]}, {20: 41, 56: 40, 64: 42, 65: [1, 43], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33}, {4: 44, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46]}, {5: [2, 10], 14: [2, 10], 15: [2, 10], 18: [2, 10], 19: [2, 10], 29: [2, 10], 34: [2, 10], 39: [2, 10], 44: [2, 10], 47: [2, 10], 48: [2, 10], 51: [2, 10], 55: [2, 10], 60: [2, 10]}, {20: 45, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33}, {20: 46, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33}, {20: 47, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33}, {20: 41, 56: 48, 64: 42, 65: [1, 43], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33}, {33: [2, 78], 49: 49, 65: [2, 78], 72: [2, 78], 80: [2, 78], 81: [2, 78], 82: [2, 78], 83: [2, 78], 84: [2, 78], 85: [2, 78]}, {23: [2, 33], 33: [2, 33], 54: [2, 33], 65: [2, 33], 68: [2, 33], 72: [2, 33], 75: [2, 33], 80: [2, 33], 81: [2, 33], 82: [2, 33], 83: [2, 33], 84: [2, 33], 85: [2, 33]}, {23: [2, 34], 33: [2, 34], 54: [2, 34], 65: [2, 34], 68: [2, 34], 72: [2, 34], 75: [2, 34], 80: [2, 34], 81: [2, 34], 82: [2, 34], 83: [2, 34], 84: [2, 34], 85: [2, 34]}, {23: [2, 35], 33: [2, 35], 54: [2, 35], 65: [2, 35], 68: [2, 35], 72: [2, 35], 75: [2, 35], 80: [2, 35], 81: [2, 35], 82: [2, 35], 83: [2, 35], 84: [2, 35], 85: [2, 35]}, {23: [2, 36], 33: [2, 36], 54: [2, 36], 65: [2, 36], 68: [2, 36], 72: [2, 36], 75: [2, 36], 80: [2, 36], 81: [2, 36], 82: [2, 36], 83: [2, 36], 84: [2, 36], 85: [2, 36]}, {23: [2, 37], 33: [2, 37], 54: [2, 37], 65: [2, 37], 68: [2, 37], 72: [2, 37], 75: [2, 37], 80: [2, 37], 81: [2, 37], 82: [2, 37], 83: [2, 37], 84: [2, 37], 85: [2, 37]}, {23: [2, 38], 33: [2, 38], 54: [2, 38], 65: [2, 38], 68: [2, 38], 72: [2, 38], 75: [2, 38], 80: [2, 38], 81: [2, 38], 82: [2, 38], 83: [2, 38], 84: [2, 38], 85: [2, 38]}, {23: [2, 39], 33: [2, 39], 54: [2, 39], 65: [2, 39], 68: [2, 39], 72: [2, 39], 75: [2, 39], 80: [2, 39], 81: [2, 39], 82: [2, 39], 83: [2, 39], 84: [2, 39], 85: [2, 39]}, {23: [2, 43], 33: [2, 43], 54: [2, 43], 65: [2, 43], 68: [2, 43], 72: [2, 43], 75: [2, 43], 80: [2, 43], 81: [2, 43], 82: [2, 43], 83: [2, 43], 84: [2, 43], 85: [2, 43], 87: [1, 50]}, {72: [1, 35], 86: 51}, {23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45]}, {52: 52, 54: [2, 82], 65: [2, 82], 72: [2, 82], 80: [2, 82], 81: [2, 82], 82: [2, 82], 83: [2, 82], 84: [2, 82], 85: [2, 82]}, {25: 53, 38: 55, 39: [1, 57], 43: 56, 44: [1, 58], 45: 54, 47: [2, 54]}, {28: 59, 43: 60, 44: [1, 58], 47: [2, 56]}, {13: 62, 15: [1, 20], 18: [1, 61]}, {33: [2, 86], 57: 63, 65: [2, 86], 72: [2, 86], 80: [2, 86], 81: [2, 86], 82: [2, 86], 83: [2, 86], 84: [2, 86], 85: [2, 86]}, {33: [2, 40], 65: [2, 40], 72: [2, 40], 80: [2, 40], 81: [2, 40], 82: [2, 40], 83: [2, 40], 84: [2, 40], 85: [2, 40]}, {33: [2, 41], 65: [2, 41], 72: [2, 41], 80: [2, 41], 81: [2, 41], 82: [2, 41], 83: [2, 41], 84: [2, 41], 85: [2, 41]}, {20: 64, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33}, {26: 65, 47: [1, 66]}, {30: 67, 33: [2, 58], 65: [2, 58], 72: [2, 58], 75: [2, 58], 80: [2, 58], 81: [2, 58], 82: [2, 58], 83: [2, 58], 84: [2, 58], 85: [2, 58]}, {33: [2, 64], 35: 68, 65: [2, 64], 72: [2, 64], 75: [2, 64], 80: [2, 64], 81: [2, 64], 82: [2, 64], 83: [2, 64], 84: [2, 64], 85: [2, 64]}, {21: 69, 23: [2, 50], 65: [2, 50], 72: [2, 50], 80: [2, 50], 81: [2, 50], 82: [2, 50], 83: [2, 50], 84: [2, 50], 85: [2, 50]}, {33: [2, 90], 61: 70, 65: [2, 90], 72: [2, 90], 80: [2, 90], 81: [2, 90], 82: [2, 90], 83: [2, 90], 84: [2, 90], 85: [2, 90]}, {20: 74, 33: [2, 80], 50: 71, 63: 72, 64: 75, 65: [1, 43], 69: 73, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33}, {72: [1, 79]}, {23: [2, 42], 33: [2, 42], 54: [2, 42], 65: [2, 42], 68: [2, 42], 72: [2, 42], 75: [2, 42], 80: [2, 42], 81: [2, 42], 82: [2, 42], 83: [2, 42], 84: [2, 42], 85: [2, 42], 87: [1, 50]}, {20: 74, 53: 80, 54: [2, 84], 63: 81, 64: 75, 65: [1, 43], 69: 82, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33}, {26: 83, 47: [1, 66]}, {47: [2, 55]}, {4: 84, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46]}, {47: [2, 20]}, {20: 85, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33}, {4: 86, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46]}, {26: 87, 47: [1, 66]}, {47: [2, 57]}, {5: [2, 11], 14: [2, 11], 15: [2, 11], 19: [2, 11], 29: [2, 11], 34: [2, 11], 39: [2, 11], 44: [2, 11], 47: [2, 11], 48: [2, 11], 51: [2, 11], 55: [2, 11], 60: [2, 11]}, {15: [2, 49], 18: [2, 49]}, {20: 74, 33: [2, 88], 58: 88, 63: 89, 64: 75, 65: [1, 43], 69: 90, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33}, {65: [2, 94], 66: 91, 68: [2, 94], 72: [2, 94], 80: [2, 94], 81: [2, 94], 82: [2, 94], 83: [2, 94], 84: [2, 94], 85: [2, 94]}, {5: [2, 25], 14: [2, 25], 15: [2, 25], 19: [2, 25], 29: [2, 25], 34: [2, 25], 39: [2, 25], 44: [2, 25], 47: [2, 25], 48: [2, 25], 51: [2, 25], 55: [2, 25], 60: [2, 25]}, {20: 92, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33}, {20: 74, 31: 93, 33: [2, 60], 63: 94, 64: 75, 65: [1, 43], 69: 95, 70: 76, 71: 77, 72: [1, 78], 75: [2, 60], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33}, {20: 74, 33: [2, 66], 36: 96, 63: 97, 64: 75, 65: [1, 43], 69: 98, 70: 76, 71: 77, 72: [1, 78], 75: [2, 66], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33}, {20: 74, 22: 99, 23: [2, 52], 63: 100, 64: 75, 65: [1, 43], 69: 101, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33}, {20: 74, 33: [2, 92], 62: 102, 63: 103, 64: 75, 65: [1, 43], 69: 104, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33}, {33: [1, 105]}, {33: [2, 79], 65: [2, 79], 72: [2, 79], 80: [2, 79], 81: [2, 79], 82: [2, 79], 83: [2, 79], 84: [2, 79], 85: [2, 79]}, {33: [2, 81]}, {23: [2, 27], 33: [2, 27], 54: [2, 27], 65: [2, 27], 68: [2, 27], 72: [2, 27], 75: [2, 27], 80: [2, 27], 81: [2, 27], 82: [2, 27], 83: [2, 27], 84: [2, 27], 85: [2, 27]}, {23: [2, 28], 33: [2, 28], 54: [2, 28], 65: [2, 28], 68: [2, 28], 72: [2, 28], 75: [2, 28], 80: [2, 28], 81: [2, 28], 82: [2, 28], 83: [2, 28], 84: [2, 28], 85: [2, 28]}, {23: [2, 30], 33: [2, 30], 54: [2, 30], 68: [2, 30], 71: 106, 72: [1, 107], 75: [2, 30]}, {23: [2, 98], 33: [2, 98], 54: [2, 98], 68: [2, 98], 72: [2, 98], 75: [2, 98]}, {23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 73: [1, 108], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45]}, {23: [2, 44], 33: [2, 44], 54: [2, 44], 65: [2, 44], 68: [2, 44], 72: [2, 44], 75: [2, 44], 80: [2, 44], 81: [2, 44], 82: [2, 44], 83: [2, 44], 84: [2, 44], 85: [2, 44], 87: [2, 44]}, {54: [1, 109]}, {54: [2, 83], 65: [2, 83], 72: [2, 83], 80: [2, 83], 81: [2, 83], 82: [2, 83], 83: [2, 83], 84: [2, 83], 85: [2, 83]}, {54: [2, 85]}, {5: [2, 13], 14: [2, 13], 15: [2, 13], 19: [2, 13], 29: [2, 13], 34: [2, 13], 39: [2, 13], 44: [2, 13], 47: [2, 13], 48: [2, 13], 51: [2, 13], 55: [2, 13], 60: [2, 13]}, {38: 55, 39: [1, 57], 43: 56, 44: [1, 58], 45: 111, 46: 110, 47: [2, 76]}, {33: [2, 70], 40: 112, 65: [2, 70], 72: [2, 70], 75: [2, 70], 80: [2, 70], 81: [2, 70], 82: [2, 70], 83: [2, 70], 84: [2, 70], 85: [2, 70]}, {47: [2, 18]}, {5: [2, 14], 14: [2, 14], 15: [2, 14], 19: [2, 14], 29: [2, 14], 34: [2, 14], 39: [2, 14], 44: [2, 14], 47: [2, 14], 48: [2, 14], 51: [2, 14], 55: [2, 14], 60: [2, 14]}, {33: [1, 113]}, {33: [2, 87], 65: [2, 87], 72: [2, 87], 80: [2, 87], 81: [2, 87], 82: [2, 87], 83: [2, 87], 84: [2, 87], 85: [2, 87]}, {33: [2, 89]}, {20: 74, 63: 115, 64: 75, 65: [1, 43], 67: 114, 68: [2, 96], 69: 116, 70: 76, 71: 77, 72: [1, 78], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33}, {33: [1, 117]}, {32: 118, 33: [2, 62], 74: 119, 75: [1, 120]}, {33: [2, 59], 65: [2, 59], 72: [2, 59], 75: [2, 59], 80: [2, 59], 81: [2, 59], 82: [2, 59], 83: [2, 59], 84: [2, 59], 85: [2, 59]}, {33: [2, 61], 75: [2, 61]}, {33: [2, 68], 37: 121, 74: 122, 75: [1, 120]}, {33: [2, 65], 65: [2, 65], 72: [2, 65], 75: [2, 65], 80: [2, 65], 81: [2, 65], 82: [2, 65], 83: [2, 65], 84: [2, 65], 85: [2, 65]}, {33: [2, 67], 75: [2, 67]}, {23: [1, 123]}, {23: [2, 51], 65: [2, 51], 72: [2, 51], 80: [2, 51], 81: [2, 51], 82: [2, 51], 83: [2, 51], 84: [2, 51], 85: [2, 51]}, {23: [2, 53]}, {33: [1, 124]}, {33: [2, 91], 65: [2, 91], 72: [2, 91], 80: [2, 91], 81: [2, 91], 82: [2, 91], 83: [2, 91], 84: [2, 91], 85: [2, 91]}, {33: [2, 93]}, {5: [2, 22], 14: [2, 22], 15: [2, 22], 19: [2, 22], 29: [2, 22], 34: [2, 22], 39: [2, 22], 44: [2, 22], 47: [2, 22], 48: [2, 22], 51: [2, 22], 55: [2, 22], 60: [2, 22]}, {23: [2, 99], 33: [2, 99], 54: [2, 99], 68: [2, 99], 72: [2, 99], 75: [2, 99]}, {73: [1, 108]}, {20: 74, 63: 125, 64: 75, 65: [1, 43], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33}, {5: [2, 23], 14: [2, 23], 15: [2, 23], 19: [2, 23], 29: [2, 23], 34: [2, 23], 39: [2, 23], 44: [2, 23], 47: [2, 23], 48: [2, 23], 51: [2, 23], 55: [2, 23], 60: [2, 23]}, {47: [2, 19]}, {47: [2, 77]}, {20: 74, 33: [2, 72], 41: 126, 63: 127, 64: 75, 65: [1, 43], 69: 128, 70: 76, 71: 77, 72: [1, 78], 75: [2, 72], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33}, {5: [2, 24], 14: [2, 24], 15: [2, 24], 19: [2, 24], 29: [2, 24], 34: [2, 24], 39: [2, 24], 44: [2, 24], 47: [2, 24], 48: [2, 24], 51: [2, 24], 55: [2, 24], 60: [2, 24]}, {68: [1, 129]}, {65: [2, 95], 68: [2, 95], 72: [2, 95], 80: [2, 95], 81: [2, 95], 82: [2, 95], 83: [2, 95], 84: [2, 95], 85: [2, 95]}, {68: [2, 97]}, {5: [2, 21], 14: [2, 21], 15: [2, 21], 19: [2, 21], 29: [2, 21], 34: [2, 21], 39: [2, 21], 44: [2, 21], 47: [2, 21], 48: [2, 21], 51: [2, 21], 55: [2, 21], 60: [2, 21]}, {33: [1, 130]}, {33: [2, 63]}, {72: [1, 132], 76: 131}, {33: [1, 133]}, {33: [2, 69]}, {15: [2, 12], 18: [2, 12]}, {14: [2, 26], 15: [2, 26], 19: [2, 26], 29: [2, 26], 34: [2, 26], 47: [2, 26], 48: [2, 26], 51: [2, 26], 55: [2, 26], 60: [2, 26]}, {23: [2, 31], 33: [2, 31], 54: [2, 31], 68: [2, 31], 72: [2, 31], 75: [2, 31]}, {33: [2, 74], 42: 134, 74: 135, 75: [1, 120]}, {33: [2, 71], 65: [2, 71], 72: [2, 71], 75: [2, 71], 80: [2, 71], 81: [2, 71], 82: [2, 71], 83: [2, 71], 84: [2, 71], 85: [2, 71]}, {33: [2, 73], 75: [2, 73]}, {23: [2, 29], 33: [2, 29], 54: [2, 29], 65: [2, 29], 68: [2, 29], 72: [2, 29], 75: [2, 29], 80: [2, 29], 81: [2, 29], 82: [2, 29], 83: [2, 29], 84: [2, 29], 85: [2, 29]}, {14: [2, 15], 15: [2, 15], 19: [2, 15], 29: [2, 15], 34: [2, 15], 39: [2, 15], 44: [2, 15], 47: [2, 15], 48: [2, 15], 51: [2, 15], 55: [2, 15], 60: [2, 15]}, {72: [1, 137], 77: [1, 136]}, {72: [2, 100], 77: [2, 100]}, {14: [2, 16], 15: [2, 16], 19: [2, 16], 29: [2, 16], 34: [2, 16], 44: [2, 16], 47: [2, 16], 48: [2, 16], 51: [2, 16], 55: [2, 16], 60: [2, 16]}, {33: [1, 138]}, {33: [2, 75]}, {33: [2, 32]}, {72: [2, 101], 77: [2, 101]}, {14: [2, 17], 15: [2, 17], 19: [2, 17], 29: [2, 17], 34: [2, 17], 39: [2, 17], 44: [2, 17], 47: [2, 17], 48: [2, 17], 51: [2, 17], 55: [2, 17], 60: [2, 17]}],
      defaultActions: {4: [2, 1], 54: [2, 55], 56: [2, 20], 60: [2, 57], 73: [2, 81], 82: [2, 85], 86: [2, 18], 90: [2, 89], 101: [2, 53], 104: [2, 93], 110: [2, 19], 111: [2, 77], 116: [2, 97], 119: [2, 63], 122: [2, 69], 135: [2, 75], 136: [2, 32]},
      parseError: function parseError(str, hash) {
        throw new Error(str);
      },
      parse: function parse5(input) {
        var self2 = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0;
        this.lexer.setInput(input);
        this.lexer.yy = this.yy;
        this.yy.lexer = this.lexer;
        this.yy.parser = this;
        if (typeof this.lexer.yylloc == "undefined")
          this.lexer.yylloc = {};
        var yyloc = this.lexer.yylloc;
        lstack.push(yyloc);
        var ranges = this.lexer.options && this.lexer.options.ranges;
        if (typeof this.yy.parseError === "function")
          this.parseError = this.yy.parseError;
        function lex() {
          var token;
          token = self2.lexer.lex() || 1;
          if (typeof token !== "number") {
            token = self2.symbols_[token] || token;
          }
          return token;
        }
        var symbol, state, action, r2, yyval = {}, p2, len, newState, expected;
        while (true) {
          state = stack[stack.length - 1];
          if (this.defaultActions[state]) {
            action = this.defaultActions[state];
          } else {
            if (symbol === null || typeof symbol == "undefined") {
              symbol = lex();
            }
            action = table[state] && table[state][symbol];
          }
          if (typeof action === "undefined" || !action.length || !action[0]) {
            var errStr = "";
            if (!recovering) {
              expected = [];
              for (p2 in table[state])
                if (this.terminals_[p2] && p2 > 2) {
                  expected.push("'" + this.terminals_[p2] + "'");
                }
              if (this.lexer.showPosition) {
                errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
              } else {
                errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1 ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
              }
              this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected});
            }
          }
          if (action[0] instanceof Array && action.length > 1) {
            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
          }
          switch (action[0]) {
            case 1:
              stack.push(symbol);
              vstack.push(this.lexer.yytext);
              lstack.push(this.lexer.yylloc);
              stack.push(action[1]);
              symbol = null;
              {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0)
                  recovering--;
              }
              break;
            case 2:
              len = this.productions_[action[1]][1];
              yyval.$ = vstack[vstack.length - len];
              yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
              if (ranges) {
                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
              }
              r2 = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
              if (typeof r2 !== "undefined") {
                return r2;
              }
              if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
              }
              stack.push(this.productions_[action[1]][0]);
              vstack.push(yyval.$);
              lstack.push(yyval._$);
              newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
              stack.push(newState);
              break;
            case 3:
              return true;
          }
        }
        return true;
      }
    };
    var lexer = function() {
      var lexer2 = {
        EOF: 1,
        parseError: function parseError(str, hash) {
          if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
          } else {
            throw new Error(str);
          }
        },
        setInput: function setInput(input) {
          this._input = input;
          this._more = this._less = this.done = false;
          this.yylineno = this.yyleng = 0;
          this.yytext = this.matched = this.match = "";
          this.conditionStack = ["INITIAL"];
          this.yylloc = {first_line: 1, first_column: 0, last_line: 1, last_column: 0};
          if (this.options.ranges)
            this.yylloc.range = [0, 0];
          this.offset = 0;
          return this;
        },
        input: function input() {
          var ch = this._input[0];
          this.yytext += ch;
          this.yyleng++;
          this.offset++;
          this.match += ch;
          this.matched += ch;
          var lines = ch.match(/(?:\r\n?|\n).*/g);
          if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
          } else {
            this.yylloc.last_column++;
          }
          if (this.options.ranges)
            this.yylloc.range[1]++;
          this._input = this._input.slice(1);
          return ch;
        },
        unput: function unput(ch) {
          var len = ch.length;
          var lines = ch.split(/(?:\r\n?|\n)/g);
          this._input = ch + this._input;
          this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
          this.offset -= len;
          var oldLines = this.match.split(/(?:\r\n?|\n)/g);
          this.match = this.match.substr(0, this.match.length - 1);
          this.matched = this.matched.substr(0, this.matched.length - 1);
          if (lines.length - 1)
            this.yylineno -= lines.length - 1;
          var r2 = this.yylloc.range;
          this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
          };
          if (this.options.ranges) {
            this.yylloc.range = [r2[0], r2[0] + this.yyleng - len];
          }
          return this;
        },
        more: function more() {
          this._more = true;
          return this;
        },
        less: function less2(n2) {
          this.unput(this.match.slice(n2));
        },
        pastInput: function pastInput() {
          var past = this.matched.substr(0, this.matched.length - this.match.length);
          return (past.length > 20 ? "..." : "") + past.substr(-20).replace(/\n/g, "");
        },
        upcomingInput: function upcomingInput() {
          var next = this.match;
          if (next.length < 20) {
            next += this._input.substr(0, 20 - next.length);
          }
          return (next.substr(0, 20) + (next.length > 20 ? "..." : "")).replace(/\n/g, "");
        },
        showPosition: function showPosition() {
          var pre = this.pastInput();
          var c2 = new Array(pre.length + 1).join("-");
          return pre + this.upcomingInput() + "\n" + c2 + "^";
        },
        next: function next() {
          if (this.done) {
            return this.EOF;
          }
          if (!this._input)
            this.done = true;
          var token, match2, tempMatch, index, lines;
          if (!this._more) {
            this.yytext = "";
            this.match = "";
          }
          var rules2 = this._currentRules();
          for (var i2 = 0; i2 < rules2.length; i2++) {
            tempMatch = this._input.match(this.rules[rules2[i2]]);
            if (tempMatch && (!match2 || tempMatch[0].length > match2[0].length)) {
              match2 = tempMatch;
              index = i2;
              if (!this.options.flex)
                break;
            }
          }
          if (match2) {
            lines = match2[0].match(/(?:\r\n?|\n).*/g);
            if (lines)
              this.yylineno += lines.length;
            this.yylloc = {
              first_line: this.yylloc.last_line,
              last_line: this.yylineno + 1,
              first_column: this.yylloc.last_column,
              last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match2[0].length
            };
            this.yytext += match2[0];
            this.match += match2[0];
            this.matches = match2;
            this.yyleng = this.yytext.length;
            if (this.options.ranges) {
              this.yylloc.range = [this.offset, this.offset += this.yyleng];
            }
            this._more = false;
            this._input = this._input.slice(match2[0].length);
            this.matched += match2[0];
            token = this.performAction.call(this, this.yy, this, rules2[index], this.conditionStack[this.conditionStack.length - 1]);
            if (this.done && this._input)
              this.done = false;
            if (token)
              return token;
            else
              return;
          }
          if (this._input === "") {
            return this.EOF;
          } else {
            return this.parseError("Lexical error on line " + (this.yylineno + 1) + ". Unrecognized text.\n" + this.showPosition(), {text: "", token: null, line: this.yylineno});
          }
        },
        lex: function lex() {
          var r2 = this.next();
          if (typeof r2 !== "undefined") {
            return r2;
          } else {
            return this.lex();
          }
        },
        begin: function begin(condition) {
          this.conditionStack.push(condition);
        },
        popState: function popState() {
          return this.conditionStack.pop();
        },
        _currentRules: function _currentRules() {
          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        },
        topState: function topState() {
          return this.conditionStack[this.conditionStack.length - 2];
        },
        pushState: function begin(condition) {
          this.begin(condition);
        }
      };
      lexer2.options = {};
      lexer2.performAction = function anonymous(yy2, yy_, $avoiding_name_collisions, YY_START) {
        function strip(start, end) {
          return yy_.yytext = yy_.yytext.substring(start, yy_.yyleng - end + start);
        }
        switch ($avoiding_name_collisions) {
          case 0:
            if (yy_.yytext.slice(-2) === "\\\\") {
              strip(0, 1);
              this.begin("mu");
            } else if (yy_.yytext.slice(-1) === "\\") {
              strip(0, 1);
              this.begin("emu");
            } else {
              this.begin("mu");
            }
            if (yy_.yytext)
              return 15;
            break;
          case 1:
            return 15;
          case 2:
            this.popState();
            return 15;
          case 3:
            this.begin("raw");
            return 15;
          case 4:
            this.popState();
            if (this.conditionStack[this.conditionStack.length - 1] === "raw") {
              return 15;
            } else {
              strip(5, 9);
              return "END_RAW_BLOCK";
            }
          case 5:
            return 15;
          case 6:
            this.popState();
            return 14;
          case 7:
            return 65;
          case 8:
            return 68;
          case 9:
            return 19;
          case 10:
            this.popState();
            this.begin("raw");
            return 23;
          case 11:
            return 55;
          case 12:
            return 60;
          case 13:
            return 29;
          case 14:
            return 47;
          case 15:
            this.popState();
            return 44;
          case 16:
            this.popState();
            return 44;
          case 17:
            return 34;
          case 18:
            return 39;
          case 19:
            return 51;
          case 20:
            return 48;
          case 21:
            this.unput(yy_.yytext);
            this.popState();
            this.begin("com");
            break;
          case 22:
            this.popState();
            return 14;
          case 23:
            return 48;
          case 24:
            return 73;
          case 25:
            return 72;
          case 26:
            return 72;
          case 27:
            return 87;
          case 28:
            break;
          case 29:
            this.popState();
            return 54;
          case 30:
            this.popState();
            return 33;
          case 31:
            yy_.yytext = strip(1, 2).replace(/\\"/g, '"');
            return 80;
          case 32:
            yy_.yytext = strip(1, 2).replace(/\\'/g, "'");
            return 80;
          case 33:
            return 85;
          case 34:
            return 82;
          case 35:
            return 82;
          case 36:
            return 83;
          case 37:
            return 84;
          case 38:
            return 81;
          case 39:
            return 75;
          case 40:
            return 77;
          case 41:
            return 72;
          case 42:
            yy_.yytext = yy_.yytext.replace(/\\([\\\]])/g, "$1");
            return 72;
          case 43:
            return "INVALID";
          case 44:
            return 5;
        }
      };
      lexer2.rules = [/^(?:[^\x00]*?(?=(\{\{)))/, /^(?:[^\x00]+)/, /^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/, /^(?:\{\{\{\{(?=[^\/]))/, /^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/, /^(?:[^\x00]+?(?=(\{\{\{\{)))/, /^(?:[\s\S]*?--(~)?\}\})/, /^(?:\()/, /^(?:\))/, /^(?:\{\{\{\{)/, /^(?:\}\}\}\})/, /^(?:\{\{(~)?>)/, /^(?:\{\{(~)?#>)/, /^(?:\{\{(~)?#\*?)/, /^(?:\{\{(~)?\/)/, /^(?:\{\{(~)?\^\s*(~)?\}\})/, /^(?:\{\{(~)?\s*else\s*(~)?\}\})/, /^(?:\{\{(~)?\^)/, /^(?:\{\{(~)?\s*else\b)/, /^(?:\{\{(~)?\{)/, /^(?:\{\{(~)?&)/, /^(?:\{\{(~)?!--)/, /^(?:\{\{(~)?![\s\S]*?\}\})/, /^(?:\{\{(~)?\*?)/, /^(?:=)/, /^(?:\.\.)/, /^(?:\.(?=([=~}\s\/.)|])))/, /^(?:[\/.])/, /^(?:\s+)/, /^(?:\}(~)?\}\})/, /^(?:(~)?\}\})/, /^(?:"(\\["]|[^"])*")/, /^(?:'(\\[']|[^'])*')/, /^(?:@)/, /^(?:true(?=([~}\s)])))/, /^(?:false(?=([~}\s)])))/, /^(?:undefined(?=([~}\s)])))/, /^(?:null(?=([~}\s)])))/, /^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/, /^(?:as\s+\|)/, /^(?:\|)/, /^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/, /^(?:\[(\\\]|[^\]])*\])/, /^(?:.)/, /^(?:$)/];
      lexer2.conditions = {"mu": {"rules": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "inclusive": false}, "emu": {"rules": [2], "inclusive": false}, "com": {"rules": [6], "inclusive": false}, "raw": {"rules": [3, 4, 5], "inclusive": false}, "INITIAL": {"rules": [0, 1, 44], "inclusive": true}};
      return lexer2;
    }();
    parser2.lexer = lexer;
    function Parser2() {
      this.yy = {};
    }
    Parser2.prototype = parser2;
    parser2.Parser = Parser2;
    return new Parser2();
  }();
  exports["default"] = handlebars2;
  module.exports = exports["default"];
})(parser$1, parser$1.exports);
var whitespaceControl = {exports: {}};
var visitor = {exports: {}};
(function(module, exports) {
  exports.__esModule = true;
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : {"default": obj};
  }
  var _exception3 = exception.exports;
  var _exception22 = _interopRequireDefault2(_exception3);
  function Visitor() {
    this.parents = [];
  }
  Visitor.prototype = {
    constructor: Visitor,
    mutating: false,
    acceptKey: function acceptKey(node, name2) {
      var value = this.accept(node[name2]);
      if (this.mutating) {
        if (value && !Visitor.prototype[value.type]) {
          throw new _exception22["default"]('Unexpected node type "' + value.type + '" found when accepting ' + name2 + " on " + node.type);
        }
        node[name2] = value;
      }
    },
    acceptRequired: function acceptRequired(node, name2) {
      this.acceptKey(node, name2);
      if (!node[name2]) {
        throw new _exception22["default"](node.type + " requires " + name2);
      }
    },
    acceptArray: function acceptArray(array) {
      for (var i2 = 0, l2 = array.length; i2 < l2; i2++) {
        this.acceptKey(array, i2);
        if (!array[i2]) {
          array.splice(i2, 1);
          i2--;
          l2--;
        }
      }
    },
    accept: function accept2(object) {
      if (!object) {
        return;
      }
      if (!this[object.type]) {
        throw new _exception22["default"]("Unknown type: " + object.type, object);
      }
      if (this.current) {
        this.parents.unshift(this.current);
      }
      this.current = object;
      var ret = this[object.type](object);
      this.current = this.parents.shift();
      if (!this.mutating || ret) {
        return ret;
      } else if (ret !== false) {
        return object;
      }
    },
    Program: function Program2(program) {
      this.acceptArray(program.body);
    },
    MustacheStatement: visitSubExpression,
    Decorator: visitSubExpression,
    BlockStatement: visitBlock,
    DecoratorBlock: visitBlock,
    PartialStatement: visitPartial,
    PartialBlockStatement: function PartialBlockStatement2(partial) {
      visitPartial.call(this, partial);
      this.acceptKey(partial, "program");
    },
    ContentStatement: function ContentStatement2() {
    },
    CommentStatement: function CommentStatement2() {
    },
    SubExpression: visitSubExpression,
    PathExpression: function PathExpression2() {
    },
    StringLiteral: function StringLiteral2() {
    },
    NumberLiteral: function NumberLiteral2() {
    },
    BooleanLiteral: function BooleanLiteral2() {
    },
    UndefinedLiteral: function UndefinedLiteral2() {
    },
    NullLiteral: function NullLiteral2() {
    },
    Hash: function Hash2(hash) {
      this.acceptArray(hash.pairs);
    },
    HashPair: function HashPair(pair) {
      this.acceptRequired(pair, "value");
    }
  };
  function visitSubExpression(mustache2) {
    this.acceptRequired(mustache2, "path");
    this.acceptArray(mustache2.params);
    this.acceptKey(mustache2, "hash");
  }
  function visitBlock(block) {
    visitSubExpression.call(this, block);
    this.acceptKey(block, "program");
    this.acceptKey(block, "inverse");
  }
  function visitPartial(partial) {
    this.acceptRequired(partial, "name");
    this.acceptArray(partial.params);
    this.acceptKey(partial, "hash");
  }
  exports["default"] = Visitor;
  module.exports = exports["default"];
})(visitor, visitor.exports);
(function(module, exports) {
  exports.__esModule = true;
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : {"default": obj};
  }
  var _visitor = visitor.exports;
  var _visitor2 = _interopRequireDefault2(_visitor);
  function WhitespaceControl() {
    var options = arguments.length <= 0 || arguments[0] === void 0 ? {} : arguments[0];
    this.options = options;
  }
  WhitespaceControl.prototype = new _visitor2["default"]();
  WhitespaceControl.prototype.Program = function(program) {
    var doStandalone = !this.options.ignoreStandalone;
    var isRoot = !this.isRootSeen;
    this.isRootSeen = true;
    var body = program.body;
    for (var i2 = 0, l2 = body.length; i2 < l2; i2++) {
      var current = body[i2], strip = this.accept(current);
      if (!strip) {
        continue;
      }
      var _isPrevWhitespace = isPrevWhitespace(body, i2, isRoot), _isNextWhitespace = isNextWhitespace(body, i2, isRoot), openStandalone = strip.openStandalone && _isPrevWhitespace, closeStandalone = strip.closeStandalone && _isNextWhitespace, inlineStandalone = strip.inlineStandalone && _isPrevWhitespace && _isNextWhitespace;
      if (strip.close) {
        omitRight(body, i2, true);
      }
      if (strip.open) {
        omitLeft(body, i2, true);
      }
      if (doStandalone && inlineStandalone) {
        omitRight(body, i2);
        if (omitLeft(body, i2)) {
          if (current.type === "PartialStatement") {
            current.indent = /([ \t]+$)/.exec(body[i2 - 1].original)[1];
          }
        }
      }
      if (doStandalone && openStandalone) {
        omitRight((current.program || current.inverse).body);
        omitLeft(body, i2);
      }
      if (doStandalone && closeStandalone) {
        omitRight(body, i2);
        omitLeft((current.inverse || current.program).body);
      }
    }
    return program;
  };
  WhitespaceControl.prototype.BlockStatement = WhitespaceControl.prototype.DecoratorBlock = WhitespaceControl.prototype.PartialBlockStatement = function(block) {
    this.accept(block.program);
    this.accept(block.inverse);
    var program = block.program || block.inverse, inverse = block.program && block.inverse, firstInverse = inverse, lastInverse = inverse;
    if (inverse && inverse.chained) {
      firstInverse = inverse.body[0].program;
      while (lastInverse.chained) {
        lastInverse = lastInverse.body[lastInverse.body.length - 1].program;
      }
    }
    var strip = {
      open: block.openStrip.open,
      close: block.closeStrip.close,
      openStandalone: isNextWhitespace(program.body),
      closeStandalone: isPrevWhitespace((firstInverse || program).body)
    };
    if (block.openStrip.close) {
      omitRight(program.body, null, true);
    }
    if (inverse) {
      var inverseStrip = block.inverseStrip;
      if (inverseStrip.open) {
        omitLeft(program.body, null, true);
      }
      if (inverseStrip.close) {
        omitRight(firstInverse.body, null, true);
      }
      if (block.closeStrip.open) {
        omitLeft(lastInverse.body, null, true);
      }
      if (!this.options.ignoreStandalone && isPrevWhitespace(program.body) && isNextWhitespace(firstInverse.body)) {
        omitLeft(program.body);
        omitRight(firstInverse.body);
      }
    } else if (block.closeStrip.open) {
      omitLeft(program.body, null, true);
    }
    return strip;
  };
  WhitespaceControl.prototype.Decorator = WhitespaceControl.prototype.MustacheStatement = function(mustache2) {
    return mustache2.strip;
  };
  WhitespaceControl.prototype.PartialStatement = WhitespaceControl.prototype.CommentStatement = function(node) {
    var strip = node.strip || {};
    return {
      inlineStandalone: true,
      open: strip.open,
      close: strip.close
    };
  };
  function isPrevWhitespace(body, i2, isRoot) {
    if (i2 === void 0) {
      i2 = body.length;
    }
    var prev = body[i2 - 1], sibling = body[i2 - 2];
    if (!prev) {
      return isRoot;
    }
    if (prev.type === "ContentStatement") {
      return (sibling || !isRoot ? /\r?\n\s*?$/ : /(^|\r?\n)\s*?$/).test(prev.original);
    }
  }
  function isNextWhitespace(body, i2, isRoot) {
    if (i2 === void 0) {
      i2 = -1;
    }
    var next = body[i2 + 1], sibling = body[i2 + 2];
    if (!next) {
      return isRoot;
    }
    if (next.type === "ContentStatement") {
      return (sibling || !isRoot ? /^\s*?\r?\n/ : /^\s*?(\r?\n|$)/).test(next.original);
    }
  }
  function omitRight(body, i2, multiple) {
    var current = body[i2 == null ? 0 : i2 + 1];
    if (!current || current.type !== "ContentStatement" || !multiple && current.rightStripped) {
      return;
    }
    var original = current.value;
    current.value = current.value.replace(multiple ? /^\s+/ : /^[ \t]*\r?\n?/, "");
    current.rightStripped = current.value !== original;
  }
  function omitLeft(body, i2, multiple) {
    var current = body[i2 == null ? body.length - 1 : i2 - 1];
    if (!current || current.type !== "ContentStatement" || !multiple && current.leftStripped) {
      return;
    }
    var original = current.value;
    current.value = current.value.replace(multiple ? /\s+$/ : /[ \t]+$/, "");
    current.leftStripped = current.value !== original;
    return current.leftStripped;
  }
  exports["default"] = WhitespaceControl;
  module.exports = exports["default"];
})(whitespaceControl, whitespaceControl.exports);
var helpers = {};
helpers.__esModule = true;
helpers.SourceLocation = SourceLocation;
helpers.id = id;
helpers.stripFlags = stripFlags;
helpers.stripComment = stripComment;
helpers.preparePath = preparePath;
helpers.prepareMustache = prepareMustache;
helpers.prepareRawBlock = prepareRawBlock;
helpers.prepareBlock = prepareBlock;
helpers.prepareProgram = prepareProgram;
helpers.preparePartialBlock = preparePartialBlock;
function _interopRequireDefault$2(obj) {
  return obj && obj.__esModule ? obj : {"default": obj};
}
var _exception$1 = exception.exports;
var _exception2$1 = _interopRequireDefault$2(_exception$1);
function validateClose(open, close) {
  close = close.path ? close.path.original : close;
  if (open.path.original !== close) {
    var errorNode = {loc: open.path.loc};
    throw new _exception2$1["default"](open.path.original + " doesn't match " + close, errorNode);
  }
}
function SourceLocation(source3, locInfo) {
  this.source = source3;
  this.start = {
    line: locInfo.first_line,
    column: locInfo.first_column
  };
  this.end = {
    line: locInfo.last_line,
    column: locInfo.last_column
  };
}
function id(token) {
  if (/^\[.*\]$/.test(token)) {
    return token.substring(1, token.length - 1);
  } else {
    return token;
  }
}
function stripFlags(open, close) {
  return {
    open: open.charAt(2) === "~",
    close: close.charAt(close.length - 3) === "~"
  };
}
function stripComment(comment) {
  return comment.replace(/^\{\{~?!-?-?/, "").replace(/-?-?~?\}\}$/, "");
}
function preparePath(data, parts, loc) {
  loc = this.locInfo(loc);
  var original = data ? "@" : "", dig = [], depth = 0;
  for (var i2 = 0, l2 = parts.length; i2 < l2; i2++) {
    var part = parts[i2].part, isLiteral = parts[i2].original !== part;
    original += (parts[i2].separator || "") + part;
    if (!isLiteral && (part === ".." || part === "." || part === "this")) {
      if (dig.length > 0) {
        throw new _exception2$1["default"]("Invalid path: " + original, {loc});
      } else if (part === "..") {
        depth++;
      }
    } else {
      dig.push(part);
    }
  }
  return {
    type: "PathExpression",
    data,
    depth,
    parts: dig,
    original,
    loc
  };
}
function prepareMustache(path2, params, hash, open, strip, locInfo) {
  var escapeFlag = open.charAt(3) || open.charAt(2), escaped = escapeFlag !== "{" && escapeFlag !== "&";
  var decorator = /\*/.test(open);
  return {
    type: decorator ? "Decorator" : "MustacheStatement",
    path: path2,
    params,
    hash,
    escaped,
    strip,
    loc: this.locInfo(locInfo)
  };
}
function prepareRawBlock(openRawBlock, contents, close, locInfo) {
  validateClose(openRawBlock, close);
  locInfo = this.locInfo(locInfo);
  var program = {
    type: "Program",
    body: contents,
    strip: {},
    loc: locInfo
  };
  return {
    type: "BlockStatement",
    path: openRawBlock.path,
    params: openRawBlock.params,
    hash: openRawBlock.hash,
    program,
    openStrip: {},
    inverseStrip: {},
    closeStrip: {},
    loc: locInfo
  };
}
function prepareBlock(openBlock, program, inverseAndProgram, close, inverted, locInfo) {
  if (close && close.path) {
    validateClose(openBlock, close);
  }
  var decorator = /\*/.test(openBlock.open);
  program.blockParams = openBlock.blockParams;
  var inverse = void 0, inverseStrip = void 0;
  if (inverseAndProgram) {
    if (decorator) {
      throw new _exception2$1["default"]("Unexpected inverse block on decorator", inverseAndProgram);
    }
    if (inverseAndProgram.chain) {
      inverseAndProgram.program.body[0].closeStrip = close.strip;
    }
    inverseStrip = inverseAndProgram.strip;
    inverse = inverseAndProgram.program;
  }
  if (inverted) {
    inverted = inverse;
    inverse = program;
    program = inverted;
  }
  return {
    type: decorator ? "DecoratorBlock" : "BlockStatement",
    path: openBlock.path,
    params: openBlock.params,
    hash: openBlock.hash,
    program,
    inverse,
    openStrip: openBlock.strip,
    inverseStrip,
    closeStrip: close && close.strip,
    loc: this.locInfo(locInfo)
  };
}
function prepareProgram(statements, loc) {
  if (!loc && statements.length) {
    var firstLoc = statements[0].loc, lastLoc = statements[statements.length - 1].loc;
    if (firstLoc && lastLoc) {
      loc = {
        source: firstLoc.source,
        start: {
          line: firstLoc.start.line,
          column: firstLoc.start.column
        },
        end: {
          line: lastLoc.end.line,
          column: lastLoc.end.column
        }
      };
    }
  }
  return {
    type: "Program",
    body: statements,
    strip: {},
    loc
  };
}
function preparePartialBlock(open, program, close, locInfo) {
  validateClose(open, close);
  return {
    type: "PartialBlockStatement",
    name: open.path,
    params: open.params,
    hash: open.hash,
    program,
    openStrip: open.strip,
    closeStrip: close && close.strip,
    loc: this.locInfo(locInfo)
  };
}
base.__esModule = true;
base.parseWithoutProcessing = parseWithoutProcessing;
base.parse = parse$2;
function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};
    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key))
          newObj[key] = obj[key];
      }
    }
    newObj["default"] = obj;
    return newObj;
  }
}
function _interopRequireDefault$1(obj) {
  return obj && obj.__esModule ? obj : {"default": obj};
}
var _parser = parser$1.exports;
var _parser2 = _interopRequireDefault$1(_parser);
var _whitespaceControl = whitespaceControl.exports;
var _whitespaceControl2 = _interopRequireDefault$1(_whitespaceControl);
var _helpers = helpers;
var Helpers = _interopRequireWildcard(_helpers);
var _utils$1 = utils$e;
base.parser = _parser2["default"];
var yy = {};
_utils$1.extend(yy, Helpers);
function parseWithoutProcessing(input, options) {
  if (input.type === "Program") {
    return input;
  }
  _parser2["default"].yy = yy;
  yy.locInfo = function(locInfo) {
    return new yy.SourceLocation(options && options.srcName, locInfo);
  };
  var ast2 = _parser2["default"].parse(input);
  return ast2;
}
function parse$2(input, options) {
  var ast2 = parseWithoutProcessing(input, options);
  var strip = new _whitespaceControl2["default"](options);
  return strip.accept(ast2);
}
var compiler = {};
compiler.__esModule = true;
compiler.Compiler = Compiler;
compiler.precompile = precompile;
compiler.compile = compile;
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {"default": obj};
}
var _exception = exception.exports;
var _exception2 = _interopRequireDefault(_exception);
var _utils = utils$e;
var _ast = ast.exports;
var _ast2 = _interopRequireDefault(_ast);
var slice = [].slice;
function Compiler() {
}
Compiler.prototype = {
  compiler: Compiler,
  equals: function equals(other) {
    var len = this.opcodes.length;
    if (other.opcodes.length !== len) {
      return false;
    }
    for (var i2 = 0; i2 < len; i2++) {
      var opcode2 = this.opcodes[i2], otherOpcode = other.opcodes[i2];
      if (opcode2.opcode !== otherOpcode.opcode || !argEquals(opcode2.args, otherOpcode.args)) {
        return false;
      }
    }
    len = this.children.length;
    for (var i2 = 0; i2 < len; i2++) {
      if (!this.children[i2].equals(other.children[i2])) {
        return false;
      }
    }
    return true;
  },
  guid: 0,
  compile: function compile2(program, options) {
    this.sourceNode = [];
    this.opcodes = [];
    this.children = [];
    this.options = options;
    this.stringParams = options.stringParams;
    this.trackIds = options.trackIds;
    options.blockParams = options.blockParams || [];
    options.knownHelpers = _utils.extend(Object.create(null), {
      helperMissing: true,
      blockHelperMissing: true,
      each: true,
      "if": true,
      unless: true,
      "with": true,
      log: true,
      lookup: true
    }, options.knownHelpers);
    return this.accept(program);
  },
  compileProgram: function compileProgram(program) {
    var childCompiler = new this.compiler(), result = childCompiler.compile(program, this.options), guid = this.guid++;
    this.usePartial = this.usePartial || result.usePartial;
    this.children[guid] = result;
    this.useDepths = this.useDepths || result.useDepths;
    return guid;
  },
  accept: function accept(node) {
    if (!this[node.type]) {
      throw new _exception2["default"]("Unknown type: " + node.type, node);
    }
    this.sourceNode.unshift(node);
    var ret = this[node.type](node);
    this.sourceNode.shift();
    return ret;
  },
  Program: function Program(program) {
    this.options.blockParams.unshift(program.blockParams);
    var body = program.body, bodyLength = body.length;
    for (var i2 = 0; i2 < bodyLength; i2++) {
      this.accept(body[i2]);
    }
    this.options.blockParams.shift();
    this.isSimple = bodyLength === 1;
    this.blockParams = program.blockParams ? program.blockParams.length : 0;
    return this;
  },
  BlockStatement: function BlockStatement(block) {
    transformLiteralToPath(block);
    var program = block.program, inverse = block.inverse;
    program = program && this.compileProgram(program);
    inverse = inverse && this.compileProgram(inverse);
    var type = this.classifySexpr(block);
    if (type === "helper") {
      this.helperSexpr(block, program, inverse);
    } else if (type === "simple") {
      this.simpleSexpr(block);
      this.opcode("pushProgram", program);
      this.opcode("pushProgram", inverse);
      this.opcode("emptyHash");
      this.opcode("blockValue", block.path.original);
    } else {
      this.ambiguousSexpr(block, program, inverse);
      this.opcode("pushProgram", program);
      this.opcode("pushProgram", inverse);
      this.opcode("emptyHash");
      this.opcode("ambiguousBlockValue");
    }
    this.opcode("append");
  },
  DecoratorBlock: function DecoratorBlock(decorator) {
    var program = decorator.program && this.compileProgram(decorator.program);
    var params = this.setupFullMustacheParams(decorator, program, void 0), path2 = decorator.path;
    this.useDecorators = true;
    this.opcode("registerDecorator", params.length, path2.original);
  },
  PartialStatement: function PartialStatement(partial) {
    this.usePartial = true;
    var program = partial.program;
    if (program) {
      program = this.compileProgram(partial.program);
    }
    var params = partial.params;
    if (params.length > 1) {
      throw new _exception2["default"]("Unsupported number of partial arguments: " + params.length, partial);
    } else if (!params.length) {
      if (this.options.explicitPartialContext) {
        this.opcode("pushLiteral", "undefined");
      } else {
        params.push({type: "PathExpression", parts: [], depth: 0});
      }
    }
    var partialName = partial.name.original, isDynamic = partial.name.type === "SubExpression";
    if (isDynamic) {
      this.accept(partial.name);
    }
    this.setupFullMustacheParams(partial, program, void 0, true);
    var indent = partial.indent || "";
    if (this.options.preventIndent && indent) {
      this.opcode("appendContent", indent);
      indent = "";
    }
    this.opcode("invokePartial", isDynamic, partialName, indent);
    this.opcode("append");
  },
  PartialBlockStatement: function PartialBlockStatement(partialBlock) {
    this.PartialStatement(partialBlock);
  },
  MustacheStatement: function MustacheStatement(mustache2) {
    this.SubExpression(mustache2);
    if (mustache2.escaped && !this.options.noEscape) {
      this.opcode("appendEscaped");
    } else {
      this.opcode("append");
    }
  },
  Decorator: function Decorator(decorator) {
    this.DecoratorBlock(decorator);
  },
  ContentStatement: function ContentStatement(content) {
    if (content.value) {
      this.opcode("appendContent", content.value);
    }
  },
  CommentStatement: function CommentStatement() {
  },
  SubExpression: function SubExpression(sexpr) {
    transformLiteralToPath(sexpr);
    var type = this.classifySexpr(sexpr);
    if (type === "simple") {
      this.simpleSexpr(sexpr);
    } else if (type === "helper") {
      this.helperSexpr(sexpr);
    } else {
      this.ambiguousSexpr(sexpr);
    }
  },
  ambiguousSexpr: function ambiguousSexpr(sexpr, program, inverse) {
    var path2 = sexpr.path, name2 = path2.parts[0], isBlock = program != null || inverse != null;
    this.opcode("getContext", path2.depth);
    this.opcode("pushProgram", program);
    this.opcode("pushProgram", inverse);
    path2.strict = true;
    this.accept(path2);
    this.opcode("invokeAmbiguous", name2, isBlock);
  },
  simpleSexpr: function simpleSexpr(sexpr) {
    var path2 = sexpr.path;
    path2.strict = true;
    this.accept(path2);
    this.opcode("resolvePossibleLambda");
  },
  helperSexpr: function helperSexpr(sexpr, program, inverse) {
    var params = this.setupFullMustacheParams(sexpr, program, inverse), path2 = sexpr.path, name2 = path2.parts[0];
    if (this.options.knownHelpers[name2]) {
      this.opcode("invokeKnownHelper", params.length, name2);
    } else if (this.options.knownHelpersOnly) {
      throw new _exception2["default"]("You specified knownHelpersOnly, but used the unknown helper " + name2, sexpr);
    } else {
      path2.strict = true;
      path2.falsy = true;
      this.accept(path2);
      this.opcode("invokeHelper", params.length, path2.original, _ast2["default"].helpers.simpleId(path2));
    }
  },
  PathExpression: function PathExpression(path2) {
    this.addDepth(path2.depth);
    this.opcode("getContext", path2.depth);
    var name2 = path2.parts[0], scoped = _ast2["default"].helpers.scopedId(path2), blockParamId = !path2.depth && !scoped && this.blockParamIndex(name2);
    if (blockParamId) {
      this.opcode("lookupBlockParam", blockParamId, path2.parts);
    } else if (!name2) {
      this.opcode("pushContext");
    } else if (path2.data) {
      this.options.data = true;
      this.opcode("lookupData", path2.depth, path2.parts, path2.strict);
    } else {
      this.opcode("lookupOnContext", path2.parts, path2.falsy, path2.strict, scoped);
    }
  },
  StringLiteral: function StringLiteral(string) {
    this.opcode("pushString", string.value);
  },
  NumberLiteral: function NumberLiteral(number) {
    this.opcode("pushLiteral", number.value);
  },
  BooleanLiteral: function BooleanLiteral(bool) {
    this.opcode("pushLiteral", bool.value);
  },
  UndefinedLiteral: function UndefinedLiteral() {
    this.opcode("pushLiteral", "undefined");
  },
  NullLiteral: function NullLiteral() {
    this.opcode("pushLiteral", "null");
  },
  Hash: function Hash(hash) {
    var pairs = hash.pairs, i2 = 0, l2 = pairs.length;
    this.opcode("pushHash");
    for (; i2 < l2; i2++) {
      this.pushParam(pairs[i2].value);
    }
    while (i2--) {
      this.opcode("assignToHash", pairs[i2].key);
    }
    this.opcode("popHash");
  },
  opcode: function opcode(name2) {
    this.opcodes.push({
      opcode: name2,
      args: slice.call(arguments, 1),
      loc: this.sourceNode[0].loc
    });
  },
  addDepth: function addDepth(depth) {
    if (!depth) {
      return;
    }
    this.useDepths = true;
  },
  classifySexpr: function classifySexpr(sexpr) {
    var isSimple = _ast2["default"].helpers.simpleId(sexpr.path);
    var isBlockParam = isSimple && !!this.blockParamIndex(sexpr.path.parts[0]);
    var isHelper = !isBlockParam && _ast2["default"].helpers.helperExpression(sexpr);
    var isEligible = !isBlockParam && (isHelper || isSimple);
    if (isEligible && !isHelper) {
      var _name = sexpr.path.parts[0], options = this.options;
      if (options.knownHelpers[_name]) {
        isHelper = true;
      } else if (options.knownHelpersOnly) {
        isEligible = false;
      }
    }
    if (isHelper) {
      return "helper";
    } else if (isEligible) {
      return "ambiguous";
    } else {
      return "simple";
    }
  },
  pushParams: function pushParams(params) {
    for (var i2 = 0, l2 = params.length; i2 < l2; i2++) {
      this.pushParam(params[i2]);
    }
  },
  pushParam: function pushParam(val) {
    var value = val.value != null ? val.value : val.original || "";
    if (this.stringParams) {
      if (value.replace) {
        value = value.replace(/^(\.?\.\/)*/g, "").replace(/\//g, ".");
      }
      if (val.depth) {
        this.addDepth(val.depth);
      }
      this.opcode("getContext", val.depth || 0);
      this.opcode("pushStringParam", value, val.type);
      if (val.type === "SubExpression") {
        this.accept(val);
      }
    } else {
      if (this.trackIds) {
        var blockParamIndex2 = void 0;
        if (val.parts && !_ast2["default"].helpers.scopedId(val) && !val.depth) {
          blockParamIndex2 = this.blockParamIndex(val.parts[0]);
        }
        if (blockParamIndex2) {
          var blockParamChild = val.parts.slice(1).join(".");
          this.opcode("pushId", "BlockParam", blockParamIndex2, blockParamChild);
        } else {
          value = val.original || value;
          if (value.replace) {
            value = value.replace(/^this(?:\.|$)/, "").replace(/^\.\//, "").replace(/^\.$/, "");
          }
          this.opcode("pushId", val.type, value);
        }
      }
      this.accept(val);
    }
  },
  setupFullMustacheParams: function setupFullMustacheParams(sexpr, program, inverse, omitEmpty) {
    var params = sexpr.params;
    this.pushParams(params);
    this.opcode("pushProgram", program);
    this.opcode("pushProgram", inverse);
    if (sexpr.hash) {
      this.accept(sexpr.hash);
    } else {
      this.opcode("emptyHash", omitEmpty);
    }
    return params;
  },
  blockParamIndex: function blockParamIndex(name2) {
    for (var depth = 0, len = this.options.blockParams.length; depth < len; depth++) {
      var blockParams2 = this.options.blockParams[depth], param = blockParams2 && _utils.indexOf(blockParams2, name2);
      if (blockParams2 && param >= 0) {
        return [depth, param];
      }
    }
  }
};
function precompile(input, options, env) {
  if (input == null || typeof input !== "string" && input.type !== "Program") {
    throw new _exception2["default"]("You must pass a string or Handlebars AST to Handlebars.precompile. You passed " + input);
  }
  options = options || {};
  if (!("data" in options)) {
    options.data = true;
  }
  if (options.compat) {
    options.useDepths = true;
  }
  var ast2 = env.parse(input, options), environment = new env.Compiler().compile(ast2, options);
  return new env.JavaScriptCompiler().compile(environment, options);
}
function compile(input, options, env) {
  if (options === void 0)
    options = {};
  if (input == null || typeof input !== "string" && input.type !== "Program") {
    throw new _exception2["default"]("You must pass a string or Handlebars AST to Handlebars.compile. You passed " + input);
  }
  options = _utils.extend({}, options);
  if (!("data" in options)) {
    options.data = true;
  }
  if (options.compat) {
    options.useDepths = true;
  }
  var compiled = void 0;
  function compileInput() {
    var ast2 = env.parse(input, options), environment = new env.Compiler().compile(ast2, options), templateSpec = new env.JavaScriptCompiler().compile(environment, options, void 0, true);
    return env.template(templateSpec);
  }
  function ret(context, execOptions) {
    if (!compiled) {
      compiled = compileInput();
    }
    return compiled.call(this, context, execOptions);
  }
  ret._setup = function(setupOptions) {
    if (!compiled) {
      compiled = compileInput();
    }
    return compiled._setup(setupOptions);
  };
  ret._child = function(i2, data, blockParams2, depths) {
    if (!compiled) {
      compiled = compileInput();
    }
    return compiled._child(i2, data, blockParams2, depths);
  };
  return ret;
}
function argEquals(a2, b) {
  if (a2 === b) {
    return true;
  }
  if (_utils.isArray(a2) && _utils.isArray(b) && a2.length === b.length) {
    for (var i2 = 0; i2 < a2.length; i2++) {
      if (!argEquals(a2[i2], b[i2])) {
        return false;
      }
    }
    return true;
  }
}
function transformLiteralToPath(sexpr) {
  if (!sexpr.path.parts) {
    var literal = sexpr.path;
    sexpr.path = {
      type: "PathExpression",
      data: false,
      depth: 0,
      parts: [literal.original + ""],
      original: literal.original + "",
      loc: literal.loc
    };
  }
}
var javascriptCompiler = {exports: {}};
var codeGen = {exports: {}};
var sourceMap = {};
var sourceMapGenerator = {};
var base64Vlq = {};
var base64$1 = {};
var intToCharMap = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
base64$1.encode = function(number) {
  if (0 <= number && number < intToCharMap.length) {
    return intToCharMap[number];
  }
  throw new TypeError("Must be between 0 and 63: " + number);
};
base64$1.decode = function(charCode) {
  var bigA = 65;
  var bigZ = 90;
  var littleA = 97;
  var littleZ = 122;
  var zero = 48;
  var nine = 57;
  var plus = 43;
  var slash = 47;
  var littleOffset = 26;
  var numberOffset = 52;
  if (bigA <= charCode && charCode <= bigZ) {
    return charCode - bigA;
  }
  if (littleA <= charCode && charCode <= littleZ) {
    return charCode - littleA + littleOffset;
  }
  if (zero <= charCode && charCode <= nine) {
    return charCode - zero + numberOffset;
  }
  if (charCode == plus) {
    return 62;
  }
  if (charCode == slash) {
    return 63;
  }
  return -1;
};
var base64 = base64$1;
var VLQ_BASE_SHIFT = 5;
var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
var VLQ_BASE_MASK = VLQ_BASE - 1;
var VLQ_CONTINUATION_BIT = VLQ_BASE;
function toVLQSigned(aValue) {
  return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
}
function fromVLQSigned(aValue) {
  var isNegative = (aValue & 1) === 1;
  var shifted = aValue >> 1;
  return isNegative ? -shifted : shifted;
}
base64Vlq.encode = function base64VLQ_encode(aValue) {
  var encoded = "";
  var digit;
  var vlq = toVLQSigned(aValue);
  do {
    digit = vlq & VLQ_BASE_MASK;
    vlq >>>= VLQ_BASE_SHIFT;
    if (vlq > 0) {
      digit |= VLQ_CONTINUATION_BIT;
    }
    encoded += base64.encode(digit);
  } while (vlq > 0);
  return encoded;
};
base64Vlq.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
  var strLen = aStr.length;
  var result = 0;
  var shift = 0;
  var continuation, digit;
  do {
    if (aIndex >= strLen) {
      throw new Error("Expected more digits in base 64 VLQ value.");
    }
    digit = base64.decode(aStr.charCodeAt(aIndex++));
    if (digit === -1) {
      throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
    }
    continuation = !!(digit & VLQ_CONTINUATION_BIT);
    digit &= VLQ_BASE_MASK;
    result = result + (digit << shift);
    shift += VLQ_BASE_SHIFT;
  } while (continuation);
  aOutParam.value = fromVLQSigned(result);
  aOutParam.rest = aIndex;
};
var util$5 = {};
(function(exports) {
  function getArg(aArgs, aName, aDefaultValue) {
    if (aName in aArgs) {
      return aArgs[aName];
    } else if (arguments.length === 3) {
      return aDefaultValue;
    } else {
      throw new Error('"' + aName + '" is a required argument.');
    }
  }
  exports.getArg = getArg;
  var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
  var dataUrlRegexp = /^data:.+\,.+$/;
  function urlParse2(aUrl) {
    var match2 = aUrl.match(urlRegexp);
    if (!match2) {
      return null;
    }
    return {
      scheme: match2[1],
      auth: match2[2],
      host: match2[3],
      port: match2[4],
      path: match2[5]
    };
  }
  exports.urlParse = urlParse2;
  function urlGenerate(aParsedUrl) {
    var url = "";
    if (aParsedUrl.scheme) {
      url += aParsedUrl.scheme + ":";
    }
    url += "//";
    if (aParsedUrl.auth) {
      url += aParsedUrl.auth + "@";
    }
    if (aParsedUrl.host) {
      url += aParsedUrl.host;
    }
    if (aParsedUrl.port) {
      url += ":" + aParsedUrl.port;
    }
    if (aParsedUrl.path) {
      url += aParsedUrl.path;
    }
    return url;
  }
  exports.urlGenerate = urlGenerate;
  function normalize2(aPath) {
    var path2 = aPath;
    var url = urlParse2(aPath);
    if (url) {
      if (!url.path) {
        return aPath;
      }
      path2 = url.path;
    }
    var isAbsolute = exports.isAbsolute(path2);
    var parts = path2.split(/\/+/);
    for (var part, up = 0, i2 = parts.length - 1; i2 >= 0; i2--) {
      part = parts[i2];
      if (part === ".") {
        parts.splice(i2, 1);
      } else if (part === "..") {
        up++;
      } else if (up > 0) {
        if (part === "") {
          parts.splice(i2 + 1, up);
          up = 0;
        } else {
          parts.splice(i2, 2);
          up--;
        }
      }
    }
    path2 = parts.join("/");
    if (path2 === "") {
      path2 = isAbsolute ? "/" : ".";
    }
    if (url) {
      url.path = path2;
      return urlGenerate(url);
    }
    return path2;
  }
  exports.normalize = normalize2;
  function join2(aRoot, aPath) {
    if (aRoot === "") {
      aRoot = ".";
    }
    if (aPath === "") {
      aPath = ".";
    }
    var aPathUrl = urlParse2(aPath);
    var aRootUrl = urlParse2(aRoot);
    if (aRootUrl) {
      aRoot = aRootUrl.path || "/";
    }
    if (aPathUrl && !aPathUrl.scheme) {
      if (aRootUrl) {
        aPathUrl.scheme = aRootUrl.scheme;
      }
      return urlGenerate(aPathUrl);
    }
    if (aPathUrl || aPath.match(dataUrlRegexp)) {
      return aPath;
    }
    if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
      aRootUrl.host = aPath;
      return urlGenerate(aRootUrl);
    }
    var joined = aPath.charAt(0) === "/" ? aPath : normalize2(aRoot.replace(/\/+$/, "") + "/" + aPath);
    if (aRootUrl) {
      aRootUrl.path = joined;
      return urlGenerate(aRootUrl);
    }
    return joined;
  }
  exports.join = join2;
  exports.isAbsolute = function(aPath) {
    return aPath.charAt(0) === "/" || urlRegexp.test(aPath);
  };
  function relative(aRoot, aPath) {
    if (aRoot === "") {
      aRoot = ".";
    }
    aRoot = aRoot.replace(/\/$/, "");
    var level = 0;
    while (aPath.indexOf(aRoot + "/") !== 0) {
      var index = aRoot.lastIndexOf("/");
      if (index < 0) {
        return aPath;
      }
      aRoot = aRoot.slice(0, index);
      if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
        return aPath;
      }
      ++level;
    }
    return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
  }
  exports.relative = relative;
  var supportsNullProto = function() {
    var obj = Object.create(null);
    return !("__proto__" in obj);
  }();
  function identity(s2) {
    return s2;
  }
  function toSetString(aStr) {
    if (isProtoString(aStr)) {
      return "$" + aStr;
    }
    return aStr;
  }
  exports.toSetString = supportsNullProto ? identity : toSetString;
  function fromSetString(aStr) {
    if (isProtoString(aStr)) {
      return aStr.slice(1);
    }
    return aStr;
  }
  exports.fromSetString = supportsNullProto ? identity : fromSetString;
  function isProtoString(s2) {
    if (!s2) {
      return false;
    }
    var length = s2.length;
    if (length < 9) {
      return false;
    }
    if (s2.charCodeAt(length - 1) !== 95 || s2.charCodeAt(length - 2) !== 95 || s2.charCodeAt(length - 3) !== 111 || s2.charCodeAt(length - 4) !== 116 || s2.charCodeAt(length - 5) !== 111 || s2.charCodeAt(length - 6) !== 114 || s2.charCodeAt(length - 7) !== 112 || s2.charCodeAt(length - 8) !== 95 || s2.charCodeAt(length - 9) !== 95) {
      return false;
    }
    for (var i2 = length - 10; i2 >= 0; i2--) {
      if (s2.charCodeAt(i2) !== 36) {
        return false;
      }
    }
    return true;
  }
  function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
    var cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0 || onlyCompareOriginal) {
      return cmp;
    }
    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
      return cmp;
    }
    return strcmp(mappingA.name, mappingB.name);
  }
  exports.compareByOriginalPositions = compareByOriginalPositions;
  function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
    var cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0 || onlyCompareGenerated) {
      return cmp;
    }
    cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0) {
      return cmp;
    }
    return strcmp(mappingA.name, mappingB.name);
  }
  exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
  function strcmp(aStr1, aStr2) {
    if (aStr1 === aStr2) {
      return 0;
    }
    if (aStr1 === null) {
      return 1;
    }
    if (aStr2 === null) {
      return -1;
    }
    if (aStr1 > aStr2) {
      return 1;
    }
    return -1;
  }
  function compareByGeneratedPositionsInflated(mappingA, mappingB) {
    var cmp = mappingA.generatedLine - mappingB.generatedLine;
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
    if (cmp !== 0) {
      return cmp;
    }
    cmp = strcmp(mappingA.source, mappingB.source);
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.originalLine - mappingB.originalLine;
    if (cmp !== 0) {
      return cmp;
    }
    cmp = mappingA.originalColumn - mappingB.originalColumn;
    if (cmp !== 0) {
      return cmp;
    }
    return strcmp(mappingA.name, mappingB.name);
  }
  exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
  function parseSourceMapInput(str) {
    return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ""));
  }
  exports.parseSourceMapInput = parseSourceMapInput;
  function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
    sourceURL = sourceURL || "";
    if (sourceRoot) {
      if (sourceRoot[sourceRoot.length - 1] !== "/" && sourceURL[0] !== "/") {
        sourceRoot += "/";
      }
      sourceURL = sourceRoot + sourceURL;
    }
    if (sourceMapURL) {
      var parsed = urlParse2(sourceMapURL);
      if (!parsed) {
        throw new Error("sourceMapURL could not be parsed");
      }
      if (parsed.path) {
        var index = parsed.path.lastIndexOf("/");
        if (index >= 0) {
          parsed.path = parsed.path.substring(0, index + 1);
        }
      }
      sourceURL = join2(urlGenerate(parsed), sourceURL);
    }
    return normalize2(sourceURL);
  }
  exports.computeSourceURL = computeSourceURL;
})(util$5);
var arraySet = {};
var util$4 = util$5;
var has$1 = Object.prototype.hasOwnProperty;
var hasNativeMap = typeof Map !== "undefined";
function ArraySet$2() {
  this._array = [];
  this._set = hasNativeMap ? new Map() : Object.create(null);
}
ArraySet$2.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
  var set2 = new ArraySet$2();
  for (var i2 = 0, len = aArray.length; i2 < len; i2++) {
    set2.add(aArray[i2], aAllowDuplicates);
  }
  return set2;
};
ArraySet$2.prototype.size = function ArraySet_size() {
  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
};
ArraySet$2.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
  var sStr = hasNativeMap ? aStr : util$4.toSetString(aStr);
  var isDuplicate = hasNativeMap ? this.has(aStr) : has$1.call(this._set, sStr);
  var idx = this._array.length;
  if (!isDuplicate || aAllowDuplicates) {
    this._array.push(aStr);
  }
  if (!isDuplicate) {
    if (hasNativeMap) {
      this._set.set(aStr, idx);
    } else {
      this._set[sStr] = idx;
    }
  }
};
ArraySet$2.prototype.has = function ArraySet_has(aStr) {
  if (hasNativeMap) {
    return this._set.has(aStr);
  } else {
    var sStr = util$4.toSetString(aStr);
    return has$1.call(this._set, sStr);
  }
};
ArraySet$2.prototype.indexOf = function ArraySet_indexOf(aStr) {
  if (hasNativeMap) {
    var idx = this._set.get(aStr);
    if (idx >= 0) {
      return idx;
    }
  } else {
    var sStr = util$4.toSetString(aStr);
    if (has$1.call(this._set, sStr)) {
      return this._set[sStr];
    }
  }
  throw new Error('"' + aStr + '" is not in the set.');
};
ArraySet$2.prototype.at = function ArraySet_at(aIdx) {
  if (aIdx >= 0 && aIdx < this._array.length) {
    return this._array[aIdx];
  }
  throw new Error("No element indexed by " + aIdx);
};
ArraySet$2.prototype.toArray = function ArraySet_toArray() {
  return this._array.slice();
};
arraySet.ArraySet = ArraySet$2;
var mappingList = {};
var util$3 = util$5;
function generatedPositionAfter(mappingA, mappingB) {
  var lineA = mappingA.generatedLine;
  var lineB = mappingB.generatedLine;
  var columnA = mappingA.generatedColumn;
  var columnB = mappingB.generatedColumn;
  return lineB > lineA || lineB == lineA && columnB >= columnA || util$3.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
}
function MappingList$1() {
  this._array = [];
  this._sorted = true;
  this._last = {generatedLine: -1, generatedColumn: 0};
}
MappingList$1.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {
  this._array.forEach(aCallback, aThisArg);
};
MappingList$1.prototype.add = function MappingList_add(aMapping) {
  if (generatedPositionAfter(this._last, aMapping)) {
    this._last = aMapping;
    this._array.push(aMapping);
  } else {
    this._sorted = false;
    this._array.push(aMapping);
  }
};
MappingList$1.prototype.toArray = function MappingList_toArray() {
  if (!this._sorted) {
    this._array.sort(util$3.compareByGeneratedPositionsInflated);
    this._sorted = true;
  }
  return this._array;
};
mappingList.MappingList = MappingList$1;
var base64VLQ$1 = base64Vlq;
var util$2 = util$5;
var ArraySet$1 = arraySet.ArraySet;
var MappingList = mappingList.MappingList;
function SourceMapGenerator$1(aArgs) {
  if (!aArgs) {
    aArgs = {};
  }
  this._file = util$2.getArg(aArgs, "file", null);
  this._sourceRoot = util$2.getArg(aArgs, "sourceRoot", null);
  this._skipValidation = util$2.getArg(aArgs, "skipValidation", false);
  this._sources = new ArraySet$1();
  this._names = new ArraySet$1();
  this._mappings = new MappingList();
  this._sourcesContents = null;
}
SourceMapGenerator$1.prototype._version = 3;
SourceMapGenerator$1.fromSourceMap = function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
  var sourceRoot = aSourceMapConsumer.sourceRoot;
  var generator = new SourceMapGenerator$1({
    file: aSourceMapConsumer.file,
    sourceRoot
  });
  aSourceMapConsumer.eachMapping(function(mapping) {
    var newMapping = {
      generated: {
        line: mapping.generatedLine,
        column: mapping.generatedColumn
      }
    };
    if (mapping.source != null) {
      newMapping.source = mapping.source;
      if (sourceRoot != null) {
        newMapping.source = util$2.relative(sourceRoot, newMapping.source);
      }
      newMapping.original = {
        line: mapping.originalLine,
        column: mapping.originalColumn
      };
      if (mapping.name != null) {
        newMapping.name = mapping.name;
      }
    }
    generator.addMapping(newMapping);
  });
  aSourceMapConsumer.sources.forEach(function(sourceFile) {
    var sourceRelative = sourceFile;
    if (sourceRoot !== null) {
      sourceRelative = util$2.relative(sourceRoot, sourceFile);
    }
    if (!generator._sources.has(sourceRelative)) {
      generator._sources.add(sourceRelative);
    }
    var content = aSourceMapConsumer.sourceContentFor(sourceFile);
    if (content != null) {
      generator.setSourceContent(sourceFile, content);
    }
  });
  return generator;
};
SourceMapGenerator$1.prototype.addMapping = function SourceMapGenerator_addMapping(aArgs) {
  var generated = util$2.getArg(aArgs, "generated");
  var original = util$2.getArg(aArgs, "original", null);
  var source3 = util$2.getArg(aArgs, "source", null);
  var name2 = util$2.getArg(aArgs, "name", null);
  if (!this._skipValidation) {
    this._validateMapping(generated, original, source3, name2);
  }
  if (source3 != null) {
    source3 = String(source3);
    if (!this._sources.has(source3)) {
      this._sources.add(source3);
    }
  }
  if (name2 != null) {
    name2 = String(name2);
    if (!this._names.has(name2)) {
      this._names.add(name2);
    }
  }
  this._mappings.add({
    generatedLine: generated.line,
    generatedColumn: generated.column,
    originalLine: original != null && original.line,
    originalColumn: original != null && original.column,
    source: source3,
    name: name2
  });
};
SourceMapGenerator$1.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
  var source3 = aSourceFile;
  if (this._sourceRoot != null) {
    source3 = util$2.relative(this._sourceRoot, source3);
  }
  if (aSourceContent != null) {
    if (!this._sourcesContents) {
      this._sourcesContents = Object.create(null);
    }
    this._sourcesContents[util$2.toSetString(source3)] = aSourceContent;
  } else if (this._sourcesContents) {
    delete this._sourcesContents[util$2.toSetString(source3)];
    if (Object.keys(this._sourcesContents).length === 0) {
      this._sourcesContents = null;
    }
  }
};
SourceMapGenerator$1.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
  var sourceFile = aSourceFile;
  if (aSourceFile == null) {
    if (aSourceMapConsumer.file == null) {
      throw new Error(`SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's "file" property. Both were omitted.`);
    }
    sourceFile = aSourceMapConsumer.file;
  }
  var sourceRoot = this._sourceRoot;
  if (sourceRoot != null) {
    sourceFile = util$2.relative(sourceRoot, sourceFile);
  }
  var newSources = new ArraySet$1();
  var newNames = new ArraySet$1();
  this._mappings.unsortedForEach(function(mapping) {
    if (mapping.source === sourceFile && mapping.originalLine != null) {
      var original = aSourceMapConsumer.originalPositionFor({
        line: mapping.originalLine,
        column: mapping.originalColumn
      });
      if (original.source != null) {
        mapping.source = original.source;
        if (aSourceMapPath != null) {
          mapping.source = util$2.join(aSourceMapPath, mapping.source);
        }
        if (sourceRoot != null) {
          mapping.source = util$2.relative(sourceRoot, mapping.source);
        }
        mapping.originalLine = original.line;
        mapping.originalColumn = original.column;
        if (original.name != null) {
          mapping.name = original.name;
        }
      }
    }
    var source3 = mapping.source;
    if (source3 != null && !newSources.has(source3)) {
      newSources.add(source3);
    }
    var name2 = mapping.name;
    if (name2 != null && !newNames.has(name2)) {
      newNames.add(name2);
    }
  }, this);
  this._sources = newSources;
  this._names = newNames;
  aSourceMapConsumer.sources.forEach(function(sourceFile2) {
    var content = aSourceMapConsumer.sourceContentFor(sourceFile2);
    if (content != null) {
      if (aSourceMapPath != null) {
        sourceFile2 = util$2.join(aSourceMapPath, sourceFile2);
      }
      if (sourceRoot != null) {
        sourceFile2 = util$2.relative(sourceRoot, sourceFile2);
      }
      this.setSourceContent(sourceFile2, content);
    }
  }, this);
};
SourceMapGenerator$1.prototype._validateMapping = function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {
  if (aOriginal && typeof aOriginal.line !== "number" && typeof aOriginal.column !== "number") {
    throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");
  }
  if (aGenerated && "line" in aGenerated && "column" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {
    return;
  } else if (aGenerated && "line" in aGenerated && "column" in aGenerated && aOriginal && "line" in aOriginal && "column" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {
    return;
  } else {
    throw new Error("Invalid mapping: " + JSON.stringify({
      generated: aGenerated,
      source: aSource,
      original: aOriginal,
      name: aName
    }));
  }
};
SourceMapGenerator$1.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
  var previousGeneratedColumn = 0;
  var previousGeneratedLine = 1;
  var previousOriginalColumn = 0;
  var previousOriginalLine = 0;
  var previousName = 0;
  var previousSource = 0;
  var result = "";
  var next;
  var mapping;
  var nameIdx;
  var sourceIdx;
  var mappings = this._mappings.toArray();
  for (var i2 = 0, len = mappings.length; i2 < len; i2++) {
    mapping = mappings[i2];
    next = "";
    if (mapping.generatedLine !== previousGeneratedLine) {
      previousGeneratedColumn = 0;
      while (mapping.generatedLine !== previousGeneratedLine) {
        next += ";";
        previousGeneratedLine++;
      }
    } else {
      if (i2 > 0) {
        if (!util$2.compareByGeneratedPositionsInflated(mapping, mappings[i2 - 1])) {
          continue;
        }
        next += ",";
      }
    }
    next += base64VLQ$1.encode(mapping.generatedColumn - previousGeneratedColumn);
    previousGeneratedColumn = mapping.generatedColumn;
    if (mapping.source != null) {
      sourceIdx = this._sources.indexOf(mapping.source);
      next += base64VLQ$1.encode(sourceIdx - previousSource);
      previousSource = sourceIdx;
      next += base64VLQ$1.encode(mapping.originalLine - 1 - previousOriginalLine);
      previousOriginalLine = mapping.originalLine - 1;
      next += base64VLQ$1.encode(mapping.originalColumn - previousOriginalColumn);
      previousOriginalColumn = mapping.originalColumn;
      if (mapping.name != null) {
        nameIdx = this._names.indexOf(mapping.name);
        next += base64VLQ$1.encode(nameIdx - previousName);
        previousName = nameIdx;
      }
    }
    result += next;
  }
  return result;
};
SourceMapGenerator$1.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
  return aSources.map(function(source3) {
    if (!this._sourcesContents) {
      return null;
    }
    if (aSourceRoot != null) {
      source3 = util$2.relative(aSourceRoot, source3);
    }
    var key = util$2.toSetString(source3);
    return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;
  }, this);
};
SourceMapGenerator$1.prototype.toJSON = function SourceMapGenerator_toJSON() {
  var map = {
    version: this._version,
    sources: this._sources.toArray(),
    names: this._names.toArray(),
    mappings: this._serializeMappings()
  };
  if (this._file != null) {
    map.file = this._file;
  }
  if (this._sourceRoot != null) {
    map.sourceRoot = this._sourceRoot;
  }
  if (this._sourcesContents) {
    map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
  }
  return map;
};
SourceMapGenerator$1.prototype.toString = function SourceMapGenerator_toString() {
  return JSON.stringify(this.toJSON());
};
sourceMapGenerator.SourceMapGenerator = SourceMapGenerator$1;
var sourceMapConsumer = {};
var binarySearch$1 = {};
(function(exports) {
  exports.GREATEST_LOWER_BOUND = 1;
  exports.LEAST_UPPER_BOUND = 2;
  function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
    var mid = Math.floor((aHigh - aLow) / 2) + aLow;
    var cmp = aCompare(aNeedle, aHaystack[mid], true);
    if (cmp === 0) {
      return mid;
    } else if (cmp > 0) {
      if (aHigh - mid > 1) {
        return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
      }
      if (aBias == exports.LEAST_UPPER_BOUND) {
        return aHigh < aHaystack.length ? aHigh : -1;
      } else {
        return mid;
      }
    } else {
      if (mid - aLow > 1) {
        return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
      }
      if (aBias == exports.LEAST_UPPER_BOUND) {
        return mid;
      } else {
        return aLow < 0 ? -1 : aLow;
      }
    }
  }
  exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
    if (aHaystack.length === 0) {
      return -1;
    }
    var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare, aBias || exports.GREATEST_LOWER_BOUND);
    if (index < 0) {
      return -1;
    }
    while (index - 1 >= 0) {
      if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
        break;
      }
      --index;
    }
    return index;
  };
})(binarySearch$1);
var quickSort$1 = {};
function swap(ary, x2, y2) {
  var temp = ary[x2];
  ary[x2] = ary[y2];
  ary[y2] = temp;
}
function randomIntInRange(low, high) {
  return Math.round(low + Math.random() * (high - low));
}
function doQuickSort(ary, comparator, p2, r2) {
  if (p2 < r2) {
    var pivotIndex = randomIntInRange(p2, r2);
    var i2 = p2 - 1;
    swap(ary, pivotIndex, r2);
    var pivot = ary[r2];
    for (var j2 = p2; j2 < r2; j2++) {
      if (comparator(ary[j2], pivot) <= 0) {
        i2 += 1;
        swap(ary, i2, j2);
      }
    }
    swap(ary, i2 + 1, j2);
    var q2 = i2 + 1;
    doQuickSort(ary, comparator, p2, q2 - 1);
    doQuickSort(ary, comparator, q2 + 1, r2);
  }
}
quickSort$1.quickSort = function(ary, comparator) {
  doQuickSort(ary, comparator, 0, ary.length - 1);
};
var util$1 = util$5;
var binarySearch = binarySearch$1;
var ArraySet = arraySet.ArraySet;
var base64VLQ = base64Vlq;
var quickSort = quickSort$1.quickSort;
function SourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap2 = aSourceMap;
  if (typeof aSourceMap === "string") {
    sourceMap2 = util$1.parseSourceMapInput(aSourceMap);
  }
  return sourceMap2.sections != null ? new IndexedSourceMapConsumer(sourceMap2, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap2, aSourceMapURL);
}
SourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
};
SourceMapConsumer.prototype._version = 3;
SourceMapConsumer.prototype.__generatedMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, "_generatedMappings", {
  configurable: true,
  enumerable: true,
  get: function() {
    if (!this.__generatedMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }
    return this.__generatedMappings;
  }
});
SourceMapConsumer.prototype.__originalMappings = null;
Object.defineProperty(SourceMapConsumer.prototype, "_originalMappings", {
  configurable: true,
  enumerable: true,
  get: function() {
    if (!this.__originalMappings) {
      this._parseMappings(this._mappings, this.sourceRoot);
    }
    return this.__originalMappings;
  }
});
SourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
  var c2 = aStr.charAt(index);
  return c2 === ";" || c2 === ",";
};
SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
  throw new Error("Subclasses must implement _parseMappings");
};
SourceMapConsumer.GENERATED_ORDER = 1;
SourceMapConsumer.ORIGINAL_ORDER = 2;
SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
SourceMapConsumer.LEAST_UPPER_BOUND = 2;
SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
  var context = aContext || null;
  var order = aOrder || SourceMapConsumer.GENERATED_ORDER;
  var mappings;
  switch (order) {
    case SourceMapConsumer.GENERATED_ORDER:
      mappings = this._generatedMappings;
      break;
    case SourceMapConsumer.ORIGINAL_ORDER:
      mappings = this._originalMappings;
      break;
    default:
      throw new Error("Unknown order of iteration.");
  }
  var sourceRoot = this.sourceRoot;
  mappings.map(function(mapping) {
    var source3 = mapping.source === null ? null : this._sources.at(mapping.source);
    source3 = util$1.computeSourceURL(sourceRoot, source3, this._sourceMapURL);
    return {
      source: source3,
      generatedLine: mapping.generatedLine,
      generatedColumn: mapping.generatedColumn,
      originalLine: mapping.originalLine,
      originalColumn: mapping.originalColumn,
      name: mapping.name === null ? null : this._names.at(mapping.name)
    };
  }, this).forEach(aCallback, context);
};
SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
  var line = util$1.getArg(aArgs, "line");
  var needle = {
    source: util$1.getArg(aArgs, "source"),
    originalLine: line,
    originalColumn: util$1.getArg(aArgs, "column", 0)
  };
  needle.source = this._findSourceIndex(needle.source);
  if (needle.source < 0) {
    return [];
  }
  var mappings = [];
  var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util$1.compareByOriginalPositions, binarySearch.LEAST_UPPER_BOUND);
  if (index >= 0) {
    var mapping = this._originalMappings[index];
    if (aArgs.column === void 0) {
      var originalLine = mapping.originalLine;
      while (mapping && mapping.originalLine === originalLine) {
        mappings.push({
          line: util$1.getArg(mapping, "generatedLine", null),
          column: util$1.getArg(mapping, "generatedColumn", null),
          lastColumn: util$1.getArg(mapping, "lastGeneratedColumn", null)
        });
        mapping = this._originalMappings[++index];
      }
    } else {
      var originalColumn = mapping.originalColumn;
      while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {
        mappings.push({
          line: util$1.getArg(mapping, "generatedLine", null),
          column: util$1.getArg(mapping, "generatedColumn", null),
          lastColumn: util$1.getArg(mapping, "lastGeneratedColumn", null)
        });
        mapping = this._originalMappings[++index];
      }
    }
  }
  return mappings;
};
sourceMapConsumer.SourceMapConsumer = SourceMapConsumer;
function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap2 = aSourceMap;
  if (typeof aSourceMap === "string") {
    sourceMap2 = util$1.parseSourceMapInput(aSourceMap);
  }
  var version2 = util$1.getArg(sourceMap2, "version");
  var sources = util$1.getArg(sourceMap2, "sources");
  var names = util$1.getArg(sourceMap2, "names", []);
  var sourceRoot = util$1.getArg(sourceMap2, "sourceRoot", null);
  var sourcesContent = util$1.getArg(sourceMap2, "sourcesContent", null);
  var mappings = util$1.getArg(sourceMap2, "mappings");
  var file = util$1.getArg(sourceMap2, "file", null);
  if (version2 != this._version) {
    throw new Error("Unsupported version: " + version2);
  }
  if (sourceRoot) {
    sourceRoot = util$1.normalize(sourceRoot);
  }
  sources = sources.map(String).map(util$1.normalize).map(function(source3) {
    return sourceRoot && util$1.isAbsolute(sourceRoot) && util$1.isAbsolute(source3) ? util$1.relative(sourceRoot, source3) : source3;
  });
  this._names = ArraySet.fromArray(names.map(String), true);
  this._sources = ArraySet.fromArray(sources, true);
  this._absoluteSources = this._sources.toArray().map(function(s2) {
    return util$1.computeSourceURL(sourceRoot, s2, aSourceMapURL);
  });
  this.sourceRoot = sourceRoot;
  this.sourcesContent = sourcesContent;
  this._mappings = mappings;
  this._sourceMapURL = aSourceMapURL;
  this.file = file;
}
BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;
BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
  var relativeSource = aSource;
  if (this.sourceRoot != null) {
    relativeSource = util$1.relative(this.sourceRoot, relativeSource);
  }
  if (this._sources.has(relativeSource)) {
    return this._sources.indexOf(relativeSource);
  }
  var i2;
  for (i2 = 0; i2 < this._absoluteSources.length; ++i2) {
    if (this._absoluteSources[i2] == aSource) {
      return i2;
    }
  }
  return -1;
};
BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
  var smc = Object.create(BasicSourceMapConsumer.prototype);
  var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
  var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
  smc.sourceRoot = aSourceMap._sourceRoot;
  smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);
  smc.file = aSourceMap._file;
  smc._sourceMapURL = aSourceMapURL;
  smc._absoluteSources = smc._sources.toArray().map(function(s2) {
    return util$1.computeSourceURL(smc.sourceRoot, s2, aSourceMapURL);
  });
  var generatedMappings = aSourceMap._mappings.toArray().slice();
  var destGeneratedMappings = smc.__generatedMappings = [];
  var destOriginalMappings = smc.__originalMappings = [];
  for (var i2 = 0, length = generatedMappings.length; i2 < length; i2++) {
    var srcMapping = generatedMappings[i2];
    var destMapping = new Mapping();
    destMapping.generatedLine = srcMapping.generatedLine;
    destMapping.generatedColumn = srcMapping.generatedColumn;
    if (srcMapping.source) {
      destMapping.source = sources.indexOf(srcMapping.source);
      destMapping.originalLine = srcMapping.originalLine;
      destMapping.originalColumn = srcMapping.originalColumn;
      if (srcMapping.name) {
        destMapping.name = names.indexOf(srcMapping.name);
      }
      destOriginalMappings.push(destMapping);
    }
    destGeneratedMappings.push(destMapping);
  }
  quickSort(smc.__originalMappings, util$1.compareByOriginalPositions);
  return smc;
};
BasicSourceMapConsumer.prototype._version = 3;
Object.defineProperty(BasicSourceMapConsumer.prototype, "sources", {
  get: function() {
    return this._absoluteSources.slice();
  }
});
function Mapping() {
  this.generatedLine = 0;
  this.generatedColumn = 0;
  this.source = null;
  this.originalLine = null;
  this.originalColumn = null;
  this.name = null;
}
BasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings2(aStr, aSourceRoot) {
  var generatedLine = 1;
  var previousGeneratedColumn = 0;
  var previousOriginalLine = 0;
  var previousOriginalColumn = 0;
  var previousSource = 0;
  var previousName = 0;
  var length = aStr.length;
  var index = 0;
  var cachedSegments = {};
  var temp = {};
  var originalMappings = [];
  var generatedMappings = [];
  var mapping, str, segment, end, value;
  while (index < length) {
    if (aStr.charAt(index) === ";") {
      generatedLine++;
      index++;
      previousGeneratedColumn = 0;
    } else if (aStr.charAt(index) === ",") {
      index++;
    } else {
      mapping = new Mapping();
      mapping.generatedLine = generatedLine;
      for (end = index; end < length; end++) {
        if (this._charIsMappingSeparator(aStr, end)) {
          break;
        }
      }
      str = aStr.slice(index, end);
      segment = cachedSegments[str];
      if (segment) {
        index += str.length;
      } else {
        segment = [];
        while (index < end) {
          base64VLQ.decode(aStr, index, temp);
          value = temp.value;
          index = temp.rest;
          segment.push(value);
        }
        if (segment.length === 2) {
          throw new Error("Found a source, but no line and column");
        }
        if (segment.length === 3) {
          throw new Error("Found a source and line, but no column");
        }
        cachedSegments[str] = segment;
      }
      mapping.generatedColumn = previousGeneratedColumn + segment[0];
      previousGeneratedColumn = mapping.generatedColumn;
      if (segment.length > 1) {
        mapping.source = previousSource + segment[1];
        previousSource += segment[1];
        mapping.originalLine = previousOriginalLine + segment[2];
        previousOriginalLine = mapping.originalLine;
        mapping.originalLine += 1;
        mapping.originalColumn = previousOriginalColumn + segment[3];
        previousOriginalColumn = mapping.originalColumn;
        if (segment.length > 4) {
          mapping.name = previousName + segment[4];
          previousName += segment[4];
        }
      }
      generatedMappings.push(mapping);
      if (typeof mapping.originalLine === "number") {
        originalMappings.push(mapping);
      }
    }
  }
  quickSort(generatedMappings, util$1.compareByGeneratedPositionsDeflated);
  this.__generatedMappings = generatedMappings;
  quickSort(originalMappings, util$1.compareByOriginalPositions);
  this.__originalMappings = originalMappings;
};
BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {
  if (aNeedle[aLineName] <= 0) {
    throw new TypeError("Line must be greater than or equal to 1, got " + aNeedle[aLineName]);
  }
  if (aNeedle[aColumnName] < 0) {
    throw new TypeError("Column must be greater than or equal to 0, got " + aNeedle[aColumnName]);
  }
  return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
};
BasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {
  for (var index = 0; index < this._generatedMappings.length; ++index) {
    var mapping = this._generatedMappings[index];
    if (index + 1 < this._generatedMappings.length) {
      var nextMapping = this._generatedMappings[index + 1];
      if (mapping.generatedLine === nextMapping.generatedLine) {
        mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
        continue;
      }
    }
    mapping.lastGeneratedColumn = Infinity;
  }
};
BasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {
  var needle = {
    generatedLine: util$1.getArg(aArgs, "line"),
    generatedColumn: util$1.getArg(aArgs, "column")
  };
  var index = this._findMapping(needle, this._generatedMappings, "generatedLine", "generatedColumn", util$1.compareByGeneratedPositionsDeflated, util$1.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND));
  if (index >= 0) {
    var mapping = this._generatedMappings[index];
    if (mapping.generatedLine === needle.generatedLine) {
      var source3 = util$1.getArg(mapping, "source", null);
      if (source3 !== null) {
        source3 = this._sources.at(source3);
        source3 = util$1.computeSourceURL(this.sourceRoot, source3, this._sourceMapURL);
      }
      var name2 = util$1.getArg(mapping, "name", null);
      if (name2 !== null) {
        name2 = this._names.at(name2);
      }
      return {
        source: source3,
        line: util$1.getArg(mapping, "originalLine", null),
        column: util$1.getArg(mapping, "originalColumn", null),
        name: name2
      };
    }
  }
  return {
    source: null,
    line: null,
    column: null,
    name: null
  };
};
BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {
  if (!this.sourcesContent) {
    return false;
  }
  return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {
    return sc == null;
  });
};
BasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
  if (!this.sourcesContent) {
    return null;
  }
  var index = this._findSourceIndex(aSource);
  if (index >= 0) {
    return this.sourcesContent[index];
  }
  var relativeSource = aSource;
  if (this.sourceRoot != null) {
    relativeSource = util$1.relative(this.sourceRoot, relativeSource);
  }
  var url;
  if (this.sourceRoot != null && (url = util$1.urlParse(this.sourceRoot))) {
    var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
    if (url.scheme == "file" && this._sources.has(fileUriAbsPath)) {
      return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
    }
    if ((!url.path || url.path == "/") && this._sources.has("/" + relativeSource)) {
      return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
    }
  }
  if (nullOnMissing) {
    return null;
  } else {
    throw new Error('"' + relativeSource + '" is not in the SourceMap.');
  }
};
BasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {
  var source3 = util$1.getArg(aArgs, "source");
  source3 = this._findSourceIndex(source3);
  if (source3 < 0) {
    return {
      line: null,
      column: null,
      lastColumn: null
    };
  }
  var needle = {
    source: source3,
    originalLine: util$1.getArg(aArgs, "line"),
    originalColumn: util$1.getArg(aArgs, "column")
  };
  var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util$1.compareByOriginalPositions, util$1.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND));
  if (index >= 0) {
    var mapping = this._originalMappings[index];
    if (mapping.source === needle.source) {
      return {
        line: util$1.getArg(mapping, "generatedLine", null),
        column: util$1.getArg(mapping, "generatedColumn", null),
        lastColumn: util$1.getArg(mapping, "lastGeneratedColumn", null)
      };
    }
  }
  return {
    line: null,
    column: null,
    lastColumn: null
  };
};
sourceMapConsumer.BasicSourceMapConsumer = BasicSourceMapConsumer;
function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
  var sourceMap2 = aSourceMap;
  if (typeof aSourceMap === "string") {
    sourceMap2 = util$1.parseSourceMapInput(aSourceMap);
  }
  var version2 = util$1.getArg(sourceMap2, "version");
  var sections = util$1.getArg(sourceMap2, "sections");
  if (version2 != this._version) {
    throw new Error("Unsupported version: " + version2);
  }
  this._sources = new ArraySet();
  this._names = new ArraySet();
  var lastOffset = {
    line: -1,
    column: 0
  };
  this._sections = sections.map(function(s2) {
    if (s2.url) {
      throw new Error("Support for url field in sections not implemented.");
    }
    var offset2 = util$1.getArg(s2, "offset");
    var offsetLine = util$1.getArg(offset2, "line");
    var offsetColumn = util$1.getArg(offset2, "column");
    if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {
      throw new Error("Section offsets must be ordered and non-overlapping.");
    }
    lastOffset = offset2;
    return {
      generatedOffset: {
        generatedLine: offsetLine + 1,
        generatedColumn: offsetColumn + 1
      },
      consumer: new SourceMapConsumer(util$1.getArg(s2, "map"), aSourceMapURL)
    };
  });
}
IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;
IndexedSourceMapConsumer.prototype._version = 3;
Object.defineProperty(IndexedSourceMapConsumer.prototype, "sources", {
  get: function() {
    var sources = [];
    for (var i2 = 0; i2 < this._sections.length; i2++) {
      for (var j2 = 0; j2 < this._sections[i2].consumer.sources.length; j2++) {
        sources.push(this._sections[i2].consumer.sources[j2]);
      }
    }
    return sources;
  }
});
IndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
  var needle = {
    generatedLine: util$1.getArg(aArgs, "line"),
    generatedColumn: util$1.getArg(aArgs, "column")
  };
  var sectionIndex = binarySearch.search(needle, this._sections, function(needle2, section2) {
    var cmp = needle2.generatedLine - section2.generatedOffset.generatedLine;
    if (cmp) {
      return cmp;
    }
    return needle2.generatedColumn - section2.generatedOffset.generatedColumn;
  });
  var section = this._sections[sectionIndex];
  if (!section) {
    return {
      source: null,
      line: null,
      column: null,
      name: null
    };
  }
  return section.consumer.originalPositionFor({
    line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
    column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
    bias: aArgs.bias
  });
};
IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {
  return this._sections.every(function(s2) {
    return s2.consumer.hasContentsOfAllSources();
  });
};
IndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
  for (var i2 = 0; i2 < this._sections.length; i2++) {
    var section = this._sections[i2];
    var content = section.consumer.sourceContentFor(aSource, true);
    if (content) {
      return content;
    }
  }
  if (nullOnMissing) {
    return null;
  } else {
    throw new Error('"' + aSource + '" is not in the SourceMap.');
  }
};
IndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
  for (var i2 = 0; i2 < this._sections.length; i2++) {
    var section = this._sections[i2];
    if (section.consumer._findSourceIndex(util$1.getArg(aArgs, "source")) === -1) {
      continue;
    }
    var generatedPosition = section.consumer.generatedPositionFor(aArgs);
    if (generatedPosition) {
      var ret = {
        line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),
        column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)
      };
      return ret;
    }
  }
  return {
    line: null,
    column: null
  };
};
IndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
  this.__generatedMappings = [];
  this.__originalMappings = [];
  for (var i2 = 0; i2 < this._sections.length; i2++) {
    var section = this._sections[i2];
    var sectionMappings = section.consumer._generatedMappings;
    for (var j2 = 0; j2 < sectionMappings.length; j2++) {
      var mapping = sectionMappings[j2];
      var source3 = section.consumer._sources.at(mapping.source);
      source3 = util$1.computeSourceURL(section.consumer.sourceRoot, source3, this._sourceMapURL);
      this._sources.add(source3);
      source3 = this._sources.indexOf(source3);
      var name2 = null;
      if (mapping.name) {
        name2 = section.consumer._names.at(mapping.name);
        this._names.add(name2);
        name2 = this._names.indexOf(name2);
      }
      var adjustedMapping = {
        source: source3,
        generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
        generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
        originalLine: mapping.originalLine,
        originalColumn: mapping.originalColumn,
        name: name2
      };
      this.__generatedMappings.push(adjustedMapping);
      if (typeof adjustedMapping.originalLine === "number") {
        this.__originalMappings.push(adjustedMapping);
      }
    }
  }
  quickSort(this.__generatedMappings, util$1.compareByGeneratedPositionsDeflated);
  quickSort(this.__originalMappings, util$1.compareByOriginalPositions);
};
sourceMapConsumer.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
var sourceNode = {};
var SourceMapGenerator = sourceMapGenerator.SourceMapGenerator;
var util = util$5;
var REGEX_NEWLINE = /(\r?\n)/;
var NEWLINE_CODE = 10;
var isSourceNode = "$$$isSourceNode$$$";
function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
  this.children = [];
  this.sourceContents = {};
  this.line = aLine == null ? null : aLine;
  this.column = aColumn == null ? null : aColumn;
  this.source = aSource == null ? null : aSource;
  this.name = aName == null ? null : aName;
  this[isSourceNode] = true;
  if (aChunks != null)
    this.add(aChunks);
}
SourceNode.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
  var node = new SourceNode();
  var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
  var remainingLinesIndex = 0;
  var shiftNextLine = function() {
    var lineContents = getNextLine();
    var newLine = getNextLine() || "";
    return lineContents + newLine;
    function getNextLine() {
      return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;
    }
  };
  var lastGeneratedLine = 1, lastGeneratedColumn = 0;
  var lastMapping = null;
  aSourceMapConsumer.eachMapping(function(mapping) {
    if (lastMapping !== null) {
      if (lastGeneratedLine < mapping.generatedLine) {
        addMappingWithCode(lastMapping, shiftNextLine());
        lastGeneratedLine++;
        lastGeneratedColumn = 0;
      } else {
        var nextLine = remainingLines[remainingLinesIndex] || "";
        var code3 = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);
        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);
        lastGeneratedColumn = mapping.generatedColumn;
        addMappingWithCode(lastMapping, code3);
        lastMapping = mapping;
        return;
      }
    }
    while (lastGeneratedLine < mapping.generatedLine) {
      node.add(shiftNextLine());
      lastGeneratedLine++;
    }
    if (lastGeneratedColumn < mapping.generatedColumn) {
      var nextLine = remainingLines[remainingLinesIndex] || "";
      node.add(nextLine.substr(0, mapping.generatedColumn));
      remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
      lastGeneratedColumn = mapping.generatedColumn;
    }
    lastMapping = mapping;
  }, this);
  if (remainingLinesIndex < remainingLines.length) {
    if (lastMapping) {
      addMappingWithCode(lastMapping, shiftNextLine());
    }
    node.add(remainingLines.splice(remainingLinesIndex).join(""));
  }
  aSourceMapConsumer.sources.forEach(function(sourceFile) {
    var content = aSourceMapConsumer.sourceContentFor(sourceFile);
    if (content != null) {
      if (aRelativePath != null) {
        sourceFile = util.join(aRelativePath, sourceFile);
      }
      node.setSourceContent(sourceFile, content);
    }
  });
  return node;
  function addMappingWithCode(mapping, code3) {
    if (mapping === null || mapping.source === void 0) {
      node.add(code3);
    } else {
      var source3 = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;
      node.add(new SourceNode(mapping.originalLine, mapping.originalColumn, source3, code3, mapping.name));
    }
  }
};
SourceNode.prototype.add = function SourceNode_add(aChunk) {
  if (Array.isArray(aChunk)) {
    aChunk.forEach(function(chunk) {
      this.add(chunk);
    }, this);
  } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    if (aChunk) {
      this.children.push(aChunk);
    }
  } else {
    throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
  }
  return this;
};
SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
  if (Array.isArray(aChunk)) {
    for (var i2 = aChunk.length - 1; i2 >= 0; i2--) {
      this.prepend(aChunk[i2]);
    }
  } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
    this.children.unshift(aChunk);
  } else {
    throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
  }
  return this;
};
SourceNode.prototype.walk = function SourceNode_walk(aFn) {
  var chunk;
  for (var i2 = 0, len = this.children.length; i2 < len; i2++) {
    chunk = this.children[i2];
    if (chunk[isSourceNode]) {
      chunk.walk(aFn);
    } else {
      if (chunk !== "") {
        aFn(chunk, {
          source: this.source,
          line: this.line,
          column: this.column,
          name: this.name
        });
      }
    }
  }
};
SourceNode.prototype.join = function SourceNode_join(aSep) {
  var newChildren;
  var i2;
  var len = this.children.length;
  if (len > 0) {
    newChildren = [];
    for (i2 = 0; i2 < len - 1; i2++) {
      newChildren.push(this.children[i2]);
      newChildren.push(aSep);
    }
    newChildren.push(this.children[i2]);
    this.children = newChildren;
  }
  return this;
};
SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
  var lastChild = this.children[this.children.length - 1];
  if (lastChild[isSourceNode]) {
    lastChild.replaceRight(aPattern, aReplacement);
  } else if (typeof lastChild === "string") {
    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
  } else {
    this.children.push("".replace(aPattern, aReplacement));
  }
  return this;
};
SourceNode.prototype.setSourceContent = function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
  this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
};
SourceNode.prototype.walkSourceContents = function SourceNode_walkSourceContents(aFn) {
  for (var i2 = 0, len = this.children.length; i2 < len; i2++) {
    if (this.children[i2][isSourceNode]) {
      this.children[i2].walkSourceContents(aFn);
    }
  }
  var sources = Object.keys(this.sourceContents);
  for (var i2 = 0, len = sources.length; i2 < len; i2++) {
    aFn(util.fromSetString(sources[i2]), this.sourceContents[sources[i2]]);
  }
};
SourceNode.prototype.toString = function SourceNode_toString() {
  var str = "";
  this.walk(function(chunk) {
    str += chunk;
  });
  return str;
};
SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
  var generated = {
    code: "",
    line: 1,
    column: 0
  };
  var map = new SourceMapGenerator(aArgs);
  var sourceMappingActive = false;
  var lastOriginalSource = null;
  var lastOriginalLine = null;
  var lastOriginalColumn = null;
  var lastOriginalName = null;
  this.walk(function(chunk, original) {
    generated.code += chunk;
    if (original.source !== null && original.line !== null && original.column !== null) {
      if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {
        map.addMapping({
          source: original.source,
          original: {
            line: original.line,
            column: original.column
          },
          generated: {
            line: generated.line,
            column: generated.column
          },
          name: original.name
        });
      }
      lastOriginalSource = original.source;
      lastOriginalLine = original.line;
      lastOriginalColumn = original.column;
      lastOriginalName = original.name;
      sourceMappingActive = true;
    } else if (sourceMappingActive) {
      map.addMapping({
        generated: {
          line: generated.line,
          column: generated.column
        }
      });
      lastOriginalSource = null;
      sourceMappingActive = false;
    }
    for (var idx = 0, length = chunk.length; idx < length; idx++) {
      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
        generated.line++;
        generated.column = 0;
        if (idx + 1 === length) {
          lastOriginalSource = null;
          sourceMappingActive = false;
        } else if (sourceMappingActive) {
          map.addMapping({
            source: original.source,
            original: {
              line: original.line,
              column: original.column
            },
            generated: {
              line: generated.line,
              column: generated.column
            },
            name: original.name
          });
        }
      } else {
        generated.column++;
      }
    }
  });
  this.walkSourceContents(function(sourceFile, sourceContent) {
    map.setSourceContent(sourceFile, sourceContent);
  });
  return {code: generated.code, map};
};
sourceNode.SourceNode = SourceNode;
sourceMap.SourceMapGenerator = sourceMapGenerator.SourceMapGenerator;
sourceMap.SourceMapConsumer = sourceMapConsumer.SourceMapConsumer;
sourceMap.SourceNode = sourceNode.SourceNode;
(function(module, exports) {
  exports.__esModule = true;
  var _utils2 = utils$e;
  var SourceNode2 = void 0;
  try {
    if (true) {
      var SourceMap = sourceMap;
      SourceNode2 = SourceMap.SourceNode;
    }
  } catch (err) {
  }
  if (!SourceNode2) {
    SourceNode2 = function(line, column, srcFile, chunks) {
      this.src = "";
      if (chunks) {
        this.add(chunks);
      }
    };
    SourceNode2.prototype = {
      add: function add(chunks) {
        if (_utils2.isArray(chunks)) {
          chunks = chunks.join("");
        }
        this.src += chunks;
      },
      prepend: function prepend(chunks) {
        if (_utils2.isArray(chunks)) {
          chunks = chunks.join("");
        }
        this.src = chunks + this.src;
      },
      toStringWithSourceMap: function toStringWithSourceMap() {
        return {code: this.toString()};
      },
      toString: function toString3() {
        return this.src;
      }
    };
  }
  function castChunk(chunk, codeGen2, loc) {
    if (_utils2.isArray(chunk)) {
      var ret = [];
      for (var i2 = 0, len = chunk.length; i2 < len; i2++) {
        ret.push(codeGen2.wrap(chunk[i2], loc));
      }
      return ret;
    } else if (typeof chunk === "boolean" || typeof chunk === "number") {
      return chunk + "";
    }
    return chunk;
  }
  function CodeGen(srcFile) {
    this.srcFile = srcFile;
    this.source = [];
  }
  CodeGen.prototype = {
    isEmpty: function isEmpty2() {
      return !this.source.length;
    },
    prepend: function prepend(source3, loc) {
      this.source.unshift(this.wrap(source3, loc));
    },
    push: function push2(source3, loc) {
      this.source.push(this.wrap(source3, loc));
    },
    merge: function merge2() {
      var source3 = this.empty();
      this.each(function(line) {
        source3.add(["  ", line, "\n"]);
      });
      return source3;
    },
    each: function each2(iter) {
      for (var i2 = 0, len = this.source.length; i2 < len; i2++) {
        iter(this.source[i2]);
      }
    },
    empty: function empty() {
      var loc = this.currentLocation || {start: {}};
      return new SourceNode2(loc.start.line, loc.start.column, this.srcFile);
    },
    wrap: function wrap(chunk) {
      var loc = arguments.length <= 1 || arguments[1] === void 0 ? this.currentLocation || {start: {}} : arguments[1];
      if (chunk instanceof SourceNode2) {
        return chunk;
      }
      chunk = castChunk(chunk, this, loc);
      return new SourceNode2(loc.start.line, loc.start.column, this.srcFile, chunk);
    },
    functionCall: function functionCall(fn2, type, params) {
      params = this.generateList(params);
      return this.wrap([fn2, type ? "." + type + "(" : "(", params, ")"]);
    },
    quotedString: function quotedString(str) {
      return '"' + (str + "").replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029") + '"';
    },
    objectLiteral: function objectLiteral(obj) {
      var _this = this;
      var pairs = [];
      Object.keys(obj).forEach(function(key) {
        var value = castChunk(obj[key], _this);
        if (value !== "undefined") {
          pairs.push([_this.quotedString(key), ":", value]);
        }
      });
      var ret = this.generateList(pairs);
      ret.prepend("{");
      ret.add("}");
      return ret;
    },
    generateList: function generateList(entries) {
      var ret = this.empty();
      for (var i2 = 0, len = entries.length; i2 < len; i2++) {
        if (i2) {
          ret.add(",");
        }
        ret.add(castChunk(entries[i2], this));
      }
      return ret;
    },
    generateArray: function generateArray(entries) {
      var ret = this.generateList(entries);
      ret.prepend("[");
      ret.add("]");
      return ret;
    }
  };
  exports["default"] = CodeGen;
  module.exports = exports["default"];
})(codeGen, codeGen.exports);
(function(module, exports) {
  exports.__esModule = true;
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : {"default": obj};
  }
  var _base2 = base$1;
  var _exception3 = exception.exports;
  var _exception22 = _interopRequireDefault2(_exception3);
  var _utils2 = utils$e;
  var _codeGen = codeGen.exports;
  var _codeGen2 = _interopRequireDefault2(_codeGen);
  function Literal(value) {
    this.value = value;
  }
  function JavaScriptCompiler() {
  }
  JavaScriptCompiler.prototype = {
    nameLookup: function nameLookup(parent, name2) {
      return this.internalNameLookup(parent, name2);
    },
    depthedLookup: function depthedLookup(name2) {
      return [this.aliasable("container.lookup"), "(depths, ", JSON.stringify(name2), ")"];
    },
    compilerInfo: function compilerInfo() {
      var revision = _base2.COMPILER_REVISION, versions = _base2.REVISION_CHANGES[revision];
      return [revision, versions];
    },
    appendToBuffer: function appendToBuffer(source3, location, explicit) {
      if (!_utils2.isArray(source3)) {
        source3 = [source3];
      }
      source3 = this.source.wrap(source3, location);
      if (this.environment.isSimple) {
        return ["return ", source3, ";"];
      } else if (explicit) {
        return ["buffer += ", source3, ";"];
      } else {
        source3.appendToBuffer = true;
        return source3;
      }
    },
    initializeBuffer: function initializeBuffer() {
      return this.quotedString("");
    },
    internalNameLookup: function internalNameLookup(parent, name2) {
      this.lookupPropertyFunctionIsUsed = true;
      return ["lookupProperty(", parent, ",", JSON.stringify(name2), ")"];
    },
    lookupPropertyFunctionIsUsed: false,
    compile: function compile3(environment, options, context, asObject) {
      this.environment = environment;
      this.options = options;
      this.stringParams = this.options.stringParams;
      this.trackIds = this.options.trackIds;
      this.precompile = !asObject;
      this.name = this.environment.name;
      this.isChild = !!context;
      this.context = context || {
        decorators: [],
        programs: [],
        environments: []
      };
      this.preamble();
      this.stackSlot = 0;
      this.stackVars = [];
      this.aliases = {};
      this.registers = {list: []};
      this.hashes = [];
      this.compileStack = [];
      this.inlineStack = [];
      this.blockParams = [];
      this.compileChildren(environment, options);
      this.useDepths = this.useDepths || environment.useDepths || environment.useDecorators || this.options.compat;
      this.useBlockParams = this.useBlockParams || environment.useBlockParams;
      var opcodes = environment.opcodes, opcode2 = void 0, firstLoc = void 0, i2 = void 0, l2 = void 0;
      for (i2 = 0, l2 = opcodes.length; i2 < l2; i2++) {
        opcode2 = opcodes[i2];
        this.source.currentLocation = opcode2.loc;
        firstLoc = firstLoc || opcode2.loc;
        this[opcode2.opcode].apply(this, opcode2.args);
      }
      this.source.currentLocation = firstLoc;
      this.pushSource("");
      if (this.stackSlot || this.inlineStack.length || this.compileStack.length) {
        throw new _exception22["default"]("Compile completed with content left on stack");
      }
      if (!this.decorators.isEmpty()) {
        this.useDecorators = true;
        this.decorators.prepend(["var decorators = container.decorators, ", this.lookupPropertyFunctionVarDeclaration(), ";\n"]);
        this.decorators.push("return fn;");
        if (asObject) {
          this.decorators = Function.apply(this, ["fn", "props", "container", "depth0", "data", "blockParams", "depths", this.decorators.merge()]);
        } else {
          this.decorators.prepend("function(fn, props, container, depth0, data, blockParams, depths) {\n");
          this.decorators.push("}\n");
          this.decorators = this.decorators.merge();
        }
      } else {
        this.decorators = void 0;
      }
      var fn2 = this.createFunctionContext(asObject);
      if (!this.isChild) {
        var ret = {
          compiler: this.compilerInfo(),
          main: fn2
        };
        if (this.decorators) {
          ret.main_d = this.decorators;
          ret.useDecorators = true;
        }
        var _context = this.context;
        var programs = _context.programs;
        var decorators2 = _context.decorators;
        for (i2 = 0, l2 = programs.length; i2 < l2; i2++) {
          if (programs[i2]) {
            ret[i2] = programs[i2];
            if (decorators2[i2]) {
              ret[i2 + "_d"] = decorators2[i2];
              ret.useDecorators = true;
            }
          }
        }
        if (this.environment.usePartial) {
          ret.usePartial = true;
        }
        if (this.options.data) {
          ret.useData = true;
        }
        if (this.useDepths) {
          ret.useDepths = true;
        }
        if (this.useBlockParams) {
          ret.useBlockParams = true;
        }
        if (this.options.compat) {
          ret.compat = true;
        }
        if (!asObject) {
          ret.compiler = JSON.stringify(ret.compiler);
          this.source.currentLocation = {start: {line: 1, column: 0}};
          ret = this.objectLiteral(ret);
          if (options.srcName) {
            ret = ret.toStringWithSourceMap({file: options.destName});
            ret.map = ret.map && ret.map.toString();
          } else {
            ret = ret.toString();
          }
        } else {
          ret.compilerOptions = this.options;
        }
        return ret;
      } else {
        return fn2;
      }
    },
    preamble: function preamble() {
      this.lastContext = 0;
      this.source = new _codeGen2["default"](this.options.srcName);
      this.decorators = new _codeGen2["default"](this.options.srcName);
    },
    createFunctionContext: function createFunctionContext(asObject) {
      var _this = this;
      var varDeclarations = "";
      var locals = this.stackVars.concat(this.registers.list);
      if (locals.length > 0) {
        varDeclarations += ", " + locals.join(", ");
      }
      var aliasCount = 0;
      Object.keys(this.aliases).forEach(function(alias) {
        var node = _this.aliases[alias];
        if (node.children && node.referenceCount > 1) {
          varDeclarations += ", alias" + ++aliasCount + "=" + alias;
          node.children[0] = "alias" + aliasCount;
        }
      });
      if (this.lookupPropertyFunctionIsUsed) {
        varDeclarations += ", " + this.lookupPropertyFunctionVarDeclaration();
      }
      var params = ["container", "depth0", "helpers", "partials", "data"];
      if (this.useBlockParams || this.useDepths) {
        params.push("blockParams");
      }
      if (this.useDepths) {
        params.push("depths");
      }
      var source3 = this.mergeSource(varDeclarations);
      if (asObject) {
        params.push(source3);
        return Function.apply(this, params);
      } else {
        return this.source.wrap(["function(", params.join(","), ") {\n  ", source3, "}"]);
      }
    },
    mergeSource: function mergeSource(varDeclarations) {
      var isSimple = this.environment.isSimple, appendOnly = !this.forceBuffer, appendFirst = void 0, sourceSeen = void 0, bufferStart = void 0, bufferEnd = void 0;
      this.source.each(function(line) {
        if (line.appendToBuffer) {
          if (bufferStart) {
            line.prepend("  + ");
          } else {
            bufferStart = line;
          }
          bufferEnd = line;
        } else {
          if (bufferStart) {
            if (!sourceSeen) {
              appendFirst = true;
            } else {
              bufferStart.prepend("buffer += ");
            }
            bufferEnd.add(";");
            bufferStart = bufferEnd = void 0;
          }
          sourceSeen = true;
          if (!isSimple) {
            appendOnly = false;
          }
        }
      });
      if (appendOnly) {
        if (bufferStart) {
          bufferStart.prepend("return ");
          bufferEnd.add(";");
        } else if (!sourceSeen) {
          this.source.push('return "";');
        }
      } else {
        varDeclarations += ", buffer = " + (appendFirst ? "" : this.initializeBuffer());
        if (bufferStart) {
          bufferStart.prepend("return buffer + ");
          bufferEnd.add(";");
        } else {
          this.source.push("return buffer;");
        }
      }
      if (varDeclarations) {
        this.source.prepend("var " + varDeclarations.substring(2) + (appendFirst ? "" : ";\n"));
      }
      return this.source.merge();
    },
    lookupPropertyFunctionVarDeclaration: function lookupPropertyFunctionVarDeclaration() {
      return "\n      lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    }\n    ".trim();
    },
    blockValue: function blockValue(name2) {
      var blockHelperMissing2 = this.aliasable("container.hooks.blockHelperMissing"), params = [this.contextName(0)];
      this.setupHelperArgs(name2, 0, params);
      var blockName = this.popStack();
      params.splice(1, 0, blockName);
      this.push(this.source.functionCall(blockHelperMissing2, "call", params));
    },
    ambiguousBlockValue: function ambiguousBlockValue() {
      var blockHelperMissing2 = this.aliasable("container.hooks.blockHelperMissing"), params = [this.contextName(0)];
      this.setupHelperArgs("", 0, params, true);
      this.flushInline();
      var current = this.topStack();
      params.splice(1, 0, current);
      this.pushSource(["if (!", this.lastHelper, ") { ", current, " = ", this.source.functionCall(blockHelperMissing2, "call", params), "}"]);
    },
    appendContent: function appendContent(content) {
      if (this.pendingContent) {
        content = this.pendingContent + content;
      } else {
        this.pendingLocation = this.source.currentLocation;
      }
      this.pendingContent = content;
    },
    append: function append() {
      if (this.isInline()) {
        this.replaceStack(function(current) {
          return [" != null ? ", current, ' : ""'];
        });
        this.pushSource(this.appendToBuffer(this.popStack()));
      } else {
        var local = this.popStack();
        this.pushSource(["if (", local, " != null) { ", this.appendToBuffer(local, void 0, true), " }"]);
        if (this.environment.isSimple) {
          this.pushSource(["else { ", this.appendToBuffer("''", void 0, true), " }"]);
        }
      }
    },
    appendEscaped: function appendEscaped() {
      this.pushSource(this.appendToBuffer([this.aliasable("container.escapeExpression"), "(", this.popStack(), ")"]));
    },
    getContext: function getContext(depth) {
      this.lastContext = depth;
    },
    pushContext: function pushContext() {
      this.pushStackLiteral(this.contextName(this.lastContext));
    },
    lookupOnContext: function lookupOnContext(parts, falsy, strict, scoped) {
      var i2 = 0;
      if (!scoped && this.options.compat && !this.lastContext) {
        this.push(this.depthedLookup(parts[i2++]));
      } else {
        this.pushContext();
      }
      this.resolvePath("context", parts, i2, falsy, strict);
    },
    lookupBlockParam: function lookupBlockParam(blockParamId, parts) {
      this.useBlockParams = true;
      this.push(["blockParams[", blockParamId[0], "][", blockParamId[1], "]"]);
      this.resolvePath("context", parts, 1);
    },
    lookupData: function lookupData(depth, parts, strict) {
      if (!depth) {
        this.pushStackLiteral("data");
      } else {
        this.pushStackLiteral("container.data(data, " + depth + ")");
      }
      this.resolvePath("data", parts, 0, true, strict);
    },
    resolvePath: function resolvePath(type, parts, i2, falsy, strict) {
      var _this2 = this;
      if (this.options.strict || this.options.assumeObjects) {
        this.push(strictLookup(this.options.strict && strict, this, parts, type));
        return;
      }
      var len = parts.length;
      for (; i2 < len; i2++) {
        this.replaceStack(function(current) {
          var lookup3 = _this2.nameLookup(current, parts[i2], type);
          if (!falsy) {
            return [" != null ? ", lookup3, " : ", current];
          } else {
            return [" && ", lookup3];
          }
        });
      }
    },
    resolvePossibleLambda: function resolvePossibleLambda() {
      this.push([this.aliasable("container.lambda"), "(", this.popStack(), ", ", this.contextName(0), ")"]);
    },
    pushStringParam: function pushStringParam(string, type) {
      this.pushContext();
      this.pushString(type);
      if (type !== "SubExpression") {
        if (typeof string === "string") {
          this.pushString(string);
        } else {
          this.pushStackLiteral(string);
        }
      }
    },
    emptyHash: function emptyHash(omitEmpty) {
      if (this.trackIds) {
        this.push("{}");
      }
      if (this.stringParams) {
        this.push("{}");
        this.push("{}");
      }
      this.pushStackLiteral(omitEmpty ? "undefined" : "{}");
    },
    pushHash: function pushHash() {
      if (this.hash) {
        this.hashes.push(this.hash);
      }
      this.hash = {values: {}, types: [], contexts: [], ids: []};
    },
    popHash: function popHash() {
      var hash = this.hash;
      this.hash = this.hashes.pop();
      if (this.trackIds) {
        this.push(this.objectLiteral(hash.ids));
      }
      if (this.stringParams) {
        this.push(this.objectLiteral(hash.contexts));
        this.push(this.objectLiteral(hash.types));
      }
      this.push(this.objectLiteral(hash.values));
    },
    pushString: function pushString(string) {
      this.pushStackLiteral(this.quotedString(string));
    },
    pushLiteral: function pushLiteral(value) {
      this.pushStackLiteral(value);
    },
    pushProgram: function pushProgram(guid) {
      if (guid != null) {
        this.pushStackLiteral(this.programExpression(guid));
      } else {
        this.pushStackLiteral(null);
      }
    },
    registerDecorator: function registerDecorator2(paramSize, name2) {
      var foundDecorator = this.nameLookup("decorators", name2, "decorator"), options = this.setupHelperArgs(name2, paramSize);
      this.decorators.push(["fn = ", this.decorators.functionCall(foundDecorator, "", ["fn", "props", "container", options]), " || fn;"]);
    },
    invokeHelper: function invokeHelper(paramSize, name2, isSimple) {
      var nonHelper = this.popStack(), helper = this.setupHelper(paramSize, name2);
      var possibleFunctionCalls = [];
      if (isSimple) {
        possibleFunctionCalls.push(helper.name);
      }
      possibleFunctionCalls.push(nonHelper);
      if (!this.options.strict) {
        possibleFunctionCalls.push(this.aliasable("container.hooks.helperMissing"));
      }
      var functionLookupCode = ["(", this.itemsSeparatedBy(possibleFunctionCalls, "||"), ")"];
      var functionCall = this.source.functionCall(functionLookupCode, "call", helper.callParams);
      this.push(functionCall);
    },
    itemsSeparatedBy: function itemsSeparatedBy(items, separator) {
      var result = [];
      result.push(items[0]);
      for (var i2 = 1; i2 < items.length; i2++) {
        result.push(separator, items[i2]);
      }
      return result;
    },
    invokeKnownHelper: function invokeKnownHelper(paramSize, name2) {
      var helper = this.setupHelper(paramSize, name2);
      this.push(this.source.functionCall(helper.name, "call", helper.callParams));
    },
    invokeAmbiguous: function invokeAmbiguous(name2, helperCall) {
      this.useRegister("helper");
      var nonHelper = this.popStack();
      this.emptyHash();
      var helper = this.setupHelper(0, name2, helperCall);
      var helperName = this.lastHelper = this.nameLookup("helpers", name2, "helper");
      var lookup3 = ["(", "(helper = ", helperName, " || ", nonHelper, ")"];
      if (!this.options.strict) {
        lookup3[0] = "(helper = ";
        lookup3.push(" != null ? helper : ", this.aliasable("container.hooks.helperMissing"));
      }
      this.push(["(", lookup3, helper.paramsInit ? ["),(", helper.paramsInit] : [], "),", "(typeof helper === ", this.aliasable('"function"'), " ? ", this.source.functionCall("helper", "call", helper.callParams), " : helper))"]);
    },
    invokePartial: function invokePartial2(isDynamic, name2, indent) {
      var params = [], options = this.setupParams(name2, 1, params);
      if (isDynamic) {
        name2 = this.popStack();
        delete options.name;
      }
      if (indent) {
        options.indent = JSON.stringify(indent);
      }
      options.helpers = "helpers";
      options.partials = "partials";
      options.decorators = "container.decorators";
      if (!isDynamic) {
        params.unshift(this.nameLookup("partials", name2, "partial"));
      } else {
        params.unshift(name2);
      }
      if (this.options.compat) {
        options.depths = "depths";
      }
      options = this.objectLiteral(options);
      params.push(options);
      this.push(this.source.functionCall("container.invokePartial", "", params));
    },
    assignToHash: function assignToHash(key) {
      var value = this.popStack(), context = void 0, type = void 0, id2 = void 0;
      if (this.trackIds) {
        id2 = this.popStack();
      }
      if (this.stringParams) {
        type = this.popStack();
        context = this.popStack();
      }
      var hash = this.hash;
      if (context) {
        hash.contexts[key] = context;
      }
      if (type) {
        hash.types[key] = type;
      }
      if (id2) {
        hash.ids[key] = id2;
      }
      hash.values[key] = value;
    },
    pushId: function pushId(type, name2, child) {
      if (type === "BlockParam") {
        this.pushStackLiteral("blockParams[" + name2[0] + "].path[" + name2[1] + "]" + (child ? " + " + JSON.stringify("." + child) : ""));
      } else if (type === "PathExpression") {
        this.pushString(name2);
      } else if (type === "SubExpression") {
        this.pushStackLiteral("true");
      } else {
        this.pushStackLiteral("null");
      }
    },
    compiler: JavaScriptCompiler,
    compileChildren: function compileChildren(environment, options) {
      var children = environment.children, child = void 0, compiler2 = void 0;
      for (var i2 = 0, l2 = children.length; i2 < l2; i2++) {
        child = children[i2];
        compiler2 = new this.compiler();
        var existing = this.matchExistingProgram(child);
        if (existing == null) {
          this.context.programs.push("");
          var index = this.context.programs.length;
          child.index = index;
          child.name = "program" + index;
          this.context.programs[index] = compiler2.compile(child, options, this.context, !this.precompile);
          this.context.decorators[index] = compiler2.decorators;
          this.context.environments[index] = child;
          this.useDepths = this.useDepths || compiler2.useDepths;
          this.useBlockParams = this.useBlockParams || compiler2.useBlockParams;
          child.useDepths = this.useDepths;
          child.useBlockParams = this.useBlockParams;
        } else {
          child.index = existing.index;
          child.name = "program" + existing.index;
          this.useDepths = this.useDepths || existing.useDepths;
          this.useBlockParams = this.useBlockParams || existing.useBlockParams;
        }
      }
    },
    matchExistingProgram: function matchExistingProgram(child) {
      for (var i2 = 0, len = this.context.environments.length; i2 < len; i2++) {
        var environment = this.context.environments[i2];
        if (environment && environment.equals(child)) {
          return environment;
        }
      }
    },
    programExpression: function programExpression(guid) {
      var child = this.environment.children[guid], programParams = [child.index, "data", child.blockParams];
      if (this.useBlockParams || this.useDepths) {
        programParams.push("blockParams");
      }
      if (this.useDepths) {
        programParams.push("depths");
      }
      return "container.program(" + programParams.join(", ") + ")";
    },
    useRegister: function useRegister(name2) {
      if (!this.registers[name2]) {
        this.registers[name2] = true;
        this.registers.list.push(name2);
      }
    },
    push: function push2(expr) {
      if (!(expr instanceof Literal)) {
        expr = this.source.wrap(expr);
      }
      this.inlineStack.push(expr);
      return expr;
    },
    pushStackLiteral: function pushStackLiteral(item) {
      this.push(new Literal(item));
    },
    pushSource: function pushSource(source3) {
      if (this.pendingContent) {
        this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent), this.pendingLocation));
        this.pendingContent = void 0;
      }
      if (source3) {
        this.source.push(source3);
      }
    },
    replaceStack: function replaceStack(callback) {
      var prefix = ["("], stack = void 0, createdStack = void 0, usedLiteral = void 0;
      if (!this.isInline()) {
        throw new _exception22["default"]("replaceStack on non-inline");
      }
      var top = this.popStack(true);
      if (top instanceof Literal) {
        stack = [top.value];
        prefix = ["(", stack];
        usedLiteral = true;
      } else {
        createdStack = true;
        var _name = this.incrStack();
        prefix = ["((", this.push(_name), " = ", top, ")"];
        stack = this.topStack();
      }
      var item = callback.call(this, stack);
      if (!usedLiteral) {
        this.popStack();
      }
      if (createdStack) {
        this.stackSlot--;
      }
      this.push(prefix.concat(item, ")"));
    },
    incrStack: function incrStack() {
      this.stackSlot++;
      if (this.stackSlot > this.stackVars.length) {
        this.stackVars.push("stack" + this.stackSlot);
      }
      return this.topStackName();
    },
    topStackName: function topStackName() {
      return "stack" + this.stackSlot;
    },
    flushInline: function flushInline() {
      var inlineStack = this.inlineStack;
      this.inlineStack = [];
      for (var i2 = 0, len = inlineStack.length; i2 < len; i2++) {
        var entry = inlineStack[i2];
        if (entry instanceof Literal) {
          this.compileStack.push(entry);
        } else {
          var stack = this.incrStack();
          this.pushSource([stack, " = ", entry, ";"]);
          this.compileStack.push(stack);
        }
      }
    },
    isInline: function isInline() {
      return this.inlineStack.length;
    },
    popStack: function popStack(wrapped) {
      var inline2 = this.isInline(), item = (inline2 ? this.inlineStack : this.compileStack).pop();
      if (!wrapped && item instanceof Literal) {
        return item.value;
      } else {
        if (!inline2) {
          if (!this.stackSlot) {
            throw new _exception22["default"]("Invalid stack pop");
          }
          this.stackSlot--;
        }
        return item;
      }
    },
    topStack: function topStack() {
      var stack = this.isInline() ? this.inlineStack : this.compileStack, item = stack[stack.length - 1];
      if (item instanceof Literal) {
        return item.value;
      } else {
        return item;
      }
    },
    contextName: function contextName(context) {
      if (this.useDepths && context) {
        return "depths[" + context + "]";
      } else {
        return "depth" + context;
      }
    },
    quotedString: function quotedString(str) {
      return this.source.quotedString(str);
    },
    objectLiteral: function objectLiteral(obj) {
      return this.source.objectLiteral(obj);
    },
    aliasable: function aliasable(name2) {
      var ret = this.aliases[name2];
      if (ret) {
        ret.referenceCount++;
        return ret;
      }
      ret = this.aliases[name2] = this.source.wrap(name2);
      ret.aliasable = true;
      ret.referenceCount = 1;
      return ret;
    },
    setupHelper: function setupHelper(paramSize, name2, blockHelper) {
      var params = [], paramsInit = this.setupHelperArgs(name2, paramSize, params, blockHelper);
      var foundHelper = this.nameLookup("helpers", name2, "helper"), callContext = this.aliasable(this.contextName(0) + " != null ? " + this.contextName(0) + " : (container.nullContext || {})");
      return {
        params,
        paramsInit,
        name: foundHelper,
        callParams: [callContext].concat(params)
      };
    },
    setupParams: function setupParams(helper, paramSize, params) {
      var options = {}, contexts = [], types = [], ids = [], objectArgs = !params, param = void 0;
      if (objectArgs) {
        params = [];
      }
      options.name = this.quotedString(helper);
      options.hash = this.popStack();
      if (this.trackIds) {
        options.hashIds = this.popStack();
      }
      if (this.stringParams) {
        options.hashTypes = this.popStack();
        options.hashContexts = this.popStack();
      }
      var inverse = this.popStack(), program = this.popStack();
      if (program || inverse) {
        options.fn = program || "container.noop";
        options.inverse = inverse || "container.noop";
      }
      var i2 = paramSize;
      while (i2--) {
        param = this.popStack();
        params[i2] = param;
        if (this.trackIds) {
          ids[i2] = this.popStack();
        }
        if (this.stringParams) {
          types[i2] = this.popStack();
          contexts[i2] = this.popStack();
        }
      }
      if (objectArgs) {
        options.args = this.source.generateArray(params);
      }
      if (this.trackIds) {
        options.ids = this.source.generateArray(ids);
      }
      if (this.stringParams) {
        options.types = this.source.generateArray(types);
        options.contexts = this.source.generateArray(contexts);
      }
      if (this.options.data) {
        options.data = "data";
      }
      if (this.useBlockParams) {
        options.blockParams = "blockParams";
      }
      return options;
    },
    setupHelperArgs: function setupHelperArgs(helper, paramSize, params, useRegister) {
      var options = this.setupParams(helper, paramSize, params);
      options.loc = JSON.stringify(this.source.currentLocation);
      options = this.objectLiteral(options);
      if (useRegister) {
        this.useRegister("options");
        params.push("options");
        return ["options=", options];
      } else if (params) {
        params.push(options);
        return "";
      } else {
        return options;
      }
    }
  };
  (function() {
    var reservedWords = "break else new var case finally return void catch for switch while continue function this with default if throw delete in try do instanceof typeof abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public let yield await null true false".split(" ");
    var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};
    for (var i2 = 0, l2 = reservedWords.length; i2 < l2; i2++) {
      compilerWords[reservedWords[i2]] = true;
    }
  })();
  JavaScriptCompiler.isValidJavaScriptVariableName = function(name2) {
    return !JavaScriptCompiler.RESERVED_WORDS[name2] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name2);
  };
  function strictLookup(requireTerminal, compiler2, parts, type) {
    var stack = compiler2.popStack(), i2 = 0, len = parts.length;
    if (requireTerminal) {
      len--;
    }
    for (; i2 < len; i2++) {
      stack = compiler2.nameLookup(stack, parts[i2], type);
    }
    if (requireTerminal) {
      return [compiler2.aliasable("container.strict"), "(", stack, ", ", compiler2.quotedString(parts[i2]), ", ", JSON.stringify(compiler2.source.currentLocation), " )"];
    } else {
      return stack;
    }
  }
  exports["default"] = JavaScriptCompiler;
  module.exports = exports["default"];
})(javascriptCompiler, javascriptCompiler.exports);
(function(module, exports) {
  exports.__esModule = true;
  function _interopRequireDefault2(obj) {
    return obj && obj.__esModule ? obj : {"default": obj};
  }
  var _handlebarsRuntime = handlebars_runtime.exports;
  var _handlebarsRuntime2 = _interopRequireDefault2(_handlebarsRuntime);
  var _handlebarsCompilerAst = ast.exports;
  var _handlebarsCompilerAst2 = _interopRequireDefault2(_handlebarsCompilerAst);
  var _handlebarsCompilerBase = base;
  var _handlebarsCompilerCompiler = compiler;
  var _handlebarsCompilerJavascriptCompiler = javascriptCompiler.exports;
  var _handlebarsCompilerJavascriptCompiler2 = _interopRequireDefault2(_handlebarsCompilerJavascriptCompiler);
  var _handlebarsCompilerVisitor = visitor.exports;
  var _handlebarsCompilerVisitor2 = _interopRequireDefault2(_handlebarsCompilerVisitor);
  var _handlebarsNoConflict = noConflict.exports;
  var _handlebarsNoConflict2 = _interopRequireDefault2(_handlebarsNoConflict);
  var _create = _handlebarsRuntime2["default"].create;
  function create3() {
    var hb = _create();
    hb.compile = function(input, options) {
      return _handlebarsCompilerCompiler.compile(input, options, hb);
    };
    hb.precompile = function(input, options) {
      return _handlebarsCompilerCompiler.precompile(input, options, hb);
    };
    hb.AST = _handlebarsCompilerAst2["default"];
    hb.Compiler = _handlebarsCompilerCompiler.Compiler;
    hb.JavaScriptCompiler = _handlebarsCompilerJavascriptCompiler2["default"];
    hb.Parser = _handlebarsCompilerBase.parser;
    hb.parse = _handlebarsCompilerBase.parse;
    hb.parseWithoutProcessing = _handlebarsCompilerBase.parseWithoutProcessing;
    return hb;
  }
  var inst = create3();
  inst.create = create3;
  _handlebarsNoConflict2["default"](inst);
  inst.Visitor = _handlebarsCompilerVisitor2["default"];
  inst["default"] = inst;
  exports["default"] = inst;
  module.exports = exports["default"];
})(handlebars$2, handlebars$2.exports);
var __handlebars = /* @__PURE__ */ getDefaultExportFromCjs(handlebars$2.exports);
var striptags$1 = {exports: {}};
(function(module) {
  (function(global2) {
    if (typeof Symbol2 !== "function") {
      var Symbol2 = function(name2) {
        return name2;
      };
      Symbol2.nonNative = true;
    }
    const STATE_PLAINTEXT = Symbol2("plaintext");
    const STATE_HTML = Symbol2("html");
    const STATE_COMMENT = Symbol2("comment");
    const ALLOWED_TAGS_REGEX = /<(\w*)>/g;
    const NORMALIZE_TAG_REGEX = /<\/?([^\s\/>]+)/;
    function striptags2(html2, allowable_tags, tag_replacement) {
      html2 = html2 || "";
      allowable_tags = allowable_tags || [];
      tag_replacement = tag_replacement || "";
      let context = init_context(allowable_tags, tag_replacement);
      return striptags_internal(html2, context);
    }
    function init_striptags_stream(allowable_tags, tag_replacement) {
      allowable_tags = allowable_tags || [];
      tag_replacement = tag_replacement || "";
      let context = init_context(allowable_tags, tag_replacement);
      return function striptags_stream(html2) {
        return striptags_internal(html2 || "", context);
      };
    }
    striptags2.init_streaming_mode = init_striptags_stream;
    function init_context(allowable_tags, tag_replacement) {
      allowable_tags = parse_allowable_tags(allowable_tags);
      return {
        allowable_tags,
        tag_replacement,
        state: STATE_PLAINTEXT,
        tag_buffer: "",
        depth: 0,
        in_quote_char: ""
      };
    }
    function striptags_internal(html2, context) {
      let allowable_tags = context.allowable_tags;
      let tag_replacement = context.tag_replacement;
      let state = context.state;
      let tag_buffer = context.tag_buffer;
      let depth = context.depth;
      let in_quote_char = context.in_quote_char;
      let output = "";
      for (let idx = 0, length = html2.length; idx < length; idx++) {
        let char = html2[idx];
        if (state === STATE_PLAINTEXT) {
          switch (char) {
            case "<":
              state = STATE_HTML;
              tag_buffer += char;
              break;
            default:
              output += char;
              break;
          }
        } else if (state === STATE_HTML) {
          switch (char) {
            case "<":
              if (in_quote_char) {
                break;
              }
              depth++;
              break;
            case ">":
              if (in_quote_char) {
                break;
              }
              if (depth) {
                depth--;
                break;
              }
              in_quote_char = "";
              state = STATE_PLAINTEXT;
              tag_buffer += ">";
              if (allowable_tags.has(normalize_tag(tag_buffer))) {
                output += tag_buffer;
              } else {
                output += tag_replacement;
              }
              tag_buffer = "";
              break;
            case '"':
            case "'":
              if (char === in_quote_char) {
                in_quote_char = "";
              } else {
                in_quote_char = in_quote_char || char;
              }
              tag_buffer += char;
              break;
            case "-":
              if (tag_buffer === "<!-") {
                state = STATE_COMMENT;
              }
              tag_buffer += char;
              break;
            case " ":
            case "\n":
              if (tag_buffer === "<") {
                state = STATE_PLAINTEXT;
                output += "< ";
                tag_buffer = "";
                break;
              }
              tag_buffer += char;
              break;
            default:
              tag_buffer += char;
              break;
          }
        } else if (state === STATE_COMMENT) {
          switch (char) {
            case ">":
              if (tag_buffer.slice(-2) == "--") {
                state = STATE_PLAINTEXT;
              }
              tag_buffer = "";
              break;
            default:
              tag_buffer += char;
              break;
          }
        }
      }
      context.state = state;
      context.tag_buffer = tag_buffer;
      context.depth = depth;
      context.in_quote_char = in_quote_char;
      return output;
    }
    function parse_allowable_tags(allowable_tags) {
      let tag_set = new Set();
      if (typeof allowable_tags === "string") {
        let match2;
        while (match2 = ALLOWED_TAGS_REGEX.exec(allowable_tags)) {
          tag_set.add(match2[1]);
        }
      } else if (!Symbol2.nonNative && typeof allowable_tags[Symbol2.iterator] === "function") {
        tag_set = new Set(allowable_tags);
      } else if (typeof allowable_tags.forEach === "function") {
        allowable_tags.forEach(tag_set.add, tag_set);
      }
      return tag_set;
    }
    function normalize_tag(tag_buffer) {
      let match2 = NORMALIZE_TAG_REGEX.exec(tag_buffer);
      return match2 ? match2[1].toLowerCase() : null;
    }
    if (module.exports) {
      module.exports = striptags2;
    } else {
      global2.striptags = striptags2;
    }
  })(commonjsGlobal);
})(striptags$1);
var __striptags = striptags$1.exports;
function striptags(html2, allowedTags = "", tagReplacement = "") {
  return __striptags(html2, allowedTags, tagReplacement);
}
var __awaiter$4 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve2) {
      resolve2(value);
    });
  }
  return new (P || (P = Promise))(function(resolve2, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e2) {
        reject(e2);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e2) {
        reject(e2);
      }
    }
    function step(result) {
      result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
class SComponentUtils extends SClass {
  constructor(node, props, settings = {}) {
    var _a2;
    super(deepMerge$1({}, settings));
    this.$targets = [];
    this.node = node;
    this.name = node.tagName.toLowerCase();
    this.props = props !== null && props !== void 0 ? props : {};
    this.node.setAttribute("s-mounted", true);
    Object.keys(this.constructor._defaultProps).forEach((selector) => {
      const defaultProps = this.constructor._defaultProps[selector];
      if (selector === this.name || this.node.id && selector === `#${this.node.id}` || this.node.id && selector === `${this.name}#${this.node.id}`) {
        this.props = deepMerge$1(defaultProps, this.props);
      }
    });
    if (this._settings.interface) {
      this._settings.interface.definition = Object.assign(Object.assign({}, this._settings.interface.definition), {target: {
        type: "String"
      }, defaultStyle: {
        type: {
          type: "Boolean",
          nullishAsTrue: true
        },
        default: false
      }});
      Object.keys(this._settings.interface.definition).forEach((propName) => {
        const obj = this._settings.interface.definition[propName];
        if (obj.type && (obj.type === "Boolean" || obj.type === "boolean")) {
          obj.type = {
            type: "Boolean",
            nullishAsTrue: true
          };
          this._settings.interface.definition[propName] = obj;
        }
      });
      this.props = this._settings.interface.apply((_a2 = this.props) !== null && _a2 !== void 0 ? _a2 : {});
      if (this.props.target) {
        if (!this.props.target.match(/^(\.|\[])/)) {
          this._targetSelector = `#${this.props.target}`;
        } else {
          this._targetSelector = this.props.target;
        }
        if (this._targetSelector) {
          const targets = Array.from(document.querySelectorAll(this._targetSelector));
          if (targets.length)
            this.$targets = targets;
        }
      }
    }
    __handlebars.registerHelper("striptags", function(txt) {
      if (typeof txt == "undefined")
        return;
      return striptags(txt);
    });
  }
  static setDefaultProps(selector, props) {
    this._defaultProps[selector] = props;
  }
  className(cls2 = "", style = "") {
    let clsString = cls2.split(" ").map((clsName) => `${this.name}${clsName && !clsName.match(/^__/) ? "-" : ""}${clsName}`).join(" ");
    if (style && this.props.defaultStyle) {
      clsString += ` ${style}`;
    }
    return clsString;
  }
  decodeHtml(input) {
    const e2 = document.createElement("textarea");
    e2.innerHTML = input;
    return e2.childNodes.length === 0 ? "" : e2.childNodes[0].nodeValue;
  }
  compileMustache(template2, data) {
    const res = mustache.render(template2, data);
    return res;
  }
  renderHandlerbars(template2, data) {
    const renderFn = __handlebars.compile(template2);
    const res = renderFn(data);
    return res;
  }
  dispatchSyncEvent(name2, details) {
    return new Promise((resolve2, reject) => {
      let hasListeners = false;
      this.node.dispatchEvent(new CustomEvent(name2, {
        detail: Object.assign(Object.assign({}, details), {
          onPing() {
            hasListeners = true;
          },
          onResolve(data) {
            resolve2(data);
          }
        })
      }));
      setTimeout(() => {
        if (!hasListeners)
          reject();
      });
    });
  }
  addSyncEventListener(name2, handler) {
    this.node.addEventListener(name2, (e2) => __awaiter$4(this, void 0, void 0, function* () {
      var _a2;
      if (!((_a2 = e2.detail) === null || _a2 === void 0 ? void 0 : _a2.onPing))
        return handler(e2);
      e2.detail.onPing();
      const res = yield handler(e2);
      e2.detail.onResolve(res);
    }));
  }
  addSyncEventListenerOn($targets, name2, handler) {
    $targets.forEach(($target) => {
      $target.addEventListener(name2, (e2) => __awaiter$4(this, void 0, void 0, function* () {
        var _a2;
        if (!((_a2 = e2.detail) === null || _a2 === void 0 ? void 0 : _a2.onPing))
          return handler(e2);
        e2.detail.onPing();
        const res = yield handler(e2);
        e2.detail.onResolve(res);
      }));
    });
  }
  addTargetsEventListener(name2, handler) {
    this.$targets.forEach(($target) => {
      $target.addEventListener(name2, (e2) => __awaiter$4(this, void 0, void 0, function* () {
        var _a2;
        if (!((_a2 = e2.detail) === null || _a2 === void 0 ? void 0 : _a2.onPing))
          return handler(e2);
        e2.detail.onPing();
        const res = yield handler(e2);
        e2.detail.onResolve(res);
      }));
    });
  }
}
SComponentUtils._defaultProps = {};
class i$2 extends SInterface {
}
i$2.definition = {target: {type: "String"}, group: {type: "String"}, toggle: {type: {type: "Boolean", nullishAsTrue: true}, default: false}, history: {type: {type: "Boolean", nullishAsTrue: true}, default: false}, active: {type: {type: "Boolean", nullishAsTrue: true}, default: false}, saveState: {type: "Boolean", default: false}, trigger: {type: {type: "Array<String>", splitChars: [","]}, default: ["click"]}};
const s = {css: 's-activate,[is="s-activate"]{ display: inline-block; }', exports: {$targets: void 0, $groupElements: void 0, targetSelector: void 0, onBeforeMount() {
  if (this.component = new SComponentUtils(this.root, this.props, {interface: i$2}), this.component.props.saveState) {
    if (!this.root.id)
      throw new Error('<red>[s-activate]</red> In order to use the "<yellow>saveState</yellow>" property, you MUST specify an "<cyan>id</cyan>" on your s-activate component');
    this.component.props.active = localStorage.getItem(`s-activate-state-${this.root.id}`) !== null;
  }
  this.component.props.target && (this.component.props.target.match(/^(\.|\[])/) ? this.targetSelector = this.component.props.target : this.targetSelector = `#${this.component.props.target}`);
}, onMounted() {
  const t = Array.from(document.querySelectorAll(this.targetSelector));
  t.length && (this.$targets = t), this.component.props.group && (this.$groupElements = Array.from(document.querySelectorAll(`s-activate[group="${this.component.props.group}"]`))), this.component.props.trigger.forEach((t2) => {
    switch (t2) {
      case "click":
        this.root.addEventListener("click", (t3) => {
          this.isActive() && this.component.props.toggle ? this.unactivate() : this.activate();
        });
        break;
      case "anchor":
        document.location.hash === this.targetSelector && this.activate(), window.addEventListener("hashchange", (t3) => {
          document.location.hash === this.targetSelector && this.activate();
        });
    }
  }), this.root.activate = this.activate.bind(this), this.root.unactivate = this.unactivate.bind(this), this.root.isActive = this.isActive.bind(this), this.component.props.active && this.activate(true);
}, isActive() {
  return this.root.hasAttribute("active");
}, activate(t = false) {
  if (t || !this.isActive()) {
    if (this.component.props.saveState) {
      if (!this.root.id)
        throw new Error('<red>[s-activate]</red> In order to use the "<yellow>saveState</yellow>" property, you MUST specify an "<cyan>id</cyan>" on your s-activate component');
      localStorage.setItem(`s-activate-state-${this.root.id}`, true);
    }
    this.component.props.history && (document.location.hash = this.targetSelector), this.$groupElements && this.$groupElements.forEach((t2) => {
      if (t2 !== this.root)
        try {
          t2.unactivate();
        } catch (e2) {
        }
    }), this.root.setAttribute("active", true), this.$targets && this.$targets.forEach((t2) => {
      t2.classList.add("active");
    });
  }
}, unactivate() {
  if (this.isActive()) {
    if (this.component.props.saveState) {
      if (!this.root.id)
        throw new Error('<red>[s-activate]</red> In order to use the "<yellow>saveState</yellow>" property, you MUST specify an "<cyan>id</cyan>" on your s-activate component');
      localStorage.removeItem(`s-activate-state-${this.root.id}`);
    }
    this.root.removeAttribute("active"), this.$targets && this.$targets.forEach((t) => {
      t.classList.remove("active");
    });
  }
}}, template: null, name: "s-activate"};
register("s-activate", s), setTimeout(() => {
  mount("s-activate");
}), s.mount = () => {
  mount("s-activate");
}, window.env || (window.env = {SUGAR: {}}), window.env.SUGAR = JSON.parse('{"ENVIRONMENT":"development"}');
var rngBrowser = {exports: {}};
var getRandomValues$1 = typeof crypto != "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != "undefined" && typeof window.msCrypto.getRandomValues == "function" && msCrypto.getRandomValues.bind(msCrypto);
if (getRandomValues$1) {
  var rnds8$1 = new Uint8Array(16);
  rngBrowser.exports = function whatwgRNG() {
    getRandomValues$1(rnds8$1);
    return rnds8$1;
  };
} else {
  var rnds = new Array(16);
  rngBrowser.exports = function mathRNG() {
    for (var i2 = 0, r2; i2 < 16; i2++) {
      if ((i2 & 3) === 0)
        r2 = Math.random() * 4294967296;
      rnds[i2] = r2 >>> ((i2 & 3) << 3) & 255;
    }
    return rnds;
  };
}
var byteToHex$1 = [];
for (var i$1 = 0; i$1 < 256; ++i$1) {
  byteToHex$1[i$1] = (i$1 + 256).toString(16).substr(1);
}
function bytesToUuid$2(buf, offset2) {
  var i2 = offset2 || 0;
  var bth = byteToHex$1;
  return [
    bth[buf[i2++]],
    bth[buf[i2++]],
    bth[buf[i2++]],
    bth[buf[i2++]],
    "-",
    bth[buf[i2++]],
    bth[buf[i2++]],
    "-",
    bth[buf[i2++]],
    bth[buf[i2++]],
    "-",
    bth[buf[i2++]],
    bth[buf[i2++]],
    "-",
    bth[buf[i2++]],
    bth[buf[i2++]],
    bth[buf[i2++]],
    bth[buf[i2++]],
    bth[buf[i2++]],
    bth[buf[i2++]]
  ].join("");
}
var bytesToUuid_1 = bytesToUuid$2;
var rng$2 = rngBrowser.exports;
var bytesToUuid$1 = bytesToUuid_1;
var _nodeId;
var _clockseq;
var _lastMSecs = 0;
var _lastNSecs = 0;
function v1$1(options, buf, offset2) {
  var i2 = buf && offset2 || 0;
  var b = buf || [];
  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
  if (node == null || clockseq == null) {
    var seedBytes = rng$2();
    if (node == null) {
      node = _nodeId = [
        seedBytes[0] | 1,
        seedBytes[1],
        seedBytes[2],
        seedBytes[3],
        seedBytes[4],
        seedBytes[5]
      ];
    }
    if (clockseq == null) {
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
    }
  }
  var msecs = options.msecs !== void 0 ? options.msecs : new Date().getTime();
  var nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
  if (dt < 0 && options.clockseq === void 0) {
    clockseq = clockseq + 1 & 16383;
  }
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
    nsecs = 0;
  }
  if (nsecs >= 1e4) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }
  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;
  msecs += 122192928e5;
  var tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
  b[i2++] = tl >>> 24 & 255;
  b[i2++] = tl >>> 16 & 255;
  b[i2++] = tl >>> 8 & 255;
  b[i2++] = tl & 255;
  var tmh = msecs / 4294967296 * 1e4 & 268435455;
  b[i2++] = tmh >>> 8 & 255;
  b[i2++] = tmh & 255;
  b[i2++] = tmh >>> 24 & 15 | 16;
  b[i2++] = tmh >>> 16 & 255;
  b[i2++] = clockseq >>> 8 | 128;
  b[i2++] = clockseq & 255;
  for (var n2 = 0; n2 < 6; ++n2) {
    b[i2 + n2] = node[n2];
  }
  return buf ? buf : bytesToUuid$1(b);
}
var v1_1 = v1$1;
var rng$1 = rngBrowser.exports;
var bytesToUuid = bytesToUuid_1;
function v4$2(options, buf, offset2) {
  var i2 = buf && offset2 || 0;
  if (typeof options == "string") {
    buf = options === "binary" ? new Array(16) : null;
    options = null;
  }
  options = options || {};
  var rnds2 = options.random || (options.rng || rng$1)();
  rnds2[6] = rnds2[6] & 15 | 64;
  rnds2[8] = rnds2[8] & 63 | 128;
  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i2 + ii] = rnds2[ii];
    }
  }
  return buf || bytesToUuid(rnds2);
}
var v4_1 = v4$2;
var v1 = v1_1;
var v4$1 = v4_1;
var uuid = v4$1;
uuid.v1 = v1;
uuid.v4 = v4$1;
var uuid_1 = uuid;
function getMethods(toCheck) {
  let props = [];
  let obj = toCheck;
  do {
    const _props = Object.getOwnPropertyNames(obj);
    if (_props.indexOf("__defineGetter__") !== -1)
      continue;
    props = props.concat(_props);
  } while (obj = Object.getPrototypeOf(obj));
  return props.sort().filter(function(e2, i2, arr) {
    if (e2 != arr[i2 + 1] && typeof toCheck[e2] == "function")
      return true;
  });
}
var __viteBrowserExternal_path = new Proxy({}, {
  get() {
    throw new Error('Module "path" has been externalized for browser compatibility and cannot be accessed in client code.');
  }
});
var __viteBrowserExternal_path$1 = /* @__PURE__ */ Object.freeze({__proto__: null, [Symbol.toStringTag]: "Module", "default": __viteBrowserExternal_path});
var require$$0 = /* @__PURE__ */ getAugmentedNamespace(__viteBrowserExternal_path$1);
var concatMap$1 = function(xs, fn2) {
  var res = [];
  for (var i2 = 0; i2 < xs.length; i2++) {
    var x2 = fn2(xs[i2], i2);
    if (isArray$2(x2))
      res.push.apply(res, x2);
    else
      res.push(x2);
  }
  return res;
};
var isArray$2 = Array.isArray || function(xs) {
  return Object.prototype.toString.call(xs) === "[object Array]";
};
var balancedMatch = balanced$1;
function balanced$1(a2, b, str) {
  if (a2 instanceof RegExp)
    a2 = maybeMatch(a2, str);
  if (b instanceof RegExp)
    b = maybeMatch(b, str);
  var r2 = range(a2, b, str);
  return r2 && {
    start: r2[0],
    end: r2[1],
    pre: str.slice(0, r2[0]),
    body: str.slice(r2[0] + a2.length, r2[1]),
    post: str.slice(r2[1] + b.length)
  };
}
function maybeMatch(reg, str) {
  var m2 = str.match(reg);
  return m2 ? m2[0] : null;
}
balanced$1.range = range;
function range(a2, b, str) {
  var begs, beg, left2, right, result;
  var ai = str.indexOf(a2);
  var bi = str.indexOf(b, ai + 1);
  var i2 = ai;
  if (ai >= 0 && bi > 0) {
    if (a2 === b) {
      return [ai, bi];
    }
    begs = [];
    left2 = str.length;
    while (i2 >= 0 && !result) {
      if (i2 == ai) {
        begs.push(i2);
        ai = str.indexOf(a2, i2 + 1);
      } else if (begs.length == 1) {
        result = [begs.pop(), bi];
      } else {
        beg = begs.pop();
        if (beg < left2) {
          left2 = beg;
          right = bi;
        }
        bi = str.indexOf(b, i2 + 1);
      }
      i2 = ai < bi && ai >= 0 ? ai : bi;
    }
    if (begs.length) {
      result = [left2, right];
    }
  }
  return result;
}
var concatMap = concatMap$1;
var balanced = balancedMatch;
var braceExpansion = expandTop;
var escSlash = "\0SLASH" + Math.random() + "\0";
var escOpen = "\0OPEN" + Math.random() + "\0";
var escClose = "\0CLOSE" + Math.random() + "\0";
var escComma = "\0COMMA" + Math.random() + "\0";
var escPeriod = "\0PERIOD" + Math.random() + "\0";
function numeric(str) {
  return parseInt(str, 10) == str ? parseInt(str, 10) : str.charCodeAt(0);
}
function escapeBraces(str) {
  return str.split("\\\\").join(escSlash).split("\\{").join(escOpen).split("\\}").join(escClose).split("\\,").join(escComma).split("\\.").join(escPeriod);
}
function unescapeBraces(str) {
  return str.split(escSlash).join("\\").split(escOpen).join("{").split(escClose).join("}").split(escComma).join(",").split(escPeriod).join(".");
}
function parseCommaParts(str) {
  if (!str)
    return [""];
  var parts = [];
  var m2 = balanced("{", "}", str);
  if (!m2)
    return str.split(",");
  var pre = m2.pre;
  var body = m2.body;
  var post = m2.post;
  var p2 = pre.split(",");
  p2[p2.length - 1] += "{" + body + "}";
  var postParts = parseCommaParts(post);
  if (post.length) {
    p2[p2.length - 1] += postParts.shift();
    p2.push.apply(p2, postParts);
  }
  parts.push.apply(parts, p2);
  return parts;
}
function expandTop(str) {
  if (!str)
    return [];
  if (str.substr(0, 2) === "{}") {
    str = "\\{\\}" + str.substr(2);
  }
  return expand$1(escapeBraces(str), true).map(unescapeBraces);
}
function embrace(str) {
  return "{" + str + "}";
}
function isPadded(el) {
  return /^-?0\d/.test(el);
}
function lte(i2, y2) {
  return i2 <= y2;
}
function gte(i2, y2) {
  return i2 >= y2;
}
function expand$1(str, isTop) {
  var expansions = [];
  var m2 = balanced("{", "}", str);
  if (!m2 || /\$$/.test(m2.pre))
    return [str];
  var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m2.body);
  var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m2.body);
  var isSequence = isNumericSequence || isAlphaSequence;
  var isOptions = m2.body.indexOf(",") >= 0;
  if (!isSequence && !isOptions) {
    if (m2.post.match(/,.*\}/)) {
      str = m2.pre + "{" + m2.body + escClose + m2.post;
      return expand$1(str);
    }
    return [str];
  }
  var n2;
  if (isSequence) {
    n2 = m2.body.split(/\.\./);
  } else {
    n2 = parseCommaParts(m2.body);
    if (n2.length === 1) {
      n2 = expand$1(n2[0], false).map(embrace);
      if (n2.length === 1) {
        var post = m2.post.length ? expand$1(m2.post, false) : [""];
        return post.map(function(p2) {
          return m2.pre + n2[0] + p2;
        });
      }
    }
  }
  var pre = m2.pre;
  var post = m2.post.length ? expand$1(m2.post, false) : [""];
  var N;
  if (isSequence) {
    var x2 = numeric(n2[0]);
    var y2 = numeric(n2[1]);
    var width = Math.max(n2[0].length, n2[1].length);
    var incr = n2.length == 3 ? Math.abs(numeric(n2[2])) : 1;
    var test = lte;
    var reverse = y2 < x2;
    if (reverse) {
      incr *= -1;
      test = gte;
    }
    var pad = n2.some(isPadded);
    N = [];
    for (var i2 = x2; test(i2, y2); i2 += incr) {
      var c2;
      if (isAlphaSequence) {
        c2 = String.fromCharCode(i2);
        if (c2 === "\\")
          c2 = "";
      } else {
        c2 = String(i2);
        if (pad) {
          var need = width - c2.length;
          if (need > 0) {
            var z = new Array(need + 1).join("0");
            if (i2 < 0)
              c2 = "-" + z + c2.slice(1);
            else
              c2 = z + c2;
          }
        }
      }
      N.push(c2);
    }
  } else {
    N = concatMap(n2, function(el) {
      return expand$1(el, false);
    });
  }
  for (var j2 = 0; j2 < N.length; j2++) {
    for (var k2 = 0; k2 < post.length; k2++) {
      var expansion = pre + N[j2] + post[k2];
      if (!isTop || isSequence || expansion)
        expansions.push(expansion);
    }
  }
  return expansions;
}
var minimatch_1 = minimatch;
minimatch.Minimatch = Minimatch;
var path = {sep: "/"};
try {
  path = require$$0;
} catch (er) {
}
var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {};
var expand = braceExpansion;
var plTypes = {
  "!": {open: "(?:(?!(?:", close: "))[^/]*?)"},
  "?": {open: "(?:", close: ")?"},
  "+": {open: "(?:", close: ")+"},
  "*": {open: "(?:", close: ")*"},
  "@": {open: "(?:", close: ")"}
};
var qmark = "[^/]";
var star = qmark + "*?";
var twoStarDot = "(?:(?!(?:\\/|^)(?:\\.{1,2})($|\\/)).)*?";
var twoStarNoDot = "(?:(?!(?:\\/|^)\\.).)*?";
var reSpecials = charSet("().*{}+?[]^$\\!");
function charSet(s2) {
  return s2.split("").reduce(function(set2, c2) {
    set2[c2] = true;
    return set2;
  }, {});
}
var slashSplit = /\/+/;
minimatch.filter = filter$2;
function filter$2(pattern, options) {
  options = options || {};
  return function(p2, i2, list) {
    return minimatch(p2, pattern, options);
  };
}
function ext(a2, b) {
  a2 = a2 || {};
  b = b || {};
  var t = {};
  Object.keys(b).forEach(function(k2) {
    t[k2] = b[k2];
  });
  Object.keys(a2).forEach(function(k2) {
    t[k2] = a2[k2];
  });
  return t;
}
minimatch.defaults = function(def) {
  if (!def || !Object.keys(def).length)
    return minimatch;
  var orig = minimatch;
  var m2 = function minimatch2(p2, pattern, options) {
    return orig.minimatch(p2, pattern, ext(def, options));
  };
  m2.Minimatch = function Minimatch2(pattern, options) {
    return new orig.Minimatch(pattern, ext(def, options));
  };
  return m2;
};
Minimatch.defaults = function(def) {
  if (!def || !Object.keys(def).length)
    return Minimatch;
  return minimatch.defaults(def).Minimatch;
};
function minimatch(p2, pattern, options) {
  if (typeof pattern !== "string") {
    throw new TypeError("glob pattern string required");
  }
  if (!options)
    options = {};
  if (!options.nocomment && pattern.charAt(0) === "#") {
    return false;
  }
  if (pattern.trim() === "")
    return p2 === "";
  return new Minimatch(pattern, options).match(p2);
}
function Minimatch(pattern, options) {
  if (!(this instanceof Minimatch)) {
    return new Minimatch(pattern, options);
  }
  if (typeof pattern !== "string") {
    throw new TypeError("glob pattern string required");
  }
  if (!options)
    options = {};
  pattern = pattern.trim();
  if (path.sep !== "/") {
    pattern = pattern.split(path.sep).join("/");
  }
  this.options = options;
  this.set = [];
  this.pattern = pattern;
  this.regexp = null;
  this.negate = false;
  this.comment = false;
  this.empty = false;
  this.make();
}
Minimatch.prototype.debug = function() {
};
Minimatch.prototype.make = make;
function make() {
  if (this._made)
    return;
  var pattern = this.pattern;
  var options = this.options;
  if (!options.nocomment && pattern.charAt(0) === "#") {
    this.comment = true;
    return;
  }
  if (!pattern) {
    this.empty = true;
    return;
  }
  this.parseNegate();
  var set2 = this.globSet = this.braceExpand();
  if (options.debug)
    this.debug = console.error;
  this.debug(this.pattern, set2);
  set2 = this.globParts = set2.map(function(s2) {
    return s2.split(slashSplit);
  });
  this.debug(this.pattern, set2);
  set2 = set2.map(function(s2, si, set3) {
    return s2.map(this.parse, this);
  }, this);
  this.debug(this.pattern, set2);
  set2 = set2.filter(function(s2) {
    return s2.indexOf(false) === -1;
  });
  this.debug(this.pattern, set2);
  this.set = set2;
}
Minimatch.prototype.parseNegate = parseNegate;
function parseNegate() {
  var pattern = this.pattern;
  var negate = false;
  var options = this.options;
  var negateOffset = 0;
  if (options.nonegate)
    return;
  for (var i2 = 0, l2 = pattern.length; i2 < l2 && pattern.charAt(i2) === "!"; i2++) {
    negate = !negate;
    negateOffset++;
  }
  if (negateOffset)
    this.pattern = pattern.substr(negateOffset);
  this.negate = negate;
}
minimatch.braceExpand = function(pattern, options) {
  return braceExpand(pattern, options);
};
Minimatch.prototype.braceExpand = braceExpand;
function braceExpand(pattern, options) {
  if (!options) {
    if (this instanceof Minimatch) {
      options = this.options;
    } else {
      options = {};
    }
  }
  pattern = typeof pattern === "undefined" ? this.pattern : pattern;
  if (typeof pattern === "undefined") {
    throw new TypeError("undefined pattern");
  }
  if (options.nobrace || !pattern.match(/\{.*\}/)) {
    return [pattern];
  }
  return expand(pattern);
}
Minimatch.prototype.parse = parse$1;
var SUBPARSE = {};
function parse$1(pattern, isSub) {
  if (pattern.length > 1024 * 64) {
    throw new TypeError("pattern is too long");
  }
  var options = this.options;
  if (!options.noglobstar && pattern === "**")
    return GLOBSTAR;
  if (pattern === "")
    return "";
  var re = "";
  var hasMagic = !!options.nocase;
  var escaping = false;
  var patternListStack = [];
  var negativeLists = [];
  var stateChar;
  var inClass = false;
  var reClassStart = -1;
  var classStart = -1;
  var patternStart = pattern.charAt(0) === "." ? "" : options.dot ? "(?!(?:^|\\/)\\.{1,2}(?:$|\\/))" : "(?!\\.)";
  var self2 = this;
  function clearStateChar() {
    if (stateChar) {
      switch (stateChar) {
        case "*":
          re += star;
          hasMagic = true;
          break;
        case "?":
          re += qmark;
          hasMagic = true;
          break;
        default:
          re += "\\" + stateChar;
          break;
      }
      self2.debug("clearStateChar %j %j", stateChar, re);
      stateChar = false;
    }
  }
  for (var i2 = 0, len = pattern.length, c2; i2 < len && (c2 = pattern.charAt(i2)); i2++) {
    this.debug("%s	%s %s %j", pattern, i2, re, c2);
    if (escaping && reSpecials[c2]) {
      re += "\\" + c2;
      escaping = false;
      continue;
    }
    switch (c2) {
      case "/":
        return false;
      case "\\":
        clearStateChar();
        escaping = true;
        continue;
      case "?":
      case "*":
      case "+":
      case "@":
      case "!":
        this.debug("%s	%s %s %j <-- stateChar", pattern, i2, re, c2);
        if (inClass) {
          this.debug("  in class");
          if (c2 === "!" && i2 === classStart + 1)
            c2 = "^";
          re += c2;
          continue;
        }
        self2.debug("call clearStateChar %j", stateChar);
        clearStateChar();
        stateChar = c2;
        if (options.noext)
          clearStateChar();
        continue;
      case "(":
        if (inClass) {
          re += "(";
          continue;
        }
        if (!stateChar) {
          re += "\\(";
          continue;
        }
        patternListStack.push({
          type: stateChar,
          start: i2 - 1,
          reStart: re.length,
          open: plTypes[stateChar].open,
          close: plTypes[stateChar].close
        });
        re += stateChar === "!" ? "(?:(?!(?:" : "(?:";
        this.debug("plType %j %j", stateChar, re);
        stateChar = false;
        continue;
      case ")":
        if (inClass || !patternListStack.length) {
          re += "\\)";
          continue;
        }
        clearStateChar();
        hasMagic = true;
        var pl = patternListStack.pop();
        re += pl.close;
        if (pl.type === "!") {
          negativeLists.push(pl);
        }
        pl.reEnd = re.length;
        continue;
      case "|":
        if (inClass || !patternListStack.length || escaping) {
          re += "\\|";
          escaping = false;
          continue;
        }
        clearStateChar();
        re += "|";
        continue;
      case "[":
        clearStateChar();
        if (inClass) {
          re += "\\" + c2;
          continue;
        }
        inClass = true;
        classStart = i2;
        reClassStart = re.length;
        re += c2;
        continue;
      case "]":
        if (i2 === classStart + 1 || !inClass) {
          re += "\\" + c2;
          escaping = false;
          continue;
        }
        if (inClass) {
          var cs = pattern.substring(classStart + 1, i2);
          try {
            RegExp("[" + cs + "]");
          } catch (er) {
            var sp = this.parse(cs, SUBPARSE);
            re = re.substr(0, reClassStart) + "\\[" + sp[0] + "\\]";
            hasMagic = hasMagic || sp[1];
            inClass = false;
            continue;
          }
        }
        hasMagic = true;
        inClass = false;
        re += c2;
        continue;
      default:
        clearStateChar();
        if (escaping) {
          escaping = false;
        } else if (reSpecials[c2] && !(c2 === "^" && inClass)) {
          re += "\\";
        }
        re += c2;
    }
  }
  if (inClass) {
    cs = pattern.substr(classStart + 1);
    sp = this.parse(cs, SUBPARSE);
    re = re.substr(0, reClassStart) + "\\[" + sp[0];
    hasMagic = hasMagic || sp[1];
  }
  for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
    var tail = re.slice(pl.reStart + pl.open.length);
    this.debug("setting tail", re, pl);
    tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function(_2, $1, $2) {
      if (!$2) {
        $2 = "\\";
      }
      return $1 + $1 + $2 + "|";
    });
    this.debug("tail=%j\n   %s", tail, tail, pl, re);
    var t = pl.type === "*" ? star : pl.type === "?" ? qmark : "\\" + pl.type;
    hasMagic = true;
    re = re.slice(0, pl.reStart) + t + "\\(" + tail;
  }
  clearStateChar();
  if (escaping) {
    re += "\\\\";
  }
  var addPatternStart = false;
  switch (re.charAt(0)) {
    case ".":
    case "[":
    case "(":
      addPatternStart = true;
  }
  for (var n2 = negativeLists.length - 1; n2 > -1; n2--) {
    var nl = negativeLists[n2];
    var nlBefore = re.slice(0, nl.reStart);
    var nlFirst = re.slice(nl.reStart, nl.reEnd - 8);
    var nlLast = re.slice(nl.reEnd - 8, nl.reEnd);
    var nlAfter = re.slice(nl.reEnd);
    nlLast += nlAfter;
    var openParensBefore = nlBefore.split("(").length - 1;
    var cleanAfter = nlAfter;
    for (i2 = 0; i2 < openParensBefore; i2++) {
      cleanAfter = cleanAfter.replace(/\)[+*?]?/, "");
    }
    nlAfter = cleanAfter;
    var dollar = "";
    if (nlAfter === "" && isSub !== SUBPARSE) {
      dollar = "$";
    }
    var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast;
    re = newRe;
  }
  if (re !== "" && hasMagic) {
    re = "(?=.)" + re;
  }
  if (addPatternStart) {
    re = patternStart + re;
  }
  if (isSub === SUBPARSE) {
    return [re, hasMagic];
  }
  if (!hasMagic) {
    return globUnescape(pattern);
  }
  var flags = options.nocase ? "i" : "";
  try {
    var regExp = new RegExp("^" + re + "$", flags);
  } catch (er) {
    return new RegExp("$.");
  }
  regExp._glob = pattern;
  regExp._src = re;
  return regExp;
}
minimatch.makeRe = function(pattern, options) {
  return new Minimatch(pattern, options || {}).makeRe();
};
Minimatch.prototype.makeRe = makeRe;
function makeRe() {
  if (this.regexp || this.regexp === false)
    return this.regexp;
  var set2 = this.set;
  if (!set2.length) {
    this.regexp = false;
    return this.regexp;
  }
  var options = this.options;
  var twoStar = options.noglobstar ? star : options.dot ? twoStarDot : twoStarNoDot;
  var flags = options.nocase ? "i" : "";
  var re = set2.map(function(pattern) {
    return pattern.map(function(p2) {
      return p2 === GLOBSTAR ? twoStar : typeof p2 === "string" ? regExpEscape(p2) : p2._src;
    }).join("\\/");
  }).join("|");
  re = "^(?:" + re + ")$";
  if (this.negate)
    re = "^(?!" + re + ").*$";
  try {
    this.regexp = new RegExp(re, flags);
  } catch (ex) {
    this.regexp = false;
  }
  return this.regexp;
}
minimatch.match = function(list, pattern, options) {
  options = options || {};
  var mm = new Minimatch(pattern, options);
  list = list.filter(function(f2) {
    return mm.match(f2);
  });
  if (mm.options.nonull && !list.length) {
    list.push(pattern);
  }
  return list;
};
Minimatch.prototype.match = match;
function match(f2, partial) {
  this.debug("match", f2, this.pattern);
  if (this.comment)
    return false;
  if (this.empty)
    return f2 === "";
  if (f2 === "/" && partial)
    return true;
  var options = this.options;
  if (path.sep !== "/") {
    f2 = f2.split(path.sep).join("/");
  }
  f2 = f2.split(slashSplit);
  this.debug(this.pattern, "split", f2);
  var set2 = this.set;
  this.debug(this.pattern, "set", set2);
  var filename;
  var i2;
  for (i2 = f2.length - 1; i2 >= 0; i2--) {
    filename = f2[i2];
    if (filename)
      break;
  }
  for (i2 = 0; i2 < set2.length; i2++) {
    var pattern = set2[i2];
    var file = f2;
    if (options.matchBase && pattern.length === 1) {
      file = [filename];
    }
    var hit = this.matchOne(file, pattern, partial);
    if (hit) {
      if (options.flipNegate)
        return true;
      return !this.negate;
    }
  }
  if (options.flipNegate)
    return false;
  return this.negate;
}
Minimatch.prototype.matchOne = function(file, pattern, partial) {
  var options = this.options;
  this.debug("matchOne", {"this": this, file, pattern});
  this.debug("matchOne", file.length, pattern.length);
  for (var fi = 0, pi = 0, fl = file.length, pl = pattern.length; fi < fl && pi < pl; fi++, pi++) {
    this.debug("matchOne loop");
    var p2 = pattern[pi];
    var f2 = file[fi];
    this.debug(pattern, p2, f2);
    if (p2 === false)
      return false;
    if (p2 === GLOBSTAR) {
      this.debug("GLOBSTAR", [pattern, p2, f2]);
      var fr = fi;
      var pr = pi + 1;
      if (pr === pl) {
        this.debug("** at the end");
        for (; fi < fl; fi++) {
          if (file[fi] === "." || file[fi] === ".." || !options.dot && file[fi].charAt(0) === ".")
            return false;
        }
        return true;
      }
      while (fr < fl) {
        var swallowee = file[fr];
        this.debug("\nglobstar while", file, fr, pattern, pr, swallowee);
        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
          this.debug("globstar found match!", fr, fl, swallowee);
          return true;
        } else {
          if (swallowee === "." || swallowee === ".." || !options.dot && swallowee.charAt(0) === ".") {
            this.debug("dot detected!", file, fr, pattern, pr);
            break;
          }
          this.debug("globstar swallow a segment, and continue");
          fr++;
        }
      }
      if (partial) {
        this.debug("\n>>> no match, partial?", file, fr, pattern, pr);
        if (fr === fl)
          return true;
      }
      return false;
    }
    var hit;
    if (typeof p2 === "string") {
      if (options.nocase) {
        hit = f2.toLowerCase() === p2.toLowerCase();
      } else {
        hit = f2 === p2;
      }
      this.debug("string match", p2, f2, hit);
    } else {
      hit = f2.match(p2);
      this.debug("pattern match", p2, f2, hit);
    }
    if (!hit)
      return false;
  }
  if (fi === fl && pi === pl) {
    return true;
  } else if (fi === fl) {
    return partial;
  } else if (pi === pl) {
    var emptyFileEnd = fi === fl - 1 && file[fi] === "";
    return emptyFileEnd;
  }
  throw new Error("wtf?");
};
function globUnescape(s2) {
  return s2.replace(/\\(.)/g, "$1");
}
function regExpEscape(s2) {
  return s2.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
}
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== "undefined" && typeof msCrypto.getRandomValues === "function" && msCrypto.getRandomValues.bind(msCrypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}
var REGEX = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
function validate(uuid2) {
  return typeof uuid2 === "string" && REGEX.test(uuid2);
}
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).substr(1));
}
function stringify(arr) {
  var offset2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var uuid2 = (byteToHex[arr[offset2 + 0]] + byteToHex[arr[offset2 + 1]] + byteToHex[arr[offset2 + 2]] + byteToHex[arr[offset2 + 3]] + "-" + byteToHex[arr[offset2 + 4]] + byteToHex[arr[offset2 + 5]] + "-" + byteToHex[arr[offset2 + 6]] + byteToHex[arr[offset2 + 7]] + "-" + byteToHex[arr[offset2 + 8]] + byteToHex[arr[offset2 + 9]] + "-" + byteToHex[arr[offset2 + 10]] + byteToHex[arr[offset2 + 11]] + byteToHex[arr[offset2 + 12]] + byteToHex[arr[offset2 + 13]] + byteToHex[arr[offset2 + 14]] + byteToHex[arr[offset2 + 15]]).toLowerCase();
  if (!validate(uuid2)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid2;
}
function v4(options, buf, offset2) {
  options = options || {};
  var rnds2 = options.random || (options.rng || rng)();
  rnds2[6] = rnds2[6] & 15 | 64;
  rnds2[8] = rnds2[8] & 63 | 128;
  if (buf) {
    offset2 = offset2 || 0;
    for (var i2 = 0; i2 < 16; ++i2) {
      buf[offset2 + i2] = rnds2[i2];
    }
    return buf;
  }
  return stringify(rnds2);
}
function uniqid$1() {
  return v4();
}
var ansiRegex$1 = ({onlyFirst = false} = {}) => {
  const pattern = [
    "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
    "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"
  ].join("|");
  return new RegExp(pattern, onlyFirst ? void 0 : "g");
};
const ansiRegex = ansiRegex$1;
var stripAnsi$1 = (string) => typeof string === "string" ? string.replace(ansiRegex(), "") : string;
function stripAnsi(string) {
  return stripAnsi$1(string);
}
var __awaiter$3 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve2) {
      resolve2(value);
    });
  }
  return new (P || (P = Promise))(function(resolve2, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e2) {
        reject(e2);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e2) {
        reject(e2);
      }
    }
    function step(result) {
      result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
class SEventEmitter extends SClass {
  constructor(settings = {}) {
    super(deepMerge$1({
      eventEmitter: {
        emitter: void 0,
        asyncStart: false,
        defaultCallTime: {},
        bufferTimeout: 1e3,
        bufferedEvents: [],
        forceObject: ["log", "warn", "error"],
        defaults: {},
        bind: void 0
      }
    }, settings || {}));
    this._asyncStarted = false;
    this._buffer = [];
    this._eventsStacks = {};
    this._onStackById = {};
  }
  static pipe(sourceSEventEmitter, destSEventEmitter, settings) {
    const set2 = Object.assign({events: "*", prefixEvent: false, prefixValue: void 0, stripAnsi: false, trim: true, keepLineBreak: true, overrideEmitter: "bind", processor: void 0, exclude: ["finally", "resolve", "reject", "cancel", "catch"], filter: void 0}, settings !== null && settings !== void 0 ? settings : {});
    if (!sourceSEventEmitter || !sourceSEventEmitter.on || typeof sourceSEventEmitter.on !== "function")
      return sourceSEventEmitter;
    sourceSEventEmitter.on(set2.events || "*", (value, metas) => __awaiter$3(this, void 0, void 0, function* () {
      if (metas.event.match(/^answer\..*/)) {
        return;
      }
      if (set2.exclude && set2.exclude.indexOf(metas.event) !== -1)
        return;
      if (set2.filter && !set2.filter(value, metas))
        return;
      if (set2.stripAnsi) {
        if (value && value.value && typeof value.value === "string")
          value.value = stripAnsi(value.value);
        else if (typeof value === "string")
          value = stripAnsi(value);
      }
      if (set2.trim) {
        if (value && value.value && typeof value.value === "string")
          value.value = value.value.trim();
        else if (typeof value === "string")
          value = value.trim();
      }
      if (set2.keepLineBreak === false) {
        if (value && value.value && typeof value.value === "string")
          value.value = value.value.replace(/\r?\n|\r/g, "");
        else if (typeof value === "string")
          value = value.replace(/\r?\n|\r/g, "");
      }
      if (set2.processor) {
        const res = set2.processor(value, metas);
        if (Array.isArray(res) && res.length === 2) {
          value = res[0];
          metas = res[1];
        } else if (typeof res === "object" && res.value !== void 0 && res.metas !== void 0) {
          value = res.value;
          metas = res.metas;
        } else {
          value = res;
        }
      }
      if (set2.prefixValue) {
        if (value && value.value && typeof value.value === "string") {
          value.value = `${set2.prefixValue}${value.value}`;
        } else if (typeof value === "string") {
          value = `${set2.prefixValue}${value}`;
        }
      }
      if (metas && metas.event) {
        let emitStack = metas.event;
        if (!metas.emitter) {
          metas.emitter = this;
        }
        if (set2.prefixEvent) {
          if (typeof set2.prefixEvent === "string") {
            emitStack = `${set2.prefixEvent}.${metas.event}`;
          } else {
            emitStack = `${metas.name}`;
          }
          metas.event = emitStack;
        }
        if (metas.askId) {
          destSEventEmitter.on(`${metas.event}:1`, (value2, onMetas) => {
            sourceSEventEmitter.emit(`answer.${metas.askId}`, value2);
          });
        }
        const emitMetas = Object.assign(Object.assign({}, metas), {level: metas && metas.level ? metas.level + 1 : 1});
        if (set2.overrideEmitter === "bind" && destSEventEmitter.eventEmitterSettings.bind) {
          emitMetas.emitter = destSEventEmitter.eventEmitterSettings.bind;
        } else if (set2.overrideEmitter === true) {
          emitMetas.emitter = destSEventEmitter;
        }
        destSEventEmitter.emit(metas.event, value, emitMetas);
      }
    }));
  }
  get eventEmitterSettings() {
    return this._settings.eventEmitter;
  }
  pipe(input, settings) {
    SEventEmitter.pipe(input, this, settings);
    return input;
  }
  pipeFrom(input, settings) {
    return this.pipe(input, settings);
  }
  pipeTo(dest, settings) {
    SEventEmitter.pipe(this, dest, settings);
    return this;
  }
  start() {
    if (!this.eventEmitterSettings.asyncStart)
      return;
    this._asyncStarted = true;
    this._processBuffer();
  }
  emit(event, value, metas) {
    return new Promise((resolve2, reject) => __awaiter$3(this, void 0, void 0, function* () {
      const finalMetas = Object.assign({}, metas || {});
      const isFirstLevel = !finalMetas.level;
      if ((this.eventEmitterSettings.forceObject === true || Array.isArray(this.eventEmitterSettings.forceObject) && this.eventEmitterSettings.forceObject.indexOf(event) !== -1) && !plainObject$1(value)) {
        value = {
          value
        };
      }
      if (plainObject$1(value)) {
        Object.keys(this.eventEmitterSettings.defaults).forEach((key) => {
          var _a2;
          const parts = key.split(",").map((l2) => l2.trim());
          if (parts.indexOf(event) === -1 && parts.indexOf("*") === -1)
            return;
          value = deepMerge$1(value, (_a2 = this.eventEmitterSettings.defaults) === null || _a2 === void 0 ? void 0 : _a2[key]);
        });
      }
      if (!finalMetas.askId && isFirstLevel) {
        if (value && value.ask === true || event === "ask") {
          finalMetas.askId = uniqid$1();
          finalMetas.ask = true;
        }
      }
      if (isFirstLevel && finalMetas.askId) {
        this.on(`answer.${finalMetas.askId}:1`, (value2) => {
          resolve2(value2);
        });
        this._emitEvents(event, value, finalMetas);
      } else {
        const res = yield this._emitEvents(event, value, finalMetas);
        return resolve2(res);
      }
    }));
  }
  _registerNewEventsStacks(events) {
    if (typeof events === "string")
      events = events.split(",").map((s2) => s2.trim());
    events.forEach((event) => {
      if (!this._eventsStacks[event]) {
        this._eventsStacks[event] = {
          buffer: [],
          callStack: []
        };
      }
    });
  }
  _registerCallbackInEventStack(event, callback, settings = {}) {
    settings = Object.assign({callNumber: void 0, filter: void 0, processor: void 0, id: void 0}, settings);
    if (settings.id) {
      if (!this._onStackById[settings.id])
        this._onStackById[settings.id] = [];
      this._onStackById[settings.id].push({
        event,
        callback,
        settings
      });
    }
    if (!this._eventsStacks[event]) {
      this._registerNewEventsStacks(event);
    }
    const eventStackObj = this._eventsStacks[event];
    let callNumber = settings.callNumber;
    if (callNumber === void 0 && this.eventEmitterSettings.defaultCallTime[event] !== void 0) {
      callNumber = this.eventEmitterSettings.defaultCallTime[event];
    } else if (callNumber === void 0) {
      callNumber = -1;
    }
    if (typeof callback === "function")
      eventStackObj.callStack.push({
        callback,
        callNumber,
        filter: settings.filter,
        processor: settings.processor,
        called: 0
      });
    this._processBuffer();
    return this;
  }
  _processBuffer() {
    if (this._buffer.length > 0) {
      setTimeout(() => {
        this._buffer = this._buffer.filter((item) => {
          this.emit(item.event, item.value);
          return false;
        });
      }, this.eventEmitterSettings.bufferTimeout);
    }
  }
  _emitEventStack(event, initialValue, metas) {
    var _a2, _b, _c;
    return __awaiter$3(this, void 0, void 0, function* () {
      let currentCallbackReturnedValue = initialValue;
      if (!this._eventsStacks || Object.keys(this._eventsStacks).length === 0)
        return currentCallbackReturnedValue;
      if (!this._asyncStarted && this.eventEmitterSettings.asyncStart) {
        this._buffer.push({
          event,
          value: initialValue
        });
        return initialValue;
      }
      if (!this._eventsStacks[event]) {
        this._registerNewEventsStacks(event);
      }
      let eventStackArray = [];
      const eventStackObj = this._eventsStacks[event];
      if (eventStackObj && eventStackObj.callStack) {
        eventStackArray = [...eventStackArray, ...eventStackObj.callStack];
      }
      Object.keys(this._eventsStacks).forEach((stackName) => {
        if (stackName === event)
          return;
        if (minimatch_1(event, stackName) && this._eventsStacks[stackName] !== void 0) {
          eventStackArray = [
            ...eventStackArray,
            ...this._eventsStacks[stackName].callStack
          ];
        }
      });
      if (eventStackArray.length === 0) {
        for (let i2 = 0; i2 < this.eventEmitterSettings.bufferedEvents.length; i2++) {
          const bufferedStack = this.eventEmitterSettings.bufferedEvents[i2];
          if (bufferedStack && minimatch_1(event, bufferedStack)) {
            this._buffer.push({
              event,
              value: initialValue
            });
          }
        }
        return initialValue;
      }
      eventStackArray.map((item) => item.called++);
      eventStackArray = eventStackArray.filter((item) => {
        if (item.callNumber === -1)
          return true;
        if (item.called <= item.callNumber)
          return true;
        return false;
      });
      let metasObj = deepMerge$1({
        event,
        name: event,
        emitter: (_b = (_a2 = this.eventEmitterSettings.bind) !== null && _a2 !== void 0 ? _a2 : metas === null || metas === void 0 ? void 0 : metas.emitter) !== null && _b !== void 0 ? _b : this,
        originalEmitter: (_c = metas === null || metas === void 0 ? void 0 : metas.originalEmitter) !== null && _c !== void 0 ? _c : this,
        time: Date.now(),
        level: 1,
        id: uniqid$1()
      }, metas);
      for (let i2 = 0; i2 < eventStackArray.length; i2++) {
        const item = eventStackArray[i2];
        if (!item.callback)
          return currentCallbackReturnedValue;
        if (item.filter && !item.filter(currentCallbackReturnedValue, metasObj))
          continue;
        if (item.processor) {
          const res = item.processor(currentCallbackReturnedValue, metasObj);
          if (Array.isArray(res) && res.length === 2) {
            currentCallbackReturnedValue = res[0];
            metasObj = res[1];
          } else if (typeof res === "object" && res.value !== void 0 && res.metas !== void 0) {
            currentCallbackReturnedValue = res.value;
            metasObj = res.metas;
          } else {
            currentCallbackReturnedValue = res;
          }
        }
        const callbackResult = yield item.callback(currentCallbackReturnedValue, metasObj);
        if (callbackResult !== void 0) {
          currentCallbackReturnedValue = callbackResult;
        }
      }
      if (!eventStackArray.length && metasObj.askId) {
        this.emit(`answer.${metasObj.askId}`, currentCallbackReturnedValue);
      }
      return currentCallbackReturnedValue;
    });
  }
  _emitEvents(events, initialValue, metas) {
    return new Promise((resolve2, reject) => __awaiter$3(this, void 0, void 0, function* () {
      if (!events)
        return this;
      if (typeof events === "string")
        events = events.split(",").map((s2) => s2.trim());
      let currentStackResult = initialValue;
      for (let i2 = 0; i2 < events.length; i2++) {
        const stackResult = yield this._emitEventStack(events[i2], currentStackResult, metas);
        if (stackResult !== void 0) {
          currentStackResult = stackResult;
        }
      }
      resolve2(currentStackResult);
    }));
  }
  on(events, callback, settings) {
    const set2 = deepMerge$1({
      filter: void 0,
      processor: void 0,
      id: void 0
    }, settings);
    if (typeof events === "string")
      events = events.split(",").map((s2) => s2.trim());
    events.forEach((name2) => {
      const splitedName = name2.split(":");
      let callNumber = -1;
      if (splitedName.length === 2) {
        name2 = splitedName[0];
        callNumber = parseInt(splitedName[1]);
      }
      this._registerCallbackInEventStack(name2, callback, {
        callNumber,
        filter: set2.filter,
        processor: set2.processor,
        id: set2.id
      });
    });
    return this;
  }
  off(event, callback) {
    if (!callback) {
      if (this._eventsStacks[event]) {
        delete this._eventsStacks[event];
      } else if (this._onStackById[event]) {
        this._onStackById[event].forEach((onStackByIdObj) => {
          this.off(onStackByIdObj.event, onStackByIdObj.callback);
        });
        delete this._onStackById[event];
      }
      return this;
    }
    const eventStackObj = this._eventsStacks[event];
    if (!eventStackObj)
      return this;
    eventStackObj.callStack = eventStackObj.callStack.filter((item) => {
      if (item.callback === callback)
        return false;
      return true;
    });
    this._eventsStacks[event] = eventStackObj;
    return this;
  }
  destroy() {
    this._eventsStacks = {};
  }
}
SEventEmitter.usableAsMixin = true;
function plainObject(object) {
  if (!object)
    return false;
  if (typeof object !== "object")
    return false;
  if (object.constructor && object.constructor.name !== "Object")
    return false;
  if (Object.prototype.toString.call(object) !== "[object Object]")
    return false;
  if (object !== Object(object))
    return false;
  return true;
}
function unique(array) {
  const a2 = array.concat();
  for (let i2 = 0; i2 < a2.length; ++i2) {
    for (let j2 = i2 + 1; j2 < a2.length; ++j2) {
      if (a2[i2] === a2[j2])
        a2.splice(j2--, 1);
    }
  }
  return a2;
}
function deepMerge(...args) {
  const settings = {
    array: false,
    object: true
  };
  function merge2(firstObj, secondObj) {
    const newObj = {};
    if (!firstObj && secondObj)
      return secondObj;
    if (!secondObj && firstObj)
      return firstObj;
    if (!firstObj && !secondObj)
      return {};
    copyTo(firstObj).override(newObj);
    for (const key of Object.keys(secondObj)) {
      if (settings.array === true && Array.isArray(firstObj[key]) && Array.isArray(secondObj[key])) {
        const newArray = unique([...firstObj[key], ...secondObj[key]]);
        newObj[key] = newArray;
        continue;
      } else if (settings.object === true && plainObject(firstObj[key]) && plainObject(secondObj[key])) {
        newObj[key] = merge2(firstObj[key], secondObj[key]);
        continue;
      }
      copyTo(secondObj).pick(key).toCover(newObj);
    }
    return newObj;
  }
  const potentialSettingsObj = args[args.length - 1] || {};
  if (potentialSettingsObj.array && typeof potentialSettingsObj.array === "boolean" || potentialSettingsObj.object && typeof potentialSettingsObj.object === "boolean") {
    if (potentialSettingsObj.array !== void 0)
      settings.array = potentialSettingsObj.array;
    if (potentialSettingsObj.object !== void 0)
      settings.object = potentialSettingsObj.object;
    args.pop();
  }
  let currentObj = {};
  for (let i2 = 0; i2 < args.length; i2++) {
    const toMergeObj = args[i2] || {};
    currentObj = merge2(currentObj, toMergeObj);
  }
  return currentObj;
}
function wait(timeout) {
  return new Promise((resolve2) => {
    setTimeout(() => {
      resolve2();
    }, timeout);
  });
}
const fn$1 = function treatAsValue(promise, settings = {}) {
  settings = Object.assign({during: -1}, settings);
  let during = settings.during || -1;
  try {
    const proxy = Proxy.revocable(promise, {
      get(target, prop, receiver) {
        if (prop === "then") {
          return target;
        }
        if (during > 0)
          during--;
        else if (during === 0) {
          proxy.revoke();
        }
        return Reflect.get(...arguments);
      }
    });
    proxy.proxy.restorePromiseBehavior = () => {
      proxy.revoke();
      return promise;
    };
    return proxy.proxy;
  } catch (e2) {
    return promise;
  }
};
var __awaiter$2 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve2) {
      resolve2(value);
    });
  }
  return new (P || (P = Promise))(function(resolve2, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e2) {
        reject(e2);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e2) {
        reject(e2);
      }
    }
    function step(result) {
      result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
class SPromise extends SClass.extends(Promise) {
  constructor(executorFnOrSettings = {}, settings) {
    let executorFn, resolvers = {};
    super(deepMerge({
      promise: {
        treatCancelAs: "resolve",
        destroyTimeout: 1,
        preventRejectOnThrow: true,
        emitErrorEventOnThrow: true,
        proxies: {
          resolve: [],
          reject: []
        }
      }
    }, typeof executorFnOrSettings === "object" ? executorFnOrSettings : {}, settings !== null && settings !== void 0 ? settings : {}), (resolve2, reject) => {
      resolvers.resolve = resolve2;
      new Promise((rejectPromiseResolve, rejectPromiseReject) => {
        resolvers.reject = (...args) => {
          rejectPromiseReject(...args);
          if (this.promiseSettings.preventRejectOnThrow) {
            resolve2(...args);
          } else {
            reject(...args);
          }
        };
      }).catch((e2) => {
        this.emit("catch", e2);
      });
    });
    this._promiseState = "pending";
    this._eventEmitter = new SEventEmitter(deepMerge({
      metas: this.metas,
      eventEmitter: {}
    }, this._settings));
    this.expose(this._eventEmitter, {
      as: "eventEmitter",
      props: ["on", "off", "emit", "pipe", "pipeFrom", "pipeTo"]
    });
    this._resolvers = resolvers;
    if (this._settings.promise.destroyTimeout !== -1) {
      this.on("finally", (v2, m2) => {
        setTimeout(() => {
          this.destroy();
        }, this._settings.promise.destroyTimeout);
      });
    }
    executorFn = typeof executorFnOrSettings === "function" ? executorFnOrSettings : null;
    if (executorFn) {
      const api = {};
      getMethods(this).forEach((func) => {
        if (func.slice(0, 1) === "_")
          return;
        api[func] = this[func].bind(this);
      });
      (() => __awaiter$2(this, void 0, void 0, function* () {
        yield wait(0);
        try {
          yield executorFn(api);
        } catch (e2) {
          if (this.promiseSettings.emitErrorEventOnThrow) {
            this.emit("error", e2);
          }
          this.reject(e2);
        }
      }))();
    }
  }
  static treatAsValue(promise, settings = {}) {
    return fn$1(promise, settings);
  }
  get promiseSettings() {
    return this._settings.promise;
  }
  static get [Symbol.species]() {
    return Promise;
  }
  get [Symbol.toStringTag]() {
    return "SPromise";
  }
  get promiseState() {
    return this._promiseState;
  }
  treatAsValue(settings = {}) {
    return fn$1(this, settings);
  }
  registerProxy(point, proxy) {
    const ar = point.split(",").map((l2) => l2.trim());
    ar.forEach((a2) => {
      this._settings.promise.proxies[a2].push(proxy);
    });
  }
  is(status) {
    const statusArray = status.split(",").map((l2) => l2.trim());
    if (statusArray.indexOf(this._promiseState) !== -1)
      return true;
    return false;
  }
  isPending() {
    return this._promiseState === "pending";
  }
  isResolved() {
    return this._promiseState === "resolved";
  }
  isRejected() {
    return this._promiseState === "rejected";
  }
  isCanceled() {
    return this._promiseState === "canceled";
  }
  isDestroyed() {
    return this._promiseState === "destroyed";
  }
  resolve(arg, stacksOrder = "resolve,finally") {
    return this._resolve(arg, stacksOrder);
  }
  _resolve(arg, stacksOrder = "resolve,finally") {
    return __awaiter$2(this, void 0, void 0, function* () {
      if (this._promiseState === "destroyed")
        return;
      this._promiseState = "resolved";
      let stacksResult = yield this.eventEmitter._emitEvents(stacksOrder, arg);
      for (const proxyFn of this._settings.promise.proxies.resolve || []) {
        stacksResult = yield proxyFn(stacksResult);
      }
      this._resolvers.resolve(stacksResult);
      return stacksResult;
    });
  }
  reject(arg, stacksOrder = `catch,reject,finally`) {
    return this._reject(arg, stacksOrder);
  }
  _reject(arg, stacksOrder = `catch,reject,finally`) {
    return __awaiter$2(this, void 0, void 0, function* () {
      if (this._promiseState === "destroyed")
        return;
      this._promiseState = "rejected";
      let stacksResult = yield this.eventEmitter._emitEvents(stacksOrder, arg);
      for (const proxyFn of this._settings.promise.proxies.reject || []) {
        stacksResult = yield proxyFn(stacksResult);
      }
      this._resolvers.reject(stacksResult);
      return stacksResult;
    });
  }
  cancel(arg, stacksOrder = "cancel,finally") {
    return this._cancel(arg, stacksOrder);
  }
  _cancel(arg, stacksOrder = "cancel,finally") {
    if (this._promiseState === "destroyed")
      return;
    return new Promise((resolve2, reject) => __awaiter$2(this, void 0, void 0, function* () {
      this._promiseState = "canceled";
      const stacksResult = yield this.eventEmitter._emitEvents(stacksOrder, arg);
      if (this._settings.promise.treatCancelAs === "reject") {
        this._resolvers.reject(stacksResult);
      } else {
        this._resolvers.resolve(stacksResult);
      }
      resolve2(stacksResult);
    }));
  }
  catch(...args) {
    super.catch(...args);
    return this.on("catch", ...args);
  }
  finally(...args) {
    return this.on("finally", ...args);
  }
  destroy() {
    this._eventEmitter.destroy();
    this._promiseState = "destroyed";
  }
}
const n$3 = {css: null, exports: {onBeforeMount() {
  this.component = new SComponentUtils(this.root, {});
}, setInnerHTML() {
  this.root.innerHTML = this.component.decodeHtml(this.props.html);
}, onMounted() {
  this.setInnerHTML();
}, onUpdated() {
  this.setInnerHTML();
}}, template: null, name: "s-raw-html"};
register("s-raw-html", n$3), mount("s-raw-html"), n$3.mount = () => {
  mount("s-raw-html");
}, window.env || (window.env = {SUGAR: {}}), window.env.SUGAR = JSON.parse('{"ENVIRONMENT":"development"}');
var react = {exports: {}};
var react_development = {};
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
  if (val === null || val === void 0) {
    throw new TypeError("Object.assign cannot be called with null or undefined");
  }
  return Object(val);
}
function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    }
    var test1 = new String("abc");
    test1[5] = "de";
    if (Object.getOwnPropertyNames(test1)[0] === "5") {
      return false;
    }
    var test2 = {};
    for (var i2 = 0; i2 < 10; i2++) {
      test2["_" + String.fromCharCode(i2)] = i2;
    }
    var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
      return test2[n2];
    });
    if (order2.join("") !== "0123456789") {
      return false;
    }
    var test3 = {};
    "abcdefghijklmnopqrst".split("").forEach(function(letter) {
      test3[letter] = letter;
    });
    if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
      return false;
    }
    return true;
  } catch (err) {
    return false;
  }
}
var objectAssign = shouldUseNative() ? Object.assign : function(target, source3) {
  var from;
  var to = toObject(target);
  var symbols;
  for (var s2 = 1; s2 < arguments.length; s2++) {
    from = Object(arguments[s2]);
    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }
    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);
      for (var i2 = 0; i2 < symbols.length; i2++) {
        if (propIsEnumerable.call(from, symbols[i2])) {
          to[symbols[i2]] = from[symbols[i2]];
        }
      }
    }
  }
  return to;
};
/** @license React v17.0.2
* react.development.js
*
* Copyright (c) Facebook, Inc. and its affiliates.
*
* This source code is licensed under the MIT license found in the
* LICENSE file in the root directory of this source tree.
*/
(function(exports) {
  {
    (function() {
      var _assign = objectAssign;
      var ReactVersion = "17.0.2";
      var REACT_ELEMENT_TYPE = 60103;
      var REACT_PORTAL_TYPE = 60106;
      exports.Fragment = 60107;
      exports.StrictMode = 60108;
      exports.Profiler = 60114;
      var REACT_PROVIDER_TYPE = 60109;
      var REACT_CONTEXT_TYPE = 60110;
      var REACT_FORWARD_REF_TYPE = 60112;
      exports.Suspense = 60113;
      var REACT_SUSPENSE_LIST_TYPE = 60120;
      var REACT_MEMO_TYPE = 60115;
      var REACT_LAZY_TYPE = 60116;
      var REACT_BLOCK_TYPE = 60121;
      var REACT_SERVER_BLOCK_TYPE = 60122;
      var REACT_FUNDAMENTAL_TYPE = 60117;
      var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
      var REACT_LEGACY_HIDDEN_TYPE = 60131;
      if (typeof Symbol === "function" && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor("react.element");
        REACT_PORTAL_TYPE = symbolFor("react.portal");
        exports.Fragment = symbolFor("react.fragment");
        exports.StrictMode = symbolFor("react.strict_mode");
        exports.Profiler = symbolFor("react.profiler");
        REACT_PROVIDER_TYPE = symbolFor("react.provider");
        REACT_CONTEXT_TYPE = symbolFor("react.context");
        REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
        exports.Suspense = symbolFor("react.suspense");
        REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
        REACT_MEMO_TYPE = symbolFor("react.memo");
        REACT_LAZY_TYPE = symbolFor("react.lazy");
        REACT_BLOCK_TYPE = symbolFor("react.block");
        REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
        REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
        symbolFor("react.scope");
        symbolFor("react.opaque.id");
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
        symbolFor("react.offscreen");
        REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
      }
      var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var ReactCurrentDispatcher = {
        current: null
      };
      var ReactCurrentBatchConfig = {
        transition: 0
      };
      var ReactCurrentOwner = {
        current: null
      };
      var ReactDebugCurrentFrame = {};
      var currentExtraStackFrame = null;
      function setExtraStackFrame(stack) {
        {
          currentExtraStackFrame = stack;
        }
      }
      {
        ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
          {
            currentExtraStackFrame = stack;
          }
        };
        ReactDebugCurrentFrame.getCurrentStack = null;
        ReactDebugCurrentFrame.getStackAddendum = function() {
          var stack = "";
          if (currentExtraStackFrame) {
            stack += currentExtraStackFrame;
          }
          var impl = ReactDebugCurrentFrame.getCurrentStack;
          if (impl) {
            stack += impl() || "";
          }
          return stack;
        };
      }
      var IsSomeRendererActing = {
        current: false
      };
      var ReactSharedInternals = {
        ReactCurrentDispatcher,
        ReactCurrentBatchConfig,
        ReactCurrentOwner,
        IsSomeRendererActing,
        assign: _assign
      };
      {
        ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
      }
      function warn2(format) {
        {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          printWarning("warn", format, args);
        }
      }
      function error2(format) {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          printWarning("error", format, args);
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return "" + item;
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var didWarnStateUpdateForUnmountedComponent = {};
      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor;
          var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
          var warningKey = componentName + "." + callerName;
          if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
            return;
          }
          error2("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
          didWarnStateUpdateForUnmountedComponent[warningKey] = true;
        }
      }
      var ReactNoopUpdateQueue = {
        isMounted: function(publicInstance) {
          return false;
        },
        enqueueForceUpdate: function(publicInstance, callback, callerName) {
          warnNoop(publicInstance, "forceUpdate");
        },
        enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
          warnNoop(publicInstance, "replaceState");
        },
        enqueueSetState: function(publicInstance, partialState, callback, callerName) {
          warnNoop(publicInstance, "setState");
        }
      };
      var emptyObject = {};
      {
        Object.freeze(emptyObject);
      }
      function Component2(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      Component2.prototype.isReactComponent = {};
      Component2.prototype.setState = function(partialState, callback) {
        if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
          {
            throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
          }
        }
        this.updater.enqueueSetState(this, partialState, callback, "setState");
      };
      Component2.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
      };
      {
        var deprecatedAPIs = {
          isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
          replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
        };
        var defineDeprecationWarning = function(methodName, info) {
          Object.defineProperty(Component2.prototype, methodName, {
            get: function() {
              warn2("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
              return void 0;
            }
          });
        };
        for (var fnName in deprecatedAPIs) {
          if (deprecatedAPIs.hasOwnProperty(fnName)) {
            defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
          }
        }
      }
      function ComponentDummy() {
      }
      ComponentDummy.prototype = Component2.prototype;
      function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
      pureComponentPrototype.constructor = PureComponent;
      _assign(pureComponentPrototype, Component2.prototype);
      pureComponentPrototype.isPureReactComponent = true;
      function createRef() {
        var refObject = {
          current: null
        };
        {
          Object.seal(refObject);
        }
        return refObject;
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || "";
        return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentName(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error2("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case exports.Fragment:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case exports.Profiler:
            return "Profiler";
          case exports.StrictMode:
            return "StrictMode";
          case exports.Suspense:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
              return getComponentName(type._render);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentName(init(payload));
              } catch (x2) {
                return null;
              }
            }
          }
        }
        return null;
      }
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
      {
        didWarnAboutStringRefs = {};
      }
      function hasValidRef(config) {
        {
          if (hasOwnProperty2.call(config, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.ref !== void 0;
      }
      function hasValidKey(config) {
        {
          if (hasOwnProperty2.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.key !== void 0;
      }
      function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
          {
            if (!specialPropKeyWarningShown) {
              specialPropKeyWarningShown = true;
              error2("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, "key", {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }
      function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
          {
            if (!specialPropRefWarningShown) {
              specialPropRefWarningShown = true;
              error2("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, "ref", {
          get: warnAboutAccessingRef,
          configurable: true
        });
      }
      function warnIfStringRefCannotBeAutoConverted(config) {
        {
          if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
            var componentName = getComponentName(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
              error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
              didWarnAboutStringRefs[componentName] = true;
            }
          }
        }
      }
      var ReactElement = function(type, key, ref, self2, source3, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, "_self", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self2
          });
          Object.defineProperty(element, "_source", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source3
          });
          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      };
      function createElement(type, config, children) {
        var propName;
        var props = {};
        var key = null;
        var ref = null;
        var self2 = null;
        var source3 = null;
        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            {
              warnIfStringRefCannotBeAutoConverted(config);
            }
          }
          if (hasValidKey(config)) {
            key = "" + config.key;
          }
          self2 = config.__self === void 0 ? null : config.__self;
          source3 = config.__source === void 0 ? null : config.__source;
          for (propName in config) {
            if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);
          for (var i2 = 0; i2 < childrenLength; i2++) {
            childArray[i2] = arguments[i2 + 2];
          }
          {
            if (Object.freeze) {
              Object.freeze(childArray);
            }
          }
          props.children = childArray;
        }
        if (type && type.defaultProps) {
          var defaultProps = type.defaultProps;
          for (propName in defaultProps) {
            if (props[propName] === void 0) {
              props[propName] = defaultProps[propName];
            }
          }
        }
        {
          if (key || ref) {
            var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
            if (key) {
              defineKeyPropWarningGetter(props, displayName);
            }
            if (ref) {
              defineRefPropWarningGetter(props, displayName);
            }
          }
        }
        return ReactElement(type, key, ref, self2, source3, ReactCurrentOwner.current, props);
      }
      function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
      }
      function cloneElement(element, config, children) {
        if (!!(element === null || element === void 0)) {
          {
            throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
          }
        }
        var propName;
        var props = _assign({}, element.props);
        var key = element.key;
        var ref = element.ref;
        var self2 = element._self;
        var source3 = element._source;
        var owner = element._owner;
        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            owner = ReactCurrentOwner.current;
          }
          if (hasValidKey(config)) {
            key = "" + config.key;
          }
          var defaultProps;
          if (element.type && element.type.defaultProps) {
            defaultProps = element.type.defaultProps;
          }
          for (propName in config) {
            if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              if (config[propName] === void 0 && defaultProps !== void 0) {
                props[propName] = defaultProps[propName];
              } else {
                props[propName] = config[propName];
              }
            }
          }
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);
          for (var i2 = 0; i2 < childrenLength; i2++) {
            childArray[i2] = arguments[i2 + 2];
          }
          props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self2, source3, owner, props);
      }
      function isValidElement(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      var SEPARATOR = ".";
      var SUBSEPARATOR = ":";
      function escape2(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
          "=": "=0",
          ":": "=2"
        };
        var escapedString = key.replace(escapeRegex, function(match2) {
          return escaperLookup[match2];
        });
        return "$" + escapedString;
      }
      var didWarnAboutMaps = false;
      var userProvidedKeyEscapeRegex = /\/+/g;
      function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, "$&/");
      }
      function getElementKey(element, index) {
        if (typeof element === "object" && element !== null && element.key != null) {
          return escape2("" + element.key);
        }
        return index.toString(36);
      }
      function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if (type === "undefined" || type === "boolean") {
          children = null;
        }
        var invokeCallback = false;
        if (children === null) {
          invokeCallback = true;
        } else {
          switch (type) {
            case "string":
            case "number":
              invokeCallback = true;
              break;
            case "object":
              switch (children.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  invokeCallback = true;
              }
          }
        }
        if (invokeCallback) {
          var _child = children;
          var mappedChild = callback(_child);
          var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
          if (Array.isArray(mappedChild)) {
            var escapedChildKey = "";
            if (childKey != null) {
              escapedChildKey = escapeUserProvidedKey(childKey) + "/";
            }
            mapIntoArray(mappedChild, array, escapedChildKey, "", function(c2) {
              return c2;
            });
          } else if (mappedChild != null) {
            if (isValidElement(mappedChild)) {
              mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
            }
            array.push(mappedChild);
          }
          return 1;
        }
        var child;
        var nextName;
        var subtreeCount = 0;
        var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (Array.isArray(children)) {
          for (var i2 = 0; i2 < children.length; i2++) {
            child = children[i2];
            nextName = nextNamePrefix + getElementKey(child, i2);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
          }
        } else {
          var iteratorFn = getIteratorFn(children);
          if (typeof iteratorFn === "function") {
            var iterableChildren = children;
            {
              if (iteratorFn === iterableChildren.entries) {
                if (!didWarnAboutMaps) {
                  warn2("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
            }
            var iterator = iteratorFn.call(iterableChildren);
            var step;
            var ii = 0;
            while (!(step = iterator.next()).done) {
              child = step.value;
              nextName = nextNamePrefix + getElementKey(child, ii++);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else if (type === "object") {
            var childrenString = "" + children;
            {
              {
                throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
          }
        }
        return subtreeCount;
      }
      function mapChildren(children, func, context) {
        if (children == null) {
          return children;
        }
        var result = [];
        var count = 0;
        mapIntoArray(children, result, "", "", function(child) {
          return func.call(context, child, count++);
        });
        return result;
      }
      function countChildren(children) {
        var n2 = 0;
        mapChildren(children, function() {
          n2++;
        });
        return n2;
      }
      function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
          forEachFunc.apply(this, arguments);
        }, forEachContext);
      }
      function toArray(children) {
        return mapChildren(children, function(child) {
          return child;
        }) || [];
      }
      function onlyChild(children) {
        if (!isValidElement(children)) {
          {
            throw Error("React.Children.only expected to receive a single React element child.");
          }
        }
        return children;
      }
      function createContext(defaultValue, calculateChangedBits) {
        if (calculateChangedBits === void 0) {
          calculateChangedBits = null;
        } else {
          {
            if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
              error2("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
            }
          }
        }
        var context = {
          $$typeof: REACT_CONTEXT_TYPE,
          _calculateChangedBits: calculateChangedBits,
          _currentValue: defaultValue,
          _currentValue2: defaultValue,
          _threadCount: 0,
          Provider: null,
          Consumer: null
        };
        context.Provider = {
          $$typeof: REACT_PROVIDER_TYPE,
          _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        var hasWarnedAboutDisplayNameOnConsumer = false;
        {
          var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context,
            _calculateChangedBits: context._calculateChangedBits
          };
          Object.defineProperties(Consumer, {
            Provider: {
              get: function() {
                if (!hasWarnedAboutUsingConsumerProvider) {
                  hasWarnedAboutUsingConsumerProvider = true;
                  error2("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                }
                return context.Provider;
              },
              set: function(_Provider) {
                context.Provider = _Provider;
              }
            },
            _currentValue: {
              get: function() {
                return context._currentValue;
              },
              set: function(_currentValue) {
                context._currentValue = _currentValue;
              }
            },
            _currentValue2: {
              get: function() {
                return context._currentValue2;
              },
              set: function(_currentValue2) {
                context._currentValue2 = _currentValue2;
              }
            },
            _threadCount: {
              get: function() {
                return context._threadCount;
              },
              set: function(_threadCount) {
                context._threadCount = _threadCount;
              }
            },
            Consumer: {
              get: function() {
                if (!hasWarnedAboutUsingNestedContextConsumers) {
                  hasWarnedAboutUsingNestedContextConsumers = true;
                  error2("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
                return context.Consumer;
              }
            },
            displayName: {
              get: function() {
                return context.displayName;
              },
              set: function(displayName) {
                if (!hasWarnedAboutDisplayNameOnConsumer) {
                  warn2("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                  hasWarnedAboutDisplayNameOnConsumer = true;
                }
              }
            }
          });
          context.Consumer = Consumer;
        }
        {
          context._currentRenderer = null;
          context._currentRenderer2 = null;
        }
        return context;
      }
      var Uninitialized = -1;
      var Pending = 0;
      var Resolved = 1;
      var Rejected = 2;
      function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
          var ctor = payload._result;
          var thenable = ctor();
          var pending = payload;
          pending._status = Pending;
          pending._result = thenable;
          thenable.then(function(moduleObject) {
            if (payload._status === Pending) {
              var defaultExport = moduleObject.default;
              {
                if (defaultExport === void 0) {
                  error2("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              var resolved = payload;
              resolved._status = Resolved;
              resolved._result = defaultExport;
            }
          }, function(error3) {
            if (payload._status === Pending) {
              var rejected = payload;
              rejected._status = Rejected;
              rejected._result = error3;
            }
          });
        }
        if (payload._status === Resolved) {
          return payload._result;
        } else {
          throw payload._result;
        }
      }
      function lazy(ctor) {
        var payload = {
          _status: -1,
          _result: ctor
        };
        var lazyType = {
          $$typeof: REACT_LAZY_TYPE,
          _payload: payload,
          _init: lazyInitializer
        };
        {
          var defaultProps;
          var propTypes;
          Object.defineProperties(lazyType, {
            defaultProps: {
              configurable: true,
              get: function() {
                return defaultProps;
              },
              set: function(newDefaultProps) {
                error2("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                defaultProps = newDefaultProps;
                Object.defineProperty(lazyType, "defaultProps", {
                  enumerable: true
                });
              }
            },
            propTypes: {
              configurable: true,
              get: function() {
                return propTypes;
              },
              set: function(newPropTypes) {
                error2("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                propTypes = newPropTypes;
                Object.defineProperty(lazyType, "propTypes", {
                  enumerable: true
                });
              }
            }
          });
        }
        return lazyType;
      }
      function forwardRef(render3) {
        {
          if (render3 != null && render3.$$typeof === REACT_MEMO_TYPE) {
            error2("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
          } else if (typeof render3 !== "function") {
            error2("forwardRef requires a render function but was given %s.", render3 === null ? "null" : typeof render3);
          } else {
            if (render3.length !== 0 && render3.length !== 2) {
              error2("forwardRef render functions accept exactly two parameters: props and ref. %s", render3.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
            }
          }
          if (render3 != null) {
            if (render3.defaultProps != null || render3.propTypes != null) {
              error2("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
            }
          }
        }
        var elementType = {
          $$typeof: REACT_FORWARD_REF_TYPE,
          render: render3
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name2) {
              ownName = name2;
              if (render3.displayName == null) {
                render3.displayName = name2;
              }
            }
          });
        }
        return elementType;
      }
      var enableScopeAPI = false;
      function isValidElementType(type) {
        if (typeof type === "string" || typeof type === "function") {
          return true;
        }
        if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
          return true;
        }
        if (typeof type === "object" && type !== null) {
          if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
            return true;
          }
        }
        return false;
      }
      function memo(type, compare) {
        {
          if (!isValidElementType(type)) {
            error2("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
          }
        }
        var elementType = {
          $$typeof: REACT_MEMO_TYPE,
          type,
          compare: compare === void 0 ? null : compare
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name2) {
              ownName = name2;
              if (type.displayName == null) {
                type.displayName = name2;
              }
            }
          });
        }
        return elementType;
      }
      function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        if (!(dispatcher !== null)) {
          {
            throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
        }
        return dispatcher;
      }
      function useContext(Context2, unstable_observedBits) {
        var dispatcher = resolveDispatcher();
        {
          if (unstable_observedBits !== void 0) {
            error2("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : "");
          }
          if (Context2._context !== void 0) {
            var realContext = Context2._context;
            if (realContext.Consumer === Context2) {
              error2("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
            } else if (realContext.Provider === Context2) {
              error2("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
            }
          }
        }
        return dispatcher.useContext(Context2, unstable_observedBits);
      }
      function useState(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
      }
      function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
      }
      function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
      }
      function useEffect(create3, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create3, deps);
      }
      function useLayoutEffect(create3, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create3, deps);
      }
      function useCallback(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
      }
      function useMemo(create3, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create3, deps);
      }
      function useImperativeHandle(ref, create3, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create3, deps);
      }
      function useDebugValue(value, formatterFn) {
        {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDebugValue(value, formatterFn);
        }
      }
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: _assign({}, props, {
                value: prevLog
              }),
              info: _assign({}, props, {
                value: prevInfo
              }),
              warn: _assign({}, props, {
                value: prevWarn
              }),
              error: _assign({}, props, {
                value: prevError
              }),
              group: _assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: _assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: _assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix;
      function describeBuiltInComponentFrame(name2, source3, ownerFn) {
        {
          if (prefix === void 0) {
            try {
              throw Error();
            } catch (x2) {
              var match2 = x2.stack.trim().match(/\n( *(at )?)/);
              prefix = match2 && match2[1] || "";
            }
          }
          return "\n" + prefix + name2;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap();
      }
      function describeNativeComponentFrame(fn2, construct) {
        if (!fn2 || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn2);
          if (frame !== void 0) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x2) {
                control = x2;
              }
              Reflect.construct(fn2, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x2) {
                control = x2;
              }
              fn2.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x2) {
              control = x2;
            }
            fn2();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split("\n");
            var controlLines = control.stack.split("\n");
            var s2 = sampleLines.length - 1;
            var c2 = controlLines.length - 1;
            while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
              c2--;
            }
            for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
              if (sampleLines[s2] !== controlLines[c2]) {
                if (s2 !== 1 || c2 !== 1) {
                  do {
                    s2--;
                    c2--;
                    if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                      var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                      {
                        if (typeof fn2 === "function") {
                          componentFrameCache.set(fn2, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s2 >= 1 && c2 >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher$1.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name2 = fn2 ? fn2.displayName || fn2.name : "";
        var syntheticFrame = name2 ? describeBuiltInComponentFrame(name2) : "";
        {
          if (typeof fn2 === "function") {
            componentFrameCache.set(fn2, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeFunctionComponentFrame(fn2, source3, ownerFn) {
        {
          return describeNativeComponentFrame(fn2, false);
        }
      }
      function shouldConstruct(Component3) {
        var prototype = Component3.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source3, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case exports.Suspense:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source3, ownerFn);
            case REACT_BLOCK_TYPE:
              return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source3, ownerFn);
              } catch (x2) {
              }
            }
          }
        }
        return "";
      }
      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has2 = Function.call.bind(Object.prototype.hasOwnProperty);
          for (var typeSpecName in typeSpecs) {
            if (has2(typeSpecs, typeSpecName)) {
              var error$1 = void 0;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error2("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      function setCurrentlyValidatingElement$1(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
          } else {
            setExtraStackFrame(null);
          }
        }
      }
      var propTypesMisspellWarningShown;
      {
        propTypesMisspellWarningShown = false;
      }
      function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
          var name2 = getComponentName(ReactCurrentOwner.current.type);
          if (name2) {
            return "\n\nCheck the render method of `" + name2 + "`.";
          }
        }
        return "";
      }
      function getSourceInfoErrorAddendum(source3) {
        if (source3 !== void 0) {
          var fileName = source3.fileName.replace(/^.*[\\\/]/, "");
          var lineNumber = source3.lineNumber;
          return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
        }
        return "";
      }
      function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== void 0) {
          return getSourceInfoErrorAddendum(elementProps.__source);
        }
        return "";
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
          var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
          if (parentName) {
            info = "\n\nCheck the top-level render call using <" + parentName + ">.";
          }
        }
        return info;
      }
      function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) {
          return;
        }
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        var childOwner = "";
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
          childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
        }
        {
          setCurrentlyValidatingElement$1(element);
          error2('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
          setCurrentlyValidatingElement$1(null);
        }
      }
      function validateChildKeys(node, parentType) {
        if (typeof node !== "object") {
          return;
        }
        if (Array.isArray(node)) {
          for (var i2 = 0; i2 < node.length; i2++) {
            var child = node[i2];
            if (isValidElement(child)) {
              validateExplicitKey(child, parentType);
            }
          }
        } else if (isValidElement(node)) {
          if (node._store) {
            node._store.validated = true;
          }
        } else if (node) {
          var iteratorFn = getIteratorFn(node);
          if (typeof iteratorFn === "function") {
            if (iteratorFn !== node.entries) {
              var iterator = iteratorFn.call(node);
              var step;
              while (!(step = iterator.next()).done) {
                if (isValidElement(step.value)) {
                  validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type === null || type === void 0 || typeof type === "string") {
            return;
          }
          var propTypes;
          if (typeof type === "function") {
            propTypes = type.propTypes;
          } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
            propTypes = type.propTypes;
          } else {
            return;
          }
          if (propTypes) {
            var name2 = getComponentName(type);
            checkPropTypes(propTypes, element.props, "prop", name2, element);
          } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;
            var _name = getComponentName(type);
            error2("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
            error2("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
          }
        }
      }
      function validateFragmentProps(fragment) {
        {
          var keys = Object.keys(fragment.props);
          for (var i2 = 0; i2 < keys.length; i2++) {
            var key = keys[i2];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment);
              error2("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
              setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error2("Invalid attribute `ref` supplied to `React.Fragment`.");
            setCurrentlyValidatingElement$1(null);
          }
        }
      }
      function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type);
        if (!validType) {
          var info = "";
          if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
            info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
          }
          var sourceInfo = getSourceInfoErrorAddendumForProps(props);
          if (sourceInfo) {
            info += sourceInfo;
          } else {
            info += getDeclarationErrorAddendum();
          }
          var typeString;
          if (type === null) {
            typeString = "null";
          } else if (Array.isArray(type)) {
            typeString = "array";
          } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
            typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
            info = " Did you accidentally export a JSX literal instead of a component?";
          } else {
            typeString = typeof type;
          }
          {
            error2("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
          }
        }
        var element = createElement.apply(this, arguments);
        if (element == null) {
          return element;
        }
        if (validType) {
          for (var i2 = 2; i2 < arguments.length; i2++) {
            validateChildKeys(arguments[i2], type);
          }
        }
        if (type === exports.Fragment) {
          validateFragmentProps(element);
        } else {
          validatePropTypes(element);
        }
        return element;
      }
      var didWarnAboutDeprecatedCreateFactory = false;
      function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        {
          if (!didWarnAboutDeprecatedCreateFactory) {
            didWarnAboutDeprecatedCreateFactory = true;
            warn2("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
          }
          Object.defineProperty(validatedFactory, "type", {
            enumerable: false,
            get: function() {
              warn2("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
              Object.defineProperty(this, "type", {
                value: type
              });
              return type;
            }
          });
        }
        return validatedFactory;
      }
      function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);
        for (var i2 = 2; i2 < arguments.length; i2++) {
          validateChildKeys(arguments[i2], newElement.type);
        }
        validatePropTypes(newElement);
        return newElement;
      }
      {
        try {
          var frozenObject = Object.freeze({});
          new Map([[frozenObject, null]]);
          new Set([frozenObject]);
        } catch (e2) {
        }
      }
      var createElement$1 = createElementWithValidation;
      var cloneElement$1 = cloneElementWithValidation;
      var createFactory = createFactoryWithValidation;
      var Children = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray,
        only: onlyChild
      };
      exports.Children = Children;
      exports.Component = Component2;
      exports.PureComponent = PureComponent;
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
      exports.cloneElement = cloneElement$1;
      exports.createContext = createContext;
      exports.createElement = createElement$1;
      exports.createFactory = createFactory;
      exports.createRef = createRef;
      exports.forwardRef = forwardRef;
      exports.isValidElement = isValidElement;
      exports.lazy = lazy;
      exports.memo = memo;
      exports.useCallback = useCallback;
      exports.useContext = useContext;
      exports.useDebugValue = useDebugValue;
      exports.useEffect = useEffect;
      exports.useImperativeHandle = useImperativeHandle;
      exports.useLayoutEffect = useLayoutEffect;
      exports.useMemo = useMemo;
      exports.useReducer = useReducer;
      exports.useRef = useRef;
      exports.useState = useState;
      exports.version = ReactVersion;
    })();
  }
})(react_development);
{
  react.exports = react_development;
}
var React = react.exports;
function uniqid() {
  return uuid_1.v4();
}
function matches$1(e2, t) {
  if (e2.nodeName == "#comment" || e2.nodeName == "#text")
    return false;
  const n2 = Element.prototype;
  return (n2.matches || n2.webkitMatchesSelector || n2.mozMatchesSelector || n2.msMatchesSelector || function(e3) {
    return [].indexOf.call(document.querySelectorAll(e3), this) !== -1;
  }).call(e2, t);
}
let _observer$1;
const _selectors$1 = {};
function querySelectorLive$1(e2, t = null, n2 = {}) {
  const o2 = `${e2} - ${uniqid()}`;
  return n2 = Object.assign({}, {rootNode: document, once: true}, n2), _selectors$1[e2] ? _selectors$1[e2].push({id: o2, selector: e2, cb: t, settings: n2}) : _selectors$1[e2] = [{id: o2, selector: e2, cb: t, settings: n2}], new SPromise(({resolve: t2, reject: o3, emit: s2}) => {
    function i2(e3, t3) {
      const n3 = _selectors$1[t3];
      n3 && n3.forEach((t4) => {
        if (t4.settings.once) {
          if (e3._querySelectorLive || (e3._querySelectorLive = {}), e3._querySelectorLive[t4.id])
            return;
          e3._querySelectorLive[t4.id] = true;
        }
        s2("node", e3), t4.cb && t4.cb(e3, () => {
          delete _selectors$1[t4.selector];
        });
      });
    }
    _observer$1 || (_observer$1 = new MutationObserver((e3) => {
      e3.forEach((e4) => {
        e4.addedNodes && [].forEach.call(e4.addedNodes, (e5) => {
          const t3 = Object.keys(_selectors$1);
          t3.forEach((t4) => {
            matches$1(e5, t4) && i2(e5, t4);
          }), e5.querySelectorAll && t3.forEach((t4) => {
            const n3 = e5.querySelectorAll(t4);
            [].forEach.call(n3, (e6) => {
              i2(e6, t4);
            });
          });
        });
      });
    }), _observer$1.observe(n2.rootNode, {childList: true, subtree: true})), [].forEach.call(n2.rootNode.querySelectorAll(e2), (t3) => {
      i2(t3, e2);
    });
  });
}
class SHighlightJsComponentInterface extends SInterface {
}
function clone(e2, t = {}) {
  return (t = Object.assign({deep: false}, t)).deep ? __deepClone(e2) : __clone(e2);
}
function scrollTop() {
  return window.pageYOffset || document.scrollTop || document.body.scrollTop;
}
function offset(e2) {
  const t = e2.getBoundingClientRect(), n2 = document.body, o2 = document.documentElement, s2 = window.pageYOffset || o2.scrollTop || n2.scrollTop, i2 = window.pageXOffset || o2.scrollLeft || n2.scrollLeft, r2 = o2.clientTop || n2.clientTop || 0, l2 = o2.clientLeft || n2.clientLeft || 0, a2 = t.top + s2 - r2, p2 = t.left + i2 - l2;
  return {top: Math.round(a2), left: Math.round(p2)};
}
function fromElementTopToViewportBottom(e2) {
  const t = offset(e2), n2 = scrollTop();
  return window.innerHeight - t.top + n2;
}
function camelize(e2) {
  let t = "";
  return t = e2.replace(/(?:^|[_-\s])(\w)/g, function(e3, t2) {
    return t2 ? t2.toUpperCase() : "";
  }), t = t.substr(0, 1).toLowerCase() + t.slice(1), t.trim();
}
function autoCast(string) {
  if (typeof string != "string")
    return string;
  if (string.substr(0, 1) === "'" && string.substr(-1) === "'")
    return string.substr(1, string.length - 2);
  const presumedNumber = parseFloat(string);
  if (!isNaN(presumedNumber) && presumedNumber.toString() === string)
    return presumedNumber;
  if (window[string])
    return string;
  try {
    const obj = eval(`(${string})`);
    return obj;
  } catch (e2) {
    return string;
  }
}
function getStyleProperty(e2, t) {
  setTimeout(() => {
    e2._sComputedStyle = null;
  });
  const n2 = e2._sComputedStyle || window.getComputedStyle(e2);
  e2._sComputedStyle = n2;
  const o2 = ["", "webkit-", "moz-", "ms-", "o-", "khtml-"];
  for (let s2 = 0; s2 < o2.length; s2++) {
    const e3 = n2[camelize(`${o2[s2]}${t}`)];
    if (e3 && e3.trim() !== "")
      return autoCast(e3);
  }
  return null;
}
function fromElementTopToViewportTop(e2) {
  const t = offset(e2), n2 = scrollTop();
  return t.top - n2;
}
/*!
 * hotkeys-js v3.8.5
 * A simple micro-library for defining and dispatching keyboard shortcuts. It has no dependencies.
 * 
 * Copyright (c) 2021 kenny wong <wowohoo@qq.com>
 * http://jaywcjlove.github.io/hotkeys
 * 
 * Licensed under the MIT license.
 */
SHighlightJsComponentInterface.definition = {value: {type: "String", default: ""}, noItemText: {type: "String", default: "No item to display"}, filtrable: {type: {type: "Array<String>", splitChars: [","]}, default: []}, closeTimeout: {type: "Number", default: 200}, interactive: {type: "Boolean", default: false}, notSelectable: {type: "Boolean", default: false}, maxItems: {type: "Number", default: 25}};
var isff$1 = typeof navigator != "undefined" && navigator.userAgent.toLowerCase().indexOf("firefox") > 0;
function addEvent$1(e2, t, n2) {
  e2.addEventListener ? e2.addEventListener(t, n2, false) : e2.attachEvent && e2.attachEvent("on".concat(t), function() {
    n2(window.event);
  });
}
function getMods$1(e2, t) {
  for (var n2 = t.slice(0, t.length - 1), o2 = 0; o2 < n2.length; o2++)
    n2[o2] = e2[n2[o2].toLowerCase()];
  return n2;
}
function getKeys$1(e2) {
  typeof e2 != "string" && (e2 = "");
  for (var t = (e2 = e2.replace(/\s/g, "")).split(","), n2 = t.lastIndexOf(""); n2 >= 0; )
    t[n2 - 1] += ",", t.splice(n2, 1), n2 = t.lastIndexOf("");
  return t;
}
function compareArray$1(e2, t) {
  for (var n2 = e2.length >= t.length ? e2 : t, o2 = e2.length >= t.length ? t : e2, s2 = true, i2 = 0; i2 < n2.length; i2++)
    o2.indexOf(n2[i2]) === -1 && (s2 = false);
  return s2;
}
for (var _keyMap$1 = {backspace: 8, tab: 9, clear: 12, enter: 13, return: 13, esc: 27, escape: 27, space: 32, left: 37, up: 38, right: 39, down: 40, del: 46, delete: 46, ins: 45, insert: 45, home: 36, end: 35, pageup: 33, pagedown: 34, capslock: 20, num_0: 96, num_1: 97, num_2: 98, num_3: 99, num_4: 100, num_5: 101, num_6: 102, num_7: 103, num_8: 104, num_9: 105, num_multiply: 106, num_add: 107, num_enter: 108, num_subtract: 109, num_decimal: 110, num_divide: 111, "\u21EA": 20, ",": 188, ".": 190, "/": 191, "`": 192, "-": isff$1 ? 173 : 189, "=": isff$1 ? 61 : 187, ";": isff$1 ? 59 : 186, "'": 222, "[": 219, "]": 221, "\\": 220}, _modifier$1 = {"\u21E7": 16, shift: 16, "\u2325": 18, alt: 18, option: 18, "\u2303": 17, ctrl: 17, control: 17, "\u2318": 91, cmd: 91, command: 91}, modifierMap$1 = {16: "shiftKey", 18: "altKey", 17: "ctrlKey", 91: "metaKey", shiftKey: 16, ctrlKey: 17, altKey: 18, metaKey: 91}, _mods$1 = {16: false, 18: false, 17: false, 91: false}, _handlers$1 = {}, k$2 = 1; k$2 < 20; k$2++)
  _keyMap$1["f".concat(k$2)] = 111 + k$2;
var _downKeys$1 = [], _scope$1 = "all", elementHasBindEvent$1 = [], code$1 = function(e2) {
  return _keyMap$1[e2.toLowerCase()] || _modifier$1[e2.toLowerCase()] || e2.toUpperCase().charCodeAt(0);
};
function setScope$1(e2) {
  _scope$1 = e2 || "all";
}
function getScope$1() {
  return _scope$1 || "all";
}
function getPressedKeyCodes$1() {
  return _downKeys$1.slice(0);
}
function filter$1(e2) {
  var t = e2.target || e2.srcElement, n2 = t.tagName, o2 = true;
  return !t.isContentEditable && (n2 !== "INPUT" && n2 !== "TEXTAREA" && n2 !== "SELECT" || t.readOnly) || (o2 = false), o2;
}
function isPressed$1(e2) {
  return typeof e2 == "string" && (e2 = code$1(e2)), _downKeys$1.indexOf(e2) !== -1;
}
function deleteScope$1(e2, t) {
  var n2, o2;
  for (var s2 in e2 || (e2 = getScope$1()), _handlers$1)
    if (Object.prototype.hasOwnProperty.call(_handlers$1, s2))
      for (n2 = _handlers$1[s2], o2 = 0; o2 < n2.length; )
        n2[o2].scope === e2 ? n2.splice(o2, 1) : o2++;
  getScope$1() === e2 && setScope$1(t || "all");
}
function clearModifier$1(e2) {
  var t = e2.keyCode || e2.which || e2.charCode, n2 = _downKeys$1.indexOf(t);
  if (n2 >= 0 && _downKeys$1.splice(n2, 1), e2.key && e2.key.toLowerCase() === "meta" && _downKeys$1.splice(0, _downKeys$1.length), t !== 93 && t !== 224 || (t = 91), t in _mods$1)
    for (var o2 in _mods$1[t] = false, _modifier$1)
      _modifier$1[o2] === t && (hotkeys$1[o2] = false);
}
function unbind$1(e2) {
  if (e2) {
    if (Array.isArray(e2))
      e2.forEach(function(e3) {
        e3.key && eachUnbind$1(e3);
      });
    else if (typeof e2 == "object")
      e2.key && eachUnbind$1(e2);
    else if (typeof e2 == "string") {
      for (var t = arguments.length, n2 = new Array(t > 1 ? t - 1 : 0), o2 = 1; o2 < t; o2++)
        n2[o2 - 1] = arguments[o2];
      var s2 = n2[0], i2 = n2[1];
      typeof s2 == "function" && (i2 = s2, s2 = ""), eachUnbind$1({key: e2, scope: s2, method: i2, splitKey: "+"});
    }
  } else
    Object.keys(_handlers$1).forEach(function(e3) {
      return delete _handlers$1[e3];
    });
}
var eachUnbind$1 = function(e2) {
  var t = e2.key, n2 = e2.scope, o2 = e2.method, s2 = e2.splitKey, i2 = s2 === void 0 ? "+" : s2;
  getKeys$1(t).forEach(function(e3) {
    var t2 = e3.split(i2), s3 = t2.length, r2 = t2[s3 - 1], l2 = r2 === "*" ? "*" : code$1(r2);
    if (_handlers$1[l2]) {
      n2 || (n2 = getScope$1());
      var a2 = s3 > 1 ? getMods$1(_modifier$1, t2) : [];
      _handlers$1[l2] = _handlers$1[l2].map(function(e4) {
        return (!o2 || e4.method === o2) && e4.scope === n2 && compareArray$1(e4.mods, a2) ? {} : e4;
      });
    }
  });
};
function eventHandler$1(e2, t, n2) {
  var o2;
  if (t.scope === n2 || t.scope === "all") {
    for (var s2 in o2 = t.mods.length > 0, _mods$1)
      Object.prototype.hasOwnProperty.call(_mods$1, s2) && (!_mods$1[s2] && t.mods.indexOf(+s2) > -1 || _mods$1[s2] && t.mods.indexOf(+s2) === -1) && (o2 = false);
    (t.mods.length !== 0 || _mods$1[16] || _mods$1[18] || _mods$1[17] || _mods$1[91]) && !o2 && t.shortcut !== "*" || t.method(e2, t) === false && (e2.preventDefault ? e2.preventDefault() : e2.returnValue = false, e2.stopPropagation && e2.stopPropagation(), e2.cancelBubble && (e2.cancelBubble = true));
  }
}
function dispatch$1(e2) {
  var t = _handlers$1["*"], n2 = e2.keyCode || e2.which || e2.charCode;
  if (hotkeys$1.filter.call(this, e2)) {
    if (n2 !== 93 && n2 !== 224 || (n2 = 91), _downKeys$1.indexOf(n2) === -1 && n2 !== 229 && _downKeys$1.push(n2), ["ctrlKey", "altKey", "shiftKey", "metaKey"].forEach(function(t2) {
      var n3 = modifierMap$1[t2];
      e2[t2] && _downKeys$1.indexOf(n3) === -1 ? _downKeys$1.push(n3) : !e2[t2] && _downKeys$1.indexOf(n3) > -1 ? _downKeys$1.splice(_downKeys$1.indexOf(n3), 1) : t2 === "metaKey" && e2[t2] && _downKeys$1.length === 3 && (e2.ctrlKey || e2.shiftKey || e2.altKey || (_downKeys$1 = _downKeys$1.slice(_downKeys$1.indexOf(n3))));
    }), n2 in _mods$1) {
      for (var o2 in _mods$1[n2] = true, _modifier$1)
        _modifier$1[o2] === n2 && (hotkeys$1[o2] = true);
      if (!t)
        return;
    }
    for (var s2 in _mods$1)
      Object.prototype.hasOwnProperty.call(_mods$1, s2) && (_mods$1[s2] = e2[modifierMap$1[s2]]);
    e2.getModifierState && (!e2.altKey || e2.ctrlKey) && e2.getModifierState("AltGraph") && (_downKeys$1.indexOf(17) === -1 && _downKeys$1.push(17), _downKeys$1.indexOf(18) === -1 && _downKeys$1.push(18), _mods$1[17] = true, _mods$1[18] = true);
    var i2 = getScope$1();
    if (t)
      for (var r2 = 0; r2 < t.length; r2++)
        t[r2].scope === i2 && (e2.type === "keydown" && t[r2].keydown || e2.type === "keyup" && t[r2].keyup) && eventHandler$1(e2, t[r2], i2);
    if (n2 in _handlers$1) {
      for (var l2 = 0; l2 < _handlers$1[n2].length; l2++)
        if ((e2.type === "keydown" && _handlers$1[n2][l2].keydown || e2.type === "keyup" && _handlers$1[n2][l2].keyup) && _handlers$1[n2][l2].key) {
          for (var a2 = _handlers$1[n2][l2], p2 = a2.splitKey, c2 = a2.key.split(p2), d2 = [], u = 0; u < c2.length; u++)
            d2.push(code$1(c2[u]));
          d2.sort().join("") === _downKeys$1.sort().join("") && eventHandler$1(e2, a2, i2);
        }
    }
  }
}
function isElementBind$1(e2) {
  return elementHasBindEvent$1.indexOf(e2) > -1;
}
function hotkeys$1(e2, t, n2) {
  _downKeys$1 = [];
  var o2 = getKeys$1(e2), s2 = [], i2 = "all", r2 = document, l2 = 0, a2 = false, p2 = true, c2 = "+";
  for (n2 === void 0 && typeof t == "function" && (n2 = t), Object.prototype.toString.call(t) === "[object Object]" && (t.scope && (i2 = t.scope), t.element && (r2 = t.element), t.keyup && (a2 = t.keyup), t.keydown !== void 0 && (p2 = t.keydown), typeof t.splitKey == "string" && (c2 = t.splitKey)), typeof t == "string" && (i2 = t); l2 < o2.length; l2++)
    s2 = [], (e2 = o2[l2].split(c2)).length > 1 && (s2 = getMods$1(_modifier$1, e2)), (e2 = (e2 = e2[e2.length - 1]) === "*" ? "*" : code$1(e2)) in _handlers$1 || (_handlers$1[e2] = []), _handlers$1[e2].push({keyup: a2, keydown: p2, scope: i2, mods: s2, shortcut: o2[l2], method: n2, key: o2[l2], splitKey: c2});
  r2 !== void 0 && !isElementBind$1(r2) && window && (elementHasBindEvent$1.push(r2), addEvent$1(r2, "keydown", function(e3) {
    dispatch$1(e3);
  }), addEvent$1(window, "focus", function() {
    _downKeys$1 = [];
  }), addEvent$1(r2, "keyup", function(e3) {
    dispatch$1(e3), clearModifier$1(e3);
  }));
}
var _api$1 = {setScope: setScope$1, getScope: getScope$1, deleteScope: deleteScope$1, getPressedKeyCodes: getPressedKeyCodes$1, isPressed: isPressed$1, filter: filter$1, unbind: unbind$1};
for (var a$2 in _api$1)
  Object.prototype.hasOwnProperty.call(_api$1, a$2) && (hotkeys$1[a$2] = _api$1[a$2]);
if (typeof window != "undefined") {
  var _hotkeys$1 = window.hotkeys;
  hotkeys$1.noConflict = function(e2) {
    return e2 && window.hotkeys === hotkeys$1 && (window.hotkeys = _hotkeys$1), hotkeys$1;
  }, window.hotkeys = hotkeys$1;
}
var hotkeys_common$1 = hotkeys$1;
function hotkey$1(e2, t = {}) {
  return new SPromise(({resolve: n2, reject: o2, emit: s2, cancel: i2}) => {
    t = Object.assign({element: null, keyup: false, keydown: true, once: false, splitKey: "+"}, t), hotkeys_common$1(e2, t, (e3, n3) => {
      s2("press", e3), t.once && i2();
    });
  }, {id: "hotkey"}).on("finally", () => {
    hotkeys_common$1.unbind(e2);
  });
}
function stripTags(e2) {
  const t = document.createElement("div");
  return t.innerHTML = e2, t.textContent || t.innerText || "";
}
function onScrollEnd$1(e2, t, n2) {
  const o2 = Object.assign({offset: 20, once: false, times: -1}, n2 != null ? n2 : {});
  let s2 = true, i2 = 0;
  const r2 = (n3) => {
    s2 && e2.offsetHeight + e2.scrollTop >= e2.scrollHeight - o2.offset ? (t(), s2 = false, i2++, (o2.once || o2.times > 0 && i2 >= o2.times) && e2.removeEventListener("scroll", r2)) : e2.offsetHeight + e2.scrollTop < e2.scrollHeight - o2.offset && (s2 = true);
  };
  e2.addEventListener("scroll", r2);
}
hotkeys_common$1.filter = function() {
  return true;
};
const Component$1 = {css: 's-filtrable-input,[is="s-filtrable-input"]{ display: inline-block; } s-filtrable-input:not(.s-no-bare :host):not(.no-bare),[is="s-filtrable-input"]:not(.s-no-bare :host):not(.no-bare){ display: inline-block; position: relative; } s-filtrable-input:not(.s-no-bare :host):not(.no-bare) .s-filtrable-input__list,[is="s-filtrable-input"]:not(.s-no-bare :host):not(.no-bare) .s-filtrable-input__list{ position: absolute; top: 100%; left: 0; overflow-x: hidden; overflow-y: auto; max-width: calc(100vw - 100px); pointer-events: none; margin: 20px 0; } s-filtrable-input:not(.s-no-bare :host):not(.no-bare).s-filtrable-input--top .s-filtrable-input__list,[is="s-filtrable-input"]:not(.s-no-bare :host):not(.no-bare).s-filtrable-input--top .s-filtrable-input__list{ top: auto; bottom: 100%; } s-filtrable-input:not(.s-no-bare :host):not(.no-bare) .s-filtrable-input__input:focus + .s-filtrable-input__list,[is="s-filtrable-input"]:not(.s-no-bare :host):not(.no-bare) .s-filtrable-input__input:focus + .s-filtrable-input__list,s-filtrable-input:not(.s-no-bare :host):not(.no-bare) .s-filtrable-input__list:focus,[is="s-filtrable-input"]:not(.s-no-bare :host):not(.no-bare) .s-filtrable-input__list:focus,s-filtrable-input:not(.s-no-bare :host):not(.no-bare) .s-filtrable-input__list:focus-within,[is="s-filtrable-input"]:not(.s-no-bare :host):not(.no-bare) .s-filtrable-input__list:focus-within{ opacity: 1; pointer-events: all !important; } s-filtrable-input:not(.s-no-bare :host):not(.no-bare) .s-filtrable-input__list-item,[is="s-filtrable-input"]:not(.s-no-bare :host):not(.no-bare) .s-filtrable-input__list-item{ position: relative; } s-filtrable-input:not(.s-no-lnf :host):not(.s-no-lnf) .s-filtrable-input__list,[is="s-filtrable-input"]:not(.s-no-lnf :host):not(.s-no-lnf) .s-filtrable-input__list{ transition: max-height 0.1s ease-in-out; } s-filtrable-input:not(.s-no-lnf :host):not(.s-no-lnf) .s-filtrable-input__list-item-highlight,[is="s-filtrable-input"]:not(.s-no-lnf :host):not(.s-no-lnf) .s-filtrable-input__list-item-highlight{ background-color: hsl(calc(var(--s-theme-color-current-default-h, 0) + var(--s-theme-color-current-spin ,0)),calc((var(--s-theme-color-current-default-s, 0) + var(--s-theme-color-current-saturationOffset, 0)) * 1%),calc((var(--s-theme-color-current-default-l, 0) + var(--s-theme-color-current-lightnessOffset, 0)) * 1%)); }', exports: {$container: void 0, $list: void 0, $input: void 0, $itemTemplateElm: void 0, $noItemTemplateElm: void 0, $loadingTemplateElm: void 0, state: {itemTemplate: void 0, noItemTemplate: void 0, loadingTemplate: void 0, preselectedItemIdx: -1, selectedItemIdx: -1, displayedMaxItems: 0, value: "", isActive: false, isLoading: false, items: [], filteredItems: []}, onBeforeMount() {
  if (this.component = new SComponentUtils(this.root, this.props, {interface: SHighlightJsComponentInterface}), this.state.displayedMaxItems = this.component.props.maxItems, this.$itemTemplateElm = this.$("template#item"), this.$noItemTemplateElm = this.$("template#no-item"), this.$loadingTemplateElm = this.$("template#loading"), this.$input = this.$("input"), this.component.props.defaultStyle && this.$input.classList.add("s-form-input"), this.$loadingTemplateElm ? this.state.loadingTemplate = this.$loadingTemplateElm.innerHTML : this.state.loadingTemplate = `
              <div class="${this.component.className("__loading")}">
                  {{value}}
              </div>
          `, this.$itemTemplateElm ? this.state.itemTemplate = this.$itemTemplateElm.innerHTML : this.state.itemTemplate = `
              <div class="${this.component.className("__item")}">
                  {{value}}
              </div>
          `, this.$noItemTemplateElm ? this.state.noItemTemplate = this.$noItemTemplateElm.innerHTML : this.state.noItemTemplate = `
              <div class="${this.component.className("__no-item")}"> 
                  ${this.component.props.noItemText}
              </div>
          `, !this.$input)
    throw new Error("<red>[s-filtrable-input]</red> In order to work you MUST have a valid input tag inside your s-filtrable-input component");
  this.$input.addEventListener("keyup", (e2) => {
    const t = e2.target.value;
    this.update({value: t, displayedMaxItems: this.component.props.maxItems}), this.filterItems();
  }), this.$input.classList.add(this.component.className("__input")), this.root.innerHTML = "";
}, onMounted() {
  this.$container = this.root.children[0], this.$list = this.root.querySelector("ul"), this.root.prepend(this.$input), this.filterItems(), n$3.mount(), document.addEventListener("scroll", this._updateListSizeAndPosition), this.$input.addEventListener("focus", (e2) => {
    this.update({isActive: true}), this.filterItems(), this._updateListSizeAndPosition();
  }), this._updateListSizeAndPosition(), onScrollEnd$1(this.$list, () => {
    var e2;
    this.update({displayedMaxItems: ((e2 = this.state.displayedMaxItems) != null ? e2 : 0) + this.component.props.maxItems}), this.filterItems(false);
  }), hotkey$1("escape").on("press", (e2) => {
    e2.preventDefault(), this.state.isActive && this.close();
  }), hotkey$1("up").on("press", (e2) => {
    if (e2.preventDefault(), !this.state.isActive)
      return;
    this.update({preselectedItemIdx: this.state.preselectedItemIdx > 0 ? this.state.preselectedItemIdx - 1 : 0});
    this.$list.children[this.state.preselectedItemIdx].focus();
  }), hotkey$1("down").on("press", (e2) => {
    if (e2.preventDefault(), !this.state.isActive)
      return;
    this.update({preselectedItemIdx: this.state.preselectedItemIdx >= this.state.filteredItems.length - 1 ? this.state.filteredItems.length - 1 : this.state.preselectedItemIdx + 1});
    this.$list.children[this.state.preselectedItemIdx].focus();
  }), hotkey$1("return").on("press", (e2) => {
    this.state.isActive && this._validateAndClose();
  });
}, get selectedItem() {
  if (this.state.selectedItemIdx !== -1)
    return this.state.filteredItems[this.state.selectedItemIdx];
}, get preselectedItem() {
  if (this.state.preselectedItemIdx !== -1)
    return this.state.filteredItems[this.state.preselectedItemIdx];
}, _validateAndClose() {
  if (this.preselectedItem) {
    if (this.preselectedItem && !this.preselectedItem[this.component.props.value])
      throw new Error(`<red>[s-filtrable-input]</red> Sorry but the property "<yellow>${this.component.props.value}</yellow>" does not exists on your selected item`);
    this.$input.value = stripTags(this.preselectedItem[this.component.props.value]), this.update({selectedItemIdx: this.state.preselectedItemIdx, value: this.$input.value}), setTimeout(() => {
      this.close();
    }, this.component.props.closeTimeout);
  }
}, close() {
  this.$input.focus(), this.$input.blur(), this.update({isActive: false});
}, _selectAndValidate(e2) {
  this._setPreselectedItemIdx(e2), this._validateAndClose();
}, _setPreselectedItemIdx(e2) {
  this.component.props.notSelectable || this.update({preselectedItemIdx: e2});
}, _updateListSizeAndPosition() {
  if (!this.state.isActive)
    return;
  const e2 = getStyleProperty(this.$list, "marginTop");
  getStyleProperty(this.$list, "marginLeft"), getStyleProperty(this.$list, "marginRight");
  const t = getStyleProperty(this.$list, "marginBottom"), n2 = fromElementTopToViewportTop(this.$input), o2 = fromElementTopToViewportBottom(this.$input) - this.$input.clientHeight;
  let s2;
  n2 > o2 ? (this.$container.classList.add("s-filtrable-input--top"), this.$list.style.top = "auto", this.$list.style.bottom = `calc(100% - ${t})`, s2 = n2 - parseInt(e2)) : (this.$container.classList.remove("s-filtrable-input--top"), this.$list.style.bottom = "auto", this.$list.style.top = `calc(100% - ${e2})`, s2 = o2 - parseInt(t)), this.$list.style.maxHeight = `${s2}px`;
}, async filterItems(e2 = true) {
  let t = this.state.items;
  if (e2)
    try {
      this.update({isLoading: true});
      const e3 = await this.component.dispatchSyncEvent("update", {value: this.$input.value});
      e3 && e3.length && (t = e3), this.update({items: e3, isLoading: false});
    } catch (s2) {
    }
  let n2 = 0;
  const o2 = t.map((e3) => clone(e3)).filter((e3) => {
    if (n2 >= this.state.displayedMaxItems)
      return false;
    if (!this.component.props.filtrable.length)
      return true;
    let t2 = false;
    for (let n3 = 0; n3 < Object.keys(e3).length; n3++) {
      const o3 = Object.keys(e3)[n3], s2 = e3[o3];
      if (typeof s2 == "string" && this.component.props.filtrable.indexOf(o3) !== -1) {
        const n4 = new RegExp(this.state.value, "gi");
        if (s2.match(n4) && (t2 = true, this.state.value && this.state.value !== "")) {
          const t3 = new RegExp(this.state.value, "gi"), n5 = s2.replace(t3, (e4) => `<span class="${this.component.className("__list-item-highlight")} s-highlight">${e4}</span>`);
          e3[o3] = n5;
        }
      }
    }
    return t2 && n2++, t2;
  });
  this.update({filteredItems: o2});
}}, template: function(e2, t, n2, o2) {
  return e2('<ul expr14="expr14"><li expr15="expr15"></li><li expr17="expr17"></li><li expr19="expr19" hoverable></li></ul>', [{expressions: [{type: t.ATTRIBUTE, name: "interactive", evaluate: function(e3) {
    return e3.component.props.interactive;
  }}, {type: t.ATTRIBUTE, name: "not-selectable", evaluate: function(e3) {
    return e3.component.props.notSelectable;
  }}]}, {redundantAttribute: "expr14", selector: "[expr14]", expressions: [{type: t.ATTRIBUTE, name: "class", evaluate: function(e3) {
    return e3.component.className("__list", "s-list:interactive");
  }}]}, {type: n2.IF, evaluate: function(e3) {
    return e3.state.isLoading;
  }, redundantAttribute: "expr15", selector: "[expr15]", template: e2('<s-raw-html expr16="expr16"></s-raw-html>', [{expressions: [{type: t.ATTRIBUTE, name: "class", evaluate: function(e3) {
    return e3.component.className("__list-item __list-loading");
  }}]}, {type: n2.TAG, getComponent: o2, evaluate: function(e3) {
    return "s-raw-html";
  }, slots: [], attributes: [{type: t.ATTRIBUTE, name: "html", evaluate: function(e3) {
    return e3.component.compileMustache(e3.state.loadingTemplate, {value: e3.state.value});
  }}], redundantAttribute: "expr16", selector: "[expr16]"}])}, {type: n2.IF, evaluate: function(e3) {
    return !e3.state.isLoading && e3.state.filteredItems.length <= 0;
  }, redundantAttribute: "expr17", selector: "[expr17]", template: e2('<s-raw-html expr18="expr18"></s-raw-html>', [{expressions: [{type: t.ATTRIBUTE, name: "class", evaluate: function(e3) {
    return e3.component.className("__list-item __list-no-item");
  }}]}, {type: n2.TAG, getComponent: o2, evaluate: function(e3) {
    return "s-raw-html";
  }, slots: [], attributes: [{type: t.ATTRIBUTE, name: "html", evaluate: function(e3) {
    return e3.component.compileMustache(e3.state.noItemTemplate, {value: e3.state.value});
  }}], redundantAttribute: "expr18", selector: "[expr18]"}])}, {type: n2.EACH, getKey: null, condition: function(e3) {
    return !e3.state.isLoading && e3.state.filteredItems.length;
  }, template: e2('<s-raw-html expr20="expr20"></s-raw-html>', [{expressions: [{type: t.ATTRIBUTE, name: "style", evaluate: function(e3) {
    return ["z-index: ", 999999999 - e3.idx].join("");
  }}, {type: t.ATTRIBUTE, name: "tabindex", evaluate: function(e3) {
    return e3.state.isActive ? e3.idx : -1;
  }}, {type: t.EVENT, name: "onfocus", evaluate: function(e3) {
    return () => e3._setPreselectedItemIdx(e3.idx);
  }}, {type: t.EVENT, name: "ondblclick", evaluate: function(e3) {
    return () => e3._selectAndValidate(e3.idx);
  }}, {type: t.ATTRIBUTE, name: "class", evaluate: function(e3) {
    return e3.component.className("__list-item") + " " + (e3.state.selectedItemIdx === e3.idx ? "active" : "");
  }}]}, {type: n2.TAG, getComponent: o2, evaluate: function(e3) {
    return "s-raw-html";
  }, slots: [], attributes: [{type: t.ATTRIBUTE, name: "html", evaluate: function(e3) {
    return e3.component.compileHandlebars(e3.state.itemTemplate, e3.item);
  }}], redundantAttribute: "expr20", selector: "[expr20]"}]), redundantAttribute: "expr19", selector: "[expr19]", itemName: "item", indexName: "idx", evaluate: function(e3) {
    return e3.state.filteredItems;
  }}]);
}, name: "s-filtrable-input"};
register("s-filtrable-input", Component$1), querySelectorLive$1("s-filtrable-input", (e2) => {
  const t = e2.id || "s-filtrable-input-" + uniqid();
  e2.setAttribute("id", t), mount("#" + t);
}), Component$1.mount = () => {
  mount("s-filtrable-input");
};
class MyComponent extends React.Component {
  render() {
    return React.createElement("s-filtrable-input", __spreadValues({}, this.props), this.props.children);
  }
  componentDidMount() {
    Component$1.mount();
  }
}
window.env || (window.env = {SUGAR: {}}), window.env.SUGAR = JSON.parse('{"ENVIRONMENT":"development"}');
var axios$2 = {exports: {}};
var bind$2 = function bind2(fn2, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i2 = 0; i2 < args.length; i2++) {
      args[i2] = arguments[i2];
    }
    return fn2.apply(thisArg, args);
  };
};
var bind$1 = bind$2;
var toString$1 = Object.prototype.toString;
function isArray$1(val) {
  return toString$1.call(val) === "[object Array]";
}
function isUndefined(val) {
  return typeof val === "undefined";
}
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
}
function isArrayBuffer(val) {
  return toString$1.call(val) === "[object ArrayBuffer]";
}
function isFormData(val) {
  return typeof FormData !== "undefined" && val instanceof FormData;
}
function isArrayBufferView(val) {
  var result;
  if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && val.buffer instanceof ArrayBuffer;
  }
  return result;
}
function isString(val) {
  return typeof val === "string";
}
function isNumber(val) {
  return typeof val === "number";
}
function isObject$1(val) {
  return val !== null && typeof val === "object";
}
function isPlainObject(val) {
  if (toString$1.call(val) !== "[object Object]") {
    return false;
  }
  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}
function isDate(val) {
  return toString$1.call(val) === "[object Date]";
}
function isFile(val) {
  return toString$1.call(val) === "[object File]";
}
function isBlob(val) {
  return toString$1.call(val) === "[object Blob]";
}
function isFunction$1(val) {
  return toString$1.call(val) === "[object Function]";
}
function isStream(val) {
  return isObject$1(val) && isFunction$1(val.pipe);
}
function isURLSearchParams(val) {
  return typeof URLSearchParams !== "undefined" && val instanceof URLSearchParams;
}
function trim(str) {
  return str.replace(/^\s*/, "").replace(/\s*$/, "");
}
function isStandardBrowserEnv() {
  if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
    return false;
  }
  return typeof window !== "undefined" && typeof document !== "undefined";
}
function forEach(obj, fn2) {
  if (obj === null || typeof obj === "undefined") {
    return;
  }
  if (typeof obj !== "object") {
    obj = [obj];
  }
  if (isArray$1(obj)) {
    for (var i2 = 0, l2 = obj.length; i2 < l2; i2++) {
      fn2.call(null, obj[i2], i2, obj);
    }
  } else {
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn2.call(null, obj[key], key, obj);
      }
    }
  }
}
function merge$1() {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge$1(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge$1({}, val);
    } else if (isArray$1(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }
  for (var i2 = 0, l2 = arguments.length; i2 < l2; i2++) {
    forEach(arguments[i2], assignValue);
  }
  return result;
}
function extend(a2, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === "function") {
      a2[key] = bind$1(val, thisArg);
    } else {
      a2[key] = val;
    }
  });
  return a2;
}
function stripBOM(content) {
  if (content.charCodeAt(0) === 65279) {
    content = content.slice(1);
  }
  return content;
}
var utils$d = {
  isArray: isArray$1,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isObject: isObject$1,
  isPlainObject,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isFunction: isFunction$1,
  isStream,
  isURLSearchParams,
  isStandardBrowserEnv,
  forEach,
  merge: merge$1,
  extend,
  trim,
  stripBOM
};
var utils$c = utils$d;
function encode$1(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
var buildURL$2 = function buildURL2(url, params, paramsSerializer) {
  if (!params) {
    return url;
  }
  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils$c.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];
    utils$c.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === "undefined") {
        return;
      }
      if (utils$c.isArray(val)) {
        key = key + "[]";
      } else {
        val = [val];
      }
      utils$c.forEach(val, function parseValue(v2) {
        if (utils$c.isDate(v2)) {
          v2 = v2.toISOString();
        } else if (utils$c.isObject(v2)) {
          v2 = JSON.stringify(v2);
        }
        parts.push(encode$1(key) + "=" + encode$1(v2));
      });
    });
    serializedParams = parts.join("&");
  }
  if (serializedParams) {
    var hashmarkIndex = url.indexOf("#");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
  }
  return url;
};
var utils$b = utils$d;
function InterceptorManager$1() {
  this.handlers = [];
}
InterceptorManager$1.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled,
    rejected
  });
  return this.handlers.length - 1;
};
InterceptorManager$1.prototype.eject = function eject(id2) {
  if (this.handlers[id2]) {
    this.handlers[id2] = null;
  }
};
InterceptorManager$1.prototype.forEach = function forEach2(fn2) {
  utils$b.forEach(this.handlers, function forEachHandler(h2) {
    if (h2 !== null) {
      fn2(h2);
    }
  });
};
var InterceptorManager_1 = InterceptorManager$1;
var utils$a = utils$d;
var transformData$1 = function transformData2(data, headers, fns) {
  utils$a.forEach(fns, function transform(fn2) {
    data = fn2(data, headers);
  });
  return data;
};
var isCancel$1 = function isCancel2(value) {
  return !!(value && value.__CANCEL__);
};
var utils$9 = utils$d;
var normalizeHeaderName$1 = function normalizeHeaderName2(headers, normalizedName) {
  utils$9.forEach(headers, function processHeader(value, name2) {
    if (name2 !== normalizedName && name2.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name2];
    }
  });
};
var enhanceError$1 = function enhanceError2(error2, config, code3, request2, response) {
  error2.config = config;
  if (code3) {
    error2.code = code3;
  }
  error2.request = request2;
  error2.response = response;
  error2.isAxiosError = true;
  error2.toJSON = function toJSON() {
    return {
      message: this.message,
      name: this.name,
      description: this.description,
      number: this.number,
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      config: this.config,
      code: this.code
    };
  };
  return error2;
};
var enhanceError = enhanceError$1;
var createError$2 = function createError2(message, config, code3, request2, response) {
  var error2 = new Error(message);
  return enhanceError(error2, config, code3, request2, response);
};
var createError$1 = createError$2;
var settle$1 = function settle2(resolve2, reject, response) {
  var validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve2(response);
  } else {
    reject(createError$1("Request failed with status code " + response.status, response.config, null, response.request, response));
  }
};
var utils$8 = utils$d;
var cookies$1 = utils$8.isStandardBrowserEnv() ? function standardBrowserEnv() {
  return {
    write: function write(name2, value, expires, path2, domain, secure) {
      var cookie = [];
      cookie.push(name2 + "=" + encodeURIComponent(value));
      if (utils$8.isNumber(expires)) {
        cookie.push("expires=" + new Date(expires).toGMTString());
      }
      if (utils$8.isString(path2)) {
        cookie.push("path=" + path2);
      }
      if (utils$8.isString(domain)) {
        cookie.push("domain=" + domain);
      }
      if (secure === true) {
        cookie.push("secure");
      }
      document.cookie = cookie.join("; ");
    },
    read: function read(name2) {
      var match2 = document.cookie.match(new RegExp("(^|;\\s*)(" + name2 + ")=([^;]*)"));
      return match2 ? decodeURIComponent(match2[3]) : null;
    },
    remove: function remove2(name2) {
      this.write(name2, "", Date.now() - 864e5);
    }
  };
}() : function nonStandardBrowserEnv() {
  return {
    write: function write() {
    },
    read: function read() {
      return null;
    },
    remove: function remove2() {
    }
  };
}();
var isAbsoluteURL$1 = function isAbsoluteURL2(url) {
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};
var combineURLs$1 = function combineURLs2(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
};
var isAbsoluteURL = isAbsoluteURL$1;
var combineURLs = combineURLs$1;
var buildFullPath$1 = function buildFullPath2(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};
var utils$7 = utils$d;
var ignoreDuplicateOf = [
  "age",
  "authorization",
  "content-length",
  "content-type",
  "etag",
  "expires",
  "from",
  "host",
  "if-modified-since",
  "if-unmodified-since",
  "last-modified",
  "location",
  "max-forwards",
  "proxy-authorization",
  "referer",
  "retry-after",
  "user-agent"
];
var parseHeaders$1 = function parseHeaders2(headers) {
  var parsed = {};
  var key;
  var val;
  var i2;
  if (!headers) {
    return parsed;
  }
  utils$7.forEach(headers.split("\n"), function parser2(line) {
    i2 = line.indexOf(":");
    key = utils$7.trim(line.substr(0, i2)).toLowerCase();
    val = utils$7.trim(line.substr(i2 + 1));
    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === "set-cookie") {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
      }
    }
  });
  return parsed;
};
var utils$6 = utils$d;
var isURLSameOrigin$1 = utils$6.isStandardBrowserEnv() ? function standardBrowserEnv2() {
  var msie = /(msie|trident)/i.test(navigator.userAgent);
  var urlParsingNode = document.createElement("a");
  var originURL;
  function resolveURL(url) {
    var href = url;
    if (msie) {
      urlParsingNode.setAttribute("href", href);
      href = urlParsingNode.href;
    }
    urlParsingNode.setAttribute("href", href);
    return {
      href: urlParsingNode.href,
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
      host: urlParsingNode.host,
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
      hostname: urlParsingNode.hostname,
      port: urlParsingNode.port,
      pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
    };
  }
  originURL = resolveURL(window.location.href);
  return function isURLSameOrigin2(requestURL) {
    var parsed = utils$6.isString(requestURL) ? resolveURL(requestURL) : requestURL;
    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
  };
}() : function nonStandardBrowserEnv2() {
  return function isURLSameOrigin2() {
    return true;
  };
}();
var utils$5 = utils$d;
var settle = settle$1;
var cookies = cookies$1;
var buildURL$1 = buildURL$2;
var buildFullPath = buildFullPath$1;
var parseHeaders = parseHeaders$1;
var isURLSameOrigin = isURLSameOrigin$1;
var createError = createError$2;
var xhr = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve2, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;
    if (utils$5.isFormData(requestData)) {
      delete requestHeaders["Content-Type"];
    }
    var request2 = new XMLHttpRequest();
    if (config.auth) {
      var username = config.auth.username || "";
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
      requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
    }
    var fullPath = buildFullPath(config.baseURL, config.url);
    request2.open(config.method.toUpperCase(), buildURL$1(fullPath, config.params, config.paramsSerializer), true);
    request2.timeout = config.timeout;
    request2.onreadystatechange = function handleLoad() {
      if (!request2 || request2.readyState !== 4) {
        return;
      }
      if (request2.status === 0 && !(request2.responseURL && request2.responseURL.indexOf("file:") === 0)) {
        return;
      }
      var responseHeaders = "getAllResponseHeaders" in request2 ? parseHeaders(request2.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === "text" ? request2.responseText : request2.response;
      var response = {
        data: responseData,
        status: request2.status,
        statusText: request2.statusText,
        headers: responseHeaders,
        config,
        request: request2
      };
      settle(resolve2, reject, response);
      request2 = null;
    };
    request2.onabort = function handleAbort() {
      if (!request2) {
        return;
      }
      reject(createError("Request aborted", config, "ECONNABORTED", request2));
      request2 = null;
    };
    request2.onerror = function handleError() {
      reject(createError("Network Error", config, null, request2));
      request2 = null;
    };
    request2.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = "timeout of " + config.timeout + "ms exceeded";
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(timeoutErrorMessage, config, "ECONNABORTED", request2));
      request2 = null;
    };
    if (utils$5.isStandardBrowserEnv()) {
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }
    if ("setRequestHeader" in request2) {
      utils$5.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
          delete requestHeaders[key];
        } else {
          request2.setRequestHeader(key, val);
        }
      });
    }
    if (!utils$5.isUndefined(config.withCredentials)) {
      request2.withCredentials = !!config.withCredentials;
    }
    if (config.responseType) {
      try {
        request2.responseType = config.responseType;
      } catch (e2) {
        if (config.responseType !== "json") {
          throw e2;
        }
      }
    }
    if (typeof config.onDownloadProgress === "function") {
      request2.addEventListener("progress", config.onDownloadProgress);
    }
    if (typeof config.onUploadProgress === "function" && request2.upload) {
      request2.upload.addEventListener("progress", config.onUploadProgress);
    }
    if (config.cancelToken) {
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request2) {
          return;
        }
        request2.abort();
        reject(cancel);
        request2 = null;
      });
    }
    if (!requestData) {
      requestData = null;
    }
    request2.send(requestData);
  });
};
var utils$4 = utils$d;
var normalizeHeaderName = normalizeHeaderName$1;
var DEFAULT_CONTENT_TYPE = {
  "Content-Type": "application/x-www-form-urlencoded"
};
function setContentTypeIfUnset(headers, value) {
  if (!utils$4.isUndefined(headers) && utils$4.isUndefined(headers["Content-Type"])) {
    headers["Content-Type"] = value;
  }
}
function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== "undefined") {
    adapter = xhr;
  } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
    adapter = xhr;
  }
  return adapter;
}
var defaults$2 = {
  adapter: getDefaultAdapter(),
  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, "Accept");
    normalizeHeaderName(headers, "Content-Type");
    if (utils$4.isFormData(data) || utils$4.isArrayBuffer(data) || utils$4.isBuffer(data) || utils$4.isStream(data) || utils$4.isFile(data) || utils$4.isBlob(data)) {
      return data;
    }
    if (utils$4.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils$4.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
      return data.toString();
    }
    if (utils$4.isObject(data)) {
      setContentTypeIfUnset(headers, "application/json;charset=utf-8");
      return JSON.stringify(data);
    }
    return data;
  }],
  transformResponse: [function transformResponse(data) {
    if (typeof data === "string") {
      try {
        data = JSON.parse(data);
      } catch (e2) {
      }
    }
    return data;
  }],
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};
defaults$2.headers = {
  common: {
    "Accept": "application/json, text/plain, */*"
  }
};
utils$4.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
  defaults$2.headers[method] = {};
});
utils$4.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
  defaults$2.headers[method] = utils$4.merge(DEFAULT_CONTENT_TYPE);
});
var defaults_1 = defaults$2;
var utils$3 = utils$d;
var transformData = transformData$1;
var isCancel = isCancel$1;
var defaults$1 = defaults_1;
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}
var dispatchRequest$1 = function dispatchRequest2(config) {
  throwIfCancellationRequested(config);
  config.headers = config.headers || {};
  config.data = transformData(config.data, config.headers, config.transformRequest);
  config.headers = utils$3.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
  utils$3.forEach(["delete", "get", "head", "post", "put", "patch", "common"], function cleanHeaderConfig(method) {
    delete config.headers[method];
  });
  var adapter = config.adapter || defaults$1.adapter;
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);
    response.data = transformData(response.data, response.headers, config.transformResponse);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);
      if (reason && reason.response) {
        reason.response.data = transformData(reason.response.data, reason.response.headers, config.transformResponse);
      }
    }
    return Promise.reject(reason);
  });
};
var utils$2 = utils$d;
var mergeConfig$2 = function mergeConfig2(config1, config2) {
  config2 = config2 || {};
  var config = {};
  var valueFromConfig2Keys = ["url", "method", "data"];
  var mergeDeepPropertiesKeys = ["headers", "auth", "proxy", "params"];
  var defaultToConfig2Keys = [
    "baseURL",
    "transformRequest",
    "transformResponse",
    "paramsSerializer",
    "timeout",
    "timeoutMessage",
    "withCredentials",
    "adapter",
    "responseType",
    "xsrfCookieName",
    "xsrfHeaderName",
    "onUploadProgress",
    "onDownloadProgress",
    "decompress",
    "maxContentLength",
    "maxBodyLength",
    "maxRedirects",
    "transport",
    "httpAgent",
    "httpsAgent",
    "cancelToken",
    "socketPath",
    "responseEncoding"
  ];
  var directMergeKeys = ["validateStatus"];
  function getMergedValue(target, source3) {
    if (utils$2.isPlainObject(target) && utils$2.isPlainObject(source3)) {
      return utils$2.merge(target, source3);
    } else if (utils$2.isPlainObject(source3)) {
      return utils$2.merge({}, source3);
    } else if (utils$2.isArray(source3)) {
      return source3.slice();
    }
    return source3;
  }
  function mergeDeepProperties(prop) {
    if (!utils$2.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (!utils$2.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(void 0, config1[prop]);
    }
  }
  utils$2.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
    if (!utils$2.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(void 0, config2[prop]);
    }
  });
  utils$2.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);
  utils$2.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
    if (!utils$2.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(void 0, config2[prop]);
    } else if (!utils$2.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(void 0, config1[prop]);
    }
  });
  utils$2.forEach(directMergeKeys, function merge2(prop) {
    if (prop in config2) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      config[prop] = getMergedValue(void 0, config1[prop]);
    }
  });
  var axiosKeys = valueFromConfig2Keys.concat(mergeDeepPropertiesKeys).concat(defaultToConfig2Keys).concat(directMergeKeys);
  var otherKeys = Object.keys(config1).concat(Object.keys(config2)).filter(function filterAxiosKeys(key) {
    return axiosKeys.indexOf(key) === -1;
  });
  utils$2.forEach(otherKeys, mergeDeepProperties);
  return config;
};
var utils$1 = utils$d;
var buildURL = buildURL$2;
var InterceptorManager = InterceptorManager_1;
var dispatchRequest = dispatchRequest$1;
var mergeConfig$1 = mergeConfig$2;
function Axios$1(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}
Axios$1.prototype.request = function request(config) {
  if (typeof config === "string") {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }
  config = mergeConfig$1(this.defaults, config);
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = "get";
  }
  var chain = [dispatchRequest, void 0];
  var promise = Promise.resolve(config);
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });
  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }
  return promise;
};
Axios$1.prototype.getUri = function getUri(config) {
  config = mergeConfig$1(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
};
utils$1.forEach(["delete", "get", "head", "options"], function forEachMethodNoData2(method) {
  Axios$1.prototype[method] = function(url, config) {
    return this.request(mergeConfig$1(config || {}, {
      method,
      url,
      data: (config || {}).data
    }));
  };
});
utils$1.forEach(["post", "put", "patch"], function forEachMethodWithData2(method) {
  Axios$1.prototype[method] = function(url, data, config) {
    return this.request(mergeConfig$1(config || {}, {
      method,
      url,
      data
    }));
  };
});
var Axios_1 = Axios$1;
function Cancel$1(message) {
  this.message = message;
}
Cancel$1.prototype.toString = function toString2() {
  return "Cancel" + (this.message ? ": " + this.message : "");
};
Cancel$1.prototype.__CANCEL__ = true;
var Cancel_1 = Cancel$1;
var Cancel = Cancel_1;
function CancelToken(executor) {
  if (typeof executor !== "function") {
    throw new TypeError("executor must be a function.");
  }
  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve2) {
    resolvePromise = resolve2;
  });
  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      return;
    }
    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};
CancelToken.source = function source2() {
  var cancel;
  var token = new CancelToken(function executor(c2) {
    cancel = c2;
  });
  return {
    token,
    cancel
  };
};
var CancelToken_1 = CancelToken;
var spread = function spread2(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};
var isAxiosError = function isAxiosError2(payload) {
  return typeof payload === "object" && payload.isAxiosError === true;
};
var utils = utils$d;
var bind = bind$2;
var Axios = Axios_1;
var mergeConfig = mergeConfig$2;
var defaults = defaults_1;
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);
  utils.extend(instance, Axios.prototype, context);
  utils.extend(instance, context);
  return instance;
}
var axios$1 = createInstance(defaults);
axios$1.Axios = Axios;
axios$1.create = function create2(instanceConfig) {
  return createInstance(mergeConfig(axios$1.defaults, instanceConfig));
};
axios$1.Cancel = Cancel_1;
axios$1.CancelToken = CancelToken_1;
axios$1.isCancel = isCancel$1;
axios$1.all = function all(promises) {
  return Promise.all(promises);
};
axios$1.spread = spread;
axios$1.isAxiosError = isAxiosError;
axios$2.exports = axios$1;
axios$2.exports.default = axios$1;
var axios = axios$2.exports;
function strToHtml(string) {
  if (document !== void 0 && document.createElement !== void 0) {
    const cont = document.createElement("div");
    cont.innerHTML = string;
    if (cont.children.length === 1) {
      return cont.children[0];
    } else {
      return cont;
    }
  }
  return string;
}
function toStringFn(html2, deep = true) {
  if (document !== void 0 && document.createElement !== void 0) {
    const cont = document.createElement("div");
    cont.appendChild(html2.cloneNode(deep));
    return cont.innerHTML;
  }
  return html2;
}
function convert$1(from, to = "ms") {
  let fromMs = from;
  if (typeof from === "string") {
    const fromNumber = parseFloat(from);
    const fromLength = fromNumber.toString().length;
    const fromString = from.slice(fromLength);
    if (fromString === "ms" || fromString === "millisecond" || fromString === "milliseconds") {
      fromMs = fromNumber;
    } else if (fromString === "s" || fromString === "second" || fromString === "seconds") {
      fromMs = fromNumber * 1e3;
    } else if (fromString === "m" || fromString === "minute" || fromString === "minutes") {
      fromMs = fromNumber * 60 * 1e3;
    } else if (fromString === "h" || fromString === "hour" || fromString === "hours") {
      fromMs = fromNumber * 60 * 60 * 1e3;
    } else if (fromString === "d" || fromString === "day" || fromString === "days") {
      fromMs = fromNumber * 24 * 60 * 60 * 1e3;
    } else if (fromString === "w" || fromString === "week" || fromString === "weeks") {
      fromMs = fromNumber * 7 * 24 * 60 * 60 * 1e3;
    } else if (fromString === "month" || fromString === "months") {
      fromMs = fromNumber * 31 * 24 * 60 * 60 * 1e3;
    } else if (fromString === "y" || fromString === "year" || fromString === "years") {
      fromMs = fromNumber * 365 * 24 * 60 * 60 * 1e3;
    }
  }
  switch (to) {
    case "ms":
    case "millisecond":
    case "milliseconds":
      return fromMs;
    case "s":
    case "second":
    case "seconds":
      return fromMs / 1e3;
    case "m":
    case "minute":
    case "minutes":
      return fromMs / 1e3 / 60;
    case "h":
    case "hour":
    case "hours":
      return fromMs / 1e3 / 60 / 60;
    case "d":
    case "day":
    case "days":
      return fromMs / 1e3 / 60 / 60 / 24;
    case "w":
    case "week":
    case "weeks":
      return fromMs / 1e3 / 60 / 60 / 24 / 7;
    case "month":
    case "months":
      return fromMs / 1e3 / 60 / 60 / 24 / 31;
    case "y":
    case "year":
    case "years":
      return fromMs / 1e3 / 60 / 60 / 24 / 365;
    default:
      throw new Error(`You try to convert "${from}" to "${to}" but this format does not exist... The valids formats are "ms,s,m,h,d,w,month,y"...`);
  }
}
convert$1.MILLISECOND = "ms";
convert$1.SECOND = "s";
convert$1.MINUTE = "m";
convert$1.HOUR = "h";
convert$1.DAY = "d";
convert$1.WEEK = "w";
convert$1.MONTH = "month";
convert$1.YEAR = "y";
class SRequestConfig {
  constructor(params) {
    this.url = null;
    this.baseURL = null;
    this.method = "GET";
    this.headers = {};
    this.params = {};
    this.data = {};
    this.timeout = 0;
    this.sendInterval = 1e3;
    this.sendCount = 1;
    this.everyResponse = null;
    this.responseType = "json";
    if (params.timeout && typeof params.timeout === "string")
      params.timeout = convert$1(params.timeout, "ms");
    if (params.sendInterval && typeof params.sendInterval === "string")
      params.sendInterval = convert$1(params.sendInterval, "ms");
    Object.assign(this, params);
  }
}
class SRequest extends SClass {
  constructor(request2, settings) {
    super(deepMerge$1({
      request: {}
    }, settings !== null && settings !== void 0 ? settings : {}));
    this._defaultRequestSettings = {};
    this._currentRequestSettings = {};
    this._requestsCount = 0;
    if (!(request2 instanceof SRequestConfig)) {
      this._defaultRequestSettings = new SRequestConfig(request2);
    } else {
      this._defaultRequestSettings = request2;
    }
  }
  get requestSettings() {
    return this._settings.request;
  }
  _onSuccess(response) {
    let finalResponse = response.data;
    const contentType = response.headers["content-type"] || "text/plain";
    const hash = this._currentRequestSettings.url.indexOf("#") !== -1 ? this._currentRequestSettings.url.split("#")[1] : false;
    if (contentType === "text/html" && hash !== false && document !== void 0 && document.querySelector !== void 0) {
      const $html = strToHtml(response.data);
      if ($html.id === hash) {
        finalResponse = toStringFn($html);
      } else {
        const $part = $html.querySelector(`#${hash}`);
        if ($part) {
          finalResponse = toStringFn($part);
        }
      }
    } else if (contentType === "application/json") {
      finalResponse = JSON.parse(response.data);
    }
    response.data = finalResponse;
    delete response.config;
    delete response.request;
    this._responsesArray.push(response);
    if (this._currentRequestSettings.everyResponse) {
      this._currentRequestSettings.everyResponse(Object.assign({}, response), this._requestsCount);
    }
    if (this._requestsCount >= this._currentRequestSettings.sendCount) {
      this._resolve(this._responsesArray.length <= 1 ? this._responsesArray[0] : this._responsesArray);
    } else {
      this._send();
    }
  }
  _onError(error2) {
    console.log("EEE", error2);
    this._reject(error2);
  }
  _send(requestSettings = {}) {
    this._requestsCount++;
    requestSettings = deepMerge$1(this._defaultRequestSettings, requestSettings);
    if (requestSettings.beforeSend) {
      requestSettings = requestSettings.beforeSend(requestSettings, this._requestsCount);
    }
    this._currentRequestSettings = Object.assign(requestSettings);
    axios(requestSettings).then(this._onSuccess.bind(this)).catch(this._onError.bind(this));
  }
  retry() {
    return this.send();
  }
  send(requestSettings = {}) {
    return new Promise((resolve2, reject) => {
      this._requestsCount = 0;
      this._responsesArray = [];
      this._resolve = resolve2;
      this._reject = reject;
      this._send(requestSettings);
    });
  }
}
function classInstance(object) {
  if (!object)
    return false;
  if (typeof object !== "object")
    return false;
  if (object.constructor && object.constructor.name === "Object")
    return false;
  if (Object.prototype.toString.call(object) === "[object Object]")
    return false;
  if (object.constructor === Object)
    return false;
  return true;
}
function deepMap(objectOrArray, processor, settings = {}, _path = []) {
  settings = deepMerge({
    classInstances: false,
    array: true,
    privateProps: false,
    cloneFirst: true
  }, settings);
  const isArray2 = Array.isArray(objectOrArray);
  const newObject = isArray2 ? [] : settings.cloneFirst ? Object.assign({}, objectOrArray) : objectOrArray;
  Object.keys(objectOrArray).forEach((prop) => {
    if (!settings.privateProps && prop.match(/^_/))
      return;
    if (plainObject(objectOrArray[prop]) || classInstance(objectOrArray[prop]) && settings.classInstances || Array.isArray(objectOrArray[prop]) && settings.array) {
      const res2 = deepMap(objectOrArray[prop], processor, settings, [
        ..._path,
        prop
      ]);
      if (isArray2) {
        newObject.push(res2);
      } else {
        newObject[prop] = res2;
      }
      return;
    }
    const res = processor({
      object: objectOrArray,
      prop,
      value: objectOrArray[prop],
      path: [..._path, prop].join(".")
    });
    if (res === -1) {
      delete objectOrArray[prop];
      return;
    }
    if (isArray2)
      newObject.push(res);
    else
      newObject[prop] = res;
  });
  return newObject;
}
function isMap(value) {
  return value instanceof Map;
}
function isArray(value) {
  return value && typeof value === "object" && value.constructor === Array;
}
function isBoolean(value) {
  return typeof value === "boolean";
}
function isFunction(value) {
  return value && {}.toString.call(value) === "[object Function]";
}
function isJson(value) {
  try {
    const res = JSON.parse(value);
    if (Object.keys(res).length)
      return true;
    return false;
  } catch (e2) {
    return false;
  }
  return true;
}
function isObject(value) {
  return value && typeof value === "object" && value.constructor === Object;
}
function mapToObject(map) {
  const obj = {};
  for (const [k2, v2] of map)
    obj[k2] = v2;
  return obj;
}
function fn(value, settings = {}) {
  settings = deepMerge({
    beautify: true,
    highlight: true,
    verbose: true,
    theme: {
      number: source$D.yellow,
      default: source$D.white,
      keyword: source$D.blue,
      regexp: source$D.red,
      string: source$D.whiteBright,
      class: source$D.yellow,
      function: source$D.yellow,
      comment: source$D.gray,
      variable: source$D.red,
      attr: source$D.green
    }
  }, settings);
  if (typeof value === "string")
    return value;
  if (value === null)
    return null;
  if (value === void 0)
    return void 0;
  if (value instanceof Error) {
    const errorStr = value.toString();
    const stackStr = value.stack;
    const messageStr = value.message;
    if (settings.verbose) {
      return [
        `<red>${value.constructor.name || "Error"}</red>`,
        "",
        messageStr,
        "",
        stackStr
      ].join("\n");
    }
    return errorStr;
  }
  if (isMap(value)) {
    value = mapToObject(value);
  }
  if (isObject(value) || isArray(value) || isJson(value)) {
    try {
      value = decycle_1(value);
    } catch (e2) {
    }
    value = deepMap(value, ({value: value2}) => {
      if (value2 instanceof Map)
        return mapToObject(value2);
      return value2;
    });
    let prettyString = JSON.stringify(value, null, settings.beautify ? 4 : 0);
    prettyString = prettyString.replace(/"([^"]+)":/g, "$1:").replace(/\uFFFF/g, '\\"');
    if (settings.highlight)
      ;
    return prettyString;
  }
  if (isBoolean(value)) {
    if (value)
      return "true";
    else
      return "false";
  }
  if (isFunction(value)) {
    return "" + value;
  }
  let returnString = "";
  try {
    value = decycle_1(value);
    returnString = JSON.stringify(value, null, settings.beautify ? 4 : 0);
  } catch (e2) {
    try {
      returnString = value.toString();
    } catch (e3) {
      returnString = value;
    }
  }
  return returnString;
}
var parse = (value) => {
  if (typeof value !== "string")
    return value;
  value = value.split("\u2800").join("").trim();
  try {
    return Function(`
      "use strict";
      return (${value});
    `)();
  } catch (e2) {
    return value;
  }
};
const __encryptedMessages = {};
var __md5 = {
  encrypt: function(message) {
    if (typeof message !== "string")
      message = fn(message);
    const string = md5(message).toString();
    __encryptedMessages[string] = message;
    return string;
  },
  decrypt: function(message) {
    if (!__encryptedMessages[message]) {
      console.warn(`The message "${message}" cannot be decrypted...`);
      return;
    }
    const string = __encryptedMessages[message];
    delete __encryptedMessages[message];
    return parse(string);
  }
};
function cls(cls2) {
  if (!Array.isArray(cls2))
    cls2 = [cls2];
  for (let i2 = 0; i2 < cls2.length; i2++) {
    if (!__isClass(cls2[i2]))
      return false;
  }
  return true;
}
function convert(from, to = "ms") {
  let fromMs = from;
  if (typeof from === "string") {
    const fromNumber = parseFloat(from);
    const fromLength = fromNumber.toString().length;
    const fromString = from.slice(fromLength);
    if (fromString === "ms" || fromString === "millisecond" || fromString === "milliseconds") {
      fromMs = fromNumber;
    } else if (fromString === "s" || fromString === "second" || fromString === "seconds") {
      fromMs = fromNumber * 1e3;
    } else if (fromString === "m" || fromString === "minute" || fromString === "minutes") {
      fromMs = fromNumber * 60 * 1e3;
    } else if (fromString === "h" || fromString === "hour" || fromString === "hours") {
      fromMs = fromNumber * 60 * 60 * 1e3;
    } else if (fromString === "d" || fromString === "day" || fromString === "days") {
      fromMs = fromNumber * 24 * 60 * 60 * 1e3;
    } else if (fromString === "w" || fromString === "week" || fromString === "weeks") {
      fromMs = fromNumber * 7 * 24 * 60 * 60 * 1e3;
    } else if (fromString === "month" || fromString === "months") {
      fromMs = fromNumber * 31 * 24 * 60 * 60 * 1e3;
    } else if (fromString === "y" || fromString === "year" || fromString === "years") {
      fromMs = fromNumber * 365 * 24 * 60 * 60 * 1e3;
    }
  }
  switch (to) {
    case "ms":
    case "millisecond":
    case "milliseconds":
      return fromMs;
    case "s":
    case "second":
    case "seconds":
      return fromMs / 1e3;
    case "m":
    case "minute":
    case "minutes":
      return fromMs / 1e3 / 60;
    case "h":
    case "hour":
    case "hours":
      return fromMs / 1e3 / 60 / 60;
    case "d":
    case "day":
    case "days":
      return fromMs / 1e3 / 60 / 60 / 24;
    case "w":
    case "week":
    case "weeks":
      return fromMs / 1e3 / 60 / 60 / 24 / 7;
    case "month":
    case "months":
      return fromMs / 1e3 / 60 / 60 / 24 / 31;
    case "y":
    case "year":
    case "years":
      return fromMs / 1e3 / 60 / 60 / 24 / 365;
    default:
      throw new Error(`You try to convert "${from}" to "${to}" but this format does not exist... The valids formats are "ms,s,m,h,d,w,month,y"...`);
  }
}
convert.MILLISECOND = "ms";
convert.SECOND = "s";
convert.MINUTE = "m";
convert.HOUR = "h";
convert.DAY = "d";
convert.WEEK = "w";
convert.MONTH = "month";
convert.YEAR = "y";
class SCacheAdapter extends SClass {
  constructor(settings = {}) {
    super(deepMerge({
      cacheAdapter: {}
    }, settings));
  }
  setCache(cache) {
    this.cache = cache;
  }
}
var __awaiter$1 = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve2) {
      resolve2(value);
    });
  }
  return new (P || (P = Promise))(function(resolve2, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e2) {
        reject(e2);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e2) {
        reject(e2);
      }
    }
    function step(result) {
      result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
class SCacheLsAdapter extends SCacheAdapter {
  constructor(settings = {}) {
    super(deepMerge({}, settings));
  }
  set(name2, value) {
    return __awaiter$1(this, void 0, void 0, function* () {
      window.localStorage.setItem(`${this.cache.id}.${name2}`, value);
      return true;
    });
  }
  get(name2) {
    return __awaiter$1(this, void 0, void 0, function* () {
      return window.localStorage.getItem(`${this.cache.id}.${name2}`);
    });
  }
  delete(name2) {
    return __awaiter$1(this, void 0, void 0, function* () {
      window.localStorage.removeItem(`${this.cache.id}.${name2}`);
      return true;
    });
  }
  clear() {
    return __awaiter$1(this, void 0, void 0, function* () {
      const keys = Object.keys(window.localStorage);
      const keysToDelete = keys.filter((key) => {
        return key.startsWith(`${this.cache.id}.`);
      });
      keysToDelete.forEach((k2) => {
        window.localStorage.removeItem(k2);
      });
      return true;
    });
  }
  keys() {
    return __awaiter$1(this, void 0, void 0, function* () {
      const keys = Object.keys(window.localStorage);
      const cacheKeys = keys.filter((key) => {
        return key.startsWith(`${this.cache.id}.`);
      });
      return cacheKeys;
    });
  }
}
SCacheLsAdapter.id = "ls";
var __isNode = () => {
  return typeof process !== "undefined" && process.release && process.release.name === "node";
};
class SCacheSettingsInterface extends SInterface {
}
SCacheSettingsInterface.definition = {
  name: {
    type: "String",
    required: true,
    default: "SCache"
  },
  ttl: {
    type: "Number",
    required: true,
    default: -1
  },
  deleteOnExpire: {
    type: "Boolean",
    required: true,
    default: true
  },
  adapter: {
    type: "String",
    required: true,
    default: __isNode() ? "fs" : "ls"
  },
  parse: {
    type: "Function",
    required: true,
    default: JSON.parse
  },
  stringify: {
    type: "Function",
    required: true,
    default: JSON.stringify
  }
};
var __awaiter = function(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve2) {
      resolve2(value);
    });
  }
  return new (P || (P = Promise))(function(resolve2, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e2) {
        reject(e2);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e2) {
        reject(e2);
      }
    }
    function step(result) {
      result.done ? resolve2(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
class SCache extends SClass {
  constructor(id2, settings = {}) {
    super(deepMerge({
      cache: {
        clearOnExit: false
      }
    }, settings));
    this.id = id2;
    if (__isNode$1()) {
      this.constructor.registerAdapter(require("../node/adapters/SCacheFsAdapter").default);
      if (this.cacheSettings.clearOnExit) {
        const __onProcessExit = require("@coffeekraken/sugar/node/process/onProcessExit").default;
        const __parseHtml = require("@coffeekraken/sugar/node/terminal/parseHtml").default;
        __onProcessExit(() => __awaiter(this, void 0, void 0, function* () {
          console.log(__parseHtml(`<yellow>[${this.constructor.name}.${this.id}]</yellow> Clearing the cache`));
          yield this.clear();
        }));
      }
    } else {
      this.constructor.registerAdapter(SCacheLsAdapter);
    }
    if (!id2) {
      throw new Error(`The SCache instance need an id. To set it, pass the "id" as the first argument of the constructor...`);
    }
    if (!/^[a-zA-Z0-9-_\.]+$/.test(id2)) {
      throw new Error(`The name of an SCache instance can contain only letters like <green>[a-zA-Z0-9_-.]</green> but you've passed "<red>${name}</red>"...`);
    }
  }
  get cacheSettings() {
    return this._settings.cache;
  }
  static registerAdapter(adapter, id2) {
    if (this.registeredAdapters[id2 || adapter.id])
      return;
    this.registeredAdapters[id2 || adapter.id] = adapter;
  }
  get adapter() {
    if (this._adapter)
      return this._adapter;
    const adptr = this.constructor.registeredAdapters[this.cacheSettings.adapter];
    if (!adptr) {
      throw `Sorry but it seems that the requested SCache adapter "<yellow>${this.cacheSettings.adapter}</yellow>" does not exists...`;
    }
    if (cls(adptr)) {
      this._adapter = new adptr();
    } else if (adptr !== void 0) {
      this._adapter = adptr;
    }
    this._adapter && this._adapter.setCache(this);
    return this._adapter;
  }
  get(name2, settings) {
    return __awaiter(this, void 0, void 0, function* () {
      const set2 = Object.assign({valueOnly: true}, settings || {});
      if (typeof name2 !== "string") {
        name2 = __md5.encrypt(fn(name2));
      }
      const adapter = this.adapter;
      const rawValue2 = yield adapter.get(name2);
      if (!rawValue2 || typeof rawValue2 !== "string")
        return null;
      const value = adapter.parse ? adapter.parse(rawValue2) : this._parse(rawValue2);
      let contextHash = void 0;
      if (set2.context !== void 0)
        contextHash = __md5.encrypt(set2.context);
      if (contextHash && value.contextHash !== void 0 && contextHash !== value.contextHash) {
        yield adapter.delete(name2);
        return null;
      }
      if (value.deleteAt !== -1 && value.deleteAt < new Date().getTime()) {
        if (value.deleteOnExpire)
          yield adapter.delete(name2);
        return null;
      }
      if (set2.valueOnly)
        return value.value;
      return value;
    });
  }
  set(name2, value, settings) {
    return __awaiter(this, void 0, void 0, function* () {
      const set2 = Object.assign({}, settings || {});
      if (typeof name2 !== "string") {
        name2 = __md5.encrypt(fn(name2)).toString();
      }
      let contextHash = null;
      if (set2.context !== void 0) {
        contextHash = __md5.encrypt(set2.context);
      }
      const adapter = this.adapter;
      const existingValue = yield this.get(name2, Object.assign(Object.assign({}, set2), {valueOnly: false}));
      const finalSettings = deepMerge({
        ttl: this.cacheSettings.ttl,
        deleteOnExpire: this.cacheSettings.deleteOnExpire
      }, set2);
      const deleteAt = finalSettings.ttl === -1 ? -1 : new Date().getTime() + convert(typeof finalSettings.ttl === "number" ? `${finalSettings.ttl}s` : finalSettings.ttl, "ms");
      const valueToSave = {
        name: name2,
        value,
        contextHash,
        created: existingValue ? existingValue.created : new Date().getTime(),
        updated: new Date().getTime(),
        deleteAt,
        settings: finalSettings
      };
      const stringifiedValueToSave = adapter.stringify ? adapter.stringify(valueToSave) : this._stringify(valueToSave);
      return adapter.set(name2, stringifiedValueToSave);
    });
  }
  exists(name2) {
    return __awaiter(this, void 0, void 0, function* () {
      const value = yield this.get(name2);
      if (value)
        return true;
      return false;
    });
  }
  delete(name2) {
    return __awaiter(this, void 0, void 0, function* () {
      const adapter = this.adapter;
      return adapter.delete(name2);
    });
  }
  clear() {
    return __awaiter(this, void 0, void 0, function* () {
      const adapter = this.adapter;
      return adapter.clear();
    });
  }
  _parse(rawValue2) {
    return this.cacheSettings.parse(rawValue2);
  }
  _stringify(object) {
    return this.cacheSettings.stringify(object);
  }
}
SCache.interfaces = {
  settings: {
    apply: true,
    on: "_settings.cache",
    class: SCacheSettingsInterface
  }
};
SCache.registeredAdapters = {};
var dist = {};
function deepFreeze(obj) {
  if (obj instanceof Map) {
    obj.clear = obj.delete = obj.set = function() {
      throw new Error("map is read-only");
    };
  } else if (obj instanceof Set) {
    obj.add = obj.clear = obj.delete = function() {
      throw new Error("set is read-only");
    };
  }
  Object.freeze(obj);
  Object.getOwnPropertyNames(obj).forEach(function(name2) {
    var prop = obj[name2];
    if (typeof prop == "object" && !Object.isFrozen(prop)) {
      deepFreeze(prop);
    }
  });
  return obj;
}
var deepFreezeEs6 = deepFreeze;
var _default$1 = deepFreeze;
deepFreezeEs6.default = _default$1;
class Response {
  constructor(mode) {
    if (mode.data === void 0)
      mode.data = {};
    this.data = mode.data;
    this.isMatchIgnored = false;
  }
  ignoreMatch() {
    this.isMatchIgnored = true;
  }
}
function escapeHTML(value) {
  return value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;");
}
function inherit(original, ...objects) {
  const result = Object.create(null);
  for (const key in original) {
    result[key] = original[key];
  }
  objects.forEach(function(obj) {
    for (const key in obj) {
      result[key] = obj[key];
    }
  });
  return result;
}
const SPAN_CLOSE = "</span>";
const emitsWrappingTags = (node) => {
  return !!node.kind;
};
class HTMLRenderer {
  constructor(parseTree, options) {
    this.buffer = "";
    this.classPrefix = options.classPrefix;
    parseTree.walk(this);
  }
  addText(text) {
    this.buffer += escapeHTML(text);
  }
  openNode(node) {
    if (!emitsWrappingTags(node))
      return;
    let className = node.kind;
    if (!node.sublanguage) {
      className = `${this.classPrefix}${className}`;
    }
    this.span(className);
  }
  closeNode(node) {
    if (!emitsWrappingTags(node))
      return;
    this.buffer += SPAN_CLOSE;
  }
  value() {
    return this.buffer;
  }
  span(className) {
    this.buffer += `<span class="${className}">`;
  }
}
class TokenTree {
  constructor() {
    this.rootNode = {children: []};
    this.stack = [this.rootNode];
  }
  get top() {
    return this.stack[this.stack.length - 1];
  }
  get root() {
    return this.rootNode;
  }
  add(node) {
    this.top.children.push(node);
  }
  openNode(kind) {
    const node = {kind, children: []};
    this.add(node);
    this.stack.push(node);
  }
  closeNode() {
    if (this.stack.length > 1) {
      return this.stack.pop();
    }
    return void 0;
  }
  closeAllNodes() {
    while (this.closeNode())
      ;
  }
  toJSON() {
    return JSON.stringify(this.rootNode, null, 4);
  }
  walk(builder) {
    return this.constructor._walk(builder, this.rootNode);
  }
  static _walk(builder, node) {
    if (typeof node === "string") {
      builder.addText(node);
    } else if (node.children) {
      builder.openNode(node);
      node.children.forEach((child) => this._walk(builder, child));
      builder.closeNode(node);
    }
    return builder;
  }
  static _collapse(node) {
    if (typeof node === "string")
      return;
    if (!node.children)
      return;
    if (node.children.every((el) => typeof el === "string")) {
      node.children = [node.children.join("")];
    } else {
      node.children.forEach((child) => {
        TokenTree._collapse(child);
      });
    }
  }
}
class TokenTreeEmitter extends TokenTree {
  constructor(options) {
    super();
    this.options = options;
  }
  addKeyword(text, kind) {
    if (text === "") {
      return;
    }
    this.openNode(kind);
    this.addText(text);
    this.closeNode();
  }
  addText(text) {
    if (text === "") {
      return;
    }
    this.add(text);
  }
  addSublanguage(emitter, name2) {
    const node = emitter.root;
    node.kind = name2;
    node.sublanguage = true;
    this.add(node);
  }
  toHTML() {
    const renderer = new HTMLRenderer(this, this.options);
    return renderer.value();
  }
  finalize() {
    return true;
  }
}
function escape$1(value) {
  return new RegExp(value.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&"), "m");
}
function source$C(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function concat$B(...args) {
  const joined = args.map((x2) => source$C(x2)).join("");
  return joined;
}
function either$d(...args) {
  const joined = "(" + args.map((x2) => source$C(x2)).join("|") + ")";
  return joined;
}
function countMatchGroups(re) {
  return new RegExp(re.toString() + "|").exec("").length - 1;
}
function startsWith(re, lexeme) {
  const match2 = re && re.exec(lexeme);
  return match2 && match2.index === 0;
}
const BACKREF_RE = /\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;
function join(regexps, separator = "|") {
  let numCaptures = 0;
  return regexps.map((regex) => {
    numCaptures += 1;
    const offset2 = numCaptures;
    let re = source$C(regex);
    let out = "";
    while (re.length > 0) {
      const match2 = BACKREF_RE.exec(re);
      if (!match2) {
        out += re;
        break;
      }
      out += re.substring(0, match2.index);
      re = re.substring(match2.index + match2[0].length);
      if (match2[0][0] === "\\" && match2[1]) {
        out += "\\" + String(Number(match2[1]) + offset2);
      } else {
        out += match2[0];
        if (match2[0] === "(") {
          numCaptures++;
        }
      }
    }
    return out;
  }).map((re) => `(${re})`).join(separator);
}
const MATCH_NOTHING_RE = /\b\B/;
const IDENT_RE$2 = "[a-zA-Z]\\w*";
const UNDERSCORE_IDENT_RE = "[a-zA-Z_]\\w*";
const NUMBER_RE = "\\b\\d+(\\.\\d+)?";
const C_NUMBER_RE = "(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)";
const BINARY_NUMBER_RE = "\\b(0b[01]+)";
const RE_STARTERS_RE = "!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~";
const SHEBANG = (opts = {}) => {
  const beginShebang = /^#![ ]*\//;
  if (opts.binary) {
    opts.begin = concat$B(beginShebang, /.*\b/, opts.binary, /\b.*/);
  }
  return inherit({
    className: "meta",
    begin: beginShebang,
    end: /$/,
    relevance: 0,
    "on:begin": (m2, resp) => {
      if (m2.index !== 0)
        resp.ignoreMatch();
    }
  }, opts);
};
const BACKSLASH_ESCAPE = {
  begin: "\\\\[\\s\\S]",
  relevance: 0
};
const APOS_STRING_MODE = {
  className: "string",
  begin: "'",
  end: "'",
  illegal: "\\n",
  contains: [BACKSLASH_ESCAPE]
};
const QUOTE_STRING_MODE = {
  className: "string",
  begin: '"',
  end: '"',
  illegal: "\\n",
  contains: [BACKSLASH_ESCAPE]
};
const PHRASAL_WORDS_MODE = {
  begin: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/
};
const COMMENT = function(begin, end, modeOptions = {}) {
  const mode = inherit({
    className: "comment",
    begin,
    end,
    contains: []
  }, modeOptions);
  mode.contains.push(PHRASAL_WORDS_MODE);
  mode.contains.push({
    className: "doctag",
    begin: "(?:TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):",
    relevance: 0
  });
  return mode;
};
const C_LINE_COMMENT_MODE = COMMENT("//", "$");
const C_BLOCK_COMMENT_MODE = COMMENT("/\\*", "\\*/");
const HASH_COMMENT_MODE = COMMENT("#", "$");
const NUMBER_MODE = {
  className: "number",
  begin: NUMBER_RE,
  relevance: 0
};
const C_NUMBER_MODE = {
  className: "number",
  begin: C_NUMBER_RE,
  relevance: 0
};
const BINARY_NUMBER_MODE = {
  className: "number",
  begin: BINARY_NUMBER_RE,
  relevance: 0
};
const CSS_NUMBER_MODE = {
  className: "number",
  begin: NUMBER_RE + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
  relevance: 0
};
const REGEXP_MODE = {
  begin: /(?=\/[^/\n]*\/)/,
  contains: [{
    className: "regexp",
    begin: /\//,
    end: /\/[gimuy]*/,
    illegal: /\n/,
    contains: [
      BACKSLASH_ESCAPE,
      {
        begin: /\[/,
        end: /\]/,
        relevance: 0,
        contains: [BACKSLASH_ESCAPE]
      }
    ]
  }]
};
const TITLE_MODE = {
  className: "title",
  begin: IDENT_RE$2,
  relevance: 0
};
const UNDERSCORE_TITLE_MODE = {
  className: "title",
  begin: UNDERSCORE_IDENT_RE,
  relevance: 0
};
const METHOD_GUARD = {
  begin: "\\.\\s*" + UNDERSCORE_IDENT_RE,
  relevance: 0
};
const END_SAME_AS_BEGIN = function(mode) {
  return Object.assign(mode, {
    "on:begin": (m2, resp) => {
      resp.data._beginMatch = m2[1];
    },
    "on:end": (m2, resp) => {
      if (resp.data._beginMatch !== m2[1])
        resp.ignoreMatch();
    }
  });
};
var MODES$4 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  MATCH_NOTHING_RE,
  IDENT_RE: IDENT_RE$2,
  UNDERSCORE_IDENT_RE,
  NUMBER_RE,
  C_NUMBER_RE,
  BINARY_NUMBER_RE,
  RE_STARTERS_RE,
  SHEBANG,
  BACKSLASH_ESCAPE,
  APOS_STRING_MODE,
  QUOTE_STRING_MODE,
  PHRASAL_WORDS_MODE,
  COMMENT,
  C_LINE_COMMENT_MODE,
  C_BLOCK_COMMENT_MODE,
  HASH_COMMENT_MODE,
  NUMBER_MODE,
  C_NUMBER_MODE,
  BINARY_NUMBER_MODE,
  CSS_NUMBER_MODE,
  REGEXP_MODE,
  TITLE_MODE,
  UNDERSCORE_TITLE_MODE,
  METHOD_GUARD,
  END_SAME_AS_BEGIN
});
function skipIfhasPrecedingDot(match2, response) {
  const before = match2.input[match2.index - 1];
  if (before === ".") {
    response.ignoreMatch();
  }
}
function beginKeywords(mode, parent) {
  if (!parent)
    return;
  if (!mode.beginKeywords)
    return;
  mode.begin = "\\b(" + mode.beginKeywords.split(" ").join("|") + ")(?!\\.)(?=\\b|\\s)";
  mode.__beforeBegin = skipIfhasPrecedingDot;
  mode.keywords = mode.keywords || mode.beginKeywords;
  delete mode.beginKeywords;
  if (mode.relevance === void 0)
    mode.relevance = 0;
}
function compileIllegal(mode, _parent) {
  if (!Array.isArray(mode.illegal))
    return;
  mode.illegal = either$d(...mode.illegal);
}
function compileMatch(mode, _parent) {
  if (!mode.match)
    return;
  if (mode.begin || mode.end)
    throw new Error("begin & end are not supported with match");
  mode.begin = mode.match;
  delete mode.match;
}
function compileRelevance(mode, _parent) {
  if (mode.relevance === void 0)
    mode.relevance = 1;
}
const COMMON_KEYWORDS = [
  "of",
  "and",
  "for",
  "in",
  "not",
  "or",
  "if",
  "then",
  "parent",
  "list",
  "value"
];
const DEFAULT_KEYWORD_CLASSNAME = "keyword";
function compileKeywords(rawKeywords, caseInsensitive, className = DEFAULT_KEYWORD_CLASSNAME) {
  const compiledKeywords = {};
  if (typeof rawKeywords === "string") {
    compileList(className, rawKeywords.split(" "));
  } else if (Array.isArray(rawKeywords)) {
    compileList(className, rawKeywords);
  } else {
    Object.keys(rawKeywords).forEach(function(className2) {
      Object.assign(compiledKeywords, compileKeywords(rawKeywords[className2], caseInsensitive, className2));
    });
  }
  return compiledKeywords;
  function compileList(className2, keywordList) {
    if (caseInsensitive) {
      keywordList = keywordList.map((x2) => x2.toLowerCase());
    }
    keywordList.forEach(function(keyword) {
      const pair = keyword.split("|");
      compiledKeywords[pair[0]] = [className2, scoreForKeyword(pair[0], pair[1])];
    });
  }
}
function scoreForKeyword(keyword, providedScore) {
  if (providedScore) {
    return Number(providedScore);
  }
  return commonKeyword(keyword) ? 0 : 1;
}
function commonKeyword(keyword) {
  return COMMON_KEYWORDS.includes(keyword.toLowerCase());
}
function compileLanguage(language, {plugins}) {
  function langRe(value, global2) {
    return new RegExp(source$C(value), "m" + (language.case_insensitive ? "i" : "") + (global2 ? "g" : ""));
  }
  class MultiRegex {
    constructor() {
      this.matchIndexes = {};
      this.regexes = [];
      this.matchAt = 1;
      this.position = 0;
    }
    addRule(re, opts) {
      opts.position = this.position++;
      this.matchIndexes[this.matchAt] = opts;
      this.regexes.push([opts, re]);
      this.matchAt += countMatchGroups(re) + 1;
    }
    compile() {
      if (this.regexes.length === 0) {
        this.exec = () => null;
      }
      const terminators = this.regexes.map((el) => el[1]);
      this.matcherRe = langRe(join(terminators), true);
      this.lastIndex = 0;
    }
    exec(s2) {
      this.matcherRe.lastIndex = this.lastIndex;
      const match2 = this.matcherRe.exec(s2);
      if (!match2) {
        return null;
      }
      const i2 = match2.findIndex((el, i3) => i3 > 0 && el !== void 0);
      const matchData = this.matchIndexes[i2];
      match2.splice(0, i2);
      return Object.assign(match2, matchData);
    }
  }
  class ResumableMultiRegex {
    constructor() {
      this.rules = [];
      this.multiRegexes = [];
      this.count = 0;
      this.lastIndex = 0;
      this.regexIndex = 0;
    }
    getMatcher(index) {
      if (this.multiRegexes[index])
        return this.multiRegexes[index];
      const matcher = new MultiRegex();
      this.rules.slice(index).forEach(([re, opts]) => matcher.addRule(re, opts));
      matcher.compile();
      this.multiRegexes[index] = matcher;
      return matcher;
    }
    resumingScanAtSamePosition() {
      return this.regexIndex !== 0;
    }
    considerAll() {
      this.regexIndex = 0;
    }
    addRule(re, opts) {
      this.rules.push([re, opts]);
      if (opts.type === "begin")
        this.count++;
    }
    exec(s2) {
      const m2 = this.getMatcher(this.regexIndex);
      m2.lastIndex = this.lastIndex;
      let result = m2.exec(s2);
      if (this.resumingScanAtSamePosition()) {
        if (result && result.index === this.lastIndex)
          ;
        else {
          const m22 = this.getMatcher(0);
          m22.lastIndex = this.lastIndex + 1;
          result = m22.exec(s2);
        }
      }
      if (result) {
        this.regexIndex += result.position + 1;
        if (this.regexIndex === this.count) {
          this.considerAll();
        }
      }
      return result;
    }
  }
  function buildModeRegex(mode) {
    const mm = new ResumableMultiRegex();
    mode.contains.forEach((term) => mm.addRule(term.begin, {rule: term, type: "begin"}));
    if (mode.terminatorEnd) {
      mm.addRule(mode.terminatorEnd, {type: "end"});
    }
    if (mode.illegal) {
      mm.addRule(mode.illegal, {type: "illegal"});
    }
    return mm;
  }
  function compileMode(mode, parent) {
    const cmode = mode;
    if (mode.isCompiled)
      return cmode;
    [
      compileMatch
    ].forEach((ext2) => ext2(mode, parent));
    language.compilerExtensions.forEach((ext2) => ext2(mode, parent));
    mode.__beforeBegin = null;
    [
      beginKeywords,
      compileIllegal,
      compileRelevance
    ].forEach((ext2) => ext2(mode, parent));
    mode.isCompiled = true;
    let keywordPattern = null;
    if (typeof mode.keywords === "object") {
      keywordPattern = mode.keywords.$pattern;
      delete mode.keywords.$pattern;
    }
    if (mode.keywords) {
      mode.keywords = compileKeywords(mode.keywords, language.case_insensitive);
    }
    if (mode.lexemes && keywordPattern) {
      throw new Error("ERR: Prefer `keywords.$pattern` to `mode.lexemes`, BOTH are not allowed. (see mode reference) ");
    }
    keywordPattern = keywordPattern || mode.lexemes || /\w+/;
    cmode.keywordPatternRe = langRe(keywordPattern, true);
    if (parent) {
      if (!mode.begin)
        mode.begin = /\B|\b/;
      cmode.beginRe = langRe(mode.begin);
      if (mode.endSameAsBegin)
        mode.end = mode.begin;
      if (!mode.end && !mode.endsWithParent)
        mode.end = /\B|\b/;
      if (mode.end)
        cmode.endRe = langRe(mode.end);
      cmode.terminatorEnd = source$C(mode.end) || "";
      if (mode.endsWithParent && parent.terminatorEnd) {
        cmode.terminatorEnd += (mode.end ? "|" : "") + parent.terminatorEnd;
      }
    }
    if (mode.illegal)
      cmode.illegalRe = langRe(mode.illegal);
    if (!mode.contains)
      mode.contains = [];
    mode.contains = [].concat(...mode.contains.map(function(c2) {
      return expandOrCloneMode(c2 === "self" ? mode : c2);
    }));
    mode.contains.forEach(function(c2) {
      compileMode(c2, cmode);
    });
    if (mode.starts) {
      compileMode(mode.starts, parent);
    }
    cmode.matcher = buildModeRegex(cmode);
    return cmode;
  }
  if (!language.compilerExtensions)
    language.compilerExtensions = [];
  if (language.contains && language.contains.includes("self")) {
    throw new Error("ERR: contains `self` is not supported at the top-level of a language.  See documentation.");
  }
  language.classNameAliases = inherit(language.classNameAliases || {});
  return compileMode(language);
}
function dependencyOnParent(mode) {
  if (!mode)
    return false;
  return mode.endsWithParent || dependencyOnParent(mode.starts);
}
function expandOrCloneMode(mode) {
  if (mode.variants && !mode.cachedVariants) {
    mode.cachedVariants = mode.variants.map(function(variant) {
      return inherit(mode, {variants: null}, variant);
    });
  }
  if (mode.cachedVariants) {
    return mode.cachedVariants;
  }
  if (dependencyOnParent(mode)) {
    return inherit(mode, {starts: mode.starts ? inherit(mode.starts) : null});
  }
  if (Object.isFrozen(mode)) {
    return inherit(mode);
  }
  return mode;
}
var version = "10.7.2";
function hasValueOrEmptyAttribute(value) {
  return Boolean(value || value === "");
}
function BuildVuePlugin(hljs2) {
  const Component2 = {
    props: ["language", "code", "autodetect"],
    data: function() {
      return {
        detectedLanguage: "",
        unknownLanguage: false
      };
    },
    computed: {
      className() {
        if (this.unknownLanguage)
          return "";
        return "hljs " + this.detectedLanguage;
      },
      highlighted() {
        if (!this.autoDetect && !hljs2.getLanguage(this.language)) {
          console.warn(`The language "${this.language}" you specified could not be found.`);
          this.unknownLanguage = true;
          return escapeHTML(this.code);
        }
        let result = {};
        if (this.autoDetect) {
          result = hljs2.highlightAuto(this.code);
          this.detectedLanguage = result.language;
        } else {
          result = hljs2.highlight(this.language, this.code, this.ignoreIllegals);
          this.detectedLanguage = this.language;
        }
        return result.value;
      },
      autoDetect() {
        return !this.language || hasValueOrEmptyAttribute(this.autodetect);
      },
      ignoreIllegals() {
        return true;
      }
    },
    render(createElement) {
      return createElement("pre", {}, [
        createElement("code", {
          class: this.className,
          domProps: {innerHTML: this.highlighted}
        })
      ]);
    }
  };
  const VuePlugin = {
    install(Vue) {
      Vue.component("highlightjs", Component2);
    }
  };
  return {Component: Component2, VuePlugin};
}
const mergeHTMLPlugin = {
  "after:highlightElement": ({el, result, text}) => {
    const originalStream = nodeStream(el);
    if (!originalStream.length)
      return;
    const resultNode = document.createElement("div");
    resultNode.innerHTML = result.value;
    result.value = mergeStreams(originalStream, nodeStream(resultNode), text);
  }
};
function tag(node) {
  return node.nodeName.toLowerCase();
}
function nodeStream(node) {
  const result = [];
  (function _nodeStream(node2, offset2) {
    for (let child = node2.firstChild; child; child = child.nextSibling) {
      if (child.nodeType === 3) {
        offset2 += child.nodeValue.length;
      } else if (child.nodeType === 1) {
        result.push({
          event: "start",
          offset: offset2,
          node: child
        });
        offset2 = _nodeStream(child, offset2);
        if (!tag(child).match(/br|hr|img|input/)) {
          result.push({
            event: "stop",
            offset: offset2,
            node: child
          });
        }
      }
    }
    return offset2;
  })(node, 0);
  return result;
}
function mergeStreams(original, highlighted, value) {
  let processed = 0;
  let result = "";
  const nodeStack = [];
  function selectStream() {
    if (!original.length || !highlighted.length) {
      return original.length ? original : highlighted;
    }
    if (original[0].offset !== highlighted[0].offset) {
      return original[0].offset < highlighted[0].offset ? original : highlighted;
    }
    return highlighted[0].event === "start" ? original : highlighted;
  }
  function open(node) {
    function attributeString(attr) {
      return " " + attr.nodeName + '="' + escapeHTML(attr.value) + '"';
    }
    result += "<" + tag(node) + [].map.call(node.attributes, attributeString).join("") + ">";
  }
  function close(node) {
    result += "</" + tag(node) + ">";
  }
  function render3(event) {
    (event.event === "start" ? open : close)(event.node);
  }
  while (original.length || highlighted.length) {
    let stream = selectStream();
    result += escapeHTML(value.substring(processed, stream[0].offset));
    processed = stream[0].offset;
    if (stream === original) {
      nodeStack.reverse().forEach(close);
      do {
        render3(stream.splice(0, 1)[0]);
        stream = selectStream();
      } while (stream === original && stream.length && stream[0].offset === processed);
      nodeStack.reverse().forEach(open);
    } else {
      if (stream[0].event === "start") {
        nodeStack.push(stream[0].node);
      } else {
        nodeStack.pop();
      }
      render3(stream.splice(0, 1)[0]);
    }
  }
  return result + escapeHTML(value.substr(processed));
}
const seenDeprecations = {};
const error = (message) => {
  console.error(message);
};
const warn = (message, ...args) => {
  console.log(`WARN: ${message}`, ...args);
};
const deprecated = (version2, message) => {
  if (seenDeprecations[`${version2}/${message}`])
    return;
  console.log(`Deprecated as of ${version2}. ${message}`);
  seenDeprecations[`${version2}/${message}`] = true;
};
const escape$1$1 = escapeHTML;
const inherit$1 = inherit;
const NO_MATCH = Symbol("nomatch");
const HLJS = function(hljs2) {
  const languages = Object.create(null);
  const aliases = Object.create(null);
  const plugins = [];
  let SAFE_MODE = true;
  const fixMarkupRe = /(^(<[^>]+>|\t|)+|\n)/gm;
  const LANGUAGE_NOT_FOUND = "Could not find the language '{}', did you forget to load/include a language module?";
  const PLAINTEXT_LANGUAGE = {disableAutodetect: true, name: "Plain text", contains: []};
  let options = {
    noHighlightRe: /^(no-?highlight)$/i,
    languageDetectRe: /\blang(?:uage)?-([\w-]+)\b/i,
    classPrefix: "hljs-",
    tabReplace: null,
    useBR: false,
    languages: null,
    __emitter: TokenTreeEmitter
  };
  function shouldNotHighlight(languageName) {
    return options.noHighlightRe.test(languageName);
  }
  function blockLanguage(block) {
    let classes = block.className + " ";
    classes += block.parentNode ? block.parentNode.className : "";
    const match2 = options.languageDetectRe.exec(classes);
    if (match2) {
      const language = getLanguage(match2[1]);
      if (!language) {
        warn(LANGUAGE_NOT_FOUND.replace("{}", match2[1]));
        warn("Falling back to no-highlight mode for this block.", block);
      }
      return language ? match2[1] : "no-highlight";
    }
    return classes.split(/\s+/).find((_class) => shouldNotHighlight(_class) || getLanguage(_class));
  }
  function highlight2(codeOrlanguageName, optionsOrCode, ignoreIllegals, continuation) {
    let code3 = "";
    let languageName = "";
    if (typeof optionsOrCode === "object") {
      code3 = codeOrlanguageName;
      ignoreIllegals = optionsOrCode.ignoreIllegals;
      languageName = optionsOrCode.language;
      continuation = void 0;
    } else {
      deprecated("10.7.0", "highlight(lang, code, ...args) has been deprecated.");
      deprecated("10.7.0", "Please use highlight(code, options) instead.\nhttps://github.com/highlightjs/highlight.js/issues/2277");
      languageName = codeOrlanguageName;
      code3 = optionsOrCode;
    }
    const context = {
      code: code3,
      language: languageName
    };
    fire("before:highlight", context);
    const result = context.result ? context.result : _highlight(context.language, context.code, ignoreIllegals, continuation);
    result.code = context.code;
    fire("after:highlight", result);
    return result;
  }
  function _highlight(languageName, codeToHighlight, ignoreIllegals, continuation) {
    function keywordData(mode, match2) {
      const matchText = language.case_insensitive ? match2[0].toLowerCase() : match2[0];
      return Object.prototype.hasOwnProperty.call(mode.keywords, matchText) && mode.keywords[matchText];
    }
    function processKeywords() {
      if (!top.keywords) {
        emitter.addText(modeBuffer);
        return;
      }
      let lastIndex = 0;
      top.keywordPatternRe.lastIndex = 0;
      let match2 = top.keywordPatternRe.exec(modeBuffer);
      let buf = "";
      while (match2) {
        buf += modeBuffer.substring(lastIndex, match2.index);
        const data = keywordData(top, match2);
        if (data) {
          const [kind, keywordRelevance] = data;
          emitter.addText(buf);
          buf = "";
          relevance += keywordRelevance;
          if (kind.startsWith("_")) {
            buf += match2[0];
          } else {
            const cssClass = language.classNameAliases[kind] || kind;
            emitter.addKeyword(match2[0], cssClass);
          }
        } else {
          buf += match2[0];
        }
        lastIndex = top.keywordPatternRe.lastIndex;
        match2 = top.keywordPatternRe.exec(modeBuffer);
      }
      buf += modeBuffer.substr(lastIndex);
      emitter.addText(buf);
    }
    function processSubLanguage() {
      if (modeBuffer === "")
        return;
      let result2 = null;
      if (typeof top.subLanguage === "string") {
        if (!languages[top.subLanguage]) {
          emitter.addText(modeBuffer);
          return;
        }
        result2 = _highlight(top.subLanguage, modeBuffer, true, continuations[top.subLanguage]);
        continuations[top.subLanguage] = result2.top;
      } else {
        result2 = highlightAuto(modeBuffer, top.subLanguage.length ? top.subLanguage : null);
      }
      if (top.relevance > 0) {
        relevance += result2.relevance;
      }
      emitter.addSublanguage(result2.emitter, result2.language);
    }
    function processBuffer() {
      if (top.subLanguage != null) {
        processSubLanguage();
      } else {
        processKeywords();
      }
      modeBuffer = "";
    }
    function startNewMode(mode) {
      if (mode.className) {
        emitter.openNode(language.classNameAliases[mode.className] || mode.className);
      }
      top = Object.create(mode, {parent: {value: top}});
      return top;
    }
    function endOfMode(mode, match2, matchPlusRemainder) {
      let matched = startsWith(mode.endRe, matchPlusRemainder);
      if (matched) {
        if (mode["on:end"]) {
          const resp = new Response(mode);
          mode["on:end"](match2, resp);
          if (resp.isMatchIgnored)
            matched = false;
        }
        if (matched) {
          while (mode.endsParent && mode.parent) {
            mode = mode.parent;
          }
          return mode;
        }
      }
      if (mode.endsWithParent) {
        return endOfMode(mode.parent, match2, matchPlusRemainder);
      }
    }
    function doIgnore(lexeme) {
      if (top.matcher.regexIndex === 0) {
        modeBuffer += lexeme[0];
        return 1;
      } else {
        resumeScanAtSamePosition = true;
        return 0;
      }
    }
    function doBeginMatch(match2) {
      const lexeme = match2[0];
      const newMode = match2.rule;
      const resp = new Response(newMode);
      const beforeCallbacks = [newMode.__beforeBegin, newMode["on:begin"]];
      for (const cb of beforeCallbacks) {
        if (!cb)
          continue;
        cb(match2, resp);
        if (resp.isMatchIgnored)
          return doIgnore(lexeme);
      }
      if (newMode && newMode.endSameAsBegin) {
        newMode.endRe = escape$1(lexeme);
      }
      if (newMode.skip) {
        modeBuffer += lexeme;
      } else {
        if (newMode.excludeBegin) {
          modeBuffer += lexeme;
        }
        processBuffer();
        if (!newMode.returnBegin && !newMode.excludeBegin) {
          modeBuffer = lexeme;
        }
      }
      startNewMode(newMode);
      return newMode.returnBegin ? 0 : lexeme.length;
    }
    function doEndMatch(match2) {
      const lexeme = match2[0];
      const matchPlusRemainder = codeToHighlight.substr(match2.index);
      const endMode = endOfMode(top, match2, matchPlusRemainder);
      if (!endMode) {
        return NO_MATCH;
      }
      const origin = top;
      if (origin.skip) {
        modeBuffer += lexeme;
      } else {
        if (!(origin.returnEnd || origin.excludeEnd)) {
          modeBuffer += lexeme;
        }
        processBuffer();
        if (origin.excludeEnd) {
          modeBuffer = lexeme;
        }
      }
      do {
        if (top.className) {
          emitter.closeNode();
        }
        if (!top.skip && !top.subLanguage) {
          relevance += top.relevance;
        }
        top = top.parent;
      } while (top !== endMode.parent);
      if (endMode.starts) {
        if (endMode.endSameAsBegin) {
          endMode.starts.endRe = endMode.endRe;
        }
        startNewMode(endMode.starts);
      }
      return origin.returnEnd ? 0 : lexeme.length;
    }
    function processContinuations() {
      const list = [];
      for (let current = top; current !== language; current = current.parent) {
        if (current.className) {
          list.unshift(current.className);
        }
      }
      list.forEach((item) => emitter.openNode(item));
    }
    let lastMatch = {};
    function processLexeme(textBeforeMatch, match2) {
      const lexeme = match2 && match2[0];
      modeBuffer += textBeforeMatch;
      if (lexeme == null) {
        processBuffer();
        return 0;
      }
      if (lastMatch.type === "begin" && match2.type === "end" && lastMatch.index === match2.index && lexeme === "") {
        modeBuffer += codeToHighlight.slice(match2.index, match2.index + 1);
        if (!SAFE_MODE) {
          const err = new Error("0 width match regex");
          err.languageName = languageName;
          err.badRule = lastMatch.rule;
          throw err;
        }
        return 1;
      }
      lastMatch = match2;
      if (match2.type === "begin") {
        return doBeginMatch(match2);
      } else if (match2.type === "illegal" && !ignoreIllegals) {
        const err = new Error('Illegal lexeme "' + lexeme + '" for mode "' + (top.className || "<unnamed>") + '"');
        err.mode = top;
        throw err;
      } else if (match2.type === "end") {
        const processed = doEndMatch(match2);
        if (processed !== NO_MATCH) {
          return processed;
        }
      }
      if (match2.type === "illegal" && lexeme === "") {
        return 1;
      }
      if (iterations > 1e5 && iterations > match2.index * 3) {
        const err = new Error("potential infinite loop, way more iterations than matches");
        throw err;
      }
      modeBuffer += lexeme;
      return lexeme.length;
    }
    const language = getLanguage(languageName);
    if (!language) {
      error(LANGUAGE_NOT_FOUND.replace("{}", languageName));
      throw new Error('Unknown language: "' + languageName + '"');
    }
    const md = compileLanguage(language, {plugins});
    let result = "";
    let top = continuation || md;
    const continuations = {};
    const emitter = new options.__emitter(options);
    processContinuations();
    let modeBuffer = "";
    let relevance = 0;
    let index = 0;
    let iterations = 0;
    let resumeScanAtSamePosition = false;
    try {
      top.matcher.considerAll();
      for (; ; ) {
        iterations++;
        if (resumeScanAtSamePosition) {
          resumeScanAtSamePosition = false;
        } else {
          top.matcher.considerAll();
        }
        top.matcher.lastIndex = index;
        const match2 = top.matcher.exec(codeToHighlight);
        if (!match2)
          break;
        const beforeMatch = codeToHighlight.substring(index, match2.index);
        const processedCount = processLexeme(beforeMatch, match2);
        index = match2.index + processedCount;
      }
      processLexeme(codeToHighlight.substr(index));
      emitter.closeAllNodes();
      emitter.finalize();
      result = emitter.toHTML();
      return {
        relevance: Math.floor(relevance),
        value: result,
        language: languageName,
        illegal: false,
        emitter,
        top
      };
    } catch (err) {
      if (err.message && err.message.includes("Illegal")) {
        return {
          illegal: true,
          illegalBy: {
            msg: err.message,
            context: codeToHighlight.slice(index - 100, index + 100),
            mode: err.mode
          },
          sofar: result,
          relevance: 0,
          value: escape$1$1(codeToHighlight),
          emitter
        };
      } else if (SAFE_MODE) {
        return {
          illegal: false,
          relevance: 0,
          value: escape$1$1(codeToHighlight),
          emitter,
          language: languageName,
          top,
          errorRaised: err
        };
      } else {
        throw err;
      }
    }
  }
  function justTextHighlightResult(code3) {
    const result = {
      relevance: 0,
      emitter: new options.__emitter(options),
      value: escape$1$1(code3),
      illegal: false,
      top: PLAINTEXT_LANGUAGE
    };
    result.emitter.addText(code3);
    return result;
  }
  function highlightAuto(code3, languageSubset) {
    languageSubset = languageSubset || options.languages || Object.keys(languages);
    const plaintext2 = justTextHighlightResult(code3);
    const results = languageSubset.filter(getLanguage).filter(autoDetection).map((name2) => _highlight(name2, code3, false));
    results.unshift(plaintext2);
    const sorted = results.sort((a2, b) => {
      if (a2.relevance !== b.relevance)
        return b.relevance - a2.relevance;
      if (a2.language && b.language) {
        if (getLanguage(a2.language).supersetOf === b.language) {
          return 1;
        } else if (getLanguage(b.language).supersetOf === a2.language) {
          return -1;
        }
      }
      return 0;
    });
    const [best, secondBest] = sorted;
    const result = best;
    result.second_best = secondBest;
    return result;
  }
  function fixMarkup(html2) {
    if (!(options.tabReplace || options.useBR)) {
      return html2;
    }
    return html2.replace(fixMarkupRe, (match2) => {
      if (match2 === "\n") {
        return options.useBR ? "<br>" : match2;
      } else if (options.tabReplace) {
        return match2.replace(/\t/g, options.tabReplace);
      }
      return match2;
    });
  }
  function updateClassName(element, currentLang, resultLang) {
    const language = currentLang ? aliases[currentLang] : resultLang;
    element.classList.add("hljs");
    if (language)
      element.classList.add(language);
  }
  const brPlugin = {
    "before:highlightElement": ({el}) => {
      if (options.useBR) {
        el.innerHTML = el.innerHTML.replace(/\n/g, "").replace(/<br[ /]*>/g, "\n");
      }
    },
    "after:highlightElement": ({result}) => {
      if (options.useBR) {
        result.value = result.value.replace(/\n/g, "<br>");
      }
    }
  };
  const TAB_REPLACE_RE = /^(<[^>]+>|\t)+/gm;
  const tabReplacePlugin = {
    "after:highlightElement": ({result}) => {
      if (options.tabReplace) {
        result.value = result.value.replace(TAB_REPLACE_RE, (m2) => m2.replace(/\t/g, options.tabReplace));
      }
    }
  };
  function highlightElement(element) {
    let node = null;
    const language = blockLanguage(element);
    if (shouldNotHighlight(language))
      return;
    fire("before:highlightElement", {el: element, language});
    node = element;
    const text = node.textContent;
    const result = language ? highlight2(text, {language, ignoreIllegals: true}) : highlightAuto(text);
    fire("after:highlightElement", {el: element, result, text});
    element.innerHTML = result.value;
    updateClassName(element, language, result.language);
    element.result = {
      language: result.language,
      re: result.relevance,
      relavance: result.relevance
    };
    if (result.second_best) {
      element.second_best = {
        language: result.second_best.language,
        re: result.second_best.relevance,
        relavance: result.second_best.relevance
      };
    }
  }
  function configure(userOptions) {
    if (userOptions.useBR) {
      deprecated("10.3.0", "'useBR' will be removed entirely in v11.0");
      deprecated("10.3.0", "Please see https://github.com/highlightjs/highlight.js/issues/2559");
    }
    options = inherit$1(options, userOptions);
  }
  const initHighlighting = () => {
    if (initHighlighting.called)
      return;
    initHighlighting.called = true;
    deprecated("10.6.0", "initHighlighting() is deprecated.  Use highlightAll() instead.");
    const blocks = document.querySelectorAll("pre code");
    blocks.forEach(highlightElement);
  };
  function initHighlightingOnLoad() {
    deprecated("10.6.0", "initHighlightingOnLoad() is deprecated.  Use highlightAll() instead.");
    wantsHighlight = true;
  }
  let wantsHighlight = false;
  function highlightAll() {
    if (document.readyState === "loading") {
      wantsHighlight = true;
      return;
    }
    const blocks = document.querySelectorAll("pre code");
    blocks.forEach(highlightElement);
  }
  function boot() {
    if (wantsHighlight)
      highlightAll();
  }
  if (typeof window !== "undefined" && window.addEventListener) {
    window.addEventListener("DOMContentLoaded", boot, false);
  }
  function registerLanguage(languageName, languageDefinition) {
    let lang = null;
    try {
      lang = languageDefinition(hljs2);
    } catch (error$1) {
      error("Language definition for '{}' could not be registered.".replace("{}", languageName));
      if (!SAFE_MODE) {
        throw error$1;
      } else {
        error(error$1);
      }
      lang = PLAINTEXT_LANGUAGE;
    }
    if (!lang.name)
      lang.name = languageName;
    languages[languageName] = lang;
    lang.rawDefinition = languageDefinition.bind(null, hljs2);
    if (lang.aliases) {
      registerAliases(lang.aliases, {languageName});
    }
  }
  function unregisterLanguage(languageName) {
    delete languages[languageName];
    for (const alias of Object.keys(aliases)) {
      if (aliases[alias] === languageName) {
        delete aliases[alias];
      }
    }
  }
  function listLanguages() {
    return Object.keys(languages);
  }
  function requireLanguage(name2) {
    deprecated("10.4.0", "requireLanguage will be removed entirely in v11.");
    deprecated("10.4.0", "Please see https://github.com/highlightjs/highlight.js/pull/2844");
    const lang = getLanguage(name2);
    if (lang) {
      return lang;
    }
    const err = new Error("The '{}' language is required, but not loaded.".replace("{}", name2));
    throw err;
  }
  function getLanguage(name2) {
    name2 = (name2 || "").toLowerCase();
    return languages[name2] || languages[aliases[name2]];
  }
  function registerAliases(aliasList, {languageName}) {
    if (typeof aliasList === "string") {
      aliasList = [aliasList];
    }
    aliasList.forEach((alias) => {
      aliases[alias.toLowerCase()] = languageName;
    });
  }
  function autoDetection(name2) {
    const lang = getLanguage(name2);
    return lang && !lang.disableAutodetect;
  }
  function upgradePluginAPI(plugin) {
    if (plugin["before:highlightBlock"] && !plugin["before:highlightElement"]) {
      plugin["before:highlightElement"] = (data) => {
        plugin["before:highlightBlock"](Object.assign({block: data.el}, data));
      };
    }
    if (plugin["after:highlightBlock"] && !plugin["after:highlightElement"]) {
      plugin["after:highlightElement"] = (data) => {
        plugin["after:highlightBlock"](Object.assign({block: data.el}, data));
      };
    }
  }
  function addPlugin(plugin) {
    upgradePluginAPI(plugin);
    plugins.push(plugin);
  }
  function fire(event, args) {
    const cb = event;
    plugins.forEach(function(plugin) {
      if (plugin[cb]) {
        plugin[cb](args);
      }
    });
  }
  function deprecateFixMarkup(arg) {
    deprecated("10.2.0", "fixMarkup will be removed entirely in v11.0");
    deprecated("10.2.0", "Please see https://github.com/highlightjs/highlight.js/issues/2534");
    return fixMarkup(arg);
  }
  function deprecateHighlightBlock(el) {
    deprecated("10.7.0", "highlightBlock will be removed entirely in v12.0");
    deprecated("10.7.0", "Please use highlightElement now.");
    return highlightElement(el);
  }
  Object.assign(hljs2, {
    highlight: highlight2,
    highlightAuto,
    highlightAll,
    fixMarkup: deprecateFixMarkup,
    highlightElement,
    highlightBlock: deprecateHighlightBlock,
    configure,
    initHighlighting,
    initHighlightingOnLoad,
    registerLanguage,
    unregisterLanguage,
    listLanguages,
    getLanguage,
    registerAliases,
    requireLanguage,
    autoDetection,
    inherit: inherit$1,
    addPlugin,
    vuePlugin: BuildVuePlugin(hljs2).VuePlugin
  });
  hljs2.debugMode = function() {
    SAFE_MODE = false;
  };
  hljs2.safeMode = function() {
    SAFE_MODE = true;
  };
  hljs2.versionString = version;
  for (const key in MODES$4) {
    if (typeof MODES$4[key] === "object") {
      deepFreezeEs6(MODES$4[key]);
    }
  }
  Object.assign(hljs2, MODES$4);
  hljs2.addPlugin(brPlugin);
  hljs2.addPlugin(mergeHTMLPlugin);
  hljs2.addPlugin(tabReplacePlugin);
  return hljs2;
};
var highlight = HLJS({});
var core = highlight;
function _1c(hljs2) {
  var UNDERSCORE_IDENT_RE2 = "[A-Za-z\u0410-\u042F\u0430-\u044F\u0451\u0401_][A-Za-z\u0410-\u042F\u0430-\u044F\u0451\u0401_0-9]+";
  var v7_keywords = "\u0434\u0430\u043B\u0435\u0435 ";
  var v8_keywords = "\u0432\u043E\u0437\u0432\u0440\u0430\u0442 \u0432\u044B\u0437\u0432\u0430\u0442\u044C\u0438\u0441\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435 \u0432\u044B\u043F\u043E\u043B\u043D\u0438\u0442\u044C \u0434\u043B\u044F \u0435\u0441\u043B\u0438 \u0438 \u0438\u0437 \u0438\u043B\u0438 \u0438\u043D\u0430\u0447\u0435 \u0438\u043D\u0430\u0447\u0435\u0435\u0441\u043B\u0438 \u0438\u0441\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435 \u043A\u0430\u0436\u0434\u043E\u0433\u043E \u043A\u043E\u043D\u0435\u0446\u0435\u0441\u043B\u0438 \u043A\u043E\u043D\u0435\u0446\u043F\u043E\u043F\u044B\u0442\u043A\u0438 \u043A\u043E\u043D\u0435\u0446\u0446\u0438\u043A\u043B\u0430 \u043D\u0435 \u043D\u043E\u0432\u044B\u0439 \u043F\u0435\u0440\u0435\u0439\u0442\u0438 \u043F\u0435\u0440\u0435\u043C \u043F\u043E \u043F\u043E\u043A\u0430 \u043F\u043E\u043F\u044B\u0442\u043A\u0430 \u043F\u0440\u0435\u0440\u0432\u0430\u0442\u044C \u043F\u0440\u043E\u0434\u043E\u043B\u0436\u0438\u0442\u044C \u0442\u043E\u0433\u0434\u0430 \u0446\u0438\u043A\u043B \u044D\u043A\u0441\u043F\u043E\u0440\u0442 ";
  var KEYWORD = v7_keywords + v8_keywords;
  var v7_meta_keywords = "\u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044C\u0438\u0437\u0444\u0430\u0439\u043B\u0430 ";
  var v8_meta_keywords = "\u0432\u0435\u0431\u043A\u043B\u0438\u0435\u043D\u0442 \u0432\u043C\u0435\u0441\u0442\u043E \u0432\u043D\u0435\u0448\u043D\u0435\u0435\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435 \u043A\u043B\u0438\u0435\u043D\u0442 \u043A\u043E\u043D\u0435\u0446\u043E\u0431\u043B\u0430\u0441\u0442\u0438 \u043C\u043E\u0431\u0438\u043B\u044C\u043D\u043E\u0435\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u043A\u043B\u0438\u0435\u043D\u0442 \u043C\u043E\u0431\u0438\u043B\u044C\u043D\u043E\u0435\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0441\u0435\u0440\u0432\u0435\u0440 \u043D\u0430\u043A\u043B\u0438\u0435\u043D\u0442\u0435 \u043D\u0430\u043A\u043B\u0438\u0435\u043D\u0442\u0435\u043D\u0430\u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u043D\u0430\u043A\u043B\u0438\u0435\u043D\u0442\u0435\u043D\u0430\u0441\u0435\u0440\u0432\u0435\u0440\u0435\u0431\u0435\u0437\u043A\u043E\u043D\u0442\u0435\u043A\u0441\u0442\u0430 \u043D\u0430\u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u043D\u0430\u0441\u0435\u0440\u0432\u0435\u0440\u0435\u0431\u0435\u0437\u043A\u043E\u043D\u0442\u0435\u043A\u0441\u0442\u0430 \u043E\u0431\u043B\u0430\u0441\u0442\u044C \u043F\u0435\u0440\u0435\u0434 \u043F\u043E\u0441\u043B\u0435 \u0441\u0435\u0440\u0432\u0435\u0440 \u0442\u043E\u043B\u0441\u0442\u044B\u0439\u043A\u043B\u0438\u0435\u043D\u0442\u043E\u0431\u044B\u0447\u043D\u043E\u0435\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u0442\u043E\u043B\u0441\u0442\u044B\u0439\u043A\u043B\u0438\u0435\u043D\u0442\u0443\u043F\u0440\u0430\u0432\u043B\u044F\u0435\u043C\u043E\u0435\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u0442\u043E\u043D\u043A\u0438\u0439\u043A\u043B\u0438\u0435\u043D\u0442 ";
  var METAKEYWORD = v7_meta_keywords + v8_meta_keywords;
  var v7_system_constants = "\u0440\u0430\u0437\u0434\u0435\u043B\u0438\u0442\u0435\u043B\u044C\u0441\u0442\u0440\u0430\u043D\u0438\u0446 \u0440\u0430\u0437\u0434\u0435\u043B\u0438\u0442\u0435\u043B\u044C\u0441\u0442\u0440\u043E\u043A \u0441\u0438\u043C\u0432\u043E\u043B\u0442\u0430\u0431\u0443\u043B\u044F\u0446\u0438\u0438 ";
  var v7_global_context_methods = "ansitooem oemtoansi \u0432\u0432\u0435\u0441\u0442\u0438\u0432\u0438\u0434\u0441\u0443\u0431\u043A\u043E\u043D\u0442\u043E \u0432\u0432\u0435\u0441\u0442\u0438\u043F\u0435\u0440\u0435\u0447\u0438\u0441\u043B\u0435\u043D\u0438\u0435 \u0432\u0432\u0435\u0441\u0442\u0438\u043F\u0435\u0440\u0438\u043E\u0434 \u0432\u0432\u0435\u0441\u0442\u0438\u043F\u043B\u0430\u043D\u0441\u0447\u0435\u0442\u043E\u0432 \u0432\u044B\u0431\u0440\u0430\u043D\u043D\u044B\u0439\u043F\u043B\u0430\u043D\u0441\u0447\u0435\u0442\u043E\u0432 \u0434\u0430\u0442\u0430\u0433\u043E\u0434 \u0434\u0430\u0442\u0430\u043C\u0435\u0441\u044F\u0446 \u0434\u0430\u0442\u0430\u0447\u0438\u0441\u043B\u043E \u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A\u0441\u0438\u0441\u0442\u0435\u043C\u044B \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435\u0432\u0441\u0442\u0440\u043E\u043A\u0443 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435\u0438\u0437\u0441\u0442\u0440\u043E\u043A\u0438 \u043A\u0430\u0442\u0430\u043B\u043E\u0433\u0438\u0431 \u043A\u0430\u0442\u0430\u043B\u043E\u0433\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F \u043A\u043E\u0434\u0441\u0438\u043C\u0432 \u043A\u043E\u043D\u0433\u043E\u0434\u0430 \u043A\u043E\u043D\u0435\u0446\u043F\u0435\u0440\u0438\u043E\u0434\u0430\u0431\u0438 \u043A\u043E\u043D\u0435\u0446\u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u043D\u043D\u043E\u0433\u043E\u043F\u0435\u0440\u0438\u043E\u0434\u0430\u0431\u0438 \u043A\u043E\u043D\u0435\u0446\u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u043E\u0433\u043E\u0438\u043D\u0442\u0435\u0440\u0432\u0430\u043B\u0430 \u043A\u043E\u043D\u043A\u0432\u0430\u0440\u0442\u0430\u043B\u0430 \u043A\u043E\u043D\u043C\u0435\u0441\u044F\u0446\u0430 \u043A\u043E\u043D\u043D\u0435\u0434\u0435\u043B\u0438 \u043B\u043E\u0433 \u043B\u043E\u043310 \u043C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0435\u043A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E\u0441\u0443\u0431\u043A\u043E\u043D\u0442\u043E \u043D\u0430\u0437\u0432\u0430\u043D\u0438\u0435\u0438\u043D\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 \u043D\u0430\u0437\u0432\u0430\u043D\u0438\u0435\u043D\u0430\u0431\u043E\u0440\u0430\u043F\u0440\u0430\u0432 \u043D\u0430\u0437\u043D\u0430\u0447\u0438\u0442\u044C\u0432\u0438\u0434 \u043D\u0430\u0437\u043D\u0430\u0447\u0438\u0442\u044C\u0441\u0447\u0435\u0442 \u043D\u0430\u0439\u0442\u0438\u0441\u0441\u044B\u043B\u043A\u0438 \u043D\u0430\u0447\u0430\u043B\u043E\u043F\u0435\u0440\u0438\u043E\u0434\u0430\u0431\u0438 \u043D\u0430\u0447\u0430\u043B\u043E\u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u043E\u0433\u043E\u0438\u043D\u0442\u0435\u0440\u0432\u0430\u043B\u0430 \u043D\u0430\u0447\u0433\u043E\u0434\u0430 \u043D\u0430\u0447\u043A\u0432\u0430\u0440\u0442\u0430\u043B\u0430 \u043D\u0430\u0447\u043C\u0435\u0441\u044F\u0446\u0430 \u043D\u0430\u0447\u043D\u0435\u0434\u0435\u043B\u0438 \u043D\u043E\u043C\u0435\u0440\u0434\u043D\u044F\u0433\u043E\u0434\u0430 \u043D\u043E\u043C\u0435\u0440\u0434\u043D\u044F\u043D\u0435\u0434\u0435\u043B\u0438 \u043D\u043E\u043C\u0435\u0440\u043D\u0435\u0434\u0435\u043B\u0438\u0433\u043E\u0434\u0430 \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0430\u043E\u0436\u0438\u0434\u0430\u043D\u0438\u044F \u043E\u0441\u043D\u043E\u0432\u043D\u043E\u0439\u0436\u0443\u0440\u043D\u0430\u043B\u0440\u0430\u0441\u0447\u0435\u0442\u043E\u0432 \u043E\u0441\u043D\u043E\u0432\u043D\u043E\u0439\u043F\u043B\u0430\u043D\u0441\u0447\u0435\u0442\u043E\u0432 \u043E\u0441\u043D\u043E\u0432\u043D\u043E\u0439\u044F\u0437\u044B\u043A \u043E\u0447\u0438\u0441\u0442\u0438\u0442\u044C\u043E\u043A\u043D\u043E\u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0439 \u043F\u0435\u0440\u0438\u043E\u0434\u0441\u0442\u0440 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0432\u0440\u0435\u043C\u044F\u0442\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0434\u0430\u0442\u0443\u0442\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0442\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F\u043E\u0442\u0431\u043E\u0440\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043F\u043E\u0437\u0438\u0446\u0438\u044E\u0442\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043F\u0443\u0441\u0442\u043E\u0435\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0442\u0430 \u043F\u0440\u0435\u0444\u0438\u043A\u0441\u0430\u0432\u0442\u043E\u043D\u0443\u043C\u0435\u0440\u0430\u0446\u0438\u0438 \u043F\u0440\u043E\u043F\u0438\u0441\u044C \u043F\u0443\u0441\u0442\u043E\u0435\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u0440\u0430\u0437\u043C \u0440\u0430\u0437\u043E\u0431\u0440\u0430\u0442\u044C\u043F\u043E\u0437\u0438\u0446\u0438\u044E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0442\u044C\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u044B\u043D\u0430 \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u0442\u044C\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u044B\u043F\u043E \u0441\u0438\u043C\u0432 \u0441\u043E\u0437\u0434\u0430\u0442\u044C\u043E\u0431\u044A\u0435\u043A\u0442 \u0441\u0442\u0430\u0442\u0443\u0441\u0432\u043E\u0437\u0432\u0440\u0430\u0442\u0430 \u0441\u0442\u0440\u043A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E\u0441\u0442\u0440\u043E\u043A \u0441\u0444\u043E\u0440\u043C\u0438\u0440\u043E\u0432\u0430\u0442\u044C\u043F\u043E\u0437\u0438\u0446\u0438\u044E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u0441\u0447\u0435\u0442\u043F\u043E\u043A\u043E\u0434\u0443 \u0442\u0435\u043A\u0443\u0449\u0435\u0435\u0432\u0440\u0435\u043C\u044F \u0442\u0438\u043F\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F \u0442\u0438\u043F\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F\u0441\u0442\u0440 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0442\u0430\u043D\u0430 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0442\u0430\u043F\u043E \u0444\u0438\u043A\u0441\u0448\u0430\u0431\u043B\u043E\u043D \u0448\u0430\u0431\u043B\u043E\u043D ";
  var v8_global_context_methods = "acos asin atan base64\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 base64\u0441\u0442\u0440\u043E\u043A\u0430 cos exp log log10 pow sin sqrt tan xml\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 xml\u0441\u0442\u0440\u043E\u043A\u0430 xml\u0442\u0438\u043F xml\u0442\u0438\u043F\u0437\u043D\u0447 \u0430\u043A\u0442\u0438\u0432\u043D\u043E\u0435\u043E\u043A\u043D\u043E \u0431\u0435\u0437\u043E\u043F\u0430\u0441\u043D\u044B\u0439\u0440\u0435\u0436\u0438\u043C \u0431\u0435\u0437\u043E\u043F\u0430\u0441\u043D\u044B\u0439\u0440\u0435\u0436\u0438\u043C\u0440\u0430\u0437\u0434\u0435\u043B\u0435\u043D\u0438\u044F\u0434\u0430\u043D\u043D\u044B\u0445 \u0431\u0443\u043B\u0435\u0432\u043E \u0432\u0432\u0435\u0441\u0442\u0438\u0434\u0430\u0442\u0443 \u0432\u0432\u0435\u0441\u0442\u0438\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u0432\u0432\u0435\u0441\u0442\u0438\u0441\u0442\u0440\u043E\u043A\u0443 \u0432\u0432\u0435\u0441\u0442\u0438\u0447\u0438\u0441\u043B\u043E \u0432\u043E\u0437\u043C\u043E\u0436\u043D\u043E\u0441\u0442\u044C\u0447\u0442\u0435\u043D\u0438\u044Fxml \u0432\u043E\u043F\u0440\u043E\u0441 \u0432\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u0432\u0440\u0435\u0433 \u0432\u044B\u0433\u0440\u0443\u0437\u0438\u0442\u044C\u0436\u0443\u0440\u043D\u0430\u043B\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0432\u044B\u043F\u043E\u043B\u043D\u0438\u0442\u044C\u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0443\u043E\u043F\u043E\u0432\u0435\u0449\u0435\u043D\u0438\u044F \u0432\u044B\u043F\u043E\u043B\u043D\u0438\u0442\u044C\u043F\u0440\u043E\u0432\u0435\u0440\u043A\u0443\u043F\u0440\u0430\u0432\u0434\u043E\u0441\u0442\u0443\u043F\u0430 \u0432\u044B\u0447\u0438\u0441\u043B\u0438\u0442\u044C \u0433\u043E\u0434 \u0434\u0430\u043D\u043D\u044B\u0435\u0444\u043E\u0440\u043C\u044B\u0432\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u0434\u0430\u0442\u0430 \u0434\u0435\u043D\u044C \u0434\u0435\u043D\u044C\u0433\u043E\u0434\u0430 \u0434\u0435\u043D\u044C\u043D\u0435\u0434\u0435\u043B\u0438 \u0434\u043E\u0431\u0430\u0432\u0438\u0442\u044C\u043C\u0435\u0441\u044F\u0446 \u0437\u0430\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u0442\u044C\u0434\u0430\u043D\u043D\u044B\u0435\u0434\u043B\u044F\u0440\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F \u0437\u0430\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u0442\u044C\u0440\u0430\u0431\u043E\u0442\u0443\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F \u0437\u0430\u0432\u0435\u0440\u0448\u0438\u0442\u044C\u0440\u0430\u0431\u043E\u0442\u0443\u0441\u0438\u0441\u0442\u0435\u043C\u044B \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044C\u0432\u043D\u0435\u0448\u043D\u044E\u044E\u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442\u0443 \u0437\u0430\u043A\u0440\u044B\u0442\u044C\u0441\u043F\u0440\u0430\u0432\u043A\u0443 \u0437\u0430\u043F\u0438\u0441\u0430\u0442\u044Cjson \u0437\u0430\u043F\u0438\u0441\u0430\u0442\u044Cxml \u0437\u0430\u043F\u0438\u0441\u0430\u0442\u044C\u0434\u0430\u0442\u0443json \u0437\u0430\u043F\u0438\u0441\u044C\u0436\u0443\u0440\u043D\u0430\u043B\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u043F\u043E\u043B\u043D\u0438\u0442\u044C\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F\u0441\u0432\u043E\u0439\u0441\u0442\u0432 \u0437\u0430\u043F\u0440\u043E\u0441\u0438\u0442\u044C\u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043D\u0438\u0435\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F \u0437\u0430\u043F\u0443\u0441\u0442\u0438\u0442\u044C\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u0437\u0430\u043F\u0443\u0441\u0442\u0438\u0442\u044C\u0441\u0438\u0441\u0442\u0435\u043C\u0443 \u0437\u0430\u0444\u0438\u043A\u0441\u0438\u0440\u043E\u0432\u0430\u0442\u044C\u0442\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u044E \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435\u0432\u0434\u0430\u043D\u043D\u044B\u0435\u0444\u043E\u0440\u043C\u044B \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435\u0432\u0441\u0442\u0440\u043E\u043A\u0443\u0432\u043D\u0443\u0442\u0440 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435\u0432\u0444\u0430\u0439\u043B \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435\u0437\u0430\u043F\u043E\u043B\u043D\u0435\u043D\u043E \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435\u0438\u0437\u0441\u0442\u0440\u043E\u043A\u0438\u0432\u043D\u0443\u0442\u0440 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435\u0438\u0437\u0444\u0430\u0439\u043B\u0430 \u0438\u0437xml\u0442\u0438\u043F\u0430 \u0438\u043C\u043F\u043E\u0440\u0442\u043C\u043E\u0434\u0435\u043B\u0438xdto \u0438\u043C\u044F\u043A\u043E\u043C\u043F\u044C\u044E\u0442\u0435\u0440\u0430 \u0438\u043C\u044F\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F \u0438\u043D\u0438\u0446\u0438\u0430\u043B\u0438\u0437\u0438\u0440\u043E\u0432\u0430\u0442\u044C\u043F\u0440\u0435\u0434\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u043D\u044B\u0435\u0434\u0430\u043D\u043D\u044B\u0435 \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044F\u043E\u0431\u043E\u0448\u0438\u0431\u043A\u0435 \u043A\u0430\u0442\u0430\u043B\u043E\u0433\u0431\u0438\u0431\u043B\u0438\u043E\u0442\u0435\u043A\u0438\u043C\u043E\u0431\u0438\u043B\u044C\u043D\u043E\u0433\u043E\u0443\u0441\u0442\u0440\u043E\u0439\u0441\u0442\u0432\u0430 \u043A\u0430\u0442\u0430\u043B\u043E\u0433\u0432\u0440\u0435\u043C\u0435\u043D\u043D\u044B\u0445\u0444\u0430\u0439\u043B\u043E\u0432 \u043A\u0430\u0442\u0430\u043B\u043E\u0433\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u043E\u0432 \u043A\u0430\u0442\u0430\u043B\u043E\u0433\u043F\u0440\u043E\u0433\u0440\u0430\u043C\u043C\u044B \u043A\u043E\u0434\u0438\u0440\u043E\u0432\u0430\u0442\u044C\u0441\u0442\u0440\u043E\u043A\u0443 \u043A\u043E\u0434\u043B\u043E\u043A\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u0438\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439\u0431\u0430\u0437\u044B \u043A\u043E\u0434\u0441\u0438\u043C\u0432\u043E\u043B\u0430 \u043A\u043E\u043C\u0430\u043D\u0434\u0430\u0441\u0438\u0441\u0442\u0435\u043C\u044B \u043A\u043E\u043D\u0435\u0446\u0433\u043E\u0434\u0430 \u043A\u043E\u043D\u0435\u0446\u0434\u043D\u044F \u043A\u043E\u043D\u0435\u0446\u043A\u0432\u0430\u0440\u0442\u0430\u043B\u0430 \u043A\u043E\u043D\u0435\u0446\u043C\u0435\u0441\u044F\u0446\u0430 \u043A\u043E\u043D\u0435\u0446\u043C\u0438\u043D\u0443\u0442\u044B \u043A\u043E\u043D\u0435\u0446\u043D\u0435\u0434\u0435\u043B\u0438 \u043A\u043E\u043D\u0435\u0446\u0447\u0430\u0441\u0430 \u043A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044F\u0431\u0430\u0437\u044B\u0434\u0430\u043D\u043D\u044B\u0445\u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0430\u0434\u0438\u043D\u0430\u043C\u0438\u0447\u0435\u0441\u043A\u0438 \u043A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044F\u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0430 \u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C\u0434\u0430\u043D\u043D\u044B\u0435\u0444\u043E\u0440\u043C\u044B \u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C\u0444\u0430\u0439\u043B \u043A\u0440\u0430\u0442\u043A\u043E\u0435\u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u043E\u0448\u0438\u0431\u043A\u0438 \u043B\u0435\u0432 \u043C\u0430\u043A\u0441 \u043C\u0435\u0441\u0442\u043D\u043E\u0435\u0432\u0440\u0435\u043C\u044F \u043C\u0435\u0441\u044F\u0446 \u043C\u0438\u043D \u043C\u0438\u043D\u0443\u0442\u0430 \u043C\u043E\u043D\u043E\u043F\u043E\u043B\u044C\u043D\u044B\u0439\u0440\u0435\u0436\u0438\u043C \u043D\u0430\u0439\u0442\u0438 \u043D\u0430\u0439\u0442\u0438\u043D\u0435\u0434\u043E\u043F\u0443\u0441\u0442\u0438\u043C\u044B\u0435\u0441\u0438\u043C\u0432\u043E\u043B\u044Bxml \u043D\u0430\u0439\u0442\u0438\u043E\u043A\u043D\u043E\u043F\u043E\u043D\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439\u0441\u0441\u044B\u043B\u043A\u0435 \u043D\u0430\u0439\u0442\u0438\u043F\u043E\u043C\u0435\u0447\u0435\u043D\u043D\u044B\u0435\u043D\u0430\u0443\u0434\u0430\u043B\u0435\u043D\u0438\u0435 \u043D\u0430\u0439\u0442\u0438\u043F\u043E\u0441\u0441\u044B\u043B\u043A\u0430\u043C \u043D\u0430\u0439\u0442\u0438\u0444\u0430\u0439\u043B\u044B \u043D\u0430\u0447\u0430\u043B\u043E\u0433\u043E\u0434\u0430 \u043D\u0430\u0447\u0430\u043B\u043E\u0434\u043D\u044F \u043D\u0430\u0447\u0430\u043B\u043E\u043A\u0432\u0430\u0440\u0442\u0430\u043B\u0430 \u043D\u0430\u0447\u0430\u043B\u043E\u043C\u0435\u0441\u044F\u0446\u0430 \u043D\u0430\u0447\u0430\u043B\u043E\u043C\u0438\u043D\u0443\u0442\u044B \u043D\u0430\u0447\u0430\u043B\u043E\u043D\u0435\u0434\u0435\u043B\u0438 \u043D\u0430\u0447\u0430\u043B\u043E\u0447\u0430\u0441\u0430 \u043D\u0430\u0447\u0430\u0442\u044C\u0437\u0430\u043F\u0440\u043E\u0441\u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043D\u0438\u044F\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F \u043D\u0430\u0447\u0430\u0442\u044C\u0437\u0430\u043F\u0443\u0441\u043A\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F \u043D\u0430\u0447\u0430\u0442\u044C\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0435\u0444\u0430\u0439\u043B\u0430 \u043D\u0430\u0447\u0430\u0442\u044C\u043F\u0435\u0440\u0435\u043C\u0435\u0449\u0435\u043D\u0438\u0435\u0444\u0430\u0439\u043B\u0430 \u043D\u0430\u0447\u0430\u0442\u044C\u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435\u0432\u043D\u0435\u0448\u043D\u0435\u0439\u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442\u044B \u043D\u0430\u0447\u0430\u0442\u044C\u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u044F\u0440\u0430\u0431\u043E\u0442\u044B\u0441\u043A\u0440\u0438\u043F\u0442\u043E\u0433\u0440\u0430\u0444\u0438\u0435\u0439 \u043D\u0430\u0447\u0430\u0442\u044C\u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u044F\u0440\u0430\u0431\u043E\u0442\u044B\u0441\u0444\u0430\u0439\u043B\u0430\u043C\u0438 \u043D\u0430\u0447\u0430\u0442\u044C\u043F\u043E\u0438\u0441\u043A\u0444\u0430\u0439\u043B\u043E\u0432 \u043D\u0430\u0447\u0430\u0442\u044C\u043F\u043E\u043B\u0443\u0447\u0435\u043D\u0438\u0435\u043A\u0430\u0442\u0430\u043B\u043E\u0433\u0430\u0432\u0440\u0435\u043C\u0435\u043D\u043D\u044B\u0445\u0444\u0430\u0439\u043B\u043E\u0432 \u043D\u0430\u0447\u0430\u0442\u044C\u043F\u043E\u043B\u0443\u0447\u0435\u043D\u0438\u0435\u043A\u0430\u0442\u0430\u043B\u043E\u0433\u0430\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u043E\u0432 \u043D\u0430\u0447\u0430\u0442\u044C\u043F\u043E\u043B\u0443\u0447\u0435\u043D\u0438\u0435\u0440\u0430\u0431\u043E\u0447\u0435\u0433\u043E\u043A\u0430\u0442\u0430\u043B\u043E\u0433\u0430\u0434\u0430\u043D\u043D\u044B\u0445\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F \u043D\u0430\u0447\u0430\u0442\u044C\u043F\u043E\u043B\u0443\u0447\u0435\u043D\u0438\u0435\u0444\u0430\u0439\u043B\u043E\u0432 \u043D\u0430\u0447\u0430\u0442\u044C\u043F\u043E\u043C\u0435\u0449\u0435\u043D\u0438\u0435\u0444\u0430\u0439\u043B\u0430 \u043D\u0430\u0447\u0430\u0442\u044C\u043F\u043E\u043C\u0435\u0449\u0435\u043D\u0438\u0435\u0444\u0430\u0439\u043B\u043E\u0432 \u043D\u0430\u0447\u0430\u0442\u044C\u0441\u043E\u0437\u0434\u0430\u043D\u0438\u0435\u0434\u0432\u043E\u0438\u0447\u043D\u044B\u0445\u0434\u0430\u043D\u043D\u044B\u0445\u0438\u0437\u0444\u0430\u0439\u043B\u0430 \u043D\u0430\u0447\u0430\u0442\u044C\u0441\u043E\u0437\u0434\u0430\u043D\u0438\u0435\u043A\u0430\u0442\u0430\u043B\u043E\u0433\u0430 \u043D\u0430\u0447\u0430\u0442\u044C\u0442\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u044E \u043D\u0430\u0447\u0430\u0442\u044C\u0443\u0434\u0430\u043B\u0435\u043D\u0438\u0435\u0444\u0430\u0439\u043B\u043E\u0432 \u043D\u0430\u0447\u0430\u0442\u044C\u0443\u0441\u0442\u0430\u043D\u043E\u0432\u043A\u0443\u0432\u043D\u0435\u0448\u043D\u0435\u0439\u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442\u044B \u043D\u0430\u0447\u0430\u0442\u044C\u0443\u0441\u0442\u0430\u043D\u043E\u0432\u043A\u0443\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u044F\u0440\u0430\u0431\u043E\u0442\u044B\u0441\u043A\u0440\u0438\u043F\u0442\u043E\u0433\u0440\u0430\u0444\u0438\u0435\u0439 \u043D\u0430\u0447\u0430\u0442\u044C\u0443\u0441\u0442\u0430\u043D\u043E\u0432\u043A\u0443\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u044F\u0440\u0430\u0431\u043E\u0442\u044B\u0441\u0444\u0430\u0439\u043B\u0430\u043C\u0438 \u043D\u0435\u0434\u0435\u043B\u044F\u0433\u043E\u0434\u0430 \u043D\u0435\u043E\u0431\u0445\u043E\u0434\u0438\u043C\u043E\u0441\u0442\u044C\u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u0438\u044F\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u044F \u043D\u043E\u043C\u0435\u0440\u0441\u0435\u0430\u043D\u0441\u0430\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439\u0431\u0430\u0437\u044B \u043D\u043E\u043C\u0435\u0440\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u044F\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439\u0431\u0430\u0437\u044B \u043D\u0440\u0435\u0433 \u043D\u0441\u0442\u0440 \u043E\u0431\u043D\u043E\u0432\u0438\u0442\u044C\u0438\u043D\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u043E\u0431\u043D\u043E\u0432\u0438\u0442\u044C\u043D\u0443\u043C\u0435\u0440\u0430\u0446\u0438\u044E\u043E\u0431\u044A\u0435\u043A\u0442\u043E\u0432 \u043E\u0431\u043D\u043E\u0432\u0438\u0442\u044C\u043F\u043E\u0432\u0442\u043E\u0440\u043D\u043E\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0435\u043C\u044B\u0435\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0430\u043F\u0440\u0435\u0440\u044B\u0432\u0430\u043D\u0438\u044F\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F \u043E\u0431\u044A\u0435\u0434\u0438\u043D\u0438\u0442\u044C\u0444\u0430\u0439\u043B\u044B \u043E\u043A\u0440 \u043E\u043F\u0438\u0441\u0430\u043D\u0438\u0435\u043E\u0448\u0438\u0431\u043A\u0438 \u043E\u043F\u043E\u0432\u0435\u0441\u0442\u0438\u0442\u044C \u043E\u043F\u043E\u0432\u0435\u0441\u0442\u0438\u0442\u044C\u043E\u0431\u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0438 \u043E\u0442\u043A\u043B\u044E\u0447\u0438\u0442\u044C\u043E\u0431\u0440\u0430\u0431\u043E\u0442\u0447\u0438\u043A\u0437\u0430\u043F\u0440\u043E\u0441\u0430\u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A\u043A\u043B\u0438\u0435\u043D\u0442\u0430\u043B\u0438\u0446\u0435\u043D\u0437\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F \u043E\u0442\u043A\u043B\u044E\u0447\u0438\u0442\u044C\u043E\u0431\u0440\u0430\u0431\u043E\u0442\u0447\u0438\u043A\u043E\u0436\u0438\u0434\u0430\u043D\u0438\u044F \u043E\u0442\u043A\u043B\u044E\u0447\u0438\u0442\u044C\u043E\u0431\u0440\u0430\u0431\u043E\u0442\u0447\u0438\u043A\u043E\u043F\u043E\u0432\u0435\u0449\u0435\u043D\u0438\u044F \u043E\u0442\u043A\u0440\u044B\u0442\u044C\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u043E\u0442\u043A\u0440\u044B\u0442\u044C\u0438\u043D\u0434\u0435\u043A\u0441\u0441\u043F\u0440\u0430\u0432\u043A\u0438 \u043E\u0442\u043A\u0440\u044B\u0442\u044C\u0441\u043E\u0434\u0435\u0440\u0436\u0430\u043D\u0438\u0435\u0441\u043F\u0440\u0430\u0432\u043A\u0438 \u043E\u0442\u043A\u0440\u044B\u0442\u044C\u0441\u043F\u0440\u0430\u0432\u043A\u0443 \u043E\u0442\u043A\u0440\u044B\u0442\u044C\u0444\u043E\u0440\u043C\u0443 \u043E\u0442\u043A\u0440\u044B\u0442\u044C\u0444\u043E\u0440\u043C\u0443\u043C\u043E\u0434\u0430\u043B\u044C\u043D\u043E \u043E\u0442\u043C\u0435\u043D\u0438\u0442\u044C\u0442\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u044E \u043E\u0447\u0438\u0441\u0442\u0438\u0442\u044C\u0436\u0443\u0440\u043D\u0430\u043B\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043E\u0447\u0438\u0441\u0442\u0438\u0442\u044C\u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F \u043E\u0447\u0438\u0441\u0442\u0438\u0442\u044C\u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u044B\u0434\u043E\u0441\u0442\u0443\u043F\u0430 \u043F\u0435\u0440\u0435\u0439\u0442\u0438\u043F\u043E\u043D\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439\u0441\u0441\u044B\u043B\u043A\u0435 \u043F\u0435\u0440\u0435\u043C\u0435\u0441\u0442\u0438\u0442\u044C\u0444\u0430\u0439\u043B \u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0438\u0442\u044C\u0432\u043D\u0435\u0448\u043D\u044E\u044E\u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442\u0443 \u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0438\u0442\u044C\u043E\u0431\u0440\u0430\u0431\u043E\u0442\u0447\u0438\u043A\u0437\u0430\u043F\u0440\u043E\u0441\u0430\u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A\u043A\u043B\u0438\u0435\u043D\u0442\u0430\u043B\u0438\u0446\u0435\u043D\u0437\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F \u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0438\u0442\u044C\u043E\u0431\u0440\u0430\u0431\u043E\u0442\u0447\u0438\u043A\u043E\u0436\u0438\u0434\u0430\u043D\u0438\u044F \u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0438\u0442\u044C\u043E\u0431\u0440\u0430\u0431\u043E\u0442\u0447\u0438\u043A\u043E\u043F\u043E\u0432\u0435\u0449\u0435\u043D\u0438\u044F \u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0438\u0442\u044C\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u0435\u0440\u0430\u0431\u043E\u0442\u044B\u0441\u043A\u0440\u0438\u043F\u0442\u043E\u0433\u0440\u0430\u0444\u0438\u0435\u0439 \u043F\u043E\u0434\u043A\u043B\u044E\u0447\u0438\u0442\u044C\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u0435\u0440\u0430\u0431\u043E\u0442\u044B\u0441\u0444\u0430\u0439\u043B\u0430\u043C\u0438 \u043F\u043E\u0434\u0440\u043E\u0431\u043D\u043E\u0435\u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u043E\u0448\u0438\u0431\u043A\u0438 \u043F\u043E\u043A\u0430\u0437\u0430\u0442\u044C\u0432\u0432\u043E\u0434\u0434\u0430\u0442\u044B \u043F\u043E\u043A\u0430\u0437\u0430\u0442\u044C\u0432\u0432\u043E\u0434\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F \u043F\u043E\u043A\u0430\u0437\u0430\u0442\u044C\u0432\u0432\u043E\u0434\u0441\u0442\u0440\u043E\u043A\u0438 \u043F\u043E\u043A\u0430\u0437\u0430\u0442\u044C\u0432\u0432\u043E\u0434\u0447\u0438\u0441\u043B\u0430 \u043F\u043E\u043A\u0430\u0437\u0430\u0442\u044C\u0432\u043E\u043F\u0440\u043E\u0441 \u043F\u043E\u043A\u0430\u0437\u0430\u0442\u044C\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u043F\u043E\u043A\u0430\u0437\u0430\u0442\u044C\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044E\u043E\u0431\u043E\u0448\u0438\u0431\u043A\u0435 \u043F\u043E\u043A\u0430\u0437\u0430\u0442\u044C\u043D\u0430\u043A\u0430\u0440\u0442\u0435 \u043F\u043E\u043A\u0430\u0437\u0430\u0442\u044C\u043E\u043F\u043E\u0432\u0435\u0449\u0435\u043D\u0438\u0435\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F \u043F\u043E\u043A\u0430\u0437\u0430\u0442\u044C\u043F\u0440\u0435\u0434\u0443\u043F\u0440\u0435\u0436\u0434\u0435\u043D\u0438\u0435 \u043F\u043E\u043B\u043D\u043E\u0435\u0438\u043C\u044F\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044Ccom\u043E\u0431\u044A\u0435\u043A\u0442 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044Cxml\u0442\u0438\u043F \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0430\u0434\u0440\u0435\u0441\u043F\u043E\u043C\u0435\u0441\u0442\u043E\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u044E \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u043A\u0443\u0441\u0435\u0430\u043D\u0441\u043E\u0432 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0432\u0440\u0435\u043C\u044F\u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u0438\u044F\u0441\u043F\u044F\u0449\u0435\u0433\u043E\u0441\u0435\u0430\u043D\u0441\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0432\u0440\u0435\u043C\u044F\u0437\u0430\u0441\u044B\u043F\u0430\u043D\u0438\u044F\u043F\u0430\u0441\u0441\u0438\u0432\u043D\u043E\u0433\u043E\u0441\u0435\u0430\u043D\u0441\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0432\u0440\u0435\u043C\u044F\u043E\u0436\u0438\u0434\u0430\u043D\u0438\u044F\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0434\u0430\u043D\u043D\u044B\u0435\u0432\u044B\u0431\u043E\u0440\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0434\u043E\u043F\u043E\u043B\u043D\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u0439\u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u043A\u043B\u0438\u0435\u043D\u0442\u0430\u043B\u0438\u0446\u0435\u043D\u0437\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0434\u043E\u043F\u0443\u0441\u0442\u0438\u043C\u044B\u0435\u043A\u043E\u0434\u044B\u043B\u043E\u043A\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u0438 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0434\u043E\u043F\u0443\u0441\u0442\u0438\u043C\u044B\u0435\u0447\u0430\u0441\u043E\u0432\u044B\u0435\u043F\u043E\u044F\u0441\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A\u043A\u043B\u0438\u0435\u043D\u0442\u0441\u043A\u043E\u0433\u043E\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A\u0441\u0438\u0441\u0442\u0435\u043C\u044B \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F\u043E\u0442\u0431\u043E\u0440\u0430\u0436\u0443\u0440\u043D\u0430\u043B\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0438\u0434\u0435\u043D\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u043E\u0440\u043A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0438\u0437\u0432\u0440\u0435\u043C\u0435\u043D\u043D\u043E\u0433\u043E\u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0438\u043C\u044F\u0432\u0440\u0435\u043C\u0435\u043D\u043D\u043E\u0433\u043E\u0444\u0430\u0439\u043B\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0438\u043C\u044F\u043A\u043B\u0438\u0435\u043D\u0442\u0430\u043B\u0438\u0446\u0435\u043D\u0437\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044E\u044D\u043A\u0440\u0430\u043D\u043E\u0432\u043A\u043B\u0438\u0435\u043D\u0442\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0436\u0443\u0440\u043D\u0430\u043B\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0441\u043E\u0431\u044B\u0442\u0438\u044F\u0436\u0443\u0440\u043D\u0430\u043B\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043A\u0440\u0430\u0442\u043A\u0438\u0439\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043C\u0430\u043A\u0435\u0442\u043E\u0444\u043E\u0440\u043C\u043B\u0435\u043D\u0438\u044F \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043C\u0430\u0441\u043A\u0443\u0432\u0441\u0435\u0444\u0430\u0439\u043B\u044B \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043C\u0430\u0441\u043A\u0443\u0432\u0441\u0435\u0444\u0430\u0439\u043B\u044B\u043A\u043B\u0438\u0435\u043D\u0442\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043C\u0430\u0441\u043A\u0443\u0432\u0441\u0435\u0444\u0430\u0439\u043B\u044B\u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043C\u0435\u0441\u0442\u043E\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u043F\u043E\u0430\u0434\u0440\u0435\u0441\u0443 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043C\u0438\u043D\u0438\u043C\u0430\u043B\u044C\u043D\u0443\u044E\u0434\u043B\u0438\u043D\u0443\u043F\u0430\u0440\u043E\u043B\u0435\u0439\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0435\u0439 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043D\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u043E\u043D\u043D\u0443\u044E\u0441\u0441\u044B\u043B\u043A\u0443 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043D\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u043E\u043D\u043D\u0443\u044E\u0441\u0441\u044B\u043B\u043A\u0443\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439\u0431\u0430\u0437\u044B \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435\u043A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438\u0431\u0430\u0437\u044B\u0434\u0430\u043D\u043D\u044B\u0445 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435\u043F\u0440\u0435\u0434\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u043D\u044B\u0445\u0434\u0430\u043D\u043D\u044B\u0445\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439\u0431\u0430\u0437\u044B \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043E\u0431\u0449\u0438\u0439\u043C\u0430\u043A\u0435\u0442 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043E\u0431\u0449\u0443\u044E\u0444\u043E\u0440\u043C\u0443 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043E\u043A\u043D\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043E\u043F\u0435\u0440\u0430\u0442\u0438\u0432\u043D\u0443\u044E\u043E\u0442\u043C\u0435\u0442\u043A\u0443\u0432\u0440\u0435\u043C\u0435\u043D\u0438 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043E\u0442\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435\u0431\u0435\u0437\u043E\u043F\u0430\u0441\u043D\u043E\u0433\u043E\u0440\u0435\u0436\u0438\u043C\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u044B\u0444\u0443\u043D\u043A\u0446\u0438\u043E\u043D\u0430\u043B\u044C\u043D\u044B\u0445\u043E\u043F\u0446\u0438\u0439\u0438\u043D\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043F\u043E\u043B\u043D\u043E\u0435\u0438\u043C\u044F\u043F\u0440\u0435\u0434\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u043D\u043E\u0433\u043E\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u044F\u043D\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u043E\u043D\u043D\u044B\u0445\u0441\u0441\u044B\u043B\u043E\u043A \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u043F\u0440\u043E\u0432\u0435\u0440\u043A\u0443\u0441\u043B\u043E\u0436\u043D\u043E\u0441\u0442\u0438\u043F\u0430\u0440\u043E\u043B\u0435\u0439\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0435\u0439 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0440\u0430\u0437\u0434\u0435\u043B\u0438\u0442\u0435\u043B\u044C\u043F\u0443\u0442\u0438 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0440\u0430\u0437\u0434\u0435\u043B\u0438\u0442\u0435\u043B\u044C\u043F\u0443\u0442\u0438\u043A\u043B\u0438\u0435\u043D\u0442\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0440\u0430\u0437\u0434\u0435\u043B\u0438\u0442\u0435\u043B\u044C\u043F\u0443\u0442\u0438\u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0441\u0435\u0430\u043D\u0441\u044B\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439\u0431\u0430\u0437\u044B \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0441\u043A\u043E\u0440\u043E\u0441\u0442\u044C\u043A\u043B\u0438\u0435\u043D\u0442\u0441\u043A\u043E\u0433\u043E\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u044F \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u044F\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439\u0431\u0430\u0437\u044B \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044E \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435\u043E\u0431\u044A\u0435\u043A\u0442\u0430\u0438\u0444\u043E\u0440\u043C\u044B \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0441\u043E\u0441\u0442\u0430\u0432\u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u043E\u0433\u043E\u0438\u043D\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430odata \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0441\u0442\u0440\u0443\u043A\u0442\u0443\u0440\u0443\u0445\u0440\u0430\u043D\u0435\u043D\u0438\u044F\u0431\u0430\u0437\u044B\u0434\u0430\u043D\u043D\u044B\u0445 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0442\u0435\u043A\u0443\u0449\u0438\u0439\u0441\u0435\u0430\u043D\u0441\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439\u0431\u0430\u0437\u044B \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0444\u0430\u0439\u043B \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0444\u0430\u0439\u043B\u044B \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0444\u043E\u0440\u043C\u0443 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0444\u0443\u043D\u043A\u0446\u0438\u043E\u043D\u0430\u043B\u044C\u043D\u0443\u044E\u043E\u043F\u0446\u0438\u044E \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0444\u0443\u043D\u043A\u0446\u0438\u043E\u043D\u0430\u043B\u044C\u043D\u0443\u044E\u043E\u043F\u0446\u0438\u044E\u0438\u043D\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 \u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0447\u0430\u0441\u043E\u0432\u043E\u0439\u043F\u043E\u044F\u0441\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439\u0431\u0430\u0437\u044B \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0438\u043E\u0441 \u043F\u043E\u043C\u0435\u0441\u0442\u0438\u0442\u044C\u0432\u043E\u0432\u0440\u0435\u043C\u0435\u043D\u043D\u043E\u0435\u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0435 \u043F\u043E\u043C\u0435\u0441\u0442\u0438\u0442\u044C\u0444\u0430\u0439\u043B \u043F\u043E\u043C\u0435\u0441\u0442\u0438\u0442\u044C\u0444\u0430\u0439\u043B\u044B \u043F\u0440\u0430\u0432 \u043F\u0440\u0430\u0432\u043E\u0434\u043E\u0441\u0442\u0443\u043F\u0430 \u043F\u0440\u0435\u0434\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u043D\u043E\u0435\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u043A\u043E\u0434\u0430\u043B\u043E\u043A\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u0438 \u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u043F\u0435\u0440\u0438\u043E\u0434\u0430 \u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u043F\u0440\u0430\u0432\u0430 \u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F \u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u0441\u043E\u0431\u044B\u0442\u0438\u044F\u0436\u0443\u0440\u043D\u0430\u043B\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u0447\u0430\u0441\u043E\u0432\u043E\u0433\u043E\u043F\u043E\u044F\u0441\u0430 \u043F\u0440\u0435\u0434\u0443\u043F\u0440\u0435\u0436\u0434\u0435\u043D\u0438\u0435 \u043F\u0440\u0435\u043A\u0440\u0430\u0442\u0438\u0442\u044C\u0440\u0430\u0431\u043E\u0442\u0443\u0441\u0438\u0441\u0442\u0435\u043C\u044B \u043F\u0440\u0438\u0432\u0438\u043B\u0435\u0433\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u044B\u0439\u0440\u0435\u0436\u0438\u043C \u043F\u0440\u043E\u0434\u043E\u043B\u0436\u0438\u0442\u044C\u0432\u044B\u0437\u043E\u0432 \u043F\u0440\u043E\u0447\u0438\u0442\u0430\u0442\u044Cjson \u043F\u0440\u043E\u0447\u0438\u0442\u0430\u0442\u044Cxml \u043F\u0440\u043E\u0447\u0438\u0442\u0430\u0442\u044C\u0434\u0430\u0442\u0443json \u043F\u0443\u0441\u0442\u0430\u044F\u0441\u0442\u0440\u043E\u043A\u0430 \u0440\u0430\u0431\u043E\u0447\u0438\u0439\u043A\u0430\u0442\u0430\u043B\u043E\u0433\u0434\u0430\u043D\u043D\u044B\u0445\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F \u0440\u0430\u0437\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u0430\u0442\u044C\u0434\u0430\u043D\u043D\u044B\u0435\u0434\u043B\u044F\u0440\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F \u0440\u0430\u0437\u0434\u0435\u043B\u0438\u0442\u044C\u0444\u0430\u0439\u043B \u0440\u0430\u0437\u043E\u0440\u0432\u0430\u0442\u044C\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435\u0441\u0432\u043D\u0435\u0448\u043D\u0438\u043C\u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A\u043E\u043C\u0434\u0430\u043D\u043D\u044B\u0445 \u0440\u0430\u0441\u043A\u043E\u0434\u0438\u0440\u043E\u0432\u0430\u0442\u044C\u0441\u0442\u0440\u043E\u043A\u0443 \u0440\u043E\u043B\u044C\u0434\u043E\u0441\u0442\u0443\u043F\u043D\u0430 \u0441\u0435\u043A\u0443\u043D\u0434\u0430 \u0441\u0438\u0433\u043D\u0430\u043B \u0441\u0438\u043C\u0432\u043E\u043B \u0441\u043A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C\u0436\u0443\u0440\u043D\u0430\u043B\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0441\u043C\u0435\u0449\u0435\u043D\u0438\u0435\u043B\u0435\u0442\u043D\u0435\u0433\u043E\u0432\u0440\u0435\u043C\u0435\u043D\u0438 \u0441\u043C\u0435\u0449\u0435\u043D\u0438\u0435\u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u043E\u0433\u043E\u0432\u0440\u0435\u043C\u0435\u043D\u0438 \u0441\u043E\u0435\u0434\u0438\u043D\u0438\u0442\u044C\u0431\u0443\u0444\u0435\u0440\u044B\u0434\u0432\u043E\u0438\u0447\u043D\u044B\u0445\u0434\u0430\u043D\u043D\u044B\u0445 \u0441\u043E\u0437\u0434\u0430\u0442\u044C\u043A\u0430\u0442\u0430\u043B\u043E\u0433 \u0441\u043E\u0437\u0434\u0430\u0442\u044C\u0444\u0430\u0431\u0440\u0438\u043A\u0443xdto \u0441\u043E\u043A\u0440\u043B \u0441\u043E\u043A\u0440\u043B\u043F \u0441\u043E\u043A\u0440\u043F \u0441\u043E\u043E\u0431\u0449\u0438\u0442\u044C \u0441\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u0435 \u0441\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u0441\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C\u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F \u0441\u0440\u0435\u0434 \u0441\u0442\u0440\u0434\u043B\u0438\u043D\u0430 \u0441\u0442\u0440\u0437\u0430\u043A\u0430\u043D\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044F\u043D\u0430 \u0441\u0442\u0440\u0437\u0430\u043C\u0435\u043D\u0438\u0442\u044C \u0441\u0442\u0440\u043D\u0430\u0439\u0442\u0438 \u0441\u0442\u0440\u043D\u0430\u0447\u0438\u043D\u0430\u0435\u0442\u0441\u044F\u0441 \u0441\u0442\u0440\u043E\u043A\u0430 \u0441\u0442\u0440\u043E\u043A\u0430\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u044F\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439\u0431\u0430\u0437\u044B \u0441\u0442\u0440\u043F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0441\u0442\u0440\u043E\u043A\u0443 \u0441\u0442\u0440\u0440\u0430\u0437\u0434\u0435\u043B\u0438\u0442\u044C \u0441\u0442\u0440\u0441\u043E\u0435\u0434\u0438\u043D\u0438\u0442\u044C \u0441\u0442\u0440\u0441\u0440\u0430\u0432\u043D\u0438\u0442\u044C \u0441\u0442\u0440\u0447\u0438\u0441\u043B\u043E\u0432\u0445\u043E\u0436\u0434\u0435\u043D\u0438\u0439 \u0441\u0442\u0440\u0447\u0438\u0441\u043B\u043E\u0441\u0442\u0440\u043E\u043A \u0441\u0442\u0440\u0448\u0430\u0431\u043B\u043E\u043D \u0442\u0435\u043A\u0443\u0449\u0430\u044F\u0434\u0430\u0442\u0430 \u0442\u0435\u043A\u0443\u0449\u0430\u044F\u0434\u0430\u0442\u0430\u0441\u0435\u0430\u043D\u0441\u0430 \u0442\u0435\u043A\u0443\u0449\u0430\u044F\u0443\u043D\u0438\u0432\u0435\u0440\u0441\u0430\u043B\u044C\u043D\u0430\u044F\u0434\u0430\u0442\u0430 \u0442\u0435\u043A\u0443\u0449\u0430\u044F\u0443\u043D\u0438\u0432\u0435\u0440\u0441\u0430\u043B\u044C\u043D\u0430\u044F\u0434\u0430\u0442\u0430\u0432\u043C\u0438\u043B\u043B\u0438\u0441\u0435\u043A\u0443\u043D\u0434\u0430\u0445 \u0442\u0435\u043A\u0443\u0449\u0438\u0439\u0432\u0430\u0440\u0438\u0430\u043D\u0442\u0438\u043D\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430\u043A\u043B\u0438\u0435\u043D\u0442\u0441\u043A\u043E\u0433\u043E\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F \u0442\u0435\u043A\u0443\u0449\u0438\u0439\u0432\u0430\u0440\u0438\u0430\u043D\u0442\u043E\u0441\u043D\u043E\u0432\u043D\u043E\u0433\u043E\u0448\u0440\u0438\u0444\u0442\u0430\u043A\u043B\u0438\u0435\u043D\u0442\u0441\u043A\u043E\u0433\u043E\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F \u0442\u0435\u043A\u0443\u0449\u0438\u0439\u043A\u043E\u0434\u043B\u043E\u043A\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u0438 \u0442\u0435\u043A\u0443\u0449\u0438\u0439\u0440\u0435\u0436\u0438\u043C\u0437\u0430\u043F\u0443\u0441\u043A\u0430 \u0442\u0435\u043A\u0443\u0449\u0438\u0439\u044F\u0437\u044B\u043A \u0442\u0435\u043A\u0443\u0449\u0438\u0439\u044F\u0437\u044B\u043A\u0441\u0438\u0441\u0442\u0435\u043C\u044B \u0442\u0438\u043F \u0442\u0438\u043F\u0437\u043D\u0447 \u0442\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u044F\u0430\u043A\u0442\u0438\u0432\u043D\u0430 \u0442\u0440\u0435\u0433 \u0443\u0434\u0430\u043B\u0438\u0442\u044C\u0434\u0430\u043D\u043D\u044B\u0435\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439\u0431\u0430\u0437\u044B \u0443\u0434\u0430\u043B\u0438\u0442\u044C\u0438\u0437\u0432\u0440\u0435\u043C\u0435\u043D\u043D\u043E\u0433\u043E\u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0430 \u0443\u0434\u0430\u043B\u0438\u0442\u044C\u043E\u0431\u044A\u0435\u043A\u0442\u044B \u0443\u0434\u0430\u043B\u0438\u0442\u044C\u0444\u0430\u0439\u043B\u044B \u0443\u043D\u0438\u0432\u0435\u0440\u0441\u0430\u043B\u044C\u043D\u043E\u0435\u0432\u0440\u0435\u043C\u044F \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0431\u0435\u0437\u043E\u043F\u0430\u0441\u043D\u044B\u0439\u0440\u0435\u0436\u0438\u043C \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0431\u0435\u0437\u043E\u043F\u0430\u0441\u043D\u044B\u0439\u0440\u0435\u0436\u0438\u043C\u0440\u0430\u0437\u0434\u0435\u043B\u0435\u043D\u0438\u044F\u0434\u0430\u043D\u043D\u044B\u0445 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u043A\u0443\u0441\u0435\u0430\u043D\u0441\u043E\u0432 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0432\u043D\u0435\u0448\u043D\u044E\u044E\u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442\u0443 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0432\u0440\u0435\u043C\u044F\u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u0438\u044F\u0441\u043F\u044F\u0449\u0435\u0433\u043E\u0441\u0435\u0430\u043D\u0441\u0430 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0432\u0440\u0435\u043C\u044F\u0437\u0430\u0441\u044B\u043F\u0430\u043D\u0438\u044F\u043F\u0430\u0441\u0441\u0438\u0432\u043D\u043E\u0433\u043E\u0441\u0435\u0430\u043D\u0441\u0430 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0432\u0440\u0435\u043C\u044F\u043E\u0436\u0438\u0434\u0430\u043D\u0438\u044F\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A\u043A\u043B\u0438\u0435\u043D\u0442\u0441\u043A\u043E\u0433\u043E\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A\u0441\u0438\u0441\u0442\u0435\u043C\u044B \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0436\u0443\u0440\u043D\u0430\u043B\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0441\u043E\u0431\u044B\u0442\u0438\u044F\u0436\u0443\u0440\u043D\u0430\u043B\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u043A\u0440\u0430\u0442\u043A\u0438\u0439\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u043C\u0438\u043D\u0438\u043C\u0430\u043B\u044C\u043D\u0443\u044E\u0434\u043B\u0438\u043D\u0443\u043F\u0430\u0440\u043E\u043B\u0435\u0439\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0435\u0439 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u043C\u043E\u043D\u043E\u043F\u043E\u043B\u044C\u043D\u044B\u0439\u0440\u0435\u0436\u0438\u043C \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438\u043A\u043B\u0438\u0435\u043D\u0442\u0430\u043B\u0438\u0446\u0435\u043D\u0437\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435\u043F\u0440\u0435\u0434\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u043D\u044B\u0445\u0434\u0430\u043D\u043D\u044B\u0445\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439\u0431\u0430\u0437\u044B \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u043E\u0442\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435\u0431\u0435\u0437\u043E\u043F\u0430\u0441\u043D\u043E\u0433\u043E\u0440\u0435\u0436\u0438\u043C\u0430 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u044B\u0444\u0443\u043D\u043A\u0446\u0438\u043E\u043D\u0430\u043B\u044C\u043D\u044B\u0445\u043E\u043F\u0446\u0438\u0439\u0438\u043D\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u043F\u0440\u0438\u0432\u0438\u043B\u0435\u0433\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u044B\u0439\u0440\u0435\u0436\u0438\u043C \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u043F\u0440\u043E\u0432\u0435\u0440\u043A\u0443\u0441\u043B\u043E\u0436\u043D\u043E\u0441\u0442\u0438\u043F\u0430\u0440\u043E\u043B\u0435\u0439\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0435\u0439 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u0435\u0440\u0430\u0431\u043E\u0442\u044B\u0441\u043A\u0440\u0438\u043F\u0442\u043E\u0433\u0440\u0430\u0444\u0438\u0435\u0439 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u0435\u0440\u0430\u0431\u043E\u0442\u044B\u0441\u0444\u0430\u0439\u043B\u0430\u043C\u0438 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435\u0441\u0432\u043D\u0435\u0448\u043D\u0438\u043C\u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A\u043E\u043C\u0434\u0430\u043D\u043D\u044B\u0445 \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435\u043E\u0431\u044A\u0435\u043A\u0442\u0430\u0438\u0444\u043E\u0440\u043C\u044B \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0441\u043E\u0441\u0442\u0430\u0432\u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u043E\u0433\u043E\u0438\u043D\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430odata \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0447\u0430\u0441\u043E\u0432\u043E\u0439\u043F\u043E\u044F\u0441\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439\u0431\u0430\u0437\u044B \u0443\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C\u0447\u0430\u0441\u043E\u0432\u043E\u0439\u043F\u043E\u044F\u0441\u0441\u0435\u0430\u043D\u0441\u0430 \u0444\u043E\u0440\u043C\u0430\u0442 \u0446\u0435\u043B \u0447\u0430\u0441 \u0447\u0430\u0441\u043E\u0432\u043E\u0439\u043F\u043E\u044F\u0441 \u0447\u0430\u0441\u043E\u0432\u043E\u0439\u043F\u043E\u044F\u0441\u0441\u0435\u0430\u043D\u0441\u0430 \u0447\u0438\u0441\u043B\u043E \u0447\u0438\u0441\u043B\u043E\u043F\u0440\u043E\u043F\u0438\u0441\u044C\u044E \u044D\u0442\u043E\u0430\u0434\u0440\u0435\u0441\u0432\u0440\u0435\u043C\u0435\u043D\u043D\u043E\u0433\u043E\u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0430 ";
  var v8_global_context_property = "ws\u0441\u0441\u044B\u043B\u043A\u0438 \u0431\u0438\u0431\u043B\u0438\u043E\u0442\u0435\u043A\u0430\u043A\u0430\u0440\u0442\u0438\u043D\u043E\u043A \u0431\u0438\u0431\u043B\u0438\u043E\u0442\u0435\u043A\u0430\u043C\u0430\u043A\u0435\u0442\u043E\u0432\u043E\u0444\u043E\u0440\u043C\u043B\u0435\u043D\u0438\u044F\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0431\u0438\u0431\u043B\u0438\u043E\u0442\u0435\u043A\u0430\u0441\u0442\u0438\u043B\u0435\u0439 \u0431\u0438\u0437\u043D\u0435\u0441\u043F\u0440\u043E\u0446\u0435\u0441\u0441\u044B \u0432\u043D\u0435\u0448\u043D\u0438\u0435\u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0432\u043D\u0435\u0448\u043D\u0438\u0435\u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0438 \u0432\u043D\u0435\u0448\u043D\u0438\u0435\u043E\u0442\u0447\u0435\u0442\u044B \u0432\u0441\u0442\u0440\u043E\u0435\u043D\u043D\u044B\u0435\u043F\u043E\u043A\u0443\u043F\u043A\u0438 \u0433\u043B\u0430\u0432\u043D\u044B\u0439\u0438\u043D\u0442\u0435\u0440\u0444\u0435\u0439\u0441 \u0433\u043B\u0430\u0432\u043D\u044B\u0439\u0441\u0442\u0438\u043B\u044C \u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u044B \u0434\u043E\u0441\u0442\u0430\u0432\u043B\u044F\u0435\u043C\u044B\u0435\u0443\u0432\u0435\u0434\u043E\u043C\u043B\u0435\u043D\u0438\u044F \u0436\u0443\u0440\u043D\u0430\u043B\u044B\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u043E\u0432 \u0437\u0430\u0434\u0430\u0447\u0438 \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044F\u043E\u0431\u0438\u043D\u0442\u0435\u0440\u043D\u0435\u0442\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0438 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0440\u0430\u0431\u043E\u0447\u0435\u0439\u0434\u0430\u0442\u044B \u0438\u0441\u0442\u043E\u0440\u0438\u044F\u0440\u0430\u0431\u043E\u0442\u044B\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F \u043A\u043E\u043D\u0441\u0442\u0430\u043D\u0442\u044B \u043A\u0440\u0438\u0442\u0435\u0440\u0438\u0438\u043E\u0442\u0431\u043E\u0440\u0430 \u043C\u0435\u0442\u0430\u0434\u0430\u043D\u043D\u044B\u0435 \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0438 \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0440\u0435\u043A\u043B\u0430\u043C\u044B \u043E\u0442\u043F\u0440\u0430\u0432\u043A\u0430\u0434\u043E\u0441\u0442\u0430\u0432\u043B\u044F\u0435\u043C\u044B\u0445\u0443\u0432\u0435\u0434\u043E\u043C\u043B\u0435\u043D\u0438\u0439 \u043E\u0442\u0447\u0435\u0442\u044B \u043F\u0430\u043D\u0435\u043B\u044C\u0437\u0430\u0434\u0430\u0447\u043E\u0441 \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u0437\u0430\u043F\u0443\u0441\u043A\u0430 \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u044B\u0441\u0435\u0430\u043D\u0441\u0430 \u043F\u0435\u0440\u0435\u0447\u0438\u0441\u043B\u0435\u043D\u0438\u044F \u043F\u043B\u0430\u043D\u044B\u0432\u0438\u0434\u043E\u0432\u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u043F\u043B\u0430\u043D\u044B\u0432\u0438\u0434\u043E\u0432\u0445\u0430\u0440\u0430\u043A\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043A \u043F\u043B\u0430\u043D\u044B\u043E\u0431\u043C\u0435\u043D\u0430 \u043F\u043B\u0430\u043D\u044B\u0441\u0447\u0435\u0442\u043E\u0432 \u043F\u043E\u043B\u043D\u043E\u0442\u0435\u043A\u0441\u0442\u043E\u0432\u044B\u0439\u043F\u043E\u0438\u0441\u043A \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u0438\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u043E\u043D\u043D\u043E\u0439\u0431\u0430\u0437\u044B \u043F\u043E\u0441\u043B\u0435\u0434\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u043D\u043E\u0441\u0442\u0438 \u043F\u0440\u043E\u0432\u0435\u0440\u043A\u0430\u0432\u0441\u0442\u0440\u043E\u0435\u043D\u043D\u044B\u0445\u043F\u043E\u043A\u0443\u043F\u043E\u043A \u0440\u0430\u0431\u043E\u0447\u0430\u044F\u0434\u0430\u0442\u0430 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u044F\u043A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u044B\u0431\u0443\u0445\u0433\u0430\u043B\u0442\u0435\u0440\u0438\u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u044B\u043D\u0430\u043A\u043E\u043F\u043B\u0435\u043D\u0438\u044F \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u044B\u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u044B\u0441\u0432\u0435\u0434\u0435\u043D\u0438\u0439 \u0440\u0435\u0433\u043B\u0430\u043C\u0435\u043D\u0442\u043D\u044B\u0435\u0437\u0430\u0434\u0430\u043D\u0438\u044F \u0441\u0435\u0440\u0438\u0430\u043B\u0438\u0437\u0430\u0442\u043E\u0440xdto \u0441\u043F\u0440\u0430\u0432\u043E\u0447\u043D\u0438\u043A\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u0433\u0435\u043E\u043F\u043E\u0437\u0438\u0446\u0438\u043E\u043D\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043A\u0440\u0438\u043F\u0442\u043E\u0433\u0440\u0430\u0444\u0438\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043C\u0443\u043B\u044C\u0442\u0438\u043C\u0435\u0434\u0438\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F\u0440\u0435\u043A\u043B\u0430\u043C\u044B \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043F\u043E\u0447\u0442\u044B \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u0442\u0435\u043B\u0435\u0444\u043E\u043D\u0438\u0438 \u0444\u0430\u0431\u0440\u0438\u043A\u0430xdto \u0444\u0430\u0439\u043B\u043E\u0432\u044B\u0435\u043F\u043E\u0442\u043E\u043A\u0438 \u0444\u043E\u043D\u043E\u0432\u044B\u0435\u0437\u0430\u0434\u0430\u043D\u0438\u044F \u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0430\u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A \u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0435\u0432\u0430\u0440\u0438\u0430\u043D\u0442\u043E\u0432\u043E\u0442\u0447\u0435\u0442\u043E\u0432 \u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0435\u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A\u0434\u0430\u043D\u043D\u044B\u0445\u0444\u043E\u0440\u043C \u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0435\u043E\u0431\u0449\u0438\u0445\u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A \u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0435\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u0441\u043A\u0438\u0445\u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A\u0434\u0438\u043D\u0430\u043C\u0438\u0447\u0435\u0441\u043A\u0438\u0445\u0441\u043F\u0438\u0441\u043A\u043E\u0432 \u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0435\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u0441\u043A\u0438\u0445\u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A\u043E\u0442\u0447\u0435\u0442\u043E\u0432 \u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0435\u0441\u0438\u0441\u0442\u0435\u043C\u043D\u044B\u0445\u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A ";
  var BUILTIN = v7_system_constants + v7_global_context_methods + v8_global_context_methods + v8_global_context_property;
  var v8_system_sets_of_values = "web\u0446\u0432\u0435\u0442\u0430 windows\u0446\u0432\u0435\u0442\u0430 windows\u0448\u0440\u0438\u0444\u0442\u044B \u0431\u0438\u0431\u043B\u0438\u043E\u0442\u0435\u043A\u0430\u043A\u0430\u0440\u0442\u0438\u043D\u043E\u043A \u0440\u0430\u043C\u043A\u0438\u0441\u0442\u0438\u043B\u044F \u0441\u0438\u043C\u0432\u043E\u043B\u044B \u0446\u0432\u0435\u0442\u0430\u0441\u0442\u0438\u043B\u044F \u0448\u0440\u0438\u0444\u0442\u044B\u0441\u0442\u0438\u043B\u044F ";
  var v8_system_enums_interface = "\u0430\u0432\u0442\u043E\u043C\u0430\u0442\u0438\u0447\u0435\u0441\u043A\u043E\u0435\u0441\u043E\u0445\u0440\u0430\u043D\u0435\u043D\u0438\u0435\u0434\u0430\u043D\u043D\u044B\u0445\u0444\u043E\u0440\u043C\u044B\u0432\u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0430\u0445 \u0430\u0432\u0442\u043E\u043D\u0443\u043C\u0435\u0440\u0430\u0446\u0438\u044F\u0432\u0444\u043E\u0440\u043C\u0435 \u0430\u0432\u0442\u043E\u0440\u0430\u0437\u0434\u0432\u0438\u0436\u0435\u043D\u0438\u0435\u0441\u0435\u0440\u0438\u0439 \u0430\u043D\u0438\u043C\u0430\u0446\u0438\u044F\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u0432\u0430\u0440\u0438\u0430\u043D\u0442\u0432\u044B\u0440\u0430\u0432\u043D\u0438\u0432\u0430\u043D\u0438\u044F\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432\u0438\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043A\u043E\u0432 \u0432\u0430\u0440\u0438\u0430\u043D\u0442\u0443\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u044F\u0432\u044B\u0441\u043E\u0442\u043E\u0439\u0442\u0430\u0431\u043B\u0438\u0446\u044B \u0432\u0435\u0440\u0442\u0438\u043A\u0430\u043B\u044C\u043D\u0430\u044F\u043F\u0440\u043E\u043A\u0440\u0443\u0442\u043A\u0430\u0444\u043E\u0440\u043C\u044B \u0432\u0435\u0440\u0442\u0438\u043A\u0430\u043B\u044C\u043D\u043E\u0435\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u0432\u0435\u0440\u0442\u0438\u043A\u0430\u043B\u044C\u043D\u043E\u0435\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430 \u0432\u0438\u0434\u0433\u0440\u0443\u043F\u043F\u044B\u0444\u043E\u0440\u043C\u044B \u0432\u0438\u0434\u0434\u0435\u043A\u043E\u0440\u0430\u0446\u0438\u0438\u0444\u043E\u0440\u043C\u044B \u0432\u0438\u0434\u0434\u043E\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u044F\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u0444\u043E\u0440\u043C\u044B \u0432\u0438\u0434\u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u044F\u0434\u0430\u043D\u043D\u044B\u0445 \u0432\u0438\u0434\u043A\u043D\u043E\u043F\u043A\u0438\u0444\u043E\u0440\u043C\u044B \u0432\u0438\u0434\u043F\u0435\u0440\u0435\u043A\u043B\u044E\u0447\u0430\u0442\u0435\u043B\u044F \u0432\u0438\u0434\u043F\u043E\u0434\u043F\u0438\u0441\u0435\u0439\u043A\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u0435 \u0432\u0438\u0434\u043F\u043E\u043B\u044F\u0444\u043E\u0440\u043C\u044B \u0432\u0438\u0434\u0444\u043B\u0430\u0436\u043A\u0430 \u0432\u043B\u0438\u044F\u043D\u0438\u0435\u0440\u0430\u0437\u043C\u0435\u0440\u0430\u043D\u0430\u043F\u0443\u0437\u044B\u0440\u0435\u043A\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u0433\u043E\u0440\u0438\u0437\u043E\u043D\u0442\u0430\u043B\u044C\u043D\u043E\u0435\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u0433\u043E\u0440\u0438\u0437\u043E\u043D\u0442\u0430\u043B\u044C\u043D\u043E\u0435\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430 \u0433\u0440\u0443\u043F\u043F\u0438\u0440\u043E\u0432\u043A\u0430\u043A\u043E\u043B\u043E\u043D\u043E\u043A \u0433\u0440\u0443\u043F\u043F\u0438\u0440\u043E\u0432\u043A\u0430\u043F\u043E\u0434\u0447\u0438\u043D\u0435\u043D\u043D\u044B\u0445\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432\u0444\u043E\u0440\u043C\u044B \u0433\u0440\u0443\u043F\u043F\u044B\u0438\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u044B \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435\u043F\u0435\u0440\u0435\u0442\u0430\u0441\u043A\u0438\u0432\u0430\u043D\u0438\u044F \u0434\u043E\u043F\u043E\u043B\u043D\u0438\u0442\u0435\u043B\u044C\u043D\u044B\u0439\u0440\u0435\u0436\u0438\u043C\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F \u0434\u043E\u043F\u0443\u0441\u0442\u0438\u043C\u044B\u0435\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044F\u043F\u0435\u0440\u0435\u0442\u0430\u0441\u043A\u0438\u0432\u0430\u043D\u0438\u044F \u0438\u043D\u0442\u0435\u0440\u0432\u0430\u043B\u043C\u0435\u0436\u0434\u0443\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u043C\u0438\u0444\u043E\u0440\u043C\u044B \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0432\u044B\u0432\u043E\u0434\u0430 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u043F\u043E\u043B\u043E\u0441\u044B\u043F\u0440\u043E\u043A\u0440\u0443\u0442\u043A\u0438 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u0435\u043C\u043E\u0435\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435\u0442\u043E\u0447\u043A\u0438\u0431\u0438\u0440\u0436\u0435\u0432\u043E\u0439\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u0438\u0441\u0442\u043E\u0440\u0438\u044F\u0432\u044B\u0431\u043E\u0440\u0430\u043F\u0440\u0438\u0432\u0432\u043E\u0434\u0435 \u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439\u043E\u0441\u0438\u0442\u043E\u0447\u0435\u043A\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F\u0440\u0430\u0437\u043C\u0435\u0440\u0430\u043F\u0443\u0437\u044B\u0440\u044C\u043A\u0430\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u043A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u044F\u0433\u0440\u0443\u043F\u043F\u044B\u043A\u043E\u043C\u0430\u043D\u0434 \u043C\u0430\u043A\u0441\u0438\u043C\u0443\u043C\u0441\u0435\u0440\u0438\u0439 \u043D\u0430\u0447\u0430\u043B\u044C\u043D\u043E\u0435\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0434\u0435\u0440\u0435\u0432\u0430 \u043D\u0430\u0447\u0430\u043B\u044C\u043D\u043E\u0435\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0441\u043F\u0438\u0441\u043A\u0430 \u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435\u0442\u0435\u043A\u0441\u0442\u0430\u0440\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F \u043E\u0440\u0438\u0435\u043D\u0442\u0430\u0446\u0438\u044F\u0434\u0435\u043D\u0434\u0440\u043E\u0433\u0440\u0430\u043C\u043C\u044B \u043E\u0440\u0438\u0435\u043D\u0442\u0430\u0446\u0438\u044F\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u043E\u0440\u0438\u0435\u043D\u0442\u0430\u0446\u0438\u044F\u043C\u0435\u0442\u043E\u043A\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u043E\u0440\u0438\u0435\u043D\u0442\u0430\u0446\u0438\u044F\u043C\u0435\u0442\u043E\u043A\u0441\u0432\u043E\u0434\u043D\u043E\u0439\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u043E\u0440\u0438\u0435\u043D\u0442\u0430\u0446\u0438\u044F\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u0444\u043E\u0440\u043C\u044B \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0432\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u0435 \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0432\u043B\u0435\u0433\u0435\u043D\u0434\u0435\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0433\u0440\u0443\u043F\u043F\u044B\u043A\u043D\u043E\u043F\u043E\u043A \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043A\u0430\u0448\u043A\u0430\u043B\u044B\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439\u0441\u0432\u043E\u0434\u043D\u043E\u0439\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F\u0438\u0437\u043C\u0435\u0440\u0438\u0442\u0435\u043B\u044C\u043D\u043E\u0439\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0438\u043D\u0442\u0435\u0440\u0432\u0430\u043B\u0430\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B\u0433\u0430\u043D\u0442\u0430 \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u043A\u043D\u043E\u043F\u043A\u0438 \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u043A\u043D\u043E\u043F\u043A\u0438\u0432\u044B\u0431\u043E\u0440\u0430 \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u043E\u0431\u0441\u0443\u0436\u0434\u0435\u043D\u0438\u0439\u0444\u043E\u0440\u043C\u044B \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u043E\u0431\u044B\u0447\u043D\u043E\u0439\u0433\u0440\u0443\u043F\u043F\u044B \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u043E\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043B\u044C\u043D\u044B\u0445\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439\u043F\u0443\u0437\u044B\u0440\u044C\u043A\u043E\u0432\u043E\u0439\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u043F\u0430\u043D\u0435\u043B\u0438\u043F\u043E\u0438\u0441\u043A\u0430 \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u043F\u043E\u0434\u0441\u043A\u0430\u0437\u043A\u0438 \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u043F\u0440\u0435\u0434\u0443\u043F\u0440\u0435\u0436\u0434\u0435\u043D\u0438\u044F\u043F\u0440\u0438\u0440\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0438 \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0440\u0430\u0437\u043C\u0435\u0442\u043A\u0438\u043F\u043E\u043B\u043E\u0441\u044B\u0440\u0435\u0433\u0443\u043B\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0444\u043E\u0440\u043C\u044B \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0442\u0430\u0431\u043B\u0438\u0446\u044B \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0442\u0435\u043A\u0441\u0442\u0430\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B\u0433\u0430\u043D\u0442\u0430 \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0443\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u044F\u043E\u0431\u044B\u0447\u043D\u043E\u0439\u0433\u0440\u0443\u043F\u043F\u044B \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0444\u0438\u0433\u0443\u0440\u044B\u043A\u043D\u043E\u043F\u043A\u0438 \u043F\u0430\u043B\u0438\u0442\u0440\u0430\u0446\u0432\u0435\u0442\u043E\u0432\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u043F\u043E\u0432\u0435\u0434\u0435\u043D\u0438\u0435\u043E\u0431\u044B\u0447\u043D\u043E\u0439\u0433\u0440\u0443\u043F\u043F\u044B \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u043A\u0430\u043C\u0430\u0441\u0448\u0442\u0430\u0431\u0430\u0434\u0435\u043D\u0434\u0440\u043E\u0433\u0440\u0430\u043C\u043C\u044B \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u043A\u0430\u043C\u0430\u0441\u0448\u0442\u0430\u0431\u0430\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B\u0433\u0430\u043D\u0442\u0430 \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u043A\u0430\u043C\u0430\u0441\u0448\u0442\u0430\u0431\u0430\u0441\u0432\u043E\u0434\u043D\u043E\u0439\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u043F\u043E\u0438\u0441\u043A\u0432\u0442\u0430\u0431\u043B\u0438\u0446\u0435\u043F\u0440\u0438\u0432\u0432\u043E\u0434\u0435 \u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043A\u0430\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u0444\u043E\u0440\u043C\u044B \u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u043A\u0430\u0440\u0442\u0438\u043D\u043A\u0438\u043A\u043D\u043E\u043F\u043A\u0438\u0444\u043E\u0440\u043C\u044B \u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u043A\u0430\u0440\u0442\u0438\u043D\u043A\u0438\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u043E\u0439\u0441\u0445\u0435\u043C\u044B \u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u043A\u043E\u043C\u0430\u043D\u0434\u043D\u043E\u0439\u043F\u0430\u043D\u0435\u043B\u0438\u0444\u043E\u0440\u043C\u044B \u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u043A\u043E\u043C\u0430\u043D\u0434\u043D\u043E\u0439\u043F\u0430\u043D\u0435\u043B\u0438\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u0444\u043E\u0440\u043C\u044B \u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u043E\u043F\u043E\u0440\u043D\u043E\u0439\u0442\u043E\u0447\u043A\u0438\u043E\u0442\u0440\u0438\u0441\u043E\u0432\u043A\u0438 \u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u043F\u043E\u0434\u043F\u0438\u0441\u0435\u0439\u043A\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u0435 \u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u043F\u043E\u0434\u043F\u0438\u0441\u0435\u0439\u0448\u043A\u0430\u043B\u044B\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439\u0438\u0437\u043C\u0435\u0440\u0438\u0442\u0435\u043B\u044C\u043D\u043E\u0439\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0441\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u044F\u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u0430 \u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0441\u0442\u0440\u043E\u043A\u0438\u043F\u043E\u0438\u0441\u043A\u0430 \u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0442\u0435\u043A\u0441\u0442\u0430\u0441\u043E\u0435\u0434\u0438\u043D\u0438\u0442\u0435\u043B\u044C\u043D\u043E\u0439\u043B\u0438\u043D\u0438\u0438 \u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0443\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u044F\u043F\u043E\u0438\u0441\u043A\u043E\u043C \u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0448\u043A\u0430\u043B\u044B\u0432\u0440\u0435\u043C\u0435\u043D\u0438 \u043F\u043E\u0440\u044F\u0434\u043E\u043A\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F\u0442\u043E\u0447\u0435\u043A\u0433\u043E\u0440\u0438\u0437\u043E\u043D\u0442\u0430\u043B\u044C\u043D\u043E\u0439\u0433\u0438\u0441\u0442\u043E\u0433\u0440\u0430\u043C\u043C\u044B \u043F\u043E\u0440\u044F\u0434\u043E\u043A\u0441\u0435\u0440\u0438\u0439\u0432\u043B\u0435\u0433\u0435\u043D\u0434\u0435\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u0440\u0430\u0437\u043C\u0435\u0440\u043A\u0430\u0440\u0442\u0438\u043D\u043A\u0438 \u0440\u0430\u0441\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043A\u0430\u0448\u043A\u0430\u043B\u044B\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u0440\u0430\u0441\u0442\u044F\u0433\u0438\u0432\u0430\u043D\u0438\u0435\u043F\u043E\u0432\u0435\u0440\u0442\u0438\u043A\u0430\u043B\u0438\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B\u0433\u0430\u043D\u0442\u0430 \u0440\u0435\u0436\u0438\u043C\u0430\u0432\u0442\u043E\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F\u0441\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u044F \u0440\u0435\u0436\u0438\u043C\u0432\u0432\u043E\u0434\u0430\u0441\u0442\u0440\u043E\u043A\u0442\u0430\u0431\u043B\u0438\u0446\u044B \u0440\u0435\u0436\u0438\u043C\u0432\u044B\u0431\u043E\u0440\u0430\u043D\u0435\u0437\u0430\u043F\u043E\u043B\u043D\u0435\u043D\u043D\u043E\u0433\u043E \u0440\u0435\u0436\u0438\u043C\u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u044F\u0434\u0430\u0442\u044B \u0440\u0435\u0436\u0438\u043C\u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u044F\u0441\u0442\u0440\u043E\u043A\u0438\u0442\u0430\u0431\u043B\u0438\u0446\u044B \u0440\u0435\u0436\u0438\u043C\u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u044F\u0442\u0430\u0431\u043B\u0438\u0446\u044B \u0440\u0435\u0436\u0438\u043C\u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u044F\u0440\u0430\u0437\u043C\u0435\u0440\u0430 \u0440\u0435\u0436\u0438\u043C\u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u044F\u0441\u0432\u044F\u0437\u0430\u043D\u043D\u043E\u0433\u043E\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F \u0440\u0435\u0436\u0438\u043C\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F\u0434\u0438\u0430\u043B\u043E\u0433\u0430\u043F\u0435\u0447\u0430\u0442\u0438 \u0440\u0435\u0436\u0438\u043C\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F\u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u0430\u043A\u043E\u043C\u0430\u043D\u0434\u044B \u0440\u0435\u0436\u0438\u043C\u043C\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F\u043F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u0430 \u0440\u0435\u0436\u0438\u043C\u043E\u0441\u043D\u043E\u0432\u043D\u043E\u0433\u043E\u043E\u043A\u043D\u0430\u043A\u043B\u0438\u0435\u043D\u0442\u0441\u043A\u043E\u0433\u043E\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F \u0440\u0435\u0436\u0438\u043C\u043E\u0442\u043A\u0440\u044B\u0442\u0438\u044F\u043E\u043A\u043D\u0430\u0444\u043E\u0440\u043C\u044B \u0440\u0435\u0436\u0438\u043C\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F\u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u044F \u0440\u0435\u0436\u0438\u043C\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F\u0433\u0435\u043E\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u043E\u0439\u0441\u0445\u0435\u043C\u044B \u0440\u0435\u0436\u0438\u043C\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439\u0441\u0435\u0440\u0438\u0438 \u0440\u0435\u0436\u0438\u043C\u043E\u0442\u0440\u0438\u0441\u043E\u0432\u043A\u0438\u0441\u0435\u0442\u043A\u0438\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u043E\u0439\u0441\u0445\u0435\u043C\u044B \u0440\u0435\u0436\u0438\u043C\u043F\u043E\u043B\u0443\u043F\u0440\u043E\u0437\u0440\u0430\u0447\u043D\u043E\u0441\u0442\u0438\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u0440\u0435\u0436\u0438\u043C\u043F\u0440\u043E\u0431\u0435\u043B\u043E\u0432\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u0440\u0435\u0436\u0438\u043C\u0440\u0430\u0437\u043C\u0435\u0449\u0435\u043D\u0438\u044F\u043D\u0430\u0441\u0442\u0440\u0430\u043D\u0438\u0446\u0435 \u0440\u0435\u0436\u0438\u043C\u0440\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F\u043A\u043E\u043B\u043E\u043D\u043A\u0438 \u0440\u0435\u0436\u0438\u043C\u0441\u0433\u043B\u0430\u0436\u0438\u0432\u0430\u043D\u0438\u044F\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u0440\u0435\u0436\u0438\u043C\u0441\u0433\u043B\u0430\u0436\u0438\u0432\u0430\u043D\u0438\u044F\u0438\u043D\u0434\u0438\u043A\u0430\u0442\u043E\u0440\u0430 \u0440\u0435\u0436\u0438\u043C\u0441\u043F\u0438\u0441\u043A\u0430\u0437\u0430\u0434\u0430\u0447 \u0441\u043A\u0432\u043E\u0437\u043D\u043E\u0435\u0432\u044B\u0440\u0430\u0432\u043D\u0438\u0432\u0430\u043D\u0438\u0435 \u0441\u043E\u0445\u0440\u0430\u043D\u0435\u043D\u0438\u0435\u0434\u0430\u043D\u043D\u044B\u0445\u0444\u043E\u0440\u043C\u044B\u0432\u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0430\u0445 \u0441\u043F\u043E\u0441\u043E\u0431\u0437\u0430\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u044F\u0442\u0435\u043A\u0441\u0442\u0430\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043A\u0430\u0448\u043A\u0430\u043B\u044B\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u0441\u043F\u043E\u0441\u043E\u0431\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u044F\u043E\u0433\u0440\u0430\u043D\u0438\u0447\u0438\u0432\u0430\u044E\u0449\u0435\u0433\u043E\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u0430\u044F\u0433\u0440\u0443\u043F\u043F\u0430\u043A\u043E\u043C\u0430\u043D\u0434 \u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u043E\u0435\u043E\u0444\u043E\u0440\u043C\u043B\u0435\u043D\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u043E\u043F\u043E\u0432\u0435\u0449\u0435\u043D\u0438\u044F\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044F \u0441\u0442\u0438\u043B\u044C\u0441\u0442\u0440\u0435\u043B\u043A\u0438 \u0442\u0438\u043F\u0430\u043F\u043F\u0440\u043E\u043A\u0441\u0438\u043C\u0430\u0446\u0438\u0438\u043B\u0438\u043D\u0438\u0438\u0442\u0440\u0435\u043D\u0434\u0430\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u0442\u0438\u043F\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u0442\u0438\u043F\u0435\u0434\u0438\u043D\u0438\u0446\u044B\u0448\u043A\u0430\u043B\u044B\u0432\u0440\u0435\u043C\u0435\u043D\u0438 \u0442\u0438\u043F\u0438\u043C\u043F\u043E\u0440\u0442\u0430\u0441\u0435\u0440\u0438\u0439\u0441\u043B\u043E\u044F\u0433\u0435\u043E\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u043E\u0439\u0441\u0445\u0435\u043C\u044B \u0442\u0438\u043F\u043B\u0438\u043D\u0438\u0438\u0433\u0435\u043E\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u043E\u0439\u0441\u0445\u0435\u043C\u044B \u0442\u0438\u043F\u043B\u0438\u043D\u0438\u0438\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u0442\u0438\u043F\u043C\u0430\u0440\u043A\u0435\u0440\u0430\u0433\u0435\u043E\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u043E\u0439\u0441\u0445\u0435\u043C\u044B \u0442\u0438\u043F\u043C\u0430\u0440\u043A\u0435\u0440\u0430\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u0442\u0438\u043F\u043E\u0431\u043B\u0430\u0441\u0442\u0438\u043E\u0444\u043E\u0440\u043C\u043B\u0435\u043D\u0438\u044F \u0442\u0438\u043F\u043E\u0440\u0433\u0430\u043D\u0438\u0437\u0430\u0446\u0438\u0438\u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A\u0430\u0434\u0430\u043D\u043D\u044B\u0445\u0433\u0435\u043E\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u043E\u0439\u0441\u0445\u0435\u043C\u044B \u0442\u0438\u043F\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F\u0441\u0435\u0440\u0438\u0438\u0441\u043B\u043E\u044F\u0433\u0435\u043E\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u043E\u0439\u0441\u0445\u0435\u043C\u044B \u0442\u0438\u043F\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F\u0442\u043E\u0447\u0435\u0447\u043D\u043E\u0433\u043E\u043E\u0431\u044A\u0435\u043A\u0442\u0430\u0433\u0435\u043E\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u043E\u0439\u0441\u0445\u0435\u043C\u044B \u0442\u0438\u043F\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F\u0448\u043A\u0430\u043B\u044B\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u043B\u0435\u0433\u0435\u043D\u0434\u044B\u0433\u0435\u043E\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u043E\u0439\u0441\u0445\u0435\u043C\u044B \u0442\u0438\u043F\u043F\u043E\u0438\u0441\u043A\u0430\u043E\u0431\u044A\u0435\u043A\u0442\u043E\u0432\u0433\u0435\u043E\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u043E\u0439\u0441\u0445\u0435\u043C\u044B \u0442\u0438\u043F\u043F\u0440\u043E\u0435\u043A\u0446\u0438\u0438\u0433\u0435\u043E\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u043E\u0439\u0441\u0445\u0435\u043C\u044B \u0442\u0438\u043F\u0440\u0430\u0437\u043C\u0435\u0449\u0435\u043D\u0438\u044F\u0438\u0437\u043C\u0435\u0440\u0435\u043D\u0438\u0439 \u0442\u0438\u043F\u0440\u0430\u0437\u043C\u0435\u0449\u0435\u043D\u0438\u044F\u0440\u0435\u043A\u0432\u0438\u0437\u0438\u0442\u043E\u0432\u0438\u0437\u043C\u0435\u0440\u0435\u043D\u0438\u0439 \u0442\u0438\u043F\u0440\u0430\u043C\u043A\u0438\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u0443\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u044F \u0442\u0438\u043F\u0441\u0432\u043E\u0434\u043D\u043E\u0439\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u0442\u0438\u043F\u0441\u0432\u044F\u0437\u0438\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B\u0433\u0430\u043D\u0442\u0430 \u0442\u0438\u043F\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u044F\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439\u043F\u043E\u0441\u0435\u0440\u0438\u044F\u043C\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u0442\u0438\u043F\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u044F\u0442\u043E\u0447\u0435\u043A\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u0442\u0438\u043F\u0441\u043E\u0435\u0434\u0438\u043D\u0438\u0442\u0435\u043B\u044C\u043D\u043E\u0439\u043B\u0438\u043D\u0438\u0438 \u0442\u0438\u043F\u0441\u0442\u043E\u0440\u043E\u043D\u044B\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u043E\u0439\u0441\u0445\u0435\u043C\u044B \u0442\u0438\u043F\u0444\u043E\u0440\u043C\u044B\u043E\u0442\u0447\u0435\u0442\u0430 \u0442\u0438\u043F\u0448\u043A\u0430\u043B\u044B\u0440\u0430\u0434\u0430\u0440\u043D\u043E\u0439\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u0444\u0430\u043A\u0442\u043E\u0440\u043B\u0438\u043D\u0438\u0438\u0442\u0440\u0435\u043D\u0434\u0430\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B \u0444\u0438\u0433\u0443\u0440\u0430\u043A\u043D\u043E\u043F\u043A\u0438 \u0444\u0438\u0433\u0443\u0440\u044B\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u043E\u0439\u0441\u0445\u0435\u043C\u044B \u0444\u0438\u043A\u0441\u0430\u0446\u0438\u044F\u0432\u0442\u0430\u0431\u043B\u0438\u0446\u0435 \u0444\u043E\u0440\u043C\u0430\u0442\u0434\u043D\u044F\u0448\u043A\u0430\u043B\u044B\u0432\u0440\u0435\u043C\u0435\u043D\u0438 \u0444\u043E\u0440\u043C\u0430\u0442\u043A\u0430\u0440\u0442\u0438\u043D\u043A\u0438 \u0448\u0438\u0440\u0438\u043D\u0430\u043F\u043E\u0434\u0447\u0438\u043D\u0435\u043D\u043D\u044B\u0445\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432\u0444\u043E\u0440\u043C\u044B ";
  var v8_system_enums_objects_properties = "\u0432\u0438\u0434\u0434\u0432\u0438\u0436\u0435\u043D\u0438\u044F\u0431\u0443\u0445\u0433\u0430\u043B\u0442\u0435\u0440\u0438\u0438 \u0432\u0438\u0434\u0434\u0432\u0438\u0436\u0435\u043D\u0438\u044F\u043D\u0430\u043A\u043E\u043F\u043B\u0435\u043D\u0438\u044F \u0432\u0438\u0434\u043F\u0435\u0440\u0438\u043E\u0434\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u0432\u0438\u0434\u0441\u0447\u0435\u0442\u0430 \u0432\u0438\u0434\u0442\u043E\u0447\u043A\u0438\u043C\u0430\u0440\u0448\u0440\u0443\u0442\u0430\u0431\u0438\u0437\u043D\u0435\u0441\u043F\u0440\u043E\u0446\u0435\u0441\u0441\u0430 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0430\u0433\u0440\u0435\u0433\u0430\u0442\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u043D\u0430\u043A\u043E\u043F\u043B\u0435\u043D\u0438\u044F \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0433\u0440\u0443\u043F\u043F\u0438\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0440\u0435\u0436\u0438\u043C\u0430\u043F\u0440\u043E\u0432\u0435\u0434\u0435\u043D\u0438\u044F \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0441\u0440\u0435\u0437\u0430 \u043F\u0435\u0440\u0438\u043E\u0434\u0438\u0447\u043D\u043E\u0441\u0442\u044C\u0430\u0433\u0440\u0435\u0433\u0430\u0442\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u043D\u0430\u043A\u043E\u043F\u043B\u0435\u043D\u0438\u044F \u0440\u0435\u0436\u0438\u043C\u0430\u0432\u0442\u043E\u0432\u0440\u0435\u043C\u044F \u0440\u0435\u0436\u0438\u043C\u0437\u0430\u043F\u0438\u0441\u0438\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u0440\u0435\u0436\u0438\u043C\u043F\u0440\u043E\u0432\u0435\u0434\u0435\u043D\u0438\u044F\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 ";
  var v8_system_enums_exchange_plans = "\u0430\u0432\u0442\u043E\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044F\u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0439 \u0434\u043E\u043F\u0443\u0441\u0442\u0438\u043C\u044B\u0439\u043D\u043E\u043C\u0435\u0440\u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F \u043E\u0442\u043F\u0440\u0430\u0432\u043A\u0430\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u0434\u0430\u043D\u043D\u044B\u0445 \u043F\u043E\u043B\u0443\u0447\u0435\u043D\u0438\u0435\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u0434\u0430\u043D\u043D\u044B\u0445 ";
  var v8_system_enums_tabular_document = "\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043E\u0432\u043A\u0438\u0442\u0430\u0431\u043B\u0438\u0447\u043D\u043E\u0433\u043E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u043E\u0440\u0438\u0435\u043D\u0442\u0430\u0446\u0438\u044F\u0441\u0442\u0440\u0430\u043D\u0438\u0446\u044B \u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0438\u0442\u043E\u0433\u043E\u0432\u043A\u043E\u043B\u043E\u043D\u043E\u043A\u0441\u0432\u043E\u0434\u043D\u043E\u0439\u0442\u0430\u0431\u043B\u0438\u0446\u044B \u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0438\u0442\u043E\u0433\u043E\u0432\u0441\u0442\u0440\u043E\u043A\u0441\u0432\u043E\u0434\u043D\u043E\u0439\u0442\u0430\u0431\u043B\u0438\u0446\u044B \u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0442\u0435\u043A\u0441\u0442\u0430\u043E\u0442\u043D\u043E\u0441\u0438\u0442\u0435\u043B\u044C\u043D\u043E\u043A\u0430\u0440\u0442\u0438\u043D\u043A\u0438 \u0440\u0430\u0441\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043A\u0430\u0433\u0440\u0443\u043F\u043F\u0438\u0440\u043E\u0432\u043A\u0438\u0442\u0430\u0431\u043B\u0438\u0447\u043D\u043E\u0433\u043E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u0441\u043F\u043E\u0441\u043E\u0431\u0447\u0442\u0435\u043D\u0438\u044F\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439\u0442\u0430\u0431\u043B\u0438\u0447\u043D\u043E\u0433\u043E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u0442\u0438\u043F\u0434\u0432\u0443\u0441\u0442\u043E\u0440\u043E\u043D\u043D\u0435\u0439\u043F\u0435\u0447\u0430\u0442\u0438 \u0442\u0438\u043F\u0437\u0430\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u044F\u043E\u0431\u043B\u0430\u0441\u0442\u0438\u0442\u0430\u0431\u043B\u0438\u0447\u043D\u043E\u0433\u043E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u0442\u0438\u043F\u043A\u0443\u0440\u0441\u043E\u0440\u043E\u0432\u0442\u0430\u0431\u043B\u0438\u0447\u043D\u043E\u0433\u043E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u0442\u0438\u043F\u043B\u0438\u043D\u0438\u0438\u0440\u0438\u0441\u0443\u043D\u043A\u0430\u0442\u0430\u0431\u043B\u0438\u0447\u043D\u043E\u0433\u043E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u0442\u0438\u043F\u043B\u0438\u043D\u0438\u0438\u044F\u0447\u0435\u0439\u043A\u0438\u0442\u0430\u0431\u043B\u0438\u0447\u043D\u043E\u0433\u043E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u0442\u0438\u043F\u043D\u0430\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u044F\u043F\u0435\u0440\u0435\u0445\u043E\u0434\u0430\u0442\u0430\u0431\u043B\u0438\u0447\u043D\u043E\u0433\u043E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u0442\u0438\u043F\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F\u0432\u044B\u0434\u0435\u043B\u0435\u043D\u0438\u044F\u0442\u0430\u0431\u043B\u0438\u0447\u043D\u043E\u0433\u043E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u0442\u0438\u043F\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F\u043B\u0438\u043D\u0438\u0439\u0441\u0432\u043E\u0434\u043D\u043E\u0439\u0442\u0430\u0431\u043B\u0438\u0446\u044B \u0442\u0438\u043F\u0440\u0430\u0437\u043C\u0435\u0449\u0435\u043D\u0438\u044F\u0442\u0435\u043A\u0441\u0442\u0430\u0442\u0430\u0431\u043B\u0438\u0447\u043D\u043E\u0433\u043E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u0442\u0438\u043F\u0440\u0438\u0441\u0443\u043D\u043A\u0430\u0442\u0430\u0431\u043B\u0438\u0447\u043D\u043E\u0433\u043E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u0442\u0438\u043F\u0441\u043C\u0435\u0449\u0435\u043D\u0438\u044F\u0442\u0430\u0431\u043B\u0438\u0447\u043D\u043E\u0433\u043E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u0442\u0438\u043F\u0443\u0437\u043E\u0440\u0430\u0442\u0430\u0431\u043B\u0438\u0447\u043D\u043E\u0433\u043E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u0442\u0438\u043F\u0444\u0430\u0439\u043B\u0430\u0442\u0430\u0431\u043B\u0438\u0447\u043D\u043E\u0433\u043E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u0442\u043E\u0447\u043D\u043E\u0441\u0442\u044C\u043F\u0435\u0447\u0430\u0442\u0438 \u0447\u0435\u0440\u0435\u0434\u043E\u0432\u0430\u043D\u0438\u0435\u0440\u0430\u0441\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u044F\u0441\u0442\u0440\u0430\u043D\u0438\u0446 ";
  var v8_system_enums_sheduler = "\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u0432\u0440\u0435\u043C\u0435\u043D\u0438\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432\u043F\u043B\u0430\u043D\u0438\u0440\u043E\u0432\u0449\u0438\u043A\u0430 ";
  var v8_system_enums_formatted_document = "\u0442\u0438\u043F\u0444\u0430\u0439\u043B\u0430\u0444\u043E\u0440\u043C\u0430\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u043E\u0433\u043E\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 ";
  var v8_system_enums_query = "\u043E\u0431\u0445\u043E\u0434\u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u0430\u0437\u0430\u043F\u0440\u043E\u0441\u0430 \u0442\u0438\u043F\u0437\u0430\u043F\u0438\u0441\u0438\u0437\u0430\u043F\u0440\u043E\u0441\u0430 ";
  var v8_system_enums_report_builder = "\u0432\u0438\u0434\u0437\u0430\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u044F\u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043E\u0432\u043A\u0438\u043F\u043E\u0441\u0442\u0440\u043E\u0438\u0442\u0435\u043B\u044F\u043E\u0442\u0447\u0435\u0442\u0430 \u0442\u0438\u043F\u0434\u043E\u0431\u0430\u0432\u043B\u0435\u043D\u0438\u044F\u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0439 \u0442\u0438\u043F\u0438\u0437\u043C\u0435\u0440\u0435\u043D\u0438\u044F\u043F\u043E\u0441\u0442\u0440\u043E\u0438\u0442\u0435\u043B\u044F\u043E\u0442\u0447\u0435\u0442\u0430 \u0442\u0438\u043F\u0440\u0430\u0437\u043C\u0435\u0449\u0435\u043D\u0438\u044F\u0438\u0442\u043E\u0433\u043E\u0432 ";
  var v8_system_enums_files = "\u0434\u043E\u0441\u0442\u0443\u043F\u043A\u0444\u0430\u0439\u043B\u0443 \u0440\u0435\u0436\u0438\u043C\u0434\u0438\u0430\u043B\u043E\u0433\u0430\u0432\u044B\u0431\u043E\u0440\u0430\u0444\u0430\u0439\u043B\u0430 \u0440\u0435\u0436\u0438\u043C\u043E\u0442\u043A\u0440\u044B\u0442\u0438\u044F\u0444\u0430\u0439\u043B\u0430 ";
  var v8_system_enums_query_builder = "\u0442\u0438\u043F\u0438\u0437\u043C\u0435\u0440\u0435\u043D\u0438\u044F\u043F\u043E\u0441\u0442\u0440\u043E\u0438\u0442\u0435\u043B\u044F\u0437\u0430\u043F\u0440\u043E\u0441\u0430 ";
  var v8_system_enums_data_analysis = "\u0432\u0438\u0434\u0434\u0430\u043D\u043D\u044B\u0445\u0430\u043D\u0430\u043B\u0438\u0437\u0430 \u043C\u0435\u0442\u043E\u0434\u043A\u043B\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0442\u0438\u043F\u0435\u0434\u0438\u043D\u0438\u0446\u044B\u0438\u043D\u0442\u0435\u0440\u0432\u0430\u043B\u0430\u0432\u0440\u0435\u043C\u0435\u043D\u0438\u0430\u043D\u0430\u043B\u0438\u0437\u0430\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u0437\u0430\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u044F\u0442\u0430\u0431\u043B\u0438\u0446\u044B\u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u0430\u0430\u043D\u0430\u043B\u0438\u0437\u0430\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F\u0447\u0438\u0441\u043B\u043E\u0432\u044B\u0445\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439\u0430\u043D\u0430\u043B\u0438\u0437\u0430\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A\u0430\u0434\u0430\u043D\u043D\u044B\u0445\u043F\u043E\u0438\u0441\u043A\u0430\u0430\u0441\u0441\u043E\u0446\u0438\u0430\u0446\u0438\u0439 \u0442\u0438\u043F\u043A\u043E\u043B\u043E\u043D\u043A\u0438\u0430\u043D\u0430\u043B\u0438\u0437\u0430\u0434\u0430\u043D\u043D\u044B\u0445\u0434\u0435\u0440\u0435\u0432\u043E\u0440\u0435\u0448\u0435\u043D\u0438\u0439 \u0442\u0438\u043F\u043A\u043E\u043B\u043E\u043D\u043A\u0438\u0430\u043D\u0430\u043B\u0438\u0437\u0430\u0434\u0430\u043D\u043D\u044B\u0445\u043A\u043B\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u044F \u0442\u0438\u043F\u043A\u043E\u043B\u043E\u043D\u043A\u0438\u0430\u043D\u0430\u043B\u0438\u0437\u0430\u0434\u0430\u043D\u043D\u044B\u0445\u043E\u0431\u0449\u0430\u044F\u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043A\u0430 \u0442\u0438\u043F\u043A\u043E\u043B\u043E\u043D\u043A\u0438\u0430\u043D\u0430\u043B\u0438\u0437\u0430\u0434\u0430\u043D\u043D\u044B\u0445\u043F\u043E\u0438\u0441\u043A\u0430\u0441\u0441\u043E\u0446\u0438\u0430\u0446\u0438\u0439 \u0442\u0438\u043F\u043A\u043E\u043B\u043E\u043D\u043A\u0438\u0430\u043D\u0430\u043B\u0438\u0437\u0430\u0434\u0430\u043D\u043D\u044B\u0445\u043F\u043E\u0438\u0441\u043A\u043F\u043E\u0441\u043B\u0435\u0434\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u043D\u043E\u0441\u0442\u0435\u0439 \u0442\u0438\u043F\u043A\u043E\u043B\u043E\u043D\u043A\u0438\u043C\u043E\u0434\u0435\u043B\u0438\u043F\u0440\u043E\u0433\u043D\u043E\u0437\u0430 \u0442\u0438\u043F\u043C\u0435\u0440\u044B\u0440\u0430\u0441\u0441\u0442\u043E\u044F\u043D\u0438\u044F\u0430\u043D\u0430\u043B\u0438\u0437\u0430\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u043E\u0442\u0441\u0435\u0447\u0435\u043D\u0438\u044F\u043F\u0440\u0430\u0432\u0438\u043B\u0430\u0441\u0441\u043E\u0446\u0438\u0430\u0446\u0438\u0438 \u0442\u0438\u043F\u043F\u043E\u043B\u044F\u0430\u043D\u0430\u043B\u0438\u0437\u0430\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u0438\u0430\u043D\u0430\u043B\u0438\u0437\u0430\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u0443\u043F\u043E\u0440\u044F\u0434\u043E\u0447\u0438\u0432\u0430\u043D\u0438\u044F\u043F\u0440\u0430\u0432\u0438\u043B\u0430\u0441\u0441\u043E\u0446\u0438\u0430\u0446\u0438\u0438\u0430\u043D\u0430\u043B\u0438\u0437\u0430\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u0443\u043F\u043E\u0440\u044F\u0434\u043E\u0447\u0438\u0432\u0430\u043D\u0438\u044F\u0448\u0430\u0431\u043B\u043E\u043D\u043E\u0432\u043F\u043E\u0441\u043B\u0435\u0434\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u043D\u043E\u0441\u0442\u0435\u0439\u0430\u043D\u0430\u043B\u0438\u0437\u0430\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u0443\u043F\u0440\u043E\u0449\u0435\u043D\u0438\u044F\u0434\u0435\u0440\u0435\u0432\u0430\u0440\u0435\u0448\u0435\u043D\u0438\u0439 ";
  var v8_system_enums_xml_json_xs_dom_xdto_ws = "ws\u043D\u0430\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u0430 \u0432\u0430\u0440\u0438\u0430\u043D\u0442xpathxs \u0432\u0430\u0440\u0438\u0430\u043D\u0442\u0437\u0430\u043F\u0438\u0441\u0438\u0434\u0430\u0442\u044Bjson \u0432\u0430\u0440\u0438\u0430\u043D\u0442\u043F\u0440\u043E\u0441\u0442\u043E\u0433\u043E\u0442\u0438\u043F\u0430xs \u0432\u0438\u0434\u0433\u0440\u0443\u043F\u043F\u044B\u043C\u043E\u0434\u0435\u043B\u0438xs \u0432\u0438\u0434\u0444\u0430\u0441\u0435\u0442\u0430xdto \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435\u043F\u043E\u0441\u0442\u0440\u043E\u0438\u0442\u0435\u043B\u044Fdom \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u043D\u043E\u0441\u0442\u044C\u043F\u0440\u043E\u0441\u0442\u043E\u0433\u043E\u0442\u0438\u043F\u0430xs \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u043D\u043E\u0441\u0442\u044C\u0441\u043E\u0441\u0442\u0430\u0432\u043D\u043E\u0433\u043E\u0442\u0438\u043F\u0430xs \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043D\u043D\u043E\u0441\u0442\u044C\u0441\u0445\u0435\u043C\u044Bxs \u0437\u0430\u043F\u0440\u0435\u0449\u0435\u043D\u043D\u044B\u0435\u043F\u043E\u0434\u0441\u0442\u0430\u043D\u043E\u0432\u043A\u0438xs \u0438\u0441\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u044F\u0433\u0440\u0443\u043F\u043F\u043F\u043E\u0434\u0441\u0442\u0430\u043D\u043E\u0432\u043A\u0438xs \u043A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u044F\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F\u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430xs \u043A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u044F\u043E\u0433\u0440\u0430\u043D\u0438\u0447\u0435\u043D\u0438\u044F\u0438\u0434\u0435\u043D\u0442\u0438\u0447\u043D\u043E\u0441\u0442\u0438xs \u043A\u0430\u0442\u0435\u0433\u043E\u0440\u0438\u044F\u043E\u0433\u0440\u0430\u043D\u0438\u0447\u0435\u043D\u0438\u044F\u043F\u0440\u043E\u0441\u0442\u0440\u0430\u043D\u0441\u0442\u0432\u0438\u043C\u0435\u043Dxs \u043C\u0435\u0442\u043E\u0434\u043D\u0430\u0441\u043B\u0435\u0434\u043E\u0432\u0430\u043D\u0438\u044Fxs \u043C\u043E\u0434\u0435\u043B\u044C\u0441\u043E\u0434\u0435\u0440\u0436\u0438\u043C\u043E\u0433\u043Exs \u043D\u0430\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435\u0442\u0438\u043F\u0430xml \u043D\u0435\u0434\u043E\u043F\u0443\u0441\u0442\u0438\u043C\u044B\u0435\u043F\u043E\u0434\u0441\u0442\u0430\u043D\u043E\u0432\u043A\u0438xs \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0430\u043F\u0440\u043E\u0431\u0435\u043B\u044C\u043D\u044B\u0445\u0441\u0438\u043C\u0432\u043E\u043B\u043E\u0432xs \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0430\u0441\u043E\u0434\u0435\u0440\u0436\u0438\u043C\u043E\u0433\u043Exs \u043E\u0433\u0440\u0430\u043D\u0438\u0447\u0435\u043D\u0438\u0435\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044Fxs \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u044B\u043E\u0442\u0431\u043E\u0440\u0430\u0443\u0437\u043B\u043E\u0432dom \u043F\u0435\u0440\u0435\u043D\u043E\u0441\u0441\u0442\u0440\u043E\u043Ajson \u043F\u043E\u0437\u0438\u0446\u0438\u044F\u0432\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0435dom \u043F\u0440\u043E\u0431\u0435\u043B\u044C\u043D\u044B\u0435\u0441\u0438\u043C\u0432\u043E\u043B\u044Bxml \u0442\u0438\u043F\u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430xml \u0442\u0438\u043F\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044Fjson \u0442\u0438\u043F\u043A\u0430\u043D\u043E\u043D\u0438\u0447\u0435\u0441\u043A\u043E\u0433\u043Exml \u0442\u0438\u043F\u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442\u044Bxs \u0442\u0438\u043F\u043F\u0440\u043E\u0432\u0435\u0440\u043A\u0438xml \u0442\u0438\u043F\u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u0430domxpath \u0442\u0438\u043F\u0443\u0437\u043B\u0430dom \u0442\u0438\u043F\u0443\u0437\u043B\u0430xml \u0444\u043E\u0440\u043C\u0430xml \u0444\u043E\u0440\u043C\u0430\u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u044Fxs \u0444\u043E\u0440\u043C\u0430\u0442\u0434\u0430\u0442\u044Bjson \u044D\u043A\u0440\u0430\u043D\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0435\u0441\u0438\u043C\u0432\u043E\u043B\u043E\u0432json ";
  var v8_system_enums_data_composition_system = "\u0432\u0438\u0434\u0441\u0440\u0430\u0432\u043D\u0435\u043D\u0438\u044F\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435\u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0438\u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043E\u0432\u043A\u0438\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u043D\u0430\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u0441\u043E\u0440\u0442\u0438\u0440\u043E\u0432\u043A\u0438\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0440\u0430\u0441\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0432\u043B\u043E\u0436\u0435\u043D\u043D\u044B\u0445\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432\u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u0430\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0440\u0430\u0441\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0438\u0442\u043E\u0433\u043E\u0432\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0440\u0430\u0441\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0433\u0440\u0443\u043F\u043F\u0438\u0440\u043E\u0432\u043A\u0438\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0440\u0430\u0441\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u043F\u043E\u043B\u0435\u0439\u0433\u0440\u0443\u043F\u043F\u0438\u0440\u043E\u0432\u043A\u0438\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0440\u0430\u0441\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u043F\u043E\u043B\u044F\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0440\u0430\u0441\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0440\u0435\u043A\u0432\u0438\u0437\u0438\u0442\u043E\u0432\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0440\u0430\u0441\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0440\u0435\u0441\u0443\u0440\u0441\u043E\u0432\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u0431\u0443\u0445\u0433\u0430\u043B\u0442\u0435\u0440\u0441\u043A\u043E\u0433\u043E\u043E\u0441\u0442\u0430\u0442\u043A\u0430\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u0432\u044B\u0432\u043E\u0434\u0430\u0442\u0435\u043A\u0441\u0442\u0430\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u0433\u0440\u0443\u043F\u043F\u0438\u0440\u043E\u0432\u043A\u0438\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u0433\u0440\u0443\u043F\u043F\u044B\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432\u043E\u0442\u0431\u043E\u0440\u0430\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u0434\u043E\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u044F\u043F\u0435\u0440\u0438\u043E\u0434\u0430\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u0437\u0430\u0433\u043E\u043B\u043E\u0432\u043A\u0430\u043F\u043E\u043B\u0435\u0439\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u043C\u0430\u043A\u0435\u0442\u0430\u0433\u0440\u0443\u043F\u043F\u0438\u0440\u043E\u0432\u043A\u0438\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u043C\u0430\u043A\u0435\u0442\u0430\u043E\u0431\u043B\u0430\u0441\u0442\u0438\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u043E\u0441\u0442\u0430\u0442\u043A\u0430\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u043F\u0435\u0440\u0438\u043E\u0434\u0430\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u0440\u0430\u0437\u043C\u0435\u0449\u0435\u043D\u0438\u044F\u0442\u0435\u043A\u0441\u0442\u0430\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u0441\u0432\u044F\u0437\u0438\u043D\u0430\u0431\u043E\u0440\u043E\u0432\u0434\u0430\u043D\u043D\u044B\u0445\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u0430\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0440\u0430\u0441\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u043B\u0435\u0433\u0435\u043D\u0434\u044B\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u044B\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u043F\u0440\u0438\u043C\u0435\u043D\u0435\u043D\u0438\u044F\u043E\u0442\u0431\u043E\u0440\u0430\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0440\u0435\u0436\u0438\u043C\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0440\u0435\u0436\u0438\u043C\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F\u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0441\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u0435\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0441\u043F\u043E\u0441\u043E\u0431\u0432\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u044F\u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0440\u0435\u0436\u0438\u043C\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u0430 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u0430\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0430\u0432\u0442\u043E\u043F\u043E\u0437\u0438\u0446\u0438\u044F\u0440\u0435\u0441\u0443\u0440\u0441\u043E\u0432\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0432\u0430\u0440\u0438\u0430\u043D\u0442\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F\u0433\u0440\u0443\u043F\u043F\u0438\u0440\u043E\u0432\u043A\u0438\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0440\u0430\u0441\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0440\u0435\u0441\u0443\u0440\u0441\u043E\u0432\u0432\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u0435\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0444\u0438\u043A\u0441\u0430\u0446\u0438\u044F\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0443\u0441\u043B\u043E\u0432\u043D\u043E\u0433\u043E\u043E\u0444\u043E\u0440\u043C\u043B\u0435\u043D\u0438\u044F\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 ";
  var v8_system_enums_email = "\u0432\u0430\u0436\u043D\u043E\u0441\u0442\u044C\u0438\u043D\u0442\u0435\u0440\u043D\u0435\u0442\u043F\u043E\u0447\u0442\u043E\u0432\u043E\u0433\u043E\u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0430\u0442\u0435\u043A\u0441\u0442\u0430\u0438\u043D\u0442\u0435\u0440\u043D\u0435\u0442\u043F\u043E\u0447\u0442\u043E\u0432\u043E\u0433\u043E\u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F \u0441\u043F\u043E\u0441\u043E\u0431\u043A\u043E\u0434\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F\u0438\u043D\u0442\u0435\u0440\u043D\u0435\u0442\u043F\u043E\u0447\u0442\u043E\u0432\u043E\u0433\u043E\u0432\u043B\u043E\u0436\u0435\u043D\u0438\u044F \u0441\u043F\u043E\u0441\u043E\u0431\u043A\u043E\u0434\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F\u043D\u0435ascii\u0441\u0438\u043C\u0432\u043E\u043B\u043E\u0432\u0438\u043D\u0442\u0435\u0440\u043D\u0435\u0442\u043F\u043E\u0447\u0442\u043E\u0432\u043E\u0433\u043E\u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F \u0442\u0438\u043F\u0442\u0435\u043A\u0441\u0442\u0430\u043F\u043E\u0447\u0442\u043E\u0432\u043E\u0433\u043E\u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F \u043F\u0440\u043E\u0442\u043E\u043A\u043E\u043B\u0438\u043D\u0442\u0435\u0440\u043D\u0435\u0442\u043F\u043E\u0447\u0442\u044B \u0441\u0442\u0430\u0442\u0443\u0441\u0440\u0430\u0437\u0431\u043E\u0440\u0430\u043F\u043E\u0447\u0442\u043E\u0432\u043E\u0433\u043E\u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F ";
  var v8_system_enums_logbook = "\u0440\u0435\u0436\u0438\u043C\u0442\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u0438\u0437\u0430\u043F\u0438\u0441\u0438\u0436\u0443\u0440\u043D\u0430\u043B\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0441\u0442\u0430\u0442\u0443\u0441\u0442\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u0438\u0437\u0430\u043F\u0438\u0441\u0438\u0436\u0443\u0440\u043D\u0430\u043B\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0443\u0440\u043E\u0432\u0435\u043D\u044C\u0436\u0443\u0440\u043D\u0430\u043B\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 ";
  var v8_system_enums_cryptography = "\u0440\u0430\u0441\u043F\u043E\u043B\u043E\u0436\u0435\u043D\u0438\u0435\u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0430\u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u043E\u0432\u043A\u0440\u0438\u043F\u0442\u043E\u0433\u0440\u0430\u0444\u0438\u0438 \u0440\u0435\u0436\u0438\u043C\u0432\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u044F\u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u043E\u0432\u043A\u0440\u0438\u043F\u0442\u043E\u0433\u0440\u0430\u0444\u0438\u0438 \u0440\u0435\u0436\u0438\u043C\u043F\u0440\u043E\u0432\u0435\u0440\u043A\u0438\u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u0430\u043A\u0440\u0438\u043F\u0442\u043E\u0433\u0440\u0430\u0444\u0438\u0438 \u0442\u0438\u043F\u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0430\u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u043E\u0432\u043A\u0440\u0438\u043F\u0442\u043E\u0433\u0440\u0430\u0444\u0438\u0438 ";
  var v8_system_enums_zip = "\u043A\u043E\u0434\u0438\u0440\u043E\u0432\u043A\u0430\u0438\u043C\u0435\u043D\u0444\u0430\u0439\u043B\u043E\u0432\u0432zip\u0444\u0430\u0439\u043B\u0435 \u043C\u0435\u0442\u043E\u0434\u0441\u0436\u0430\u0442\u0438\u044Fzip \u043C\u0435\u0442\u043E\u0434\u0448\u0438\u0444\u0440\u043E\u0432\u0430\u043D\u0438\u044Fzip \u0440\u0435\u0436\u0438\u043C\u0432\u043E\u0441\u0441\u0442\u0430\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u044F\u043F\u0443\u0442\u0435\u0439\u0444\u0430\u0439\u043B\u043E\u0432zip \u0440\u0435\u0436\u0438\u043C\u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0438\u043F\u043E\u0434\u043A\u0430\u0442\u0430\u043B\u043E\u0433\u043E\u0432zip \u0440\u0435\u0436\u0438\u043C\u0441\u043E\u0445\u0440\u0430\u043D\u0435\u043D\u0438\u044F\u043F\u0443\u0442\u0435\u0439zip \u0443\u0440\u043E\u0432\u0435\u043D\u044C\u0441\u0436\u0430\u0442\u0438\u044Fzip ";
  var v8_system_enums_other = "\u0437\u0432\u0443\u043A\u043E\u0432\u043E\u0435\u043E\u043F\u043E\u0432\u0435\u0449\u0435\u043D\u0438\u0435 \u043D\u0430\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u043F\u0435\u0440\u0435\u0445\u043E\u0434\u0430\u043A\u0441\u0442\u0440\u043E\u043A\u0435 \u043F\u043E\u0437\u0438\u0446\u0438\u044F\u0432\u043F\u043E\u0442\u043E\u043A\u0435 \u043F\u043E\u0440\u044F\u0434\u043E\u043A\u0431\u0430\u0439\u0442\u043E\u0432 \u0440\u0435\u0436\u0438\u043C\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0440\u0435\u0436\u0438\u043C\u0443\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u044F\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u043A\u043E\u0439\u0434\u0430\u043D\u043D\u044B\u0445 \u0441\u0435\u0440\u0432\u0438\u0441\u0432\u0441\u0442\u0440\u043E\u0435\u043D\u043D\u044B\u0445\u043F\u043E\u043A\u0443\u043F\u043E\u043A \u0441\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u0435\u0444\u043E\u043D\u043E\u0432\u043E\u0433\u043E\u0437\u0430\u0434\u0430\u043D\u0438\u044F \u0442\u0438\u043F\u043F\u043E\u0434\u043F\u0438\u0441\u0447\u0438\u043A\u0430\u0434\u043E\u0441\u0442\u0430\u0432\u043B\u044F\u0435\u043C\u044B\u0445\u0443\u0432\u0435\u0434\u043E\u043C\u043B\u0435\u043D\u0438\u0439 \u0443\u0440\u043E\u0432\u0435\u043D\u044C\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F\u0437\u0430\u0449\u0438\u0449\u0435\u043D\u043D\u043E\u0433\u043E\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u044Fftp ";
  var v8_system_enums_request_schema = "\u043D\u0430\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u043F\u043E\u0440\u044F\u0434\u043A\u0430\u0441\u0445\u0435\u043C\u044B\u0437\u0430\u043F\u0440\u043E\u0441\u0430 \u0442\u0438\u043F\u0434\u043E\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u044F\u043F\u0435\u0440\u0438\u043E\u0434\u0430\u043C\u0438\u0441\u0445\u0435\u043C\u044B\u0437\u0430\u043F\u0440\u043E\u0441\u0430 \u0442\u0438\u043F\u043A\u043E\u043D\u0442\u0440\u043E\u043B\u044C\u043D\u043E\u0439\u0442\u043E\u0447\u043A\u0438\u0441\u0445\u0435\u043C\u044B\u0437\u0430\u043F\u0440\u043E\u0441\u0430 \u0442\u0438\u043F\u043E\u0431\u044A\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u044F\u0441\u0445\u0435\u043C\u044B\u0437\u0430\u043F\u0440\u043E\u0441\u0430 \u0442\u0438\u043F\u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u0430\u0434\u043E\u0441\u0442\u0443\u043F\u043D\u043E\u0439\u0442\u0430\u0431\u043B\u0438\u0446\u044B\u0441\u0445\u0435\u043C\u044B\u0437\u0430\u043F\u0440\u043E\u0441\u0430 \u0442\u0438\u043F\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u044F\u0441\u0445\u0435\u043C\u044B\u0437\u0430\u043F\u0440\u043E\u0441\u0430 ";
  var v8_system_enums_properties_of_metadata_objects = "http\u043C\u0435\u0442\u043E\u0434 \u0430\u0432\u0442\u043E\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u043E\u0431\u0449\u0435\u0433\u043E\u0440\u0435\u043A\u0432\u0438\u0437\u0438\u0442\u0430 \u0430\u0432\u0442\u043E\u043F\u0440\u0435\u0444\u0438\u043A\u0441\u043D\u043E\u043C\u0435\u0440\u0430\u0437\u0430\u0434\u0430\u0447\u0438 \u0432\u0430\u0440\u0438\u0430\u043D\u0442\u0432\u0441\u0442\u0440\u043E\u0435\u043D\u043D\u043E\u0433\u043E\u044F\u0437\u044B\u043A\u0430 \u0432\u0438\u0434\u0438\u0435\u0440\u0430\u0440\u0445\u0438\u0438 \u0432\u0438\u0434\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u043D\u0430\u043A\u043E\u043F\u043B\u0435\u043D\u0438\u044F \u0432\u0438\u0434\u0442\u0430\u0431\u043B\u0438\u0446\u044B\u0432\u043D\u0435\u0448\u043D\u0435\u0433\u043E\u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A\u0430\u0434\u0430\u043D\u043D\u044B\u0445 \u0437\u0430\u043F\u0438\u0441\u044C\u0434\u0432\u0438\u0436\u0435\u043D\u0438\u0439\u043F\u0440\u0438\u043F\u0440\u043E\u0432\u0435\u0434\u0435\u043D\u0438\u0438 \u0437\u0430\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u0435\u043F\u043E\u0441\u043B\u0435\u0434\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u043D\u043E\u0441\u0442\u0435\u0439 \u0438\u043D\u0434\u0435\u043A\u0441\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0435 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0431\u0430\u0437\u044B\u043F\u043B\u0430\u043D\u0430\u0432\u0438\u0434\u043E\u0432\u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0431\u044B\u0441\u0442\u0440\u043E\u0433\u043E\u0432\u044B\u0431\u043E\u0440\u0430 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u043E\u0431\u0449\u0435\u0433\u043E\u0440\u0435\u043A\u0432\u0438\u0437\u0438\u0442\u0430 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u043F\u043E\u0434\u0447\u0438\u043D\u0435\u043D\u0438\u044F \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u043F\u043E\u043B\u043D\u043E\u0442\u0435\u043A\u0441\u0442\u043E\u0432\u043E\u0433\u043E\u043F\u043E\u0438\u0441\u043A\u0430 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0440\u0430\u0437\u0434\u0435\u043B\u044F\u0435\u043C\u044B\u0445\u0434\u0430\u043D\u043D\u044B\u0445\u043E\u0431\u0449\u0435\u0433\u043E\u0440\u0435\u043A\u0432\u0438\u0437\u0438\u0442\u0430 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0440\u0435\u043A\u0432\u0438\u0437\u0438\u0442\u0430 \u043D\u0430\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F \u043D\u0430\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u044F\u043A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u043D\u0430\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u043F\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435\u043F\u0440\u0435\u0434\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u043D\u044B\u0445\u0434\u0430\u043D\u043D\u044B\u0445 \u043E\u043F\u0435\u0440\u0430\u0442\u0438\u0432\u043D\u043E\u0435\u043F\u0440\u043E\u0432\u0435\u0434\u0435\u043D\u0438\u0435 \u043E\u0441\u043D\u043E\u0432\u043D\u043E\u0435\u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u0432\u0438\u0434\u0430\u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u043E\u0441\u043D\u043E\u0432\u043D\u043E\u0435\u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u0432\u0438\u0434\u0430\u0445\u0430\u0440\u0430\u043A\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043A\u0438 \u043E\u0441\u043D\u043E\u0432\u043D\u043E\u0435\u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u0437\u0430\u0434\u0430\u0447\u0438 \u043E\u0441\u043D\u043E\u0432\u043D\u043E\u0435\u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u043F\u043B\u0430\u043D\u0430\u043E\u0431\u043C\u0435\u043D\u0430 \u043E\u0441\u043D\u043E\u0432\u043D\u043E\u0435\u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u0441\u043F\u0440\u0430\u0432\u043E\u0447\u043D\u0438\u043A\u0430 \u043E\u0441\u043D\u043E\u0432\u043D\u043E\u0435\u043F\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u0441\u0447\u0435\u0442\u0430 \u043F\u0435\u0440\u0435\u043C\u0435\u0449\u0435\u043D\u0438\u0435\u0433\u0440\u0430\u043D\u0438\u0446\u044B\u043F\u0440\u0438\u043F\u0440\u043E\u0432\u0435\u0434\u0435\u043D\u0438\u0438 \u043F\u0435\u0440\u0438\u043E\u0434\u0438\u0447\u043D\u043E\u0441\u0442\u044C\u043D\u043E\u043C\u0435\u0440\u0430\u0431\u0438\u0437\u043D\u0435\u0441\u043F\u0440\u043E\u0446\u0435\u0441\u0441\u0430 \u043F\u0435\u0440\u0438\u043E\u0434\u0438\u0447\u043D\u043E\u0441\u0442\u044C\u043D\u043E\u043C\u0435\u0440\u0430\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u043F\u0435\u0440\u0438\u043E\u0434\u0438\u0447\u043D\u043E\u0441\u0442\u044C\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u043F\u0435\u0440\u0438\u043E\u0434\u0438\u0447\u043D\u043E\u0441\u0442\u044C\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0441\u0432\u0435\u0434\u0435\u043D\u0438\u0439 \u043F\u043E\u0432\u0442\u043E\u0440\u043D\u043E\u0435\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043C\u044B\u0445\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439 \u043F\u043E\u043B\u043D\u043E\u0442\u0435\u043A\u0441\u0442\u043E\u0432\u044B\u0439\u043F\u043E\u0438\u0441\u043A\u043F\u0440\u0438\u0432\u0432\u043E\u0434\u0435\u043F\u043E\u0441\u0442\u0440\u043E\u043A\u0435 \u043F\u0440\u0438\u043D\u0430\u0434\u043B\u0435\u0436\u043D\u043E\u0441\u0442\u044C\u043E\u0431\u044A\u0435\u043A\u0442\u0430 \u043F\u0440\u043E\u0432\u0435\u0434\u0435\u043D\u0438\u0435 \u0440\u0430\u0437\u0434\u0435\u043B\u0435\u043D\u0438\u0435\u0430\u0443\u0442\u0435\u043D\u0442\u0438\u0444\u0438\u043A\u0430\u0446\u0438\u0438\u043E\u0431\u0449\u0435\u0433\u043E\u0440\u0435\u043A\u0432\u0438\u0437\u0438\u0442\u0430 \u0440\u0430\u0437\u0434\u0435\u043B\u0435\u043D\u0438\u0435\u0434\u0430\u043D\u043D\u044B\u0445\u043E\u0431\u0449\u0435\u0433\u043E\u0440\u0435\u043A\u0432\u0438\u0437\u0438\u0442\u0430 \u0440\u0430\u0437\u0434\u0435\u043B\u0435\u043D\u0438\u0435\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u0439\u043A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438\u043E\u0431\u0449\u0435\u0433\u043E\u0440\u0435\u043A\u0432\u0438\u0437\u0438\u0442\u0430 \u0440\u0435\u0436\u0438\u043C\u0430\u0432\u0442\u043E\u043D\u0443\u043C\u0435\u0440\u0430\u0446\u0438\u0438\u043E\u0431\u044A\u0435\u043A\u0442\u043E\u0432 \u0440\u0435\u0436\u0438\u043C\u0437\u0430\u043F\u0438\u0441\u0438\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430 \u0440\u0435\u0436\u0438\u043C\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F\u043C\u043E\u0434\u0430\u043B\u044C\u043D\u043E\u0441\u0442\u0438 \u0440\u0435\u0436\u0438\u043C\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F\u0441\u0438\u043D\u0445\u0440\u043E\u043D\u043D\u044B\u0445\u0432\u044B\u0437\u043E\u0432\u043E\u0432\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u0439\u043F\u043B\u0430\u0442\u0444\u043E\u0440\u043C\u044B\u0438\u0432\u043D\u0435\u0448\u043D\u0438\u0445\u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442 \u0440\u0435\u0436\u0438\u043C\u043F\u043E\u0432\u0442\u043E\u0440\u043D\u043E\u0433\u043E\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F\u0441\u0435\u0430\u043D\u0441\u043E\u0432 \u0440\u0435\u0436\u0438\u043C\u043F\u043E\u043B\u0443\u0447\u0435\u043D\u0438\u044F\u0434\u0430\u043D\u043D\u044B\u0445\u0432\u044B\u0431\u043E\u0440\u0430\u043F\u0440\u0438\u0432\u0432\u043E\u0434\u0435\u043F\u043E\u0441\u0442\u0440\u043E\u043A\u0435 \u0440\u0435\u0436\u0438\u043C\u0441\u043E\u0432\u043C\u0435\u0441\u0442\u0438\u043C\u043E\u0441\u0442\u0438 \u0440\u0435\u0436\u0438\u043C\u0441\u043E\u0432\u043C\u0435\u0441\u0442\u0438\u043C\u043E\u0441\u0442\u0438\u0438\u043D\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430 \u0440\u0435\u0436\u0438\u043C\u0443\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u044F\u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u043A\u043E\u0439\u0434\u0430\u043D\u043D\u044B\u0445\u043F\u043E\u0443\u043C\u043E\u043B\u0447\u0430\u043D\u0438\u044E \u0441\u0435\u0440\u0438\u0438\u043A\u043E\u0434\u043E\u0432\u043F\u043B\u0430\u043D\u0430\u0432\u0438\u0434\u043E\u0432\u0445\u0430\u0440\u0430\u043A\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043A \u0441\u0435\u0440\u0438\u0438\u043A\u043E\u0434\u043E\u0432\u043F\u043B\u0430\u043D\u0430\u0441\u0447\u0435\u0442\u043E\u0432 \u0441\u0435\u0440\u0438\u0438\u043A\u043E\u0434\u043E\u0432\u0441\u043F\u0440\u0430\u0432\u043E\u0447\u043D\u0438\u043A\u0430 \u0441\u043E\u0437\u0434\u0430\u043D\u0438\u0435\u043F\u0440\u0438\u0432\u0432\u043E\u0434\u0435 \u0441\u043F\u043E\u0441\u043E\u0431\u0432\u044B\u0431\u043E\u0440\u0430 \u0441\u043F\u043E\u0441\u043E\u0431\u043F\u043E\u0438\u0441\u043A\u0430\u0441\u0442\u0440\u043E\u043A\u0438\u043F\u0440\u0438\u0432\u0432\u043E\u0434\u0435\u043F\u043E\u0441\u0442\u0440\u043E\u043A\u0435 \u0441\u043F\u043E\u0441\u043E\u0431\u0440\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F \u0442\u0438\u043F\u0434\u0430\u043D\u043D\u044B\u0445\u0442\u0430\u0431\u043B\u0438\u0446\u044B\u0432\u043D\u0435\u0448\u043D\u0435\u0433\u043E\u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A\u0430\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0438\u043F\u043A\u043E\u0434\u0430\u043F\u043B\u0430\u043D\u0430\u0432\u0438\u0434\u043E\u0432\u0440\u0430\u0441\u0447\u0435\u0442\u0430 \u0442\u0438\u043F\u043A\u043E\u0434\u0430\u0441\u043F\u0440\u0430\u0432\u043E\u0447\u043D\u0438\u043A\u0430 \u0442\u0438\u043F\u043C\u0430\u043A\u0435\u0442\u0430 \u0442\u0438\u043F\u043D\u043E\u043C\u0435\u0440\u0430\u0431\u0438\u0437\u043D\u0435\u0441\u043F\u0440\u043E\u0446\u0435\u0441\u0441\u0430 \u0442\u0438\u043F\u043D\u043E\u043C\u0435\u0440\u0430\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430 \u0442\u0438\u043F\u043D\u043E\u043C\u0435\u0440\u0430\u0437\u0430\u0434\u0430\u0447\u0438 \u0442\u0438\u043F\u0444\u043E\u0440\u043C\u044B \u0443\u0434\u0430\u043B\u0435\u043D\u0438\u0435\u0434\u0432\u0438\u0436\u0435\u043D\u0438\u0439 ";
  var v8_system_enums_differents = "\u0432\u0430\u0436\u043D\u043E\u0441\u0442\u044C\u043F\u0440\u043E\u0431\u043B\u0435\u043C\u044B\u043F\u0440\u0438\u043C\u0435\u043D\u0435\u043D\u0438\u044F\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u044F\u043A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0432\u0430\u0440\u0438\u0430\u043D\u0442\u0438\u043D\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430\u043A\u043B\u0438\u0435\u043D\u0442\u0441\u043A\u043E\u0433\u043E\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F \u0432\u0430\u0440\u0438\u0430\u043D\u0442\u043C\u0430\u0441\u0448\u0442\u0430\u0431\u0430\u0444\u043E\u0440\u043C\u043A\u043B\u0438\u0435\u043D\u0442\u0441\u043A\u043E\u0433\u043E\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F \u0432\u0430\u0440\u0438\u0430\u043D\u0442\u043E\u0441\u043D\u043E\u0432\u043D\u043E\u0433\u043E\u0448\u0440\u0438\u0444\u0442\u0430\u043A\u043B\u0438\u0435\u043D\u0442\u0441\u043A\u043E\u0433\u043E\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F \u0432\u0430\u0440\u0438\u0430\u043D\u0442\u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u043E\u0433\u043E\u043F\u0435\u0440\u0438\u043E\u0434\u0430 \u0432\u0430\u0440\u0438\u0430\u043D\u0442\u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u043E\u0439\u0434\u0430\u0442\u044B\u043D\u0430\u0447\u0430\u043B\u0430 \u0432\u0438\u0434\u0433\u0440\u0430\u043D\u0438\u0446\u044B \u0432\u0438\u0434\u043A\u0430\u0440\u0442\u0438\u043D\u043A\u0438 \u0432\u0438\u0434\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F\u043F\u043E\u043B\u043D\u043E\u0442\u0435\u043A\u0441\u0442\u043E\u0432\u043E\u0433\u043E\u043F\u043E\u0438\u0441\u043A\u0430 \u0432\u0438\u0434\u0440\u0430\u043C\u043A\u0438 \u0432\u0438\u0434\u0441\u0440\u0430\u0432\u043D\u0435\u043D\u0438\u044F \u0432\u0438\u0434\u0446\u0432\u0435\u0442\u0430 \u0432\u0438\u0434\u0447\u0438\u0441\u043B\u043E\u0432\u043E\u0433\u043E\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F \u0432\u0438\u0434\u0448\u0440\u0438\u0444\u0442\u0430 \u0434\u043E\u043F\u0443\u0441\u0442\u0438\u043C\u0430\u044F\u0434\u043B\u0438\u043D\u0430 \u0434\u043E\u043F\u0443\u0441\u0442\u0438\u043C\u044B\u0439\u0437\u043D\u0430\u043A \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435byteordermark \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u043C\u0435\u0442\u0430\u0434\u0430\u043D\u043D\u044B\u0445\u043F\u043E\u043B\u043D\u043E\u0442\u0435\u043A\u0441\u0442\u043E\u0432\u043E\u0433\u043E\u043F\u043E\u0438\u0441\u043A\u0430 \u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u0439\u043A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u043A\u043B\u0430\u0432\u0438\u0448\u0430 \u043A\u043E\u0434\u0432\u043E\u0437\u0432\u0440\u0430\u0442\u0430\u0434\u0438\u0430\u043B\u043E\u0433\u0430 \u043A\u043E\u0434\u0438\u0440\u043E\u0432\u043A\u0430xbase \u043A\u043E\u0434\u0438\u0440\u043E\u0432\u043A\u0430\u0442\u0435\u043A\u0441\u0442\u0430 \u043D\u0430\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u043F\u043E\u0438\u0441\u043A\u0430 \u043D\u0430\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0438\u0435\u0441\u043E\u0440\u0442\u0438\u0440\u043E\u0432\u043A\u0438 \u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435\u043F\u0440\u0435\u0434\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u043D\u044B\u0445\u0434\u0430\u043D\u043D\u044B\u0445 \u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u0435\u043F\u0440\u0438\u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u043F\u0430\u043D\u0435\u043B\u0438\u0440\u0430\u0437\u0434\u0435\u043B\u043E\u0432 \u043F\u0440\u043E\u0432\u0435\u0440\u043A\u0430\u0437\u0430\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u044F \u0440\u0435\u0436\u0438\u043C\u0434\u0438\u0430\u043B\u043E\u0433\u0430\u0432\u043E\u043F\u0440\u043E\u0441 \u0440\u0435\u0436\u0438\u043C\u0437\u0430\u043F\u0443\u0441\u043A\u0430\u043A\u043B\u0438\u0435\u043D\u0442\u0441\u043A\u043E\u0433\u043E\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F \u0440\u0435\u0436\u0438\u043C\u043E\u043A\u0440\u0443\u0433\u043B\u0435\u043D\u0438\u044F \u0440\u0435\u0436\u0438\u043C\u043E\u0442\u043A\u0440\u044B\u0442\u0438\u044F\u0444\u043E\u0440\u043C\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044F \u0440\u0435\u0436\u0438\u043C\u043F\u043E\u043B\u043D\u043E\u0442\u0435\u043A\u0441\u0442\u043E\u0432\u043E\u0433\u043E\u043F\u043E\u0438\u0441\u043A\u0430 \u0441\u043A\u043E\u0440\u043E\u0441\u0442\u044C\u043A\u043B\u0438\u0435\u043D\u0442\u0441\u043A\u043E\u0433\u043E\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u044F \u0441\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u0435\u0432\u043D\u0435\u0448\u043D\u0435\u0433\u043E\u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A\u0430\u0434\u0430\u043D\u043D\u044B\u0445 \u0441\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u0435\u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u044F\u043A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438\u0431\u0430\u0437\u044B\u0434\u0430\u043D\u043D\u044B\u0445 \u0441\u043F\u043E\u0441\u043E\u0431\u0432\u044B\u0431\u043E\u0440\u0430\u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u0430windows \u0441\u043F\u043E\u0441\u043E\u0431\u043A\u043E\u0434\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F\u0441\u0442\u0440\u043E\u043A\u0438 \u0441\u0442\u0430\u0442\u0443\u0441\u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u044F \u0442\u0438\u043F\u0432\u043D\u0435\u0448\u043D\u0435\u0439\u043A\u043E\u043C\u043F\u043E\u043D\u0435\u043D\u0442\u044B \u0442\u0438\u043F\u043F\u043B\u0430\u0442\u0444\u043E\u0440\u043C\u044B \u0442\u0438\u043F\u043F\u043E\u0432\u0435\u0434\u0435\u043D\u0438\u044F\u043A\u043B\u0430\u0432\u0438\u0448\u0438enter \u0442\u0438\u043F\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u0438\u043E\u0432\u044B\u043F\u043E\u043B\u043D\u0435\u043D\u0438\u0438\u043E\u0431\u043D\u043E\u0432\u043B\u0435\u043D\u0438\u044F\u043A\u043E\u043D\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438\u0431\u0430\u0437\u044B\u0434\u0430\u043D\u043D\u044B\u0445 \u0443\u0440\u043E\u0432\u0435\u043D\u044C\u0438\u0437\u043E\u043B\u044F\u0446\u0438\u0438\u0442\u0440\u0430\u043D\u0437\u0430\u043A\u0446\u0438\u0439 \u0445\u0435\u0448\u0444\u0443\u043D\u043A\u0446\u0438\u044F \u0447\u0430\u0441\u0442\u0438\u0434\u0430\u0442\u044B";
  var CLASS = v8_system_sets_of_values + v8_system_enums_interface + v8_system_enums_objects_properties + v8_system_enums_exchange_plans + v8_system_enums_tabular_document + v8_system_enums_sheduler + v8_system_enums_formatted_document + v8_system_enums_query + v8_system_enums_report_builder + v8_system_enums_files + v8_system_enums_query_builder + v8_system_enums_data_analysis + v8_system_enums_xml_json_xs_dom_xdto_ws + v8_system_enums_data_composition_system + v8_system_enums_email + v8_system_enums_logbook + v8_system_enums_cryptography + v8_system_enums_zip + v8_system_enums_other + v8_system_enums_request_schema + v8_system_enums_properties_of_metadata_objects + v8_system_enums_differents;
  var v8_shared_object = "com\u043E\u0431\u044A\u0435\u043A\u0442 ftp\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435 http\u0437\u0430\u043F\u0440\u043E\u0441 http\u0441\u0435\u0440\u0432\u0438\u0441\u043E\u0442\u0432\u0435\u0442 http\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435 ws\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u044F ws\u043F\u0440\u043E\u043A\u0441\u0438 xbase \u0430\u043D\u0430\u043B\u0438\u0437\u0434\u0430\u043D\u043D\u044B\u0445 \u0430\u043D\u043D\u043E\u0442\u0430\u0446\u0438\u044Fxs \u0431\u043B\u043E\u043A\u0438\u0440\u043E\u0432\u043A\u0430\u0434\u0430\u043D\u043D\u044B\u0445 \u0431\u0443\u0444\u0435\u0440\u0434\u0432\u043E\u0438\u0447\u043D\u044B\u0445\u0434\u0430\u043D\u043D\u044B\u0445 \u0432\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435xs \u0432\u044B\u0440\u0430\u0436\u0435\u043D\u0438\u0435\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0433\u0435\u043D\u0435\u0440\u0430\u0442\u043E\u0440\u0441\u043B\u0443\u0447\u0430\u0439\u043D\u044B\u0445\u0447\u0438\u0441\u0435\u043B \u0433\u0435\u043E\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u0430\u044F\u0441\u0445\u0435\u043C\u0430 \u0433\u0435\u043E\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u0438\u0435\u043A\u043E\u043E\u0440\u0434\u0438\u043D\u0430\u0442\u044B \u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u0430\u044F\u0441\u0445\u0435\u043C\u0430 \u0433\u0440\u0443\u043F\u043F\u0430\u043C\u043E\u0434\u0435\u043B\u0438xs \u0434\u0430\u043D\u043D\u044B\u0435\u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043E\u0432\u043A\u0438\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0434\u0432\u043E\u0438\u0447\u043D\u044B\u0435\u0434\u0430\u043D\u043D\u044B\u0435 \u0434\u0435\u043D\u0434\u0440\u043E\u0433\u0440\u0430\u043C\u043C\u0430 \u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u0430 \u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u0430\u0433\u0430\u043D\u0442\u0430 \u0434\u0438\u0430\u043B\u043E\u0433\u0432\u044B\u0431\u043E\u0440\u0430\u0444\u0430\u0439\u043B\u0430 \u0434\u0438\u0430\u043B\u043E\u0433\u0432\u044B\u0431\u043E\u0440\u0430\u0446\u0432\u0435\u0442\u0430 \u0434\u0438\u0430\u043B\u043E\u0433\u0432\u044B\u0431\u043E\u0440\u0430\u0448\u0440\u0438\u0444\u0442\u0430 \u0434\u0438\u0430\u043B\u043E\u0433\u0440\u0430\u0441\u043F\u0438\u0441\u0430\u043D\u0438\u044F\u0440\u0435\u0433\u043B\u0430\u043C\u0435\u043D\u0442\u043D\u043E\u0433\u043E\u0437\u0430\u0434\u0430\u043D\u0438\u044F \u0434\u0438\u0430\u043B\u043E\u0433\u0440\u0435\u0434\u0430\u043A\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u044F\u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u043E\u0433\u043E\u043F\u0435\u0440\u0438\u043E\u0434\u0430 \u0434\u0438\u0430\u043F\u0430\u0437\u043E\u043D \u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442dom \u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442html \u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430\u0446\u0438\u044Fxs \u0434\u043E\u0441\u0442\u0430\u0432\u043B\u044F\u0435\u043C\u043E\u0435\u0443\u0432\u0435\u0434\u043E\u043C\u043B\u0435\u043D\u0438\u0435 \u0437\u0430\u043F\u0438\u0441\u044Cdom \u0437\u0430\u043F\u0438\u0441\u044Cfastinfoset \u0437\u0430\u043F\u0438\u0441\u044Chtml \u0437\u0430\u043F\u0438\u0441\u044Cjson \u0437\u0430\u043F\u0438\u0441\u044Cxml \u0437\u0430\u043F\u0438\u0441\u044Czip\u0444\u0430\u0439\u043B\u0430 \u0437\u0430\u043F\u0438\u0441\u044C\u0434\u0430\u043D\u043D\u044B\u0445 \u0437\u0430\u043F\u0438\u0441\u044C\u0442\u0435\u043A\u0441\u0442\u0430 \u0437\u0430\u043F\u0438\u0441\u044C\u0443\u0437\u043B\u043E\u0432dom \u0437\u0430\u043F\u0440\u043E\u0441 \u0437\u0430\u0449\u0438\u0449\u0435\u043D\u043D\u043E\u0435\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435openssl \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F\u043F\u043E\u043B\u0435\u0439\u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043E\u0432\u043A\u0438\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0438\u0437\u0432\u043B\u0435\u0447\u0435\u043D\u0438\u0435\u0442\u0435\u043A\u0441\u0442\u0430 \u0438\u043C\u043F\u043E\u0440\u0442xs \u0438\u043D\u0442\u0435\u0440\u043D\u0435\u0442\u043F\u043E\u0447\u0442\u0430 \u0438\u043D\u0442\u0435\u0440\u043D\u0435\u0442\u043F\u043E\u0447\u0442\u043E\u0432\u043E\u0435\u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435 \u0438\u043D\u0442\u0435\u0440\u043D\u0435\u0442\u043F\u043E\u0447\u0442\u043E\u0432\u044B\u0439\u043F\u0440\u043E\u0444\u0438\u043B\u044C \u0438\u043D\u0442\u0435\u0440\u043D\u0435\u0442\u043F\u0440\u043E\u043A\u0441\u0438 \u0438\u043D\u0442\u0435\u0440\u043D\u0435\u0442\u0441\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435 \u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044F\u0434\u043B\u044F\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u044Fxs \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430xs \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u0441\u043E\u0431\u044B\u0442\u0438\u044F\u0436\u0443\u0440\u043D\u0430\u043B\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u0438\u0441\u0442\u043E\u0447\u043D\u0438\u043A\u0434\u043E\u0441\u0442\u0443\u043F\u043D\u044B\u0445\u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0438\u0442\u0435\u0440\u0430\u0442\u043E\u0440\u0443\u0437\u043B\u043E\u0432dom \u043A\u0430\u0440\u0442\u0438\u043D\u043A\u0430 \u043A\u0432\u0430\u043B\u0438\u0444\u0438\u043A\u0430\u0442\u043E\u0440\u044B\u0434\u0430\u0442\u044B \u043A\u0432\u0430\u043B\u0438\u0444\u0438\u043A\u0430\u0442\u043E\u0440\u044B\u0434\u0432\u043E\u0438\u0447\u043D\u044B\u0445\u0434\u0430\u043D\u043D\u044B\u0445 \u043A\u0432\u0430\u043B\u0438\u0444\u0438\u043A\u0430\u0442\u043E\u0440\u044B\u0441\u0442\u0440\u043E\u043A\u0438 \u043A\u0432\u0430\u043B\u0438\u0444\u0438\u043A\u0430\u0442\u043E\u0440\u044B\u0447\u0438\u0441\u043B\u0430 \u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u0449\u0438\u043A\u043C\u0430\u043A\u0435\u0442\u0430\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u0449\u0438\u043A\u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u043A\u043E\u043D\u0441\u0442\u0440\u0443\u043A\u0442\u043E\u0440\u043C\u0430\u043A\u0435\u0442\u0430\u043E\u0444\u043E\u0440\u043C\u043B\u0435\u043D\u0438\u044F\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u043A\u043E\u043D\u0441\u0442\u0440\u0443\u043A\u0442\u043E\u0440\u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u043A\u043E\u043D\u0441\u0442\u0440\u0443\u043A\u0442\u043E\u0440\u0444\u043E\u0440\u043C\u0430\u0442\u043D\u043E\u0439\u0441\u0442\u0440\u043E\u043A\u0438 \u043B\u0438\u043D\u0438\u044F \u043C\u0430\u043A\u0435\u0442\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u043C\u0430\u043A\u0435\u0442\u043E\u0431\u043B\u0430\u0441\u0442\u0438\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u043C\u0430\u043A\u0435\u0442\u043E\u0444\u043E\u0440\u043C\u043B\u0435\u043D\u0438\u044F\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u043C\u0430\u0441\u043A\u0430xs \u043C\u0435\u043D\u0435\u0434\u0436\u0435\u0440\u043A\u0440\u0438\u043F\u0442\u043E\u0433\u0440\u0430\u0444\u0438\u0438 \u043D\u0430\u0431\u043E\u0440\u0441\u0445\u0435\u043Cxml \u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u043D\u0430\u0441\u0442\u0440\u043E\u0439\u043A\u0438\u0441\u0435\u0440\u0438\u0430\u043B\u0438\u0437\u0430\u0446\u0438\u0438json \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0430\u043A\u0430\u0440\u0442\u0438\u043D\u043E\u043A \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0430\u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043E\u0432\u043A\u0438\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u043E\u0431\u0445\u043E\u0434\u0434\u0435\u0440\u0435\u0432\u0430dom \u043E\u0431\u044A\u044F\u0432\u043B\u0435\u043D\u0438\u0435\u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430xs \u043E\u0431\u044A\u044F\u0432\u043B\u0435\u043D\u0438\u0435\u043D\u043E\u0442\u0430\u0446\u0438\u0438xs \u043E\u0431\u044A\u044F\u0432\u043B\u0435\u043D\u0438\u0435\u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0430xs \u043E\u043F\u0438\u0441\u0430\u043D\u0438\u0435\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F\u0441\u043E\u0431\u044B\u0442\u0438\u044F\u0434\u043E\u0441\u0442\u0443\u043F\u0436\u0443\u0440\u043D\u0430\u043B\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043E\u043F\u0438\u0441\u0430\u043D\u0438\u0435\u0438\u0441\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u0438\u044F\u0441\u043E\u0431\u044B\u0442\u0438\u044F\u043E\u0442\u043A\u0430\u0437\u0432\u0434\u043E\u0441\u0442\u0443\u043F\u0435\u0436\u0443\u0440\u043D\u0430\u043B\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u043E\u043F\u0438\u0441\u0430\u043D\u0438\u0435\u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0438\u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043E\u0432\u043A\u0438\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u043E\u043F\u0438\u0441\u0430\u043D\u0438\u0435\u043F\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043C\u043E\u0433\u043E\u0444\u0430\u0439\u043B\u0430 \u043E\u043F\u0438\u0441\u0430\u043D\u0438\u0435\u0442\u0438\u043F\u043E\u0432 \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435\u0433\u0440\u0443\u043F\u043F\u044B\u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043E\u0432xs \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435\u0433\u0440\u0443\u043F\u043F\u044B\u043C\u043E\u0434\u0435\u043B\u0438xs \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435\u043E\u0433\u0440\u0430\u043D\u0438\u0447\u0435\u043D\u0438\u044F\u0438\u0434\u0435\u043D\u0442\u0438\u0447\u043D\u043E\u0441\u0442\u0438xs \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435\u043F\u0440\u043E\u0441\u0442\u043E\u0433\u043E\u0442\u0438\u043F\u0430xs \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435\u0441\u043E\u0441\u0442\u0430\u0432\u043D\u043E\u0433\u043E\u0442\u0438\u043F\u0430xs \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435\u0442\u0438\u043F\u0430\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430dom \u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u044Fxpathxs \u043E\u0442\u0431\u043E\u0440\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u043F\u0430\u043A\u0435\u0442\u043E\u0442\u043E\u0431\u0440\u0430\u0436\u0430\u0435\u043C\u044B\u0445\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u043E\u0432 \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u0432\u044B\u0431\u043E\u0440\u0430 \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u044B\u0437\u0430\u043F\u0438\u0441\u0438json \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u044B\u0437\u0430\u043F\u0438\u0441\u0438xml \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u044B\u0447\u0442\u0435\u043D\u0438\u044Fxml \u043F\u0435\u0440\u0435\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u0438\u0435xs \u043F\u043B\u0430\u043D\u0438\u0440\u043E\u0432\u0449\u0438\u043A \u043F\u043E\u043B\u0435\u0430\u043D\u0430\u043B\u0438\u0437\u0430\u0434\u0430\u043D\u043D\u044B\u0445 \u043F\u043E\u043B\u0435\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u043F\u043E\u0441\u0442\u0440\u043E\u0438\u0442\u0435\u043B\u044Cdom \u043F\u043E\u0441\u0442\u0440\u043E\u0438\u0442\u0435\u043B\u044C\u0437\u0430\u043F\u0440\u043E\u0441\u0430 \u043F\u043E\u0441\u0442\u0440\u043E\u0438\u0442\u0435\u043B\u044C\u043E\u0442\u0447\u0435\u0442\u0430 \u043F\u043E\u0441\u0442\u0440\u043E\u0438\u0442\u0435\u043B\u044C\u043E\u0442\u0447\u0435\u0442\u0430\u0430\u043D\u0430\u043B\u0438\u0437\u0430\u0434\u0430\u043D\u043D\u044B\u0445 \u043F\u043E\u0441\u0442\u0440\u043E\u0438\u0442\u0435\u043B\u044C\u0441\u0445\u0435\u043Cxml \u043F\u043E\u0442\u043E\u043A \u043F\u043E\u0442\u043E\u043A\u0432\u043F\u0430\u043C\u044F\u0442\u0438 \u043F\u043E\u0447\u0442\u0430 \u043F\u043E\u0447\u0442\u043E\u0432\u043E\u0435\u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435 \u043F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u0435xsl \u043F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u0435\u043A\u043A\u0430\u043D\u043E\u043D\u0438\u0447\u0435\u0441\u043A\u043E\u043C\u0443xml \u043F\u0440\u043E\u0446\u0435\u0441\u0441\u043E\u0440\u0432\u044B\u0432\u043E\u0434\u0430\u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u0430\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445\u0432\u043A\u043E\u043B\u043B\u0435\u043A\u0446\u0438\u044E\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439 \u043F\u0440\u043E\u0446\u0435\u0441\u0441\u043E\u0440\u0432\u044B\u0432\u043E\u0434\u0430\u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u0430\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445\u0432\u0442\u0430\u0431\u043B\u0438\u0447\u043D\u044B\u0439\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442 \u043F\u0440\u043E\u0446\u0435\u0441\u0441\u043E\u0440\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0440\u0430\u0437\u044B\u043C\u0435\u043D\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u043F\u0440\u043E\u0441\u0442\u0440\u0430\u043D\u0441\u0442\u0432\u0438\u043C\u0435\u043Ddom \u0440\u0430\u043C\u043A\u0430 \u0440\u0430\u0441\u043F\u0438\u0441\u0430\u043D\u0438\u0435\u0440\u0435\u0433\u043B\u0430\u043C\u0435\u043D\u0442\u043D\u043E\u0433\u043E\u0437\u0430\u0434\u0430\u043D\u0438\u044F \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u043D\u043E\u0435\u0438\u043C\u044Fxml \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u0447\u0442\u0435\u043D\u0438\u044F\u0434\u0430\u043D\u043D\u044B\u0445 \u0441\u0432\u043E\u0434\u043D\u0430\u044F\u0434\u0438\u0430\u0433\u0440\u0430\u043C\u043C\u0430 \u0441\u0432\u044F\u0437\u044C\u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u0430\u0432\u044B\u0431\u043E\u0440\u0430 \u0441\u0432\u044F\u0437\u044C\u043F\u043E\u0442\u0438\u043F\u0443 \u0441\u0432\u044F\u0437\u044C\u043F\u043E\u0442\u0438\u043F\u0443\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0441\u0435\u0440\u0438\u0430\u043B\u0438\u0437\u0430\u0442\u043E\u0440xdto \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u043A\u043B\u0438\u0435\u043D\u0442\u0430windows \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u043A\u043B\u0438\u0435\u043D\u0442\u0430\u0444\u0430\u0439\u043B \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u043A\u0440\u0438\u043F\u0442\u043E\u0433\u0440\u0430\u0444\u0438\u0438 \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u044B\u0443\u0434\u043E\u0441\u0442\u043E\u0432\u0435\u0440\u044F\u044E\u0449\u0438\u0445\u0446\u0435\u043D\u0442\u0440\u043E\u0432windows \u0441\u0435\u0440\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u044B\u0443\u0434\u043E\u0441\u0442\u043E\u0432\u0435\u0440\u044F\u044E\u0449\u0438\u0445\u0446\u0435\u043D\u0442\u0440\u043E\u0432\u0444\u0430\u0439\u043B \u0441\u0436\u0430\u0442\u0438\u0435\u0434\u0430\u043D\u043D\u044B\u0445 \u0441\u0438\u0441\u0442\u0435\u043C\u043D\u0430\u044F\u0438\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044F \u0441\u043E\u043E\u0431\u0449\u0435\u043D\u0438\u0435\u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044E \u0441\u043E\u0447\u0435\u0442\u0430\u043D\u0438\u0435\u043A\u043B\u0430\u0432\u0438\u0448 \u0441\u0440\u0430\u0432\u043D\u0435\u043D\u0438\u0435\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439 \u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u0430\u044F\u0434\u0430\u0442\u0430\u043D\u0430\u0447\u0430\u043B\u0430 \u0441\u0442\u0430\u043D\u0434\u0430\u0440\u0442\u043D\u044B\u0439\u043F\u0435\u0440\u0438\u043E\u0434 \u0441\u0445\u0435\u043C\u0430xml \u0441\u0445\u0435\u043C\u0430\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 \u0442\u0430\u0431\u043B\u0438\u0447\u043D\u044B\u0439\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442 \u0442\u0435\u043A\u0441\u0442\u043E\u0432\u044B\u0439\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043C\u043E\u0435\u043F\u0440\u0438\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u0442\u0438\u043F\u0434\u0430\u043D\u043D\u044B\u0445xml \u0443\u043D\u0438\u043A\u0430\u043B\u044C\u043D\u044B\u0439\u0438\u0434\u0435\u043D\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u043E\u0440 \u0444\u0430\u0431\u0440\u0438\u043A\u0430xdto \u0444\u0430\u0439\u043B \u0444\u0430\u0439\u043B\u043E\u0432\u044B\u0439\u043F\u043E\u0442\u043E\u043A \u0444\u0430\u0441\u0435\u0442\u0434\u043B\u0438\u043D\u044Bxs \u0444\u0430\u0441\u0435\u0442\u043A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u0430\u0440\u0430\u0437\u0440\u044F\u0434\u043E\u0432\u0434\u0440\u043E\u0431\u043D\u043E\u0439\u0447\u0430\u0441\u0442\u0438xs \u0444\u0430\u0441\u0435\u0442\u043C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0433\u043E\u0432\u043A\u043B\u044E\u0447\u0430\u044E\u0449\u0435\u0433\u043E\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044Fxs \u0444\u0430\u0441\u0435\u0442\u043C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0433\u043E\u0438\u0441\u043A\u043B\u044E\u0447\u0430\u044E\u0449\u0435\u0433\u043E\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044Fxs \u0444\u0430\u0441\u0435\u0442\u043C\u0430\u043A\u0441\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0439\u0434\u043B\u0438\u043D\u044Bxs \u0444\u0430\u0441\u0435\u0442\u043C\u0438\u043D\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0433\u043E\u0432\u043A\u043B\u044E\u0447\u0430\u044E\u0449\u0435\u0433\u043E\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044Fxs \u0444\u0430\u0441\u0435\u0442\u043C\u0438\u043D\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0433\u043E\u0438\u0441\u043A\u043B\u044E\u0447\u0430\u044E\u0449\u0435\u0433\u043E\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044Fxs \u0444\u0430\u0441\u0435\u0442\u043C\u0438\u043D\u0438\u043C\u0430\u043B\u044C\u043D\u043E\u0439\u0434\u043B\u0438\u043D\u044Bxs \u0444\u0430\u0441\u0435\u0442\u043E\u0431\u0440\u0430\u0437\u0446\u0430xs \u0444\u0430\u0441\u0435\u0442\u043E\u0431\u0449\u0435\u0433\u043E\u043A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u0430\u0440\u0430\u0437\u0440\u044F\u0434\u043E\u0432xs \u0444\u0430\u0441\u0435\u0442\u043F\u0435\u0440\u0435\u0447\u0438\u0441\u043B\u0435\u043D\u0438\u044Fxs \u0444\u0430\u0441\u0435\u0442\u043F\u0440\u043E\u0431\u0435\u043B\u044C\u043D\u044B\u0445\u0441\u0438\u043C\u0432\u043E\u043B\u043E\u0432xs \u0444\u0438\u043B\u044C\u0442\u0440\u0443\u0437\u043B\u043E\u0432dom \u0444\u043E\u0440\u043C\u0430\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u0430\u044F\u0441\u0442\u0440\u043E\u043A\u0430 \u0444\u043E\u0440\u043C\u0430\u0442\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u044B\u0439\u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442 \u0444\u0440\u0430\u0433\u043C\u0435\u043D\u0442xs \u0445\u0435\u0448\u0438\u0440\u043E\u0432\u0430\u043D\u0438\u0435\u0434\u0430\u043D\u043D\u044B\u0445 \u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0435\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u044F \u0446\u0432\u0435\u0442 \u0447\u0442\u0435\u043D\u0438\u0435fastinfoset \u0447\u0442\u0435\u043D\u0438\u0435html \u0447\u0442\u0435\u043D\u0438\u0435json \u0447\u0442\u0435\u043D\u0438\u0435xml \u0447\u0442\u0435\u043D\u0438\u0435zip\u0444\u0430\u0439\u043B\u0430 \u0447\u0442\u0435\u043D\u0438\u0435\u0434\u0430\u043D\u043D\u044B\u0445 \u0447\u0442\u0435\u043D\u0438\u0435\u0442\u0435\u043A\u0441\u0442\u0430 \u0447\u0442\u0435\u043D\u0438\u0435\u0443\u0437\u043B\u043E\u0432dom \u0448\u0440\u0438\u0444\u0442 \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\u0430\u043A\u043E\u043C\u043F\u043E\u043D\u043E\u0432\u043A\u0438\u0434\u0430\u043D\u043D\u044B\u0445 ";
  var v8_universal_collection = "comsafearray \u0434\u0435\u0440\u0435\u0432\u043E\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439 \u043C\u0430\u0441\u0441\u0438\u0432 \u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0441\u043F\u0438\u0441\u043E\u043A\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439 \u0441\u0442\u0440\u0443\u043A\u0442\u0443\u0440\u0430 \u0442\u0430\u0431\u043B\u0438\u0446\u0430\u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439 \u0444\u0438\u043A\u0441\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u0430\u044F\u0441\u0442\u0440\u0443\u043A\u0442\u0443\u0440\u0430 \u0444\u0438\u043A\u0441\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u043E\u0435\u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0444\u0438\u043A\u0441\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u044B\u0439\u043C\u0430\u0441\u0441\u0438\u0432 ";
  var TYPE = v8_shared_object + v8_universal_collection;
  var LITERAL = "null \u0438\u0441\u0442\u0438\u043D\u0430 \u043B\u043E\u0436\u044C \u043D\u0435\u043E\u043F\u0440\u0435\u0434\u0435\u043B\u0435\u043D\u043E";
  var NUMBERS = hljs2.inherit(hljs2.NUMBER_MODE);
  var STRINGS = {
    className: "string",
    begin: '"|\\|',
    end: '"|$',
    contains: [{begin: '""'}]
  };
  var DATE = {
    begin: "'",
    end: "'",
    excludeBegin: true,
    excludeEnd: true,
    contains: [
      {
        className: "number",
        begin: "\\d{4}([\\.\\\\/:-]?\\d{2}){0,5}"
      }
    ]
  };
  var COMMENTS = hljs2.inherit(hljs2.C_LINE_COMMENT_MODE);
  var META = {
    className: "meta",
    begin: "#|&",
    end: "$",
    keywords: {
      $pattern: UNDERSCORE_IDENT_RE2,
      "meta-keyword": KEYWORD + METAKEYWORD
    },
    contains: [
      COMMENTS
    ]
  };
  var SYMBOL = {
    className: "symbol",
    begin: "~",
    end: ";|:",
    excludeEnd: true
  };
  var FUNCTION = {
    className: "function",
    variants: [
      {begin: "\u043F\u0440\u043E\u0446\u0435\u0434\u0443\u0440\u0430|\u0444\u0443\u043D\u043A\u0446\u0438\u044F", end: "\\)", keywords: "\u043F\u0440\u043E\u0446\u0435\u0434\u0443\u0440\u0430 \u0444\u0443\u043D\u043A\u0446\u0438\u044F"},
      {begin: "\u043A\u043E\u043D\u0435\u0446\u043F\u0440\u043E\u0446\u0435\u0434\u0443\u0440\u044B|\u043A\u043E\u043D\u0435\u0446\u0444\u0443\u043D\u043A\u0446\u0438\u0438", keywords: "\u043A\u043E\u043D\u0435\u0446\u043F\u0440\u043E\u0446\u0435\u0434\u0443\u0440\u044B \u043A\u043E\u043D\u0435\u0446\u0444\u0443\u043D\u043A\u0446\u0438\u0438"}
    ],
    contains: [
      {
        begin: "\\(",
        end: "\\)",
        endsParent: true,
        contains: [
          {
            className: "params",
            begin: UNDERSCORE_IDENT_RE2,
            end: ",",
            excludeEnd: true,
            endsWithParent: true,
            keywords: {
              $pattern: UNDERSCORE_IDENT_RE2,
              keyword: "\u0437\u043D\u0430\u0447",
              literal: LITERAL
            },
            contains: [
              NUMBERS,
              STRINGS,
              DATE
            ]
          },
          COMMENTS
        ]
      },
      hljs2.inherit(hljs2.TITLE_MODE, {begin: UNDERSCORE_IDENT_RE2})
    ]
  };
  return {
    name: "1C:Enterprise",
    case_insensitive: true,
    keywords: {
      $pattern: UNDERSCORE_IDENT_RE2,
      keyword: KEYWORD,
      built_in: BUILTIN,
      class: CLASS,
      type: TYPE,
      literal: LITERAL
    },
    contains: [
      META,
      FUNCTION,
      COMMENTS,
      SYMBOL,
      NUMBERS,
      STRINGS,
      DATE
    ]
  };
}
var _1c_1 = _1c;
function source$B(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function concat$A(...args) {
  const joined = args.map((x2) => source$B(x2)).join("");
  return joined;
}
function abnf(hljs2) {
  const regexes = {
    ruleDeclaration: /^[a-zA-Z][a-zA-Z0-9-]*/,
    unexpectedChars: /[!@#$^&',?+~`|:]/
  };
  const keywords2 = [
    "ALPHA",
    "BIT",
    "CHAR",
    "CR",
    "CRLF",
    "CTL",
    "DIGIT",
    "DQUOTE",
    "HEXDIG",
    "HTAB",
    "LF",
    "LWSP",
    "OCTET",
    "SP",
    "VCHAR",
    "WSP"
  ];
  const commentMode = hljs2.COMMENT(/;/, /$/);
  const terminalBinaryMode = {
    className: "symbol",
    begin: /%b[0-1]+(-[0-1]+|(\.[0-1]+)+){0,1}/
  };
  const terminalDecimalMode = {
    className: "symbol",
    begin: /%d[0-9]+(-[0-9]+|(\.[0-9]+)+){0,1}/
  };
  const terminalHexadecimalMode = {
    className: "symbol",
    begin: /%x[0-9A-F]+(-[0-9A-F]+|(\.[0-9A-F]+)+){0,1}/
  };
  const caseSensitivityIndicatorMode = {
    className: "symbol",
    begin: /%[si]/
  };
  const ruleDeclarationMode = {
    className: "attribute",
    begin: concat$A(regexes.ruleDeclaration, /(?=\s*=)/)
  };
  return {
    name: "Augmented Backus-Naur Form",
    illegal: regexes.unexpectedChars,
    keywords: keywords2,
    contains: [
      ruleDeclarationMode,
      commentMode,
      terminalBinaryMode,
      terminalDecimalMode,
      terminalHexadecimalMode,
      caseSensitivityIndicatorMode,
      hljs2.QUOTE_STRING_MODE,
      hljs2.NUMBER_MODE
    ]
  };
}
var abnf_1 = abnf;
function source$A(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function concat$z(...args) {
  const joined = args.map((x2) => source$A(x2)).join("");
  return joined;
}
function either$c(...args) {
  const joined = "(" + args.map((x2) => source$A(x2)).join("|") + ")";
  return joined;
}
function accesslog(_hljs) {
  const HTTP_VERBS = [
    "GET",
    "POST",
    "HEAD",
    "PUT",
    "DELETE",
    "CONNECT",
    "OPTIONS",
    "PATCH",
    "TRACE"
  ];
  return {
    name: "Apache Access Log",
    contains: [
      {
        className: "number",
        begin: /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(:\d{1,5})?\b/,
        relevance: 5
      },
      {
        className: "number",
        begin: /\b\d+\b/,
        relevance: 0
      },
      {
        className: "string",
        begin: concat$z(/"/, either$c(...HTTP_VERBS)),
        end: /"/,
        keywords: HTTP_VERBS,
        illegal: /\n/,
        relevance: 5,
        contains: [
          {
            begin: /HTTP\/[12]\.\d'/,
            relevance: 5
          }
        ]
      },
      {
        className: "string",
        begin: /\[\d[^\]\n]{8,}\]/,
        illegal: /\n/,
        relevance: 1
      },
      {
        className: "string",
        begin: /\[/,
        end: /\]/,
        illegal: /\n/,
        relevance: 0
      },
      {
        className: "string",
        begin: /"Mozilla\/\d\.\d \(/,
        end: /"/,
        illegal: /\n/,
        relevance: 3
      },
      {
        className: "string",
        begin: /"/,
        end: /"/,
        illegal: /\n/,
        relevance: 0
      }
    ]
  };
}
var accesslog_1 = accesslog;
function source$z(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function concat$y(...args) {
  const joined = args.map((x2) => source$z(x2)).join("");
  return joined;
}
function actionscript(hljs2) {
  const IDENT_RE2 = /[a-zA-Z_$][a-zA-Z0-9_$]*/;
  const IDENT_FUNC_RETURN_TYPE_RE = /([*]|[a-zA-Z_$][a-zA-Z0-9_$]*)/;
  const AS3_REST_ARG_MODE = {
    className: "rest_arg",
    begin: /[.]{3}/,
    end: IDENT_RE2,
    relevance: 10
  };
  return {
    name: "ActionScript",
    aliases: ["as"],
    keywords: {
      keyword: "as break case catch class const continue default delete do dynamic each else extends final finally for function get if implements import in include instanceof interface internal is namespace native new override package private protected public return set static super switch this throw try typeof use var void while with",
      literal: "true false null undefined"
    },
    contains: [
      hljs2.APOS_STRING_MODE,
      hljs2.QUOTE_STRING_MODE,
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      hljs2.C_NUMBER_MODE,
      {
        className: "class",
        beginKeywords: "package",
        end: /\{/,
        contains: [hljs2.TITLE_MODE]
      },
      {
        className: "class",
        beginKeywords: "class interface",
        end: /\{/,
        excludeEnd: true,
        contains: [
          {beginKeywords: "extends implements"},
          hljs2.TITLE_MODE
        ]
      },
      {
        className: "meta",
        beginKeywords: "import include",
        end: /;/,
        keywords: {"meta-keyword": "import include"}
      },
      {
        className: "function",
        beginKeywords: "function",
        end: /[{;]/,
        excludeEnd: true,
        illegal: /\S/,
        contains: [
          hljs2.TITLE_MODE,
          {
            className: "params",
            begin: /\(/,
            end: /\)/,
            contains: [
              hljs2.APOS_STRING_MODE,
              hljs2.QUOTE_STRING_MODE,
              hljs2.C_LINE_COMMENT_MODE,
              hljs2.C_BLOCK_COMMENT_MODE,
              AS3_REST_ARG_MODE
            ]
          },
          {begin: concat$y(/:\s*/, IDENT_FUNC_RETURN_TYPE_RE)}
        ]
      },
      hljs2.METHOD_GUARD
    ],
    illegal: /#/
  };
}
var actionscript_1 = actionscript;
function ada(hljs2) {
  const INTEGER_RE = "\\d(_|\\d)*";
  const EXPONENT_RE = "[eE][-+]?" + INTEGER_RE;
  const DECIMAL_LITERAL_RE = INTEGER_RE + "(\\." + INTEGER_RE + ")?(" + EXPONENT_RE + ")?";
  const BASED_INTEGER_RE = "\\w+";
  const BASED_LITERAL_RE = INTEGER_RE + "#" + BASED_INTEGER_RE + "(\\." + BASED_INTEGER_RE + ")?#(" + EXPONENT_RE + ")?";
  const NUMBER_RE2 = "\\b(" + BASED_LITERAL_RE + "|" + DECIMAL_LITERAL_RE + ")";
  const ID_REGEX = "[A-Za-z](_?[A-Za-z0-9.])*";
  const BAD_CHARS = `[]\\{\\}%#'"`;
  const COMMENTS = hljs2.COMMENT("--", "$");
  const VAR_DECLS = {
    begin: "\\s+:\\s+",
    end: "\\s*(:=|;|\\)|=>|$)",
    illegal: BAD_CHARS,
    contains: [
      {
        beginKeywords: "loop for declare others",
        endsParent: true
      },
      {
        className: "keyword",
        beginKeywords: "not null constant access function procedure in out aliased exception"
      },
      {
        className: "type",
        begin: ID_REGEX,
        endsParent: true,
        relevance: 0
      }
    ]
  };
  return {
    name: "Ada",
    case_insensitive: true,
    keywords: {
      keyword: "abort else new return abs elsif not reverse abstract end accept entry select access exception of separate aliased exit or some all others subtype and for out synchronized array function overriding at tagged generic package task begin goto pragma terminate body private then if procedure type case in protected constant interface is raise use declare range delay limited record when delta loop rem while digits renames with do mod requeue xor",
      literal: "True False"
    },
    contains: [
      COMMENTS,
      {
        className: "string",
        begin: /"/,
        end: /"/,
        contains: [{
          begin: /""/,
          relevance: 0
        }]
      },
      {
        className: "string",
        begin: /'.'/
      },
      {
        className: "number",
        begin: NUMBER_RE2,
        relevance: 0
      },
      {
        className: "symbol",
        begin: "'" + ID_REGEX
      },
      {
        className: "title",
        begin: "(\\bwith\\s+)?(\\bprivate\\s+)?\\bpackage\\s+(\\bbody\\s+)?",
        end: "(is|$)",
        keywords: "package body",
        excludeBegin: true,
        excludeEnd: true,
        illegal: BAD_CHARS
      },
      {
        begin: "(\\b(with|overriding)\\s+)?\\b(function|procedure)\\s+",
        end: "(\\bis|\\bwith|\\brenames|\\)\\s*;)",
        keywords: "overriding function procedure with is renames return",
        returnBegin: true,
        contains: [
          COMMENTS,
          {
            className: "title",
            begin: "(\\bwith\\s+)?\\b(function|procedure)\\s+",
            end: "(\\(|\\s+|$)",
            excludeBegin: true,
            excludeEnd: true,
            illegal: BAD_CHARS
          },
          VAR_DECLS,
          {
            className: "type",
            begin: "\\breturn\\s+",
            end: "(\\s+|;|$)",
            keywords: "return",
            excludeBegin: true,
            excludeEnd: true,
            endsParent: true,
            illegal: BAD_CHARS
          }
        ]
      },
      {
        className: "type",
        begin: "\\b(sub)?type\\s+",
        end: "\\s+",
        keywords: "type",
        excludeBegin: true,
        illegal: BAD_CHARS
      },
      VAR_DECLS
    ]
  };
}
var ada_1 = ada;
function angelscript(hljs2) {
  var builtInTypeMode = {
    className: "built_in",
    begin: "\\b(void|bool|int|int8|int16|int32|int64|uint|uint8|uint16|uint32|uint64|string|ref|array|double|float|auto|dictionary)"
  };
  var objectHandleMode = {
    className: "symbol",
    begin: "[a-zA-Z0-9_]+@"
  };
  var genericMode = {
    className: "keyword",
    begin: "<",
    end: ">",
    contains: [builtInTypeMode, objectHandleMode]
  };
  builtInTypeMode.contains = [genericMode];
  objectHandleMode.contains = [genericMode];
  return {
    name: "AngelScript",
    aliases: ["asc"],
    keywords: "for in|0 break continue while do|0 return if else case switch namespace is cast or and xor not get|0 in inout|10 out override set|0 private public const default|0 final shared external mixin|10 enum typedef funcdef this super import from interface abstract|0 try catch protected explicit property",
    illegal: "(^using\\s+[A-Za-z0-9_\\.]+;$|\\bfunction\\s*[^\\(])",
    contains: [
      {
        className: "string",
        begin: "'",
        end: "'",
        illegal: "\\n",
        contains: [hljs2.BACKSLASH_ESCAPE],
        relevance: 0
      },
      {
        className: "string",
        begin: '"""',
        end: '"""'
      },
      {
        className: "string",
        begin: '"',
        end: '"',
        illegal: "\\n",
        contains: [hljs2.BACKSLASH_ESCAPE],
        relevance: 0
      },
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      {
        className: "string",
        begin: "^\\s*\\[",
        end: "\\]"
      },
      {
        beginKeywords: "interface namespace",
        end: /\{/,
        illegal: "[;.\\-]",
        contains: [
          {
            className: "symbol",
            begin: "[a-zA-Z0-9_]+"
          }
        ]
      },
      {
        beginKeywords: "class",
        end: /\{/,
        illegal: "[;.\\-]",
        contains: [
          {
            className: "symbol",
            begin: "[a-zA-Z0-9_]+",
            contains: [
              {
                begin: "[:,]\\s*",
                contains: [
                  {
                    className: "symbol",
                    begin: "[a-zA-Z0-9_]+"
                  }
                ]
              }
            ]
          }
        ]
      },
      builtInTypeMode,
      objectHandleMode,
      {
        className: "literal",
        begin: "\\b(null|true|false)"
      },
      {
        className: "number",
        relevance: 0,
        begin: "(-?)(\\b0[xXbBoOdD][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?f?|\\.\\d+f?)([eE][-+]?\\d+f?)?)"
      }
    ]
  };
}
var angelscript_1 = angelscript;
function apache(hljs2) {
  const NUMBER_REF = {
    className: "number",
    begin: /[$%]\d+/
  };
  const NUMBER = {
    className: "number",
    begin: /\d+/
  };
  const IP_ADDRESS = {
    className: "number",
    begin: /\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(:\d{1,5})?/
  };
  const PORT_NUMBER = {
    className: "number",
    begin: /:\d{1,5}/
  };
  return {
    name: "Apache config",
    aliases: ["apacheconf"],
    case_insensitive: true,
    contains: [
      hljs2.HASH_COMMENT_MODE,
      {
        className: "section",
        begin: /<\/?/,
        end: />/,
        contains: [
          IP_ADDRESS,
          PORT_NUMBER,
          hljs2.inherit(hljs2.QUOTE_STRING_MODE, {relevance: 0})
        ]
      },
      {
        className: "attribute",
        begin: /\w+/,
        relevance: 0,
        keywords: {
          nomarkup: "order deny allow setenv rewriterule rewriteengine rewritecond documentroot sethandler errordocument loadmodule options header listen serverroot servername"
        },
        starts: {
          end: /$/,
          relevance: 0,
          keywords: {literal: "on off all deny allow"},
          contains: [
            {
              className: "meta",
              begin: /\s\[/,
              end: /\]$/
            },
            {
              className: "variable",
              begin: /[\$%]\{/,
              end: /\}/,
              contains: [
                "self",
                NUMBER_REF
              ]
            },
            IP_ADDRESS,
            NUMBER,
            hljs2.QUOTE_STRING_MODE
          ]
        }
      }
    ],
    illegal: /\S/
  };
}
var apache_1 = apache;
function source$y(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function concat$x(...args) {
  const joined = args.map((x2) => source$y(x2)).join("");
  return joined;
}
function either$b(...args) {
  const joined = "(" + args.map((x2) => source$y(x2)).join("|") + ")";
  return joined;
}
function applescript(hljs2) {
  const STRING = hljs2.inherit(hljs2.QUOTE_STRING_MODE, {
    illegal: null
  });
  const PARAMS = {
    className: "params",
    begin: /\(/,
    end: /\)/,
    contains: [
      "self",
      hljs2.C_NUMBER_MODE,
      STRING
    ]
  };
  const COMMENT_MODE_1 = hljs2.COMMENT(/--/, /$/);
  const COMMENT_MODE_2 = hljs2.COMMENT(/\(\*/, /\*\)/, {
    contains: [
      "self",
      COMMENT_MODE_1
    ]
  });
  const COMMENTS = [
    COMMENT_MODE_1,
    COMMENT_MODE_2,
    hljs2.HASH_COMMENT_MODE
  ];
  const KEYWORD_PATTERNS = [
    /apart from/,
    /aside from/,
    /instead of/,
    /out of/,
    /greater than/,
    /isn't|(doesn't|does not) (equal|come before|come after|contain)/,
    /(greater|less) than( or equal)?/,
    /(starts?|ends|begins?) with/,
    /contained by/,
    /comes (before|after)/,
    /a (ref|reference)/,
    /POSIX (file|path)/,
    /(date|time) string/,
    /quoted form/
  ];
  const BUILT_IN_PATTERNS = [
    /clipboard info/,
    /the clipboard/,
    /info for/,
    /list (disks|folder)/,
    /mount volume/,
    /path to/,
    /(close|open for) access/,
    /(get|set) eof/,
    /current date/,
    /do shell script/,
    /get volume settings/,
    /random number/,
    /set volume/,
    /system attribute/,
    /system info/,
    /time to GMT/,
    /(load|run|store) script/,
    /scripting components/,
    /ASCII (character|number)/,
    /localized string/,
    /choose (application|color|file|file name|folder|from list|remote application|URL)/,
    /display (alert|dialog)/
  ];
  return {
    name: "AppleScript",
    aliases: ["osascript"],
    keywords: {
      keyword: "about above after against and around as at back before beginning behind below beneath beside between but by considering contain contains continue copy div does eighth else end equal equals error every exit fifth first for fourth from front get given global if ignoring in into is it its last local me middle mod my ninth not of on onto or over prop property put ref reference repeat returning script second set seventh since sixth some tell tenth that the|0 then third through thru timeout times to transaction try until where while whose with without",
      literal: "AppleScript false linefeed return pi quote result space tab true",
      built_in: "alias application boolean class constant date file integer list number real record string text activate beep count delay launch log offset read round run say summarize write character characters contents day frontmost id item length month name paragraph paragraphs rest reverse running time version weekday word words year"
    },
    contains: [
      STRING,
      hljs2.C_NUMBER_MODE,
      {
        className: "built_in",
        begin: concat$x(/\b/, either$b(...BUILT_IN_PATTERNS), /\b/)
      },
      {
        className: "built_in",
        begin: /^\s*return\b/
      },
      {
        className: "literal",
        begin: /\b(text item delimiters|current application|missing value)\b/
      },
      {
        className: "keyword",
        begin: concat$x(/\b/, either$b(...KEYWORD_PATTERNS), /\b/)
      },
      {
        beginKeywords: "on",
        illegal: /[${=;\n]/,
        contains: [
          hljs2.UNDERSCORE_TITLE_MODE,
          PARAMS
        ]
      },
      ...COMMENTS
    ],
    illegal: /\/\/|->|=>|\[\[/
  };
}
var applescript_1 = applescript;
function arcade(hljs2) {
  const IDENT_RE2 = "[A-Za-z_][0-9A-Za-z_]*";
  const KEYWORDS2 = {
    keyword: "if for while var new function do return void else break",
    literal: "BackSlash DoubleQuote false ForwardSlash Infinity NaN NewLine null PI SingleQuote Tab TextFormatting true undefined",
    built_in: "Abs Acos Angle Attachments Area AreaGeodetic Asin Atan Atan2 Average Bearing Boolean Buffer BufferGeodetic Ceil Centroid Clip Console Constrain Contains Cos Count Crosses Cut Date DateAdd DateDiff Day Decode DefaultValue Dictionary Difference Disjoint Distance DistanceGeodetic Distinct DomainCode DomainName Equals Exp Extent Feature FeatureSet FeatureSetByAssociation FeatureSetById FeatureSetByPortalItem FeatureSetByRelationshipName FeatureSetByTitle FeatureSetByUrl Filter First Floor Geometry GroupBy Guid HasKey Hour IIf IndexOf Intersection Intersects IsEmpty IsNan IsSelfIntersecting Length LengthGeodetic Log Max Mean Millisecond Min Minute Month MultiPartToSinglePart Multipoint NextSequenceValue Now Number OrderBy Overlaps Point Polygon Polyline Portal Pow Random Relate Reverse RingIsClockWise Round Second SetGeometry Sin Sort Sqrt Stdev Sum SymmetricDifference Tan Text Timestamp Today ToLocal Top Touches ToUTC TrackCurrentTime TrackGeometryWindow TrackIndex TrackStartTime TrackWindow TypeOf Union UrlEncode Variance Weekday When Within Year "
  };
  const SYMBOL = {
    className: "symbol",
    begin: "\\$[datastore|feature|layer|map|measure|sourcefeature|sourcelayer|targetfeature|targetlayer|value|view]+"
  };
  const NUMBER = {
    className: "number",
    variants: [
      {
        begin: "\\b(0[bB][01]+)"
      },
      {
        begin: "\\b(0[oO][0-7]+)"
      },
      {
        begin: hljs2.C_NUMBER_RE
      }
    ],
    relevance: 0
  };
  const SUBST = {
    className: "subst",
    begin: "\\$\\{",
    end: "\\}",
    keywords: KEYWORDS2,
    contains: []
  };
  const TEMPLATE_STRING = {
    className: "string",
    begin: "`",
    end: "`",
    contains: [
      hljs2.BACKSLASH_ESCAPE,
      SUBST
    ]
  };
  SUBST.contains = [
    hljs2.APOS_STRING_MODE,
    hljs2.QUOTE_STRING_MODE,
    TEMPLATE_STRING,
    NUMBER,
    hljs2.REGEXP_MODE
  ];
  const PARAMS_CONTAINS = SUBST.contains.concat([
    hljs2.C_BLOCK_COMMENT_MODE,
    hljs2.C_LINE_COMMENT_MODE
  ]);
  return {
    name: "ArcGIS Arcade",
    keywords: KEYWORDS2,
    contains: [
      hljs2.APOS_STRING_MODE,
      hljs2.QUOTE_STRING_MODE,
      TEMPLATE_STRING,
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      SYMBOL,
      NUMBER,
      {
        begin: /[{,]\s*/,
        relevance: 0,
        contains: [{
          begin: IDENT_RE2 + "\\s*:",
          returnBegin: true,
          relevance: 0,
          contains: [{
            className: "attr",
            begin: IDENT_RE2,
            relevance: 0
          }]
        }]
      },
      {
        begin: "(" + hljs2.RE_STARTERS_RE + "|\\b(return)\\b)\\s*",
        keywords: "return",
        contains: [
          hljs2.C_LINE_COMMENT_MODE,
          hljs2.C_BLOCK_COMMENT_MODE,
          hljs2.REGEXP_MODE,
          {
            className: "function",
            begin: "(\\(.*?\\)|" + IDENT_RE2 + ")\\s*=>",
            returnBegin: true,
            end: "\\s*=>",
            contains: [{
              className: "params",
              variants: [
                {
                  begin: IDENT_RE2
                },
                {
                  begin: /\(\s*\)/
                },
                {
                  begin: /\(/,
                  end: /\)/,
                  excludeBegin: true,
                  excludeEnd: true,
                  keywords: KEYWORDS2,
                  contains: PARAMS_CONTAINS
                }
              ]
            }]
          }
        ],
        relevance: 0
      },
      {
        className: "function",
        beginKeywords: "function",
        end: /\{/,
        excludeEnd: true,
        contains: [
          hljs2.inherit(hljs2.TITLE_MODE, {
            begin: IDENT_RE2
          }),
          {
            className: "params",
            begin: /\(/,
            end: /\)/,
            excludeBegin: true,
            excludeEnd: true,
            contains: PARAMS_CONTAINS
          }
        ],
        illegal: /\[|%/
      },
      {
        begin: /\$[(.]/
      }
    ],
    illegal: /#(?!!)/
  };
}
var arcade_1 = arcade;
function source$x(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function lookahead$c(re) {
  return concat$w("(?=", re, ")");
}
function optional$8(re) {
  return concat$w("(", re, ")?");
}
function concat$w(...args) {
  const joined = args.map((x2) => source$x(x2)).join("");
  return joined;
}
function cPlusPlus$1(hljs2) {
  const C_LINE_COMMENT_MODE2 = hljs2.COMMENT("//", "$", {
    contains: [
      {
        begin: /\\\n/
      }
    ]
  });
  const DECLTYPE_AUTO_RE = "decltype\\(auto\\)";
  const NAMESPACE_RE = "[a-zA-Z_]\\w*::";
  const TEMPLATE_ARGUMENT_RE = "<[^<>]+>";
  const FUNCTION_TYPE_RE = "(" + DECLTYPE_AUTO_RE + "|" + optional$8(NAMESPACE_RE) + "[a-zA-Z_]\\w*" + optional$8(TEMPLATE_ARGUMENT_RE) + ")";
  const CPP_PRIMITIVE_TYPES = {
    className: "keyword",
    begin: "\\b[a-z\\d_]*_t\\b"
  };
  const CHARACTER_ESCAPES = "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)";
  const STRINGS = {
    className: "string",
    variants: [
      {
        begin: '(u8?|U|L)?"',
        end: '"',
        illegal: "\\n",
        contains: [hljs2.BACKSLASH_ESCAPE]
      },
      {
        begin: "(u8?|U|L)?'(" + CHARACTER_ESCAPES + "|.)",
        end: "'",
        illegal: "."
      },
      hljs2.END_SAME_AS_BEGIN({
        begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
        end: /\)([^()\\ ]{0,16})"/
      })
    ]
  };
  const NUMBERS = {
    className: "number",
    variants: [
      {
        begin: "\\b(0b[01']+)"
      },
      {
        begin: "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)"
      },
      {
        begin: "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)"
      }
    ],
    relevance: 0
  };
  const PREPROCESSOR = {
    className: "meta",
    begin: /#\s*[a-z]+\b/,
    end: /$/,
    keywords: {
      "meta-keyword": "if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include"
    },
    contains: [
      {
        begin: /\\\n/,
        relevance: 0
      },
      hljs2.inherit(STRINGS, {
        className: "meta-string"
      }),
      {
        className: "meta-string",
        begin: /<.*?>/
      },
      C_LINE_COMMENT_MODE2,
      hljs2.C_BLOCK_COMMENT_MODE
    ]
  };
  const TITLE_MODE2 = {
    className: "title",
    begin: optional$8(NAMESPACE_RE) + hljs2.IDENT_RE,
    relevance: 0
  };
  const FUNCTION_TITLE = optional$8(NAMESPACE_RE) + hljs2.IDENT_RE + "\\s*\\(";
  const COMMON_CPP_HINTS = [
    "asin",
    "atan2",
    "atan",
    "calloc",
    "ceil",
    "cosh",
    "cos",
    "exit",
    "exp",
    "fabs",
    "floor",
    "fmod",
    "fprintf",
    "fputs",
    "free",
    "frexp",
    "auto_ptr",
    "deque",
    "list",
    "queue",
    "stack",
    "vector",
    "map",
    "set",
    "pair",
    "bitset",
    "multiset",
    "multimap",
    "unordered_set",
    "fscanf",
    "future",
    "isalnum",
    "isalpha",
    "iscntrl",
    "isdigit",
    "isgraph",
    "islower",
    "isprint",
    "ispunct",
    "isspace",
    "isupper",
    "isxdigit",
    "tolower",
    "toupper",
    "labs",
    "ldexp",
    "log10",
    "log",
    "malloc",
    "realloc",
    "memchr",
    "memcmp",
    "memcpy",
    "memset",
    "modf",
    "pow",
    "printf",
    "putchar",
    "puts",
    "scanf",
    "sinh",
    "sin",
    "snprintf",
    "sprintf",
    "sqrt",
    "sscanf",
    "strcat",
    "strchr",
    "strcmp",
    "strcpy",
    "strcspn",
    "strlen",
    "strncat",
    "strncmp",
    "strncpy",
    "strpbrk",
    "strrchr",
    "strspn",
    "strstr",
    "tanh",
    "tan",
    "unordered_map",
    "unordered_multiset",
    "unordered_multimap",
    "priority_queue",
    "make_pair",
    "array",
    "shared_ptr",
    "abort",
    "terminate",
    "abs",
    "acos",
    "vfprintf",
    "vprintf",
    "vsprintf",
    "endl",
    "initializer_list",
    "unique_ptr",
    "complex",
    "imaginary",
    "std",
    "string",
    "wstring",
    "cin",
    "cout",
    "cerr",
    "clog",
    "stdin",
    "stdout",
    "stderr",
    "stringstream",
    "istringstream",
    "ostringstream"
  ];
  const CPP_KEYWORDS = {
    keyword: "int float while private char char8_t char16_t char32_t catch import module export virtual operator sizeof dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace unsigned long volatile static protected bool template mutable if public friend do goto auto void enum else break extern using asm case typeid wchar_t short reinterpret_cast|10 default double register explicit signed typename try this switch continue inline delete alignas alignof constexpr consteval constinit decltype concept co_await co_return co_yield requires noexcept static_assert thread_local restrict final override atomic_bool atomic_char atomic_schar atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong atomic_ullong new throw return and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq",
    built_in: "_Bool _Complex _Imaginary",
    _relevance_hints: COMMON_CPP_HINTS,
    literal: "true false nullptr NULL"
  };
  const FUNCTION_DISPATCH = {
    className: "function.dispatch",
    relevance: 0,
    keywords: CPP_KEYWORDS,
    begin: concat$w(/\b/, /(?!decltype)/, /(?!if)/, /(?!for)/, /(?!while)/, hljs2.IDENT_RE, lookahead$c(/\s*\(/))
  };
  const EXPRESSION_CONTAINS = [
    FUNCTION_DISPATCH,
    PREPROCESSOR,
    CPP_PRIMITIVE_TYPES,
    C_LINE_COMMENT_MODE2,
    hljs2.C_BLOCK_COMMENT_MODE,
    NUMBERS,
    STRINGS
  ];
  const EXPRESSION_CONTEXT = {
    variants: [
      {
        begin: /=/,
        end: /;/
      },
      {
        begin: /\(/,
        end: /\)/
      },
      {
        beginKeywords: "new throw return else",
        end: /;/
      }
    ],
    keywords: CPP_KEYWORDS,
    contains: EXPRESSION_CONTAINS.concat([
      {
        begin: /\(/,
        end: /\)/,
        keywords: CPP_KEYWORDS,
        contains: EXPRESSION_CONTAINS.concat(["self"]),
        relevance: 0
      }
    ]),
    relevance: 0
  };
  const FUNCTION_DECLARATION = {
    className: "function",
    begin: "(" + FUNCTION_TYPE_RE + "[\\*&\\s]+)+" + FUNCTION_TITLE,
    returnBegin: true,
    end: /[{;=]/,
    excludeEnd: true,
    keywords: CPP_KEYWORDS,
    illegal: /[^\w\s\*&:<>.]/,
    contains: [
      {
        begin: DECLTYPE_AUTO_RE,
        keywords: CPP_KEYWORDS,
        relevance: 0
      },
      {
        begin: FUNCTION_TITLE,
        returnBegin: true,
        contains: [TITLE_MODE2],
        relevance: 0
      },
      {
        begin: /::/,
        relevance: 0
      },
      {
        begin: /:/,
        endsWithParent: true,
        contains: [
          STRINGS,
          NUMBERS
        ]
      },
      {
        className: "params",
        begin: /\(/,
        end: /\)/,
        keywords: CPP_KEYWORDS,
        relevance: 0,
        contains: [
          C_LINE_COMMENT_MODE2,
          hljs2.C_BLOCK_COMMENT_MODE,
          STRINGS,
          NUMBERS,
          CPP_PRIMITIVE_TYPES,
          {
            begin: /\(/,
            end: /\)/,
            keywords: CPP_KEYWORDS,
            relevance: 0,
            contains: [
              "self",
              C_LINE_COMMENT_MODE2,
              hljs2.C_BLOCK_COMMENT_MODE,
              STRINGS,
              NUMBERS,
              CPP_PRIMITIVE_TYPES
            ]
          }
        ]
      },
      CPP_PRIMITIVE_TYPES,
      C_LINE_COMMENT_MODE2,
      hljs2.C_BLOCK_COMMENT_MODE,
      PREPROCESSOR
    ]
  };
  return {
    name: "C++",
    aliases: [
      "cc",
      "c++",
      "h++",
      "hpp",
      "hh",
      "hxx",
      "cxx"
    ],
    keywords: CPP_KEYWORDS,
    illegal: "</",
    classNameAliases: {
      "function.dispatch": "built_in"
    },
    contains: [].concat(EXPRESSION_CONTEXT, FUNCTION_DECLARATION, FUNCTION_DISPATCH, EXPRESSION_CONTAINS, [
      PREPROCESSOR,
      {
        begin: "\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\s*<",
        end: ">",
        keywords: CPP_KEYWORDS,
        contains: [
          "self",
          CPP_PRIMITIVE_TYPES
        ]
      },
      {
        begin: hljs2.IDENT_RE + "::",
        keywords: CPP_KEYWORDS
      },
      {
        className: "class",
        beginKeywords: "enum class struct union",
        end: /[{;:<>=]/,
        contains: [
          {
            beginKeywords: "final class struct"
          },
          hljs2.TITLE_MODE
        ]
      }
    ]),
    exports: {
      preprocessor: PREPROCESSOR,
      strings: STRINGS,
      keywords: CPP_KEYWORDS
    }
  };
}
function arduino(hljs2) {
  const ARDUINO_KW = {
    keyword: "boolean byte word String",
    built_in: "KeyboardController MouseController SoftwareSerial EthernetServer EthernetClient LiquidCrystal RobotControl GSMVoiceCall EthernetUDP EsploraTFT HttpClient RobotMotor WiFiClient GSMScanner FileSystem Scheduler GSMServer YunClient YunServer IPAddress GSMClient GSMModem Keyboard Ethernet Console GSMBand Esplora Stepper Process WiFiUDP GSM_SMS Mailbox USBHost Firmata PImage Client Server GSMPIN FileIO Bridge Serial EEPROM Stream Mouse Audio Servo File Task GPRS WiFi Wire TFT GSM SPI SD ",
    _: "setup loop runShellCommandAsynchronously analogWriteResolution retrieveCallingNumber printFirmwareVersion analogReadResolution sendDigitalPortPair noListenOnLocalhost readJoystickButton setFirmwareVersion readJoystickSwitch scrollDisplayRight getVoiceCallStatus scrollDisplayLeft writeMicroseconds delayMicroseconds beginTransmission getSignalStrength runAsynchronously getAsynchronously listenOnLocalhost getCurrentCarrier readAccelerometer messageAvailable sendDigitalPorts lineFollowConfig countryNameWrite runShellCommand readStringUntil rewindDirectory readTemperature setClockDivider readLightSensor endTransmission analogReference detachInterrupt countryNameRead attachInterrupt encryptionType readBytesUntil robotNameWrite readMicrophone robotNameRead cityNameWrite userNameWrite readJoystickY readJoystickX mouseReleased openNextFile scanNetworks noInterrupts digitalWrite beginSpeaker mousePressed isActionDone mouseDragged displayLogos noAutoscroll addParameter remoteNumber getModifiers keyboardRead userNameRead waitContinue processInput parseCommand printVersion readNetworks writeMessage blinkVersion cityNameRead readMessage setDataMode parsePacket isListening setBitOrder beginPacket isDirectory motorsWrite drawCompass digitalRead clearScreen serialEvent rightToLeft setTextSize leftToRight requestFrom keyReleased compassRead analogWrite interrupts WiFiServer disconnect playMelody parseFloat autoscroll getPINUsed setPINUsed setTimeout sendAnalog readSlider analogRead beginWrite createChar motorsStop keyPressed tempoWrite readButton subnetMask debugPrint macAddress writeGreen randomSeed attachGPRS readString sendString remotePort releaseAll mouseMoved background getXChange getYChange answerCall getResult voiceCall endPacket constrain getSocket writeJSON getButton available connected findUntil readBytes exitValue readGreen writeBlue startLoop IPAddress isPressed sendSysex pauseMode gatewayIP setCursor getOemKey tuneWrite noDisplay loadImage switchPIN onRequest onReceive changePIN playFile noBuffer parseInt overflow checkPIN knobRead beginTFT bitClear updateIR bitWrite position writeRGB highByte writeRed setSpeed readBlue noStroke remoteIP transfer shutdown hangCall beginSMS endWrite attached maintain noCursor checkReg checkPUK shiftOut isValid shiftIn pulseIn connect println localIP pinMode getIMEI display noBlink process getBand running beginSD drawBMP lowByte setBand release bitRead prepare pointTo readRed setMode noFill remove listen stroke detach attach noTone exists buffer height bitSet circle config cursor random IRread setDNS endSMS getKey micros millis begin print write ready flush width isPIN blink clear press mkdir rmdir close point yield image BSSID click delay read text move peek beep rect line open seek fill size turn stop home find step tone sqrt RSSI SSID end bit tan cos sin pow map abs max min get run put",
    literal: "DIGITAL_MESSAGE FIRMATA_STRING ANALOG_MESSAGE REPORT_DIGITAL REPORT_ANALOG INPUT_PULLUP SET_PIN_MODE INTERNAL2V56 SYSTEM_RESET LED_BUILTIN INTERNAL1V1 SYSEX_START INTERNAL EXTERNAL DEFAULT OUTPUT INPUT HIGH LOW"
  };
  const ARDUINO = cPlusPlus$1(hljs2);
  const kws = ARDUINO.keywords;
  kws.keyword += " " + ARDUINO_KW.keyword;
  kws.literal += " " + ARDUINO_KW.literal;
  kws.built_in += " " + ARDUINO_KW.built_in;
  kws._ += " " + ARDUINO_KW._;
  ARDUINO.name = "Arduino";
  ARDUINO.aliases = ["ino"];
  ARDUINO.supersetOf = "cpp";
  return ARDUINO;
}
var arduino_1 = arduino;
function armasm(hljs2) {
  const COMMENT2 = {
    variants: [
      hljs2.COMMENT("^[ \\t]*(?=#)", "$", {
        relevance: 0,
        excludeBegin: true
      }),
      hljs2.COMMENT("[;@]", "$", {
        relevance: 0
      }),
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE
    ]
  };
  return {
    name: "ARM Assembly",
    case_insensitive: true,
    aliases: ["arm"],
    keywords: {
      $pattern: "\\.?" + hljs2.IDENT_RE,
      meta: ".2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .arm .thumb .code16 .code32 .force_thumb .thumb_func .ltorg ALIAS ALIGN ARM AREA ASSERT ATTR CN CODE CODE16 CODE32 COMMON CP DATA DCB DCD DCDU DCDO DCFD DCFDU DCI DCQ DCQU DCW DCWU DN ELIF ELSE END ENDFUNC ENDIF ENDP ENTRY EQU EXPORT EXPORTAS EXTERN FIELD FILL FUNCTION GBLA GBLL GBLS GET GLOBAL IF IMPORT INCBIN INCLUDE INFO KEEP LCLA LCLL LCLS LTORG MACRO MAP MEND MEXIT NOFP OPT PRESERVE8 PROC QN READONLY RELOC REQUIRE REQUIRE8 RLIST FN ROUT SETA SETL SETS SN SPACE SUBT THUMB THUMBX TTL WHILE WEND ",
      built_in: "r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 pc lr sp ip sl sb fp a1 a2 a3 a4 v1 v2 v3 v4 v5 v6 v7 v8 f0 f1 f2 f3 f4 f5 f6 f7 p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 q0 q1 q2 q3 q4 q5 q6 q7 q8 q9 q10 q11 q12 q13 q14 q15 cpsr_c cpsr_x cpsr_s cpsr_f cpsr_cx cpsr_cxs cpsr_xs cpsr_xsf cpsr_sf cpsr_cxsf spsr_c spsr_x spsr_s spsr_f spsr_cx spsr_cxs spsr_xs spsr_xsf spsr_sf spsr_cxsf s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 s23 s24 s25 s26 s27 s28 s29 s30 s31 d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 d10 d11 d12 d13 d14 d15 d16 d17 d18 d19 d20 d21 d22 d23 d24 d25 d26 d27 d28 d29 d30 d31 {PC} {VAR} {TRUE} {FALSE} {OPT} {CONFIG} {ENDIAN} {CODESIZE} {CPU} {FPU} {ARCHITECTURE} {PCSTOREOFFSET} {ARMASM_VERSION} {INTER} {ROPI} {RWPI} {SWST} {NOSWST} . @"
    },
    contains: [
      {
        className: "keyword",
        begin: "\\b(adc|(qd?|sh?|u[qh]?)?add(8|16)?|usada?8|(q|sh?|u[qh]?)?(as|sa)x|and|adrl?|sbc|rs[bc]|asr|b[lx]?|blx|bxj|cbn?z|tb[bh]|bic|bfc|bfi|[su]bfx|bkpt|cdp2?|clz|clrex|cmp|cmn|cpsi[ed]|cps|setend|dbg|dmb|dsb|eor|isb|it[te]{0,3}|lsl|lsr|ror|rrx|ldm(([id][ab])|f[ds])?|ldr((s|ex)?[bhd])?|movt?|mvn|mra|mar|mul|[us]mull|smul[bwt][bt]|smu[as]d|smmul|smmla|mla|umlaal|smlal?([wbt][bt]|d)|mls|smlsl?[ds]|smc|svc|sev|mia([bt]{2}|ph)?|mrr?c2?|mcrr2?|mrs|msr|orr|orn|pkh(tb|bt)|rbit|rev(16|sh)?|sel|[su]sat(16)?|nop|pop|push|rfe([id][ab])?|stm([id][ab])?|str(ex)?[bhd]?|(qd?)?sub|(sh?|q|u[qh]?)?sub(8|16)|[su]xt(a?h|a?b(16)?)|srs([id][ab])?|swpb?|swi|smi|tst|teq|wfe|wfi|yield)(eq|ne|cs|cc|mi|pl|vs|vc|hi|ls|ge|lt|gt|le|al|hs|lo)?[sptrx]?(?=\\s)"
      },
      COMMENT2,
      hljs2.QUOTE_STRING_MODE,
      {
        className: "string",
        begin: "'",
        end: "[^\\\\]'",
        relevance: 0
      },
      {
        className: "title",
        begin: "\\|",
        end: "\\|",
        illegal: "\\n",
        relevance: 0
      },
      {
        className: "number",
        variants: [
          {
            begin: "[#$=]?0x[0-9a-f]+"
          },
          {
            begin: "[#$=]?0b[01]+"
          },
          {
            begin: "[#$=]\\d+"
          },
          {
            begin: "\\b\\d+"
          }
        ],
        relevance: 0
      },
      {
        className: "symbol",
        variants: [
          {
            begin: "^[ \\t]*[a-z_\\.\\$][a-z0-9_\\.\\$]+:"
          },
          {
            begin: "^[a-z_\\.\\$][a-z0-9_\\.\\$]+"
          },
          {
            begin: "[=#]\\w+"
          }
        ],
        relevance: 0
      }
    ]
  };
}
var armasm_1 = armasm;
function source$w(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function lookahead$b(re) {
  return concat$v("(?=", re, ")");
}
function optional$7(re) {
  return concat$v("(", re, ")?");
}
function concat$v(...args) {
  const joined = args.map((x2) => source$w(x2)).join("");
  return joined;
}
function either$a(...args) {
  const joined = "(" + args.map((x2) => source$w(x2)).join("|") + ")";
  return joined;
}
function xml(hljs2) {
  const TAG_NAME_RE = concat$v(/[A-Z_]/, optional$7(/[A-Z0-9_.-]*:/), /[A-Z0-9_.-]*/);
  const XML_IDENT_RE = /[A-Za-z0-9._:-]+/;
  const XML_ENTITIES = {
    className: "symbol",
    begin: /&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/
  };
  const XML_META_KEYWORDS = {
    begin: /\s/,
    contains: [
      {
        className: "meta-keyword",
        begin: /#?[a-z_][a-z1-9_-]+/,
        illegal: /\n/
      }
    ]
  };
  const XML_META_PAR_KEYWORDS = hljs2.inherit(XML_META_KEYWORDS, {
    begin: /\(/,
    end: /\)/
  });
  const APOS_META_STRING_MODE = hljs2.inherit(hljs2.APOS_STRING_MODE, {
    className: "meta-string"
  });
  const QUOTE_META_STRING_MODE = hljs2.inherit(hljs2.QUOTE_STRING_MODE, {
    className: "meta-string"
  });
  const TAG_INTERNALS = {
    endsWithParent: true,
    illegal: /</,
    relevance: 0,
    contains: [
      {
        className: "attr",
        begin: XML_IDENT_RE,
        relevance: 0
      },
      {
        begin: /=\s*/,
        relevance: 0,
        contains: [
          {
            className: "string",
            endsParent: true,
            variants: [
              {
                begin: /"/,
                end: /"/,
                contains: [XML_ENTITIES]
              },
              {
                begin: /'/,
                end: /'/,
                contains: [XML_ENTITIES]
              },
              {
                begin: /[^\s"'=<>`]+/
              }
            ]
          }
        ]
      }
    ]
  };
  return {
    name: "HTML, XML",
    aliases: [
      "html",
      "xhtml",
      "rss",
      "atom",
      "xjb",
      "xsd",
      "xsl",
      "plist",
      "wsf",
      "svg"
    ],
    case_insensitive: true,
    contains: [
      {
        className: "meta",
        begin: /<![a-z]/,
        end: />/,
        relevance: 10,
        contains: [
          XML_META_KEYWORDS,
          QUOTE_META_STRING_MODE,
          APOS_META_STRING_MODE,
          XML_META_PAR_KEYWORDS,
          {
            begin: /\[/,
            end: /\]/,
            contains: [
              {
                className: "meta",
                begin: /<![a-z]/,
                end: />/,
                contains: [
                  XML_META_KEYWORDS,
                  XML_META_PAR_KEYWORDS,
                  QUOTE_META_STRING_MODE,
                  APOS_META_STRING_MODE
                ]
              }
            ]
          }
        ]
      },
      hljs2.COMMENT(/<!--/, /-->/, {
        relevance: 10
      }),
      {
        begin: /<!\[CDATA\[/,
        end: /\]\]>/,
        relevance: 10
      },
      XML_ENTITIES,
      {
        className: "meta",
        begin: /<\?xml/,
        end: /\?>/,
        relevance: 10
      },
      {
        className: "tag",
        begin: /<style(?=\s|>)/,
        end: />/,
        keywords: {
          name: "style"
        },
        contains: [TAG_INTERNALS],
        starts: {
          end: /<\/style>/,
          returnEnd: true,
          subLanguage: [
            "css",
            "xml"
          ]
        }
      },
      {
        className: "tag",
        begin: /<script(?=\s|>)/,
        end: />/,
        keywords: {
          name: "script"
        },
        contains: [TAG_INTERNALS],
        starts: {
          end: /<\/script>/,
          returnEnd: true,
          subLanguage: [
            "javascript",
            "handlebars",
            "xml"
          ]
        }
      },
      {
        className: "tag",
        begin: /<>|<\/>/
      },
      {
        className: "tag",
        begin: concat$v(/</, lookahead$b(concat$v(TAG_NAME_RE, either$a(/\/>/, />/, /\s/)))),
        end: /\/?>/,
        contains: [
          {
            className: "name",
            begin: TAG_NAME_RE,
            relevance: 0,
            starts: TAG_INTERNALS
          }
        ]
      },
      {
        className: "tag",
        begin: concat$v(/<\//, lookahead$b(concat$v(TAG_NAME_RE, />/))),
        contains: [
          {
            className: "name",
            begin: TAG_NAME_RE,
            relevance: 0
          },
          {
            begin: />/,
            relevance: 0,
            endsParent: true
          }
        ]
      }
    ]
  };
}
var xml_1 = xml;
function source$v(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function concat$u(...args) {
  const joined = args.map((x2) => source$v(x2)).join("");
  return joined;
}
function asciidoc(hljs2) {
  const HORIZONTAL_RULE = {
    begin: "^'{3,}[ \\t]*$",
    relevance: 10
  };
  const ESCAPED_FORMATTING = [
    {
      begin: /\\[*_`]/
    },
    {
      begin: /\\\\\*{2}[^\n]*?\*{2}/
    },
    {
      begin: /\\\\_{2}[^\n]*_{2}/
    },
    {
      begin: /\\\\`{2}[^\n]*`{2}/
    },
    {
      begin: /[:;}][*_`](?![*_`])/
    }
  ];
  const STRONG = [
    {
      className: "strong",
      begin: /\*{2}([^\n]+?)\*{2}/
    },
    {
      className: "strong",
      begin: concat$u(/\*\*/, /((\*(?!\*)|\\[^\n]|[^*\n\\])+\n)+/, /(\*(?!\*)|\\[^\n]|[^*\n\\])*/, /\*\*/),
      relevance: 0
    },
    {
      className: "strong",
      begin: /\B\*(\S|\S[^\n]*?\S)\*(?!\w)/
    },
    {
      className: "strong",
      begin: /\*[^\s]([^\n]+\n)+([^\n]+)\*/
    }
  ];
  const EMPHASIS = [
    {
      className: "emphasis",
      begin: /_{2}([^\n]+?)_{2}/
    },
    {
      className: "emphasis",
      begin: concat$u(/__/, /((_(?!_)|\\[^\n]|[^_\n\\])+\n)+/, /(_(?!_)|\\[^\n]|[^_\n\\])*/, /__/),
      relevance: 0
    },
    {
      className: "emphasis",
      begin: /\b_(\S|\S[^\n]*?\S)_(?!\w)/
    },
    {
      className: "emphasis",
      begin: /_[^\s]([^\n]+\n)+([^\n]+)_/
    },
    {
      className: "emphasis",
      begin: "\\B'(?!['\\s])",
      end: "(\\n{2}|')",
      contains: [{
        begin: "\\\\'\\w",
        relevance: 0
      }],
      relevance: 0
    }
  ];
  const ADMONITION = {
    className: "symbol",
    begin: "^(NOTE|TIP|IMPORTANT|WARNING|CAUTION):\\s+",
    relevance: 10
  };
  const BULLET_LIST = {
    className: "bullet",
    begin: "^(\\*+|-+|\\.+|[^\\n]+?::)\\s+"
  };
  return {
    name: "AsciiDoc",
    aliases: ["adoc"],
    contains: [
      hljs2.COMMENT("^/{4,}\\n", "\\n/{4,}$", {
        relevance: 10
      }),
      hljs2.COMMENT("^//", "$", {
        relevance: 0
      }),
      {
        className: "title",
        begin: "^\\.\\w.*$"
      },
      {
        begin: "^[=\\*]{4,}\\n",
        end: "\\n^[=\\*]{4,}$",
        relevance: 10
      },
      {
        className: "section",
        relevance: 10,
        variants: [
          {
            begin: "^(={1,6})[ 	].+?([ 	]\\1)?$"
          },
          {
            begin: "^[^\\[\\]\\n]+?\\n[=\\-~\\^\\+]{2,}$"
          }
        ]
      },
      {
        className: "meta",
        begin: "^:.+?:",
        end: "\\s",
        excludeEnd: true,
        relevance: 10
      },
      {
        className: "meta",
        begin: "^\\[.+?\\]$",
        relevance: 0
      },
      {
        className: "quote",
        begin: "^_{4,}\\n",
        end: "\\n_{4,}$",
        relevance: 10
      },
      {
        className: "code",
        begin: "^[\\-\\.]{4,}\\n",
        end: "\\n[\\-\\.]{4,}$",
        relevance: 10
      },
      {
        begin: "^\\+{4,}\\n",
        end: "\\n\\+{4,}$",
        contains: [{
          begin: "<",
          end: ">",
          subLanguage: "xml",
          relevance: 0
        }],
        relevance: 10
      },
      BULLET_LIST,
      ADMONITION,
      ...ESCAPED_FORMATTING,
      ...STRONG,
      ...EMPHASIS,
      {
        className: "string",
        variants: [
          {
            begin: "``.+?''"
          },
          {
            begin: "`.+?'"
          }
        ]
      },
      {
        className: "code",
        begin: /`{2}/,
        end: /(\n{2}|`{2})/
      },
      {
        className: "code",
        begin: "(`.+?`|\\+.+?\\+)",
        relevance: 0
      },
      {
        className: "code",
        begin: "^[ \\t]",
        end: "$",
        relevance: 0
      },
      HORIZONTAL_RULE,
      {
        begin: "(link:)?(http|https|ftp|file|irc|image:?):\\S+?\\[[^[]*?\\]",
        returnBegin: true,
        contains: [
          {
            begin: "(link|image:?):",
            relevance: 0
          },
          {
            className: "link",
            begin: "\\w",
            end: "[^\\[]+",
            relevance: 0
          },
          {
            className: "string",
            begin: "\\[",
            end: "\\]",
            excludeBegin: true,
            excludeEnd: true,
            relevance: 0
          }
        ],
        relevance: 10
      }
    ]
  };
}
var asciidoc_1 = asciidoc;
function source$u(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function concat$t(...args) {
  const joined = args.map((x2) => source$u(x2)).join("");
  return joined;
}
function aspectj(hljs2) {
  const KEYWORDS2 = "false synchronized int abstract float private char boolean static null if const for true while long throw strictfp finally protected import native final return void enum else extends implements break transient new catch instanceof byte super volatile case assert short package default double public try this switch continue throws privileged aspectOf adviceexecution proceed cflowbelow cflow initialization preinitialization staticinitialization withincode target within execution getWithinTypeName handler thisJoinPoint thisJoinPointStaticPart thisEnclosingJoinPointStaticPart declare parents warning error soft precedence thisAspectInstance";
  const SHORTKEYS = "get set args call";
  return {
    name: "AspectJ",
    keywords: KEYWORDS2,
    illegal: /<\/|#/,
    contains: [
      hljs2.COMMENT(/\/\*\*/, /\*\//, {
        relevance: 0,
        contains: [
          {
            begin: /\w+@/,
            relevance: 0
          },
          {
            className: "doctag",
            begin: /@[A-Za-z]+/
          }
        ]
      }),
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      hljs2.APOS_STRING_MODE,
      hljs2.QUOTE_STRING_MODE,
      {
        className: "class",
        beginKeywords: "aspect",
        end: /[{;=]/,
        excludeEnd: true,
        illegal: /[:;"\[\]]/,
        contains: [
          {
            beginKeywords: "extends implements pertypewithin perthis pertarget percflowbelow percflow issingleton"
          },
          hljs2.UNDERSCORE_TITLE_MODE,
          {
            begin: /\([^\)]*/,
            end: /[)]+/,
            keywords: KEYWORDS2 + " " + SHORTKEYS,
            excludeEnd: false
          }
        ]
      },
      {
        className: "class",
        beginKeywords: "class interface",
        end: /[{;=]/,
        excludeEnd: true,
        relevance: 0,
        keywords: "class interface",
        illegal: /[:"\[\]]/,
        contains: [
          {
            beginKeywords: "extends implements"
          },
          hljs2.UNDERSCORE_TITLE_MODE
        ]
      },
      {
        beginKeywords: "pointcut after before around throwing returning",
        end: /[)]/,
        excludeEnd: false,
        illegal: /["\[\]]/,
        contains: [
          {
            begin: concat$t(hljs2.UNDERSCORE_IDENT_RE, /\s*\(/),
            returnBegin: true,
            contains: [hljs2.UNDERSCORE_TITLE_MODE]
          }
        ]
      },
      {
        begin: /[:]/,
        returnBegin: true,
        end: /[{;]/,
        relevance: 0,
        excludeEnd: false,
        keywords: KEYWORDS2,
        illegal: /["\[\]]/,
        contains: [
          {
            begin: concat$t(hljs2.UNDERSCORE_IDENT_RE, /\s*\(/),
            keywords: KEYWORDS2 + " " + SHORTKEYS,
            relevance: 0
          },
          hljs2.QUOTE_STRING_MODE
        ]
      },
      {
        beginKeywords: "new throw",
        relevance: 0
      },
      {
        className: "function",
        begin: /\w+ +\w+(\.\w+)?\s*\([^\)]*\)\s*((throws)[\w\s,]+)?[\{;]/,
        returnBegin: true,
        end: /[{;=]/,
        keywords: KEYWORDS2,
        excludeEnd: true,
        contains: [
          {
            begin: concat$t(hljs2.UNDERSCORE_IDENT_RE, /\s*\(/),
            returnBegin: true,
            relevance: 0,
            contains: [hljs2.UNDERSCORE_TITLE_MODE]
          },
          {
            className: "params",
            begin: /\(/,
            end: /\)/,
            relevance: 0,
            keywords: KEYWORDS2,
            contains: [
              hljs2.APOS_STRING_MODE,
              hljs2.QUOTE_STRING_MODE,
              hljs2.C_NUMBER_MODE,
              hljs2.C_BLOCK_COMMENT_MODE
            ]
          },
          hljs2.C_LINE_COMMENT_MODE,
          hljs2.C_BLOCK_COMMENT_MODE
        ]
      },
      hljs2.C_NUMBER_MODE,
      {
        className: "meta",
        begin: /@[A-Za-z]+/
      }
    ]
  };
}
var aspectj_1 = aspectj;
function autohotkey(hljs2) {
  const BACKTICK_ESCAPE = {
    begin: "`[\\s\\S]"
  };
  return {
    name: "AutoHotkey",
    case_insensitive: true,
    aliases: ["ahk"],
    keywords: {
      keyword: "Break Continue Critical Exit ExitApp Gosub Goto New OnExit Pause return SetBatchLines SetTimer Suspend Thread Throw Until ahk_id ahk_class ahk_pid ahk_exe ahk_group",
      literal: "true false NOT AND OR",
      built_in: "ComSpec Clipboard ClipboardAll ErrorLevel"
    },
    contains: [
      BACKTICK_ESCAPE,
      hljs2.inherit(hljs2.QUOTE_STRING_MODE, {
        contains: [BACKTICK_ESCAPE]
      }),
      hljs2.COMMENT(";", "$", {
        relevance: 0
      }),
      hljs2.C_BLOCK_COMMENT_MODE,
      {
        className: "number",
        begin: hljs2.NUMBER_RE,
        relevance: 0
      },
      {
        className: "variable",
        begin: "%[a-zA-Z0-9#_$@]+%"
      },
      {
        className: "built_in",
        begin: "^\\s*\\w+\\s*(,|%)"
      },
      {
        className: "title",
        variants: [
          {
            begin: '^[^\\n";]+::(?!=)'
          },
          {
            begin: '^[^\\n";]+:(?!=)',
            relevance: 0
          }
        ]
      },
      {
        className: "meta",
        begin: "^\\s*#\\w+",
        end: "$",
        relevance: 0
      },
      {
        className: "built_in",
        begin: "A_[a-zA-Z0-9]+"
      },
      {
        begin: ",\\s*,"
      }
    ]
  };
}
var autohotkey_1 = autohotkey;
function autoit(hljs2) {
  const KEYWORDS2 = "ByRef Case Const ContinueCase ContinueLoop Dim Do Else ElseIf EndFunc EndIf EndSelect EndSwitch EndWith Enum Exit ExitLoop For Func Global If In Local Next ReDim Return Select Static Step Switch Then To Until Volatile WEnd While With";
  const DIRECTIVES = [
    "EndRegion",
    "forcedef",
    "forceref",
    "ignorefunc",
    "include",
    "include-once",
    "NoTrayIcon",
    "OnAutoItStartRegister",
    "pragma",
    "Region",
    "RequireAdmin",
    "Tidy_Off",
    "Tidy_On",
    "Tidy_Parameters"
  ];
  const LITERAL = "True False And Null Not Or Default";
  const BUILT_IN = "Abs ACos AdlibRegister AdlibUnRegister Asc AscW ASin Assign ATan AutoItSetOption AutoItWinGetTitle AutoItWinSetTitle Beep Binary BinaryLen BinaryMid BinaryToString BitAND BitNOT BitOR BitRotate BitShift BitXOR BlockInput Break Call CDTray Ceiling Chr ChrW ClipGet ClipPut ConsoleRead ConsoleWrite ConsoleWriteError ControlClick ControlCommand ControlDisable ControlEnable ControlFocus ControlGetFocus ControlGetHandle ControlGetPos ControlGetText ControlHide ControlListView ControlMove ControlSend ControlSetText ControlShow ControlTreeView Cos Dec DirCopy DirCreate DirGetSize DirMove DirRemove DllCall DllCallAddress DllCallbackFree DllCallbackGetPtr DllCallbackRegister DllClose DllOpen DllStructCreate DllStructGetData DllStructGetPtr DllStructGetSize DllStructSetData DriveGetDrive DriveGetFileSystem DriveGetLabel DriveGetSerial DriveGetType DriveMapAdd DriveMapDel DriveMapGet DriveSetLabel DriveSpaceFree DriveSpaceTotal DriveStatus EnvGet EnvSet EnvUpdate Eval Execute Exp FileChangeDir FileClose FileCopy FileCreateNTFSLink FileCreateShortcut FileDelete FileExists FileFindFirstFile FileFindNextFile FileFlush FileGetAttrib FileGetEncoding FileGetLongName FileGetPos FileGetShortcut FileGetShortName FileGetSize FileGetTime FileGetVersion FileInstall FileMove FileOpen FileOpenDialog FileRead FileReadLine FileReadToArray FileRecycle FileRecycleEmpty FileSaveDialog FileSelectFolder FileSetAttrib FileSetEnd FileSetPos FileSetTime FileWrite FileWriteLine Floor FtpSetProxy FuncName GUICreate GUICtrlCreateAvi GUICtrlCreateButton GUICtrlCreateCheckbox GUICtrlCreateCombo GUICtrlCreateContextMenu GUICtrlCreateDate GUICtrlCreateDummy GUICtrlCreateEdit GUICtrlCreateGraphic GUICtrlCreateGroup GUICtrlCreateIcon GUICtrlCreateInput GUICtrlCreateLabel GUICtrlCreateList GUICtrlCreateListView GUICtrlCreateListViewItem GUICtrlCreateMenu GUICtrlCreateMenuItem GUICtrlCreateMonthCal GUICtrlCreateObj GUICtrlCreatePic GUICtrlCreateProgress GUICtrlCreateRadio GUICtrlCreateSlider GUICtrlCreateTab GUICtrlCreateTabItem GUICtrlCreateTreeView GUICtrlCreateTreeViewItem GUICtrlCreateUpdown GUICtrlDelete GUICtrlGetHandle GUICtrlGetState GUICtrlRead GUICtrlRecvMsg GUICtrlRegisterListViewSort GUICtrlSendMsg GUICtrlSendToDummy GUICtrlSetBkColor GUICtrlSetColor GUICtrlSetCursor GUICtrlSetData GUICtrlSetDefBkColor GUICtrlSetDefColor GUICtrlSetFont GUICtrlSetGraphic GUICtrlSetImage GUICtrlSetLimit GUICtrlSetOnEvent GUICtrlSetPos GUICtrlSetResizing GUICtrlSetState GUICtrlSetStyle GUICtrlSetTip GUIDelete GUIGetCursorInfo GUIGetMsg GUIGetStyle GUIRegisterMsg GUISetAccelerators GUISetBkColor GUISetCoord GUISetCursor GUISetFont GUISetHelp GUISetIcon GUISetOnEvent GUISetState GUISetStyle GUIStartGroup GUISwitch Hex HotKeySet HttpSetProxy HttpSetUserAgent HWnd InetClose InetGet InetGetInfo InetGetSize InetRead IniDelete IniRead IniReadSection IniReadSectionNames IniRenameSection IniWrite IniWriteSection InputBox Int IsAdmin IsArray IsBinary IsBool IsDeclared IsDllStruct IsFloat IsFunc IsHWnd IsInt IsKeyword IsNumber IsObj IsPtr IsString Log MemGetStats Mod MouseClick MouseClickDrag MouseDown MouseGetCursor MouseGetPos MouseMove MouseUp MouseWheel MsgBox Number ObjCreate ObjCreateInterface ObjEvent ObjGet ObjName OnAutoItExitRegister OnAutoItExitUnRegister Ping PixelChecksum PixelGetColor PixelSearch ProcessClose ProcessExists ProcessGetStats ProcessList ProcessSetPriority ProcessWait ProcessWaitClose ProgressOff ProgressOn ProgressSet Ptr Random RegDelete RegEnumKey RegEnumVal RegRead RegWrite Round Run RunAs RunAsWait RunWait Send SendKeepActive SetError SetExtended ShellExecute ShellExecuteWait Shutdown Sin Sleep SoundPlay SoundSetWaveVolume SplashImageOn SplashOff SplashTextOn Sqrt SRandom StatusbarGetText StderrRead StdinWrite StdioClose StdoutRead String StringAddCR StringCompare StringFormat StringFromASCIIArray StringInStr StringIsAlNum StringIsAlpha StringIsASCII StringIsDigit StringIsFloat StringIsInt StringIsLower StringIsSpace StringIsUpper StringIsXDigit StringLeft StringLen StringLower StringMid StringRegExp StringRegExpReplace StringReplace StringReverse StringRight StringSplit StringStripCR StringStripWS StringToASCIIArray StringToBinary StringTrimLeft StringTrimRight StringUpper Tan TCPAccept TCPCloseSocket TCPConnect TCPListen TCPNameToIP TCPRecv TCPSend TCPShutdown, UDPShutdown TCPStartup, UDPStartup TimerDiff TimerInit ToolTip TrayCreateItem TrayCreateMenu TrayGetMsg TrayItemDelete TrayItemGetHandle TrayItemGetState TrayItemGetText TrayItemSetOnEvent TrayItemSetState TrayItemSetText TraySetClick TraySetIcon TraySetOnEvent TraySetPauseIcon TraySetState TraySetToolTip TrayTip UBound UDPBind UDPCloseSocket UDPOpen UDPRecv UDPSend VarGetType WinActivate WinActive WinClose WinExists WinFlash WinGetCaretPos WinGetClassList WinGetClientSize WinGetHandle WinGetPos WinGetProcess WinGetState WinGetText WinGetTitle WinKill WinList WinMenuSelectItem WinMinimizeAll WinMinimizeAllUndo WinMove WinSetOnTop WinSetState WinSetTitle WinSetTrans WinWait WinWaitActive WinWaitClose WinWaitNotActive";
  const COMMENT2 = {
    variants: [
      hljs2.COMMENT(";", "$", {
        relevance: 0
      }),
      hljs2.COMMENT("#cs", "#ce"),
      hljs2.COMMENT("#comments-start", "#comments-end")
    ]
  };
  const VARIABLE = {
    begin: "\\$[A-z0-9_]+"
  };
  const STRING = {
    className: "string",
    variants: [
      {
        begin: /"/,
        end: /"/,
        contains: [{
          begin: /""/,
          relevance: 0
        }]
      },
      {
        begin: /'/,
        end: /'/,
        contains: [{
          begin: /''/,
          relevance: 0
        }]
      }
    ]
  };
  const NUMBER = {
    variants: [
      hljs2.BINARY_NUMBER_MODE,
      hljs2.C_NUMBER_MODE
    ]
  };
  const PREPROCESSOR = {
    className: "meta",
    begin: "#",
    end: "$",
    keywords: {
      "meta-keyword": DIRECTIVES
    },
    contains: [
      {
        begin: /\\\n/,
        relevance: 0
      },
      {
        beginKeywords: "include",
        keywords: {
          "meta-keyword": "include"
        },
        end: "$",
        contains: [
          STRING,
          {
            className: "meta-string",
            variants: [
              {
                begin: "<",
                end: ">"
              },
              {
                begin: /"/,
                end: /"/,
                contains: [{
                  begin: /""/,
                  relevance: 0
                }]
              },
              {
                begin: /'/,
                end: /'/,
                contains: [{
                  begin: /''/,
                  relevance: 0
                }]
              }
            ]
          }
        ]
      },
      STRING,
      COMMENT2
    ]
  };
  const CONSTANT = {
    className: "symbol",
    begin: "@[A-z0-9_]+"
  };
  const FUNCTION = {
    className: "function",
    beginKeywords: "Func",
    end: "$",
    illegal: "\\$|\\[|%",
    contains: [
      hljs2.UNDERSCORE_TITLE_MODE,
      {
        className: "params",
        begin: "\\(",
        end: "\\)",
        contains: [
          VARIABLE,
          STRING,
          NUMBER
        ]
      }
    ]
  };
  return {
    name: "AutoIt",
    case_insensitive: true,
    illegal: /\/\*/,
    keywords: {
      keyword: KEYWORDS2,
      built_in: BUILT_IN,
      literal: LITERAL
    },
    contains: [
      COMMENT2,
      VARIABLE,
      STRING,
      NUMBER,
      PREPROCESSOR,
      CONSTANT,
      FUNCTION
    ]
  };
}
var autoit_1 = autoit;
function avrasm(hljs2) {
  return {
    name: "AVR Assembly",
    case_insensitive: true,
    keywords: {
      $pattern: "\\.?" + hljs2.IDENT_RE,
      keyword: "adc add adiw and andi asr bclr bld brbc brbs brcc brcs break breq brge brhc brhs brid brie brlo brlt brmi brne brpl brsh brtc brts brvc brvs bset bst call cbi cbr clc clh cli cln clr cls clt clv clz com cp cpc cpi cpse dec eicall eijmp elpm eor fmul fmuls fmulsu icall ijmp in inc jmp ld ldd ldi lds lpm lsl lsr mov movw mul muls mulsu neg nop or ori out pop push rcall ret reti rjmp rol ror sbc sbr sbrc sbrs sec seh sbi sbci sbic sbis sbiw sei sen ser ses set sev sez sleep spm st std sts sub subi swap tst wdr",
      built_in: "r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 x|0 xh xl y|0 yh yl z|0 zh zl ucsr1c udr1 ucsr1a ucsr1b ubrr1l ubrr1h ucsr0c ubrr0h tccr3c tccr3a tccr3b tcnt3h tcnt3l ocr3ah ocr3al ocr3bh ocr3bl ocr3ch ocr3cl icr3h icr3l etimsk etifr tccr1c ocr1ch ocr1cl twcr twdr twar twsr twbr osccal xmcra xmcrb eicra spmcsr spmcr portg ddrg ping portf ddrf sreg sph spl xdiv rampz eicrb eimsk gimsk gicr eifr gifr timsk tifr mcucr mcucsr tccr0 tcnt0 ocr0 assr tccr1a tccr1b tcnt1h tcnt1l ocr1ah ocr1al ocr1bh ocr1bl icr1h icr1l tccr2 tcnt2 ocr2 ocdr wdtcr sfior eearh eearl eedr eecr porta ddra pina portb ddrb pinb portc ddrc pinc portd ddrd pind spdr spsr spcr udr0 ucsr0a ucsr0b ubrr0l acsr admux adcsr adch adcl porte ddre pine pinf",
      meta: ".byte .cseg .db .def .device .dseg .dw .endmacro .equ .eseg .exit .include .list .listmac .macro .nolist .org .set"
    },
    contains: [
      hljs2.C_BLOCK_COMMENT_MODE,
      hljs2.COMMENT(";", "$", {
        relevance: 0
      }),
      hljs2.C_NUMBER_MODE,
      hljs2.BINARY_NUMBER_MODE,
      {
        className: "number",
        begin: "\\b(\\$[a-zA-Z0-9]+|0o[0-7]+)"
      },
      hljs2.QUOTE_STRING_MODE,
      {
        className: "string",
        begin: "'",
        end: "[^\\\\]'",
        illegal: "[^\\\\][^']"
      },
      {
        className: "symbol",
        begin: "^[A-Za-z0-9_.$]+:"
      },
      {
        className: "meta",
        begin: "#",
        end: "$"
      },
      {
        className: "subst",
        begin: "@[0-9]+"
      }
    ]
  };
}
var avrasm_1 = avrasm;
function awk(hljs2) {
  const VARIABLE = {
    className: "variable",
    variants: [
      {
        begin: /\$[\w\d#@][\w\d_]*/
      },
      {
        begin: /\$\{(.*?)\}/
      }
    ]
  };
  const KEYWORDS2 = "BEGIN END if else while do for in break continue delete next nextfile function func exit|10";
  const STRING = {
    className: "string",
    contains: [hljs2.BACKSLASH_ESCAPE],
    variants: [
      {
        begin: /(u|b)?r?'''/,
        end: /'''/,
        relevance: 10
      },
      {
        begin: /(u|b)?r?"""/,
        end: /"""/,
        relevance: 10
      },
      {
        begin: /(u|r|ur)'/,
        end: /'/,
        relevance: 10
      },
      {
        begin: /(u|r|ur)"/,
        end: /"/,
        relevance: 10
      },
      {
        begin: /(b|br)'/,
        end: /'/
      },
      {
        begin: /(b|br)"/,
        end: /"/
      },
      hljs2.APOS_STRING_MODE,
      hljs2.QUOTE_STRING_MODE
    ]
  };
  return {
    name: "Awk",
    keywords: {
      keyword: KEYWORDS2
    },
    contains: [
      VARIABLE,
      STRING,
      hljs2.REGEXP_MODE,
      hljs2.HASH_COMMENT_MODE,
      hljs2.NUMBER_MODE
    ]
  };
}
var awk_1 = awk;
function axapta(hljs2) {
  const BUILT_IN_KEYWORDS = [
    "anytype",
    "boolean",
    "byte",
    "char",
    "container",
    "date",
    "double",
    "enum",
    "guid",
    "int",
    "int64",
    "long",
    "real",
    "short",
    "str",
    "utcdatetime",
    "var"
  ];
  const LITERAL_KEYWORDS = [
    "default",
    "false",
    "null",
    "true"
  ];
  const NORMAL_KEYWORDS = [
    "abstract",
    "as",
    "asc",
    "avg",
    "break",
    "breakpoint",
    "by",
    "byref",
    "case",
    "catch",
    "changecompany",
    "class",
    "client",
    "client",
    "common",
    "const",
    "continue",
    "count",
    "crosscompany",
    "delegate",
    "delete_from",
    "desc",
    "display",
    "div",
    "do",
    "edit",
    "else",
    "eventhandler",
    "exists",
    "extends",
    "final",
    "finally",
    "firstfast",
    "firstonly",
    "firstonly1",
    "firstonly10",
    "firstonly100",
    "firstonly1000",
    "flush",
    "for",
    "forceliterals",
    "forcenestedloop",
    "forceplaceholders",
    "forceselectorder",
    "forupdate",
    "from",
    "generateonly",
    "group",
    "hint",
    "if",
    "implements",
    "in",
    "index",
    "insert_recordset",
    "interface",
    "internal",
    "is",
    "join",
    "like",
    "maxof",
    "minof",
    "mod",
    "namespace",
    "new",
    "next",
    "nofetch",
    "notexists",
    "optimisticlock",
    "order",
    "outer",
    "pessimisticlock",
    "print",
    "private",
    "protected",
    "public",
    "readonly",
    "repeatableread",
    "retry",
    "return",
    "reverse",
    "select",
    "server",
    "setting",
    "static",
    "sum",
    "super",
    "switch",
    "this",
    "throw",
    "try",
    "ttsabort",
    "ttsbegin",
    "ttscommit",
    "unchecked",
    "update_recordset",
    "using",
    "validtimestate",
    "void",
    "where",
    "while"
  ];
  const KEYWORDS2 = {
    keyword: NORMAL_KEYWORDS,
    built_in: BUILT_IN_KEYWORDS,
    literal: LITERAL_KEYWORDS
  };
  return {
    name: "X++",
    aliases: ["x++"],
    keywords: KEYWORDS2,
    contains: [
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      hljs2.APOS_STRING_MODE,
      hljs2.QUOTE_STRING_MODE,
      hljs2.C_NUMBER_MODE,
      {
        className: "meta",
        begin: "#",
        end: "$"
      },
      {
        className: "class",
        beginKeywords: "class interface",
        end: /\{/,
        excludeEnd: true,
        illegal: ":",
        contains: [
          {
            beginKeywords: "extends implements"
          },
          hljs2.UNDERSCORE_TITLE_MODE
        ]
      }
    ]
  };
}
var axapta_1 = axapta;
function source$t(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function concat$s(...args) {
  const joined = args.map((x2) => source$t(x2)).join("");
  return joined;
}
function bash(hljs2) {
  const VAR = {};
  const BRACED_VAR = {
    begin: /\$\{/,
    end: /\}/,
    contains: [
      "self",
      {
        begin: /:-/,
        contains: [VAR]
      }
    ]
  };
  Object.assign(VAR, {
    className: "variable",
    variants: [
      {begin: concat$s(/\$[\w\d#@][\w\d_]*/, `(?![\\w\\d])(?![$])`)},
      BRACED_VAR
    ]
  });
  const SUBST = {
    className: "subst",
    begin: /\$\(/,
    end: /\)/,
    contains: [hljs2.BACKSLASH_ESCAPE]
  };
  const HERE_DOC = {
    begin: /<<-?\s*(?=\w+)/,
    starts: {
      contains: [
        hljs2.END_SAME_AS_BEGIN({
          begin: /(\w+)/,
          end: /(\w+)/,
          className: "string"
        })
      ]
    }
  };
  const QUOTE_STRING = {
    className: "string",
    begin: /"/,
    end: /"/,
    contains: [
      hljs2.BACKSLASH_ESCAPE,
      VAR,
      SUBST
    ]
  };
  SUBST.contains.push(QUOTE_STRING);
  const ESCAPED_QUOTE = {
    className: "",
    begin: /\\"/
  };
  const APOS_STRING = {
    className: "string",
    begin: /'/,
    end: /'/
  };
  const ARITHMETIC = {
    begin: /\$\(\(/,
    end: /\)\)/,
    contains: [
      {begin: /\d+#[0-9a-f]+/, className: "number"},
      hljs2.NUMBER_MODE,
      VAR
    ]
  };
  const SH_LIKE_SHELLS = [
    "fish",
    "bash",
    "zsh",
    "sh",
    "csh",
    "ksh",
    "tcsh",
    "dash",
    "scsh"
  ];
  const KNOWN_SHEBANG = hljs2.SHEBANG({
    binary: `(${SH_LIKE_SHELLS.join("|")})`,
    relevance: 10
  });
  const FUNCTION = {
    className: "function",
    begin: /\w[\w\d_]*\s*\(\s*\)\s*\{/,
    returnBegin: true,
    contains: [hljs2.inherit(hljs2.TITLE_MODE, {begin: /\w[\w\d_]*/})],
    relevance: 0
  };
  return {
    name: "Bash",
    aliases: ["sh", "zsh"],
    keywords: {
      $pattern: /\b[a-z._-]+\b/,
      keyword: "if then else elif fi for while in do done case esac function",
      literal: "true false",
      built_in: "break cd continue eval exec exit export getopts hash pwd readonly return shift test times trap umask unset alias bind builtin caller command declare echo enable help let local logout mapfile printf read readarray source type typeset ulimit unalias set shopt autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate fc fg float functions getcap getln history integer jobs kill limit log noglob popd print pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof zpty zregexparse zsocket zstyle ztcp"
    },
    contains: [
      KNOWN_SHEBANG,
      hljs2.SHEBANG(),
      FUNCTION,
      ARITHMETIC,
      hljs2.HASH_COMMENT_MODE,
      HERE_DOC,
      QUOTE_STRING,
      ESCAPED_QUOTE,
      APOS_STRING,
      VAR
    ]
  };
}
var bash_1 = bash;
function basic(hljs2) {
  return {
    name: "BASIC",
    case_insensitive: true,
    illegal: "^.",
    keywords: {
      $pattern: "[a-zA-Z][a-zA-Z0-9_$%!#]*",
      keyword: "ABS ASC AND ATN AUTO|0 BEEP BLOAD|10 BSAVE|10 CALL CALLS CDBL CHAIN CHDIR CHR$|10 CINT CIRCLE CLEAR CLOSE CLS COLOR COM COMMON CONT COS CSNG CSRLIN CVD CVI CVS DATA DATE$ DEFDBL DEFINT DEFSNG DEFSTR DEF|0 SEG USR DELETE DIM DRAW EDIT END ENVIRON ENVIRON$ EOF EQV ERASE ERDEV ERDEV$ ERL ERR ERROR EXP FIELD FILES FIX FOR|0 FRE GET GOSUB|10 GOTO HEX$ IF THEN ELSE|0 INKEY$ INP INPUT INPUT# INPUT$ INSTR IMP INT IOCTL IOCTL$ KEY ON OFF LIST KILL LEFT$ LEN LET LINE LLIST LOAD LOC LOCATE LOF LOG LPRINT USING LSET MERGE MID$ MKDIR MKD$ MKI$ MKS$ MOD NAME NEW NEXT NOISE NOT OCT$ ON OR PEN PLAY STRIG OPEN OPTION BASE OUT PAINT PALETTE PCOPY PEEK PMAP POINT POKE POS PRINT PRINT] PSET PRESET PUT RANDOMIZE READ REM RENUM RESET|0 RESTORE RESUME RETURN|0 RIGHT$ RMDIR RND RSET RUN SAVE SCREEN SGN SHELL SIN SOUND SPACE$ SPC SQR STEP STICK STOP STR$ STRING$ SWAP SYSTEM TAB TAN TIME$ TIMER TROFF TRON TO USR VAL VARPTR VARPTR$ VIEW WAIT WHILE WEND WIDTH WINDOW WRITE XOR"
    },
    contains: [
      hljs2.QUOTE_STRING_MODE,
      hljs2.COMMENT("REM", "$", {
        relevance: 10
      }),
      hljs2.COMMENT("'", "$", {
        relevance: 0
      }),
      {
        className: "symbol",
        begin: "^[0-9]+ ",
        relevance: 10
      },
      {
        className: "number",
        begin: "\\b\\d+(\\.\\d+)?([edED]\\d+)?[#!]?",
        relevance: 0
      },
      {
        className: "number",
        begin: "(&[hH][0-9a-fA-F]{1,4})"
      },
      {
        className: "number",
        begin: "(&[oO][0-7]{1,6})"
      }
    ]
  };
}
var basic_1 = basic;
function bnf(hljs2) {
  return {
    name: "Backus\u2013Naur Form",
    contains: [
      {
        className: "attribute",
        begin: /</,
        end: />/
      },
      {
        begin: /::=/,
        end: /$/,
        contains: [
          {
            begin: /</,
            end: />/
          },
          hljs2.C_LINE_COMMENT_MODE,
          hljs2.C_BLOCK_COMMENT_MODE,
          hljs2.APOS_STRING_MODE,
          hljs2.QUOTE_STRING_MODE
        ]
      }
    ]
  };
}
var bnf_1 = bnf;
function brainfuck(hljs2) {
  const LITERAL = {
    className: "literal",
    begin: /[+-]/,
    relevance: 0
  };
  return {
    name: "Brainfuck",
    aliases: ["bf"],
    contains: [
      hljs2.COMMENT("[^\\[\\]\\.,\\+\\-<> \r\n]", "[\\[\\]\\.,\\+\\-<> \r\n]", {
        returnEnd: true,
        relevance: 0
      }),
      {
        className: "title",
        begin: "[\\[\\]]",
        relevance: 0
      },
      {
        className: "string",
        begin: "[\\.,]",
        relevance: 0
      },
      {
        begin: /(?:\+\+|--)/,
        contains: [LITERAL]
      },
      LITERAL
    ]
  };
}
var brainfuck_1 = brainfuck;
function source$s(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function lookahead$a(re) {
  return concat$r("(?=", re, ")");
}
function optional$6(re) {
  return concat$r("(", re, ")?");
}
function concat$r(...args) {
  const joined = args.map((x2) => source$s(x2)).join("");
  return joined;
}
function cPlusPlus(hljs2) {
  const C_LINE_COMMENT_MODE2 = hljs2.COMMENT("//", "$", {
    contains: [
      {
        begin: /\\\n/
      }
    ]
  });
  const DECLTYPE_AUTO_RE = "decltype\\(auto\\)";
  const NAMESPACE_RE = "[a-zA-Z_]\\w*::";
  const TEMPLATE_ARGUMENT_RE = "<[^<>]+>";
  const FUNCTION_TYPE_RE = "(" + DECLTYPE_AUTO_RE + "|" + optional$6(NAMESPACE_RE) + "[a-zA-Z_]\\w*" + optional$6(TEMPLATE_ARGUMENT_RE) + ")";
  const CPP_PRIMITIVE_TYPES = {
    className: "keyword",
    begin: "\\b[a-z\\d_]*_t\\b"
  };
  const CHARACTER_ESCAPES = "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)";
  const STRINGS = {
    className: "string",
    variants: [
      {
        begin: '(u8?|U|L)?"',
        end: '"',
        illegal: "\\n",
        contains: [hljs2.BACKSLASH_ESCAPE]
      },
      {
        begin: "(u8?|U|L)?'(" + CHARACTER_ESCAPES + "|.)",
        end: "'",
        illegal: "."
      },
      hljs2.END_SAME_AS_BEGIN({
        begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
        end: /\)([^()\\ ]{0,16})"/
      })
    ]
  };
  const NUMBERS = {
    className: "number",
    variants: [
      {
        begin: "\\b(0b[01']+)"
      },
      {
        begin: "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)"
      },
      {
        begin: "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)"
      }
    ],
    relevance: 0
  };
  const PREPROCESSOR = {
    className: "meta",
    begin: /#\s*[a-z]+\b/,
    end: /$/,
    keywords: {
      "meta-keyword": "if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include"
    },
    contains: [
      {
        begin: /\\\n/,
        relevance: 0
      },
      hljs2.inherit(STRINGS, {
        className: "meta-string"
      }),
      {
        className: "meta-string",
        begin: /<.*?>/
      },
      C_LINE_COMMENT_MODE2,
      hljs2.C_BLOCK_COMMENT_MODE
    ]
  };
  const TITLE_MODE2 = {
    className: "title",
    begin: optional$6(NAMESPACE_RE) + hljs2.IDENT_RE,
    relevance: 0
  };
  const FUNCTION_TITLE = optional$6(NAMESPACE_RE) + hljs2.IDENT_RE + "\\s*\\(";
  const COMMON_CPP_HINTS = [
    "asin",
    "atan2",
    "atan",
    "calloc",
    "ceil",
    "cosh",
    "cos",
    "exit",
    "exp",
    "fabs",
    "floor",
    "fmod",
    "fprintf",
    "fputs",
    "free",
    "frexp",
    "auto_ptr",
    "deque",
    "list",
    "queue",
    "stack",
    "vector",
    "map",
    "set",
    "pair",
    "bitset",
    "multiset",
    "multimap",
    "unordered_set",
    "fscanf",
    "future",
    "isalnum",
    "isalpha",
    "iscntrl",
    "isdigit",
    "isgraph",
    "islower",
    "isprint",
    "ispunct",
    "isspace",
    "isupper",
    "isxdigit",
    "tolower",
    "toupper",
    "labs",
    "ldexp",
    "log10",
    "log",
    "malloc",
    "realloc",
    "memchr",
    "memcmp",
    "memcpy",
    "memset",
    "modf",
    "pow",
    "printf",
    "putchar",
    "puts",
    "scanf",
    "sinh",
    "sin",
    "snprintf",
    "sprintf",
    "sqrt",
    "sscanf",
    "strcat",
    "strchr",
    "strcmp",
    "strcpy",
    "strcspn",
    "strlen",
    "strncat",
    "strncmp",
    "strncpy",
    "strpbrk",
    "strrchr",
    "strspn",
    "strstr",
    "tanh",
    "tan",
    "unordered_map",
    "unordered_multiset",
    "unordered_multimap",
    "priority_queue",
    "make_pair",
    "array",
    "shared_ptr",
    "abort",
    "terminate",
    "abs",
    "acos",
    "vfprintf",
    "vprintf",
    "vsprintf",
    "endl",
    "initializer_list",
    "unique_ptr",
    "complex",
    "imaginary",
    "std",
    "string",
    "wstring",
    "cin",
    "cout",
    "cerr",
    "clog",
    "stdin",
    "stdout",
    "stderr",
    "stringstream",
    "istringstream",
    "ostringstream"
  ];
  const CPP_KEYWORDS = {
    keyword: "int float while private char char8_t char16_t char32_t catch import module export virtual operator sizeof dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace unsigned long volatile static protected bool template mutable if public friend do goto auto void enum else break extern using asm case typeid wchar_t short reinterpret_cast|10 default double register explicit signed typename try this switch continue inline delete alignas alignof constexpr consteval constinit decltype concept co_await co_return co_yield requires noexcept static_assert thread_local restrict final override atomic_bool atomic_char atomic_schar atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong atomic_ullong new throw return and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq",
    built_in: "_Bool _Complex _Imaginary",
    _relevance_hints: COMMON_CPP_HINTS,
    literal: "true false nullptr NULL"
  };
  const FUNCTION_DISPATCH = {
    className: "function.dispatch",
    relevance: 0,
    keywords: CPP_KEYWORDS,
    begin: concat$r(/\b/, /(?!decltype)/, /(?!if)/, /(?!for)/, /(?!while)/, hljs2.IDENT_RE, lookahead$a(/\s*\(/))
  };
  const EXPRESSION_CONTAINS = [
    FUNCTION_DISPATCH,
    PREPROCESSOR,
    CPP_PRIMITIVE_TYPES,
    C_LINE_COMMENT_MODE2,
    hljs2.C_BLOCK_COMMENT_MODE,
    NUMBERS,
    STRINGS
  ];
  const EXPRESSION_CONTEXT = {
    variants: [
      {
        begin: /=/,
        end: /;/
      },
      {
        begin: /\(/,
        end: /\)/
      },
      {
        beginKeywords: "new throw return else",
        end: /;/
      }
    ],
    keywords: CPP_KEYWORDS,
    contains: EXPRESSION_CONTAINS.concat([
      {
        begin: /\(/,
        end: /\)/,
        keywords: CPP_KEYWORDS,
        contains: EXPRESSION_CONTAINS.concat(["self"]),
        relevance: 0
      }
    ]),
    relevance: 0
  };
  const FUNCTION_DECLARATION = {
    className: "function",
    begin: "(" + FUNCTION_TYPE_RE + "[\\*&\\s]+)+" + FUNCTION_TITLE,
    returnBegin: true,
    end: /[{;=]/,
    excludeEnd: true,
    keywords: CPP_KEYWORDS,
    illegal: /[^\w\s\*&:<>.]/,
    contains: [
      {
        begin: DECLTYPE_AUTO_RE,
        keywords: CPP_KEYWORDS,
        relevance: 0
      },
      {
        begin: FUNCTION_TITLE,
        returnBegin: true,
        contains: [TITLE_MODE2],
        relevance: 0
      },
      {
        begin: /::/,
        relevance: 0
      },
      {
        begin: /:/,
        endsWithParent: true,
        contains: [
          STRINGS,
          NUMBERS
        ]
      },
      {
        className: "params",
        begin: /\(/,
        end: /\)/,
        keywords: CPP_KEYWORDS,
        relevance: 0,
        contains: [
          C_LINE_COMMENT_MODE2,
          hljs2.C_BLOCK_COMMENT_MODE,
          STRINGS,
          NUMBERS,
          CPP_PRIMITIVE_TYPES,
          {
            begin: /\(/,
            end: /\)/,
            keywords: CPP_KEYWORDS,
            relevance: 0,
            contains: [
              "self",
              C_LINE_COMMENT_MODE2,
              hljs2.C_BLOCK_COMMENT_MODE,
              STRINGS,
              NUMBERS,
              CPP_PRIMITIVE_TYPES
            ]
          }
        ]
      },
      CPP_PRIMITIVE_TYPES,
      C_LINE_COMMENT_MODE2,
      hljs2.C_BLOCK_COMMENT_MODE,
      PREPROCESSOR
    ]
  };
  return {
    name: "C++",
    aliases: [
      "cc",
      "c++",
      "h++",
      "hpp",
      "hh",
      "hxx",
      "cxx"
    ],
    keywords: CPP_KEYWORDS,
    illegal: "</",
    classNameAliases: {
      "function.dispatch": "built_in"
    },
    contains: [].concat(EXPRESSION_CONTEXT, FUNCTION_DECLARATION, FUNCTION_DISPATCH, EXPRESSION_CONTAINS, [
      PREPROCESSOR,
      {
        begin: "\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\s*<",
        end: ">",
        keywords: CPP_KEYWORDS,
        contains: [
          "self",
          CPP_PRIMITIVE_TYPES
        ]
      },
      {
        begin: hljs2.IDENT_RE + "::",
        keywords: CPP_KEYWORDS
      },
      {
        className: "class",
        beginKeywords: "enum class struct union",
        end: /[{;:<>=]/,
        contains: [
          {
            beginKeywords: "final class struct"
          },
          hljs2.TITLE_MODE
        ]
      }
    ]),
    exports: {
      preprocessor: PREPROCESSOR,
      strings: STRINGS,
      keywords: CPP_KEYWORDS
    }
  };
}
function cLike(hljs2) {
  const lang = cPlusPlus(hljs2);
  const C_ALIASES = [
    "c",
    "h"
  ];
  const CPP_ALIASES = [
    "cc",
    "c++",
    "h++",
    "hpp",
    "hh",
    "hxx",
    "cxx"
  ];
  lang.disableAutodetect = true;
  lang.aliases = [];
  if (!hljs2.getLanguage("c"))
    lang.aliases.push(...C_ALIASES);
  if (!hljs2.getLanguage("cpp"))
    lang.aliases.push(...CPP_ALIASES);
  return lang;
}
var cLike_1 = cLike;
function source$r(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function optional$5(re) {
  return concat$q("(", re, ")?");
}
function concat$q(...args) {
  const joined = args.map((x2) => source$r(x2)).join("");
  return joined;
}
function c$3(hljs2) {
  const C_LINE_COMMENT_MODE2 = hljs2.COMMENT("//", "$", {
    contains: [
      {
        begin: /\\\n/
      }
    ]
  });
  const DECLTYPE_AUTO_RE = "decltype\\(auto\\)";
  const NAMESPACE_RE = "[a-zA-Z_]\\w*::";
  const TEMPLATE_ARGUMENT_RE = "<[^<>]+>";
  const FUNCTION_TYPE_RE = "(" + DECLTYPE_AUTO_RE + "|" + optional$5(NAMESPACE_RE) + "[a-zA-Z_]\\w*" + optional$5(TEMPLATE_ARGUMENT_RE) + ")";
  const CPP_PRIMITIVE_TYPES = {
    className: "keyword",
    begin: "\\b[a-z\\d_]*_t\\b"
  };
  const CHARACTER_ESCAPES = "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)";
  const STRINGS = {
    className: "string",
    variants: [
      {
        begin: '(u8?|U|L)?"',
        end: '"',
        illegal: "\\n",
        contains: [hljs2.BACKSLASH_ESCAPE]
      },
      {
        begin: "(u8?|U|L)?'(" + CHARACTER_ESCAPES + "|.)",
        end: "'",
        illegal: "."
      },
      hljs2.END_SAME_AS_BEGIN({
        begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
        end: /\)([^()\\ ]{0,16})"/
      })
    ]
  };
  const NUMBERS = {
    className: "number",
    variants: [
      {
        begin: "\\b(0b[01']+)"
      },
      {
        begin: "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)"
      },
      {
        begin: "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)"
      }
    ],
    relevance: 0
  };
  const PREPROCESSOR = {
    className: "meta",
    begin: /#\s*[a-z]+\b/,
    end: /$/,
    keywords: {
      "meta-keyword": "if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include"
    },
    contains: [
      {
        begin: /\\\n/,
        relevance: 0
      },
      hljs2.inherit(STRINGS, {
        className: "meta-string"
      }),
      {
        className: "meta-string",
        begin: /<.*?>/
      },
      C_LINE_COMMENT_MODE2,
      hljs2.C_BLOCK_COMMENT_MODE
    ]
  };
  const TITLE_MODE2 = {
    className: "title",
    begin: optional$5(NAMESPACE_RE) + hljs2.IDENT_RE,
    relevance: 0
  };
  const FUNCTION_TITLE = optional$5(NAMESPACE_RE) + hljs2.IDENT_RE + "\\s*\\(";
  const CPP_KEYWORDS = {
    keyword: "int float while private char char8_t char16_t char32_t catch import module export virtual operator sizeof dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace unsigned long volatile static protected bool template mutable if public friend do goto auto void enum else break extern using asm case typeid wchar_t short reinterpret_cast|10 default double register explicit signed typename try this switch continue inline delete alignas alignof constexpr consteval constinit decltype concept co_await co_return co_yield requires noexcept static_assert thread_local restrict final override atomic_bool atomic_char atomic_schar atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong atomic_ullong new throw return and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq",
    built_in: "std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan vfprintf vprintf vsprintf endl initializer_list unique_ptr _Bool complex _Complex imaginary _Imaginary",
    literal: "true false nullptr NULL"
  };
  const EXPRESSION_CONTAINS = [
    PREPROCESSOR,
    CPP_PRIMITIVE_TYPES,
    C_LINE_COMMENT_MODE2,
    hljs2.C_BLOCK_COMMENT_MODE,
    NUMBERS,
    STRINGS
  ];
  const EXPRESSION_CONTEXT = {
    variants: [
      {
        begin: /=/,
        end: /;/
      },
      {
        begin: /\(/,
        end: /\)/
      },
      {
        beginKeywords: "new throw return else",
        end: /;/
      }
    ],
    keywords: CPP_KEYWORDS,
    contains: EXPRESSION_CONTAINS.concat([
      {
        begin: /\(/,
        end: /\)/,
        keywords: CPP_KEYWORDS,
        contains: EXPRESSION_CONTAINS.concat(["self"]),
        relevance: 0
      }
    ]),
    relevance: 0
  };
  const FUNCTION_DECLARATION = {
    className: "function",
    begin: "(" + FUNCTION_TYPE_RE + "[\\*&\\s]+)+" + FUNCTION_TITLE,
    returnBegin: true,
    end: /[{;=]/,
    excludeEnd: true,
    keywords: CPP_KEYWORDS,
    illegal: /[^\w\s\*&:<>.]/,
    contains: [
      {
        begin: DECLTYPE_AUTO_RE,
        keywords: CPP_KEYWORDS,
        relevance: 0
      },
      {
        begin: FUNCTION_TITLE,
        returnBegin: true,
        contains: [TITLE_MODE2],
        relevance: 0
      },
      {
        className: "params",
        begin: /\(/,
        end: /\)/,
        keywords: CPP_KEYWORDS,
        relevance: 0,
        contains: [
          C_LINE_COMMENT_MODE2,
          hljs2.C_BLOCK_COMMENT_MODE,
          STRINGS,
          NUMBERS,
          CPP_PRIMITIVE_TYPES,
          {
            begin: /\(/,
            end: /\)/,
            keywords: CPP_KEYWORDS,
            relevance: 0,
            contains: [
              "self",
              C_LINE_COMMENT_MODE2,
              hljs2.C_BLOCK_COMMENT_MODE,
              STRINGS,
              NUMBERS,
              CPP_PRIMITIVE_TYPES
            ]
          }
        ]
      },
      CPP_PRIMITIVE_TYPES,
      C_LINE_COMMENT_MODE2,
      hljs2.C_BLOCK_COMMENT_MODE,
      PREPROCESSOR
    ]
  };
  return {
    name: "C",
    aliases: [
      "h"
    ],
    keywords: CPP_KEYWORDS,
    disableAutodetect: true,
    illegal: "</",
    contains: [].concat(EXPRESSION_CONTEXT, FUNCTION_DECLARATION, EXPRESSION_CONTAINS, [
      PREPROCESSOR,
      {
        begin: "\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\s*<",
        end: ">",
        keywords: CPP_KEYWORDS,
        contains: [
          "self",
          CPP_PRIMITIVE_TYPES
        ]
      },
      {
        begin: hljs2.IDENT_RE + "::",
        keywords: CPP_KEYWORDS
      },
      {
        className: "class",
        beginKeywords: "enum class struct union",
        end: /[{;:<>=]/,
        contains: [
          {
            beginKeywords: "final class struct"
          },
          hljs2.TITLE_MODE
        ]
      }
    ]),
    exports: {
      preprocessor: PREPROCESSOR,
      strings: STRINGS,
      keywords: CPP_KEYWORDS
    }
  };
}
var c_1 = c$3;
function cal(hljs2) {
  const KEYWORDS2 = "div mod in and or not xor asserterror begin case do downto else end exit for if of repeat then to until while with var";
  const LITERALS2 = "false true";
  const COMMENT_MODES = [
    hljs2.C_LINE_COMMENT_MODE,
    hljs2.COMMENT(/\{/, /\}/, {
      relevance: 0
    }),
    hljs2.COMMENT(/\(\*/, /\*\)/, {
      relevance: 10
    })
  ];
  const STRING = {
    className: "string",
    begin: /'/,
    end: /'/,
    contains: [{
      begin: /''/
    }]
  };
  const CHAR_STRING = {
    className: "string",
    begin: /(#\d+)+/
  };
  const DATE = {
    className: "number",
    begin: "\\b\\d+(\\.\\d+)?(DT|D|T)",
    relevance: 0
  };
  const DBL_QUOTED_VARIABLE = {
    className: "string",
    begin: '"',
    end: '"'
  };
  const PROCEDURE = {
    className: "function",
    beginKeywords: "procedure",
    end: /[:;]/,
    keywords: "procedure|10",
    contains: [
      hljs2.TITLE_MODE,
      {
        className: "params",
        begin: /\(/,
        end: /\)/,
        keywords: KEYWORDS2,
        contains: [
          STRING,
          CHAR_STRING
        ]
      }
    ].concat(COMMENT_MODES)
  };
  const OBJECT = {
    className: "class",
    begin: "OBJECT (Table|Form|Report|Dataport|Codeunit|XMLport|MenuSuite|Page|Query) (\\d+) ([^\\r\\n]+)",
    returnBegin: true,
    contains: [
      hljs2.TITLE_MODE,
      PROCEDURE
    ]
  };
  return {
    name: "C/AL",
    case_insensitive: true,
    keywords: {
      keyword: KEYWORDS2,
      literal: LITERALS2
    },
    illegal: /\/\*/,
    contains: [
      STRING,
      CHAR_STRING,
      DATE,
      DBL_QUOTED_VARIABLE,
      hljs2.NUMBER_MODE,
      OBJECT,
      PROCEDURE
    ]
  };
}
var cal_1 = cal;
function capnproto(hljs2) {
  return {
    name: "Cap\u2019n Proto",
    aliases: ["capnp"],
    keywords: {
      keyword: "struct enum interface union group import using const annotation extends in of on as with from fixed",
      built_in: "Void Bool Int8 Int16 Int32 Int64 UInt8 UInt16 UInt32 UInt64 Float32 Float64 Text Data AnyPointer AnyStruct Capability List",
      literal: "true false"
    },
    contains: [
      hljs2.QUOTE_STRING_MODE,
      hljs2.NUMBER_MODE,
      hljs2.HASH_COMMENT_MODE,
      {
        className: "meta",
        begin: /@0x[\w\d]{16};/,
        illegal: /\n/
      },
      {
        className: "symbol",
        begin: /@\d+\b/
      },
      {
        className: "class",
        beginKeywords: "struct enum",
        end: /\{/,
        illegal: /\n/,
        contains: [hljs2.inherit(hljs2.TITLE_MODE, {
          starts: {
            endsWithParent: true,
            excludeEnd: true
          }
        })]
      },
      {
        className: "class",
        beginKeywords: "interface",
        end: /\{/,
        illegal: /\n/,
        contains: [hljs2.inherit(hljs2.TITLE_MODE, {
          starts: {
            endsWithParent: true,
            excludeEnd: true
          }
        })]
      }
    ]
  };
}
var capnproto_1 = capnproto;
function ceylon(hljs2) {
  const KEYWORDS2 = "assembly module package import alias class interface object given value assign void function new of extends satisfies abstracts in out return break continue throw assert dynamic if else switch case for while try catch finally then let this outer super is exists nonempty";
  const DECLARATION_MODIFIERS = "shared abstract formal default actual variable late native deprecated final sealed annotation suppressWarnings small";
  const DOCUMENTATION = "doc by license see throws tagged";
  const SUBST = {
    className: "subst",
    excludeBegin: true,
    excludeEnd: true,
    begin: /``/,
    end: /``/,
    keywords: KEYWORDS2,
    relevance: 10
  };
  const EXPRESSIONS = [
    {
      className: "string",
      begin: '"""',
      end: '"""',
      relevance: 10
    },
    {
      className: "string",
      begin: '"',
      end: '"',
      contains: [SUBST]
    },
    {
      className: "string",
      begin: "'",
      end: "'"
    },
    {
      className: "number",
      begin: "#[0-9a-fA-F_]+|\\$[01_]+|[0-9_]+(?:\\.[0-9_](?:[eE][+-]?\\d+)?)?[kMGTPmunpf]?",
      relevance: 0
    }
  ];
  SUBST.contains = EXPRESSIONS;
  return {
    name: "Ceylon",
    keywords: {
      keyword: KEYWORDS2 + " " + DECLARATION_MODIFIERS,
      meta: DOCUMENTATION
    },
    illegal: "\\$[^01]|#[^0-9a-fA-F]",
    contains: [
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.COMMENT("/\\*", "\\*/", {
        contains: ["self"]
      }),
      {
        className: "meta",
        begin: '@[a-z]\\w*(?::"[^"]*")?'
      }
    ].concat(EXPRESSIONS)
  };
}
var ceylon_1 = ceylon;
function clean(hljs2) {
  return {
    name: "Clean",
    aliases: [
      "icl",
      "dcl"
    ],
    keywords: {
      keyword: "if let in with where case of class instance otherwise implementation definition system module from import qualified as special code inline foreign export ccall stdcall generic derive infix infixl infixr",
      built_in: "Int Real Char Bool",
      literal: "True False"
    },
    contains: [
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      hljs2.APOS_STRING_MODE,
      hljs2.QUOTE_STRING_MODE,
      hljs2.C_NUMBER_MODE,
      {
        begin: "->|<-[|:]?|#!?|>>=|\\{\\||\\|\\}|:==|=:|<>"
      }
    ]
  };
}
var clean_1 = clean;
function clojure(hljs2) {
  const SYMBOLSTART = "a-zA-Z_\\-!.?+*=<>&#'";
  const SYMBOL_RE = "[" + SYMBOLSTART + "][" + SYMBOLSTART + "0-9/;:]*";
  const globals2 = "def defonce defprotocol defstruct defmulti defmethod defn- defn defmacro deftype defrecord";
  const keywords2 = {
    $pattern: SYMBOL_RE,
    "builtin-name": globals2 + " cond apply if-not if-let if not not= =|0 <|0 >|0 <=|0 >=|0 ==|0 +|0 /|0 *|0 -|0 rem quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last drop-while while intern condp case reduced cycle split-at split-with repeat replicate iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter monitor-exit macroexpand macroexpand-1 for dosync and or when when-not when-let comp juxt partial sequence memoize constantly complement identity assert peek pop doto proxy first rest cons cast coll last butlast sigs reify second ffirst fnext nfirst nnext meta with-meta ns in-ns create-ns import refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize"
  };
  const SIMPLE_NUMBER_RE = "[-+]?\\d+(\\.\\d+)?";
  const SYMBOL = {
    begin: SYMBOL_RE,
    relevance: 0
  };
  const NUMBER = {
    className: "number",
    begin: SIMPLE_NUMBER_RE,
    relevance: 0
  };
  const STRING = hljs2.inherit(hljs2.QUOTE_STRING_MODE, {
    illegal: null
  });
  const COMMENT2 = hljs2.COMMENT(";", "$", {
    relevance: 0
  });
  const LITERAL = {
    className: "literal",
    begin: /\b(true|false|nil)\b/
  };
  const COLLECTION = {
    begin: "[\\[\\{]",
    end: "[\\]\\}]"
  };
  const HINT = {
    className: "comment",
    begin: "\\^" + SYMBOL_RE
  };
  const HINT_COL = hljs2.COMMENT("\\^\\{", "\\}");
  const KEY = {
    className: "symbol",
    begin: "[:]{1,2}" + SYMBOL_RE
  };
  const LIST = {
    begin: "\\(",
    end: "\\)"
  };
  const BODY = {
    endsWithParent: true,
    relevance: 0
  };
  const NAME = {
    keywords: keywords2,
    className: "name",
    begin: SYMBOL_RE,
    relevance: 0,
    starts: BODY
  };
  const DEFAULT_CONTAINS = [
    LIST,
    STRING,
    HINT,
    HINT_COL,
    COMMENT2,
    KEY,
    COLLECTION,
    NUMBER,
    LITERAL,
    SYMBOL
  ];
  const GLOBAL = {
    beginKeywords: globals2,
    lexemes: SYMBOL_RE,
    end: '(\\[|#|\\d|"|:|\\{|\\)|\\(|$)',
    contains: [
      {
        className: "title",
        begin: SYMBOL_RE,
        relevance: 0,
        excludeEnd: true,
        endsParent: true
      }
    ].concat(DEFAULT_CONTAINS)
  };
  LIST.contains = [
    hljs2.COMMENT("comment", ""),
    GLOBAL,
    NAME,
    BODY
  ];
  BODY.contains = DEFAULT_CONTAINS;
  COLLECTION.contains = DEFAULT_CONTAINS;
  HINT_COL.contains = [COLLECTION];
  return {
    name: "Clojure",
    aliases: ["clj"],
    illegal: /\S/,
    contains: [
      LIST,
      STRING,
      HINT,
      HINT_COL,
      COMMENT2,
      KEY,
      COLLECTION,
      NUMBER,
      LITERAL
    ]
  };
}
var clojure_1 = clojure;
function clojureRepl(hljs2) {
  return {
    name: "Clojure REPL",
    contains: [
      {
        className: "meta",
        begin: /^([\w.-]+|\s*#_)?=>/,
        starts: {
          end: /$/,
          subLanguage: "clojure"
        }
      }
    ]
  };
}
var clojureRepl_1 = clojureRepl;
function cmake(hljs2) {
  return {
    name: "CMake",
    aliases: ["cmake.in"],
    case_insensitive: true,
    keywords: {
      keyword: "break cmake_host_system_information cmake_minimum_required cmake_parse_arguments cmake_policy configure_file continue elseif else endforeach endfunction endif endmacro endwhile execute_process file find_file find_library find_package find_path find_program foreach function get_cmake_property get_directory_property get_filename_component get_property if include include_guard list macro mark_as_advanced math message option return separate_arguments set_directory_properties set_property set site_name string unset variable_watch while add_compile_definitions add_compile_options add_custom_command add_custom_target add_definitions add_dependencies add_executable add_library add_link_options add_subdirectory add_test aux_source_directory build_command create_test_sourcelist define_property enable_language enable_testing export fltk_wrap_ui get_source_file_property get_target_property get_test_property include_directories include_external_msproject include_regular_expression install link_directories link_libraries load_cache project qt_wrap_cpp qt_wrap_ui remove_definitions set_source_files_properties set_target_properties set_tests_properties source_group target_compile_definitions target_compile_features target_compile_options target_include_directories target_link_directories target_link_libraries target_link_options target_sources try_compile try_run ctest_build ctest_configure ctest_coverage ctest_empty_binary_directory ctest_memcheck ctest_read_custom_files ctest_run_script ctest_sleep ctest_start ctest_submit ctest_test ctest_update ctest_upload build_name exec_program export_library_dependencies install_files install_programs install_targets load_command make_directory output_required_files remove subdir_depends subdirs use_mangled_mesa utility_source variable_requires write_file qt5_use_modules qt5_use_package qt5_wrap_cpp on off true false and or not command policy target test exists is_newer_than is_directory is_symlink is_absolute matches less greater equal less_equal greater_equal strless strgreater strequal strless_equal strgreater_equal version_less version_greater version_equal version_less_equal version_greater_equal in_list defined"
    },
    contains: [
      {
        className: "variable",
        begin: /\$\{/,
        end: /\}/
      },
      hljs2.HASH_COMMENT_MODE,
      hljs2.QUOTE_STRING_MODE,
      hljs2.NUMBER_MODE
    ]
  };
}
var cmake_1 = cmake;
const KEYWORDS$3 = [
  "as",
  "in",
  "of",
  "if",
  "for",
  "while",
  "finally",
  "var",
  "new",
  "function",
  "do",
  "return",
  "void",
  "else",
  "break",
  "catch",
  "instanceof",
  "with",
  "throw",
  "case",
  "default",
  "try",
  "switch",
  "continue",
  "typeof",
  "delete",
  "let",
  "yield",
  "const",
  "class",
  "debugger",
  "async",
  "await",
  "static",
  "import",
  "from",
  "export",
  "extends"
];
const LITERALS$3 = [
  "true",
  "false",
  "null",
  "undefined",
  "NaN",
  "Infinity"
];
const TYPES$3 = [
  "Intl",
  "DataView",
  "Number",
  "Math",
  "Date",
  "String",
  "RegExp",
  "Object",
  "Function",
  "Boolean",
  "Error",
  "Symbol",
  "Set",
  "Map",
  "WeakSet",
  "WeakMap",
  "Proxy",
  "Reflect",
  "JSON",
  "Promise",
  "Float64Array",
  "Int16Array",
  "Int32Array",
  "Int8Array",
  "Uint16Array",
  "Uint32Array",
  "Float32Array",
  "Array",
  "Uint8Array",
  "Uint8ClampedArray",
  "ArrayBuffer",
  "BigInt64Array",
  "BigUint64Array",
  "BigInt"
];
const ERROR_TYPES$3 = [
  "EvalError",
  "InternalError",
  "RangeError",
  "ReferenceError",
  "SyntaxError",
  "TypeError",
  "URIError"
];
const BUILT_IN_GLOBALS$3 = [
  "setInterval",
  "setTimeout",
  "clearInterval",
  "clearTimeout",
  "require",
  "exports",
  "eval",
  "isFinite",
  "isNaN",
  "parseFloat",
  "parseInt",
  "decodeURI",
  "decodeURIComponent",
  "encodeURI",
  "encodeURIComponent",
  "escape",
  "unescape"
];
const BUILT_IN_VARIABLES$3 = [
  "arguments",
  "this",
  "super",
  "console",
  "window",
  "document",
  "localStorage",
  "module",
  "global"
];
const BUILT_INS$3 = [].concat(BUILT_IN_GLOBALS$3, BUILT_IN_VARIABLES$3, TYPES$3, ERROR_TYPES$3);
function coffeescript(hljs2) {
  const COFFEE_BUILT_INS = [
    "npm",
    "print"
  ];
  const COFFEE_LITERALS = [
    "yes",
    "no",
    "on",
    "off"
  ];
  const COFFEE_KEYWORDS = [
    "then",
    "unless",
    "until",
    "loop",
    "by",
    "when",
    "and",
    "or",
    "is",
    "isnt",
    "not"
  ];
  const NOT_VALID_KEYWORDS = [
    "var",
    "const",
    "let",
    "function",
    "static"
  ];
  const excluding = (list) => (kw) => !list.includes(kw);
  const KEYWORDS$12 = {
    keyword: KEYWORDS$3.concat(COFFEE_KEYWORDS).filter(excluding(NOT_VALID_KEYWORDS)),
    literal: LITERALS$3.concat(COFFEE_LITERALS),
    built_in: BUILT_INS$3.concat(COFFEE_BUILT_INS)
  };
  const JS_IDENT_RE = "[A-Za-z$_][0-9A-Za-z$_]*";
  const SUBST = {
    className: "subst",
    begin: /#\{/,
    end: /\}/,
    keywords: KEYWORDS$12
  };
  const EXPRESSIONS = [
    hljs2.BINARY_NUMBER_MODE,
    hljs2.inherit(hljs2.C_NUMBER_MODE, {
      starts: {
        end: "(\\s*/)?",
        relevance: 0
      }
    }),
    {
      className: "string",
      variants: [
        {
          begin: /'''/,
          end: /'''/,
          contains: [hljs2.BACKSLASH_ESCAPE]
        },
        {
          begin: /'/,
          end: /'/,
          contains: [hljs2.BACKSLASH_ESCAPE]
        },
        {
          begin: /"""/,
          end: /"""/,
          contains: [
            hljs2.BACKSLASH_ESCAPE,
            SUBST
          ]
        },
        {
          begin: /"/,
          end: /"/,
          contains: [
            hljs2.BACKSLASH_ESCAPE,
            SUBST
          ]
        }
      ]
    },
    {
      className: "regexp",
      variants: [
        {
          begin: "///",
          end: "///",
          contains: [
            SUBST,
            hljs2.HASH_COMMENT_MODE
          ]
        },
        {
          begin: "//[gim]{0,3}(?=\\W)",
          relevance: 0
        },
        {
          begin: /\/(?![ *]).*?(?![\\]).\/[gim]{0,3}(?=\W)/
        }
      ]
    },
    {
      begin: "@" + JS_IDENT_RE
    },
    {
      subLanguage: "javascript",
      excludeBegin: true,
      excludeEnd: true,
      variants: [
        {
          begin: "```",
          end: "```"
        },
        {
          begin: "`",
          end: "`"
        }
      ]
    }
  ];
  SUBST.contains = EXPRESSIONS;
  const TITLE = hljs2.inherit(hljs2.TITLE_MODE, {
    begin: JS_IDENT_RE
  });
  const POSSIBLE_PARAMS_RE = "(\\(.*\\)\\s*)?\\B[-=]>";
  const PARAMS = {
    className: "params",
    begin: "\\([^\\(]",
    returnBegin: true,
    contains: [{
      begin: /\(/,
      end: /\)/,
      keywords: KEYWORDS$12,
      contains: ["self"].concat(EXPRESSIONS)
    }]
  };
  return {
    name: "CoffeeScript",
    aliases: [
      "coffee",
      "cson",
      "iced"
    ],
    keywords: KEYWORDS$12,
    illegal: /\/\*/,
    contains: EXPRESSIONS.concat([
      hljs2.COMMENT("###", "###"),
      hljs2.HASH_COMMENT_MODE,
      {
        className: "function",
        begin: "^\\s*" + JS_IDENT_RE + "\\s*=\\s*" + POSSIBLE_PARAMS_RE,
        end: "[-=]>",
        returnBegin: true,
        contains: [
          TITLE,
          PARAMS
        ]
      },
      {
        begin: /[:\(,=]\s*/,
        relevance: 0,
        contains: [{
          className: "function",
          begin: POSSIBLE_PARAMS_RE,
          end: "[-=]>",
          returnBegin: true,
          contains: [PARAMS]
        }]
      },
      {
        className: "class",
        beginKeywords: "class",
        end: "$",
        illegal: /[:="\[\]]/,
        contains: [
          {
            beginKeywords: "extends",
            endsWithParent: true,
            illegal: /[:="\[\]]/,
            contains: [TITLE]
          },
          TITLE
        ]
      },
      {
        begin: JS_IDENT_RE + ":",
        end: ":",
        returnBegin: true,
        returnEnd: true,
        relevance: 0
      }
    ])
  };
}
var coffeescript_1 = coffeescript;
function coq(hljs2) {
  return {
    name: "Coq",
    keywords: {
      keyword: "_|0 as at cofix else end exists exists2 fix for forall fun if IF in let match mod Prop return Set then Type using where with Abort About Add Admit Admitted All Arguments Assumptions Axiom Back BackTo Backtrack Bind Blacklist Canonical Cd Check Class Classes Close Coercion Coercions CoFixpoint CoInductive Collection Combined Compute Conjecture Conjectures Constant constr Constraint Constructors Context Corollary CreateHintDb Cut Declare Defined Definition Delimit Dependencies Dependent Derive Drop eauto End Equality Eval Example Existential Existentials Existing Export exporting Extern Extract Extraction Fact Field Fields File Fixpoint Focus for From Function Functional Generalizable Global Goal Grab Grammar Graph Guarded Heap Hint HintDb Hints Hypotheses Hypothesis ident Identity If Immediate Implicit Import Include Inductive Infix Info Initial Inline Inspect Instance Instances Intro Intros Inversion Inversion_clear Language Left Lemma Let Libraries Library Load LoadPath Local Locate Ltac ML Mode Module Modules Monomorphic Morphism Next NoInline Notation Obligation Obligations Opaque Open Optimize Options Parameter Parameters Parametric Path Paths pattern Polymorphic Preterm Print Printing Program Projections Proof Proposition Pwd Qed Quit Rec Record Recursive Redirect Relation Remark Remove Require Reserved Reset Resolve Restart Rewrite Right Ring Rings Save Scheme Scope Scopes Script Search SearchAbout SearchHead SearchPattern SearchRewrite Section Separate Set Setoid Show Solve Sorted Step Strategies Strategy Structure SubClass Table Tables Tactic Term Test Theorem Time Timeout Transparent Type Typeclasses Types Undelimit Undo Unfocus Unfocused Unfold Universe Universes Unset Unshelve using Variable Variables Variant Verbose Visibility where with",
      built_in: "abstract absurd admit after apply as assert assumption at auto autorewrite autounfold before bottom btauto by case case_eq cbn cbv change classical_left classical_right clear clearbody cofix compare compute congruence constr_eq constructor contradict contradiction cut cutrewrite cycle decide decompose dependent destruct destruction dintuition discriminate discrR do double dtauto eapply eassumption eauto ecase econstructor edestruct ediscriminate eelim eexact eexists einduction einjection eleft elim elimtype enough equality erewrite eright esimplify_eq esplit evar exact exactly_once exfalso exists f_equal fail field field_simplify field_simplify_eq first firstorder fix fold fourier functional generalize generalizing gfail give_up has_evar hnf idtac in induction injection instantiate intro intro_pattern intros intuition inversion inversion_clear is_evar is_var lapply lazy left lia lra move native_compute nia nsatz omega once pattern pose progress proof psatz quote record red refine reflexivity remember rename repeat replace revert revgoals rewrite rewrite_strat right ring ring_simplify rtauto set setoid_reflexivity setoid_replace setoid_rewrite setoid_symmetry setoid_transitivity shelve shelve_unifiable simpl simple simplify_eq solve specialize split split_Rabs split_Rmult stepl stepr subst sum swap symmetry tactic tauto time timeout top transitivity trivial try tryif unfold unify until using vm_compute with"
    },
    contains: [
      hljs2.QUOTE_STRING_MODE,
      hljs2.COMMENT("\\(\\*", "\\*\\)"),
      hljs2.C_NUMBER_MODE,
      {
        className: "type",
        excludeBegin: true,
        begin: "\\|\\s*",
        end: "\\w+"
      },
      {
        begin: /[-=]>/
      }
    ]
  };
}
var coq_1 = coq;
function cos(hljs2) {
  const STRINGS = {
    className: "string",
    variants: [{
      begin: '"',
      end: '"',
      contains: [{
        begin: '""',
        relevance: 0
      }]
    }]
  };
  const NUMBERS = {
    className: "number",
    begin: "\\b(\\d+(\\.\\d*)?|\\.\\d+)",
    relevance: 0
  };
  const COS_KEYWORDS = "property parameter class classmethod clientmethod extends as break catch close continue do d|0 else elseif for goto halt hang h|0 if job j|0 kill k|0 lock l|0 merge new open quit q|0 read r|0 return set s|0 tcommit throw trollback try tstart use view while write w|0 xecute x|0 zkill znspace zn ztrap zwrite zw zzdump zzwrite print zbreak zinsert zload zprint zremove zsave zzprint mv mvcall mvcrt mvdim mvprint zquit zsync ascii";
  return {
    name: "Cach\xE9 Object Script",
    case_insensitive: true,
    aliases: [
      "cls"
    ],
    keywords: COS_KEYWORDS,
    contains: [
      NUMBERS,
      STRINGS,
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      {
        className: "comment",
        begin: /;/,
        end: "$",
        relevance: 0
      },
      {
        className: "built_in",
        begin: /(?:\$\$?|\.\.)\^?[a-zA-Z]+/
      },
      {
        className: "built_in",
        begin: /\$\$\$[a-zA-Z]+/
      },
      {
        className: "built_in",
        begin: /%[a-z]+(?:\.[a-z]+)*/
      },
      {
        className: "symbol",
        begin: /\^%?[a-zA-Z][\w]*/
      },
      {
        className: "keyword",
        begin: /##class|##super|#define|#dim/
      },
      {
        begin: /&sql\(/,
        end: /\)/,
        excludeBegin: true,
        excludeEnd: true,
        subLanguage: "sql"
      },
      {
        begin: /&(js|jscript|javascript)</,
        end: />/,
        excludeBegin: true,
        excludeEnd: true,
        subLanguage: "javascript"
      },
      {
        begin: /&html<\s*</,
        end: />\s*>/,
        subLanguage: "xml"
      }
    ]
  };
}
var cos_1 = cos;
function source$q(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function lookahead$9(re) {
  return concat$p("(?=", re, ")");
}
function optional$4(re) {
  return concat$p("(", re, ")?");
}
function concat$p(...args) {
  const joined = args.map((x2) => source$q(x2)).join("");
  return joined;
}
function cpp(hljs2) {
  const C_LINE_COMMENT_MODE2 = hljs2.COMMENT("//", "$", {
    contains: [
      {
        begin: /\\\n/
      }
    ]
  });
  const DECLTYPE_AUTO_RE = "decltype\\(auto\\)";
  const NAMESPACE_RE = "[a-zA-Z_]\\w*::";
  const TEMPLATE_ARGUMENT_RE = "<[^<>]+>";
  const FUNCTION_TYPE_RE = "(" + DECLTYPE_AUTO_RE + "|" + optional$4(NAMESPACE_RE) + "[a-zA-Z_]\\w*" + optional$4(TEMPLATE_ARGUMENT_RE) + ")";
  const CPP_PRIMITIVE_TYPES = {
    className: "keyword",
    begin: "\\b[a-z\\d_]*_t\\b"
  };
  const CHARACTER_ESCAPES = "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)";
  const STRINGS = {
    className: "string",
    variants: [
      {
        begin: '(u8?|U|L)?"',
        end: '"',
        illegal: "\\n",
        contains: [hljs2.BACKSLASH_ESCAPE]
      },
      {
        begin: "(u8?|U|L)?'(" + CHARACTER_ESCAPES + "|.)",
        end: "'",
        illegal: "."
      },
      hljs2.END_SAME_AS_BEGIN({
        begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
        end: /\)([^()\\ ]{0,16})"/
      })
    ]
  };
  const NUMBERS = {
    className: "number",
    variants: [
      {
        begin: "\\b(0b[01']+)"
      },
      {
        begin: "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)"
      },
      {
        begin: "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)"
      }
    ],
    relevance: 0
  };
  const PREPROCESSOR = {
    className: "meta",
    begin: /#\s*[a-z]+\b/,
    end: /$/,
    keywords: {
      "meta-keyword": "if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include"
    },
    contains: [
      {
        begin: /\\\n/,
        relevance: 0
      },
      hljs2.inherit(STRINGS, {
        className: "meta-string"
      }),
      {
        className: "meta-string",
        begin: /<.*?>/
      },
      C_LINE_COMMENT_MODE2,
      hljs2.C_BLOCK_COMMENT_MODE
    ]
  };
  const TITLE_MODE2 = {
    className: "title",
    begin: optional$4(NAMESPACE_RE) + hljs2.IDENT_RE,
    relevance: 0
  };
  const FUNCTION_TITLE = optional$4(NAMESPACE_RE) + hljs2.IDENT_RE + "\\s*\\(";
  const COMMON_CPP_HINTS = [
    "asin",
    "atan2",
    "atan",
    "calloc",
    "ceil",
    "cosh",
    "cos",
    "exit",
    "exp",
    "fabs",
    "floor",
    "fmod",
    "fprintf",
    "fputs",
    "free",
    "frexp",
    "auto_ptr",
    "deque",
    "list",
    "queue",
    "stack",
    "vector",
    "map",
    "set",
    "pair",
    "bitset",
    "multiset",
    "multimap",
    "unordered_set",
    "fscanf",
    "future",
    "isalnum",
    "isalpha",
    "iscntrl",
    "isdigit",
    "isgraph",
    "islower",
    "isprint",
    "ispunct",
    "isspace",
    "isupper",
    "isxdigit",
    "tolower",
    "toupper",
    "labs",
    "ldexp",
    "log10",
    "log",
    "malloc",
    "realloc",
    "memchr",
    "memcmp",
    "memcpy",
    "memset",
    "modf",
    "pow",
    "printf",
    "putchar",
    "puts",
    "scanf",
    "sinh",
    "sin",
    "snprintf",
    "sprintf",
    "sqrt",
    "sscanf",
    "strcat",
    "strchr",
    "strcmp",
    "strcpy",
    "strcspn",
    "strlen",
    "strncat",
    "strncmp",
    "strncpy",
    "strpbrk",
    "strrchr",
    "strspn",
    "strstr",
    "tanh",
    "tan",
    "unordered_map",
    "unordered_multiset",
    "unordered_multimap",
    "priority_queue",
    "make_pair",
    "array",
    "shared_ptr",
    "abort",
    "terminate",
    "abs",
    "acos",
    "vfprintf",
    "vprintf",
    "vsprintf",
    "endl",
    "initializer_list",
    "unique_ptr",
    "complex",
    "imaginary",
    "std",
    "string",
    "wstring",
    "cin",
    "cout",
    "cerr",
    "clog",
    "stdin",
    "stdout",
    "stderr",
    "stringstream",
    "istringstream",
    "ostringstream"
  ];
  const CPP_KEYWORDS = {
    keyword: "int float while private char char8_t char16_t char32_t catch import module export virtual operator sizeof dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace unsigned long volatile static protected bool template mutable if public friend do goto auto void enum else break extern using asm case typeid wchar_t short reinterpret_cast|10 default double register explicit signed typename try this switch continue inline delete alignas alignof constexpr consteval constinit decltype concept co_await co_return co_yield requires noexcept static_assert thread_local restrict final override atomic_bool atomic_char atomic_schar atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong atomic_ullong new throw return and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq",
    built_in: "_Bool _Complex _Imaginary",
    _relevance_hints: COMMON_CPP_HINTS,
    literal: "true false nullptr NULL"
  };
  const FUNCTION_DISPATCH = {
    className: "function.dispatch",
    relevance: 0,
    keywords: CPP_KEYWORDS,
    begin: concat$p(/\b/, /(?!decltype)/, /(?!if)/, /(?!for)/, /(?!while)/, hljs2.IDENT_RE, lookahead$9(/\s*\(/))
  };
  const EXPRESSION_CONTAINS = [
    FUNCTION_DISPATCH,
    PREPROCESSOR,
    CPP_PRIMITIVE_TYPES,
    C_LINE_COMMENT_MODE2,
    hljs2.C_BLOCK_COMMENT_MODE,
    NUMBERS,
    STRINGS
  ];
  const EXPRESSION_CONTEXT = {
    variants: [
      {
        begin: /=/,
        end: /;/
      },
      {
        begin: /\(/,
        end: /\)/
      },
      {
        beginKeywords: "new throw return else",
        end: /;/
      }
    ],
    keywords: CPP_KEYWORDS,
    contains: EXPRESSION_CONTAINS.concat([
      {
        begin: /\(/,
        end: /\)/,
        keywords: CPP_KEYWORDS,
        contains: EXPRESSION_CONTAINS.concat(["self"]),
        relevance: 0
      }
    ]),
    relevance: 0
  };
  const FUNCTION_DECLARATION = {
    className: "function",
    begin: "(" + FUNCTION_TYPE_RE + "[\\*&\\s]+)+" + FUNCTION_TITLE,
    returnBegin: true,
    end: /[{;=]/,
    excludeEnd: true,
    keywords: CPP_KEYWORDS,
    illegal: /[^\w\s\*&:<>.]/,
    contains: [
      {
        begin: DECLTYPE_AUTO_RE,
        keywords: CPP_KEYWORDS,
        relevance: 0
      },
      {
        begin: FUNCTION_TITLE,
        returnBegin: true,
        contains: [TITLE_MODE2],
        relevance: 0
      },
      {
        begin: /::/,
        relevance: 0
      },
      {
        begin: /:/,
        endsWithParent: true,
        contains: [
          STRINGS,
          NUMBERS
        ]
      },
      {
        className: "params",
        begin: /\(/,
        end: /\)/,
        keywords: CPP_KEYWORDS,
        relevance: 0,
        contains: [
          C_LINE_COMMENT_MODE2,
          hljs2.C_BLOCK_COMMENT_MODE,
          STRINGS,
          NUMBERS,
          CPP_PRIMITIVE_TYPES,
          {
            begin: /\(/,
            end: /\)/,
            keywords: CPP_KEYWORDS,
            relevance: 0,
            contains: [
              "self",
              C_LINE_COMMENT_MODE2,
              hljs2.C_BLOCK_COMMENT_MODE,
              STRINGS,
              NUMBERS,
              CPP_PRIMITIVE_TYPES
            ]
          }
        ]
      },
      CPP_PRIMITIVE_TYPES,
      C_LINE_COMMENT_MODE2,
      hljs2.C_BLOCK_COMMENT_MODE,
      PREPROCESSOR
    ]
  };
  return {
    name: "C++",
    aliases: [
      "cc",
      "c++",
      "h++",
      "hpp",
      "hh",
      "hxx",
      "cxx"
    ],
    keywords: CPP_KEYWORDS,
    illegal: "</",
    classNameAliases: {
      "function.dispatch": "built_in"
    },
    contains: [].concat(EXPRESSION_CONTEXT, FUNCTION_DECLARATION, FUNCTION_DISPATCH, EXPRESSION_CONTAINS, [
      PREPROCESSOR,
      {
        begin: "\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\s*<",
        end: ">",
        keywords: CPP_KEYWORDS,
        contains: [
          "self",
          CPP_PRIMITIVE_TYPES
        ]
      },
      {
        begin: hljs2.IDENT_RE + "::",
        keywords: CPP_KEYWORDS
      },
      {
        className: "class",
        beginKeywords: "enum class struct union",
        end: /[{;:<>=]/,
        contains: [
          {
            beginKeywords: "final class struct"
          },
          hljs2.TITLE_MODE
        ]
      }
    ]),
    exports: {
      preprocessor: PREPROCESSOR,
      strings: STRINGS,
      keywords: CPP_KEYWORDS
    }
  };
}
var cpp_1 = cpp;
function crmsh(hljs2) {
  const RESOURCES = "primitive rsc_template";
  const COMMANDS = "group clone ms master location colocation order fencing_topology rsc_ticket acl_target acl_group user role tag xml";
  const PROPERTY_SETS = "property rsc_defaults op_defaults";
  const KEYWORDS2 = "params meta operations op rule attributes utilization";
  const OPERATORS = "read write deny defined not_defined in_range date spec in ref reference attribute type xpath version and or lt gt tag lte gte eq ne \\";
  const TYPES2 = "number string";
  const LITERALS2 = "Master Started Slave Stopped start promote demote stop monitor true false";
  return {
    name: "crmsh",
    aliases: [
      "crm",
      "pcmk"
    ],
    case_insensitive: true,
    keywords: {
      keyword: KEYWORDS2 + " " + OPERATORS + " " + TYPES2,
      literal: LITERALS2
    },
    contains: [
      hljs2.HASH_COMMENT_MODE,
      {
        beginKeywords: "node",
        starts: {
          end: "\\s*([\\w_-]+:)?",
          starts: {
            className: "title",
            end: "\\s*[\\$\\w_][\\w_-]*"
          }
        }
      },
      {
        beginKeywords: RESOURCES,
        starts: {
          className: "title",
          end: "\\s*[\\$\\w_][\\w_-]*",
          starts: {
            end: "\\s*@?[\\w_][\\w_\\.:-]*"
          }
        }
      },
      {
        begin: "\\b(" + COMMANDS.split(" ").join("|") + ")\\s+",
        keywords: COMMANDS,
        starts: {
          className: "title",
          end: "[\\$\\w_][\\w_-]*"
        }
      },
      {
        beginKeywords: PROPERTY_SETS,
        starts: {
          className: "title",
          end: "\\s*([\\w_-]+:)?"
        }
      },
      hljs2.QUOTE_STRING_MODE,
      {
        className: "meta",
        begin: "(ocf|systemd|service|lsb):[\\w_:-]+",
        relevance: 0
      },
      {
        className: "number",
        begin: "\\b\\d+(\\.\\d+)?(ms|s|h|m)?",
        relevance: 0
      },
      {
        className: "literal",
        begin: "[-]?(infinity|inf)",
        relevance: 0
      },
      {
        className: "attr",
        begin: /([A-Za-z$_#][\w_-]+)=/,
        relevance: 0
      },
      {
        className: "tag",
        begin: "</?",
        end: "/?>",
        relevance: 0
      }
    ]
  };
}
var crmsh_1 = crmsh;
function crystal(hljs2) {
  const INT_SUFFIX = "(_?[ui](8|16|32|64|128))?";
  const FLOAT_SUFFIX = "(_?f(32|64))?";
  const CRYSTAL_IDENT_RE = "[a-zA-Z_]\\w*[!?=]?";
  const CRYSTAL_METHOD_RE = "[a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|[=!]~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~|]|//|//=|&[-+*]=?|&\\*\\*|\\[\\][=?]?";
  const CRYSTAL_PATH_RE = "[A-Za-z_]\\w*(::\\w+)*(\\?|!)?";
  const CRYSTAL_KEYWORDS = {
    $pattern: CRYSTAL_IDENT_RE,
    keyword: "abstract alias annotation as as? asm begin break case class def do else elsif end ensure enum extend for fun if include instance_sizeof is_a? lib macro module next nil? of out pointerof private protected rescue responds_to? return require select self sizeof struct super then type typeof union uninitialized unless until verbatim when while with yield __DIR__ __END_LINE__ __FILE__ __LINE__",
    literal: "false nil true"
  };
  const SUBST = {
    className: "subst",
    begin: /#\{/,
    end: /\}/,
    keywords: CRYSTAL_KEYWORDS
  };
  const EXPANSION = {
    className: "template-variable",
    variants: [
      {
        begin: "\\{\\{",
        end: "\\}\\}"
      },
      {
        begin: "\\{%",
        end: "%\\}"
      }
    ],
    keywords: CRYSTAL_KEYWORDS
  };
  function recursiveParen(begin, end) {
    const contains = [
      {
        begin,
        end
      }
    ];
    contains[0].contains = contains;
    return contains;
  }
  const STRING = {
    className: "string",
    contains: [
      hljs2.BACKSLASH_ESCAPE,
      SUBST
    ],
    variants: [
      {
        begin: /'/,
        end: /'/
      },
      {
        begin: /"/,
        end: /"/
      },
      {
        begin: /`/,
        end: /`/
      },
      {
        begin: "%[Qwi]?\\(",
        end: "\\)",
        contains: recursiveParen("\\(", "\\)")
      },
      {
        begin: "%[Qwi]?\\[",
        end: "\\]",
        contains: recursiveParen("\\[", "\\]")
      },
      {
        begin: "%[Qwi]?\\{",
        end: /\}/,
        contains: recursiveParen(/\{/, /\}/)
      },
      {
        begin: "%[Qwi]?<",
        end: ">",
        contains: recursiveParen("<", ">")
      },
      {
        begin: "%[Qwi]?\\|",
        end: "\\|"
      },
      {
        begin: /<<-\w+$/,
        end: /^\s*\w+$/
      }
    ],
    relevance: 0
  };
  const Q_STRING = {
    className: "string",
    variants: [
      {
        begin: "%q\\(",
        end: "\\)",
        contains: recursiveParen("\\(", "\\)")
      },
      {
        begin: "%q\\[",
        end: "\\]",
        contains: recursiveParen("\\[", "\\]")
      },
      {
        begin: "%q\\{",
        end: /\}/,
        contains: recursiveParen(/\{/, /\}/)
      },
      {
        begin: "%q<",
        end: ">",
        contains: recursiveParen("<", ">")
      },
      {
        begin: "%q\\|",
        end: "\\|"
      },
      {
        begin: /<<-'\w+'$/,
        end: /^\s*\w+$/
      }
    ],
    relevance: 0
  };
  const REGEXP = {
    begin: "(?!%\\})(" + hljs2.RE_STARTERS_RE + "|\\n|\\b(case|if|select|unless|until|when|while)\\b)\\s*",
    keywords: "case if select unless until when while",
    contains: [
      {
        className: "regexp",
        contains: [
          hljs2.BACKSLASH_ESCAPE,
          SUBST
        ],
        variants: [
          {
            begin: "//[a-z]*",
            relevance: 0
          },
          {
            begin: "/(?!\\/)",
            end: "/[a-z]*"
          }
        ]
      }
    ],
    relevance: 0
  };
  const REGEXP2 = {
    className: "regexp",
    contains: [
      hljs2.BACKSLASH_ESCAPE,
      SUBST
    ],
    variants: [
      {
        begin: "%r\\(",
        end: "\\)",
        contains: recursiveParen("\\(", "\\)")
      },
      {
        begin: "%r\\[",
        end: "\\]",
        contains: recursiveParen("\\[", "\\]")
      },
      {
        begin: "%r\\{",
        end: /\}/,
        contains: recursiveParen(/\{/, /\}/)
      },
      {
        begin: "%r<",
        end: ">",
        contains: recursiveParen("<", ">")
      },
      {
        begin: "%r\\|",
        end: "\\|"
      }
    ],
    relevance: 0
  };
  const ATTRIBUTE2 = {
    className: "meta",
    begin: "@\\[",
    end: "\\]",
    contains: [
      hljs2.inherit(hljs2.QUOTE_STRING_MODE, {
        className: "meta-string"
      })
    ]
  };
  const CRYSTAL_DEFAULT_CONTAINS = [
    EXPANSION,
    STRING,
    Q_STRING,
    REGEXP2,
    REGEXP,
    ATTRIBUTE2,
    hljs2.HASH_COMMENT_MODE,
    {
      className: "class",
      beginKeywords: "class module struct",
      end: "$|;",
      illegal: /=/,
      contains: [
        hljs2.HASH_COMMENT_MODE,
        hljs2.inherit(hljs2.TITLE_MODE, {
          begin: CRYSTAL_PATH_RE
        }),
        {
          begin: "<"
        }
      ]
    },
    {
      className: "class",
      beginKeywords: "lib enum union",
      end: "$|;",
      illegal: /=/,
      contains: [
        hljs2.HASH_COMMENT_MODE,
        hljs2.inherit(hljs2.TITLE_MODE, {
          begin: CRYSTAL_PATH_RE
        })
      ]
    },
    {
      beginKeywords: "annotation",
      end: "$|;",
      illegal: /=/,
      contains: [
        hljs2.HASH_COMMENT_MODE,
        hljs2.inherit(hljs2.TITLE_MODE, {
          begin: CRYSTAL_PATH_RE
        })
      ],
      relevance: 2
    },
    {
      className: "function",
      beginKeywords: "def",
      end: /\B\b/,
      contains: [
        hljs2.inherit(hljs2.TITLE_MODE, {
          begin: CRYSTAL_METHOD_RE,
          endsParent: true
        })
      ]
    },
    {
      className: "function",
      beginKeywords: "fun macro",
      end: /\B\b/,
      contains: [
        hljs2.inherit(hljs2.TITLE_MODE, {
          begin: CRYSTAL_METHOD_RE,
          endsParent: true
        })
      ],
      relevance: 2
    },
    {
      className: "symbol",
      begin: hljs2.UNDERSCORE_IDENT_RE + "(!|\\?)?:",
      relevance: 0
    },
    {
      className: "symbol",
      begin: ":",
      contains: [
        STRING,
        {
          begin: CRYSTAL_METHOD_RE
        }
      ],
      relevance: 0
    },
    {
      className: "number",
      variants: [
        {
          begin: "\\b0b([01_]+)" + INT_SUFFIX
        },
        {
          begin: "\\b0o([0-7_]+)" + INT_SUFFIX
        },
        {
          begin: "\\b0x([A-Fa-f0-9_]+)" + INT_SUFFIX
        },
        {
          begin: "\\b([1-9][0-9_]*[0-9]|[0-9])(\\.[0-9][0-9_]*)?([eE]_?[-+]?[0-9_]*)?" + FLOAT_SUFFIX + "(?!_)"
        },
        {
          begin: "\\b([1-9][0-9_]*|0)" + INT_SUFFIX
        }
      ],
      relevance: 0
    }
  ];
  SUBST.contains = CRYSTAL_DEFAULT_CONTAINS;
  EXPANSION.contains = CRYSTAL_DEFAULT_CONTAINS.slice(1);
  return {
    name: "Crystal",
    aliases: ["cr"],
    keywords: CRYSTAL_KEYWORDS,
    contains: CRYSTAL_DEFAULT_CONTAINS
  };
}
var crystal_1 = crystal;
function csharp(hljs2) {
  const BUILT_IN_KEYWORDS = [
    "bool",
    "byte",
    "char",
    "decimal",
    "delegate",
    "double",
    "dynamic",
    "enum",
    "float",
    "int",
    "long",
    "nint",
    "nuint",
    "object",
    "sbyte",
    "short",
    "string",
    "ulong",
    "uint",
    "ushort"
  ];
  const FUNCTION_MODIFIERS = [
    "public",
    "private",
    "protected",
    "static",
    "internal",
    "protected",
    "abstract",
    "async",
    "extern",
    "override",
    "unsafe",
    "virtual",
    "new",
    "sealed",
    "partial"
  ];
  const LITERAL_KEYWORDS = [
    "default",
    "false",
    "null",
    "true"
  ];
  const NORMAL_KEYWORDS = [
    "abstract",
    "as",
    "base",
    "break",
    "case",
    "class",
    "const",
    "continue",
    "do",
    "else",
    "event",
    "explicit",
    "extern",
    "finally",
    "fixed",
    "for",
    "foreach",
    "goto",
    "if",
    "implicit",
    "in",
    "interface",
    "internal",
    "is",
    "lock",
    "namespace",
    "new",
    "operator",
    "out",
    "override",
    "params",
    "private",
    "protected",
    "public",
    "readonly",
    "record",
    "ref",
    "return",
    "sealed",
    "sizeof",
    "stackalloc",
    "static",
    "struct",
    "switch",
    "this",
    "throw",
    "try",
    "typeof",
    "unchecked",
    "unsafe",
    "using",
    "virtual",
    "void",
    "volatile",
    "while"
  ];
  const CONTEXTUAL_KEYWORDS = [
    "add",
    "alias",
    "and",
    "ascending",
    "async",
    "await",
    "by",
    "descending",
    "equals",
    "from",
    "get",
    "global",
    "group",
    "init",
    "into",
    "join",
    "let",
    "nameof",
    "not",
    "notnull",
    "on",
    "or",
    "orderby",
    "partial",
    "remove",
    "select",
    "set",
    "unmanaged",
    "value|0",
    "var",
    "when",
    "where",
    "with",
    "yield"
  ];
  const KEYWORDS2 = {
    keyword: NORMAL_KEYWORDS.concat(CONTEXTUAL_KEYWORDS),
    built_in: BUILT_IN_KEYWORDS,
    literal: LITERAL_KEYWORDS
  };
  const TITLE_MODE2 = hljs2.inherit(hljs2.TITLE_MODE, {
    begin: "[a-zA-Z](\\.?\\w)*"
  });
  const NUMBERS = {
    className: "number",
    variants: [
      {
        begin: "\\b(0b[01']+)"
      },
      {
        begin: "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)(u|U|l|L|ul|UL|f|F|b|B)"
      },
      {
        begin: "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)"
      }
    ],
    relevance: 0
  };
  const VERBATIM_STRING = {
    className: "string",
    begin: '@"',
    end: '"',
    contains: [
      {
        begin: '""'
      }
    ]
  };
  const VERBATIM_STRING_NO_LF = hljs2.inherit(VERBATIM_STRING, {
    illegal: /\n/
  });
  const SUBST = {
    className: "subst",
    begin: /\{/,
    end: /\}/,
    keywords: KEYWORDS2
  };
  const SUBST_NO_LF = hljs2.inherit(SUBST, {
    illegal: /\n/
  });
  const INTERPOLATED_STRING = {
    className: "string",
    begin: /\$"/,
    end: '"',
    illegal: /\n/,
    contains: [
      {
        begin: /\{\{/
      },
      {
        begin: /\}\}/
      },
      hljs2.BACKSLASH_ESCAPE,
      SUBST_NO_LF
    ]
  };
  const INTERPOLATED_VERBATIM_STRING = {
    className: "string",
    begin: /\$@"/,
    end: '"',
    contains: [
      {
        begin: /\{\{/
      },
      {
        begin: /\}\}/
      },
      {
        begin: '""'
      },
      SUBST
    ]
  };
  const INTERPOLATED_VERBATIM_STRING_NO_LF = hljs2.inherit(INTERPOLATED_VERBATIM_STRING, {
    illegal: /\n/,
    contains: [
      {
        begin: /\{\{/
      },
      {
        begin: /\}\}/
      },
      {
        begin: '""'
      },
      SUBST_NO_LF
    ]
  });
  SUBST.contains = [
    INTERPOLATED_VERBATIM_STRING,
    INTERPOLATED_STRING,
    VERBATIM_STRING,
    hljs2.APOS_STRING_MODE,
    hljs2.QUOTE_STRING_MODE,
    NUMBERS,
    hljs2.C_BLOCK_COMMENT_MODE
  ];
  SUBST_NO_LF.contains = [
    INTERPOLATED_VERBATIM_STRING_NO_LF,
    INTERPOLATED_STRING,
    VERBATIM_STRING_NO_LF,
    hljs2.APOS_STRING_MODE,
    hljs2.QUOTE_STRING_MODE,
    NUMBERS,
    hljs2.inherit(hljs2.C_BLOCK_COMMENT_MODE, {
      illegal: /\n/
    })
  ];
  const STRING = {
    variants: [
      INTERPOLATED_VERBATIM_STRING,
      INTERPOLATED_STRING,
      VERBATIM_STRING,
      hljs2.APOS_STRING_MODE,
      hljs2.QUOTE_STRING_MODE
    ]
  };
  const GENERIC_MODIFIER = {
    begin: "<",
    end: ">",
    contains: [
      {
        beginKeywords: "in out"
      },
      TITLE_MODE2
    ]
  };
  const TYPE_IDENT_RE = hljs2.IDENT_RE + "(<" + hljs2.IDENT_RE + "(\\s*,\\s*" + hljs2.IDENT_RE + ")*>)?(\\[\\])?";
  const AT_IDENTIFIER = {
    begin: "@" + hljs2.IDENT_RE,
    relevance: 0
  };
  return {
    name: "C#",
    aliases: [
      "cs",
      "c#"
    ],
    keywords: KEYWORDS2,
    illegal: /::/,
    contains: [
      hljs2.COMMENT("///", "$", {
        returnBegin: true,
        contains: [
          {
            className: "doctag",
            variants: [
              {
                begin: "///",
                relevance: 0
              },
              {
                begin: "<!--|-->"
              },
              {
                begin: "</?",
                end: ">"
              }
            ]
          }
        ]
      }),
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      {
        className: "meta",
        begin: "#",
        end: "$",
        keywords: {
          "meta-keyword": "if else elif endif define undef warning error line region endregion pragma checksum"
        }
      },
      STRING,
      NUMBERS,
      {
        beginKeywords: "class interface",
        relevance: 0,
        end: /[{;=]/,
        illegal: /[^\s:,]/,
        contains: [
          {
            beginKeywords: "where class"
          },
          TITLE_MODE2,
          GENERIC_MODIFIER,
          hljs2.C_LINE_COMMENT_MODE,
          hljs2.C_BLOCK_COMMENT_MODE
        ]
      },
      {
        beginKeywords: "namespace",
        relevance: 0,
        end: /[{;=]/,
        illegal: /[^\s:]/,
        contains: [
          TITLE_MODE2,
          hljs2.C_LINE_COMMENT_MODE,
          hljs2.C_BLOCK_COMMENT_MODE
        ]
      },
      {
        beginKeywords: "record",
        relevance: 0,
        end: /[{;=]/,
        illegal: /[^\s:]/,
        contains: [
          TITLE_MODE2,
          GENERIC_MODIFIER,
          hljs2.C_LINE_COMMENT_MODE,
          hljs2.C_BLOCK_COMMENT_MODE
        ]
      },
      {
        className: "meta",
        begin: "^\\s*\\[",
        excludeBegin: true,
        end: "\\]",
        excludeEnd: true,
        contains: [
          {
            className: "meta-string",
            begin: /"/,
            end: /"/
          }
        ]
      },
      {
        beginKeywords: "new return throw await else",
        relevance: 0
      },
      {
        className: "function",
        begin: "(" + TYPE_IDENT_RE + "\\s+)+" + hljs2.IDENT_RE + "\\s*(<.+>\\s*)?\\(",
        returnBegin: true,
        end: /\s*[{;=]/,
        excludeEnd: true,
        keywords: KEYWORDS2,
        contains: [
          {
            beginKeywords: FUNCTION_MODIFIERS.join(" "),
            relevance: 0
          },
          {
            begin: hljs2.IDENT_RE + "\\s*(<.+>\\s*)?\\(",
            returnBegin: true,
            contains: [
              hljs2.TITLE_MODE,
              GENERIC_MODIFIER
            ],
            relevance: 0
          },
          {
            className: "params",
            begin: /\(/,
            end: /\)/,
            excludeBegin: true,
            excludeEnd: true,
            keywords: KEYWORDS2,
            relevance: 0,
            contains: [
              STRING,
              NUMBERS,
              hljs2.C_BLOCK_COMMENT_MODE
            ]
          },
          hljs2.C_LINE_COMMENT_MODE,
          hljs2.C_BLOCK_COMMENT_MODE
        ]
      },
      AT_IDENTIFIER
    ]
  };
}
var csharp_1 = csharp;
function csp(hljs2) {
  return {
    name: "CSP",
    case_insensitive: false,
    keywords: {
      $pattern: "[a-zA-Z][a-zA-Z0-9_-]*",
      keyword: "base-uri child-src connect-src default-src font-src form-action frame-ancestors frame-src img-src media-src object-src plugin-types report-uri sandbox script-src style-src"
    },
    contains: [
      {
        className: "string",
        begin: "'",
        end: "'"
      },
      {
        className: "attribute",
        begin: "^Content",
        end: ":",
        excludeEnd: true
      }
    ]
  };
}
var csp_1 = csp;
const MODES$3 = (hljs2) => {
  return {
    IMPORTANT: {
      className: "meta",
      begin: "!important"
    },
    HEXCOLOR: {
      className: "number",
      begin: "#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})"
    },
    ATTRIBUTE_SELECTOR_MODE: {
      className: "selector-attr",
      begin: /\[/,
      end: /\]/,
      illegal: "$",
      contains: [
        hljs2.APOS_STRING_MODE,
        hljs2.QUOTE_STRING_MODE
      ]
    }
  };
};
const TAGS$3 = [
  "a",
  "abbr",
  "address",
  "article",
  "aside",
  "audio",
  "b",
  "blockquote",
  "body",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "dd",
  "del",
  "details",
  "dfn",
  "div",
  "dl",
  "dt",
  "em",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "header",
  "hgroup",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "label",
  "legend",
  "li",
  "main",
  "mark",
  "menu",
  "nav",
  "object",
  "ol",
  "p",
  "q",
  "quote",
  "samp",
  "section",
  "span",
  "strong",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "tr",
  "ul",
  "var",
  "video"
];
const MEDIA_FEATURES$3 = [
  "any-hover",
  "any-pointer",
  "aspect-ratio",
  "color",
  "color-gamut",
  "color-index",
  "device-aspect-ratio",
  "device-height",
  "device-width",
  "display-mode",
  "forced-colors",
  "grid",
  "height",
  "hover",
  "inverted-colors",
  "monochrome",
  "orientation",
  "overflow-block",
  "overflow-inline",
  "pointer",
  "prefers-color-scheme",
  "prefers-contrast",
  "prefers-reduced-motion",
  "prefers-reduced-transparency",
  "resolution",
  "scan",
  "scripting",
  "update",
  "width",
  "min-width",
  "max-width",
  "min-height",
  "max-height"
];
const PSEUDO_CLASSES$3 = [
  "active",
  "any-link",
  "blank",
  "checked",
  "current",
  "default",
  "defined",
  "dir",
  "disabled",
  "drop",
  "empty",
  "enabled",
  "first",
  "first-child",
  "first-of-type",
  "fullscreen",
  "future",
  "focus",
  "focus-visible",
  "focus-within",
  "has",
  "host",
  "host-context",
  "hover",
  "indeterminate",
  "in-range",
  "invalid",
  "is",
  "lang",
  "last-child",
  "last-of-type",
  "left",
  "link",
  "local-link",
  "not",
  "nth-child",
  "nth-col",
  "nth-last-child",
  "nth-last-col",
  "nth-last-of-type",
  "nth-of-type",
  "only-child",
  "only-of-type",
  "optional",
  "out-of-range",
  "past",
  "placeholder-shown",
  "read-only",
  "read-write",
  "required",
  "right",
  "root",
  "scope",
  "target",
  "target-within",
  "user-invalid",
  "valid",
  "visited",
  "where"
];
const PSEUDO_ELEMENTS$3 = [
  "after",
  "backdrop",
  "before",
  "cue",
  "cue-region",
  "first-letter",
  "first-line",
  "grammar-error",
  "marker",
  "part",
  "placeholder",
  "selection",
  "slotted",
  "spelling-error"
];
const ATTRIBUTES$3 = [
  "align-content",
  "align-items",
  "align-self",
  "animation",
  "animation-delay",
  "animation-direction",
  "animation-duration",
  "animation-fill-mode",
  "animation-iteration-count",
  "animation-name",
  "animation-play-state",
  "animation-timing-function",
  "auto",
  "backface-visibility",
  "background",
  "background-attachment",
  "background-clip",
  "background-color",
  "background-image",
  "background-origin",
  "background-position",
  "background-repeat",
  "background-size",
  "border",
  "border-bottom",
  "border-bottom-color",
  "border-bottom-left-radius",
  "border-bottom-right-radius",
  "border-bottom-style",
  "border-bottom-width",
  "border-collapse",
  "border-color",
  "border-image",
  "border-image-outset",
  "border-image-repeat",
  "border-image-slice",
  "border-image-source",
  "border-image-width",
  "border-left",
  "border-left-color",
  "border-left-style",
  "border-left-width",
  "border-radius",
  "border-right",
  "border-right-color",
  "border-right-style",
  "border-right-width",
  "border-spacing",
  "border-style",
  "border-top",
  "border-top-color",
  "border-top-left-radius",
  "border-top-right-radius",
  "border-top-style",
  "border-top-width",
  "border-width",
  "bottom",
  "box-decoration-break",
  "box-shadow",
  "box-sizing",
  "break-after",
  "break-before",
  "break-inside",
  "caption-side",
  "clear",
  "clip",
  "clip-path",
  "color",
  "column-count",
  "column-fill",
  "column-gap",
  "column-rule",
  "column-rule-color",
  "column-rule-style",
  "column-rule-width",
  "column-span",
  "column-width",
  "columns",
  "content",
  "counter-increment",
  "counter-reset",
  "cursor",
  "direction",
  "display",
  "empty-cells",
  "filter",
  "flex",
  "flex-basis",
  "flex-direction",
  "flex-flow",
  "flex-grow",
  "flex-shrink",
  "flex-wrap",
  "float",
  "font",
  "font-display",
  "font-family",
  "font-feature-settings",
  "font-kerning",
  "font-language-override",
  "font-size",
  "font-size-adjust",
  "font-smoothing",
  "font-stretch",
  "font-style",
  "font-variant",
  "font-variant-ligatures",
  "font-variation-settings",
  "font-weight",
  "height",
  "hyphens",
  "icon",
  "image-orientation",
  "image-rendering",
  "image-resolution",
  "ime-mode",
  "inherit",
  "initial",
  "justify-content",
  "left",
  "letter-spacing",
  "line-height",
  "list-style",
  "list-style-image",
  "list-style-position",
  "list-style-type",
  "margin",
  "margin-bottom",
  "margin-left",
  "margin-right",
  "margin-top",
  "marks",
  "mask",
  "max-height",
  "max-width",
  "min-height",
  "min-width",
  "nav-down",
  "nav-index",
  "nav-left",
  "nav-right",
  "nav-up",
  "none",
  "normal",
  "object-fit",
  "object-position",
  "opacity",
  "order",
  "orphans",
  "outline",
  "outline-color",
  "outline-offset",
  "outline-style",
  "outline-width",
  "overflow",
  "overflow-wrap",
  "overflow-x",
  "overflow-y",
  "padding",
  "padding-bottom",
  "padding-left",
  "padding-right",
  "padding-top",
  "page-break-after",
  "page-break-before",
  "page-break-inside",
  "perspective",
  "perspective-origin",
  "pointer-events",
  "position",
  "quotes",
  "resize",
  "right",
  "src",
  "tab-size",
  "table-layout",
  "text-align",
  "text-align-last",
  "text-decoration",
  "text-decoration-color",
  "text-decoration-line",
  "text-decoration-style",
  "text-indent",
  "text-overflow",
  "text-rendering",
  "text-shadow",
  "text-transform",
  "text-underline-position",
  "top",
  "transform",
  "transform-origin",
  "transform-style",
  "transition",
  "transition-delay",
  "transition-duration",
  "transition-property",
  "transition-timing-function",
  "unicode-bidi",
  "vertical-align",
  "visibility",
  "white-space",
  "widows",
  "width",
  "word-break",
  "word-spacing",
  "word-wrap",
  "z-index"
].reverse();
function source$p(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function lookahead$8(re) {
  return concat$o("(?=", re, ")");
}
function concat$o(...args) {
  const joined = args.map((x2) => source$p(x2)).join("");
  return joined;
}
function css(hljs2) {
  const modes = MODES$3(hljs2);
  const FUNCTION_DISPATCH = {
    className: "built_in",
    begin: /[\w-]+(?=\()/
  };
  const VENDOR_PREFIX = {
    begin: /-(webkit|moz|ms|o)-(?=[a-z])/
  };
  const AT_MODIFIERS = "and or not only";
  const AT_PROPERTY_RE = /@-?\w[\w]*(-\w+)*/;
  const IDENT_RE2 = "[a-zA-Z-][a-zA-Z0-9_-]*";
  const STRINGS = [
    hljs2.APOS_STRING_MODE,
    hljs2.QUOTE_STRING_MODE
  ];
  return {
    name: "CSS",
    case_insensitive: true,
    illegal: /[=|'\$]/,
    keywords: {
      keyframePosition: "from to"
    },
    classNameAliases: {
      keyframePosition: "selector-tag"
    },
    contains: [
      hljs2.C_BLOCK_COMMENT_MODE,
      VENDOR_PREFIX,
      hljs2.CSS_NUMBER_MODE,
      {
        className: "selector-id",
        begin: /#[A-Za-z0-9_-]+/,
        relevance: 0
      },
      {
        className: "selector-class",
        begin: "\\." + IDENT_RE2,
        relevance: 0
      },
      modes.ATTRIBUTE_SELECTOR_MODE,
      {
        className: "selector-pseudo",
        variants: [
          {
            begin: ":(" + PSEUDO_CLASSES$3.join("|") + ")"
          },
          {
            begin: "::(" + PSEUDO_ELEMENTS$3.join("|") + ")"
          }
        ]
      },
      {
        className: "attribute",
        begin: "\\b(" + ATTRIBUTES$3.join("|") + ")\\b"
      },
      {
        begin: ":",
        end: "[;}]",
        contains: [
          modes.HEXCOLOR,
          modes.IMPORTANT,
          hljs2.CSS_NUMBER_MODE,
          ...STRINGS,
          {
            begin: /(url|data-uri)\(/,
            end: /\)/,
            relevance: 0,
            keywords: {
              built_in: "url data-uri"
            },
            contains: [
              {
                className: "string",
                begin: /[^)]/,
                endsWithParent: true,
                excludeEnd: true
              }
            ]
          },
          FUNCTION_DISPATCH
        ]
      },
      {
        begin: lookahead$8(/@/),
        end: "[{;]",
        relevance: 0,
        illegal: /:/,
        contains: [
          {
            className: "keyword",
            begin: AT_PROPERTY_RE
          },
          {
            begin: /\s/,
            endsWithParent: true,
            excludeEnd: true,
            relevance: 0,
            keywords: {
              $pattern: /[a-z-]+/,
              keyword: AT_MODIFIERS,
              attribute: MEDIA_FEATURES$3.join(" ")
            },
            contains: [
              {
                begin: /[a-z-]+(?=:)/,
                className: "attribute"
              },
              ...STRINGS,
              hljs2.CSS_NUMBER_MODE
            ]
          }
        ]
      },
      {
        className: "selector-tag",
        begin: "\\b(" + TAGS$3.join("|") + ")\\b"
      }
    ]
  };
}
var css_1 = css;
function d$2(hljs2) {
  const D_KEYWORDS = {
    $pattern: hljs2.UNDERSCORE_IDENT_RE,
    keyword: "abstract alias align asm assert auto body break byte case cast catch class const continue debug default delete deprecated do else enum export extern final finally for foreach foreach_reverse|10 goto if immutable import in inout int interface invariant is lazy macro mixin module new nothrow out override package pragma private protected public pure ref return scope shared static struct super switch synchronized template this throw try typedef typeid typeof union unittest version void volatile while with __FILE__ __LINE__ __gshared|10 __thread __traits __DATE__ __EOF__ __TIME__ __TIMESTAMP__ __VENDOR__ __VERSION__",
    built_in: "bool cdouble cent cfloat char creal dchar delegate double dstring float function idouble ifloat ireal long real short string ubyte ucent uint ulong ushort wchar wstring",
    literal: "false null true"
  };
  const decimal_integer_re = "(0|[1-9][\\d_]*)";
  const decimal_integer_nosus_re = "(0|[1-9][\\d_]*|\\d[\\d_]*|[\\d_]+?\\d)";
  const binary_integer_re = "0[bB][01_]+";
  const hexadecimal_digits_re = "([\\da-fA-F][\\da-fA-F_]*|_[\\da-fA-F][\\da-fA-F_]*)";
  const hexadecimal_integer_re = "0[xX]" + hexadecimal_digits_re;
  const decimal_exponent_re = "([eE][+-]?" + decimal_integer_nosus_re + ")";
  const decimal_float_re = "(" + decimal_integer_nosus_re + "(\\.\\d*|" + decimal_exponent_re + ")|\\d+\\." + decimal_integer_nosus_re + "|\\." + decimal_integer_re + decimal_exponent_re + "?)";
  const hexadecimal_float_re = "(0[xX](" + hexadecimal_digits_re + "\\." + hexadecimal_digits_re + "|\\.?" + hexadecimal_digits_re + ")[pP][+-]?" + decimal_integer_nosus_re + ")";
  const integer_re = "(" + decimal_integer_re + "|" + binary_integer_re + "|" + hexadecimal_integer_re + ")";
  const float_re = "(" + hexadecimal_float_re + "|" + decimal_float_re + ")";
  const escape_sequence_re = `\\\\(['"\\?\\\\abfnrtv]|u[\\dA-Fa-f]{4}|[0-7]{1,3}|x[\\dA-Fa-f]{2}|U[\\dA-Fa-f]{8})|&[a-zA-Z\\d]{2,};`;
  const D_INTEGER_MODE = {
    className: "number",
    begin: "\\b" + integer_re + "(L|u|U|Lu|LU|uL|UL)?",
    relevance: 0
  };
  const D_FLOAT_MODE = {
    className: "number",
    begin: "\\b(" + float_re + "([fF]|L|i|[fF]i|Li)?|" + integer_re + "(i|[fF]i|Li))",
    relevance: 0
  };
  const D_CHARACTER_MODE = {
    className: "string",
    begin: "'(" + escape_sequence_re + "|.)",
    end: "'",
    illegal: "."
  };
  const D_ESCAPE_SEQUENCE = {
    begin: escape_sequence_re,
    relevance: 0
  };
  const D_STRING_MODE = {
    className: "string",
    begin: '"',
    contains: [D_ESCAPE_SEQUENCE],
    end: '"[cwd]?'
  };
  const D_WYSIWYG_DELIMITED_STRING_MODE = {
    className: "string",
    begin: '[rq]"',
    end: '"[cwd]?',
    relevance: 5
  };
  const D_ALTERNATE_WYSIWYG_STRING_MODE = {
    className: "string",
    begin: "`",
    end: "`[cwd]?"
  };
  const D_HEX_STRING_MODE = {
    className: "string",
    begin: 'x"[\\da-fA-F\\s\\n\\r]*"[cwd]?',
    relevance: 10
  };
  const D_TOKEN_STRING_MODE = {
    className: "string",
    begin: 'q"\\{',
    end: '\\}"'
  };
  const D_HASHBANG_MODE = {
    className: "meta",
    begin: "^#!",
    end: "$",
    relevance: 5
  };
  const D_SPECIAL_TOKEN_SEQUENCE_MODE = {
    className: "meta",
    begin: "#(line)",
    end: "$",
    relevance: 5
  };
  const D_ATTRIBUTE_MODE = {
    className: "keyword",
    begin: "@[a-zA-Z_][a-zA-Z_\\d]*"
  };
  const D_NESTING_COMMENT_MODE = hljs2.COMMENT("\\/\\+", "\\+\\/", {
    contains: ["self"],
    relevance: 10
  });
  return {
    name: "D",
    keywords: D_KEYWORDS,
    contains: [
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      D_NESTING_COMMENT_MODE,
      D_HEX_STRING_MODE,
      D_STRING_MODE,
      D_WYSIWYG_DELIMITED_STRING_MODE,
      D_ALTERNATE_WYSIWYG_STRING_MODE,
      D_TOKEN_STRING_MODE,
      D_FLOAT_MODE,
      D_INTEGER_MODE,
      D_CHARACTER_MODE,
      D_HASHBANG_MODE,
      D_SPECIAL_TOKEN_SEQUENCE_MODE,
      D_ATTRIBUTE_MODE
    ]
  };
}
var d_1 = d$2;
function source$o(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function concat$n(...args) {
  const joined = args.map((x2) => source$o(x2)).join("");
  return joined;
}
function markdown(hljs2) {
  const INLINE_HTML = {
    begin: /<\/?[A-Za-z_]/,
    end: ">",
    subLanguage: "xml",
    relevance: 0
  };
  const HORIZONTAL_RULE = {
    begin: "^[-\\*]{3,}",
    end: "$"
  };
  const CODE = {
    className: "code",
    variants: [
      {
        begin: "(`{3,})[^`](.|\\n)*?\\1`*[ ]*"
      },
      {
        begin: "(~{3,})[^~](.|\\n)*?\\1~*[ ]*"
      },
      {
        begin: "```",
        end: "```+[ ]*$"
      },
      {
        begin: "~~~",
        end: "~~~+[ ]*$"
      },
      {
        begin: "`.+?`"
      },
      {
        begin: "(?=^( {4}|\\t))",
        contains: [
          {
            begin: "^( {4}|\\t)",
            end: "(\\n)$"
          }
        ],
        relevance: 0
      }
    ]
  };
  const LIST = {
    className: "bullet",
    begin: "^[ 	]*([*+-]|(\\d+\\.))(?=\\s+)",
    end: "\\s+",
    excludeEnd: true
  };
  const LINK_REFERENCE = {
    begin: /^\[[^\n]+\]:/,
    returnBegin: true,
    contains: [
      {
        className: "symbol",
        begin: /\[/,
        end: /\]/,
        excludeBegin: true,
        excludeEnd: true
      },
      {
        className: "link",
        begin: /:\s*/,
        end: /$/,
        excludeBegin: true
      }
    ]
  };
  const URL_SCHEME = /[A-Za-z][A-Za-z0-9+.-]*/;
  const LINK = {
    variants: [
      {
        begin: /\[.+?\]\[.*?\]/,
        relevance: 0
      },
      {
        begin: /\[.+?\]\(((data|javascript|mailto):|(?:http|ftp)s?:\/\/).*?\)/,
        relevance: 2
      },
      {
        begin: concat$n(/\[.+?\]\(/, URL_SCHEME, /:\/\/.*?\)/),
        relevance: 2
      },
      {
        begin: /\[.+?\]\([./?&#].*?\)/,
        relevance: 1
      },
      {
        begin: /\[.+?\]\(.*?\)/,
        relevance: 0
      }
    ],
    returnBegin: true,
    contains: [
      {
        className: "string",
        relevance: 0,
        begin: "\\[",
        end: "\\]",
        excludeBegin: true,
        returnEnd: true
      },
      {
        className: "link",
        relevance: 0,
        begin: "\\]\\(",
        end: "\\)",
        excludeBegin: true,
        excludeEnd: true
      },
      {
        className: "symbol",
        relevance: 0,
        begin: "\\]\\[",
        end: "\\]",
        excludeBegin: true,
        excludeEnd: true
      }
    ]
  };
  const BOLD = {
    className: "strong",
    contains: [],
    variants: [
      {
        begin: /_{2}/,
        end: /_{2}/
      },
      {
        begin: /\*{2}/,
        end: /\*{2}/
      }
    ]
  };
  const ITALIC = {
    className: "emphasis",
    contains: [],
    variants: [
      {
        begin: /\*(?!\*)/,
        end: /\*/
      },
      {
        begin: /_(?!_)/,
        end: /_/,
        relevance: 0
      }
    ]
  };
  BOLD.contains.push(ITALIC);
  ITALIC.contains.push(BOLD);
  let CONTAINABLE = [
    INLINE_HTML,
    LINK
  ];
  BOLD.contains = BOLD.contains.concat(CONTAINABLE);
  ITALIC.contains = ITALIC.contains.concat(CONTAINABLE);
  CONTAINABLE = CONTAINABLE.concat(BOLD, ITALIC);
  const HEADER = {
    className: "section",
    variants: [
      {
        begin: "^#{1,6}",
        end: "$",
        contains: CONTAINABLE
      },
      {
        begin: "(?=^.+?\\n[=-]{2,}$)",
        contains: [
          {
            begin: "^[=-]*$"
          },
          {
            begin: "^",
            end: "\\n",
            contains: CONTAINABLE
          }
        ]
      }
    ]
  };
  const BLOCKQUOTE = {
    className: "quote",
    begin: "^>\\s+",
    contains: CONTAINABLE,
    end: "$"
  };
  return {
    name: "Markdown",
    aliases: [
      "md",
      "mkdown",
      "mkd"
    ],
    contains: [
      HEADER,
      INLINE_HTML,
      LIST,
      BOLD,
      ITALIC,
      BLOCKQUOTE,
      CODE,
      HORIZONTAL_RULE,
      LINK,
      LINK_REFERENCE
    ]
  };
}
var markdown_1 = markdown;
function dart(hljs2) {
  const SUBST = {
    className: "subst",
    variants: [{
      begin: "\\$[A-Za-z0-9_]+"
    }]
  };
  const BRACED_SUBST = {
    className: "subst",
    variants: [{
      begin: /\$\{/,
      end: /\}/
    }],
    keywords: "true false null this is new super"
  };
  const STRING = {
    className: "string",
    variants: [
      {
        begin: "r'''",
        end: "'''"
      },
      {
        begin: 'r"""',
        end: '"""'
      },
      {
        begin: "r'",
        end: "'",
        illegal: "\\n"
      },
      {
        begin: 'r"',
        end: '"',
        illegal: "\\n"
      },
      {
        begin: "'''",
        end: "'''",
        contains: [
          hljs2.BACKSLASH_ESCAPE,
          SUBST,
          BRACED_SUBST
        ]
      },
      {
        begin: '"""',
        end: '"""',
        contains: [
          hljs2.BACKSLASH_ESCAPE,
          SUBST,
          BRACED_SUBST
        ]
      },
      {
        begin: "'",
        end: "'",
        illegal: "\\n",
        contains: [
          hljs2.BACKSLASH_ESCAPE,
          SUBST,
          BRACED_SUBST
        ]
      },
      {
        begin: '"',
        end: '"',
        illegal: "\\n",
        contains: [
          hljs2.BACKSLASH_ESCAPE,
          SUBST,
          BRACED_SUBST
        ]
      }
    ]
  };
  BRACED_SUBST.contains = [
    hljs2.C_NUMBER_MODE,
    STRING
  ];
  const BUILT_IN_TYPES = [
    "Comparable",
    "DateTime",
    "Duration",
    "Function",
    "Iterable",
    "Iterator",
    "List",
    "Map",
    "Match",
    "Object",
    "Pattern",
    "RegExp",
    "Set",
    "Stopwatch",
    "String",
    "StringBuffer",
    "StringSink",
    "Symbol",
    "Type",
    "Uri",
    "bool",
    "double",
    "int",
    "num",
    "Element",
    "ElementList"
  ];
  const NULLABLE_BUILT_IN_TYPES = BUILT_IN_TYPES.map((e2) => `${e2}?`);
  const KEYWORDS2 = {
    keyword: "abstract as assert async await break case catch class const continue covariant default deferred do dynamic else enum export extends extension external factory false final finally for Function get hide if implements import in inferface is late library mixin new null on operator part required rethrow return set show static super switch sync this throw true try typedef var void while with yield",
    built_in: BUILT_IN_TYPES.concat(NULLABLE_BUILT_IN_TYPES).concat([
      "Never",
      "Null",
      "dynamic",
      "print",
      "document",
      "querySelector",
      "querySelectorAll",
      "window"
    ]),
    $pattern: /[A-Za-z][A-Za-z0-9_]*\??/
  };
  return {
    name: "Dart",
    keywords: KEYWORDS2,
    contains: [
      STRING,
      hljs2.COMMENT(/\/\*\*(?!\/)/, /\*\//, {
        subLanguage: "markdown",
        relevance: 0
      }),
      hljs2.COMMENT(/\/{3,} ?/, /$/, {
        contains: [{
          subLanguage: "markdown",
          begin: ".",
          end: "$",
          relevance: 0
        }]
      }),
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      {
        className: "class",
        beginKeywords: "class interface",
        end: /\{/,
        excludeEnd: true,
        contains: [
          {
            beginKeywords: "extends implements"
          },
          hljs2.UNDERSCORE_TITLE_MODE
        ]
      },
      hljs2.C_NUMBER_MODE,
      {
        className: "meta",
        begin: "@[A-Za-z]+"
      },
      {
        begin: "=>"
      }
    ]
  };
}
var dart_1 = dart;
function delphi(hljs2) {
  const KEYWORDS2 = "exports register file shl array record property for mod while set ally label uses raise not stored class safecall var interface or private static exit index inherited to else stdcall override shr asm far resourcestring finalization packed virtual out and protected library do xorwrite goto near function end div overload object unit begin string on inline repeat until destructor write message program with read initialization except default nil if case cdecl in downto threadvar of try pascal const external constructor type public then implementation finally published procedure absolute reintroduce operator as is abstract alias assembler bitpacked break continue cppdecl cvar enumerator experimental platform deprecated unimplemented dynamic export far16 forward generic helper implements interrupt iochecks local name nodefault noreturn nostackframe oldfpccall otherwise saveregisters softfloat specialize strict unaligned varargs ";
  const COMMENT_MODES = [
    hljs2.C_LINE_COMMENT_MODE,
    hljs2.COMMENT(/\{/, /\}/, {
      relevance: 0
    }),
    hljs2.COMMENT(/\(\*/, /\*\)/, {
      relevance: 10
    })
  ];
  const DIRECTIVE = {
    className: "meta",
    variants: [
      {
        begin: /\{\$/,
        end: /\}/
      },
      {
        begin: /\(\*\$/,
        end: /\*\)/
      }
    ]
  };
  const STRING = {
    className: "string",
    begin: /'/,
    end: /'/,
    contains: [{
      begin: /''/
    }]
  };
  const NUMBER = {
    className: "number",
    relevance: 0,
    variants: [
      {
        begin: "\\$[0-9A-Fa-f]+"
      },
      {
        begin: "&[0-7]+"
      },
      {
        begin: "%[01]+"
      }
    ]
  };
  const CHAR_STRING = {
    className: "string",
    begin: /(#\d+)+/
  };
  const CLASS = {
    begin: hljs2.IDENT_RE + "\\s*=\\s*class\\s*\\(",
    returnBegin: true,
    contains: [hljs2.TITLE_MODE]
  };
  const FUNCTION = {
    className: "function",
    beginKeywords: "function constructor destructor procedure",
    end: /[:;]/,
    keywords: "function constructor|10 destructor|10 procedure|10",
    contains: [
      hljs2.TITLE_MODE,
      {
        className: "params",
        begin: /\(/,
        end: /\)/,
        keywords: KEYWORDS2,
        contains: [
          STRING,
          CHAR_STRING,
          DIRECTIVE
        ].concat(COMMENT_MODES)
      },
      DIRECTIVE
    ].concat(COMMENT_MODES)
  };
  return {
    name: "Delphi",
    aliases: [
      "dpr",
      "dfm",
      "pas",
      "pascal",
      "freepascal",
      "lazarus",
      "lpr",
      "lfm"
    ],
    case_insensitive: true,
    keywords: KEYWORDS2,
    illegal: /"|\$[G-Zg-z]|\/\*|<\/|\|/,
    contains: [
      STRING,
      CHAR_STRING,
      hljs2.NUMBER_MODE,
      NUMBER,
      CLASS,
      FUNCTION,
      DIRECTIVE
    ].concat(COMMENT_MODES)
  };
}
var delphi_1 = delphi;
function diff(hljs2) {
  return {
    name: "Diff",
    aliases: ["patch"],
    contains: [
      {
        className: "meta",
        relevance: 10,
        variants: [
          {
            begin: /^@@ +-\d+,\d+ +\+\d+,\d+ +@@/
          },
          {
            begin: /^\*\*\* +\d+,\d+ +\*\*\*\*$/
          },
          {
            begin: /^--- +\d+,\d+ +----$/
          }
        ]
      },
      {
        className: "comment",
        variants: [
          {
            begin: /Index: /,
            end: /$/
          },
          {
            begin: /^index/,
            end: /$/
          },
          {
            begin: /={3,}/,
            end: /$/
          },
          {
            begin: /^-{3}/,
            end: /$/
          },
          {
            begin: /^\*{3} /,
            end: /$/
          },
          {
            begin: /^\+{3}/,
            end: /$/
          },
          {
            begin: /^\*{15}$/
          },
          {
            begin: /^diff --git/,
            end: /$/
          }
        ]
      },
      {
        className: "addition",
        begin: /^\+/,
        end: /$/
      },
      {
        className: "deletion",
        begin: /^-/,
        end: /$/
      },
      {
        className: "addition",
        begin: /^!/,
        end: /$/
      }
    ]
  };
}
var diff_1 = diff;
function django(hljs2) {
  const FILTER = {
    begin: /\|[A-Za-z]+:?/,
    keywords: {
      name: "truncatewords removetags linebreaksbr yesno get_digit timesince random striptags filesizeformat escape linebreaks length_is ljust rjust cut urlize fix_ampersands title floatformat capfirst pprint divisibleby add make_list unordered_list urlencode timeuntil urlizetrunc wordcount stringformat linenumbers slice date dictsort dictsortreversed default_if_none pluralize lower join center default truncatewords_html upper length phone2numeric wordwrap time addslashes slugify first escapejs force_escape iriencode last safe safeseq truncatechars localize unlocalize localtime utc timezone"
    },
    contains: [
      hljs2.QUOTE_STRING_MODE,
      hljs2.APOS_STRING_MODE
    ]
  };
  return {
    name: "Django",
    aliases: ["jinja"],
    case_insensitive: true,
    subLanguage: "xml",
    contains: [
      hljs2.COMMENT(/\{%\s*comment\s*%\}/, /\{%\s*endcomment\s*%\}/),
      hljs2.COMMENT(/\{#/, /#\}/),
      {
        className: "template-tag",
        begin: /\{%/,
        end: /%\}/,
        contains: [{
          className: "name",
          begin: /\w+/,
          keywords: {
            name: "comment endcomment load templatetag ifchanged endifchanged if endif firstof for endfor ifnotequal endifnotequal widthratio extends include spaceless endspaceless regroup ifequal endifequal ssi now with cycle url filter endfilter debug block endblock else autoescape endautoescape csrf_token empty elif endwith static trans blocktrans endblocktrans get_static_prefix get_media_prefix plural get_current_language language get_available_languages get_current_language_bidi get_language_info get_language_info_list localize endlocalize localtime endlocaltime timezone endtimezone get_current_timezone verbatim"
          },
          starts: {
            endsWithParent: true,
            keywords: "in by as",
            contains: [FILTER],
            relevance: 0
          }
        }]
      },
      {
        className: "template-variable",
        begin: /\{\{/,
        end: /\}\}/,
        contains: [FILTER]
      }
    ]
  };
}
var django_1 = django;
function dns(hljs2) {
  return {
    name: "DNS Zone",
    aliases: [
      "bind",
      "zone"
    ],
    keywords: {
      keyword: "IN A AAAA AFSDB APL CAA CDNSKEY CDS CERT CNAME DHCID DLV DNAME DNSKEY DS HIP IPSECKEY KEY KX LOC MX NAPTR NS NSEC NSEC3 NSEC3PARAM PTR RRSIG RP SIG SOA SRV SSHFP TA TKEY TLSA TSIG TXT"
    },
    contains: [
      hljs2.COMMENT(";", "$", {
        relevance: 0
      }),
      {
        className: "meta",
        begin: /^\$(TTL|GENERATE|INCLUDE|ORIGIN)\b/
      },
      {
        className: "number",
        begin: "((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))\\b"
      },
      {
        className: "number",
        begin: "((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\b"
      },
      hljs2.inherit(hljs2.NUMBER_MODE, {
        begin: /\b\d+[dhwm]?/
      })
    ]
  };
}
var dns_1 = dns;
function dockerfile(hljs2) {
  return {
    name: "Dockerfile",
    aliases: ["docker"],
    case_insensitive: true,
    keywords: "from maintainer expose env arg user onbuild stopsignal",
    contains: [
      hljs2.HASH_COMMENT_MODE,
      hljs2.APOS_STRING_MODE,
      hljs2.QUOTE_STRING_MODE,
      hljs2.NUMBER_MODE,
      {
        beginKeywords: "run cmd entrypoint volume add copy workdir label healthcheck shell",
        starts: {
          end: /[^\\]$/,
          subLanguage: "bash"
        }
      }
    ],
    illegal: "</"
  };
}
var dockerfile_1 = dockerfile;
function dos(hljs2) {
  const COMMENT2 = hljs2.COMMENT(/^\s*@?rem\b/, /$/, {
    relevance: 10
  });
  const LABEL = {
    className: "symbol",
    begin: "^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)",
    relevance: 0
  };
  return {
    name: "Batch file (DOS)",
    aliases: [
      "bat",
      "cmd"
    ],
    case_insensitive: true,
    illegal: /\/\*/,
    keywords: {
      keyword: "if else goto for in do call exit not exist errorlevel defined equ neq lss leq gtr geq",
      built_in: "prn nul lpt3 lpt2 lpt1 con com4 com3 com2 com1 aux shift cd dir echo setlocal endlocal set pause copy append assoc at attrib break cacls cd chcp chdir chkdsk chkntfs cls cmd color comp compact convert date dir diskcomp diskcopy doskey erase fs find findstr format ftype graftabl help keyb label md mkdir mode more move path pause print popd pushd promt rd recover rem rename replace restore rmdir shift sort start subst time title tree type ver verify vol ping net ipconfig taskkill xcopy ren del"
    },
    contains: [
      {
        className: "variable",
        begin: /%%[^ ]|%[^ ]+?%|![^ ]+?!/
      },
      {
        className: "function",
        begin: LABEL.begin,
        end: "goto:eof",
        contains: [
          hljs2.inherit(hljs2.TITLE_MODE, {
            begin: "([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*"
          }),
          COMMENT2
        ]
      },
      {
        className: "number",
        begin: "\\b\\d+",
        relevance: 0
      },
      COMMENT2
    ]
  };
}
var dos_1 = dos;
function dsconfig(hljs2) {
  const QUOTED_PROPERTY = {
    className: "string",
    begin: /"/,
    end: /"/
  };
  const APOS_PROPERTY = {
    className: "string",
    begin: /'/,
    end: /'/
  };
  const UNQUOTED_PROPERTY = {
    className: "string",
    begin: /[\w\-?]+:\w+/,
    end: /\W/,
    relevance: 0
  };
  const VALUELESS_PROPERTY = {
    className: "string",
    begin: /\w+(\-\w+)*/,
    end: /(?=\W)/,
    relevance: 0
  };
  return {
    keywords: "dsconfig",
    contains: [
      {
        className: "keyword",
        begin: "^dsconfig",
        end: /\s/,
        excludeEnd: true,
        relevance: 10
      },
      {
        className: "built_in",
        begin: /(list|create|get|set|delete)-(\w+)/,
        end: /\s/,
        excludeEnd: true,
        illegal: "!@#$%^&*()",
        relevance: 10
      },
      {
        className: "built_in",
        begin: /--(\w+)/,
        end: /\s/,
        excludeEnd: true
      },
      QUOTED_PROPERTY,
      APOS_PROPERTY,
      UNQUOTED_PROPERTY,
      VALUELESS_PROPERTY,
      hljs2.HASH_COMMENT_MODE
    ]
  };
}
var dsconfig_1 = dsconfig;
function dts(hljs2) {
  const STRINGS = {
    className: "string",
    variants: [
      hljs2.inherit(hljs2.QUOTE_STRING_MODE, {
        begin: '((u8?|U)|L)?"'
      }),
      {
        begin: '(u8?|U)?R"',
        end: '"',
        contains: [hljs2.BACKSLASH_ESCAPE]
      },
      {
        begin: "'\\\\?.",
        end: "'",
        illegal: "."
      }
    ]
  };
  const NUMBERS = {
    className: "number",
    variants: [
      {
        begin: "\\b(\\d+(\\.\\d*)?|\\.\\d+)(u|U|l|L|ul|UL|f|F)"
      },
      {
        begin: hljs2.C_NUMBER_RE
      }
    ],
    relevance: 0
  };
  const PREPROCESSOR = {
    className: "meta",
    begin: "#",
    end: "$",
    keywords: {
      "meta-keyword": "if else elif endif define undef ifdef ifndef"
    },
    contains: [
      {
        begin: /\\\n/,
        relevance: 0
      },
      {
        beginKeywords: "include",
        end: "$",
        keywords: {
          "meta-keyword": "include"
        },
        contains: [
          hljs2.inherit(STRINGS, {
            className: "meta-string"
          }),
          {
            className: "meta-string",
            begin: "<",
            end: ">",
            illegal: "\\n"
          }
        ]
      },
      STRINGS,
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE
    ]
  };
  const DTS_REFERENCE = {
    className: "variable",
    begin: /&[a-z\d_]*\b/
  };
  const DTS_KEYWORD = {
    className: "meta-keyword",
    begin: "/[a-z][a-z\\d-]*/"
  };
  const DTS_LABEL = {
    className: "symbol",
    begin: "^\\s*[a-zA-Z_][a-zA-Z\\d_]*:"
  };
  const DTS_CELL_PROPERTY = {
    className: "params",
    begin: "<",
    end: ">",
    contains: [
      NUMBERS,
      DTS_REFERENCE
    ]
  };
  const DTS_NODE = {
    className: "class",
    begin: /[a-zA-Z_][a-zA-Z\d_@]*\s\{/,
    end: /[{;=]/,
    returnBegin: true,
    excludeEnd: true
  };
  const DTS_ROOT_NODE = {
    className: "class",
    begin: "/\\s*\\{",
    end: /\};/,
    relevance: 10,
    contains: [
      DTS_REFERENCE,
      DTS_KEYWORD,
      DTS_LABEL,
      DTS_NODE,
      DTS_CELL_PROPERTY,
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      NUMBERS,
      STRINGS
    ]
  };
  return {
    name: "Device Tree",
    keywords: "",
    contains: [
      DTS_ROOT_NODE,
      DTS_REFERENCE,
      DTS_KEYWORD,
      DTS_LABEL,
      DTS_NODE,
      DTS_CELL_PROPERTY,
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      NUMBERS,
      STRINGS,
      PREPROCESSOR,
      {
        begin: hljs2.IDENT_RE + "::",
        keywords: ""
      }
    ]
  };
}
var dts_1 = dts;
function dust(hljs2) {
  const EXPRESSION_KEYWORDS = "if eq ne lt lte gt gte select default math sep";
  return {
    name: "Dust",
    aliases: ["dst"],
    case_insensitive: true,
    subLanguage: "xml",
    contains: [
      {
        className: "template-tag",
        begin: /\{[#\/]/,
        end: /\}/,
        illegal: /;/,
        contains: [{
          className: "name",
          begin: /[a-zA-Z\.-]+/,
          starts: {
            endsWithParent: true,
            relevance: 0,
            contains: [hljs2.QUOTE_STRING_MODE]
          }
        }]
      },
      {
        className: "template-variable",
        begin: /\{/,
        end: /\}/,
        illegal: /;/,
        keywords: EXPRESSION_KEYWORDS
      }
    ]
  };
}
var dust_1 = dust;
function ebnf(hljs2) {
  const commentMode = hljs2.COMMENT(/\(\*/, /\*\)/);
  const nonTerminalMode = {
    className: "attribute",
    begin: /^[ ]*[a-zA-Z]+([\s_-]+[a-zA-Z]+)*/
  };
  const specialSequenceMode = {
    className: "meta",
    begin: /\?.*\?/
  };
  const ruleBodyMode = {
    begin: /=/,
    end: /[.;]/,
    contains: [
      commentMode,
      specialSequenceMode,
      {
        className: "string",
        variants: [
          hljs2.APOS_STRING_MODE,
          hljs2.QUOTE_STRING_MODE,
          {
            begin: "`",
            end: "`"
          }
        ]
      }
    ]
  };
  return {
    name: "Extended Backus-Naur Form",
    illegal: /\S/,
    contains: [
      commentMode,
      nonTerminalMode,
      ruleBodyMode
    ]
  };
}
var ebnf_1 = ebnf;
function elixir(hljs2) {
  const ELIXIR_IDENT_RE = "[a-zA-Z_][a-zA-Z0-9_.]*(!|\\?)?";
  const ELIXIR_METHOD_RE = "[a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?";
  const ELIXIR_KEYWORDS = {
    $pattern: ELIXIR_IDENT_RE,
    keyword: "and false then defined module in return redo retry end for true self when next until do begin unless nil break not case cond alias while ensure or include use alias fn quote require import with|0"
  };
  const SUBST = {
    className: "subst",
    begin: /#\{/,
    end: /\}/,
    keywords: ELIXIR_KEYWORDS
  };
  const NUMBER = {
    className: "number",
    begin: "(\\b0o[0-7_]+)|(\\b0b[01_]+)|(\\b0x[0-9a-fA-F_]+)|(-?\\b[1-9][0-9_]*(\\.[0-9_]+([eE][-+]?[0-9]+)?)?)",
    relevance: 0
  };
  const SIGIL_DELIMITERS = `[/|([{<"']`;
  const LOWERCASE_SIGIL = {
    className: "string",
    begin: "~[a-z](?=" + SIGIL_DELIMITERS + ")",
    contains: [
      {
        endsParent: true,
        contains: [
          {
            contains: [
              hljs2.BACKSLASH_ESCAPE,
              SUBST
            ],
            variants: [
              {
                begin: /"/,
                end: /"/
              },
              {
                begin: /'/,
                end: /'/
              },
              {
                begin: /\//,
                end: /\//
              },
              {
                begin: /\|/,
                end: /\|/
              },
              {
                begin: /\(/,
                end: /\)/
              },
              {
                begin: /\[/,
                end: /\]/
              },
              {
                begin: /\{/,
                end: /\}/
              },
              {
                begin: /</,
                end: />/
              }
            ]
          }
        ]
      }
    ]
  };
  const UPCASE_SIGIL = {
    className: "string",
    begin: "~[A-Z](?=" + SIGIL_DELIMITERS + ")",
    contains: [
      {
        begin: /"/,
        end: /"/
      },
      {
        begin: /'/,
        end: /'/
      },
      {
        begin: /\//,
        end: /\//
      },
      {
        begin: /\|/,
        end: /\|/
      },
      {
        begin: /\(/,
        end: /\)/
      },
      {
        begin: /\[/,
        end: /\]/
      },
      {
        begin: /\{/,
        end: /\}/
      },
      {
        begin: /</,
        end: />/
      }
    ]
  };
  const STRING = {
    className: "string",
    contains: [
      hljs2.BACKSLASH_ESCAPE,
      SUBST
    ],
    variants: [
      {
        begin: /"""/,
        end: /"""/
      },
      {
        begin: /'''/,
        end: /'''/
      },
      {
        begin: /~S"""/,
        end: /"""/,
        contains: []
      },
      {
        begin: /~S"/,
        end: /"/,
        contains: []
      },
      {
        begin: /~S'''/,
        end: /'''/,
        contains: []
      },
      {
        begin: /~S'/,
        end: /'/,
        contains: []
      },
      {
        begin: /'/,
        end: /'/
      },
      {
        begin: /"/,
        end: /"/
      }
    ]
  };
  const FUNCTION = {
    className: "function",
    beginKeywords: "def defp defmacro",
    end: /\B\b/,
    contains: [
      hljs2.inherit(hljs2.TITLE_MODE, {
        begin: ELIXIR_IDENT_RE,
        endsParent: true
      })
    ]
  };
  const CLASS = hljs2.inherit(FUNCTION, {
    className: "class",
    beginKeywords: "defimpl defmodule defprotocol defrecord",
    end: /\bdo\b|$|;/
  });
  const ELIXIR_DEFAULT_CONTAINS = [
    STRING,
    UPCASE_SIGIL,
    LOWERCASE_SIGIL,
    hljs2.HASH_COMMENT_MODE,
    CLASS,
    FUNCTION,
    {
      begin: "::"
    },
    {
      className: "symbol",
      begin: ":(?![\\s:])",
      contains: [
        STRING,
        {
          begin: ELIXIR_METHOD_RE
        }
      ],
      relevance: 0
    },
    {
      className: "symbol",
      begin: ELIXIR_IDENT_RE + ":(?!:)",
      relevance: 0
    },
    NUMBER,
    {
      className: "variable",
      begin: "(\\$\\W)|((\\$|@@?)(\\w+))"
    },
    {
      begin: "->"
    },
    {
      begin: "(" + hljs2.RE_STARTERS_RE + ")\\s*",
      contains: [
        hljs2.HASH_COMMENT_MODE,
        {
          begin: /\/: (?=\d+\s*[,\]])/,
          relevance: 0,
          contains: [NUMBER]
        },
        {
          className: "regexp",
          illegal: "\\n",
          contains: [
            hljs2.BACKSLASH_ESCAPE,
            SUBST
          ],
          variants: [
            {
              begin: "/",
              end: "/[a-z]*"
            },
            {
              begin: "%r\\[",
              end: "\\][a-z]*"
            }
          ]
        }
      ],
      relevance: 0
    }
  ];
  SUBST.contains = ELIXIR_DEFAULT_CONTAINS;
  return {
    name: "Elixir",
    keywords: ELIXIR_KEYWORDS,
    contains: ELIXIR_DEFAULT_CONTAINS
  };
}
var elixir_1 = elixir;
function elm(hljs2) {
  const COMMENT2 = {
    variants: [
      hljs2.COMMENT("--", "$"),
      hljs2.COMMENT(/\{-/, /-\}/, {
        contains: ["self"]
      })
    ]
  };
  const CONSTRUCTOR = {
    className: "type",
    begin: "\\b[A-Z][\\w']*",
    relevance: 0
  };
  const LIST = {
    begin: "\\(",
    end: "\\)",
    illegal: '"',
    contains: [
      {
        className: "type",
        begin: "\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?"
      },
      COMMENT2
    ]
  };
  const RECORD = {
    begin: /\{/,
    end: /\}/,
    contains: LIST.contains
  };
  const CHARACTER = {
    className: "string",
    begin: "'\\\\?.",
    end: "'",
    illegal: "."
  };
  return {
    name: "Elm",
    keywords: "let in if then else case of where module import exposing type alias as infix infixl infixr port effect command subscription",
    contains: [
      {
        beginKeywords: "port effect module",
        end: "exposing",
        keywords: "port effect module where command subscription exposing",
        contains: [
          LIST,
          COMMENT2
        ],
        illegal: "\\W\\.|;"
      },
      {
        begin: "import",
        end: "$",
        keywords: "import as exposing",
        contains: [
          LIST,
          COMMENT2
        ],
        illegal: "\\W\\.|;"
      },
      {
        begin: "type",
        end: "$",
        keywords: "type alias",
        contains: [
          CONSTRUCTOR,
          LIST,
          RECORD,
          COMMENT2
        ]
      },
      {
        beginKeywords: "infix infixl infixr",
        end: "$",
        contains: [
          hljs2.C_NUMBER_MODE,
          COMMENT2
        ]
      },
      {
        begin: "port",
        end: "$",
        keywords: "port",
        contains: [COMMENT2]
      },
      CHARACTER,
      hljs2.QUOTE_STRING_MODE,
      hljs2.C_NUMBER_MODE,
      CONSTRUCTOR,
      hljs2.inherit(hljs2.TITLE_MODE, {
        begin: "^[_a-z][\\w']*"
      }),
      COMMENT2,
      {
        begin: "->|<-"
      }
    ],
    illegal: /;/
  };
}
var elm_1 = elm;
function source$n(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function lookahead$7(re) {
  return concat$m("(?=", re, ")");
}
function concat$m(...args) {
  const joined = args.map((x2) => source$n(x2)).join("");
  return joined;
}
function ruby(hljs2) {
  const RUBY_METHOD_RE = "([a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?)";
  const RUBY_KEYWORDS = {
    keyword: "and then defined module in return redo if BEGIN retry end for self when next until do begin unless END rescue else break undef not super class case require yield alias while ensure elsif or include attr_reader attr_writer attr_accessor __FILE__",
    built_in: "proc lambda",
    literal: "true false nil"
  };
  const YARDOCTAG = {
    className: "doctag",
    begin: "@[A-Za-z]+"
  };
  const IRB_OBJECT = {
    begin: "#<",
    end: ">"
  };
  const COMMENT_MODES = [
    hljs2.COMMENT("#", "$", {
      contains: [YARDOCTAG]
    }),
    hljs2.COMMENT("^=begin", "^=end", {
      contains: [YARDOCTAG],
      relevance: 10
    }),
    hljs2.COMMENT("^__END__", "\\n$")
  ];
  const SUBST = {
    className: "subst",
    begin: /#\{/,
    end: /\}/,
    keywords: RUBY_KEYWORDS
  };
  const STRING = {
    className: "string",
    contains: [
      hljs2.BACKSLASH_ESCAPE,
      SUBST
    ],
    variants: [
      {
        begin: /'/,
        end: /'/
      },
      {
        begin: /"/,
        end: /"/
      },
      {
        begin: /`/,
        end: /`/
      },
      {
        begin: /%[qQwWx]?\(/,
        end: /\)/
      },
      {
        begin: /%[qQwWx]?\[/,
        end: /\]/
      },
      {
        begin: /%[qQwWx]?\{/,
        end: /\}/
      },
      {
        begin: /%[qQwWx]?</,
        end: />/
      },
      {
        begin: /%[qQwWx]?\//,
        end: /\//
      },
      {
        begin: /%[qQwWx]?%/,
        end: /%/
      },
      {
        begin: /%[qQwWx]?-/,
        end: /-/
      },
      {
        begin: /%[qQwWx]?\|/,
        end: /\|/
      },
      {
        begin: /\B\?(\\\d{1,3})/
      },
      {
        begin: /\B\?(\\x[A-Fa-f0-9]{1,2})/
      },
      {
        begin: /\B\?(\\u\{?[A-Fa-f0-9]{1,6}\}?)/
      },
      {
        begin: /\B\?(\\M-\\C-|\\M-\\c|\\c\\M-|\\M-|\\C-\\M-)[\x20-\x7e]/
      },
      {
        begin: /\B\?\\(c|C-)[\x20-\x7e]/
      },
      {
        begin: /\B\?\\?\S/
      },
      {
        begin: /<<[-~]?'?(\w+)\n(?:[^\n]*\n)*?\s*\1\b/,
        returnBegin: true,
        contains: [
          {
            begin: /<<[-~]?'?/
          },
          hljs2.END_SAME_AS_BEGIN({
            begin: /(\w+)/,
            end: /(\w+)/,
            contains: [
              hljs2.BACKSLASH_ESCAPE,
              SUBST
            ]
          })
        ]
      }
    ]
  };
  const decimal = "[1-9](_?[0-9])*|0";
  const digits = "[0-9](_?[0-9])*";
  const NUMBER = {
    className: "number",
    relevance: 0,
    variants: [
      {
        begin: `\\b(${decimal})(\\.(${digits}))?([eE][+-]?(${digits})|r)?i?\\b`
      },
      {
        begin: "\\b0[dD][0-9](_?[0-9])*r?i?\\b"
      },
      {
        begin: "\\b0[bB][0-1](_?[0-1])*r?i?\\b"
      },
      {
        begin: "\\b0[oO][0-7](_?[0-7])*r?i?\\b"
      },
      {
        begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*r?i?\\b"
      },
      {
        begin: "\\b0(_?[0-7])+r?i?\\b"
      }
    ]
  };
  const PARAMS = {
    className: "params",
    begin: "\\(",
    end: "\\)",
    endsParent: true,
    keywords: RUBY_KEYWORDS
  };
  const RUBY_DEFAULT_CONTAINS = [
    STRING,
    {
      className: "class",
      beginKeywords: "class module",
      end: "$|;",
      illegal: /=/,
      contains: [
        hljs2.inherit(hljs2.TITLE_MODE, {
          begin: "[A-Za-z_]\\w*(::\\w+)*(\\?|!)?"
        }),
        {
          begin: "<\\s*",
          contains: [
            {
              begin: "(" + hljs2.IDENT_RE + "::)?" + hljs2.IDENT_RE,
              relevance: 0
            }
          ]
        }
      ].concat(COMMENT_MODES)
    },
    {
      className: "function",
      begin: concat$m(/def\s+/, lookahead$7(RUBY_METHOD_RE + "\\s*(\\(|;|$)")),
      relevance: 0,
      keywords: "def",
      end: "$|;",
      contains: [
        hljs2.inherit(hljs2.TITLE_MODE, {
          begin: RUBY_METHOD_RE
        }),
        PARAMS
      ].concat(COMMENT_MODES)
    },
    {
      begin: hljs2.IDENT_RE + "::"
    },
    {
      className: "symbol",
      begin: hljs2.UNDERSCORE_IDENT_RE + "(!|\\?)?:",
      relevance: 0
    },
    {
      className: "symbol",
      begin: ":(?!\\s)",
      contains: [
        STRING,
        {
          begin: RUBY_METHOD_RE
        }
      ],
      relevance: 0
    },
    NUMBER,
    {
      className: "variable",
      begin: `(\\$\\W)|((\\$|@@?)(\\w+))(?=[^@$?])(?![A-Za-z])(?![@$?'])`
    },
    {
      className: "params",
      begin: /\|/,
      end: /\|/,
      relevance: 0,
      keywords: RUBY_KEYWORDS
    },
    {
      begin: "(" + hljs2.RE_STARTERS_RE + "|unless)\\s*",
      keywords: "unless",
      contains: [
        {
          className: "regexp",
          contains: [
            hljs2.BACKSLASH_ESCAPE,
            SUBST
          ],
          illegal: /\n/,
          variants: [
            {
              begin: "/",
              end: "/[a-z]*"
            },
            {
              begin: /%r\{/,
              end: /\}[a-z]*/
            },
            {
              begin: "%r\\(",
              end: "\\)[a-z]*"
            },
            {
              begin: "%r!",
              end: "![a-z]*"
            },
            {
              begin: "%r\\[",
              end: "\\][a-z]*"
            }
          ]
        }
      ].concat(IRB_OBJECT, COMMENT_MODES),
      relevance: 0
    }
  ].concat(IRB_OBJECT, COMMENT_MODES);
  SUBST.contains = RUBY_DEFAULT_CONTAINS;
  PARAMS.contains = RUBY_DEFAULT_CONTAINS;
  const SIMPLE_PROMPT = "[>?]>";
  const DEFAULT_PROMPT = "[\\w#]+\\(\\w+\\):\\d+:\\d+>";
  const RVM_PROMPT = "(\\w+-)?\\d+\\.\\d+\\.\\d+(p\\d+)?[^\\d][^>]+>";
  const IRB_DEFAULT = [
    {
      begin: /^\s*=>/,
      starts: {
        end: "$",
        contains: RUBY_DEFAULT_CONTAINS
      }
    },
    {
      className: "meta",
      begin: "^(" + SIMPLE_PROMPT + "|" + DEFAULT_PROMPT + "|" + RVM_PROMPT + ")(?=[ ])",
      starts: {
        end: "$",
        contains: RUBY_DEFAULT_CONTAINS
      }
    }
  ];
  COMMENT_MODES.unshift(IRB_OBJECT);
  return {
    name: "Ruby",
    aliases: [
      "rb",
      "gemspec",
      "podspec",
      "thor",
      "irb"
    ],
    keywords: RUBY_KEYWORDS,
    illegal: /\/\*/,
    contains: [
      hljs2.SHEBANG({
        binary: "ruby"
      })
    ].concat(IRB_DEFAULT).concat(COMMENT_MODES).concat(RUBY_DEFAULT_CONTAINS)
  };
}
var ruby_1 = ruby;
function erb(hljs2) {
  return {
    name: "ERB",
    subLanguage: "xml",
    contains: [
      hljs2.COMMENT("<%#", "%>"),
      {
        begin: "<%[%=-]?",
        end: "[%-]?%>",
        subLanguage: "ruby",
        excludeBegin: true,
        excludeEnd: true
      }
    ]
  };
}
var erb_1 = erb;
function source$m(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function concat$l(...args) {
  const joined = args.map((x2) => source$m(x2)).join("");
  return joined;
}
function erlangRepl(hljs2) {
  return {
    name: "Erlang REPL",
    keywords: {
      built_in: "spawn spawn_link self",
      keyword: "after and andalso|10 band begin bnot bor bsl bsr bxor case catch cond div end fun if let not of or orelse|10 query receive rem try when xor"
    },
    contains: [
      {
        className: "meta",
        begin: "^[0-9]+> ",
        relevance: 10
      },
      hljs2.COMMENT("%", "$"),
      {
        className: "number",
        begin: "\\b(\\d+(_\\d+)*#[a-fA-F0-9]+(_[a-fA-F0-9]+)*|\\d+(_\\d+)*(\\.\\d+(_\\d+)*)?([eE][-+]?\\d+)?)",
        relevance: 0
      },
      hljs2.APOS_STRING_MODE,
      hljs2.QUOTE_STRING_MODE,
      {
        begin: concat$l(/\?(::)?/, /([A-Z]\w*)/, /((::)[A-Z]\w*)*/)
      },
      {
        begin: "->"
      },
      {
        begin: "ok"
      },
      {
        begin: "!"
      },
      {
        begin: "(\\b[a-z'][a-zA-Z0-9_']*:[a-z'][a-zA-Z0-9_']*)|(\\b[a-z'][a-zA-Z0-9_']*)",
        relevance: 0
      },
      {
        begin: "[A-Z][a-zA-Z0-9_']*",
        relevance: 0
      }
    ]
  };
}
var erlangRepl_1 = erlangRepl;
function erlang(hljs2) {
  const BASIC_ATOM_RE = "[a-z'][a-zA-Z0-9_']*";
  const FUNCTION_NAME_RE = "(" + BASIC_ATOM_RE + ":" + BASIC_ATOM_RE + "|" + BASIC_ATOM_RE + ")";
  const ERLANG_RESERVED = {
    keyword: "after and andalso|10 band begin bnot bor bsl bzr bxor case catch cond div end fun if let not of orelse|10 query receive rem try when xor",
    literal: "false true"
  };
  const COMMENT2 = hljs2.COMMENT("%", "$");
  const NUMBER = {
    className: "number",
    begin: "\\b(\\d+(_\\d+)*#[a-fA-F0-9]+(_[a-fA-F0-9]+)*|\\d+(_\\d+)*(\\.\\d+(_\\d+)*)?([eE][-+]?\\d+)?)",
    relevance: 0
  };
  const NAMED_FUN = {
    begin: "fun\\s+" + BASIC_ATOM_RE + "/\\d+"
  };
  const FUNCTION_CALL = {
    begin: FUNCTION_NAME_RE + "\\(",
    end: "\\)",
    returnBegin: true,
    relevance: 0,
    contains: [
      {
        begin: FUNCTION_NAME_RE,
        relevance: 0
      },
      {
        begin: "\\(",
        end: "\\)",
        endsWithParent: true,
        returnEnd: true,
        relevance: 0
      }
    ]
  };
  const TUPLE = {
    begin: /\{/,
    end: /\}/,
    relevance: 0
  };
  const VAR1 = {
    begin: "\\b_([A-Z][A-Za-z0-9_]*)?",
    relevance: 0
  };
  const VAR2 = {
    begin: "[A-Z][a-zA-Z0-9_]*",
    relevance: 0
  };
  const RECORD_ACCESS = {
    begin: "#" + hljs2.UNDERSCORE_IDENT_RE,
    relevance: 0,
    returnBegin: true,
    contains: [
      {
        begin: "#" + hljs2.UNDERSCORE_IDENT_RE,
        relevance: 0
      },
      {
        begin: /\{/,
        end: /\}/,
        relevance: 0
      }
    ]
  };
  const BLOCK_STATEMENTS = {
    beginKeywords: "fun receive if try case",
    end: "end",
    keywords: ERLANG_RESERVED
  };
  BLOCK_STATEMENTS.contains = [
    COMMENT2,
    NAMED_FUN,
    hljs2.inherit(hljs2.APOS_STRING_MODE, {
      className: ""
    }),
    BLOCK_STATEMENTS,
    FUNCTION_CALL,
    hljs2.QUOTE_STRING_MODE,
    NUMBER,
    TUPLE,
    VAR1,
    VAR2,
    RECORD_ACCESS
  ];
  const BASIC_MODES = [
    COMMENT2,
    NAMED_FUN,
    BLOCK_STATEMENTS,
    FUNCTION_CALL,
    hljs2.QUOTE_STRING_MODE,
    NUMBER,
    TUPLE,
    VAR1,
    VAR2,
    RECORD_ACCESS
  ];
  FUNCTION_CALL.contains[1].contains = BASIC_MODES;
  TUPLE.contains = BASIC_MODES;
  RECORD_ACCESS.contains[1].contains = BASIC_MODES;
  const DIRECTIVES = [
    "-module",
    "-record",
    "-undef",
    "-export",
    "-ifdef",
    "-ifndef",
    "-author",
    "-copyright",
    "-doc",
    "-vsn",
    "-import",
    "-include",
    "-include_lib",
    "-compile",
    "-define",
    "-else",
    "-endif",
    "-file",
    "-behaviour",
    "-behavior",
    "-spec"
  ];
  const PARAMS = {
    className: "params",
    begin: "\\(",
    end: "\\)",
    contains: BASIC_MODES
  };
  return {
    name: "Erlang",
    aliases: ["erl"],
    keywords: ERLANG_RESERVED,
    illegal: "(</|\\*=|\\+=|-=|/\\*|\\*/|\\(\\*|\\*\\))",
    contains: [
      {
        className: "function",
        begin: "^" + BASIC_ATOM_RE + "\\s*\\(",
        end: "->",
        returnBegin: true,
        illegal: "\\(|#|//|/\\*|\\\\|:|;",
        contains: [
          PARAMS,
          hljs2.inherit(hljs2.TITLE_MODE, {
            begin: BASIC_ATOM_RE
          })
        ],
        starts: {
          end: ";|\\.",
          keywords: ERLANG_RESERVED,
          contains: BASIC_MODES
        }
      },
      COMMENT2,
      {
        begin: "^-",
        end: "\\.",
        relevance: 0,
        excludeEnd: true,
        returnBegin: true,
        keywords: {
          $pattern: "-" + hljs2.IDENT_RE,
          keyword: DIRECTIVES.map((x2) => `${x2}|1.5`).join(" ")
        },
        contains: [PARAMS]
      },
      NUMBER,
      hljs2.QUOTE_STRING_MODE,
      RECORD_ACCESS,
      VAR1,
      VAR2,
      TUPLE,
      {
        begin: /\.$/
      }
    ]
  };
}
var erlang_1 = erlang;
function excel(hljs2) {
  return {
    name: "Excel formulae",
    aliases: [
      "xlsx",
      "xls"
    ],
    case_insensitive: true,
    keywords: {
      $pattern: /[a-zA-Z][\w\.]*/,
      built_in: "ABS ACCRINT ACCRINTM ACOS ACOSH ACOT ACOTH AGGREGATE ADDRESS AMORDEGRC AMORLINC AND ARABIC AREAS ASC ASIN ASINH ATAN ATAN2 ATANH AVEDEV AVERAGE AVERAGEA AVERAGEIF AVERAGEIFS BAHTTEXT BASE BESSELI BESSELJ BESSELK BESSELY BETADIST BETA.DIST BETAINV BETA.INV BIN2DEC BIN2HEX BIN2OCT BINOMDIST BINOM.DIST BINOM.DIST.RANGE BINOM.INV BITAND BITLSHIFT BITOR BITRSHIFT BITXOR CALL CEILING CEILING.MATH CEILING.PRECISE CELL CHAR CHIDIST CHIINV CHITEST CHISQ.DIST CHISQ.DIST.RT CHISQ.INV CHISQ.INV.RT CHISQ.TEST CHOOSE CLEAN CODE COLUMN COLUMNS COMBIN COMBINA COMPLEX CONCAT CONCATENATE CONFIDENCE CONFIDENCE.NORM CONFIDENCE.T CONVERT CORREL COS COSH COT COTH COUNT COUNTA COUNTBLANK COUNTIF COUNTIFS COUPDAYBS COUPDAYS COUPDAYSNC COUPNCD COUPNUM COUPPCD COVAR COVARIANCE.P COVARIANCE.S CRITBINOM CSC CSCH CUBEKPIMEMBER CUBEMEMBER CUBEMEMBERPROPERTY CUBERANKEDMEMBER CUBESET CUBESETCOUNT CUBEVALUE CUMIPMT CUMPRINC DATE DATEDIF DATEVALUE DAVERAGE DAY DAYS DAYS360 DB DBCS DCOUNT DCOUNTA DDB DEC2BIN DEC2HEX DEC2OCT DECIMAL DEGREES DELTA DEVSQ DGET DISC DMAX DMIN DOLLAR DOLLARDE DOLLARFR DPRODUCT DSTDEV DSTDEVP DSUM DURATION DVAR DVARP EDATE EFFECT ENCODEURL EOMONTH ERF ERF.PRECISE ERFC ERFC.PRECISE ERROR.TYPE EUROCONVERT EVEN EXACT EXP EXPON.DIST EXPONDIST FACT FACTDOUBLE FALSE|0 F.DIST FDIST F.DIST.RT FILTERXML FIND FINDB F.INV F.INV.RT FINV FISHER FISHERINV FIXED FLOOR FLOOR.MATH FLOOR.PRECISE FORECAST FORECAST.ETS FORECAST.ETS.CONFINT FORECAST.ETS.SEASONALITY FORECAST.ETS.STAT FORECAST.LINEAR FORMULATEXT FREQUENCY F.TEST FTEST FV FVSCHEDULE GAMMA GAMMA.DIST GAMMADIST GAMMA.INV GAMMAINV GAMMALN GAMMALN.PRECISE GAUSS GCD GEOMEAN GESTEP GETPIVOTDATA GROWTH HARMEAN HEX2BIN HEX2DEC HEX2OCT HLOOKUP HOUR HYPERLINK HYPGEOM.DIST HYPGEOMDIST IF IFERROR IFNA IFS IMABS IMAGINARY IMARGUMENT IMCONJUGATE IMCOS IMCOSH IMCOT IMCSC IMCSCH IMDIV IMEXP IMLN IMLOG10 IMLOG2 IMPOWER IMPRODUCT IMREAL IMSEC IMSECH IMSIN IMSINH IMSQRT IMSUB IMSUM IMTAN INDEX INDIRECT INFO INT INTERCEPT INTRATE IPMT IRR ISBLANK ISERR ISERROR ISEVEN ISFORMULA ISLOGICAL ISNA ISNONTEXT ISNUMBER ISODD ISREF ISTEXT ISO.CEILING ISOWEEKNUM ISPMT JIS KURT LARGE LCM LEFT LEFTB LEN LENB LINEST LN LOG LOG10 LOGEST LOGINV LOGNORM.DIST LOGNORMDIST LOGNORM.INV LOOKUP LOWER MATCH MAX MAXA MAXIFS MDETERM MDURATION MEDIAN MID MIDBs MIN MINIFS MINA MINUTE MINVERSE MIRR MMULT MOD MODE MODE.MULT MODE.SNGL MONTH MROUND MULTINOMIAL MUNIT N NA NEGBINOM.DIST NEGBINOMDIST NETWORKDAYS NETWORKDAYS.INTL NOMINAL NORM.DIST NORMDIST NORMINV NORM.INV NORM.S.DIST NORMSDIST NORM.S.INV NORMSINV NOT NOW NPER NPV NUMBERVALUE OCT2BIN OCT2DEC OCT2HEX ODD ODDFPRICE ODDFYIELD ODDLPRICE ODDLYIELD OFFSET OR PDURATION PEARSON PERCENTILE.EXC PERCENTILE.INC PERCENTILE PERCENTRANK.EXC PERCENTRANK.INC PERCENTRANK PERMUT PERMUTATIONA PHI PHONETIC PI PMT POISSON.DIST POISSON POWER PPMT PRICE PRICEDISC PRICEMAT PROB PRODUCT PROPER PV QUARTILE QUARTILE.EXC QUARTILE.INC QUOTIENT RADIANS RAND RANDBETWEEN RANK.AVG RANK.EQ RANK RATE RECEIVED REGISTER.ID REPLACE REPLACEB REPT RIGHT RIGHTB ROMAN ROUND ROUNDDOWN ROUNDUP ROW ROWS RRI RSQ RTD SEARCH SEARCHB SEC SECH SECOND SERIESSUM SHEET SHEETS SIGN SIN SINH SKEW SKEW.P SLN SLOPE SMALL SQL.REQUEST SQRT SQRTPI STANDARDIZE STDEV STDEV.P STDEV.S STDEVA STDEVP STDEVPA STEYX SUBSTITUTE SUBTOTAL SUM SUMIF SUMIFS SUMPRODUCT SUMSQ SUMX2MY2 SUMX2PY2 SUMXMY2 SWITCH SYD T TAN TANH TBILLEQ TBILLPRICE TBILLYIELD T.DIST T.DIST.2T T.DIST.RT TDIST TEXT TEXTJOIN TIME TIMEVALUE T.INV T.INV.2T TINV TODAY TRANSPOSE TREND TRIM TRIMMEAN TRUE|0 TRUNC T.TEST TTEST TYPE UNICHAR UNICODE UPPER VALUE VAR VAR.P VAR.S VARA VARP VARPA VDB VLOOKUP WEBSERVICE WEEKDAY WEEKNUM WEIBULL WEIBULL.DIST WORKDAY WORKDAY.INTL XIRR XNPV XOR YEAR YEARFRAC YIELD YIELDDISC YIELDMAT Z.TEST ZTEST"
    },
    contains: [
      {
        begin: /^=/,
        end: /[^=]/,
        returnEnd: true,
        illegal: /=/,
        relevance: 10
      },
      {
        className: "symbol",
        begin: /\b[A-Z]{1,2}\d+\b/,
        end: /[^\d]/,
        excludeEnd: true,
        relevance: 0
      },
      {
        className: "symbol",
        begin: /[A-Z]{0,2}\d*:[A-Z]{0,2}\d*/,
        relevance: 0
      },
      hljs2.BACKSLASH_ESCAPE,
      hljs2.QUOTE_STRING_MODE,
      {
        className: "number",
        begin: hljs2.NUMBER_RE + "(%)?",
        relevance: 0
      },
      hljs2.COMMENT(/\bN\(/, /\)/, {
        excludeBegin: true,
        excludeEnd: true,
        illegal: /\n/
      })
    ]
  };
}
var excel_1 = excel;
function fix(hljs2) {
  return {
    name: "FIX",
    contains: [{
      begin: /[^\u2401\u0001]+/,
      end: /[\u2401\u0001]/,
      excludeEnd: true,
      returnBegin: true,
      returnEnd: false,
      contains: [
        {
          begin: /([^\u2401\u0001=]+)/,
          end: /=([^\u2401\u0001=]+)/,
          returnEnd: true,
          returnBegin: false,
          className: "attr"
        },
        {
          begin: /=/,
          end: /([\u2401\u0001])/,
          excludeEnd: true,
          excludeBegin: true,
          className: "string"
        }
      ]
    }],
    case_insensitive: true
  };
}
var fix_1 = fix;
function flix(hljs2) {
  const CHAR = {
    className: "string",
    begin: /'(.|\\[xXuU][a-zA-Z0-9]+)'/
  };
  const STRING = {
    className: "string",
    variants: [{
      begin: '"',
      end: '"'
    }]
  };
  const NAME = {
    className: "title",
    relevance: 0,
    begin: /[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/
  };
  const METHOD = {
    className: "function",
    beginKeywords: "def",
    end: /[:={\[(\n;]/,
    excludeEnd: true,
    contains: [NAME]
  };
  return {
    name: "Flix",
    keywords: {
      literal: "true false",
      keyword: "case class def else enum if impl import in lat rel index let match namespace switch type yield with"
    },
    contains: [
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      CHAR,
      STRING,
      METHOD,
      hljs2.C_NUMBER_MODE
    ]
  };
}
var flix_1 = flix;
function source$l(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function concat$k(...args) {
  const joined = args.map((x2) => source$l(x2)).join("");
  return joined;
}
function fortran(hljs2) {
  const PARAMS = {
    className: "params",
    begin: "\\(",
    end: "\\)"
  };
  const COMMENT2 = {
    variants: [
      hljs2.COMMENT("!", "$", {
        relevance: 0
      }),
      hljs2.COMMENT("^C[ ]", "$", {
        relevance: 0
      }),
      hljs2.COMMENT("^C$", "$", {
        relevance: 0
      })
    ]
  };
  const OPTIONAL_NUMBER_SUFFIX = /(_[a-z_\d]+)?/;
  const OPTIONAL_NUMBER_EXP = /([de][+-]?\d+)?/;
  const NUMBER = {
    className: "number",
    variants: [
      {
        begin: concat$k(/\b\d+/, /\.(\d*)/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX)
      },
      {
        begin: concat$k(/\b\d+/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX)
      },
      {
        begin: concat$k(/\.\d+/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX)
      }
    ],
    relevance: 0
  };
  const FUNCTION_DEF = {
    className: "function",
    beginKeywords: "subroutine function program",
    illegal: "[${=\\n]",
    contains: [
      hljs2.UNDERSCORE_TITLE_MODE,
      PARAMS
    ]
  };
  const STRING = {
    className: "string",
    relevance: 0,
    variants: [
      hljs2.APOS_STRING_MODE,
      hljs2.QUOTE_STRING_MODE
    ]
  };
  const KEYWORDS2 = {
    literal: ".False. .True.",
    keyword: "kind do concurrent local shared while private call intrinsic where elsewhere type endtype endmodule endselect endinterface end enddo endif if forall endforall only contains default return stop then block endblock endassociate public subroutine|10 function program .and. .or. .not. .le. .eq. .ge. .gt. .lt. goto save else use module select case access blank direct exist file fmt form formatted iostat name named nextrec number opened rec recl sequential status unformatted unit continue format pause cycle exit c_null_char c_alert c_backspace c_form_feed flush wait decimal round iomsg synchronous nopass non_overridable pass protected volatile abstract extends import non_intrinsic value deferred generic final enumerator class associate bind enum c_int c_short c_long c_long_long c_signed_char c_size_t c_int8_t c_int16_t c_int32_t c_int64_t c_int_least8_t c_int_least16_t c_int_least32_t c_int_least64_t c_int_fast8_t c_int_fast16_t c_int_fast32_t c_int_fast64_t c_intmax_t C_intptr_t c_float c_double c_long_double c_float_complex c_double_complex c_long_double_complex c_bool c_char c_null_ptr c_null_funptr c_new_line c_carriage_return c_horizontal_tab c_vertical_tab iso_c_binding c_loc c_funloc c_associated  c_f_pointer c_ptr c_funptr iso_fortran_env character_storage_size error_unit file_storage_size input_unit iostat_end iostat_eor numeric_storage_size output_unit c_f_procpointer ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode newunit contiguous recursive pad position action delim readwrite eor advance nml interface procedure namelist include sequence elemental pure impure integer real character complex logical codimension dimension allocatable|10 parameter external implicit|10 none double precision assign intent optional pointer target in out common equivalence data",
    built_in: "alog alog10 amax0 amax1 amin0 amin1 amod cabs ccos cexp clog csin csqrt dabs dacos dasin datan datan2 dcos dcosh ddim dexp dint dlog dlog10 dmax1 dmin1 dmod dnint dsign dsin dsinh dsqrt dtan dtanh float iabs idim idint idnint ifix isign max0 max1 min0 min1 sngl algama cdabs cdcos cdexp cdlog cdsin cdsqrt cqabs cqcos cqexp cqlog cqsin cqsqrt dcmplx dconjg derf derfc dfloat dgamma dimag dlgama iqint qabs qacos qasin qatan qatan2 qcmplx qconjg qcos qcosh qdim qerf qerfc qexp qgamma qimag qlgama qlog qlog10 qmax1 qmin1 qmod qnint qsign qsin qsinh qsqrt qtan qtanh abs acos aimag aint anint asin atan atan2 char cmplx conjg cos cosh exp ichar index int log log10 max min nint sign sin sinh sqrt tan tanh print write dim lge lgt lle llt mod nullify allocate deallocate adjustl adjustr all allocated any associated bit_size btest ceiling count cshift date_and_time digits dot_product eoshift epsilon exponent floor fraction huge iand ibclr ibits ibset ieor ior ishft ishftc lbound len_trim matmul maxexponent maxloc maxval merge minexponent minloc minval modulo mvbits nearest pack present product radix random_number random_seed range repeat reshape rrspacing scale scan selected_int_kind selected_real_kind set_exponent shape size spacing spread sum system_clock tiny transpose trim ubound unpack verify achar iachar transfer dble entry dprod cpu_time command_argument_count get_command get_command_argument get_environment_variable is_iostat_end ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode is_iostat_eor move_alloc new_line selected_char_kind same_type_as extends_type_of acosh asinh atanh bessel_j0 bessel_j1 bessel_jn bessel_y0 bessel_y1 bessel_yn erf erfc erfc_scaled gamma log_gamma hypot norm2 atomic_define atomic_ref execute_command_line leadz trailz storage_size merge_bits bge bgt ble blt dshiftl dshiftr findloc iall iany iparity image_index lcobound ucobound maskl maskr num_images parity popcnt poppar shifta shiftl shiftr this_image sync change team co_broadcast co_max co_min co_sum co_reduce"
  };
  return {
    name: "Fortran",
    case_insensitive: true,
    aliases: [
      "f90",
      "f95"
    ],
    keywords: KEYWORDS2,
    illegal: /\/\*/,
    contains: [
      STRING,
      FUNCTION_DEF,
      {
        begin: /^C\s*=(?!=)/,
        relevance: 0
      },
      COMMENT2,
      NUMBER
    ]
  };
}
var fortran_1 = fortran;
function fsharp(hljs2) {
  const TYPEPARAM = {
    begin: "<",
    end: ">",
    contains: [
      hljs2.inherit(hljs2.TITLE_MODE, {
        begin: /'[a-zA-Z0-9_]+/
      })
    ]
  };
  return {
    name: "F#",
    aliases: ["fs"],
    keywords: "abstract and as assert base begin class default delegate do done downcast downto elif else end exception extern false finally for fun function global if in inherit inline interface internal lazy let match member module mutable namespace new null of open or override private public rec return sig static struct then to true try type upcast use val void when while with yield",
    illegal: /\/\*/,
    contains: [
      {
        className: "keyword",
        begin: /\b(yield|return|let|do)!/
      },
      {
        className: "string",
        begin: '@"',
        end: '"',
        contains: [
          {
            begin: '""'
          }
        ]
      },
      {
        className: "string",
        begin: '"""',
        end: '"""'
      },
      hljs2.COMMENT("\\(\\*(\\s)", "\\*\\)", {
        contains: ["self"]
      }),
      {
        className: "class",
        beginKeywords: "type",
        end: "\\(|=|$",
        excludeEnd: true,
        contains: [
          hljs2.UNDERSCORE_TITLE_MODE,
          TYPEPARAM
        ]
      },
      {
        className: "meta",
        begin: "\\[<",
        end: ">\\]",
        relevance: 10
      },
      {
        className: "symbol",
        begin: "\\B('[A-Za-z])\\b",
        contains: [hljs2.BACKSLASH_ESCAPE]
      },
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.inherit(hljs2.QUOTE_STRING_MODE, {
        illegal: null
      }),
      hljs2.C_NUMBER_MODE
    ]
  };
}
var fsharp_1 = fsharp;
function source$k(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function anyNumberOfTimes$2(re) {
  return concat$j("(", re, ")*");
}
function concat$j(...args) {
  const joined = args.map((x2) => source$k(x2)).join("");
  return joined;
}
function gams(hljs2) {
  const KEYWORDS2 = {
    keyword: "abort acronym acronyms alias all and assign binary card diag display else eq file files for free ge gt if integer le loop lt maximizing minimizing model models ne negative no not option options or ord positive prod put putpage puttl repeat sameas semicont semiint smax smin solve sos1 sos2 sum system table then until using while xor yes",
    literal: "eps inf na",
    built_in: "abs arccos arcsin arctan arctan2 Beta betaReg binomial ceil centropy cos cosh cvPower div div0 eDist entropy errorf execSeed exp fact floor frac gamma gammaReg log logBeta logGamma log10 log2 mapVal max min mod ncpCM ncpF ncpVUpow ncpVUsin normal pi poly power randBinomial randLinear randTriangle round rPower sigmoid sign signPower sin sinh slexp sllog10 slrec sqexp sqlog10 sqr sqrec sqrt tan tanh trunc uniform uniformInt vcPower bool_and bool_eqv bool_imp bool_not bool_or bool_xor ifThen rel_eq rel_ge rel_gt rel_le rel_lt rel_ne gday gdow ghour gleap gmillisec gminute gmonth gsecond gyear jdate jnow jstart jtime errorLevel execError gamsRelease gamsVersion handleCollect handleDelete handleStatus handleSubmit heapFree heapLimit heapSize jobHandle jobKill jobStatus jobTerminate licenseLevel licenseStatus maxExecError sleep timeClose timeComp timeElapsed timeExec timeStart"
  };
  const PARAMS = {
    className: "params",
    begin: /\(/,
    end: /\)/,
    excludeBegin: true,
    excludeEnd: true
  };
  const SYMBOLS = {
    className: "symbol",
    variants: [
      {
        begin: /=[lgenxc]=/
      },
      {
        begin: /\$/
      }
    ]
  };
  const QSTR = {
    className: "comment",
    variants: [
      {
        begin: "'",
        end: "'"
      },
      {
        begin: '"',
        end: '"'
      }
    ],
    illegal: "\\n",
    contains: [hljs2.BACKSLASH_ESCAPE]
  };
  const ASSIGNMENT = {
    begin: "/",
    end: "/",
    keywords: KEYWORDS2,
    contains: [
      QSTR,
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      hljs2.QUOTE_STRING_MODE,
      hljs2.APOS_STRING_MODE,
      hljs2.C_NUMBER_MODE
    ]
  };
  const COMMENT_WORD = /[a-z0-9&#*=?@\\><:,()$[\]_.{}!+%^-]+/;
  const DESCTEXT = {
    begin: /[a-z][a-z0-9_]*(\([a-z0-9_, ]*\))?[ \t]+/,
    excludeBegin: true,
    end: "$",
    endsWithParent: true,
    contains: [
      QSTR,
      ASSIGNMENT,
      {
        className: "comment",
        begin: concat$j(COMMENT_WORD, anyNumberOfTimes$2(concat$j(/[ ]+/, COMMENT_WORD))),
        relevance: 0
      }
    ]
  };
  return {
    name: "GAMS",
    aliases: ["gms"],
    case_insensitive: true,
    keywords: KEYWORDS2,
    contains: [
      hljs2.COMMENT(/^\$ontext/, /^\$offtext/),
      {
        className: "meta",
        begin: "^\\$[a-z0-9]+",
        end: "$",
        returnBegin: true,
        contains: [
          {
            className: "meta-keyword",
            begin: "^\\$[a-z0-9]+"
          }
        ]
      },
      hljs2.COMMENT("^\\*", "$"),
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      hljs2.QUOTE_STRING_MODE,
      hljs2.APOS_STRING_MODE,
      {
        beginKeywords: "set sets parameter parameters variable variables scalar scalars equation equations",
        end: ";",
        contains: [
          hljs2.COMMENT("^\\*", "$"),
          hljs2.C_LINE_COMMENT_MODE,
          hljs2.C_BLOCK_COMMENT_MODE,
          hljs2.QUOTE_STRING_MODE,
          hljs2.APOS_STRING_MODE,
          ASSIGNMENT,
          DESCTEXT
        ]
      },
      {
        beginKeywords: "table",
        end: ";",
        returnBegin: true,
        contains: [
          {
            beginKeywords: "table",
            end: "$",
            contains: [DESCTEXT]
          },
          hljs2.COMMENT("^\\*", "$"),
          hljs2.C_LINE_COMMENT_MODE,
          hljs2.C_BLOCK_COMMENT_MODE,
          hljs2.QUOTE_STRING_MODE,
          hljs2.APOS_STRING_MODE,
          hljs2.C_NUMBER_MODE
        ]
      },
      {
        className: "function",
        begin: /^[a-z][a-z0-9_,\-+' ()$]+\.{2}/,
        returnBegin: true,
        contains: [
          {
            className: "title",
            begin: /^[a-z0-9_]+/
          },
          PARAMS,
          SYMBOLS
        ]
      },
      hljs2.C_NUMBER_MODE,
      SYMBOLS
    ]
  };
}
var gams_1 = gams;
function gauss(hljs2) {
  const KEYWORDS2 = {
    keyword: "bool break call callexe checkinterrupt clear clearg closeall cls comlog compile continue create debug declare delete disable dlibrary dllcall do dos ed edit else elseif enable end endfor endif endp endo errorlog errorlogat expr external fn for format goto gosub graph if keyword let lib library line load loadarray loadexe loadf loadk loadm loadp loads loadx local locate loopnextindex lprint lpwidth lshow matrix msym ndpclex new open output outwidth plot plotsym pop prcsn print printdos proc push retp return rndcon rndmod rndmult rndseed run save saveall screen scroll setarray show sparse stop string struct system trace trap threadfor threadendfor threadbegin threadjoin threadstat threadend until use while winprint ne ge le gt lt and xor or not eq eqv",
    built_in: "abs acf aconcat aeye amax amean AmericanBinomCall AmericanBinomCall_Greeks AmericanBinomCall_ImpVol AmericanBinomPut AmericanBinomPut_Greeks AmericanBinomPut_ImpVol AmericanBSCall AmericanBSCall_Greeks AmericanBSCall_ImpVol AmericanBSPut AmericanBSPut_Greeks AmericanBSPut_ImpVol amin amult annotationGetDefaults annotationSetBkd annotationSetFont annotationSetLineColor annotationSetLineStyle annotationSetLineThickness annualTradingDays arccos arcsin areshape arrayalloc arrayindex arrayinit arraytomat asciiload asclabel astd astds asum atan atan2 atranspose axmargin balance band bandchol bandcholsol bandltsol bandrv bandsolpd bar base10 begwind besselj bessely beta box boxcox cdfBeta cdfBetaInv cdfBinomial cdfBinomialInv cdfBvn cdfBvn2 cdfBvn2e cdfCauchy cdfCauchyInv cdfChic cdfChii cdfChinc cdfChincInv cdfExp cdfExpInv cdfFc cdfFnc cdfFncInv cdfGam cdfGenPareto cdfHyperGeo cdfLaplace cdfLaplaceInv cdfLogistic cdfLogisticInv cdfmControlCreate cdfMvn cdfMvn2e cdfMvnce cdfMvne cdfMvt2e cdfMvtce cdfMvte cdfN cdfN2 cdfNc cdfNegBinomial cdfNegBinomialInv cdfNi cdfPoisson cdfPoissonInv cdfRayleigh cdfRayleighInv cdfTc cdfTci cdfTnc cdfTvn cdfWeibull cdfWeibullInv cdir ceil ChangeDir chdir chiBarSquare chol choldn cholsol cholup chrs close code cols colsf combinate combinated complex con cond conj cons ConScore contour conv convertsatostr convertstrtosa corrm corrms corrvc corrx corrxs cos cosh counts countwts crossprd crout croutp csrcol csrlin csvReadM csvReadSA cumprodc cumsumc curve cvtos datacreate datacreatecomplex datalist dataload dataloop dataopen datasave date datestr datestring datestrymd dayinyr dayofweek dbAddDatabase dbClose dbCommit dbCreateQuery dbExecQuery dbGetConnectOptions dbGetDatabaseName dbGetDriverName dbGetDrivers dbGetHostName dbGetLastErrorNum dbGetLastErrorText dbGetNumericalPrecPolicy dbGetPassword dbGetPort dbGetTableHeaders dbGetTables dbGetUserName dbHasFeature dbIsDriverAvailable dbIsOpen dbIsOpenError dbOpen dbQueryBindValue dbQueryClear dbQueryCols dbQueryExecPrepared dbQueryFetchAllM dbQueryFetchAllSA dbQueryFetchOneM dbQueryFetchOneSA dbQueryFinish dbQueryGetBoundValue dbQueryGetBoundValues dbQueryGetField dbQueryGetLastErrorNum dbQueryGetLastErrorText dbQueryGetLastInsertID dbQueryGetLastQuery dbQueryGetPosition dbQueryIsActive dbQueryIsForwardOnly dbQueryIsNull dbQueryIsSelect dbQueryIsValid dbQueryPrepare dbQueryRows dbQuerySeek dbQuerySeekFirst dbQuerySeekLast dbQuerySeekNext dbQuerySeekPrevious dbQuerySetForwardOnly dbRemoveDatabase dbRollback dbSetConnectOptions dbSetDatabaseName dbSetHostName dbSetNumericalPrecPolicy dbSetPort dbSetUserName dbTransaction DeleteFile delif delrows denseToSp denseToSpRE denToZero design det detl dfft dffti diag diagrv digamma doswin DOSWinCloseall DOSWinOpen dotfeq dotfeqmt dotfge dotfgemt dotfgt dotfgtmt dotfle dotflemt dotflt dotfltmt dotfne dotfnemt draw drop dsCreate dstat dstatmt dstatmtControlCreate dtdate dtday dttime dttodtv dttostr dttoutc dtvnormal dtvtodt dtvtoutc dummy dummybr dummydn eig eigh eighv eigv elapsedTradingDays endwind envget eof eqSolve eqSolvemt eqSolvemtControlCreate eqSolvemtOutCreate eqSolveset erf erfc erfccplx erfcplx error etdays ethsec etstr EuropeanBinomCall EuropeanBinomCall_Greeks EuropeanBinomCall_ImpVol EuropeanBinomPut EuropeanBinomPut_Greeks EuropeanBinomPut_ImpVol EuropeanBSCall EuropeanBSCall_Greeks EuropeanBSCall_ImpVol EuropeanBSPut EuropeanBSPut_Greeks EuropeanBSPut_ImpVol exctsmpl exec execbg exp extern eye fcheckerr fclearerr feq feqmt fflush fft ffti fftm fftmi fftn fge fgemt fgets fgetsa fgetsat fgetst fgt fgtmt fileinfo filesa fle flemt floor flt fltmt fmod fne fnemt fonts fopen formatcv formatnv fputs fputst fseek fstrerror ftell ftocv ftos ftostrC gamma gammacplx gammaii gausset gdaAppend gdaCreate gdaDStat gdaDStatMat gdaGetIndex gdaGetName gdaGetNames gdaGetOrders gdaGetType gdaGetTypes gdaGetVarInfo gdaIsCplx gdaLoad gdaPack gdaRead gdaReadByIndex gdaReadSome gdaReadSparse gdaReadStruct gdaReportVarInfo gdaSave gdaUpdate gdaUpdateAndPack gdaVars gdaWrite gdaWrite32 gdaWriteSome getarray getdims getf getGAUSShome getmatrix getmatrix4D getname getnamef getNextTradingDay getNextWeekDay getnr getorders getpath getPreviousTradingDay getPreviousWeekDay getRow getscalar3D getscalar4D getTrRow getwind glm gradcplx gradMT gradMTm gradMTT gradMTTm gradp graphprt graphset hasimag header headermt hess hessMT hessMTg hessMTgw hessMTm hessMTmw hessMTT hessMTTg hessMTTgw hessMTTm hessMTw hessp hist histf histp hsec imag indcv indexcat indices indices2 indicesf indicesfn indnv indsav integrate1d integrateControlCreate intgrat2 intgrat3 inthp1 inthp2 inthp3 inthp4 inthpControlCreate intquad1 intquad2 intquad3 intrleav intrleavsa intrsect intsimp inv invpd invswp iscplx iscplxf isden isinfnanmiss ismiss key keyav keyw lag lag1 lagn lapEighb lapEighi lapEighvb lapEighvi lapgEig lapgEigh lapgEighv lapgEigv lapgSchur lapgSvdcst lapgSvds lapgSvdst lapSvdcusv lapSvds lapSvdusv ldlp ldlsol linSolve listwise ln lncdfbvn lncdfbvn2 lncdfmvn lncdfn lncdfn2 lncdfnc lnfact lngammacplx lnpdfmvn lnpdfmvt lnpdfn lnpdft loadd loadstruct loadwind loess loessmt loessmtControlCreate log loglog logx logy lower lowmat lowmat1 ltrisol lu lusol machEpsilon make makevars makewind margin matalloc matinit mattoarray maxbytes maxc maxindc maxv maxvec mbesselei mbesselei0 mbesselei1 mbesseli mbesseli0 mbesseli1 meanc median mergeby mergevar minc minindc minv miss missex missrv moment momentd movingave movingaveExpwgt movingaveWgt nextindex nextn nextnevn nextwind ntos null null1 numCombinations ols olsmt olsmtControlCreate olsqr olsqr2 olsqrmt ones optn optnevn orth outtyp pacf packedToSp packr parse pause pdfCauchy pdfChi pdfExp pdfGenPareto pdfHyperGeo pdfLaplace pdfLogistic pdfn pdfPoisson pdfRayleigh pdfWeibull pi pinv pinvmt plotAddArrow plotAddBar plotAddBox plotAddHist plotAddHistF plotAddHistP plotAddPolar plotAddScatter plotAddShape plotAddTextbox plotAddTS plotAddXY plotArea plotBar plotBox plotClearLayout plotContour plotCustomLayout plotGetDefaults plotHist plotHistF plotHistP plotLayout plotLogLog plotLogX plotLogY plotOpenWindow plotPolar plotSave plotScatter plotSetAxesPen plotSetBar plotSetBarFill plotSetBarStacked plotSetBkdColor plotSetFill plotSetGrid plotSetLegend plotSetLineColor plotSetLineStyle plotSetLineSymbol plotSetLineThickness plotSetNewWindow plotSetTitle plotSetWhichYAxis plotSetXAxisShow plotSetXLabel plotSetXRange plotSetXTicInterval plotSetXTicLabel plotSetYAxisShow plotSetYLabel plotSetYRange plotSetZAxisShow plotSetZLabel plotSurface plotTS plotXY polar polychar polyeval polygamma polyint polymake polymat polymroot polymult polyroot pqgwin previousindex princomp printfm printfmt prodc psi putarray putf putvals pvCreate pvGetIndex pvGetParNames pvGetParVector pvLength pvList pvPack pvPacki pvPackm pvPackmi pvPacks pvPacksi pvPacksm pvPacksmi pvPutParVector pvTest pvUnpack QNewton QNewtonmt QNewtonmtControlCreate QNewtonmtOutCreate QNewtonSet QProg QProgmt QProgmtInCreate qqr qqre qqrep qr qre qrep qrsol qrtsol qtyr qtyre qtyrep quantile quantiled qyr qyre qyrep qz rank rankindx readr real reclassify reclassifyCuts recode recserar recsercp recserrc rerun rescale reshape rets rev rfft rffti rfftip rfftn rfftnp rfftp rndBernoulli rndBeta rndBinomial rndCauchy rndChiSquare rndCon rndCreateState rndExp rndGamma rndGeo rndGumbel rndHyperGeo rndi rndKMbeta rndKMgam rndKMi rndKMn rndKMnb rndKMp rndKMu rndKMvm rndLaplace rndLCbeta rndLCgam rndLCi rndLCn rndLCnb rndLCp rndLCu rndLCvm rndLogNorm rndMTu rndMVn rndMVt rndn rndnb rndNegBinomial rndp rndPoisson rndRayleigh rndStateSkip rndu rndvm rndWeibull rndWishart rotater round rows rowsf rref sampleData satostrC saved saveStruct savewind scale scale3d scalerr scalinfnanmiss scalmiss schtoc schur searchsourcepath seekr select selif seqa seqm setdif setdifsa setvars setvwrmode setwind shell shiftr sin singleindex sinh sleep solpd sortc sortcc sortd sorthc sorthcc sortind sortindc sortmc sortr sortrc spBiconjGradSol spChol spConjGradSol spCreate spDenseSubmat spDiagRvMat spEigv spEye spLDL spline spLU spNumNZE spOnes spreadSheetReadM spreadSheetReadSA spreadSheetWrite spScale spSubmat spToDense spTrTDense spTScalar spZeros sqpSolve sqpSolveMT sqpSolveMTControlCreate sqpSolveMTlagrangeCreate sqpSolveMToutCreate sqpSolveSet sqrt statements stdc stdsc stocv stof strcombine strindx strlen strput strrindx strsect strsplit strsplitPad strtodt strtof strtofcplx strtriml strtrimr strtrunc strtruncl strtruncpad strtruncr submat subscat substute subvec sumc sumr surface svd svd1 svd2 svdcusv svds svdusv sysstate tab tan tanh tempname time timedt timestr timeutc title tkf2eps tkf2ps tocart todaydt toeplitz token topolar trapchk trigamma trimr trunc type typecv typef union unionsa uniqindx uniqindxsa unique uniquesa upmat upmat1 upper utctodt utctodtv utrisol vals varCovMS varCovXS varget vargetl varmall varmares varput varputl vartypef vcm vcms vcx vcxs vec vech vecr vector vget view viewxyz vlist vnamecv volume vput vread vtypecv wait waitc walkindex where window writer xlabel xlsGetSheetCount xlsGetSheetSize xlsGetSheetTypes xlsMakeRange xlsReadM xlsReadSA xlsWrite xlsWriteM xlsWriteSA xpnd xtics xy xyz ylabel ytics zeros zeta zlabel ztics cdfEmpirical dot h5create h5open h5read h5readAttribute h5write h5writeAttribute ldl plotAddErrorBar plotAddSurface plotCDFEmpirical plotSetColormap plotSetContourLabels plotSetLegendFont plotSetTextInterpreter plotSetXTicCount plotSetYTicCount plotSetZLevels powerm strjoin sylvester strtrim",
    literal: "DB_AFTER_LAST_ROW DB_ALL_TABLES DB_BATCH_OPERATIONS DB_BEFORE_FIRST_ROW DB_BLOB DB_EVENT_NOTIFICATIONS DB_FINISH_QUERY DB_HIGH_PRECISION DB_LAST_INSERT_ID DB_LOW_PRECISION_DOUBLE DB_LOW_PRECISION_INT32 DB_LOW_PRECISION_INT64 DB_LOW_PRECISION_NUMBERS DB_MULTIPLE_RESULT_SETS DB_NAMED_PLACEHOLDERS DB_POSITIONAL_PLACEHOLDERS DB_PREPARED_QUERIES DB_QUERY_SIZE DB_SIMPLE_LOCKING DB_SYSTEM_TABLES DB_TABLES DB_TRANSACTIONS DB_UNICODE DB_VIEWS __STDIN __STDOUT __STDERR __FILE_DIR"
  };
  const AT_COMMENT_MODE = hljs2.COMMENT("@", "@");
  const PREPROCESSOR = {
    className: "meta",
    begin: "#",
    end: "$",
    keywords: {
      "meta-keyword": "define definecs|10 undef ifdef ifndef iflight ifdllcall ifmac ifos2win ifunix else endif lineson linesoff srcfile srcline"
    },
    contains: [
      {
        begin: /\\\n/,
        relevance: 0
      },
      {
        beginKeywords: "include",
        end: "$",
        keywords: {
          "meta-keyword": "include"
        },
        contains: [
          {
            className: "meta-string",
            begin: '"',
            end: '"',
            illegal: "\\n"
          }
        ]
      },
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      AT_COMMENT_MODE
    ]
  };
  const STRUCT_TYPE = {
    begin: /\bstruct\s+/,
    end: /\s/,
    keywords: "struct",
    contains: [
      {
        className: "type",
        begin: hljs2.UNDERSCORE_IDENT_RE,
        relevance: 0
      }
    ]
  };
  const PARSE_PARAMS = [
    {
      className: "params",
      begin: /\(/,
      end: /\)/,
      excludeBegin: true,
      excludeEnd: true,
      endsWithParent: true,
      relevance: 0,
      contains: [
        {
          className: "literal",
          begin: /\.\.\./
        },
        hljs2.C_NUMBER_MODE,
        hljs2.C_BLOCK_COMMENT_MODE,
        AT_COMMENT_MODE,
        STRUCT_TYPE
      ]
    }
  ];
  const FUNCTION_DEF = {
    className: "title",
    begin: hljs2.UNDERSCORE_IDENT_RE,
    relevance: 0
  };
  const DEFINITION = function(beginKeywords2, end, inherits) {
    const mode = hljs2.inherit({
      className: "function",
      beginKeywords: beginKeywords2,
      end,
      excludeEnd: true,
      contains: [].concat(PARSE_PARAMS)
    }, inherits || {});
    mode.contains.push(FUNCTION_DEF);
    mode.contains.push(hljs2.C_NUMBER_MODE);
    mode.contains.push(hljs2.C_BLOCK_COMMENT_MODE);
    mode.contains.push(AT_COMMENT_MODE);
    return mode;
  };
  const BUILT_IN_REF = {
    className: "built_in",
    begin: "\\b(" + KEYWORDS2.built_in.split(" ").join("|") + ")\\b"
  };
  const STRING_REF = {
    className: "string",
    begin: '"',
    end: '"',
    contains: [hljs2.BACKSLASH_ESCAPE],
    relevance: 0
  };
  const FUNCTION_REF = {
    begin: hljs2.UNDERSCORE_IDENT_RE + "\\s*\\(",
    returnBegin: true,
    keywords: KEYWORDS2,
    relevance: 0,
    contains: [
      {
        beginKeywords: KEYWORDS2.keyword
      },
      BUILT_IN_REF,
      {
        className: "built_in",
        begin: hljs2.UNDERSCORE_IDENT_RE,
        relevance: 0
      }
    ]
  };
  const FUNCTION_REF_PARAMS = {
    begin: /\(/,
    end: /\)/,
    relevance: 0,
    keywords: {
      built_in: KEYWORDS2.built_in,
      literal: KEYWORDS2.literal
    },
    contains: [
      hljs2.C_NUMBER_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      AT_COMMENT_MODE,
      BUILT_IN_REF,
      FUNCTION_REF,
      STRING_REF,
      "self"
    ]
  };
  FUNCTION_REF.contains.push(FUNCTION_REF_PARAMS);
  return {
    name: "GAUSS",
    aliases: ["gss"],
    case_insensitive: true,
    keywords: KEYWORDS2,
    illegal: /(\{[%#]|[%#]\}| <- )/,
    contains: [
      hljs2.C_NUMBER_MODE,
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      AT_COMMENT_MODE,
      STRING_REF,
      PREPROCESSOR,
      {
        className: "keyword",
        begin: /\bexternal (matrix|string|array|sparse matrix|struct|proc|keyword|fn)/
      },
      DEFINITION("proc keyword", ";"),
      DEFINITION("fn", "="),
      {
        beginKeywords: "for threadfor",
        end: /;/,
        relevance: 0,
        contains: [
          hljs2.C_BLOCK_COMMENT_MODE,
          AT_COMMENT_MODE,
          FUNCTION_REF_PARAMS
        ]
      },
      {
        variants: [
          {
            begin: hljs2.UNDERSCORE_IDENT_RE + "\\." + hljs2.UNDERSCORE_IDENT_RE
          },
          {
            begin: hljs2.UNDERSCORE_IDENT_RE + "\\s*="
          }
        ],
        relevance: 0
      },
      FUNCTION_REF,
      STRUCT_TYPE
    ]
  };
}
var gauss_1 = gauss;
function gcode(hljs2) {
  const GCODE_IDENT_RE = "[A-Z_][A-Z0-9_.]*";
  const GCODE_CLOSE_RE = "%";
  const GCODE_KEYWORDS = {
    $pattern: GCODE_IDENT_RE,
    keyword: "IF DO WHILE ENDWHILE CALL ENDIF SUB ENDSUB GOTO REPEAT ENDREPEAT EQ LT GT NE GE LE OR XOR"
  };
  const GCODE_START = {
    className: "meta",
    begin: "([O])([0-9]+)"
  };
  const NUMBER = hljs2.inherit(hljs2.C_NUMBER_MODE, {
    begin: "([-+]?((\\.\\d+)|(\\d+)(\\.\\d*)?))|" + hljs2.C_NUMBER_RE
  });
  const GCODE_CODE = [
    hljs2.C_LINE_COMMENT_MODE,
    hljs2.C_BLOCK_COMMENT_MODE,
    hljs2.COMMENT(/\(/, /\)/),
    NUMBER,
    hljs2.inherit(hljs2.APOS_STRING_MODE, {
      illegal: null
    }),
    hljs2.inherit(hljs2.QUOTE_STRING_MODE, {
      illegal: null
    }),
    {
      className: "name",
      begin: "([G])([0-9]+\\.?[0-9]?)"
    },
    {
      className: "name",
      begin: "([M])([0-9]+\\.?[0-9]?)"
    },
    {
      className: "attr",
      begin: "(VC|VS|#)",
      end: "(\\d+)"
    },
    {
      className: "attr",
      begin: "(VZOFX|VZOFY|VZOFZ)"
    },
    {
      className: "built_in",
      begin: "(ATAN|ABS|ACOS|ASIN|SIN|COS|EXP|FIX|FUP|ROUND|LN|TAN)(\\[)",
      contains: [
        NUMBER
      ],
      end: "\\]"
    },
    {
      className: "symbol",
      variants: [
        {
          begin: "N",
          end: "\\d+",
          illegal: "\\W"
        }
      ]
    }
  ];
  return {
    name: "G-code (ISO 6983)",
    aliases: ["nc"],
    case_insensitive: true,
    keywords: GCODE_KEYWORDS,
    contains: [
      {
        className: "meta",
        begin: GCODE_CLOSE_RE
      },
      GCODE_START
    ].concat(GCODE_CODE)
  };
}
var gcode_1 = gcode;
function gherkin(hljs2) {
  return {
    name: "Gherkin",
    aliases: ["feature"],
    keywords: "Feature Background Ability Business Need Scenario Scenarios Scenario Outline Scenario Template Examples Given And Then But When",
    contains: [
      {
        className: "symbol",
        begin: "\\*",
        relevance: 0
      },
      {
        className: "meta",
        begin: "@[^@\\s]+"
      },
      {
        begin: "\\|",
        end: "\\|\\w*$",
        contains: [
          {
            className: "string",
            begin: "[^|]+"
          }
        ]
      },
      {
        className: "variable",
        begin: "<",
        end: ">"
      },
      hljs2.HASH_COMMENT_MODE,
      {
        className: "string",
        begin: '"""',
        end: '"""'
      },
      hljs2.QUOTE_STRING_MODE
    ]
  };
}
var gherkin_1 = gherkin;
function glsl(hljs2) {
  return {
    name: "GLSL",
    keywords: {
      keyword: "break continue discard do else for if return while switch case default attribute binding buffer ccw centroid centroid varying coherent column_major const cw depth_any depth_greater depth_less depth_unchanged early_fragment_tests equal_spacing flat fractional_even_spacing fractional_odd_spacing highp in index inout invariant invocations isolines layout line_strip lines lines_adjacency local_size_x local_size_y local_size_z location lowp max_vertices mediump noperspective offset origin_upper_left out packed patch pixel_center_integer point_mode points precise precision quads r11f_g11f_b10f r16 r16_snorm r16f r16i r16ui r32f r32i r32ui r8 r8_snorm r8i r8ui readonly restrict rg16 rg16_snorm rg16f rg16i rg16ui rg32f rg32i rg32ui rg8 rg8_snorm rg8i rg8ui rgb10_a2 rgb10_a2ui rgba16 rgba16_snorm rgba16f rgba16i rgba16ui rgba32f rgba32i rgba32ui rgba8 rgba8_snorm rgba8i rgba8ui row_major sample shared smooth std140 std430 stream triangle_strip triangles triangles_adjacency uniform varying vertices volatile writeonly",
      type: "atomic_uint bool bvec2 bvec3 bvec4 dmat2 dmat2x2 dmat2x3 dmat2x4 dmat3 dmat3x2 dmat3x3 dmat3x4 dmat4 dmat4x2 dmat4x3 dmat4x4 double dvec2 dvec3 dvec4 float iimage1D iimage1DArray iimage2D iimage2DArray iimage2DMS iimage2DMSArray iimage2DRect iimage3D iimageBuffer iimageCube iimageCubeArray image1D image1DArray image2D image2DArray image2DMS image2DMSArray image2DRect image3D imageBuffer imageCube imageCubeArray int isampler1D isampler1DArray isampler2D isampler2DArray isampler2DMS isampler2DMSArray isampler2DRect isampler3D isamplerBuffer isamplerCube isamplerCubeArray ivec2 ivec3 ivec4 mat2 mat2x2 mat2x3 mat2x4 mat3 mat3x2 mat3x3 mat3x4 mat4 mat4x2 mat4x3 mat4x4 sampler1D sampler1DArray sampler1DArrayShadow sampler1DShadow sampler2D sampler2DArray sampler2DArrayShadow sampler2DMS sampler2DMSArray sampler2DRect sampler2DRectShadow sampler2DShadow sampler3D samplerBuffer samplerCube samplerCubeArray samplerCubeArrayShadow samplerCubeShadow image1D uimage1DArray uimage2D uimage2DArray uimage2DMS uimage2DMSArray uimage2DRect uimage3D uimageBuffer uimageCube uimageCubeArray uint usampler1D usampler1DArray usampler2D usampler2DArray usampler2DMS usampler2DMSArray usampler2DRect usampler3D samplerBuffer usamplerCube usamplerCubeArray uvec2 uvec3 uvec4 vec2 vec3 vec4 void",
      built_in: "gl_MaxAtomicCounterBindings gl_MaxAtomicCounterBufferSize gl_MaxClipDistances gl_MaxClipPlanes gl_MaxCombinedAtomicCounterBuffers gl_MaxCombinedAtomicCounters gl_MaxCombinedImageUniforms gl_MaxCombinedImageUnitsAndFragmentOutputs gl_MaxCombinedTextureImageUnits gl_MaxComputeAtomicCounterBuffers gl_MaxComputeAtomicCounters gl_MaxComputeImageUniforms gl_MaxComputeTextureImageUnits gl_MaxComputeUniformComponents gl_MaxComputeWorkGroupCount gl_MaxComputeWorkGroupSize gl_MaxDrawBuffers gl_MaxFragmentAtomicCounterBuffers gl_MaxFragmentAtomicCounters gl_MaxFragmentImageUniforms gl_MaxFragmentInputComponents gl_MaxFragmentInputVectors gl_MaxFragmentUniformComponents gl_MaxFragmentUniformVectors gl_MaxGeometryAtomicCounterBuffers gl_MaxGeometryAtomicCounters gl_MaxGeometryImageUniforms gl_MaxGeometryInputComponents gl_MaxGeometryOutputComponents gl_MaxGeometryOutputVertices gl_MaxGeometryTextureImageUnits gl_MaxGeometryTotalOutputComponents gl_MaxGeometryUniformComponents gl_MaxGeometryVaryingComponents gl_MaxImageSamples gl_MaxImageUnits gl_MaxLights gl_MaxPatchVertices gl_MaxProgramTexelOffset gl_MaxTessControlAtomicCounterBuffers gl_MaxTessControlAtomicCounters gl_MaxTessControlImageUniforms gl_MaxTessControlInputComponents gl_MaxTessControlOutputComponents gl_MaxTessControlTextureImageUnits gl_MaxTessControlTotalOutputComponents gl_MaxTessControlUniformComponents gl_MaxTessEvaluationAtomicCounterBuffers gl_MaxTessEvaluationAtomicCounters gl_MaxTessEvaluationImageUniforms gl_MaxTessEvaluationInputComponents gl_MaxTessEvaluationOutputComponents gl_MaxTessEvaluationTextureImageUnits gl_MaxTessEvaluationUniformComponents gl_MaxTessGenLevel gl_MaxTessPatchComponents gl_MaxTextureCoords gl_MaxTextureImageUnits gl_MaxTextureUnits gl_MaxVaryingComponents gl_MaxVaryingFloats gl_MaxVaryingVectors gl_MaxVertexAtomicCounterBuffers gl_MaxVertexAtomicCounters gl_MaxVertexAttribs gl_MaxVertexImageUniforms gl_MaxVertexOutputComponents gl_MaxVertexOutputVectors gl_MaxVertexTextureImageUnits gl_MaxVertexUniformComponents gl_MaxVertexUniformVectors gl_MaxViewports gl_MinProgramTexelOffset gl_BackColor gl_BackLightModelProduct gl_BackLightProduct gl_BackMaterial gl_BackSecondaryColor gl_ClipDistance gl_ClipPlane gl_ClipVertex gl_Color gl_DepthRange gl_EyePlaneQ gl_EyePlaneR gl_EyePlaneS gl_EyePlaneT gl_Fog gl_FogCoord gl_FogFragCoord gl_FragColor gl_FragCoord gl_FragData gl_FragDepth gl_FrontColor gl_FrontFacing gl_FrontLightModelProduct gl_FrontLightProduct gl_FrontMaterial gl_FrontSecondaryColor gl_GlobalInvocationID gl_InstanceID gl_InvocationID gl_Layer gl_LightModel gl_LightSource gl_LocalInvocationID gl_LocalInvocationIndex gl_ModelViewMatrix gl_ModelViewMatrixInverse gl_ModelViewMatrixInverseTranspose gl_ModelViewMatrixTranspose gl_ModelViewProjectionMatrix gl_ModelViewProjectionMatrixInverse gl_ModelViewProjectionMatrixInverseTranspose gl_ModelViewProjectionMatrixTranspose gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 gl_Normal gl_NormalMatrix gl_NormalScale gl_NumSamples gl_NumWorkGroups gl_ObjectPlaneQ gl_ObjectPlaneR gl_ObjectPlaneS gl_ObjectPlaneT gl_PatchVerticesIn gl_Point gl_PointCoord gl_PointSize gl_Position gl_PrimitiveID gl_PrimitiveIDIn gl_ProjectionMatrix gl_ProjectionMatrixInverse gl_ProjectionMatrixInverseTranspose gl_ProjectionMatrixTranspose gl_SampleID gl_SampleMask gl_SampleMaskIn gl_SamplePosition gl_SecondaryColor gl_TessCoord gl_TessLevelInner gl_TessLevelOuter gl_TexCoord gl_TextureEnvColor gl_TextureMatrix gl_TextureMatrixInverse gl_TextureMatrixInverseTranspose gl_TextureMatrixTranspose gl_Vertex gl_VertexID gl_ViewportIndex gl_WorkGroupID gl_WorkGroupSize gl_in gl_out EmitStreamVertex EmitVertex EndPrimitive EndStreamPrimitive abs acos acosh all any asin asinh atan atanh atomicAdd atomicAnd atomicCompSwap atomicCounter atomicCounterDecrement atomicCounterIncrement atomicExchange atomicMax atomicMin atomicOr atomicXor barrier bitCount bitfieldExtract bitfieldInsert bitfieldReverse ceil clamp cos cosh cross dFdx dFdy degrees determinant distance dot equal exp exp2 faceforward findLSB findMSB floatBitsToInt floatBitsToUint floor fma fract frexp ftransform fwidth greaterThan greaterThanEqual groupMemoryBarrier imageAtomicAdd imageAtomicAnd imageAtomicCompSwap imageAtomicExchange imageAtomicMax imageAtomicMin imageAtomicOr imageAtomicXor imageLoad imageSize imageStore imulExtended intBitsToFloat interpolateAtCentroid interpolateAtOffset interpolateAtSample inverse inversesqrt isinf isnan ldexp length lessThan lessThanEqual log log2 matrixCompMult max memoryBarrier memoryBarrierAtomicCounter memoryBarrierBuffer memoryBarrierImage memoryBarrierShared min mix mod modf noise1 noise2 noise3 noise4 normalize not notEqual outerProduct packDouble2x32 packHalf2x16 packSnorm2x16 packSnorm4x8 packUnorm2x16 packUnorm4x8 pow radians reflect refract round roundEven shadow1D shadow1DLod shadow1DProj shadow1DProjLod shadow2D shadow2DLod shadow2DProj shadow2DProjLod sign sin sinh smoothstep sqrt step tan tanh texelFetch texelFetchOffset texture texture1D texture1DLod texture1DProj texture1DProjLod texture2D texture2DLod texture2DProj texture2DProjLod texture3D texture3DLod texture3DProj texture3DProjLod textureCube textureCubeLod textureGather textureGatherOffset textureGatherOffsets textureGrad textureGradOffset textureLod textureLodOffset textureOffset textureProj textureProjGrad textureProjGradOffset textureProjLod textureProjLodOffset textureProjOffset textureQueryLevels textureQueryLod textureSize transpose trunc uaddCarry uintBitsToFloat umulExtended unpackDouble2x32 unpackHalf2x16 unpackSnorm2x16 unpackSnorm4x8 unpackUnorm2x16 unpackUnorm4x8 usubBorrow",
      literal: "true false"
    },
    illegal: '"',
    contains: [
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      hljs2.C_NUMBER_MODE,
      {
        className: "meta",
        begin: "#",
        end: "$"
      }
    ]
  };
}
var glsl_1 = glsl;
function gml(hljs2) {
  const GML_KEYWORDS = {
    keyword: "begin end if then else while do for break continue with until repeat exit and or xor not return mod div switch case default var globalvar enum function constructor delete #macro #region #endregion",
    built_in: "is_real is_string is_array is_undefined is_int32 is_int64 is_ptr is_vec3 is_vec4 is_matrix is_bool is_method is_struct is_infinity is_nan is_numeric typeof variable_global_exists variable_global_get variable_global_set variable_instance_exists variable_instance_get variable_instance_set variable_instance_get_names variable_struct_exists variable_struct_get variable_struct_get_names variable_struct_names_count variable_struct_remove variable_struct_set array_delete array_insert array_length array_length_1d array_length_2d array_height_2d array_equals array_create array_copy array_pop array_push array_resize array_sort random random_range irandom irandom_range random_set_seed random_get_seed randomize randomise choose abs round floor ceil sign frac sqrt sqr exp ln log2 log10 sin cos tan arcsin arccos arctan arctan2 dsin dcos dtan darcsin darccos darctan darctan2 degtorad radtodeg power logn min max mean median clamp lerp dot_product dot_product_3d dot_product_normalised dot_product_3d_normalised dot_product_normalized dot_product_3d_normalized math_set_epsilon math_get_epsilon angle_difference point_distance_3d point_distance point_direction lengthdir_x lengthdir_y real string int64 ptr string_format chr ansi_char ord string_length string_byte_length string_pos string_copy string_char_at string_ord_at string_byte_at string_set_byte_at string_delete string_insert string_lower string_upper string_repeat string_letters string_digits string_lettersdigits string_replace string_replace_all string_count string_hash_to_newline clipboard_has_text clipboard_set_text clipboard_get_text date_current_datetime date_create_datetime date_valid_datetime date_inc_year date_inc_month date_inc_week date_inc_day date_inc_hour date_inc_minute date_inc_second date_get_year date_get_month date_get_week date_get_day date_get_hour date_get_minute date_get_second date_get_weekday date_get_day_of_year date_get_hour_of_year date_get_minute_of_year date_get_second_of_year date_year_span date_month_span date_week_span date_day_span date_hour_span date_minute_span date_second_span date_compare_datetime date_compare_date date_compare_time date_date_of date_time_of date_datetime_string date_date_string date_time_string date_days_in_month date_days_in_year date_leap_year date_is_today date_set_timezone date_get_timezone game_set_speed game_get_speed motion_set motion_add place_free place_empty place_meeting place_snapped move_random move_snap move_towards_point move_contact_solid move_contact_all move_outside_solid move_outside_all move_bounce_solid move_bounce_all move_wrap distance_to_point distance_to_object position_empty position_meeting path_start path_end mp_linear_step mp_potential_step mp_linear_step_object mp_potential_step_object mp_potential_settings mp_linear_path mp_potential_path mp_linear_path_object mp_potential_path_object mp_grid_create mp_grid_destroy mp_grid_clear_all mp_grid_clear_cell mp_grid_clear_rectangle mp_grid_add_cell mp_grid_get_cell mp_grid_add_rectangle mp_grid_add_instances mp_grid_path mp_grid_draw mp_grid_to_ds_grid collision_point collision_rectangle collision_circle collision_ellipse collision_line collision_point_list collision_rectangle_list collision_circle_list collision_ellipse_list collision_line_list instance_position_list instance_place_list point_in_rectangle point_in_triangle point_in_circle rectangle_in_rectangle rectangle_in_triangle rectangle_in_circle instance_find instance_exists instance_number instance_position instance_nearest instance_furthest instance_place instance_create_depth instance_create_layer instance_copy instance_change instance_destroy position_destroy position_change instance_id_get instance_deactivate_all instance_deactivate_object instance_deactivate_region instance_activate_all instance_activate_object instance_activate_region room_goto room_goto_previous room_goto_next room_previous room_next room_restart game_end game_restart game_load game_save game_save_buffer game_load_buffer event_perform event_user event_perform_object event_inherited show_debug_message show_debug_overlay debug_event debug_get_callstack alarm_get alarm_set font_texture_page_size keyboard_set_map keyboard_get_map keyboard_unset_map keyboard_check keyboard_check_pressed keyboard_check_released keyboard_check_direct keyboard_get_numlock keyboard_set_numlock keyboard_key_press keyboard_key_release keyboard_clear io_clear mouse_check_button mouse_check_button_pressed mouse_check_button_released mouse_wheel_up mouse_wheel_down mouse_clear draw_self draw_sprite draw_sprite_pos draw_sprite_ext draw_sprite_stretched draw_sprite_stretched_ext draw_sprite_tiled draw_sprite_tiled_ext draw_sprite_part draw_sprite_part_ext draw_sprite_general draw_clear draw_clear_alpha draw_point draw_line draw_line_width draw_rectangle draw_roundrect draw_roundrect_ext draw_triangle draw_circle draw_ellipse draw_set_circle_precision draw_arrow draw_button draw_path draw_healthbar draw_getpixel draw_getpixel_ext draw_set_colour draw_set_color draw_set_alpha draw_get_colour draw_get_color draw_get_alpha merge_colour make_colour_rgb make_colour_hsv colour_get_red colour_get_green colour_get_blue colour_get_hue colour_get_saturation colour_get_value merge_color make_color_rgb make_color_hsv color_get_red color_get_green color_get_blue color_get_hue color_get_saturation color_get_value merge_color screen_save screen_save_part draw_set_font draw_set_halign draw_set_valign draw_text draw_text_ext string_width string_height string_width_ext string_height_ext draw_text_transformed draw_text_ext_transformed draw_text_colour draw_text_ext_colour draw_text_transformed_colour draw_text_ext_transformed_colour draw_text_color draw_text_ext_color draw_text_transformed_color draw_text_ext_transformed_color draw_point_colour draw_line_colour draw_line_width_colour draw_rectangle_colour draw_roundrect_colour draw_roundrect_colour_ext draw_triangle_colour draw_circle_colour draw_ellipse_colour draw_point_color draw_line_color draw_line_width_color draw_rectangle_color draw_roundrect_color draw_roundrect_color_ext draw_triangle_color draw_circle_color draw_ellipse_color draw_primitive_begin draw_vertex draw_vertex_colour draw_vertex_color draw_primitive_end sprite_get_uvs font_get_uvs sprite_get_texture font_get_texture texture_get_width texture_get_height texture_get_uvs draw_primitive_begin_texture draw_vertex_texture draw_vertex_texture_colour draw_vertex_texture_color texture_global_scale surface_create surface_create_ext surface_resize surface_free surface_exists surface_get_width surface_get_height surface_get_texture surface_set_target surface_set_target_ext surface_reset_target surface_depth_disable surface_get_depth_disable draw_surface draw_surface_stretched draw_surface_tiled draw_surface_part draw_surface_ext draw_surface_stretched_ext draw_surface_tiled_ext draw_surface_part_ext draw_surface_general surface_getpixel surface_getpixel_ext surface_save surface_save_part surface_copy surface_copy_part application_surface_draw_enable application_get_position application_surface_enable application_surface_is_enabled display_get_width display_get_height display_get_orientation display_get_gui_width display_get_gui_height display_reset display_mouse_get_x display_mouse_get_y display_mouse_set display_set_ui_visibility window_set_fullscreen window_get_fullscreen window_set_caption window_set_min_width window_set_max_width window_set_min_height window_set_max_height window_get_visible_rects window_get_caption window_set_cursor window_get_cursor window_set_colour window_get_colour window_set_color window_get_color window_set_position window_set_size window_set_rectangle window_center window_get_x window_get_y window_get_width window_get_height window_mouse_get_x window_mouse_get_y window_mouse_set window_view_mouse_get_x window_view_mouse_get_y window_views_mouse_get_x window_views_mouse_get_y audio_listener_position audio_listener_velocity audio_listener_orientation audio_emitter_position audio_emitter_create audio_emitter_free audio_emitter_exists audio_emitter_pitch audio_emitter_velocity audio_emitter_falloff audio_emitter_gain audio_play_sound audio_play_sound_on audio_play_sound_at audio_stop_sound audio_resume_music audio_music_is_playing audio_resume_sound audio_pause_sound audio_pause_music audio_channel_num audio_sound_length audio_get_type audio_falloff_set_model audio_play_music audio_stop_music audio_master_gain audio_music_gain audio_sound_gain audio_sound_pitch audio_stop_all audio_resume_all audio_pause_all audio_is_playing audio_is_paused audio_exists audio_sound_set_track_position audio_sound_get_track_position audio_emitter_get_gain audio_emitter_get_pitch audio_emitter_get_x audio_emitter_get_y audio_emitter_get_z audio_emitter_get_vx audio_emitter_get_vy audio_emitter_get_vz audio_listener_set_position audio_listener_set_velocity audio_listener_set_orientation audio_listener_get_data audio_set_master_gain audio_get_master_gain audio_sound_get_gain audio_sound_get_pitch audio_get_name audio_sound_set_track_position audio_sound_get_track_position audio_create_stream audio_destroy_stream audio_create_sync_group audio_destroy_sync_group audio_play_in_sync_group audio_start_sync_group audio_stop_sync_group audio_pause_sync_group audio_resume_sync_group audio_sync_group_get_track_pos audio_sync_group_debug audio_sync_group_is_playing audio_debug audio_group_load audio_group_unload audio_group_is_loaded audio_group_load_progress audio_group_name audio_group_stop_all audio_group_set_gain audio_create_buffer_sound audio_free_buffer_sound audio_create_play_queue audio_free_play_queue audio_queue_sound audio_get_recorder_count audio_get_recorder_info audio_start_recording audio_stop_recording audio_sound_get_listener_mask audio_emitter_get_listener_mask audio_get_listener_mask audio_sound_set_listener_mask audio_emitter_set_listener_mask audio_set_listener_mask audio_get_listener_count audio_get_listener_info audio_system show_message show_message_async clickable_add clickable_add_ext clickable_change clickable_change_ext clickable_delete clickable_exists clickable_set_style show_question show_question_async get_integer get_string get_integer_async get_string_async get_login_async get_open_filename get_save_filename get_open_filename_ext get_save_filename_ext show_error highscore_clear highscore_add highscore_value highscore_name draw_highscore sprite_exists sprite_get_name sprite_get_number sprite_get_width sprite_get_height sprite_get_xoffset sprite_get_yoffset sprite_get_bbox_left sprite_get_bbox_right sprite_get_bbox_top sprite_get_bbox_bottom sprite_save sprite_save_strip sprite_set_cache_size sprite_set_cache_size_ext sprite_get_tpe sprite_prefetch sprite_prefetch_multi sprite_flush sprite_flush_multi sprite_set_speed sprite_get_speed_type sprite_get_speed font_exists font_get_name font_get_fontname font_get_bold font_get_italic font_get_first font_get_last font_get_size font_set_cache_size path_exists path_get_name path_get_length path_get_time path_get_kind path_get_closed path_get_precision path_get_number path_get_point_x path_get_point_y path_get_point_speed path_get_x path_get_y path_get_speed script_exists script_get_name timeline_add timeline_delete timeline_clear timeline_exists timeline_get_name timeline_moment_clear timeline_moment_add_script timeline_size timeline_max_moment object_exists object_get_name object_get_sprite object_get_solid object_get_visible object_get_persistent object_get_mask object_get_parent object_get_physics object_is_ancestor room_exists room_get_name sprite_set_offset sprite_duplicate sprite_assign sprite_merge sprite_add sprite_replace sprite_create_from_surface sprite_add_from_surface sprite_delete sprite_set_alpha_from_sprite sprite_collision_mask font_add_enable_aa font_add_get_enable_aa font_add font_add_sprite font_add_sprite_ext font_replace font_replace_sprite font_replace_sprite_ext font_delete path_set_kind path_set_closed path_set_precision path_add path_assign path_duplicate path_append path_delete path_add_point path_insert_point path_change_point path_delete_point path_clear_points path_reverse path_mirror path_flip path_rotate path_rescale path_shift script_execute object_set_sprite object_set_solid object_set_visible object_set_persistent object_set_mask room_set_width room_set_height room_set_persistent room_set_background_colour room_set_background_color room_set_view room_set_viewport room_get_viewport room_set_view_enabled room_add room_duplicate room_assign room_instance_add room_instance_clear room_get_camera room_set_camera asset_get_index asset_get_type file_text_open_from_string file_text_open_read file_text_open_write file_text_open_append file_text_close file_text_write_string file_text_write_real file_text_writeln file_text_read_string file_text_read_real file_text_readln file_text_eof file_text_eoln file_exists file_delete file_rename file_copy directory_exists directory_create directory_destroy file_find_first file_find_next file_find_close file_attributes filename_name filename_path filename_dir filename_drive filename_ext filename_change_ext file_bin_open file_bin_rewrite file_bin_close file_bin_position file_bin_size file_bin_seek file_bin_write_byte file_bin_read_byte parameter_count parameter_string environment_get_variable ini_open_from_string ini_open ini_close ini_read_string ini_read_real ini_write_string ini_write_real ini_key_exists ini_section_exists ini_key_delete ini_section_delete ds_set_precision ds_exists ds_stack_create ds_stack_destroy ds_stack_clear ds_stack_copy ds_stack_size ds_stack_empty ds_stack_push ds_stack_pop ds_stack_top ds_stack_write ds_stack_read ds_queue_create ds_queue_destroy ds_queue_clear ds_queue_copy ds_queue_size ds_queue_empty ds_queue_enqueue ds_queue_dequeue ds_queue_head ds_queue_tail ds_queue_write ds_queue_read ds_list_create ds_list_destroy ds_list_clear ds_list_copy ds_list_size ds_list_empty ds_list_add ds_list_insert ds_list_replace ds_list_delete ds_list_find_index ds_list_find_value ds_list_mark_as_list ds_list_mark_as_map ds_list_sort ds_list_shuffle ds_list_write ds_list_read ds_list_set ds_map_create ds_map_destroy ds_map_clear ds_map_copy ds_map_size ds_map_empty ds_map_add ds_map_add_list ds_map_add_map ds_map_replace ds_map_replace_map ds_map_replace_list ds_map_delete ds_map_exists ds_map_find_value ds_map_find_previous ds_map_find_next ds_map_find_first ds_map_find_last ds_map_write ds_map_read ds_map_secure_save ds_map_secure_load ds_map_secure_load_buffer ds_map_secure_save_buffer ds_map_set ds_priority_create ds_priority_destroy ds_priority_clear ds_priority_copy ds_priority_size ds_priority_empty ds_priority_add ds_priority_change_priority ds_priority_find_priority ds_priority_delete_value ds_priority_delete_min ds_priority_find_min ds_priority_delete_max ds_priority_find_max ds_priority_write ds_priority_read ds_grid_create ds_grid_destroy ds_grid_copy ds_grid_resize ds_grid_width ds_grid_height ds_grid_clear ds_grid_set ds_grid_add ds_grid_multiply ds_grid_set_region ds_grid_add_region ds_grid_multiply_region ds_grid_set_disk ds_grid_add_disk ds_grid_multiply_disk ds_grid_set_grid_region ds_grid_add_grid_region ds_grid_multiply_grid_region ds_grid_get ds_grid_get_sum ds_grid_get_max ds_grid_get_min ds_grid_get_mean ds_grid_get_disk_sum ds_grid_get_disk_min ds_grid_get_disk_max ds_grid_get_disk_mean ds_grid_value_exists ds_grid_value_x ds_grid_value_y ds_grid_value_disk_exists ds_grid_value_disk_x ds_grid_value_disk_y ds_grid_shuffle ds_grid_write ds_grid_read ds_grid_sort ds_grid_set ds_grid_get effect_create_below effect_create_above effect_clear part_type_create part_type_destroy part_type_exists part_type_clear part_type_shape part_type_sprite part_type_size part_type_scale part_type_orientation part_type_life part_type_step part_type_death part_type_speed part_type_direction part_type_gravity part_type_colour1 part_type_colour2 part_type_colour3 part_type_colour_mix part_type_colour_rgb part_type_colour_hsv part_type_color1 part_type_color2 part_type_color3 part_type_color_mix part_type_color_rgb part_type_color_hsv part_type_alpha1 part_type_alpha2 part_type_alpha3 part_type_blend part_system_create part_system_create_layer part_system_destroy part_system_exists part_system_clear part_system_draw_order part_system_depth part_system_position part_system_automatic_update part_system_automatic_draw part_system_update part_system_drawit part_system_get_layer part_system_layer part_particles_create part_particles_create_colour part_particles_create_color part_particles_clear part_particles_count part_emitter_create part_emitter_destroy part_emitter_destroy_all part_emitter_exists part_emitter_clear part_emitter_region part_emitter_burst part_emitter_stream external_call external_define external_free window_handle window_device matrix_get matrix_set matrix_build_identity matrix_build matrix_build_lookat matrix_build_projection_ortho matrix_build_projection_perspective matrix_build_projection_perspective_fov matrix_multiply matrix_transform_vertex matrix_stack_push matrix_stack_pop matrix_stack_multiply matrix_stack_set matrix_stack_clear matrix_stack_top matrix_stack_is_empty browser_input_capture os_get_config os_get_info os_get_language os_get_region os_lock_orientation display_get_dpi_x display_get_dpi_y display_set_gui_size display_set_gui_maximise display_set_gui_maximize device_mouse_dbclick_enable display_set_timing_method display_get_timing_method display_set_sleep_margin display_get_sleep_margin virtual_key_add virtual_key_hide virtual_key_delete virtual_key_show draw_enable_drawevent draw_enable_swf_aa draw_set_swf_aa_level draw_get_swf_aa_level draw_texture_flush draw_flush gpu_set_blendenable gpu_set_ztestenable gpu_set_zfunc gpu_set_zwriteenable gpu_set_lightingenable gpu_set_fog gpu_set_cullmode gpu_set_blendmode gpu_set_blendmode_ext gpu_set_blendmode_ext_sepalpha gpu_set_colorwriteenable gpu_set_colourwriteenable gpu_set_alphatestenable gpu_set_alphatestref gpu_set_alphatestfunc gpu_set_texfilter gpu_set_texfilter_ext gpu_set_texrepeat gpu_set_texrepeat_ext gpu_set_tex_filter gpu_set_tex_filter_ext gpu_set_tex_repeat gpu_set_tex_repeat_ext gpu_set_tex_mip_filter gpu_set_tex_mip_filter_ext gpu_set_tex_mip_bias gpu_set_tex_mip_bias_ext gpu_set_tex_min_mip gpu_set_tex_min_mip_ext gpu_set_tex_max_mip gpu_set_tex_max_mip_ext gpu_set_tex_max_aniso gpu_set_tex_max_aniso_ext gpu_set_tex_mip_enable gpu_set_tex_mip_enable_ext gpu_get_blendenable gpu_get_ztestenable gpu_get_zfunc gpu_get_zwriteenable gpu_get_lightingenable gpu_get_fog gpu_get_cullmode gpu_get_blendmode gpu_get_blendmode_ext gpu_get_blendmode_ext_sepalpha gpu_get_blendmode_src gpu_get_blendmode_dest gpu_get_blendmode_srcalpha gpu_get_blendmode_destalpha gpu_get_colorwriteenable gpu_get_colourwriteenable gpu_get_alphatestenable gpu_get_alphatestref gpu_get_alphatestfunc gpu_get_texfilter gpu_get_texfilter_ext gpu_get_texrepeat gpu_get_texrepeat_ext gpu_get_tex_filter gpu_get_tex_filter_ext gpu_get_tex_repeat gpu_get_tex_repeat_ext gpu_get_tex_mip_filter gpu_get_tex_mip_filter_ext gpu_get_tex_mip_bias gpu_get_tex_mip_bias_ext gpu_get_tex_min_mip gpu_get_tex_min_mip_ext gpu_get_tex_max_mip gpu_get_tex_max_mip_ext gpu_get_tex_max_aniso gpu_get_tex_max_aniso_ext gpu_get_tex_mip_enable gpu_get_tex_mip_enable_ext gpu_push_state gpu_pop_state gpu_get_state gpu_set_state draw_light_define_ambient draw_light_define_direction draw_light_define_point draw_light_enable draw_set_lighting draw_light_get_ambient draw_light_get draw_get_lighting shop_leave_rating url_get_domain url_open url_open_ext url_open_full get_timer achievement_login achievement_logout achievement_post achievement_increment achievement_post_score achievement_available achievement_show_achievements achievement_show_leaderboards achievement_load_friends achievement_load_leaderboard achievement_send_challenge achievement_load_progress achievement_reset achievement_login_status achievement_get_pic achievement_show_challenge_notifications achievement_get_challenges achievement_event achievement_show achievement_get_info cloud_file_save cloud_string_save cloud_synchronise ads_enable ads_disable ads_setup ads_engagement_launch ads_engagement_available ads_engagement_active ads_event ads_event_preload ads_set_reward_callback ads_get_display_height ads_get_display_width ads_move ads_interstitial_available ads_interstitial_display device_get_tilt_x device_get_tilt_y device_get_tilt_z device_is_keypad_open device_mouse_check_button device_mouse_check_button_pressed device_mouse_check_button_released device_mouse_x device_mouse_y device_mouse_raw_x device_mouse_raw_y device_mouse_x_to_gui device_mouse_y_to_gui iap_activate iap_status iap_enumerate_products iap_restore_all iap_acquire iap_consume iap_product_details iap_purchase_details facebook_init facebook_login facebook_status facebook_graph_request facebook_dialog facebook_logout facebook_launch_offerwall facebook_post_message facebook_send_invite facebook_user_id facebook_accesstoken facebook_check_permission facebook_request_read_permissions facebook_request_publish_permissions gamepad_is_supported gamepad_get_device_count gamepad_is_connected gamepad_get_description gamepad_get_button_threshold gamepad_set_button_threshold gamepad_get_axis_deadzone gamepad_set_axis_deadzone gamepad_button_count gamepad_button_check gamepad_button_check_pressed gamepad_button_check_released gamepad_button_value gamepad_axis_count gamepad_axis_value gamepad_set_vibration gamepad_set_colour gamepad_set_color os_is_paused window_has_focus code_is_compiled http_get http_get_file http_post_string http_request json_encode json_decode zip_unzip load_csv base64_encode base64_decode md5_string_unicode md5_string_utf8 md5_file os_is_network_connected sha1_string_unicode sha1_string_utf8 sha1_file os_powersave_enable analytics_event analytics_event_ext win8_livetile_tile_notification win8_livetile_tile_clear win8_livetile_badge_notification win8_livetile_badge_clear win8_livetile_queue_enable win8_secondarytile_pin win8_secondarytile_badge_notification win8_secondarytile_delete win8_livetile_notification_begin win8_livetile_notification_secondary_begin win8_livetile_notification_expiry win8_livetile_notification_tag win8_livetile_notification_text_add win8_livetile_notification_image_add win8_livetile_notification_end win8_appbar_enable win8_appbar_add_element win8_appbar_remove_element win8_settingscharm_add_entry win8_settingscharm_add_html_entry win8_settingscharm_add_xaml_entry win8_settingscharm_set_xaml_property win8_settingscharm_get_xaml_property win8_settingscharm_remove_entry win8_share_image win8_share_screenshot win8_share_file win8_share_url win8_share_text win8_search_enable win8_search_disable win8_search_add_suggestions win8_device_touchscreen_available win8_license_initialize_sandbox win8_license_trial_version winphone_license_trial_version winphone_tile_title winphone_tile_count winphone_tile_back_title winphone_tile_back_content winphone_tile_back_content_wide winphone_tile_front_image winphone_tile_front_image_small winphone_tile_front_image_wide winphone_tile_back_image winphone_tile_back_image_wide winphone_tile_background_colour winphone_tile_background_color winphone_tile_icon_image winphone_tile_small_icon_image winphone_tile_wide_content winphone_tile_cycle_images winphone_tile_small_background_image physics_world_create physics_world_gravity physics_world_update_speed physics_world_update_iterations physics_world_draw_debug physics_pause_enable physics_fixture_create physics_fixture_set_kinematic physics_fixture_set_density physics_fixture_set_awake physics_fixture_set_restitution physics_fixture_set_friction physics_fixture_set_collision_group physics_fixture_set_sensor physics_fixture_set_linear_damping physics_fixture_set_angular_damping physics_fixture_set_circle_shape physics_fixture_set_box_shape physics_fixture_set_edge_shape physics_fixture_set_polygon_shape physics_fixture_set_chain_shape physics_fixture_add_point physics_fixture_bind physics_fixture_bind_ext physics_fixture_delete physics_apply_force physics_apply_impulse physics_apply_angular_impulse physics_apply_local_force physics_apply_local_impulse physics_apply_torque physics_mass_properties physics_draw_debug physics_test_overlap physics_remove_fixture physics_set_friction physics_set_density physics_set_restitution physics_get_friction physics_get_density physics_get_restitution physics_joint_distance_create physics_joint_rope_create physics_joint_revolute_create physics_joint_prismatic_create physics_joint_pulley_create physics_joint_wheel_create physics_joint_weld_create physics_joint_friction_create physics_joint_gear_create physics_joint_enable_motor physics_joint_get_value physics_joint_set_value physics_joint_delete physics_particle_create physics_particle_delete physics_particle_delete_region_circle physics_particle_delete_region_box physics_particle_delete_region_poly physics_particle_set_flags physics_particle_set_category_flags physics_particle_draw physics_particle_draw_ext physics_particle_count physics_particle_get_data physics_particle_get_data_particle physics_particle_group_begin physics_particle_group_circle physics_particle_group_box physics_particle_group_polygon physics_particle_group_add_point physics_particle_group_end physics_particle_group_join physics_particle_group_delete physics_particle_group_count physics_particle_group_get_data physics_particle_group_get_mass physics_particle_group_get_inertia physics_particle_group_get_centre_x physics_particle_group_get_centre_y physics_particle_group_get_vel_x physics_particle_group_get_vel_y physics_particle_group_get_ang_vel physics_particle_group_get_x physics_particle_group_get_y physics_particle_group_get_angle physics_particle_set_group_flags physics_particle_get_group_flags physics_particle_get_max_count physics_particle_get_radius physics_particle_get_density physics_particle_get_damping physics_particle_get_gravity_scale physics_particle_set_max_count physics_particle_set_radius physics_particle_set_density physics_particle_set_damping physics_particle_set_gravity_scale network_create_socket network_create_socket_ext network_create_server network_create_server_raw network_connect network_connect_raw network_send_packet network_send_raw network_send_broadcast network_send_udp network_send_udp_raw network_set_timeout network_set_config network_resolve network_destroy buffer_create buffer_write buffer_read buffer_seek buffer_get_surface buffer_set_surface buffer_delete buffer_exists buffer_get_type buffer_get_alignment buffer_poke buffer_peek buffer_save buffer_save_ext buffer_load buffer_load_ext buffer_load_partial buffer_copy buffer_fill buffer_get_size buffer_tell buffer_resize buffer_md5 buffer_sha1 buffer_base64_encode buffer_base64_decode buffer_base64_decode_ext buffer_sizeof buffer_get_address buffer_create_from_vertex_buffer buffer_create_from_vertex_buffer_ext buffer_copy_from_vertex_buffer buffer_async_group_begin buffer_async_group_option buffer_async_group_end buffer_load_async buffer_save_async gml_release_mode gml_pragma steam_activate_overlay steam_is_overlay_enabled steam_is_overlay_activated steam_get_persona_name steam_initialised steam_is_cloud_enabled_for_app steam_is_cloud_enabled_for_account steam_file_persisted steam_get_quota_total steam_get_quota_free steam_file_write steam_file_write_file steam_file_read steam_file_delete steam_file_exists steam_file_size steam_file_share steam_is_screenshot_requested steam_send_screenshot steam_is_user_logged_on steam_get_user_steam_id steam_user_owns_dlc steam_user_installed_dlc steam_set_achievement steam_get_achievement steam_clear_achievement steam_set_stat_int steam_set_stat_float steam_set_stat_avg_rate steam_get_stat_int steam_get_stat_float steam_get_stat_avg_rate steam_reset_all_stats steam_reset_all_stats_achievements steam_stats_ready steam_create_leaderboard steam_upload_score steam_upload_score_ext steam_download_scores_around_user steam_download_scores steam_download_friends_scores steam_upload_score_buffer steam_upload_score_buffer_ext steam_current_game_language steam_available_languages steam_activate_overlay_browser steam_activate_overlay_user steam_activate_overlay_store steam_get_user_persona_name steam_get_app_id steam_get_user_account_id steam_ugc_download steam_ugc_create_item steam_ugc_start_item_update steam_ugc_set_item_title steam_ugc_set_item_description steam_ugc_set_item_visibility steam_ugc_set_item_tags steam_ugc_set_item_content steam_ugc_set_item_preview steam_ugc_submit_item_update steam_ugc_get_item_update_progress steam_ugc_subscribe_item steam_ugc_unsubscribe_item steam_ugc_num_subscribed_items steam_ugc_get_subscribed_items steam_ugc_get_item_install_info steam_ugc_get_item_update_info steam_ugc_request_item_details steam_ugc_create_query_user steam_ugc_create_query_user_ex steam_ugc_create_query_all steam_ugc_create_query_all_ex steam_ugc_query_set_cloud_filename_filter steam_ugc_query_set_match_any_tag steam_ugc_query_set_search_text steam_ugc_query_set_ranked_by_trend_days steam_ugc_query_add_required_tag steam_ugc_query_add_excluded_tag steam_ugc_query_set_return_long_description steam_ugc_query_set_return_total_only steam_ugc_query_set_allow_cached_response steam_ugc_send_query shader_set shader_get_name shader_reset shader_current shader_is_compiled shader_get_sampler_index shader_get_uniform shader_set_uniform_i shader_set_uniform_i_array shader_set_uniform_f shader_set_uniform_f_array shader_set_uniform_matrix shader_set_uniform_matrix_array shader_enable_corner_id texture_set_stage texture_get_texel_width texture_get_texel_height shaders_are_supported vertex_format_begin vertex_format_end vertex_format_delete vertex_format_add_position vertex_format_add_position_3d vertex_format_add_colour vertex_format_add_color vertex_format_add_normal vertex_format_add_texcoord vertex_format_add_textcoord vertex_format_add_custom vertex_create_buffer vertex_create_buffer_ext vertex_delete_buffer vertex_begin vertex_end vertex_position vertex_position_3d vertex_colour vertex_color vertex_argb vertex_texcoord vertex_normal vertex_float1 vertex_float2 vertex_float3 vertex_float4 vertex_ubyte4 vertex_submit vertex_freeze vertex_get_number vertex_get_buffer_size vertex_create_buffer_from_buffer vertex_create_buffer_from_buffer_ext push_local_notification push_get_first_local_notification push_get_next_local_notification push_cancel_local_notification skeleton_animation_set skeleton_animation_get skeleton_animation_mix skeleton_animation_set_ext skeleton_animation_get_ext skeleton_animation_get_duration skeleton_animation_get_frames skeleton_animation_clear skeleton_skin_set skeleton_skin_get skeleton_attachment_set skeleton_attachment_get skeleton_attachment_create skeleton_collision_draw_set skeleton_bone_data_get skeleton_bone_data_set skeleton_bone_state_get skeleton_bone_state_set skeleton_get_minmax skeleton_get_num_bounds skeleton_get_bounds skeleton_animation_get_frame skeleton_animation_set_frame draw_skeleton draw_skeleton_time draw_skeleton_instance draw_skeleton_collision skeleton_animation_list skeleton_skin_list skeleton_slot_data layer_get_id layer_get_id_at_depth layer_get_depth layer_create layer_destroy layer_destroy_instances layer_add_instance layer_has_instance layer_set_visible layer_get_visible layer_exists layer_x layer_y layer_get_x layer_get_y layer_hspeed layer_vspeed layer_get_hspeed layer_get_vspeed layer_script_begin layer_script_end layer_shader layer_get_script_begin layer_get_script_end layer_get_shader layer_set_target_room layer_get_target_room layer_reset_target_room layer_get_all layer_get_all_elements layer_get_name layer_depth layer_get_element_layer layer_get_element_type layer_element_move layer_force_draw_depth layer_is_draw_depth_forced layer_get_forced_depth layer_background_get_id layer_background_exists layer_background_create layer_background_destroy layer_background_visible layer_background_change layer_background_sprite layer_background_htiled layer_background_vtiled layer_background_stretch layer_background_yscale layer_background_xscale layer_background_blend layer_background_alpha layer_background_index layer_background_speed layer_background_get_visible layer_background_get_sprite layer_background_get_htiled layer_background_get_vtiled layer_background_get_stretch layer_background_get_yscale layer_background_get_xscale layer_background_get_blend layer_background_get_alpha layer_background_get_index layer_background_get_speed layer_sprite_get_id layer_sprite_exists layer_sprite_create layer_sprite_destroy layer_sprite_change layer_sprite_index layer_sprite_speed layer_sprite_xscale layer_sprite_yscale layer_sprite_angle layer_sprite_blend layer_sprite_alpha layer_sprite_x layer_sprite_y layer_sprite_get_sprite layer_sprite_get_index layer_sprite_get_speed layer_sprite_get_xscale layer_sprite_get_yscale layer_sprite_get_angle layer_sprite_get_blend layer_sprite_get_alpha layer_sprite_get_x layer_sprite_get_y layer_tilemap_get_id layer_tilemap_exists layer_tilemap_create layer_tilemap_destroy tilemap_tileset tilemap_x tilemap_y tilemap_set tilemap_set_at_pixel tilemap_get_tileset tilemap_get_tile_width tilemap_get_tile_height tilemap_get_width tilemap_get_height tilemap_get_x tilemap_get_y tilemap_get tilemap_get_at_pixel tilemap_get_cell_x_at_pixel tilemap_get_cell_y_at_pixel tilemap_clear draw_tilemap draw_tile tilemap_set_global_mask tilemap_get_global_mask tilemap_set_mask tilemap_get_mask tilemap_get_frame tile_set_empty tile_set_index tile_set_flip tile_set_mirror tile_set_rotate tile_get_empty tile_get_index tile_get_flip tile_get_mirror tile_get_rotate layer_tile_exists layer_tile_create layer_tile_destroy layer_tile_change layer_tile_xscale layer_tile_yscale layer_tile_blend layer_tile_alpha layer_tile_x layer_tile_y layer_tile_region layer_tile_visible layer_tile_get_sprite layer_tile_get_xscale layer_tile_get_yscale layer_tile_get_blend layer_tile_get_alpha layer_tile_get_x layer_tile_get_y layer_tile_get_region layer_tile_get_visible layer_instance_get_instance instance_activate_layer instance_deactivate_layer camera_create camera_create_view camera_destroy camera_apply camera_get_active camera_get_default camera_set_default camera_set_view_mat camera_set_proj_mat camera_set_update_script camera_set_begin_script camera_set_end_script camera_set_view_pos camera_set_view_size camera_set_view_speed camera_set_view_border camera_set_view_angle camera_set_view_target camera_get_view_mat camera_get_proj_mat camera_get_update_script camera_get_begin_script camera_get_end_script camera_get_view_x camera_get_view_y camera_get_view_width camera_get_view_height camera_get_view_speed_x camera_get_view_speed_y camera_get_view_border_x camera_get_view_border_y camera_get_view_angle camera_get_view_target view_get_camera view_get_visible view_get_xport view_get_yport view_get_wport view_get_hport view_get_surface_id view_set_camera view_set_visible view_set_xport view_set_yport view_set_wport view_set_hport view_set_surface_id gesture_drag_time gesture_drag_distance gesture_flick_speed gesture_double_tap_time gesture_double_tap_distance gesture_pinch_distance gesture_pinch_angle_towards gesture_pinch_angle_away gesture_rotate_time gesture_rotate_angle gesture_tap_count gesture_get_drag_time gesture_get_drag_distance gesture_get_flick_speed gesture_get_double_tap_time gesture_get_double_tap_distance gesture_get_pinch_distance gesture_get_pinch_angle_towards gesture_get_pinch_angle_away gesture_get_rotate_time gesture_get_rotate_angle gesture_get_tap_count keyboard_virtual_show keyboard_virtual_hide keyboard_virtual_status keyboard_virtual_height",
    literal: "self other all noone global local undefined pointer_invalid pointer_null path_action_stop path_action_restart path_action_continue path_action_reverse true false pi GM_build_date GM_version GM_runtime_version  timezone_local timezone_utc gamespeed_fps gamespeed_microseconds  ev_create ev_destroy ev_step ev_alarm ev_keyboard ev_mouse ev_collision ev_other ev_draw ev_draw_begin ev_draw_end ev_draw_pre ev_draw_post ev_keypress ev_keyrelease ev_trigger ev_left_button ev_right_button ev_middle_button ev_no_button ev_left_press ev_right_press ev_middle_press ev_left_release ev_right_release ev_middle_release ev_mouse_enter ev_mouse_leave ev_mouse_wheel_up ev_mouse_wheel_down ev_global_left_button ev_global_right_button ev_global_middle_button ev_global_left_press ev_global_right_press ev_global_middle_press ev_global_left_release ev_global_right_release ev_global_middle_release ev_joystick1_left ev_joystick1_right ev_joystick1_up ev_joystick1_down ev_joystick1_button1 ev_joystick1_button2 ev_joystick1_button3 ev_joystick1_button4 ev_joystick1_button5 ev_joystick1_button6 ev_joystick1_button7 ev_joystick1_button8 ev_joystick2_left ev_joystick2_right ev_joystick2_up ev_joystick2_down ev_joystick2_button1 ev_joystick2_button2 ev_joystick2_button3 ev_joystick2_button4 ev_joystick2_button5 ev_joystick2_button6 ev_joystick2_button7 ev_joystick2_button8 ev_outside ev_boundary ev_game_start ev_game_end ev_room_start ev_room_end ev_no_more_lives ev_animation_end ev_end_of_path ev_no_more_health ev_close_button ev_user0 ev_user1 ev_user2 ev_user3 ev_user4 ev_user5 ev_user6 ev_user7 ev_user8 ev_user9 ev_user10 ev_user11 ev_user12 ev_user13 ev_user14 ev_user15 ev_step_normal ev_step_begin ev_step_end ev_gui ev_gui_begin ev_gui_end ev_cleanup ev_gesture ev_gesture_tap ev_gesture_double_tap ev_gesture_drag_start ev_gesture_dragging ev_gesture_drag_end ev_gesture_flick ev_gesture_pinch_start ev_gesture_pinch_in ev_gesture_pinch_out ev_gesture_pinch_end ev_gesture_rotate_start ev_gesture_rotating ev_gesture_rotate_end ev_global_gesture_tap ev_global_gesture_double_tap ev_global_gesture_drag_start ev_global_gesture_dragging ev_global_gesture_drag_end ev_global_gesture_flick ev_global_gesture_pinch_start ev_global_gesture_pinch_in ev_global_gesture_pinch_out ev_global_gesture_pinch_end ev_global_gesture_rotate_start ev_global_gesture_rotating ev_global_gesture_rotate_end vk_nokey vk_anykey vk_enter vk_return vk_shift vk_control vk_alt vk_escape vk_space vk_backspace vk_tab vk_pause vk_printscreen vk_left vk_right vk_up vk_down vk_home vk_end vk_delete vk_insert vk_pageup vk_pagedown vk_f1 vk_f2 vk_f3 vk_f4 vk_f5 vk_f6 vk_f7 vk_f8 vk_f9 vk_f10 vk_f11 vk_f12 vk_numpad0 vk_numpad1 vk_numpad2 vk_numpad3 vk_numpad4 vk_numpad5 vk_numpad6 vk_numpad7 vk_numpad8 vk_numpad9 vk_divide vk_multiply vk_subtract vk_add vk_decimal vk_lshift vk_lcontrol vk_lalt vk_rshift vk_rcontrol vk_ralt  mb_any mb_none mb_left mb_right mb_middle c_aqua c_black c_blue c_dkgray c_fuchsia c_gray c_green c_lime c_ltgray c_maroon c_navy c_olive c_purple c_red c_silver c_teal c_white c_yellow c_orange fa_left fa_center fa_right fa_top fa_middle fa_bottom pr_pointlist pr_linelist pr_linestrip pr_trianglelist pr_trianglestrip pr_trianglefan bm_complex bm_normal bm_add bm_max bm_subtract bm_zero bm_one bm_src_colour bm_inv_src_colour bm_src_color bm_inv_src_color bm_src_alpha bm_inv_src_alpha bm_dest_alpha bm_inv_dest_alpha bm_dest_colour bm_inv_dest_colour bm_dest_color bm_inv_dest_color bm_src_alpha_sat tf_point tf_linear tf_anisotropic mip_off mip_on mip_markedonly audio_falloff_none audio_falloff_inverse_distance audio_falloff_inverse_distance_clamped audio_falloff_linear_distance audio_falloff_linear_distance_clamped audio_falloff_exponent_distance audio_falloff_exponent_distance_clamped audio_old_system audio_new_system audio_mono audio_stereo audio_3d cr_default cr_none cr_arrow cr_cross cr_beam cr_size_nesw cr_size_ns cr_size_nwse cr_size_we cr_uparrow cr_hourglass cr_drag cr_appstart cr_handpoint cr_size_all spritespeed_framespersecond spritespeed_framespergameframe asset_object asset_unknown asset_sprite asset_sound asset_room asset_path asset_script asset_font asset_timeline asset_tiles asset_shader fa_readonly fa_hidden fa_sysfile fa_volumeid fa_directory fa_archive  ds_type_map ds_type_list ds_type_stack ds_type_queue ds_type_grid ds_type_priority ef_explosion ef_ring ef_ellipse ef_firework ef_smoke ef_smokeup ef_star ef_spark ef_flare ef_cloud ef_rain ef_snow pt_shape_pixel pt_shape_disk pt_shape_square pt_shape_line pt_shape_star pt_shape_circle pt_shape_ring pt_shape_sphere pt_shape_flare pt_shape_spark pt_shape_explosion pt_shape_cloud pt_shape_smoke pt_shape_snow ps_distr_linear ps_distr_gaussian ps_distr_invgaussian ps_shape_rectangle ps_shape_ellipse ps_shape_diamond ps_shape_line ty_real ty_string dll_cdecl dll_stdcall matrix_view matrix_projection matrix_world os_win32 os_windows os_macosx os_ios os_android os_symbian os_linux os_unknown os_winphone os_tizen os_win8native os_wiiu os_3ds  os_psvita os_bb10 os_ps4 os_xboxone os_ps3 os_xbox360 os_uwp os_tvos os_switch browser_not_a_browser browser_unknown browser_ie browser_firefox browser_chrome browser_safari browser_safari_mobile browser_opera browser_tizen browser_edge browser_windows_store browser_ie_mobile  device_ios_unknown device_ios_iphone device_ios_iphone_retina device_ios_ipad device_ios_ipad_retina device_ios_iphone5 device_ios_iphone6 device_ios_iphone6plus device_emulator device_tablet display_landscape display_landscape_flipped display_portrait display_portrait_flipped tm_sleep tm_countvsyncs of_challenge_win of_challen ge_lose of_challenge_tie leaderboard_type_number leaderboard_type_time_mins_secs cmpfunc_never cmpfunc_less cmpfunc_equal cmpfunc_lessequal cmpfunc_greater cmpfunc_notequal cmpfunc_greaterequal cmpfunc_always cull_noculling cull_clockwise cull_counterclockwise lighttype_dir lighttype_point iap_ev_storeload iap_ev_product iap_ev_purchase iap_ev_consume iap_ev_restore iap_storeload_ok iap_storeload_failed iap_status_uninitialised iap_status_unavailable iap_status_loading iap_status_available iap_status_processing iap_status_restoring iap_failed iap_unavailable iap_available iap_purchased iap_canceled iap_refunded fb_login_default fb_login_fallback_to_webview fb_login_no_fallback_to_webview fb_login_forcing_webview fb_login_use_system_account fb_login_forcing_safari  phy_joint_anchor_1_x phy_joint_anchor_1_y phy_joint_anchor_2_x phy_joint_anchor_2_y phy_joint_reaction_force_x phy_joint_reaction_force_y phy_joint_reaction_torque phy_joint_motor_speed phy_joint_angle phy_joint_motor_torque phy_joint_max_motor_torque phy_joint_translation phy_joint_speed phy_joint_motor_force phy_joint_max_motor_force phy_joint_length_1 phy_joint_length_2 phy_joint_damping_ratio phy_joint_frequency phy_joint_lower_angle_limit phy_joint_upper_angle_limit phy_joint_angle_limits phy_joint_max_length phy_joint_max_torque phy_joint_max_force phy_debug_render_aabb phy_debug_render_collision_pairs phy_debug_render_coms phy_debug_render_core_shapes phy_debug_render_joints phy_debug_render_obb phy_debug_render_shapes  phy_particle_flag_water phy_particle_flag_zombie phy_particle_flag_wall phy_particle_flag_spring phy_particle_flag_elastic phy_particle_flag_viscous phy_particle_flag_powder phy_particle_flag_tensile phy_particle_flag_colourmixing phy_particle_flag_colormixing phy_particle_group_flag_solid phy_particle_group_flag_rigid phy_particle_data_flag_typeflags phy_particle_data_flag_position phy_particle_data_flag_velocity phy_particle_data_flag_colour phy_particle_data_flag_color phy_particle_data_flag_category  achievement_our_info achievement_friends_info achievement_leaderboard_info achievement_achievement_info achievement_filter_all_players achievement_filter_friends_only achievement_filter_favorites_only achievement_type_achievement_challenge achievement_type_score_challenge achievement_pic_loaded  achievement_show_ui achievement_show_profile achievement_show_leaderboard achievement_show_achievement achievement_show_bank achievement_show_friend_picker achievement_show_purchase_prompt network_socket_tcp network_socket_udp network_socket_bluetooth network_type_connect network_type_disconnect network_type_data network_type_non_blocking_connect network_config_connect_timeout network_config_use_non_blocking_socket network_config_enable_reliable_udp network_config_disable_reliable_udp buffer_fixed buffer_grow buffer_wrap buffer_fast buffer_vbuffer buffer_network buffer_u8 buffer_s8 buffer_u16 buffer_s16 buffer_u32 buffer_s32 buffer_u64 buffer_f16 buffer_f32 buffer_f64 buffer_bool buffer_text buffer_string buffer_surface_copy buffer_seek_start buffer_seek_relative buffer_seek_end buffer_generalerror buffer_outofspace buffer_outofbounds buffer_invalidtype  text_type button_type input_type ANSI_CHARSET DEFAULT_CHARSET EASTEUROPE_CHARSET RUSSIAN_CHARSET SYMBOL_CHARSET SHIFTJIS_CHARSET HANGEUL_CHARSET GB2312_CHARSET CHINESEBIG5_CHARSET JOHAB_CHARSET HEBREW_CHARSET ARABIC_CHARSET GREEK_CHARSET TURKISH_CHARSET VIETNAMESE_CHARSET THAI_CHARSET MAC_CHARSET BALTIC_CHARSET OEM_CHARSET  gp_face1 gp_face2 gp_face3 gp_face4 gp_shoulderl gp_shoulderr gp_shoulderlb gp_shoulderrb gp_select gp_start gp_stickl gp_stickr gp_padu gp_padd gp_padl gp_padr gp_axislh gp_axislv gp_axisrh gp_axisrv ov_friends ov_community ov_players ov_settings ov_gamegroup ov_achievements lb_sort_none lb_sort_ascending lb_sort_descending lb_disp_none lb_disp_numeric lb_disp_time_sec lb_disp_time_ms ugc_result_success ugc_filetype_community ugc_filetype_microtrans ugc_visibility_public ugc_visibility_friends_only ugc_visibility_private ugc_query_RankedByVote ugc_query_RankedByPublicationDate ugc_query_AcceptedForGameRankedByAcceptanceDate ugc_query_RankedByTrend ugc_query_FavoritedByFriendsRankedByPublicationDate ugc_query_CreatedByFriendsRankedByPublicationDate ugc_query_RankedByNumTimesReported ugc_query_CreatedByFollowedUsersRankedByPublicationDate ugc_query_NotYetRated ugc_query_RankedByTotalVotesAsc ugc_query_RankedByVotesUp ugc_query_RankedByTextSearch ugc_sortorder_CreationOrderDesc ugc_sortorder_CreationOrderAsc ugc_sortorder_TitleAsc ugc_sortorder_LastUpdatedDesc ugc_sortorder_SubscriptionDateDesc ugc_sortorder_VoteScoreDesc ugc_sortorder_ForModeration ugc_list_Published ugc_list_VotedOn ugc_list_VotedUp ugc_list_VotedDown ugc_list_WillVoteLater ugc_list_Favorited ugc_list_Subscribed ugc_list_UsedOrPlayed ugc_list_Followed ugc_match_Items ugc_match_Items_Mtx ugc_match_Items_ReadyToUse ugc_match_Collections ugc_match_Artwork ugc_match_Videos ugc_match_Screenshots ugc_match_AllGuides ugc_match_WebGuides ugc_match_IntegratedGuides ugc_match_UsableInGame ugc_match_ControllerBindings  vertex_usage_position vertex_usage_colour vertex_usage_color vertex_usage_normal vertex_usage_texcoord vertex_usage_textcoord vertex_usage_blendweight vertex_usage_blendindices vertex_usage_psize vertex_usage_tangent vertex_usage_binormal vertex_usage_fog vertex_usage_depth vertex_usage_sample vertex_type_float1 vertex_type_float2 vertex_type_float3 vertex_type_float4 vertex_type_colour vertex_type_color vertex_type_ubyte4 layerelementtype_undefined layerelementtype_background layerelementtype_instance layerelementtype_oldtilemap layerelementtype_sprite layerelementtype_tilemap layerelementtype_particlesystem layerelementtype_tile tile_rotate tile_flip tile_mirror tile_index_mask kbv_type_default kbv_type_ascii kbv_type_url kbv_type_email kbv_type_numbers kbv_type_phone kbv_type_phone_name kbv_returnkey_default kbv_returnkey_go kbv_returnkey_google kbv_returnkey_join kbv_returnkey_next kbv_returnkey_route kbv_returnkey_search kbv_returnkey_send kbv_returnkey_yahoo kbv_returnkey_done kbv_returnkey_continue kbv_returnkey_emergency kbv_autocapitalize_none kbv_autocapitalize_words kbv_autocapitalize_sentences kbv_autocapitalize_characters",
    symbol: "argument_relative argument argument0 argument1 argument2 argument3 argument4 argument5 argument6 argument7 argument8 argument9 argument10 argument11 argument12 argument13 argument14 argument15 argument_count x|0 y|0 xprevious yprevious xstart ystart hspeed vspeed direction speed friction gravity gravity_direction path_index path_position path_positionprevious path_speed path_scale path_orientation path_endaction object_index id solid persistent mask_index instance_count instance_id room_speed fps fps_real current_time current_year current_month current_day current_weekday current_hour current_minute current_second alarm timeline_index timeline_position timeline_speed timeline_running timeline_loop room room_first room_last room_width room_height room_caption room_persistent score lives health show_score show_lives show_health caption_score caption_lives caption_health event_type event_number event_object event_action application_surface gamemaker_pro gamemaker_registered gamemaker_version error_occurred error_last debug_mode keyboard_key keyboard_lastkey keyboard_lastchar keyboard_string mouse_x mouse_y mouse_button mouse_lastbutton cursor_sprite visible sprite_index sprite_width sprite_height sprite_xoffset sprite_yoffset image_number image_index image_speed depth image_xscale image_yscale image_angle image_alpha image_blend bbox_left bbox_right bbox_top bbox_bottom layer background_colour  background_showcolour background_color background_showcolor view_enabled view_current view_visible view_xview view_yview view_wview view_hview view_xport view_yport view_wport view_hport view_angle view_hborder view_vborder view_hspeed view_vspeed view_object view_surface_id view_camera game_id game_display_name game_project_name game_save_id working_directory temp_directory program_directory browser_width browser_height os_type os_device os_browser os_version display_aa async_load delta_time webgl_enabled event_data iap_data phy_rotation phy_position_x phy_position_y phy_angular_velocity phy_linear_velocity_x phy_linear_velocity_y phy_speed_x phy_speed_y phy_speed phy_angular_damping phy_linear_damping phy_bullet phy_fixed_rotation phy_active phy_mass phy_inertia phy_com_x phy_com_y phy_dynamic phy_kinematic phy_sleeping phy_collision_points phy_collision_x phy_collision_y phy_col_normal_x phy_col_normal_y phy_position_xprevious phy_position_yprevious"
  };
  return {
    name: "GML",
    case_insensitive: false,
    keywords: GML_KEYWORDS,
    contains: [
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      hljs2.APOS_STRING_MODE,
      hljs2.QUOTE_STRING_MODE,
      hljs2.C_NUMBER_MODE
    ]
  };
}
var gml_1 = gml;
function go(hljs2) {
  const GO_KEYWORDS = {
    keyword: "break default func interface select case map struct chan else goto package switch const fallthrough if range type continue for import return var go defer bool byte complex64 complex128 float32 float64 int8 int16 int32 int64 string uint8 uint16 uint32 uint64 int uint uintptr rune",
    literal: "true false iota nil",
    built_in: "append cap close complex copy imag len make new panic print println real recover delete"
  };
  return {
    name: "Go",
    aliases: ["golang"],
    keywords: GO_KEYWORDS,
    illegal: "</",
    contains: [
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      {
        className: "string",
        variants: [
          hljs2.QUOTE_STRING_MODE,
          hljs2.APOS_STRING_MODE,
          {
            begin: "`",
            end: "`"
          }
        ]
      },
      {
        className: "number",
        variants: [
          {
            begin: hljs2.C_NUMBER_RE + "[i]",
            relevance: 1
          },
          hljs2.C_NUMBER_MODE
        ]
      },
      {
        begin: /:=/
      },
      {
        className: "function",
        beginKeywords: "func",
        end: "\\s*(\\{|$)",
        excludeEnd: true,
        contains: [
          hljs2.TITLE_MODE,
          {
            className: "params",
            begin: /\(/,
            end: /\)/,
            keywords: GO_KEYWORDS,
            illegal: /["']/
          }
        ]
      }
    ]
  };
}
var go_1 = go;
function golo(hljs2) {
  return {
    name: "Golo",
    keywords: {
      keyword: "println readln print import module function local return let var while for foreach times in case when match with break continue augment augmentation each find filter reduce if then else otherwise try catch finally raise throw orIfNull DynamicObject|10 DynamicVariable struct Observable map set vector list array",
      literal: "true false null"
    },
    contains: [
      hljs2.HASH_COMMENT_MODE,
      hljs2.QUOTE_STRING_MODE,
      hljs2.C_NUMBER_MODE,
      {
        className: "meta",
        begin: "@[A-Za-z]+"
      }
    ]
  };
}
var golo_1 = golo;
function gradle(hljs2) {
  return {
    name: "Gradle",
    case_insensitive: true,
    keywords: {
      keyword: "task project allprojects subprojects artifacts buildscript configurations dependencies repositories sourceSets description delete from into include exclude source classpath destinationDir includes options sourceCompatibility targetCompatibility group flatDir doLast doFirst flatten todir fromdir ant def abstract break case catch continue default do else extends final finally for if implements instanceof native new private protected public return static switch synchronized throw throws transient try volatile while strictfp package import false null super this true antlrtask checkstyle codenarc copy boolean byte char class double float int interface long short void compile runTime file fileTree abs any append asList asWritable call collect compareTo count div dump each eachByte eachFile eachLine every find findAll flatten getAt getErr getIn getOut getText grep immutable inject inspect intersect invokeMethods isCase join leftShift minus multiply newInputStream newOutputStream newPrintWriter newReader newWriter next plus pop power previous print println push putAt read readBytes readLines reverse reverseEach round size sort splitEachLine step subMap times toInteger toList tokenize upto waitForOrKill withPrintWriter withReader withStream withWriter withWriterAppend write writeLine"
    },
    contains: [
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      hljs2.APOS_STRING_MODE,
      hljs2.QUOTE_STRING_MODE,
      hljs2.NUMBER_MODE,
      hljs2.REGEXP_MODE
    ]
  };
}
var gradle_1 = gradle;
function source$j(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function lookahead$6(re) {
  return concat$i("(?=", re, ")");
}
function concat$i(...args) {
  const joined = args.map((x2) => source$j(x2)).join("");
  return joined;
}
function variants(variants2, obj = {}) {
  obj.variants = variants2;
  return obj;
}
function groovy(hljs2) {
  const IDENT_RE2 = "[A-Za-z0-9_$]+";
  const COMMENT2 = variants([
    hljs2.C_LINE_COMMENT_MODE,
    hljs2.C_BLOCK_COMMENT_MODE,
    hljs2.COMMENT("/\\*\\*", "\\*/", {
      relevance: 0,
      contains: [
        {
          begin: /\w+@/,
          relevance: 0
        },
        {
          className: "doctag",
          begin: "@[A-Za-z]+"
        }
      ]
    })
  ]);
  const REGEXP = {
    className: "regexp",
    begin: /~?\/[^\/\n]+\//,
    contains: [hljs2.BACKSLASH_ESCAPE]
  };
  const NUMBER = variants([
    hljs2.BINARY_NUMBER_MODE,
    hljs2.C_NUMBER_MODE
  ]);
  const STRING = variants([
    {
      begin: /"""/,
      end: /"""/
    },
    {
      begin: /'''/,
      end: /'''/
    },
    {
      begin: "\\$/",
      end: "/\\$",
      relevance: 10
    },
    hljs2.APOS_STRING_MODE,
    hljs2.QUOTE_STRING_MODE
  ], {
    className: "string"
  });
  return {
    name: "Groovy",
    keywords: {
      built_in: "this super",
      literal: "true false null",
      keyword: "byte short char int long boolean float double void def as in assert trait abstract static volatile transient public private protected synchronized final class interface enum if else for while switch case break default continue throw throws try catch finally implements extends new import package return instanceof"
    },
    contains: [
      hljs2.SHEBANG({
        binary: "groovy",
        relevance: 10
      }),
      COMMENT2,
      STRING,
      REGEXP,
      NUMBER,
      {
        className: "class",
        beginKeywords: "class interface trait enum",
        end: /\{/,
        illegal: ":",
        contains: [
          {
            beginKeywords: "extends implements"
          },
          hljs2.UNDERSCORE_TITLE_MODE
        ]
      },
      {
        className: "meta",
        begin: "@[A-Za-z]+",
        relevance: 0
      },
      {
        className: "attr",
        begin: IDENT_RE2 + "[ 	]*:",
        relevance: 0
      },
      {
        begin: /\?/,
        end: /:/,
        relevance: 0,
        contains: [
          COMMENT2,
          STRING,
          REGEXP,
          NUMBER,
          "self"
        ]
      },
      {
        className: "symbol",
        begin: "^[ 	]*" + lookahead$6(IDENT_RE2 + ":"),
        excludeBegin: true,
        end: IDENT_RE2 + ":",
        relevance: 0
      }
    ],
    illegal: /#|<\//
  };
}
var groovy_1 = groovy;
function haml(hljs2) {
  return {
    name: "HAML",
    case_insensitive: true,
    contains: [
      {
        className: "meta",
        begin: "^!!!( (5|1\\.1|Strict|Frameset|Basic|Mobile|RDFa|XML\\b.*))?$",
        relevance: 10
      },
      hljs2.COMMENT("^\\s*(!=#|=#|-#|/).*$", false, {
        relevance: 0
      }),
      {
        begin: "^\\s*(-|=|!=)(?!#)",
        starts: {
          end: "\\n",
          subLanguage: "ruby"
        }
      },
      {
        className: "tag",
        begin: "^\\s*%",
        contains: [
          {
            className: "selector-tag",
            begin: "\\w+"
          },
          {
            className: "selector-id",
            begin: "#[\\w-]+"
          },
          {
            className: "selector-class",
            begin: "\\.[\\w-]+"
          },
          {
            begin: /\{\s*/,
            end: /\s*\}/,
            contains: [
              {
                begin: ":\\w+\\s*=>",
                end: ",\\s+",
                returnBegin: true,
                endsWithParent: true,
                contains: [
                  {
                    className: "attr",
                    begin: ":\\w+"
                  },
                  hljs2.APOS_STRING_MODE,
                  hljs2.QUOTE_STRING_MODE,
                  {
                    begin: "\\w+",
                    relevance: 0
                  }
                ]
              }
            ]
          },
          {
            begin: "\\(\\s*",
            end: "\\s*\\)",
            excludeEnd: true,
            contains: [
              {
                begin: "\\w+\\s*=",
                end: "\\s+",
                returnBegin: true,
                endsWithParent: true,
                contains: [
                  {
                    className: "attr",
                    begin: "\\w+",
                    relevance: 0
                  },
                  hljs2.APOS_STRING_MODE,
                  hljs2.QUOTE_STRING_MODE,
                  {
                    begin: "\\w+",
                    relevance: 0
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        begin: "^\\s*[=~]\\s*"
      },
      {
        begin: /#\{/,
        starts: {
          end: /\}/,
          subLanguage: "ruby"
        }
      }
    ]
  };
}
var haml_1 = haml;
function source$i(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function anyNumberOfTimes$1(re) {
  return concat$h("(", re, ")*");
}
function optional$3(re) {
  return concat$h("(", re, ")?");
}
function concat$h(...args) {
  const joined = args.map((x2) => source$i(x2)).join("");
  return joined;
}
function either$9(...args) {
  const joined = "(" + args.map((x2) => source$i(x2)).join("|") + ")";
  return joined;
}
function handlebars$1(hljs2) {
  const BUILT_INS2 = {
    "builtin-name": [
      "action",
      "bindattr",
      "collection",
      "component",
      "concat",
      "debugger",
      "each",
      "each-in",
      "get",
      "hash",
      "if",
      "in",
      "input",
      "link-to",
      "loc",
      "log",
      "lookup",
      "mut",
      "outlet",
      "partial",
      "query-params",
      "render",
      "template",
      "textarea",
      "unbound",
      "unless",
      "view",
      "with",
      "yield"
    ]
  };
  const LITERALS2 = {
    literal: [
      "true",
      "false",
      "undefined",
      "null"
    ]
  };
  const DOUBLE_QUOTED_ID_REGEX = /""|"[^"]+"/;
  const SINGLE_QUOTED_ID_REGEX = /''|'[^']+'/;
  const BRACKET_QUOTED_ID_REGEX = /\[\]|\[[^\]]+\]/;
  const PLAIN_ID_REGEX = /[^\s!"#%&'()*+,.\/;<=>@\[\\\]^`{|}~]+/;
  const PATH_DELIMITER_REGEX = /(\.|\/)/;
  const ANY_ID = either$9(DOUBLE_QUOTED_ID_REGEX, SINGLE_QUOTED_ID_REGEX, BRACKET_QUOTED_ID_REGEX, PLAIN_ID_REGEX);
  const IDENTIFIER_REGEX = concat$h(optional$3(/\.|\.\/|\//), ANY_ID, anyNumberOfTimes$1(concat$h(PATH_DELIMITER_REGEX, ANY_ID)));
  const HASH_PARAM_REGEX = concat$h("(", BRACKET_QUOTED_ID_REGEX, "|", PLAIN_ID_REGEX, ")(?==)");
  const HELPER_NAME_OR_PATH_EXPRESSION = {
    begin: IDENTIFIER_REGEX,
    lexemes: /[\w.\/]+/
  };
  const HELPER_PARAMETER = hljs2.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
    keywords: LITERALS2
  });
  const SUB_EXPRESSION = {
    begin: /\(/,
    end: /\)/
  };
  const HASH = {
    className: "attr",
    begin: HASH_PARAM_REGEX,
    relevance: 0,
    starts: {
      begin: /=/,
      end: /=/,
      starts: {
        contains: [
          hljs2.NUMBER_MODE,
          hljs2.QUOTE_STRING_MODE,
          hljs2.APOS_STRING_MODE,
          HELPER_PARAMETER,
          SUB_EXPRESSION
        ]
      }
    }
  };
  const BLOCK_PARAMS = {
    begin: /as\s+\|/,
    keywords: {
      keyword: "as"
    },
    end: /\|/,
    contains: [
      {
        begin: /\w+/
      }
    ]
  };
  const HELPER_PARAMETERS = {
    contains: [
      hljs2.NUMBER_MODE,
      hljs2.QUOTE_STRING_MODE,
      hljs2.APOS_STRING_MODE,
      BLOCK_PARAMS,
      HASH,
      HELPER_PARAMETER,
      SUB_EXPRESSION
    ],
    returnEnd: true
  };
  const SUB_EXPRESSION_CONTENTS = hljs2.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
    className: "name",
    keywords: BUILT_INS2,
    starts: hljs2.inherit(HELPER_PARAMETERS, {
      end: /\)/
    })
  });
  SUB_EXPRESSION.contains = [SUB_EXPRESSION_CONTENTS];
  const OPENING_BLOCK_MUSTACHE_CONTENTS = hljs2.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
    keywords: BUILT_INS2,
    className: "name",
    starts: hljs2.inherit(HELPER_PARAMETERS, {
      end: /\}\}/
    })
  });
  const CLOSING_BLOCK_MUSTACHE_CONTENTS = hljs2.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
    keywords: BUILT_INS2,
    className: "name"
  });
  const BASIC_MUSTACHE_CONTENTS = hljs2.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
    className: "name",
    keywords: BUILT_INS2,
    starts: hljs2.inherit(HELPER_PARAMETERS, {
      end: /\}\}/
    })
  });
  const ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH = {
    begin: /\\\{\{/,
    skip: true
  };
  const PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH = {
    begin: /\\\\(?=\{\{)/,
    skip: true
  };
  return {
    name: "Handlebars",
    aliases: [
      "hbs",
      "html.hbs",
      "html.handlebars",
      "htmlbars"
    ],
    case_insensitive: true,
    subLanguage: "xml",
    contains: [
      ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH,
      PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH,
      hljs2.COMMENT(/\{\{!--/, /--\}\}/),
      hljs2.COMMENT(/\{\{!/, /\}\}/),
      {
        className: "template-tag",
        begin: /\{\{\{\{(?!\/)/,
        end: /\}\}\}\}/,
        contains: [OPENING_BLOCK_MUSTACHE_CONTENTS],
        starts: {
          end: /\{\{\{\{\//,
          returnEnd: true,
          subLanguage: "xml"
        }
      },
      {
        className: "template-tag",
        begin: /\{\{\{\{\//,
        end: /\}\}\}\}/,
        contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]
      },
      {
        className: "template-tag",
        begin: /\{\{#/,
        end: /\}\}/,
        contains: [OPENING_BLOCK_MUSTACHE_CONTENTS]
      },
      {
        className: "template-tag",
        begin: /\{\{(?=else\}\})/,
        end: /\}\}/,
        keywords: "else"
      },
      {
        className: "template-tag",
        begin: /\{\{(?=else if)/,
        end: /\}\}/,
        keywords: "else if"
      },
      {
        className: "template-tag",
        begin: /\{\{\//,
        end: /\}\}/,
        contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]
      },
      {
        className: "template-variable",
        begin: /\{\{\{/,
        end: /\}\}\}/,
        contains: [BASIC_MUSTACHE_CONTENTS]
      },
      {
        className: "template-variable",
        begin: /\{\{/,
        end: /\}\}/,
        contains: [BASIC_MUSTACHE_CONTENTS]
      }
    ]
  };
}
var handlebars_1 = handlebars$1;
function haskell(hljs2) {
  const COMMENT2 = {
    variants: [
      hljs2.COMMENT("--", "$"),
      hljs2.COMMENT(/\{-/, /-\}/, {
        contains: ["self"]
      })
    ]
  };
  const PRAGMA = {
    className: "meta",
    begin: /\{-#/,
    end: /#-\}/
  };
  const PREPROCESSOR = {
    className: "meta",
    begin: "^#",
    end: "$"
  };
  const CONSTRUCTOR = {
    className: "type",
    begin: "\\b[A-Z][\\w']*",
    relevance: 0
  };
  const LIST = {
    begin: "\\(",
    end: "\\)",
    illegal: '"',
    contains: [
      PRAGMA,
      PREPROCESSOR,
      {
        className: "type",
        begin: "\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?"
      },
      hljs2.inherit(hljs2.TITLE_MODE, {
        begin: "[_a-z][\\w']*"
      }),
      COMMENT2
    ]
  };
  const RECORD = {
    begin: /\{/,
    end: /\}/,
    contains: LIST.contains
  };
  return {
    name: "Haskell",
    aliases: ["hs"],
    keywords: "let in if then else case of where do module import hiding qualified type data newtype deriving class instance as default infix infixl infixr foreign export ccall stdcall cplusplus jvm dotnet safe unsafe family forall mdo proc rec",
    contains: [
      {
        beginKeywords: "module",
        end: "where",
        keywords: "module where",
        contains: [
          LIST,
          COMMENT2
        ],
        illegal: "\\W\\.|;"
      },
      {
        begin: "\\bimport\\b",
        end: "$",
        keywords: "import qualified as hiding",
        contains: [
          LIST,
          COMMENT2
        ],
        illegal: "\\W\\.|;"
      },
      {
        className: "class",
        begin: "^(\\s*)?(class|instance)\\b",
        end: "where",
        keywords: "class family instance where",
        contains: [
          CONSTRUCTOR,
          LIST,
          COMMENT2
        ]
      },
      {
        className: "class",
        begin: "\\b(data|(new)?type)\\b",
        end: "$",
        keywords: "data family type newtype deriving",
        contains: [
          PRAGMA,
          CONSTRUCTOR,
          LIST,
          RECORD,
          COMMENT2
        ]
      },
      {
        beginKeywords: "default",
        end: "$",
        contains: [
          CONSTRUCTOR,
          LIST,
          COMMENT2
        ]
      },
      {
        beginKeywords: "infix infixl infixr",
        end: "$",
        contains: [
          hljs2.C_NUMBER_MODE,
          COMMENT2
        ]
      },
      {
        begin: "\\bforeign\\b",
        end: "$",
        keywords: "foreign import export ccall stdcall cplusplus jvm dotnet safe unsafe",
        contains: [
          CONSTRUCTOR,
          hljs2.QUOTE_STRING_MODE,
          COMMENT2
        ]
      },
      {
        className: "meta",
        begin: "#!\\/usr\\/bin\\/env runhaskell",
        end: "$"
      },
      PRAGMA,
      PREPROCESSOR,
      hljs2.QUOTE_STRING_MODE,
      hljs2.C_NUMBER_MODE,
      CONSTRUCTOR,
      hljs2.inherit(hljs2.TITLE_MODE, {
        begin: "^[_a-z][\\w']*"
      }),
      COMMENT2,
      {
        begin: "->|<-"
      }
    ]
  };
}
var haskell_1 = haskell;
function haxe(hljs2) {
  const HAXE_BASIC_TYPES = "Int Float String Bool Dynamic Void Array ";
  return {
    name: "Haxe",
    aliases: ["hx"],
    keywords: {
      keyword: "break case cast catch continue default do dynamic else enum extern for function here if import in inline never new override package private get set public return static super switch this throw trace try typedef untyped using var while " + HAXE_BASIC_TYPES,
      built_in: "trace this",
      literal: "true false null _"
    },
    contains: [
      {
        className: "string",
        begin: "'",
        end: "'",
        contains: [
          hljs2.BACKSLASH_ESCAPE,
          {
            className: "subst",
            begin: "\\$\\{",
            end: "\\}"
          },
          {
            className: "subst",
            begin: "\\$",
            end: /\W\}/
          }
        ]
      },
      hljs2.QUOTE_STRING_MODE,
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      hljs2.C_NUMBER_MODE,
      {
        className: "meta",
        begin: "@:",
        end: "$"
      },
      {
        className: "meta",
        begin: "#",
        end: "$",
        keywords: {
          "meta-keyword": "if else elseif end error"
        }
      },
      {
        className: "type",
        begin: ":[ 	]*",
        end: "[^A-Za-z0-9_ 	\\->]",
        excludeBegin: true,
        excludeEnd: true,
        relevance: 0
      },
      {
        className: "type",
        begin: ":[ 	]*",
        end: "\\W",
        excludeBegin: true,
        excludeEnd: true
      },
      {
        className: "type",
        begin: "new *",
        end: "\\W",
        excludeBegin: true,
        excludeEnd: true
      },
      {
        className: "class",
        beginKeywords: "enum",
        end: "\\{",
        contains: [hljs2.TITLE_MODE]
      },
      {
        className: "class",
        beginKeywords: "abstract",
        end: "[\\{$]",
        contains: [
          {
            className: "type",
            begin: "\\(",
            end: "\\)",
            excludeBegin: true,
            excludeEnd: true
          },
          {
            className: "type",
            begin: "from +",
            end: "\\W",
            excludeBegin: true,
            excludeEnd: true
          },
          {
            className: "type",
            begin: "to +",
            end: "\\W",
            excludeBegin: true,
            excludeEnd: true
          },
          hljs2.TITLE_MODE
        ],
        keywords: {
          keyword: "abstract from to"
        }
      },
      {
        className: "class",
        begin: "\\b(class|interface) +",
        end: "[\\{$]",
        excludeEnd: true,
        keywords: "class interface",
        contains: [
          {
            className: "keyword",
            begin: "\\b(extends|implements) +",
            keywords: "extends implements",
            contains: [
              {
                className: "type",
                begin: hljs2.IDENT_RE,
                relevance: 0
              }
            ]
          },
          hljs2.TITLE_MODE
        ]
      },
      {
        className: "function",
        beginKeywords: "function",
        end: "\\(",
        excludeEnd: true,
        illegal: "\\S",
        contains: [hljs2.TITLE_MODE]
      }
    ],
    illegal: /<\//
  };
}
var haxe_1 = haxe;
function hsp(hljs2) {
  return {
    name: "HSP",
    case_insensitive: true,
    keywords: {
      $pattern: /[\w._]+/,
      keyword: "goto gosub return break repeat loop continue wait await dim sdim foreach dimtype dup dupptr end stop newmod delmod mref run exgoto on mcall assert logmes newlab resume yield onexit onerror onkey onclick oncmd exist delete mkdir chdir dirlist bload bsave bcopy memfile if else poke wpoke lpoke getstr chdpm memexpand memcpy memset notesel noteadd notedel noteload notesave randomize noteunsel noteget split strrep setease button chgdisp exec dialog mmload mmplay mmstop mci pset pget syscolor mes print title pos circle cls font sysfont objsize picload color palcolor palette redraw width gsel gcopy gzoom gmode bmpsave hsvcolor getkey listbox chkbox combox input mesbox buffer screen bgscr mouse objsel groll line clrobj boxf objprm objmode stick grect grotate gsquare gradf objimage objskip objenable celload celdiv celput newcom querycom delcom cnvstow comres axobj winobj sendmsg comevent comevarg sarrayconv callfunc cnvwtos comevdisp libptr system hspstat hspver stat cnt err strsize looplev sublev iparam wparam lparam refstr refdval int rnd strlen length length2 length3 length4 vartype gettime peek wpeek lpeek varptr varuse noteinfo instr abs limit getease str strmid strf getpath strtrim sin cos tan atan sqrt double absf expf logf limitf powf geteasef mousex mousey mousew hwnd hinstance hdc ginfo objinfo dirinfo sysinfo thismod __hspver__ __hsp30__ __date__ __time__ __line__ __file__ _debug __hspdef__ and or xor not screen_normal screen_palette screen_hide screen_fixedsize screen_tool screen_frame gmode_gdi gmode_mem gmode_rgb0 gmode_alpha gmode_rgb0alpha gmode_add gmode_sub gmode_pixela ginfo_mx ginfo_my ginfo_act ginfo_sel ginfo_wx1 ginfo_wy1 ginfo_wx2 ginfo_wy2 ginfo_vx ginfo_vy ginfo_sizex ginfo_sizey ginfo_winx ginfo_winy ginfo_mesx ginfo_mesy ginfo_r ginfo_g ginfo_b ginfo_paluse ginfo_dispx ginfo_dispy ginfo_cx ginfo_cy ginfo_intid ginfo_newid ginfo_sx ginfo_sy objinfo_mode objinfo_bmscr objinfo_hwnd notemax notesize dir_cur dir_exe dir_win dir_sys dir_cmdline dir_desktop dir_mydoc dir_tv font_normal font_bold font_italic font_underline font_strikeout font_antialias objmode_normal objmode_guifont objmode_usefont gsquare_grad msgothic msmincho do until while wend for next _break _continue switch case default swbreak swend ddim ldim alloc m_pi rad2deg deg2rad ease_linear ease_quad_in ease_quad_out ease_quad_inout ease_cubic_in ease_cubic_out ease_cubic_inout ease_quartic_in ease_quartic_out ease_quartic_inout ease_bounce_in ease_bounce_out ease_bounce_inout ease_shake_in ease_shake_out ease_shake_inout ease_loop"
    },
    contains: [
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      hljs2.QUOTE_STRING_MODE,
      hljs2.APOS_STRING_MODE,
      {
        className: "string",
        begin: /\{"/,
        end: /"\}/,
        contains: [hljs2.BACKSLASH_ESCAPE]
      },
      hljs2.COMMENT(";", "$", {
        relevance: 0
      }),
      {
        className: "meta",
        begin: "#",
        end: "$",
        keywords: {
          "meta-keyword": "addion cfunc cmd cmpopt comfunc const defcfunc deffunc define else endif enum epack func global if ifdef ifndef include modcfunc modfunc modinit modterm module pack packopt regcmd runtime undef usecom uselib"
        },
        contains: [
          hljs2.inherit(hljs2.QUOTE_STRING_MODE, {
            className: "meta-string"
          }),
          hljs2.NUMBER_MODE,
          hljs2.C_NUMBER_MODE,
          hljs2.C_LINE_COMMENT_MODE,
          hljs2.C_BLOCK_COMMENT_MODE
        ]
      },
      {
        className: "symbol",
        begin: "^\\*(\\w+|@)"
      },
      hljs2.NUMBER_MODE,
      hljs2.C_NUMBER_MODE
    ]
  };
}
var hsp_1 = hsp;
function source$h(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function anyNumberOfTimes(re) {
  return concat$g("(", re, ")*");
}
function optional$2(re) {
  return concat$g("(", re, ")?");
}
function concat$g(...args) {
  const joined = args.map((x2) => source$h(x2)).join("");
  return joined;
}
function either$8(...args) {
  const joined = "(" + args.map((x2) => source$h(x2)).join("|") + ")";
  return joined;
}
function handlebars(hljs2) {
  const BUILT_INS2 = {
    "builtin-name": [
      "action",
      "bindattr",
      "collection",
      "component",
      "concat",
      "debugger",
      "each",
      "each-in",
      "get",
      "hash",
      "if",
      "in",
      "input",
      "link-to",
      "loc",
      "log",
      "lookup",
      "mut",
      "outlet",
      "partial",
      "query-params",
      "render",
      "template",
      "textarea",
      "unbound",
      "unless",
      "view",
      "with",
      "yield"
    ]
  };
  const LITERALS2 = {
    literal: [
      "true",
      "false",
      "undefined",
      "null"
    ]
  };
  const DOUBLE_QUOTED_ID_REGEX = /""|"[^"]+"/;
  const SINGLE_QUOTED_ID_REGEX = /''|'[^']+'/;
  const BRACKET_QUOTED_ID_REGEX = /\[\]|\[[^\]]+\]/;
  const PLAIN_ID_REGEX = /[^\s!"#%&'()*+,.\/;<=>@\[\\\]^`{|}~]+/;
  const PATH_DELIMITER_REGEX = /(\.|\/)/;
  const ANY_ID = either$8(DOUBLE_QUOTED_ID_REGEX, SINGLE_QUOTED_ID_REGEX, BRACKET_QUOTED_ID_REGEX, PLAIN_ID_REGEX);
  const IDENTIFIER_REGEX = concat$g(optional$2(/\.|\.\/|\//), ANY_ID, anyNumberOfTimes(concat$g(PATH_DELIMITER_REGEX, ANY_ID)));
  const HASH_PARAM_REGEX = concat$g("(", BRACKET_QUOTED_ID_REGEX, "|", PLAIN_ID_REGEX, ")(?==)");
  const HELPER_NAME_OR_PATH_EXPRESSION = {
    begin: IDENTIFIER_REGEX,
    lexemes: /[\w.\/]+/
  };
  const HELPER_PARAMETER = hljs2.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
    keywords: LITERALS2
  });
  const SUB_EXPRESSION = {
    begin: /\(/,
    end: /\)/
  };
  const HASH = {
    className: "attr",
    begin: HASH_PARAM_REGEX,
    relevance: 0,
    starts: {
      begin: /=/,
      end: /=/,
      starts: {
        contains: [
          hljs2.NUMBER_MODE,
          hljs2.QUOTE_STRING_MODE,
          hljs2.APOS_STRING_MODE,
          HELPER_PARAMETER,
          SUB_EXPRESSION
        ]
      }
    }
  };
  const BLOCK_PARAMS = {
    begin: /as\s+\|/,
    keywords: {
      keyword: "as"
    },
    end: /\|/,
    contains: [
      {
        begin: /\w+/
      }
    ]
  };
  const HELPER_PARAMETERS = {
    contains: [
      hljs2.NUMBER_MODE,
      hljs2.QUOTE_STRING_MODE,
      hljs2.APOS_STRING_MODE,
      BLOCK_PARAMS,
      HASH,
      HELPER_PARAMETER,
      SUB_EXPRESSION
    ],
    returnEnd: true
  };
  const SUB_EXPRESSION_CONTENTS = hljs2.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
    className: "name",
    keywords: BUILT_INS2,
    starts: hljs2.inherit(HELPER_PARAMETERS, {
      end: /\)/
    })
  });
  SUB_EXPRESSION.contains = [SUB_EXPRESSION_CONTENTS];
  const OPENING_BLOCK_MUSTACHE_CONTENTS = hljs2.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
    keywords: BUILT_INS2,
    className: "name",
    starts: hljs2.inherit(HELPER_PARAMETERS, {
      end: /\}\}/
    })
  });
  const CLOSING_BLOCK_MUSTACHE_CONTENTS = hljs2.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
    keywords: BUILT_INS2,
    className: "name"
  });
  const BASIC_MUSTACHE_CONTENTS = hljs2.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
    className: "name",
    keywords: BUILT_INS2,
    starts: hljs2.inherit(HELPER_PARAMETERS, {
      end: /\}\}/
    })
  });
  const ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH = {
    begin: /\\\{\{/,
    skip: true
  };
  const PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH = {
    begin: /\\\\(?=\{\{)/,
    skip: true
  };
  return {
    name: "Handlebars",
    aliases: [
      "hbs",
      "html.hbs",
      "html.handlebars",
      "htmlbars"
    ],
    case_insensitive: true,
    subLanguage: "xml",
    contains: [
      ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH,
      PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH,
      hljs2.COMMENT(/\{\{!--/, /--\}\}/),
      hljs2.COMMENT(/\{\{!/, /\}\}/),
      {
        className: "template-tag",
        begin: /\{\{\{\{(?!\/)/,
        end: /\}\}\}\}/,
        contains: [OPENING_BLOCK_MUSTACHE_CONTENTS],
        starts: {
          end: /\{\{\{\{\//,
          returnEnd: true,
          subLanguage: "xml"
        }
      },
      {
        className: "template-tag",
        begin: /\{\{\{\{\//,
        end: /\}\}\}\}/,
        contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]
      },
      {
        className: "template-tag",
        begin: /\{\{#/,
        end: /\}\}/,
        contains: [OPENING_BLOCK_MUSTACHE_CONTENTS]
      },
      {
        className: "template-tag",
        begin: /\{\{(?=else\}\})/,
        end: /\}\}/,
        keywords: "else"
      },
      {
        className: "template-tag",
        begin: /\{\{(?=else if)/,
        end: /\}\}/,
        keywords: "else if"
      },
      {
        className: "template-tag",
        begin: /\{\{\//,
        end: /\}\}/,
        contains: [CLOSING_BLOCK_MUSTACHE_CONTENTS]
      },
      {
        className: "template-variable",
        begin: /\{\{\{/,
        end: /\}\}\}/,
        contains: [BASIC_MUSTACHE_CONTENTS]
      },
      {
        className: "template-variable",
        begin: /\{\{/,
        end: /\}\}/,
        contains: [BASIC_MUSTACHE_CONTENTS]
      }
    ]
  };
}
function htmlbars(hljs2) {
  const definition = handlebars(hljs2);
  definition.name = "HTMLbars";
  if (hljs2.getLanguage("handlebars")) {
    definition.disableAutodetect = true;
  }
  return definition;
}
var htmlbars_1 = htmlbars;
function source$g(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function concat$f(...args) {
  const joined = args.map((x2) => source$g(x2)).join("");
  return joined;
}
function http(hljs2) {
  const VERSION2 = "HTTP/(2|1\\.[01])";
  const HEADER_NAME = /[A-Za-z][A-Za-z0-9-]*/;
  const HEADER = {
    className: "attribute",
    begin: concat$f("^", HEADER_NAME, "(?=\\:\\s)"),
    starts: {
      contains: [
        {
          className: "punctuation",
          begin: /: /,
          relevance: 0,
          starts: {
            end: "$",
            relevance: 0
          }
        }
      ]
    }
  };
  const HEADERS_AND_BODY = [
    HEADER,
    {
      begin: "\\n\\n",
      starts: {subLanguage: [], endsWithParent: true}
    }
  ];
  return {
    name: "HTTP",
    aliases: ["https"],
    illegal: /\S/,
    contains: [
      {
        begin: "^(?=" + VERSION2 + " \\d{3})",
        end: /$/,
        contains: [
          {
            className: "meta",
            begin: VERSION2
          },
          {
            className: "number",
            begin: "\\b\\d{3}\\b"
          }
        ],
        starts: {
          end: /\b\B/,
          illegal: /\S/,
          contains: HEADERS_AND_BODY
        }
      },
      {
        begin: "(?=^[A-Z]+ (.*?) " + VERSION2 + "$)",
        end: /$/,
        contains: [
          {
            className: "string",
            begin: " ",
            end: " ",
            excludeBegin: true,
            excludeEnd: true
          },
          {
            className: "meta",
            begin: VERSION2
          },
          {
            className: "keyword",
            begin: "[A-Z]+"
          }
        ],
        starts: {
          end: /\b\B/,
          illegal: /\S/,
          contains: HEADERS_AND_BODY
        }
      },
      hljs2.inherit(HEADER, {
        relevance: 0
      })
    ]
  };
}
var http_1 = http;
function hy(hljs2) {
  var SYMBOLSTART = "a-zA-Z_\\-!.?+*=<>&#'";
  var SYMBOL_RE = "[" + SYMBOLSTART + "][" + SYMBOLSTART + "0-9/;:]*";
  var keywords2 = {
    $pattern: SYMBOL_RE,
    "builtin-name": "!= % %= & &= * ** **= *= *map + += , --build-class-- --import-- -= . / // //= /= < << <<= <= = > >= >> >>= @ @= ^ ^= abs accumulate all and any ap-compose ap-dotimes ap-each ap-each-while ap-filter ap-first ap-if ap-last ap-map ap-map-when ap-pipe ap-reduce ap-reject apply as-> ascii assert assoc bin break butlast callable calling-module-name car case cdr chain chr coll? combinations compile compress cond cons cons? continue count curry cut cycle dec def default-method defclass defmacro defmacro-alias defmacro/g! defmain defmethod defmulti defn defn-alias defnc defnr defreader defseq del delattr delete-route dict-comp dir disassemble dispatch-reader-macro distinct divmod do doto drop drop-last drop-while empty? end-sequence eval eval-and-compile eval-when-compile even? every? except exec filter first flatten float? fn fnc fnr for for* format fraction genexpr gensym get getattr global globals group-by hasattr hash hex id identity if if* if-not if-python2 import in inc input instance? integer integer-char? integer? interleave interpose is is-coll is-cons is-empty is-even is-every is-float is-instance is-integer is-integer-char is-iterable is-iterator is-keyword is-neg is-none is-not is-numeric is-odd is-pos is-string is-symbol is-zero isinstance islice issubclass iter iterable? iterate iterator? keyword keyword? lambda last len let lif lif-not list* list-comp locals loop macro-error macroexpand macroexpand-1 macroexpand-all map max merge-with method-decorator min multi-decorator multicombinations name neg? next none? nonlocal not not-in not? nth numeric? oct odd? open or ord partition permutations pos? post-route postwalk pow prewalk print product profile/calls profile/cpu put-route quasiquote quote raise range read read-str recursive-replace reduce remove repeat repeatedly repr require rest round route route-with-methods rwm second seq set-comp setattr setv some sorted string string? sum switch symbol? take take-nth take-while tee try unless unquote unquote-splicing vars walk when while with with* with-decorator with-gensyms xi xor yield yield-from zero? zip zip-longest | |= ~"
  };
  var SIMPLE_NUMBER_RE = "[-+]?\\d+(\\.\\d+)?";
  var SYMBOL = {
    begin: SYMBOL_RE,
    relevance: 0
  };
  var NUMBER = {
    className: "number",
    begin: SIMPLE_NUMBER_RE,
    relevance: 0
  };
  var STRING = hljs2.inherit(hljs2.QUOTE_STRING_MODE, {illegal: null});
  var COMMENT2 = hljs2.COMMENT(";", "$", {
    relevance: 0
  });
  var LITERAL = {
    className: "literal",
    begin: /\b([Tt]rue|[Ff]alse|nil|None)\b/
  };
  var COLLECTION = {
    begin: "[\\[\\{]",
    end: "[\\]\\}]"
  };
  var HINT = {
    className: "comment",
    begin: "\\^" + SYMBOL_RE
  };
  var HINT_COL = hljs2.COMMENT("\\^\\{", "\\}");
  var KEY = {
    className: "symbol",
    begin: "[:]{1,2}" + SYMBOL_RE
  };
  var LIST = {
    begin: "\\(",
    end: "\\)"
  };
  var BODY = {
    endsWithParent: true,
    relevance: 0
  };
  var NAME = {
    className: "name",
    relevance: 0,
    keywords: keywords2,
    begin: SYMBOL_RE,
    starts: BODY
  };
  var DEFAULT_CONTAINS = [LIST, STRING, HINT, HINT_COL, COMMENT2, KEY, COLLECTION, NUMBER, LITERAL, SYMBOL];
  LIST.contains = [hljs2.COMMENT("comment", ""), NAME, BODY];
  BODY.contains = DEFAULT_CONTAINS;
  COLLECTION.contains = DEFAULT_CONTAINS;
  return {
    name: "Hy",
    aliases: ["hylang"],
    illegal: /\S/,
    contains: [hljs2.SHEBANG(), LIST, STRING, HINT, HINT_COL, COMMENT2, KEY, COLLECTION, NUMBER, LITERAL]
  };
}
var hy_1 = hy;
function inform7(hljs2) {
  const START_BRACKET = "\\[";
  const END_BRACKET = "\\]";
  return {
    name: "Inform 7",
    aliases: ["i7"],
    case_insensitive: true,
    keywords: {
      keyword: "thing room person man woman animal container supporter backdrop door scenery open closed locked inside gender is are say understand kind of rule"
    },
    contains: [
      {
        className: "string",
        begin: '"',
        end: '"',
        relevance: 0,
        contains: [
          {
            className: "subst",
            begin: START_BRACKET,
            end: END_BRACKET
          }
        ]
      },
      {
        className: "section",
        begin: /^(Volume|Book|Part|Chapter|Section|Table)\b/,
        end: "$"
      },
      {
        begin: /^(Check|Carry out|Report|Instead of|To|Rule|When|Before|After)\b/,
        end: ":",
        contains: [
          {
            begin: "\\(This",
            end: "\\)"
          }
        ]
      },
      {
        className: "comment",
        begin: START_BRACKET,
        end: END_BRACKET,
        contains: ["self"]
      }
    ]
  };
}
var inform7_1 = inform7;
function source$f(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function lookahead$5(re) {
  return concat$e("(?=", re, ")");
}
function concat$e(...args) {
  const joined = args.map((x2) => source$f(x2)).join("");
  return joined;
}
function either$7(...args) {
  const joined = "(" + args.map((x2) => source$f(x2)).join("|") + ")";
  return joined;
}
function ini(hljs2) {
  const NUMBERS = {
    className: "number",
    relevance: 0,
    variants: [
      {
        begin: /([+-]+)?[\d]+_[\d_]+/
      },
      {
        begin: hljs2.NUMBER_RE
      }
    ]
  };
  const COMMENTS = hljs2.COMMENT();
  COMMENTS.variants = [
    {
      begin: /;/,
      end: /$/
    },
    {
      begin: /#/,
      end: /$/
    }
  ];
  const VARIABLES = {
    className: "variable",
    variants: [
      {
        begin: /\$[\w\d"][\w\d_]*/
      },
      {
        begin: /\$\{(.*?)\}/
      }
    ]
  };
  const LITERALS2 = {
    className: "literal",
    begin: /\bon|off|true|false|yes|no\b/
  };
  const STRINGS = {
    className: "string",
    contains: [hljs2.BACKSLASH_ESCAPE],
    variants: [
      {
        begin: "'''",
        end: "'''",
        relevance: 10
      },
      {
        begin: '"""',
        end: '"""',
        relevance: 10
      },
      {
        begin: '"',
        end: '"'
      },
      {
        begin: "'",
        end: "'"
      }
    ]
  };
  const ARRAY = {
    begin: /\[/,
    end: /\]/,
    contains: [
      COMMENTS,
      LITERALS2,
      VARIABLES,
      STRINGS,
      NUMBERS,
      "self"
    ],
    relevance: 0
  };
  const BARE_KEY = /[A-Za-z0-9_-]+/;
  const QUOTED_KEY_DOUBLE_QUOTE = /"(\\"|[^"])*"/;
  const QUOTED_KEY_SINGLE_QUOTE = /'[^']*'/;
  const ANY_KEY = either$7(BARE_KEY, QUOTED_KEY_DOUBLE_QUOTE, QUOTED_KEY_SINGLE_QUOTE);
  const DOTTED_KEY = concat$e(ANY_KEY, "(\\s*\\.\\s*", ANY_KEY, ")*", lookahead$5(/\s*=\s*[^#\s]/));
  return {
    name: "TOML, also INI",
    aliases: ["toml"],
    case_insensitive: true,
    illegal: /\S/,
    contains: [
      COMMENTS,
      {
        className: "section",
        begin: /\[+/,
        end: /\]+/
      },
      {
        begin: DOTTED_KEY,
        className: "attr",
        starts: {
          end: /$/,
          contains: [
            COMMENTS,
            ARRAY,
            LITERALS2,
            VARIABLES,
            STRINGS,
            NUMBERS
          ]
        }
      }
    ]
  };
}
var ini_1 = ini;
function source$e(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function concat$d(...args) {
  const joined = args.map((x2) => source$e(x2)).join("");
  return joined;
}
function irpf90(hljs2) {
  const PARAMS = {
    className: "params",
    begin: "\\(",
    end: "\\)"
  };
  const OPTIONAL_NUMBER_SUFFIX = /(_[a-z_\d]+)?/;
  const OPTIONAL_NUMBER_EXP = /([de][+-]?\d+)?/;
  const NUMBER = {
    className: "number",
    variants: [
      {
        begin: concat$d(/\b\d+/, /\.(\d*)/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX)
      },
      {
        begin: concat$d(/\b\d+/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX)
      },
      {
        begin: concat$d(/\.\d+/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX)
      }
    ],
    relevance: 0
  };
  const F_KEYWORDS = {
    literal: ".False. .True.",
    keyword: "kind do while private call intrinsic where elsewhere type endtype endmodule endselect endinterface end enddo endif if forall endforall only contains default return stop then public subroutine|10 function program .and. .or. .not. .le. .eq. .ge. .gt. .lt. goto save else use module select case access blank direct exist file fmt form formatted iostat name named nextrec number opened rec recl sequential status unformatted unit continue format pause cycle exit c_null_char c_alert c_backspace c_form_feed flush wait decimal round iomsg synchronous nopass non_overridable pass protected volatile abstract extends import non_intrinsic value deferred generic final enumerator class associate bind enum c_int c_short c_long c_long_long c_signed_char c_size_t c_int8_t c_int16_t c_int32_t c_int64_t c_int_least8_t c_int_least16_t c_int_least32_t c_int_least64_t c_int_fast8_t c_int_fast16_t c_int_fast32_t c_int_fast64_t c_intmax_t C_intptr_t c_float c_double c_long_double c_float_complex c_double_complex c_long_double_complex c_bool c_char c_null_ptr c_null_funptr c_new_line c_carriage_return c_horizontal_tab c_vertical_tab iso_c_binding c_loc c_funloc c_associated  c_f_pointer c_ptr c_funptr iso_fortran_env character_storage_size error_unit file_storage_size input_unit iostat_end iostat_eor numeric_storage_size output_unit c_f_procpointer ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode newunit contiguous recursive pad position action delim readwrite eor advance nml interface procedure namelist include sequence elemental pure integer real character complex logical dimension allocatable|10 parameter external implicit|10 none double precision assign intent optional pointer target in out common equivalence data begin_provider &begin_provider end_provider begin_shell end_shell begin_template end_template subst assert touch soft_touch provide no_dep free irp_if irp_else irp_endif irp_write irp_read",
    built_in: "alog alog10 amax0 amax1 amin0 amin1 amod cabs ccos cexp clog csin csqrt dabs dacos dasin datan datan2 dcos dcosh ddim dexp dint dlog dlog10 dmax1 dmin1 dmod dnint dsign dsin dsinh dsqrt dtan dtanh float iabs idim idint idnint ifix isign max0 max1 min0 min1 sngl algama cdabs cdcos cdexp cdlog cdsin cdsqrt cqabs cqcos cqexp cqlog cqsin cqsqrt dcmplx dconjg derf derfc dfloat dgamma dimag dlgama iqint qabs qacos qasin qatan qatan2 qcmplx qconjg qcos qcosh qdim qerf qerfc qexp qgamma qimag qlgama qlog qlog10 qmax1 qmin1 qmod qnint qsign qsin qsinh qsqrt qtan qtanh abs acos aimag aint anint asin atan atan2 char cmplx conjg cos cosh exp ichar index int log log10 max min nint sign sin sinh sqrt tan tanh print write dim lge lgt lle llt mod nullify allocate deallocate adjustl adjustr all allocated any associated bit_size btest ceiling count cshift date_and_time digits dot_product eoshift epsilon exponent floor fraction huge iand ibclr ibits ibset ieor ior ishft ishftc lbound len_trim matmul maxexponent maxloc maxval merge minexponent minloc minval modulo mvbits nearest pack present product radix random_number random_seed range repeat reshape rrspacing scale scan selected_int_kind selected_real_kind set_exponent shape size spacing spread sum system_clock tiny transpose trim ubound unpack verify achar iachar transfer dble entry dprod cpu_time command_argument_count get_command get_command_argument get_environment_variable is_iostat_end ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode is_iostat_eor move_alloc new_line selected_char_kind same_type_as extends_type_of acosh asinh atanh bessel_j0 bessel_j1 bessel_jn bessel_y0 bessel_y1 bessel_yn erf erfc erfc_scaled gamma log_gamma hypot norm2 atomic_define atomic_ref execute_command_line leadz trailz storage_size merge_bits bge bgt ble blt dshiftl dshiftr findloc iall iany iparity image_index lcobound ucobound maskl maskr num_images parity popcnt poppar shifta shiftl shiftr this_image IRP_ALIGN irp_here"
  };
  return {
    name: "IRPF90",
    case_insensitive: true,
    keywords: F_KEYWORDS,
    illegal: /\/\*/,
    contains: [
      hljs2.inherit(hljs2.APOS_STRING_MODE, {
        className: "string",
        relevance: 0
      }),
      hljs2.inherit(hljs2.QUOTE_STRING_MODE, {
        className: "string",
        relevance: 0
      }),
      {
        className: "function",
        beginKeywords: "subroutine function program",
        illegal: "[${=\\n]",
        contains: [
          hljs2.UNDERSCORE_TITLE_MODE,
          PARAMS
        ]
      },
      hljs2.COMMENT("!", "$", {
        relevance: 0
      }),
      hljs2.COMMENT("begin_doc", "end_doc", {
        relevance: 10
      }),
      NUMBER
    ]
  };
}
var irpf90_1 = irpf90;
function isbl(hljs2) {
  const UNDERSCORE_IDENT_RE2 = "[A-Za-z\u0410-\u042F\u0430-\u044F\u0451\u0401_!][A-Za-z\u0410-\u042F\u0430-\u044F\u0451\u0401_0-9]*";
  const FUNCTION_NAME_IDENT_RE = "[A-Za-z\u0410-\u042F\u0430-\u044F\u0451\u0401_][A-Za-z\u0410-\u042F\u0430-\u044F\u0451\u0401_0-9]*";
  const KEYWORD = "and \u0438 else \u0438\u043D\u0430\u0447\u0435 endexcept endfinally endforeach \u043A\u043E\u043D\u0435\u0446\u0432\u0441\u0435 endif \u043A\u043E\u043D\u0435\u0446\u0435\u0441\u043B\u0438 endwhile \u043A\u043E\u043D\u0435\u0446\u043F\u043E\u043A\u0430 except exitfor finally foreach \u0432\u0441\u0435 if \u0435\u0441\u043B\u0438 in \u0432 not \u043D\u0435 or \u0438\u043B\u0438 try while \u043F\u043E\u043A\u0430 ";
  const sysres_constants = "SYSRES_CONST_ACCES_RIGHT_TYPE_EDIT SYSRES_CONST_ACCES_RIGHT_TYPE_FULL SYSRES_CONST_ACCES_RIGHT_TYPE_VIEW SYSRES_CONST_ACCESS_MODE_REQUISITE_CODE SYSRES_CONST_ACCESS_NO_ACCESS_VIEW SYSRES_CONST_ACCESS_NO_ACCESS_VIEW_CODE SYSRES_CONST_ACCESS_RIGHTS_ADD_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_ADD_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_CHANGE_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_CHANGE_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_DELETE_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_DELETE_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_EXECUTE_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_EXECUTE_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_NO_ACCESS_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_NO_ACCESS_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_RATIFY_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_RATIFY_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_RIGHTS_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_VIEW SYSRES_CONST_ACCESS_RIGHTS_VIEW_CODE SYSRES_CONST_ACCESS_RIGHTS_VIEW_REQUISITE_CODE SYSRES_CONST_ACCESS_RIGHTS_VIEW_REQUISITE_YES_CODE SYSRES_CONST_ACCESS_TYPE_CHANGE SYSRES_CONST_ACCESS_TYPE_CHANGE_CODE SYSRES_CONST_ACCESS_TYPE_EXISTS SYSRES_CONST_ACCESS_TYPE_EXISTS_CODE SYSRES_CONST_ACCESS_TYPE_FULL SYSRES_CONST_ACCESS_TYPE_FULL_CODE SYSRES_CONST_ACCESS_TYPE_VIEW SYSRES_CONST_ACCESS_TYPE_VIEW_CODE SYSRES_CONST_ACTION_TYPE_ABORT SYSRES_CONST_ACTION_TYPE_ACCEPT SYSRES_CONST_ACTION_TYPE_ACCESS_RIGHTS SYSRES_CONST_ACTION_TYPE_ADD_ATTACHMENT SYSRES_CONST_ACTION_TYPE_CHANGE_CARD SYSRES_CONST_ACTION_TYPE_CHANGE_KIND SYSRES_CONST_ACTION_TYPE_CHANGE_STORAGE SYSRES_CONST_ACTION_TYPE_CONTINUE SYSRES_CONST_ACTION_TYPE_COPY SYSRES_CONST_ACTION_TYPE_CREATE SYSRES_CONST_ACTION_TYPE_CREATE_VERSION SYSRES_CONST_ACTION_TYPE_DELETE SYSRES_CONST_ACTION_TYPE_DELETE_ATTACHMENT SYSRES_CONST_ACTION_TYPE_DELETE_VERSION SYSRES_CONST_ACTION_TYPE_DISABLE_DELEGATE_ACCESS_RIGHTS SYSRES_CONST_ACTION_TYPE_ENABLE_DELEGATE_ACCESS_RIGHTS SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_CERTIFICATE SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_CERTIFICATE_AND_PASSWORD SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_PASSWORD SYSRES_CONST_ACTION_TYPE_EXPORT_WITH_LOCK SYSRES_CONST_ACTION_TYPE_EXPORT_WITHOUT_LOCK SYSRES_CONST_ACTION_TYPE_IMPORT_WITH_UNLOCK SYSRES_CONST_ACTION_TYPE_IMPORT_WITHOUT_UNLOCK SYSRES_CONST_ACTION_TYPE_LIFE_CYCLE_STAGE SYSRES_CONST_ACTION_TYPE_LOCK SYSRES_CONST_ACTION_TYPE_LOCK_FOR_SERVER SYSRES_CONST_ACTION_TYPE_LOCK_MODIFY SYSRES_CONST_ACTION_TYPE_MARK_AS_READED SYSRES_CONST_ACTION_TYPE_MARK_AS_UNREADED SYSRES_CONST_ACTION_TYPE_MODIFY SYSRES_CONST_ACTION_TYPE_MODIFY_CARD SYSRES_CONST_ACTION_TYPE_MOVE_TO_ARCHIVE SYSRES_CONST_ACTION_TYPE_OFF_ENCRYPTION SYSRES_CONST_ACTION_TYPE_PASSWORD_CHANGE SYSRES_CONST_ACTION_TYPE_PERFORM SYSRES_CONST_ACTION_TYPE_RECOVER_FROM_LOCAL_COPY SYSRES_CONST_ACTION_TYPE_RESTART SYSRES_CONST_ACTION_TYPE_RESTORE_FROM_ARCHIVE SYSRES_CONST_ACTION_TYPE_REVISION SYSRES_CONST_ACTION_TYPE_SEND_BY_MAIL SYSRES_CONST_ACTION_TYPE_SIGN SYSRES_CONST_ACTION_TYPE_START SYSRES_CONST_ACTION_TYPE_UNLOCK SYSRES_CONST_ACTION_TYPE_UNLOCK_FROM_SERVER SYSRES_CONST_ACTION_TYPE_VERSION_STATE SYSRES_CONST_ACTION_TYPE_VERSION_VISIBILITY SYSRES_CONST_ACTION_TYPE_VIEW SYSRES_CONST_ACTION_TYPE_VIEW_SHADOW_COPY SYSRES_CONST_ACTION_TYPE_WORKFLOW_DESCRIPTION_MODIFY SYSRES_CONST_ACTION_TYPE_WRITE_HISTORY SYSRES_CONST_ACTIVE_VERSION_STATE_PICK_VALUE SYSRES_CONST_ADD_REFERENCE_MODE_NAME SYSRES_CONST_ADDITION_REQUISITE_CODE SYSRES_CONST_ADDITIONAL_PARAMS_REQUISITE_CODE SYSRES_CONST_ADITIONAL_JOB_END_DATE_REQUISITE_NAME SYSRES_CONST_ADITIONAL_JOB_READ_REQUISITE_NAME SYSRES_CONST_ADITIONAL_JOB_START_DATE_REQUISITE_NAME SYSRES_CONST_ADITIONAL_JOB_STATE_REQUISITE_NAME SYSRES_CONST_ADMINISTRATION_HISTORY_ADDING_USER_TO_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_ADDING_USER_TO_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_COMP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_COMP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_USER_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_USER_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_CREATION SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_CREATION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_DELETION SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_DELETION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_COMP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_COMP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_FROM_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_FROM_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_RESTRICTION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_RESTRICTION_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_PRIVILEGE_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_PRIVILEGE_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_RIGHTS_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_RIGHTS_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_IS_MAIN_SERVER_CHANGED_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_IS_MAIN_SERVER_CHANGED_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_IS_PUBLIC_CHANGED_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_IS_PUBLIC_CHANGED_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_RESTRICTION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_RESTRICTION_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_PRIVILEGE_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_PRIVILEGE_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_RIGHTS_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_RIGHTS_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_CREATION SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_CREATION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_DELETION SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_DELETION_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_CATEGORY_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_CATEGORY_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_COMP_TITLE_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_COMP_TITLE_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_FULL_NAME_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_FULL_NAME_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_PARENT_GROUP_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_PARENT_GROUP_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_AUTH_TYPE_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_AUTH_TYPE_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_LOGIN_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_LOGIN_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_STATUS_ACTION SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_STATUS_ACTION_CODE SYSRES_CONST_ADMINISTRATION_HISTORY_USER_PASSWORD_CHANGE SYSRES_CONST_ADMINISTRATION_HISTORY_USER_PASSWORD_CHANGE_ACTION SYSRES_CONST_ALL_ACCEPT_CONDITION_RUS SYSRES_CONST_ALL_USERS_GROUP SYSRES_CONST_ALL_USERS_GROUP_NAME SYSRES_CONST_ALL_USERS_SERVER_GROUP_NAME SYSRES_CONST_ALLOWED_ACCESS_TYPE_CODE SYSRES_CONST_ALLOWED_ACCESS_TYPE_NAME SYSRES_CONST_APP_VIEWER_TYPE_REQUISITE_CODE SYSRES_CONST_APPROVING_SIGNATURE_NAME SYSRES_CONST_APPROVING_SIGNATURE_REQUISITE_CODE SYSRES_CONST_ASSISTANT_SUBSTITUE_TYPE SYSRES_CONST_ASSISTANT_SUBSTITUE_TYPE_CODE SYSRES_CONST_ATTACH_TYPE_COMPONENT_TOKEN SYSRES_CONST_ATTACH_TYPE_DOC SYSRES_CONST_ATTACH_TYPE_EDOC SYSRES_CONST_ATTACH_TYPE_FOLDER SYSRES_CONST_ATTACH_TYPE_JOB SYSRES_CONST_ATTACH_TYPE_REFERENCE SYSRES_CONST_ATTACH_TYPE_TASK SYSRES_CONST_AUTH_ENCODED_PASSWORD SYSRES_CONST_AUTH_ENCODED_PASSWORD_CODE SYSRES_CONST_AUTH_NOVELL SYSRES_CONST_AUTH_PASSWORD SYSRES_CONST_AUTH_PASSWORD_CODE SYSRES_CONST_AUTH_WINDOWS SYSRES_CONST_AUTHENTICATING_SIGNATURE_NAME SYSRES_CONST_AUTHENTICATING_SIGNATURE_REQUISITE_CODE SYSRES_CONST_AUTO_ENUM_METHOD_FLAG SYSRES_CONST_AUTO_NUMERATION_CODE SYSRES_CONST_AUTO_STRONG_ENUM_METHOD_FLAG SYSRES_CONST_AUTOTEXT_NAME_REQUISITE_CODE SYSRES_CONST_AUTOTEXT_TEXT_REQUISITE_CODE SYSRES_CONST_AUTOTEXT_USAGE_ALL SYSRES_CONST_AUTOTEXT_USAGE_ALL_CODE SYSRES_CONST_AUTOTEXT_USAGE_SIGN SYSRES_CONST_AUTOTEXT_USAGE_SIGN_CODE SYSRES_CONST_AUTOTEXT_USAGE_WORK SYSRES_CONST_AUTOTEXT_USAGE_WORK_CODE SYSRES_CONST_AUTOTEXT_USE_ANYWHERE_CODE SYSRES_CONST_AUTOTEXT_USE_ON_SIGNING_CODE SYSRES_CONST_AUTOTEXT_USE_ON_WORK_CODE SYSRES_CONST_BEGIN_DATE_REQUISITE_CODE SYSRES_CONST_BLACK_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_BLUE_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_BTN_PART SYSRES_CONST_CALCULATED_ROLE_TYPE_CODE SYSRES_CONST_CALL_TYPE_VARIABLE_BUTTON_VALUE SYSRES_CONST_CALL_TYPE_VARIABLE_PROGRAM_VALUE SYSRES_CONST_CANCEL_MESSAGE_FUNCTION_RESULT SYSRES_CONST_CARD_PART SYSRES_CONST_CARD_REFERENCE_MODE_NAME SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_ENCRYPT_VALUE SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_SIGN_AND_ENCRYPT_VALUE SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_SIGN_VALUE SYSRES_CONST_CHECK_PARAM_VALUE_DATE_PARAM_TYPE SYSRES_CONST_CHECK_PARAM_VALUE_FLOAT_PARAM_TYPE SYSRES_CONST_CHECK_PARAM_VALUE_INTEGER_PARAM_TYPE SYSRES_CONST_CHECK_PARAM_VALUE_PICK_PARAM_TYPE SYSRES_CONST_CHECK_PARAM_VALUE_REEFRENCE_PARAM_TYPE SYSRES_CONST_CLOSED_RECORD_FLAG_VALUE_FEMININE SYSRES_CONST_CLOSED_RECORD_FLAG_VALUE_MASCULINE SYSRES_CONST_CODE_COMPONENT_TYPE_ADMIN SYSRES_CONST_CODE_COMPONENT_TYPE_DEVELOPER SYSRES_CONST_CODE_COMPONENT_TYPE_DOCS SYSRES_CONST_CODE_COMPONENT_TYPE_EDOC_CARDS SYSRES_CONST_CODE_COMPONENT_TYPE_EXTERNAL_EXECUTABLE SYSRES_CONST_CODE_COMPONENT_TYPE_OTHER SYSRES_CONST_CODE_COMPONENT_TYPE_REFERENCE SYSRES_CONST_CODE_COMPONENT_TYPE_REPORT SYSRES_CONST_CODE_COMPONENT_TYPE_SCRIPT SYSRES_CONST_CODE_COMPONENT_TYPE_URL SYSRES_CONST_CODE_REQUISITE_ACCESS SYSRES_CONST_CODE_REQUISITE_CODE SYSRES_CONST_CODE_REQUISITE_COMPONENT SYSRES_CONST_CODE_REQUISITE_DESCRIPTION SYSRES_CONST_CODE_REQUISITE_EXCLUDE_COMPONENT SYSRES_CONST_CODE_REQUISITE_RECORD SYSRES_CONST_COMMENT_REQ_CODE SYSRES_CONST_COMMON_SETTINGS_REQUISITE_CODE SYSRES_CONST_COMP_CODE_GRD SYSRES_CONST_COMPONENT_GROUP_TYPE_REQUISITE_CODE SYSRES_CONST_COMPONENT_TYPE_ADMIN_COMPONENTS SYSRES_CONST_COMPONENT_TYPE_DEVELOPER_COMPONENTS SYSRES_CONST_COMPONENT_TYPE_DOCS SYSRES_CONST_COMPONENT_TYPE_EDOC_CARDS SYSRES_CONST_COMPONENT_TYPE_EDOCS SYSRES_CONST_COMPONENT_TYPE_EXTERNAL_EXECUTABLE SYSRES_CONST_COMPONENT_TYPE_OTHER SYSRES_CONST_COMPONENT_TYPE_REFERENCE_TYPES SYSRES_CONST_COMPONENT_TYPE_REFERENCES SYSRES_CONST_COMPONENT_TYPE_REPORTS SYSRES_CONST_COMPONENT_TYPE_SCRIPTS SYSRES_CONST_COMPONENT_TYPE_URL SYSRES_CONST_COMPONENTS_REMOTE_SERVERS_VIEW_CODE SYSRES_CONST_CONDITION_BLOCK_DESCRIPTION SYSRES_CONST_CONST_FIRM_STATUS_COMMON SYSRES_CONST_CONST_FIRM_STATUS_INDIVIDUAL SYSRES_CONST_CONST_NEGATIVE_VALUE SYSRES_CONST_CONST_POSITIVE_VALUE SYSRES_CONST_CONST_SERVER_STATUS_DONT_REPLICATE SYSRES_CONST_CONST_SERVER_STATUS_REPLICATE SYSRES_CONST_CONTENTS_REQUISITE_CODE SYSRES_CONST_DATA_TYPE_BOOLEAN SYSRES_CONST_DATA_TYPE_DATE SYSRES_CONST_DATA_TYPE_FLOAT SYSRES_CONST_DATA_TYPE_INTEGER SYSRES_CONST_DATA_TYPE_PICK SYSRES_CONST_DATA_TYPE_REFERENCE SYSRES_CONST_DATA_TYPE_STRING SYSRES_CONST_DATA_TYPE_TEXT SYSRES_CONST_DATA_TYPE_VARIANT SYSRES_CONST_DATE_CLOSE_REQ_CODE SYSRES_CONST_DATE_FORMAT_DATE_ONLY_CHAR SYSRES_CONST_DATE_OPEN_REQ_CODE SYSRES_CONST_DATE_REQUISITE SYSRES_CONST_DATE_REQUISITE_CODE SYSRES_CONST_DATE_REQUISITE_NAME SYSRES_CONST_DATE_REQUISITE_TYPE SYSRES_CONST_DATE_TYPE_CHAR SYSRES_CONST_DATETIME_FORMAT_VALUE SYSRES_CONST_DEA_ACCESS_RIGHTS_ACTION_CODE SYSRES_CONST_DESCRIPTION_LOCALIZE_ID_REQUISITE_CODE SYSRES_CONST_DESCRIPTION_REQUISITE_CODE SYSRES_CONST_DET1_PART SYSRES_CONST_DET2_PART SYSRES_CONST_DET3_PART SYSRES_CONST_DET4_PART SYSRES_CONST_DET5_PART SYSRES_CONST_DET6_PART SYSRES_CONST_DETAIL_DATASET_KEY_REQUISITE_CODE SYSRES_CONST_DETAIL_PICK_REQUISITE_CODE SYSRES_CONST_DETAIL_REQ_CODE SYSRES_CONST_DO_NOT_USE_ACCESS_TYPE_CODE SYSRES_CONST_DO_NOT_USE_ACCESS_TYPE_NAME SYSRES_CONST_DO_NOT_USE_ON_VIEW_ACCESS_TYPE_CODE SYSRES_CONST_DO_NOT_USE_ON_VIEW_ACCESS_TYPE_NAME SYSRES_CONST_DOCUMENT_STORAGES_CODE SYSRES_CONST_DOCUMENT_TEMPLATES_TYPE_NAME SYSRES_CONST_DOUBLE_REQUISITE_CODE SYSRES_CONST_EDITOR_CLOSE_FILE_OBSERV_TYPE_CODE SYSRES_CONST_EDITOR_CLOSE_PROCESS_OBSERV_TYPE_CODE SYSRES_CONST_EDITOR_TYPE_REQUISITE_CODE SYSRES_CONST_EDITORS_APPLICATION_NAME_REQUISITE_CODE SYSRES_CONST_EDITORS_CREATE_SEVERAL_PROCESSES_REQUISITE_CODE SYSRES_CONST_EDITORS_EXTENSION_REQUISITE_CODE SYSRES_CONST_EDITORS_OBSERVER_BY_PROCESS_TYPE SYSRES_CONST_EDITORS_REFERENCE_CODE SYSRES_CONST_EDITORS_REPLACE_SPEC_CHARS_REQUISITE_CODE SYSRES_CONST_EDITORS_USE_PLUGINS_REQUISITE_CODE SYSRES_CONST_EDITORS_VIEW_DOCUMENT_OPENED_TO_EDIT_CODE SYSRES_CONST_EDOC_CARD_TYPE_REQUISITE_CODE SYSRES_CONST_EDOC_CARD_TYPES_LINK_REQUISITE_CODE SYSRES_CONST_EDOC_CERTIFICATE_AND_PASSWORD_ENCODE_CODE SYSRES_CONST_EDOC_CERTIFICATE_ENCODE_CODE SYSRES_CONST_EDOC_DATE_REQUISITE_CODE SYSRES_CONST_EDOC_KIND_REFERENCE_CODE SYSRES_CONST_EDOC_KINDS_BY_TEMPLATE_ACTION_CODE SYSRES_CONST_EDOC_MANAGE_ACCESS_CODE SYSRES_CONST_EDOC_NONE_ENCODE_CODE SYSRES_CONST_EDOC_NUMBER_REQUISITE_CODE SYSRES_CONST_EDOC_PASSWORD_ENCODE_CODE SYSRES_CONST_EDOC_READONLY_ACCESS_CODE SYSRES_CONST_EDOC_SHELL_LIFE_TYPE_VIEW_VALUE SYSRES_CONST_EDOC_SIZE_RESTRICTION_PRIORITY_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_CHECK_ACCESS_RIGHTS_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_COMPUTER_NAME_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_DATABASE_NAME_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_EDIT_IN_STORAGE_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_LOCAL_PATH_REQUISITE_CODE SYSRES_CONST_EDOC_STORAGE_SHARED_SOURCE_NAME_REQUISITE_CODE SYSRES_CONST_EDOC_TEMPLATE_REQUISITE_CODE SYSRES_CONST_EDOC_TYPES_REFERENCE_CODE SYSRES_CONST_EDOC_VERSION_ACTIVE_STAGE_CODE SYSRES_CONST_EDOC_VERSION_DESIGN_STAGE_CODE SYSRES_CONST_EDOC_VERSION_OBSOLETE_STAGE_CODE SYSRES_CONST_EDOC_WRITE_ACCES_CODE SYSRES_CONST_EDOCUMENT_CARD_REQUISITES_REFERENCE_CODE_SELECTED_REQUISITE SYSRES_CONST_ENCODE_CERTIFICATE_TYPE_CODE SYSRES_CONST_END_DATE_REQUISITE_CODE SYSRES_CONST_ENUMERATION_TYPE_REQUISITE_CODE SYSRES_CONST_EXECUTE_ACCESS_RIGHTS_TYPE_CODE SYSRES_CONST_EXECUTIVE_FILE_STORAGE_TYPE SYSRES_CONST_EXIST_CONST SYSRES_CONST_EXIST_VALUE SYSRES_CONST_EXPORT_LOCK_TYPE_ASK SYSRES_CONST_EXPORT_LOCK_TYPE_WITH_LOCK SYSRES_CONST_EXPORT_LOCK_TYPE_WITHOUT_LOCK SYSRES_CONST_EXPORT_VERSION_TYPE_ASK SYSRES_CONST_EXPORT_VERSION_TYPE_LAST SYSRES_CONST_EXPORT_VERSION_TYPE_LAST_ACTIVE SYSRES_CONST_EXTENSION_REQUISITE_CODE SYSRES_CONST_FILTER_NAME_REQUISITE_CODE SYSRES_CONST_FILTER_REQUISITE_CODE SYSRES_CONST_FILTER_TYPE_COMMON_CODE SYSRES_CONST_FILTER_TYPE_COMMON_NAME SYSRES_CONST_FILTER_TYPE_USER_CODE SYSRES_CONST_FILTER_TYPE_USER_NAME SYSRES_CONST_FILTER_VALUE_REQUISITE_NAME SYSRES_CONST_FLOAT_NUMBER_FORMAT_CHAR SYSRES_CONST_FLOAT_REQUISITE_TYPE SYSRES_CONST_FOLDER_AUTHOR_VALUE SYSRES_CONST_FOLDER_KIND_ANY_OBJECTS SYSRES_CONST_FOLDER_KIND_COMPONENTS SYSRES_CONST_FOLDER_KIND_EDOCS SYSRES_CONST_FOLDER_KIND_JOBS SYSRES_CONST_FOLDER_KIND_TASKS SYSRES_CONST_FOLDER_TYPE_COMMON SYSRES_CONST_FOLDER_TYPE_COMPONENT SYSRES_CONST_FOLDER_TYPE_FAVORITES SYSRES_CONST_FOLDER_TYPE_INBOX SYSRES_CONST_FOLDER_TYPE_OUTBOX SYSRES_CONST_FOLDER_TYPE_QUICK_LAUNCH SYSRES_CONST_FOLDER_TYPE_SEARCH SYSRES_CONST_FOLDER_TYPE_SHORTCUTS SYSRES_CONST_FOLDER_TYPE_USER SYSRES_CONST_FROM_DICTIONARY_ENUM_METHOD_FLAG SYSRES_CONST_FULL_SUBSTITUTE_TYPE SYSRES_CONST_FULL_SUBSTITUTE_TYPE_CODE SYSRES_CONST_FUNCTION_CANCEL_RESULT SYSRES_CONST_FUNCTION_CATEGORY_SYSTEM SYSRES_CONST_FUNCTION_CATEGORY_USER SYSRES_CONST_FUNCTION_FAILURE_RESULT SYSRES_CONST_FUNCTION_SAVE_RESULT SYSRES_CONST_GENERATED_REQUISITE SYSRES_CONST_GREEN_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_GROUP_ACCOUNT_TYPE_VALUE_CODE SYSRES_CONST_GROUP_CATEGORY_NORMAL_CODE SYSRES_CONST_GROUP_CATEGORY_NORMAL_NAME SYSRES_CONST_GROUP_CATEGORY_SERVICE_CODE SYSRES_CONST_GROUP_CATEGORY_SERVICE_NAME SYSRES_CONST_GROUP_COMMON_CATEGORY_FIELD_VALUE SYSRES_CONST_GROUP_FULL_NAME_REQUISITE_CODE SYSRES_CONST_GROUP_NAME_REQUISITE_CODE SYSRES_CONST_GROUP_RIGHTS_T_REQUISITE_CODE SYSRES_CONST_GROUP_SERVER_CODES_REQUISITE_CODE SYSRES_CONST_GROUP_SERVER_NAME_REQUISITE_CODE SYSRES_CONST_GROUP_SERVICE_CATEGORY_FIELD_VALUE SYSRES_CONST_GROUP_USER_REQUISITE_CODE SYSRES_CONST_GROUPS_REFERENCE_CODE SYSRES_CONST_GROUPS_REQUISITE_CODE SYSRES_CONST_HIDDEN_MODE_NAME SYSRES_CONST_HIGH_LVL_REQUISITE_CODE SYSRES_CONST_HISTORY_ACTION_CREATE_CODE SYSRES_CONST_HISTORY_ACTION_DELETE_CODE SYSRES_CONST_HISTORY_ACTION_EDIT_CODE SYSRES_CONST_HOUR_CHAR SYSRES_CONST_ID_REQUISITE_CODE SYSRES_CONST_IDSPS_REQUISITE_CODE SYSRES_CONST_IMAGE_MODE_COLOR SYSRES_CONST_IMAGE_MODE_GREYSCALE SYSRES_CONST_IMAGE_MODE_MONOCHROME SYSRES_CONST_IMPORTANCE_HIGH SYSRES_CONST_IMPORTANCE_LOW SYSRES_CONST_IMPORTANCE_NORMAL SYSRES_CONST_IN_DESIGN_VERSION_STATE_PICK_VALUE SYSRES_CONST_INCOMING_WORK_RULE_TYPE_CODE SYSRES_CONST_INT_REQUISITE SYSRES_CONST_INT_REQUISITE_TYPE SYSRES_CONST_INTEGER_NUMBER_FORMAT_CHAR SYSRES_CONST_INTEGER_TYPE_CHAR SYSRES_CONST_IS_GENERATED_REQUISITE_NEGATIVE_VALUE SYSRES_CONST_IS_PUBLIC_ROLE_REQUISITE_CODE SYSRES_CONST_IS_REMOTE_USER_NEGATIVE_VALUE SYSRES_CONST_IS_REMOTE_USER_POSITIVE_VALUE SYSRES_CONST_IS_STORED_REQUISITE_NEGATIVE_VALUE SYSRES_CONST_IS_STORED_REQUISITE_STORED_VALUE SYSRES_CONST_ITALIC_LIFE_CYCLE_STAGE_DRAW_STYLE SYSRES_CONST_JOB_BLOCK_DESCRIPTION SYSRES_CONST_JOB_KIND_CONTROL_JOB SYSRES_CONST_JOB_KIND_JOB SYSRES_CONST_JOB_KIND_NOTICE SYSRES_CONST_JOB_STATE_ABORTED SYSRES_CONST_JOB_STATE_COMPLETE SYSRES_CONST_JOB_STATE_WORKING SYSRES_CONST_KIND_REQUISITE_CODE SYSRES_CONST_KIND_REQUISITE_NAME SYSRES_CONST_KINDS_CREATE_SHADOW_COPIES_REQUISITE_CODE SYSRES_CONST_KINDS_DEFAULT_EDOC_LIFE_STAGE_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_ALL_TEPLATES_ALLOWED_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_ALLOW_LIFE_CYCLE_STAGE_CHANGING_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_ALLOW_MULTIPLE_ACTIVE_VERSIONS_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_SHARE_ACCES_RIGHTS_BY_DEFAULT_CODE SYSRES_CONST_KINDS_EDOC_TEMPLATE_REQUISITE_CODE SYSRES_CONST_KINDS_EDOC_TYPE_REQUISITE_CODE SYSRES_CONST_KINDS_SIGNERS_REQUISITES_CODE SYSRES_CONST_KOD_INPUT_TYPE SYSRES_CONST_LAST_UPDATE_DATE_REQUISITE_CODE SYSRES_CONST_LIFE_CYCLE_START_STAGE_REQUISITE_CODE SYSRES_CONST_LILAC_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_LINK_OBJECT_KIND_COMPONENT SYSRES_CONST_LINK_OBJECT_KIND_DOCUMENT SYSRES_CONST_LINK_OBJECT_KIND_EDOC SYSRES_CONST_LINK_OBJECT_KIND_FOLDER SYSRES_CONST_LINK_OBJECT_KIND_JOB SYSRES_CONST_LINK_OBJECT_KIND_REFERENCE SYSRES_CONST_LINK_OBJECT_KIND_TASK SYSRES_CONST_LINK_REF_TYPE_REQUISITE_CODE SYSRES_CONST_LIST_REFERENCE_MODE_NAME SYSRES_CONST_LOCALIZATION_DICTIONARY_MAIN_VIEW_CODE SYSRES_CONST_MAIN_VIEW_CODE SYSRES_CONST_MANUAL_ENUM_METHOD_FLAG SYSRES_CONST_MASTER_COMP_TYPE_REQUISITE_CODE SYSRES_CONST_MASTER_TABLE_REC_ID_REQUISITE_CODE SYSRES_CONST_MAXIMIZED_MODE_NAME SYSRES_CONST_ME_VALUE SYSRES_CONST_MESSAGE_ATTENTION_CAPTION SYSRES_CONST_MESSAGE_CONFIRMATION_CAPTION SYSRES_CONST_MESSAGE_ERROR_CAPTION SYSRES_CONST_MESSAGE_INFORMATION_CAPTION SYSRES_CONST_MINIMIZED_MODE_NAME SYSRES_CONST_MINUTE_CHAR SYSRES_CONST_MODULE_REQUISITE_CODE SYSRES_CONST_MONITORING_BLOCK_DESCRIPTION SYSRES_CONST_MONTH_FORMAT_VALUE SYSRES_CONST_NAME_LOCALIZE_ID_REQUISITE_CODE SYSRES_CONST_NAME_REQUISITE_CODE SYSRES_CONST_NAME_SINGULAR_REQUISITE_CODE SYSRES_CONST_NAMEAN_INPUT_TYPE SYSRES_CONST_NEGATIVE_PICK_VALUE SYSRES_CONST_NEGATIVE_VALUE SYSRES_CONST_NO SYSRES_CONST_NO_PICK_VALUE SYSRES_CONST_NO_SIGNATURE_REQUISITE_CODE SYSRES_CONST_NO_VALUE SYSRES_CONST_NONE_ACCESS_RIGHTS_TYPE_CODE SYSRES_CONST_NONOPERATING_RECORD_FLAG_VALUE SYSRES_CONST_NONOPERATING_RECORD_FLAG_VALUE_MASCULINE SYSRES_CONST_NORMAL_ACCESS_RIGHTS_TYPE_CODE SYSRES_CONST_NORMAL_LIFE_CYCLE_STAGE_DRAW_STYLE SYSRES_CONST_NORMAL_MODE_NAME SYSRES_CONST_NOT_ALLOWED_ACCESS_TYPE_CODE SYSRES_CONST_NOT_ALLOWED_ACCESS_TYPE_NAME SYSRES_CONST_NOTE_REQUISITE_CODE SYSRES_CONST_NOTICE_BLOCK_DESCRIPTION SYSRES_CONST_NUM_REQUISITE SYSRES_CONST_NUM_STR_REQUISITE_CODE SYSRES_CONST_NUMERATION_AUTO_NOT_STRONG SYSRES_CONST_NUMERATION_AUTO_STRONG SYSRES_CONST_NUMERATION_FROM_DICTONARY SYSRES_CONST_NUMERATION_MANUAL SYSRES_CONST_NUMERIC_TYPE_CHAR SYSRES_CONST_NUMREQ_REQUISITE_CODE SYSRES_CONST_OBSOLETE_VERSION_STATE_PICK_VALUE SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_CODE SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_FEMININE SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_MASCULINE SYSRES_CONST_OPTIONAL_FORM_COMP_REQCODE_PREFIX SYSRES_CONST_ORANGE_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_ORIGINALREF_REQUISITE_CODE SYSRES_CONST_OURFIRM_REF_CODE SYSRES_CONST_OURFIRM_REQUISITE_CODE SYSRES_CONST_OURFIRM_VAR SYSRES_CONST_OUTGOING_WORK_RULE_TYPE_CODE SYSRES_CONST_PICK_NEGATIVE_RESULT SYSRES_CONST_PICK_POSITIVE_RESULT SYSRES_CONST_PICK_REQUISITE SYSRES_CONST_PICK_REQUISITE_TYPE SYSRES_CONST_PICK_TYPE_CHAR SYSRES_CONST_PLAN_STATUS_REQUISITE_CODE SYSRES_CONST_PLATFORM_VERSION_COMMENT SYSRES_CONST_PLUGINS_SETTINGS_DESCRIPTION_REQUISITE_CODE SYSRES_CONST_POSITIVE_PICK_VALUE SYSRES_CONST_POWER_TO_CREATE_ACTION_CODE SYSRES_CONST_POWER_TO_SIGN_ACTION_CODE SYSRES_CONST_PRIORITY_REQUISITE_CODE SYSRES_CONST_QUALIFIED_TASK_TYPE SYSRES_CONST_QUALIFIED_TASK_TYPE_CODE SYSRES_CONST_RECSTAT_REQUISITE_CODE SYSRES_CONST_RED_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_REF_ID_T_REF_TYPE_REQUISITE_CODE SYSRES_CONST_REF_REQUISITE SYSRES_CONST_REF_REQUISITE_TYPE SYSRES_CONST_REF_REQUISITES_REFERENCE_CODE_SELECTED_REQUISITE SYSRES_CONST_REFERENCE_RECORD_HISTORY_CREATE_ACTION_CODE SYSRES_CONST_REFERENCE_RECORD_HISTORY_DELETE_ACTION_CODE SYSRES_CONST_REFERENCE_RECORD_HISTORY_MODIFY_ACTION_CODE SYSRES_CONST_REFERENCE_TYPE_CHAR SYSRES_CONST_REFERENCE_TYPE_REQUISITE_NAME SYSRES_CONST_REFERENCES_ADD_PARAMS_REQUISITE_CODE SYSRES_CONST_REFERENCES_DISPLAY_REQUISITE_REQUISITE_CODE SYSRES_CONST_REMOTE_SERVER_STATUS_WORKING SYSRES_CONST_REMOTE_SERVER_TYPE_MAIN SYSRES_CONST_REMOTE_SERVER_TYPE_SECONDARY SYSRES_CONST_REMOTE_USER_FLAG_VALUE_CODE SYSRES_CONST_REPORT_APP_EDITOR_INTERNAL SYSRES_CONST_REPORT_BASE_REPORT_ID_REQUISITE_CODE SYSRES_CONST_REPORT_BASE_REPORT_REQUISITE_CODE SYSRES_CONST_REPORT_SCRIPT_REQUISITE_CODE SYSRES_CONST_REPORT_TEMPLATE_REQUISITE_CODE SYSRES_CONST_REPORT_VIEWER_CODE_REQUISITE_CODE SYSRES_CONST_REQ_ALLOW_COMPONENT_DEFAULT_VALUE SYSRES_CONST_REQ_ALLOW_RECORD_DEFAULT_VALUE SYSRES_CONST_REQ_ALLOW_SERVER_COMPONENT_DEFAULT_VALUE SYSRES_CONST_REQ_MODE_AVAILABLE_CODE SYSRES_CONST_REQ_MODE_EDIT_CODE SYSRES_CONST_REQ_MODE_HIDDEN_CODE SYSRES_CONST_REQ_MODE_NOT_AVAILABLE_CODE SYSRES_CONST_REQ_MODE_VIEW_CODE SYSRES_CONST_REQ_NUMBER_REQUISITE_CODE SYSRES_CONST_REQ_SECTION_VALUE SYSRES_CONST_REQ_TYPE_VALUE SYSRES_CONST_REQUISITE_FORMAT_BY_UNIT SYSRES_CONST_REQUISITE_FORMAT_DATE_FULL SYSRES_CONST_REQUISITE_FORMAT_DATE_TIME SYSRES_CONST_REQUISITE_FORMAT_LEFT SYSRES_CONST_REQUISITE_FORMAT_RIGHT SYSRES_CONST_REQUISITE_FORMAT_WITHOUT_UNIT SYSRES_CONST_REQUISITE_NUMBER_REQUISITE_CODE SYSRES_CONST_REQUISITE_SECTION_ACTIONS SYSRES_CONST_REQUISITE_SECTION_BUTTON SYSRES_CONST_REQUISITE_SECTION_BUTTONS SYSRES_CONST_REQUISITE_SECTION_CARD SYSRES_CONST_REQUISITE_SECTION_TABLE SYSRES_CONST_REQUISITE_SECTION_TABLE10 SYSRES_CONST_REQUISITE_SECTION_TABLE11 SYSRES_CONST_REQUISITE_SECTION_TABLE12 SYSRES_CONST_REQUISITE_SECTION_TABLE13 SYSRES_CONST_REQUISITE_SECTION_TABLE14 SYSRES_CONST_REQUISITE_SECTION_TABLE15 SYSRES_CONST_REQUISITE_SECTION_TABLE16 SYSRES_CONST_REQUISITE_SECTION_TABLE17 SYSRES_CONST_REQUISITE_SECTION_TABLE18 SYSRES_CONST_REQUISITE_SECTION_TABLE19 SYSRES_CONST_REQUISITE_SECTION_TABLE2 SYSRES_CONST_REQUISITE_SECTION_TABLE20 SYSRES_CONST_REQUISITE_SECTION_TABLE21 SYSRES_CONST_REQUISITE_SECTION_TABLE22 SYSRES_CONST_REQUISITE_SECTION_TABLE23 SYSRES_CONST_REQUISITE_SECTION_TABLE24 SYSRES_CONST_REQUISITE_SECTION_TABLE3 SYSRES_CONST_REQUISITE_SECTION_TABLE4 SYSRES_CONST_REQUISITE_SECTION_TABLE5 SYSRES_CONST_REQUISITE_SECTION_TABLE6 SYSRES_CONST_REQUISITE_SECTION_TABLE7 SYSRES_CONST_REQUISITE_SECTION_TABLE8 SYSRES_CONST_REQUISITE_SECTION_TABLE9 SYSRES_CONST_REQUISITES_PSEUDOREFERENCE_REQUISITE_NUMBER_REQUISITE_CODE SYSRES_CONST_RIGHT_ALIGNMENT_CODE SYSRES_CONST_ROLES_REFERENCE_CODE SYSRES_CONST_ROUTE_STEP_AFTER_RUS SYSRES_CONST_ROUTE_STEP_AND_CONDITION_RUS SYSRES_CONST_ROUTE_STEP_OR_CONDITION_RUS SYSRES_CONST_ROUTE_TYPE_COMPLEX SYSRES_CONST_ROUTE_TYPE_PARALLEL SYSRES_CONST_ROUTE_TYPE_SERIAL SYSRES_CONST_SBDATASETDESC_NEGATIVE_VALUE SYSRES_CONST_SBDATASETDESC_POSITIVE_VALUE SYSRES_CONST_SBVIEWSDESC_POSITIVE_VALUE SYSRES_CONST_SCRIPT_BLOCK_DESCRIPTION SYSRES_CONST_SEARCH_BY_TEXT_REQUISITE_CODE SYSRES_CONST_SEARCHES_COMPONENT_CONTENT SYSRES_CONST_SEARCHES_CRITERIA_ACTION_NAME SYSRES_CONST_SEARCHES_EDOC_CONTENT SYSRES_CONST_SEARCHES_FOLDER_CONTENT SYSRES_CONST_SEARCHES_JOB_CONTENT SYSRES_CONST_SEARCHES_REFERENCE_CODE SYSRES_CONST_SEARCHES_TASK_CONTENT SYSRES_CONST_SECOND_CHAR SYSRES_CONST_SECTION_REQUISITE_ACTIONS_VALUE SYSRES_CONST_SECTION_REQUISITE_CARD_VALUE SYSRES_CONST_SECTION_REQUISITE_CODE SYSRES_CONST_SECTION_REQUISITE_DETAIL_1_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_2_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_3_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_4_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_5_VALUE SYSRES_CONST_SECTION_REQUISITE_DETAIL_6_VALUE SYSRES_CONST_SELECT_REFERENCE_MODE_NAME SYSRES_CONST_SELECT_TYPE_SELECTABLE SYSRES_CONST_SELECT_TYPE_SELECTABLE_ONLY_CHILD SYSRES_CONST_SELECT_TYPE_SELECTABLE_WITH_CHILD SYSRES_CONST_SELECT_TYPE_UNSLECTABLE SYSRES_CONST_SERVER_TYPE_MAIN SYSRES_CONST_SERVICE_USER_CATEGORY_FIELD_VALUE SYSRES_CONST_SETTINGS_USER_REQUISITE_CODE SYSRES_CONST_SIGNATURE_AND_ENCODE_CERTIFICATE_TYPE_CODE SYSRES_CONST_SIGNATURE_CERTIFICATE_TYPE_CODE SYSRES_CONST_SINGULAR_TITLE_REQUISITE_CODE SYSRES_CONST_SQL_SERVER_AUTHENTIFICATION_FLAG_VALUE_CODE SYSRES_CONST_SQL_SERVER_ENCODE_AUTHENTIFICATION_FLAG_VALUE_CODE SYSRES_CONST_STANDART_ROUTE_REFERENCE_CODE SYSRES_CONST_STANDART_ROUTE_REFERENCE_COMMENT_REQUISITE_CODE SYSRES_CONST_STANDART_ROUTES_GROUPS_REFERENCE_CODE SYSRES_CONST_STATE_REQ_NAME SYSRES_CONST_STATE_REQUISITE_ACTIVE_VALUE SYSRES_CONST_STATE_REQUISITE_CLOSED_VALUE SYSRES_CONST_STATE_REQUISITE_CODE SYSRES_CONST_STATIC_ROLE_TYPE_CODE SYSRES_CONST_STATUS_PLAN_DEFAULT_VALUE SYSRES_CONST_STATUS_VALUE_AUTOCLEANING SYSRES_CONST_STATUS_VALUE_BLUE_SQUARE SYSRES_CONST_STATUS_VALUE_COMPLETE SYSRES_CONST_STATUS_VALUE_GREEN_SQUARE SYSRES_CONST_STATUS_VALUE_ORANGE_SQUARE SYSRES_CONST_STATUS_VALUE_PURPLE_SQUARE SYSRES_CONST_STATUS_VALUE_RED_SQUARE SYSRES_CONST_STATUS_VALUE_SUSPEND SYSRES_CONST_STATUS_VALUE_YELLOW_SQUARE SYSRES_CONST_STDROUTE_SHOW_TO_USERS_REQUISITE_CODE SYSRES_CONST_STORAGE_TYPE_FILE SYSRES_CONST_STORAGE_TYPE_SQL_SERVER SYSRES_CONST_STR_REQUISITE SYSRES_CONST_STRIKEOUT_LIFE_CYCLE_STAGE_DRAW_STYLE SYSRES_CONST_STRING_FORMAT_LEFT_ALIGN_CHAR SYSRES_CONST_STRING_FORMAT_RIGHT_ALIGN_CHAR SYSRES_CONST_STRING_REQUISITE_CODE SYSRES_CONST_STRING_REQUISITE_TYPE SYSRES_CONST_STRING_TYPE_CHAR SYSRES_CONST_SUBSTITUTES_PSEUDOREFERENCE_CODE SYSRES_CONST_SUBTASK_BLOCK_DESCRIPTION SYSRES_CONST_SYSTEM_SETTING_CURRENT_USER_PARAM_VALUE SYSRES_CONST_SYSTEM_SETTING_EMPTY_VALUE_PARAM_VALUE SYSRES_CONST_SYSTEM_VERSION_COMMENT SYSRES_CONST_TASK_ACCESS_TYPE_ALL SYSRES_CONST_TASK_ACCESS_TYPE_ALL_MEMBERS SYSRES_CONST_TASK_ACCESS_TYPE_MANUAL SYSRES_CONST_TASK_ENCODE_TYPE_CERTIFICATION SYSRES_CONST_TASK_ENCODE_TYPE_CERTIFICATION_AND_PASSWORD SYSRES_CONST_TASK_ENCODE_TYPE_NONE SYSRES_CONST_TASK_ENCODE_TYPE_PASSWORD SYSRES_CONST_TASK_ROUTE_ALL_CONDITION SYSRES_CONST_TASK_ROUTE_AND_CONDITION SYSRES_CONST_TASK_ROUTE_OR_CONDITION SYSRES_CONST_TASK_STATE_ABORTED SYSRES_CONST_TASK_STATE_COMPLETE SYSRES_CONST_TASK_STATE_CONTINUED SYSRES_CONST_TASK_STATE_CONTROL SYSRES_CONST_TASK_STATE_INIT SYSRES_CONST_TASK_STATE_WORKING SYSRES_CONST_TASK_TITLE SYSRES_CONST_TASK_TYPES_GROUPS_REFERENCE_CODE SYSRES_CONST_TASK_TYPES_REFERENCE_CODE SYSRES_CONST_TEMPLATES_REFERENCE_CODE SYSRES_CONST_TEST_DATE_REQUISITE_NAME SYSRES_CONST_TEST_DEV_DATABASE_NAME SYSRES_CONST_TEST_DEV_SYSTEM_CODE SYSRES_CONST_TEST_EDMS_DATABASE_NAME SYSRES_CONST_TEST_EDMS_MAIN_CODE SYSRES_CONST_TEST_EDMS_MAIN_DB_NAME SYSRES_CONST_TEST_EDMS_SECOND_CODE SYSRES_CONST_TEST_EDMS_SECOND_DB_NAME SYSRES_CONST_TEST_EDMS_SYSTEM_CODE SYSRES_CONST_TEST_NUMERIC_REQUISITE_NAME SYSRES_CONST_TEXT_REQUISITE SYSRES_CONST_TEXT_REQUISITE_CODE SYSRES_CONST_TEXT_REQUISITE_TYPE SYSRES_CONST_TEXT_TYPE_CHAR SYSRES_CONST_TYPE_CODE_REQUISITE_CODE SYSRES_CONST_TYPE_REQUISITE_CODE SYSRES_CONST_UNDEFINED_LIFE_CYCLE_STAGE_FONT_COLOR SYSRES_CONST_UNITS_SECTION_ID_REQUISITE_CODE SYSRES_CONST_UNITS_SECTION_REQUISITE_CODE SYSRES_CONST_UNOPERATING_RECORD_FLAG_VALUE_CODE SYSRES_CONST_UNSTORED_DATA_REQUISITE_CODE SYSRES_CONST_UNSTORED_DATA_REQUISITE_NAME SYSRES_CONST_USE_ACCESS_TYPE_CODE SYSRES_CONST_USE_ACCESS_TYPE_NAME SYSRES_CONST_USER_ACCOUNT_TYPE_VALUE_CODE SYSRES_CONST_USER_ADDITIONAL_INFORMATION_REQUISITE_CODE SYSRES_CONST_USER_AND_GROUP_ID_FROM_PSEUDOREFERENCE_REQUISITE_CODE SYSRES_CONST_USER_CATEGORY_NORMAL SYSRES_CONST_USER_CERTIFICATE_REQUISITE_CODE SYSRES_CONST_USER_CERTIFICATE_STATE_REQUISITE_CODE SYSRES_CONST_USER_CERTIFICATE_SUBJECT_NAME_REQUISITE_CODE SYSRES_CONST_USER_CERTIFICATE_THUMBPRINT_REQUISITE_CODE SYSRES_CONST_USER_COMMON_CATEGORY SYSRES_CONST_USER_COMMON_CATEGORY_CODE SYSRES_CONST_USER_FULL_NAME_REQUISITE_CODE SYSRES_CONST_USER_GROUP_TYPE_REQUISITE_CODE SYSRES_CONST_USER_LOGIN_REQUISITE_CODE SYSRES_CONST_USER_REMOTE_CONTROLLER_REQUISITE_CODE SYSRES_CONST_USER_REMOTE_SYSTEM_REQUISITE_CODE SYSRES_CONST_USER_RIGHTS_T_REQUISITE_CODE SYSRES_CONST_USER_SERVER_NAME_REQUISITE_CODE SYSRES_CONST_USER_SERVICE_CATEGORY SYSRES_CONST_USER_SERVICE_CATEGORY_CODE SYSRES_CONST_USER_STATUS_ADMINISTRATOR_CODE SYSRES_CONST_USER_STATUS_ADMINISTRATOR_NAME SYSRES_CONST_USER_STATUS_DEVELOPER_CODE SYSRES_CONST_USER_STATUS_DEVELOPER_NAME SYSRES_CONST_USER_STATUS_DISABLED_CODE SYSRES_CONST_USER_STATUS_DISABLED_NAME SYSRES_CONST_USER_STATUS_SYSTEM_DEVELOPER_CODE SYSRES_CONST_USER_STATUS_USER_CODE SYSRES_CONST_USER_STATUS_USER_NAME SYSRES_CONST_USER_STATUS_USER_NAME_DEPRECATED SYSRES_CONST_USER_TYPE_FIELD_VALUE_USER SYSRES_CONST_USER_TYPE_REQUISITE_CODE SYSRES_CONST_USERS_CONTROLLER_REQUISITE_CODE SYSRES_CONST_USERS_IS_MAIN_SERVER_REQUISITE_CODE SYSRES_CONST_USERS_REFERENCE_CODE SYSRES_CONST_USERS_REGISTRATION_CERTIFICATES_ACTION_NAME SYSRES_CONST_USERS_REQUISITE_CODE SYSRES_CONST_USERS_SYSTEM_REQUISITE_CODE SYSRES_CONST_USERS_USER_ACCESS_RIGHTS_TYPR_REQUISITE_CODE SYSRES_CONST_USERS_USER_AUTHENTICATION_REQUISITE_CODE SYSRES_CONST_USERS_USER_COMPONENT_REQUISITE_CODE SYSRES_CONST_USERS_USER_GROUP_REQUISITE_CODE SYSRES_CONST_USERS_VIEW_CERTIFICATES_ACTION_NAME SYSRES_CONST_VIEW_DEFAULT_CODE SYSRES_CONST_VIEW_DEFAULT_NAME SYSRES_CONST_VIEWER_REQUISITE_CODE SYSRES_CONST_WAITING_BLOCK_DESCRIPTION SYSRES_CONST_WIZARD_FORM_LABEL_TEST_STRING  SYSRES_CONST_WIZARD_QUERY_PARAM_HEIGHT_ETALON_STRING SYSRES_CONST_WIZARD_REFERENCE_COMMENT_REQUISITE_CODE SYSRES_CONST_WORK_RULES_DESCRIPTION_REQUISITE_CODE SYSRES_CONST_WORK_TIME_CALENDAR_REFERENCE_CODE SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE_CODE SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE_CODE_RUS SYSRES_CONST_WORK_WORKFLOW_SOFT_ROUTE_TYPE_VALUE_CODE_RUS SYSRES_CONST_WORKFLOW_ROUTE_TYPR_HARD SYSRES_CONST_WORKFLOW_ROUTE_TYPR_SOFT SYSRES_CONST_XML_ENCODING SYSRES_CONST_XREC_STAT_REQUISITE_CODE SYSRES_CONST_XRECID_FIELD_NAME SYSRES_CONST_YES SYSRES_CONST_YES_NO_2_REQUISITE_CODE SYSRES_CONST_YES_NO_REQUISITE_CODE SYSRES_CONST_YES_NO_T_REF_TYPE_REQUISITE_CODE SYSRES_CONST_YES_PICK_VALUE SYSRES_CONST_YES_VALUE ";
  const base_constants = "CR FALSE nil NO_VALUE NULL TAB TRUE YES_VALUE ";
  const base_group_name_constants = "ADMINISTRATORS_GROUP_NAME CUSTOMIZERS_GROUP_NAME DEVELOPERS_GROUP_NAME SERVICE_USERS_GROUP_NAME ";
  const decision_block_properties_constants = "DECISION_BLOCK_FIRST_OPERAND_PROPERTY DECISION_BLOCK_NAME_PROPERTY DECISION_BLOCK_OPERATION_PROPERTY DECISION_BLOCK_RESULT_TYPE_PROPERTY DECISION_BLOCK_SECOND_OPERAND_PROPERTY ";
  const file_extension_constants = "ANY_FILE_EXTENTION COMPRESSED_DOCUMENT_EXTENSION EXTENDED_DOCUMENT_EXTENSION SHORT_COMPRESSED_DOCUMENT_EXTENSION SHORT_EXTENDED_DOCUMENT_EXTENSION ";
  const job_block_properties_constants = "JOB_BLOCK_ABORT_DEADLINE_PROPERTY JOB_BLOCK_AFTER_FINISH_EVENT JOB_BLOCK_AFTER_QUERY_PARAMETERS_EVENT JOB_BLOCK_ATTACHMENT_PROPERTY JOB_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY JOB_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY JOB_BLOCK_BEFORE_QUERY_PARAMETERS_EVENT JOB_BLOCK_BEFORE_START_EVENT JOB_BLOCK_CREATED_JOBS_PROPERTY JOB_BLOCK_DEADLINE_PROPERTY JOB_BLOCK_EXECUTION_RESULTS_PROPERTY JOB_BLOCK_IS_PARALLEL_PROPERTY JOB_BLOCK_IS_RELATIVE_ABORT_DEADLINE_PROPERTY JOB_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY JOB_BLOCK_JOB_TEXT_PROPERTY JOB_BLOCK_NAME_PROPERTY JOB_BLOCK_NEED_SIGN_ON_PERFORM_PROPERTY JOB_BLOCK_PERFORMER_PROPERTY JOB_BLOCK_RELATIVE_ABORT_DEADLINE_TYPE_PROPERTY JOB_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY JOB_BLOCK_SUBJECT_PROPERTY ";
  const language_code_constants = "ENGLISH_LANGUAGE_CODE RUSSIAN_LANGUAGE_CODE ";
  const launching_external_applications_constants = "smHidden smMaximized smMinimized smNormal wmNo wmYes ";
  const link_kind_constants = "COMPONENT_TOKEN_LINK_KIND DOCUMENT_LINK_KIND EDOCUMENT_LINK_KIND FOLDER_LINK_KIND JOB_LINK_KIND REFERENCE_LINK_KIND TASK_LINK_KIND ";
  const lock_type_constants = "COMPONENT_TOKEN_LOCK_TYPE EDOCUMENT_VERSION_LOCK_TYPE ";
  const monitor_block_properties_constants = "MONITOR_BLOCK_AFTER_FINISH_EVENT MONITOR_BLOCK_BEFORE_START_EVENT MONITOR_BLOCK_DEADLINE_PROPERTY MONITOR_BLOCK_INTERVAL_PROPERTY MONITOR_BLOCK_INTERVAL_TYPE_PROPERTY MONITOR_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY MONITOR_BLOCK_NAME_PROPERTY MONITOR_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY MONITOR_BLOCK_SEARCH_SCRIPT_PROPERTY ";
  const notice_block_properties_constants = "NOTICE_BLOCK_AFTER_FINISH_EVENT NOTICE_BLOCK_ATTACHMENT_PROPERTY NOTICE_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY NOTICE_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY NOTICE_BLOCK_BEFORE_START_EVENT NOTICE_BLOCK_CREATED_NOTICES_PROPERTY NOTICE_BLOCK_DEADLINE_PROPERTY NOTICE_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY NOTICE_BLOCK_NAME_PROPERTY NOTICE_BLOCK_NOTICE_TEXT_PROPERTY NOTICE_BLOCK_PERFORMER_PROPERTY NOTICE_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY NOTICE_BLOCK_SUBJECT_PROPERTY ";
  const object_events_constants = "dseAfterCancel dseAfterClose dseAfterDelete dseAfterDeleteOutOfTransaction dseAfterInsert dseAfterOpen dseAfterScroll dseAfterUpdate dseAfterUpdateOutOfTransaction dseBeforeCancel dseBeforeClose dseBeforeDelete dseBeforeDetailUpdate dseBeforeInsert dseBeforeOpen dseBeforeUpdate dseOnAnyRequisiteChange dseOnCloseRecord dseOnDeleteError dseOnOpenRecord dseOnPrepareUpdate dseOnUpdateError dseOnUpdateRatifiedRecord dseOnValidDelete dseOnValidUpdate reOnChange reOnChangeValues SELECTION_BEGIN_ROUTE_EVENT SELECTION_END_ROUTE_EVENT ";
  const object_params_constants = "CURRENT_PERIOD_IS_REQUIRED PREVIOUS_CARD_TYPE_NAME SHOW_RECORD_PROPERTIES_FORM ";
  const other_constants = "ACCESS_RIGHTS_SETTING_DIALOG_CODE ADMINISTRATOR_USER_CODE ANALYTIC_REPORT_TYPE asrtHideLocal asrtHideRemote CALCULATED_ROLE_TYPE_CODE COMPONENTS_REFERENCE_DEVELOPER_VIEW_CODE DCTS_TEST_PROTOCOLS_FOLDER_PATH E_EDOC_VERSION_ALREADY_APPROVINGLY_SIGNED E_EDOC_VERSION_ALREADY_APPROVINGLY_SIGNED_BY_USER E_EDOC_VERSION_ALREDY_SIGNED E_EDOC_VERSION_ALREDY_SIGNED_BY_USER EDOC_TYPES_CODE_REQUISITE_FIELD_NAME EDOCUMENTS_ALIAS_NAME FILES_FOLDER_PATH FILTER_OPERANDS_DELIMITER FILTER_OPERATIONS_DELIMITER FORMCARD_NAME FORMLIST_NAME GET_EXTENDED_DOCUMENT_EXTENSION_CREATION_MODE GET_EXTENDED_DOCUMENT_EXTENSION_IMPORT_MODE INTEGRATED_REPORT_TYPE IS_BUILDER_APPLICATION_ROLE IS_BUILDER_APPLICATION_ROLE2 IS_BUILDER_USERS ISBSYSDEV LOG_FOLDER_PATH mbCancel mbNo mbNoToAll mbOK mbYes mbYesToAll MEMORY_DATASET_DESRIPTIONS_FILENAME mrNo mrNoToAll mrYes mrYesToAll MULTIPLE_SELECT_DIALOG_CODE NONOPERATING_RECORD_FLAG_FEMININE NONOPERATING_RECORD_FLAG_MASCULINE OPERATING_RECORD_FLAG_FEMININE OPERATING_RECORD_FLAG_MASCULINE PROFILING_SETTINGS_COMMON_SETTINGS_CODE_VALUE PROGRAM_INITIATED_LOOKUP_ACTION ratDelete ratEdit ratInsert REPORT_TYPE REQUIRED_PICK_VALUES_VARIABLE rmCard rmList SBRTE_PROGID_DEV SBRTE_PROGID_RELEASE STATIC_ROLE_TYPE_CODE SUPPRESS_EMPTY_TEMPLATE_CREATION SYSTEM_USER_CODE UPDATE_DIALOG_DATASET USED_IN_OBJECT_HINT_PARAM USER_INITIATED_LOOKUP_ACTION USER_NAME_FORMAT USER_SELECTION_RESTRICTIONS WORKFLOW_TEST_PROTOCOLS_FOLDER_PATH ELS_SUBTYPE_CONTROL_NAME ELS_FOLDER_KIND_CONTROL_NAME REPEAT_PROCESS_CURRENT_OBJECT_EXCEPTION_NAME ";
  const privileges_constants = "PRIVILEGE_COMPONENT_FULL_ACCESS PRIVILEGE_DEVELOPMENT_EXPORT PRIVILEGE_DEVELOPMENT_IMPORT PRIVILEGE_DOCUMENT_DELETE PRIVILEGE_ESD PRIVILEGE_FOLDER_DELETE PRIVILEGE_MANAGE_ACCESS_RIGHTS PRIVILEGE_MANAGE_REPLICATION PRIVILEGE_MANAGE_SESSION_SERVER PRIVILEGE_OBJECT_FULL_ACCESS PRIVILEGE_OBJECT_VIEW PRIVILEGE_RESERVE_LICENSE PRIVILEGE_SYSTEM_CUSTOMIZE PRIVILEGE_SYSTEM_DEVELOP PRIVILEGE_SYSTEM_INSTALL PRIVILEGE_TASK_DELETE PRIVILEGE_USER_PLUGIN_SETTINGS_CUSTOMIZE PRIVILEGES_PSEUDOREFERENCE_CODE ";
  const pseudoreference_code_constants = "ACCESS_TYPES_PSEUDOREFERENCE_CODE ALL_AVAILABLE_COMPONENTS_PSEUDOREFERENCE_CODE ALL_AVAILABLE_PRIVILEGES_PSEUDOREFERENCE_CODE ALL_REPLICATE_COMPONENTS_PSEUDOREFERENCE_CODE AVAILABLE_DEVELOPERS_COMPONENTS_PSEUDOREFERENCE_CODE COMPONENTS_PSEUDOREFERENCE_CODE FILTRATER_SETTINGS_CONFLICTS_PSEUDOREFERENCE_CODE GROUPS_PSEUDOREFERENCE_CODE RECEIVE_PROTOCOL_PSEUDOREFERENCE_CODE REFERENCE_REQUISITE_PSEUDOREFERENCE_CODE REFERENCE_REQUISITES_PSEUDOREFERENCE_CODE REFTYPES_PSEUDOREFERENCE_CODE REPLICATION_SEANCES_DIARY_PSEUDOREFERENCE_CODE SEND_PROTOCOL_PSEUDOREFERENCE_CODE SUBSTITUTES_PSEUDOREFERENCE_CODE SYSTEM_SETTINGS_PSEUDOREFERENCE_CODE UNITS_PSEUDOREFERENCE_CODE USERS_PSEUDOREFERENCE_CODE VIEWERS_PSEUDOREFERENCE_CODE ";
  const requisite_ISBCertificateType_values_constants = "CERTIFICATE_TYPE_ENCRYPT CERTIFICATE_TYPE_SIGN CERTIFICATE_TYPE_SIGN_AND_ENCRYPT ";
  const requisite_ISBEDocStorageType_values_constants = "STORAGE_TYPE_FILE STORAGE_TYPE_NAS_CIFS STORAGE_TYPE_SAPERION STORAGE_TYPE_SQL_SERVER ";
  const requisite_compType2_values_constants = "COMPTYPE2_REQUISITE_DOCUMENTS_VALUE COMPTYPE2_REQUISITE_TASKS_VALUE COMPTYPE2_REQUISITE_FOLDERS_VALUE COMPTYPE2_REQUISITE_REFERENCES_VALUE ";
  const requisite_name_constants = "SYSREQ_CODE SYSREQ_COMPTYPE2 SYSREQ_CONST_AVAILABLE_FOR_WEB SYSREQ_CONST_COMMON_CODE SYSREQ_CONST_COMMON_VALUE SYSREQ_CONST_FIRM_CODE SYSREQ_CONST_FIRM_STATUS SYSREQ_CONST_FIRM_VALUE SYSREQ_CONST_SERVER_STATUS SYSREQ_CONTENTS SYSREQ_DATE_OPEN SYSREQ_DATE_CLOSE SYSREQ_DESCRIPTION SYSREQ_DESCRIPTION_LOCALIZE_ID SYSREQ_DOUBLE SYSREQ_EDOC_ACCESS_TYPE SYSREQ_EDOC_AUTHOR SYSREQ_EDOC_CREATED SYSREQ_EDOC_DELEGATE_RIGHTS_REQUISITE_CODE SYSREQ_EDOC_EDITOR SYSREQ_EDOC_ENCODE_TYPE SYSREQ_EDOC_ENCRYPTION_PLUGIN_NAME SYSREQ_EDOC_ENCRYPTION_PLUGIN_VERSION SYSREQ_EDOC_EXPORT_DATE SYSREQ_EDOC_EXPORTER SYSREQ_EDOC_KIND SYSREQ_EDOC_LIFE_STAGE_NAME SYSREQ_EDOC_LOCKED_FOR_SERVER_CODE SYSREQ_EDOC_MODIFIED SYSREQ_EDOC_NAME SYSREQ_EDOC_NOTE SYSREQ_EDOC_QUALIFIED_ID SYSREQ_EDOC_SESSION_KEY SYSREQ_EDOC_SESSION_KEY_ENCRYPTION_PLUGIN_NAME SYSREQ_EDOC_SESSION_KEY_ENCRYPTION_PLUGIN_VERSION SYSREQ_EDOC_SIGNATURE_TYPE SYSREQ_EDOC_SIGNED SYSREQ_EDOC_STORAGE SYSREQ_EDOC_STORAGES_ARCHIVE_STORAGE SYSREQ_EDOC_STORAGES_CHECK_RIGHTS SYSREQ_EDOC_STORAGES_COMPUTER_NAME SYSREQ_EDOC_STORAGES_EDIT_IN_STORAGE SYSREQ_EDOC_STORAGES_EXECUTIVE_STORAGE SYSREQ_EDOC_STORAGES_FUNCTION SYSREQ_EDOC_STORAGES_INITIALIZED SYSREQ_EDOC_STORAGES_LOCAL_PATH SYSREQ_EDOC_STORAGES_SAPERION_DATABASE_NAME SYSREQ_EDOC_STORAGES_SEARCH_BY_TEXT SYSREQ_EDOC_STORAGES_SERVER_NAME SYSREQ_EDOC_STORAGES_SHARED_SOURCE_NAME SYSREQ_EDOC_STORAGES_TYPE SYSREQ_EDOC_TEXT_MODIFIED SYSREQ_EDOC_TYPE_ACT_CODE SYSREQ_EDOC_TYPE_ACT_DESCRIPTION SYSREQ_EDOC_TYPE_ACT_DESCRIPTION_LOCALIZE_ID SYSREQ_EDOC_TYPE_ACT_ON_EXECUTE SYSREQ_EDOC_TYPE_ACT_ON_EXECUTE_EXISTS SYSREQ_EDOC_TYPE_ACT_SECTION SYSREQ_EDOC_TYPE_ADD_PARAMS SYSREQ_EDOC_TYPE_COMMENT SYSREQ_EDOC_TYPE_EVENT_TEXT SYSREQ_EDOC_TYPE_NAME_IN_SINGULAR SYSREQ_EDOC_TYPE_NAME_IN_SINGULAR_LOCALIZE_ID SYSREQ_EDOC_TYPE_NAME_LOCALIZE_ID SYSREQ_EDOC_TYPE_NUMERATION_METHOD SYSREQ_EDOC_TYPE_PSEUDO_REQUISITE_CODE SYSREQ_EDOC_TYPE_REQ_CODE SYSREQ_EDOC_TYPE_REQ_DESCRIPTION SYSREQ_EDOC_TYPE_REQ_DESCRIPTION_LOCALIZE_ID SYSREQ_EDOC_TYPE_REQ_IS_LEADING SYSREQ_EDOC_TYPE_REQ_IS_REQUIRED SYSREQ_EDOC_TYPE_REQ_NUMBER SYSREQ_EDOC_TYPE_REQ_ON_CHANGE SYSREQ_EDOC_TYPE_REQ_ON_CHANGE_EXISTS SYSREQ_EDOC_TYPE_REQ_ON_SELECT SYSREQ_EDOC_TYPE_REQ_ON_SELECT_KIND SYSREQ_EDOC_TYPE_REQ_SECTION SYSREQ_EDOC_TYPE_VIEW_CARD SYSREQ_EDOC_TYPE_VIEW_CODE SYSREQ_EDOC_TYPE_VIEW_COMMENT SYSREQ_EDOC_TYPE_VIEW_IS_MAIN SYSREQ_EDOC_TYPE_VIEW_NAME SYSREQ_EDOC_TYPE_VIEW_NAME_LOCALIZE_ID SYSREQ_EDOC_VERSION_AUTHOR SYSREQ_EDOC_VERSION_CRC SYSREQ_EDOC_VERSION_DATA SYSREQ_EDOC_VERSION_EDITOR SYSREQ_EDOC_VERSION_EXPORT_DATE SYSREQ_EDOC_VERSION_EXPORTER SYSREQ_EDOC_VERSION_HIDDEN SYSREQ_EDOC_VERSION_LIFE_STAGE SYSREQ_EDOC_VERSION_MODIFIED SYSREQ_EDOC_VERSION_NOTE SYSREQ_EDOC_VERSION_SIGNATURE_TYPE SYSREQ_EDOC_VERSION_SIGNED SYSREQ_EDOC_VERSION_SIZE SYSREQ_EDOC_VERSION_SOURCE SYSREQ_EDOC_VERSION_TEXT_MODIFIED SYSREQ_EDOCKIND_DEFAULT_VERSION_STATE_CODE SYSREQ_FOLDER_KIND SYSREQ_FUNC_CATEGORY SYSREQ_FUNC_COMMENT SYSREQ_FUNC_GROUP SYSREQ_FUNC_GROUP_COMMENT SYSREQ_FUNC_GROUP_NUMBER SYSREQ_FUNC_HELP SYSREQ_FUNC_PARAM_DEF_VALUE SYSREQ_FUNC_PARAM_IDENT SYSREQ_FUNC_PARAM_NUMBER SYSREQ_FUNC_PARAM_TYPE SYSREQ_FUNC_TEXT SYSREQ_GROUP_CATEGORY SYSREQ_ID SYSREQ_LAST_UPDATE SYSREQ_LEADER_REFERENCE SYSREQ_LINE_NUMBER SYSREQ_MAIN_RECORD_ID SYSREQ_NAME SYSREQ_NAME_LOCALIZE_ID SYSREQ_NOTE SYSREQ_ORIGINAL_RECORD SYSREQ_OUR_FIRM SYSREQ_PROFILING_SETTINGS_BATCH_LOGING SYSREQ_PROFILING_SETTINGS_BATCH_SIZE SYSREQ_PROFILING_SETTINGS_PROFILING_ENABLED SYSREQ_PROFILING_SETTINGS_SQL_PROFILING_ENABLED SYSREQ_PROFILING_SETTINGS_START_LOGGED SYSREQ_RECORD_STATUS SYSREQ_REF_REQ_FIELD_NAME SYSREQ_REF_REQ_FORMAT SYSREQ_REF_REQ_GENERATED SYSREQ_REF_REQ_LENGTH SYSREQ_REF_REQ_PRECISION SYSREQ_REF_REQ_REFERENCE SYSREQ_REF_REQ_SECTION SYSREQ_REF_REQ_STORED SYSREQ_REF_REQ_TOKENS SYSREQ_REF_REQ_TYPE SYSREQ_REF_REQ_VIEW SYSREQ_REF_TYPE_ACT_CODE SYSREQ_REF_TYPE_ACT_DESCRIPTION SYSREQ_REF_TYPE_ACT_DESCRIPTION_LOCALIZE_ID SYSREQ_REF_TYPE_ACT_ON_EXECUTE SYSREQ_REF_TYPE_ACT_ON_EXECUTE_EXISTS SYSREQ_REF_TYPE_ACT_SECTION SYSREQ_REF_TYPE_ADD_PARAMS SYSREQ_REF_TYPE_COMMENT SYSREQ_REF_TYPE_COMMON_SETTINGS SYSREQ_REF_TYPE_DISPLAY_REQUISITE_NAME SYSREQ_REF_TYPE_EVENT_TEXT SYSREQ_REF_TYPE_MAIN_LEADING_REF SYSREQ_REF_TYPE_NAME_IN_SINGULAR SYSREQ_REF_TYPE_NAME_IN_SINGULAR_LOCALIZE_ID SYSREQ_REF_TYPE_NAME_LOCALIZE_ID SYSREQ_REF_TYPE_NUMERATION_METHOD SYSREQ_REF_TYPE_REQ_CODE SYSREQ_REF_TYPE_REQ_DESCRIPTION SYSREQ_REF_TYPE_REQ_DESCRIPTION_LOCALIZE_ID SYSREQ_REF_TYPE_REQ_IS_CONTROL SYSREQ_REF_TYPE_REQ_IS_FILTER SYSREQ_REF_TYPE_REQ_IS_LEADING SYSREQ_REF_TYPE_REQ_IS_REQUIRED SYSREQ_REF_TYPE_REQ_NUMBER SYSREQ_REF_TYPE_REQ_ON_CHANGE SYSREQ_REF_TYPE_REQ_ON_CHANGE_EXISTS SYSREQ_REF_TYPE_REQ_ON_SELECT SYSREQ_REF_TYPE_REQ_ON_SELECT_KIND SYSREQ_REF_TYPE_REQ_SECTION SYSREQ_REF_TYPE_VIEW_CARD SYSREQ_REF_TYPE_VIEW_CODE SYSREQ_REF_TYPE_VIEW_COMMENT SYSREQ_REF_TYPE_VIEW_IS_MAIN SYSREQ_REF_TYPE_VIEW_NAME SYSREQ_REF_TYPE_VIEW_NAME_LOCALIZE_ID SYSREQ_REFERENCE_TYPE_ID SYSREQ_STATE SYSREQ_STAT\u0415 SYSREQ_SYSTEM_SETTINGS_VALUE SYSREQ_TYPE SYSREQ_UNIT SYSREQ_UNIT_ID SYSREQ_USER_GROUPS_GROUP_FULL_NAME SYSREQ_USER_GROUPS_GROUP_NAME SYSREQ_USER_GROUPS_GROUP_SERVER_NAME SYSREQ_USERS_ACCESS_RIGHTS SYSREQ_USERS_AUTHENTICATION SYSREQ_USERS_CATEGORY SYSREQ_USERS_COMPONENT SYSREQ_USERS_COMPONENT_USER_IS_PUBLIC SYSREQ_USERS_DOMAIN SYSREQ_USERS_FULL_USER_NAME SYSREQ_USERS_GROUP SYSREQ_USERS_IS_MAIN_SERVER SYSREQ_USERS_LOGIN SYSREQ_USERS_REFERENCE_USER_IS_PUBLIC SYSREQ_USERS_STATUS SYSREQ_USERS_USER_CERTIFICATE SYSREQ_USERS_USER_CERTIFICATE_INFO SYSREQ_USERS_USER_CERTIFICATE_PLUGIN_NAME SYSREQ_USERS_USER_CERTIFICATE_PLUGIN_VERSION SYSREQ_USERS_USER_CERTIFICATE_STATE SYSREQ_USERS_USER_CERTIFICATE_SUBJECT_NAME SYSREQ_USERS_USER_CERTIFICATE_THUMBPRINT SYSREQ_USERS_USER_DEFAULT_CERTIFICATE SYSREQ_USERS_USER_DESCRIPTION SYSREQ_USERS_USER_GLOBAL_NAME SYSREQ_USERS_USER_LOGIN SYSREQ_USERS_USER_MAIN_SERVER SYSREQ_USERS_USER_TYPE SYSREQ_WORK_RULES_FOLDER_ID ";
  const result_constants = "RESULT_VAR_NAME RESULT_VAR_NAME_ENG ";
  const rule_identification_constants = "AUTO_NUMERATION_RULE_ID CANT_CHANGE_ID_REQUISITE_RULE_ID CANT_CHANGE_OURFIRM_REQUISITE_RULE_ID CHECK_CHANGING_REFERENCE_RECORD_USE_RULE_ID CHECK_CODE_REQUISITE_RULE_ID CHECK_DELETING_REFERENCE_RECORD_USE_RULE_ID CHECK_FILTRATER_CHANGES_RULE_ID CHECK_RECORD_INTERVAL_RULE_ID CHECK_REFERENCE_INTERVAL_RULE_ID CHECK_REQUIRED_DATA_FULLNESS_RULE_ID CHECK_REQUIRED_REQUISITES_FULLNESS_RULE_ID MAKE_RECORD_UNRATIFIED_RULE_ID RESTORE_AUTO_NUMERATION_RULE_ID SET_FIRM_CONTEXT_FROM_RECORD_RULE_ID SET_FIRST_RECORD_IN_LIST_FORM_RULE_ID SET_IDSPS_VALUE_RULE_ID SET_NEXT_CODE_VALUE_RULE_ID SET_OURFIRM_BOUNDS_RULE_ID SET_OURFIRM_REQUISITE_RULE_ID ";
  const script_block_properties_constants = "SCRIPT_BLOCK_AFTER_FINISH_EVENT SCRIPT_BLOCK_BEFORE_START_EVENT SCRIPT_BLOCK_EXECUTION_RESULTS_PROPERTY SCRIPT_BLOCK_NAME_PROPERTY SCRIPT_BLOCK_SCRIPT_PROPERTY ";
  const subtask_block_properties_constants = "SUBTASK_BLOCK_ABORT_DEADLINE_PROPERTY SUBTASK_BLOCK_AFTER_FINISH_EVENT SUBTASK_BLOCK_ASSIGN_PARAMS_EVENT SUBTASK_BLOCK_ATTACHMENTS_PROPERTY SUBTASK_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY SUBTASK_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY SUBTASK_BLOCK_BEFORE_START_EVENT SUBTASK_BLOCK_CREATED_TASK_PROPERTY SUBTASK_BLOCK_CREATION_EVENT SUBTASK_BLOCK_DEADLINE_PROPERTY SUBTASK_BLOCK_IMPORTANCE_PROPERTY SUBTASK_BLOCK_INITIATOR_PROPERTY SUBTASK_BLOCK_IS_RELATIVE_ABORT_DEADLINE_PROPERTY SUBTASK_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY SUBTASK_BLOCK_JOBS_TYPE_PROPERTY SUBTASK_BLOCK_NAME_PROPERTY SUBTASK_BLOCK_PARALLEL_ROUTE_PROPERTY SUBTASK_BLOCK_PERFORMERS_PROPERTY SUBTASK_BLOCK_RELATIVE_ABORT_DEADLINE_TYPE_PROPERTY SUBTASK_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY SUBTASK_BLOCK_REQUIRE_SIGN_PROPERTY SUBTASK_BLOCK_STANDARD_ROUTE_PROPERTY SUBTASK_BLOCK_START_EVENT SUBTASK_BLOCK_STEP_CONTROL_PROPERTY SUBTASK_BLOCK_SUBJECT_PROPERTY SUBTASK_BLOCK_TASK_CONTROL_PROPERTY SUBTASK_BLOCK_TEXT_PROPERTY SUBTASK_BLOCK_UNLOCK_ATTACHMENTS_ON_STOP_PROPERTY SUBTASK_BLOCK_USE_STANDARD_ROUTE_PROPERTY SUBTASK_BLOCK_WAIT_FOR_TASK_COMPLETE_PROPERTY ";
  const system_component_constants = "SYSCOMP_CONTROL_JOBS SYSCOMP_FOLDERS SYSCOMP_JOBS SYSCOMP_NOTICES SYSCOMP_TASKS ";
  const system_dialogs_constants = "SYSDLG_CREATE_EDOCUMENT SYSDLG_CREATE_EDOCUMENT_VERSION SYSDLG_CURRENT_PERIOD SYSDLG_EDIT_FUNCTION_HELP SYSDLG_EDOCUMENT_KINDS_FOR_TEMPLATE SYSDLG_EXPORT_MULTIPLE_EDOCUMENTS SYSDLG_EXPORT_SINGLE_EDOCUMENT SYSDLG_IMPORT_EDOCUMENT SYSDLG_MULTIPLE_SELECT SYSDLG_SETUP_ACCESS_RIGHTS SYSDLG_SETUP_DEFAULT_RIGHTS SYSDLG_SETUP_FILTER_CONDITION SYSDLG_SETUP_SIGN_RIGHTS SYSDLG_SETUP_TASK_OBSERVERS SYSDLG_SETUP_TASK_ROUTE SYSDLG_SETUP_USERS_LIST SYSDLG_SIGN_EDOCUMENT SYSDLG_SIGN_MULTIPLE_EDOCUMENTS ";
  const system_reference_names_constants = "SYSREF_ACCESS_RIGHTS_TYPES SYSREF_ADMINISTRATION_HISTORY SYSREF_ALL_AVAILABLE_COMPONENTS SYSREF_ALL_AVAILABLE_PRIVILEGES SYSREF_ALL_REPLICATING_COMPONENTS SYSREF_AVAILABLE_DEVELOPERS_COMPONENTS SYSREF_CALENDAR_EVENTS SYSREF_COMPONENT_TOKEN_HISTORY SYSREF_COMPONENT_TOKENS SYSREF_COMPONENTS SYSREF_CONSTANTS SYSREF_DATA_RECEIVE_PROTOCOL SYSREF_DATA_SEND_PROTOCOL SYSREF_DIALOGS SYSREF_DIALOGS_REQUISITES SYSREF_EDITORS SYSREF_EDOC_CARDS SYSREF_EDOC_TYPES SYSREF_EDOCUMENT_CARD_REQUISITES SYSREF_EDOCUMENT_CARD_TYPES SYSREF_EDOCUMENT_CARD_TYPES_REFERENCE SYSREF_EDOCUMENT_CARDS SYSREF_EDOCUMENT_HISTORY SYSREF_EDOCUMENT_KINDS SYSREF_EDOCUMENT_REQUISITES SYSREF_EDOCUMENT_SIGNATURES SYSREF_EDOCUMENT_TEMPLATES SYSREF_EDOCUMENT_TEXT_STORAGES SYSREF_EDOCUMENT_VIEWS SYSREF_FILTERER_SETUP_CONFLICTS SYSREF_FILTRATER_SETTING_CONFLICTS SYSREF_FOLDER_HISTORY SYSREF_FOLDERS SYSREF_FUNCTION_GROUPS SYSREF_FUNCTION_PARAMS SYSREF_FUNCTIONS SYSREF_JOB_HISTORY SYSREF_LINKS SYSREF_LOCALIZATION_DICTIONARY SYSREF_LOCALIZATION_LANGUAGES SYSREF_MODULES SYSREF_PRIVILEGES SYSREF_RECORD_HISTORY SYSREF_REFERENCE_REQUISITES SYSREF_REFERENCE_TYPE_VIEWS SYSREF_REFERENCE_TYPES SYSREF_REFERENCES SYSREF_REFERENCES_REQUISITES SYSREF_REMOTE_SERVERS SYSREF_REPLICATION_SESSIONS_LOG SYSREF_REPLICATION_SESSIONS_PROTOCOL SYSREF_REPORTS SYSREF_ROLES SYSREF_ROUTE_BLOCK_GROUPS SYSREF_ROUTE_BLOCKS SYSREF_SCRIPTS SYSREF_SEARCHES SYSREF_SERVER_EVENTS SYSREF_SERVER_EVENTS_HISTORY SYSREF_STANDARD_ROUTE_GROUPS SYSREF_STANDARD_ROUTES SYSREF_STATUSES SYSREF_SYSTEM_SETTINGS SYSREF_TASK_HISTORY SYSREF_TASK_KIND_GROUPS SYSREF_TASK_KINDS SYSREF_TASK_RIGHTS SYSREF_TASK_SIGNATURES SYSREF_TASKS SYSREF_UNITS SYSREF_USER_GROUPS SYSREF_USER_GROUPS_REFERENCE SYSREF_USER_SUBSTITUTION SYSREF_USERS SYSREF_USERS_REFERENCE SYSREF_VIEWERS SYSREF_WORKING_TIME_CALENDARS ";
  const table_name_constants = "ACCESS_RIGHTS_TABLE_NAME EDMS_ACCESS_TABLE_NAME EDOC_TYPES_TABLE_NAME ";
  const test_constants = "TEST_DEV_DB_NAME TEST_DEV_SYSTEM_CODE TEST_EDMS_DB_NAME TEST_EDMS_MAIN_CODE TEST_EDMS_MAIN_DB_NAME TEST_EDMS_SECOND_CODE TEST_EDMS_SECOND_DB_NAME TEST_EDMS_SYSTEM_CODE TEST_ISB5_MAIN_CODE TEST_ISB5_SECOND_CODE TEST_SQL_SERVER_2005_NAME TEST_SQL_SERVER_NAME ";
  const using_the_dialog_windows_constants = "ATTENTION_CAPTION cbsCommandLinks cbsDefault CONFIRMATION_CAPTION ERROR_CAPTION INFORMATION_CAPTION mrCancel mrOk ";
  const using_the_document_constants = "EDOC_VERSION_ACTIVE_STAGE_CODE EDOC_VERSION_DESIGN_STAGE_CODE EDOC_VERSION_OBSOLETE_STAGE_CODE ";
  const using_the_EA_and_encryption_constants = "cpDataEnciphermentEnabled cpDigitalSignatureEnabled cpID cpIssuer cpPluginVersion cpSerial cpSubjectName cpSubjSimpleName cpValidFromDate cpValidToDate ";
  const using_the_ISBL_editor_constants = "ISBL_SYNTAX NO_SYNTAX XML_SYNTAX ";
  const wait_block_properties_constants = "WAIT_BLOCK_AFTER_FINISH_EVENT WAIT_BLOCK_BEFORE_START_EVENT WAIT_BLOCK_DEADLINE_PROPERTY WAIT_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY WAIT_BLOCK_NAME_PROPERTY WAIT_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY ";
  const sysres_common_constants = "SYSRES_COMMON SYSRES_CONST SYSRES_MBFUNC SYSRES_SBDATA SYSRES_SBGUI SYSRES_SBINTF SYSRES_SBREFDSC SYSRES_SQLERRORS SYSRES_SYSCOMP ";
  const CONSTANTS = sysres_constants + base_constants + base_group_name_constants + decision_block_properties_constants + file_extension_constants + job_block_properties_constants + language_code_constants + launching_external_applications_constants + link_kind_constants + lock_type_constants + monitor_block_properties_constants + notice_block_properties_constants + object_events_constants + object_params_constants + other_constants + privileges_constants + pseudoreference_code_constants + requisite_ISBCertificateType_values_constants + requisite_ISBEDocStorageType_values_constants + requisite_compType2_values_constants + requisite_name_constants + result_constants + rule_identification_constants + script_block_properties_constants + subtask_block_properties_constants + system_component_constants + system_dialogs_constants + system_reference_names_constants + table_name_constants + test_constants + using_the_dialog_windows_constants + using_the_document_constants + using_the_EA_and_encryption_constants + using_the_ISBL_editor_constants + wait_block_properties_constants + sysres_common_constants;
  const TAccountType = "atUser atGroup atRole ";
  const TActionEnabledMode = "aemEnabledAlways aemDisabledAlways aemEnabledOnBrowse aemEnabledOnEdit aemDisabledOnBrowseEmpty ";
  const TAddPosition = "apBegin apEnd ";
  const TAlignment = "alLeft alRight ";
  const TAreaShowMode = "asmNever asmNoButCustomize asmAsLastTime asmYesButCustomize asmAlways ";
  const TCertificateInvalidationReason = "cirCommon cirRevoked ";
  const TCertificateType = "ctSignature ctEncode ctSignatureEncode ";
  const TCheckListBoxItemState = "clbUnchecked clbChecked clbGrayed ";
  const TCloseOnEsc = "ceISB ceAlways ceNever ";
  const TCompType = "ctDocument ctReference ctScript ctUnknown ctReport ctDialog ctFunction ctFolder ctEDocument ctTask ctJob ctNotice ctControlJob ";
  const TConditionFormat = "cfInternal cfDisplay ";
  const TConnectionIntent = "ciUnspecified ciWrite ciRead ";
  const TContentKind = "ckFolder ckEDocument ckTask ckJob ckComponentToken ckAny ckReference ckScript ckReport ckDialog ";
  const TControlType = "ctISBLEditor ctBevel ctButton ctCheckListBox ctComboBox ctComboEdit ctGrid ctDBCheckBox ctDBComboBox ctDBEdit ctDBEllipsis ctDBMemo ctDBNavigator ctDBRadioGroup ctDBStatusLabel ctEdit ctGroupBox ctInplaceHint ctMemo ctPanel ctListBox ctRadioButton ctRichEdit ctTabSheet ctWebBrowser ctImage ctHyperLink ctLabel ctDBMultiEllipsis ctRibbon ctRichView ctInnerPanel ctPanelGroup ctBitButton ";
  const TCriterionContentType = "cctDate cctInteger cctNumeric cctPick cctReference cctString cctText ";
  const TCultureType = "cltInternal cltPrimary cltGUI ";
  const TDataSetEventType = "dseBeforeOpen dseAfterOpen dseBeforeClose dseAfterClose dseOnValidDelete dseBeforeDelete dseAfterDelete dseAfterDeleteOutOfTransaction dseOnDeleteError dseBeforeInsert dseAfterInsert dseOnValidUpdate dseBeforeUpdate dseOnUpdateRatifiedRecord dseAfterUpdate dseAfterUpdateOutOfTransaction dseOnUpdateError dseAfterScroll dseOnOpenRecord dseOnCloseRecord dseBeforeCancel dseAfterCancel dseOnUpdateDeadlockError dseBeforeDetailUpdate dseOnPrepareUpdate dseOnAnyRequisiteChange ";
  const TDataSetState = "dssEdit dssInsert dssBrowse dssInActive ";
  const TDateFormatType = "dftDate dftShortDate dftDateTime dftTimeStamp ";
  const TDateOffsetType = "dotDays dotHours dotMinutes dotSeconds ";
  const TDateTimeKind = "dtkndLocal dtkndUTC ";
  const TDeaAccessRights = "arNone arView arEdit arFull ";
  const TDocumentDefaultAction = "ddaView ddaEdit ";
  const TEditMode = "emLock emEdit emSign emExportWithLock emImportWithUnlock emChangeVersionNote emOpenForModify emChangeLifeStage emDelete emCreateVersion emImport emUnlockExportedWithLock emStart emAbort emReInit emMarkAsReaded emMarkAsUnreaded emPerform emAccept emResume emChangeRights emEditRoute emEditObserver emRecoveryFromLocalCopy emChangeWorkAccessType emChangeEncodeTypeToCertificate emChangeEncodeTypeToPassword emChangeEncodeTypeToNone emChangeEncodeTypeToCertificatePassword emChangeStandardRoute emGetText emOpenForView emMoveToStorage emCreateObject emChangeVersionHidden emDeleteVersion emChangeLifeCycleStage emApprovingSign emExport emContinue emLockFromEdit emUnLockForEdit emLockForServer emUnlockFromServer emDelegateAccessRights emReEncode ";
  const TEditorCloseObservType = "ecotFile ecotProcess ";
  const TEdmsApplicationAction = "eaGet eaCopy eaCreate eaCreateStandardRoute ";
  const TEDocumentLockType = "edltAll edltNothing edltQuery ";
  const TEDocumentStepShowMode = "essmText essmCard ";
  const TEDocumentStepVersionType = "esvtLast esvtLastActive esvtSpecified ";
  const TEDocumentStorageFunction = "edsfExecutive edsfArchive ";
  const TEDocumentStorageType = "edstSQLServer edstFile ";
  const TEDocumentVersionSourceType = "edvstNone edvstEDocumentVersionCopy edvstFile edvstTemplate edvstScannedFile ";
  const TEDocumentVersionState = "vsDefault vsDesign vsActive vsObsolete ";
  const TEncodeType = "etNone etCertificate etPassword etCertificatePassword ";
  const TExceptionCategory = "ecException ecWarning ecInformation ";
  const TExportedSignaturesType = "estAll estApprovingOnly ";
  const TExportedVersionType = "evtLast evtLastActive evtQuery ";
  const TFieldDataType = "fdtString fdtNumeric fdtInteger fdtDate fdtText fdtUnknown fdtWideString fdtLargeInteger ";
  const TFolderType = "ftInbox ftOutbox ftFavorites ftCommonFolder ftUserFolder ftComponents ftQuickLaunch ftShortcuts ftSearch ";
  const TGridRowHeight = "grhAuto grhX1 grhX2 grhX3 ";
  const THyperlinkType = "hltText hltRTF hltHTML ";
  const TImageFileFormat = "iffBMP iffJPEG iffMultiPageTIFF iffSinglePageTIFF iffTIFF iffPNG ";
  const TImageMode = "im8bGrayscale im24bRGB im1bMonochrome ";
  const TImageType = "itBMP itJPEG itWMF itPNG ";
  const TInplaceHintKind = "ikhInformation ikhWarning ikhError ikhNoIcon ";
  const TISBLContext = "icUnknown icScript icFunction icIntegratedReport icAnalyticReport icDataSetEventHandler icActionHandler icFormEventHandler icLookUpEventHandler icRequisiteChangeEventHandler icBeforeSearchEventHandler icRoleCalculation icSelectRouteEventHandler icBlockPropertyCalculation icBlockQueryParamsEventHandler icChangeSearchResultEventHandler icBlockEventHandler icSubTaskInitEventHandler icEDocDataSetEventHandler icEDocLookUpEventHandler icEDocActionHandler icEDocFormEventHandler icEDocRequisiteChangeEventHandler icStructuredConversionRule icStructuredConversionEventBefore icStructuredConversionEventAfter icWizardEventHandler icWizardFinishEventHandler icWizardStepEventHandler icWizardStepFinishEventHandler icWizardActionEnableEventHandler icWizardActionExecuteEventHandler icCreateJobsHandler icCreateNoticesHandler icBeforeLookUpEventHandler icAfterLookUpEventHandler icTaskAbortEventHandler icWorkflowBlockActionHandler icDialogDataSetEventHandler icDialogActionHandler icDialogLookUpEventHandler icDialogRequisiteChangeEventHandler icDialogFormEventHandler icDialogValidCloseEventHandler icBlockFormEventHandler icTaskFormEventHandler icReferenceMethod icEDocMethod icDialogMethod icProcessMessageHandler ";
  const TItemShow = "isShow isHide isByUserSettings ";
  const TJobKind = "jkJob jkNotice jkControlJob ";
  const TJoinType = "jtInner jtLeft jtRight jtFull jtCross ";
  const TLabelPos = "lbpAbove lbpBelow lbpLeft lbpRight ";
  const TLicensingType = "eltPerConnection eltPerUser ";
  const TLifeCycleStageFontColor = "sfcUndefined sfcBlack sfcGreen sfcRed sfcBlue sfcOrange sfcLilac ";
  const TLifeCycleStageFontStyle = "sfsItalic sfsStrikeout sfsNormal ";
  const TLockableDevelopmentComponentType = "ldctStandardRoute ldctWizard ldctScript ldctFunction ldctRouteBlock ldctIntegratedReport ldctAnalyticReport ldctReferenceType ldctEDocumentType ldctDialog ldctServerEvents ";
  const TMaxRecordCountRestrictionType = "mrcrtNone mrcrtUser mrcrtMaximal mrcrtCustom ";
  const TRangeValueType = "vtEqual vtGreaterOrEqual vtLessOrEqual vtRange ";
  const TRelativeDate = "rdYesterday rdToday rdTomorrow rdThisWeek rdThisMonth rdThisYear rdNextMonth rdNextWeek rdLastWeek rdLastMonth ";
  const TReportDestination = "rdWindow rdFile rdPrinter ";
  const TReqDataType = "rdtString rdtNumeric rdtInteger rdtDate rdtReference rdtAccount rdtText rdtPick rdtUnknown rdtLargeInteger rdtDocument ";
  const TRequisiteEventType = "reOnChange reOnChangeValues ";
  const TSBTimeType = "ttGlobal ttLocal ttUser ttSystem ";
  const TSearchShowMode = "ssmBrowse ssmSelect ssmMultiSelect ssmBrowseModal ";
  const TSelectMode = "smSelect smLike smCard ";
  const TSignatureType = "stNone stAuthenticating stApproving ";
  const TSignerContentType = "sctString sctStream ";
  const TStringsSortType = "sstAnsiSort sstNaturalSort ";
  const TStringValueType = "svtEqual svtContain ";
  const TStructuredObjectAttributeType = "soatString soatNumeric soatInteger soatDatetime soatReferenceRecord soatText soatPick soatBoolean soatEDocument soatAccount soatIntegerCollection soatNumericCollection soatStringCollection soatPickCollection soatDatetimeCollection soatBooleanCollection soatReferenceRecordCollection soatEDocumentCollection soatAccountCollection soatContents soatUnknown ";
  const TTaskAbortReason = "tarAbortByUser tarAbortByWorkflowException ";
  const TTextValueType = "tvtAllWords tvtExactPhrase tvtAnyWord ";
  const TUserObjectStatus = "usNone usCompleted usRedSquare usBlueSquare usYellowSquare usGreenSquare usOrangeSquare usPurpleSquare usFollowUp ";
  const TUserType = "utUnknown utUser utDeveloper utAdministrator utSystemDeveloper utDisconnected ";
  const TValuesBuildType = "btAnd btDetailAnd btOr btNotOr btOnly ";
  const TViewMode = "vmView vmSelect vmNavigation ";
  const TViewSelectionMode = "vsmSingle vsmMultiple vsmMultipleCheck vsmNoSelection ";
  const TWizardActionType = "wfatPrevious wfatNext wfatCancel wfatFinish ";
  const TWizardFormElementProperty = "wfepUndefined wfepText3 wfepText6 wfepText9 wfepSpinEdit wfepDropDown wfepRadioGroup wfepFlag wfepText12 wfepText15 wfepText18 wfepText21 wfepText24 wfepText27 wfepText30 wfepRadioGroupColumn1 wfepRadioGroupColumn2 wfepRadioGroupColumn3 ";
  const TWizardFormElementType = "wfetQueryParameter wfetText wfetDelimiter wfetLabel ";
  const TWizardParamType = "wptString wptInteger wptNumeric wptBoolean wptDateTime wptPick wptText wptUser wptUserList wptEDocumentInfo wptEDocumentInfoList wptReferenceRecordInfo wptReferenceRecordInfoList wptFolderInfo wptTaskInfo wptContents wptFileName wptDate ";
  const TWizardStepResult = "wsrComplete wsrGoNext wsrGoPrevious wsrCustom wsrCancel wsrGoFinal ";
  const TWizardStepType = "wstForm wstEDocument wstTaskCard wstReferenceRecordCard wstFinal ";
  const TWorkAccessType = "waAll waPerformers waManual ";
  const TWorkflowBlockType = "wsbStart wsbFinish wsbNotice wsbStep wsbDecision wsbWait wsbMonitor wsbScript wsbConnector wsbSubTask wsbLifeCycleStage wsbPause ";
  const TWorkflowDataType = "wdtInteger wdtFloat wdtString wdtPick wdtDateTime wdtBoolean wdtTask wdtJob wdtFolder wdtEDocument wdtReferenceRecord wdtUser wdtGroup wdtRole wdtIntegerCollection wdtFloatCollection wdtStringCollection wdtPickCollection wdtDateTimeCollection wdtBooleanCollection wdtTaskCollection wdtJobCollection wdtFolderCollection wdtEDocumentCollection wdtReferenceRecordCollection wdtUserCollection wdtGroupCollection wdtRoleCollection wdtContents wdtUserList wdtSearchDescription wdtDeadLine wdtPickSet wdtAccountCollection ";
  const TWorkImportance = "wiLow wiNormal wiHigh ";
  const TWorkRouteType = "wrtSoft wrtHard ";
  const TWorkState = "wsInit wsRunning wsDone wsControlled wsAborted wsContinued ";
  const TWorkTextBuildingMode = "wtmFull wtmFromCurrent wtmOnlyCurrent ";
  const ENUMS = TAccountType + TActionEnabledMode + TAddPosition + TAlignment + TAreaShowMode + TCertificateInvalidationReason + TCertificateType + TCheckListBoxItemState + TCloseOnEsc + TCompType + TConditionFormat + TConnectionIntent + TContentKind + TControlType + TCriterionContentType + TCultureType + TDataSetEventType + TDataSetState + TDateFormatType + TDateOffsetType + TDateTimeKind + TDeaAccessRights + TDocumentDefaultAction + TEditMode + TEditorCloseObservType + TEdmsApplicationAction + TEDocumentLockType + TEDocumentStepShowMode + TEDocumentStepVersionType + TEDocumentStorageFunction + TEDocumentStorageType + TEDocumentVersionSourceType + TEDocumentVersionState + TEncodeType + TExceptionCategory + TExportedSignaturesType + TExportedVersionType + TFieldDataType + TFolderType + TGridRowHeight + THyperlinkType + TImageFileFormat + TImageMode + TImageType + TInplaceHintKind + TISBLContext + TItemShow + TJobKind + TJoinType + TLabelPos + TLicensingType + TLifeCycleStageFontColor + TLifeCycleStageFontStyle + TLockableDevelopmentComponentType + TMaxRecordCountRestrictionType + TRangeValueType + TRelativeDate + TReportDestination + TReqDataType + TRequisiteEventType + TSBTimeType + TSearchShowMode + TSelectMode + TSignatureType + TSignerContentType + TStringsSortType + TStringValueType + TStructuredObjectAttributeType + TTaskAbortReason + TTextValueType + TUserObjectStatus + TUserType + TValuesBuildType + TViewMode + TViewSelectionMode + TWizardActionType + TWizardFormElementProperty + TWizardFormElementType + TWizardParamType + TWizardStepResult + TWizardStepType + TWorkAccessType + TWorkflowBlockType + TWorkflowDataType + TWorkImportance + TWorkRouteType + TWorkState + TWorkTextBuildingMode;
  const system_functions = "AddSubString AdjustLineBreaks AmountInWords Analysis ArrayDimCount ArrayHighBound ArrayLowBound ArrayOf ArrayReDim Assert Assigned BeginOfMonth BeginOfPeriod BuildProfilingOperationAnalysis CallProcedure CanReadFile CArrayElement CDataSetRequisite ChangeDate ChangeReferenceDataset Char CharPos CheckParam CheckParamValue CompareStrings ConstantExists ControlState ConvertDateStr Copy CopyFile CreateArray CreateCachedReference CreateConnection CreateDialog CreateDualListDialog CreateEditor CreateException CreateFile CreateFolderDialog CreateInputDialog CreateLinkFile CreateList CreateLock CreateMemoryDataSet CreateObject CreateOpenDialog CreateProgress CreateQuery CreateReference CreateReport CreateSaveDialog CreateScript CreateSQLPivotFunction CreateStringList CreateTreeListSelectDialog CSelectSQL CSQL CSubString CurrentUserID CurrentUserName CurrentVersion DataSetLocateEx DateDiff DateTimeDiff DateToStr DayOfWeek DeleteFile DirectoryExists DisableCheckAccessRights DisableCheckFullShowingRestriction DisableMassTaskSendingRestrictions DropTable DupeString EditText EnableCheckAccessRights EnableCheckFullShowingRestriction EnableMassTaskSendingRestrictions EndOfMonth EndOfPeriod ExceptionExists ExceptionsOff ExceptionsOn Execute ExecuteProcess Exit ExpandEnvironmentVariables ExtractFileDrive ExtractFileExt ExtractFileName ExtractFilePath ExtractParams FileExists FileSize FindFile FindSubString FirmContext ForceDirectories Format FormatDate FormatNumeric FormatSQLDate FormatString FreeException GetComponent GetComponentLaunchParam GetConstant GetLastException GetReferenceRecord GetRefTypeByRefID GetTableID GetTempFolder IfThen In IndexOf InputDialog InputDialogEx InteractiveMode IsFileLocked IsGraphicFile IsNumeric Length LoadString LoadStringFmt LocalTimeToUTC LowerCase Max MessageBox MessageBoxEx MimeDecodeBinary MimeDecodeString MimeEncodeBinary MimeEncodeString Min MoneyInWords MoveFile NewID Now OpenFile Ord Precision Raise ReadCertificateFromFile ReadFile ReferenceCodeByID ReferenceNumber ReferenceRequisiteMode ReferenceRequisiteValue RegionDateSettings RegionNumberSettings RegionTimeSettings RegRead RegWrite RenameFile Replace Round SelectServerCode SelectSQL ServerDateTime SetConstant SetManagedFolderFieldsState ShowConstantsInputDialog ShowMessage Sleep Split SQL SQL2XLSTAB SQLProfilingSendReport StrToDate SubString SubStringCount SystemSetting Time TimeDiff Today Transliterate Trim UpperCase UserStatus UTCToLocalTime ValidateXML VarIsClear VarIsEmpty VarIsNull WorkTimeDiff WriteFile WriteFileEx WriteObjectHistory \u0410\u043D\u0430\u043B\u0438\u0437 \u0411\u0430\u0437\u0430\u0414\u0430\u043D\u043D\u044B\u0445 \u0411\u043B\u043E\u043A\u0415\u0441\u0442\u044C \u0411\u043B\u043E\u043A\u0415\u0441\u0442\u044C\u0420\u0430\u0441\u0448 \u0411\u043B\u043E\u043A\u0418\u043D\u0444\u043E \u0411\u043B\u043E\u043A\u0421\u043D\u044F\u0442\u044C \u0411\u043B\u043E\u043A\u0421\u043D\u044F\u0442\u044C\u0420\u0430\u0441\u0448 \u0411\u043B\u043E\u043A\u0423\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C \u0412\u0432\u043E\u0434 \u0412\u0432\u043E\u0434\u041C\u0435\u043D\u044E \u0412\u0435\u0434\u0421 \u0412\u0435\u0434\u0421\u043F\u0440 \u0412\u0435\u0440\u0445\u043D\u044F\u044F\u0413\u0440\u0430\u043D\u0438\u0446\u0430\u041C\u0430\u0441\u0441\u0438\u0432\u0430 \u0412\u043D\u0435\u0448\u041F\u0440\u043E\u0433\u0440 \u0412\u043E\u0441\u0441\u0442 \u0412\u0440\u0435\u043C\u0435\u043D\u043D\u0430\u044F\u041F\u0430\u043F\u043A\u0430 \u0412\u0440\u0435\u043C\u044F \u0412\u044B\u0431\u043E\u0440SQL \u0412\u044B\u0431\u0440\u0430\u0442\u044C\u0417\u0430\u043F\u0438\u0441\u044C \u0412\u044B\u0434\u0435\u043B\u0438\u0442\u044C\u0421\u0442\u0440 \u0412\u044B\u0437\u0432\u0430\u0442\u044C \u0412\u044B\u043F\u043E\u043B\u043D\u0438\u0442\u044C \u0412\u044B\u043F\u041F\u0440\u043E\u0433\u0440 \u0413\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043A\u0438\u0439\u0424\u0430\u0439\u043B \u0413\u0440\u0443\u043F\u043F\u0430\u0414\u043E\u043F\u043E\u043B\u043D\u0438\u0442\u0435\u043B\u044C\u043D\u043E \u0414\u0430\u0442\u0430\u0412\u0440\u0435\u043C\u044F\u0421\u0435\u0440\u0432 \u0414\u0435\u043D\u044C\u041D\u0435\u0434\u0435\u043B\u0438 \u0414\u0438\u0430\u043B\u043E\u0433\u0414\u0430\u041D\u0435\u0442 \u0414\u043B\u0438\u043D\u0430\u0421\u0442\u0440 \u0414\u043E\u0431\u041F\u043E\u0434\u0441\u0442\u0440 \u0415\u041F\u0443\u0441\u0442\u043E \u0415\u0441\u043B\u0438\u0422\u043E \u0415\u0427\u0438\u0441\u043B\u043E \u0417\u0430\u043C\u041F\u043E\u0434\u0441\u0442\u0440 \u0417\u0430\u043F\u0438\u0441\u044C\u0421\u043F\u0440\u0430\u0432\u043E\u0447\u043D\u0438\u043A\u0430 \u0417\u043D\u0430\u0447\u041F\u043E\u043B\u044F\u0421\u043F\u0440 \u0418\u0414\u0422\u0438\u043F\u0421\u043F\u0440 \u0418\u0437\u0432\u043B\u0435\u0447\u044C\u0414\u0438\u0441\u043A \u0418\u0437\u0432\u043B\u0435\u0447\u044C\u0418\u043C\u044F\u0424\u0430\u0439\u043B\u0430 \u0418\u0437\u0432\u043B\u0435\u0447\u044C\u041F\u0443\u0442\u044C \u0418\u0437\u0432\u043B\u0435\u0447\u044C\u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043D\u0438\u0435 \u0418\u0437\u043C\u0414\u0430\u0442 \u0418\u0437\u043C\u0435\u043D\u0438\u0442\u044C\u0420\u0430\u0437\u043C\u0435\u0440\u041C\u0430\u0441\u0441\u0438\u0432\u0430 \u0418\u0437\u043C\u0435\u0440\u0435\u043D\u0438\u0439\u041C\u0430\u0441\u0441\u0438\u0432\u0430 \u0418\u043C\u044F\u041E\u0440\u0433 \u0418\u043C\u044F\u041F\u043E\u043B\u044F\u0421\u043F\u0440 \u0418\u043D\u0434\u0435\u043A\u0441 \u0418\u043D\u0434\u0438\u043A\u0430\u0442\u043E\u0440\u0417\u0430\u043A\u0440\u044B\u0442\u044C \u0418\u043D\u0434\u0438\u043A\u0430\u0442\u043E\u0440\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u0418\u043D\u0434\u0438\u043A\u0430\u0442\u043E\u0440\u0428\u0430\u0433 \u0418\u043D\u0442\u0435\u0440\u0430\u043A\u0442\u0438\u0432\u043D\u044B\u0439\u0420\u0435\u0436\u0438\u043C \u0418\u0442\u043E\u0433\u0422\u0431\u043B\u0421\u043F\u0440 \u041A\u043E\u0434\u0412\u0438\u0434\u0412\u0435\u0434\u0421\u043F\u0440 \u041A\u043E\u0434\u0412\u0438\u0434\u0421\u043F\u0440\u041F\u043E\u0418\u0414 \u041A\u043E\u0434\u041F\u043EAnalit \u041A\u043E\u0434\u0421\u0438\u043C\u0432\u043E\u043B\u0430 \u041A\u043E\u0434\u0421\u043F\u0440 \u041A\u043E\u043B\u041F\u043E\u0434\u0441\u0442\u0440 \u041A\u043E\u043B\u041F\u0440\u043E\u043F \u041A\u043E\u043D\u041C\u0435\u0441 \u041A\u043E\u043D\u0441\u0442 \u041A\u043E\u043D\u0441\u0442\u0415\u0441\u0442\u044C \u041A\u043E\u043D\u0441\u0442\u0417\u043D\u0430\u0447 \u041A\u043E\u043D\u0422\u0440\u0430\u043D \u041A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C\u0424\u0430\u0439\u043B \u041A\u043E\u043F\u0438\u044F\u0421\u0442\u0440 \u041A\u041F\u0435\u0440\u0438\u043E\u0434 \u041A\u0421\u0442\u0440\u0422\u0431\u043B\u0421\u043F\u0440 \u041C\u0430\u043A\u0441 \u041C\u0430\u043A\u0441\u0421\u0442\u0440\u0422\u0431\u043B\u0421\u043F\u0440 \u041C\u0430\u0441\u0441\u0438\u0432 \u041C\u0435\u043D\u044E \u041C\u0435\u043D\u044E\u0420\u0430\u0441\u0448 \u041C\u0438\u043D \u041D\u0430\u0431\u043E\u0440\u0414\u0430\u043D\u043D\u044B\u0445\u041D\u0430\u0439\u0442\u0438\u0420\u0430\u0441\u0448 \u041D\u0430\u0438\u043C\u0412\u0438\u0434\u0421\u043F\u0440 \u041D\u0430\u0438\u043C\u041F\u043EAnalit \u041D\u0430\u0438\u043C\u0421\u043F\u0440 \u041D\u0430\u0441\u0442\u0440\u043E\u0438\u0442\u044C\u041F\u0435\u0440\u0435\u0432\u043E\u0434\u044B\u0421\u0442\u0440\u043E\u043A \u041D\u0430\u0447\u041C\u0435\u0441 \u041D\u0430\u0447\u0422\u0440\u0430\u043D \u041D\u0438\u0436\u043D\u044F\u044F\u0413\u0440\u0430\u043D\u0438\u0446\u0430\u041C\u0430\u0441\u0441\u0438\u0432\u0430 \u041D\u043E\u043C\u0435\u0440\u0421\u043F\u0440 \u041D\u041F\u0435\u0440\u0438\u043E\u0434 \u041E\u043A\u043D\u043E \u041E\u043A\u0440 \u041E\u043A\u0440\u0443\u0436\u0435\u043D\u0438\u0435 \u041E\u0442\u043B\u0418\u043D\u0444\u0414\u043E\u0431\u0430\u0432\u0438\u0442\u044C \u041E\u0442\u043B\u0418\u043D\u0444\u0423\u0434\u0430\u043B\u0438\u0442\u044C \u041E\u0442\u0447\u0435\u0442 \u041E\u0442\u0447\u0435\u0442\u0410\u043D\u0430\u043B \u041E\u0442\u0447\u0435\u0442\u0418\u043D\u0442 \u041F\u0430\u043F\u043A\u0430\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u041F\u0430\u0443\u0437\u0430 \u041F\u0412\u044B\u0431\u043E\u0440SQL \u041F\u0435\u0440\u0435\u0438\u043C\u0435\u043D\u043E\u0432\u0430\u0442\u044C\u0424\u0430\u0439\u043B \u041F\u0435\u0440\u0435\u043C\u0435\u043D\u043D\u044B\u0435 \u041F\u0435\u0440\u0435\u043C\u0435\u0441\u0442\u0438\u0442\u044C\u0424\u0430\u0439\u043B \u041F\u043E\u0434\u0441\u0442\u0440 \u041F\u043E\u0438\u0441\u043A\u041F\u043E\u0434\u0441\u0442\u0440 \u041F\u043E\u0438\u0441\u043A\u0421\u0442\u0440 \u041F\u043E\u043B\u0443\u0447\u0438\u0442\u044C\u0418\u0414\u0422\u0430\u0431\u043B\u0438\u0446\u044B \u041F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u0414\u043E\u043F\u043E\u043B\u043D\u0438\u0442\u0435\u043B\u044C\u043D\u043E \u041F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u0418\u0414 \u041F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u0418\u043C\u044F \u041F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u0421\u0442\u0430\u0442\u0443\u0441 \u041F\u0440\u0435\u0440\u0432\u0430\u0442\u044C \u041F\u0440\u043E\u0432\u0435\u0440\u0438\u0442\u044C\u041F\u0430\u0440\u0430\u043C\u0435\u0442\u0440 \u041F\u0440\u043E\u0432\u0435\u0440\u0438\u0442\u044C\u041F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u0417\u043D\u0430\u0447 \u041F\u0440\u043E\u0432\u0435\u0440\u0438\u0442\u044C\u0423\u0441\u043B\u043E\u0432\u0438\u0435 \u0420\u0430\u0437\u0431\u0421\u0442\u0440 \u0420\u0430\u0437\u043D\u0412\u0440\u0435\u043C\u044F \u0420\u0430\u0437\u043D\u0414\u0430\u0442 \u0420\u0430\u0437\u043D\u0414\u0430\u0442\u0430\u0412\u0440\u0435\u043C\u044F \u0420\u0430\u0437\u043D\u0420\u0430\u0431\u0412\u0440\u0435\u043C\u044F \u0420\u0435\u0433\u0423\u0441\u0442\u0412\u0440\u0435\u043C \u0420\u0435\u0433\u0423\u0441\u0442\u0414\u0430\u0442 \u0420\u0435\u0433\u0423\u0441\u0442\u0427\u0441\u043B \u0420\u0435\u0434\u0422\u0435\u043A\u0441\u0442 \u0420\u0435\u0435\u0441\u0442\u0440\u0417\u0430\u043F\u0438\u0441\u044C \u0420\u0435\u0435\u0441\u0442\u0440\u0421\u043F\u0438\u0441\u043E\u043A\u0418\u043C\u0435\u043D\u041F\u0430\u0440\u0430\u043C \u0420\u0435\u0435\u0441\u0442\u0440\u0427\u0442\u0435\u043D\u0438\u0435 \u0420\u0435\u043A\u0432\u0421\u043F\u0440 \u0420\u0435\u043A\u0432\u0421\u043F\u0440\u041F\u0440 \u0421\u0435\u0433\u043E\u0434\u043D\u044F \u0421\u0435\u0439\u0447\u0430\u0441 \u0421\u0435\u0440\u0432\u0435\u0440 \u0421\u0435\u0440\u0432\u0435\u0440\u041F\u0440\u043E\u0446\u0435\u0441\u0441\u0418\u0414 \u0421\u0435\u0440\u0442\u0438\u0444\u0438\u043A\u0430\u0442\u0424\u0430\u0439\u043B\u0421\u0447\u0438\u0442\u0430\u0442\u044C \u0421\u0436\u041F\u0440\u043E\u0431 \u0421\u0438\u043C\u0432\u043E\u043B \u0421\u0438\u0441\u0442\u0435\u043C\u0430\u0414\u0438\u0440\u0435\u043A\u0442\u0443\u043C\u041A\u043E\u0434 \u0421\u0438\u0441\u0442\u0435\u043C\u0430\u0418\u043D\u0444\u043E\u0440\u043C\u0430\u0446\u0438\u044F \u0421\u0438\u0441\u0442\u0435\u043C\u0430\u041A\u043E\u0434 \u0421\u043E\u0434\u0435\u0440\u0436\u0438\u0442 \u0421\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435\u0417\u0430\u043A\u0440\u044B\u0442\u044C \u0421\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u0421\u043E\u0437\u0434\u0430\u0442\u044C\u0414\u0438\u0430\u043B\u043E\u0433 \u0421\u043E\u0437\u0434\u0430\u0442\u044C\u0414\u0438\u0430\u043B\u043E\u0433\u0412\u044B\u0431\u043E\u0440\u0430\u0418\u0437\u0414\u0432\u0443\u0445\u0421\u043F\u0438\u0441\u043A\u043E\u0432 \u0421\u043E\u0437\u0434\u0430\u0442\u044C\u0414\u0438\u0430\u043B\u043E\u0433\u0412\u044B\u0431\u043E\u0440\u0430\u041F\u0430\u043F\u043A\u0438 \u0421\u043E\u0437\u0434\u0430\u0442\u044C\u0414\u0438\u0430\u043B\u043E\u0433\u041E\u0442\u043A\u0440\u044B\u0442\u0438\u044F\u0424\u0430\u0439\u043B\u0430 \u0421\u043E\u0437\u0434\u0430\u0442\u044C\u0414\u0438\u0430\u043B\u043E\u0433\u0421\u043E\u0445\u0440\u0430\u043D\u0435\u043D\u0438\u044F\u0424\u0430\u0439\u043B\u0430 \u0421\u043E\u0437\u0434\u0430\u0442\u044C\u0417\u0430\u043F\u0440\u043E\u0441 \u0421\u043E\u0437\u0434\u0430\u0442\u044C\u0418\u043D\u0434\u0438\u043A\u0430\u0442\u043E\u0440 \u0421\u043E\u0437\u0434\u0430\u0442\u044C\u0418\u0441\u043A\u043B\u044E\u0447\u0435\u043D\u0438\u0435 \u0421\u043E\u0437\u0434\u0430\u0442\u044C\u041A\u044D\u0448\u0438\u0440\u043E\u0432\u0430\u043D\u043D\u044B\u0439\u0421\u043F\u0440\u0430\u0432\u043E\u0447\u043D\u0438\u043A \u0421\u043E\u0437\u0434\u0430\u0442\u044C\u041C\u0430\u0441\u0441\u0438\u0432 \u0421\u043E\u0437\u0434\u0430\u0442\u044C\u041D\u0430\u0431\u043E\u0440\u0414\u0430\u043D\u043D\u044B\u0445 \u0421\u043E\u0437\u0434\u0430\u0442\u044C\u041E\u0431\u044A\u0435\u043A\u0442 \u0421\u043E\u0437\u0434\u0430\u0442\u044C\u041E\u0442\u0447\u0435\u0442 \u0421\u043E\u0437\u0434\u0430\u0442\u044C\u041F\u0430\u043F\u043A\u0443 \u0421\u043E\u0437\u0434\u0430\u0442\u044C\u0420\u0435\u0434\u0430\u043A\u0442\u043E\u0440 \u0421\u043E\u0437\u0434\u0430\u0442\u044C\u0421\u043E\u0435\u0434\u0438\u043D\u0435\u043D\u0438\u0435 \u0421\u043E\u0437\u0434\u0430\u0442\u044C\u0421\u043F\u0438\u0441\u043E\u043A \u0421\u043E\u0437\u0434\u0430\u0442\u044C\u0421\u043F\u0438\u0441\u043E\u043A\u0421\u0442\u0440\u043E\u043A \u0421\u043E\u0437\u0434\u0430\u0442\u044C\u0421\u043F\u0440\u0430\u0432\u043E\u0447\u043D\u0438\u043A \u0421\u043E\u0437\u0434\u0430\u0442\u044C\u0421\u0446\u0435\u043D\u0430\u0440\u0438\u0439 \u0421\u043E\u0437\u0434\u0421\u043F\u0440 \u0421\u043E\u0441\u0442\u0421\u043F\u0440 \u0421\u043E\u0445\u0440 \u0421\u043E\u0445\u0440\u0421\u043F\u0440 \u0421\u043F\u0438\u0441\u043E\u043A\u0421\u0438\u0441\u0442\u0435\u043C \u0421\u043F\u0440 \u0421\u043F\u0440\u0430\u0432\u043E\u0447\u043D\u0438\u043A \u0421\u043F\u0440\u0411\u043B\u043E\u043A\u0415\u0441\u0442\u044C \u0421\u043F\u0440\u0411\u043B\u043E\u043A\u0421\u043D\u044F\u0442\u044C \u0421\u043F\u0440\u0411\u043B\u043E\u043A\u0421\u043D\u044F\u0442\u044C\u0420\u0430\u0441\u0448 \u0421\u043F\u0440\u0411\u043B\u043E\u043A\u0423\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C \u0421\u043F\u0440\u0418\u0437\u043C\u041D\u0430\u0431\u0414\u0430\u043D \u0421\u043F\u0440\u041A\u043E\u0434 \u0421\u043F\u0440\u041D\u043E\u043C\u0435\u0440 \u0421\u043F\u0440\u041E\u0431\u043D\u043E\u0432\u0438\u0442\u044C \u0421\u043F\u0440\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u0421\u043F\u0440\u041E\u0442\u043C\u0435\u043D\u0438\u0442\u044C \u0421\u043F\u0440\u041F\u0430\u0440\u0430\u043C \u0421\u043F\u0440\u041F\u043E\u043B\u0435\u0417\u043D\u0430\u0447 \u0421\u043F\u0440\u041F\u043E\u043B\u0435\u0418\u043C\u044F \u0421\u043F\u0440\u0420\u0435\u043A\u0432 \u0421\u043F\u0440\u0420\u0435\u043A\u0432\u0412\u0432\u0435\u0434\u0417\u043D \u0421\u043F\u0440\u0420\u0435\u043A\u0432\u041D\u043E\u0432\u044B\u0435 \u0421\u043F\u0440\u0420\u0435\u043A\u0432\u041F\u0440 \u0421\u043F\u0440\u0420\u0435\u043A\u0432\u041F\u0440\u0435\u0434\u0417\u043D \u0421\u043F\u0440\u0420\u0435\u043A\u0432\u0420\u0435\u0436\u0438\u043C \u0421\u043F\u0440\u0420\u0435\u043A\u0432\u0422\u0438\u043F\u0422\u0435\u043A\u0441\u0442 \u0421\u043F\u0440\u0421\u043E\u0437\u0434\u0430\u0442\u044C \u0421\u043F\u0440\u0421\u043E\u0441\u0442 \u0421\u043F\u0440\u0421\u043E\u0445\u0440\u0430\u043D\u0438\u0442\u044C \u0421\u043F\u0440\u0422\u0431\u043B\u0418\u0442\u043E\u0433 \u0421\u043F\u0440\u0422\u0431\u043B\u0421\u0442\u0440 \u0421\u043F\u0440\u0422\u0431\u043B\u0421\u0442\u0440\u041A\u043E\u043B \u0421\u043F\u0440\u0422\u0431\u043B\u0421\u0442\u0440\u041C\u0430\u043A\u0441 \u0421\u043F\u0440\u0422\u0431\u043B\u0421\u0442\u0440\u041C\u0438\u043D \u0421\u043F\u0440\u0422\u0431\u043B\u0421\u0442\u0440\u041F\u0440\u0435\u0434 \u0421\u043F\u0440\u0422\u0431\u043B\u0421\u0442\u0440\u0421\u043B\u0435\u0434 \u0421\u043F\u0440\u0422\u0431\u043B\u0421\u0442\u0440\u0421\u043E\u0437\u0434 \u0421\u043F\u0440\u0422\u0431\u043B\u0421\u0442\u0440\u0423\u0434 \u0421\u043F\u0440\u0422\u0435\u043A\u041F\u0440\u0435\u0434\u0441\u0442 \u0421\u043F\u0440\u0423\u0434\u0430\u043B\u0438\u0442\u044C \u0421\u0440\u0430\u0432\u043D\u0438\u0442\u044C\u0421\u0442\u0440 \u0421\u0442\u0440\u0412\u0435\u0440\u0445\u0420\u0435\u0433\u0438\u0441\u0442\u0440 \u0421\u0442\u0440\u041D\u0438\u0436\u043D\u0420\u0435\u0433\u0438\u0441\u0442\u0440 \u0421\u0442\u0440\u0422\u0431\u043B\u0421\u043F\u0440 \u0421\u0443\u043C\u041F\u0440\u043E\u043F \u0421\u0446\u0435\u043D\u0430\u0440\u0438\u0439 \u0421\u0446\u0435\u043D\u0430\u0440\u0438\u0439\u041F\u0430\u0440\u0430\u043C \u0422\u0435\u043A\u0412\u0435\u0440\u0441\u0438\u044F \u0422\u0435\u043A\u041E\u0440\u0433 \u0422\u043E\u0447\u043D \u0422\u0440\u0430\u043D \u0422\u0440\u0430\u043D\u0441\u043B\u0438\u0442\u0435\u0440\u0430\u0446\u0438\u044F \u0423\u0434\u0430\u043B\u0438\u0442\u044C\u0422\u0430\u0431\u043B\u0438\u0446\u0443 \u0423\u0434\u0430\u043B\u0438\u0442\u044C\u0424\u0430\u0439\u043B \u0423\u0434\u0421\u043F\u0440 \u0423\u0434\u0421\u0442\u0440\u0422\u0431\u043B\u0421\u043F\u0440 \u0423\u0441\u0442 \u0423\u0441\u0442\u0430\u043D\u043E\u0432\u043A\u0438\u041A\u043E\u043D\u0441\u0442\u0430\u043D\u0442 \u0424\u0430\u0439\u043B\u0410\u0442\u0440\u0438\u0431\u0443\u0442\u0421\u0447\u0438\u0442\u0430\u0442\u044C \u0424\u0430\u0439\u043B\u0410\u0442\u0440\u0438\u0431\u0443\u0442\u0423\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C \u0424\u0430\u0439\u043B\u0412\u0440\u0435\u043C\u044F \u0424\u0430\u0439\u043B\u0412\u0440\u0435\u043C\u044F\u0423\u0441\u0442\u0430\u043D\u043E\u0432\u0438\u0442\u044C \u0424\u0430\u0439\u043B\u0412\u044B\u0431\u0440\u0430\u0442\u044C \u0424\u0430\u0439\u043B\u0417\u0430\u043D\u044F\u0442 \u0424\u0430\u0439\u043B\u0417\u0430\u043F\u0438\u0441\u0430\u0442\u044C \u0424\u0430\u0439\u043B\u0418\u0441\u043A\u0430\u0442\u044C \u0424\u0430\u0439\u043B\u041A\u043E\u043F\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0424\u0430\u0439\u043B\u041C\u043E\u0436\u043D\u043E\u0427\u0438\u0442\u0430\u0442\u044C \u0424\u0430\u0439\u043B\u041E\u0442\u043A\u0440\u044B\u0442\u044C \u0424\u0430\u0439\u043B\u041F\u0435\u0440\u0435\u0438\u043C\u0435\u043D\u043E\u0432\u0430\u0442\u044C \u0424\u0430\u0439\u043B\u041F\u0435\u0440\u0435\u043A\u043E\u0434\u0438\u0440\u043E\u0432\u0430\u0442\u044C \u0424\u0430\u0439\u043B\u041F\u0435\u0440\u0435\u043C\u0435\u0441\u0442\u0438\u0442\u044C \u0424\u0430\u0439\u043B\u041F\u0440\u043E\u0441\u043C\u043E\u0442\u0440\u0435\u0442\u044C \u0424\u0430\u0439\u043B\u0420\u0430\u0437\u043C\u0435\u0440 \u0424\u0430\u0439\u043B\u0421\u043E\u0437\u0434\u0430\u0442\u044C \u0424\u0430\u0439\u043B\u0421\u0441\u044B\u043B\u043A\u0430\u0421\u043E\u0437\u0434\u0430\u0442\u044C \u0424\u0430\u0439\u043B\u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0424\u0430\u0439\u043B\u0421\u0447\u0438\u0442\u0430\u0442\u044C \u0424\u0430\u0439\u043B\u0423\u0434\u0430\u043B\u0438\u0442\u044C \u0424\u043C\u0442SQL\u0414\u0430\u0442 \u0424\u043C\u0442\u0414\u0430\u0442 \u0424\u043C\u0442\u0421\u0442\u0440 \u0424\u043C\u0442\u0427\u0441\u043B \u0424\u043E\u0440\u043C\u0430\u0442 \u0426\u041C\u0430\u0441\u0441\u0438\u0432\u042D\u043B\u0435\u043C\u0435\u043D\u0442 \u0426\u041D\u0430\u0431\u043E\u0440\u0414\u0430\u043D\u043D\u044B\u0445\u0420\u0435\u043A\u0432\u0438\u0437\u0438\u0442 \u0426\u041F\u043E\u0434\u0441\u0442\u0440 ";
  const predefined_variables = "AltState Application CallType ComponentTokens CreatedJobs CreatedNotices ControlState DialogResult Dialogs EDocuments EDocumentVersionSource Folders GlobalIDs Job Jobs InputValue LookUpReference LookUpRequisiteNames LookUpSearch Object ParentComponent Processes References Requisite ReportName Reports Result Scripts Searches SelectedAttachments SelectedItems SelectMode Sender ServerEvents ServiceFactory ShiftState SubTask SystemDialogs Tasks Wizard Wizards Work \u0412\u044B\u0437\u043E\u0432\u0421\u043F\u043E\u0441\u043E\u0431 \u0418\u043C\u044F\u041E\u0442\u0447\u0435\u0442\u0430 \u0420\u0435\u043A\u0432\u0417\u043D\u0430\u0447 ";
  const interfaces = "IApplication IAccessRights IAccountRepository IAccountSelectionRestrictions IAction IActionList IAdministrationHistoryDescription IAnchors IApplication IArchiveInfo IAttachment IAttachmentList ICheckListBox ICheckPointedList IColumn IComponent IComponentDescription IComponentToken IComponentTokenFactory IComponentTokenInfo ICompRecordInfo IConnection IContents IControl IControlJob IControlJobInfo IControlList ICrypto ICrypto2 ICustomJob ICustomJobInfo ICustomListBox ICustomObjectWizardStep ICustomWork ICustomWorkInfo IDataSet IDataSetAccessInfo IDataSigner IDateCriterion IDateRequisite IDateRequisiteDescription IDateValue IDeaAccessRights IDeaObjectInfo IDevelopmentComponentLock IDialog IDialogFactory IDialogPickRequisiteItems IDialogsFactory IDICSFactory IDocRequisite IDocumentInfo IDualListDialog IECertificate IECertificateInfo IECertificates IEditControl IEditorForm IEdmsExplorer IEdmsObject IEdmsObjectDescription IEdmsObjectFactory IEdmsObjectInfo IEDocument IEDocumentAccessRights IEDocumentDescription IEDocumentEditor IEDocumentFactory IEDocumentInfo IEDocumentStorage IEDocumentVersion IEDocumentVersionListDialog IEDocumentVersionSource IEDocumentWizardStep IEDocVerSignature IEDocVersionState IEnabledMode IEncodeProvider IEncrypter IEvent IEventList IException IExternalEvents IExternalHandler IFactory IField IFileDialog IFolder IFolderDescription IFolderDialog IFolderFactory IFolderInfo IForEach IForm IFormTitle IFormWizardStep IGlobalIDFactory IGlobalIDInfo IGrid IHasher IHistoryDescription IHyperLinkControl IImageButton IImageControl IInnerPanel IInplaceHint IIntegerCriterion IIntegerList IIntegerRequisite IIntegerValue IISBLEditorForm IJob IJobDescription IJobFactory IJobForm IJobInfo ILabelControl ILargeIntegerCriterion ILargeIntegerRequisite ILargeIntegerValue ILicenseInfo ILifeCycleStage IList IListBox ILocalIDInfo ILocalization ILock IMemoryDataSet IMessagingFactory IMetadataRepository INotice INoticeInfo INumericCriterion INumericRequisite INumericValue IObject IObjectDescription IObjectImporter IObjectInfo IObserver IPanelGroup IPickCriterion IPickProperty IPickRequisite IPickRequisiteDescription IPickRequisiteItem IPickRequisiteItems IPickValue IPrivilege IPrivilegeList IProcess IProcessFactory IProcessMessage IProgress IProperty IPropertyChangeEvent IQuery IReference IReferenceCriterion IReferenceEnabledMode IReferenceFactory IReferenceHistoryDescription IReferenceInfo IReferenceRecordCardWizardStep IReferenceRequisiteDescription IReferencesFactory IReferenceValue IRefRequisite IReport IReportFactory IRequisite IRequisiteDescription IRequisiteDescriptionList IRequisiteFactory IRichEdit IRouteStep IRule IRuleList ISchemeBlock IScript IScriptFactory ISearchCriteria ISearchCriterion ISearchDescription ISearchFactory ISearchFolderInfo ISearchForObjectDescription ISearchResultRestrictions ISecuredContext ISelectDialog IServerEvent IServerEventFactory IServiceDialog IServiceFactory ISignature ISignProvider ISignProvider2 ISignProvider3 ISimpleCriterion IStringCriterion IStringList IStringRequisite IStringRequisiteDescription IStringValue ISystemDialogsFactory ISystemInfo ITabSheet ITask ITaskAbortReasonInfo ITaskCardWizardStep ITaskDescription ITaskFactory ITaskInfo ITaskRoute ITextCriterion ITextRequisite ITextValue ITreeListSelectDialog IUser IUserList IValue IView IWebBrowserControl IWizard IWizardAction IWizardFactory IWizardFormElement IWizardParam IWizardPickParam IWizardReferenceParam IWizardStep IWorkAccessRights IWorkDescription IWorkflowAskableParam IWorkflowAskableParams IWorkflowBlock IWorkflowBlockResult IWorkflowEnabledMode IWorkflowParam IWorkflowPickParam IWorkflowReferenceParam IWorkState IWorkTreeCustomNode IWorkTreeJobNode IWorkTreeTaskNode IXMLEditorForm SBCrypto ";
  const BUILTIN = CONSTANTS + ENUMS;
  const CLASS = predefined_variables;
  const LITERAL = "null true false nil ";
  const NUMBERS = {
    className: "number",
    begin: hljs2.NUMBER_RE,
    relevance: 0
  };
  const STRINGS = {
    className: "string",
    variants: [
      {
        begin: '"',
        end: '"'
      },
      {
        begin: "'",
        end: "'"
      }
    ]
  };
  const DOCTAGS = {
    className: "doctag",
    begin: "\\b(?:TODO|DONE|BEGIN|END|STUB|CHG|FIXME|NOTE|BUG|XXX)\\b",
    relevance: 0
  };
  const ISBL_LINE_COMMENT_MODE = {
    className: "comment",
    begin: "//",
    end: "$",
    relevance: 0,
    contains: [
      hljs2.PHRASAL_WORDS_MODE,
      DOCTAGS
    ]
  };
  const ISBL_BLOCK_COMMENT_MODE = {
    className: "comment",
    begin: "/\\*",
    end: "\\*/",
    relevance: 0,
    contains: [
      hljs2.PHRASAL_WORDS_MODE,
      DOCTAGS
    ]
  };
  const COMMENTS = {
    variants: [
      ISBL_LINE_COMMENT_MODE,
      ISBL_BLOCK_COMMENT_MODE
    ]
  };
  const KEYWORDS2 = {
    $pattern: UNDERSCORE_IDENT_RE2,
    keyword: KEYWORD,
    built_in: BUILTIN,
    class: CLASS,
    literal: LITERAL
  };
  const METHODS = {
    begin: "\\.\\s*" + hljs2.UNDERSCORE_IDENT_RE,
    keywords: KEYWORDS2,
    relevance: 0
  };
  const TYPES2 = {
    className: "type",
    begin: ":[ \\t]*(" + interfaces.trim().replace(/\s/g, "|") + ")",
    end: "[ \\t]*=",
    excludeEnd: true
  };
  const VARIABLES = {
    className: "variable",
    keywords: KEYWORDS2,
    begin: UNDERSCORE_IDENT_RE2,
    relevance: 0,
    contains: [
      TYPES2,
      METHODS
    ]
  };
  const FUNCTION_TITLE = FUNCTION_NAME_IDENT_RE + "\\(";
  const TITLE_MODE2 = {
    className: "title",
    keywords: {
      $pattern: UNDERSCORE_IDENT_RE2,
      built_in: system_functions
    },
    begin: FUNCTION_TITLE,
    end: "\\(",
    returnBegin: true,
    excludeEnd: true
  };
  const FUNCTIONS = {
    className: "function",
    begin: FUNCTION_TITLE,
    end: "\\)$",
    returnBegin: true,
    keywords: KEYWORDS2,
    illegal: "[\\[\\]\\|\\$\\?%,~#@]",
    contains: [
      TITLE_MODE2,
      METHODS,
      VARIABLES,
      STRINGS,
      NUMBERS,
      COMMENTS
    ]
  };
  return {
    name: "ISBL",
    case_insensitive: true,
    keywords: KEYWORDS2,
    illegal: "\\$|\\?|%|,|;$|~|#|@|</",
    contains: [
      FUNCTIONS,
      TYPES2,
      METHODS,
      VARIABLES,
      STRINGS,
      NUMBERS,
      COMMENTS
    ]
  };
}
var isbl_1 = isbl;
var decimalDigits$1 = "[0-9](_*[0-9])*";
var frac$1 = `\\.(${decimalDigits$1})`;
var hexDigits$1 = "[0-9a-fA-F](_*[0-9a-fA-F])*";
var NUMERIC$1 = {
  className: "number",
  variants: [
    {begin: `(\\b(${decimalDigits$1})((${frac$1})|\\.)?|(${frac$1}))[eE][+-]?(${decimalDigits$1})[fFdD]?\\b`},
    {begin: `\\b(${decimalDigits$1})((${frac$1})[fFdD]?\\b|\\.([fFdD]\\b)?)`},
    {begin: `(${frac$1})[fFdD]?\\b`},
    {begin: `\\b(${decimalDigits$1})[fFdD]\\b`},
    {begin: `\\b0[xX]((${hexDigits$1})\\.?|(${hexDigits$1})?\\.(${hexDigits$1}))[pP][+-]?(${decimalDigits$1})[fFdD]?\\b`},
    {begin: "\\b(0|[1-9](_*[0-9])*)[lL]?\\b"},
    {begin: `\\b0[xX](${hexDigits$1})[lL]?\\b`},
    {begin: "\\b0(_*[0-7])*[lL]?\\b"},
    {begin: "\\b0[bB][01](_*[01])*[lL]?\\b"}
  ],
  relevance: 0
};
function java(hljs2) {
  var JAVA_IDENT_RE = "[\xC0-\u02B8a-zA-Z_$][\xC0-\u02B8a-zA-Z_$0-9]*";
  var GENERIC_IDENT_RE = JAVA_IDENT_RE + "(<" + JAVA_IDENT_RE + "(\\s*,\\s*" + JAVA_IDENT_RE + ")*>)?";
  var KEYWORDS2 = "false synchronized int abstract float private char boolean var static null if const for true while long strictfp finally protected import native final void enum else break transient catch instanceof byte super volatile case assert short package default double public try this switch continue throws protected public private module requires exports do";
  var ANNOTATION = {
    className: "meta",
    begin: "@" + JAVA_IDENT_RE,
    contains: [
      {
        begin: /\(/,
        end: /\)/,
        contains: ["self"]
      }
    ]
  };
  const NUMBER = NUMERIC$1;
  return {
    name: "Java",
    aliases: ["jsp"],
    keywords: KEYWORDS2,
    illegal: /<\/|#/,
    contains: [
      hljs2.COMMENT("/\\*\\*", "\\*/", {
        relevance: 0,
        contains: [
          {
            begin: /\w+@/,
            relevance: 0
          },
          {
            className: "doctag",
            begin: "@[A-Za-z]+"
          }
        ]
      }),
      {
        begin: /import java\.[a-z]+\./,
        keywords: "import",
        relevance: 2
      },
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      hljs2.APOS_STRING_MODE,
      hljs2.QUOTE_STRING_MODE,
      {
        className: "class",
        beginKeywords: "class interface enum",
        end: /[{;=]/,
        excludeEnd: true,
        relevance: 1,
        keywords: "class interface enum",
        illegal: /[:"\[\]]/,
        contains: [
          {beginKeywords: "extends implements"},
          hljs2.UNDERSCORE_TITLE_MODE
        ]
      },
      {
        beginKeywords: "new throw return else",
        relevance: 0
      },
      {
        className: "class",
        begin: "record\\s+" + hljs2.UNDERSCORE_IDENT_RE + "\\s*\\(",
        returnBegin: true,
        excludeEnd: true,
        end: /[{;=]/,
        keywords: KEYWORDS2,
        contains: [
          {beginKeywords: "record"},
          {
            begin: hljs2.UNDERSCORE_IDENT_RE + "\\s*\\(",
            returnBegin: true,
            relevance: 0,
            contains: [hljs2.UNDERSCORE_TITLE_MODE]
          },
          {
            className: "params",
            begin: /\(/,
            end: /\)/,
            keywords: KEYWORDS2,
            relevance: 0,
            contains: [
              hljs2.C_BLOCK_COMMENT_MODE
            ]
          },
          hljs2.C_LINE_COMMENT_MODE,
          hljs2.C_BLOCK_COMMENT_MODE
        ]
      },
      {
        className: "function",
        begin: "(" + GENERIC_IDENT_RE + "\\s+)+" + hljs2.UNDERSCORE_IDENT_RE + "\\s*\\(",
        returnBegin: true,
        end: /[{;=]/,
        excludeEnd: true,
        keywords: KEYWORDS2,
        contains: [
          {
            begin: hljs2.UNDERSCORE_IDENT_RE + "\\s*\\(",
            returnBegin: true,
            relevance: 0,
            contains: [hljs2.UNDERSCORE_TITLE_MODE]
          },
          {
            className: "params",
            begin: /\(/,
            end: /\)/,
            keywords: KEYWORDS2,
            relevance: 0,
            contains: [
              ANNOTATION,
              hljs2.APOS_STRING_MODE,
              hljs2.QUOTE_STRING_MODE,
              NUMBER,
              hljs2.C_BLOCK_COMMENT_MODE
            ]
          },
          hljs2.C_LINE_COMMENT_MODE,
          hljs2.C_BLOCK_COMMENT_MODE
        ]
      },
      NUMBER,
      ANNOTATION
    ]
  };
}
var java_1 = java;
const IDENT_RE$1 = "[A-Za-z$_][0-9A-Za-z$_]*";
const KEYWORDS$2 = [
  "as",
  "in",
  "of",
  "if",
  "for",
  "while",
  "finally",
  "var",
  "new",
  "function",
  "do",
  "return",
  "void",
  "else",
  "break",
  "catch",
  "instanceof",
  "with",
  "throw",
  "case",
  "default",
  "try",
  "switch",
  "continue",
  "typeof",
  "delete",
  "let",
  "yield",
  "const",
  "class",
  "debugger",
  "async",
  "await",
  "static",
  "import",
  "from",
  "export",
  "extends"
];
const LITERALS$2 = [
  "true",
  "false",
  "null",
  "undefined",
  "NaN",
  "Infinity"
];
const TYPES$2 = [
  "Intl",
  "DataView",
  "Number",
  "Math",
  "Date",
  "String",
  "RegExp",
  "Object",
  "Function",
  "Boolean",
  "Error",
  "Symbol",
  "Set",
  "Map",
  "WeakSet",
  "WeakMap",
  "Proxy",
  "Reflect",
  "JSON",
  "Promise",
  "Float64Array",
  "Int16Array",
  "Int32Array",
  "Int8Array",
  "Uint16Array",
  "Uint32Array",
  "Float32Array",
  "Array",
  "Uint8Array",
  "Uint8ClampedArray",
  "ArrayBuffer",
  "BigInt64Array",
  "BigUint64Array",
  "BigInt"
];
const ERROR_TYPES$2 = [
  "EvalError",
  "InternalError",
  "RangeError",
  "ReferenceError",
  "SyntaxError",
  "TypeError",
  "URIError"
];
const BUILT_IN_GLOBALS$2 = [
  "setInterval",
  "setTimeout",
  "clearInterval",
  "clearTimeout",
  "require",
  "exports",
  "eval",
  "isFinite",
  "isNaN",
  "parseFloat",
  "parseInt",
  "decodeURI",
  "decodeURIComponent",
  "encodeURI",
  "encodeURIComponent",
  "escape",
  "unescape"
];
const BUILT_IN_VARIABLES$2 = [
  "arguments",
  "this",
  "super",
  "console",
  "window",
  "document",
  "localStorage",
  "module",
  "global"
];
const BUILT_INS$2 = [].concat(BUILT_IN_GLOBALS$2, BUILT_IN_VARIABLES$2, TYPES$2, ERROR_TYPES$2);
function source$d(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function lookahead$4(re) {
  return concat$c("(?=", re, ")");
}
function concat$c(...args) {
  const joined = args.map((x2) => source$d(x2)).join("");
  return joined;
}
function javascript$1(hljs2) {
  const hasClosingTag = (match2, {after}) => {
    const tag2 = "</" + match2[0].slice(1);
    const pos = match2.input.indexOf(tag2, after);
    return pos !== -1;
  };
  const IDENT_RE$1$1 = IDENT_RE$1;
  const FRAGMENT = {
    begin: "<>",
    end: "</>"
  };
  const XML_TAG = {
    begin: /<[A-Za-z0-9\\._:-]+/,
    end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
    isTrulyOpeningTag: (match2, response) => {
      const afterMatchIndex = match2[0].length + match2.index;
      const nextChar = match2.input[afterMatchIndex];
      if (nextChar === "<") {
        response.ignoreMatch();
        return;
      }
      if (nextChar === ">") {
        if (!hasClosingTag(match2, {after: afterMatchIndex})) {
          response.ignoreMatch();
        }
      }
    }
  };
  const KEYWORDS$12 = {
    $pattern: IDENT_RE$1,
    keyword: KEYWORDS$2,
    literal: LITERALS$2,
    built_in: BUILT_INS$2
  };
  const decimalDigits2 = "[0-9](_?[0-9])*";
  const frac2 = `\\.(${decimalDigits2})`;
  const decimalInteger = `0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*`;
  const NUMBER = {
    className: "number",
    variants: [
      {begin: `(\\b(${decimalInteger})((${frac2})|\\.)?|(${frac2}))[eE][+-]?(${decimalDigits2})\\b`},
      {begin: `\\b(${decimalInteger})\\b((${frac2})\\b|\\.)?|(${frac2})\\b`},
      {begin: `\\b(0|[1-9](_?[0-9])*)n\\b`},
      {begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b"},
      {begin: "\\b0[bB][0-1](_?[0-1])*n?\\b"},
      {begin: "\\b0[oO][0-7](_?[0-7])*n?\\b"},
      {begin: "\\b0[0-7]+n?\\b"}
    ],
    relevance: 0
  };
  const SUBST = {
    className: "subst",
    begin: "\\$\\{",
    end: "\\}",
    keywords: KEYWORDS$12,
    contains: []
  };
  const HTML_TEMPLATE = {
    begin: "html`",
    end: "",
    starts: {
      end: "`",
      returnEnd: false,
      contains: [
        hljs2.BACKSLASH_ESCAPE,
        SUBST
      ],
      subLanguage: "xml"
    }
  };
  const CSS_TEMPLATE = {
    begin: "css`",
    end: "",
    starts: {
      end: "`",
      returnEnd: false,
      contains: [
        hljs2.BACKSLASH_ESCAPE,
        SUBST
      ],
      subLanguage: "css"
    }
  };
  const TEMPLATE_STRING = {
    className: "string",
    begin: "`",
    end: "`",
    contains: [
      hljs2.BACKSLASH_ESCAPE,
      SUBST
    ]
  };
  const JSDOC_COMMENT = hljs2.COMMENT(/\/\*\*(?!\/)/, "\\*/", {
    relevance: 0,
    contains: [
      {
        className: "doctag",
        begin: "@[A-Za-z]+",
        contains: [
          {
            className: "type",
            begin: "\\{",
            end: "\\}",
            relevance: 0
          },
          {
            className: "variable",
            begin: IDENT_RE$1$1 + "(?=\\s*(-)|$)",
            endsParent: true,
            relevance: 0
          },
          {
            begin: /(?=[^\n])\s/,
            relevance: 0
          }
        ]
      }
    ]
  });
  const COMMENT2 = {
    className: "comment",
    variants: [
      JSDOC_COMMENT,
      hljs2.C_BLOCK_COMMENT_MODE,
      hljs2.C_LINE_COMMENT_MODE
    ]
  };
  const SUBST_INTERNALS = [
    hljs2.APOS_STRING_MODE,
    hljs2.QUOTE_STRING_MODE,
    HTML_TEMPLATE,
    CSS_TEMPLATE,
    TEMPLATE_STRING,
    NUMBER,
    hljs2.REGEXP_MODE
  ];
  SUBST.contains = SUBST_INTERNALS.concat({
    begin: /\{/,
    end: /\}/,
    keywords: KEYWORDS$12,
    contains: [
      "self"
    ].concat(SUBST_INTERNALS)
  });
  const SUBST_AND_COMMENTS = [].concat(COMMENT2, SUBST.contains);
  const PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([
    {
      begin: /\(/,
      end: /\)/,
      keywords: KEYWORDS$12,
      contains: ["self"].concat(SUBST_AND_COMMENTS)
    }
  ]);
  const PARAMS = {
    className: "params",
    begin: /\(/,
    end: /\)/,
    excludeBegin: true,
    excludeEnd: true,
    keywords: KEYWORDS$12,
    contains: PARAMS_CONTAINS
  };
  return {
    name: "Javascript",
    aliases: ["js", "jsx", "mjs", "cjs"],
    keywords: KEYWORDS$12,
    exports: {PARAMS_CONTAINS},
    illegal: /#(?![$_A-z])/,
    contains: [
      hljs2.SHEBANG({
        label: "shebang",
        binary: "node",
        relevance: 5
      }),
      {
        label: "use_strict",
        className: "meta",
        relevance: 10,
        begin: /^\s*['"]use (strict|asm)['"]/
      },
      hljs2.APOS_STRING_MODE,
      hljs2.QUOTE_STRING_MODE,
      HTML_TEMPLATE,
      CSS_TEMPLATE,
      TEMPLATE_STRING,
      COMMENT2,
      NUMBER,
      {
        begin: concat$c(/[{,\n]\s*/, lookahead$4(concat$c(/(((\/\/.*$)|(\/\*(\*[^/]|[^*])*\*\/))\s*)*/, IDENT_RE$1$1 + "\\s*:"))),
        relevance: 0,
        contains: [
          {
            className: "attr",
            begin: IDENT_RE$1$1 + lookahead$4("\\s*:"),
            relevance: 0
          }
        ]
      },
      {
        begin: "(" + hljs2.RE_STARTERS_RE + "|\\b(case|return|throw)\\b)\\s*",
        keywords: "return throw case",
        contains: [
          COMMENT2,
          hljs2.REGEXP_MODE,
          {
            className: "function",
            begin: "(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|" + hljs2.UNDERSCORE_IDENT_RE + ")\\s*=>",
            returnBegin: true,
            end: "\\s*=>",
            contains: [
              {
                className: "params",
                variants: [
                  {
                    begin: hljs2.UNDERSCORE_IDENT_RE,
                    relevance: 0
                  },
                  {
                    className: null,
                    begin: /\(\s*\)/,
                    skip: true
                  },
                  {
                    begin: /\(/,
                    end: /\)/,
                    excludeBegin: true,
                    excludeEnd: true,
                    keywords: KEYWORDS$12,
                    contains: PARAMS_CONTAINS
                  }
                ]
              }
            ]
          },
          {
            begin: /,/,
            relevance: 0
          },
          {
            className: "",
            begin: /\s/,
            end: /\s*/,
            skip: true
          },
          {
            variants: [
              {begin: FRAGMENT.begin, end: FRAGMENT.end},
              {
                begin: XML_TAG.begin,
                "on:begin": XML_TAG.isTrulyOpeningTag,
                end: XML_TAG.end
              }
            ],
            subLanguage: "xml",
            contains: [
              {
                begin: XML_TAG.begin,
                end: XML_TAG.end,
                skip: true,
                contains: ["self"]
              }
            ]
          }
        ],
        relevance: 0
      },
      {
        className: "function",
        beginKeywords: "function",
        end: /[{;]/,
        excludeEnd: true,
        keywords: KEYWORDS$12,
        contains: [
          "self",
          hljs2.inherit(hljs2.TITLE_MODE, {begin: IDENT_RE$1$1}),
          PARAMS
        ],
        illegal: /%/
      },
      {
        beginKeywords: "while if switch catch for"
      },
      {
        className: "function",
        begin: hljs2.UNDERSCORE_IDENT_RE + "\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{",
        returnBegin: true,
        contains: [
          PARAMS,
          hljs2.inherit(hljs2.TITLE_MODE, {begin: IDENT_RE$1$1})
        ]
      },
      {
        variants: [
          {begin: "\\." + IDENT_RE$1$1},
          {begin: "\\$" + IDENT_RE$1$1}
        ],
        relevance: 0
      },
      {
        className: "class",
        beginKeywords: "class",
        end: /[{;=]/,
        excludeEnd: true,
        illegal: /[:"[\]]/,
        contains: [
          {beginKeywords: "extends"},
          hljs2.UNDERSCORE_TITLE_MODE
        ]
      },
      {
        begin: /\b(?=constructor)/,
        end: /[{;]/,
        excludeEnd: true,
        contains: [
          hljs2.inherit(hljs2.TITLE_MODE, {begin: IDENT_RE$1$1}),
          "self",
          PARAMS
        ]
      },
      {
        begin: "(get|set)\\s+(?=" + IDENT_RE$1$1 + "\\()",
        end: /\{/,
        keywords: "get set",
        contains: [
          hljs2.inherit(hljs2.TITLE_MODE, {begin: IDENT_RE$1$1}),
          {begin: /\(\)/},
          PARAMS
        ]
      },
      {
        begin: /\$[(.]/
      }
    ]
  };
}
var javascript_1 = javascript$1;
function jbossCli(hljs2) {
  const PARAM = {
    begin: /[\w-]+ *=/,
    returnBegin: true,
    relevance: 0,
    contains: [
      {
        className: "attr",
        begin: /[\w-]+/
      }
    ]
  };
  const PARAMSBLOCK = {
    className: "params",
    begin: /\(/,
    end: /\)/,
    contains: [PARAM],
    relevance: 0
  };
  const OPERATION = {
    className: "function",
    begin: /:[\w\-.]+/,
    relevance: 0
  };
  const PATH = {
    className: "string",
    begin: /\B([\/.])[\w\-.\/=]+/
  };
  const COMMAND_PARAMS = {
    className: "params",
    begin: /--[\w\-=\/]+/
  };
  return {
    name: "JBoss CLI",
    aliases: ["wildfly-cli"],
    keywords: {
      $pattern: "[a-z-]+",
      keyword: "alias batch cd clear command connect connection-factory connection-info data-source deploy deployment-info deployment-overlay echo echo-dmr help history if jdbc-driver-info jms-queue|20 jms-topic|20 ls patch pwd quit read-attribute read-operation reload rollout-plan run-batch set shutdown try unalias undeploy unset version xa-data-source",
      literal: "true false"
    },
    contains: [
      hljs2.HASH_COMMENT_MODE,
      hljs2.QUOTE_STRING_MODE,
      COMMAND_PARAMS,
      OPERATION,
      PATH,
      PARAMSBLOCK
    ]
  };
}
var jbossCli_1 = jbossCli;
function json(hljs2) {
  const LITERALS2 = {
    literal: "true false null"
  };
  const ALLOWED_COMMENTS = [
    hljs2.C_LINE_COMMENT_MODE,
    hljs2.C_BLOCK_COMMENT_MODE
  ];
  const TYPES2 = [
    hljs2.QUOTE_STRING_MODE,
    hljs2.C_NUMBER_MODE
  ];
  const VALUE_CONTAINER = {
    end: ",",
    endsWithParent: true,
    excludeEnd: true,
    contains: TYPES2,
    keywords: LITERALS2
  };
  const OBJECT = {
    begin: /\{/,
    end: /\}/,
    contains: [
      {
        className: "attr",
        begin: /"/,
        end: /"/,
        contains: [hljs2.BACKSLASH_ESCAPE],
        illegal: "\\n"
      },
      hljs2.inherit(VALUE_CONTAINER, {
        begin: /:/
      })
    ].concat(ALLOWED_COMMENTS),
    illegal: "\\S"
  };
  const ARRAY = {
    begin: "\\[",
    end: "\\]",
    contains: [hljs2.inherit(VALUE_CONTAINER)],
    illegal: "\\S"
  };
  TYPES2.push(OBJECT, ARRAY);
  ALLOWED_COMMENTS.forEach(function(rule) {
    TYPES2.push(rule);
  });
  return {
    name: "JSON",
    contains: TYPES2,
    keywords: LITERALS2,
    illegal: "\\S"
  };
}
var json_1 = json;
function julia(hljs2) {
  var VARIABLE_NAME_RE = "[A-Za-z_\\u00A1-\\uFFFF][A-Za-z_0-9\\u00A1-\\uFFFF]*";
  var KEYWORD_LIST = [
    "baremodule",
    "begin",
    "break",
    "catch",
    "ccall",
    "const",
    "continue",
    "do",
    "else",
    "elseif",
    "end",
    "export",
    "false",
    "finally",
    "for",
    "function",
    "global",
    "if",
    "import",
    "in",
    "isa",
    "let",
    "local",
    "macro",
    "module",
    "quote",
    "return",
    "true",
    "try",
    "using",
    "where",
    "while"
  ];
  var LITERAL_LIST = [
    "ARGS",
    "C_NULL",
    "DEPOT_PATH",
    "ENDIAN_BOM",
    "ENV",
    "Inf",
    "Inf16",
    "Inf32",
    "Inf64",
    "InsertionSort",
    "LOAD_PATH",
    "MergeSort",
    "NaN",
    "NaN16",
    "NaN32",
    "NaN64",
    "PROGRAM_FILE",
    "QuickSort",
    "RoundDown",
    "RoundFromZero",
    "RoundNearest",
    "RoundNearestTiesAway",
    "RoundNearestTiesUp",
    "RoundToZero",
    "RoundUp",
    "VERSION|0",
    "devnull",
    "false",
    "im",
    "missing",
    "nothing",
    "pi",
    "stderr",
    "stdin",
    "stdout",
    "true",
    "undef",
    "\u03C0",
    "\u212F"
  ];
  var BUILT_IN_LIST = [
    "AbstractArray",
    "AbstractChannel",
    "AbstractChar",
    "AbstractDict",
    "AbstractDisplay",
    "AbstractFloat",
    "AbstractIrrational",
    "AbstractMatrix",
    "AbstractRange",
    "AbstractSet",
    "AbstractString",
    "AbstractUnitRange",
    "AbstractVecOrMat",
    "AbstractVector",
    "Any",
    "ArgumentError",
    "Array",
    "AssertionError",
    "BigFloat",
    "BigInt",
    "BitArray",
    "BitMatrix",
    "BitSet",
    "BitVector",
    "Bool",
    "BoundsError",
    "CapturedException",
    "CartesianIndex",
    "CartesianIndices",
    "Cchar",
    "Cdouble",
    "Cfloat",
    "Channel",
    "Char",
    "Cint",
    "Cintmax_t",
    "Clong",
    "Clonglong",
    "Cmd",
    "Colon",
    "Complex",
    "ComplexF16",
    "ComplexF32",
    "ComplexF64",
    "CompositeException",
    "Condition",
    "Cptrdiff_t",
    "Cshort",
    "Csize_t",
    "Cssize_t",
    "Cstring",
    "Cuchar",
    "Cuint",
    "Cuintmax_t",
    "Culong",
    "Culonglong",
    "Cushort",
    "Cvoid",
    "Cwchar_t",
    "Cwstring",
    "DataType",
    "DenseArray",
    "DenseMatrix",
    "DenseVecOrMat",
    "DenseVector",
    "Dict",
    "DimensionMismatch",
    "Dims",
    "DivideError",
    "DomainError",
    "EOFError",
    "Enum",
    "ErrorException",
    "Exception",
    "ExponentialBackOff",
    "Expr",
    "Float16",
    "Float32",
    "Float64",
    "Function",
    "GlobalRef",
    "HTML",
    "IO",
    "IOBuffer",
    "IOContext",
    "IOStream",
    "IdDict",
    "IndexCartesian",
    "IndexLinear",
    "IndexStyle",
    "InexactError",
    "InitError",
    "Int",
    "Int128",
    "Int16",
    "Int32",
    "Int64",
    "Int8",
    "Integer",
    "InterruptException",
    "InvalidStateException",
    "Irrational",
    "KeyError",
    "LinRange",
    "LineNumberNode",
    "LinearIndices",
    "LoadError",
    "MIME",
    "Matrix",
    "Method",
    "MethodError",
    "Missing",
    "MissingException",
    "Module",
    "NTuple",
    "NamedTuple",
    "Nothing",
    "Number",
    "OrdinalRange",
    "OutOfMemoryError",
    "OverflowError",
    "Pair",
    "PartialQuickSort",
    "PermutedDimsArray",
    "Pipe",
    "ProcessFailedException",
    "Ptr",
    "QuoteNode",
    "Rational",
    "RawFD",
    "ReadOnlyMemoryError",
    "Real",
    "ReentrantLock",
    "Ref",
    "Regex",
    "RegexMatch",
    "RoundingMode",
    "SegmentationFault",
    "Set",
    "Signed",
    "Some",
    "StackOverflowError",
    "StepRange",
    "StepRangeLen",
    "StridedArray",
    "StridedMatrix",
    "StridedVecOrMat",
    "StridedVector",
    "String",
    "StringIndexError",
    "SubArray",
    "SubString",
    "SubstitutionString",
    "Symbol",
    "SystemError",
    "Task",
    "TaskFailedException",
    "Text",
    "TextDisplay",
    "Timer",
    "Tuple",
    "Type",
    "TypeError",
    "TypeVar",
    "UInt",
    "UInt128",
    "UInt16",
    "UInt32",
    "UInt64",
    "UInt8",
    "UndefInitializer",
    "UndefKeywordError",
    "UndefRefError",
    "UndefVarError",
    "Union",
    "UnionAll",
    "UnitRange",
    "Unsigned",
    "Val",
    "Vararg",
    "VecElement",
    "VecOrMat",
    "Vector",
    "VersionNumber",
    "WeakKeyDict",
    "WeakRef"
  ];
  var KEYWORDS2 = {
    $pattern: VARIABLE_NAME_RE,
    keyword: KEYWORD_LIST,
    literal: LITERAL_LIST,
    built_in: BUILT_IN_LIST
  };
  var DEFAULT = {
    keywords: KEYWORDS2,
    illegal: /<\//
  };
  var NUMBER = {
    className: "number",
    begin: /(\b0x[\d_]*(\.[\d_]*)?|0x\.\d[\d_]*)p[-+]?\d+|\b0[box][a-fA-F0-9][a-fA-F0-9_]*|(\b\d[\d_]*(\.[\d_]*)?|\.\d[\d_]*)([eEfF][-+]?\d+)?/,
    relevance: 0
  };
  var CHAR = {
    className: "string",
    begin: /'(.|\\[xXuU][a-zA-Z0-9]+)'/
  };
  var INTERPOLATION = {
    className: "subst",
    begin: /\$\(/,
    end: /\)/,
    keywords: KEYWORDS2
  };
  var INTERPOLATED_VARIABLE = {
    className: "variable",
    begin: "\\$" + VARIABLE_NAME_RE
  };
  var STRING = {
    className: "string",
    contains: [hljs2.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],
    variants: [
      {begin: /\w*"""/, end: /"""\w*/, relevance: 10},
      {begin: /\w*"/, end: /"\w*/}
    ]
  };
  var COMMAND = {
    className: "string",
    contains: [hljs2.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],
    begin: "`",
    end: "`"
  };
  var MACROCALL = {
    className: "meta",
    begin: "@" + VARIABLE_NAME_RE
  };
  var COMMENT2 = {
    className: "comment",
    variants: [
      {begin: "#=", end: "=#", relevance: 10},
      {begin: "#", end: "$"}
    ]
  };
  DEFAULT.name = "Julia";
  DEFAULT.contains = [
    NUMBER,
    CHAR,
    STRING,
    COMMAND,
    MACROCALL,
    COMMENT2,
    hljs2.HASH_COMMENT_MODE,
    {
      className: "keyword",
      begin: "\\b(((abstract|primitive)\\s+)type|(mutable\\s+)?struct)\\b"
    },
    {begin: /<:/}
  ];
  INTERPOLATION.contains = DEFAULT.contains;
  return DEFAULT;
}
var julia_1 = julia;
function juliaRepl(hljs2) {
  return {
    name: "Julia REPL",
    contains: [
      {
        className: "meta",
        begin: /^julia>/,
        relevance: 10,
        starts: {
          end: /^(?![ ]{6})/,
          subLanguage: "julia"
        },
        aliases: ["jldoctest"]
      }
    ]
  };
}
var juliaRepl_1 = juliaRepl;
var decimalDigits = "[0-9](_*[0-9])*";
var frac = `\\.(${decimalDigits})`;
var hexDigits = "[0-9a-fA-F](_*[0-9a-fA-F])*";
var NUMERIC = {
  className: "number",
  variants: [
    {begin: `(\\b(${decimalDigits})((${frac})|\\.)?|(${frac}))[eE][+-]?(${decimalDigits})[fFdD]?\\b`},
    {begin: `\\b(${decimalDigits})((${frac})[fFdD]?\\b|\\.([fFdD]\\b)?)`},
    {begin: `(${frac})[fFdD]?\\b`},
    {begin: `\\b(${decimalDigits})[fFdD]\\b`},
    {begin: `\\b0[xX]((${hexDigits})\\.?|(${hexDigits})?\\.(${hexDigits}))[pP][+-]?(${decimalDigits})[fFdD]?\\b`},
    {begin: "\\b(0|[1-9](_*[0-9])*)[lL]?\\b"},
    {begin: `\\b0[xX](${hexDigits})[lL]?\\b`},
    {begin: "\\b0(_*[0-7])*[lL]?\\b"},
    {begin: "\\b0[bB][01](_*[01])*[lL]?\\b"}
  ],
  relevance: 0
};
function kotlin(hljs2) {
  const KEYWORDS2 = {
    keyword: "abstract as val var vararg get set class object open private protected public noinline crossinline dynamic final enum if else do while for when throw try catch finally import package is in fun override companion reified inline lateinit init interface annotation data sealed internal infix operator out by constructor super tailrec where const inner suspend typealias external expect actual",
    built_in: "Byte Short Char Int Long Boolean Float Double Void Unit Nothing",
    literal: "true false null"
  };
  const KEYWORDS_WITH_LABEL = {
    className: "keyword",
    begin: /\b(break|continue|return|this)\b/,
    starts: {
      contains: [
        {
          className: "symbol",
          begin: /@\w+/
        }
      ]
    }
  };
  const LABEL = {
    className: "symbol",
    begin: hljs2.UNDERSCORE_IDENT_RE + "@"
  };
  const SUBST = {
    className: "subst",
    begin: /\$\{/,
    end: /\}/,
    contains: [hljs2.C_NUMBER_MODE]
  };
  const VARIABLE = {
    className: "variable",
    begin: "\\$" + hljs2.UNDERSCORE_IDENT_RE
  };
  const STRING = {
    className: "string",
    variants: [
      {
        begin: '"""',
        end: '"""(?=[^"])',
        contains: [
          VARIABLE,
          SUBST
        ]
      },
      {
        begin: "'",
        end: "'",
        illegal: /\n/,
        contains: [hljs2.BACKSLASH_ESCAPE]
      },
      {
        begin: '"',
        end: '"',
        illegal: /\n/,
        contains: [
          hljs2.BACKSLASH_ESCAPE,
          VARIABLE,
          SUBST
        ]
      }
    ]
  };
  SUBST.contains.push(STRING);
  const ANNOTATION_USE_SITE = {
    className: "meta",
    begin: "@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\s*:(?:\\s*" + hljs2.UNDERSCORE_IDENT_RE + ")?"
  };
  const ANNOTATION = {
    className: "meta",
    begin: "@" + hljs2.UNDERSCORE_IDENT_RE,
    contains: [
      {
        begin: /\(/,
        end: /\)/,
        contains: [
          hljs2.inherit(STRING, {
            className: "meta-string"
          })
        ]
      }
    ]
  };
  const KOTLIN_NUMBER_MODE = NUMERIC;
  const KOTLIN_NESTED_COMMENT = hljs2.COMMENT("/\\*", "\\*/", {
    contains: [hljs2.C_BLOCK_COMMENT_MODE]
  });
  const KOTLIN_PAREN_TYPE = {
    variants: [
      {
        className: "type",
        begin: hljs2.UNDERSCORE_IDENT_RE
      },
      {
        begin: /\(/,
        end: /\)/,
        contains: []
      }
    ]
  };
  const KOTLIN_PAREN_TYPE2 = KOTLIN_PAREN_TYPE;
  KOTLIN_PAREN_TYPE2.variants[1].contains = [KOTLIN_PAREN_TYPE];
  KOTLIN_PAREN_TYPE.variants[1].contains = [KOTLIN_PAREN_TYPE2];
  return {
    name: "Kotlin",
    aliases: ["kt", "kts"],
    keywords: KEYWORDS2,
    contains: [
      hljs2.COMMENT("/\\*\\*", "\\*/", {
        relevance: 0,
        contains: [
          {
            className: "doctag",
            begin: "@[A-Za-z]+"
          }
        ]
      }),
      hljs2.C_LINE_COMMENT_MODE,
      KOTLIN_NESTED_COMMENT,
      KEYWORDS_WITH_LABEL,
      LABEL,
      ANNOTATION_USE_SITE,
      ANNOTATION,
      {
        className: "function",
        beginKeywords: "fun",
        end: "[(]|$",
        returnBegin: true,
        excludeEnd: true,
        keywords: KEYWORDS2,
        relevance: 5,
        contains: [
          {
            begin: hljs2.UNDERSCORE_IDENT_RE + "\\s*\\(",
            returnBegin: true,
            relevance: 0,
            contains: [hljs2.UNDERSCORE_TITLE_MODE]
          },
          {
            className: "type",
            begin: /</,
            end: />/,
            keywords: "reified",
            relevance: 0
          },
          {
            className: "params",
            begin: /\(/,
            end: /\)/,
            endsParent: true,
            keywords: KEYWORDS2,
            relevance: 0,
            contains: [
              {
                begin: /:/,
                end: /[=,\/]/,
                endsWithParent: true,
                contains: [
                  KOTLIN_PAREN_TYPE,
                  hljs2.C_LINE_COMMENT_MODE,
                  KOTLIN_NESTED_COMMENT
                ],
                relevance: 0
              },
              hljs2.C_LINE_COMMENT_MODE,
              KOTLIN_NESTED_COMMENT,
              ANNOTATION_USE_SITE,
              ANNOTATION,
              STRING,
              hljs2.C_NUMBER_MODE
            ]
          },
          KOTLIN_NESTED_COMMENT
        ]
      },
      {
        className: "class",
        beginKeywords: "class interface trait",
        end: /[:\{(]|$/,
        excludeEnd: true,
        illegal: "extends implements",
        contains: [
          {
            beginKeywords: "public protected internal private constructor"
          },
          hljs2.UNDERSCORE_TITLE_MODE,
          {
            className: "type",
            begin: /</,
            end: />/,
            excludeBegin: true,
            excludeEnd: true,
            relevance: 0
          },
          {
            className: "type",
            begin: /[,:]\s*/,
            end: /[<\(,]|$/,
            excludeBegin: true,
            returnEnd: true
          },
          ANNOTATION_USE_SITE,
          ANNOTATION
        ]
      },
      STRING,
      {
        className: "meta",
        begin: "^#!/usr/bin/env",
        end: "$",
        illegal: "\n"
      },
      KOTLIN_NUMBER_MODE
    ]
  };
}
var kotlin_1 = kotlin;
function lasso(hljs2) {
  const LASSO_IDENT_RE = "[a-zA-Z_][\\w.]*";
  const LASSO_ANGLE_RE = "<\\?(lasso(script)?|=)";
  const LASSO_CLOSE_RE = "\\]|\\?>";
  const LASSO_KEYWORDS = {
    $pattern: LASSO_IDENT_RE + "|&[lg]t;",
    literal: "true false none minimal full all void and or not bw nbw ew new cn ncn lt lte gt gte eq neq rx nrx ft",
    built_in: "array date decimal duration integer map pair string tag xml null boolean bytes keyword list locale queue set stack staticarray local var variable global data self inherited currentcapture givenblock",
    keyword: "cache database_names database_schemanames database_tablenames define_tag define_type email_batch encode_set html_comment handle handle_error header if inline iterate ljax_target link link_currentaction link_currentgroup link_currentrecord link_detail link_firstgroup link_firstrecord link_lastgroup link_lastrecord link_nextgroup link_nextrecord link_prevgroup link_prevrecord log loop namespace_using output_none portal private protect records referer referrer repeating resultset rows search_args search_arguments select sort_args sort_arguments thread_atomic value_list while abort case else fail_if fail_ifnot fail if_empty if_false if_null if_true loop_abort loop_continue loop_count params params_up return return_value run_children soap_definetag soap_lastrequest soap_lastresponse tag_name ascending average by define descending do equals frozen group handle_failure import in into join let match max min on order parent protected provide public require returnhome skip split_thread sum take thread to trait type where with yield yieldhome"
  };
  const HTML_COMMENT = hljs2.COMMENT("<!--", "-->", {
    relevance: 0
  });
  const LASSO_NOPROCESS = {
    className: "meta",
    begin: "\\[noprocess\\]",
    starts: {
      end: "\\[/noprocess\\]",
      returnEnd: true,
      contains: [HTML_COMMENT]
    }
  };
  const LASSO_START = {
    className: "meta",
    begin: "\\[/noprocess|" + LASSO_ANGLE_RE
  };
  const LASSO_DATAMEMBER = {
    className: "symbol",
    begin: "'" + LASSO_IDENT_RE + "'"
  };
  const LASSO_CODE = [
    hljs2.C_LINE_COMMENT_MODE,
    hljs2.C_BLOCK_COMMENT_MODE,
    hljs2.inherit(hljs2.C_NUMBER_MODE, {
      begin: hljs2.C_NUMBER_RE + "|(-?infinity|NaN)\\b"
    }),
    hljs2.inherit(hljs2.APOS_STRING_MODE, {
      illegal: null
    }),
    hljs2.inherit(hljs2.QUOTE_STRING_MODE, {
      illegal: null
    }),
    {
      className: "string",
      begin: "`",
      end: "`"
    },
    {
      variants: [
        {
          begin: "[#$]" + LASSO_IDENT_RE
        },
        {
          begin: "#",
          end: "\\d+",
          illegal: "\\W"
        }
      ]
    },
    {
      className: "type",
      begin: "::\\s*",
      end: LASSO_IDENT_RE,
      illegal: "\\W"
    },
    {
      className: "params",
      variants: [
        {
          begin: "-(?!infinity)" + LASSO_IDENT_RE,
          relevance: 0
        },
        {
          begin: "(\\.\\.\\.)"
        }
      ]
    },
    {
      begin: /(->|\.)\s*/,
      relevance: 0,
      contains: [LASSO_DATAMEMBER]
    },
    {
      className: "class",
      beginKeywords: "define",
      returnEnd: true,
      end: "\\(|=>",
      contains: [
        hljs2.inherit(hljs2.TITLE_MODE, {
          begin: LASSO_IDENT_RE + "(=(?!>))?|[-+*/%](?!>)"
        })
      ]
    }
  ];
  return {
    name: "Lasso",
    aliases: [
      "ls",
      "lassoscript"
    ],
    case_insensitive: true,
    keywords: LASSO_KEYWORDS,
    contains: [
      {
        className: "meta",
        begin: LASSO_CLOSE_RE,
        relevance: 0,
        starts: {
          end: "\\[|" + LASSO_ANGLE_RE,
          returnEnd: true,
          relevance: 0,
          contains: [HTML_COMMENT]
        }
      },
      LASSO_NOPROCESS,
      LASSO_START,
      {
        className: "meta",
        begin: "\\[no_square_brackets",
        starts: {
          end: "\\[/no_square_brackets\\]",
          keywords: LASSO_KEYWORDS,
          contains: [
            {
              className: "meta",
              begin: LASSO_CLOSE_RE,
              relevance: 0,
              starts: {
                end: "\\[noprocess\\]|" + LASSO_ANGLE_RE,
                returnEnd: true,
                contains: [HTML_COMMENT]
              }
            },
            LASSO_NOPROCESS,
            LASSO_START
          ].concat(LASSO_CODE)
        }
      },
      {
        className: "meta",
        begin: "\\[",
        relevance: 0
      },
      {
        className: "meta",
        begin: "^#!",
        end: "lasso9$",
        relevance: 10
      }
    ].concat(LASSO_CODE)
  };
}
var lasso_1 = lasso;
function source$c(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function either$6(...args) {
  const joined = "(" + args.map((x2) => source$c(x2)).join("|") + ")";
  return joined;
}
function latex(hljs2) {
  const KNOWN_CONTROL_WORDS = either$6(...[
    "(?:NeedsTeXFormat|RequirePackage|GetIdInfo)",
    "Provides(?:Expl)?(?:Package|Class|File)",
    "(?:DeclareOption|ProcessOptions)",
    "(?:documentclass|usepackage|input|include)",
    "makeat(?:letter|other)",
    "ExplSyntax(?:On|Off)",
    "(?:new|renew|provide)?command",
    "(?:re)newenvironment",
    "(?:New|Renew|Provide|Declare)(?:Expandable)?DocumentCommand",
    "(?:New|Renew|Provide|Declare)DocumentEnvironment",
    "(?:(?:e|g|x)?def|let)",
    "(?:begin|end)",
    "(?:part|chapter|(?:sub){0,2}section|(?:sub)?paragraph)",
    "caption",
    "(?:label|(?:eq|page|name)?ref|(?:paren|foot|super)?cite)",
    "(?:alpha|beta|[Gg]amma|[Dd]elta|(?:var)?epsilon|zeta|eta|[Tt]heta|vartheta)",
    "(?:iota|(?:var)?kappa|[Ll]ambda|mu|nu|[Xx]i|[Pp]i|varpi|(?:var)rho)",
    "(?:[Ss]igma|varsigma|tau|[Uu]psilon|[Pp]hi|varphi|chi|[Pp]si|[Oo]mega)",
    "(?:frac|sum|prod|lim|infty|times|sqrt|leq|geq|left|right|middle|[bB]igg?)",
    "(?:[lr]angle|q?quad|[lcvdi]?dots|d?dot|hat|tilde|bar)"
  ].map((word) => word + "(?![a-zA-Z@:_])"));
  const L3_REGEX = new RegExp([
    "(?:__)?[a-zA-Z]{2,}_[a-zA-Z](?:_?[a-zA-Z])+:[a-zA-Z]*",
    "[lgc]__?[a-zA-Z](?:_?[a-zA-Z])*_[a-zA-Z]{2,}",
    "[qs]__?[a-zA-Z](?:_?[a-zA-Z])+",
    "use(?:_i)?:[a-zA-Z]*",
    "(?:else|fi|or):",
    "(?:if|cs|exp):w",
    "(?:hbox|vbox):n",
    "::[a-zA-Z]_unbraced",
    "::[a-zA-Z:]"
  ].map((pattern) => pattern + "(?![a-zA-Z:_])").join("|"));
  const L2_VARIANTS = [
    {begin: /[a-zA-Z@]+/},
    {begin: /[^a-zA-Z@]?/}
  ];
  const DOUBLE_CARET_VARIANTS = [
    {begin: /\^{6}[0-9a-f]{6}/},
    {begin: /\^{5}[0-9a-f]{5}/},
    {begin: /\^{4}[0-9a-f]{4}/},
    {begin: /\^{3}[0-9a-f]{3}/},
    {begin: /\^{2}[0-9a-f]{2}/},
    {begin: /\^{2}[\u0000-\u007f]/}
  ];
  const CONTROL_SEQUENCE = {
    className: "keyword",
    begin: /\\/,
    relevance: 0,
    contains: [
      {
        endsParent: true,
        begin: KNOWN_CONTROL_WORDS
      },
      {
        endsParent: true,
        begin: L3_REGEX
      },
      {
        endsParent: true,
        variants: DOUBLE_CARET_VARIANTS
      },
      {
        endsParent: true,
        relevance: 0,
        variants: L2_VARIANTS
      }
    ]
  };
  const MACRO_PARAM = {
    className: "params",
    relevance: 0,
    begin: /#+\d?/
  };
  const DOUBLE_CARET_CHAR = {
    variants: DOUBLE_CARET_VARIANTS
  };
  const SPECIAL_CATCODE = {
    className: "built_in",
    relevance: 0,
    begin: /[$&^_]/
  };
  const MAGIC_COMMENT = {
    className: "meta",
    begin: "% !TeX",
    end: "$",
    relevance: 10
  };
  const COMMENT2 = hljs2.COMMENT("%", "$", {
    relevance: 0
  });
  const EVERYTHING_BUT_VERBATIM = [
    CONTROL_SEQUENCE,
    MACRO_PARAM,
    DOUBLE_CARET_CHAR,
    SPECIAL_CATCODE,
    MAGIC_COMMENT,
    COMMENT2
  ];
  const BRACE_GROUP_NO_VERBATIM = {
    begin: /\{/,
    end: /\}/,
    relevance: 0,
    contains: ["self", ...EVERYTHING_BUT_VERBATIM]
  };
  const ARGUMENT_BRACES = hljs2.inherit(BRACE_GROUP_NO_VERBATIM, {
    relevance: 0,
    endsParent: true,
    contains: [BRACE_GROUP_NO_VERBATIM, ...EVERYTHING_BUT_VERBATIM]
  });
  const ARGUMENT_BRACKETS = {
    begin: /\[/,
    end: /\]/,
    endsParent: true,
    relevance: 0,
    contains: [BRACE_GROUP_NO_VERBATIM, ...EVERYTHING_BUT_VERBATIM]
  };
  const SPACE_GOBBLER = {
    begin: /\s+/,
    relevance: 0
  };
  const ARGUMENT_M = [ARGUMENT_BRACES];
  const ARGUMENT_O = [ARGUMENT_BRACKETS];
  const ARGUMENT_AND_THEN = function(arg, starts_mode) {
    return {
      contains: [SPACE_GOBBLER],
      starts: {
        relevance: 0,
        contains: arg,
        starts: starts_mode
      }
    };
  };
  const CSNAME = function(csname, starts_mode) {
    return {
      begin: "\\\\" + csname + "(?![a-zA-Z@:_])",
      keywords: {$pattern: /\\[a-zA-Z]+/, keyword: "\\" + csname},
      relevance: 0,
      contains: [SPACE_GOBBLER],
      starts: starts_mode
    };
  };
  const BEGIN_ENV = function(envname, starts_mode) {
    return hljs2.inherit({
      begin: "\\\\begin(?=[ 	]*(\\r?\\n[ 	]*)?\\{" + envname + "\\})",
      keywords: {$pattern: /\\[a-zA-Z]+/, keyword: "\\begin"},
      relevance: 0
    }, ARGUMENT_AND_THEN(ARGUMENT_M, starts_mode));
  };
  const VERBATIM_DELIMITED_EQUAL = (innerName = "string") => {
    return hljs2.END_SAME_AS_BEGIN({
      className: innerName,
      begin: /(.|\r?\n)/,
      end: /(.|\r?\n)/,
      excludeBegin: true,
      excludeEnd: true,
      endsParent: true
    });
  };
  const VERBATIM_DELIMITED_ENV = function(envname) {
    return {
      className: "string",
      end: "(?=\\\\end\\{" + envname + "\\})"
    };
  };
  const VERBATIM_DELIMITED_BRACES = (innerName = "string") => {
    return {
      relevance: 0,
      begin: /\{/,
      starts: {
        endsParent: true,
        contains: [
          {
            className: innerName,
            end: /(?=\})/,
            endsParent: true,
            contains: [
              {
                begin: /\{/,
                end: /\}/,
                relevance: 0,
                contains: ["self"]
              }
            ]
          }
        ]
      }
    };
  };
  const VERBATIM = [
    ...["verb", "lstinline"].map((csname) => CSNAME(csname, {contains: [VERBATIM_DELIMITED_EQUAL()]})),
    CSNAME("mint", ARGUMENT_AND_THEN(ARGUMENT_M, {contains: [VERBATIM_DELIMITED_EQUAL()]})),
    CSNAME("mintinline", ARGUMENT_AND_THEN(ARGUMENT_M, {contains: [VERBATIM_DELIMITED_BRACES(), VERBATIM_DELIMITED_EQUAL()]})),
    CSNAME("url", {contains: [VERBATIM_DELIMITED_BRACES("link"), VERBATIM_DELIMITED_BRACES("link")]}),
    CSNAME("hyperref", {contains: [VERBATIM_DELIMITED_BRACES("link")]}),
    CSNAME("href", ARGUMENT_AND_THEN(ARGUMENT_O, {contains: [VERBATIM_DELIMITED_BRACES("link")]})),
    ...[].concat(...["", "\\*"].map((suffix) => [
      BEGIN_ENV("verbatim" + suffix, VERBATIM_DELIMITED_ENV("verbatim" + suffix)),
      BEGIN_ENV("filecontents" + suffix, ARGUMENT_AND_THEN(ARGUMENT_M, VERBATIM_DELIMITED_ENV("filecontents" + suffix))),
      ...["", "B", "L"].map((prefix) => BEGIN_ENV(prefix + "Verbatim" + suffix, ARGUMENT_AND_THEN(ARGUMENT_O, VERBATIM_DELIMITED_ENV(prefix + "Verbatim" + suffix))))
    ])),
    BEGIN_ENV("minted", ARGUMENT_AND_THEN(ARGUMENT_O, ARGUMENT_AND_THEN(ARGUMENT_M, VERBATIM_DELIMITED_ENV("minted"))))
  ];
  return {
    name: "LaTeX",
    aliases: ["tex"],
    contains: [
      ...VERBATIM,
      ...EVERYTHING_BUT_VERBATIM
    ]
  };
}
var latex_1 = latex;
function ldif(hljs2) {
  return {
    name: "LDIF",
    contains: [
      {
        className: "attribute",
        begin: "^dn",
        end: ": ",
        excludeEnd: true,
        starts: {
          end: "$",
          relevance: 0
        },
        relevance: 10
      },
      {
        className: "attribute",
        begin: "^\\w",
        end: ": ",
        excludeEnd: true,
        starts: {
          end: "$",
          relevance: 0
        }
      },
      {
        className: "literal",
        begin: "^-",
        end: "$"
      },
      hljs2.HASH_COMMENT_MODE
    ]
  };
}
var ldif_1 = ldif;
function leaf(hljs2) {
  return {
    name: "Leaf",
    contains: [
      {
        className: "function",
        begin: "#+[A-Za-z_0-9]*\\(",
        end: / \{/,
        returnBegin: true,
        excludeEnd: true,
        contains: [
          {
            className: "keyword",
            begin: "#+"
          },
          {
            className: "title",
            begin: "[A-Za-z_][A-Za-z_0-9]*"
          },
          {
            className: "params",
            begin: "\\(",
            end: "\\)",
            endsParent: true,
            contains: [
              {
                className: "string",
                begin: '"',
                end: '"'
              },
              {
                className: "variable",
                begin: "[A-Za-z_][A-Za-z_0-9]*"
              }
            ]
          }
        ]
      }
    ]
  };
}
var leaf_1 = leaf;
const MODES$2 = (hljs2) => {
  return {
    IMPORTANT: {
      className: "meta",
      begin: "!important"
    },
    HEXCOLOR: {
      className: "number",
      begin: "#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})"
    },
    ATTRIBUTE_SELECTOR_MODE: {
      className: "selector-attr",
      begin: /\[/,
      end: /\]/,
      illegal: "$",
      contains: [
        hljs2.APOS_STRING_MODE,
        hljs2.QUOTE_STRING_MODE
      ]
    }
  };
};
const TAGS$2 = [
  "a",
  "abbr",
  "address",
  "article",
  "aside",
  "audio",
  "b",
  "blockquote",
  "body",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "dd",
  "del",
  "details",
  "dfn",
  "div",
  "dl",
  "dt",
  "em",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "header",
  "hgroup",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "label",
  "legend",
  "li",
  "main",
  "mark",
  "menu",
  "nav",
  "object",
  "ol",
  "p",
  "q",
  "quote",
  "samp",
  "section",
  "span",
  "strong",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "tr",
  "ul",
  "var",
  "video"
];
const MEDIA_FEATURES$2 = [
  "any-hover",
  "any-pointer",
  "aspect-ratio",
  "color",
  "color-gamut",
  "color-index",
  "device-aspect-ratio",
  "device-height",
  "device-width",
  "display-mode",
  "forced-colors",
  "grid",
  "height",
  "hover",
  "inverted-colors",
  "monochrome",
  "orientation",
  "overflow-block",
  "overflow-inline",
  "pointer",
  "prefers-color-scheme",
  "prefers-contrast",
  "prefers-reduced-motion",
  "prefers-reduced-transparency",
  "resolution",
  "scan",
  "scripting",
  "update",
  "width",
  "min-width",
  "max-width",
  "min-height",
  "max-height"
];
const PSEUDO_CLASSES$2 = [
  "active",
  "any-link",
  "blank",
  "checked",
  "current",
  "default",
  "defined",
  "dir",
  "disabled",
  "drop",
  "empty",
  "enabled",
  "first",
  "first-child",
  "first-of-type",
  "fullscreen",
  "future",
  "focus",
  "focus-visible",
  "focus-within",
  "has",
  "host",
  "host-context",
  "hover",
  "indeterminate",
  "in-range",
  "invalid",
  "is",
  "lang",
  "last-child",
  "last-of-type",
  "left",
  "link",
  "local-link",
  "not",
  "nth-child",
  "nth-col",
  "nth-last-child",
  "nth-last-col",
  "nth-last-of-type",
  "nth-of-type",
  "only-child",
  "only-of-type",
  "optional",
  "out-of-range",
  "past",
  "placeholder-shown",
  "read-only",
  "read-write",
  "required",
  "right",
  "root",
  "scope",
  "target",
  "target-within",
  "user-invalid",
  "valid",
  "visited",
  "where"
];
const PSEUDO_ELEMENTS$2 = [
  "after",
  "backdrop",
  "before",
  "cue",
  "cue-region",
  "first-letter",
  "first-line",
  "grammar-error",
  "marker",
  "part",
  "placeholder",
  "selection",
  "slotted",
  "spelling-error"
];
const ATTRIBUTES$2 = [
  "align-content",
  "align-items",
  "align-self",
  "animation",
  "animation-delay",
  "animation-direction",
  "animation-duration",
  "animation-fill-mode",
  "animation-iteration-count",
  "animation-name",
  "animation-play-state",
  "animation-timing-function",
  "auto",
  "backface-visibility",
  "background",
  "background-attachment",
  "background-clip",
  "background-color",
  "background-image",
  "background-origin",
  "background-position",
  "background-repeat",
  "background-size",
  "border",
  "border-bottom",
  "border-bottom-color",
  "border-bottom-left-radius",
  "border-bottom-right-radius",
  "border-bottom-style",
  "border-bottom-width",
  "border-collapse",
  "border-color",
  "border-image",
  "border-image-outset",
  "border-image-repeat",
  "border-image-slice",
  "border-image-source",
  "border-image-width",
  "border-left",
  "border-left-color",
  "border-left-style",
  "border-left-width",
  "border-radius",
  "border-right",
  "border-right-color",
  "border-right-style",
  "border-right-width",
  "border-spacing",
  "border-style",
  "border-top",
  "border-top-color",
  "border-top-left-radius",
  "border-top-right-radius",
  "border-top-style",
  "border-top-width",
  "border-width",
  "bottom",
  "box-decoration-break",
  "box-shadow",
  "box-sizing",
  "break-after",
  "break-before",
  "break-inside",
  "caption-side",
  "clear",
  "clip",
  "clip-path",
  "color",
  "column-count",
  "column-fill",
  "column-gap",
  "column-rule",
  "column-rule-color",
  "column-rule-style",
  "column-rule-width",
  "column-span",
  "column-width",
  "columns",
  "content",
  "counter-increment",
  "counter-reset",
  "cursor",
  "direction",
  "display",
  "empty-cells",
  "filter",
  "flex",
  "flex-basis",
  "flex-direction",
  "flex-flow",
  "flex-grow",
  "flex-shrink",
  "flex-wrap",
  "float",
  "font",
  "font-display",
  "font-family",
  "font-feature-settings",
  "font-kerning",
  "font-language-override",
  "font-size",
  "font-size-adjust",
  "font-smoothing",
  "font-stretch",
  "font-style",
  "font-variant",
  "font-variant-ligatures",
  "font-variation-settings",
  "font-weight",
  "height",
  "hyphens",
  "icon",
  "image-orientation",
  "image-rendering",
  "image-resolution",
  "ime-mode",
  "inherit",
  "initial",
  "justify-content",
  "left",
  "letter-spacing",
  "line-height",
  "list-style",
  "list-style-image",
  "list-style-position",
  "list-style-type",
  "margin",
  "margin-bottom",
  "margin-left",
  "margin-right",
  "margin-top",
  "marks",
  "mask",
  "max-height",
  "max-width",
  "min-height",
  "min-width",
  "nav-down",
  "nav-index",
  "nav-left",
  "nav-right",
  "nav-up",
  "none",
  "normal",
  "object-fit",
  "object-position",
  "opacity",
  "order",
  "orphans",
  "outline",
  "outline-color",
  "outline-offset",
  "outline-style",
  "outline-width",
  "overflow",
  "overflow-wrap",
  "overflow-x",
  "overflow-y",
  "padding",
  "padding-bottom",
  "padding-left",
  "padding-right",
  "padding-top",
  "page-break-after",
  "page-break-before",
  "page-break-inside",
  "perspective",
  "perspective-origin",
  "pointer-events",
  "position",
  "quotes",
  "resize",
  "right",
  "src",
  "tab-size",
  "table-layout",
  "text-align",
  "text-align-last",
  "text-decoration",
  "text-decoration-color",
  "text-decoration-line",
  "text-decoration-style",
  "text-indent",
  "text-overflow",
  "text-rendering",
  "text-shadow",
  "text-transform",
  "text-underline-position",
  "top",
  "transform",
  "transform-origin",
  "transform-style",
  "transition",
  "transition-delay",
  "transition-duration",
  "transition-property",
  "transition-timing-function",
  "unicode-bidi",
  "vertical-align",
  "visibility",
  "white-space",
  "widows",
  "width",
  "word-break",
  "word-spacing",
  "word-wrap",
  "z-index"
].reverse();
const PSEUDO_SELECTORS = PSEUDO_CLASSES$2.concat(PSEUDO_ELEMENTS$2);
function less(hljs2) {
  const modes = MODES$2(hljs2);
  const PSEUDO_SELECTORS$1 = PSEUDO_SELECTORS;
  const AT_MODIFIERS = "and or not only";
  const IDENT_RE2 = "[\\w-]+";
  const INTERP_IDENT_RE = "(" + IDENT_RE2 + "|@\\{" + IDENT_RE2 + "\\})";
  const RULES = [];
  const VALUE_MODES = [];
  const STRING_MODE = function(c2) {
    return {
      className: "string",
      begin: "~?" + c2 + ".*?" + c2
    };
  };
  const IDENT_MODE = function(name2, begin, relevance) {
    return {
      className: name2,
      begin,
      relevance
    };
  };
  const AT_KEYWORDS = {
    $pattern: /[a-z-]+/,
    keyword: AT_MODIFIERS,
    attribute: MEDIA_FEATURES$2.join(" ")
  };
  const PARENS_MODE = {
    begin: "\\(",
    end: "\\)",
    contains: VALUE_MODES,
    keywords: AT_KEYWORDS,
    relevance: 0
  };
  VALUE_MODES.push(hljs2.C_LINE_COMMENT_MODE, hljs2.C_BLOCK_COMMENT_MODE, STRING_MODE("'"), STRING_MODE('"'), hljs2.CSS_NUMBER_MODE, {
    begin: "(url|data-uri)\\(",
    starts: {
      className: "string",
      end: "[\\)\\n]",
      excludeEnd: true
    }
  }, modes.HEXCOLOR, PARENS_MODE, IDENT_MODE("variable", "@@?" + IDENT_RE2, 10), IDENT_MODE("variable", "@\\{" + IDENT_RE2 + "\\}"), IDENT_MODE("built_in", "~?`[^`]*?`"), {
    className: "attribute",
    begin: IDENT_RE2 + "\\s*:",
    end: ":",
    returnBegin: true,
    excludeEnd: true
  }, modes.IMPORTANT);
  const VALUE_WITH_RULESETS = VALUE_MODES.concat({
    begin: /\{/,
    end: /\}/,
    contains: RULES
  });
  const MIXIN_GUARD_MODE = {
    beginKeywords: "when",
    endsWithParent: true,
    contains: [
      {
        beginKeywords: "and not"
      }
    ].concat(VALUE_MODES)
  };
  const RULE_MODE = {
    begin: INTERP_IDENT_RE + "\\s*:",
    returnBegin: true,
    end: /[;}]/,
    relevance: 0,
    contains: [
      {
        begin: /-(webkit|moz|ms|o)-/
      },
      {
        className: "attribute",
        begin: "\\b(" + ATTRIBUTES$2.join("|") + ")\\b",
        end: /(?=:)/,
        starts: {
          endsWithParent: true,
          illegal: "[<=$]",
          relevance: 0,
          contains: VALUE_MODES
        }
      }
    ]
  };
  const AT_RULE_MODE = {
    className: "keyword",
    begin: "@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\b",
    starts: {
      end: "[;{}]",
      keywords: AT_KEYWORDS,
      returnEnd: true,
      contains: VALUE_MODES,
      relevance: 0
    }
  };
  const VAR_RULE_MODE = {
    className: "variable",
    variants: [
      {
        begin: "@" + IDENT_RE2 + "\\s*:",
        relevance: 15
      },
      {
        begin: "@" + IDENT_RE2
      }
    ],
    starts: {
      end: "[;}]",
      returnEnd: true,
      contains: VALUE_WITH_RULESETS
    }
  };
  const SELECTOR_MODE = {
    variants: [
      {
        begin: "[\\.#:&\\[>]",
        end: "[;{}]"
      },
      {
        begin: INTERP_IDENT_RE,
        end: /\{/
      }
    ],
    returnBegin: true,
    returnEnd: true,
    illegal: `[<='$"]`,
    relevance: 0,
    contains: [
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      MIXIN_GUARD_MODE,
      IDENT_MODE("keyword", "all\\b"),
      IDENT_MODE("variable", "@\\{" + IDENT_RE2 + "\\}"),
      {
        begin: "\\b(" + TAGS$2.join("|") + ")\\b",
        className: "selector-tag"
      },
      IDENT_MODE("selector-tag", INTERP_IDENT_RE + "%?", 0),
      IDENT_MODE("selector-id", "#" + INTERP_IDENT_RE),
      IDENT_MODE("selector-class", "\\." + INTERP_IDENT_RE, 0),
      IDENT_MODE("selector-tag", "&", 0),
      modes.ATTRIBUTE_SELECTOR_MODE,
      {
        className: "selector-pseudo",
        begin: ":(" + PSEUDO_CLASSES$2.join("|") + ")"
      },
      {
        className: "selector-pseudo",
        begin: "::(" + PSEUDO_ELEMENTS$2.join("|") + ")"
      },
      {
        begin: "\\(",
        end: "\\)",
        contains: VALUE_WITH_RULESETS
      },
      {
        begin: "!important"
      }
    ]
  };
  const PSEUDO_SELECTOR_MODE = {
    begin: IDENT_RE2 + `:(:)?(${PSEUDO_SELECTORS$1.join("|")})`,
    returnBegin: true,
    contains: [SELECTOR_MODE]
  };
  RULES.push(hljs2.C_LINE_COMMENT_MODE, hljs2.C_BLOCK_COMMENT_MODE, AT_RULE_MODE, VAR_RULE_MODE, PSEUDO_SELECTOR_MODE, RULE_MODE, SELECTOR_MODE);
  return {
    name: "Less",
    case_insensitive: true,
    illegal: `[=>'/<($"]`,
    contains: RULES
  };
}
var less_1 = less;
function lisp(hljs2) {
  var LISP_IDENT_RE = "[a-zA-Z_\\-+\\*\\/<=>&#][a-zA-Z0-9_\\-+*\\/<=>&#!]*";
  var MEC_RE = "\\|[^]*?\\|";
  var LISP_SIMPLE_NUMBER_RE = "(-|\\+)?\\d+(\\.\\d+|\\/\\d+)?((d|e|f|l|s|D|E|F|L|S)(\\+|-)?\\d+)?";
  var LITERAL = {
    className: "literal",
    begin: "\\b(t{1}|nil)\\b"
  };
  var NUMBER = {
    className: "number",
    variants: [
      {begin: LISP_SIMPLE_NUMBER_RE, relevance: 0},
      {begin: "#(b|B)[0-1]+(/[0-1]+)?"},
      {begin: "#(o|O)[0-7]+(/[0-7]+)?"},
      {begin: "#(x|X)[0-9a-fA-F]+(/[0-9a-fA-F]+)?"},
      {begin: "#(c|C)\\(" + LISP_SIMPLE_NUMBER_RE + " +" + LISP_SIMPLE_NUMBER_RE, end: "\\)"}
    ]
  };
  var STRING = hljs2.inherit(hljs2.QUOTE_STRING_MODE, {illegal: null});
  var COMMENT2 = hljs2.COMMENT(";", "$", {
    relevance: 0
  });
  var VARIABLE = {
    begin: "\\*",
    end: "\\*"
  };
  var KEYWORD = {
    className: "symbol",
    begin: "[:&]" + LISP_IDENT_RE
  };
  var IDENT = {
    begin: LISP_IDENT_RE,
    relevance: 0
  };
  var MEC = {
    begin: MEC_RE
  };
  var QUOTED_LIST = {
    begin: "\\(",
    end: "\\)",
    contains: ["self", LITERAL, STRING, NUMBER, IDENT]
  };
  var QUOTED = {
    contains: [NUMBER, STRING, VARIABLE, KEYWORD, QUOTED_LIST, IDENT],
    variants: [
      {
        begin: "['`]\\(",
        end: "\\)"
      },
      {
        begin: "\\(quote ",
        end: "\\)",
        keywords: {name: "quote"}
      },
      {
        begin: "'" + MEC_RE
      }
    ]
  };
  var QUOTED_ATOM = {
    variants: [
      {begin: "'" + LISP_IDENT_RE},
      {begin: "#'" + LISP_IDENT_RE + "(::" + LISP_IDENT_RE + ")*"}
    ]
  };
  var LIST = {
    begin: "\\(\\s*",
    end: "\\)"
  };
  var BODY = {
    endsWithParent: true,
    relevance: 0
  };
  LIST.contains = [
    {
      className: "name",
      variants: [
        {
          begin: LISP_IDENT_RE,
          relevance: 0
        },
        {begin: MEC_RE}
      ]
    },
    BODY
  ];
  BODY.contains = [QUOTED, QUOTED_ATOM, LIST, LITERAL, NUMBER, STRING, COMMENT2, VARIABLE, KEYWORD, MEC, IDENT];
  return {
    name: "Lisp",
    illegal: /\S/,
    contains: [
      NUMBER,
      hljs2.SHEBANG(),
      LITERAL,
      STRING,
      COMMENT2,
      QUOTED,
      QUOTED_ATOM,
      LIST,
      IDENT
    ]
  };
}
var lisp_1 = lisp;
function livecodeserver(hljs2) {
  const VARIABLE = {
    className: "variable",
    variants: [
      {
        begin: "\\b([gtps][A-Z]{1}[a-zA-Z0-9]*)(\\[.+\\])?(?:\\s*?)"
      },
      {
        begin: "\\$_[A-Z]+"
      }
    ],
    relevance: 0
  };
  const COMMENT_MODES = [
    hljs2.C_BLOCK_COMMENT_MODE,
    hljs2.HASH_COMMENT_MODE,
    hljs2.COMMENT("--", "$"),
    hljs2.COMMENT("[^:]//", "$")
  ];
  const TITLE1 = hljs2.inherit(hljs2.TITLE_MODE, {
    variants: [
      {
        begin: "\\b_*rig[A-Z][A-Za-z0-9_\\-]*"
      },
      {
        begin: "\\b_[a-z0-9\\-]+"
      }
    ]
  });
  const TITLE2 = hljs2.inherit(hljs2.TITLE_MODE, {
    begin: "\\b([A-Za-z0-9_\\-]+)\\b"
  });
  return {
    name: "LiveCode",
    case_insensitive: false,
    keywords: {
      keyword: "$_COOKIE $_FILES $_GET $_GET_BINARY $_GET_RAW $_POST $_POST_BINARY $_POST_RAW $_SESSION $_SERVER codepoint codepoints segment segments codeunit codeunits sentence sentences trueWord trueWords paragraph after byte bytes english the until http forever descending using line real8 with seventh for stdout finally element word words fourth before black ninth sixth characters chars stderr uInt1 uInt1s uInt2 uInt2s stdin string lines relative rel any fifth items from middle mid at else of catch then third it file milliseconds seconds second secs sec int1 int1s int4 int4s internet int2 int2s normal text item last long detailed effective uInt4 uInt4s repeat end repeat URL in try into switch to words https token binfile each tenth as ticks tick system real4 by dateItems without char character ascending eighth whole dateTime numeric short first ftp integer abbreviated abbr abbrev private case while if div mod wrap and or bitAnd bitNot bitOr bitXor among not in a an within contains ends with begins the keys of keys",
      literal: "SIX TEN FORMFEED NINE ZERO NONE SPACE FOUR FALSE COLON CRLF PI COMMA ENDOFFILE EOF EIGHT FIVE QUOTE EMPTY ONE TRUE RETURN CR LINEFEED RIGHT BACKSLASH NULL SEVEN TAB THREE TWO six ten formfeed nine zero none space four false colon crlf pi comma endoffile eof eight five quote empty one true return cr linefeed right backslash null seven tab three two RIVERSION RISTATE FILE_READ_MODE FILE_WRITE_MODE FILE_WRITE_MODE DIR_WRITE_MODE FILE_READ_UMASK FILE_WRITE_UMASK DIR_READ_UMASK DIR_WRITE_UMASK",
      built_in: "put abs acos aliasReference annuity arrayDecode arrayEncode asin atan atan2 average avg avgDev base64Decode base64Encode baseConvert binaryDecode binaryEncode byteOffset byteToNum cachedURL cachedURLs charToNum cipherNames codepointOffset codepointProperty codepointToNum codeunitOffset commandNames compound compress constantNames cos date dateFormat decompress difference directories diskSpace DNSServers exp exp1 exp2 exp10 extents files flushEvents folders format functionNames geometricMean global globals hasMemory harmonicMean hostAddress hostAddressToName hostName hostNameToAddress isNumber ISOToMac itemOffset keys len length libURLErrorData libUrlFormData libURLftpCommand libURLLastHTTPHeaders libURLLastRHHeaders libUrlMultipartFormAddPart libUrlMultipartFormData libURLVersion lineOffset ln ln1 localNames log log2 log10 longFilePath lower macToISO matchChunk matchText matrixMultiply max md5Digest median merge messageAuthenticationCode messageDigest millisec millisecs millisecond milliseconds min monthNames nativeCharToNum normalizeText num number numToByte numToChar numToCodepoint numToNativeChar offset open openfiles openProcesses openProcessIDs openSockets paragraphOffset paramCount param params peerAddress pendingMessages platform popStdDev populationStandardDeviation populationVariance popVariance processID random randomBytes replaceText result revCreateXMLTree revCreateXMLTreeFromFile revCurrentRecord revCurrentRecordIsFirst revCurrentRecordIsLast revDatabaseColumnCount revDatabaseColumnIsNull revDatabaseColumnLengths revDatabaseColumnNames revDatabaseColumnNamed revDatabaseColumnNumbered revDatabaseColumnTypes revDatabaseConnectResult revDatabaseCursors revDatabaseID revDatabaseTableNames revDatabaseType revDataFromQuery revdb_closeCursor revdb_columnbynumber revdb_columncount revdb_columnisnull revdb_columnlengths revdb_columnnames revdb_columntypes revdb_commit revdb_connect revdb_connections revdb_connectionerr revdb_currentrecord revdb_cursorconnection revdb_cursorerr revdb_cursors revdb_dbtype revdb_disconnect revdb_execute revdb_iseof revdb_isbof revdb_movefirst revdb_movelast revdb_movenext revdb_moveprev revdb_query revdb_querylist revdb_recordcount revdb_rollback revdb_tablenames revGetDatabaseDriverPath revNumberOfRecords revOpenDatabase revOpenDatabases revQueryDatabase revQueryDatabaseBlob revQueryResult revQueryIsAtStart revQueryIsAtEnd revUnixFromMacPath revXMLAttribute revXMLAttributes revXMLAttributeValues revXMLChildContents revXMLChildNames revXMLCreateTreeFromFileWithNamespaces revXMLCreateTreeWithNamespaces revXMLDataFromXPathQuery revXMLEvaluateXPath revXMLFirstChild revXMLMatchingNode revXMLNextSibling revXMLNodeContents revXMLNumberOfChildren revXMLParent revXMLPreviousSibling revXMLRootNode revXMLRPC_CreateRequest revXMLRPC_Documents revXMLRPC_Error revXMLRPC_GetHost revXMLRPC_GetMethod revXMLRPC_GetParam revXMLText revXMLRPC_Execute revXMLRPC_GetParamCount revXMLRPC_GetParamNode revXMLRPC_GetParamType revXMLRPC_GetPath revXMLRPC_GetPort revXMLRPC_GetProtocol revXMLRPC_GetRequest revXMLRPC_GetResponse revXMLRPC_GetSocket revXMLTree revXMLTrees revXMLValidateDTD revZipDescribeItem revZipEnumerateItems revZipOpenArchives round sampVariance sec secs seconds sentenceOffset sha1Digest shell shortFilePath sin specialFolderPath sqrt standardDeviation statRound stdDev sum sysError systemVersion tan tempName textDecode textEncode tick ticks time to tokenOffset toLower toUpper transpose truewordOffset trunc uniDecode uniEncode upper URLDecode URLEncode URLStatus uuid value variableNames variance version waitDepth weekdayNames wordOffset xsltApplyStylesheet xsltApplyStylesheetFromFile xsltLoadStylesheet xsltLoadStylesheetFromFile add breakpoint cancel clear local variable file word line folder directory URL close socket process combine constant convert create new alias folder directory decrypt delete variable word line folder directory URL dispatch divide do encrypt filter get include intersect kill libURLDownloadToFile libURLFollowHttpRedirects libURLftpUpload libURLftpUploadFile libURLresetAll libUrlSetAuthCallback libURLSetDriver libURLSetCustomHTTPHeaders libUrlSetExpect100 libURLSetFTPListCommand libURLSetFTPMode libURLSetFTPStopTime libURLSetStatusCallback load extension loadedExtensions multiply socket prepare process post seek rel relative read from process rename replace require resetAll resolve revAddXMLNode revAppendXML revCloseCursor revCloseDatabase revCommitDatabase revCopyFile revCopyFolder revCopyXMLNode revDeleteFolder revDeleteXMLNode revDeleteAllXMLTrees revDeleteXMLTree revExecuteSQL revGoURL revInsertXMLNode revMoveFolder revMoveToFirstRecord revMoveToLastRecord revMoveToNextRecord revMoveToPreviousRecord revMoveToRecord revMoveXMLNode revPutIntoXMLNode revRollBackDatabase revSetDatabaseDriverPath revSetXMLAttribute revXMLRPC_AddParam revXMLRPC_DeleteAllDocuments revXMLAddDTD revXMLRPC_Free revXMLRPC_FreeAll revXMLRPC_DeleteDocument revXMLRPC_DeleteParam revXMLRPC_SetHost revXMLRPC_SetMethod revXMLRPC_SetPort revXMLRPC_SetProtocol revXMLRPC_SetSocket revZipAddItemWithData revZipAddItemWithFile revZipAddUncompressedItemWithData revZipAddUncompressedItemWithFile revZipCancel revZipCloseArchive revZipDeleteItem revZipExtractItemToFile revZipExtractItemToVariable revZipSetProgressCallback revZipRenameItem revZipReplaceItemWithData revZipReplaceItemWithFile revZipOpenArchive send set sort split start stop subtract symmetric union unload vectorDotProduct wait write"
    },
    contains: [
      VARIABLE,
      {
        className: "keyword",
        begin: "\\bend\\sif\\b"
      },
      {
        className: "function",
        beginKeywords: "function",
        end: "$",
        contains: [
          VARIABLE,
          TITLE2,
          hljs2.APOS_STRING_MODE,
          hljs2.QUOTE_STRING_MODE,
          hljs2.BINARY_NUMBER_MODE,
          hljs2.C_NUMBER_MODE,
          TITLE1
        ]
      },
      {
        className: "function",
        begin: "\\bend\\s+",
        end: "$",
        keywords: "end",
        contains: [
          TITLE2,
          TITLE1
        ],
        relevance: 0
      },
      {
        beginKeywords: "command on",
        end: "$",
        contains: [
          VARIABLE,
          TITLE2,
          hljs2.APOS_STRING_MODE,
          hljs2.QUOTE_STRING_MODE,
          hljs2.BINARY_NUMBER_MODE,
          hljs2.C_NUMBER_MODE,
          TITLE1
        ]
      },
      {
        className: "meta",
        variants: [
          {
            begin: "<\\?(rev|lc|livecode)",
            relevance: 10
          },
          {
            begin: "<\\?"
          },
          {
            begin: "\\?>"
          }
        ]
      },
      hljs2.APOS_STRING_MODE,
      hljs2.QUOTE_STRING_MODE,
      hljs2.BINARY_NUMBER_MODE,
      hljs2.C_NUMBER_MODE,
      TITLE1
    ].concat(COMMENT_MODES),
    illegal: ";$|^\\[|^=|&|\\{"
  };
}
var livecodeserver_1 = livecodeserver;
const KEYWORDS$1 = [
  "as",
  "in",
  "of",
  "if",
  "for",
  "while",
  "finally",
  "var",
  "new",
  "function",
  "do",
  "return",
  "void",
  "else",
  "break",
  "catch",
  "instanceof",
  "with",
  "throw",
  "case",
  "default",
  "try",
  "switch",
  "continue",
  "typeof",
  "delete",
  "let",
  "yield",
  "const",
  "class",
  "debugger",
  "async",
  "await",
  "static",
  "import",
  "from",
  "export",
  "extends"
];
const LITERALS$1 = [
  "true",
  "false",
  "null",
  "undefined",
  "NaN",
  "Infinity"
];
const TYPES$1 = [
  "Intl",
  "DataView",
  "Number",
  "Math",
  "Date",
  "String",
  "RegExp",
  "Object",
  "Function",
  "Boolean",
  "Error",
  "Symbol",
  "Set",
  "Map",
  "WeakSet",
  "WeakMap",
  "Proxy",
  "Reflect",
  "JSON",
  "Promise",
  "Float64Array",
  "Int16Array",
  "Int32Array",
  "Int8Array",
  "Uint16Array",
  "Uint32Array",
  "Float32Array",
  "Array",
  "Uint8Array",
  "Uint8ClampedArray",
  "ArrayBuffer",
  "BigInt64Array",
  "BigUint64Array",
  "BigInt"
];
const ERROR_TYPES$1 = [
  "EvalError",
  "InternalError",
  "RangeError",
  "ReferenceError",
  "SyntaxError",
  "TypeError",
  "URIError"
];
const BUILT_IN_GLOBALS$1 = [
  "setInterval",
  "setTimeout",
  "clearInterval",
  "clearTimeout",
  "require",
  "exports",
  "eval",
  "isFinite",
  "isNaN",
  "parseFloat",
  "parseInt",
  "decodeURI",
  "decodeURIComponent",
  "encodeURI",
  "encodeURIComponent",
  "escape",
  "unescape"
];
const BUILT_IN_VARIABLES$1 = [
  "arguments",
  "this",
  "super",
  "console",
  "window",
  "document",
  "localStorage",
  "module",
  "global"
];
const BUILT_INS$1 = [].concat(BUILT_IN_GLOBALS$1, BUILT_IN_VARIABLES$1, TYPES$1, ERROR_TYPES$1);
function livescript(hljs2) {
  const LIVESCRIPT_BUILT_INS = [
    "npm",
    "print"
  ];
  const LIVESCRIPT_LITERALS = [
    "yes",
    "no",
    "on",
    "off",
    "it",
    "that",
    "void"
  ];
  const LIVESCRIPT_KEYWORDS = [
    "then",
    "unless",
    "until",
    "loop",
    "of",
    "by",
    "when",
    "and",
    "or",
    "is",
    "isnt",
    "not",
    "it",
    "that",
    "otherwise",
    "from",
    "to",
    "til",
    "fallthrough",
    "case",
    "enum",
    "native",
    "list",
    "map",
    "__hasProp",
    "__extends",
    "__slice",
    "__bind",
    "__indexOf"
  ];
  const KEYWORDS$1$1 = {
    keyword: KEYWORDS$1.concat(LIVESCRIPT_KEYWORDS),
    literal: LITERALS$1.concat(LIVESCRIPT_LITERALS),
    built_in: BUILT_INS$1.concat(LIVESCRIPT_BUILT_INS)
  };
  const JS_IDENT_RE = "[A-Za-z$_](?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*";
  const TITLE = hljs2.inherit(hljs2.TITLE_MODE, {
    begin: JS_IDENT_RE
  });
  const SUBST = {
    className: "subst",
    begin: /#\{/,
    end: /\}/,
    keywords: KEYWORDS$1$1
  };
  const SUBST_SIMPLE = {
    className: "subst",
    begin: /#[A-Za-z$_]/,
    end: /(?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*/,
    keywords: KEYWORDS$1$1
  };
  const EXPRESSIONS = [
    hljs2.BINARY_NUMBER_MODE,
    {
      className: "number",
      begin: "(\\b0[xX][a-fA-F0-9_]+)|(\\b\\d(\\d|_\\d)*(\\.(\\d(\\d|_\\d)*)?)?(_*[eE]([-+]\\d(_\\d|\\d)*)?)?[_a-z]*)",
      relevance: 0,
      starts: {
        end: "(\\s*/)?",
        relevance: 0
      }
    },
    {
      className: "string",
      variants: [
        {
          begin: /'''/,
          end: /'''/,
          contains: [hljs2.BACKSLASH_ESCAPE]
        },
        {
          begin: /'/,
          end: /'/,
          contains: [hljs2.BACKSLASH_ESCAPE]
        },
        {
          begin: /"""/,
          end: /"""/,
          contains: [
            hljs2.BACKSLASH_ESCAPE,
            SUBST,
            SUBST_SIMPLE
          ]
        },
        {
          begin: /"/,
          end: /"/,
          contains: [
            hljs2.BACKSLASH_ESCAPE,
            SUBST,
            SUBST_SIMPLE
          ]
        },
        {
          begin: /\\/,
          end: /(\s|$)/,
          excludeEnd: true
        }
      ]
    },
    {
      className: "regexp",
      variants: [
        {
          begin: "//",
          end: "//[gim]*",
          contains: [
            SUBST,
            hljs2.HASH_COMMENT_MODE
          ]
        },
        {
          begin: /\/(?![ *])(\\.|[^\\\n])*?\/[gim]*(?=\W)/
        }
      ]
    },
    {
      begin: "@" + JS_IDENT_RE
    },
    {
      begin: "``",
      end: "``",
      excludeBegin: true,
      excludeEnd: true,
      subLanguage: "javascript"
    }
  ];
  SUBST.contains = EXPRESSIONS;
  const PARAMS = {
    className: "params",
    begin: "\\(",
    returnBegin: true,
    contains: [
      {
        begin: /\(/,
        end: /\)/,
        keywords: KEYWORDS$1$1,
        contains: ["self"].concat(EXPRESSIONS)
      }
    ]
  };
  const SYMBOLS = {
    begin: "(#=>|=>|\\|>>|-?->|!->)"
  };
  return {
    name: "LiveScript",
    aliases: ["ls"],
    keywords: KEYWORDS$1$1,
    illegal: /\/\*/,
    contains: EXPRESSIONS.concat([
      hljs2.COMMENT("\\/\\*", "\\*\\/"),
      hljs2.HASH_COMMENT_MODE,
      SYMBOLS,
      {
        className: "function",
        contains: [
          TITLE,
          PARAMS
        ],
        returnBegin: true,
        variants: [
          {
            begin: "(" + JS_IDENT_RE + "\\s*(?:=|:=)\\s*)?(\\(.*\\)\\s*)?\\B->\\*?",
            end: "->\\*?"
          },
          {
            begin: "(" + JS_IDENT_RE + "\\s*(?:=|:=)\\s*)?!?(\\(.*\\)\\s*)?\\B[-~]{1,2}>\\*?",
            end: "[-~]{1,2}>\\*?"
          },
          {
            begin: "(" + JS_IDENT_RE + "\\s*(?:=|:=)\\s*)?(\\(.*\\)\\s*)?\\B!?[-~]{1,2}>\\*?",
            end: "!?[-~]{1,2}>\\*?"
          }
        ]
      },
      {
        className: "class",
        beginKeywords: "class",
        end: "$",
        illegal: /[:="\[\]]/,
        contains: [
          {
            beginKeywords: "extends",
            endsWithParent: true,
            illegal: /[:="\[\]]/,
            contains: [TITLE]
          },
          TITLE
        ]
      },
      {
        begin: JS_IDENT_RE + ":",
        end: ":",
        returnBegin: true,
        returnEnd: true,
        relevance: 0
      }
    ])
  };
}
var livescript_1 = livescript;
function source$b(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function concat$b(...args) {
  const joined = args.map((x2) => source$b(x2)).join("");
  return joined;
}
function llvm(hljs2) {
  const IDENT_RE2 = /([-a-zA-Z$._][\w$.-]*)/;
  const TYPE = {
    className: "type",
    begin: /\bi\d+(?=\s|\b)/
  };
  const OPERATOR = {
    className: "operator",
    relevance: 0,
    begin: /=/
  };
  const PUNCTUATION = {
    className: "punctuation",
    relevance: 0,
    begin: /,/
  };
  const NUMBER = {
    className: "number",
    variants: [
      {begin: /0[xX][a-fA-F0-9]+/},
      {begin: /-?\d+(?:[.]\d+)?(?:[eE][-+]?\d+(?:[.]\d+)?)?/}
    ],
    relevance: 0
  };
  const LABEL = {
    className: "symbol",
    variants: [
      {begin: /^\s*[a-z]+:/}
    ],
    relevance: 0
  };
  const VARIABLE = {
    className: "variable",
    variants: [
      {begin: concat$b(/%/, IDENT_RE2)},
      {begin: /%\d+/},
      {begin: /#\d+/}
    ]
  };
  const FUNCTION = {
    className: "title",
    variants: [
      {begin: concat$b(/@/, IDENT_RE2)},
      {begin: /@\d+/},
      {begin: concat$b(/!/, IDENT_RE2)},
      {begin: concat$b(/!\d+/, IDENT_RE2)},
      {begin: /!\d+/}
    ]
  };
  return {
    name: "LLVM IR",
    keywords: "begin end true false declare define global constant private linker_private internal available_externally linkonce linkonce_odr weak weak_odr appending dllimport dllexport common default hidden protected extern_weak external thread_local zeroinitializer undef null to tail target triple datalayout volatile nuw nsw nnan ninf nsz arcp fast exact inbounds align addrspace section alias module asm sideeffect gc dbg linker_private_weak attributes blockaddress initialexec localdynamic localexec prefix unnamed_addr ccc fastcc coldcc x86_stdcallcc x86_fastcallcc arm_apcscc arm_aapcscc arm_aapcs_vfpcc ptx_device ptx_kernel intel_ocl_bicc msp430_intrcc spir_func spir_kernel x86_64_sysvcc x86_64_win64cc x86_thiscallcc cc c signext zeroext inreg sret nounwind noreturn noalias nocapture byval nest readnone readonly inlinehint noinline alwaysinline optsize ssp sspreq noredzone noimplicitfloat naked builtin cold nobuiltin noduplicate nonlazybind optnone returns_twice sanitize_address sanitize_memory sanitize_thread sspstrong uwtable returned type opaque eq ne slt sgt sle sge ult ugt ule uge oeq one olt ogt ole oge ord uno ueq une x acq_rel acquire alignstack atomic catch cleanup filter inteldialect max min monotonic nand personality release seq_cst singlethread umax umin unordered xchg add fadd sub fsub mul fmul udiv sdiv fdiv urem srem frem shl lshr ashr and or xor icmp fcmp phi call trunc zext sext fptrunc fpext uitofp sitofp fptoui fptosi inttoptr ptrtoint bitcast addrspacecast select va_arg ret br switch invoke unwind unreachable indirectbr landingpad resume malloc alloca free load store getelementptr extractelement insertelement shufflevector getresult extractvalue insertvalue atomicrmw cmpxchg fence argmemonly double",
    contains: [
      TYPE,
      hljs2.COMMENT(/;\s*$/, null, {relevance: 0}),
      hljs2.COMMENT(/;/, /$/),
      hljs2.QUOTE_STRING_MODE,
      {
        className: "string",
        variants: [
          {begin: /"/, end: /[^\\]"/}
        ]
      },
      FUNCTION,
      PUNCTUATION,
      OPERATOR,
      VARIABLE,
      LABEL,
      NUMBER
    ]
  };
}
var llvm_1 = llvm;
function lsl(hljs2) {
  var LSL_STRING_ESCAPE_CHARS = {
    className: "subst",
    begin: /\\[tn"\\]/
  };
  var LSL_STRINGS = {
    className: "string",
    begin: '"',
    end: '"',
    contains: [
      LSL_STRING_ESCAPE_CHARS
    ]
  };
  var LSL_NUMBERS = {
    className: "number",
    relevance: 0,
    begin: hljs2.C_NUMBER_RE
  };
  var LSL_CONSTANTS = {
    className: "literal",
    variants: [
      {
        begin: "\\b(PI|TWO_PI|PI_BY_TWO|DEG_TO_RAD|RAD_TO_DEG|SQRT2)\\b"
      },
      {
        begin: "\\b(XP_ERROR_(EXPERIENCES_DISABLED|EXPERIENCE_(DISABLED|SUSPENDED)|INVALID_(EXPERIENCE|PARAMETERS)|KEY_NOT_FOUND|MATURITY_EXCEEDED|NONE|NOT_(FOUND|PERMITTED(_LAND)?)|NO_EXPERIENCE|QUOTA_EXCEEDED|RETRY_UPDATE|STORAGE_EXCEPTION|STORE_DISABLED|THROTTLED|UNKNOWN_ERROR)|JSON_APPEND|STATUS_(PHYSICS|ROTATE_[XYZ]|PHANTOM|SANDBOX|BLOCK_GRAB(_OBJECT)?|(DIE|RETURN)_AT_EDGE|CAST_SHADOWS|OK|MALFORMED_PARAMS|TYPE_MISMATCH|BOUNDS_ERROR|NOT_(FOUND|SUPPORTED)|INTERNAL_ERROR|WHITELIST_FAILED)|AGENT(_(BY_(LEGACY_|USER)NAME|FLYING|ATTACHMENTS|SCRIPTED|MOUSELOOK|SITTING|ON_OBJECT|AWAY|WALKING|IN_AIR|TYPING|CROUCHING|BUSY|ALWAYS_RUN|AUTOPILOT|LIST_(PARCEL(_OWNER)?|REGION)))?|CAMERA_(PITCH|DISTANCE|BEHINDNESS_(ANGLE|LAG)|(FOCUS|POSITION)(_(THRESHOLD|LOCKED|LAG))?|FOCUS_OFFSET|ACTIVE)|ANIM_ON|LOOP|REVERSE|PING_PONG|SMOOTH|ROTATE|SCALE|ALL_SIDES|LINK_(ROOT|SET|ALL_(OTHERS|CHILDREN)|THIS)|ACTIVE|PASS(IVE|_(ALWAYS|IF_NOT_HANDLED|NEVER))|SCRIPTED|CONTROL_(FWD|BACK|(ROT_)?(LEFT|RIGHT)|UP|DOWN|(ML_)?LBUTTON)|PERMISSION_(RETURN_OBJECTS|DEBIT|OVERRIDE_ANIMATIONS|SILENT_ESTATE_MANAGEMENT|TAKE_CONTROLS|TRIGGER_ANIMATION|ATTACH|CHANGE_LINKS|(CONTROL|TRACK)_CAMERA|TELEPORT)|INVENTORY_(TEXTURE|SOUND|OBJECT|SCRIPT|LANDMARK|CLOTHING|NOTECARD|BODYPART|ANIMATION|GESTURE|ALL|NONE)|CHANGED_(INVENTORY|COLOR|SHAPE|SCALE|TEXTURE|LINK|ALLOWED_DROP|OWNER|REGION(_START)?|TELEPORT|MEDIA)|OBJECT_(CLICK_ACTION|HOVER_HEIGHT|LAST_OWNER_ID|(PHYSICS|SERVER|STREAMING)_COST|UNKNOWN_DETAIL|CHARACTER_TIME|PHANTOM|PHYSICS|TEMP_(ATTACHED|ON_REZ)|NAME|DESC|POS|PRIM_(COUNT|EQUIVALENCE)|RETURN_(PARCEL(_OWNER)?|REGION)|REZZER_KEY|ROO?T|VELOCITY|OMEGA|OWNER|GROUP(_TAG)?|CREATOR|ATTACHED_(POINT|SLOTS_AVAILABLE)|RENDER_WEIGHT|(BODY_SHAPE|PATHFINDING)_TYPE|(RUNNING|TOTAL)_SCRIPT_COUNT|TOTAL_INVENTORY_COUNT|SCRIPT_(MEMORY|TIME))|TYPE_(INTEGER|FLOAT|STRING|KEY|VECTOR|ROTATION|INVALID)|(DEBUG|PUBLIC)_CHANNEL|ATTACH_(AVATAR_CENTER|CHEST|HEAD|BACK|PELVIS|MOUTH|CHIN|NECK|NOSE|BELLY|[LR](SHOULDER|HAND|FOOT|EAR|EYE|[UL](ARM|LEG)|HIP)|(LEFT|RIGHT)_PEC|HUD_(CENTER_[12]|TOP_(RIGHT|CENTER|LEFT)|BOTTOM(_(RIGHT|LEFT))?)|[LR]HAND_RING1|TAIL_(BASE|TIP)|[LR]WING|FACE_(JAW|[LR]EAR|[LR]EYE|TOUNGE)|GROIN|HIND_[LR]FOOT)|LAND_(LEVEL|RAISE|LOWER|SMOOTH|NOISE|REVERT)|DATA_(ONLINE|NAME|BORN|SIM_(POS|STATUS|RATING)|PAYINFO)|PAYMENT_INFO_(ON_FILE|USED)|REMOTE_DATA_(CHANNEL|REQUEST|REPLY)|PSYS_(PART_(BF_(ZERO|ONE(_MINUS_(DEST_COLOR|SOURCE_(ALPHA|COLOR)))?|DEST_COLOR|SOURCE_(ALPHA|COLOR))|BLEND_FUNC_(DEST|SOURCE)|FLAGS|(START|END)_(COLOR|ALPHA|SCALE|GLOW)|MAX_AGE|(RIBBON|WIND|INTERP_(COLOR|SCALE)|BOUNCE|FOLLOW_(SRC|VELOCITY)|TARGET_(POS|LINEAR)|EMISSIVE)_MASK)|SRC_(MAX_AGE|PATTERN|ANGLE_(BEGIN|END)|BURST_(RATE|PART_COUNT|RADIUS|SPEED_(MIN|MAX))|ACCEL|TEXTURE|TARGET_KEY|OMEGA|PATTERN_(DROP|EXPLODE|ANGLE(_CONE(_EMPTY)?)?)))|VEHICLE_(REFERENCE_FRAME|TYPE_(NONE|SLED|CAR|BOAT|AIRPLANE|BALLOON)|(LINEAR|ANGULAR)_(FRICTION_TIMESCALE|MOTOR_DIRECTION)|LINEAR_MOTOR_OFFSET|HOVER_(HEIGHT|EFFICIENCY|TIMESCALE)|BUOYANCY|(LINEAR|ANGULAR)_(DEFLECTION_(EFFICIENCY|TIMESCALE)|MOTOR_(DECAY_)?TIMESCALE)|VERTICAL_ATTRACTION_(EFFICIENCY|TIMESCALE)|BANKING_(EFFICIENCY|MIX|TIMESCALE)|FLAG_(NO_DEFLECTION_UP|LIMIT_(ROLL_ONLY|MOTOR_UP)|HOVER_((WATER|TERRAIN|UP)_ONLY|GLOBAL_HEIGHT)|MOUSELOOK_(STEER|BANK)|CAMERA_DECOUPLED))|PRIM_(ALLOW_UNSIT|ALPHA_MODE(_(BLEND|EMISSIVE|MASK|NONE))?|NORMAL|SPECULAR|TYPE(_(BOX|CYLINDER|PRISM|SPHERE|TORUS|TUBE|RING|SCULPT))?|HOLE_(DEFAULT|CIRCLE|SQUARE|TRIANGLE)|MATERIAL(_(STONE|METAL|GLASS|WOOD|FLESH|PLASTIC|RUBBER))?|SHINY_(NONE|LOW|MEDIUM|HIGH)|BUMP_(NONE|BRIGHT|DARK|WOOD|BARK|BRICKS|CHECKER|CONCRETE|TILE|STONE|DISKS|GRAVEL|BLOBS|SIDING|LARGETILE|STUCCO|SUCTION|WEAVE)|TEXGEN_(DEFAULT|PLANAR)|SCRIPTED_SIT_ONLY|SCULPT_(TYPE_(SPHERE|TORUS|PLANE|CYLINDER|MASK)|FLAG_(MIRROR|INVERT))|PHYSICS(_(SHAPE_(CONVEX|NONE|PRIM|TYPE)))?|(POS|ROT)_LOCAL|SLICE|TEXT|FLEXIBLE|POINT_LIGHT|TEMP_ON_REZ|PHANTOM|POSITION|SIT_TARGET|SIZE|ROTATION|TEXTURE|NAME|OMEGA|DESC|LINK_TARGET|COLOR|BUMP_SHINY|FULLBRIGHT|TEXGEN|GLOW|MEDIA_(ALT_IMAGE_ENABLE|CONTROLS|(CURRENT|HOME)_URL|AUTO_(LOOP|PLAY|SCALE|ZOOM)|FIRST_CLICK_INTERACT|(WIDTH|HEIGHT)_PIXELS|WHITELIST(_ENABLE)?|PERMS_(INTERACT|CONTROL)|PARAM_MAX|CONTROLS_(STANDARD|MINI)|PERM_(NONE|OWNER|GROUP|ANYONE)|MAX_(URL_LENGTH|WHITELIST_(SIZE|COUNT)|(WIDTH|HEIGHT)_PIXELS)))|MASK_(BASE|OWNER|GROUP|EVERYONE|NEXT)|PERM_(TRANSFER|MODIFY|COPY|MOVE|ALL)|PARCEL_(MEDIA_COMMAND_(STOP|PAUSE|PLAY|LOOP|TEXTURE|URL|TIME|AGENT|UNLOAD|AUTO_ALIGN|TYPE|SIZE|DESC|LOOP_SET)|FLAG_(ALLOW_(FLY|(GROUP_)?SCRIPTS|LANDMARK|TERRAFORM|DAMAGE|CREATE_(GROUP_)?OBJECTS)|USE_(ACCESS_(GROUP|LIST)|BAN_LIST|LAND_PASS_LIST)|LOCAL_SOUND_ONLY|RESTRICT_PUSHOBJECT|ALLOW_(GROUP|ALL)_OBJECT_ENTRY)|COUNT_(TOTAL|OWNER|GROUP|OTHER|SELECTED|TEMP)|DETAILS_(NAME|DESC|OWNER|GROUP|AREA|ID|SEE_AVATARS))|LIST_STAT_(MAX|MIN|MEAN|MEDIAN|STD_DEV|SUM(_SQUARES)?|NUM_COUNT|GEOMETRIC_MEAN|RANGE)|PAY_(HIDE|DEFAULT)|REGION_FLAG_(ALLOW_DAMAGE|FIXED_SUN|BLOCK_TERRAFORM|SANDBOX|DISABLE_(COLLISIONS|PHYSICS)|BLOCK_FLY|ALLOW_DIRECT_TELEPORT|RESTRICT_PUSHOBJECT)|HTTP_(METHOD|MIMETYPE|BODY_(MAXLENGTH|TRUNCATED)|CUSTOM_HEADER|PRAGMA_NO_CACHE|VERBOSE_THROTTLE|VERIFY_CERT)|SIT_(INVALID_(AGENT|LINK_OBJECT)|NO(T_EXPERIENCE|_(ACCESS|EXPERIENCE_PERMISSION|SIT_TARGET)))|STRING_(TRIM(_(HEAD|TAIL))?)|CLICK_ACTION_(NONE|TOUCH|SIT|BUY|PAY|OPEN(_MEDIA)?|PLAY|ZOOM)|TOUCH_INVALID_FACE|PROFILE_(NONE|SCRIPT_MEMORY)|RC_(DATA_FLAGS|DETECT_PHANTOM|GET_(LINK_NUM|NORMAL|ROOT_KEY)|MAX_HITS|REJECT_(TYPES|AGENTS|(NON)?PHYSICAL|LAND))|RCERR_(CAST_TIME_EXCEEDED|SIM_PERF_LOW|UNKNOWN)|ESTATE_ACCESS_(ALLOWED_(AGENT|GROUP)_(ADD|REMOVE)|BANNED_AGENT_(ADD|REMOVE))|DENSITY|FRICTION|RESTITUTION|GRAVITY_MULTIPLIER|KFM_(COMMAND|CMD_(PLAY|STOP|PAUSE)|MODE|FORWARD|LOOP|PING_PONG|REVERSE|DATA|ROTATION|TRANSLATION)|ERR_(GENERIC|PARCEL_PERMISSIONS|MALFORMED_PARAMS|RUNTIME_PERMISSIONS|THROTTLED)|CHARACTER_(CMD_((SMOOTH_)?STOP|JUMP)|DESIRED_(TURN_)?SPEED|RADIUS|STAY_WITHIN_PARCEL|LENGTH|ORIENTATION|ACCOUNT_FOR_SKIPPED_FRAMES|AVOIDANCE_MODE|TYPE(_([ABCD]|NONE))?|MAX_(DECEL|TURN_RADIUS|(ACCEL|SPEED)))|PURSUIT_(OFFSET|FUZZ_FACTOR|GOAL_TOLERANCE|INTERCEPT)|REQUIRE_LINE_OF_SIGHT|FORCE_DIRECT_PATH|VERTICAL|HORIZONTAL|AVOID_(CHARACTERS|DYNAMIC_OBSTACLES|NONE)|PU_(EVADE_(HIDDEN|SPOTTED)|FAILURE_(DYNAMIC_PATHFINDING_DISABLED|INVALID_(GOAL|START)|NO_(NAVMESH|VALID_DESTINATION)|OTHER|TARGET_GONE|(PARCEL_)?UNREACHABLE)|(GOAL|SLOWDOWN_DISTANCE)_REACHED)|TRAVERSAL_TYPE(_(FAST|NONE|SLOW))?|CONTENT_TYPE_(ATOM|FORM|HTML|JSON|LLSD|RSS|TEXT|XHTML|XML)|GCNP_(RADIUS|STATIC)|(PATROL|WANDER)_PAUSE_AT_WAYPOINTS|OPT_(AVATAR|CHARACTER|EXCLUSION_VOLUME|LEGACY_LINKSET|MATERIAL_VOLUME|OTHER|STATIC_OBSTACLE|WALKABLE)|SIM_STAT_PCT_CHARS_STEPPED)\\b"
      },
      {
        begin: "\\b(FALSE|TRUE)\\b"
      },
      {
        begin: "\\b(ZERO_ROTATION)\\b"
      },
      {
        begin: "\\b(EOF|JSON_(ARRAY|DELETE|FALSE|INVALID|NULL|NUMBER|OBJECT|STRING|TRUE)|NULL_KEY|TEXTURE_(BLANK|DEFAULT|MEDIA|PLYWOOD|TRANSPARENT)|URL_REQUEST_(GRANTED|DENIED))\\b"
      },
      {
        begin: "\\b(ZERO_VECTOR|TOUCH_INVALID_(TEXCOORD|VECTOR))\\b"
      }
    ]
  };
  var LSL_FUNCTIONS = {
    className: "built_in",
    begin: "\\b(ll(AgentInExperience|(Create|DataSize|Delete|KeyCount|Keys|Read|Update)KeyValue|GetExperience(Details|ErrorMessage)|ReturnObjectsBy(ID|Owner)|Json(2List|[GS]etValue|ValueType)|Sin|Cos|Tan|Atan2|Sqrt|Pow|Abs|Fabs|Frand|Floor|Ceil|Round|Vec(Mag|Norm|Dist)|Rot(Between|2(Euler|Fwd|Left|Up))|(Euler|Axes)2Rot|Whisper|(Region|Owner)?Say|Shout|Listen(Control|Remove)?|Sensor(Repeat|Remove)?|Detected(Name|Key|Owner|Type|Pos|Vel|Grab|Rot|Group|LinkNumber)|Die|Ground|Wind|([GS]et)(AnimationOverride|MemoryLimit|PrimMediaParams|ParcelMusicURL|Object(Desc|Name)|PhysicsMaterial|Status|Scale|Color|Alpha|Texture|Pos|Rot|Force|Torque)|ResetAnimationOverride|(Scale|Offset|Rotate)Texture|(Rot)?Target(Remove)?|(Stop)?MoveToTarget|Apply(Rotational)?Impulse|Set(KeyframedMotion|ContentType|RegionPos|(Angular)?Velocity|Buoyancy|HoverHeight|ForceAndTorque|TimerEvent|ScriptState|Damage|TextureAnim|Sound(Queueing|Radius)|Vehicle(Type|(Float|Vector|Rotation)Param)|(Touch|Sit)?Text|Camera(Eye|At)Offset|PrimitiveParams|ClickAction|Link(Alpha|Color|PrimitiveParams(Fast)?|Texture(Anim)?|Camera|Media)|RemoteScriptAccessPin|PayPrice|LocalRot)|ScaleByFactor|Get((Max|Min)ScaleFactor|ClosestNavPoint|StaticPath|SimStats|Env|PrimitiveParams|Link(PrimitiveParams|Number(OfSides)?|Key|Name|Media)|HTTPHeader|FreeURLs|Object(Details|PermMask|PrimCount)|Parcel(MaxPrims|Details|Prim(Count|Owners))|Attached(List)?|(SPMax|Free|Used)Memory|Region(Name|TimeDilation|FPS|Corner|AgentCount)|Root(Position|Rotation)|UnixTime|(Parcel|Region)Flags|(Wall|GMT)clock|SimulatorHostname|BoundingBox|GeometricCenter|Creator|NumberOf(Prims|NotecardLines|Sides)|Animation(List)?|(Camera|Local)(Pos|Rot)|Vel|Accel|Omega|Time(stamp|OfDay)|(Object|CenterOf)?Mass|MassMKS|Energy|Owner|(Owner)?Key|SunDirection|Texture(Offset|Scale|Rot)|Inventory(Number|Name|Key|Type|Creator|PermMask)|Permissions(Key)?|StartParameter|List(Length|EntryType)|Date|Agent(Size|Info|Language|List)|LandOwnerAt|NotecardLine|Script(Name|State))|(Get|Reset|GetAndReset)Time|PlaySound(Slave)?|LoopSound(Master|Slave)?|(Trigger|Stop|Preload)Sound|((Get|Delete)Sub|Insert)String|To(Upper|Lower)|Give(InventoryList|Money)|RezObject|(Stop)?LookAt|Sleep|CollisionFilter|(Take|Release)Controls|DetachFromAvatar|AttachToAvatar(Temp)?|InstantMessage|(GetNext)?Email|StopHover|MinEventDelay|RotLookAt|String(Length|Trim)|(Start|Stop)Animation|TargetOmega|Request(Experience)?Permissions|(Create|Break)Link|BreakAllLinks|(Give|Remove)Inventory|Water|PassTouches|Request(Agent|Inventory)Data|TeleportAgent(Home|GlobalCoords)?|ModifyLand|CollisionSound|ResetScript|MessageLinked|PushObject|PassCollisions|AxisAngle2Rot|Rot2(Axis|Angle)|A(cos|sin)|AngleBetween|AllowInventoryDrop|SubStringIndex|List2(CSV|Integer|Json|Float|String|Key|Vector|Rot|List(Strided)?)|DeleteSubList|List(Statistics|Sort|Randomize|(Insert|Find|Replace)List)|EdgeOfWorld|AdjustSoundVolume|Key2Name|TriggerSoundLimited|EjectFromLand|(CSV|ParseString)2List|OverMyLand|SameGroup|UnSit|Ground(Slope|Normal|Contour)|GroundRepel|(Set|Remove)VehicleFlags|SitOnLink|(AvatarOn)?(Link)?SitTarget|Script(Danger|Profiler)|Dialog|VolumeDetect|ResetOtherScript|RemoteLoadScriptPin|(Open|Close)RemoteDataChannel|SendRemoteData|RemoteDataReply|(Integer|String)ToBase64|XorBase64|Log(10)?|Base64To(String|Integer)|ParseStringKeepNulls|RezAtRoot|RequestSimulatorData|ForceMouselook|(Load|Release|(E|Une)scape)URL|ParcelMedia(CommandList|Query)|ModPow|MapDestination|(RemoveFrom|AddTo|Reset)Land(Pass|Ban)List|(Set|Clear)CameraParams|HTTP(Request|Response)|TextBox|DetectedTouch(UV|Face|Pos|(N|Bin)ormal|ST)|(MD5|SHA1|DumpList2)String|Request(Secure)?URL|Clear(Prim|Link)Media|(Link)?ParticleSystem|(Get|Request)(Username|DisplayName)|RegionSayTo|CastRay|GenerateKey|TransferLindenDollars|ManageEstateAccess|(Create|Delete)Character|ExecCharacterCmd|Evade|FleeFrom|NavigateTo|PatrolPoints|Pursue|UpdateCharacter|WanderWithin))\\b"
  };
  return {
    name: "LSL (Linden Scripting Language)",
    illegal: ":",
    contains: [
      LSL_STRINGS,
      {
        className: "comment",
        variants: [
          hljs2.COMMENT("//", "$"),
          hljs2.COMMENT("/\\*", "\\*/")
        ],
        relevance: 0
      },
      LSL_NUMBERS,
      {
        className: "section",
        variants: [
          {
            begin: "\\b(state|default)\\b"
          },
          {
            begin: "\\b(state_(entry|exit)|touch(_(start|end))?|(land_)?collision(_(start|end))?|timer|listen|(no_)?sensor|control|(not_)?at_(rot_)?target|money|email|experience_permissions(_denied)?|run_time_permissions|changed|attach|dataserver|moving_(start|end)|link_message|(on|object)_rez|remote_data|http_re(sponse|quest)|path_update|transaction_result)\\b"
          }
        ]
      },
      LSL_FUNCTIONS,
      LSL_CONSTANTS,
      {
        className: "type",
        begin: "\\b(integer|float|string|key|vector|quaternion|rotation|list)\\b"
      }
    ]
  };
}
var lsl_1 = lsl;
function lua(hljs2) {
  const OPENING_LONG_BRACKET = "\\[=*\\[";
  const CLOSING_LONG_BRACKET = "\\]=*\\]";
  const LONG_BRACKETS = {
    begin: OPENING_LONG_BRACKET,
    end: CLOSING_LONG_BRACKET,
    contains: ["self"]
  };
  const COMMENTS = [
    hljs2.COMMENT("--(?!" + OPENING_LONG_BRACKET + ")", "$"),
    hljs2.COMMENT("--" + OPENING_LONG_BRACKET, CLOSING_LONG_BRACKET, {
      contains: [LONG_BRACKETS],
      relevance: 10
    })
  ];
  return {
    name: "Lua",
    keywords: {
      $pattern: hljs2.UNDERSCORE_IDENT_RE,
      literal: "true false nil",
      keyword: "and break do else elseif end for goto if in local not or repeat return then until while",
      built_in: "_G _ENV _VERSION __index __newindex __mode __call __metatable __tostring __len __gc __add __sub __mul __div __mod __pow __concat __unm __eq __lt __le assert collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring module next pairs pcall print rawequal rawget rawset require select setfenv setmetatable tonumber tostring type unpack xpcall arg self coroutine resume yield status wrap create running debug getupvalue debug sethook getmetatable gethook setmetatable setlocal traceback setfenv getinfo setupvalue getlocal getregistry getfenv io lines write close flush open output type read stderr stdin input stdout popen tmpfile math log max acos huge ldexp pi cos tanh pow deg tan cosh sinh random randomseed frexp ceil floor rad abs sqrt modf asin min mod fmod log10 atan2 exp sin atan os exit setlocale date getenv difftime remove time clock tmpname rename execute package preload loadlib loaded loaders cpath config path seeall string sub upper len gfind rep find match char dump gmatch reverse byte format gsub lower table setn insert getn foreachi maxn foreach concat sort remove"
    },
    contains: COMMENTS.concat([
      {
        className: "function",
        beginKeywords: "function",
        end: "\\)",
        contains: [
          hljs2.inherit(hljs2.TITLE_MODE, {
            begin: "([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*"
          }),
          {
            className: "params",
            begin: "\\(",
            endsWithParent: true,
            contains: COMMENTS
          }
        ].concat(COMMENTS)
      },
      hljs2.C_NUMBER_MODE,
      hljs2.APOS_STRING_MODE,
      hljs2.QUOTE_STRING_MODE,
      {
        className: "string",
        begin: OPENING_LONG_BRACKET,
        end: CLOSING_LONG_BRACKET,
        contains: [LONG_BRACKETS],
        relevance: 5
      }
    ])
  };
}
var lua_1 = lua;
function makefile(hljs2) {
  const VARIABLE = {
    className: "variable",
    variants: [
      {
        begin: "\\$\\(" + hljs2.UNDERSCORE_IDENT_RE + "\\)",
        contains: [hljs2.BACKSLASH_ESCAPE]
      },
      {
        begin: /\$[@%<?\^\+\*]/
      }
    ]
  };
  const QUOTE_STRING = {
    className: "string",
    begin: /"/,
    end: /"/,
    contains: [
      hljs2.BACKSLASH_ESCAPE,
      VARIABLE
    ]
  };
  const FUNC = {
    className: "variable",
    begin: /\$\([\w-]+\s/,
    end: /\)/,
    keywords: {
      built_in: "subst patsubst strip findstring filter filter-out sort word wordlist firstword lastword dir notdir suffix basename addsuffix addprefix join wildcard realpath abspath error warning shell origin flavor foreach if or and call eval file value"
    },
    contains: [VARIABLE]
  };
  const ASSIGNMENT = {
    begin: "^" + hljs2.UNDERSCORE_IDENT_RE + "\\s*(?=[:+?]?=)"
  };
  const META = {
    className: "meta",
    begin: /^\.PHONY:/,
    end: /$/,
    keywords: {
      $pattern: /[\.\w]+/,
      "meta-keyword": ".PHONY"
    }
  };
  const TARGET = {
    className: "section",
    begin: /^[^\s]+:/,
    end: /$/,
    contains: [VARIABLE]
  };
  return {
    name: "Makefile",
    aliases: [
      "mk",
      "mak",
      "make"
    ],
    keywords: {
      $pattern: /[\w-]+/,
      keyword: "define endef undefine ifdef ifndef ifeq ifneq else endif include -include sinclude override export unexport private vpath"
    },
    contains: [
      hljs2.HASH_COMMENT_MODE,
      VARIABLE,
      QUOTE_STRING,
      FUNC,
      ASSIGNMENT,
      META,
      TARGET
    ]
  };
}
var makefile_1 = makefile;
const SYSTEM_SYMBOLS = [
  "AASTriangle",
  "AbelianGroup",
  "Abort",
  "AbortKernels",
  "AbortProtect",
  "AbortScheduledTask",
  "Above",
  "Abs",
  "AbsArg",
  "AbsArgPlot",
  "Absolute",
  "AbsoluteCorrelation",
  "AbsoluteCorrelationFunction",
  "AbsoluteCurrentValue",
  "AbsoluteDashing",
  "AbsoluteFileName",
  "AbsoluteOptions",
  "AbsolutePointSize",
  "AbsoluteThickness",
  "AbsoluteTime",
  "AbsoluteTiming",
  "AcceptanceThreshold",
  "AccountingForm",
  "Accumulate",
  "Accuracy",
  "AccuracyGoal",
  "ActionDelay",
  "ActionMenu",
  "ActionMenuBox",
  "ActionMenuBoxOptions",
  "Activate",
  "Active",
  "ActiveClassification",
  "ActiveClassificationObject",
  "ActiveItem",
  "ActivePrediction",
  "ActivePredictionObject",
  "ActiveStyle",
  "AcyclicGraphQ",
  "AddOnHelpPath",
  "AddSides",
  "AddTo",
  "AddToSearchIndex",
  "AddUsers",
  "AdjacencyGraph",
  "AdjacencyList",
  "AdjacencyMatrix",
  "AdjacentMeshCells",
  "AdjustmentBox",
  "AdjustmentBoxOptions",
  "AdjustTimeSeriesForecast",
  "AdministrativeDivisionData",
  "AffineHalfSpace",
  "AffineSpace",
  "AffineStateSpaceModel",
  "AffineTransform",
  "After",
  "AggregatedEntityClass",
  "AggregationLayer",
  "AircraftData",
  "AirportData",
  "AirPressureData",
  "AirTemperatureData",
  "AiryAi",
  "AiryAiPrime",
  "AiryAiZero",
  "AiryBi",
  "AiryBiPrime",
  "AiryBiZero",
  "AlgebraicIntegerQ",
  "AlgebraicNumber",
  "AlgebraicNumberDenominator",
  "AlgebraicNumberNorm",
  "AlgebraicNumberPolynomial",
  "AlgebraicNumberTrace",
  "AlgebraicRules",
  "AlgebraicRulesData",
  "Algebraics",
  "AlgebraicUnitQ",
  "Alignment",
  "AlignmentMarker",
  "AlignmentPoint",
  "All",
  "AllowAdultContent",
  "AllowedCloudExtraParameters",
  "AllowedCloudParameterExtensions",
  "AllowedDimensions",
  "AllowedFrequencyRange",
  "AllowedHeads",
  "AllowGroupClose",
  "AllowIncomplete",
  "AllowInlineCells",
  "AllowKernelInitialization",
  "AllowLooseGrammar",
  "AllowReverseGroupClose",
  "AllowScriptLevelChange",
  "AllowVersionUpdate",
  "AllTrue",
  "Alphabet",
  "AlphabeticOrder",
  "AlphabeticSort",
  "AlphaChannel",
  "AlternateImage",
  "AlternatingFactorial",
  "AlternatingGroup",
  "AlternativeHypothesis",
  "Alternatives",
  "AltitudeMethod",
  "AmbientLight",
  "AmbiguityFunction",
  "AmbiguityList",
  "Analytic",
  "AnatomyData",
  "AnatomyForm",
  "AnatomyPlot3D",
  "AnatomySkinStyle",
  "AnatomyStyling",
  "AnchoredSearch",
  "And",
  "AndersonDarlingTest",
  "AngerJ",
  "AngleBisector",
  "AngleBracket",
  "AnglePath",
  "AnglePath3D",
  "AngleVector",
  "AngularGauge",
  "Animate",
  "AnimationCycleOffset",
  "AnimationCycleRepetitions",
  "AnimationDirection",
  "AnimationDisplayTime",
  "AnimationRate",
  "AnimationRepetitions",
  "AnimationRunning",
  "AnimationRunTime",
  "AnimationTimeIndex",
  "Animator",
  "AnimatorBox",
  "AnimatorBoxOptions",
  "AnimatorElements",
  "Annotate",
  "Annotation",
  "AnnotationDelete",
  "AnnotationKeys",
  "AnnotationRules",
  "AnnotationValue",
  "Annuity",
  "AnnuityDue",
  "Annulus",
  "AnomalyDetection",
  "AnomalyDetector",
  "AnomalyDetectorFunction",
  "Anonymous",
  "Antialiasing",
  "AntihermitianMatrixQ",
  "Antisymmetric",
  "AntisymmetricMatrixQ",
  "Antonyms",
  "AnyOrder",
  "AnySubset",
  "AnyTrue",
  "Apart",
  "ApartSquareFree",
  "APIFunction",
  "Appearance",
  "AppearanceElements",
  "AppearanceRules",
  "AppellF1",
  "Append",
  "AppendCheck",
  "AppendLayer",
  "AppendTo",
  "Apply",
  "ApplySides",
  "ArcCos",
  "ArcCosh",
  "ArcCot",
  "ArcCoth",
  "ArcCsc",
  "ArcCsch",
  "ArcCurvature",
  "ARCHProcess",
  "ArcLength",
  "ArcSec",
  "ArcSech",
  "ArcSin",
  "ArcSinDistribution",
  "ArcSinh",
  "ArcTan",
  "ArcTanh",
  "Area",
  "Arg",
  "ArgMax",
  "ArgMin",
  "ArgumentCountQ",
  "ARIMAProcess",
  "ArithmeticGeometricMean",
  "ARMAProcess",
  "Around",
  "AroundReplace",
  "ARProcess",
  "Array",
  "ArrayComponents",
  "ArrayDepth",
  "ArrayFilter",
  "ArrayFlatten",
  "ArrayMesh",
  "ArrayPad",
  "ArrayPlot",
  "ArrayQ",
  "ArrayResample",
  "ArrayReshape",
  "ArrayRules",
  "Arrays",
  "Arrow",
  "Arrow3DBox",
  "ArrowBox",
  "Arrowheads",
  "ASATriangle",
  "Ask",
  "AskAppend",
  "AskConfirm",
  "AskDisplay",
  "AskedQ",
  "AskedValue",
  "AskFunction",
  "AskState",
  "AskTemplateDisplay",
  "AspectRatio",
  "AspectRatioFixed",
  "Assert",
  "AssociateTo",
  "Association",
  "AssociationFormat",
  "AssociationMap",
  "AssociationQ",
  "AssociationThread",
  "AssumeDeterministic",
  "Assuming",
  "Assumptions",
  "AstronomicalData",
  "Asymptotic",
  "AsymptoticDSolveValue",
  "AsymptoticEqual",
  "AsymptoticEquivalent",
  "AsymptoticGreater",
  "AsymptoticGreaterEqual",
  "AsymptoticIntegrate",
  "AsymptoticLess",
  "AsymptoticLessEqual",
  "AsymptoticOutputTracker",
  "AsymptoticProduct",
  "AsymptoticRSolveValue",
  "AsymptoticSolve",
  "AsymptoticSum",
  "Asynchronous",
  "AsynchronousTaskObject",
  "AsynchronousTasks",
  "Atom",
  "AtomCoordinates",
  "AtomCount",
  "AtomDiagramCoordinates",
  "AtomList",
  "AtomQ",
  "AttentionLayer",
  "Attributes",
  "Audio",
  "AudioAmplify",
  "AudioAnnotate",
  "AudioAnnotationLookup",
  "AudioBlockMap",
  "AudioCapture",
  "AudioChannelAssignment",
  "AudioChannelCombine",
  "AudioChannelMix",
  "AudioChannels",
  "AudioChannelSeparate",
  "AudioData",
  "AudioDelay",
  "AudioDelete",
  "AudioDevice",
  "AudioDistance",
  "AudioEncoding",
  "AudioFade",
  "AudioFrequencyShift",
  "AudioGenerator",
  "AudioIdentify",
  "AudioInputDevice",
  "AudioInsert",
  "AudioInstanceQ",
  "AudioIntervals",
  "AudioJoin",
  "AudioLabel",
  "AudioLength",
  "AudioLocalMeasurements",
  "AudioLooping",
  "AudioLoudness",
  "AudioMeasurements",
  "AudioNormalize",
  "AudioOutputDevice",
  "AudioOverlay",
  "AudioPad",
  "AudioPan",
  "AudioPartition",
  "AudioPause",
  "AudioPitchShift",
  "AudioPlay",
  "AudioPlot",
  "AudioQ",
  "AudioRecord",
  "AudioReplace",
  "AudioResample",
  "AudioReverb",
  "AudioReverse",
  "AudioSampleRate",
  "AudioSpectralMap",
  "AudioSpectralTransformation",
  "AudioSplit",
  "AudioStop",
  "AudioStream",
  "AudioStreams",
  "AudioTimeStretch",
  "AudioTracks",
  "AudioTrim",
  "AudioType",
  "AugmentedPolyhedron",
  "AugmentedSymmetricPolynomial",
  "Authenticate",
  "Authentication",
  "AuthenticationDialog",
  "AutoAction",
  "Autocomplete",
  "AutocompletionFunction",
  "AutoCopy",
  "AutocorrelationTest",
  "AutoDelete",
  "AutoEvaluateEvents",
  "AutoGeneratedPackage",
  "AutoIndent",
  "AutoIndentSpacings",
  "AutoItalicWords",
  "AutoloadPath",
  "AutoMatch",
  "Automatic",
  "AutomaticImageSize",
  "AutoMultiplicationSymbol",
  "AutoNumberFormatting",
  "AutoOpenNotebooks",
  "AutoOpenPalettes",
  "AutoQuoteCharacters",
  "AutoRefreshed",
  "AutoRemove",
  "AutorunSequencing",
  "AutoScaling",
  "AutoScroll",
  "AutoSpacing",
  "AutoStyleOptions",
  "AutoStyleWords",
  "AutoSubmitting",
  "Axes",
  "AxesEdge",
  "AxesLabel",
  "AxesOrigin",
  "AxesStyle",
  "AxiomaticTheory",
  "Axis",
  "BabyMonsterGroupB",
  "Back",
  "Background",
  "BackgroundAppearance",
  "BackgroundTasksSettings",
  "Backslash",
  "Backsubstitution",
  "Backward",
  "Ball",
  "Band",
  "BandpassFilter",
  "BandstopFilter",
  "BarabasiAlbertGraphDistribution",
  "BarChart",
  "BarChart3D",
  "BarcodeImage",
  "BarcodeRecognize",
  "BaringhausHenzeTest",
  "BarLegend",
  "BarlowProschanImportance",
  "BarnesG",
  "BarOrigin",
  "BarSpacing",
  "BartlettHannWindow",
  "BartlettWindow",
  "BaseDecode",
  "BaseEncode",
  "BaseForm",
  "Baseline",
  "BaselinePosition",
  "BaseStyle",
  "BasicRecurrentLayer",
  "BatchNormalizationLayer",
  "BatchSize",
  "BatesDistribution",
  "BattleLemarieWavelet",
  "BayesianMaximization",
  "BayesianMaximizationObject",
  "BayesianMinimization",
  "BayesianMinimizationObject",
  "Because",
  "BeckmannDistribution",
  "Beep",
  "Before",
  "Begin",
  "BeginDialogPacket",
  "BeginFrontEndInteractionPacket",
  "BeginPackage",
  "BellB",
  "BellY",
  "Below",
  "BenfordDistribution",
  "BeniniDistribution",
  "BenktanderGibratDistribution",
  "BenktanderWeibullDistribution",
  "BernoulliB",
  "BernoulliDistribution",
  "BernoulliGraphDistribution",
  "BernoulliProcess",
  "BernsteinBasis",
  "BesselFilterModel",
  "BesselI",
  "BesselJ",
  "BesselJZero",
  "BesselK",
  "BesselY",
  "BesselYZero",
  "Beta",
  "BetaBinomialDistribution",
  "BetaDistribution",
  "BetaNegativeBinomialDistribution",
  "BetaPrimeDistribution",
  "BetaRegularized",
  "Between",
  "BetweennessCentrality",
  "BeveledPolyhedron",
  "BezierCurve",
  "BezierCurve3DBox",
  "BezierCurve3DBoxOptions",
  "BezierCurveBox",
  "BezierCurveBoxOptions",
  "BezierFunction",
  "BilateralFilter",
  "Binarize",
  "BinaryDeserialize",
  "BinaryDistance",
  "BinaryFormat",
  "BinaryImageQ",
  "BinaryRead",
  "BinaryReadList",
  "BinarySerialize",
  "BinaryWrite",
  "BinCounts",
  "BinLists",
  "Binomial",
  "BinomialDistribution",
  "BinomialProcess",
  "BinormalDistribution",
  "BiorthogonalSplineWavelet",
  "BipartiteGraphQ",
  "BiquadraticFilterModel",
  "BirnbaumImportance",
  "BirnbaumSaundersDistribution",
  "BitAnd",
  "BitClear",
  "BitGet",
  "BitLength",
  "BitNot",
  "BitOr",
  "BitSet",
  "BitShiftLeft",
  "BitShiftRight",
  "BitXor",
  "BiweightLocation",
  "BiweightMidvariance",
  "Black",
  "BlackmanHarrisWindow",
  "BlackmanNuttallWindow",
  "BlackmanWindow",
  "Blank",
  "BlankForm",
  "BlankNullSequence",
  "BlankSequence",
  "Blend",
  "Block",
  "BlockchainAddressData",
  "BlockchainBase",
  "BlockchainBlockData",
  "BlockchainContractValue",
  "BlockchainData",
  "BlockchainGet",
  "BlockchainKeyEncode",
  "BlockchainPut",
  "BlockchainTokenData",
  "BlockchainTransaction",
  "BlockchainTransactionData",
  "BlockchainTransactionSign",
  "BlockchainTransactionSubmit",
  "BlockMap",
  "BlockRandom",
  "BlomqvistBeta",
  "BlomqvistBetaTest",
  "Blue",
  "Blur",
  "BodePlot",
  "BohmanWindow",
  "Bold",
  "Bond",
  "BondCount",
  "BondList",
  "BondQ",
  "Bookmarks",
  "Boole",
  "BooleanConsecutiveFunction",
  "BooleanConvert",
  "BooleanCountingFunction",
  "BooleanFunction",
  "BooleanGraph",
  "BooleanMaxterms",
  "BooleanMinimize",
  "BooleanMinterms",
  "BooleanQ",
  "BooleanRegion",
  "Booleans",
  "BooleanStrings",
  "BooleanTable",
  "BooleanVariables",
  "BorderDimensions",
  "BorelTannerDistribution",
  "Bottom",
  "BottomHatTransform",
  "BoundaryDiscretizeGraphics",
  "BoundaryDiscretizeRegion",
  "BoundaryMesh",
  "BoundaryMeshRegion",
  "BoundaryMeshRegionQ",
  "BoundaryStyle",
  "BoundedRegionQ",
  "BoundingRegion",
  "Bounds",
  "Box",
  "BoxBaselineShift",
  "BoxData",
  "BoxDimensions",
  "Boxed",
  "Boxes",
  "BoxForm",
  "BoxFormFormatTypes",
  "BoxFrame",
  "BoxID",
  "BoxMargins",
  "BoxMatrix",
  "BoxObject",
  "BoxRatios",
  "BoxRotation",
  "BoxRotationPoint",
  "BoxStyle",
  "BoxWhiskerChart",
  "Bra",
  "BracketingBar",
  "BraKet",
  "BrayCurtisDistance",
  "BreadthFirstScan",
  "Break",
  "BridgeData",
  "BrightnessEqualize",
  "BroadcastStationData",
  "Brown",
  "BrownForsytheTest",
  "BrownianBridgeProcess",
  "BrowserCategory",
  "BSplineBasis",
  "BSplineCurve",
  "BSplineCurve3DBox",
  "BSplineCurve3DBoxOptions",
  "BSplineCurveBox",
  "BSplineCurveBoxOptions",
  "BSplineFunction",
  "BSplineSurface",
  "BSplineSurface3DBox",
  "BSplineSurface3DBoxOptions",
  "BubbleChart",
  "BubbleChart3D",
  "BubbleScale",
  "BubbleSizes",
  "BuildingData",
  "BulletGauge",
  "BusinessDayQ",
  "ButterflyGraph",
  "ButterworthFilterModel",
  "Button",
  "ButtonBar",
  "ButtonBox",
  "ButtonBoxOptions",
  "ButtonCell",
  "ButtonContents",
  "ButtonData",
  "ButtonEvaluator",
  "ButtonExpandable",
  "ButtonFrame",
  "ButtonFunction",
  "ButtonMargins",
  "ButtonMinHeight",
  "ButtonNote",
  "ButtonNotebook",
  "ButtonSource",
  "ButtonStyle",
  "ButtonStyleMenuListing",
  "Byte",
  "ByteArray",
  "ByteArrayFormat",
  "ByteArrayQ",
  "ByteArrayToString",
  "ByteCount",
  "ByteOrdering",
  "C",
  "CachedValue",
  "CacheGraphics",
  "CachePersistence",
  "CalendarConvert",
  "CalendarData",
  "CalendarType",
  "Callout",
  "CalloutMarker",
  "CalloutStyle",
  "CallPacket",
  "CanberraDistance",
  "Cancel",
  "CancelButton",
  "CandlestickChart",
  "CanonicalGraph",
  "CanonicalizePolygon",
  "CanonicalizePolyhedron",
  "CanonicalName",
  "CanonicalWarpingCorrespondence",
  "CanonicalWarpingDistance",
  "CantorMesh",
  "CantorStaircase",
  "Cap",
  "CapForm",
  "CapitalDifferentialD",
  "Capitalize",
  "CapsuleShape",
  "CaptureRunning",
  "CardinalBSplineBasis",
  "CarlemanLinearize",
  "CarmichaelLambda",
  "CaseOrdering",
  "Cases",
  "CaseSensitive",
  "Cashflow",
  "Casoratian",
  "Catalan",
  "CatalanNumber",
  "Catch",
  "CategoricalDistribution",
  "Catenate",
  "CatenateLayer",
  "CauchyDistribution",
  "CauchyWindow",
  "CayleyGraph",
  "CDF",
  "CDFDeploy",
  "CDFInformation",
  "CDFWavelet",
  "Ceiling",
  "CelestialSystem",
  "Cell",
  "CellAutoOverwrite",
  "CellBaseline",
  "CellBoundingBox",
  "CellBracketOptions",
  "CellChangeTimes",
  "CellContents",
  "CellContext",
  "CellDingbat",
  "CellDynamicExpression",
  "CellEditDuplicate",
  "CellElementsBoundingBox",
  "CellElementSpacings",
  "CellEpilog",
  "CellEvaluationDuplicate",
  "CellEvaluationFunction",
  "CellEvaluationLanguage",
  "CellEventActions",
  "CellFrame",
  "CellFrameColor",
  "CellFrameLabelMargins",
  "CellFrameLabels",
  "CellFrameMargins",
  "CellGroup",
  "CellGroupData",
  "CellGrouping",
  "CellGroupingRules",
  "CellHorizontalScrolling",
  "CellID",
  "CellLabel",
  "CellLabelAutoDelete",
  "CellLabelMargins",
  "CellLabelPositioning",
  "CellLabelStyle",
  "CellLabelTemplate",
  "CellMargins",
  "CellObject",
  "CellOpen",
  "CellPrint",
  "CellProlog",
  "Cells",
  "CellSize",
  "CellStyle",
  "CellTags",
  "CellularAutomaton",
  "CensoredDistribution",
  "Censoring",
  "Center",
  "CenterArray",
  "CenterDot",
  "CentralFeature",
  "CentralMoment",
  "CentralMomentGeneratingFunction",
  "Cepstrogram",
  "CepstrogramArray",
  "CepstrumArray",
  "CForm",
  "ChampernowneNumber",
  "ChangeOptions",
  "ChannelBase",
  "ChannelBrokerAction",
  "ChannelDatabin",
  "ChannelHistoryLength",
  "ChannelListen",
  "ChannelListener",
  "ChannelListeners",
  "ChannelListenerWait",
  "ChannelObject",
  "ChannelPreSendFunction",
  "ChannelReceiverFunction",
  "ChannelSend",
  "ChannelSubscribers",
  "ChanVeseBinarize",
  "Character",
  "CharacterCounts",
  "CharacterEncoding",
  "CharacterEncodingsPath",
  "CharacteristicFunction",
  "CharacteristicPolynomial",
  "CharacterName",
  "CharacterNormalize",
  "CharacterRange",
  "Characters",
  "ChartBaseStyle",
  "ChartElementData",
  "ChartElementDataFunction",
  "ChartElementFunction",
  "ChartElements",
  "ChartLabels",
  "ChartLayout",
  "ChartLegends",
  "ChartStyle",
  "Chebyshev1FilterModel",
  "Chebyshev2FilterModel",
  "ChebyshevDistance",
  "ChebyshevT",
  "ChebyshevU",
  "Check",
  "CheckAbort",
  "CheckAll",
  "Checkbox",
  "CheckboxBar",
  "CheckboxBox",
  "CheckboxBoxOptions",
  "ChemicalData",
  "ChessboardDistance",
  "ChiDistribution",
  "ChineseRemainder",
  "ChiSquareDistribution",
  "ChoiceButtons",
  "ChoiceDialog",
  "CholeskyDecomposition",
  "Chop",
  "ChromaticityPlot",
  "ChromaticityPlot3D",
  "ChromaticPolynomial",
  "Circle",
  "CircleBox",
  "CircleDot",
  "CircleMinus",
  "CirclePlus",
  "CirclePoints",
  "CircleThrough",
  "CircleTimes",
  "CirculantGraph",
  "CircularOrthogonalMatrixDistribution",
  "CircularQuaternionMatrixDistribution",
  "CircularRealMatrixDistribution",
  "CircularSymplecticMatrixDistribution",
  "CircularUnitaryMatrixDistribution",
  "Circumsphere",
  "CityData",
  "ClassifierFunction",
  "ClassifierInformation",
  "ClassifierMeasurements",
  "ClassifierMeasurementsObject",
  "Classify",
  "ClassPriors",
  "Clear",
  "ClearAll",
  "ClearAttributes",
  "ClearCookies",
  "ClearPermissions",
  "ClearSystemCache",
  "ClebschGordan",
  "ClickPane",
  "Clip",
  "ClipboardNotebook",
  "ClipFill",
  "ClippingStyle",
  "ClipPlanes",
  "ClipPlanesStyle",
  "ClipRange",
  "Clock",
  "ClockGauge",
  "ClockwiseContourIntegral",
  "Close",
  "Closed",
  "CloseKernels",
  "ClosenessCentrality",
  "Closing",
  "ClosingAutoSave",
  "ClosingEvent",
  "ClosingSaveDialog",
  "CloudAccountData",
  "CloudBase",
  "CloudConnect",
  "CloudConnections",
  "CloudDeploy",
  "CloudDirectory",
  "CloudDisconnect",
  "CloudEvaluate",
  "CloudExport",
  "CloudExpression",
  "CloudExpressions",
  "CloudFunction",
  "CloudGet",
  "CloudImport",
  "CloudLoggingData",
  "CloudObject",
  "CloudObjectInformation",
  "CloudObjectInformationData",
  "CloudObjectNameFormat",
  "CloudObjects",
  "CloudObjectURLType",
  "CloudPublish",
  "CloudPut",
  "CloudRenderingMethod",
  "CloudSave",
  "CloudShare",
  "CloudSubmit",
  "CloudSymbol",
  "CloudUnshare",
  "CloudUserID",
  "ClusterClassify",
  "ClusterDissimilarityFunction",
  "ClusteringComponents",
  "ClusteringTree",
  "CMYKColor",
  "Coarse",
  "CodeAssistOptions",
  "Coefficient",
  "CoefficientArrays",
  "CoefficientDomain",
  "CoefficientList",
  "CoefficientRules",
  "CoifletWavelet",
  "Collect",
  "Colon",
  "ColonForm",
  "ColorBalance",
  "ColorCombine",
  "ColorConvert",
  "ColorCoverage",
  "ColorData",
  "ColorDataFunction",
  "ColorDetect",
  "ColorDistance",
  "ColorFunction",
  "ColorFunctionScaling",
  "Colorize",
  "ColorNegate",
  "ColorOutput",
  "ColorProfileData",
  "ColorQ",
  "ColorQuantize",
  "ColorReplace",
  "ColorRules",
  "ColorSelectorSettings",
  "ColorSeparate",
  "ColorSetter",
  "ColorSetterBox",
  "ColorSetterBoxOptions",
  "ColorSlider",
  "ColorsNear",
  "ColorSpace",
  "ColorToneMapping",
  "Column",
  "ColumnAlignments",
  "ColumnBackgrounds",
  "ColumnForm",
  "ColumnLines",
  "ColumnsEqual",
  "ColumnSpacings",
  "ColumnWidths",
  "CombinedEntityClass",
  "CombinerFunction",
  "CometData",
  "CommonDefaultFormatTypes",
  "Commonest",
  "CommonestFilter",
  "CommonName",
  "CommonUnits",
  "CommunityBoundaryStyle",
  "CommunityGraphPlot",
  "CommunityLabels",
  "CommunityRegionStyle",
  "CompanyData",
  "CompatibleUnitQ",
  "CompilationOptions",
  "CompilationTarget",
  "Compile",
  "Compiled",
  "CompiledCodeFunction",
  "CompiledFunction",
  "CompilerOptions",
  "Complement",
  "ComplementedEntityClass",
  "CompleteGraph",
  "CompleteGraphQ",
  "CompleteKaryTree",
  "CompletionsListPacket",
  "Complex",
  "ComplexContourPlot",
  "Complexes",
  "ComplexExpand",
  "ComplexInfinity",
  "ComplexityFunction",
  "ComplexListPlot",
  "ComplexPlot",
  "ComplexPlot3D",
  "ComplexRegionPlot",
  "ComplexStreamPlot",
  "ComplexVectorPlot",
  "ComponentMeasurements",
  "ComponentwiseContextMenu",
  "Compose",
  "ComposeList",
  "ComposeSeries",
  "CompositeQ",
  "Composition",
  "CompoundElement",
  "CompoundExpression",
  "CompoundPoissonDistribution",
  "CompoundPoissonProcess",
  "CompoundRenewalProcess",
  "Compress",
  "CompressedData",
  "CompressionLevel",
  "ComputeUncertainty",
  "Condition",
  "ConditionalExpression",
  "Conditioned",
  "Cone",
  "ConeBox",
  "ConfidenceLevel",
  "ConfidenceRange",
  "ConfidenceTransform",
  "ConfigurationPath",
  "ConformAudio",
  "ConformImages",
  "Congruent",
  "ConicHullRegion",
  "ConicHullRegion3DBox",
  "ConicHullRegionBox",
  "ConicOptimization",
  "Conjugate",
  "ConjugateTranspose",
  "Conjunction",
  "Connect",
  "ConnectedComponents",
  "ConnectedGraphComponents",
  "ConnectedGraphQ",
  "ConnectedMeshComponents",
  "ConnectedMoleculeComponents",
  "ConnectedMoleculeQ",
  "ConnectionSettings",
  "ConnectLibraryCallbackFunction",
  "ConnectSystemModelComponents",
  "ConnesWindow",
  "ConoverTest",
  "ConsoleMessage",
  "ConsoleMessagePacket",
  "Constant",
  "ConstantArray",
  "ConstantArrayLayer",
  "ConstantImage",
  "ConstantPlusLayer",
  "ConstantRegionQ",
  "Constants",
  "ConstantTimesLayer",
  "ConstellationData",
  "ConstrainedMax",
  "ConstrainedMin",
  "Construct",
  "Containing",
  "ContainsAll",
  "ContainsAny",
  "ContainsExactly",
  "ContainsNone",
  "ContainsOnly",
  "ContentFieldOptions",
  "ContentLocationFunction",
  "ContentObject",
  "ContentPadding",
  "ContentsBoundingBox",
  "ContentSelectable",
  "ContentSize",
  "Context",
  "ContextMenu",
  "Contexts",
  "ContextToFileName",
  "Continuation",
  "Continue",
  "ContinuedFraction",
  "ContinuedFractionK",
  "ContinuousAction",
  "ContinuousMarkovProcess",
  "ContinuousTask",
  "ContinuousTimeModelQ",
  "ContinuousWaveletData",
  "ContinuousWaveletTransform",
  "ContourDetect",
  "ContourGraphics",
  "ContourIntegral",
  "ContourLabels",
  "ContourLines",
  "ContourPlot",
  "ContourPlot3D",
  "Contours",
  "ContourShading",
  "ContourSmoothing",
  "ContourStyle",
  "ContraharmonicMean",
  "ContrastiveLossLayer",
  "Control",
  "ControlActive",
  "ControlAlignment",
  "ControlGroupContentsBox",
  "ControllabilityGramian",
  "ControllabilityMatrix",
  "ControllableDecomposition",
  "ControllableModelQ",
  "ControllerDuration",
  "ControllerInformation",
  "ControllerInformationData",
  "ControllerLinking",
  "ControllerManipulate",
  "ControllerMethod",
  "ControllerPath",
  "ControllerState",
  "ControlPlacement",
  "ControlsRendering",
  "ControlType",
  "Convergents",
  "ConversionOptions",
  "ConversionRules",
  "ConvertToBitmapPacket",
  "ConvertToPostScript",
  "ConvertToPostScriptPacket",
  "ConvexHullMesh",
  "ConvexPolygonQ",
  "ConvexPolyhedronQ",
  "ConvolutionLayer",
  "Convolve",
  "ConwayGroupCo1",
  "ConwayGroupCo2",
  "ConwayGroupCo3",
  "CookieFunction",
  "Cookies",
  "CoordinateBoundingBox",
  "CoordinateBoundingBoxArray",
  "CoordinateBounds",
  "CoordinateBoundsArray",
  "CoordinateChartData",
  "CoordinatesToolOptions",
  "CoordinateTransform",
  "CoordinateTransformData",
  "CoprimeQ",
  "Coproduct",
  "CopulaDistribution",
  "Copyable",
  "CopyDatabin",
  "CopyDirectory",
  "CopyFile",
  "CopyTag",
  "CopyToClipboard",
  "CornerFilter",
  "CornerNeighbors",
  "Correlation",
  "CorrelationDistance",
  "CorrelationFunction",
  "CorrelationTest",
  "Cos",
  "Cosh",
  "CoshIntegral",
  "CosineDistance",
  "CosineWindow",
  "CosIntegral",
  "Cot",
  "Coth",
  "Count",
  "CountDistinct",
  "CountDistinctBy",
  "CounterAssignments",
  "CounterBox",
  "CounterBoxOptions",
  "CounterClockwiseContourIntegral",
  "CounterEvaluator",
  "CounterFunction",
  "CounterIncrements",
  "CounterStyle",
  "CounterStyleMenuListing",
  "CountRoots",
  "CountryData",
  "Counts",
  "CountsBy",
  "Covariance",
  "CovarianceEstimatorFunction",
  "CovarianceFunction",
  "CoxianDistribution",
  "CoxIngersollRossProcess",
  "CoxModel",
  "CoxModelFit",
  "CramerVonMisesTest",
  "CreateArchive",
  "CreateCellID",
  "CreateChannel",
  "CreateCloudExpression",
  "CreateDatabin",
  "CreateDataStructure",
  "CreateDataSystemModel",
  "CreateDialog",
  "CreateDirectory",
  "CreateDocument",
  "CreateFile",
  "CreateIntermediateDirectories",
  "CreateManagedLibraryExpression",
  "CreateNotebook",
  "CreatePacletArchive",
  "CreatePalette",
  "CreatePalettePacket",
  "CreatePermissionsGroup",
  "CreateScheduledTask",
  "CreateSearchIndex",
  "CreateSystemModel",
  "CreateTemporary",
  "CreateUUID",
  "CreateWindow",
  "CriterionFunction",
  "CriticalityFailureImportance",
  "CriticalitySuccessImportance",
  "CriticalSection",
  "Cross",
  "CrossEntropyLossLayer",
  "CrossingCount",
  "CrossingDetect",
  "CrossingPolygon",
  "CrossMatrix",
  "Csc",
  "Csch",
  "CTCLossLayer",
  "Cube",
  "CubeRoot",
  "Cubics",
  "Cuboid",
  "CuboidBox",
  "Cumulant",
  "CumulantGeneratingFunction",
  "Cup",
  "CupCap",
  "Curl",
  "CurlyDoubleQuote",
  "CurlyQuote",
  "CurrencyConvert",
  "CurrentDate",
  "CurrentImage",
  "CurrentlySpeakingPacket",
  "CurrentNotebookImage",
  "CurrentScreenImage",
  "CurrentValue",
  "Curry",
  "CurryApplied",
  "CurvatureFlowFilter",
  "CurveClosed",
  "Cyan",
  "CycleGraph",
  "CycleIndexPolynomial",
  "Cycles",
  "CyclicGroup",
  "Cyclotomic",
  "Cylinder",
  "CylinderBox",
  "CylindricalDecomposition",
  "D",
  "DagumDistribution",
  "DamData",
  "DamerauLevenshteinDistance",
  "DampingFactor",
  "Darker",
  "Dashed",
  "Dashing",
  "DatabaseConnect",
  "DatabaseDisconnect",
  "DatabaseReference",
  "Databin",
  "DatabinAdd",
  "DatabinRemove",
  "Databins",
  "DatabinUpload",
  "DataCompression",
  "DataDistribution",
  "DataRange",
  "DataReversed",
  "Dataset",
  "DatasetDisplayPanel",
  "DataStructure",
  "DataStructureQ",
  "Date",
  "DateBounds",
  "Dated",
  "DateDelimiters",
  "DateDifference",
  "DatedUnit",
  "DateFormat",
  "DateFunction",
  "DateHistogram",
  "DateInterval",
  "DateList",
  "DateListLogPlot",
  "DateListPlot",
  "DateListStepPlot",
  "DateObject",
  "DateObjectQ",
  "DateOverlapsQ",
  "DatePattern",
  "DatePlus",
  "DateRange",
  "DateReduction",
  "DateString",
  "DateTicksFormat",
  "DateValue",
  "DateWithinQ",
  "DaubechiesWavelet",
  "DavisDistribution",
  "DawsonF",
  "DayCount",
  "DayCountConvention",
  "DayHemisphere",
  "DaylightQ",
  "DayMatchQ",
  "DayName",
  "DayNightTerminator",
  "DayPlus",
  "DayRange",
  "DayRound",
  "DeBruijnGraph",
  "DeBruijnSequence",
  "Debug",
  "DebugTag",
  "Decapitalize",
  "Decimal",
  "DecimalForm",
  "DeclareKnownSymbols",
  "DeclarePackage",
  "Decompose",
  "DeconvolutionLayer",
  "Decrement",
  "Decrypt",
  "DecryptFile",
  "DedekindEta",
  "DeepSpaceProbeData",
  "Default",
  "DefaultAxesStyle",
  "DefaultBaseStyle",
  "DefaultBoxStyle",
  "DefaultButton",
  "DefaultColor",
  "DefaultControlPlacement",
  "DefaultDuplicateCellStyle",
  "DefaultDuration",
  "DefaultElement",
  "DefaultFaceGridsStyle",
  "DefaultFieldHintStyle",
  "DefaultFont",
  "DefaultFontProperties",
  "DefaultFormatType",
  "DefaultFormatTypeForStyle",
  "DefaultFrameStyle",
  "DefaultFrameTicksStyle",
  "DefaultGridLinesStyle",
  "DefaultInlineFormatType",
  "DefaultInputFormatType",
  "DefaultLabelStyle",
  "DefaultMenuStyle",
  "DefaultNaturalLanguage",
  "DefaultNewCellStyle",
  "DefaultNewInlineCellStyle",
  "DefaultNotebook",
  "DefaultOptions",
  "DefaultOutputFormatType",
  "DefaultPrintPrecision",
  "DefaultStyle",
  "DefaultStyleDefinitions",
  "DefaultTextFormatType",
  "DefaultTextInlineFormatType",
  "DefaultTicksStyle",
  "DefaultTooltipStyle",
  "DefaultValue",
  "DefaultValues",
  "Defer",
  "DefineExternal",
  "DefineInputStreamMethod",
  "DefineOutputStreamMethod",
  "DefineResourceFunction",
  "Definition",
  "Degree",
  "DegreeCentrality",
  "DegreeGraphDistribution",
  "DegreeLexicographic",
  "DegreeReverseLexicographic",
  "DEigensystem",
  "DEigenvalues",
  "Deinitialization",
  "Del",
  "DelaunayMesh",
  "Delayed",
  "Deletable",
  "Delete",
  "DeleteAnomalies",
  "DeleteBorderComponents",
  "DeleteCases",
  "DeleteChannel",
  "DeleteCloudExpression",
  "DeleteContents",
  "DeleteDirectory",
  "DeleteDuplicates",
  "DeleteDuplicatesBy",
  "DeleteFile",
  "DeleteMissing",
  "DeleteObject",
  "DeletePermissionsKey",
  "DeleteSearchIndex",
  "DeleteSmallComponents",
  "DeleteStopwords",
  "DeleteWithContents",
  "DeletionWarning",
  "DelimitedArray",
  "DelimitedSequence",
  "Delimiter",
  "DelimiterFlashTime",
  "DelimiterMatching",
  "Delimiters",
  "DeliveryFunction",
  "Dendrogram",
  "Denominator",
  "DensityGraphics",
  "DensityHistogram",
  "DensityPlot",
  "DensityPlot3D",
  "DependentVariables",
  "Deploy",
  "Deployed",
  "Depth",
  "DepthFirstScan",
  "Derivative",
  "DerivativeFilter",
  "DerivedKey",
  "DescriptorStateSpace",
  "DesignMatrix",
  "DestroyAfterEvaluation",
  "Det",
  "DeviceClose",
  "DeviceConfigure",
  "DeviceExecute",
  "DeviceExecuteAsynchronous",
  "DeviceObject",
  "DeviceOpen",
  "DeviceOpenQ",
  "DeviceRead",
  "DeviceReadBuffer",
  "DeviceReadLatest",
  "DeviceReadList",
  "DeviceReadTimeSeries",
  "Devices",
  "DeviceStreams",
  "DeviceWrite",
  "DeviceWriteBuffer",
  "DGaussianWavelet",
  "DiacriticalPositioning",
  "Diagonal",
  "DiagonalizableMatrixQ",
  "DiagonalMatrix",
  "DiagonalMatrixQ",
  "Dialog",
  "DialogIndent",
  "DialogInput",
  "DialogLevel",
  "DialogNotebook",
  "DialogProlog",
  "DialogReturn",
  "DialogSymbols",
  "Diamond",
  "DiamondMatrix",
  "DiceDissimilarity",
  "DictionaryLookup",
  "DictionaryWordQ",
  "DifferenceDelta",
  "DifferenceOrder",
  "DifferenceQuotient",
  "DifferenceRoot",
  "DifferenceRootReduce",
  "Differences",
  "DifferentialD",
  "DifferentialRoot",
  "DifferentialRootReduce",
  "DifferentiatorFilter",
  "DigitalSignature",
  "DigitBlock",
  "DigitBlockMinimum",
  "DigitCharacter",
  "DigitCount",
  "DigitQ",
  "DihedralAngle",
  "DihedralGroup",
  "Dilation",
  "DimensionalCombinations",
  "DimensionalMeshComponents",
  "DimensionReduce",
  "DimensionReducerFunction",
  "DimensionReduction",
  "Dimensions",
  "DiracComb",
  "DiracDelta",
  "DirectedEdge",
  "DirectedEdges",
  "DirectedGraph",
  "DirectedGraphQ",
  "DirectedInfinity",
  "Direction",
  "Directive",
  "Directory",
  "DirectoryName",
  "DirectoryQ",
  "DirectoryStack",
  "DirichletBeta",
  "DirichletCharacter",
  "DirichletCondition",
  "DirichletConvolve",
  "DirichletDistribution",
  "DirichletEta",
  "DirichletL",
  "DirichletLambda",
  "DirichletTransform",
  "DirichletWindow",
  "DisableConsolePrintPacket",
  "DisableFormatting",
  "DiscreteAsymptotic",
  "DiscreteChirpZTransform",
  "DiscreteConvolve",
  "DiscreteDelta",
  "DiscreteHadamardTransform",
  "DiscreteIndicator",
  "DiscreteLimit",
  "DiscreteLQEstimatorGains",
  "DiscreteLQRegulatorGains",
  "DiscreteLyapunovSolve",
  "DiscreteMarkovProcess",
  "DiscreteMaxLimit",
  "DiscreteMinLimit",
  "DiscretePlot",
  "DiscretePlot3D",
  "DiscreteRatio",
  "DiscreteRiccatiSolve",
  "DiscreteShift",
  "DiscreteTimeModelQ",
  "DiscreteUniformDistribution",
  "DiscreteVariables",
  "DiscreteWaveletData",
  "DiscreteWaveletPacketTransform",
  "DiscreteWaveletTransform",
  "DiscretizeGraphics",
  "DiscretizeRegion",
  "Discriminant",
  "DisjointQ",
  "Disjunction",
  "Disk",
  "DiskBox",
  "DiskMatrix",
  "DiskSegment",
  "Dispatch",
  "DispatchQ",
  "DispersionEstimatorFunction",
  "Display",
  "DisplayAllSteps",
  "DisplayEndPacket",
  "DisplayFlushImagePacket",
  "DisplayForm",
  "DisplayFunction",
  "DisplayPacket",
  "DisplayRules",
  "DisplaySetSizePacket",
  "DisplayString",
  "DisplayTemporary",
  "DisplayWith",
  "DisplayWithRef",
  "DisplayWithVariable",
  "DistanceFunction",
  "DistanceMatrix",
  "DistanceTransform",
  "Distribute",
  "Distributed",
  "DistributedContexts",
  "DistributeDefinitions",
  "DistributionChart",
  "DistributionDomain",
  "DistributionFitTest",
  "DistributionParameterAssumptions",
  "DistributionParameterQ",
  "Dithering",
  "Div",
  "Divergence",
  "Divide",
  "DivideBy",
  "Dividers",
  "DivideSides",
  "Divisible",
  "Divisors",
  "DivisorSigma",
  "DivisorSum",
  "DMSList",
  "DMSString",
  "Do",
  "DockedCells",
  "DocumentGenerator",
  "DocumentGeneratorInformation",
  "DocumentGeneratorInformationData",
  "DocumentGenerators",
  "DocumentNotebook",
  "DocumentWeightingRules",
  "Dodecahedron",
  "DomainRegistrationInformation",
  "DominantColors",
  "DOSTextFormat",
  "Dot",
  "DotDashed",
  "DotEqual",
  "DotLayer",
  "DotPlusLayer",
  "Dotted",
  "DoubleBracketingBar",
  "DoubleContourIntegral",
  "DoubleDownArrow",
  "DoubleLeftArrow",
  "DoubleLeftRightArrow",
  "DoubleLeftTee",
  "DoubleLongLeftArrow",
  "DoubleLongLeftRightArrow",
  "DoubleLongRightArrow",
  "DoubleRightArrow",
  "DoubleRightTee",
  "DoubleUpArrow",
  "DoubleUpDownArrow",
  "DoubleVerticalBar",
  "DoublyInfinite",
  "Down",
  "DownArrow",
  "DownArrowBar",
  "DownArrowUpArrow",
  "DownLeftRightVector",
  "DownLeftTeeVector",
  "DownLeftVector",
  "DownLeftVectorBar",
  "DownRightTeeVector",
  "DownRightVector",
  "DownRightVectorBar",
  "Downsample",
  "DownTee",
  "DownTeeArrow",
  "DownValues",
  "DragAndDrop",
  "DrawEdges",
  "DrawFrontFaces",
  "DrawHighlighted",
  "Drop",
  "DropoutLayer",
  "DSolve",
  "DSolveValue",
  "Dt",
  "DualLinearProgramming",
  "DualPolyhedron",
  "DualSystemsModel",
  "DumpGet",
  "DumpSave",
  "DuplicateFreeQ",
  "Duration",
  "Dynamic",
  "DynamicBox",
  "DynamicBoxOptions",
  "DynamicEvaluationTimeout",
  "DynamicGeoGraphics",
  "DynamicImage",
  "DynamicLocation",
  "DynamicModule",
  "DynamicModuleBox",
  "DynamicModuleBoxOptions",
  "DynamicModuleParent",
  "DynamicModuleValues",
  "DynamicName",
  "DynamicNamespace",
  "DynamicReference",
  "DynamicSetting",
  "DynamicUpdating",
  "DynamicWrapper",
  "DynamicWrapperBox",
  "DynamicWrapperBoxOptions",
  "E",
  "EarthImpactData",
  "EarthquakeData",
  "EccentricityCentrality",
  "Echo",
  "EchoFunction",
  "EclipseType",
  "EdgeAdd",
  "EdgeBetweennessCentrality",
  "EdgeCapacity",
  "EdgeCapForm",
  "EdgeColor",
  "EdgeConnectivity",
  "EdgeContract",
  "EdgeCost",
  "EdgeCount",
  "EdgeCoverQ",
  "EdgeCycleMatrix",
  "EdgeDashing",
  "EdgeDelete",
  "EdgeDetect",
  "EdgeForm",
  "EdgeIndex",
  "EdgeJoinForm",
  "EdgeLabeling",
  "EdgeLabels",
  "EdgeLabelStyle",
  "EdgeList",
  "EdgeOpacity",
  "EdgeQ",
  "EdgeRenderingFunction",
  "EdgeRules",
  "EdgeShapeFunction",
  "EdgeStyle",
  "EdgeTaggedGraph",
  "EdgeTaggedGraphQ",
  "EdgeTags",
  "EdgeThickness",
  "EdgeWeight",
  "EdgeWeightedGraphQ",
  "Editable",
  "EditButtonSettings",
  "EditCellTagsSettings",
  "EditDistance",
  "EffectiveInterest",
  "Eigensystem",
  "Eigenvalues",
  "EigenvectorCentrality",
  "Eigenvectors",
  "Element",
  "ElementData",
  "ElementwiseLayer",
  "ElidedForms",
  "Eliminate",
  "EliminationOrder",
  "Ellipsoid",
  "EllipticE",
  "EllipticExp",
  "EllipticExpPrime",
  "EllipticF",
  "EllipticFilterModel",
  "EllipticK",
  "EllipticLog",
  "EllipticNomeQ",
  "EllipticPi",
  "EllipticReducedHalfPeriods",
  "EllipticTheta",
  "EllipticThetaPrime",
  "EmbedCode",
  "EmbeddedHTML",
  "EmbeddedService",
  "EmbeddingLayer",
  "EmbeddingObject",
  "EmitSound",
  "EmphasizeSyntaxErrors",
  "EmpiricalDistribution",
  "Empty",
  "EmptyGraphQ",
  "EmptyRegion",
  "EnableConsolePrintPacket",
  "Enabled",
  "Encode",
  "Encrypt",
  "EncryptedObject",
  "EncryptFile",
  "End",
  "EndAdd",
  "EndDialogPacket",
  "EndFrontEndInteractionPacket",
  "EndOfBuffer",
  "EndOfFile",
  "EndOfLine",
  "EndOfString",
  "EndPackage",
  "EngineEnvironment",
  "EngineeringForm",
  "Enter",
  "EnterExpressionPacket",
  "EnterTextPacket",
  "Entity",
  "EntityClass",
  "EntityClassList",
  "EntityCopies",
  "EntityFunction",
  "EntityGroup",
  "EntityInstance",
  "EntityList",
  "EntityPrefetch",
  "EntityProperties",
  "EntityProperty",
  "EntityPropertyClass",
  "EntityRegister",
  "EntityStore",
  "EntityStores",
  "EntityTypeName",
  "EntityUnregister",
  "EntityValue",
  "Entropy",
  "EntropyFilter",
  "Environment",
  "Epilog",
  "EpilogFunction",
  "Equal",
  "EqualColumns",
  "EqualRows",
  "EqualTilde",
  "EqualTo",
  "EquatedTo",
  "Equilibrium",
  "EquirippleFilterKernel",
  "Equivalent",
  "Erf",
  "Erfc",
  "Erfi",
  "ErlangB",
  "ErlangC",
  "ErlangDistribution",
  "Erosion",
  "ErrorBox",
  "ErrorBoxOptions",
  "ErrorNorm",
  "ErrorPacket",
  "ErrorsDialogSettings",
  "EscapeRadius",
  "EstimatedBackground",
  "EstimatedDistribution",
  "EstimatedProcess",
  "EstimatorGains",
  "EstimatorRegulator",
  "EuclideanDistance",
  "EulerAngles",
  "EulerCharacteristic",
  "EulerE",
  "EulerGamma",
  "EulerianGraphQ",
  "EulerMatrix",
  "EulerPhi",
  "Evaluatable",
  "Evaluate",
  "Evaluated",
  "EvaluatePacket",
  "EvaluateScheduledTask",
  "EvaluationBox",
  "EvaluationCell",
  "EvaluationCompletionAction",
  "EvaluationData",
  "EvaluationElements",
  "EvaluationEnvironment",
  "EvaluationMode",
  "EvaluationMonitor",
  "EvaluationNotebook",
  "EvaluationObject",
  "EvaluationOrder",
  "Evaluator",
  "EvaluatorNames",
  "EvenQ",
  "EventData",
  "EventEvaluator",
  "EventHandler",
  "EventHandlerTag",
  "EventLabels",
  "EventSeries",
  "ExactBlackmanWindow",
  "ExactNumberQ",
  "ExactRootIsolation",
  "ExampleData",
  "Except",
  "ExcludedForms",
  "ExcludedLines",
  "ExcludedPhysicalQuantities",
  "ExcludePods",
  "Exclusions",
  "ExclusionsStyle",
  "Exists",
  "Exit",
  "ExitDialog",
  "ExoplanetData",
  "Exp",
  "Expand",
  "ExpandAll",
  "ExpandDenominator",
  "ExpandFileName",
  "ExpandNumerator",
  "Expectation",
  "ExpectationE",
  "ExpectedValue",
  "ExpGammaDistribution",
  "ExpIntegralE",
  "ExpIntegralEi",
  "ExpirationDate",
  "Exponent",
  "ExponentFunction",
  "ExponentialDistribution",
  "ExponentialFamily",
  "ExponentialGeneratingFunction",
  "ExponentialMovingAverage",
  "ExponentialPowerDistribution",
  "ExponentPosition",
  "ExponentStep",
  "Export",
  "ExportAutoReplacements",
  "ExportByteArray",
  "ExportForm",
  "ExportPacket",
  "ExportString",
  "Expression",
  "ExpressionCell",
  "ExpressionGraph",
  "ExpressionPacket",
  "ExpressionUUID",
  "ExpToTrig",
  "ExtendedEntityClass",
  "ExtendedGCD",
  "Extension",
  "ExtentElementFunction",
  "ExtentMarkers",
  "ExtentSize",
  "ExternalBundle",
  "ExternalCall",
  "ExternalDataCharacterEncoding",
  "ExternalEvaluate",
  "ExternalFunction",
  "ExternalFunctionName",
  "ExternalIdentifier",
  "ExternalObject",
  "ExternalOptions",
  "ExternalSessionObject",
  "ExternalSessions",
  "ExternalStorageBase",
  "ExternalStorageDownload",
  "ExternalStorageGet",
  "ExternalStorageObject",
  "ExternalStoragePut",
  "ExternalStorageUpload",
  "ExternalTypeSignature",
  "ExternalValue",
  "Extract",
  "ExtractArchive",
  "ExtractLayer",
  "ExtractPacletArchive",
  "ExtremeValueDistribution",
  "FaceAlign",
  "FaceForm",
  "FaceGrids",
  "FaceGridsStyle",
  "FacialFeatures",
  "Factor",
  "FactorComplete",
  "Factorial",
  "Factorial2",
  "FactorialMoment",
  "FactorialMomentGeneratingFunction",
  "FactorialPower",
  "FactorInteger",
  "FactorList",
  "FactorSquareFree",
  "FactorSquareFreeList",
  "FactorTerms",
  "FactorTermsList",
  "Fail",
  "Failure",
  "FailureAction",
  "FailureDistribution",
  "FailureQ",
  "False",
  "FareySequence",
  "FARIMAProcess",
  "FeatureDistance",
  "FeatureExtract",
  "FeatureExtraction",
  "FeatureExtractor",
  "FeatureExtractorFunction",
  "FeatureNames",
  "FeatureNearest",
  "FeatureSpacePlot",
  "FeatureSpacePlot3D",
  "FeatureTypes",
  "FEDisableConsolePrintPacket",
  "FeedbackLinearize",
  "FeedbackSector",
  "FeedbackSectorStyle",
  "FeedbackType",
  "FEEnableConsolePrintPacket",
  "FetalGrowthData",
  "Fibonacci",
  "Fibonorial",
  "FieldCompletionFunction",
  "FieldHint",
  "FieldHintStyle",
  "FieldMasked",
  "FieldSize",
  "File",
  "FileBaseName",
  "FileByteCount",
  "FileConvert",
  "FileDate",
  "FileExistsQ",
  "FileExtension",
  "FileFormat",
  "FileHandler",
  "FileHash",
  "FileInformation",
  "FileName",
  "FileNameDepth",
  "FileNameDialogSettings",
  "FileNameDrop",
  "FileNameForms",
  "FileNameJoin",
  "FileNames",
  "FileNameSetter",
  "FileNameSplit",
  "FileNameTake",
  "FilePrint",
  "FileSize",
  "FileSystemMap",
  "FileSystemScan",
  "FileTemplate",
  "FileTemplateApply",
  "FileType",
  "FilledCurve",
  "FilledCurveBox",
  "FilledCurveBoxOptions",
  "Filling",
  "FillingStyle",
  "FillingTransform",
  "FilteredEntityClass",
  "FilterRules",
  "FinancialBond",
  "FinancialData",
  "FinancialDerivative",
  "FinancialIndicator",
  "Find",
  "FindAnomalies",
  "FindArgMax",
  "FindArgMin",
  "FindChannels",
  "FindClique",
  "FindClusters",
  "FindCookies",
  "FindCurvePath",
  "FindCycle",
  "FindDevices",
  "FindDistribution",
  "FindDistributionParameters",
  "FindDivisions",
  "FindEdgeCover",
  "FindEdgeCut",
  "FindEdgeIndependentPaths",
  "FindEquationalProof",
  "FindEulerianCycle",
  "FindExternalEvaluators",
  "FindFaces",
  "FindFile",
  "FindFit",
  "FindFormula",
  "FindFundamentalCycles",
  "FindGeneratingFunction",
  "FindGeoLocation",
  "FindGeometricConjectures",
  "FindGeometricTransform",
  "FindGraphCommunities",
  "FindGraphIsomorphism",
  "FindGraphPartition",
  "FindHamiltonianCycle",
  "FindHamiltonianPath",
  "FindHiddenMarkovStates",
  "FindImageText",
  "FindIndependentEdgeSet",
  "FindIndependentVertexSet",
  "FindInstance",
  "FindIntegerNullVector",
  "FindKClan",
  "FindKClique",
  "FindKClub",
  "FindKPlex",
  "FindLibrary",
  "FindLinearRecurrence",
  "FindList",
  "FindMatchingColor",
  "FindMaximum",
  "FindMaximumCut",
  "FindMaximumFlow",
  "FindMaxValue",
  "FindMeshDefects",
  "FindMinimum",
  "FindMinimumCostFlow",
  "FindMinimumCut",
  "FindMinValue",
  "FindMoleculeSubstructure",
  "FindPath",
  "FindPeaks",
  "FindPermutation",
  "FindPostmanTour",
  "FindProcessParameters",
  "FindRepeat",
  "FindRoot",
  "FindSequenceFunction",
  "FindSettings",
  "FindShortestPath",
  "FindShortestTour",
  "FindSpanningTree",
  "FindSystemModelEquilibrium",
  "FindTextualAnswer",
  "FindThreshold",
  "FindTransientRepeat",
  "FindVertexCover",
  "FindVertexCut",
  "FindVertexIndependentPaths",
  "Fine",
  "FinishDynamic",
  "FiniteAbelianGroupCount",
  "FiniteGroupCount",
  "FiniteGroupData",
  "First",
  "FirstCase",
  "FirstPassageTimeDistribution",
  "FirstPosition",
  "FischerGroupFi22",
  "FischerGroupFi23",
  "FischerGroupFi24Prime",
  "FisherHypergeometricDistribution",
  "FisherRatioTest",
  "FisherZDistribution",
  "Fit",
  "FitAll",
  "FitRegularization",
  "FittedModel",
  "FixedOrder",
  "FixedPoint",
  "FixedPointList",
  "FlashSelection",
  "Flat",
  "Flatten",
  "FlattenAt",
  "FlattenLayer",
  "FlatTopWindow",
  "FlipView",
  "Floor",
  "FlowPolynomial",
  "FlushPrintOutputPacket",
  "Fold",
  "FoldList",
  "FoldPair",
  "FoldPairList",
  "FollowRedirects",
  "Font",
  "FontColor",
  "FontFamily",
  "FontForm",
  "FontName",
  "FontOpacity",
  "FontPostScriptName",
  "FontProperties",
  "FontReencoding",
  "FontSize",
  "FontSlant",
  "FontSubstitutions",
  "FontTracking",
  "FontVariations",
  "FontWeight",
  "For",
  "ForAll",
  "ForceVersionInstall",
  "Format",
  "FormatRules",
  "FormatType",
  "FormatTypeAutoConvert",
  "FormatValues",
  "FormBox",
  "FormBoxOptions",
  "FormControl",
  "FormFunction",
  "FormLayoutFunction",
  "FormObject",
  "FormPage",
  "FormTheme",
  "FormulaData",
  "FormulaLookup",
  "FortranForm",
  "Forward",
  "ForwardBackward",
  "Fourier",
  "FourierCoefficient",
  "FourierCosCoefficient",
  "FourierCosSeries",
  "FourierCosTransform",
  "FourierDCT",
  "FourierDCTFilter",
  "FourierDCTMatrix",
  "FourierDST",
  "FourierDSTMatrix",
  "FourierMatrix",
  "FourierParameters",
  "FourierSequenceTransform",
  "FourierSeries",
  "FourierSinCoefficient",
  "FourierSinSeries",
  "FourierSinTransform",
  "FourierTransform",
  "FourierTrigSeries",
  "FractionalBrownianMotionProcess",
  "FractionalGaussianNoiseProcess",
  "FractionalPart",
  "FractionBox",
  "FractionBoxOptions",
  "FractionLine",
  "Frame",
  "FrameBox",
  "FrameBoxOptions",
  "Framed",
  "FrameInset",
  "FrameLabel",
  "Frameless",
  "FrameMargins",
  "FrameRate",
  "FrameStyle",
  "FrameTicks",
  "FrameTicksStyle",
  "FRatioDistribution",
  "FrechetDistribution",
  "FreeQ",
  "FrenetSerretSystem",
  "FrequencySamplingFilterKernel",
  "FresnelC",
  "FresnelF",
  "FresnelG",
  "FresnelS",
  "Friday",
  "FrobeniusNumber",
  "FrobeniusSolve",
  "FromAbsoluteTime",
  "FromCharacterCode",
  "FromCoefficientRules",
  "FromContinuedFraction",
  "FromDate",
  "FromDigits",
  "FromDMS",
  "FromEntity",
  "FromJulianDate",
  "FromLetterNumber",
  "FromPolarCoordinates",
  "FromRomanNumeral",
  "FromSphericalCoordinates",
  "FromUnixTime",
  "Front",
  "FrontEndDynamicExpression",
  "FrontEndEventActions",
  "FrontEndExecute",
  "FrontEndObject",
  "FrontEndResource",
  "FrontEndResourceString",
  "FrontEndStackSize",
  "FrontEndToken",
  "FrontEndTokenExecute",
  "FrontEndValueCache",
  "FrontEndVersion",
  "FrontFaceColor",
  "FrontFaceOpacity",
  "Full",
  "FullAxes",
  "FullDefinition",
  "FullForm",
  "FullGraphics",
  "FullInformationOutputRegulator",
  "FullOptions",
  "FullRegion",
  "FullSimplify",
  "Function",
  "FunctionCompile",
  "FunctionCompileExport",
  "FunctionCompileExportByteArray",
  "FunctionCompileExportLibrary",
  "FunctionCompileExportString",
  "FunctionDomain",
  "FunctionExpand",
  "FunctionInterpolation",
  "FunctionPeriod",
  "FunctionRange",
  "FunctionSpace",
  "FussellVeselyImportance",
  "GaborFilter",
  "GaborMatrix",
  "GaborWavelet",
  "GainMargins",
  "GainPhaseMargins",
  "GalaxyData",
  "GalleryView",
  "Gamma",
  "GammaDistribution",
  "GammaRegularized",
  "GapPenalty",
  "GARCHProcess",
  "GatedRecurrentLayer",
  "Gather",
  "GatherBy",
  "GaugeFaceElementFunction",
  "GaugeFaceStyle",
  "GaugeFrameElementFunction",
  "GaugeFrameSize",
  "GaugeFrameStyle",
  "GaugeLabels",
  "GaugeMarkers",
  "GaugeStyle",
  "GaussianFilter",
  "GaussianIntegers",
  "GaussianMatrix",
  "GaussianOrthogonalMatrixDistribution",
  "GaussianSymplecticMatrixDistribution",
  "GaussianUnitaryMatrixDistribution",
  "GaussianWindow",
  "GCD",
  "GegenbauerC",
  "General",
  "GeneralizedLinearModelFit",
  "GenerateAsymmetricKeyPair",
  "GenerateConditions",
  "GeneratedCell",
  "GeneratedDocumentBinding",
  "GenerateDerivedKey",
  "GenerateDigitalSignature",
  "GenerateDocument",
  "GeneratedParameters",
  "GeneratedQuantityMagnitudes",
  "GenerateFileSignature",
  "GenerateHTTPResponse",
  "GenerateSecuredAuthenticationKey",
  "GenerateSymmetricKey",
  "GeneratingFunction",
  "GeneratorDescription",
  "GeneratorHistoryLength",
  "GeneratorOutputType",
  "Generic",
  "GenericCylindricalDecomposition",
  "GenomeData",
  "GenomeLookup",
  "GeoAntipode",
  "GeoArea",
  "GeoArraySize",
  "GeoBackground",
  "GeoBoundingBox",
  "GeoBounds",
  "GeoBoundsRegion",
  "GeoBubbleChart",
  "GeoCenter",
  "GeoCircle",
  "GeoContourPlot",
  "GeoDensityPlot",
  "GeodesicClosing",
  "GeodesicDilation",
  "GeodesicErosion",
  "GeodesicOpening",
  "GeoDestination",
  "GeodesyData",
  "GeoDirection",
  "GeoDisk",
  "GeoDisplacement",
  "GeoDistance",
  "GeoDistanceList",
  "GeoElevationData",
  "GeoEntities",
  "GeoGraphics",
  "GeogravityModelData",
  "GeoGridDirectionDifference",
  "GeoGridLines",
  "GeoGridLinesStyle",
  "GeoGridPosition",
  "GeoGridRange",
  "GeoGridRangePadding",
  "GeoGridUnitArea",
  "GeoGridUnitDistance",
  "GeoGridVector",
  "GeoGroup",
  "GeoHemisphere",
  "GeoHemisphereBoundary",
  "GeoHistogram",
  "GeoIdentify",
  "GeoImage",
  "GeoLabels",
  "GeoLength",
  "GeoListPlot",
  "GeoLocation",
  "GeologicalPeriodData",
  "GeomagneticModelData",
  "GeoMarker",
  "GeometricAssertion",
  "GeometricBrownianMotionProcess",
  "GeometricDistribution",
  "GeometricMean",
  "GeometricMeanFilter",
  "GeometricOptimization",
  "GeometricScene",
  "GeometricTransformation",
  "GeometricTransformation3DBox",
  "GeometricTransformation3DBoxOptions",
  "GeometricTransformationBox",
  "GeometricTransformationBoxOptions",
  "GeoModel",
  "GeoNearest",
  "GeoPath",
  "GeoPosition",
  "GeoPositionENU",
  "GeoPositionXYZ",
  "GeoProjection",
  "GeoProjectionData",
  "GeoRange",
  "GeoRangePadding",
  "GeoRegionValuePlot",
  "GeoResolution",
  "GeoScaleBar",
  "GeoServer",
  "GeoSmoothHistogram",
  "GeoStreamPlot",
  "GeoStyling",
  "GeoStylingImageFunction",
  "GeoVariant",
  "GeoVector",
  "GeoVectorENU",
  "GeoVectorPlot",
  "GeoVectorXYZ",
  "GeoVisibleRegion",
  "GeoVisibleRegionBoundary",
  "GeoWithinQ",
  "GeoZoomLevel",
  "GestureHandler",
  "GestureHandlerTag",
  "Get",
  "GetBoundingBoxSizePacket",
  "GetContext",
  "GetEnvironment",
  "GetFileName",
  "GetFrontEndOptionsDataPacket",
  "GetLinebreakInformationPacket",
  "GetMenusPacket",
  "GetPageBreakInformationPacket",
  "Glaisher",
  "GlobalClusteringCoefficient",
  "GlobalPreferences",
  "GlobalSession",
  "Glow",
  "GoldenAngle",
  "GoldenRatio",
  "GompertzMakehamDistribution",
  "GoochShading",
  "GoodmanKruskalGamma",
  "GoodmanKruskalGammaTest",
  "Goto",
  "Grad",
  "Gradient",
  "GradientFilter",
  "GradientOrientationFilter",
  "GrammarApply",
  "GrammarRules",
  "GrammarToken",
  "Graph",
  "Graph3D",
  "GraphAssortativity",
  "GraphAutomorphismGroup",
  "GraphCenter",
  "GraphComplement",
  "GraphData",
  "GraphDensity",
  "GraphDiameter",
  "GraphDifference",
  "GraphDisjointUnion",
  "GraphDistance",
  "GraphDistanceMatrix",
  "GraphElementData",
  "GraphEmbedding",
  "GraphHighlight",
  "GraphHighlightStyle",
  "GraphHub",
  "Graphics",
  "Graphics3D",
  "Graphics3DBox",
  "Graphics3DBoxOptions",
  "GraphicsArray",
  "GraphicsBaseline",
  "GraphicsBox",
  "GraphicsBoxOptions",
  "GraphicsColor",
  "GraphicsColumn",
  "GraphicsComplex",
  "GraphicsComplex3DBox",
  "GraphicsComplex3DBoxOptions",
  "GraphicsComplexBox",
  "GraphicsComplexBoxOptions",
  "GraphicsContents",
  "GraphicsData",
  "GraphicsGrid",
  "GraphicsGridBox",
  "GraphicsGroup",
  "GraphicsGroup3DBox",
  "GraphicsGroup3DBoxOptions",
  "GraphicsGroupBox",
  "GraphicsGroupBoxOptions",
  "GraphicsGrouping",
  "GraphicsHighlightColor",
  "GraphicsRow",
  "GraphicsSpacing",
  "GraphicsStyle",
  "GraphIntersection",
  "GraphLayout",
  "GraphLinkEfficiency",
  "GraphPeriphery",
  "GraphPlot",
  "GraphPlot3D",
  "GraphPower",
  "GraphPropertyDistribution",
  "GraphQ",
  "GraphRadius",
  "GraphReciprocity",
  "GraphRoot",
  "GraphStyle",
  "GraphUnion",
  "Gray",
  "GrayLevel",
  "Greater",
  "GreaterEqual",
  "GreaterEqualLess",
  "GreaterEqualThan",
  "GreaterFullEqual",
  "GreaterGreater",
  "GreaterLess",
  "GreaterSlantEqual",
  "GreaterThan",
  "GreaterTilde",
  "Green",
  "GreenFunction",
  "Grid",
  "GridBaseline",
  "GridBox",
  "GridBoxAlignment",
  "GridBoxBackground",
  "GridBoxDividers",
  "GridBoxFrame",
  "GridBoxItemSize",
  "GridBoxItemStyle",
  "GridBoxOptions",
  "GridBoxSpacings",
  "GridCreationSettings",
  "GridDefaultElement",
  "GridElementStyleOptions",
  "GridFrame",
  "GridFrameMargins",
  "GridGraph",
  "GridLines",
  "GridLinesStyle",
  "GroebnerBasis",
  "GroupActionBase",
  "GroupBy",
  "GroupCentralizer",
  "GroupElementFromWord",
  "GroupElementPosition",
  "GroupElementQ",
  "GroupElements",
  "GroupElementToWord",
  "GroupGenerators",
  "Groupings",
  "GroupMultiplicationTable",
  "GroupOrbits",
  "GroupOrder",
  "GroupPageBreakWithin",
  "GroupSetwiseStabilizer",
  "GroupStabilizer",
  "GroupStabilizerChain",
  "GroupTogetherGrouping",
  "GroupTogetherNestedGrouping",
  "GrowCutComponents",
  "Gudermannian",
  "GuidedFilter",
  "GumbelDistribution",
  "HaarWavelet",
  "HadamardMatrix",
  "HalfLine",
  "HalfNormalDistribution",
  "HalfPlane",
  "HalfSpace",
  "HalftoneShading",
  "HamiltonianGraphQ",
  "HammingDistance",
  "HammingWindow",
  "HandlerFunctions",
  "HandlerFunctionsKeys",
  "HankelH1",
  "HankelH2",
  "HankelMatrix",
  "HankelTransform",
  "HannPoissonWindow",
  "HannWindow",
  "HaradaNortonGroupHN",
  "HararyGraph",
  "HarmonicMean",
  "HarmonicMeanFilter",
  "HarmonicNumber",
  "Hash",
  "HatchFilling",
  "HatchShading",
  "Haversine",
  "HazardFunction",
  "Head",
  "HeadCompose",
  "HeaderAlignment",
  "HeaderBackground",
  "HeaderDisplayFunction",
  "HeaderLines",
  "HeaderSize",
  "HeaderStyle",
  "Heads",
  "HeavisideLambda",
  "HeavisidePi",
  "HeavisideTheta",
  "HeldGroupHe",
  "HeldPart",
  "HelpBrowserLookup",
  "HelpBrowserNotebook",
  "HelpBrowserSettings",
  "Here",
  "HermiteDecomposition",
  "HermiteH",
  "HermitianMatrixQ",
  "HessenbergDecomposition",
  "Hessian",
  "HeunB",
  "HeunBPrime",
  "HeunC",
  "HeunCPrime",
  "HeunD",
  "HeunDPrime",
  "HeunG",
  "HeunGPrime",
  "HeunT",
  "HeunTPrime",
  "HexadecimalCharacter",
  "Hexahedron",
  "HexahedronBox",
  "HexahedronBoxOptions",
  "HiddenItems",
  "HiddenMarkovProcess",
  "HiddenSurface",
  "Highlighted",
  "HighlightGraph",
  "HighlightImage",
  "HighlightMesh",
  "HighpassFilter",
  "HigmanSimsGroupHS",
  "HilbertCurve",
  "HilbertFilter",
  "HilbertMatrix",
  "Histogram",
  "Histogram3D",
  "HistogramDistribution",
  "HistogramList",
  "HistogramTransform",
  "HistogramTransformInterpolation",
  "HistoricalPeriodData",
  "HitMissTransform",
  "HITSCentrality",
  "HjorthDistribution",
  "HodgeDual",
  "HoeffdingD",
  "HoeffdingDTest",
  "Hold",
  "HoldAll",
  "HoldAllComplete",
  "HoldComplete",
  "HoldFirst",
  "HoldForm",
  "HoldPattern",
  "HoldRest",
  "HolidayCalendar",
  "HomeDirectory",
  "HomePage",
  "Horizontal",
  "HorizontalForm",
  "HorizontalGauge",
  "HorizontalScrollPosition",
  "HornerForm",
  "HostLookup",
  "HotellingTSquareDistribution",
  "HoytDistribution",
  "HTMLSave",
  "HTTPErrorResponse",
  "HTTPRedirect",
  "HTTPRequest",
  "HTTPRequestData",
  "HTTPResponse",
  "Hue",
  "HumanGrowthData",
  "HumpDownHump",
  "HumpEqual",
  "HurwitzLerchPhi",
  "HurwitzZeta",
  "HyperbolicDistribution",
  "HypercubeGraph",
  "HyperexponentialDistribution",
  "Hyperfactorial",
  "Hypergeometric0F1",
  "Hypergeometric0F1Regularized",
  "Hypergeometric1F1",
  "Hypergeometric1F1Regularized",
  "Hypergeometric2F1",
  "Hypergeometric2F1Regularized",
  "HypergeometricDistribution",
  "HypergeometricPFQ",
  "HypergeometricPFQRegularized",
  "HypergeometricU",
  "Hyperlink",
  "HyperlinkAction",
  "HyperlinkCreationSettings",
  "Hyperplane",
  "Hyphenation",
  "HyphenationOptions",
  "HypoexponentialDistribution",
  "HypothesisTestData",
  "I",
  "IconData",
  "Iconize",
  "IconizedObject",
  "IconRules",
  "Icosahedron",
  "Identity",
  "IdentityMatrix",
  "If",
  "IgnoreCase",
  "IgnoreDiacritics",
  "IgnorePunctuation",
  "IgnoreSpellCheck",
  "IgnoringInactive",
  "Im",
  "Image",
  "Image3D",
  "Image3DProjection",
  "Image3DSlices",
  "ImageAccumulate",
  "ImageAdd",
  "ImageAdjust",
  "ImageAlign",
  "ImageApply",
  "ImageApplyIndexed",
  "ImageAspectRatio",
  "ImageAssemble",
  "ImageAugmentationLayer",
  "ImageBoundingBoxes",
  "ImageCache",
  "ImageCacheValid",
  "ImageCapture",
  "ImageCaptureFunction",
  "ImageCases",
  "ImageChannels",
  "ImageClip",
  "ImageCollage",
  "ImageColorSpace",
  "ImageCompose",
  "ImageContainsQ",
  "ImageContents",
  "ImageConvolve",
  "ImageCooccurrence",
  "ImageCorners",
  "ImageCorrelate",
  "ImageCorrespondingPoints",
  "ImageCrop",
  "ImageData",
  "ImageDeconvolve",
  "ImageDemosaic",
  "ImageDifference",
  "ImageDimensions",
  "ImageDisplacements",
  "ImageDistance",
  "ImageEffect",
  "ImageExposureCombine",
  "ImageFeatureTrack",
  "ImageFileApply",
  "ImageFileFilter",
  "ImageFileScan",
  "ImageFilter",
  "ImageFocusCombine",
  "ImageForestingComponents",
  "ImageFormattingWidth",
  "ImageForwardTransformation",
  "ImageGraphics",
  "ImageHistogram",
  "ImageIdentify",
  "ImageInstanceQ",
  "ImageKeypoints",
  "ImageLabels",
  "ImageLegends",
  "ImageLevels",
  "ImageLines",
  "ImageMargins",
  "ImageMarker",
  "ImageMarkers",
  "ImageMeasurements",
  "ImageMesh",
  "ImageMultiply",
  "ImageOffset",
  "ImagePad",
  "ImagePadding",
  "ImagePartition",
  "ImagePeriodogram",
  "ImagePerspectiveTransformation",
  "ImagePosition",
  "ImagePreviewFunction",
  "ImagePyramid",
  "ImagePyramidApply",
  "ImageQ",
  "ImageRangeCache",
  "ImageRecolor",
  "ImageReflect",
  "ImageRegion",
  "ImageResize",
  "ImageResolution",
  "ImageRestyle",
  "ImageRotate",
  "ImageRotated",
  "ImageSaliencyFilter",
  "ImageScaled",
  "ImageScan",
  "ImageSize",
  "ImageSizeAction",
  "ImageSizeCache",
  "ImageSizeMultipliers",
  "ImageSizeRaw",
  "ImageSubtract",
  "ImageTake",
  "ImageTransformation",
  "ImageTrim",
  "ImageType",
  "ImageValue",
  "ImageValuePositions",
  "ImagingDevice",
  "ImplicitRegion",
  "Implies",
  "Import",
  "ImportAutoReplacements",
  "ImportByteArray",
  "ImportOptions",
  "ImportString",
  "ImprovementImportance",
  "In",
  "Inactivate",
  "Inactive",
  "IncidenceGraph",
  "IncidenceList",
  "IncidenceMatrix",
  "IncludeAromaticBonds",
  "IncludeConstantBasis",
  "IncludeDefinitions",
  "IncludeDirectories",
  "IncludeFileExtension",
  "IncludeGeneratorTasks",
  "IncludeHydrogens",
  "IncludeInflections",
  "IncludeMetaInformation",
  "IncludePods",
  "IncludeQuantities",
  "IncludeRelatedTables",
  "IncludeSingularTerm",
  "IncludeWindowTimes",
  "Increment",
  "IndefiniteMatrixQ",
  "Indent",
  "IndentingNewlineSpacings",
  "IndentMaxFraction",
  "IndependenceTest",
  "IndependentEdgeSetQ",
  "IndependentPhysicalQuantity",
  "IndependentUnit",
  "IndependentUnitDimension",
  "IndependentVertexSetQ",
  "Indeterminate",
  "IndeterminateThreshold",
  "IndexCreationOptions",
  "Indexed",
  "IndexEdgeTaggedGraph",
  "IndexGraph",
  "IndexTag",
  "Inequality",
  "InexactNumberQ",
  "InexactNumbers",
  "InfiniteFuture",
  "InfiniteLine",
  "InfinitePast",
  "InfinitePlane",
  "Infinity",
  "Infix",
  "InflationAdjust",
  "InflationMethod",
  "Information",
  "InformationData",
  "InformationDataGrid",
  "Inherited",
  "InheritScope",
  "InhomogeneousPoissonProcess",
  "InitialEvaluationHistory",
  "Initialization",
  "InitializationCell",
  "InitializationCellEvaluation",
  "InitializationCellWarning",
  "InitializationObjects",
  "InitializationValue",
  "Initialize",
  "InitialSeeding",
  "InlineCounterAssignments",
  "InlineCounterIncrements",
  "InlineRules",
  "Inner",
  "InnerPolygon",
  "InnerPolyhedron",
  "Inpaint",
  "Input",
  "InputAliases",
  "InputAssumptions",
  "InputAutoReplacements",
  "InputField",
  "InputFieldBox",
  "InputFieldBoxOptions",
  "InputForm",
  "InputGrouping",
  "InputNamePacket",
  "InputNotebook",
  "InputPacket",
  "InputSettings",
  "InputStream",
  "InputString",
  "InputStringPacket",
  "InputToBoxFormPacket",
  "Insert",
  "InsertionFunction",
  "InsertionPointObject",
  "InsertLinebreaks",
  "InsertResults",
  "Inset",
  "Inset3DBox",
  "Inset3DBoxOptions",
  "InsetBox",
  "InsetBoxOptions",
  "Insphere",
  "Install",
  "InstallService",
  "InstanceNormalizationLayer",
  "InString",
  "Integer",
  "IntegerDigits",
  "IntegerExponent",
  "IntegerLength",
  "IntegerName",
  "IntegerPart",
  "IntegerPartitions",
  "IntegerQ",
  "IntegerReverse",
  "Integers",
  "IntegerString",
  "Integral",
  "Integrate",
  "Interactive",
  "InteractiveTradingChart",
  "Interlaced",
  "Interleaving",
  "InternallyBalancedDecomposition",
  "InterpolatingFunction",
  "InterpolatingPolynomial",
  "Interpolation",
  "InterpolationOrder",
  "InterpolationPoints",
  "InterpolationPrecision",
  "Interpretation",
  "InterpretationBox",
  "InterpretationBoxOptions",
  "InterpretationFunction",
  "Interpreter",
  "InterpretTemplate",
  "InterquartileRange",
  "Interrupt",
  "InterruptSettings",
  "IntersectedEntityClass",
  "IntersectingQ",
  "Intersection",
  "Interval",
  "IntervalIntersection",
  "IntervalMarkers",
  "IntervalMarkersStyle",
  "IntervalMemberQ",
  "IntervalSlider",
  "IntervalUnion",
  "Into",
  "Inverse",
  "InverseBetaRegularized",
  "InverseCDF",
  "InverseChiSquareDistribution",
  "InverseContinuousWaveletTransform",
  "InverseDistanceTransform",
  "InverseEllipticNomeQ",
  "InverseErf",
  "InverseErfc",
  "InverseFourier",
  "InverseFourierCosTransform",
  "InverseFourierSequenceTransform",
  "InverseFourierSinTransform",
  "InverseFourierTransform",
  "InverseFunction",
  "InverseFunctions",
  "InverseGammaDistribution",
  "InverseGammaRegularized",
  "InverseGaussianDistribution",
  "InverseGudermannian",
  "InverseHankelTransform",
  "InverseHaversine",
  "InverseImagePyramid",
  "InverseJacobiCD",
  "InverseJacobiCN",
  "InverseJacobiCS",
  "InverseJacobiDC",
  "InverseJacobiDN",
  "InverseJacobiDS",
  "InverseJacobiNC",
  "InverseJacobiND",
  "InverseJacobiNS",
  "InverseJacobiSC",
  "InverseJacobiSD",
  "InverseJacobiSN",
  "InverseLaplaceTransform",
  "InverseMellinTransform",
  "InversePermutation",
  "InverseRadon",
  "InverseRadonTransform",
  "InverseSeries",
  "InverseShortTimeFourier",
  "InverseSpectrogram",
  "InverseSurvivalFunction",
  "InverseTransformedRegion",
  "InverseWaveletTransform",
  "InverseWeierstrassP",
  "InverseWishartMatrixDistribution",
  "InverseZTransform",
  "Invisible",
  "InvisibleApplication",
  "InvisibleTimes",
  "IPAddress",
  "IrreduciblePolynomialQ",
  "IslandData",
  "IsolatingInterval",
  "IsomorphicGraphQ",
  "IsotopeData",
  "Italic",
  "Item",
  "ItemAspectRatio",
  "ItemBox",
  "ItemBoxOptions",
  "ItemDisplayFunction",
  "ItemSize",
  "ItemStyle",
  "ItoProcess",
  "JaccardDissimilarity",
  "JacobiAmplitude",
  "Jacobian",
  "JacobiCD",
  "JacobiCN",
  "JacobiCS",
  "JacobiDC",
  "JacobiDN",
  "JacobiDS",
  "JacobiNC",
  "JacobiND",
  "JacobiNS",
  "JacobiP",
  "JacobiSC",
  "JacobiSD",
  "JacobiSN",
  "JacobiSymbol",
  "JacobiZeta",
  "JankoGroupJ1",
  "JankoGroupJ2",
  "JankoGroupJ3",
  "JankoGroupJ4",
  "JarqueBeraALMTest",
  "JohnsonDistribution",
  "Join",
  "JoinAcross",
  "Joined",
  "JoinedCurve",
  "JoinedCurveBox",
  "JoinedCurveBoxOptions",
  "JoinForm",
  "JordanDecomposition",
  "JordanModelDecomposition",
  "JulianDate",
  "JuliaSetBoettcher",
  "JuliaSetIterationCount",
  "JuliaSetPlot",
  "JuliaSetPoints",
  "K",
  "KagiChart",
  "KaiserBesselWindow",
  "KaiserWindow",
  "KalmanEstimator",
  "KalmanFilter",
  "KarhunenLoeveDecomposition",
  "KaryTree",
  "KatzCentrality",
  "KCoreComponents",
  "KDistribution",
  "KEdgeConnectedComponents",
  "KEdgeConnectedGraphQ",
  "KeepExistingVersion",
  "KelvinBei",
  "KelvinBer",
  "KelvinKei",
  "KelvinKer",
  "KendallTau",
  "KendallTauTest",
  "KernelExecute",
  "KernelFunction",
  "KernelMixtureDistribution",
  "KernelObject",
  "Kernels",
  "Ket",
  "Key",
  "KeyCollisionFunction",
  "KeyComplement",
  "KeyDrop",
  "KeyDropFrom",
  "KeyExistsQ",
  "KeyFreeQ",
  "KeyIntersection",
  "KeyMap",
  "KeyMemberQ",
  "KeypointStrength",
  "Keys",
  "KeySelect",
  "KeySort",
  "KeySortBy",
  "KeyTake",
  "KeyUnion",
  "KeyValueMap",
  "KeyValuePattern",
  "Khinchin",
  "KillProcess",
  "KirchhoffGraph",
  "KirchhoffMatrix",
  "KleinInvariantJ",
  "KnapsackSolve",
  "KnightTourGraph",
  "KnotData",
  "KnownUnitQ",
  "KochCurve",
  "KolmogorovSmirnovTest",
  "KroneckerDelta",
  "KroneckerModelDecomposition",
  "KroneckerProduct",
  "KroneckerSymbol",
  "KuiperTest",
  "KumaraswamyDistribution",
  "Kurtosis",
  "KuwaharaFilter",
  "KVertexConnectedComponents",
  "KVertexConnectedGraphQ",
  "LABColor",
  "Label",
  "Labeled",
  "LabeledSlider",
  "LabelingFunction",
  "LabelingSize",
  "LabelStyle",
  "LabelVisibility",
  "LaguerreL",
  "LakeData",
  "LambdaComponents",
  "LambertW",
  "LaminaData",
  "LanczosWindow",
  "LandauDistribution",
  "Language",
  "LanguageCategory",
  "LanguageData",
  "LanguageIdentify",
  "LanguageOptions",
  "LaplaceDistribution",
  "LaplaceTransform",
  "Laplacian",
  "LaplacianFilter",
  "LaplacianGaussianFilter",
  "Large",
  "Larger",
  "Last",
  "Latitude",
  "LatitudeLongitude",
  "LatticeData",
  "LatticeReduce",
  "Launch",
  "LaunchKernels",
  "LayeredGraphPlot",
  "LayerSizeFunction",
  "LayoutInformation",
  "LCHColor",
  "LCM",
  "LeaderSize",
  "LeafCount",
  "LeapYearQ",
  "LearnDistribution",
  "LearnedDistribution",
  "LearningRate",
  "LearningRateMultipliers",
  "LeastSquares",
  "LeastSquaresFilterKernel",
  "Left",
  "LeftArrow",
  "LeftArrowBar",
  "LeftArrowRightArrow",
  "LeftDownTeeVector",
  "LeftDownVector",
  "LeftDownVectorBar",
  "LeftRightArrow",
  "LeftRightVector",
  "LeftTee",
  "LeftTeeArrow",
  "LeftTeeVector",
  "LeftTriangle",
  "LeftTriangleBar",
  "LeftTriangleEqual",
  "LeftUpDownVector",
  "LeftUpTeeVector",
  "LeftUpVector",
  "LeftUpVectorBar",
  "LeftVector",
  "LeftVectorBar",
  "LegendAppearance",
  "Legended",
  "LegendFunction",
  "LegendLabel",
  "LegendLayout",
  "LegendMargins",
  "LegendMarkers",
  "LegendMarkerSize",
  "LegendreP",
  "LegendreQ",
  "LegendreType",
  "Length",
  "LengthWhile",
  "LerchPhi",
  "Less",
  "LessEqual",
  "LessEqualGreater",
  "LessEqualThan",
  "LessFullEqual",
  "LessGreater",
  "LessLess",
  "LessSlantEqual",
  "LessThan",
  "LessTilde",
  "LetterCharacter",
  "LetterCounts",
  "LetterNumber",
  "LetterQ",
  "Level",
  "LeveneTest",
  "LeviCivitaTensor",
  "LevyDistribution",
  "Lexicographic",
  "LibraryDataType",
  "LibraryFunction",
  "LibraryFunctionError",
  "LibraryFunctionInformation",
  "LibraryFunctionLoad",
  "LibraryFunctionUnload",
  "LibraryLoad",
  "LibraryUnload",
  "LicenseID",
  "LiftingFilterData",
  "LiftingWaveletTransform",
  "LightBlue",
  "LightBrown",
  "LightCyan",
  "Lighter",
  "LightGray",
  "LightGreen",
  "Lighting",
  "LightingAngle",
  "LightMagenta",
  "LightOrange",
  "LightPink",
  "LightPurple",
  "LightRed",
  "LightSources",
  "LightYellow",
  "Likelihood",
  "Limit",
  "LimitsPositioning",
  "LimitsPositioningTokens",
  "LindleyDistribution",
  "Line",
  "Line3DBox",
  "Line3DBoxOptions",
  "LinearFilter",
  "LinearFractionalOptimization",
  "LinearFractionalTransform",
  "LinearGradientImage",
  "LinearizingTransformationData",
  "LinearLayer",
  "LinearModelFit",
  "LinearOffsetFunction",
  "LinearOptimization",
  "LinearProgramming",
  "LinearRecurrence",
  "LinearSolve",
  "LinearSolveFunction",
  "LineBox",
  "LineBoxOptions",
  "LineBreak",
  "LinebreakAdjustments",
  "LineBreakChart",
  "LinebreakSemicolonWeighting",
  "LineBreakWithin",
  "LineColor",
  "LineGraph",
  "LineIndent",
  "LineIndentMaxFraction",
  "LineIntegralConvolutionPlot",
  "LineIntegralConvolutionScale",
  "LineLegend",
  "LineOpacity",
  "LineSpacing",
  "LineWrapParts",
  "LinkActivate",
  "LinkClose",
  "LinkConnect",
  "LinkConnectedQ",
  "LinkCreate",
  "LinkError",
  "LinkFlush",
  "LinkFunction",
  "LinkHost",
  "LinkInterrupt",
  "LinkLaunch",
  "LinkMode",
  "LinkObject",
  "LinkOpen",
  "LinkOptions",
  "LinkPatterns",
  "LinkProtocol",
  "LinkRankCentrality",
  "LinkRead",
  "LinkReadHeld",
  "LinkReadyQ",
  "Links",
  "LinkService",
  "LinkWrite",
  "LinkWriteHeld",
  "LiouvilleLambda",
  "List",
  "Listable",
  "ListAnimate",
  "ListContourPlot",
  "ListContourPlot3D",
  "ListConvolve",
  "ListCorrelate",
  "ListCurvePathPlot",
  "ListDeconvolve",
  "ListDensityPlot",
  "ListDensityPlot3D",
  "Listen",
  "ListFormat",
  "ListFourierSequenceTransform",
  "ListInterpolation",
  "ListLineIntegralConvolutionPlot",
  "ListLinePlot",
  "ListLogLinearPlot",
  "ListLogLogPlot",
  "ListLogPlot",
  "ListPicker",
  "ListPickerBox",
  "ListPickerBoxBackground",
  "ListPickerBoxOptions",
  "ListPlay",
  "ListPlot",
  "ListPlot3D",
  "ListPointPlot3D",
  "ListPolarPlot",
  "ListQ",
  "ListSliceContourPlot3D",
  "ListSliceDensityPlot3D",
  "ListSliceVectorPlot3D",
  "ListStepPlot",
  "ListStreamDensityPlot",
  "ListStreamPlot",
  "ListSurfacePlot3D",
  "ListVectorDensityPlot",
  "ListVectorPlot",
  "ListVectorPlot3D",
  "ListZTransform",
  "Literal",
  "LiteralSearch",
  "LocalAdaptiveBinarize",
  "LocalCache",
  "LocalClusteringCoefficient",
  "LocalizeDefinitions",
  "LocalizeVariables",
  "LocalObject",
  "LocalObjects",
  "LocalResponseNormalizationLayer",
  "LocalSubmit",
  "LocalSymbol",
  "LocalTime",
  "LocalTimeZone",
  "LocationEquivalenceTest",
  "LocationTest",
  "Locator",
  "LocatorAutoCreate",
  "LocatorBox",
  "LocatorBoxOptions",
  "LocatorCentering",
  "LocatorPane",
  "LocatorPaneBox",
  "LocatorPaneBoxOptions",
  "LocatorRegion",
  "Locked",
  "Log",
  "Log10",
  "Log2",
  "LogBarnesG",
  "LogGamma",
  "LogGammaDistribution",
  "LogicalExpand",
  "LogIntegral",
  "LogisticDistribution",
  "LogisticSigmoid",
  "LogitModelFit",
  "LogLikelihood",
  "LogLinearPlot",
  "LogLogisticDistribution",
  "LogLogPlot",
  "LogMultinormalDistribution",
  "LogNormalDistribution",
  "LogPlot",
  "LogRankTest",
  "LogSeriesDistribution",
  "LongEqual",
  "Longest",
  "LongestCommonSequence",
  "LongestCommonSequencePositions",
  "LongestCommonSubsequence",
  "LongestCommonSubsequencePositions",
  "LongestMatch",
  "LongestOrderedSequence",
  "LongForm",
  "Longitude",
  "LongLeftArrow",
  "LongLeftRightArrow",
  "LongRightArrow",
  "LongShortTermMemoryLayer",
  "Lookup",
  "Loopback",
  "LoopFreeGraphQ",
  "Looping",
  "LossFunction",
  "LowerCaseQ",
  "LowerLeftArrow",
  "LowerRightArrow",
  "LowerTriangularize",
  "LowerTriangularMatrixQ",
  "LowpassFilter",
  "LQEstimatorGains",
  "LQGRegulator",
  "LQOutputRegulatorGains",
  "LQRegulatorGains",
  "LUBackSubstitution",
  "LucasL",
  "LuccioSamiComponents",
  "LUDecomposition",
  "LunarEclipse",
  "LUVColor",
  "LyapunovSolve",
  "LyonsGroupLy",
  "MachineID",
  "MachineName",
  "MachineNumberQ",
  "MachinePrecision",
  "MacintoshSystemPageSetup",
  "Magenta",
  "Magnification",
  "Magnify",
  "MailAddressValidation",
  "MailExecute",
  "MailFolder",
  "MailItem",
  "MailReceiverFunction",
  "MailResponseFunction",
  "MailSearch",
  "MailServerConnect",
  "MailServerConnection",
  "MailSettings",
  "MainSolve",
  "MaintainDynamicCaches",
  "Majority",
  "MakeBoxes",
  "MakeExpression",
  "MakeRules",
  "ManagedLibraryExpressionID",
  "ManagedLibraryExpressionQ",
  "MandelbrotSetBoettcher",
  "MandelbrotSetDistance",
  "MandelbrotSetIterationCount",
  "MandelbrotSetMemberQ",
  "MandelbrotSetPlot",
  "MangoldtLambda",
  "ManhattanDistance",
  "Manipulate",
  "Manipulator",
  "MannedSpaceMissionData",
  "MannWhitneyTest",
  "MantissaExponent",
  "Manual",
  "Map",
  "MapAll",
  "MapAt",
  "MapIndexed",
  "MAProcess",
  "MapThread",
  "MarchenkoPasturDistribution",
  "MarcumQ",
  "MardiaCombinedTest",
  "MardiaKurtosisTest",
  "MardiaSkewnessTest",
  "MarginalDistribution",
  "MarkovProcessProperties",
  "Masking",
  "MatchingDissimilarity",
  "MatchLocalNameQ",
  "MatchLocalNames",
  "MatchQ",
  "Material",
  "MathematicalFunctionData",
  "MathematicaNotation",
  "MathieuC",
  "MathieuCharacteristicA",
  "MathieuCharacteristicB",
  "MathieuCharacteristicExponent",
  "MathieuCPrime",
  "MathieuGroupM11",
  "MathieuGroupM12",
  "MathieuGroupM22",
  "MathieuGroupM23",
  "MathieuGroupM24",
  "MathieuS",
  "MathieuSPrime",
  "MathMLForm",
  "MathMLText",
  "Matrices",
  "MatrixExp",
  "MatrixForm",
  "MatrixFunction",
  "MatrixLog",
  "MatrixNormalDistribution",
  "MatrixPlot",
  "MatrixPower",
  "MatrixPropertyDistribution",
  "MatrixQ",
  "MatrixRank",
  "MatrixTDistribution",
  "Max",
  "MaxBend",
  "MaxCellMeasure",
  "MaxColorDistance",
  "MaxDate",
  "MaxDetect",
  "MaxDuration",
  "MaxExtraBandwidths",
  "MaxExtraConditions",
  "MaxFeatureDisplacement",
  "MaxFeatures",
  "MaxFilter",
  "MaximalBy",
  "Maximize",
  "MaxItems",
  "MaxIterations",
  "MaxLimit",
  "MaxMemoryUsed",
  "MaxMixtureKernels",
  "MaxOverlapFraction",
  "MaxPlotPoints",
  "MaxPoints",
  "MaxRecursion",
  "MaxStableDistribution",
  "MaxStepFraction",
  "MaxSteps",
  "MaxStepSize",
  "MaxTrainingRounds",
  "MaxValue",
  "MaxwellDistribution",
  "MaxWordGap",
  "McLaughlinGroupMcL",
  "Mean",
  "MeanAbsoluteLossLayer",
  "MeanAround",
  "MeanClusteringCoefficient",
  "MeanDegreeConnectivity",
  "MeanDeviation",
  "MeanFilter",
  "MeanGraphDistance",
  "MeanNeighborDegree",
  "MeanShift",
  "MeanShiftFilter",
  "MeanSquaredLossLayer",
  "Median",
  "MedianDeviation",
  "MedianFilter",
  "MedicalTestData",
  "Medium",
  "MeijerG",
  "MeijerGReduce",
  "MeixnerDistribution",
  "MellinConvolve",
  "MellinTransform",
  "MemberQ",
  "MemoryAvailable",
  "MemoryConstrained",
  "MemoryConstraint",
  "MemoryInUse",
  "MengerMesh",
  "Menu",
  "MenuAppearance",
  "MenuCommandKey",
  "MenuEvaluator",
  "MenuItem",
  "MenuList",
  "MenuPacket",
  "MenuSortingValue",
  "MenuStyle",
  "MenuView",
  "Merge",
  "MergeDifferences",
  "MergingFunction",
  "MersennePrimeExponent",
  "MersennePrimeExponentQ",
  "Mesh",
  "MeshCellCentroid",
  "MeshCellCount",
  "MeshCellHighlight",
  "MeshCellIndex",
  "MeshCellLabel",
  "MeshCellMarker",
  "MeshCellMeasure",
  "MeshCellQuality",
  "MeshCells",
  "MeshCellShapeFunction",
  "MeshCellStyle",
  "MeshConnectivityGraph",
  "MeshCoordinates",
  "MeshFunctions",
  "MeshPrimitives",
  "MeshQualityGoal",
  "MeshRange",
  "MeshRefinementFunction",
  "MeshRegion",
  "MeshRegionQ",
  "MeshShading",
  "MeshStyle",
  "Message",
  "MessageDialog",
  "MessageList",
  "MessageName",
  "MessageObject",
  "MessageOptions",
  "MessagePacket",
  "Messages",
  "MessagesNotebook",
  "MetaCharacters",
  "MetaInformation",
  "MeteorShowerData",
  "Method",
  "MethodOptions",
  "MexicanHatWavelet",
  "MeyerWavelet",
  "Midpoint",
  "Min",
  "MinColorDistance",
  "MinDate",
  "MinDetect",
  "MineralData",
  "MinFilter",
  "MinimalBy",
  "MinimalPolynomial",
  "MinimalStateSpaceModel",
  "Minimize",
  "MinimumTimeIncrement",
  "MinIntervalSize",
  "MinkowskiQuestionMark",
  "MinLimit",
  "MinMax",
  "MinorPlanetData",
  "Minors",
  "MinRecursion",
  "MinSize",
  "MinStableDistribution",
  "Minus",
  "MinusPlus",
  "MinValue",
  "Missing",
  "MissingBehavior",
  "MissingDataMethod",
  "MissingDataRules",
  "MissingQ",
  "MissingString",
  "MissingStyle",
  "MissingValuePattern",
  "MittagLefflerE",
  "MixedFractionParts",
  "MixedGraphQ",
  "MixedMagnitude",
  "MixedRadix",
  "MixedRadixQuantity",
  "MixedUnit",
  "MixtureDistribution",
  "Mod",
  "Modal",
  "Mode",
  "Modular",
  "ModularInverse",
  "ModularLambda",
  "Module",
  "Modulus",
  "MoebiusMu",
  "Molecule",
  "MoleculeContainsQ",
  "MoleculeEquivalentQ",
  "MoleculeGraph",
  "MoleculeModify",
  "MoleculePattern",
  "MoleculePlot",
  "MoleculePlot3D",
  "MoleculeProperty",
  "MoleculeQ",
  "MoleculeRecognize",
  "MoleculeValue",
  "Moment",
  "Momentary",
  "MomentConvert",
  "MomentEvaluate",
  "MomentGeneratingFunction",
  "MomentOfInertia",
  "Monday",
  "Monitor",
  "MonomialList",
  "MonomialOrder",
  "MonsterGroupM",
  "MoonPhase",
  "MoonPosition",
  "MorletWavelet",
  "MorphologicalBinarize",
  "MorphologicalBranchPoints",
  "MorphologicalComponents",
  "MorphologicalEulerNumber",
  "MorphologicalGraph",
  "MorphologicalPerimeter",
  "MorphologicalTransform",
  "MortalityData",
  "Most",
  "MountainData",
  "MouseAnnotation",
  "MouseAppearance",
  "MouseAppearanceTag",
  "MouseButtons",
  "Mouseover",
  "MousePointerNote",
  "MousePosition",
  "MovieData",
  "MovingAverage",
  "MovingMap",
  "MovingMedian",
  "MoyalDistribution",
  "Multicolumn",
  "MultiedgeStyle",
  "MultigraphQ",
  "MultilaunchWarning",
  "MultiLetterItalics",
  "MultiLetterStyle",
  "MultilineFunction",
  "Multinomial",
  "MultinomialDistribution",
  "MultinormalDistribution",
  "MultiplicativeOrder",
  "Multiplicity",
  "MultiplySides",
  "Multiselection",
  "MultivariateHypergeometricDistribution",
  "MultivariatePoissonDistribution",
  "MultivariateTDistribution",
  "N",
  "NakagamiDistribution",
  "NameQ",
  "Names",
  "NamespaceBox",
  "NamespaceBoxOptions",
  "Nand",
  "NArgMax",
  "NArgMin",
  "NBernoulliB",
  "NBodySimulation",
  "NBodySimulationData",
  "NCache",
  "NDEigensystem",
  "NDEigenvalues",
  "NDSolve",
  "NDSolveValue",
  "Nearest",
  "NearestFunction",
  "NearestMeshCells",
  "NearestNeighborGraph",
  "NearestTo",
  "NebulaData",
  "NeedCurrentFrontEndPackagePacket",
  "NeedCurrentFrontEndSymbolsPacket",
  "NeedlemanWunschSimilarity",
  "Needs",
  "Negative",
  "NegativeBinomialDistribution",
  "NegativeDefiniteMatrixQ",
  "NegativeIntegers",
  "NegativeMultinomialDistribution",
  "NegativeRationals",
  "NegativeReals",
  "NegativeSemidefiniteMatrixQ",
  "NeighborhoodData",
  "NeighborhoodGraph",
  "Nest",
  "NestedGreaterGreater",
  "NestedLessLess",
  "NestedScriptRules",
  "NestGraph",
  "NestList",
  "NestWhile",
  "NestWhileList",
  "NetAppend",
  "NetBidirectionalOperator",
  "NetChain",
  "NetDecoder",
  "NetDelete",
  "NetDrop",
  "NetEncoder",
  "NetEvaluationMode",
  "NetExtract",
  "NetFlatten",
  "NetFoldOperator",
  "NetGANOperator",
  "NetGraph",
  "NetInformation",
  "NetInitialize",
  "NetInsert",
  "NetInsertSharedArrays",
  "NetJoin",
  "NetMapOperator",
  "NetMapThreadOperator",
  "NetMeasurements",
  "NetModel",
  "NetNestOperator",
  "NetPairEmbeddingOperator",
  "NetPort",
  "NetPortGradient",
  "NetPrepend",
  "NetRename",
  "NetReplace",
  "NetReplacePart",
  "NetSharedArray",
  "NetStateObject",
  "NetTake",
  "NetTrain",
  "NetTrainResultsObject",
  "NetworkPacketCapture",
  "NetworkPacketRecording",
  "NetworkPacketRecordingDuring",
  "NetworkPacketTrace",
  "NeumannValue",
  "NevilleThetaC",
  "NevilleThetaD",
  "NevilleThetaN",
  "NevilleThetaS",
  "NewPrimitiveStyle",
  "NExpectation",
  "Next",
  "NextCell",
  "NextDate",
  "NextPrime",
  "NextScheduledTaskTime",
  "NHoldAll",
  "NHoldFirst",
  "NHoldRest",
  "NicholsGridLines",
  "NicholsPlot",
  "NightHemisphere",
  "NIntegrate",
  "NMaximize",
  "NMaxValue",
  "NMinimize",
  "NMinValue",
  "NominalVariables",
  "NonAssociative",
  "NoncentralBetaDistribution",
  "NoncentralChiSquareDistribution",
  "NoncentralFRatioDistribution",
  "NoncentralStudentTDistribution",
  "NonCommutativeMultiply",
  "NonConstants",
  "NondimensionalizationTransform",
  "None",
  "NoneTrue",
  "NonlinearModelFit",
  "NonlinearStateSpaceModel",
  "NonlocalMeansFilter",
  "NonNegative",
  "NonNegativeIntegers",
  "NonNegativeRationals",
  "NonNegativeReals",
  "NonPositive",
  "NonPositiveIntegers",
  "NonPositiveRationals",
  "NonPositiveReals",
  "Nor",
  "NorlundB",
  "Norm",
  "Normal",
  "NormalDistribution",
  "NormalGrouping",
  "NormalizationLayer",
  "Normalize",
  "Normalized",
  "NormalizedSquaredEuclideanDistance",
  "NormalMatrixQ",
  "NormalsFunction",
  "NormFunction",
  "Not",
  "NotCongruent",
  "NotCupCap",
  "NotDoubleVerticalBar",
  "Notebook",
  "NotebookApply",
  "NotebookAutoSave",
  "NotebookClose",
  "NotebookConvertSettings",
  "NotebookCreate",
  "NotebookCreateReturnObject",
  "NotebookDefault",
  "NotebookDelete",
  "NotebookDirectory",
  "NotebookDynamicExpression",
  "NotebookEvaluate",
  "NotebookEventActions",
  "NotebookFileName",
  "NotebookFind",
  "NotebookFindReturnObject",
  "NotebookGet",
  "NotebookGetLayoutInformationPacket",
  "NotebookGetMisspellingsPacket",
  "NotebookImport",
  "NotebookInformation",
  "NotebookInterfaceObject",
  "NotebookLocate",
  "NotebookObject",
  "NotebookOpen",
  "NotebookOpenReturnObject",
  "NotebookPath",
  "NotebookPrint",
  "NotebookPut",
  "NotebookPutReturnObject",
  "NotebookRead",
  "NotebookResetGeneratedCells",
  "Notebooks",
  "NotebookSave",
  "NotebookSaveAs",
  "NotebookSelection",
  "NotebookSetupLayoutInformationPacket",
  "NotebooksMenu",
  "NotebookTemplate",
  "NotebookWrite",
  "NotElement",
  "NotEqualTilde",
  "NotExists",
  "NotGreater",
  "NotGreaterEqual",
  "NotGreaterFullEqual",
  "NotGreaterGreater",
  "NotGreaterLess",
  "NotGreaterSlantEqual",
  "NotGreaterTilde",
  "Nothing",
  "NotHumpDownHump",
  "NotHumpEqual",
  "NotificationFunction",
  "NotLeftTriangle",
  "NotLeftTriangleBar",
  "NotLeftTriangleEqual",
  "NotLess",
  "NotLessEqual",
  "NotLessFullEqual",
  "NotLessGreater",
  "NotLessLess",
  "NotLessSlantEqual",
  "NotLessTilde",
  "NotNestedGreaterGreater",
  "NotNestedLessLess",
  "NotPrecedes",
  "NotPrecedesEqual",
  "NotPrecedesSlantEqual",
  "NotPrecedesTilde",
  "NotReverseElement",
  "NotRightTriangle",
  "NotRightTriangleBar",
  "NotRightTriangleEqual",
  "NotSquareSubset",
  "NotSquareSubsetEqual",
  "NotSquareSuperset",
  "NotSquareSupersetEqual",
  "NotSubset",
  "NotSubsetEqual",
  "NotSucceeds",
  "NotSucceedsEqual",
  "NotSucceedsSlantEqual",
  "NotSucceedsTilde",
  "NotSuperset",
  "NotSupersetEqual",
  "NotTilde",
  "NotTildeEqual",
  "NotTildeFullEqual",
  "NotTildeTilde",
  "NotVerticalBar",
  "Now",
  "NoWhitespace",
  "NProbability",
  "NProduct",
  "NProductFactors",
  "NRoots",
  "NSolve",
  "NSum",
  "NSumTerms",
  "NuclearExplosionData",
  "NuclearReactorData",
  "Null",
  "NullRecords",
  "NullSpace",
  "NullWords",
  "Number",
  "NumberCompose",
  "NumberDecompose",
  "NumberExpand",
  "NumberFieldClassNumber",
  "NumberFieldDiscriminant",
  "NumberFieldFundamentalUnits",
  "NumberFieldIntegralBasis",
  "NumberFieldNormRepresentatives",
  "NumberFieldRegulator",
  "NumberFieldRootsOfUnity",
  "NumberFieldSignature",
  "NumberForm",
  "NumberFormat",
  "NumberLinePlot",
  "NumberMarks",
  "NumberMultiplier",
  "NumberPadding",
  "NumberPoint",
  "NumberQ",
  "NumberSeparator",
  "NumberSigns",
  "NumberString",
  "Numerator",
  "NumeratorDenominator",
  "NumericalOrder",
  "NumericalSort",
  "NumericArray",
  "NumericArrayQ",
  "NumericArrayType",
  "NumericFunction",
  "NumericQ",
  "NuttallWindow",
  "NValues",
  "NyquistGridLines",
  "NyquistPlot",
  "O",
  "ObservabilityGramian",
  "ObservabilityMatrix",
  "ObservableDecomposition",
  "ObservableModelQ",
  "OceanData",
  "Octahedron",
  "OddQ",
  "Off",
  "Offset",
  "OLEData",
  "On",
  "ONanGroupON",
  "Once",
  "OneIdentity",
  "Opacity",
  "OpacityFunction",
  "OpacityFunctionScaling",
  "Open",
  "OpenAppend",
  "Opener",
  "OpenerBox",
  "OpenerBoxOptions",
  "OpenerView",
  "OpenFunctionInspectorPacket",
  "Opening",
  "OpenRead",
  "OpenSpecialOptions",
  "OpenTemporary",
  "OpenWrite",
  "Operate",
  "OperatingSystem",
  "OperatorApplied",
  "OptimumFlowData",
  "Optional",
  "OptionalElement",
  "OptionInspectorSettings",
  "OptionQ",
  "Options",
  "OptionsPacket",
  "OptionsPattern",
  "OptionValue",
  "OptionValueBox",
  "OptionValueBoxOptions",
  "Or",
  "Orange",
  "Order",
  "OrderDistribution",
  "OrderedQ",
  "Ordering",
  "OrderingBy",
  "OrderingLayer",
  "Orderless",
  "OrderlessPatternSequence",
  "OrnsteinUhlenbeckProcess",
  "Orthogonalize",
  "OrthogonalMatrixQ",
  "Out",
  "Outer",
  "OuterPolygon",
  "OuterPolyhedron",
  "OutputAutoOverwrite",
  "OutputControllabilityMatrix",
  "OutputControllableModelQ",
  "OutputForm",
  "OutputFormData",
  "OutputGrouping",
  "OutputMathEditExpression",
  "OutputNamePacket",
  "OutputResponse",
  "OutputSizeLimit",
  "OutputStream",
  "Over",
  "OverBar",
  "OverDot",
  "Overflow",
  "OverHat",
  "Overlaps",
  "Overlay",
  "OverlayBox",
  "OverlayBoxOptions",
  "Overscript",
  "OverscriptBox",
  "OverscriptBoxOptions",
  "OverTilde",
  "OverVector",
  "OverwriteTarget",
  "OwenT",
  "OwnValues",
  "Package",
  "PackingMethod",
  "PackPaclet",
  "PacletDataRebuild",
  "PacletDirectoryAdd",
  "PacletDirectoryLoad",
  "PacletDirectoryRemove",
  "PacletDirectoryUnload",
  "PacletDisable",
  "PacletEnable",
  "PacletFind",
  "PacletFindRemote",
  "PacletInformation",
  "PacletInstall",
  "PacletInstallSubmit",
  "PacletNewerQ",
  "PacletObject",
  "PacletObjectQ",
  "PacletSite",
  "PacletSiteObject",
  "PacletSiteRegister",
  "PacletSites",
  "PacletSiteUnregister",
  "PacletSiteUpdate",
  "PacletUninstall",
  "PacletUpdate",
  "PaddedForm",
  "Padding",
  "PaddingLayer",
  "PaddingSize",
  "PadeApproximant",
  "PadLeft",
  "PadRight",
  "PageBreakAbove",
  "PageBreakBelow",
  "PageBreakWithin",
  "PageFooterLines",
  "PageFooters",
  "PageHeaderLines",
  "PageHeaders",
  "PageHeight",
  "PageRankCentrality",
  "PageTheme",
  "PageWidth",
  "Pagination",
  "PairedBarChart",
  "PairedHistogram",
  "PairedSmoothHistogram",
  "PairedTTest",
  "PairedZTest",
  "PaletteNotebook",
  "PalettePath",
  "PalindromeQ",
  "Pane",
  "PaneBox",
  "PaneBoxOptions",
  "Panel",
  "PanelBox",
  "PanelBoxOptions",
  "Paneled",
  "PaneSelector",
  "PaneSelectorBox",
  "PaneSelectorBoxOptions",
  "PaperWidth",
  "ParabolicCylinderD",
  "ParagraphIndent",
  "ParagraphSpacing",
  "ParallelArray",
  "ParallelCombine",
  "ParallelDo",
  "Parallelepiped",
  "ParallelEvaluate",
  "Parallelization",
  "Parallelize",
  "ParallelMap",
  "ParallelNeeds",
  "Parallelogram",
  "ParallelProduct",
  "ParallelSubmit",
  "ParallelSum",
  "ParallelTable",
  "ParallelTry",
  "Parameter",
  "ParameterEstimator",
  "ParameterMixtureDistribution",
  "ParameterVariables",
  "ParametricFunction",
  "ParametricNDSolve",
  "ParametricNDSolveValue",
  "ParametricPlot",
  "ParametricPlot3D",
  "ParametricRampLayer",
  "ParametricRegion",
  "ParentBox",
  "ParentCell",
  "ParentConnect",
  "ParentDirectory",
  "ParentForm",
  "Parenthesize",
  "ParentList",
  "ParentNotebook",
  "ParetoDistribution",
  "ParetoPickandsDistribution",
  "ParkData",
  "Part",
  "PartBehavior",
  "PartialCorrelationFunction",
  "PartialD",
  "ParticleAcceleratorData",
  "ParticleData",
  "Partition",
  "PartitionGranularity",
  "PartitionsP",
  "PartitionsQ",
  "PartLayer",
  "PartOfSpeech",
  "PartProtection",
  "ParzenWindow",
  "PascalDistribution",
  "PassEventsDown",
  "PassEventsUp",
  "Paste",
  "PasteAutoQuoteCharacters",
  "PasteBoxFormInlineCells",
  "PasteButton",
  "Path",
  "PathGraph",
  "PathGraphQ",
  "Pattern",
  "PatternFilling",
  "PatternSequence",
  "PatternTest",
  "PauliMatrix",
  "PaulWavelet",
  "Pause",
  "PausedTime",
  "PDF",
  "PeakDetect",
  "PeanoCurve",
  "PearsonChiSquareTest",
  "PearsonCorrelationTest",
  "PearsonDistribution",
  "PercentForm",
  "PerfectNumber",
  "PerfectNumberQ",
  "PerformanceGoal",
  "Perimeter",
  "PeriodicBoundaryCondition",
  "PeriodicInterpolation",
  "Periodogram",
  "PeriodogramArray",
  "Permanent",
  "Permissions",
  "PermissionsGroup",
  "PermissionsGroupMemberQ",
  "PermissionsGroups",
  "PermissionsKey",
  "PermissionsKeys",
  "PermutationCycles",
  "PermutationCyclesQ",
  "PermutationGroup",
  "PermutationLength",
  "PermutationList",
  "PermutationListQ",
  "PermutationMax",
  "PermutationMin",
  "PermutationOrder",
  "PermutationPower",
  "PermutationProduct",
  "PermutationReplace",
  "Permutations",
  "PermutationSupport",
  "Permute",
  "PeronaMalikFilter",
  "Perpendicular",
  "PerpendicularBisector",
  "PersistenceLocation",
  "PersistenceTime",
  "PersistentObject",
  "PersistentObjects",
  "PersistentValue",
  "PersonData",
  "PERTDistribution",
  "PetersenGraph",
  "PhaseMargins",
  "PhaseRange",
  "PhysicalSystemData",
  "Pi",
  "Pick",
  "PIDData",
  "PIDDerivativeFilter",
  "PIDFeedforward",
  "PIDTune",
  "Piecewise",
  "PiecewiseExpand",
  "PieChart",
  "PieChart3D",
  "PillaiTrace",
  "PillaiTraceTest",
  "PingTime",
  "Pink",
  "PitchRecognize",
  "Pivoting",
  "PixelConstrained",
  "PixelValue",
  "PixelValuePositions",
  "Placed",
  "Placeholder",
  "PlaceholderReplace",
  "Plain",
  "PlanarAngle",
  "PlanarGraph",
  "PlanarGraphQ",
  "PlanckRadiationLaw",
  "PlaneCurveData",
  "PlanetaryMoonData",
  "PlanetData",
  "PlantData",
  "Play",
  "PlayRange",
  "Plot",
  "Plot3D",
  "Plot3Matrix",
  "PlotDivision",
  "PlotJoined",
  "PlotLabel",
  "PlotLabels",
  "PlotLayout",
  "PlotLegends",
  "PlotMarkers",
  "PlotPoints",
  "PlotRange",
  "PlotRangeClipping",
  "PlotRangeClipPlanesStyle",
  "PlotRangePadding",
  "PlotRegion",
  "PlotStyle",
  "PlotTheme",
  "Pluralize",
  "Plus",
  "PlusMinus",
  "Pochhammer",
  "PodStates",
  "PodWidth",
  "Point",
  "Point3DBox",
  "Point3DBoxOptions",
  "PointBox",
  "PointBoxOptions",
  "PointFigureChart",
  "PointLegend",
  "PointSize",
  "PoissonConsulDistribution",
  "PoissonDistribution",
  "PoissonProcess",
  "PoissonWindow",
  "PolarAxes",
  "PolarAxesOrigin",
  "PolarGridLines",
  "PolarPlot",
  "PolarTicks",
  "PoleZeroMarkers",
  "PolyaAeppliDistribution",
  "PolyGamma",
  "Polygon",
  "Polygon3DBox",
  "Polygon3DBoxOptions",
  "PolygonalNumber",
  "PolygonAngle",
  "PolygonBox",
  "PolygonBoxOptions",
  "PolygonCoordinates",
  "PolygonDecomposition",
  "PolygonHoleScale",
  "PolygonIntersections",
  "PolygonScale",
  "Polyhedron",
  "PolyhedronAngle",
  "PolyhedronCoordinates",
  "PolyhedronData",
  "PolyhedronDecomposition",
  "PolyhedronGenus",
  "PolyLog",
  "PolynomialExtendedGCD",
  "PolynomialForm",
  "PolynomialGCD",
  "PolynomialLCM",
  "PolynomialMod",
  "PolynomialQ",
  "PolynomialQuotient",
  "PolynomialQuotientRemainder",
  "PolynomialReduce",
  "PolynomialRemainder",
  "Polynomials",
  "PoolingLayer",
  "PopupMenu",
  "PopupMenuBox",
  "PopupMenuBoxOptions",
  "PopupView",
  "PopupWindow",
  "Position",
  "PositionIndex",
  "Positive",
  "PositiveDefiniteMatrixQ",
  "PositiveIntegers",
  "PositiveRationals",
  "PositiveReals",
  "PositiveSemidefiniteMatrixQ",
  "PossibleZeroQ",
  "Postfix",
  "PostScript",
  "Power",
  "PowerDistribution",
  "PowerExpand",
  "PowerMod",
  "PowerModList",
  "PowerRange",
  "PowerSpectralDensity",
  "PowersRepresentations",
  "PowerSymmetricPolynomial",
  "Precedence",
  "PrecedenceForm",
  "Precedes",
  "PrecedesEqual",
  "PrecedesSlantEqual",
  "PrecedesTilde",
  "Precision",
  "PrecisionGoal",
  "PreDecrement",
  "Predict",
  "PredictionRoot",
  "PredictorFunction",
  "PredictorInformation",
  "PredictorMeasurements",
  "PredictorMeasurementsObject",
  "PreemptProtect",
  "PreferencesPath",
  "Prefix",
  "PreIncrement",
  "Prepend",
  "PrependLayer",
  "PrependTo",
  "PreprocessingRules",
  "PreserveColor",
  "PreserveImageOptions",
  "Previous",
  "PreviousCell",
  "PreviousDate",
  "PriceGraphDistribution",
  "PrimaryPlaceholder",
  "Prime",
  "PrimeNu",
  "PrimeOmega",
  "PrimePi",
  "PrimePowerQ",
  "PrimeQ",
  "Primes",
  "PrimeZetaP",
  "PrimitivePolynomialQ",
  "PrimitiveRoot",
  "PrimitiveRootList",
  "PrincipalComponents",
  "PrincipalValue",
  "Print",
  "PrintableASCIIQ",
  "PrintAction",
  "PrintForm",
  "PrintingCopies",
  "PrintingOptions",
  "PrintingPageRange",
  "PrintingStartingPageNumber",
  "PrintingStyleEnvironment",
  "Printout3D",
  "Printout3DPreviewer",
  "PrintPrecision",
  "PrintTemporary",
  "Prism",
  "PrismBox",
  "PrismBoxOptions",
  "PrivateCellOptions",
  "PrivateEvaluationOptions",
  "PrivateFontOptions",
  "PrivateFrontEndOptions",
  "PrivateKey",
  "PrivateNotebookOptions",
  "PrivatePaths",
  "Probability",
  "ProbabilityDistribution",
  "ProbabilityPlot",
  "ProbabilityPr",
  "ProbabilityScalePlot",
  "ProbitModelFit",
  "ProcessConnection",
  "ProcessDirectory",
  "ProcessEnvironment",
  "Processes",
  "ProcessEstimator",
  "ProcessInformation",
  "ProcessObject",
  "ProcessParameterAssumptions",
  "ProcessParameterQ",
  "ProcessStateDomain",
  "ProcessStatus",
  "ProcessTimeDomain",
  "Product",
  "ProductDistribution",
  "ProductLog",
  "ProgressIndicator",
  "ProgressIndicatorBox",
  "ProgressIndicatorBoxOptions",
  "Projection",
  "Prolog",
  "PromptForm",
  "ProofObject",
  "Properties",
  "Property",
  "PropertyList",
  "PropertyValue",
  "Proportion",
  "Proportional",
  "Protect",
  "Protected",
  "ProteinData",
  "Pruning",
  "PseudoInverse",
  "PsychrometricPropertyData",
  "PublicKey",
  "PublisherID",
  "PulsarData",
  "PunctuationCharacter",
  "Purple",
  "Put",
  "PutAppend",
  "Pyramid",
  "PyramidBox",
  "PyramidBoxOptions",
  "QBinomial",
  "QFactorial",
  "QGamma",
  "QHypergeometricPFQ",
  "QnDispersion",
  "QPochhammer",
  "QPolyGamma",
  "QRDecomposition",
  "QuadraticIrrationalQ",
  "QuadraticOptimization",
  "Quantile",
  "QuantilePlot",
  "Quantity",
  "QuantityArray",
  "QuantityDistribution",
  "QuantityForm",
  "QuantityMagnitude",
  "QuantityQ",
  "QuantityUnit",
  "QuantityVariable",
  "QuantityVariableCanonicalUnit",
  "QuantityVariableDimensions",
  "QuantityVariableIdentifier",
  "QuantityVariablePhysicalQuantity",
  "Quartics",
  "QuartileDeviation",
  "Quartiles",
  "QuartileSkewness",
  "Query",
  "QueueingNetworkProcess",
  "QueueingProcess",
  "QueueProperties",
  "Quiet",
  "Quit",
  "Quotient",
  "QuotientRemainder",
  "RadialGradientImage",
  "RadialityCentrality",
  "RadicalBox",
  "RadicalBoxOptions",
  "RadioButton",
  "RadioButtonBar",
  "RadioButtonBox",
  "RadioButtonBoxOptions",
  "Radon",
  "RadonTransform",
  "RamanujanTau",
  "RamanujanTauL",
  "RamanujanTauTheta",
  "RamanujanTauZ",
  "Ramp",
  "Random",
  "RandomChoice",
  "RandomColor",
  "RandomComplex",
  "RandomEntity",
  "RandomFunction",
  "RandomGeoPosition",
  "RandomGraph",
  "RandomImage",
  "RandomInstance",
  "RandomInteger",
  "RandomPermutation",
  "RandomPoint",
  "RandomPolygon",
  "RandomPolyhedron",
  "RandomPrime",
  "RandomReal",
  "RandomSample",
  "RandomSeed",
  "RandomSeeding",
  "RandomVariate",
  "RandomWalkProcess",
  "RandomWord",
  "Range",
  "RangeFilter",
  "RangeSpecification",
  "RankedMax",
  "RankedMin",
  "RarerProbability",
  "Raster",
  "Raster3D",
  "Raster3DBox",
  "Raster3DBoxOptions",
  "RasterArray",
  "RasterBox",
  "RasterBoxOptions",
  "Rasterize",
  "RasterSize",
  "Rational",
  "RationalFunctions",
  "Rationalize",
  "Rationals",
  "Ratios",
  "RawArray",
  "RawBoxes",
  "RawData",
  "RawMedium",
  "RayleighDistribution",
  "Re",
  "Read",
  "ReadByteArray",
  "ReadLine",
  "ReadList",
  "ReadProtected",
  "ReadString",
  "Real",
  "RealAbs",
  "RealBlockDiagonalForm",
  "RealDigits",
  "RealExponent",
  "Reals",
  "RealSign",
  "Reap",
  "RebuildPacletData",
  "RecognitionPrior",
  "RecognitionThreshold",
  "Record",
  "RecordLists",
  "RecordSeparators",
  "Rectangle",
  "RectangleBox",
  "RectangleBoxOptions",
  "RectangleChart",
  "RectangleChart3D",
  "RectangularRepeatingElement",
  "RecurrenceFilter",
  "RecurrenceTable",
  "RecurringDigitsForm",
  "Red",
  "Reduce",
  "RefBox",
  "ReferenceLineStyle",
  "ReferenceMarkers",
  "ReferenceMarkerStyle",
  "Refine",
  "ReflectionMatrix",
  "ReflectionTransform",
  "Refresh",
  "RefreshRate",
  "Region",
  "RegionBinarize",
  "RegionBoundary",
  "RegionBoundaryStyle",
  "RegionBounds",
  "RegionCentroid",
  "RegionDifference",
  "RegionDimension",
  "RegionDisjoint",
  "RegionDistance",
  "RegionDistanceFunction",
  "RegionEmbeddingDimension",
  "RegionEqual",
  "RegionFillingStyle",
  "RegionFunction",
  "RegionImage",
  "RegionIntersection",
  "RegionMeasure",
  "RegionMember",
  "RegionMemberFunction",
  "RegionMoment",
  "RegionNearest",
  "RegionNearestFunction",
  "RegionPlot",
  "RegionPlot3D",
  "RegionProduct",
  "RegionQ",
  "RegionResize",
  "RegionSize",
  "RegionSymmetricDifference",
  "RegionUnion",
  "RegionWithin",
  "RegisterExternalEvaluator",
  "RegularExpression",
  "Regularization",
  "RegularlySampledQ",
  "RegularPolygon",
  "ReIm",
  "ReImLabels",
  "ReImPlot",
  "ReImStyle",
  "Reinstall",
  "RelationalDatabase",
  "RelationGraph",
  "Release",
  "ReleaseHold",
  "ReliabilityDistribution",
  "ReliefImage",
  "ReliefPlot",
  "RemoteAuthorizationCaching",
  "RemoteConnect",
  "RemoteConnectionObject",
  "RemoteFile",
  "RemoteRun",
  "RemoteRunProcess",
  "Remove",
  "RemoveAlphaChannel",
  "RemoveAsynchronousTask",
  "RemoveAudioStream",
  "RemoveBackground",
  "RemoveChannelListener",
  "RemoveChannelSubscribers",
  "Removed",
  "RemoveDiacritics",
  "RemoveInputStreamMethod",
  "RemoveOutputStreamMethod",
  "RemoveProperty",
  "RemoveScheduledTask",
  "RemoveUsers",
  "RemoveVideoStream",
  "RenameDirectory",
  "RenameFile",
  "RenderAll",
  "RenderingOptions",
  "RenewalProcess",
  "RenkoChart",
  "RepairMesh",
  "Repeated",
  "RepeatedNull",
  "RepeatedString",
  "RepeatedTiming",
  "RepeatingElement",
  "Replace",
  "ReplaceAll",
  "ReplaceHeldPart",
  "ReplaceImageValue",
  "ReplaceList",
  "ReplacePart",
  "ReplacePixelValue",
  "ReplaceRepeated",
  "ReplicateLayer",
  "RequiredPhysicalQuantities",
  "Resampling",
  "ResamplingAlgorithmData",
  "ResamplingMethod",
  "Rescale",
  "RescalingTransform",
  "ResetDirectory",
  "ResetMenusPacket",
  "ResetScheduledTask",
  "ReshapeLayer",
  "Residue",
  "ResizeLayer",
  "Resolve",
  "ResourceAcquire",
  "ResourceData",
  "ResourceFunction",
  "ResourceObject",
  "ResourceRegister",
  "ResourceRemove",
  "ResourceSearch",
  "ResourceSubmissionObject",
  "ResourceSubmit",
  "ResourceSystemBase",
  "ResourceSystemPath",
  "ResourceUpdate",
  "ResourceVersion",
  "ResponseForm",
  "Rest",
  "RestartInterval",
  "Restricted",
  "Resultant",
  "ResumePacket",
  "Return",
  "ReturnEntersInput",
  "ReturnExpressionPacket",
  "ReturnInputFormPacket",
  "ReturnPacket",
  "ReturnReceiptFunction",
  "ReturnTextPacket",
  "Reverse",
  "ReverseApplied",
  "ReverseBiorthogonalSplineWavelet",
  "ReverseElement",
  "ReverseEquilibrium",
  "ReverseGraph",
  "ReverseSort",
  "ReverseSortBy",
  "ReverseUpEquilibrium",
  "RevolutionAxis",
  "RevolutionPlot3D",
  "RGBColor",
  "RiccatiSolve",
  "RiceDistribution",
  "RidgeFilter",
  "RiemannR",
  "RiemannSiegelTheta",
  "RiemannSiegelZ",
  "RiemannXi",
  "Riffle",
  "Right",
  "RightArrow",
  "RightArrowBar",
  "RightArrowLeftArrow",
  "RightComposition",
  "RightCosetRepresentative",
  "RightDownTeeVector",
  "RightDownVector",
  "RightDownVectorBar",
  "RightTee",
  "RightTeeArrow",
  "RightTeeVector",
  "RightTriangle",
  "RightTriangleBar",
  "RightTriangleEqual",
  "RightUpDownVector",
  "RightUpTeeVector",
  "RightUpVector",
  "RightUpVectorBar",
  "RightVector",
  "RightVectorBar",
  "RiskAchievementImportance",
  "RiskReductionImportance",
  "RogersTanimotoDissimilarity",
  "RollPitchYawAngles",
  "RollPitchYawMatrix",
  "RomanNumeral",
  "Root",
  "RootApproximant",
  "RootIntervals",
  "RootLocusPlot",
  "RootMeanSquare",
  "RootOfUnityQ",
  "RootReduce",
  "Roots",
  "RootSum",
  "Rotate",
  "RotateLabel",
  "RotateLeft",
  "RotateRight",
  "RotationAction",
  "RotationBox",
  "RotationBoxOptions",
  "RotationMatrix",
  "RotationTransform",
  "Round",
  "RoundImplies",
  "RoundingRadius",
  "Row",
  "RowAlignments",
  "RowBackgrounds",
  "RowBox",
  "RowHeights",
  "RowLines",
  "RowMinHeight",
  "RowReduce",
  "RowsEqual",
  "RowSpacings",
  "RSolve",
  "RSolveValue",
  "RudinShapiro",
  "RudvalisGroupRu",
  "Rule",
  "RuleCondition",
  "RuleDelayed",
  "RuleForm",
  "RulePlot",
  "RulerUnits",
  "Run",
  "RunProcess",
  "RunScheduledTask",
  "RunThrough",
  "RuntimeAttributes",
  "RuntimeOptions",
  "RussellRaoDissimilarity",
  "SameQ",
  "SameTest",
  "SameTestProperties",
  "SampledEntityClass",
  "SampleDepth",
  "SampledSoundFunction",
  "SampledSoundList",
  "SampleRate",
  "SamplingPeriod",
  "SARIMAProcess",
  "SARMAProcess",
  "SASTriangle",
  "SatelliteData",
  "SatisfiabilityCount",
  "SatisfiabilityInstances",
  "SatisfiableQ",
  "Saturday",
  "Save",
  "Saveable",
  "SaveAutoDelete",
  "SaveConnection",
  "SaveDefinitions",
  "SavitzkyGolayMatrix",
  "SawtoothWave",
  "Scale",
  "Scaled",
  "ScaleDivisions",
  "ScaledMousePosition",
  "ScaleOrigin",
  "ScalePadding",
  "ScaleRanges",
  "ScaleRangeStyle",
  "ScalingFunctions",
  "ScalingMatrix",
  "ScalingTransform",
  "Scan",
  "ScheduledTask",
  "ScheduledTaskActiveQ",
  "ScheduledTaskInformation",
  "ScheduledTaskInformationData",
  "ScheduledTaskObject",
  "ScheduledTasks",
  "SchurDecomposition",
  "ScientificForm",
  "ScientificNotationThreshold",
  "ScorerGi",
  "ScorerGiPrime",
  "ScorerHi",
  "ScorerHiPrime",
  "ScreenRectangle",
  "ScreenStyleEnvironment",
  "ScriptBaselineShifts",
  "ScriptForm",
  "ScriptLevel",
  "ScriptMinSize",
  "ScriptRules",
  "ScriptSizeMultipliers",
  "Scrollbars",
  "ScrollingOptions",
  "ScrollPosition",
  "SearchAdjustment",
  "SearchIndexObject",
  "SearchIndices",
  "SearchQueryString",
  "SearchResultObject",
  "Sec",
  "Sech",
  "SechDistribution",
  "SecondOrderConeOptimization",
  "SectionGrouping",
  "SectorChart",
  "SectorChart3D",
  "SectorOrigin",
  "SectorSpacing",
  "SecuredAuthenticationKey",
  "SecuredAuthenticationKeys",
  "SeedRandom",
  "Select",
  "Selectable",
  "SelectComponents",
  "SelectedCells",
  "SelectedNotebook",
  "SelectFirst",
  "Selection",
  "SelectionAnimate",
  "SelectionCell",
  "SelectionCellCreateCell",
  "SelectionCellDefaultStyle",
  "SelectionCellParentStyle",
  "SelectionCreateCell",
  "SelectionDebuggerTag",
  "SelectionDuplicateCell",
  "SelectionEvaluate",
  "SelectionEvaluateCreateCell",
  "SelectionMove",
  "SelectionPlaceholder",
  "SelectionSetStyle",
  "SelectWithContents",
  "SelfLoops",
  "SelfLoopStyle",
  "SemanticImport",
  "SemanticImportString",
  "SemanticInterpretation",
  "SemialgebraicComponentInstances",
  "SemidefiniteOptimization",
  "SendMail",
  "SendMessage",
  "Sequence",
  "SequenceAlignment",
  "SequenceAttentionLayer",
  "SequenceCases",
  "SequenceCount",
  "SequenceFold",
  "SequenceFoldList",
  "SequenceForm",
  "SequenceHold",
  "SequenceLastLayer",
  "SequenceMostLayer",
  "SequencePosition",
  "SequencePredict",
  "SequencePredictorFunction",
  "SequenceReplace",
  "SequenceRestLayer",
  "SequenceReverseLayer",
  "SequenceSplit",
  "Series",
  "SeriesCoefficient",
  "SeriesData",
  "SeriesTermGoal",
  "ServiceConnect",
  "ServiceDisconnect",
  "ServiceExecute",
  "ServiceObject",
  "ServiceRequest",
  "ServiceResponse",
  "ServiceSubmit",
  "SessionSubmit",
  "SessionTime",
  "Set",
  "SetAccuracy",
  "SetAlphaChannel",
  "SetAttributes",
  "Setbacks",
  "SetBoxFormNamesPacket",
  "SetCloudDirectory",
  "SetCookies",
  "SetDelayed",
  "SetDirectory",
  "SetEnvironment",
  "SetEvaluationNotebook",
  "SetFileDate",
  "SetFileLoadingContext",
  "SetNotebookStatusLine",
  "SetOptions",
  "SetOptionsPacket",
  "SetPermissions",
  "SetPrecision",
  "SetProperty",
  "SetSecuredAuthenticationKey",
  "SetSelectedNotebook",
  "SetSharedFunction",
  "SetSharedVariable",
  "SetSpeechParametersPacket",
  "SetStreamPosition",
  "SetSystemModel",
  "SetSystemOptions",
  "Setter",
  "SetterBar",
  "SetterBox",
  "SetterBoxOptions",
  "Setting",
  "SetUsers",
  "SetValue",
  "Shading",
  "Shallow",
  "ShannonWavelet",
  "ShapiroWilkTest",
  "Share",
  "SharingList",
  "Sharpen",
  "ShearingMatrix",
  "ShearingTransform",
  "ShellRegion",
  "ShenCastanMatrix",
  "ShiftedGompertzDistribution",
  "ShiftRegisterSequence",
  "Short",
  "ShortDownArrow",
  "Shortest",
  "ShortestMatch",
  "ShortestPathFunction",
  "ShortLeftArrow",
  "ShortRightArrow",
  "ShortTimeFourier",
  "ShortTimeFourierData",
  "ShortUpArrow",
  "Show",
  "ShowAutoConvert",
  "ShowAutoSpellCheck",
  "ShowAutoStyles",
  "ShowCellBracket",
  "ShowCellLabel",
  "ShowCellTags",
  "ShowClosedCellArea",
  "ShowCodeAssist",
  "ShowContents",
  "ShowControls",
  "ShowCursorTracker",
  "ShowGroupOpenCloseIcon",
  "ShowGroupOpener",
  "ShowInvisibleCharacters",
  "ShowPageBreaks",
  "ShowPredictiveInterface",
  "ShowSelection",
  "ShowShortBoxForm",
  "ShowSpecialCharacters",
  "ShowStringCharacters",
  "ShowSyntaxStyles",
  "ShrinkingDelay",
  "ShrinkWrapBoundingBox",
  "SiderealTime",
  "SiegelTheta",
  "SiegelTukeyTest",
  "SierpinskiCurve",
  "SierpinskiMesh",
  "Sign",
  "Signature",
  "SignedRankTest",
  "SignedRegionDistance",
  "SignificanceLevel",
  "SignPadding",
  "SignTest",
  "SimilarityRules",
  "SimpleGraph",
  "SimpleGraphQ",
  "SimplePolygonQ",
  "SimplePolyhedronQ",
  "Simplex",
  "Simplify",
  "Sin",
  "Sinc",
  "SinghMaddalaDistribution",
  "SingleEvaluation",
  "SingleLetterItalics",
  "SingleLetterStyle",
  "SingularValueDecomposition",
  "SingularValueList",
  "SingularValuePlot",
  "SingularValues",
  "Sinh",
  "SinhIntegral",
  "SinIntegral",
  "SixJSymbol",
  "Skeleton",
  "SkeletonTransform",
  "SkellamDistribution",
  "Skewness",
  "SkewNormalDistribution",
  "SkinStyle",
  "Skip",
  "SliceContourPlot3D",
  "SliceDensityPlot3D",
  "SliceDistribution",
  "SliceVectorPlot3D",
  "Slider",
  "Slider2D",
  "Slider2DBox",
  "Slider2DBoxOptions",
  "SliderBox",
  "SliderBoxOptions",
  "SlideView",
  "Slot",
  "SlotSequence",
  "Small",
  "SmallCircle",
  "Smaller",
  "SmithDecomposition",
  "SmithDelayCompensator",
  "SmithWatermanSimilarity",
  "SmoothDensityHistogram",
  "SmoothHistogram",
  "SmoothHistogram3D",
  "SmoothKernelDistribution",
  "SnDispersion",
  "Snippet",
  "SnubPolyhedron",
  "SocialMediaData",
  "Socket",
  "SocketConnect",
  "SocketListen",
  "SocketListener",
  "SocketObject",
  "SocketOpen",
  "SocketReadMessage",
  "SocketReadyQ",
  "Sockets",
  "SocketWaitAll",
  "SocketWaitNext",
  "SoftmaxLayer",
  "SokalSneathDissimilarity",
  "SolarEclipse",
  "SolarSystemFeatureData",
  "SolidAngle",
  "SolidData",
  "SolidRegionQ",
  "Solve",
  "SolveAlways",
  "SolveDelayed",
  "Sort",
  "SortBy",
  "SortedBy",
  "SortedEntityClass",
  "Sound",
  "SoundAndGraphics",
  "SoundNote",
  "SoundVolume",
  "SourceLink",
  "Sow",
  "Space",
  "SpaceCurveData",
  "SpaceForm",
  "Spacer",
  "Spacings",
  "Span",
  "SpanAdjustments",
  "SpanCharacterRounding",
  "SpanFromAbove",
  "SpanFromBoth",
  "SpanFromLeft",
  "SpanLineThickness",
  "SpanMaxSize",
  "SpanMinSize",
  "SpanningCharacters",
  "SpanSymmetric",
  "SparseArray",
  "SpatialGraphDistribution",
  "SpatialMedian",
  "SpatialTransformationLayer",
  "Speak",
  "SpeakerMatchQ",
  "SpeakTextPacket",
  "SpearmanRankTest",
  "SpearmanRho",
  "SpeciesData",
  "SpecificityGoal",
  "SpectralLineData",
  "Spectrogram",
  "SpectrogramArray",
  "Specularity",
  "SpeechCases",
  "SpeechInterpreter",
  "SpeechRecognize",
  "SpeechSynthesize",
  "SpellingCorrection",
  "SpellingCorrectionList",
  "SpellingDictionaries",
  "SpellingDictionariesPath",
  "SpellingOptions",
  "SpellingSuggestionsPacket",
  "Sphere",
  "SphereBox",
  "SpherePoints",
  "SphericalBesselJ",
  "SphericalBesselY",
  "SphericalHankelH1",
  "SphericalHankelH2",
  "SphericalHarmonicY",
  "SphericalPlot3D",
  "SphericalRegion",
  "SphericalShell",
  "SpheroidalEigenvalue",
  "SpheroidalJoiningFactor",
  "SpheroidalPS",
  "SpheroidalPSPrime",
  "SpheroidalQS",
  "SpheroidalQSPrime",
  "SpheroidalRadialFactor",
  "SpheroidalS1",
  "SpheroidalS1Prime",
  "SpheroidalS2",
  "SpheroidalS2Prime",
  "Splice",
  "SplicedDistribution",
  "SplineClosed",
  "SplineDegree",
  "SplineKnots",
  "SplineWeights",
  "Split",
  "SplitBy",
  "SpokenString",
  "Sqrt",
  "SqrtBox",
  "SqrtBoxOptions",
  "Square",
  "SquaredEuclideanDistance",
  "SquareFreeQ",
  "SquareIntersection",
  "SquareMatrixQ",
  "SquareRepeatingElement",
  "SquaresR",
  "SquareSubset",
  "SquareSubsetEqual",
  "SquareSuperset",
  "SquareSupersetEqual",
  "SquareUnion",
  "SquareWave",
  "SSSTriangle",
  "StabilityMargins",
  "StabilityMarginsStyle",
  "StableDistribution",
  "Stack",
  "StackBegin",
  "StackComplete",
  "StackedDateListPlot",
  "StackedListPlot",
  "StackInhibit",
  "StadiumShape",
  "StandardAtmosphereData",
  "StandardDeviation",
  "StandardDeviationFilter",
  "StandardForm",
  "Standardize",
  "Standardized",
  "StandardOceanData",
  "StandbyDistribution",
  "Star",
  "StarClusterData",
  "StarData",
  "StarGraph",
  "StartAsynchronousTask",
  "StartExternalSession",
  "StartingStepSize",
  "StartOfLine",
  "StartOfString",
  "StartProcess",
  "StartScheduledTask",
  "StartupSound",
  "StartWebSession",
  "StateDimensions",
  "StateFeedbackGains",
  "StateOutputEstimator",
  "StateResponse",
  "StateSpaceModel",
  "StateSpaceRealization",
  "StateSpaceTransform",
  "StateTransformationLinearize",
  "StationaryDistribution",
  "StationaryWaveletPacketTransform",
  "StationaryWaveletTransform",
  "StatusArea",
  "StatusCentrality",
  "StepMonitor",
  "StereochemistryElements",
  "StieltjesGamma",
  "StippleShading",
  "StirlingS1",
  "StirlingS2",
  "StopAsynchronousTask",
  "StoppingPowerData",
  "StopScheduledTask",
  "StrataVariables",
  "StratonovichProcess",
  "StreamColorFunction",
  "StreamColorFunctionScaling",
  "StreamDensityPlot",
  "StreamMarkers",
  "StreamPlot",
  "StreamPoints",
  "StreamPosition",
  "Streams",
  "StreamScale",
  "StreamStyle",
  "String",
  "StringBreak",
  "StringByteCount",
  "StringCases",
  "StringContainsQ",
  "StringCount",
  "StringDelete",
  "StringDrop",
  "StringEndsQ",
  "StringExpression",
  "StringExtract",
  "StringForm",
  "StringFormat",
  "StringFreeQ",
  "StringInsert",
  "StringJoin",
  "StringLength",
  "StringMatchQ",
  "StringPadLeft",
  "StringPadRight",
  "StringPart",
  "StringPartition",
  "StringPosition",
  "StringQ",
  "StringRepeat",
  "StringReplace",
  "StringReplaceList",
  "StringReplacePart",
  "StringReverse",
  "StringRiffle",
  "StringRotateLeft",
  "StringRotateRight",
  "StringSkeleton",
  "StringSplit",
  "StringStartsQ",
  "StringTake",
  "StringTemplate",
  "StringToByteArray",
  "StringToStream",
  "StringTrim",
  "StripBoxes",
  "StripOnInput",
  "StripWrapperBoxes",
  "StrokeForm",
  "StructuralImportance",
  "StructuredArray",
  "StructuredArrayHeadQ",
  "StructuredSelection",
  "StruveH",
  "StruveL",
  "Stub",
  "StudentTDistribution",
  "Style",
  "StyleBox",
  "StyleBoxAutoDelete",
  "StyleData",
  "StyleDefinitions",
  "StyleForm",
  "StyleHints",
  "StyleKeyMapping",
  "StyleMenuListing",
  "StyleNameDialogSettings",
  "StyleNames",
  "StylePrint",
  "StyleSheetPath",
  "Subdivide",
  "Subfactorial",
  "Subgraph",
  "SubMinus",
  "SubPlus",
  "SubresultantPolynomialRemainders",
  "SubresultantPolynomials",
  "Subresultants",
  "Subscript",
  "SubscriptBox",
  "SubscriptBoxOptions",
  "Subscripted",
  "Subsequences",
  "Subset",
  "SubsetCases",
  "SubsetCount",
  "SubsetEqual",
  "SubsetMap",
  "SubsetPosition",
  "SubsetQ",
  "SubsetReplace",
  "Subsets",
  "SubStar",
  "SubstitutionSystem",
  "Subsuperscript",
  "SubsuperscriptBox",
  "SubsuperscriptBoxOptions",
  "SubtitleEncoding",
  "SubtitleTracks",
  "Subtract",
  "SubtractFrom",
  "SubtractSides",
  "SubValues",
  "Succeeds",
  "SucceedsEqual",
  "SucceedsSlantEqual",
  "SucceedsTilde",
  "Success",
  "SuchThat",
  "Sum",
  "SumConvergence",
  "SummationLayer",
  "Sunday",
  "SunPosition",
  "Sunrise",
  "Sunset",
  "SuperDagger",
  "SuperMinus",
  "SupernovaData",
  "SuperPlus",
  "Superscript",
  "SuperscriptBox",
  "SuperscriptBoxOptions",
  "Superset",
  "SupersetEqual",
  "SuperStar",
  "Surd",
  "SurdForm",
  "SurfaceAppearance",
  "SurfaceArea",
  "SurfaceColor",
  "SurfaceData",
  "SurfaceGraphics",
  "SurvivalDistribution",
  "SurvivalFunction",
  "SurvivalModel",
  "SurvivalModelFit",
  "SuspendPacket",
  "SuzukiDistribution",
  "SuzukiGroupSuz",
  "SwatchLegend",
  "Switch",
  "Symbol",
  "SymbolName",
  "SymletWavelet",
  "Symmetric",
  "SymmetricGroup",
  "SymmetricKey",
  "SymmetricMatrixQ",
  "SymmetricPolynomial",
  "SymmetricReduction",
  "Symmetrize",
  "SymmetrizedArray",
  "SymmetrizedArrayRules",
  "SymmetrizedDependentComponents",
  "SymmetrizedIndependentComponents",
  "SymmetrizedReplacePart",
  "SynchronousInitialization",
  "SynchronousUpdating",
  "Synonyms",
  "Syntax",
  "SyntaxForm",
  "SyntaxInformation",
  "SyntaxLength",
  "SyntaxPacket",
  "SyntaxQ",
  "SynthesizeMissingValues",
  "SystemCredential",
  "SystemCredentialData",
  "SystemCredentialKey",
  "SystemCredentialKeys",
  "SystemCredentialStoreObject",
  "SystemDialogInput",
  "SystemException",
  "SystemGet",
  "SystemHelpPath",
  "SystemInformation",
  "SystemInformationData",
  "SystemInstall",
  "SystemModel",
  "SystemModeler",
  "SystemModelExamples",
  "SystemModelLinearize",
  "SystemModelParametricSimulate",
  "SystemModelPlot",
  "SystemModelProgressReporting",
  "SystemModelReliability",
  "SystemModels",
  "SystemModelSimulate",
  "SystemModelSimulateSensitivity",
  "SystemModelSimulationData",
  "SystemOpen",
  "SystemOptions",
  "SystemProcessData",
  "SystemProcesses",
  "SystemsConnectionsModel",
  "SystemsModelDelay",
  "SystemsModelDelayApproximate",
  "SystemsModelDelete",
  "SystemsModelDimensions",
  "SystemsModelExtract",
  "SystemsModelFeedbackConnect",
  "SystemsModelLabels",
  "SystemsModelLinearity",
  "SystemsModelMerge",
  "SystemsModelOrder",
  "SystemsModelParallelConnect",
  "SystemsModelSeriesConnect",
  "SystemsModelStateFeedbackConnect",
  "SystemsModelVectorRelativeOrders",
  "SystemStub",
  "SystemTest",
  "Tab",
  "TabFilling",
  "Table",
  "TableAlignments",
  "TableDepth",
  "TableDirections",
  "TableForm",
  "TableHeadings",
  "TableSpacing",
  "TableView",
  "TableViewBox",
  "TableViewBoxBackground",
  "TableViewBoxItemSize",
  "TableViewBoxOptions",
  "TabSpacings",
  "TabView",
  "TabViewBox",
  "TabViewBoxOptions",
  "TagBox",
  "TagBoxNote",
  "TagBoxOptions",
  "TaggingRules",
  "TagSet",
  "TagSetDelayed",
  "TagStyle",
  "TagUnset",
  "Take",
  "TakeDrop",
  "TakeLargest",
  "TakeLargestBy",
  "TakeList",
  "TakeSmallest",
  "TakeSmallestBy",
  "TakeWhile",
  "Tally",
  "Tan",
  "Tanh",
  "TargetDevice",
  "TargetFunctions",
  "TargetSystem",
  "TargetUnits",
  "TaskAbort",
  "TaskExecute",
  "TaskObject",
  "TaskRemove",
  "TaskResume",
  "Tasks",
  "TaskSuspend",
  "TaskWait",
  "TautologyQ",
  "TelegraphProcess",
  "TemplateApply",
  "TemplateArgBox",
  "TemplateBox",
  "TemplateBoxOptions",
  "TemplateEvaluate",
  "TemplateExpression",
  "TemplateIf",
  "TemplateObject",
  "TemplateSequence",
  "TemplateSlot",
  "TemplateSlotSequence",
  "TemplateUnevaluated",
  "TemplateVerbatim",
  "TemplateWith",
  "TemporalData",
  "TemporalRegularity",
  "Temporary",
  "TemporaryVariable",
  "TensorContract",
  "TensorDimensions",
  "TensorExpand",
  "TensorProduct",
  "TensorQ",
  "TensorRank",
  "TensorReduce",
  "TensorSymmetry",
  "TensorTranspose",
  "TensorWedge",
  "TestID",
  "TestReport",
  "TestReportObject",
  "TestResultObject",
  "Tetrahedron",
  "TetrahedronBox",
  "TetrahedronBoxOptions",
  "TeXForm",
  "TeXSave",
  "Text",
  "Text3DBox",
  "Text3DBoxOptions",
  "TextAlignment",
  "TextBand",
  "TextBoundingBox",
  "TextBox",
  "TextCases",
  "TextCell",
  "TextClipboardType",
  "TextContents",
  "TextData",
  "TextElement",
  "TextForm",
  "TextGrid",
  "TextJustification",
  "TextLine",
  "TextPacket",
  "TextParagraph",
  "TextPosition",
  "TextRecognize",
  "TextSearch",
  "TextSearchReport",
  "TextSentences",
  "TextString",
  "TextStructure",
  "TextStyle",
  "TextTranslation",
  "Texture",
  "TextureCoordinateFunction",
  "TextureCoordinateScaling",
  "TextWords",
  "Therefore",
  "ThermodynamicData",
  "ThermometerGauge",
  "Thick",
  "Thickness",
  "Thin",
  "Thinning",
  "ThisLink",
  "ThompsonGroupTh",
  "Thread",
  "ThreadingLayer",
  "ThreeJSymbol",
  "Threshold",
  "Through",
  "Throw",
  "ThueMorse",
  "Thumbnail",
  "Thursday",
  "Ticks",
  "TicksStyle",
  "TideData",
  "Tilde",
  "TildeEqual",
  "TildeFullEqual",
  "TildeTilde",
  "TimeConstrained",
  "TimeConstraint",
  "TimeDirection",
  "TimeFormat",
  "TimeGoal",
  "TimelinePlot",
  "TimeObject",
  "TimeObjectQ",
  "TimeRemaining",
  "Times",
  "TimesBy",
  "TimeSeries",
  "TimeSeriesAggregate",
  "TimeSeriesForecast",
  "TimeSeriesInsert",
  "TimeSeriesInvertibility",
  "TimeSeriesMap",
  "TimeSeriesMapThread",
  "TimeSeriesModel",
  "TimeSeriesModelFit",
  "TimeSeriesResample",
  "TimeSeriesRescale",
  "TimeSeriesShift",
  "TimeSeriesThread",
  "TimeSeriesWindow",
  "TimeUsed",
  "TimeValue",
  "TimeWarpingCorrespondence",
  "TimeWarpingDistance",
  "TimeZone",
  "TimeZoneConvert",
  "TimeZoneOffset",
  "Timing",
  "Tiny",
  "TitleGrouping",
  "TitsGroupT",
  "ToBoxes",
  "ToCharacterCode",
  "ToColor",
  "ToContinuousTimeModel",
  "ToDate",
  "Today",
  "ToDiscreteTimeModel",
  "ToEntity",
  "ToeplitzMatrix",
  "ToExpression",
  "ToFileName",
  "Together",
  "Toggle",
  "ToggleFalse",
  "Toggler",
  "TogglerBar",
  "TogglerBox",
  "TogglerBoxOptions",
  "ToHeldExpression",
  "ToInvertibleTimeSeries",
  "TokenWords",
  "Tolerance",
  "ToLowerCase",
  "Tomorrow",
  "ToNumberField",
  "TooBig",
  "Tooltip",
  "TooltipBox",
  "TooltipBoxOptions",
  "TooltipDelay",
  "TooltipStyle",
  "ToonShading",
  "Top",
  "TopHatTransform",
  "ToPolarCoordinates",
  "TopologicalSort",
  "ToRadicals",
  "ToRules",
  "ToSphericalCoordinates",
  "ToString",
  "Total",
  "TotalHeight",
  "TotalLayer",
  "TotalVariationFilter",
  "TotalWidth",
  "TouchPosition",
  "TouchscreenAutoZoom",
  "TouchscreenControlPlacement",
  "ToUpperCase",
  "Tr",
  "Trace",
  "TraceAbove",
  "TraceAction",
  "TraceBackward",
  "TraceDepth",
  "TraceDialog",
  "TraceForward",
  "TraceInternal",
  "TraceLevel",
  "TraceOff",
  "TraceOn",
  "TraceOriginal",
  "TracePrint",
  "TraceScan",
  "TrackedSymbols",
  "TrackingFunction",
  "TracyWidomDistribution",
  "TradingChart",
  "TraditionalForm",
  "TraditionalFunctionNotation",
  "TraditionalNotation",
  "TraditionalOrder",
  "TrainingProgressCheckpointing",
  "TrainingProgressFunction",
  "TrainingProgressMeasurements",
  "TrainingProgressReporting",
  "TrainingStoppingCriterion",
  "TrainingUpdateSchedule",
  "TransferFunctionCancel",
  "TransferFunctionExpand",
  "TransferFunctionFactor",
  "TransferFunctionModel",
  "TransferFunctionPoles",
  "TransferFunctionTransform",
  "TransferFunctionZeros",
  "TransformationClass",
  "TransformationFunction",
  "TransformationFunctions",
  "TransformationMatrix",
  "TransformedDistribution",
  "TransformedField",
  "TransformedProcess",
  "TransformedRegion",
  "TransitionDirection",
  "TransitionDuration",
  "TransitionEffect",
  "TransitiveClosureGraph",
  "TransitiveReductionGraph",
  "Translate",
  "TranslationOptions",
  "TranslationTransform",
  "Transliterate",
  "Transparent",
  "TransparentColor",
  "Transpose",
  "TransposeLayer",
  "TrapSelection",
  "TravelDirections",
  "TravelDirectionsData",
  "TravelDistance",
  "TravelDistanceList",
  "TravelMethod",
  "TravelTime",
  "TreeForm",
  "TreeGraph",
  "TreeGraphQ",
  "TreePlot",
  "TrendStyle",
  "Triangle",
  "TriangleCenter",
  "TriangleConstruct",
  "TriangleMeasurement",
  "TriangleWave",
  "TriangularDistribution",
  "TriangulateMesh",
  "Trig",
  "TrigExpand",
  "TrigFactor",
  "TrigFactorList",
  "Trigger",
  "TrigReduce",
  "TrigToExp",
  "TrimmedMean",
  "TrimmedVariance",
  "TropicalStormData",
  "True",
  "TrueQ",
  "TruncatedDistribution",
  "TruncatedPolyhedron",
  "TsallisQExponentialDistribution",
  "TsallisQGaussianDistribution",
  "TTest",
  "Tube",
  "TubeBezierCurveBox",
  "TubeBezierCurveBoxOptions",
  "TubeBox",
  "TubeBoxOptions",
  "TubeBSplineCurveBox",
  "TubeBSplineCurveBoxOptions",
  "Tuesday",
  "TukeyLambdaDistribution",
  "TukeyWindow",
  "TunnelData",
  "Tuples",
  "TuranGraph",
  "TuringMachine",
  "TuttePolynomial",
  "TwoWayRule",
  "Typed",
  "TypeSpecifier",
  "UnateQ",
  "Uncompress",
  "UnconstrainedParameters",
  "Undefined",
  "UnderBar",
  "Underflow",
  "Underlined",
  "Underoverscript",
  "UnderoverscriptBox",
  "UnderoverscriptBoxOptions",
  "Underscript",
  "UnderscriptBox",
  "UnderscriptBoxOptions",
  "UnderseaFeatureData",
  "UndirectedEdge",
  "UndirectedGraph",
  "UndirectedGraphQ",
  "UndoOptions",
  "UndoTrackedVariables",
  "Unequal",
  "UnequalTo",
  "Unevaluated",
  "UniformDistribution",
  "UniformGraphDistribution",
  "UniformPolyhedron",
  "UniformSumDistribution",
  "Uninstall",
  "Union",
  "UnionedEntityClass",
  "UnionPlus",
  "Unique",
  "UnitaryMatrixQ",
  "UnitBox",
  "UnitConvert",
  "UnitDimensions",
  "Unitize",
  "UnitRootTest",
  "UnitSimplify",
  "UnitStep",
  "UnitSystem",
  "UnitTriangle",
  "UnitVector",
  "UnitVectorLayer",
  "UnityDimensions",
  "UniverseModelData",
  "UniversityData",
  "UnixTime",
  "Unprotect",
  "UnregisterExternalEvaluator",
  "UnsameQ",
  "UnsavedVariables",
  "Unset",
  "UnsetShared",
  "UntrackedVariables",
  "Up",
  "UpArrow",
  "UpArrowBar",
  "UpArrowDownArrow",
  "Update",
  "UpdateDynamicObjects",
  "UpdateDynamicObjectsSynchronous",
  "UpdateInterval",
  "UpdatePacletSites",
  "UpdateSearchIndex",
  "UpDownArrow",
  "UpEquilibrium",
  "UpperCaseQ",
  "UpperLeftArrow",
  "UpperRightArrow",
  "UpperTriangularize",
  "UpperTriangularMatrixQ",
  "Upsample",
  "UpSet",
  "UpSetDelayed",
  "UpTee",
  "UpTeeArrow",
  "UpTo",
  "UpValues",
  "URL",
  "URLBuild",
  "URLDecode",
  "URLDispatcher",
  "URLDownload",
  "URLDownloadSubmit",
  "URLEncode",
  "URLExecute",
  "URLExpand",
  "URLFetch",
  "URLFetchAsynchronous",
  "URLParse",
  "URLQueryDecode",
  "URLQueryEncode",
  "URLRead",
  "URLResponseTime",
  "URLSave",
  "URLSaveAsynchronous",
  "URLShorten",
  "URLSubmit",
  "UseGraphicsRange",
  "UserDefinedWavelet",
  "Using",
  "UsingFrontEnd",
  "UtilityFunction",
  "V2Get",
  "ValenceErrorHandling",
  "ValidationLength",
  "ValidationSet",
  "Value",
  "ValueBox",
  "ValueBoxOptions",
  "ValueDimensions",
  "ValueForm",
  "ValuePreprocessingFunction",
  "ValueQ",
  "Values",
  "ValuesData",
  "Variables",
  "Variance",
  "VarianceEquivalenceTest",
  "VarianceEstimatorFunction",
  "VarianceGammaDistribution",
  "VarianceTest",
  "VectorAngle",
  "VectorAround",
  "VectorAspectRatio",
  "VectorColorFunction",
  "VectorColorFunctionScaling",
  "VectorDensityPlot",
  "VectorGlyphData",
  "VectorGreater",
  "VectorGreaterEqual",
  "VectorLess",
  "VectorLessEqual",
  "VectorMarkers",
  "VectorPlot",
  "VectorPlot3D",
  "VectorPoints",
  "VectorQ",
  "VectorRange",
  "Vectors",
  "VectorScale",
  "VectorScaling",
  "VectorSizes",
  "VectorStyle",
  "Vee",
  "Verbatim",
  "Verbose",
  "VerboseConvertToPostScriptPacket",
  "VerificationTest",
  "VerifyConvergence",
  "VerifyDerivedKey",
  "VerifyDigitalSignature",
  "VerifyFileSignature",
  "VerifyInterpretation",
  "VerifySecurityCertificates",
  "VerifySolutions",
  "VerifyTestAssumptions",
  "Version",
  "VersionedPreferences",
  "VersionNumber",
  "VertexAdd",
  "VertexCapacity",
  "VertexColors",
  "VertexComponent",
  "VertexConnectivity",
  "VertexContract",
  "VertexCoordinateRules",
  "VertexCoordinates",
  "VertexCorrelationSimilarity",
  "VertexCosineSimilarity",
  "VertexCount",
  "VertexCoverQ",
  "VertexDataCoordinates",
  "VertexDegree",
  "VertexDelete",
  "VertexDiceSimilarity",
  "VertexEccentricity",
  "VertexInComponent",
  "VertexInDegree",
  "VertexIndex",
  "VertexJaccardSimilarity",
  "VertexLabeling",
  "VertexLabels",
  "VertexLabelStyle",
  "VertexList",
  "VertexNormals",
  "VertexOutComponent",
  "VertexOutDegree",
  "VertexQ",
  "VertexRenderingFunction",
  "VertexReplace",
  "VertexShape",
  "VertexShapeFunction",
  "VertexSize",
  "VertexStyle",
  "VertexTextureCoordinates",
  "VertexWeight",
  "VertexWeightedGraphQ",
  "Vertical",
  "VerticalBar",
  "VerticalForm",
  "VerticalGauge",
  "VerticalSeparator",
  "VerticalSlider",
  "VerticalTilde",
  "Video",
  "VideoEncoding",
  "VideoExtractFrames",
  "VideoFrameList",
  "VideoFrameMap",
  "VideoPause",
  "VideoPlay",
  "VideoQ",
  "VideoStop",
  "VideoStream",
  "VideoStreams",
  "VideoTimeSeries",
  "VideoTracks",
  "VideoTrim",
  "ViewAngle",
  "ViewCenter",
  "ViewMatrix",
  "ViewPoint",
  "ViewPointSelectorSettings",
  "ViewPort",
  "ViewProjection",
  "ViewRange",
  "ViewVector",
  "ViewVertical",
  "VirtualGroupData",
  "Visible",
  "VisibleCell",
  "VoiceStyleData",
  "VoigtDistribution",
  "VolcanoData",
  "Volume",
  "VonMisesDistribution",
  "VoronoiMesh",
  "WaitAll",
  "WaitAsynchronousTask",
  "WaitNext",
  "WaitUntil",
  "WakebyDistribution",
  "WalleniusHypergeometricDistribution",
  "WaringYuleDistribution",
  "WarpingCorrespondence",
  "WarpingDistance",
  "WatershedComponents",
  "WatsonUSquareTest",
  "WattsStrogatzGraphDistribution",
  "WaveletBestBasis",
  "WaveletFilterCoefficients",
  "WaveletImagePlot",
  "WaveletListPlot",
  "WaveletMapIndexed",
  "WaveletMatrixPlot",
  "WaveletPhi",
  "WaveletPsi",
  "WaveletScale",
  "WaveletScalogram",
  "WaveletThreshold",
  "WeaklyConnectedComponents",
  "WeaklyConnectedGraphComponents",
  "WeaklyConnectedGraphQ",
  "WeakStationarity",
  "WeatherData",
  "WeatherForecastData",
  "WebAudioSearch",
  "WebElementObject",
  "WeberE",
  "WebExecute",
  "WebImage",
  "WebImageSearch",
  "WebSearch",
  "WebSessionObject",
  "WebSessions",
  "WebWindowObject",
  "Wedge",
  "Wednesday",
  "WeibullDistribution",
  "WeierstrassE1",
  "WeierstrassE2",
  "WeierstrassE3",
  "WeierstrassEta1",
  "WeierstrassEta2",
  "WeierstrassEta3",
  "WeierstrassHalfPeriods",
  "WeierstrassHalfPeriodW1",
  "WeierstrassHalfPeriodW2",
  "WeierstrassHalfPeriodW3",
  "WeierstrassInvariantG2",
  "WeierstrassInvariantG3",
  "WeierstrassInvariants",
  "WeierstrassP",
  "WeierstrassPPrime",
  "WeierstrassSigma",
  "WeierstrassZeta",
  "WeightedAdjacencyGraph",
  "WeightedAdjacencyMatrix",
  "WeightedData",
  "WeightedGraphQ",
  "Weights",
  "WelchWindow",
  "WheelGraph",
  "WhenEvent",
  "Which",
  "While",
  "White",
  "WhiteNoiseProcess",
  "WhitePoint",
  "Whitespace",
  "WhitespaceCharacter",
  "WhittakerM",
  "WhittakerW",
  "WienerFilter",
  "WienerProcess",
  "WignerD",
  "WignerSemicircleDistribution",
  "WikidataData",
  "WikidataSearch",
  "WikipediaData",
  "WikipediaSearch",
  "WilksW",
  "WilksWTest",
  "WindDirectionData",
  "WindingCount",
  "WindingPolygon",
  "WindowClickSelect",
  "WindowElements",
  "WindowFloating",
  "WindowFrame",
  "WindowFrameElements",
  "WindowMargins",
  "WindowMovable",
  "WindowOpacity",
  "WindowPersistentStyles",
  "WindowSelected",
  "WindowSize",
  "WindowStatusArea",
  "WindowTitle",
  "WindowToolbars",
  "WindowWidth",
  "WindSpeedData",
  "WindVectorData",
  "WinsorizedMean",
  "WinsorizedVariance",
  "WishartMatrixDistribution",
  "With",
  "WolframAlpha",
  "WolframAlphaDate",
  "WolframAlphaQuantity",
  "WolframAlphaResult",
  "WolframLanguageData",
  "Word",
  "WordBoundary",
  "WordCharacter",
  "WordCloud",
  "WordCount",
  "WordCounts",
  "WordData",
  "WordDefinition",
  "WordFrequency",
  "WordFrequencyData",
  "WordList",
  "WordOrientation",
  "WordSearch",
  "WordSelectionFunction",
  "WordSeparators",
  "WordSpacings",
  "WordStem",
  "WordTranslation",
  "WorkingPrecision",
  "WrapAround",
  "Write",
  "WriteLine",
  "WriteString",
  "Wronskian",
  "XMLElement",
  "XMLObject",
  "XMLTemplate",
  "Xnor",
  "Xor",
  "XYZColor",
  "Yellow",
  "Yesterday",
  "YuleDissimilarity",
  "ZernikeR",
  "ZeroSymmetric",
  "ZeroTest",
  "ZeroWidthTimes",
  "Zeta",
  "ZetaZero",
  "ZIPCodeData",
  "ZipfDistribution",
  "ZoomCenter",
  "ZoomFactor",
  "ZTest",
  "ZTransform",
  "$Aborted",
  "$ActivationGroupID",
  "$ActivationKey",
  "$ActivationUserRegistered",
  "$AddOnsDirectory",
  "$AllowDataUpdates",
  "$AllowExternalChannelFunctions",
  "$AllowInternet",
  "$AssertFunction",
  "$Assumptions",
  "$AsynchronousTask",
  "$AudioDecoders",
  "$AudioEncoders",
  "$AudioInputDevices",
  "$AudioOutputDevices",
  "$BaseDirectory",
  "$BasePacletsDirectory",
  "$BatchInput",
  "$BatchOutput",
  "$BlockchainBase",
  "$BoxForms",
  "$ByteOrdering",
  "$CacheBaseDirectory",
  "$Canceled",
  "$ChannelBase",
  "$CharacterEncoding",
  "$CharacterEncodings",
  "$CloudAccountName",
  "$CloudBase",
  "$CloudConnected",
  "$CloudConnection",
  "$CloudCreditsAvailable",
  "$CloudEvaluation",
  "$CloudExpressionBase",
  "$CloudObjectNameFormat",
  "$CloudObjectURLType",
  "$CloudRootDirectory",
  "$CloudSymbolBase",
  "$CloudUserID",
  "$CloudUserUUID",
  "$CloudVersion",
  "$CloudVersionNumber",
  "$CloudWolframEngineVersionNumber",
  "$CommandLine",
  "$CompilationTarget",
  "$ConditionHold",
  "$ConfiguredKernels",
  "$Context",
  "$ContextPath",
  "$ControlActiveSetting",
  "$Cookies",
  "$CookieStore",
  "$CreationDate",
  "$CurrentLink",
  "$CurrentTask",
  "$CurrentWebSession",
  "$DataStructures",
  "$DateStringFormat",
  "$DefaultAudioInputDevice",
  "$DefaultAudioOutputDevice",
  "$DefaultFont",
  "$DefaultFrontEnd",
  "$DefaultImagingDevice",
  "$DefaultLocalBase",
  "$DefaultMailbox",
  "$DefaultNetworkInterface",
  "$DefaultPath",
  "$DefaultProxyRules",
  "$DefaultSystemCredentialStore",
  "$Display",
  "$DisplayFunction",
  "$DistributedContexts",
  "$DynamicEvaluation",
  "$Echo",
  "$EmbedCodeEnvironments",
  "$EmbeddableServices",
  "$EntityStores",
  "$Epilog",
  "$EvaluationCloudBase",
  "$EvaluationCloudObject",
  "$EvaluationEnvironment",
  "$ExportFormats",
  "$ExternalIdentifierTypes",
  "$ExternalStorageBase",
  "$Failed",
  "$FinancialDataSource",
  "$FontFamilies",
  "$FormatType",
  "$FrontEnd",
  "$FrontEndSession",
  "$GeoEntityTypes",
  "$GeoLocation",
  "$GeoLocationCity",
  "$GeoLocationCountry",
  "$GeoLocationPrecision",
  "$GeoLocationSource",
  "$HistoryLength",
  "$HomeDirectory",
  "$HTMLExportRules",
  "$HTTPCookies",
  "$HTTPRequest",
  "$IgnoreEOF",
  "$ImageFormattingWidth",
  "$ImageResolution",
  "$ImagingDevice",
  "$ImagingDevices",
  "$ImportFormats",
  "$IncomingMailSettings",
  "$InitialDirectory",
  "$Initialization",
  "$InitializationContexts",
  "$Input",
  "$InputFileName",
  "$InputStreamMethods",
  "$Inspector",
  "$InstallationDate",
  "$InstallationDirectory",
  "$InterfaceEnvironment",
  "$InterpreterTypes",
  "$IterationLimit",
  "$KernelCount",
  "$KernelID",
  "$Language",
  "$LaunchDirectory",
  "$LibraryPath",
  "$LicenseExpirationDate",
  "$LicenseID",
  "$LicenseProcesses",
  "$LicenseServer",
  "$LicenseSubprocesses",
  "$LicenseType",
  "$Line",
  "$Linked",
  "$LinkSupported",
  "$LoadedFiles",
  "$LocalBase",
  "$LocalSymbolBase",
  "$MachineAddresses",
  "$MachineDomain",
  "$MachineDomains",
  "$MachineEpsilon",
  "$MachineID",
  "$MachineName",
  "$MachinePrecision",
  "$MachineType",
  "$MaxExtraPrecision",
  "$MaxLicenseProcesses",
  "$MaxLicenseSubprocesses",
  "$MaxMachineNumber",
  "$MaxNumber",
  "$MaxPiecewiseCases",
  "$MaxPrecision",
  "$MaxRootDegree",
  "$MessageGroups",
  "$MessageList",
  "$MessagePrePrint",
  "$Messages",
  "$MinMachineNumber",
  "$MinNumber",
  "$MinorReleaseNumber",
  "$MinPrecision",
  "$MobilePhone",
  "$ModuleNumber",
  "$NetworkConnected",
  "$NetworkInterfaces",
  "$NetworkLicense",
  "$NewMessage",
  "$NewSymbol",
  "$NotebookInlineStorageLimit",
  "$Notebooks",
  "$NoValue",
  "$NumberMarks",
  "$Off",
  "$OperatingSystem",
  "$Output",
  "$OutputForms",
  "$OutputSizeLimit",
  "$OutputStreamMethods",
  "$Packages",
  "$ParentLink",
  "$ParentProcessID",
  "$PasswordFile",
  "$PatchLevelID",
  "$Path",
  "$PathnameSeparator",
  "$PerformanceGoal",
  "$Permissions",
  "$PermissionsGroupBase",
  "$PersistenceBase",
  "$PersistencePath",
  "$PipeSupported",
  "$PlotTheme",
  "$Post",
  "$Pre",
  "$PreferencesDirectory",
  "$PreInitialization",
  "$PrePrint",
  "$PreRead",
  "$PrintForms",
  "$PrintLiteral",
  "$Printout3DPreviewer",
  "$ProcessID",
  "$ProcessorCount",
  "$ProcessorType",
  "$ProductInformation",
  "$ProgramName",
  "$PublisherID",
  "$RandomState",
  "$RecursionLimit",
  "$RegisteredDeviceClasses",
  "$RegisteredUserName",
  "$ReleaseNumber",
  "$RequesterAddress",
  "$RequesterWolframID",
  "$RequesterWolframUUID",
  "$RootDirectory",
  "$ScheduledTask",
  "$ScriptCommandLine",
  "$ScriptInputString",
  "$SecuredAuthenticationKeyTokens",
  "$ServiceCreditsAvailable",
  "$Services",
  "$SessionID",
  "$SetParentLink",
  "$SharedFunctions",
  "$SharedVariables",
  "$SoundDisplay",
  "$SoundDisplayFunction",
  "$SourceLink",
  "$SSHAuthentication",
  "$SubtitleDecoders",
  "$SubtitleEncoders",
  "$SummaryBoxDataSizeLimit",
  "$SuppressInputFormHeads",
  "$SynchronousEvaluation",
  "$SyntaxHandler",
  "$System",
  "$SystemCharacterEncoding",
  "$SystemCredentialStore",
  "$SystemID",
  "$SystemMemory",
  "$SystemShell",
  "$SystemTimeZone",
  "$SystemWordLength",
  "$TemplatePath",
  "$TemporaryDirectory",
  "$TemporaryPrefix",
  "$TestFileName",
  "$TextStyle",
  "$TimedOut",
  "$TimeUnit",
  "$TimeZone",
  "$TimeZoneEntity",
  "$TopDirectory",
  "$TraceOff",
  "$TraceOn",
  "$TracePattern",
  "$TracePostAction",
  "$TracePreAction",
  "$UnitSystem",
  "$Urgent",
  "$UserAddOnsDirectory",
  "$UserAgentLanguages",
  "$UserAgentMachine",
  "$UserAgentName",
  "$UserAgentOperatingSystem",
  "$UserAgentString",
  "$UserAgentVersion",
  "$UserBaseDirectory",
  "$UserBasePacletsDirectory",
  "$UserDocumentsDirectory",
  "$Username",
  "$UserName",
  "$UserURLBase",
  "$Version",
  "$VersionNumber",
  "$VideoDecoders",
  "$VideoEncoders",
  "$VoiceStyles",
  "$WolframDocumentsDirectory",
  "$WolframID",
  "$WolframUUID"
];
function source$a(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function optional$1(re) {
  return concat$a("(", re, ")?");
}
function concat$a(...args) {
  const joined = args.map((x2) => source$a(x2)).join("");
  return joined;
}
function either$5(...args) {
  const joined = "(" + args.map((x2) => source$a(x2)).join("|") + ")";
  return joined;
}
function mathematica(hljs2) {
  const BASE_RE = /([2-9]|[1-2]\d|[3][0-5])\^\^/;
  const BASE_DIGITS_RE = /(\w*\.\w+|\w+\.\w*|\w+)/;
  const NUMBER_RE2 = /(\d*\.\d+|\d+\.\d*|\d+)/;
  const BASE_NUMBER_RE = either$5(concat$a(BASE_RE, BASE_DIGITS_RE), NUMBER_RE2);
  const ACCURACY_RE = /``[+-]?(\d*\.\d+|\d+\.\d*|\d+)/;
  const PRECISION_RE = /`([+-]?(\d*\.\d+|\d+\.\d*|\d+))?/;
  const APPROXIMATE_NUMBER_RE = either$5(ACCURACY_RE, PRECISION_RE);
  const SCIENTIFIC_NOTATION_RE = /\*\^[+-]?\d+/;
  const MATHEMATICA_NUMBER_RE = concat$a(BASE_NUMBER_RE, optional$1(APPROXIMATE_NUMBER_RE), optional$1(SCIENTIFIC_NOTATION_RE));
  const NUMBERS = {
    className: "number",
    relevance: 0,
    begin: MATHEMATICA_NUMBER_RE
  };
  const SYMBOL_RE = /[a-zA-Z$][a-zA-Z0-9$]*/;
  const SYSTEM_SYMBOLS_SET = new Set(SYSTEM_SYMBOLS);
  const SYMBOLS = {
    variants: [
      {
        className: "builtin-symbol",
        begin: SYMBOL_RE,
        "on:begin": (match2, response) => {
          if (!SYSTEM_SYMBOLS_SET.has(match2[0]))
            response.ignoreMatch();
        }
      },
      {
        className: "symbol",
        relevance: 0,
        begin: SYMBOL_RE
      }
    ]
  };
  const NAMED_CHARACTER = {
    className: "named-character",
    begin: /\\\[[$a-zA-Z][$a-zA-Z0-9]+\]/
  };
  const OPERATORS = {
    className: "operator",
    relevance: 0,
    begin: /[+\-*/,;.:@~=><&|_`'^?!%]+/
  };
  const PATTERNS = {
    className: "pattern",
    relevance: 0,
    begin: /([a-zA-Z$][a-zA-Z0-9$]*)?_+([a-zA-Z$][a-zA-Z0-9$]*)?/
  };
  const SLOTS = {
    className: "slot",
    relevance: 0,
    begin: /#[a-zA-Z$][a-zA-Z0-9$]*|#+[0-9]?/
  };
  const BRACES = {
    className: "brace",
    relevance: 0,
    begin: /[[\](){}]/
  };
  const MESSAGES = {
    className: "message-name",
    relevance: 0,
    begin: concat$a("::", SYMBOL_RE)
  };
  return {
    name: "Mathematica",
    aliases: [
      "mma",
      "wl"
    ],
    classNameAliases: {
      brace: "punctuation",
      pattern: "type",
      slot: "type",
      symbol: "variable",
      "named-character": "variable",
      "builtin-symbol": "built_in",
      "message-name": "string"
    },
    contains: [
      hljs2.COMMENT(/\(\*/, /\*\)/, {
        contains: ["self"]
      }),
      PATTERNS,
      SLOTS,
      MESSAGES,
      SYMBOLS,
      NAMED_CHARACTER,
      hljs2.QUOTE_STRING_MODE,
      NUMBERS,
      OPERATORS,
      BRACES
    ]
  };
}
var mathematica_1 = mathematica;
function matlab(hljs2) {
  var TRANSPOSE_RE = "('|\\.')+";
  var TRANSPOSE = {
    relevance: 0,
    contains: [
      {begin: TRANSPOSE_RE}
    ]
  };
  return {
    name: "Matlab",
    keywords: {
      keyword: "arguments break case catch classdef continue else elseif end enumeration events for function global if methods otherwise parfor persistent properties return spmd switch try while",
      built_in: "sin sind sinh asin asind asinh cos cosd cosh acos acosd acosh tan tand tanh atan atand atan2 atanh sec secd sech asec asecd asech csc cscd csch acsc acscd acsch cot cotd coth acot acotd acoth hypot exp expm1 log log1p log10 log2 pow2 realpow reallog realsqrt sqrt nthroot nextpow2 abs angle complex conj imag real unwrap isreal cplxpair fix floor ceil round mod rem sign airy besselj bessely besselh besseli besselk beta betainc betaln ellipj ellipke erf erfc erfcx erfinv expint gamma gammainc gammaln psi legendre cross dot factor isprime primes gcd lcm rat rats perms nchoosek factorial cart2sph cart2pol pol2cart sph2cart hsv2rgb rgb2hsv zeros ones eye repmat rand randn linspace logspace freqspace meshgrid accumarray size length ndims numel disp isempty isequal isequalwithequalnans cat reshape diag blkdiag tril triu fliplr flipud flipdim rot90 find sub2ind ind2sub bsxfun ndgrid permute ipermute shiftdim circshift squeeze isscalar isvector ans eps realmax realmin pi i|0 inf nan isnan isinf isfinite j|0 why compan gallery hadamard hankel hilb invhilb magic pascal rosser toeplitz vander wilkinson max min nanmax nanmin mean nanmean type table readtable writetable sortrows sort figure plot plot3 scatter scatter3 cellfun legend intersect ismember procrustes hold num2cell "
    },
    illegal: '(//|"|#|/\\*|\\s+/\\w+)',
    contains: [
      {
        className: "function",
        beginKeywords: "function",
        end: "$",
        contains: [
          hljs2.UNDERSCORE_TITLE_MODE,
          {
            className: "params",
            variants: [
              {begin: "\\(", end: "\\)"},
              {begin: "\\[", end: "\\]"}
            ]
          }
        ]
      },
      {
        className: "built_in",
        begin: /true|false/,
        relevance: 0,
        starts: TRANSPOSE
      },
      {
        begin: "[a-zA-Z][a-zA-Z_0-9]*" + TRANSPOSE_RE,
        relevance: 0
      },
      {
        className: "number",
        begin: hljs2.C_NUMBER_RE,
        relevance: 0,
        starts: TRANSPOSE
      },
      {
        className: "string",
        begin: "'",
        end: "'",
        contains: [
          hljs2.BACKSLASH_ESCAPE,
          {begin: "''"}
        ]
      },
      {
        begin: /\]|\}|\)/,
        relevance: 0,
        starts: TRANSPOSE
      },
      {
        className: "string",
        begin: '"',
        end: '"',
        contains: [
          hljs2.BACKSLASH_ESCAPE,
          {begin: '""'}
        ],
        starts: TRANSPOSE
      },
      hljs2.COMMENT("^\\s*%\\{\\s*$", "^\\s*%\\}\\s*$"),
      hljs2.COMMENT("%", "$")
    ]
  };
}
var matlab_1 = matlab;
function maxima(hljs2) {
  const KEYWORDS2 = "if then else elseif for thru do while unless step in and or not";
  const LITERALS2 = "true false unknown inf minf ind und %e %i %pi %phi %gamma";
  const BUILTIN_FUNCTIONS = " abasep abs absint absolute_real_time acos acosh acot acoth acsc acsch activate addcol add_edge add_edges addmatrices addrow add_vertex add_vertices adjacency_matrix adjoin adjoint af agd airy airy_ai airy_bi airy_dai airy_dbi algsys alg_type alias allroots alphacharp alphanumericp amortization %and annuity_fv annuity_pv antid antidiff AntiDifference append appendfile apply apply1 apply2 applyb1 apropos args arit_amortization arithmetic arithsum array arrayapply arrayinfo arraymake arraysetapply ascii asec asech asin asinh askinteger asksign assoc assoc_legendre_p assoc_legendre_q assume assume_external_byte_order asympa at atan atan2 atanh atensimp atom atvalue augcoefmatrix augmented_lagrangian_method av average_degree backtrace bars barsplot barsplot_description base64 base64_decode bashindices batch batchload bc2 bdvac belln benefit_cost bern bernpoly bernstein_approx bernstein_expand bernstein_poly bessel bessel_i bessel_j bessel_k bessel_simplify bessel_y beta beta_incomplete beta_incomplete_generalized beta_incomplete_regularized bezout bfallroots bffac bf_find_root bf_fmin_cobyla bfhzeta bfloat bfloatp bfpsi bfpsi0 bfzeta biconnected_components bimetric binomial bipartition block blockmatrixp bode_gain bode_phase bothcoef box boxplot boxplot_description break bug_report build_info|10 buildq build_sample burn cabs canform canten cardinality carg cartan cartesian_product catch cauchy_matrix cbffac cdf_bernoulli cdf_beta cdf_binomial cdf_cauchy cdf_chi2 cdf_continuous_uniform cdf_discrete_uniform cdf_exp cdf_f cdf_gamma cdf_general_finite_discrete cdf_geometric cdf_gumbel cdf_hypergeometric cdf_laplace cdf_logistic cdf_lognormal cdf_negative_binomial cdf_noncentral_chi2 cdf_noncentral_student_t cdf_normal cdf_pareto cdf_poisson cdf_rank_sum cdf_rayleigh cdf_signed_rank cdf_student_t cdf_weibull cdisplay ceiling central_moment cequal cequalignore cf cfdisrep cfexpand cgeodesic cgreaterp cgreaterpignore changename changevar chaosgame charat charfun charfun2 charlist charp charpoly chdir chebyshev_t chebyshev_u checkdiv check_overlaps chinese cholesky christof chromatic_index chromatic_number cint circulant_graph clear_edge_weight clear_rules clear_vertex_label clebsch_gordan clebsch_graph clessp clesspignore close closefile cmetric coeff coefmatrix cograd col collapse collectterms columnop columnspace columnswap columnvector combination combine comp2pui compare compfile compile compile_file complement_graph complete_bipartite_graph complete_graph complex_number_p components compose_functions concan concat conjugate conmetderiv connected_components connect_vertices cons constant constantp constituent constvalue cont2part content continuous_freq contortion contour_plot contract contract_edge contragrad contrib_ode convert coord copy copy_file copy_graph copylist copymatrix cor cos cosh cot coth cov cov1 covdiff covect covers crc24sum create_graph create_list csc csch csetup cspline ctaylor ct_coordsys ctransform ctranspose cube_graph cuboctahedron_graph cunlisp cv cycle_digraph cycle_graph cylindrical days360 dblint deactivate declare declare_constvalue declare_dimensions declare_fundamental_dimensions declare_fundamental_units declare_qty declare_translated declare_unit_conversion declare_units declare_weights decsym defcon define define_alt_display define_variable defint defmatch defrule defstruct deftaylor degree_sequence del delete deleten delta demo demoivre denom depends derivdegree derivlist describe desolve determinant dfloat dgauss_a dgauss_b dgeev dgemm dgeqrf dgesv dgesvd diag diagmatrix diag_matrix diagmatrixp diameter diff digitcharp dimacs_export dimacs_import dimension dimensionless dimensions dimensions_as_list direct directory discrete_freq disjoin disjointp disolate disp dispcon dispform dispfun dispJordan display disprule dispterms distrib divide divisors divsum dkummer_m dkummer_u dlange dodecahedron_graph dotproduct dotsimp dpart draw draw2d draw3d drawdf draw_file draw_graph dscalar echelon edge_coloring edge_connectivity edges eigens_by_jacobi eigenvalues eigenvectors eighth einstein eivals eivects elapsed_real_time elapsed_run_time ele2comp ele2polynome ele2pui elem elementp elevation_grid elim elim_allbut eliminate eliminate_using ellipse elliptic_e elliptic_ec elliptic_eu elliptic_f elliptic_kc elliptic_pi ematrix empty_graph emptyp endcons entermatrix entertensor entier equal equalp equiv_classes erf erfc erf_generalized erfi errcatch error errormsg errors euler ev eval_string evenp every evolution evolution2d evundiff example exp expand expandwrt expandwrt_factored expint expintegral_chi expintegral_ci expintegral_e expintegral_e1 expintegral_ei expintegral_e_simplify expintegral_li expintegral_shi expintegral_si explicit explose exponentialize express expt exsec extdiff extract_linear_equations extremal_subset ezgcd %f f90 facsum factcomb factor factorfacsum factorial factorout factorsum facts fast_central_elements fast_linsolve fasttimes featurep fernfale fft fib fibtophi fifth filename_merge file_search file_type fillarray findde find_root find_root_abs find_root_error find_root_rel first fix flatten flength float floatnump floor flower_snark flush flush1deriv flushd flushnd flush_output fmin_cobyla forget fortran fourcos fourexpand fourier fourier_elim fourint fourintcos fourintsin foursimp foursin fourth fposition frame_bracket freeof freshline fresnel_c fresnel_s from_adjacency_matrix frucht_graph full_listify fullmap fullmapl fullratsimp fullratsubst fullsetify funcsolve fundamental_dimensions fundamental_units fundef funmake funp fv g0 g1 gamma gamma_greek gamma_incomplete gamma_incomplete_generalized gamma_incomplete_regularized gauss gauss_a gauss_b gaussprob gcd gcdex gcdivide gcfac gcfactor gd generalized_lambert_w genfact gen_laguerre genmatrix gensym geo_amortization geo_annuity_fv geo_annuity_pv geomap geometric geometric_mean geosum get getcurrentdirectory get_edge_weight getenv get_lu_factors get_output_stream_string get_pixel get_plot_option get_tex_environment get_tex_environment_default get_vertex_label gfactor gfactorsum ggf girth global_variances gn gnuplot_close gnuplot_replot gnuplot_reset gnuplot_restart gnuplot_start go Gosper GosperSum gr2d gr3d gradef gramschmidt graph6_decode graph6_encode graph6_export graph6_import graph_center graph_charpoly graph_eigenvalues graph_flow graph_order graph_periphery graph_product graph_size graph_union great_rhombicosidodecahedron_graph great_rhombicuboctahedron_graph grid_graph grind grobner_basis grotzch_graph hamilton_cycle hamilton_path hankel hankel_1 hankel_2 harmonic harmonic_mean hav heawood_graph hermite hessian hgfred hilbertmap hilbert_matrix hipow histogram histogram_description hodge horner hypergeometric i0 i1 %ibes ic1 ic2 ic_convert ichr1 ichr2 icosahedron_graph icosidodecahedron_graph icurvature ident identfor identity idiff idim idummy ieqn %if ifactors iframes ifs igcdex igeodesic_coords ilt image imagpart imetric implicit implicit_derivative implicit_plot indexed_tensor indices induced_subgraph inferencep inference_result infix info_display init_atensor init_ctensor in_neighbors innerproduct inpart inprod inrt integerp integer_partitions integrate intersect intersection intervalp intopois intosum invariant1 invariant2 inverse_fft inverse_jacobi_cd inverse_jacobi_cn inverse_jacobi_cs inverse_jacobi_dc inverse_jacobi_dn inverse_jacobi_ds inverse_jacobi_nc inverse_jacobi_nd inverse_jacobi_ns inverse_jacobi_sc inverse_jacobi_sd inverse_jacobi_sn invert invert_by_adjoint invert_by_lu inv_mod irr is is_biconnected is_bipartite is_connected is_digraph is_edge_in_graph is_graph is_graph_or_digraph ishow is_isomorphic isolate isomorphism is_planar isqrt isreal_p is_sconnected is_tree is_vertex_in_graph items_inference %j j0 j1 jacobi jacobian jacobi_cd jacobi_cn jacobi_cs jacobi_dc jacobi_dn jacobi_ds jacobi_nc jacobi_nd jacobi_ns jacobi_p jacobi_sc jacobi_sd jacobi_sn JF jn join jordan julia julia_set julia_sin %k kdels kdelta kill killcontext kostka kron_delta kronecker_product kummer_m kummer_u kurtosis kurtosis_bernoulli kurtosis_beta kurtosis_binomial kurtosis_chi2 kurtosis_continuous_uniform kurtosis_discrete_uniform kurtosis_exp kurtosis_f kurtosis_gamma kurtosis_general_finite_discrete kurtosis_geometric kurtosis_gumbel kurtosis_hypergeometric kurtosis_laplace kurtosis_logistic kurtosis_lognormal kurtosis_negative_binomial kurtosis_noncentral_chi2 kurtosis_noncentral_student_t kurtosis_normal kurtosis_pareto kurtosis_poisson kurtosis_rayleigh kurtosis_student_t kurtosis_weibull label labels lagrange laguerre lambda lambert_w laplace laplacian_matrix last lbfgs lc2kdt lcharp lc_l lcm lc_u ldefint ldisp ldisplay legendre_p legendre_q leinstein length let letrules letsimp levi_civita lfreeof lgtreillis lhs li liediff limit Lindstedt linear linearinterpol linear_program linear_regression line_graph linsolve listarray list_correlations listify list_matrix_entries list_nc_monomials listoftens listofvars listp lmax lmin load loadfile local locate_matrix_entry log logcontract log_gamma lopow lorentz_gauge lowercasep lpart lratsubst lreduce lriemann lsquares_estimates lsquares_estimates_approximate lsquares_estimates_exact lsquares_mse lsquares_residual_mse lsquares_residuals lsum ltreillis lu_backsub lucas lu_factor %m macroexpand macroexpand1 make_array makebox makefact makegamma make_graph make_level_picture makelist makeOrders make_poly_continent make_poly_country make_polygon make_random_state make_rgb_picture makeset make_string_input_stream make_string_output_stream make_transform mandelbrot mandelbrot_set map mapatom maplist matchdeclare matchfix mat_cond mat_fullunblocker mat_function mathml_display mat_norm matrix matrixmap matrixp matrix_size mattrace mat_trace mat_unblocker max max_clique max_degree max_flow maximize_lp max_independent_set max_matching maybe md5sum mean mean_bernoulli mean_beta mean_binomial mean_chi2 mean_continuous_uniform mean_deviation mean_discrete_uniform mean_exp mean_f mean_gamma mean_general_finite_discrete mean_geometric mean_gumbel mean_hypergeometric mean_laplace mean_logistic mean_lognormal mean_negative_binomial mean_noncentral_chi2 mean_noncentral_student_t mean_normal mean_pareto mean_poisson mean_rayleigh mean_student_t mean_weibull median median_deviation member mesh metricexpandall mgf1_sha1 min min_degree min_edge_cut minfactorial minimalPoly minimize_lp minimum_spanning_tree minor minpack_lsquares minpack_solve min_vertex_cover min_vertex_cut mkdir mnewton mod mode_declare mode_identity ModeMatrix moebius mon2schur mono monomial_dimensions multibernstein_poly multi_display_for_texinfo multi_elem multinomial multinomial_coeff multi_orbit multiplot_mode multi_pui multsym multthru mycielski_graph nary natural_unit nc_degree ncexpt ncharpoly negative_picture neighbors new newcontext newdet new_graph newline newton new_variable next_prime nicedummies niceindices ninth nofix nonarray noncentral_moment nonmetricity nonnegintegerp nonscalarp nonzeroandfreeof notequal nounify nptetrad npv nroots nterms ntermst nthroot nullity nullspace num numbered_boundaries numberp number_to_octets num_distinct_partitions numerval numfactor num_partitions nusum nzeta nzetai nzetar octets_to_number octets_to_oid odd_girth oddp ode2 ode_check odelin oid_to_octets op opena opena_binary openr openr_binary openw openw_binary operatorp opsubst optimize %or orbit orbits ordergreat ordergreatp orderless orderlessp orthogonal_complement orthopoly_recur orthopoly_weight outermap out_neighbors outofpois pade parabolic_cylinder_d parametric parametric_surface parg parGosper parse_string parse_timedate part part2cont partfrac partition partition_set partpol path_digraph path_graph pathname_directory pathname_name pathname_type pdf_bernoulli pdf_beta pdf_binomial pdf_cauchy pdf_chi2 pdf_continuous_uniform pdf_discrete_uniform pdf_exp pdf_f pdf_gamma pdf_general_finite_discrete pdf_geometric pdf_gumbel pdf_hypergeometric pdf_laplace pdf_logistic pdf_lognormal pdf_negative_binomial pdf_noncentral_chi2 pdf_noncentral_student_t pdf_normal pdf_pareto pdf_poisson pdf_rank_sum pdf_rayleigh pdf_signed_rank pdf_student_t pdf_weibull pearson_skewness permanent permut permutation permutations petersen_graph petrov pickapart picture_equalp picturep piechart piechart_description planar_embedding playback plog plot2d plot3d plotdf ploteq plsquares pochhammer points poisdiff poisexpt poisint poismap poisplus poissimp poissubst poistimes poistrim polar polarform polartorect polar_to_xy poly_add poly_buchberger poly_buchberger_criterion poly_colon_ideal poly_content polydecomp poly_depends_p poly_elimination_ideal poly_exact_divide poly_expand poly_expt poly_gcd polygon poly_grobner poly_grobner_equal poly_grobner_member poly_grobner_subsetp poly_ideal_intersection poly_ideal_polysaturation poly_ideal_polysaturation1 poly_ideal_saturation poly_ideal_saturation1 poly_lcm poly_minimization polymod poly_multiply polynome2ele polynomialp poly_normal_form poly_normalize poly_normalize_list poly_polysaturation_extension poly_primitive_part poly_pseudo_divide poly_reduced_grobner poly_reduction poly_saturation_extension poly_s_polynomial poly_subtract polytocompanion pop postfix potential power_mod powerseries powerset prefix prev_prime primep primes principal_components print printf printfile print_graph printpois printprops prodrac product properties propvars psi psubst ptriangularize pui pui2comp pui2ele pui2polynome pui_direct puireduc push put pv qput qrange qty quad_control quad_qag quad_qagi quad_qagp quad_qags quad_qawc quad_qawf quad_qawo quad_qaws quadrilateral quantile quantile_bernoulli quantile_beta quantile_binomial quantile_cauchy quantile_chi2 quantile_continuous_uniform quantile_discrete_uniform quantile_exp quantile_f quantile_gamma quantile_general_finite_discrete quantile_geometric quantile_gumbel quantile_hypergeometric quantile_laplace quantile_logistic quantile_lognormal quantile_negative_binomial quantile_noncentral_chi2 quantile_noncentral_student_t quantile_normal quantile_pareto quantile_poisson quantile_rayleigh quantile_student_t quantile_weibull quartile_skewness quit qunit quotient racah_v racah_w radcan radius random random_bernoulli random_beta random_binomial random_bipartite_graph random_cauchy random_chi2 random_continuous_uniform random_digraph random_discrete_uniform random_exp random_f random_gamma random_general_finite_discrete random_geometric random_graph random_graph1 random_gumbel random_hypergeometric random_laplace random_logistic random_lognormal random_negative_binomial random_network random_noncentral_chi2 random_noncentral_student_t random_normal random_pareto random_permutation random_poisson random_rayleigh random_regular_graph random_student_t random_tournament random_tree random_weibull range rank rat ratcoef ratdenom ratdiff ratdisrep ratexpand ratinterpol rational rationalize ratnumer ratnump ratp ratsimp ratsubst ratvars ratweight read read_array read_binary_array read_binary_list read_binary_matrix readbyte readchar read_hashed_array readline read_list read_matrix read_nested_list readonly read_xpm real_imagpart_to_conjugate realpart realroots rearray rectangle rectform rectform_log_if_constant recttopolar rediff reduce_consts reduce_order region region_boundaries region_boundaries_plus rem remainder remarray rembox remcomps remcon remcoord remfun remfunction remlet remove remove_constvalue remove_dimensions remove_edge remove_fundamental_dimensions remove_fundamental_units remove_plot_option remove_vertex rempart remrule remsym remvalue rename rename_file reset reset_displays residue resolvante resolvante_alternee1 resolvante_bipartite resolvante_diedrale resolvante_klein resolvante_klein3 resolvante_produit_sym resolvante_unitaire resolvante_vierer rest resultant return reveal reverse revert revert2 rgb2level rhs ricci riemann rinvariant risch rk rmdir rncombine romberg room rootscontract round row rowop rowswap rreduce run_testsuite %s save saving scalarp scaled_bessel_i scaled_bessel_i0 scaled_bessel_i1 scalefactors scanmap scatterplot scatterplot_description scene schur2comp sconcat scopy scsimp scurvature sdowncase sec sech second sequal sequalignore set_alt_display setdifference set_draw_defaults set_edge_weight setelmx setequalp setify setp set_partitions set_plot_option set_prompt set_random_state set_tex_environment set_tex_environment_default setunits setup_autoload set_up_dot_simplifications set_vertex_label seventh sexplode sf sha1sum sha256sum shortest_path shortest_weighted_path show showcomps showratvars sierpinskiale sierpinskimap sign signum similaritytransform simp_inequality simplify_sum simplode simpmetderiv simtran sin sinh sinsert sinvertcase sixth skewness skewness_bernoulli skewness_beta skewness_binomial skewness_chi2 skewness_continuous_uniform skewness_discrete_uniform skewness_exp skewness_f skewness_gamma skewness_general_finite_discrete skewness_geometric skewness_gumbel skewness_hypergeometric skewness_laplace skewness_logistic skewness_lognormal skewness_negative_binomial skewness_noncentral_chi2 skewness_noncentral_student_t skewness_normal skewness_pareto skewness_poisson skewness_rayleigh skewness_student_t skewness_weibull slength smake small_rhombicosidodecahedron_graph small_rhombicuboctahedron_graph smax smin smismatch snowmap snub_cube_graph snub_dodecahedron_graph solve solve_rec solve_rec_rat some somrac sort sparse6_decode sparse6_encode sparse6_export sparse6_import specint spherical spherical_bessel_j spherical_bessel_y spherical_hankel1 spherical_hankel2 spherical_harmonic spherical_to_xyz splice split sposition sprint sqfr sqrt sqrtdenest sremove sremovefirst sreverse ssearch ssort sstatus ssubst ssubstfirst staircase standardize standardize_inverse_trig starplot starplot_description status std std1 std_bernoulli std_beta std_binomial std_chi2 std_continuous_uniform std_discrete_uniform std_exp std_f std_gamma std_general_finite_discrete std_geometric std_gumbel std_hypergeometric std_laplace std_logistic std_lognormal std_negative_binomial std_noncentral_chi2 std_noncentral_student_t std_normal std_pareto std_poisson std_rayleigh std_student_t std_weibull stemplot stirling stirling1 stirling2 strim striml strimr string stringout stringp strong_components struve_h struve_l sublis sublist sublist_indices submatrix subsample subset subsetp subst substinpart subst_parallel substpart substring subvar subvarp sum sumcontract summand_to_rec supcase supcontext symbolp symmdifference symmetricp system take_channel take_inference tan tanh taylor taylorinfo taylorp taylor_simplifier taytorat tcl_output tcontract tellrat tellsimp tellsimpafter tentex tenth test_mean test_means_difference test_normality test_proportion test_proportions_difference test_rank_sum test_sign test_signed_rank test_variance test_variance_ratio tex tex1 tex_display texput %th third throw time timedate timer timer_info tldefint tlimit todd_coxeter toeplitz tokens to_lisp topological_sort to_poly to_poly_solve totaldisrep totalfourier totient tpartpol trace tracematrix trace_options transform_sample translate translate_file transpose treefale tree_reduce treillis treinat triangle triangularize trigexpand trigrat trigreduce trigsimp trunc truncate truncated_cube_graph truncated_dodecahedron_graph truncated_icosahedron_graph truncated_tetrahedron_graph tr_warnings_get tube tutte_graph ueivects uforget ultraspherical underlying_graph undiff union unique uniteigenvectors unitp units unit_step unitvector unorder unsum untellrat untimer untrace uppercasep uricci uriemann uvect vandermonde_matrix var var1 var_bernoulli var_beta var_binomial var_chi2 var_continuous_uniform var_discrete_uniform var_exp var_f var_gamma var_general_finite_discrete var_geometric var_gumbel var_hypergeometric var_laplace var_logistic var_lognormal var_negative_binomial var_noncentral_chi2 var_noncentral_student_t var_normal var_pareto var_poisson var_rayleigh var_student_t var_weibull vector vectorpotential vectorsimp verbify vers vertex_coloring vertex_connectivity vertex_degree vertex_distance vertex_eccentricity vertex_in_degree vertex_out_degree vertices vertices_to_cycle vertices_to_path %w weyl wheel_graph wiener_index wigner_3j wigner_6j wigner_9j with_stdout write_binary_data writebyte write_data writefile wronskian xreduce xthru %y Zeilberger zeroequiv zerofor zeromatrix zeromatrixp zeta zgeev zheev zlange zn_add_table zn_carmichael_lambda zn_characteristic_factors zn_determinant zn_factor_generators zn_invert_by_lu zn_log zn_mult_table absboxchar activecontexts adapt_depth additive adim aform algebraic algepsilon algexact aliases allbut all_dotsimp_denoms allocation allsym alphabetic animation antisymmetric arrays askexp assume_pos assume_pos_pred assumescalar asymbol atomgrad atrig1 axes axis_3d axis_bottom axis_left axis_right axis_top azimuth background background_color backsubst berlefact bernstein_explicit besselexpand beta_args_sum_to_integer beta_expand bftorat bftrunc bindtest border boundaries_array box boxchar breakup %c capping cauchysum cbrange cbtics center cflength cframe_flag cnonmet_flag color color_bar color_bar_tics colorbox columns commutative complex cone context contexts contour contour_levels cosnpiflag ctaypov ctaypt ctayswitch ctayvar ct_coords ctorsion_flag ctrgsimp cube current_let_rule_package cylinder data_file_name debugmode decreasing default_let_rule_package delay dependencies derivabbrev derivsubst detout diagmetric diff dim dimensions dispflag display2d|10 display_format_internal distribute_over doallmxops domain domxexpt domxmxops domxnctimes dontfactor doscmxops doscmxplus dot0nscsimp dot0simp dot1simp dotassoc dotconstrules dotdistrib dotexptsimp dotident dotscrules draw_graph_program draw_realpart edge_color edge_coloring edge_partition edge_type edge_width %edispflag elevation %emode endphi endtheta engineering_format_floats enhanced3d %enumer epsilon_lp erfflag erf_representation errormsg error_size error_syms error_type %e_to_numlog eval even evenfun evflag evfun ev_point expandwrt_denom expintexpand expintrep expon expop exptdispflag exptisolate exptsubst facexpand facsum_combine factlim factorflag factorial_expand factors_only fb feature features file_name file_output_append file_search_demo file_search_lisp file_search_maxima|10 file_search_tests file_search_usage file_type_lisp file_type_maxima|10 fill_color fill_density filled_func fixed_vertices flipflag float2bf font font_size fortindent fortspaces fpprec fpprintprec functions gamma_expand gammalim gdet genindex gensumnum GGFCFMAX GGFINFINITY globalsolve gnuplot_command gnuplot_curve_styles gnuplot_curve_titles gnuplot_default_term_command gnuplot_dumb_term_command gnuplot_file_args gnuplot_file_name gnuplot_out_file gnuplot_pdf_term_command gnuplot_pm3d gnuplot_png_term_command gnuplot_postamble gnuplot_preamble gnuplot_ps_term_command gnuplot_svg_term_command gnuplot_term gnuplot_view_args Gosper_in_Zeilberger gradefs grid grid2d grind halfangles head_angle head_both head_length head_type height hypergeometric_representation %iargs ibase icc1 icc2 icounter idummyx ieqnprint ifb ifc1 ifc2 ifg ifgi ifr iframe_bracket_form ifri igeowedge_flag ikt1 ikt2 imaginary inchar increasing infeval infinity inflag infolists inm inmc1 inmc2 intanalysis integer integervalued integrate_use_rootsof integration_constant integration_constant_counter interpolate_color intfaclim ip_grid ip_grid_in irrational isolate_wrt_times iterations itr julia_parameter %k1 %k2 keepfloat key key_pos kinvariant kt label label_alignment label_orientation labels lassociative lbfgs_ncorrections lbfgs_nfeval_max leftjust legend letrat let_rule_packages lfg lg lhospitallim limsubst linear linear_solver linechar linel|10 linenum line_type linewidth line_width linsolve_params linsolvewarn lispdisp listarith listconstvars listdummyvars lmxchar load_pathname loadprint logabs logarc logcb logconcoeffp logexpand lognegint logsimp logx logx_secondary logy logy_secondary logz lriem m1pbranch macroexpansion macros mainvar manual_demo maperror mapprint matrix_element_add matrix_element_mult matrix_element_transpose maxapplydepth maxapplyheight maxima_tempdir|10 maxima_userdir|10 maxnegex MAX_ORD maxposex maxpsifracdenom maxpsifracnum maxpsinegint maxpsiposint maxtayorder mesh_lines_color method mod_big_prime mode_check_errorp mode_checkp mode_check_warnp mod_test mod_threshold modular_linear_solver modulus multiplicative multiplicities myoptions nary negdistrib negsumdispflag newline newtonepsilon newtonmaxiter nextlayerfactor niceindicespref nm nmc noeval nolabels nonegative_lp noninteger nonscalar noun noundisp nouns np npi nticks ntrig numer numer_pbranch obase odd oddfun opacity opproperties opsubst optimprefix optionset orientation origin orthopoly_returns_intervals outative outchar packagefile palette partswitch pdf_file pfeformat phiresolution %piargs piece pivot_count_sx pivot_max_sx plot_format plot_options plot_realpart png_file pochhammer_max_index points pointsize point_size points_joined point_type poislim poisson poly_coefficient_ring poly_elimination_order polyfactor poly_grobner_algorithm poly_grobner_debug poly_monomial_order poly_primary_elimination_order poly_return_term_list poly_secondary_elimination_order poly_top_reduction_only posfun position powerdisp pred prederror primep_number_of_tests product_use_gamma program programmode promote_float_to_bigfloat prompt proportional_axes props psexpand ps_file radexpand radius radsubstflag rassociative ratalgdenom ratchristof ratdenomdivide rateinstein ratepsilon ratfac rational ratmx ratprint ratriemann ratsimpexpons ratvarswitch ratweights ratweyl ratwtlvl real realonly redraw refcheck resolution restart resultant ric riem rmxchar %rnum_list rombergabs rombergit rombergmin rombergtol rootsconmode rootsepsilon run_viewer same_xy same_xyz savedef savefactors scalar scalarmatrixp scale scale_lp setcheck setcheckbreak setval show_edge_color show_edges show_edge_type show_edge_width show_id show_label showtime show_vertex_color show_vertex_size show_vertex_type show_vertices show_weight simp simplified_output simplify_products simpproduct simpsum sinnpiflag solvedecomposes solveexplicit solvefactors solvenullwarn solveradcan solvetrigwarn space sparse sphere spring_embedding_depth sqrtdispflag stardisp startphi starttheta stats_numer stringdisp structures style sublis_apply_lambda subnumsimp sumexpand sumsplitfact surface surface_hide svg_file symmetric tab taylordepth taylor_logexpand taylor_order_coefficients taylor_truncate_polynomials tensorkill terminal testsuite_files thetaresolution timer_devalue title tlimswitch tr track transcompile transform transform_xy translate_fast_arrays transparent transrun tr_array_as_ref tr_bound_function_applyp tr_file_tty_messagesp tr_float_can_branch_complex tr_function_call_default trigexpandplus trigexpandtimes triginverses trigsign trivial_solutions tr_numer tr_optimize_max_loop tr_semicompile tr_state_vars tr_warn_bad_function_calls tr_warn_fexpr tr_warn_meval tr_warn_mode tr_warn_undeclared tr_warn_undefined_variable tstep ttyoff tube_extremes ufg ug %unitexpand unit_vectors uric uriem use_fast_arrays user_preamble usersetunits values vect_cross verbose vertex_color vertex_coloring vertex_partition vertex_size vertex_type view warnings weyl width windowname windowtitle wired_surface wireframe xaxis xaxis_color xaxis_secondary xaxis_type xaxis_width xlabel xlabel_secondary xlength xrange xrange_secondary xtics xtics_axis xtics_rotate xtics_rotate_secondary xtics_secondary xtics_secondary_axis xu_grid x_voxel xy_file xyplane xy_scale yaxis yaxis_color yaxis_secondary yaxis_type yaxis_width ylabel ylabel_secondary ylength yrange yrange_secondary ytics ytics_axis ytics_rotate ytics_rotate_secondary ytics_secondary ytics_secondary_axis yv_grid y_voxel yx_ratio zaxis zaxis_color zaxis_type zaxis_width zeroa zerob zerobern zeta%pi zlabel zlabel_rotate zlength zmin zn_primroot_limit zn_primroot_pretest";
  const SYMBOLS = "_ __ %|0 %%|0";
  return {
    name: "Maxima",
    keywords: {
      $pattern: "[A-Za-z_%][0-9A-Za-z_%]*",
      keyword: KEYWORDS2,
      literal: LITERALS2,
      built_in: BUILTIN_FUNCTIONS,
      symbol: SYMBOLS
    },
    contains: [
      {
        className: "comment",
        begin: "/\\*",
        end: "\\*/",
        contains: ["self"]
      },
      hljs2.QUOTE_STRING_MODE,
      {
        className: "number",
        relevance: 0,
        variants: [
          {
            begin: "\\b(\\d+|\\d+\\.|\\.\\d+|\\d+\\.\\d+)[Ee][-+]?\\d+\\b"
          },
          {
            begin: "\\b(\\d+|\\d+\\.|\\.\\d+|\\d+\\.\\d+)[Bb][-+]?\\d+\\b",
            relevance: 10
          },
          {
            begin: "\\b(\\.\\d+|\\d+\\.\\d+)\\b"
          },
          {
            begin: "\\b(\\d+|0[0-9A-Za-z]+)\\.?\\b"
          }
        ]
      }
    ],
    illegal: /@/
  };
}
var maxima_1 = maxima;
function mel(hljs2) {
  return {
    name: "MEL",
    keywords: "int float string vector matrix if else switch case default while do for in break continue global proc return about abs addAttr addAttributeEditorNodeHelp addDynamic addNewShelfTab addPP addPanelCategory addPrefixToName advanceToNextDrivenKey affectedNet affects aimConstraint air alias aliasAttr align alignCtx alignCurve alignSurface allViewFit ambientLight angle angleBetween animCone animCurveEditor animDisplay animView annotate appendStringArray applicationName applyAttrPreset applyTake arcLenDimContext arcLengthDimension arclen arrayMapper art3dPaintCtx artAttrCtx artAttrPaintVertexCtx artAttrSkinPaintCtx artAttrTool artBuildPaintMenu artFluidAttrCtx artPuttyCtx artSelectCtx artSetPaintCtx artUserPaintCtx assignCommand assignInputDevice assignViewportFactories attachCurve attachDeviceAttr attachSurface attrColorSliderGrp attrCompatibility attrControlGrp attrEnumOptionMenu attrEnumOptionMenuGrp attrFieldGrp attrFieldSliderGrp attrNavigationControlGrp attrPresetEditWin attributeExists attributeInfo attributeMenu attributeQuery autoKeyframe autoPlace bakeClip bakeFluidShading bakePartialHistory bakeResults bakeSimulation basename basenameEx batchRender bessel bevel bevelPlus binMembership bindSkin blend2 blendShape blendShapeEditor blendShapePanel blendTwoAttr blindDataType boneLattice boundary boxDollyCtx boxZoomCtx bufferCurve buildBookmarkMenu buildKeyframeMenu button buttonManip CBG cacheFile cacheFileCombine cacheFileMerge cacheFileTrack camera cameraView canCreateManip canvas capitalizeString catch catchQuiet ceil changeSubdivComponentDisplayLevel changeSubdivRegion channelBox character characterMap characterOutlineEditor characterize chdir checkBox checkBoxGrp checkDefaultRenderGlobals choice circle circularFillet clamp clear clearCache clip clipEditor clipEditorCurrentTimeCtx clipSchedule clipSchedulerOutliner clipTrimBefore closeCurve closeSurface cluster cmdFileOutput cmdScrollFieldExecuter cmdScrollFieldReporter cmdShell coarsenSubdivSelectionList collision color colorAtPoint colorEditor colorIndex colorIndexSliderGrp colorSliderButtonGrp colorSliderGrp columnLayout commandEcho commandLine commandPort compactHairSystem componentEditor compositingInterop computePolysetVolume condition cone confirmDialog connectAttr connectControl connectDynamic connectJoint connectionInfo constrain constrainValue constructionHistory container containsMultibyte contextInfo control convertFromOldLayers convertIffToPsd convertLightmap convertSolidTx convertTessellation convertUnit copyArray copyFlexor copyKey copySkinWeights cos cpButton cpCache cpClothSet cpCollision cpConstraint cpConvClothToMesh cpForces cpGetSolverAttr cpPanel cpProperty cpRigidCollisionFilter cpSeam cpSetEdit cpSetSolverAttr cpSolver cpSolverTypes cpTool cpUpdateClothUVs createDisplayLayer createDrawCtx createEditor createLayeredPsdFile createMotionField createNewShelf createNode createRenderLayer createSubdivRegion cross crossProduct ctxAbort ctxCompletion ctxEditMode ctxTraverse currentCtx currentTime currentTimeCtx currentUnit curve curveAddPtCtx curveCVCtx curveEPCtx curveEditorCtx curveIntersect curveMoveEPCtx curveOnSurface curveSketchCtx cutKey cycleCheck cylinder dagPose date defaultLightListCheckBox defaultNavigation defineDataServer defineVirtualDevice deformer deg_to_rad delete deleteAttr deleteShadingGroupsAndMaterials deleteShelfTab deleteUI deleteUnusedBrushes delrandstr detachCurve detachDeviceAttr detachSurface deviceEditor devicePanel dgInfo dgdirty dgeval dgtimer dimWhen directKeyCtx directionalLight dirmap dirname disable disconnectAttr disconnectJoint diskCache displacementToPoly displayAffected displayColor displayCull displayLevelOfDetail displayPref displayRGBColor displaySmoothness displayStats displayString displaySurface distanceDimContext distanceDimension doBlur dolly dollyCtx dopeSheetEditor dot dotProduct doubleProfileBirailSurface drag dragAttrContext draggerContext dropoffLocator duplicate duplicateCurve duplicateSurface dynCache dynControl dynExport dynExpression dynGlobals dynPaintEditor dynParticleCtx dynPref dynRelEdPanel dynRelEditor dynamicLoad editAttrLimits editDisplayLayerGlobals editDisplayLayerMembers editRenderLayerAdjustment editRenderLayerGlobals editRenderLayerMembers editor editorTemplate effector emit emitter enableDevice encodeString endString endsWith env equivalent equivalentTol erf error eval evalDeferred evalEcho event exactWorldBoundingBox exclusiveLightCheckBox exec executeForEachObject exists exp expression expressionEditorListen extendCurve extendSurface extrude fcheck fclose feof fflush fgetline fgetword file fileBrowserDialog fileDialog fileExtension fileInfo filetest filletCurve filter filterCurve filterExpand filterStudioImport findAllIntersections findAnimCurves findKeyframe findMenuItem findRelatedSkinCluster finder firstParentOf fitBspline flexor floatEq floatField floatFieldGrp floatScrollBar floatSlider floatSlider2 floatSliderButtonGrp floatSliderGrp floor flow fluidCacheInfo fluidEmitter fluidVoxelInfo flushUndo fmod fontDialog fopen formLayout format fprint frameLayout fread freeFormFillet frewind fromNativePath fwrite gamma gauss geometryConstraint getApplicationVersionAsFloat getAttr getClassification getDefaultBrush getFileList getFluidAttr getInputDeviceRange getMayaPanelTypes getModifiers getPanel getParticleAttr getPluginResource getenv getpid glRender glRenderEditor globalStitch gmatch goal gotoBindPose grabColor gradientControl gradientControlNoAttr graphDollyCtx graphSelectContext graphTrackCtx gravity grid gridLayout group groupObjectsByName HfAddAttractorToAS HfAssignAS HfBuildEqualMap HfBuildFurFiles HfBuildFurImages HfCancelAFR HfConnectASToHF HfCreateAttractor HfDeleteAS HfEditAS HfPerformCreateAS HfRemoveAttractorFromAS HfSelectAttached HfSelectAttractors HfUnAssignAS hardenPointCurve hardware hardwareRenderPanel headsUpDisplay headsUpMessage help helpLine hermite hide hilite hitTest hotBox hotkey hotkeyCheck hsv_to_rgb hudButton hudSlider hudSliderButton hwReflectionMap hwRender hwRenderLoad hyperGraph hyperPanel hyperShade hypot iconTextButton iconTextCheckBox iconTextRadioButton iconTextRadioCollection iconTextScrollList iconTextStaticLabel ikHandle ikHandleCtx ikHandleDisplayScale ikSolver ikSplineHandleCtx ikSystem ikSystemInfo ikfkDisplayMethod illustratorCurves image imfPlugins inheritTransform insertJoint insertJointCtx insertKeyCtx insertKnotCurve insertKnotSurface instance instanceable instancer intField intFieldGrp intScrollBar intSlider intSliderGrp interToUI internalVar intersect iprEngine isAnimCurve isConnected isDirty isParentOf isSameObject isTrue isValidObjectName isValidString isValidUiName isolateSelect itemFilter itemFilterAttr itemFilterRender itemFilterType joint jointCluster jointCtx jointDisplayScale jointLattice keyTangent keyframe keyframeOutliner keyframeRegionCurrentTimeCtx keyframeRegionDirectKeyCtx keyframeRegionDollyCtx keyframeRegionInsertKeyCtx keyframeRegionMoveKeyCtx keyframeRegionScaleKeyCtx keyframeRegionSelectKeyCtx keyframeRegionSetKeyCtx keyframeRegionTrackCtx keyframeStats lassoContext lattice latticeDeformKeyCtx launch launchImageEditor layerButton layeredShaderPort layeredTexturePort layout layoutDialog lightList lightListEditor lightListPanel lightlink lineIntersection linearPrecision linstep listAnimatable listAttr listCameras listConnections listDeviceAttachments listHistory listInputDeviceAxes listInputDeviceButtons listInputDevices listMenuAnnotation listNodeTypes listPanelCategories listRelatives listSets listTransforms listUnselected listerEditor loadFluid loadNewShelf loadPlugin loadPluginLanguageResources loadPrefObjects localizedPanelLabel lockNode loft log longNameOf lookThru ls lsThroughFilter lsType lsUI Mayatomr mag makeIdentity makeLive makePaintable makeRoll makeSingleSurface makeTubeOn makebot manipMoveContext manipMoveLimitsCtx manipOptions manipRotateContext manipRotateLimitsCtx manipScaleContext manipScaleLimitsCtx marker match max memory menu menuBarLayout menuEditor menuItem menuItemToShelf menuSet menuSetPref messageLine min minimizeApp mirrorJoint modelCurrentTimeCtx modelEditor modelPanel mouse movIn movOut move moveIKtoFK moveKeyCtx moveVertexAlongDirection multiProfileBirailSurface mute nParticle nameCommand nameField namespace namespaceInfo newPanelItems newton nodeCast nodeIconButton nodeOutliner nodePreset nodeType noise nonLinear normalConstraint normalize nurbsBoolean nurbsCopyUVSet nurbsCube nurbsEditUV nurbsPlane nurbsSelect nurbsSquare nurbsToPoly nurbsToPolygonsPref nurbsToSubdiv nurbsToSubdivPref nurbsUVSet nurbsViewDirectionVector objExists objectCenter objectLayer objectType objectTypeUI obsoleteProc oceanNurbsPreviewPlane offsetCurve offsetCurveOnSurface offsetSurface openGLExtension openMayaPref optionMenu optionMenuGrp optionVar orbit orbitCtx orientConstraint outlinerEditor outlinerPanel overrideModifier paintEffectsDisplay pairBlend palettePort paneLayout panel panelConfiguration panelHistory paramDimContext paramDimension paramLocator parent parentConstraint particle particleExists particleInstancer particleRenderInfo partition pasteKey pathAnimation pause pclose percent performanceOptions pfxstrokes pickWalk picture pixelMove planarSrf plane play playbackOptions playblast plugAttr plugNode pluginInfo pluginResourceUtil pointConstraint pointCurveConstraint pointLight pointMatrixMult pointOnCurve pointOnSurface pointPosition poleVectorConstraint polyAppend polyAppendFacetCtx polyAppendVertex polyAutoProjection polyAverageNormal polyAverageVertex polyBevel polyBlendColor polyBlindData polyBoolOp polyBridgeEdge polyCacheMonitor polyCheck polyChipOff polyClipboard polyCloseBorder polyCollapseEdge polyCollapseFacet polyColorBlindData polyColorDel polyColorPerVertex polyColorSet polyCompare polyCone polyCopyUV polyCrease polyCreaseCtx polyCreateFacet polyCreateFacetCtx polyCube polyCut polyCutCtx polyCylinder polyCylindricalProjection polyDelEdge polyDelFacet polyDelVertex polyDuplicateAndConnect polyDuplicateEdge polyEditUV polyEditUVShell polyEvaluate polyExtrudeEdge polyExtrudeFacet polyExtrudeVertex polyFlipEdge polyFlipUV polyForceUV polyGeoSampler polyHelix polyInfo polyInstallAction polyLayoutUV polyListComponentConversion polyMapCut polyMapDel polyMapSew polyMapSewMove polyMergeEdge polyMergeEdgeCtx polyMergeFacet polyMergeFacetCtx polyMergeUV polyMergeVertex polyMirrorFace polyMoveEdge polyMoveFacet polyMoveFacetUV polyMoveUV polyMoveVertex polyNormal polyNormalPerVertex polyNormalizeUV polyOptUvs polyOptions polyOutput polyPipe polyPlanarProjection polyPlane polyPlatonicSolid polyPoke polyPrimitive polyPrism polyProjection polyPyramid polyQuad polyQueryBlindData polyReduce polySelect polySelectConstraint polySelectConstraintMonitor polySelectCtx polySelectEditCtx polySeparate polySetToFaceNormal polySewEdge polyShortestPathCtx polySmooth polySoftEdge polySphere polySphericalProjection polySplit polySplitCtx polySplitEdge polySplitRing polySplitVertex polyStraightenUVBorder polySubdivideEdge polySubdivideFacet polyToSubdiv polyTorus polyTransfer polyTriangulate polyUVSet polyUnite polyWedgeFace popen popupMenu pose pow preloadRefEd print progressBar progressWindow projFileViewer projectCurve projectTangent projectionContext projectionManip promptDialog propModCtx propMove psdChannelOutliner psdEditTextureFile psdExport psdTextureFile putenv pwd python querySubdiv quit rad_to_deg radial radioButton radioButtonGrp radioCollection radioMenuItemCollection rampColorPort rand randomizeFollicles randstate rangeControl readTake rebuildCurve rebuildSurface recordAttr recordDevice redo reference referenceEdit referenceQuery refineSubdivSelectionList refresh refreshAE registerPluginResource rehash reloadImage removeJoint removeMultiInstance removePanelCategory rename renameAttr renameSelectionList renameUI render renderGlobalsNode renderInfo renderLayerButton renderLayerParent renderLayerPostProcess renderLayerUnparent renderManip renderPartition renderQualityNode renderSettings renderThumbnailUpdate renderWindowEditor renderWindowSelectContext renderer reorder reorderDeformers requires reroot resampleFluid resetAE resetPfxToPolyCamera resetTool resolutionNode retarget reverseCurve reverseSurface revolve rgb_to_hsv rigidBody rigidSolver roll rollCtx rootOf rot rotate rotationInterpolation roundConstantRadius rowColumnLayout rowLayout runTimeCommand runup sampleImage saveAllShelves saveAttrPreset saveFluid saveImage saveInitialState saveMenu savePrefObjects savePrefs saveShelf saveToolSettings scale scaleBrushBrightness scaleComponents scaleConstraint scaleKey scaleKeyCtx sceneEditor sceneUIReplacement scmh scriptCtx scriptEditorInfo scriptJob scriptNode scriptTable scriptToShelf scriptedPanel scriptedPanelType scrollField scrollLayout sculpt searchPathArray seed selLoadSettings select selectContext selectCurveCV selectKey selectKeyCtx selectKeyframeRegionCtx selectMode selectPref selectPriority selectType selectedNodes selectionConnection separator setAttr setAttrEnumResource setAttrMapping setAttrNiceNameResource setConstraintRestPosition setDefaultShadingGroup setDrivenKeyframe setDynamic setEditCtx setEditor setFluidAttr setFocus setInfinity setInputDeviceMapping setKeyCtx setKeyPath setKeyframe setKeyframeBlendshapeTargetWts setMenuMode setNodeNiceNameResource setNodeTypeFlag setParent setParticleAttr setPfxToPolyCamera setPluginResource setProject setStampDensity setStartupMessage setState setToolTo setUITemplate setXformManip sets shadingConnection shadingGeometryRelCtx shadingLightRelCtx shadingNetworkCompare shadingNode shapeCompare shelfButton shelfLayout shelfTabLayout shellField shortNameOf showHelp showHidden showManipCtx showSelectionInTitle showShadingGroupAttrEditor showWindow sign simplify sin singleProfileBirailSurface size sizeBytes skinCluster skinPercent smoothCurve smoothTangentSurface smoothstep snap2to2 snapKey snapMode snapTogetherCtx snapshot soft softMod softModCtx sort sound soundControl source spaceLocator sphere sphrand spotLight spotLightPreviewPort spreadSheetEditor spring sqrt squareSurface srtContext stackTrace startString startsWith stitchAndExplodeShell stitchSurface stitchSurfacePoints strcmp stringArrayCatenate stringArrayContains stringArrayCount stringArrayInsertAtIndex stringArrayIntersector stringArrayRemove stringArrayRemoveAtIndex stringArrayRemoveDuplicates stringArrayRemoveExact stringArrayToString stringToStringArray strip stripPrefixFromName stroke subdAutoProjection subdCleanTopology subdCollapse subdDuplicateAndConnect subdEditUV subdListComponentConversion subdMapCut subdMapSewMove subdMatchTopology subdMirror subdToBlind subdToPoly subdTransferUVsToCache subdiv subdivCrease subdivDisplaySmoothness substitute substituteAllString substituteGeometry substring surface surfaceSampler surfaceShaderList swatchDisplayPort switchTable symbolButton symbolCheckBox sysFile system tabLayout tan tangentConstraint texLatticeDeformContext texManipContext texMoveContext texMoveUVShellContext texRotateContext texScaleContext texSelectContext texSelectShortestPathCtx texSmudgeUVContext texWinToolCtx text textCurves textField textFieldButtonGrp textFieldGrp textManip textScrollList textToShelf textureDisplacePlane textureHairColor texturePlacementContext textureWindow threadCount threePointArcCtx timeControl timePort timerX toNativePath toggle toggleAxis toggleWindowVisibility tokenize tokenizeList tolerance tolower toolButton toolCollection toolDropped toolHasOptions toolPropertyWindow torus toupper trace track trackCtx transferAttributes transformCompare transformLimits translator trim trunc truncateFluidCache truncateHairCache tumble tumbleCtx turbulence twoPointArcCtx uiRes uiTemplate unassignInputDevice undo undoInfo ungroup uniform unit unloadPlugin untangleUV untitledFileName untrim upAxis updateAE userCtx uvLink uvSnapshot validateShelfName vectorize view2dToolCtx viewCamera viewClipPlane viewFit viewHeadOn viewLookAt viewManip viewPlace viewSet visor volumeAxis vortex waitCursor warning webBrowser webBrowserPrefs whatIs window windowPref wire wireContext workspace wrinkle wrinkleContext writeTake xbmLangPathList xform",
    illegal: "</",
    contains: [
      hljs2.C_NUMBER_MODE,
      hljs2.APOS_STRING_MODE,
      hljs2.QUOTE_STRING_MODE,
      {
        className: "string",
        begin: "`",
        end: "`",
        contains: [hljs2.BACKSLASH_ESCAPE]
      },
      {
        begin: /[$%@](\^\w\b|#\w+|[^\s\w{]|\{\w+\}|\w+)/
      },
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE
    ]
  };
}
var mel_1 = mel;
function mercury(hljs2) {
  const KEYWORDS2 = {
    keyword: "module use_module import_module include_module end_module initialise mutable initialize finalize finalise interface implementation pred mode func type inst solver any_pred any_func is semidet det nondet multi erroneous failure cc_nondet cc_multi typeclass instance where pragma promise external trace atomic or_else require_complete_switch require_det require_semidet require_multi require_nondet require_cc_multi require_cc_nondet require_erroneous require_failure",
    meta: "inline no_inline type_spec source_file fact_table obsolete memo loop_check minimal_model terminates does_not_terminate check_termination promise_equivalent_clauses foreign_proc foreign_decl foreign_code foreign_type foreign_import_module foreign_export_enum foreign_export foreign_enum may_call_mercury will_not_call_mercury thread_safe not_thread_safe maybe_thread_safe promise_pure promise_semipure tabled_for_io local untrailed trailed attach_to_io_state can_pass_as_mercury_type stable will_not_throw_exception may_modify_trail will_not_modify_trail may_duplicate may_not_duplicate affects_liveness does_not_affect_liveness doesnt_affect_liveness no_sharing unknown_sharing sharing",
    built_in: "some all not if then else true fail false try catch catch_any semidet_true semidet_false semidet_fail impure_true impure semipure"
  };
  const COMMENT2 = hljs2.COMMENT("%", "$");
  const NUMCODE = {
    className: "number",
    begin: "0'.\\|0[box][0-9a-fA-F]*"
  };
  const ATOM = hljs2.inherit(hljs2.APOS_STRING_MODE, {
    relevance: 0
  });
  const STRING = hljs2.inherit(hljs2.QUOTE_STRING_MODE, {
    relevance: 0
  });
  const STRING_FMT = {
    className: "subst",
    begin: "\\\\[abfnrtv]\\|\\\\x[0-9a-fA-F]*\\\\\\|%[-+# *.0-9]*[dioxXucsfeEgGp]",
    relevance: 0
  };
  STRING.contains = STRING.contains.slice();
  STRING.contains.push(STRING_FMT);
  const IMPLICATION = {
    className: "built_in",
    variants: [
      {
        begin: "<=>"
      },
      {
        begin: "<=",
        relevance: 0
      },
      {
        begin: "=>",
        relevance: 0
      },
      {
        begin: "/\\\\"
      },
      {
        begin: "\\\\/"
      }
    ]
  };
  const HEAD_BODY_CONJUNCTION = {
    className: "built_in",
    variants: [
      {
        begin: ":-\\|-->"
      },
      {
        begin: "=",
        relevance: 0
      }
    ]
  };
  return {
    name: "Mercury",
    aliases: [
      "m",
      "moo"
    ],
    keywords: KEYWORDS2,
    contains: [
      IMPLICATION,
      HEAD_BODY_CONJUNCTION,
      COMMENT2,
      hljs2.C_BLOCK_COMMENT_MODE,
      NUMCODE,
      hljs2.NUMBER_MODE,
      ATOM,
      STRING,
      {
        begin: /:-/
      },
      {
        begin: /\.$/
      }
    ]
  };
}
var mercury_1 = mercury;
function mipsasm(hljs2) {
  return {
    name: "MIPS Assembly",
    case_insensitive: true,
    aliases: ["mips"],
    keywords: {
      $pattern: "\\.?" + hljs2.IDENT_RE,
      meta: ".2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .ltorg ",
      built_in: "$0 $1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15 $16 $17 $18 $19 $20 $21 $22 $23 $24 $25 $26 $27 $28 $29 $30 $31 zero at v0 v1 a0 a1 a2 a3 a4 a5 a6 a7 t0 t1 t2 t3 t4 t5 t6 t7 t8 t9 s0 s1 s2 s3 s4 s5 s6 s7 s8 k0 k1 gp sp fp ra $f0 $f1 $f2 $f2 $f4 $f5 $f6 $f7 $f8 $f9 $f10 $f11 $f12 $f13 $f14 $f15 $f16 $f17 $f18 $f19 $f20 $f21 $f22 $f23 $f24 $f25 $f26 $f27 $f28 $f29 $f30 $f31 Context Random EntryLo0 EntryLo1 Context PageMask Wired EntryHi HWREna BadVAddr Count Compare SR IntCtl SRSCtl SRSMap Cause EPC PRId EBase Config Config1 Config2 Config3 LLAddr Debug DEPC DESAVE CacheErr ECC ErrorEPC TagLo DataLo TagHi DataHi WatchLo WatchHi PerfCtl PerfCnt "
    },
    contains: [
      {
        className: "keyword",
        begin: "\\b(addi?u?|andi?|b(al)?|beql?|bgez(al)?l?|bgtzl?|blezl?|bltz(al)?l?|bnel?|cl[oz]|divu?|ext|ins|j(al)?|jalr(\\.hb)?|jr(\\.hb)?|lbu?|lhu?|ll|lui|lw[lr]?|maddu?|mfhi|mflo|movn|movz|move|msubu?|mthi|mtlo|mul|multu?|nop|nor|ori?|rotrv?|sb|sc|se[bh]|sh|sllv?|slti?u?|srav?|srlv?|subu?|sw[lr]?|xori?|wsbh|abs\\.[sd]|add\\.[sd]|alnv.ps|bc1[ft]l?|c\\.(s?f|un|u?eq|[ou]lt|[ou]le|ngle?|seq|l[et]|ng[et])\\.[sd]|(ceil|floor|round|trunc)\\.[lw]\\.[sd]|cfc1|cvt\\.d\\.[lsw]|cvt\\.l\\.[dsw]|cvt\\.ps\\.s|cvt\\.s\\.[dlw]|cvt\\.s\\.p[lu]|cvt\\.w\\.[dls]|div\\.[ds]|ldx?c1|luxc1|lwx?c1|madd\\.[sd]|mfc1|mov[fntz]?\\.[ds]|msub\\.[sd]|mth?c1|mul\\.[ds]|neg\\.[ds]|nmadd\\.[ds]|nmsub\\.[ds]|p[lu][lu]\\.ps|recip\\.fmt|r?sqrt\\.[ds]|sdx?c1|sub\\.[ds]|suxc1|swx?c1|break|cache|d?eret|[de]i|ehb|mfc0|mtc0|pause|prefx?|rdhwr|rdpgpr|sdbbp|ssnop|synci?|syscall|teqi?|tgei?u?|tlb(p|r|w[ir])|tlti?u?|tnei?|wait|wrpgpr)",
        end: "\\s"
      },
      hljs2.COMMENT("[;#](?!\\s*$)", "$"),
      hljs2.C_BLOCK_COMMENT_MODE,
      hljs2.QUOTE_STRING_MODE,
      {
        className: "string",
        begin: "'",
        end: "[^\\\\]'",
        relevance: 0
      },
      {
        className: "title",
        begin: "\\|",
        end: "\\|",
        illegal: "\\n",
        relevance: 0
      },
      {
        className: "number",
        variants: [
          {
            begin: "0x[0-9a-f]+"
          },
          {
            begin: "\\b-?\\d+"
          }
        ],
        relevance: 0
      },
      {
        className: "symbol",
        variants: [
          {
            begin: "^\\s*[a-z_\\.\\$][a-z0-9_\\.\\$]+:"
          },
          {
            begin: "^\\s*[0-9]+:"
          },
          {
            begin: "[0-9]+[bf]"
          }
        ],
        relevance: 0
      }
    ],
    illegal: /\//
  };
}
var mipsasm_1 = mipsasm;
function mizar(hljs2) {
  return {
    name: "Mizar",
    keywords: "environ vocabularies notations constructors definitions registrations theorems schemes requirements begin end definition registration cluster existence pred func defpred deffunc theorem proof let take assume then thus hence ex for st holds consider reconsider such that and in provided of as from be being by means equals implies iff redefine define now not or attr is mode suppose per cases set thesis contradiction scheme reserve struct correctness compatibility coherence symmetry assymetry reflexivity irreflexivity connectedness uniqueness commutativity idempotence involutiveness projectivity",
    contains: [
      hljs2.COMMENT("::", "$")
    ]
  };
}
var mizar_1 = mizar;
function source$9(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function concat$9(...args) {
  const joined = args.map((x2) => source$9(x2)).join("");
  return joined;
}
function either$4(...args) {
  const joined = "(" + args.map((x2) => source$9(x2)).join("|") + ")";
  return joined;
}
function perl(hljs2) {
  const KEYWORDS2 = [
    "abs",
    "accept",
    "alarm",
    "and",
    "atan2",
    "bind",
    "binmode",
    "bless",
    "break",
    "caller",
    "chdir",
    "chmod",
    "chomp",
    "chop",
    "chown",
    "chr",
    "chroot",
    "close",
    "closedir",
    "connect",
    "continue",
    "cos",
    "crypt",
    "dbmclose",
    "dbmopen",
    "defined",
    "delete",
    "die",
    "do",
    "dump",
    "each",
    "else",
    "elsif",
    "endgrent",
    "endhostent",
    "endnetent",
    "endprotoent",
    "endpwent",
    "endservent",
    "eof",
    "eval",
    "exec",
    "exists",
    "exit",
    "exp",
    "fcntl",
    "fileno",
    "flock",
    "for",
    "foreach",
    "fork",
    "format",
    "formline",
    "getc",
    "getgrent",
    "getgrgid",
    "getgrnam",
    "gethostbyaddr",
    "gethostbyname",
    "gethostent",
    "getlogin",
    "getnetbyaddr",
    "getnetbyname",
    "getnetent",
    "getpeername",
    "getpgrp",
    "getpriority",
    "getprotobyname",
    "getprotobynumber",
    "getprotoent",
    "getpwent",
    "getpwnam",
    "getpwuid",
    "getservbyname",
    "getservbyport",
    "getservent",
    "getsockname",
    "getsockopt",
    "given",
    "glob",
    "gmtime",
    "goto",
    "grep",
    "gt",
    "hex",
    "if",
    "index",
    "int",
    "ioctl",
    "join",
    "keys",
    "kill",
    "last",
    "lc",
    "lcfirst",
    "length",
    "link",
    "listen",
    "local",
    "localtime",
    "log",
    "lstat",
    "lt",
    "ma",
    "map",
    "mkdir",
    "msgctl",
    "msgget",
    "msgrcv",
    "msgsnd",
    "my",
    "ne",
    "next",
    "no",
    "not",
    "oct",
    "open",
    "opendir",
    "or",
    "ord",
    "our",
    "pack",
    "package",
    "pipe",
    "pop",
    "pos",
    "print",
    "printf",
    "prototype",
    "push",
    "q|0",
    "qq",
    "quotemeta",
    "qw",
    "qx",
    "rand",
    "read",
    "readdir",
    "readline",
    "readlink",
    "readpipe",
    "recv",
    "redo",
    "ref",
    "rename",
    "require",
    "reset",
    "return",
    "reverse",
    "rewinddir",
    "rindex",
    "rmdir",
    "say",
    "scalar",
    "seek",
    "seekdir",
    "select",
    "semctl",
    "semget",
    "semop",
    "send",
    "setgrent",
    "sethostent",
    "setnetent",
    "setpgrp",
    "setpriority",
    "setprotoent",
    "setpwent",
    "setservent",
    "setsockopt",
    "shift",
    "shmctl",
    "shmget",
    "shmread",
    "shmwrite",
    "shutdown",
    "sin",
    "sleep",
    "socket",
    "socketpair",
    "sort",
    "splice",
    "split",
    "sprintf",
    "sqrt",
    "srand",
    "stat",
    "state",
    "study",
    "sub",
    "substr",
    "symlink",
    "syscall",
    "sysopen",
    "sysread",
    "sysseek",
    "system",
    "syswrite",
    "tell",
    "telldir",
    "tie",
    "tied",
    "time",
    "times",
    "tr",
    "truncate",
    "uc",
    "ucfirst",
    "umask",
    "undef",
    "unless",
    "unlink",
    "unpack",
    "unshift",
    "untie",
    "until",
    "use",
    "utime",
    "values",
    "vec",
    "wait",
    "waitpid",
    "wantarray",
    "warn",
    "when",
    "while",
    "write",
    "x|0",
    "xor",
    "y|0"
  ];
  const REGEX_MODIFIERS = /[dualxmsipngr]{0,12}/;
  const PERL_KEYWORDS = {
    $pattern: /[\w.]+/,
    keyword: KEYWORDS2.join(" ")
  };
  const SUBST = {
    className: "subst",
    begin: "[$@]\\{",
    end: "\\}",
    keywords: PERL_KEYWORDS
  };
  const METHOD = {
    begin: /->\{/,
    end: /\}/
  };
  const VAR = {
    variants: [
      {
        begin: /\$\d/
      },
      {
        begin: concat$9(/[$%@](\^\w\b|#\w+(::\w+)*|\{\w+\}|\w+(::\w*)*)/, `(?![A-Za-z])(?![@$%])`)
      },
      {
        begin: /[$%@][^\s\w{]/,
        relevance: 0
      }
    ]
  };
  const STRING_CONTAINS = [
    hljs2.BACKSLASH_ESCAPE,
    SUBST,
    VAR
  ];
  const REGEX_DELIMS = [
    /!/,
    /\//,
    /\|/,
    /\?/,
    /'/,
    /"/,
    /#/
  ];
  const PAIRED_DOUBLE_RE = (prefix, open, close = "\\1") => {
    const middle = close === "\\1" ? close : concat$9(close, open);
    return concat$9(concat$9("(?:", prefix, ")"), open, /(?:\\.|[^\\\/])*?/, middle, /(?:\\.|[^\\\/])*?/, close, REGEX_MODIFIERS);
  };
  const PAIRED_RE = (prefix, open, close) => {
    return concat$9(concat$9("(?:", prefix, ")"), open, /(?:\\.|[^\\\/])*?/, close, REGEX_MODIFIERS);
  };
  const PERL_DEFAULT_CONTAINS = [
    VAR,
    hljs2.HASH_COMMENT_MODE,
    hljs2.COMMENT(/^=\w/, /=cut/, {
      endsWithParent: true
    }),
    METHOD,
    {
      className: "string",
      contains: STRING_CONTAINS,
      variants: [
        {
          begin: "q[qwxr]?\\s*\\(",
          end: "\\)",
          relevance: 5
        },
        {
          begin: "q[qwxr]?\\s*\\[",
          end: "\\]",
          relevance: 5
        },
        {
          begin: "q[qwxr]?\\s*\\{",
          end: "\\}",
          relevance: 5
        },
        {
          begin: "q[qwxr]?\\s*\\|",
          end: "\\|",
          relevance: 5
        },
        {
          begin: "q[qwxr]?\\s*<",
          end: ">",
          relevance: 5
        },
        {
          begin: "qw\\s+q",
          end: "q",
          relevance: 5
        },
        {
          begin: "'",
          end: "'",
          contains: [hljs2.BACKSLASH_ESCAPE]
        },
        {
          begin: '"',
          end: '"'
        },
        {
          begin: "`",
          end: "`",
          contains: [hljs2.BACKSLASH_ESCAPE]
        },
        {
          begin: /\{\w+\}/,
          relevance: 0
        },
        {
          begin: "-?\\w+\\s*=>",
          relevance: 0
        }
      ]
    },
    {
      className: "number",
      begin: "(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",
      relevance: 0
    },
    {
      begin: "(\\/\\/|" + hljs2.RE_STARTERS_RE + "|\\b(split|return|print|reverse|grep)\\b)\\s*",
      keywords: "split return print reverse grep",
      relevance: 0,
      contains: [
        hljs2.HASH_COMMENT_MODE,
        {
          className: "regexp",
          variants: [
            {begin: PAIRED_DOUBLE_RE("s|tr|y", either$4(...REGEX_DELIMS))},
            {begin: PAIRED_DOUBLE_RE("s|tr|y", "\\(", "\\)")},
            {begin: PAIRED_DOUBLE_RE("s|tr|y", "\\[", "\\]")},
            {begin: PAIRED_DOUBLE_RE("s|tr|y", "\\{", "\\}")}
          ],
          relevance: 2
        },
        {
          className: "regexp",
          variants: [
            {
              begin: /(m|qr)\/\//,
              relevance: 0
            },
            {begin: PAIRED_RE("(?:m|qr)?", /\//, /\//)},
            {begin: PAIRED_RE("m|qr", either$4(...REGEX_DELIMS), /\1/)},
            {begin: PAIRED_RE("m|qr", /\(/, /\)/)},
            {begin: PAIRED_RE("m|qr", /\[/, /\]/)},
            {begin: PAIRED_RE("m|qr", /\{/, /\}/)}
          ]
        }
      ]
    },
    {
      className: "function",
      beginKeywords: "sub",
      end: "(\\s*\\(.*?\\))?[;{]",
      excludeEnd: true,
      relevance: 5,
      contains: [hljs2.TITLE_MODE]
    },
    {
      begin: "-\\w\\b",
      relevance: 0
    },
    {
      begin: "^__DATA__$",
      end: "^__END__$",
      subLanguage: "mojolicious",
      contains: [
        {
          begin: "^@@.*",
          end: "$",
          className: "comment"
        }
      ]
    }
  ];
  SUBST.contains = PERL_DEFAULT_CONTAINS;
  METHOD.contains = PERL_DEFAULT_CONTAINS;
  return {
    name: "Perl",
    aliases: [
      "pl",
      "pm"
    ],
    keywords: PERL_KEYWORDS,
    contains: PERL_DEFAULT_CONTAINS
  };
}
var perl_1 = perl;
function mojolicious(hljs2) {
  return {
    name: "Mojolicious",
    subLanguage: "xml",
    contains: [
      {
        className: "meta",
        begin: "^__(END|DATA)__$"
      },
      {
        begin: "^\\s*%{1,2}={0,2}",
        end: "$",
        subLanguage: "perl"
      },
      {
        begin: "<%{1,2}={0,2}",
        end: "={0,1}%>",
        subLanguage: "perl",
        excludeBegin: true,
        excludeEnd: true
      }
    ]
  };
}
var mojolicious_1 = mojolicious;
function monkey(hljs2) {
  const NUMBER = {
    className: "number",
    relevance: 0,
    variants: [
      {
        begin: "[$][a-fA-F0-9]+"
      },
      hljs2.NUMBER_MODE
    ]
  };
  return {
    name: "Monkey",
    case_insensitive: true,
    keywords: {
      keyword: "public private property continue exit extern new try catch eachin not abstract final select case default const local global field end if then else elseif endif while wend repeat until forever for to step next return module inline throw import",
      built_in: "DebugLog DebugStop Error Print ACos ACosr ASin ASinr ATan ATan2 ATan2r ATanr Abs Abs Ceil Clamp Clamp Cos Cosr Exp Floor Log Max Max Min Min Pow Sgn Sgn Sin Sinr Sqrt Tan Tanr Seed PI HALFPI TWOPI",
      literal: "true false null and or shl shr mod"
    },
    illegal: /\/\*/,
    contains: [
      hljs2.COMMENT("#rem", "#end"),
      hljs2.COMMENT("'", "$", {
        relevance: 0
      }),
      {
        className: "function",
        beginKeywords: "function method",
        end: "[(=:]|$",
        illegal: /\n/,
        contains: [hljs2.UNDERSCORE_TITLE_MODE]
      },
      {
        className: "class",
        beginKeywords: "class interface",
        end: "$",
        contains: [
          {
            beginKeywords: "extends implements"
          },
          hljs2.UNDERSCORE_TITLE_MODE
        ]
      },
      {
        className: "built_in",
        begin: "\\b(self|super)\\b"
      },
      {
        className: "meta",
        begin: "\\s*#",
        end: "$",
        keywords: {
          "meta-keyword": "if else elseif endif end then"
        }
      },
      {
        className: "meta",
        begin: "^\\s*strict\\b"
      },
      {
        beginKeywords: "alias",
        end: "=",
        contains: [hljs2.UNDERSCORE_TITLE_MODE]
      },
      hljs2.QUOTE_STRING_MODE,
      NUMBER
    ]
  };
}
var monkey_1 = monkey;
function moonscript(hljs2) {
  const KEYWORDS2 = {
    keyword: "if then not for in while do return else elseif break continue switch and or unless when class extends super local import export from using",
    literal: "true false nil",
    built_in: "_G _VERSION assert collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring module next pairs pcall print rawequal rawget rawset require select setfenv setmetatable tonumber tostring type unpack xpcall coroutine debug io math os package string table"
  };
  const JS_IDENT_RE = "[A-Za-z$_][0-9A-Za-z$_]*";
  const SUBST = {
    className: "subst",
    begin: /#\{/,
    end: /\}/,
    keywords: KEYWORDS2
  };
  const EXPRESSIONS = [
    hljs2.inherit(hljs2.C_NUMBER_MODE, {
      starts: {
        end: "(\\s*/)?",
        relevance: 0
      }
    }),
    {
      className: "string",
      variants: [
        {
          begin: /'/,
          end: /'/,
          contains: [hljs2.BACKSLASH_ESCAPE]
        },
        {
          begin: /"/,
          end: /"/,
          contains: [
            hljs2.BACKSLASH_ESCAPE,
            SUBST
          ]
        }
      ]
    },
    {
      className: "built_in",
      begin: "@__" + hljs2.IDENT_RE
    },
    {
      begin: "@" + hljs2.IDENT_RE
    },
    {
      begin: hljs2.IDENT_RE + "\\\\" + hljs2.IDENT_RE
    }
  ];
  SUBST.contains = EXPRESSIONS;
  const TITLE = hljs2.inherit(hljs2.TITLE_MODE, {
    begin: JS_IDENT_RE
  });
  const POSSIBLE_PARAMS_RE = "(\\(.*\\)\\s*)?\\B[-=]>";
  const PARAMS = {
    className: "params",
    begin: "\\([^\\(]",
    returnBegin: true,
    contains: [
      {
        begin: /\(/,
        end: /\)/,
        keywords: KEYWORDS2,
        contains: ["self"].concat(EXPRESSIONS)
      }
    ]
  };
  return {
    name: "MoonScript",
    aliases: ["moon"],
    keywords: KEYWORDS2,
    illegal: /\/\*/,
    contains: EXPRESSIONS.concat([
      hljs2.COMMENT("--", "$"),
      {
        className: "function",
        begin: "^\\s*" + JS_IDENT_RE + "\\s*=\\s*" + POSSIBLE_PARAMS_RE,
        end: "[-=]>",
        returnBegin: true,
        contains: [
          TITLE,
          PARAMS
        ]
      },
      {
        begin: /[\(,:=]\s*/,
        relevance: 0,
        contains: [
          {
            className: "function",
            begin: POSSIBLE_PARAMS_RE,
            end: "[-=]>",
            returnBegin: true,
            contains: [PARAMS]
          }
        ]
      },
      {
        className: "class",
        beginKeywords: "class",
        end: "$",
        illegal: /[:="\[\]]/,
        contains: [
          {
            beginKeywords: "extends",
            endsWithParent: true,
            illegal: /[:="\[\]]/,
            contains: [TITLE]
          },
          TITLE
        ]
      },
      {
        className: "name",
        begin: JS_IDENT_RE + ":",
        end: ":",
        returnBegin: true,
        returnEnd: true,
        relevance: 0
      }
    ])
  };
}
var moonscript_1 = moonscript;
function n1ql(hljs2) {
  return {
    name: "N1QL",
    case_insensitive: true,
    contains: [
      {
        beginKeywords: "build create index delete drop explain infer|10 insert merge prepare select update upsert|10",
        end: /;/,
        endsWithParent: true,
        keywords: {
          keyword: "all alter analyze and any array as asc begin between binary boolean break bucket build by call case cast cluster collate collection commit connect continue correlate cover create database dataset datastore declare decrement delete derived desc describe distinct do drop each element else end every except exclude execute exists explain fetch first flatten for force from function grant group gsi having if ignore ilike in include increment index infer inline inner insert intersect into is join key keys keyspace known last left let letting like limit lsm map mapping matched materialized merge minus namespace nest not number object offset on option or order outer over parse partition password path pool prepare primary private privilege procedure public raw realm reduce rename return returning revoke right role rollback satisfies schema select self semi set show some start statistics string system then to transaction trigger truncate under union unique unknown unnest unset update upsert use user using validate value valued values via view when where while with within work xor",
          literal: "true false null missing|5",
          built_in: "array_agg array_append array_concat array_contains array_count array_distinct array_ifnull array_length array_max array_min array_position array_prepend array_put array_range array_remove array_repeat array_replace array_reverse array_sort array_sum avg count max min sum greatest least ifmissing ifmissingornull ifnull missingif nullif ifinf ifnan ifnanorinf naninf neginfif posinfif clock_millis clock_str date_add_millis date_add_str date_diff_millis date_diff_str date_part_millis date_part_str date_trunc_millis date_trunc_str duration_to_str millis str_to_millis millis_to_str millis_to_utc millis_to_zone_name now_millis now_str str_to_duration str_to_utc str_to_zone_name decode_json encode_json encoded_size poly_length base64 base64_encode base64_decode meta uuid abs acos asin atan atan2 ceil cos degrees e exp ln log floor pi power radians random round sign sin sqrt tan trunc object_length object_names object_pairs object_inner_pairs object_values object_inner_values object_add object_put object_remove object_unwrap regexp_contains regexp_like regexp_position regexp_replace contains initcap length lower ltrim position repeat replace rtrim split substr title trim upper isarray isatom isboolean isnumber isobject isstring type toarray toatom toboolean tonumber toobject tostring"
        },
        contains: [
          {
            className: "string",
            begin: "'",
            end: "'",
            contains: [hljs2.BACKSLASH_ESCAPE]
          },
          {
            className: "string",
            begin: '"',
            end: '"',
            contains: [hljs2.BACKSLASH_ESCAPE]
          },
          {
            className: "symbol",
            begin: "`",
            end: "`",
            contains: [hljs2.BACKSLASH_ESCAPE],
            relevance: 2
          },
          hljs2.C_NUMBER_MODE,
          hljs2.C_BLOCK_COMMENT_MODE
        ]
      },
      hljs2.C_BLOCK_COMMENT_MODE
    ]
  };
}
var n1ql_1 = n1ql;
function nginx(hljs2) {
  const VAR = {
    className: "variable",
    variants: [
      {
        begin: /\$\d+/
      },
      {
        begin: /\$\{/,
        end: /\}/
      },
      {
        begin: /[$@]/ + hljs2.UNDERSCORE_IDENT_RE
      }
    ]
  };
  const DEFAULT = {
    endsWithParent: true,
    keywords: {
      $pattern: "[a-z/_]+",
      literal: "on off yes no true false none blocked debug info notice warn error crit select break last permanent redirect kqueue rtsig epoll poll /dev/poll"
    },
    relevance: 0,
    illegal: "=>",
    contains: [
      hljs2.HASH_COMMENT_MODE,
      {
        className: "string",
        contains: [
          hljs2.BACKSLASH_ESCAPE,
          VAR
        ],
        variants: [
          {
            begin: /"/,
            end: /"/
          },
          {
            begin: /'/,
            end: /'/
          }
        ]
      },
      {
        begin: "([a-z]+):/",
        end: "\\s",
        endsWithParent: true,
        excludeEnd: true,
        contains: [VAR]
      },
      {
        className: "regexp",
        contains: [
          hljs2.BACKSLASH_ESCAPE,
          VAR
        ],
        variants: [
          {
            begin: "\\s\\^",
            end: "\\s|\\{|;",
            returnEnd: true
          },
          {
            begin: "~\\*?\\s+",
            end: "\\s|\\{|;",
            returnEnd: true
          },
          {
            begin: "\\*(\\.[a-z\\-]+)+"
          },
          {
            begin: "([a-z\\-]+\\.)+\\*"
          }
        ]
      },
      {
        className: "number",
        begin: "\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(:\\d{1,5})?\\b"
      },
      {
        className: "number",
        begin: "\\b\\d+[kKmMgGdshdwy]*\\b",
        relevance: 0
      },
      VAR
    ]
  };
  return {
    name: "Nginx config",
    aliases: ["nginxconf"],
    contains: [
      hljs2.HASH_COMMENT_MODE,
      {
        begin: hljs2.UNDERSCORE_IDENT_RE + "\\s+\\{",
        returnBegin: true,
        end: /\{/,
        contains: [
          {
            className: "section",
            begin: hljs2.UNDERSCORE_IDENT_RE
          }
        ],
        relevance: 0
      },
      {
        begin: hljs2.UNDERSCORE_IDENT_RE + "\\s",
        end: ";|\\{",
        returnBegin: true,
        contains: [
          {
            className: "attribute",
            begin: hljs2.UNDERSCORE_IDENT_RE,
            starts: DEFAULT
          }
        ],
        relevance: 0
      }
    ],
    illegal: "[^\\s\\}]"
  };
}
var nginx_1 = nginx;
function nim(hljs2) {
  return {
    name: "Nim",
    keywords: {
      keyword: "addr and as asm bind block break case cast const continue converter discard distinct div do elif else end enum except export finally for from func generic if import in include interface is isnot iterator let macro method mixin mod nil not notin object of or out proc ptr raise ref return shl shr static template try tuple type using var when while with without xor yield",
      literal: "shared guarded stdin stdout stderr result true false",
      built_in: "int int8 int16 int32 int64 uint uint8 uint16 uint32 uint64 float float32 float64 bool char string cstring pointer expr stmt void auto any range array openarray varargs seq set clong culong cchar cschar cshort cint csize clonglong cfloat cdouble clongdouble cuchar cushort cuint culonglong cstringarray semistatic"
    },
    contains: [
      {
        className: "meta",
        begin: /\{\./,
        end: /\.\}/,
        relevance: 10
      },
      {
        className: "string",
        begin: /[a-zA-Z]\w*"/,
        end: /"/,
        contains: [
          {
            begin: /""/
          }
        ]
      },
      {
        className: "string",
        begin: /([a-zA-Z]\w*)?"""/,
        end: /"""/
      },
      hljs2.QUOTE_STRING_MODE,
      {
        className: "type",
        begin: /\b[A-Z]\w+\b/,
        relevance: 0
      },
      {
        className: "number",
        relevance: 0,
        variants: [
          {
            begin: /\b(0[xX][0-9a-fA-F][_0-9a-fA-F]*)('?[iIuU](8|16|32|64))?/
          },
          {
            begin: /\b(0o[0-7][_0-7]*)('?[iIuUfF](8|16|32|64))?/
          },
          {
            begin: /\b(0(b|B)[01][_01]*)('?[iIuUfF](8|16|32|64))?/
          },
          {
            begin: /\b(\d[_\d]*)('?[iIuUfF](8|16|32|64))?/
          }
        ]
      },
      hljs2.HASH_COMMENT_MODE
    ]
  };
}
var nim_1 = nim;
function nix(hljs2) {
  const NIX_KEYWORDS = {
    keyword: "rec with let in inherit assert if else then",
    literal: "true false or and null",
    built_in: "import abort baseNameOf dirOf isNull builtins map removeAttrs throw toString derivation"
  };
  const ANTIQUOTE = {
    className: "subst",
    begin: /\$\{/,
    end: /\}/,
    keywords: NIX_KEYWORDS
  };
  const ATTRS2 = {
    begin: /[a-zA-Z0-9-_]+(\s*=)/,
    returnBegin: true,
    relevance: 0,
    contains: [
      {
        className: "attr",
        begin: /\S+/
      }
    ]
  };
  const STRING = {
    className: "string",
    contains: [ANTIQUOTE],
    variants: [
      {
        begin: "''",
        end: "''"
      },
      {
        begin: '"',
        end: '"'
      }
    ]
  };
  const EXPRESSIONS = [
    hljs2.NUMBER_MODE,
    hljs2.HASH_COMMENT_MODE,
    hljs2.C_BLOCK_COMMENT_MODE,
    STRING,
    ATTRS2
  ];
  ANTIQUOTE.contains = EXPRESSIONS;
  return {
    name: "Nix",
    aliases: ["nixos"],
    keywords: NIX_KEYWORDS,
    contains: EXPRESSIONS
  };
}
var nix_1 = nix;
function nodeRepl(hljs2) {
  return {
    name: "Node REPL",
    contains: [
      {
        className: "meta",
        starts: {
          end: / |$/,
          starts: {
            end: "$",
            subLanguage: "javascript"
          }
        },
        variants: [
          {
            begin: /^>(?=[ ]|$)/
          },
          {
            begin: /^\.\.\.(?=[ ]|$)/
          }
        ]
      }
    ]
  };
}
var nodeRepl_1 = nodeRepl;
function nsis(hljs2) {
  const CONSTANTS = {
    className: "variable",
    begin: /\$(ADMINTOOLS|APPDATA|CDBURN_AREA|CMDLINE|COMMONFILES32|COMMONFILES64|COMMONFILES|COOKIES|DESKTOP|DOCUMENTS|EXEDIR|EXEFILE|EXEPATH|FAVORITES|FONTS|HISTORY|HWNDPARENT|INSTDIR|INTERNET_CACHE|LANGUAGE|LOCALAPPDATA|MUSIC|NETHOOD|OUTDIR|PICTURES|PLUGINSDIR|PRINTHOOD|PROFILE|PROGRAMFILES32|PROGRAMFILES64|PROGRAMFILES|QUICKLAUNCH|RECENT|RESOURCES_LOCALIZED|RESOURCES|SENDTO|SMPROGRAMS|SMSTARTUP|STARTMENU|SYSDIR|TEMP|TEMPLATES|VIDEOS|WINDIR)/
  };
  const DEFINES = {
    className: "variable",
    begin: /\$+\{[\w.:-]+\}/
  };
  const VARIABLES = {
    className: "variable",
    begin: /\$+\w+/,
    illegal: /\(\)\{\}/
  };
  const LANGUAGES = {
    className: "variable",
    begin: /\$+\([\w^.:-]+\)/
  };
  const PARAMETERS = {
    className: "params",
    begin: "(ARCHIVE|FILE_ATTRIBUTE_ARCHIVE|FILE_ATTRIBUTE_NORMAL|FILE_ATTRIBUTE_OFFLINE|FILE_ATTRIBUTE_READONLY|FILE_ATTRIBUTE_SYSTEM|FILE_ATTRIBUTE_TEMPORARY|HKCR|HKCU|HKDD|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_DYN_DATA|HKEY_LOCAL_MACHINE|HKEY_PERFORMANCE_DATA|HKEY_USERS|HKLM|HKPD|HKU|IDABORT|IDCANCEL|IDIGNORE|IDNO|IDOK|IDRETRY|IDYES|MB_ABORTRETRYIGNORE|MB_DEFBUTTON1|MB_DEFBUTTON2|MB_DEFBUTTON3|MB_DEFBUTTON4|MB_ICONEXCLAMATION|MB_ICONINFORMATION|MB_ICONQUESTION|MB_ICONSTOP|MB_OK|MB_OKCANCEL|MB_RETRYCANCEL|MB_RIGHT|MB_RTLREADING|MB_SETFOREGROUND|MB_TOPMOST|MB_USERICON|MB_YESNO|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SYSTEM|TEMPORARY)"
  };
  const COMPILER = {
    className: "keyword",
    begin: /!(addincludedir|addplugindir|appendfile|cd|define|delfile|echo|else|endif|error|execute|finalize|getdllversion|gettlbversion|if|ifdef|ifmacrodef|ifmacrondef|ifndef|include|insertmacro|macro|macroend|makensis|packhdr|searchparse|searchreplace|system|tempfile|undef|verbose|warning)/
  };
  const METACHARS = {
    className: "meta",
    begin: /\$(\\[nrt]|\$)/
  };
  const PLUGINS = {
    className: "class",
    begin: /\w+::\w+/
  };
  const STRING = {
    className: "string",
    variants: [
      {
        begin: '"',
        end: '"'
      },
      {
        begin: "'",
        end: "'"
      },
      {
        begin: "`",
        end: "`"
      }
    ],
    illegal: /\n/,
    contains: [
      METACHARS,
      CONSTANTS,
      DEFINES,
      VARIABLES,
      LANGUAGES
    ]
  };
  return {
    name: "NSIS",
    case_insensitive: false,
    keywords: {
      keyword: "Abort AddBrandingImage AddSize AllowRootDirInstall AllowSkipFiles AutoCloseWindow BGFont BGGradient BrandingText BringToFront Call CallInstDLL Caption ChangeUI CheckBitmap ClearErrors CompletedText ComponentText CopyFiles CRCCheck CreateDirectory CreateFont CreateShortCut Delete DeleteINISec DeleteINIStr DeleteRegKey DeleteRegValue DetailPrint DetailsButtonText DirText DirVar DirVerify EnableWindow EnumRegKey EnumRegValue Exch Exec ExecShell ExecShellWait ExecWait ExpandEnvStrings File FileBufSize FileClose FileErrorText FileOpen FileRead FileReadByte FileReadUTF16LE FileReadWord FileWriteUTF16LE FileSeek FileWrite FileWriteByte FileWriteWord FindClose FindFirst FindNext FindWindow FlushINI GetCurInstType GetCurrentAddress GetDlgItem GetDLLVersion GetDLLVersionLocal GetErrorLevel GetFileTime GetFileTimeLocal GetFullPathName GetFunctionAddress GetInstDirError GetKnownFolderPath GetLabelAddress GetTempFileName Goto HideWindow Icon IfAbort IfErrors IfFileExists IfRebootFlag IfRtlLanguage IfShellVarContextAll IfSilent InitPluginsDir InstallButtonText InstallColors InstallDir InstallDirRegKey InstProgressFlags InstType InstTypeGetText InstTypeSetText Int64Cmp Int64CmpU Int64Fmt IntCmp IntCmpU IntFmt IntOp IntPtrCmp IntPtrCmpU IntPtrOp IsWindow LangString LicenseBkColor LicenseData LicenseForceSelection LicenseLangString LicenseText LoadAndSetImage LoadLanguageFile LockWindow LogSet LogText ManifestDPIAware ManifestLongPathAware ManifestMaxVersionTested ManifestSupportedOS MessageBox MiscButtonText Name Nop OutFile Page PageCallbacks PEAddResource PEDllCharacteristics PERemoveResource PESubsysVer Pop Push Quit ReadEnvStr ReadINIStr ReadRegDWORD ReadRegStr Reboot RegDLL Rename RequestExecutionLevel ReserveFile Return RMDir SearchPath SectionGetFlags SectionGetInstTypes SectionGetSize SectionGetText SectionIn SectionSetFlags SectionSetInstTypes SectionSetSize SectionSetText SendMessage SetAutoClose SetBrandingImage SetCompress SetCompressor SetCompressorDictSize SetCtlColors SetCurInstType SetDatablockOptimize SetDateSave SetDetailsPrint SetDetailsView SetErrorLevel SetErrors SetFileAttributes SetFont SetOutPath SetOverwrite SetRebootFlag SetRegView SetShellVarContext SetSilent ShowInstDetails ShowUninstDetails ShowWindow SilentInstall SilentUnInstall Sleep SpaceTexts StrCmp StrCmpS StrCpy StrLen SubCaption Unicode UninstallButtonText UninstallCaption UninstallIcon UninstallSubCaption UninstallText UninstPage UnRegDLL Var VIAddVersionKey VIFileVersion VIProductVersion WindowIcon WriteINIStr WriteRegBin WriteRegDWORD WriteRegExpandStr WriteRegMultiStr WriteRegNone WriteRegStr WriteUninstaller XPStyle",
      literal: "admin all auto both bottom bzip2 colored components current custom directory false force hide highest ifdiff ifnewer instfiles lastused leave left license listonly lzma nevershow none normal notset off on open print right show silent silentlog smooth textonly top true try un.components un.custom un.directory un.instfiles un.license uninstConfirm user Win10 Win7 Win8 WinVista zlib"
    },
    contains: [
      hljs2.HASH_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      hljs2.COMMENT(";", "$", {
        relevance: 0
      }),
      {
        className: "function",
        beginKeywords: "Function PageEx Section SectionGroup",
        end: "$"
      },
      STRING,
      COMPILER,
      DEFINES,
      VARIABLES,
      LANGUAGES,
      PARAMETERS,
      PLUGINS,
      hljs2.NUMBER_MODE
    ]
  };
}
var nsis_1 = nsis;
function objectivec(hljs2) {
  const API_CLASS = {
    className: "built_in",
    begin: "\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\w+"
  };
  const IDENTIFIER_RE = /[a-zA-Z@][a-zA-Z0-9_]*/;
  const OBJC_KEYWORDS = {
    $pattern: IDENTIFIER_RE,
    keyword: "int float while char export sizeof typedef const struct for union unsigned long volatile static bool mutable if do return goto void enum else break extern asm case short default double register explicit signed typename this switch continue wchar_t inline readonly assign readwrite self @synchronized id typeof nonatomic super unichar IBOutlet IBAction strong weak copy in out inout bycopy byref oneway __strong __weak __block __autoreleasing @private @protected @public @try @property @end @throw @catch @finally @autoreleasepool @synthesize @dynamic @selector @optional @required @encode @package @import @defs @compatibility_alias __bridge __bridge_transfer __bridge_retained __bridge_retain __covariant __contravariant __kindof _Nonnull _Nullable _Null_unspecified __FUNCTION__ __PRETTY_FUNCTION__ __attribute__ getter setter retain unsafe_unretained nonnull nullable null_unspecified null_resettable class instancetype NS_DESIGNATED_INITIALIZER NS_UNAVAILABLE NS_REQUIRES_SUPER NS_RETURNS_INNER_POINTER NS_INLINE NS_AVAILABLE NS_DEPRECATED NS_ENUM NS_OPTIONS NS_SWIFT_UNAVAILABLE NS_ASSUME_NONNULL_BEGIN NS_ASSUME_NONNULL_END NS_REFINED_FOR_SWIFT NS_SWIFT_NAME NS_SWIFT_NOTHROW NS_DURING NS_HANDLER NS_ENDHANDLER NS_VALUERETURN NS_VOIDRETURN",
    literal: "false true FALSE TRUE nil YES NO NULL",
    built_in: "BOOL dispatch_once_t dispatch_queue_t dispatch_sync dispatch_async dispatch_once"
  };
  const CLASS_KEYWORDS = {
    $pattern: IDENTIFIER_RE,
    keyword: "@interface @class @protocol @implementation"
  };
  return {
    name: "Objective-C",
    aliases: [
      "mm",
      "objc",
      "obj-c",
      "obj-c++",
      "objective-c++"
    ],
    keywords: OBJC_KEYWORDS,
    illegal: "</",
    contains: [
      API_CLASS,
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      hljs2.C_NUMBER_MODE,
      hljs2.QUOTE_STRING_MODE,
      hljs2.APOS_STRING_MODE,
      {
        className: "string",
        variants: [
          {
            begin: '@"',
            end: '"',
            illegal: "\\n",
            contains: [hljs2.BACKSLASH_ESCAPE]
          }
        ]
      },
      {
        className: "meta",
        begin: /#\s*[a-z]+\b/,
        end: /$/,
        keywords: {
          "meta-keyword": "if else elif endif define undef warning error line pragma ifdef ifndef include"
        },
        contains: [
          {
            begin: /\\\n/,
            relevance: 0
          },
          hljs2.inherit(hljs2.QUOTE_STRING_MODE, {
            className: "meta-string"
          }),
          {
            className: "meta-string",
            begin: /<.*?>/,
            end: /$/,
            illegal: "\\n"
          },
          hljs2.C_LINE_COMMENT_MODE,
          hljs2.C_BLOCK_COMMENT_MODE
        ]
      },
      {
        className: "class",
        begin: "(" + CLASS_KEYWORDS.keyword.split(" ").join("|") + ")\\b",
        end: /(\{|$)/,
        excludeEnd: true,
        keywords: CLASS_KEYWORDS,
        contains: [hljs2.UNDERSCORE_TITLE_MODE]
      },
      {
        begin: "\\." + hljs2.UNDERSCORE_IDENT_RE,
        relevance: 0
      }
    ]
  };
}
var objectivec_1 = objectivec;
function ocaml(hljs2) {
  return {
    name: "OCaml",
    aliases: ["ml"],
    keywords: {
      $pattern: "[a-z_]\\w*!?",
      keyword: "and as assert asr begin class constraint do done downto else end exception external for fun function functor if in include inherit! inherit initializer land lazy let lor lsl lsr lxor match method!|10 method mod module mutable new object of open! open or private rec sig struct then to try type val! val virtual when while with parser value",
      built_in: "array bool bytes char exn|5 float int int32 int64 list lazy_t|5 nativeint|5 string unit in_channel out_channel ref",
      literal: "true false"
    },
    illegal: /\/\/|>>/,
    contains: [
      {
        className: "literal",
        begin: "\\[(\\|\\|)?\\]|\\(\\)",
        relevance: 0
      },
      hljs2.COMMENT("\\(\\*", "\\*\\)", {
        contains: ["self"]
      }),
      {
        className: "symbol",
        begin: "'[A-Za-z_](?!')[\\w']*"
      },
      {
        className: "type",
        begin: "`[A-Z][\\w']*"
      },
      {
        className: "type",
        begin: "\\b[A-Z][\\w']*",
        relevance: 0
      },
      {
        begin: "[a-z_]\\w*'[\\w']*",
        relevance: 0
      },
      hljs2.inherit(hljs2.APOS_STRING_MODE, {className: "string", relevance: 0}),
      hljs2.inherit(hljs2.QUOTE_STRING_MODE, {illegal: null}),
      {
        className: "number",
        begin: "\\b(0[xX][a-fA-F0-9_]+[Lln]?|0[oO][0-7_]+[Lln]?|0[bB][01_]+[Lln]?|[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)",
        relevance: 0
      },
      {
        begin: /->/
      }
    ]
  };
}
var ocaml_1 = ocaml;
function openscad(hljs2) {
  const SPECIAL_VARS = {
    className: "keyword",
    begin: "\\$(f[asn]|t|vp[rtd]|children)"
  };
  const LITERALS2 = {
    className: "literal",
    begin: "false|true|PI|undef"
  };
  const NUMBERS = {
    className: "number",
    begin: "\\b\\d+(\\.\\d+)?(e-?\\d+)?",
    relevance: 0
  };
  const STRING = hljs2.inherit(hljs2.QUOTE_STRING_MODE, {
    illegal: null
  });
  const PREPRO = {
    className: "meta",
    keywords: {
      "meta-keyword": "include use"
    },
    begin: "include|use <",
    end: ">"
  };
  const PARAMS = {
    className: "params",
    begin: "\\(",
    end: "\\)",
    contains: [
      "self",
      NUMBERS,
      STRING,
      SPECIAL_VARS,
      LITERALS2
    ]
  };
  const MODIFIERS = {
    begin: "[*!#%]",
    relevance: 0
  };
  const FUNCTIONS = {
    className: "function",
    beginKeywords: "module function",
    end: /=|\{/,
    contains: [
      PARAMS,
      hljs2.UNDERSCORE_TITLE_MODE
    ]
  };
  return {
    name: "OpenSCAD",
    aliases: ["scad"],
    keywords: {
      keyword: "function module include use for intersection_for if else \\%",
      literal: "false true PI undef",
      built_in: "circle square polygon text sphere cube cylinder polyhedron translate rotate scale resize mirror multmatrix color offset hull minkowski union difference intersection abs sign sin cos tan acos asin atan atan2 floor round ceil ln log pow sqrt exp rands min max concat lookup str chr search version version_num norm cross parent_module echo import import_dxf dxf_linear_extrude linear_extrude rotate_extrude surface projection render children dxf_cross dxf_dim let assign"
    },
    contains: [
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      NUMBERS,
      PREPRO,
      STRING,
      SPECIAL_VARS,
      MODIFIERS,
      FUNCTIONS
    ]
  };
}
var openscad_1 = openscad;
function oxygene(hljs2) {
  const OXYGENE_KEYWORDS = {
    $pattern: /\.?\w+/,
    keyword: "abstract add and array as asc aspect assembly async begin break block by case class concat const copy constructor continue create default delegate desc distinct div do downto dynamic each else empty end ensure enum equals event except exit extension external false final finalize finalizer finally flags for forward from function future global group has if implementation implements implies in index inherited inline interface into invariants is iterator join locked locking loop matching method mod module namespace nested new nil not notify nullable of old on operator or order out override parallel params partial pinned private procedure property protected public queryable raise read readonly record reintroduce remove repeat require result reverse sealed select self sequence set shl shr skip static step soft take then to true try tuple type union unit unsafe until uses using var virtual raises volatile where while with write xor yield await mapped deprecated stdcall cdecl pascal register safecall overload library platform reference packed strict published autoreleasepool selector strong weak unretained"
  };
  const CURLY_COMMENT = hljs2.COMMENT(/\{/, /\}/, {
    relevance: 0
  });
  const PAREN_COMMENT = hljs2.COMMENT("\\(\\*", "\\*\\)", {
    relevance: 10
  });
  const STRING = {
    className: "string",
    begin: "'",
    end: "'",
    contains: [
      {
        begin: "''"
      }
    ]
  };
  const CHAR_STRING = {
    className: "string",
    begin: "(#\\d+)+"
  };
  const FUNCTION = {
    className: "function",
    beginKeywords: "function constructor destructor procedure method",
    end: "[:;]",
    keywords: "function constructor|10 destructor|10 procedure|10 method|10",
    contains: [
      hljs2.TITLE_MODE,
      {
        className: "params",
        begin: "\\(",
        end: "\\)",
        keywords: OXYGENE_KEYWORDS,
        contains: [
          STRING,
          CHAR_STRING
        ]
      },
      CURLY_COMMENT,
      PAREN_COMMENT
    ]
  };
  return {
    name: "Oxygene",
    case_insensitive: true,
    keywords: OXYGENE_KEYWORDS,
    illegal: '("|\\$[G-Zg-z]|\\/\\*|</|=>|->)',
    contains: [
      CURLY_COMMENT,
      PAREN_COMMENT,
      hljs2.C_LINE_COMMENT_MODE,
      STRING,
      CHAR_STRING,
      hljs2.NUMBER_MODE,
      FUNCTION,
      {
        className: "class",
        begin: "=\\bclass\\b",
        end: "end;",
        keywords: OXYGENE_KEYWORDS,
        contains: [
          STRING,
          CHAR_STRING,
          CURLY_COMMENT,
          PAREN_COMMENT,
          hljs2.C_LINE_COMMENT_MODE,
          FUNCTION
        ]
      }
    ]
  };
}
var oxygene_1 = oxygene;
function parser3(hljs2) {
  const CURLY_SUBCOMMENT = hljs2.COMMENT(/\{/, /\}/, {
    contains: ["self"]
  });
  return {
    name: "Parser3",
    subLanguage: "xml",
    relevance: 0,
    contains: [
      hljs2.COMMENT("^#", "$"),
      hljs2.COMMENT(/\^rem\{/, /\}/, {
        relevance: 10,
        contains: [CURLY_SUBCOMMENT]
      }),
      {
        className: "meta",
        begin: "^@(?:BASE|USE|CLASS|OPTIONS)$",
        relevance: 10
      },
      {
        className: "title",
        begin: "@[\\w\\-]+\\[[\\w^;\\-]*\\](?:\\[[\\w^;\\-]*\\])?(?:.*)$"
      },
      {
        className: "variable",
        begin: /\$\{?[\w\-.:]+\}?/
      },
      {
        className: "keyword",
        begin: /\^[\w\-.:]+/
      },
      {
        className: "number",
        begin: "\\^#[0-9a-fA-F]+"
      },
      hljs2.C_NUMBER_MODE
    ]
  };
}
var parser3_1 = parser3;
function pf(hljs2) {
  const MACRO = {
    className: "variable",
    begin: /\$[\w\d#@][\w\d_]*/
  };
  const TABLE = {
    className: "variable",
    begin: /<(?!\/)/,
    end: />/
  };
  return {
    name: "Packet Filter config",
    aliases: ["pf.conf"],
    keywords: {
      $pattern: /[a-z0-9_<>-]+/,
      built_in: "block match pass load anchor|5 antispoof|10 set table",
      keyword: "in out log quick on rdomain inet inet6 proto from port os to route allow-opts divert-packet divert-reply divert-to flags group icmp-type icmp6-type label once probability recieved-on rtable prio queue tos tag tagged user keep fragment for os drop af-to|10 binat-to|10 nat-to|10 rdr-to|10 bitmask least-stats random round-robin source-hash static-port dup-to reply-to route-to parent bandwidth default min max qlimit block-policy debug fingerprints hostid limit loginterface optimization reassemble ruleset-optimization basic none profile skip state-defaults state-policy timeout const counters persist no modulate synproxy state|5 floating if-bound no-sync pflow|10 sloppy source-track global rule max-src-nodes max-src-states max-src-conn max-src-conn-rate overload flush scrub|5 max-mss min-ttl no-df|10 random-id",
      literal: "all any no-route self urpf-failed egress|5 unknown"
    },
    contains: [
      hljs2.HASH_COMMENT_MODE,
      hljs2.NUMBER_MODE,
      hljs2.QUOTE_STRING_MODE,
      MACRO,
      TABLE
    ]
  };
}
var pf_1 = pf;
function pgsql(hljs2) {
  const COMMENT_MODE = hljs2.COMMENT("--", "$");
  const UNQUOTED_IDENT = "[a-zA-Z_][a-zA-Z_0-9$]*";
  const DOLLAR_STRING = "\\$([a-zA-Z_]?|[a-zA-Z_][a-zA-Z_0-9]*)\\$";
  const LABEL = "<<\\s*" + UNQUOTED_IDENT + "\\s*>>";
  const SQL_KW = "ABORT ALTER ANALYZE BEGIN CALL CHECKPOINT|10 CLOSE CLUSTER COMMENT COMMIT COPY CREATE DEALLOCATE DECLARE DELETE DISCARD DO DROP END EXECUTE EXPLAIN FETCH GRANT IMPORT INSERT LISTEN LOAD LOCK MOVE NOTIFY PREPARE REASSIGN|10 REFRESH REINDEX RELEASE RESET REVOKE ROLLBACK SAVEPOINT SECURITY SELECT SET SHOW START TRUNCATE UNLISTEN|10 UPDATE VACUUM|10 VALUES AGGREGATE COLLATION CONVERSION|10 DATABASE DEFAULT PRIVILEGES DOMAIN TRIGGER EXTENSION FOREIGN WRAPPER|10 TABLE FUNCTION GROUP LANGUAGE LARGE OBJECT MATERIALIZED VIEW OPERATOR CLASS FAMILY POLICY PUBLICATION|10 ROLE RULE SCHEMA SEQUENCE SERVER STATISTICS SUBSCRIPTION SYSTEM TABLESPACE CONFIGURATION DICTIONARY PARSER TEMPLATE TYPE USER MAPPING PREPARED ACCESS METHOD CAST AS TRANSFORM TRANSACTION OWNED TO INTO SESSION AUTHORIZATION INDEX PROCEDURE ASSERTION ALL ANALYSE AND ANY ARRAY ASC ASYMMETRIC|10 BOTH CASE CHECK COLLATE COLUMN CONCURRENTLY|10 CONSTRAINT CROSS DEFERRABLE RANGE DESC DISTINCT ELSE EXCEPT FOR FREEZE|10 FROM FULL HAVING ILIKE IN INITIALLY INNER INTERSECT IS ISNULL JOIN LATERAL LEADING LIKE LIMIT NATURAL NOT NOTNULL NULL OFFSET ON ONLY OR ORDER OUTER OVERLAPS PLACING PRIMARY REFERENCES RETURNING SIMILAR SOME SYMMETRIC TABLESAMPLE THEN TRAILING UNION UNIQUE USING VARIADIC|10 VERBOSE WHEN WHERE WINDOW WITH BY RETURNS INOUT OUT SETOF|10 IF STRICT CURRENT CONTINUE OWNER LOCATION OVER PARTITION WITHIN BETWEEN ESCAPE EXTERNAL INVOKER DEFINER WORK RENAME VERSION CONNECTION CONNECT TABLES TEMP TEMPORARY FUNCTIONS SEQUENCES TYPES SCHEMAS OPTION CASCADE RESTRICT ADD ADMIN EXISTS VALID VALIDATE ENABLE DISABLE REPLICA|10 ALWAYS PASSING COLUMNS PATH REF VALUE OVERRIDING IMMUTABLE STABLE VOLATILE BEFORE AFTER EACH ROW PROCEDURAL ROUTINE NO HANDLER VALIDATOR OPTIONS STORAGE OIDS|10 WITHOUT INHERIT DEPENDS CALLED INPUT LEAKPROOF|10 COST ROWS NOWAIT SEARCH UNTIL ENCRYPTED|10 PASSWORD CONFLICT|10 INSTEAD INHERITS CHARACTERISTICS WRITE CURSOR ALSO STATEMENT SHARE EXCLUSIVE INLINE ISOLATION REPEATABLE READ COMMITTED SERIALIZABLE UNCOMMITTED LOCAL GLOBAL SQL PROCEDURES RECURSIVE SNAPSHOT ROLLUP CUBE TRUSTED|10 INCLUDE FOLLOWING PRECEDING UNBOUNDED RANGE GROUPS UNENCRYPTED|10 SYSID FORMAT DELIMITER HEADER QUOTE ENCODING FILTER OFF FORCE_QUOTE FORCE_NOT_NULL FORCE_NULL COSTS BUFFERS TIMING SUMMARY DISABLE_PAGE_SKIPPING RESTART CYCLE GENERATED IDENTITY DEFERRED IMMEDIATE LEVEL LOGGED UNLOGGED OF NOTHING NONE EXCLUDE ATTRIBUTE USAGE ROUTINES TRUE FALSE NAN INFINITY ";
  const ROLE_ATTRS = "SUPERUSER NOSUPERUSER CREATEDB NOCREATEDB CREATEROLE NOCREATEROLE INHERIT NOINHERIT LOGIN NOLOGIN REPLICATION NOREPLICATION BYPASSRLS NOBYPASSRLS ";
  const PLPGSQL_KW = "ALIAS BEGIN CONSTANT DECLARE END EXCEPTION RETURN PERFORM|10 RAISE GET DIAGNOSTICS STACKED|10 FOREACH LOOP ELSIF EXIT WHILE REVERSE SLICE DEBUG LOG INFO NOTICE WARNING ASSERT OPEN ";
  const TYPES2 = "BIGINT INT8 BIGSERIAL SERIAL8 BIT VARYING VARBIT BOOLEAN BOOL BOX BYTEA CHARACTER CHAR VARCHAR CIDR CIRCLE DATE DOUBLE PRECISION FLOAT8 FLOAT INET INTEGER INT INT4 INTERVAL JSON JSONB LINE LSEG|10 MACADDR MACADDR8 MONEY NUMERIC DEC DECIMAL PATH POINT POLYGON REAL FLOAT4 SMALLINT INT2 SMALLSERIAL|10 SERIAL2|10 SERIAL|10 SERIAL4|10 TEXT TIME ZONE TIMETZ|10 TIMESTAMP TIMESTAMPTZ|10 TSQUERY|10 TSVECTOR|10 TXID_SNAPSHOT|10 UUID XML NATIONAL NCHAR INT4RANGE|10 INT8RANGE|10 NUMRANGE|10 TSRANGE|10 TSTZRANGE|10 DATERANGE|10 ANYELEMENT ANYARRAY ANYNONARRAY ANYENUM ANYRANGE CSTRING INTERNAL RECORD PG_DDL_COMMAND VOID UNKNOWN OPAQUE REFCURSOR NAME OID REGPROC|10 REGPROCEDURE|10 REGOPER|10 REGOPERATOR|10 REGCLASS|10 REGTYPE|10 REGROLE|10 REGNAMESPACE|10 REGCONFIG|10 REGDICTIONARY|10 ";
  const TYPES_RE = TYPES2.trim().split(" ").map(function(val) {
    return val.split("|")[0];
  }).join("|");
  const SQL_BI = "CURRENT_TIME CURRENT_TIMESTAMP CURRENT_USER CURRENT_CATALOG|10 CURRENT_DATE LOCALTIME LOCALTIMESTAMP CURRENT_ROLE|10 CURRENT_SCHEMA|10 SESSION_USER PUBLIC ";
  const PLPGSQL_BI = "FOUND NEW OLD TG_NAME|10 TG_WHEN|10 TG_LEVEL|10 TG_OP|10 TG_RELID|10 TG_RELNAME|10 TG_TABLE_NAME|10 TG_TABLE_SCHEMA|10 TG_NARGS|10 TG_ARGV|10 TG_EVENT|10 TG_TAG|10 ROW_COUNT RESULT_OID|10 PG_CONTEXT|10 RETURNED_SQLSTATE COLUMN_NAME CONSTRAINT_NAME PG_DATATYPE_NAME|10 MESSAGE_TEXT TABLE_NAME SCHEMA_NAME PG_EXCEPTION_DETAIL|10 PG_EXCEPTION_HINT|10 PG_EXCEPTION_CONTEXT|10 ";
  const PLPGSQL_EXCEPTIONS = "SQLSTATE SQLERRM|10 SUCCESSFUL_COMPLETION WARNING DYNAMIC_RESULT_SETS_RETURNED IMPLICIT_ZERO_BIT_PADDING NULL_VALUE_ELIMINATED_IN_SET_FUNCTION PRIVILEGE_NOT_GRANTED PRIVILEGE_NOT_REVOKED STRING_DATA_RIGHT_TRUNCATION DEPRECATED_FEATURE NO_DATA NO_ADDITIONAL_DYNAMIC_RESULT_SETS_RETURNED SQL_STATEMENT_NOT_YET_COMPLETE CONNECTION_EXCEPTION CONNECTION_DOES_NOT_EXIST CONNECTION_FAILURE SQLCLIENT_UNABLE_TO_ESTABLISH_SQLCONNECTION SQLSERVER_REJECTED_ESTABLISHMENT_OF_SQLCONNECTION TRANSACTION_RESOLUTION_UNKNOWN PROTOCOL_VIOLATION TRIGGERED_ACTION_EXCEPTION FEATURE_NOT_SUPPORTED INVALID_TRANSACTION_INITIATION LOCATOR_EXCEPTION INVALID_LOCATOR_SPECIFICATION INVALID_GRANTOR INVALID_GRANT_OPERATION INVALID_ROLE_SPECIFICATION DIAGNOSTICS_EXCEPTION STACKED_DIAGNOSTICS_ACCESSED_WITHOUT_ACTIVE_HANDLER CASE_NOT_FOUND CARDINALITY_VIOLATION DATA_EXCEPTION ARRAY_SUBSCRIPT_ERROR CHARACTER_NOT_IN_REPERTOIRE DATETIME_FIELD_OVERFLOW DIVISION_BY_ZERO ERROR_IN_ASSIGNMENT ESCAPE_CHARACTER_CONFLICT INDICATOR_OVERFLOW INTERVAL_FIELD_OVERFLOW INVALID_ARGUMENT_FOR_LOGARITHM INVALID_ARGUMENT_FOR_NTILE_FUNCTION INVALID_ARGUMENT_FOR_NTH_VALUE_FUNCTION INVALID_ARGUMENT_FOR_POWER_FUNCTION INVALID_ARGUMENT_FOR_WIDTH_BUCKET_FUNCTION INVALID_CHARACTER_VALUE_FOR_CAST INVALID_DATETIME_FORMAT INVALID_ESCAPE_CHARACTER INVALID_ESCAPE_OCTET INVALID_ESCAPE_SEQUENCE NONSTANDARD_USE_OF_ESCAPE_CHARACTER INVALID_INDICATOR_PARAMETER_VALUE INVALID_PARAMETER_VALUE INVALID_REGULAR_EXPRESSION INVALID_ROW_COUNT_IN_LIMIT_CLAUSE INVALID_ROW_COUNT_IN_RESULT_OFFSET_CLAUSE INVALID_TABLESAMPLE_ARGUMENT INVALID_TABLESAMPLE_REPEAT INVALID_TIME_ZONE_DISPLACEMENT_VALUE INVALID_USE_OF_ESCAPE_CHARACTER MOST_SPECIFIC_TYPE_MISMATCH NULL_VALUE_NOT_ALLOWED NULL_VALUE_NO_INDICATOR_PARAMETER NUMERIC_VALUE_OUT_OF_RANGE SEQUENCE_GENERATOR_LIMIT_EXCEEDED STRING_DATA_LENGTH_MISMATCH STRING_DATA_RIGHT_TRUNCATION SUBSTRING_ERROR TRIM_ERROR UNTERMINATED_C_STRING ZERO_LENGTH_CHARACTER_STRING FLOATING_POINT_EXCEPTION INVALID_TEXT_REPRESENTATION INVALID_BINARY_REPRESENTATION BAD_COPY_FILE_FORMAT UNTRANSLATABLE_CHARACTER NOT_AN_XML_DOCUMENT INVALID_XML_DOCUMENT INVALID_XML_CONTENT INVALID_XML_COMMENT INVALID_XML_PROCESSING_INSTRUCTION INTEGRITY_CONSTRAINT_VIOLATION RESTRICT_VIOLATION NOT_NULL_VIOLATION FOREIGN_KEY_VIOLATION UNIQUE_VIOLATION CHECK_VIOLATION EXCLUSION_VIOLATION INVALID_CURSOR_STATE INVALID_TRANSACTION_STATE ACTIVE_SQL_TRANSACTION BRANCH_TRANSACTION_ALREADY_ACTIVE HELD_CURSOR_REQUIRES_SAME_ISOLATION_LEVEL INAPPROPRIATE_ACCESS_MODE_FOR_BRANCH_TRANSACTION INAPPROPRIATE_ISOLATION_LEVEL_FOR_BRANCH_TRANSACTION NO_ACTIVE_SQL_TRANSACTION_FOR_BRANCH_TRANSACTION READ_ONLY_SQL_TRANSACTION SCHEMA_AND_DATA_STATEMENT_MIXING_NOT_SUPPORTED NO_ACTIVE_SQL_TRANSACTION IN_FAILED_SQL_TRANSACTION IDLE_IN_TRANSACTION_SESSION_TIMEOUT INVALID_SQL_STATEMENT_NAME TRIGGERED_DATA_CHANGE_VIOLATION INVALID_AUTHORIZATION_SPECIFICATION INVALID_PASSWORD DEPENDENT_PRIVILEGE_DESCRIPTORS_STILL_EXIST DEPENDENT_OBJECTS_STILL_EXIST INVALID_TRANSACTION_TERMINATION SQL_ROUTINE_EXCEPTION FUNCTION_EXECUTED_NO_RETURN_STATEMENT MODIFYING_SQL_DATA_NOT_PERMITTED PROHIBITED_SQL_STATEMENT_ATTEMPTED READING_SQL_DATA_NOT_PERMITTED INVALID_CURSOR_NAME EXTERNAL_ROUTINE_EXCEPTION CONTAINING_SQL_NOT_PERMITTED MODIFYING_SQL_DATA_NOT_PERMITTED PROHIBITED_SQL_STATEMENT_ATTEMPTED READING_SQL_DATA_NOT_PERMITTED EXTERNAL_ROUTINE_INVOCATION_EXCEPTION INVALID_SQLSTATE_RETURNED NULL_VALUE_NOT_ALLOWED TRIGGER_PROTOCOL_VIOLATED SRF_PROTOCOL_VIOLATED EVENT_TRIGGER_PROTOCOL_VIOLATED SAVEPOINT_EXCEPTION INVALID_SAVEPOINT_SPECIFICATION INVALID_CATALOG_NAME INVALID_SCHEMA_NAME TRANSACTION_ROLLBACK TRANSACTION_INTEGRITY_CONSTRAINT_VIOLATION SERIALIZATION_FAILURE STATEMENT_COMPLETION_UNKNOWN DEADLOCK_DETECTED SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION SYNTAX_ERROR INSUFFICIENT_PRIVILEGE CANNOT_COERCE GROUPING_ERROR WINDOWING_ERROR INVALID_RECURSION INVALID_FOREIGN_KEY INVALID_NAME NAME_TOO_LONG RESERVED_NAME DATATYPE_MISMATCH INDETERMINATE_DATATYPE COLLATION_MISMATCH INDETERMINATE_COLLATION WRONG_OBJECT_TYPE GENERATED_ALWAYS UNDEFINED_COLUMN UNDEFINED_FUNCTION UNDEFINED_TABLE UNDEFINED_PARAMETER UNDEFINED_OBJECT DUPLICATE_COLUMN DUPLICATE_CURSOR DUPLICATE_DATABASE DUPLICATE_FUNCTION DUPLICATE_PREPARED_STATEMENT DUPLICATE_SCHEMA DUPLICATE_TABLE DUPLICATE_ALIAS DUPLICATE_OBJECT AMBIGUOUS_COLUMN AMBIGUOUS_FUNCTION AMBIGUOUS_PARAMETER AMBIGUOUS_ALIAS INVALID_COLUMN_REFERENCE INVALID_COLUMN_DEFINITION INVALID_CURSOR_DEFINITION INVALID_DATABASE_DEFINITION INVALID_FUNCTION_DEFINITION INVALID_PREPARED_STATEMENT_DEFINITION INVALID_SCHEMA_DEFINITION INVALID_TABLE_DEFINITION INVALID_OBJECT_DEFINITION WITH_CHECK_OPTION_VIOLATION INSUFFICIENT_RESOURCES DISK_FULL OUT_OF_MEMORY TOO_MANY_CONNECTIONS CONFIGURATION_LIMIT_EXCEEDED PROGRAM_LIMIT_EXCEEDED STATEMENT_TOO_COMPLEX TOO_MANY_COLUMNS TOO_MANY_ARGUMENTS OBJECT_NOT_IN_PREREQUISITE_STATE OBJECT_IN_USE CANT_CHANGE_RUNTIME_PARAM LOCK_NOT_AVAILABLE OPERATOR_INTERVENTION QUERY_CANCELED ADMIN_SHUTDOWN CRASH_SHUTDOWN CANNOT_CONNECT_NOW DATABASE_DROPPED SYSTEM_ERROR IO_ERROR UNDEFINED_FILE DUPLICATE_FILE SNAPSHOT_TOO_OLD CONFIG_FILE_ERROR LOCK_FILE_EXISTS FDW_ERROR FDW_COLUMN_NAME_NOT_FOUND FDW_DYNAMIC_PARAMETER_VALUE_NEEDED FDW_FUNCTION_SEQUENCE_ERROR FDW_INCONSISTENT_DESCRIPTOR_INFORMATION FDW_INVALID_ATTRIBUTE_VALUE FDW_INVALID_COLUMN_NAME FDW_INVALID_COLUMN_NUMBER FDW_INVALID_DATA_TYPE FDW_INVALID_DATA_TYPE_DESCRIPTORS FDW_INVALID_DESCRIPTOR_FIELD_IDENTIFIER FDW_INVALID_HANDLE FDW_INVALID_OPTION_INDEX FDW_INVALID_OPTION_NAME FDW_INVALID_STRING_LENGTH_OR_BUFFER_LENGTH FDW_INVALID_STRING_FORMAT FDW_INVALID_USE_OF_NULL_POINTER FDW_TOO_MANY_HANDLES FDW_OUT_OF_MEMORY FDW_NO_SCHEMAS FDW_OPTION_NAME_NOT_FOUND FDW_REPLY_HANDLE FDW_SCHEMA_NOT_FOUND FDW_TABLE_NOT_FOUND FDW_UNABLE_TO_CREATE_EXECUTION FDW_UNABLE_TO_CREATE_REPLY FDW_UNABLE_TO_ESTABLISH_CONNECTION PLPGSQL_ERROR RAISE_EXCEPTION NO_DATA_FOUND TOO_MANY_ROWS ASSERT_FAILURE INTERNAL_ERROR DATA_CORRUPTED INDEX_CORRUPTED ";
  const FUNCTIONS = "ARRAY_AGG AVG BIT_AND BIT_OR BOOL_AND BOOL_OR COUNT EVERY JSON_AGG JSONB_AGG JSON_OBJECT_AGG JSONB_OBJECT_AGG MAX MIN MODE STRING_AGG SUM XMLAGG CORR COVAR_POP COVAR_SAMP REGR_AVGX REGR_AVGY REGR_COUNT REGR_INTERCEPT REGR_R2 REGR_SLOPE REGR_SXX REGR_SXY REGR_SYY STDDEV STDDEV_POP STDDEV_SAMP VARIANCE VAR_POP VAR_SAMP PERCENTILE_CONT PERCENTILE_DISC ROW_NUMBER RANK DENSE_RANK PERCENT_RANK CUME_DIST NTILE LAG LEAD FIRST_VALUE LAST_VALUE NTH_VALUE NUM_NONNULLS NUM_NULLS ABS CBRT CEIL CEILING DEGREES DIV EXP FLOOR LN LOG MOD PI POWER RADIANS ROUND SCALE SIGN SQRT TRUNC WIDTH_BUCKET RANDOM SETSEED ACOS ACOSD ASIN ASIND ATAN ATAND ATAN2 ATAN2D COS COSD COT COTD SIN SIND TAN TAND BIT_LENGTH CHAR_LENGTH CHARACTER_LENGTH LOWER OCTET_LENGTH OVERLAY POSITION SUBSTRING TREAT TRIM UPPER ASCII BTRIM CHR CONCAT CONCAT_WS CONVERT CONVERT_FROM CONVERT_TO DECODE ENCODE INITCAP LEFT LENGTH LPAD LTRIM MD5 PARSE_IDENT PG_CLIENT_ENCODING QUOTE_IDENT|10 QUOTE_LITERAL|10 QUOTE_NULLABLE|10 REGEXP_MATCH REGEXP_MATCHES REGEXP_REPLACE REGEXP_SPLIT_TO_ARRAY REGEXP_SPLIT_TO_TABLE REPEAT REPLACE REVERSE RIGHT RPAD RTRIM SPLIT_PART STRPOS SUBSTR TO_ASCII TO_HEX TRANSLATE OCTET_LENGTH GET_BIT GET_BYTE SET_BIT SET_BYTE TO_CHAR TO_DATE TO_NUMBER TO_TIMESTAMP AGE CLOCK_TIMESTAMP|10 DATE_PART DATE_TRUNC ISFINITE JUSTIFY_DAYS JUSTIFY_HOURS JUSTIFY_INTERVAL MAKE_DATE MAKE_INTERVAL|10 MAKE_TIME MAKE_TIMESTAMP|10 MAKE_TIMESTAMPTZ|10 NOW STATEMENT_TIMESTAMP|10 TIMEOFDAY TRANSACTION_TIMESTAMP|10 ENUM_FIRST ENUM_LAST ENUM_RANGE AREA CENTER DIAMETER HEIGHT ISCLOSED ISOPEN NPOINTS PCLOSE POPEN RADIUS WIDTH BOX BOUND_BOX CIRCLE LINE LSEG PATH POLYGON ABBREV BROADCAST HOST HOSTMASK MASKLEN NETMASK NETWORK SET_MASKLEN TEXT INET_SAME_FAMILY INET_MERGE MACADDR8_SET7BIT ARRAY_TO_TSVECTOR GET_CURRENT_TS_CONFIG NUMNODE PLAINTO_TSQUERY PHRASETO_TSQUERY WEBSEARCH_TO_TSQUERY QUERYTREE SETWEIGHT STRIP TO_TSQUERY TO_TSVECTOR JSON_TO_TSVECTOR JSONB_TO_TSVECTOR TS_DELETE TS_FILTER TS_HEADLINE TS_RANK TS_RANK_CD TS_REWRITE TSQUERY_PHRASE TSVECTOR_TO_ARRAY TSVECTOR_UPDATE_TRIGGER TSVECTOR_UPDATE_TRIGGER_COLUMN XMLCOMMENT XMLCONCAT XMLELEMENT XMLFOREST XMLPI XMLROOT XMLEXISTS XML_IS_WELL_FORMED XML_IS_WELL_FORMED_DOCUMENT XML_IS_WELL_FORMED_CONTENT XPATH XPATH_EXISTS XMLTABLE XMLNAMESPACES TABLE_TO_XML TABLE_TO_XMLSCHEMA TABLE_TO_XML_AND_XMLSCHEMA QUERY_TO_XML QUERY_TO_XMLSCHEMA QUERY_TO_XML_AND_XMLSCHEMA CURSOR_TO_XML CURSOR_TO_XMLSCHEMA SCHEMA_TO_XML SCHEMA_TO_XMLSCHEMA SCHEMA_TO_XML_AND_XMLSCHEMA DATABASE_TO_XML DATABASE_TO_XMLSCHEMA DATABASE_TO_XML_AND_XMLSCHEMA XMLATTRIBUTES TO_JSON TO_JSONB ARRAY_TO_JSON ROW_TO_JSON JSON_BUILD_ARRAY JSONB_BUILD_ARRAY JSON_BUILD_OBJECT JSONB_BUILD_OBJECT JSON_OBJECT JSONB_OBJECT JSON_ARRAY_LENGTH JSONB_ARRAY_LENGTH JSON_EACH JSONB_EACH JSON_EACH_TEXT JSONB_EACH_TEXT JSON_EXTRACT_PATH JSONB_EXTRACT_PATH JSON_OBJECT_KEYS JSONB_OBJECT_KEYS JSON_POPULATE_RECORD JSONB_POPULATE_RECORD JSON_POPULATE_RECORDSET JSONB_POPULATE_RECORDSET JSON_ARRAY_ELEMENTS JSONB_ARRAY_ELEMENTS JSON_ARRAY_ELEMENTS_TEXT JSONB_ARRAY_ELEMENTS_TEXT JSON_TYPEOF JSONB_TYPEOF JSON_TO_RECORD JSONB_TO_RECORD JSON_TO_RECORDSET JSONB_TO_RECORDSET JSON_STRIP_NULLS JSONB_STRIP_NULLS JSONB_SET JSONB_INSERT JSONB_PRETTY CURRVAL LASTVAL NEXTVAL SETVAL COALESCE NULLIF GREATEST LEAST ARRAY_APPEND ARRAY_CAT ARRAY_NDIMS ARRAY_DIMS ARRAY_FILL ARRAY_LENGTH ARRAY_LOWER ARRAY_POSITION ARRAY_POSITIONS ARRAY_PREPEND ARRAY_REMOVE ARRAY_REPLACE ARRAY_TO_STRING ARRAY_UPPER CARDINALITY STRING_TO_ARRAY UNNEST ISEMPTY LOWER_INC UPPER_INC LOWER_INF UPPER_INF RANGE_MERGE GENERATE_SERIES GENERATE_SUBSCRIPTS CURRENT_DATABASE CURRENT_QUERY CURRENT_SCHEMA|10 CURRENT_SCHEMAS|10 INET_CLIENT_ADDR INET_CLIENT_PORT INET_SERVER_ADDR INET_SERVER_PORT ROW_SECURITY_ACTIVE FORMAT_TYPE TO_REGCLASS TO_REGPROC TO_REGPROCEDURE TO_REGOPER TO_REGOPERATOR TO_REGTYPE TO_REGNAMESPACE TO_REGROLE COL_DESCRIPTION OBJ_DESCRIPTION SHOBJ_DESCRIPTION TXID_CURRENT TXID_CURRENT_IF_ASSIGNED TXID_CURRENT_SNAPSHOT TXID_SNAPSHOT_XIP TXID_SNAPSHOT_XMAX TXID_SNAPSHOT_XMIN TXID_VISIBLE_IN_SNAPSHOT TXID_STATUS CURRENT_SETTING SET_CONFIG BRIN_SUMMARIZE_NEW_VALUES BRIN_SUMMARIZE_RANGE BRIN_DESUMMARIZE_RANGE GIN_CLEAN_PENDING_LIST SUPPRESS_REDUNDANT_UPDATES_TRIGGER LO_FROM_BYTEA LO_PUT LO_GET LO_CREAT LO_CREATE LO_UNLINK LO_IMPORT LO_EXPORT LOREAD LOWRITE GROUPING CAST ";
  const FUNCTIONS_RE = FUNCTIONS.trim().split(" ").map(function(val) {
    return val.split("|")[0];
  }).join("|");
  return {
    name: "PostgreSQL",
    aliases: [
      "postgres",
      "postgresql"
    ],
    case_insensitive: true,
    keywords: {
      keyword: SQL_KW + PLPGSQL_KW + ROLE_ATTRS,
      built_in: SQL_BI + PLPGSQL_BI + PLPGSQL_EXCEPTIONS
    },
    illegal: /:==|\W\s*\(\*|(^|\s)\$[a-z]|\{\{|[a-z]:\s*$|\.\.\.|TO:|DO:/,
    contains: [
      {
        className: "keyword",
        variants: [
          {
            begin: /\bTEXT\s*SEARCH\b/
          },
          {
            begin: /\b(PRIMARY|FOREIGN|FOR(\s+NO)?)\s+KEY\b/
          },
          {
            begin: /\bPARALLEL\s+(UNSAFE|RESTRICTED|SAFE)\b/
          },
          {
            begin: /\bSTORAGE\s+(PLAIN|EXTERNAL|EXTENDED|MAIN)\b/
          },
          {
            begin: /\bMATCH\s+(FULL|PARTIAL|SIMPLE)\b/
          },
          {
            begin: /\bNULLS\s+(FIRST|LAST)\b/
          },
          {
            begin: /\bEVENT\s+TRIGGER\b/
          },
          {
            begin: /\b(MAPPING|OR)\s+REPLACE\b/
          },
          {
            begin: /\b(FROM|TO)\s+(PROGRAM|STDIN|STDOUT)\b/
          },
          {
            begin: /\b(SHARE|EXCLUSIVE)\s+MODE\b/
          },
          {
            begin: /\b(LEFT|RIGHT)\s+(OUTER\s+)?JOIN\b/
          },
          {
            begin: /\b(FETCH|MOVE)\s+(NEXT|PRIOR|FIRST|LAST|ABSOLUTE|RELATIVE|FORWARD|BACKWARD)\b/
          },
          {
            begin: /\bPRESERVE\s+ROWS\b/
          },
          {
            begin: /\bDISCARD\s+PLANS\b/
          },
          {
            begin: /\bREFERENCING\s+(OLD|NEW)\b/
          },
          {
            begin: /\bSKIP\s+LOCKED\b/
          },
          {
            begin: /\bGROUPING\s+SETS\b/
          },
          {
            begin: /\b(BINARY|INSENSITIVE|SCROLL|NO\s+SCROLL)\s+(CURSOR|FOR)\b/
          },
          {
            begin: /\b(WITH|WITHOUT)\s+HOLD\b/
          },
          {
            begin: /\bWITH\s+(CASCADED|LOCAL)\s+CHECK\s+OPTION\b/
          },
          {
            begin: /\bEXCLUDE\s+(TIES|NO\s+OTHERS)\b/
          },
          {
            begin: /\bFORMAT\s+(TEXT|XML|JSON|YAML)\b/
          },
          {
            begin: /\bSET\s+((SESSION|LOCAL)\s+)?NAMES\b/
          },
          {
            begin: /\bIS\s+(NOT\s+)?UNKNOWN\b/
          },
          {
            begin: /\bSECURITY\s+LABEL\b/
          },
          {
            begin: /\bSTANDALONE\s+(YES|NO|NO\s+VALUE)\b/
          },
          {
            begin: /\bWITH\s+(NO\s+)?DATA\b/
          },
          {
            begin: /\b(FOREIGN|SET)\s+DATA\b/
          },
          {
            begin: /\bSET\s+(CATALOG|CONSTRAINTS)\b/
          },
          {
            begin: /\b(WITH|FOR)\s+ORDINALITY\b/
          },
          {
            begin: /\bIS\s+(NOT\s+)?DOCUMENT\b/
          },
          {
            begin: /\bXML\s+OPTION\s+(DOCUMENT|CONTENT)\b/
          },
          {
            begin: /\b(STRIP|PRESERVE)\s+WHITESPACE\b/
          },
          {
            begin: /\bNO\s+(ACTION|MAXVALUE|MINVALUE)\b/
          },
          {
            begin: /\bPARTITION\s+BY\s+(RANGE|LIST|HASH)\b/
          },
          {
            begin: /\bAT\s+TIME\s+ZONE\b/
          },
          {
            begin: /\bGRANTED\s+BY\b/
          },
          {
            begin: /\bRETURN\s+(QUERY|NEXT)\b/
          },
          {
            begin: /\b(ATTACH|DETACH)\s+PARTITION\b/
          },
          {
            begin: /\bFORCE\s+ROW\s+LEVEL\s+SECURITY\b/
          },
          {
            begin: /\b(INCLUDING|EXCLUDING)\s+(COMMENTS|CONSTRAINTS|DEFAULTS|IDENTITY|INDEXES|STATISTICS|STORAGE|ALL)\b/
          },
          {
            begin: /\bAS\s+(ASSIGNMENT|IMPLICIT|PERMISSIVE|RESTRICTIVE|ENUM|RANGE)\b/
          }
        ]
      },
      {
        begin: /\b(FORMAT|FAMILY|VERSION)\s*\(/
      },
      {
        begin: /\bINCLUDE\s*\(/,
        keywords: "INCLUDE"
      },
      {
        begin: /\bRANGE(?!\s*(BETWEEN|UNBOUNDED|CURRENT|[-0-9]+))/
      },
      {
        begin: /\b(VERSION|OWNER|TEMPLATE|TABLESPACE|CONNECTION\s+LIMIT|PROCEDURE|RESTRICT|JOIN|PARSER|COPY|START|END|COLLATION|INPUT|ANALYZE|STORAGE|LIKE|DEFAULT|DELIMITER|ENCODING|COLUMN|CONSTRAINT|TABLE|SCHEMA)\s*=/
      },
      {
        begin: /\b(PG_\w+?|HAS_[A-Z_]+_PRIVILEGE)\b/,
        relevance: 10
      },
      {
        begin: /\bEXTRACT\s*\(/,
        end: /\bFROM\b/,
        returnEnd: true,
        keywords: {
          type: "CENTURY DAY DECADE DOW DOY EPOCH HOUR ISODOW ISOYEAR MICROSECONDS MILLENNIUM MILLISECONDS MINUTE MONTH QUARTER SECOND TIMEZONE TIMEZONE_HOUR TIMEZONE_MINUTE WEEK YEAR"
        }
      },
      {
        begin: /\b(XMLELEMENT|XMLPI)\s*\(\s*NAME/,
        keywords: {
          keyword: "NAME"
        }
      },
      {
        begin: /\b(XMLPARSE|XMLSERIALIZE)\s*\(\s*(DOCUMENT|CONTENT)/,
        keywords: {
          keyword: "DOCUMENT CONTENT"
        }
      },
      {
        beginKeywords: "CACHE INCREMENT MAXVALUE MINVALUE",
        end: hljs2.C_NUMBER_RE,
        returnEnd: true,
        keywords: "BY CACHE INCREMENT MAXVALUE MINVALUE"
      },
      {
        className: "type",
        begin: /\b(WITH|WITHOUT)\s+TIME\s+ZONE\b/
      },
      {
        className: "type",
        begin: /\bINTERVAL\s+(YEAR|MONTH|DAY|HOUR|MINUTE|SECOND)(\s+TO\s+(MONTH|HOUR|MINUTE|SECOND))?\b/
      },
      {
        begin: /\bRETURNS\s+(LANGUAGE_HANDLER|TRIGGER|EVENT_TRIGGER|FDW_HANDLER|INDEX_AM_HANDLER|TSM_HANDLER)\b/,
        keywords: {
          keyword: "RETURNS",
          type: "LANGUAGE_HANDLER TRIGGER EVENT_TRIGGER FDW_HANDLER INDEX_AM_HANDLER TSM_HANDLER"
        }
      },
      {
        begin: "\\b(" + FUNCTIONS_RE + ")\\s*\\("
      },
      {
        begin: "\\.(" + TYPES_RE + ")\\b"
      },
      {
        begin: "\\b(" + TYPES_RE + ")\\s+PATH\\b",
        keywords: {
          keyword: "PATH",
          type: TYPES2.replace("PATH ", "")
        }
      },
      {
        className: "type",
        begin: "\\b(" + TYPES_RE + ")\\b"
      },
      {
        className: "string",
        begin: "'",
        end: "'",
        contains: [
          {
            begin: "''"
          }
        ]
      },
      {
        className: "string",
        begin: "(e|E|u&|U&)'",
        end: "'",
        contains: [
          {
            begin: "\\\\."
          }
        ],
        relevance: 10
      },
      hljs2.END_SAME_AS_BEGIN({
        begin: DOLLAR_STRING,
        end: DOLLAR_STRING,
        contains: [
          {
            subLanguage: [
              "pgsql",
              "perl",
              "python",
              "tcl",
              "r",
              "lua",
              "java",
              "php",
              "ruby",
              "bash",
              "scheme",
              "xml",
              "json"
            ],
            endsWithParent: true
          }
        ]
      }),
      {
        begin: '"',
        end: '"',
        contains: [
          {
            begin: '""'
          }
        ]
      },
      hljs2.C_NUMBER_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      COMMENT_MODE,
      {
        className: "meta",
        variants: [
          {
            begin: "%(ROW)?TYPE",
            relevance: 10
          },
          {
            begin: "\\$\\d+"
          },
          {
            begin: "^#\\w",
            end: "$"
          }
        ]
      },
      {
        className: "symbol",
        begin: LABEL,
        relevance: 10
      }
    ]
  };
}
var pgsql_1 = pgsql;
function php(hljs2) {
  const VARIABLE = {
    className: "variable",
    begin: `\\$+[a-zA-Z_\x7F-\xFF][a-zA-Z0-9_\x7F-\xFF]*(?![A-Za-z0-9])(?![$])`
  };
  const PREPROCESSOR = {
    className: "meta",
    variants: [
      {begin: /<\?php/, relevance: 10},
      {begin: /<\?[=]?/},
      {begin: /\?>/}
    ]
  };
  const SUBST = {
    className: "subst",
    variants: [
      {begin: /\$\w+/},
      {begin: /\{\$/, end: /\}/}
    ]
  };
  const SINGLE_QUOTED = hljs2.inherit(hljs2.APOS_STRING_MODE, {
    illegal: null
  });
  const DOUBLE_QUOTED = hljs2.inherit(hljs2.QUOTE_STRING_MODE, {
    illegal: null,
    contains: hljs2.QUOTE_STRING_MODE.contains.concat(SUBST)
  });
  const HEREDOC = hljs2.END_SAME_AS_BEGIN({
    begin: /<<<[ \t]*(\w+)\n/,
    end: /[ \t]*(\w+)\b/,
    contains: hljs2.QUOTE_STRING_MODE.contains.concat(SUBST)
  });
  const STRING = {
    className: "string",
    contains: [hljs2.BACKSLASH_ESCAPE, PREPROCESSOR],
    variants: [
      hljs2.inherit(SINGLE_QUOTED, {
        begin: "b'",
        end: "'"
      }),
      hljs2.inherit(DOUBLE_QUOTED, {
        begin: 'b"',
        end: '"'
      }),
      DOUBLE_QUOTED,
      SINGLE_QUOTED,
      HEREDOC
    ]
  };
  const NUMBER = {
    className: "number",
    variants: [
      {begin: `\\b0b[01]+(?:_[01]+)*\\b`},
      {begin: `\\b0o[0-7]+(?:_[0-7]+)*\\b`},
      {begin: `\\b0x[\\da-f]+(?:_[\\da-f]+)*\\b`},
      {begin: `(?:\\b\\d+(?:_\\d+)*(\\.(?:\\d+(?:_\\d+)*))?|\\B\\.\\d+)(?:e[+-]?\\d+)?`}
    ],
    relevance: 0
  };
  const KEYWORDS2 = {
    keyword: "__CLASS__ __DIR__ __FILE__ __FUNCTION__ __LINE__ __METHOD__ __NAMESPACE__ __TRAIT__ die echo exit include include_once print require require_once array abstract and as binary bool boolean break callable case catch class clone const continue declare default do double else elseif empty enddeclare endfor endforeach endif endswitch endwhile enum eval extends final finally float for foreach from global goto if implements instanceof insteadof int integer interface isset iterable list match|0 mixed new object or private protected public real return string switch throw trait try unset use var void while xor yield",
    literal: "false null true",
    built_in: "Error|0 AppendIterator ArgumentCountError ArithmeticError ArrayIterator ArrayObject AssertionError BadFunctionCallException BadMethodCallException CachingIterator CallbackFilterIterator CompileError Countable DirectoryIterator DivisionByZeroError DomainException EmptyIterator ErrorException Exception FilesystemIterator FilterIterator GlobIterator InfiniteIterator InvalidArgumentException IteratorIterator LengthException LimitIterator LogicException MultipleIterator NoRewindIterator OutOfBoundsException OutOfRangeException OuterIterator OverflowException ParentIterator ParseError RangeException RecursiveArrayIterator RecursiveCachingIterator RecursiveCallbackFilterIterator RecursiveDirectoryIterator RecursiveFilterIterator RecursiveIterator RecursiveIteratorIterator RecursiveRegexIterator RecursiveTreeIterator RegexIterator RuntimeException SeekableIterator SplDoublyLinkedList SplFileInfo SplFileObject SplFixedArray SplHeap SplMaxHeap SplMinHeap SplObjectStorage SplObserver SplObserver SplPriorityQueue SplQueue SplStack SplSubject SplSubject SplTempFileObject TypeError UnderflowException UnexpectedValueException UnhandledMatchError ArrayAccess Closure Generator Iterator IteratorAggregate Serializable Stringable Throwable Traversable WeakReference WeakMap Directory __PHP_Incomplete_Class parent php_user_filter self static stdClass"
  };
  return {
    aliases: ["php3", "php4", "php5", "php6", "php7", "php8"],
    case_insensitive: true,
    keywords: KEYWORDS2,
    contains: [
      hljs2.HASH_COMMENT_MODE,
      hljs2.COMMENT("//", "$", {contains: [PREPROCESSOR]}),
      hljs2.COMMENT("/\\*", "\\*/", {
        contains: [
          {
            className: "doctag",
            begin: "@[A-Za-z]+"
          }
        ]
      }),
      hljs2.COMMENT("__halt_compiler.+?;", false, {
        endsWithParent: true,
        keywords: "__halt_compiler"
      }),
      PREPROCESSOR,
      {
        className: "keyword",
        begin: /\$this\b/
      },
      VARIABLE,
      {
        begin: /(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/
      },
      {
        className: "function",
        relevance: 0,
        beginKeywords: "fn function",
        end: /[;{]/,
        excludeEnd: true,
        illegal: "[$%\\[]",
        contains: [
          {
            beginKeywords: "use"
          },
          hljs2.UNDERSCORE_TITLE_MODE,
          {
            begin: "=>",
            endsParent: true
          },
          {
            className: "params",
            begin: "\\(",
            end: "\\)",
            excludeBegin: true,
            excludeEnd: true,
            keywords: KEYWORDS2,
            contains: [
              "self",
              VARIABLE,
              hljs2.C_BLOCK_COMMENT_MODE,
              STRING,
              NUMBER
            ]
          }
        ]
      },
      {
        className: "class",
        variants: [
          {beginKeywords: "enum", illegal: /[($"]/},
          {beginKeywords: "class interface trait", illegal: /[:($"]/}
        ],
        relevance: 0,
        end: /\{/,
        excludeEnd: true,
        contains: [
          {beginKeywords: "extends implements"},
          hljs2.UNDERSCORE_TITLE_MODE
        ]
      },
      {
        beginKeywords: "namespace",
        relevance: 0,
        end: ";",
        illegal: /[.']/,
        contains: [hljs2.UNDERSCORE_TITLE_MODE]
      },
      {
        beginKeywords: "use",
        relevance: 0,
        end: ";",
        contains: [hljs2.UNDERSCORE_TITLE_MODE]
      },
      STRING,
      NUMBER
    ]
  };
}
var php_1 = php;
function phpTemplate(hljs2) {
  return {
    name: "PHP template",
    subLanguage: "xml",
    contains: [
      {
        begin: /<\?(php|=)?/,
        end: /\?>/,
        subLanguage: "php",
        contains: [
          {
            begin: "/\\*",
            end: "\\*/",
            skip: true
          },
          {
            begin: 'b"',
            end: '"',
            skip: true
          },
          {
            begin: "b'",
            end: "'",
            skip: true
          },
          hljs2.inherit(hljs2.APOS_STRING_MODE, {
            illegal: null,
            className: null,
            contains: null,
            skip: true
          }),
          hljs2.inherit(hljs2.QUOTE_STRING_MODE, {
            illegal: null,
            className: null,
            contains: null,
            skip: true
          })
        ]
      }
    ]
  };
}
var phpTemplate_1 = phpTemplate;
function plaintext(hljs2) {
  return {
    name: "Plain text",
    aliases: [
      "text",
      "txt"
    ],
    disableAutodetect: true
  };
}
var plaintext_1 = plaintext;
function pony(hljs2) {
  const KEYWORDS2 = {
    keyword: "actor addressof and as be break class compile_error compile_intrinsic consume continue delegate digestof do else elseif embed end error for fun if ifdef in interface is isnt lambda let match new not object or primitive recover repeat return struct then trait try type until use var where while with xor",
    meta: "iso val tag trn box ref",
    literal: "this false true"
  };
  const TRIPLE_QUOTE_STRING_MODE = {
    className: "string",
    begin: '"""',
    end: '"""',
    relevance: 10
  };
  const QUOTE_STRING_MODE2 = {
    className: "string",
    begin: '"',
    end: '"',
    contains: [hljs2.BACKSLASH_ESCAPE]
  };
  const SINGLE_QUOTE_CHAR_MODE = {
    className: "string",
    begin: "'",
    end: "'",
    contains: [hljs2.BACKSLASH_ESCAPE],
    relevance: 0
  };
  const TYPE_NAME = {
    className: "type",
    begin: "\\b_?[A-Z][\\w]*",
    relevance: 0
  };
  const PRIMED_NAME = {
    begin: hljs2.IDENT_RE + "'",
    relevance: 0
  };
  const NUMBER_MODE2 = {
    className: "number",
    begin: "(-?)(\\b0[xX][a-fA-F0-9]+|\\b0[bB][01]+|(\\b\\d+(_\\d+)?(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)",
    relevance: 0
  };
  return {
    name: "Pony",
    keywords: KEYWORDS2,
    contains: [
      TYPE_NAME,
      TRIPLE_QUOTE_STRING_MODE,
      QUOTE_STRING_MODE2,
      SINGLE_QUOTE_CHAR_MODE,
      PRIMED_NAME,
      NUMBER_MODE2,
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE
    ]
  };
}
var pony_1 = pony;
function powershell(hljs2) {
  const TYPES2 = [
    "string",
    "char",
    "byte",
    "int",
    "long",
    "bool",
    "decimal",
    "single",
    "double",
    "DateTime",
    "xml",
    "array",
    "hashtable",
    "void"
  ];
  const VALID_VERBS = "Add|Clear|Close|Copy|Enter|Exit|Find|Format|Get|Hide|Join|Lock|Move|New|Open|Optimize|Pop|Push|Redo|Remove|Rename|Reset|Resize|Search|Select|Set|Show|Skip|Split|Step|Switch|Undo|Unlock|Watch|Backup|Checkpoint|Compare|Compress|Convert|ConvertFrom|ConvertTo|Dismount|Edit|Expand|Export|Group|Import|Initialize|Limit|Merge|Mount|Out|Publish|Restore|Save|Sync|Unpublish|Update|Approve|Assert|Build|Complete|Confirm|Deny|Deploy|Disable|Enable|Install|Invoke|Register|Request|Restart|Resume|Start|Stop|Submit|Suspend|Uninstall|Unregister|Wait|Debug|Measure|Ping|Repair|Resolve|Test|Trace|Connect|Disconnect|Read|Receive|Send|Write|Block|Grant|Protect|Revoke|Unblock|Unprotect|Use|ForEach|Sort|Tee|Where";
  const COMPARISON_OPERATORS = "-and|-as|-band|-bnot|-bor|-bxor|-casesensitive|-ccontains|-ceq|-cge|-cgt|-cle|-clike|-clt|-cmatch|-cne|-cnotcontains|-cnotlike|-cnotmatch|-contains|-creplace|-csplit|-eq|-exact|-f|-file|-ge|-gt|-icontains|-ieq|-ige|-igt|-ile|-ilike|-ilt|-imatch|-in|-ine|-inotcontains|-inotlike|-inotmatch|-ireplace|-is|-isnot|-isplit|-join|-le|-like|-lt|-match|-ne|-not|-notcontains|-notin|-notlike|-notmatch|-or|-regex|-replace|-shl|-shr|-split|-wildcard|-xor";
  const KEYWORDS2 = {
    $pattern: /-?[A-z\.\-]+\b/,
    keyword: "if else foreach return do while until elseif begin for trap data dynamicparam end break throw param continue finally in switch exit filter try process catch hidden static parameter",
    built_in: "ac asnp cat cd CFS chdir clc clear clhy cli clp cls clv cnsn compare copy cp cpi cpp curl cvpa dbp del diff dir dnsn ebp echo|0 epal epcsv epsn erase etsn exsn fc fhx fl ft fw gal gbp gc gcb gci gcm gcs gdr gerr ghy gi gin gjb gl gm gmo gp gps gpv group gsn gsnp gsv gtz gu gv gwmi h history icm iex ihy ii ipal ipcsv ipmo ipsn irm ise iwmi iwr kill lp ls man md measure mi mount move mp mv nal ndr ni nmo npssc nsn nv ogv oh popd ps pushd pwd r rbp rcjb rcsn rd rdr ren ri rjb rm rmdir rmo rni rnp rp rsn rsnp rujb rv rvpa rwmi sajb sal saps sasv sbp sc scb select set shcm si sl sleep sls sort sp spjb spps spsv start stz sujb sv swmi tee trcm type wget where wjb write"
  };
  const TITLE_NAME_RE = /\w[\w\d]*((-)[\w\d]+)*/;
  const BACKTICK_ESCAPE = {
    begin: "`[\\s\\S]",
    relevance: 0
  };
  const VAR = {
    className: "variable",
    variants: [
      {
        begin: /\$\B/
      },
      {
        className: "keyword",
        begin: /\$this/
      },
      {
        begin: /\$[\w\d][\w\d_:]*/
      }
    ]
  };
  const LITERAL = {
    className: "literal",
    begin: /\$(null|true|false)\b/
  };
  const QUOTE_STRING = {
    className: "string",
    variants: [
      {
        begin: /"/,
        end: /"/
      },
      {
        begin: /@"/,
        end: /^"@/
      }
    ],
    contains: [
      BACKTICK_ESCAPE,
      VAR,
      {
        className: "variable",
        begin: /\$[A-z]/,
        end: /[^A-z]/
      }
    ]
  };
  const APOS_STRING = {
    className: "string",
    variants: [
      {
        begin: /'/,
        end: /'/
      },
      {
        begin: /@'/,
        end: /^'@/
      }
    ]
  };
  const PS_HELPTAGS = {
    className: "doctag",
    variants: [
      {
        begin: /\.(synopsis|description|example|inputs|outputs|notes|link|component|role|functionality)/
      },
      {
        begin: /\.(parameter|forwardhelptargetname|forwardhelpcategory|remotehelprunspace|externalhelp)\s+\S+/
      }
    ]
  };
  const PS_COMMENT = hljs2.inherit(hljs2.COMMENT(null, null), {
    variants: [
      {
        begin: /#/,
        end: /$/
      },
      {
        begin: /<#/,
        end: /#>/
      }
    ],
    contains: [PS_HELPTAGS]
  });
  const CMDLETS = {
    className: "built_in",
    variants: [
      {
        begin: "(".concat(VALID_VERBS, ")+(-)[\\w\\d]+")
      }
    ]
  };
  const PS_CLASS = {
    className: "class",
    beginKeywords: "class enum",
    end: /\s*[{]/,
    excludeEnd: true,
    relevance: 0,
    contains: [hljs2.TITLE_MODE]
  };
  const PS_FUNCTION = {
    className: "function",
    begin: /function\s+/,
    end: /\s*\{|$/,
    excludeEnd: true,
    returnBegin: true,
    relevance: 0,
    contains: [
      {
        begin: "function",
        relevance: 0,
        className: "keyword"
      },
      {
        className: "title",
        begin: TITLE_NAME_RE,
        relevance: 0
      },
      {
        begin: /\(/,
        end: /\)/,
        className: "params",
        relevance: 0,
        contains: [VAR]
      }
    ]
  };
  const PS_USING = {
    begin: /using\s/,
    end: /$/,
    returnBegin: true,
    contains: [
      QUOTE_STRING,
      APOS_STRING,
      {
        className: "keyword",
        begin: /(using|assembly|command|module|namespace|type)/
      }
    ]
  };
  const PS_ARGUMENTS = {
    variants: [
      {
        className: "operator",
        begin: "(".concat(COMPARISON_OPERATORS, ")\\b")
      },
      {
        className: "literal",
        begin: /(-)[\w\d]+/,
        relevance: 0
      }
    ]
  };
  const HASH_SIGNS = {
    className: "selector-tag",
    begin: /@\B/,
    relevance: 0
  };
  const PS_METHODS = {
    className: "function",
    begin: /\[.*\]\s*[\w]+[ ]??\(/,
    end: /$/,
    returnBegin: true,
    relevance: 0,
    contains: [
      {
        className: "keyword",
        begin: "(".concat(KEYWORDS2.keyword.toString().replace(/\s/g, "|"), ")\\b"),
        endsParent: true,
        relevance: 0
      },
      hljs2.inherit(hljs2.TITLE_MODE, {
        endsParent: true
      })
    ]
  };
  const GENTLEMANS_SET = [
    PS_METHODS,
    PS_COMMENT,
    BACKTICK_ESCAPE,
    hljs2.NUMBER_MODE,
    QUOTE_STRING,
    APOS_STRING,
    CMDLETS,
    VAR,
    LITERAL,
    HASH_SIGNS
  ];
  const PS_TYPE = {
    begin: /\[/,
    end: /\]/,
    excludeBegin: true,
    excludeEnd: true,
    relevance: 0,
    contains: [].concat("self", GENTLEMANS_SET, {
      begin: "(" + TYPES2.join("|") + ")",
      className: "built_in",
      relevance: 0
    }, {
      className: "type",
      begin: /[\.\w\d]+/,
      relevance: 0
    })
  };
  PS_METHODS.contains.unshift(PS_TYPE);
  return {
    name: "PowerShell",
    aliases: [
      "ps",
      "ps1"
    ],
    case_insensitive: true,
    keywords: KEYWORDS2,
    contains: GENTLEMANS_SET.concat(PS_CLASS, PS_FUNCTION, PS_USING, PS_ARGUMENTS, PS_TYPE)
  };
}
var powershell_1 = powershell;
function processing(hljs2) {
  return {
    name: "Processing",
    keywords: {
      keyword: "BufferedReader PVector PFont PImage PGraphics HashMap boolean byte char color double float int long String Array FloatDict FloatList IntDict IntList JSONArray JSONObject Object StringDict StringList Table TableRow XML false synchronized int abstract float private char boolean static null if const for true while long throw strictfp finally protected import native final return void enum else break transient new catch instanceof byte super volatile case assert short package default double public try this switch continue throws protected public private",
      literal: "P2D P3D HALF_PI PI QUARTER_PI TAU TWO_PI",
      title: "setup draw",
      built_in: "displayHeight displayWidth mouseY mouseX mousePressed pmouseX pmouseY key keyCode pixels focused frameCount frameRate height width size createGraphics beginDraw createShape loadShape PShape arc ellipse line point quad rect triangle bezier bezierDetail bezierPoint bezierTangent curve curveDetail curvePoint curveTangent curveTightness shape shapeMode beginContour beginShape bezierVertex curveVertex endContour endShape quadraticVertex vertex ellipseMode noSmooth rectMode smooth strokeCap strokeJoin strokeWeight mouseClicked mouseDragged mouseMoved mousePressed mouseReleased mouseWheel keyPressed keyPressedkeyReleased keyTyped print println save saveFrame day hour millis minute month second year background clear colorMode fill noFill noStroke stroke alpha blue brightness color green hue lerpColor red saturation modelX modelY modelZ screenX screenY screenZ ambient emissive shininess specular add createImage beginCamera camera endCamera frustum ortho perspective printCamera printProjection cursor frameRate noCursor exit loop noLoop popStyle pushStyle redraw binary boolean byte char float hex int str unbinary unhex join match matchAll nf nfc nfp nfs split splitTokens trim append arrayCopy concat expand reverse shorten sort splice subset box sphere sphereDetail createInput createReader loadBytes loadJSONArray loadJSONObject loadStrings loadTable loadXML open parseXML saveTable selectFolder selectInput beginRaw beginRecord createOutput createWriter endRaw endRecord PrintWritersaveBytes saveJSONArray saveJSONObject saveStream saveStrings saveXML selectOutput popMatrix printMatrix pushMatrix resetMatrix rotate rotateX rotateY rotateZ scale shearX shearY translate ambientLight directionalLight lightFalloff lights lightSpecular noLights normal pointLight spotLight image imageMode loadImage noTint requestImage tint texture textureMode textureWrap blend copy filter get loadPixels set updatePixels blendMode loadShader PShaderresetShader shader createFont loadFont text textFont textAlign textLeading textMode textSize textWidth textAscent textDescent abs ceil constrain dist exp floor lerp log mag map max min norm pow round sq sqrt acos asin atan atan2 cos degrees radians sin tan noise noiseDetail noiseSeed random randomGaussian randomSeed"
    },
    contains: [
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      hljs2.APOS_STRING_MODE,
      hljs2.QUOTE_STRING_MODE,
      hljs2.C_NUMBER_MODE
    ]
  };
}
var processing_1 = processing;
function profile(hljs2) {
  return {
    name: "Python profiler",
    contains: [
      hljs2.C_NUMBER_MODE,
      {
        begin: "[a-zA-Z_][\\da-zA-Z_]+\\.[\\da-zA-Z_]{1,3}",
        end: ":",
        excludeEnd: true
      },
      {
        begin: "(ncalls|tottime|cumtime)",
        end: "$",
        keywords: "ncalls tottime|10 cumtime|10 filename",
        relevance: 10
      },
      {
        begin: "function calls",
        end: "$",
        contains: [hljs2.C_NUMBER_MODE],
        relevance: 10
      },
      hljs2.APOS_STRING_MODE,
      hljs2.QUOTE_STRING_MODE,
      {
        className: "string",
        begin: "\\(",
        end: "\\)$",
        excludeBegin: true,
        excludeEnd: true,
        relevance: 0
      }
    ]
  };
}
var profile_1 = profile;
function prolog(hljs2) {
  const ATOM = {
    begin: /[a-z][A-Za-z0-9_]*/,
    relevance: 0
  };
  const VAR = {
    className: "symbol",
    variants: [
      {
        begin: /[A-Z][a-zA-Z0-9_]*/
      },
      {
        begin: /_[A-Za-z0-9_]*/
      }
    ],
    relevance: 0
  };
  const PARENTED = {
    begin: /\(/,
    end: /\)/,
    relevance: 0
  };
  const LIST = {
    begin: /\[/,
    end: /\]/
  };
  const LINE_COMMENT = {
    className: "comment",
    begin: /%/,
    end: /$/,
    contains: [hljs2.PHRASAL_WORDS_MODE]
  };
  const BACKTICK_STRING = {
    className: "string",
    begin: /`/,
    end: /`/,
    contains: [hljs2.BACKSLASH_ESCAPE]
  };
  const CHAR_CODE = {
    className: "string",
    begin: /0'(\\'|.)/
  };
  const SPACE_CODE = {
    className: "string",
    begin: /0'\\s/
  };
  const PRED_OP = {
    begin: /:-/
  };
  const inner = [
    ATOM,
    VAR,
    PARENTED,
    PRED_OP,
    LIST,
    LINE_COMMENT,
    hljs2.C_BLOCK_COMMENT_MODE,
    hljs2.QUOTE_STRING_MODE,
    hljs2.APOS_STRING_MODE,
    BACKTICK_STRING,
    CHAR_CODE,
    SPACE_CODE,
    hljs2.C_NUMBER_MODE
  ];
  PARENTED.contains = inner;
  LIST.contains = inner;
  return {
    name: "Prolog",
    contains: inner.concat([
      {
        begin: /\.$/
      }
    ])
  };
}
var prolog_1 = prolog;
function properties(hljs2) {
  var WS0 = "[ \\t\\f]*";
  var WS1 = "[ \\t\\f]+";
  var EQUAL_DELIM = WS0 + "[:=]" + WS0;
  var WS_DELIM = WS1;
  var DELIM = "(" + EQUAL_DELIM + "|" + WS_DELIM + ")";
  var KEY_ALPHANUM = "([^\\\\\\W:= \\t\\f\\n]|\\\\.)+";
  var KEY_OTHER = "([^\\\\:= \\t\\f\\n]|\\\\.)+";
  var DELIM_AND_VALUE = {
    end: DELIM,
    relevance: 0,
    starts: {
      className: "string",
      end: /$/,
      relevance: 0,
      contains: [
        {begin: "\\\\\\\\"},
        {begin: "\\\\\\n"}
      ]
    }
  };
  return {
    name: ".properties",
    case_insensitive: true,
    illegal: /\S/,
    contains: [
      hljs2.COMMENT("^\\s*[!#]", "$"),
      {
        returnBegin: true,
        variants: [
          {begin: KEY_ALPHANUM + EQUAL_DELIM, relevance: 1},
          {begin: KEY_ALPHANUM + WS_DELIM, relevance: 0}
        ],
        contains: [
          {
            className: "attr",
            begin: KEY_ALPHANUM,
            endsParent: true,
            relevance: 0
          }
        ],
        starts: DELIM_AND_VALUE
      },
      {
        begin: KEY_OTHER + DELIM,
        returnBegin: true,
        relevance: 0,
        contains: [
          {
            className: "meta",
            begin: KEY_OTHER,
            endsParent: true,
            relevance: 0
          }
        ],
        starts: DELIM_AND_VALUE
      },
      {
        className: "attr",
        relevance: 0,
        begin: KEY_OTHER + WS0 + "$"
      }
    ]
  };
}
var properties_1 = properties;
function protobuf(hljs2) {
  return {
    name: "Protocol Buffers",
    keywords: {
      keyword: "package import option optional required repeated group oneof",
      built_in: "double float int32 int64 uint32 uint64 sint32 sint64 fixed32 fixed64 sfixed32 sfixed64 bool string bytes",
      literal: "true false"
    },
    contains: [
      hljs2.QUOTE_STRING_MODE,
      hljs2.NUMBER_MODE,
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      {
        className: "class",
        beginKeywords: "message enum service",
        end: /\{/,
        illegal: /\n/,
        contains: [
          hljs2.inherit(hljs2.TITLE_MODE, {
            starts: {endsWithParent: true, excludeEnd: true}
          })
        ]
      },
      {
        className: "function",
        beginKeywords: "rpc",
        end: /[{;]/,
        excludeEnd: true,
        keywords: "rpc returns"
      },
      {
        begin: /^\s*[A-Z_]+(?=\s*=[^\n]+;$)/
      }
    ]
  };
}
var protobuf_1 = protobuf;
function puppet(hljs2) {
  const PUPPET_KEYWORDS = {
    keyword: "and case default else elsif false if in import enherits node or true undef unless main settings $string ",
    literal: "alias audit before loglevel noop require subscribe tag owner ensure group mode name|0 changes context force incl lens load_path onlyif provider returns root show_diff type_check en_address ip_address realname command environment hour monute month monthday special target weekday creates cwd ogoutput refresh refreshonly tries try_sleep umask backup checksum content ctime force ignore links mtime purge recurse recurselimit replace selinux_ignore_defaults selrange selrole seltype seluser source souirce_permissions sourceselect validate_cmd validate_replacement allowdupe attribute_membership auth_membership forcelocal gid ia_load_module members system host_aliases ip allowed_trunk_vlans description device_url duplex encapsulation etherchannel native_vlan speed principals allow_root auth_class auth_type authenticate_user k_of_n mechanisms rule session_owner shared options device fstype enable hasrestart directory present absent link atboot blockdevice device dump pass remounts poller_tag use message withpath adminfile allow_virtual allowcdrom category configfiles flavor install_options instance package_settings platform responsefile status uninstall_options vendor unless_system_user unless_uid binary control flags hasstatus manifest pattern restart running start stop allowdupe auths expiry gid groups home iterations key_membership keys managehome membership password password_max_age password_min_age profile_membership profiles project purge_ssh_keys role_membership roles salt shell uid baseurl cost descr enabled enablegroups exclude failovermethod gpgcheck gpgkey http_caching include includepkgs keepalive metadata_expire metalink mirrorlist priority protect proxy proxy_password proxy_username repo_gpgcheck s3_enabled skip_if_unavailable sslcacert sslclientcert sslclientkey sslverify mounted",
    built_in: "architecture augeasversion blockdevices boardmanufacturer boardproductname boardserialnumber cfkey dhcp_servers domain ec2_ ec2_userdata facterversion filesystems ldom fqdn gid hardwareisa hardwaremodel hostname id|0 interfaces ipaddress ipaddress_ ipaddress6 ipaddress6_ iphostnumber is_virtual kernel kernelmajversion kernelrelease kernelversion kernelrelease kernelversion lsbdistcodename lsbdistdescription lsbdistid lsbdistrelease lsbmajdistrelease lsbminordistrelease lsbrelease macaddress macaddress_ macosx_buildversion macosx_productname macosx_productversion macosx_productverson_major macosx_productversion_minor manufacturer memoryfree memorysize netmask metmask_ network_ operatingsystem operatingsystemmajrelease operatingsystemrelease osfamily partitions path physicalprocessorcount processor processorcount productname ps puppetversion rubysitedir rubyversion selinux selinux_config_mode selinux_config_policy selinux_current_mode selinux_current_mode selinux_enforced selinux_policyversion serialnumber sp_ sshdsakey sshecdsakey sshrsakey swapencrypted swapfree swapsize timezone type uniqueid uptime uptime_days uptime_hours uptime_seconds uuid virtual vlans xendomains zfs_version zonenae zones zpool_version"
  };
  const COMMENT2 = hljs2.COMMENT("#", "$");
  const IDENT_RE2 = "([A-Za-z_]|::)(\\w|::)*";
  const TITLE = hljs2.inherit(hljs2.TITLE_MODE, {
    begin: IDENT_RE2
  });
  const VARIABLE = {
    className: "variable",
    begin: "\\$" + IDENT_RE2
  };
  const STRING = {
    className: "string",
    contains: [
      hljs2.BACKSLASH_ESCAPE,
      VARIABLE
    ],
    variants: [
      {
        begin: /'/,
        end: /'/
      },
      {
        begin: /"/,
        end: /"/
      }
    ]
  };
  return {
    name: "Puppet",
    aliases: ["pp"],
    contains: [
      COMMENT2,
      VARIABLE,
      STRING,
      {
        beginKeywords: "class",
        end: "\\{|;",
        illegal: /=/,
        contains: [
          TITLE,
          COMMENT2
        ]
      },
      {
        beginKeywords: "define",
        end: /\{/,
        contains: [
          {
            className: "section",
            begin: hljs2.IDENT_RE,
            endsParent: true
          }
        ]
      },
      {
        begin: hljs2.IDENT_RE + "\\s+\\{",
        returnBegin: true,
        end: /\S/,
        contains: [
          {
            className: "keyword",
            begin: hljs2.IDENT_RE
          },
          {
            begin: /\{/,
            end: /\}/,
            keywords: PUPPET_KEYWORDS,
            relevance: 0,
            contains: [
              STRING,
              COMMENT2,
              {
                begin: "[a-zA-Z_]+\\s*=>",
                returnBegin: true,
                end: "=>",
                contains: [
                  {
                    className: "attr",
                    begin: hljs2.IDENT_RE
                  }
                ]
              },
              {
                className: "number",
                begin: "(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",
                relevance: 0
              },
              VARIABLE
            ]
          }
        ],
        relevance: 0
      }
    ]
  };
}
var puppet_1 = puppet;
function purebasic(hljs2) {
  const STRINGS = {
    className: "string",
    begin: '(~)?"',
    end: '"',
    illegal: "\\n"
  };
  const CONSTANTS = {
    className: "symbol",
    begin: "#[a-zA-Z_]\\w*\\$?"
  };
  return {
    name: "PureBASIC",
    aliases: [
      "pb",
      "pbi"
    ],
    keywords: "Align And Array As Break CallDebugger Case CompilerCase CompilerDefault CompilerElse CompilerElseIf CompilerEndIf CompilerEndSelect CompilerError CompilerIf CompilerSelect CompilerWarning Continue Data DataSection Debug DebugLevel Declare DeclareC DeclareCDLL DeclareDLL DeclareModule Default Define Dim DisableASM DisableDebugger DisableExplicit Else ElseIf EnableASM EnableDebugger EnableExplicit End EndDataSection EndDeclareModule EndEnumeration EndIf EndImport EndInterface EndMacro EndModule EndProcedure EndSelect EndStructure EndStructureUnion EndWith Enumeration EnumerationBinary Extends FakeReturn For ForEach ForEver Global Gosub Goto If Import ImportC IncludeBinary IncludeFile IncludePath Interface List Macro MacroExpandedCount Map Module NewList NewMap Next Not Or Procedure ProcedureC ProcedureCDLL ProcedureDLL ProcedureReturn Protected Prototype PrototypeC ReDim Read Repeat Restore Return Runtime Select Shared Static Step Structure StructureUnion Swap Threaded To UndefineMacro Until Until  UnuseModule UseModule Wend While With XIncludeFile XOr",
    contains: [
      hljs2.COMMENT(";", "$", {
        relevance: 0
      }),
      {
        className: "function",
        begin: "\\b(Procedure|Declare)(C|CDLL|DLL)?\\b",
        end: "\\(",
        excludeEnd: true,
        returnBegin: true,
        contains: [
          {
            className: "keyword",
            begin: "(Procedure|Declare)(C|CDLL|DLL)?",
            excludeEnd: true
          },
          {
            className: "type",
            begin: "\\.\\w*"
          },
          hljs2.UNDERSCORE_TITLE_MODE
        ]
      },
      STRINGS,
      CONSTANTS
    ]
  };
}
var purebasic_1 = purebasic;
function source$8(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function lookahead$3(re) {
  return concat$8("(?=", re, ")");
}
function concat$8(...args) {
  const joined = args.map((x2) => source$8(x2)).join("");
  return joined;
}
function python(hljs2) {
  const RESERVED_WORDS = [
    "and",
    "as",
    "assert",
    "async",
    "await",
    "break",
    "class",
    "continue",
    "def",
    "del",
    "elif",
    "else",
    "except",
    "finally",
    "for",
    "from",
    "global",
    "if",
    "import",
    "in",
    "is",
    "lambda",
    "nonlocal|10",
    "not",
    "or",
    "pass",
    "raise",
    "return",
    "try",
    "while",
    "with",
    "yield"
  ];
  const BUILT_INS2 = [
    "__import__",
    "abs",
    "all",
    "any",
    "ascii",
    "bin",
    "bool",
    "breakpoint",
    "bytearray",
    "bytes",
    "callable",
    "chr",
    "classmethod",
    "compile",
    "complex",
    "delattr",
    "dict",
    "dir",
    "divmod",
    "enumerate",
    "eval",
    "exec",
    "filter",
    "float",
    "format",
    "frozenset",
    "getattr",
    "globals",
    "hasattr",
    "hash",
    "help",
    "hex",
    "id",
    "input",
    "int",
    "isinstance",
    "issubclass",
    "iter",
    "len",
    "list",
    "locals",
    "map",
    "max",
    "memoryview",
    "min",
    "next",
    "object",
    "oct",
    "open",
    "ord",
    "pow",
    "print",
    "property",
    "range",
    "repr",
    "reversed",
    "round",
    "set",
    "setattr",
    "slice",
    "sorted",
    "staticmethod",
    "str",
    "sum",
    "super",
    "tuple",
    "type",
    "vars",
    "zip"
  ];
  const LITERALS2 = [
    "__debug__",
    "Ellipsis",
    "False",
    "None",
    "NotImplemented",
    "True"
  ];
  const TYPES2 = [
    "Any",
    "Callable",
    "Coroutine",
    "Dict",
    "List",
    "Literal",
    "Generic",
    "Optional",
    "Sequence",
    "Set",
    "Tuple",
    "Type",
    "Union"
  ];
  const KEYWORDS2 = {
    $pattern: /[A-Za-z]\w+|__\w+__/,
    keyword: RESERVED_WORDS,
    built_in: BUILT_INS2,
    literal: LITERALS2,
    type: TYPES2
  };
  const PROMPT = {
    className: "meta",
    begin: /^(>>>|\.\.\.) /
  };
  const SUBST = {
    className: "subst",
    begin: /\{/,
    end: /\}/,
    keywords: KEYWORDS2,
    illegal: /#/
  };
  const LITERAL_BRACKET = {
    begin: /\{\{/,
    relevance: 0
  };
  const STRING = {
    className: "string",
    contains: [hljs2.BACKSLASH_ESCAPE],
    variants: [
      {
        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,
        end: /'''/,
        contains: [
          hljs2.BACKSLASH_ESCAPE,
          PROMPT
        ],
        relevance: 10
      },
      {
        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?"""/,
        end: /"""/,
        contains: [
          hljs2.BACKSLASH_ESCAPE,
          PROMPT
        ],
        relevance: 10
      },
      {
        begin: /([fF][rR]|[rR][fF]|[fF])'''/,
        end: /'''/,
        contains: [
          hljs2.BACKSLASH_ESCAPE,
          PROMPT,
          LITERAL_BRACKET,
          SUBST
        ]
      },
      {
        begin: /([fF][rR]|[rR][fF]|[fF])"""/,
        end: /"""/,
        contains: [
          hljs2.BACKSLASH_ESCAPE,
          PROMPT,
          LITERAL_BRACKET,
          SUBST
        ]
      },
      {
        begin: /([uU]|[rR])'/,
        end: /'/,
        relevance: 10
      },
      {
        begin: /([uU]|[rR])"/,
        end: /"/,
        relevance: 10
      },
      {
        begin: /([bB]|[bB][rR]|[rR][bB])'/,
        end: /'/
      },
      {
        begin: /([bB]|[bB][rR]|[rR][bB])"/,
        end: /"/
      },
      {
        begin: /([fF][rR]|[rR][fF]|[fF])'/,
        end: /'/,
        contains: [
          hljs2.BACKSLASH_ESCAPE,
          LITERAL_BRACKET,
          SUBST
        ]
      },
      {
        begin: /([fF][rR]|[rR][fF]|[fF])"/,
        end: /"/,
        contains: [
          hljs2.BACKSLASH_ESCAPE,
          LITERAL_BRACKET,
          SUBST
        ]
      },
      hljs2.APOS_STRING_MODE,
      hljs2.QUOTE_STRING_MODE
    ]
  };
  const digitpart = "[0-9](_?[0-9])*";
  const pointfloat = `(\\b(${digitpart}))?\\.(${digitpart})|\\b(${digitpart})\\.`;
  const NUMBER = {
    className: "number",
    relevance: 0,
    variants: [
      {
        begin: `(\\b(${digitpart})|(${pointfloat}))[eE][+-]?(${digitpart})[jJ]?\\b`
      },
      {
        begin: `(${pointfloat})[jJ]?`
      },
      {
        begin: "\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?\\b"
      },
      {
        begin: "\\b0[bB](_?[01])+[lL]?\\b"
      },
      {
        begin: "\\b0[oO](_?[0-7])+[lL]?\\b"
      },
      {
        begin: "\\b0[xX](_?[0-9a-fA-F])+[lL]?\\b"
      },
      {
        begin: `\\b(${digitpart})[jJ]\\b`
      }
    ]
  };
  const COMMENT_TYPE = {
    className: "comment",
    begin: lookahead$3(/# type:/),
    end: /$/,
    keywords: KEYWORDS2,
    contains: [
      {
        begin: /# type:/
      },
      {
        begin: /#/,
        end: /\b\B/,
        endsWithParent: true
      }
    ]
  };
  const PARAMS = {
    className: "params",
    variants: [
      {
        className: "",
        begin: /\(\s*\)/,
        skip: true
      },
      {
        begin: /\(/,
        end: /\)/,
        excludeBegin: true,
        excludeEnd: true,
        keywords: KEYWORDS2,
        contains: [
          "self",
          PROMPT,
          NUMBER,
          STRING,
          hljs2.HASH_COMMENT_MODE
        ]
      }
    ]
  };
  SUBST.contains = [
    STRING,
    NUMBER,
    PROMPT
  ];
  return {
    name: "Python",
    aliases: [
      "py",
      "gyp",
      "ipython"
    ],
    keywords: KEYWORDS2,
    illegal: /(<\/|->|\?)|=>/,
    contains: [
      PROMPT,
      NUMBER,
      {
        begin: /\bself\b/
      },
      {
        beginKeywords: "if",
        relevance: 0
      },
      STRING,
      COMMENT_TYPE,
      hljs2.HASH_COMMENT_MODE,
      {
        variants: [
          {
            className: "function",
            beginKeywords: "def"
          },
          {
            className: "class",
            beginKeywords: "class"
          }
        ],
        end: /:/,
        illegal: /[${=;\n,]/,
        contains: [
          hljs2.UNDERSCORE_TITLE_MODE,
          PARAMS,
          {
            begin: /->/,
            endsWithParent: true,
            keywords: KEYWORDS2
          }
        ]
      },
      {
        className: "meta",
        begin: /^[\t ]*@/,
        end: /(?=#)|$/,
        contains: [
          NUMBER,
          PARAMS,
          STRING
        ]
      }
    ]
  };
}
var python_1 = python;
function pythonRepl(hljs2) {
  return {
    aliases: ["pycon"],
    contains: [
      {
        className: "meta",
        starts: {
          end: / |$/,
          starts: {
            end: "$",
            subLanguage: "python"
          }
        },
        variants: [
          {
            begin: /^>>>(?=[ ]|$)/
          },
          {
            begin: /^\.\.\.(?=[ ]|$)/
          }
        ]
      }
    ]
  };
}
var pythonRepl_1 = pythonRepl;
function q$1(hljs2) {
  const KEYWORDS2 = {
    $pattern: /(`?)[A-Za-z0-9_]+\b/,
    keyword: "do while select delete by update from",
    literal: "0b 1b",
    built_in: "neg not null string reciprocal floor ceiling signum mod xbar xlog and or each scan over prior mmu lsq inv md5 ltime gtime count first var dev med cov cor all any rand sums prds mins maxs fills deltas ratios avgs differ prev next rank reverse iasc idesc asc desc msum mcount mavg mdev xrank mmin mmax xprev rotate distinct group where flip type key til get value attr cut set upsert raze union inter except cross sv vs sublist enlist read0 read1 hopen hclose hdel hsym hcount peach system ltrim rtrim trim lower upper ssr view tables views cols xcols keys xkey xcol xasc xdesc fkeys meta lj aj aj0 ij pj asof uj ww wj wj1 fby xgroup ungroup ej save load rsave rload show csv parse eval min max avg wavg wsum sin cos tan sum",
    type: "`float `double int `timestamp `timespan `datetime `time `boolean `symbol `char `byte `short `long `real `month `date `minute `second `guid"
  };
  return {
    name: "Q",
    aliases: [
      "k",
      "kdb"
    ],
    keywords: KEYWORDS2,
    contains: [
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.QUOTE_STRING_MODE,
      hljs2.C_NUMBER_MODE
    ]
  };
}
var q_1 = q$1;
function source$7(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function concat$7(...args) {
  const joined = args.map((x2) => source$7(x2)).join("");
  return joined;
}
function qml(hljs2) {
  const KEYWORDS2 = {
    keyword: "in of on if for while finally var new function do return void else break catch instanceof with throw case default try this switch continue typeof delete let yield const export super debugger as async await import",
    literal: "true false null undefined NaN Infinity",
    built_in: "eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Error EvalError InternalError RangeError ReferenceError StopIteration SyntaxError TypeError URIError Number Math Date String RegExp Array Float32Array Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect Behavior bool color coordinate date double enumeration font geocircle georectangle geoshape int list matrix4x4 parent point quaternion real rect size string url variant vector2d vector3d vector4d Promise"
  };
  const QML_IDENT_RE = "[a-zA-Z_][a-zA-Z0-9\\._]*";
  const PROPERTY = {
    className: "keyword",
    begin: "\\bproperty\\b",
    starts: {
      className: "string",
      end: "(:|=|;|,|//|/\\*|$)",
      returnEnd: true
    }
  };
  const SIGNAL = {
    className: "keyword",
    begin: "\\bsignal\\b",
    starts: {
      className: "string",
      end: "(\\(|:|=|;|,|//|/\\*|$)",
      returnEnd: true
    }
  };
  const ID_ID = {
    className: "attribute",
    begin: "\\bid\\s*:",
    starts: {
      className: "string",
      end: QML_IDENT_RE,
      returnEnd: false
    }
  };
  const QML_ATTRIBUTE = {
    begin: QML_IDENT_RE + "\\s*:",
    returnBegin: true,
    contains: [
      {
        className: "attribute",
        begin: QML_IDENT_RE,
        end: "\\s*:",
        excludeEnd: true,
        relevance: 0
      }
    ],
    relevance: 0
  };
  const QML_OBJECT = {
    begin: concat$7(QML_IDENT_RE, /\s*\{/),
    end: /\{/,
    returnBegin: true,
    relevance: 0,
    contains: [
      hljs2.inherit(hljs2.TITLE_MODE, {
        begin: QML_IDENT_RE
      })
    ]
  };
  return {
    name: "QML",
    aliases: ["qt"],
    case_insensitive: false,
    keywords: KEYWORDS2,
    contains: [
      {
        className: "meta",
        begin: /^\s*['"]use (strict|asm)['"]/
      },
      hljs2.APOS_STRING_MODE,
      hljs2.QUOTE_STRING_MODE,
      {
        className: "string",
        begin: "`",
        end: "`",
        contains: [
          hljs2.BACKSLASH_ESCAPE,
          {
            className: "subst",
            begin: "\\$\\{",
            end: "\\}"
          }
        ]
      },
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      {
        className: "number",
        variants: [
          {
            begin: "\\b(0[bB][01]+)"
          },
          {
            begin: "\\b(0[oO][0-7]+)"
          },
          {
            begin: hljs2.C_NUMBER_RE
          }
        ],
        relevance: 0
      },
      {
        begin: "(" + hljs2.RE_STARTERS_RE + "|\\b(case|return|throw)\\b)\\s*",
        keywords: "return throw case",
        contains: [
          hljs2.C_LINE_COMMENT_MODE,
          hljs2.C_BLOCK_COMMENT_MODE,
          hljs2.REGEXP_MODE,
          {
            begin: /</,
            end: />\s*[);\]]/,
            relevance: 0,
            subLanguage: "xml"
          }
        ],
        relevance: 0
      },
      SIGNAL,
      PROPERTY,
      {
        className: "function",
        beginKeywords: "function",
        end: /\{/,
        excludeEnd: true,
        contains: [
          hljs2.inherit(hljs2.TITLE_MODE, {
            begin: /[A-Za-z$_][0-9A-Za-z$_]*/
          }),
          {
            className: "params",
            begin: /\(/,
            end: /\)/,
            excludeBegin: true,
            excludeEnd: true,
            contains: [
              hljs2.C_LINE_COMMENT_MODE,
              hljs2.C_BLOCK_COMMENT_MODE
            ]
          }
        ],
        illegal: /\[|%/
      },
      {
        begin: "\\." + hljs2.IDENT_RE,
        relevance: 0
      },
      ID_ID,
      QML_ATTRIBUTE,
      QML_OBJECT
    ],
    illegal: /#/
  };
}
var qml_1 = qml;
function source$6(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function lookahead$2(re) {
  return concat$6("(?=", re, ")");
}
function concat$6(...args) {
  const joined = args.map((x2) => source$6(x2)).join("");
  return joined;
}
function r$3(hljs2) {
  const IDENT_RE2 = /(?:(?:[a-zA-Z]|\.[._a-zA-Z])[._a-zA-Z0-9]*)|\.(?!\d)/;
  const SIMPLE_IDENT = /[a-zA-Z][a-zA-Z_0-9]*/;
  return {
    name: "R",
    illegal: /->/,
    keywords: {
      $pattern: IDENT_RE2,
      keyword: "function if in break next repeat else for while",
      literal: "NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 NA_character_|10 NA_complex_|10",
      built_in: "LETTERS letters month.abb month.name pi T F abs acos acosh all any anyNA Arg as.call as.character as.complex as.double as.environment as.integer as.logical as.null.default as.numeric as.raw asin asinh atan atanh attr attributes baseenv browser c call ceiling class Conj cos cosh cospi cummax cummin cumprod cumsum digamma dim dimnames emptyenv exp expression floor forceAndCall gamma gc.time globalenv Im interactive invisible is.array is.atomic is.call is.character is.complex is.double is.environment is.expression is.finite is.function is.infinite is.integer is.language is.list is.logical is.matrix is.na is.name is.nan is.null is.numeric is.object is.pairlist is.raw is.recursive is.single is.symbol lazyLoadDBfetch length lgamma list log max min missing Mod names nargs nzchar oldClass on.exit pos.to.env proc.time prod quote range Re rep retracemem return round seq_along seq_len seq.int sign signif sin sinh sinpi sqrt standardGeneric substitute sum switch tan tanh tanpi tracemem trigamma trunc unclass untracemem UseMethod xtfrm"
    },
    compilerExtensions: [
      (mode, parent) => {
        if (!mode.beforeMatch)
          return;
        if (mode.starts)
          throw new Error("beforeMatch cannot be used with starts");
        const originalMode = Object.assign({}, mode);
        Object.keys(mode).forEach((key) => {
          delete mode[key];
        });
        mode.begin = concat$6(originalMode.beforeMatch, lookahead$2(originalMode.begin));
        mode.starts = {
          relevance: 0,
          contains: [
            Object.assign(originalMode, {endsParent: true})
          ]
        };
        mode.relevance = 0;
        delete originalMode.beforeMatch;
      }
    ],
    contains: [
      hljs2.COMMENT(/#'/, /$/, {
        contains: [
          {
            className: "doctag",
            begin: "@examples",
            starts: {
              contains: [
                {begin: /\n/},
                {
                  begin: /#'\s*(?=@[a-zA-Z]+)/,
                  endsParent: true
                },
                {
                  begin: /#'/,
                  end: /$/,
                  excludeBegin: true
                }
              ]
            }
          },
          {
            className: "doctag",
            begin: "@param",
            end: /$/,
            contains: [
              {
                className: "variable",
                variants: [
                  {begin: IDENT_RE2},
                  {begin: /`(?:\\.|[^`\\])+`/}
                ],
                endsParent: true
              }
            ]
          },
          {
            className: "doctag",
            begin: /@[a-zA-Z]+/
          },
          {
            className: "meta-keyword",
            begin: /\\[a-zA-Z]+/
          }
        ]
      }),
      hljs2.HASH_COMMENT_MODE,
      {
        className: "string",
        contains: [hljs2.BACKSLASH_ESCAPE],
        variants: [
          hljs2.END_SAME_AS_BEGIN({begin: /[rR]"(-*)\(/, end: /\)(-*)"/}),
          hljs2.END_SAME_AS_BEGIN({begin: /[rR]"(-*)\{/, end: /\}(-*)"/}),
          hljs2.END_SAME_AS_BEGIN({begin: /[rR]"(-*)\[/, end: /\](-*)"/}),
          hljs2.END_SAME_AS_BEGIN({begin: /[rR]'(-*)\(/, end: /\)(-*)'/}),
          hljs2.END_SAME_AS_BEGIN({begin: /[rR]'(-*)\{/, end: /\}(-*)'/}),
          hljs2.END_SAME_AS_BEGIN({begin: /[rR]'(-*)\[/, end: /\](-*)'/}),
          {begin: '"', end: '"', relevance: 0},
          {begin: "'", end: "'", relevance: 0}
        ]
      },
      {
        className: "number",
        relevance: 0,
        beforeMatch: /([^a-zA-Z0-9._])/,
        variants: [
          {
            match: /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*[pP][+-]?\d+i?/
          },
          {
            match: /0[xX][0-9a-fA-F]+([pP][+-]?\d+)?[Li]?/
          },
          {
            match: /(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?[Li]?/
          }
        ]
      },
      {
        begin: "%",
        end: "%"
      },
      {
        begin: concat$6(SIMPLE_IDENT, "\\s+<-\\s+")
      },
      {
        begin: "`",
        end: "`",
        contains: [
          {begin: /\\./}
        ]
      }
    ]
  };
}
var r_1 = r$3;
function reasonml(hljs2) {
  function orReValues(ops) {
    return ops.map(function(op) {
      return op.split("").map(function(char) {
        return "\\" + char;
      }).join("");
    }).join("|");
  }
  const RE_IDENT = "~?[a-z$_][0-9a-zA-Z$_]*";
  const RE_MODULE_IDENT = "`?[A-Z$_][0-9a-zA-Z$_]*";
  const RE_PARAM_TYPEPARAM = "'?[a-z$_][0-9a-z$_]*";
  const RE_PARAM_TYPE = "\\s*:\\s*[a-z$_][0-9a-z$_]*(\\(\\s*(" + RE_PARAM_TYPEPARAM + "\\s*(," + RE_PARAM_TYPEPARAM + "\\s*)*)?\\))?";
  const RE_PARAM = RE_IDENT + "(" + RE_PARAM_TYPE + "){0,2}";
  const RE_OPERATOR = "(" + orReValues([
    "||",
    "++",
    "**",
    "+.",
    "*",
    "/",
    "*.",
    "/.",
    "..."
  ]) + "|\\|>|&&|==|===)";
  const RE_OPERATOR_SPACED = "\\s+" + RE_OPERATOR + "\\s+";
  const KEYWORDS2 = {
    keyword: "and as asr assert begin class constraint do done downto else end exception external for fun function functor if in include inherit initializer land lazy let lor lsl lsr lxor match method mod module mutable new nonrec object of open or private rec sig struct then to try type val virtual when while with",
    built_in: "array bool bytes char exn|5 float int int32 int64 list lazy_t|5 nativeint|5 ref string unit ",
    literal: "true false"
  };
  const RE_NUMBER = "\\b(0[xX][a-fA-F0-9_]+[Lln]?|0[oO][0-7_]+[Lln]?|0[bB][01_]+[Lln]?|[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)";
  const NUMBER_MODE2 = {
    className: "number",
    relevance: 0,
    variants: [
      {
        begin: RE_NUMBER
      },
      {
        begin: "\\(-" + RE_NUMBER + "\\)"
      }
    ]
  };
  const OPERATOR_MODE = {
    className: "operator",
    relevance: 0,
    begin: RE_OPERATOR
  };
  const LIST_CONTENTS_MODES = [
    {
      className: "identifier",
      relevance: 0,
      begin: RE_IDENT
    },
    OPERATOR_MODE,
    NUMBER_MODE2
  ];
  const MODULE_ACCESS_CONTENTS = [
    hljs2.QUOTE_STRING_MODE,
    OPERATOR_MODE,
    {
      className: "module",
      begin: "\\b" + RE_MODULE_IDENT,
      returnBegin: true,
      end: ".",
      contains: [
        {
          className: "identifier",
          begin: RE_MODULE_IDENT,
          relevance: 0
        }
      ]
    }
  ];
  const PARAMS_CONTENTS = [
    {
      className: "module",
      begin: "\\b" + RE_MODULE_IDENT,
      returnBegin: true,
      end: ".",
      relevance: 0,
      contains: [
        {
          className: "identifier",
          begin: RE_MODULE_IDENT,
          relevance: 0
        }
      ]
    }
  ];
  const PARAMS_MODE = {
    begin: RE_IDENT,
    end: "(,|\\n|\\))",
    relevance: 0,
    contains: [
      OPERATOR_MODE,
      {
        className: "typing",
        begin: ":",
        end: "(,|\\n)",
        returnBegin: true,
        relevance: 0,
        contains: PARAMS_CONTENTS
      }
    ]
  };
  const FUNCTION_BLOCK_MODE = {
    className: "function",
    relevance: 0,
    keywords: KEYWORDS2,
    variants: [
      {
        begin: "\\s(\\(\\.?.*?\\)|" + RE_IDENT + ")\\s*=>",
        end: "\\s*=>",
        returnBegin: true,
        relevance: 0,
        contains: [
          {
            className: "params",
            variants: [
              {
                begin: RE_IDENT
              },
              {
                begin: RE_PARAM
              },
              {
                begin: /\(\s*\)/
              }
            ]
          }
        ]
      },
      {
        begin: "\\s\\(\\.?[^;\\|]*\\)\\s*=>",
        end: "\\s=>",
        returnBegin: true,
        relevance: 0,
        contains: [
          {
            className: "params",
            relevance: 0,
            variants: [PARAMS_MODE]
          }
        ]
      },
      {
        begin: "\\(\\.\\s" + RE_IDENT + "\\)\\s*=>"
      }
    ]
  };
  MODULE_ACCESS_CONTENTS.push(FUNCTION_BLOCK_MODE);
  const CONSTRUCTOR_MODE = {
    className: "constructor",
    begin: RE_MODULE_IDENT + "\\(",
    end: "\\)",
    illegal: "\\n",
    keywords: KEYWORDS2,
    contains: [
      hljs2.QUOTE_STRING_MODE,
      OPERATOR_MODE,
      {
        className: "params",
        begin: "\\b" + RE_IDENT
      }
    ]
  };
  const PATTERN_MATCH_BLOCK_MODE = {
    className: "pattern-match",
    begin: "\\|",
    returnBegin: true,
    keywords: KEYWORDS2,
    end: "=>",
    relevance: 0,
    contains: [
      CONSTRUCTOR_MODE,
      OPERATOR_MODE,
      {
        relevance: 0,
        className: "constructor",
        begin: RE_MODULE_IDENT
      }
    ]
  };
  const MODULE_ACCESS_MODE = {
    className: "module-access",
    keywords: KEYWORDS2,
    returnBegin: true,
    variants: [
      {
        begin: "\\b(" + RE_MODULE_IDENT + "\\.)+" + RE_IDENT
      },
      {
        begin: "\\b(" + RE_MODULE_IDENT + "\\.)+\\(",
        end: "\\)",
        returnBegin: true,
        contains: [
          FUNCTION_BLOCK_MODE,
          {
            begin: "\\(",
            end: "\\)",
            skip: true
          }
        ].concat(MODULE_ACCESS_CONTENTS)
      },
      {
        begin: "\\b(" + RE_MODULE_IDENT + "\\.)+\\{",
        end: /\}/
      }
    ],
    contains: MODULE_ACCESS_CONTENTS
  };
  PARAMS_CONTENTS.push(MODULE_ACCESS_MODE);
  return {
    name: "ReasonML",
    aliases: ["re"],
    keywords: KEYWORDS2,
    illegal: "(:-|:=|\\$\\{|\\+=)",
    contains: [
      hljs2.COMMENT("/\\*", "\\*/", {
        illegal: "^(#,\\/\\/)"
      }),
      {
        className: "character",
        begin: "'(\\\\[^']+|[^'])'",
        illegal: "\\n",
        relevance: 0
      },
      hljs2.QUOTE_STRING_MODE,
      {
        className: "literal",
        begin: "\\(\\)",
        relevance: 0
      },
      {
        className: "literal",
        begin: "\\[\\|",
        end: "\\|\\]",
        relevance: 0,
        contains: LIST_CONTENTS_MODES
      },
      {
        className: "literal",
        begin: "\\[",
        end: "\\]",
        relevance: 0,
        contains: LIST_CONTENTS_MODES
      },
      CONSTRUCTOR_MODE,
      {
        className: "operator",
        begin: RE_OPERATOR_SPACED,
        illegal: "-->",
        relevance: 0
      },
      NUMBER_MODE2,
      hljs2.C_LINE_COMMENT_MODE,
      PATTERN_MATCH_BLOCK_MODE,
      FUNCTION_BLOCK_MODE,
      {
        className: "module-def",
        begin: "\\bmodule\\s+" + RE_IDENT + "\\s+" + RE_MODULE_IDENT + "\\s+=\\s+\\{",
        end: /\}/,
        returnBegin: true,
        keywords: KEYWORDS2,
        relevance: 0,
        contains: [
          {
            className: "module",
            relevance: 0,
            begin: RE_MODULE_IDENT
          },
          {
            begin: /\{/,
            end: /\}/,
            skip: true
          }
        ].concat(MODULE_ACCESS_CONTENTS)
      },
      MODULE_ACCESS_MODE
    ]
  };
}
var reasonml_1 = reasonml;
function rib(hljs2) {
  return {
    name: "RenderMan RIB",
    keywords: "ArchiveRecord AreaLightSource Atmosphere Attribute AttributeBegin AttributeEnd Basis Begin Blobby Bound Clipping ClippingPlane Color ColorSamples ConcatTransform Cone CoordinateSystem CoordSysTransform CropWindow Curves Cylinder DepthOfField Detail DetailRange Disk Displacement Display End ErrorHandler Exposure Exterior Format FrameAspectRatio FrameBegin FrameEnd GeneralPolygon GeometricApproximation Geometry Hider Hyperboloid Identity Illuminate Imager Interior LightSource MakeCubeFaceEnvironment MakeLatLongEnvironment MakeShadow MakeTexture Matte MotionBegin MotionEnd NuPatch ObjectBegin ObjectEnd ObjectInstance Opacity Option Orientation Paraboloid Patch PatchMesh Perspective PixelFilter PixelSamples PixelVariance Points PointsGeneralPolygons PointsPolygons Polygon Procedural Projection Quantize ReadArchive RelativeDetail ReverseOrientation Rotate Scale ScreenWindow ShadingInterpolation ShadingRate Shutter Sides Skew SolidBegin SolidEnd Sphere SubdivisionMesh Surface TextureCoordinates Torus Transform TransformBegin TransformEnd TransformPoints Translate TrimCurve WorldBegin WorldEnd",
    illegal: "</",
    contains: [
      hljs2.HASH_COMMENT_MODE,
      hljs2.C_NUMBER_MODE,
      hljs2.APOS_STRING_MODE,
      hljs2.QUOTE_STRING_MODE
    ]
  };
}
var rib_1 = rib;
function roboconf(hljs2) {
  const IDENTIFIER = "[a-zA-Z-_][^\\n{]+\\{";
  const PROPERTY = {
    className: "attribute",
    begin: /[a-zA-Z-_]+/,
    end: /\s*:/,
    excludeEnd: true,
    starts: {
      end: ";",
      relevance: 0,
      contains: [
        {
          className: "variable",
          begin: /\.[a-zA-Z-_]+/
        },
        {
          className: "keyword",
          begin: /\(optional\)/
        }
      ]
    }
  };
  return {
    name: "Roboconf",
    aliases: [
      "graph",
      "instances"
    ],
    case_insensitive: true,
    keywords: "import",
    contains: [
      {
        begin: "^facet " + IDENTIFIER,
        end: /\}/,
        keywords: "facet",
        contains: [
          PROPERTY,
          hljs2.HASH_COMMENT_MODE
        ]
      },
      {
        begin: "^\\s*instance of " + IDENTIFIER,
        end: /\}/,
        keywords: "name count channels instance-data instance-state instance of",
        illegal: /\S/,
        contains: [
          "self",
          PROPERTY,
          hljs2.HASH_COMMENT_MODE
        ]
      },
      {
        begin: "^" + IDENTIFIER,
        end: /\}/,
        contains: [
          PROPERTY,
          hljs2.HASH_COMMENT_MODE
        ]
      },
      hljs2.HASH_COMMENT_MODE
    ]
  };
}
var roboconf_1 = roboconf;
function routeros(hljs2) {
  const STATEMENTS = "foreach do while for if from to step else on-error and or not in";
  const GLOBAL_COMMANDS = "global local beep delay put len typeof pick log time set find environment terminal error execute parse resolve toarray tobool toid toip toip6 tonum tostr totime";
  const COMMON_COMMANDS = "add remove enable disable set get print export edit find run debug error info warning";
  const LITERALS2 = "true false yes no nothing nil null";
  const OBJECTS = "traffic-flow traffic-generator firewall scheduler aaa accounting address-list address align area bandwidth-server bfd bgp bridge client clock community config connection console customer default dhcp-client dhcp-server discovery dns e-mail ethernet filter firmware gps graphing group hardware health hotspot identity igmp-proxy incoming instance interface ip ipsec ipv6 irq l2tp-server lcd ldp logging mac-server mac-winbox mangle manual mirror mme mpls nat nd neighbor network note ntp ospf ospf-v3 ovpn-server page peer pim ping policy pool port ppp pppoe-client pptp-server prefix profile proposal proxy queue radius resource rip ripng route routing screen script security-profiles server service service-port settings shares smb sms sniffer snmp snooper socks sstp-server system tool tracking type upgrade upnp user-manager users user vlan secret vrrp watchdog web-access wireless pptp pppoe lan wan layer7-protocol lease simple raw";
  const VAR = {
    className: "variable",
    variants: [
      {
        begin: /\$[\w\d#@][\w\d_]*/
      },
      {
        begin: /\$\{(.*?)\}/
      }
    ]
  };
  const QUOTE_STRING = {
    className: "string",
    begin: /"/,
    end: /"/,
    contains: [
      hljs2.BACKSLASH_ESCAPE,
      VAR,
      {
        className: "variable",
        begin: /\$\(/,
        end: /\)/,
        contains: [hljs2.BACKSLASH_ESCAPE]
      }
    ]
  };
  const APOS_STRING = {
    className: "string",
    begin: /'/,
    end: /'/
  };
  return {
    name: "Microtik RouterOS script",
    aliases: [
      "mikrotik"
    ],
    case_insensitive: true,
    keywords: {
      $pattern: /:?[\w-]+/,
      literal: LITERALS2,
      keyword: STATEMENTS + " :" + STATEMENTS.split(" ").join(" :") + " :" + GLOBAL_COMMANDS.split(" ").join(" :")
    },
    contains: [
      {
        variants: [
          {
            begin: /\/\*/,
            end: /\*\//
          },
          {
            begin: /\/\//,
            end: /$/
          },
          {
            begin: /<\//,
            end: />/
          }
        ],
        illegal: /./
      },
      hljs2.COMMENT("^#", "$"),
      QUOTE_STRING,
      APOS_STRING,
      VAR,
      {
        begin: /[\w-]+=([^\s{}[\]()>]+)/,
        relevance: 0,
        returnBegin: true,
        contains: [
          {
            className: "attribute",
            begin: /[^=]+/
          },
          {
            begin: /=/,
            endsWithParent: true,
            relevance: 0,
            contains: [
              QUOTE_STRING,
              APOS_STRING,
              VAR,
              {
                className: "literal",
                begin: "\\b(" + LITERALS2.split(" ").join("|") + ")\\b"
              },
              {
                begin: /("[^"]*"|[^\s{}[\]]+)/
              }
            ]
          }
        ]
      },
      {
        className: "number",
        begin: /\*[0-9a-fA-F]+/
      },
      {
        begin: "\\b(" + COMMON_COMMANDS.split(" ").join("|") + ")([\\s[(\\]|])",
        returnBegin: true,
        contains: [
          {
            className: "builtin-name",
            begin: /\w+/
          }
        ]
      },
      {
        className: "built_in",
        variants: [
          {
            begin: "(\\.\\./|/|\\s)((" + OBJECTS.split(" ").join("|") + ");?\\s)+"
          },
          {
            begin: /\.\./,
            relevance: 0
          }
        ]
      }
    ]
  };
}
var routeros_1 = routeros;
function rsl(hljs2) {
  return {
    name: "RenderMan RSL",
    keywords: {
      keyword: "float color point normal vector matrix while for if do return else break extern continue",
      built_in: "abs acos ambient area asin atan atmosphere attribute calculatenormal ceil cellnoise clamp comp concat cos degrees depth Deriv diffuse distance Du Dv environment exp faceforward filterstep floor format fresnel incident length lightsource log match max min mod noise normalize ntransform opposite option phong pnoise pow printf ptlined radians random reflect refract renderinfo round setcomp setxcomp setycomp setzcomp shadow sign sin smoothstep specular specularbrdf spline sqrt step tan texture textureinfo trace transform vtransform xcomp ycomp zcomp"
    },
    illegal: "</",
    contains: [
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      hljs2.QUOTE_STRING_MODE,
      hljs2.APOS_STRING_MODE,
      hljs2.C_NUMBER_MODE,
      {
        className: "meta",
        begin: "#",
        end: "$"
      },
      {
        className: "class",
        beginKeywords: "surface displacement light volume imager",
        end: "\\("
      },
      {
        beginKeywords: "illuminate illuminance gather",
        end: "\\("
      }
    ]
  };
}
var rsl_1 = rsl;
function ruleslanguage(hljs2) {
  return {
    name: "Oracle Rules Language",
    keywords: {
      keyword: "BILL_PERIOD BILL_START BILL_STOP RS_EFFECTIVE_START RS_EFFECTIVE_STOP RS_JURIS_CODE RS_OPCO_CODE INTDADDATTRIBUTE|5 INTDADDVMSG|5 INTDBLOCKOP|5 INTDBLOCKOPNA|5 INTDCLOSE|5 INTDCOUNT|5 INTDCOUNTSTATUSCODE|5 INTDCREATEMASK|5 INTDCREATEDAYMASK|5 INTDCREATEFACTORMASK|5 INTDCREATEHANDLE|5 INTDCREATEOVERRIDEDAYMASK|5 INTDCREATEOVERRIDEMASK|5 INTDCREATESTATUSCODEMASK|5 INTDCREATETOUPERIOD|5 INTDDELETE|5 INTDDIPTEST|5 INTDEXPORT|5 INTDGETERRORCODE|5 INTDGETERRORMESSAGE|5 INTDISEQUAL|5 INTDJOIN|5 INTDLOAD|5 INTDLOADACTUALCUT|5 INTDLOADDATES|5 INTDLOADHIST|5 INTDLOADLIST|5 INTDLOADLISTDATES|5 INTDLOADLISTENERGY|5 INTDLOADLISTHIST|5 INTDLOADRELATEDCHANNEL|5 INTDLOADSP|5 INTDLOADSTAGING|5 INTDLOADUOM|5 INTDLOADUOMDATES|5 INTDLOADUOMHIST|5 INTDLOADVERSION|5 INTDOPEN|5 INTDREADFIRST|5 INTDREADNEXT|5 INTDRECCOUNT|5 INTDRELEASE|5 INTDREPLACE|5 INTDROLLAVG|5 INTDROLLPEAK|5 INTDSCALAROP|5 INTDSCALE|5 INTDSETATTRIBUTE|5 INTDSETDSTPARTICIPANT|5 INTDSETSTRING|5 INTDSETVALUE|5 INTDSETVALUESTATUS|5 INTDSHIFTSTARTTIME|5 INTDSMOOTH|5 INTDSORT|5 INTDSPIKETEST|5 INTDSUBSET|5 INTDTOU|5 INTDTOURELEASE|5 INTDTOUVALUE|5 INTDUPDATESTATS|5 INTDVALUE|5 STDEV INTDDELETEEX|5 INTDLOADEXACTUAL|5 INTDLOADEXCUT|5 INTDLOADEXDATES|5 INTDLOADEX|5 INTDLOADEXRELATEDCHANNEL|5 INTDSAVEEX|5 MVLOAD|5 MVLOADACCT|5 MVLOADACCTDATES|5 MVLOADACCTHIST|5 MVLOADDATES|5 MVLOADHIST|5 MVLOADLIST|5 MVLOADLISTDATES|5 MVLOADLISTHIST|5 IF FOR NEXT DONE SELECT END CALL ABORT CLEAR CHANNEL FACTOR LIST NUMBER OVERRIDE SET WEEK DISTRIBUTIONNODE ELSE WHEN THEN OTHERWISE IENUM CSV INCLUDE LEAVE RIDER SAVE DELETE NOVALUE SECTION WARN SAVE_UPDATE DETERMINANT LABEL REPORT REVENUE EACH IN FROM TOTAL CHARGE BLOCK AND OR CSV_FILE RATE_CODE AUXILIARY_DEMAND UIDACCOUNT RS BILL_PERIOD_SELECT HOURS_PER_MONTH INTD_ERROR_STOP SEASON_SCHEDULE_NAME ACCOUNTFACTOR ARRAYUPPERBOUND CALLSTOREDPROC GETADOCONNECTION GETCONNECT GETDATASOURCE GETQUALIFIER GETUSERID HASVALUE LISTCOUNT LISTOP LISTUPDATE LISTVALUE PRORATEFACTOR RSPRORATE SETBINPATH SETDBMONITOR WQ_OPEN BILLINGHOURS DATE DATEFROMFLOAT DATETIMEFROMSTRING DATETIMETOSTRING DATETOFLOAT DAY DAYDIFF DAYNAME DBDATETIME HOUR MINUTE MONTH MONTHDIFF MONTHHOURS MONTHNAME ROUNDDATE SAMEWEEKDAYLASTYEAR SECOND WEEKDAY WEEKDIFF YEAR YEARDAY YEARSTR COMPSUM HISTCOUNT HISTMAX HISTMIN HISTMINNZ HISTVALUE MAXNRANGE MAXRANGE MINRANGE COMPIKVA COMPKVA COMPKVARFROMKQKW COMPLF IDATTR FLAG LF2KW LF2KWH MAXKW POWERFACTOR READING2USAGE AVGSEASON MAXSEASON MONTHLYMERGE SEASONVALUE SUMSEASON ACCTREADDATES ACCTTABLELOAD CONFIGADD CONFIGGET CREATEOBJECT CREATEREPORT EMAILCLIENT EXPBLKMDMUSAGE EXPMDMUSAGE EXPORT_USAGE FACTORINEFFECT GETUSERSPECIFIEDSTOP INEFFECT ISHOLIDAY RUNRATE SAVE_PROFILE SETREPORTTITLE USEREXIT WATFORRUNRATE TO TABLE ACOS ASIN ATAN ATAN2 BITAND CEIL COS COSECANT COSH COTANGENT DIVQUOT DIVREM EXP FABS FLOOR FMOD FREPM FREXPN LOG LOG10 MAX MAXN MIN MINNZ MODF POW ROUND ROUND2VALUE ROUNDINT SECANT SIN SINH SQROOT TAN TANH FLOAT2STRING FLOAT2STRINGNC INSTR LEFT LEN LTRIM MID RIGHT RTRIM STRING STRINGNC TOLOWER TOUPPER TRIM NUMDAYS READ_DATE STAGING",
      built_in: "IDENTIFIER OPTIONS XML_ELEMENT XML_OP XML_ELEMENT_OF DOMDOCCREATE DOMDOCLOADFILE DOMDOCLOADXML DOMDOCSAVEFILE DOMDOCGETROOT DOMDOCADDPI DOMNODEGETNAME DOMNODEGETTYPE DOMNODEGETVALUE DOMNODEGETCHILDCT DOMNODEGETFIRSTCHILD DOMNODEGETSIBLING DOMNODECREATECHILDELEMENT DOMNODESETATTRIBUTE DOMNODEGETCHILDELEMENTCT DOMNODEGETFIRSTCHILDELEMENT DOMNODEGETSIBLINGELEMENT DOMNODEGETATTRIBUTECT DOMNODEGETATTRIBUTEI DOMNODEGETATTRIBUTEBYNAME DOMNODEGETBYNAME"
    },
    contains: [
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      hljs2.APOS_STRING_MODE,
      hljs2.QUOTE_STRING_MODE,
      hljs2.C_NUMBER_MODE,
      {
        className: "literal",
        variants: [
          {
            begin: "#\\s+",
            relevance: 0
          },
          {
            begin: "#[a-zA-Z .]+"
          }
        ]
      }
    ]
  };
}
var ruleslanguage_1 = ruleslanguage;
function rust(hljs2) {
  const NUM_SUFFIX = "([ui](8|16|32|64|128|size)|f(32|64))?";
  const KEYWORDS2 = "abstract as async await become box break const continue crate do dyn else enum extern false final fn for if impl in let loop macro match mod move mut override priv pub ref return self Self static struct super trait true try type typeof unsafe unsized use virtual where while yield";
  const BUILTINS = "drop i8 i16 i32 i64 i128 isize u8 u16 u32 u64 u128 usize f32 f64 str char bool Box Option Result String Vec Copy Send Sized Sync Drop Fn FnMut FnOnce ToOwned Clone Debug PartialEq PartialOrd Eq Ord AsRef AsMut Into From Default Iterator Extend IntoIterator DoubleEndedIterator ExactSizeIterator SliceConcatExt ToString assert! assert_eq! bitflags! bytes! cfg! col! concat! concat_idents! debug_assert! debug_assert_eq! env! panic! file! format! format_args! include_bin! include_str! line! local_data_key! module_path! option_env! print! println! select! stringify! try! unimplemented! unreachable! vec! write! writeln! macro_rules! assert_ne! debug_assert_ne!";
  return {
    name: "Rust",
    aliases: ["rs"],
    keywords: {
      $pattern: hljs2.IDENT_RE + "!?",
      keyword: KEYWORDS2,
      literal: "true false Some None Ok Err",
      built_in: BUILTINS
    },
    illegal: "</",
    contains: [
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.COMMENT("/\\*", "\\*/", {
        contains: ["self"]
      }),
      hljs2.inherit(hljs2.QUOTE_STRING_MODE, {
        begin: /b?"/,
        illegal: null
      }),
      {
        className: "string",
        variants: [
          {
            begin: /r(#*)"(.|\n)*?"\1(?!#)/
          },
          {
            begin: /b?'\\?(x\w{2}|u\w{4}|U\w{8}|.)'/
          }
        ]
      },
      {
        className: "symbol",
        begin: /'[a-zA-Z_][a-zA-Z0-9_]*/
      },
      {
        className: "number",
        variants: [
          {
            begin: "\\b0b([01_]+)" + NUM_SUFFIX
          },
          {
            begin: "\\b0o([0-7_]+)" + NUM_SUFFIX
          },
          {
            begin: "\\b0x([A-Fa-f0-9_]+)" + NUM_SUFFIX
          },
          {
            begin: "\\b(\\d[\\d_]*(\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)" + NUM_SUFFIX
          }
        ],
        relevance: 0
      },
      {
        className: "function",
        beginKeywords: "fn",
        end: "(\\(|<)",
        excludeEnd: true,
        contains: [hljs2.UNDERSCORE_TITLE_MODE]
      },
      {
        className: "meta",
        begin: "#!?\\[",
        end: "\\]",
        contains: [
          {
            className: "meta-string",
            begin: /"/,
            end: /"/
          }
        ]
      },
      {
        className: "class",
        beginKeywords: "type",
        end: ";",
        contains: [
          hljs2.inherit(hljs2.UNDERSCORE_TITLE_MODE, {
            endsParent: true
          })
        ],
        illegal: "\\S"
      },
      {
        className: "class",
        beginKeywords: "trait enum struct union",
        end: /\{/,
        contains: [
          hljs2.inherit(hljs2.UNDERSCORE_TITLE_MODE, {
            endsParent: true
          })
        ],
        illegal: "[\\w\\d]"
      },
      {
        begin: hljs2.IDENT_RE + "::",
        keywords: {
          built_in: BUILTINS
        }
      },
      {
        begin: "->"
      }
    ]
  };
}
var rust_1 = rust;
function sas(hljs2) {
  const SAS_KEYWORDS = "do if then else end until while abort array attrib by call cards cards4 catname continue datalines datalines4 delete delim delimiter display dm drop endsas error file filename footnote format goto in infile informat input keep label leave length libname link list lostcard merge missing modify options output out page put redirect remove rename replace retain return select set skip startsas stop title update waitsas where window x systask add and alter as cascade check create delete describe distinct drop foreign from group having index insert into in key like message modify msgtype not null on or order primary references reset restrict select set table unique update validate view where";
  const SAS_FUN = "abs|addr|airy|arcos|arsin|atan|attrc|attrn|band|betainv|blshift|bnot|bor|brshift|bxor|byte|cdf|ceil|cexist|cinv|close|cnonct|collate|compbl|compound|compress|cos|cosh|css|curobs|cv|daccdb|daccdbsl|daccsl|daccsyd|dacctab|dairy|date|datejul|datepart|datetime|day|dclose|depdb|depdbsl|depdbsl|depsl|depsl|depsyd|depsyd|deptab|deptab|dequote|dhms|dif|digamma|dim|dinfo|dnum|dopen|doptname|doptnum|dread|dropnote|dsname|erf|erfc|exist|exp|fappend|fclose|fcol|fdelete|fetch|fetchobs|fexist|fget|fileexist|filename|fileref|finfo|finv|fipname|fipnamel|fipstate|floor|fnonct|fnote|fopen|foptname|foptnum|fpoint|fpos|fput|fread|frewind|frlen|fsep|fuzz|fwrite|gaminv|gamma|getoption|getvarc|getvarn|hbound|hms|hosthelp|hour|ibessel|index|indexc|indexw|input|inputc|inputn|int|intck|intnx|intrr|irr|jbessel|juldate|kurtosis|lag|lbound|left|length|lgamma|libname|libref|log|log10|log2|logpdf|logpmf|logsdf|lowcase|max|mdy|mean|min|minute|mod|month|mopen|mort|n|netpv|nmiss|normal|note|npv|open|ordinal|pathname|pdf|peek|peekc|pmf|point|poisson|poke|probbeta|probbnml|probchi|probf|probgam|probhypr|probit|probnegb|probnorm|probt|put|putc|putn|qtr|quote|ranbin|rancau|ranexp|rangam|range|rank|rannor|ranpoi|rantbl|rantri|ranuni|repeat|resolve|reverse|rewind|right|round|saving|scan|sdf|second|sign|sin|sinh|skewness|soundex|spedis|sqrt|std|stderr|stfips|stname|stnamel|substr|sum|symget|sysget|sysmsg|sysprod|sysrc|system|tan|tanh|time|timepart|tinv|tnonct|today|translate|tranwrd|trigamma|trim|trimn|trunc|uniform|upcase|uss|var|varfmt|varinfmt|varlabel|varlen|varname|varnum|varray|varrayx|vartype|verify|vformat|vformatd|vformatdx|vformatn|vformatnx|vformatw|vformatwx|vformatx|vinarray|vinarrayx|vinformat|vinformatd|vinformatdx|vinformatn|vinformatnx|vinformatw|vinformatwx|vinformatx|vlabel|vlabelx|vlength|vlengthx|vname|vnamex|vtype|vtypex|weekday|year|yyq|zipfips|zipname|zipnamel|zipstate";
  const SAS_MACRO_FUN = "bquote|nrbquote|cmpres|qcmpres|compstor|datatyp|display|do|else|end|eval|global|goto|if|index|input|keydef|label|left|length|let|local|lowcase|macro|mend|nrbquote|nrquote|nrstr|put|qcmpres|qleft|qlowcase|qscan|qsubstr|qsysfunc|qtrim|quote|qupcase|scan|str|substr|superq|syscall|sysevalf|sysexec|sysfunc|sysget|syslput|sysprod|sysrc|sysrput|then|to|trim|unquote|until|upcase|verify|while|window";
  return {
    name: "SAS",
    case_insensitive: true,
    keywords: {
      literal: "null missing _all_ _automatic_ _character_ _infile_ _n_ _name_ _null_ _numeric_ _user_ _webout_",
      meta: SAS_KEYWORDS
    },
    contains: [
      {
        className: "keyword",
        begin: /^\s*(proc [\w\d_]+|data|run|quit)[\s;]/
      },
      {
        className: "variable",
        begin: /&[a-zA-Z_&][a-zA-Z0-9_]*\.?/
      },
      {
        className: "emphasis",
        begin: /^\s*datalines|cards.*;/,
        end: /^\s*;\s*$/
      },
      {
        className: "built_in",
        begin: "%(" + SAS_MACRO_FUN + ")"
      },
      {
        className: "name",
        begin: /%[a-zA-Z_][a-zA-Z_0-9]*/
      },
      {
        className: "meta",
        begin: "[^%](" + SAS_FUN + ")[(]"
      },
      {
        className: "string",
        variants: [
          hljs2.APOS_STRING_MODE,
          hljs2.QUOTE_STRING_MODE
        ]
      },
      hljs2.COMMENT("\\*", ";"),
      hljs2.C_BLOCK_COMMENT_MODE
    ]
  };
}
var sas_1 = sas;
function scala(hljs2) {
  const ANNOTATION = {
    className: "meta",
    begin: "@[A-Za-z]+"
  };
  const SUBST = {
    className: "subst",
    variants: [
      {
        begin: "\\$[A-Za-z0-9_]+"
      },
      {
        begin: /\$\{/,
        end: /\}/
      }
    ]
  };
  const STRING = {
    className: "string",
    variants: [
      {
        begin: '"""',
        end: '"""'
      },
      {
        begin: '"',
        end: '"',
        illegal: "\\n",
        contains: [hljs2.BACKSLASH_ESCAPE]
      },
      {
        begin: '[a-z]+"',
        end: '"',
        illegal: "\\n",
        contains: [
          hljs2.BACKSLASH_ESCAPE,
          SUBST
        ]
      },
      {
        className: "string",
        begin: '[a-z]+"""',
        end: '"""',
        contains: [SUBST],
        relevance: 10
      }
    ]
  };
  const SYMBOL = {
    className: "symbol",
    begin: "'\\w[\\w\\d_]*(?!')"
  };
  const TYPE = {
    className: "type",
    begin: "\\b[A-Z][A-Za-z0-9_]*",
    relevance: 0
  };
  const NAME = {
    className: "title",
    begin: /[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/,
    relevance: 0
  };
  const CLASS = {
    className: "class",
    beginKeywords: "class object trait type",
    end: /[:={\[\n;]/,
    excludeEnd: true,
    contains: [
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      {
        beginKeywords: "extends with",
        relevance: 10
      },
      {
        begin: /\[/,
        end: /\]/,
        excludeBegin: true,
        excludeEnd: true,
        relevance: 0,
        contains: [TYPE]
      },
      {
        className: "params",
        begin: /\(/,
        end: /\)/,
        excludeBegin: true,
        excludeEnd: true,
        relevance: 0,
        contains: [TYPE]
      },
      NAME
    ]
  };
  const METHOD = {
    className: "function",
    beginKeywords: "def",
    end: /[:={\[(\n;]/,
    excludeEnd: true,
    contains: [NAME]
  };
  return {
    name: "Scala",
    keywords: {
      literal: "true false null",
      keyword: "type yield lazy override def with val var sealed abstract private trait object if forSome for while throw finally protected extends import final return else break new catch super class case package default try this match continue throws implicit"
    },
    contains: [
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      STRING,
      SYMBOL,
      TYPE,
      METHOD,
      CLASS,
      hljs2.C_NUMBER_MODE,
      ANNOTATION
    ]
  };
}
var scala_1 = scala;
function scheme(hljs2) {
  const SCHEME_IDENT_RE = "[^\\(\\)\\[\\]\\{\\}\",'`;#|\\\\\\s]+";
  const SCHEME_SIMPLE_NUMBER_RE = "(-|\\+)?\\d+([./]\\d+)?";
  const SCHEME_COMPLEX_NUMBER_RE = SCHEME_SIMPLE_NUMBER_RE + "[+\\-]" + SCHEME_SIMPLE_NUMBER_RE + "i";
  const KEYWORDS2 = {
    $pattern: SCHEME_IDENT_RE,
    "builtin-name": "case-lambda call/cc class define-class exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules ' * + , ,@ - ... / ; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?"
  };
  const LITERAL = {
    className: "literal",
    begin: "(#t|#f|#\\\\" + SCHEME_IDENT_RE + "|#\\\\.)"
  };
  const NUMBER = {
    className: "number",
    variants: [
      {
        begin: SCHEME_SIMPLE_NUMBER_RE,
        relevance: 0
      },
      {
        begin: SCHEME_COMPLEX_NUMBER_RE,
        relevance: 0
      },
      {
        begin: "#b[0-1]+(/[0-1]+)?"
      },
      {
        begin: "#o[0-7]+(/[0-7]+)?"
      },
      {
        begin: "#x[0-9a-f]+(/[0-9a-f]+)?"
      }
    ]
  };
  const STRING = hljs2.QUOTE_STRING_MODE;
  const COMMENT_MODES = [
    hljs2.COMMENT(";", "$", {
      relevance: 0
    }),
    hljs2.COMMENT("#\\|", "\\|#")
  ];
  const IDENT = {
    begin: SCHEME_IDENT_RE,
    relevance: 0
  };
  const QUOTED_IDENT = {
    className: "symbol",
    begin: "'" + SCHEME_IDENT_RE
  };
  const BODY = {
    endsWithParent: true,
    relevance: 0
  };
  const QUOTED_LIST = {
    variants: [
      {
        begin: /'/
      },
      {
        begin: "`"
      }
    ],
    contains: [
      {
        begin: "\\(",
        end: "\\)",
        contains: [
          "self",
          LITERAL,
          STRING,
          NUMBER,
          IDENT,
          QUOTED_IDENT
        ]
      }
    ]
  };
  const NAME = {
    className: "name",
    relevance: 0,
    begin: SCHEME_IDENT_RE,
    keywords: KEYWORDS2
  };
  const LAMBDA = {
    begin: /lambda/,
    endsWithParent: true,
    returnBegin: true,
    contains: [
      NAME,
      {
        endsParent: true,
        variants: [
          {
            begin: /\(/,
            end: /\)/
          },
          {
            begin: /\[/,
            end: /\]/
          }
        ],
        contains: [IDENT]
      }
    ]
  };
  const LIST = {
    variants: [
      {
        begin: "\\(",
        end: "\\)"
      },
      {
        begin: "\\[",
        end: "\\]"
      }
    ],
    contains: [
      LAMBDA,
      NAME,
      BODY
    ]
  };
  BODY.contains = [
    LITERAL,
    NUMBER,
    STRING,
    IDENT,
    QUOTED_IDENT,
    QUOTED_LIST,
    LIST
  ].concat(COMMENT_MODES);
  return {
    name: "Scheme",
    illegal: /\S/,
    contains: [
      hljs2.SHEBANG(),
      NUMBER,
      STRING,
      QUOTED_IDENT,
      QUOTED_LIST,
      LIST
    ].concat(COMMENT_MODES)
  };
}
var scheme_1 = scheme;
function scilab(hljs2) {
  const COMMON_CONTAINS = [
    hljs2.C_NUMBER_MODE,
    {
      className: "string",
      begin: `'|"`,
      end: `'|"`,
      contains: [
        hljs2.BACKSLASH_ESCAPE,
        {
          begin: "''"
        }
      ]
    }
  ];
  return {
    name: "Scilab",
    aliases: ["sci"],
    keywords: {
      $pattern: /%?\w+/,
      keyword: "abort break case clear catch continue do elseif else endfunction end for function global if pause return resume select try then while",
      literal: "%f %F %t %T %pi %eps %inf %nan %e %i %z %s",
      built_in: "abs and acos asin atan ceil cd chdir clearglobal cosh cos cumprod deff disp error exec execstr exists exp eye gettext floor fprintf fread fsolve imag isdef isempty isinfisnan isvector lasterror length load linspace list listfiles log10 log2 log max min msprintf mclose mopen ones or pathconvert poly printf prod pwd rand real round sinh sin size gsort sprintf sqrt strcat strcmps tring sum system tanh tan type typename warning zeros matrix"
    },
    illegal: '("|#|/\\*|\\s+/\\w+)',
    contains: [
      {
        className: "function",
        beginKeywords: "function",
        end: "$",
        contains: [
          hljs2.UNDERSCORE_TITLE_MODE,
          {
            className: "params",
            begin: "\\(",
            end: "\\)"
          }
        ]
      },
      {
        begin: "[a-zA-Z_][a-zA-Z_0-9]*[\\.']+",
        relevance: 0
      },
      {
        begin: "\\[",
        end: "\\][\\.']*",
        relevance: 0,
        contains: COMMON_CONTAINS
      },
      hljs2.COMMENT("//", "$")
    ].concat(COMMON_CONTAINS)
  };
}
var scilab_1 = scilab;
const MODES$1 = (hljs2) => {
  return {
    IMPORTANT: {
      className: "meta",
      begin: "!important"
    },
    HEXCOLOR: {
      className: "number",
      begin: "#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})"
    },
    ATTRIBUTE_SELECTOR_MODE: {
      className: "selector-attr",
      begin: /\[/,
      end: /\]/,
      illegal: "$",
      contains: [
        hljs2.APOS_STRING_MODE,
        hljs2.QUOTE_STRING_MODE
      ]
    }
  };
};
const TAGS$1 = [
  "a",
  "abbr",
  "address",
  "article",
  "aside",
  "audio",
  "b",
  "blockquote",
  "body",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "dd",
  "del",
  "details",
  "dfn",
  "div",
  "dl",
  "dt",
  "em",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "header",
  "hgroup",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "label",
  "legend",
  "li",
  "main",
  "mark",
  "menu",
  "nav",
  "object",
  "ol",
  "p",
  "q",
  "quote",
  "samp",
  "section",
  "span",
  "strong",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "tr",
  "ul",
  "var",
  "video"
];
const MEDIA_FEATURES$1 = [
  "any-hover",
  "any-pointer",
  "aspect-ratio",
  "color",
  "color-gamut",
  "color-index",
  "device-aspect-ratio",
  "device-height",
  "device-width",
  "display-mode",
  "forced-colors",
  "grid",
  "height",
  "hover",
  "inverted-colors",
  "monochrome",
  "orientation",
  "overflow-block",
  "overflow-inline",
  "pointer",
  "prefers-color-scheme",
  "prefers-contrast",
  "prefers-reduced-motion",
  "prefers-reduced-transparency",
  "resolution",
  "scan",
  "scripting",
  "update",
  "width",
  "min-width",
  "max-width",
  "min-height",
  "max-height"
];
const PSEUDO_CLASSES$1 = [
  "active",
  "any-link",
  "blank",
  "checked",
  "current",
  "default",
  "defined",
  "dir",
  "disabled",
  "drop",
  "empty",
  "enabled",
  "first",
  "first-child",
  "first-of-type",
  "fullscreen",
  "future",
  "focus",
  "focus-visible",
  "focus-within",
  "has",
  "host",
  "host-context",
  "hover",
  "indeterminate",
  "in-range",
  "invalid",
  "is",
  "lang",
  "last-child",
  "last-of-type",
  "left",
  "link",
  "local-link",
  "not",
  "nth-child",
  "nth-col",
  "nth-last-child",
  "nth-last-col",
  "nth-last-of-type",
  "nth-of-type",
  "only-child",
  "only-of-type",
  "optional",
  "out-of-range",
  "past",
  "placeholder-shown",
  "read-only",
  "read-write",
  "required",
  "right",
  "root",
  "scope",
  "target",
  "target-within",
  "user-invalid",
  "valid",
  "visited",
  "where"
];
const PSEUDO_ELEMENTS$1 = [
  "after",
  "backdrop",
  "before",
  "cue",
  "cue-region",
  "first-letter",
  "first-line",
  "grammar-error",
  "marker",
  "part",
  "placeholder",
  "selection",
  "slotted",
  "spelling-error"
];
const ATTRIBUTES$1 = [
  "align-content",
  "align-items",
  "align-self",
  "animation",
  "animation-delay",
  "animation-direction",
  "animation-duration",
  "animation-fill-mode",
  "animation-iteration-count",
  "animation-name",
  "animation-play-state",
  "animation-timing-function",
  "auto",
  "backface-visibility",
  "background",
  "background-attachment",
  "background-clip",
  "background-color",
  "background-image",
  "background-origin",
  "background-position",
  "background-repeat",
  "background-size",
  "border",
  "border-bottom",
  "border-bottom-color",
  "border-bottom-left-radius",
  "border-bottom-right-radius",
  "border-bottom-style",
  "border-bottom-width",
  "border-collapse",
  "border-color",
  "border-image",
  "border-image-outset",
  "border-image-repeat",
  "border-image-slice",
  "border-image-source",
  "border-image-width",
  "border-left",
  "border-left-color",
  "border-left-style",
  "border-left-width",
  "border-radius",
  "border-right",
  "border-right-color",
  "border-right-style",
  "border-right-width",
  "border-spacing",
  "border-style",
  "border-top",
  "border-top-color",
  "border-top-left-radius",
  "border-top-right-radius",
  "border-top-style",
  "border-top-width",
  "border-width",
  "bottom",
  "box-decoration-break",
  "box-shadow",
  "box-sizing",
  "break-after",
  "break-before",
  "break-inside",
  "caption-side",
  "clear",
  "clip",
  "clip-path",
  "color",
  "column-count",
  "column-fill",
  "column-gap",
  "column-rule",
  "column-rule-color",
  "column-rule-style",
  "column-rule-width",
  "column-span",
  "column-width",
  "columns",
  "content",
  "counter-increment",
  "counter-reset",
  "cursor",
  "direction",
  "display",
  "empty-cells",
  "filter",
  "flex",
  "flex-basis",
  "flex-direction",
  "flex-flow",
  "flex-grow",
  "flex-shrink",
  "flex-wrap",
  "float",
  "font",
  "font-display",
  "font-family",
  "font-feature-settings",
  "font-kerning",
  "font-language-override",
  "font-size",
  "font-size-adjust",
  "font-smoothing",
  "font-stretch",
  "font-style",
  "font-variant",
  "font-variant-ligatures",
  "font-variation-settings",
  "font-weight",
  "height",
  "hyphens",
  "icon",
  "image-orientation",
  "image-rendering",
  "image-resolution",
  "ime-mode",
  "inherit",
  "initial",
  "justify-content",
  "left",
  "letter-spacing",
  "line-height",
  "list-style",
  "list-style-image",
  "list-style-position",
  "list-style-type",
  "margin",
  "margin-bottom",
  "margin-left",
  "margin-right",
  "margin-top",
  "marks",
  "mask",
  "max-height",
  "max-width",
  "min-height",
  "min-width",
  "nav-down",
  "nav-index",
  "nav-left",
  "nav-right",
  "nav-up",
  "none",
  "normal",
  "object-fit",
  "object-position",
  "opacity",
  "order",
  "orphans",
  "outline",
  "outline-color",
  "outline-offset",
  "outline-style",
  "outline-width",
  "overflow",
  "overflow-wrap",
  "overflow-x",
  "overflow-y",
  "padding",
  "padding-bottom",
  "padding-left",
  "padding-right",
  "padding-top",
  "page-break-after",
  "page-break-before",
  "page-break-inside",
  "perspective",
  "perspective-origin",
  "pointer-events",
  "position",
  "quotes",
  "resize",
  "right",
  "src",
  "tab-size",
  "table-layout",
  "text-align",
  "text-align-last",
  "text-decoration",
  "text-decoration-color",
  "text-decoration-line",
  "text-decoration-style",
  "text-indent",
  "text-overflow",
  "text-rendering",
  "text-shadow",
  "text-transform",
  "text-underline-position",
  "top",
  "transform",
  "transform-origin",
  "transform-style",
  "transition",
  "transition-delay",
  "transition-duration",
  "transition-property",
  "transition-timing-function",
  "unicode-bidi",
  "vertical-align",
  "visibility",
  "white-space",
  "widows",
  "width",
  "word-break",
  "word-spacing",
  "word-wrap",
  "z-index"
].reverse();
function scss(hljs2) {
  const modes = MODES$1(hljs2);
  const PSEUDO_ELEMENTS$1$1 = PSEUDO_ELEMENTS$1;
  const PSEUDO_CLASSES$1$1 = PSEUDO_CLASSES$1;
  const AT_IDENTIFIER = "@[a-z-]+";
  const AT_MODIFIERS = "and or not only";
  const IDENT_RE2 = "[a-zA-Z-][a-zA-Z0-9_-]*";
  const VARIABLE = {
    className: "variable",
    begin: "(\\$" + IDENT_RE2 + ")\\b"
  };
  return {
    name: "SCSS",
    case_insensitive: true,
    illegal: "[=/|']",
    contains: [
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      {
        className: "selector-id",
        begin: "#[A-Za-z0-9_-]+",
        relevance: 0
      },
      {
        className: "selector-class",
        begin: "\\.[A-Za-z0-9_-]+",
        relevance: 0
      },
      modes.ATTRIBUTE_SELECTOR_MODE,
      {
        className: "selector-tag",
        begin: "\\b(" + TAGS$1.join("|") + ")\\b",
        relevance: 0
      },
      {
        className: "selector-pseudo",
        begin: ":(" + PSEUDO_CLASSES$1$1.join("|") + ")"
      },
      {
        className: "selector-pseudo",
        begin: "::(" + PSEUDO_ELEMENTS$1$1.join("|") + ")"
      },
      VARIABLE,
      {
        begin: /\(/,
        end: /\)/,
        contains: [hljs2.CSS_NUMBER_MODE]
      },
      {
        className: "attribute",
        begin: "\\b(" + ATTRIBUTES$1.join("|") + ")\\b"
      },
      {
        begin: "\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\b"
      },
      {
        begin: ":",
        end: ";",
        contains: [
          VARIABLE,
          modes.HEXCOLOR,
          hljs2.CSS_NUMBER_MODE,
          hljs2.QUOTE_STRING_MODE,
          hljs2.APOS_STRING_MODE,
          modes.IMPORTANT
        ]
      },
      {
        begin: "@(page|font-face)",
        lexemes: AT_IDENTIFIER,
        keywords: "@page @font-face"
      },
      {
        begin: "@",
        end: "[{;]",
        returnBegin: true,
        keywords: {
          $pattern: /[a-z-]+/,
          keyword: AT_MODIFIERS,
          attribute: MEDIA_FEATURES$1.join(" ")
        },
        contains: [
          {
            begin: AT_IDENTIFIER,
            className: "keyword"
          },
          {
            begin: /[a-z-]+(?=:)/,
            className: "attribute"
          },
          VARIABLE,
          hljs2.QUOTE_STRING_MODE,
          hljs2.APOS_STRING_MODE,
          modes.HEXCOLOR,
          hljs2.CSS_NUMBER_MODE
        ]
      }
    ]
  };
}
var scss_1 = scss;
function shell(hljs2) {
  return {
    name: "Shell Session",
    aliases: ["console"],
    contains: [
      {
        className: "meta",
        begin: /^\s{0,3}[/~\w\d[\]()@-]*[>%$#]/,
        starts: {
          end: /[^\\](?=\s*$)/,
          subLanguage: "bash"
        }
      }
    ]
  };
}
var shell_1 = shell;
function smali(hljs2) {
  const smali_instr_low_prio = [
    "add",
    "and",
    "cmp",
    "cmpg",
    "cmpl",
    "const",
    "div",
    "double",
    "float",
    "goto",
    "if",
    "int",
    "long",
    "move",
    "mul",
    "neg",
    "new",
    "nop",
    "not",
    "or",
    "rem",
    "return",
    "shl",
    "shr",
    "sput",
    "sub",
    "throw",
    "ushr",
    "xor"
  ];
  const smali_instr_high_prio = [
    "aget",
    "aput",
    "array",
    "check",
    "execute",
    "fill",
    "filled",
    "goto/16",
    "goto/32",
    "iget",
    "instance",
    "invoke",
    "iput",
    "monitor",
    "packed",
    "sget",
    "sparse"
  ];
  const smali_keywords = [
    "transient",
    "constructor",
    "abstract",
    "final",
    "synthetic",
    "public",
    "private",
    "protected",
    "static",
    "bridge",
    "system"
  ];
  return {
    name: "Smali",
    contains: [
      {
        className: "string",
        begin: '"',
        end: '"',
        relevance: 0
      },
      hljs2.COMMENT("#", "$", {
        relevance: 0
      }),
      {
        className: "keyword",
        variants: [
          {
            begin: "\\s*\\.end\\s[a-zA-Z0-9]*"
          },
          {
            begin: "^[ ]*\\.[a-zA-Z]*",
            relevance: 0
          },
          {
            begin: "\\s:[a-zA-Z_0-9]*",
            relevance: 0
          },
          {
            begin: "\\s(" + smali_keywords.join("|") + ")"
          }
        ]
      },
      {
        className: "built_in",
        variants: [
          {
            begin: "\\s(" + smali_instr_low_prio.join("|") + ")\\s"
          },
          {
            begin: "\\s(" + smali_instr_low_prio.join("|") + ")((-|/)[a-zA-Z0-9]+)+\\s",
            relevance: 10
          },
          {
            begin: "\\s(" + smali_instr_high_prio.join("|") + ")((-|/)[a-zA-Z0-9]+)*\\s",
            relevance: 10
          }
        ]
      },
      {
        className: "class",
        begin: "L[^(;:\n]*;",
        relevance: 0
      },
      {
        begin: "[vp][0-9]+"
      }
    ]
  };
}
var smali_1 = smali;
function smalltalk(hljs2) {
  const VAR_IDENT_RE = "[a-z][a-zA-Z0-9_]*";
  const CHAR = {
    className: "string",
    begin: "\\$.{1}"
  };
  const SYMBOL = {
    className: "symbol",
    begin: "#" + hljs2.UNDERSCORE_IDENT_RE
  };
  return {
    name: "Smalltalk",
    aliases: ["st"],
    keywords: "self super nil true false thisContext",
    contains: [
      hljs2.COMMENT('"', '"'),
      hljs2.APOS_STRING_MODE,
      {
        className: "type",
        begin: "\\b[A-Z][A-Za-z0-9_]*",
        relevance: 0
      },
      {
        begin: VAR_IDENT_RE + ":",
        relevance: 0
      },
      hljs2.C_NUMBER_MODE,
      SYMBOL,
      CHAR,
      {
        begin: "\\|[ ]*" + VAR_IDENT_RE + "([ ]+" + VAR_IDENT_RE + ")*[ ]*\\|",
        returnBegin: true,
        end: /\|/,
        illegal: /\S/,
        contains: [{
          begin: "(\\|[ ]*)?" + VAR_IDENT_RE
        }]
      },
      {
        begin: "#\\(",
        end: "\\)",
        contains: [
          hljs2.APOS_STRING_MODE,
          CHAR,
          hljs2.C_NUMBER_MODE,
          SYMBOL
        ]
      }
    ]
  };
}
var smalltalk_1 = smalltalk;
function sml(hljs2) {
  return {
    name: "SML (Standard ML)",
    aliases: ["ml"],
    keywords: {
      $pattern: "[a-z_]\\w*!?",
      keyword: "abstype and andalso as case datatype do else end eqtype exception fn fun functor handle if in include infix infixr let local nonfix of op open orelse raise rec sharing sig signature struct structure then type val with withtype where while",
      built_in: "array bool char exn int list option order real ref string substring vector unit word",
      literal: "true false NONE SOME LESS EQUAL GREATER nil"
    },
    illegal: /\/\/|>>/,
    contains: [
      {
        className: "literal",
        begin: /\[(\|\|)?\]|\(\)/,
        relevance: 0
      },
      hljs2.COMMENT("\\(\\*", "\\*\\)", {
        contains: ["self"]
      }),
      {
        className: "symbol",
        begin: "'[A-Za-z_](?!')[\\w']*"
      },
      {
        className: "type",
        begin: "`[A-Z][\\w']*"
      },
      {
        className: "type",
        begin: "\\b[A-Z][\\w']*",
        relevance: 0
      },
      {
        begin: "[a-z_]\\w*'[\\w']*"
      },
      hljs2.inherit(hljs2.APOS_STRING_MODE, {
        className: "string",
        relevance: 0
      }),
      hljs2.inherit(hljs2.QUOTE_STRING_MODE, {
        illegal: null
      }),
      {
        className: "number",
        begin: "\\b(0[xX][a-fA-F0-9_]+[Lln]?|0[oO][0-7_]+[Lln]?|0[bB][01_]+[Lln]?|[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)",
        relevance: 0
      },
      {
        begin: /[-=]>/
      }
    ]
  };
}
var sml_1 = sml;
function sqf(hljs2) {
  const VARIABLE = {
    className: "variable",
    begin: /\b_+[a-zA-Z]\w*/
  };
  const FUNCTION = {
    className: "title",
    begin: /[a-zA-Z][a-zA-Z0-9]+_fnc_\w*/
  };
  const STRINGS = {
    className: "string",
    variants: [
      {
        begin: '"',
        end: '"',
        contains: [{
          begin: '""',
          relevance: 0
        }]
      },
      {
        begin: "'",
        end: "'",
        contains: [{
          begin: "''",
          relevance: 0
        }]
      }
    ]
  };
  const PREPROCESSOR = {
    className: "meta",
    begin: /#\s*[a-z]+\b/,
    end: /$/,
    keywords: {
      "meta-keyword": "define undef ifdef ifndef else endif include"
    },
    contains: [
      {
        begin: /\\\n/,
        relevance: 0
      },
      hljs2.inherit(STRINGS, {
        className: "meta-string"
      }),
      {
        className: "meta-string",
        begin: /<[^\n>]*>/,
        end: /$/,
        illegal: "\\n"
      },
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE
    ]
  };
  return {
    name: "SQF",
    case_insensitive: true,
    keywords: {
      keyword: "case catch default do else exit exitWith for forEach from if private switch then throw to try waitUntil while with",
      built_in: "abs accTime acos action actionIDs actionKeys actionKeysImages actionKeysNames actionKeysNamesArray actionName actionParams activateAddons activatedAddons activateKey add3DENConnection add3DENEventHandler add3DENLayer addAction addBackpack addBackpackCargo addBackpackCargoGlobal addBackpackGlobal addCamShake addCuratorAddons addCuratorCameraArea addCuratorEditableObjects addCuratorEditingArea addCuratorPoints addEditorObject addEventHandler addForce addGoggles addGroupIcon addHandgunItem addHeadgear addItem addItemCargo addItemCargoGlobal addItemPool addItemToBackpack addItemToUniform addItemToVest addLiveStats addMagazine addMagazineAmmoCargo addMagazineCargo addMagazineCargoGlobal addMagazineGlobal addMagazinePool addMagazines addMagazineTurret addMenu addMenuItem addMissionEventHandler addMPEventHandler addMusicEventHandler addOwnedMine addPlayerScores addPrimaryWeaponItem addPublicVariableEventHandler addRating addResources addScore addScoreSide addSecondaryWeaponItem addSwitchableUnit addTeamMember addToRemainsCollector addTorque addUniform addVehicle addVest addWaypoint addWeapon addWeaponCargo addWeaponCargoGlobal addWeaponGlobal addWeaponItem addWeaponPool addWeaponTurret admin agent agents AGLToASL aimedAtTarget aimPos airDensityRTD airplaneThrottle airportSide AISFinishHeal alive all3DENEntities allAirports allControls allCurators allCutLayers allDead allDeadMen allDisplays allGroups allMapMarkers allMines allMissionObjects allow3DMode allowCrewInImmobile allowCuratorLogicIgnoreAreas allowDamage allowDammage allowFileOperations allowFleeing allowGetIn allowSprint allPlayers allSimpleObjects allSites allTurrets allUnits allUnitsUAV allVariables ammo ammoOnPylon and animate animateBay animateDoor animatePylon animateSource animationNames animationPhase animationSourcePhase animationState append apply armoryPoints arrayIntersect asin ASLToAGL ASLToATL assert assignAsCargo assignAsCargoIndex assignAsCommander assignAsDriver assignAsGunner assignAsTurret assignCurator assignedCargo assignedCommander assignedDriver assignedGunner assignedItems assignedTarget assignedTeam assignedVehicle assignedVehicleRole assignItem assignTeam assignToAirport atan atan2 atg ATLToASL attachedObject attachedObjects attachedTo attachObject attachTo attackEnabled backpack backpackCargo backpackContainer backpackItems backpackMagazines backpackSpaceFor behaviour benchmark binocular boundingBox boundingBoxReal boundingCenter breakOut breakTo briefingName buildingExit buildingPos buttonAction buttonSetAction cadetMode call callExtension camCommand camCommit camCommitPrepared camCommitted camConstuctionSetParams camCreate camDestroy cameraEffect cameraEffectEnableHUD cameraInterest cameraOn cameraView campaignConfigFile camPreload camPreloaded camPrepareBank camPrepareDir camPrepareDive camPrepareFocus camPrepareFov camPrepareFovRange camPreparePos camPrepareRelPos camPrepareTarget camSetBank camSetDir camSetDive camSetFocus camSetFov camSetFovRange camSetPos camSetRelPos camSetTarget camTarget camUseNVG canAdd canAddItemToBackpack canAddItemToUniform canAddItemToVest cancelSimpleTaskDestination canFire canMove canSlingLoad canStand canSuspend canTriggerDynamicSimulation canUnloadInCombat canVehicleCargo captive captiveNum cbChecked cbSetChecked ceil channelEnabled cheatsEnabled checkAIFeature checkVisibility className clearAllItemsFromBackpack clearBackpackCargo clearBackpackCargoGlobal clearGroupIcons clearItemCargo clearItemCargoGlobal clearItemPool clearMagazineCargo clearMagazineCargoGlobal clearMagazinePool clearOverlay clearRadio clearWeaponCargo clearWeaponCargoGlobal clearWeaponPool clientOwner closeDialog closeDisplay closeOverlay collapseObjectTree collect3DENHistory collectiveRTD combatMode commandArtilleryFire commandChat commander commandFire commandFollow commandFSM commandGetOut commandingMenu commandMove commandRadio commandStop commandSuppressiveFire commandTarget commandWatch comment commitOverlay compile compileFinal completedFSM composeText configClasses configFile configHierarchy configName configProperties configSourceAddonList configSourceMod configSourceModList confirmSensorTarget connectTerminalToUAV controlsGroupCtrl copyFromClipboard copyToClipboard copyWaypoints cos count countEnemy countFriendly countSide countType countUnknown create3DENComposition create3DENEntity createAgent createCenter createDialog createDiaryLink createDiaryRecord createDiarySubject createDisplay createGearDialog createGroup createGuardedPoint createLocation createMarker createMarkerLocal createMenu createMine createMissionDisplay createMPCampaignDisplay createSimpleObject createSimpleTask createSite createSoundSource createTask createTeam createTrigger createUnit createVehicle createVehicleCrew createVehicleLocal crew ctAddHeader ctAddRow ctClear ctCurSel ctData ctFindHeaderRows ctFindRowHeader ctHeaderControls ctHeaderCount ctRemoveHeaders ctRemoveRows ctrlActivate ctrlAddEventHandler ctrlAngle ctrlAutoScrollDelay ctrlAutoScrollRewind ctrlAutoScrollSpeed ctrlChecked ctrlClassName ctrlCommit ctrlCommitted ctrlCreate ctrlDelete ctrlEnable ctrlEnabled ctrlFade ctrlHTMLLoaded ctrlIDC ctrlIDD ctrlMapAnimAdd ctrlMapAnimClear ctrlMapAnimCommit ctrlMapAnimDone ctrlMapCursor ctrlMapMouseOver ctrlMapScale ctrlMapScreenToWorld ctrlMapWorldToScreen ctrlModel ctrlModelDirAndUp ctrlModelScale ctrlParent ctrlParentControlsGroup ctrlPosition ctrlRemoveAllEventHandlers ctrlRemoveEventHandler ctrlScale ctrlSetActiveColor ctrlSetAngle ctrlSetAutoScrollDelay ctrlSetAutoScrollRewind ctrlSetAutoScrollSpeed ctrlSetBackgroundColor ctrlSetChecked ctrlSetEventHandler ctrlSetFade ctrlSetFocus ctrlSetFont ctrlSetFontH1 ctrlSetFontH1B ctrlSetFontH2 ctrlSetFontH2B ctrlSetFontH3 ctrlSetFontH3B ctrlSetFontH4 ctrlSetFontH4B ctrlSetFontH5 ctrlSetFontH5B ctrlSetFontH6 ctrlSetFontH6B ctrlSetFontHeight ctrlSetFontHeightH1 ctrlSetFontHeightH2 ctrlSetFontHeightH3 ctrlSetFontHeightH4 ctrlSetFontHeightH5 ctrlSetFontHeightH6 ctrlSetFontHeightSecondary ctrlSetFontP ctrlSetFontPB ctrlSetFontSecondary ctrlSetForegroundColor ctrlSetModel ctrlSetModelDirAndUp ctrlSetModelScale ctrlSetPixelPrecision ctrlSetPosition ctrlSetScale ctrlSetStructuredText ctrlSetText ctrlSetTextColor ctrlSetTooltip ctrlSetTooltipColorBox ctrlSetTooltipColorShade ctrlSetTooltipColorText ctrlShow ctrlShown ctrlText ctrlTextHeight ctrlTextWidth ctrlType ctrlVisible ctRowControls ctRowCount ctSetCurSel ctSetData ctSetHeaderTemplate ctSetRowTemplate ctSetValue ctValue curatorAddons curatorCamera curatorCameraArea curatorCameraAreaCeiling curatorCoef curatorEditableObjects curatorEditingArea curatorEditingAreaType curatorMouseOver curatorPoints curatorRegisteredObjects curatorSelected curatorWaypointCost current3DENOperation currentChannel currentCommand currentMagazine currentMagazineDetail currentMagazineDetailTurret currentMagazineTurret currentMuzzle currentNamespace currentTask currentTasks currentThrowable currentVisionMode currentWaypoint currentWeapon currentWeaponMode currentWeaponTurret currentZeroing cursorObject cursorTarget customChat customRadio cutFadeOut cutObj cutRsc cutText damage date dateToNumber daytime deActivateKey debriefingText debugFSM debugLog deg delete3DENEntities deleteAt deleteCenter deleteCollection deleteEditorObject deleteGroup deleteGroupWhenEmpty deleteIdentity deleteLocation deleteMarker deleteMarkerLocal deleteRange deleteResources deleteSite deleteStatus deleteTeam deleteVehicle deleteVehicleCrew deleteWaypoint detach detectedMines diag_activeMissionFSMs diag_activeScripts diag_activeSQFScripts diag_activeSQSScripts diag_captureFrame diag_captureFrameToFile diag_captureSlowFrame diag_codePerformance diag_drawMode diag_enable diag_enabled diag_fps diag_fpsMin diag_frameNo diag_lightNewLoad diag_list diag_log diag_logSlowFrame diag_mergeConfigFile diag_recordTurretLimits diag_setLightNew diag_tickTime diag_toggle dialog diarySubjectExists didJIP didJIPOwner difficulty difficultyEnabled difficultyEnabledRTD difficultyOption direction directSay disableAI disableCollisionWith disableConversation disableDebriefingStats disableMapIndicators disableNVGEquipment disableRemoteSensors disableSerialization disableTIEquipment disableUAVConnectability disableUserInput displayAddEventHandler displayCtrl displayParent displayRemoveAllEventHandlers displayRemoveEventHandler displaySetEventHandler dissolveTeam distance distance2D distanceSqr distributionRegion do3DENAction doArtilleryFire doFire doFollow doFSM doGetOut doMove doorPhase doStop doSuppressiveFire doTarget doWatch drawArrow drawEllipse drawIcon drawIcon3D drawLine drawLine3D drawLink drawLocation drawPolygon drawRectangle drawTriangle driver drop dynamicSimulationDistance dynamicSimulationDistanceCoef dynamicSimulationEnabled dynamicSimulationSystemEnabled echo edit3DENMissionAttributes editObject editorSetEventHandler effectiveCommander emptyPositions enableAI enableAIFeature enableAimPrecision enableAttack enableAudioFeature enableAutoStartUpRTD enableAutoTrimRTD enableCamShake enableCaustics enableChannel enableCollisionWith enableCopilot enableDebriefingStats enableDiagLegend enableDynamicSimulation enableDynamicSimulationSystem enableEndDialog enableEngineArtillery enableEnvironment enableFatigue enableGunLights enableInfoPanelComponent enableIRLasers enableMimics enablePersonTurret enableRadio enableReload enableRopeAttach enableSatNormalOnDetail enableSaving enableSentences enableSimulation enableSimulationGlobal enableStamina enableTeamSwitch enableTraffic enableUAVConnectability enableUAVWaypoints enableVehicleCargo enableVehicleSensor enableWeaponDisassembly endLoadingScreen endMission engineOn enginesIsOnRTD enginesRpmRTD enginesTorqueRTD entities environmentEnabled estimatedEndServerTime estimatedTimeLeft evalObjectArgument everyBackpack everyContainer exec execEditorScript execFSM execVM exp expectedDestination exportJIPMessages eyeDirection eyePos face faction fadeMusic fadeRadio fadeSound fadeSpeech failMission fillWeaponsFromPool find findCover findDisplay findEditorObject findEmptyPosition findEmptyPositionReady findIf findNearestEnemy finishMissionInit finite fire fireAtTarget firstBackpack flag flagAnimationPhase flagOwner flagSide flagTexture fleeing floor flyInHeight flyInHeightASL fog fogForecast fogParams forceAddUniform forcedMap forceEnd forceFlagTexture forceFollowRoad forceMap forceRespawn forceSpeed forceWalk forceWeaponFire forceWeatherChange forEachMember forEachMemberAgent forEachMemberTeam forgetTarget format formation formationDirection formationLeader formationMembers formationPosition formationTask formatText formLeader freeLook fromEditor fuel fullCrew gearIDCAmmoCount gearSlotAmmoCount gearSlotData get3DENActionState get3DENAttribute get3DENCamera get3DENConnections get3DENEntity get3DENEntityID get3DENGrid get3DENIconsVisible get3DENLayerEntities get3DENLinesVisible get3DENMissionAttribute get3DENMouseOver get3DENSelected getAimingCoef getAllEnvSoundControllers getAllHitPointsDamage getAllOwnedMines getAllSoundControllers getAmmoCargo getAnimAimPrecision getAnimSpeedCoef getArray getArtilleryAmmo getArtilleryComputerSettings getArtilleryETA getAssignedCuratorLogic getAssignedCuratorUnit getBackpackCargo getBleedingRemaining getBurningValue getCameraViewDirection getCargoIndex getCenterOfMass getClientState getClientStateNumber getCompatiblePylonMagazines getConnectedUAV getContainerMaxLoad getCursorObjectParams getCustomAimCoef getDammage getDescription getDir getDirVisual getDLCAssetsUsage getDLCAssetsUsageByName getDLCs getEditorCamera getEditorMode getEditorObjectScope getElevationOffset getEnvSoundController getFatigue getForcedFlagTexture getFriend getFSMVariable getFuelCargo getGroupIcon getGroupIconParams getGroupIcons getHideFrom getHit getHitIndex getHitPointDamage getItemCargo getMagazineCargo getMarkerColor getMarkerPos getMarkerSize getMarkerType getMass getMissionConfig getMissionConfigValue getMissionDLCs getMissionLayerEntities getModelInfo getMousePosition getMusicPlayedTime getNumber getObjectArgument getObjectChildren getObjectDLC getObjectMaterials getObjectProxy getObjectTextures getObjectType getObjectViewDistance getOxygenRemaining getPersonUsedDLCs getPilotCameraDirection getPilotCameraPosition getPilotCameraRotation getPilotCameraTarget getPlateNumber getPlayerChannel getPlayerScores getPlayerUID getPos getPosASL getPosASLVisual getPosASLW getPosATL getPosATLVisual getPosVisual getPosWorld getPylonMagazines getRelDir getRelPos getRemoteSensorsDisabled getRepairCargo getResolution getShadowDistance getShotParents getSlingLoad getSoundController getSoundControllerResult getSpeed getStamina getStatValue getSuppression getTerrainGrid getTerrainHeightASL getText getTotalDLCUsageTime getUnitLoadout getUnitTrait getUserMFDText getUserMFDvalue getVariable getVehicleCargo getWeaponCargo getWeaponSway getWingsOrientationRTD getWingsPositionRTD getWPPos glanceAt globalChat globalRadio goggles goto group groupChat groupFromNetId groupIconSelectable groupIconsVisible groupId groupOwner groupRadio groupSelectedUnits groupSelectUnit gunner gusts halt handgunItems handgunMagazine handgunWeapon handsHit hasInterface hasPilotCamera hasWeapon hcAllGroups hcGroupParams hcLeader hcRemoveAllGroups hcRemoveGroup hcSelected hcSelectGroup hcSetGroup hcShowBar hcShownBar headgear hideBody hideObject hideObjectGlobal hideSelection hint hintC hintCadet hintSilent hmd hostMission htmlLoad HUDMovementLevels humidity image importAllGroups importance in inArea inAreaArray incapacitatedState inflame inflamed infoPanel infoPanelComponentEnabled infoPanelComponents infoPanels inGameUISetEventHandler inheritsFrom initAmbientLife inPolygon inputAction inRangeOfArtillery insertEditorObject intersect is3DEN is3DENMultiplayer isAbleToBreathe isAgent isArray isAutoHoverOn isAutonomous isAutotest isBleeding isBurning isClass isCollisionLightOn isCopilotEnabled isDamageAllowed isDedicated isDLCAvailable isEngineOn isEqualTo isEqualType isEqualTypeAll isEqualTypeAny isEqualTypeArray isEqualTypeParams isFilePatchingEnabled isFlashlightOn isFlatEmpty isForcedWalk isFormationLeader isGroupDeletedWhenEmpty isHidden isInRemainsCollector isInstructorFigureEnabled isIRLaserOn isKeyActive isKindOf isLaserOn isLightOn isLocalized isManualFire isMarkedForCollection isMultiplayer isMultiplayerSolo isNil isNull isNumber isObjectHidden isObjectRTD isOnRoad isPipEnabled isPlayer isRealTime isRemoteExecuted isRemoteExecutedJIP isServer isShowing3DIcons isSimpleObject isSprintAllowed isStaminaEnabled isSteamMission isStreamFriendlyUIEnabled isText isTouchingGround isTurnedOut isTutHintsEnabled isUAVConnectable isUAVConnected isUIContext isUniformAllowed isVehicleCargo isVehicleRadarOn isVehicleSensorEnabled isWalking isWeaponDeployed isWeaponRested itemCargo items itemsWithMagazines join joinAs joinAsSilent joinSilent joinString kbAddDatabase kbAddDatabaseTargets kbAddTopic kbHasTopic kbReact kbRemoveTopic kbTell kbWasSaid keyImage keyName knowsAbout land landAt landResult language laserTarget lbAdd lbClear lbColor lbColorRight lbCurSel lbData lbDelete lbIsSelected lbPicture lbPictureRight lbSelection lbSetColor lbSetColorRight lbSetCurSel lbSetData lbSetPicture lbSetPictureColor lbSetPictureColorDisabled lbSetPictureColorSelected lbSetPictureRight lbSetPictureRightColor lbSetPictureRightColorDisabled lbSetPictureRightColorSelected lbSetSelectColor lbSetSelectColorRight lbSetSelected lbSetText lbSetTextRight lbSetTooltip lbSetValue lbSize lbSort lbSortByValue lbText lbTextRight lbValue leader leaderboardDeInit leaderboardGetRows leaderboardInit leaderboardRequestRowsFriends leaderboardsRequestUploadScore leaderboardsRequestUploadScoreKeepBest leaderboardState leaveVehicle libraryCredits libraryDisclaimers lifeState lightAttachObject lightDetachObject lightIsOn lightnings limitSpeed linearConversion lineIntersects lineIntersectsObjs lineIntersectsSurfaces lineIntersectsWith linkItem list listObjects listRemoteTargets listVehicleSensors ln lnbAddArray lnbAddColumn lnbAddRow lnbClear lnbColor lnbCurSelRow lnbData lnbDeleteColumn lnbDeleteRow lnbGetColumnsPosition lnbPicture lnbSetColor lnbSetColumnsPos lnbSetCurSelRow lnbSetData lnbSetPicture lnbSetText lnbSetValue lnbSize lnbSort lnbSortByValue lnbText lnbValue load loadAbs loadBackpack loadFile loadGame loadIdentity loadMagazine loadOverlay loadStatus loadUniform loadVest local localize locationPosition lock lockCameraTo lockCargo lockDriver locked lockedCargo lockedDriver lockedTurret lockIdentity lockTurret lockWP log logEntities logNetwork logNetworkTerminate lookAt lookAtPos magazineCargo magazines magazinesAllTurrets magazinesAmmo magazinesAmmoCargo magazinesAmmoFull magazinesDetail magazinesDetailBackpack magazinesDetailUniform magazinesDetailVest magazinesTurret magazineTurretAmmo mapAnimAdd mapAnimClear mapAnimCommit mapAnimDone mapCenterOnCamera mapGridPosition markAsFinishedOnSteam markerAlpha markerBrush markerColor markerDir markerPos markerShape markerSize markerText markerType max members menuAction menuAdd menuChecked menuClear menuCollapse menuData menuDelete menuEnable menuEnabled menuExpand menuHover menuPicture menuSetAction menuSetCheck menuSetData menuSetPicture menuSetValue menuShortcut menuShortcutText menuSize menuSort menuText menuURL menuValue min mineActive mineDetectedBy missionConfigFile missionDifficulty missionName missionNamespace missionStart missionVersion mod modelToWorld modelToWorldVisual modelToWorldVisualWorld modelToWorldWorld modParams moonIntensity moonPhase morale move move3DENCamera moveInAny moveInCargo moveInCommander moveInDriver moveInGunner moveInTurret moveObjectToEnd moveOut moveTime moveTo moveToCompleted moveToFailed musicVolume name nameSound nearEntities nearestBuilding nearestLocation nearestLocations nearestLocationWithDubbing nearestObject nearestObjects nearestTerrainObjects nearObjects nearObjectsReady nearRoads nearSupplies nearTargets needReload netId netObjNull newOverlay nextMenuItemIndex nextWeatherChange nMenuItems not numberOfEnginesRTD numberToDate objectCurators objectFromNetId objectParent objStatus onBriefingGroup onBriefingNotes onBriefingPlan onBriefingTeamSwitch onCommandModeChanged onDoubleClick onEachFrame onGroupIconClick onGroupIconOverEnter onGroupIconOverLeave onHCGroupSelectionChanged onMapSingleClick onPlayerConnected onPlayerDisconnected onPreloadFinished onPreloadStarted onShowNewObject onTeamSwitch openCuratorInterface openDLCPage openMap openSteamApp openYoutubeVideo or orderGetIn overcast overcastForecast owner param params parseNumber parseSimpleArray parseText parsingNamespace particlesQuality pickWeaponPool pitch pixelGrid pixelGridBase pixelGridNoUIScale pixelH pixelW playableSlotsNumber playableUnits playAction playActionNow player playerRespawnTime playerSide playersNumber playGesture playMission playMove playMoveNow playMusic playScriptedMission playSound playSound3D position positionCameraToWorld posScreenToWorld posWorldToScreen ppEffectAdjust ppEffectCommit ppEffectCommitted ppEffectCreate ppEffectDestroy ppEffectEnable ppEffectEnabled ppEffectForceInNVG precision preloadCamera preloadObject preloadSound preloadTitleObj preloadTitleRsc preprocessFile preprocessFileLineNumbers primaryWeapon primaryWeaponItems primaryWeaponMagazine priority processDiaryLink productVersion profileName profileNamespace profileNameSteam progressLoadingScreen progressPosition progressSetPosition publicVariable publicVariableClient publicVariableServer pushBack pushBackUnique putWeaponPool queryItemsPool queryMagazinePool queryWeaponPool rad radioChannelAdd radioChannelCreate radioChannelRemove radioChannelSetCallSign radioChannelSetLabel radioVolume rain rainbow random rank rankId rating rectangular registeredTasks registerTask reload reloadEnabled remoteControl remoteExec remoteExecCall remoteExecutedOwner remove3DENConnection remove3DENEventHandler remove3DENLayer removeAction removeAll3DENEventHandlers removeAllActions removeAllAssignedItems removeAllContainers removeAllCuratorAddons removeAllCuratorCameraAreas removeAllCuratorEditingAreas removeAllEventHandlers removeAllHandgunItems removeAllItems removeAllItemsWithMagazines removeAllMissionEventHandlers removeAllMPEventHandlers removeAllMusicEventHandlers removeAllOwnedMines removeAllPrimaryWeaponItems removeAllWeapons removeBackpack removeBackpackGlobal removeCuratorAddons removeCuratorCameraArea removeCuratorEditableObjects removeCuratorEditingArea removeDrawIcon removeDrawLinks removeEventHandler removeFromRemainsCollector removeGoggles removeGroupIcon removeHandgunItem removeHeadgear removeItem removeItemFromBackpack removeItemFromUniform removeItemFromVest removeItems removeMagazine removeMagazineGlobal removeMagazines removeMagazinesTurret removeMagazineTurret removeMenuItem removeMissionEventHandler removeMPEventHandler removeMusicEventHandler removeOwnedMine removePrimaryWeaponItem removeSecondaryWeaponItem removeSimpleTask removeSwitchableUnit removeTeamMember removeUniform removeVest removeWeapon removeWeaponAttachmentCargo removeWeaponCargo removeWeaponGlobal removeWeaponTurret reportRemoteTarget requiredVersion resetCamShake resetSubgroupDirection resize resources respawnVehicle restartEditorCamera reveal revealMine reverse reversedMouseY roadAt roadsConnectedTo roleDescription ropeAttachedObjects ropeAttachedTo ropeAttachEnabled ropeAttachTo ropeCreate ropeCut ropeDestroy ropeDetach ropeEndPosition ropeLength ropes ropeUnwind ropeUnwound rotorsForcesRTD rotorsRpmRTD round runInitScript safeZoneH safeZoneW safeZoneWAbs safeZoneX safeZoneXAbs safeZoneY save3DENInventory saveGame saveIdentity saveJoysticks saveOverlay saveProfileNamespace saveStatus saveVar savingEnabled say say2D say3D scopeName score scoreSide screenshot screenToWorld scriptDone scriptName scudState secondaryWeapon secondaryWeaponItems secondaryWeaponMagazine select selectBestPlaces selectDiarySubject selectedEditorObjects selectEditorObject selectionNames selectionPosition selectLeader selectMax selectMin selectNoPlayer selectPlayer selectRandom selectRandomWeighted selectWeapon selectWeaponTurret sendAUMessage sendSimpleCommand sendTask sendTaskResult sendUDPMessage serverCommand serverCommandAvailable serverCommandExecutable serverName serverTime set set3DENAttribute set3DENAttributes set3DENGrid set3DENIconsVisible set3DENLayer set3DENLinesVisible set3DENLogicType set3DENMissionAttribute set3DENMissionAttributes set3DENModelsVisible set3DENObjectType set3DENSelected setAccTime setActualCollectiveRTD setAirplaneThrottle setAirportSide setAmmo setAmmoCargo setAmmoOnPylon setAnimSpeedCoef setAperture setApertureNew setArmoryPoints setAttributes setAutonomous setBehaviour setBleedingRemaining setBrakesRTD setCameraInterest setCamShakeDefParams setCamShakeParams setCamUseTI setCaptive setCenterOfMass setCollisionLight setCombatMode setCompassOscillation setConvoySeparation setCuratorCameraAreaCeiling setCuratorCoef setCuratorEditingAreaType setCuratorWaypointCost setCurrentChannel setCurrentTask setCurrentWaypoint setCustomAimCoef setCustomWeightRTD setDamage setDammage setDate setDebriefingText setDefaultCamera setDestination setDetailMapBlendPars setDir setDirection setDrawIcon setDriveOnPath setDropInterval setDynamicSimulationDistance setDynamicSimulationDistanceCoef setEditorMode setEditorObjectScope setEffectCondition setEngineRPMRTD setFace setFaceAnimation setFatigue setFeatureType setFlagAnimationPhase setFlagOwner setFlagSide setFlagTexture setFog setFormation setFormationTask setFormDir setFriend setFromEditor setFSMVariable setFuel setFuelCargo setGroupIcon setGroupIconParams setGroupIconsSelectable setGroupIconsVisible setGroupId setGroupIdGlobal setGroupOwner setGusts setHideBehind setHit setHitIndex setHitPointDamage setHorizonParallaxCoef setHUDMovementLevels setIdentity setImportance setInfoPanel setLeader setLightAmbient setLightAttenuation setLightBrightness setLightColor setLightDayLight setLightFlareMaxDistance setLightFlareSize setLightIntensity setLightnings setLightUseFlare setLocalWindParams setMagazineTurretAmmo setMarkerAlpha setMarkerAlphaLocal setMarkerBrush setMarkerBrushLocal setMarkerColor setMarkerColorLocal setMarkerDir setMarkerDirLocal setMarkerPos setMarkerPosLocal setMarkerShape setMarkerShapeLocal setMarkerSize setMarkerSizeLocal setMarkerText setMarkerTextLocal setMarkerType setMarkerTypeLocal setMass setMimic setMousePosition setMusicEffect setMusicEventHandler setName setNameSound setObjectArguments setObjectMaterial setObjectMaterialGlobal setObjectProxy setObjectTexture setObjectTextureGlobal setObjectViewDistance setOvercast setOwner setOxygenRemaining setParticleCircle setParticleClass setParticleFire setParticleParams setParticleRandom setPilotCameraDirection setPilotCameraRotation setPilotCameraTarget setPilotLight setPiPEffect setPitch setPlateNumber setPlayable setPlayerRespawnTime setPos setPosASL setPosASL2 setPosASLW setPosATL setPosition setPosWorld setPylonLoadOut setPylonsPriority setRadioMsg setRain setRainbow setRandomLip setRank setRectangular setRepairCargo setRotorBrakeRTD setShadowDistance setShotParents setSide setSimpleTaskAlwaysVisible setSimpleTaskCustomData setSimpleTaskDescription setSimpleTaskDestination setSimpleTaskTarget setSimpleTaskType setSimulWeatherLayers setSize setSkill setSlingLoad setSoundEffect setSpeaker setSpeech setSpeedMode setStamina setStaminaScheme setStatValue setSuppression setSystemOfUnits setTargetAge setTaskMarkerOffset setTaskResult setTaskState setTerrainGrid setText setTimeMultiplier setTitleEffect setTrafficDensity setTrafficDistance setTrafficGap setTrafficSpeed setTriggerActivation setTriggerArea setTriggerStatements setTriggerText setTriggerTimeout setTriggerType setType setUnconscious setUnitAbility setUnitLoadout setUnitPos setUnitPosWeak setUnitRank setUnitRecoilCoefficient setUnitTrait setUnloadInCombat setUserActionText setUserMFDText setUserMFDvalue setVariable setVectorDir setVectorDirAndUp setVectorUp setVehicleAmmo setVehicleAmmoDef setVehicleArmor setVehicleCargo setVehicleId setVehicleLock setVehiclePosition setVehicleRadar setVehicleReceiveRemoteTargets setVehicleReportOwnPosition setVehicleReportRemoteTargets setVehicleTIPars setVehicleVarName setVelocity setVelocityModelSpace setVelocityTransformation setViewDistance setVisibleIfTreeCollapsed setWantedRPMRTD setWaves setWaypointBehaviour setWaypointCombatMode setWaypointCompletionRadius setWaypointDescription setWaypointForceBehaviour setWaypointFormation setWaypointHousePosition setWaypointLoiterRadius setWaypointLoiterType setWaypointName setWaypointPosition setWaypointScript setWaypointSpeed setWaypointStatements setWaypointTimeout setWaypointType setWaypointVisible setWeaponReloadingTime setWind setWindDir setWindForce setWindStr setWingForceScaleRTD setWPPos show3DIcons showChat showCinemaBorder showCommandingMenu showCompass showCuratorCompass showGPS showHUD showLegend showMap shownArtilleryComputer shownChat shownCompass shownCuratorCompass showNewEditorObject shownGPS shownHUD shownMap shownPad shownRadio shownScoretable shownUAVFeed shownWarrant shownWatch showPad showRadio showScoretable showSubtitles showUAVFeed showWarrant showWatch showWaypoint showWaypoints side sideChat sideEnemy sideFriendly sideRadio simpleTasks simulationEnabled simulCloudDensity simulCloudOcclusion simulInClouds simulWeatherSync sin size sizeOf skill skillFinal skipTime sleep sliderPosition sliderRange sliderSetPosition sliderSetRange sliderSetSpeed sliderSpeed slingLoadAssistantShown soldierMagazines someAmmo sort soundVolume spawn speaker speed speedMode splitString sqrt squadParams stance startLoadingScreen step stop stopEngineRTD stopped str sunOrMoon supportInfo suppressFor surfaceIsWater surfaceNormal surfaceType swimInDepth switchableUnits switchAction switchCamera switchGesture switchLight switchMove synchronizedObjects synchronizedTriggers synchronizedWaypoints synchronizeObjectsAdd synchronizeObjectsRemove synchronizeTrigger synchronizeWaypoint systemChat systemOfUnits tan targetKnowledge targets targetsAggregate targetsQuery taskAlwaysVisible taskChildren taskCompleted taskCustomData taskDescription taskDestination taskHint taskMarkerOffset taskParent taskResult taskState taskType teamMember teamName teams teamSwitch teamSwitchEnabled teamType terminate terrainIntersect terrainIntersectASL terrainIntersectAtASL text textLog textLogFormat tg time timeMultiplier titleCut titleFadeOut titleObj titleRsc titleText toArray toFixed toLower toString toUpper triggerActivated triggerActivation triggerArea triggerAttachedVehicle triggerAttachObject triggerAttachVehicle triggerDynamicSimulation triggerStatements triggerText triggerTimeout triggerTimeoutCurrent triggerType turretLocal turretOwner turretUnit tvAdd tvClear tvCollapse tvCollapseAll tvCount tvCurSel tvData tvDelete tvExpand tvExpandAll tvPicture tvSetColor tvSetCurSel tvSetData tvSetPicture tvSetPictureColor tvSetPictureColorDisabled tvSetPictureColorSelected tvSetPictureRight tvSetPictureRightColor tvSetPictureRightColorDisabled tvSetPictureRightColorSelected tvSetText tvSetTooltip tvSetValue tvSort tvSortByValue tvText tvTooltip tvValue type typeName typeOf UAVControl uiNamespace uiSleep unassignCurator unassignItem unassignTeam unassignVehicle underwater uniform uniformContainer uniformItems uniformMagazines unitAddons unitAimPosition unitAimPositionVisual unitBackpack unitIsUAV unitPos unitReady unitRecoilCoefficient units unitsBelowHeight unlinkItem unlockAchievement unregisterTask updateDrawIcon updateMenuItem updateObjectTree useAISteeringComponent useAudioTimeForMoves userInputDisabled vectorAdd vectorCos vectorCrossProduct vectorDiff vectorDir vectorDirVisual vectorDistance vectorDistanceSqr vectorDotProduct vectorFromTo vectorMagnitude vectorMagnitudeSqr vectorModelToWorld vectorModelToWorldVisual vectorMultiply vectorNormalized vectorUp vectorUpVisual vectorWorldToModel vectorWorldToModelVisual vehicle vehicleCargoEnabled vehicleChat vehicleRadio vehicleReceiveRemoteTargets vehicleReportOwnPosition vehicleReportRemoteTargets vehicles vehicleVarName velocity velocityModelSpace verifySignature vest vestContainer vestItems vestMagazines viewDistance visibleCompass visibleGPS visibleMap visiblePosition visiblePositionASL visibleScoretable visibleWatch waves waypointAttachedObject waypointAttachedVehicle waypointAttachObject waypointAttachVehicle waypointBehaviour waypointCombatMode waypointCompletionRadius waypointDescription waypointForceBehaviour waypointFormation waypointHousePosition waypointLoiterRadius waypointLoiterType waypointName waypointPosition waypoints waypointScript waypointsEnabledUAV waypointShow waypointSpeed waypointStatements waypointTimeout waypointTimeoutCurrent waypointType waypointVisible weaponAccessories weaponAccessoriesCargo weaponCargo weaponDirection weaponInertia weaponLowered weapons weaponsItems weaponsItemsCargo weaponState weaponsTurret weightRTD WFSideText wind ",
      literal: "blufor civilian configNull controlNull displayNull east endl false grpNull independent lineBreak locationNull nil objNull opfor pi resistance scriptNull sideAmbientLife sideEmpty sideLogic sideUnknown taskNull teamMemberNull true west"
    },
    contains: [
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      hljs2.NUMBER_MODE,
      VARIABLE,
      FUNCTION,
      STRINGS,
      PREPROCESSOR
    ],
    illegal: /#|^\$ /
  };
}
var sqf_1 = sqf;
function sql_more(hljs2) {
  var COMMENT_MODE = hljs2.COMMENT("--", "$");
  return {
    name: "SQL (more)",
    aliases: ["mysql", "oracle"],
    disableAutodetect: true,
    case_insensitive: true,
    illegal: /[<>{}*]/,
    contains: [
      {
        beginKeywords: "begin end start commit rollback savepoint lock alter create drop rename call delete do handler insert load replace select truncate update set show pragma grant merge describe use explain help declare prepare execute deallocate release unlock purge reset change stop analyze cache flush optimize repair kill install uninstall checksum restore check backup revoke comment values with",
        end: /;/,
        endsWithParent: true,
        keywords: {
          $pattern: /[\w\.]+/,
          keyword: "as abort abs absolute acc acce accep accept access accessed accessible account acos action activate add addtime admin administer advanced advise aes_decrypt aes_encrypt after agent aggregate ali alia alias all allocate allow alter always analyze ancillary and anti any anydata anydataset anyschema anytype apply archive archived archivelog are as asc ascii asin assembly assertion associate asynchronous at atan atn2 attr attri attrib attribu attribut attribute attributes audit authenticated authentication authid authors auto autoallocate autodblink autoextend automatic availability avg backup badfile basicfile before begin beginning benchmark between bfile bfile_base big bigfile bin binary_double binary_float binlog bit_and bit_count bit_length bit_or bit_xor bitmap blob_base block blocksize body both bound bucket buffer_cache buffer_pool build bulk by byte byteordermark bytes cache caching call calling cancel capacity cascade cascaded case cast catalog category ceil ceiling chain change changed char_base char_length character_length characters characterset charindex charset charsetform charsetid check checksum checksum_agg child choose chr chunk class cleanup clear client clob clob_base clone close cluster_id cluster_probability cluster_set clustering coalesce coercibility col collate collation collect colu colum column column_value columns columns_updated comment commit compact compatibility compiled complete composite_limit compound compress compute concat concat_ws concurrent confirm conn connec connect connect_by_iscycle connect_by_isleaf connect_by_root connect_time connection consider consistent constant constraint constraints constructor container content contents context contributors controlfile conv convert convert_tz corr corr_k corr_s corresponding corruption cos cost count count_big counted covar_pop covar_samp cpu_per_call cpu_per_session crc32 create creation critical cross cube cume_dist curdate current current_date current_time current_timestamp current_user cursor curtime customdatum cycle data database databases datafile datafiles datalength date_add date_cache date_format date_sub dateadd datediff datefromparts datename datepart datetime2fromparts day day_to_second dayname dayofmonth dayofweek dayofyear days db_role_change dbtimezone ddl deallocate declare decode decompose decrement decrypt deduplicate def defa defau defaul default defaults deferred defi defin define degrees delayed delegate delete delete_all delimited demand dense_rank depth dequeue des_decrypt des_encrypt des_key_file desc descr descri describ describe descriptor deterministic diagnostics difference dimension direct_load directory disable disable_all disallow disassociate discardfile disconnect diskgroup distinct distinctrow distribute distributed div do document domain dotnet double downgrade drop dumpfile duplicate duration each edition editionable editions element ellipsis else elsif elt empty enable enable_all enclosed encode encoding encrypt end end-exec endian enforced engine engines enqueue enterprise entityescaping eomonth error errors escaped evalname evaluate event eventdata events except exception exceptions exchange exclude excluding execu execut execute exempt exists exit exp expire explain explode export export_set extended extent external external_1 external_2 externally extract failed failed_login_attempts failover failure far fast feature_set feature_value fetch field fields file file_name_convert filesystem_like_logging final finish first first_value fixed flash_cache flashback floor flush following follows for forall force foreign form forma format found found_rows freelist freelists freepools fresh from from_base64 from_days ftp full function general generated get get_format get_lock getdate getutcdate global global_name globally go goto grant grants greatest group group_concat group_id grouping grouping_id groups gtid_subtract guarantee guard handler hash hashkeys having hea head headi headin heading heap help hex hierarchy high high_priority hosts hour hours http id ident_current ident_incr ident_seed identified identity idle_time if ifnull ignore iif ilike ilm immediate import in include including increment index indexes indexing indextype indicator indices inet6_aton inet6_ntoa inet_aton inet_ntoa infile initial initialized initially initrans inmemory inner innodb input insert install instance instantiable instr interface interleaved intersect into invalidate invisible is is_free_lock is_ipv4 is_ipv4_compat is_not is_not_null is_used_lock isdate isnull isolation iterate java join json json_exists keep keep_duplicates key keys kill language large last last_day last_insert_id last_value lateral lax lcase lead leading least leaves left len lenght length less level levels library like like2 like4 likec limit lines link list listagg little ln load load_file lob lobs local localtime localtimestamp locate locator lock locked log log10 log2 logfile logfiles logging logical logical_reads_per_call logoff logon logs long loop low low_priority lower lpad lrtrim ltrim main make_set makedate maketime managed management manual map mapping mask master master_pos_wait match matched materialized max maxextents maximize maxinstances maxlen maxlogfiles maxloghistory maxlogmembers maxsize maxtrans md5 measures median medium member memcompress memory merge microsecond mid migration min minextents minimum mining minus minute minutes minvalue missing mod mode model modification modify module monitoring month months mount move movement multiset mutex name name_const names nan national native natural nav nchar nclob nested never new newline next nextval no no_write_to_binlog noarchivelog noaudit nobadfile nocheck nocompress nocopy nocycle nodelay nodiscardfile noentityescaping noguarantee nokeep nologfile nomapping nomaxvalue nominimize nominvalue nomonitoring none noneditionable nonschema noorder nopr nopro noprom nopromp noprompt norely noresetlogs noreverse normal norowdependencies noschemacheck noswitch not nothing notice notnull notrim novalidate now nowait nth_value nullif nulls num numb numbe nvarchar nvarchar2 object ocicoll ocidate ocidatetime ociduration ociinterval ociloblocator ocinumber ociref ocirefcursor ocirowid ocistring ocitype oct octet_length of off offline offset oid oidindex old on online only opaque open operations operator optimal optimize option optionally or oracle oracle_date oradata ord ordaudio orddicom orddoc order ordimage ordinality ordvideo organization orlany orlvary out outer outfile outline output over overflow overriding package pad parallel parallel_enable parameters parent parse partial partition partitions pascal passing password password_grace_time password_lock_time password_reuse_max password_reuse_time password_verify_function patch path patindex pctincrease pctthreshold pctused pctversion percent percent_rank percentile_cont percentile_disc performance period period_add period_diff permanent physical pi pipe pipelined pivot pluggable plugin policy position post_transaction pow power pragma prebuilt precedes preceding precision prediction prediction_cost prediction_details prediction_probability prediction_set prepare present preserve prior priority private private_sga privileges procedural procedure procedure_analyze processlist profiles project prompt protection public publishingservername purge quarter query quick quiesce quota quotename radians raise rand range rank raw read reads readsize rebuild record records recover recovery recursive recycle redo reduced ref reference referenced references referencing refresh regexp_like register regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy reject rekey relational relative relaylog release release_lock relies_on relocate rely rem remainder rename repair repeat replace replicate replication required reset resetlogs resize resource respect restore restricted result result_cache resumable resume retention return returning returns reuse reverse revoke right rlike role roles rollback rolling rollup round row row_count rowdependencies rowid rownum rows rtrim rules safe salt sample save savepoint sb1 sb2 sb4 scan schema schemacheck scn scope scroll sdo_georaster sdo_topo_geometry search sec_to_time second seconds section securefile security seed segment select self semi sequence sequential serializable server servererror session session_user sessions_per_user set sets settings sha sha1 sha2 share shared shared_pool short show shrink shutdown si_averagecolor si_colorhistogram si_featurelist si_positionalcolor si_stillimage si_texture siblings sid sign sin size size_t sizes skip slave sleep smalldatetimefromparts smallfile snapshot some soname sort soundex source space sparse spfile split sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_small_result sql_variant_property sqlcode sqldata sqlerror sqlname sqlstate sqrt square standalone standby start starting startup statement static statistics stats_binomial_test stats_crosstab stats_ks_test stats_mode stats_mw_test stats_one_way_anova stats_t_test_ stats_t_test_indep stats_t_test_one stats_t_test_paired stats_wsr_test status std stddev stddev_pop stddev_samp stdev stop storage store stored str str_to_date straight_join strcmp strict string struct stuff style subdate subpartition subpartitions substitutable substr substring subtime subtring_index subtype success sum suspend switch switchoffset switchover sync synchronous synonym sys sys_xmlagg sysasm sysaux sysdate sysdatetimeoffset sysdba sysoper system system_user sysutcdatetime table tables tablespace tablesample tan tdo template temporary terminated tertiary_weights test than then thread through tier ties time time_format time_zone timediff timefromparts timeout timestamp timestampadd timestampdiff timezone_abbr timezone_minute timezone_region to to_base64 to_date to_days to_seconds todatetimeoffset trace tracking transaction transactional translate translation treat trigger trigger_nestlevel triggers trim truncate try_cast try_convert try_parse type ub1 ub2 ub4 ucase unarchived unbounded uncompress under undo unhex unicode uniform uninstall union unique unix_timestamp unknown unlimited unlock unnest unpivot unrecoverable unsafe unsigned until untrusted unusable unused update updated upgrade upped upper upsert url urowid usable usage use use_stored_outlines user user_data user_resources users using utc_date utc_timestamp uuid uuid_short validate validate_password_strength validation valist value values var var_samp varcharc vari varia variab variabl variable variables variance varp varraw varrawc varray verify version versions view virtual visible void wait wallet warning warnings week weekday weekofyear wellformed when whene whenev wheneve whenever where while whitespace window with within without work wrapped xdb xml xmlagg xmlattributes xmlcast xmlcolattval xmlelement xmlexists xmlforest xmlindex xmlnamespaces xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltype xor year year_to_month years yearweek",
          literal: "true false null unknown",
          built_in: "array bigint binary bit blob bool boolean char character date dec decimal float int int8 integer interval number numeric real record serial serial8 smallint text time timestamp tinyint varchar varchar2 varying void"
        },
        contains: [
          {
            className: "string",
            begin: "'",
            end: "'",
            contains: [{begin: "''"}]
          },
          {
            className: "string",
            begin: '"',
            end: '"',
            contains: [{begin: '""'}]
          },
          {
            className: "string",
            begin: "`",
            end: "`"
          },
          hljs2.C_NUMBER_MODE,
          hljs2.C_BLOCK_COMMENT_MODE,
          COMMENT_MODE,
          hljs2.HASH_COMMENT_MODE
        ]
      },
      hljs2.C_BLOCK_COMMENT_MODE,
      COMMENT_MODE,
      hljs2.HASH_COMMENT_MODE
    ]
  };
}
var sql_more_1 = sql_more;
function source$5(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function concat$5(...args) {
  const joined = args.map((x2) => source$5(x2)).join("");
  return joined;
}
function either$3(...args) {
  const joined = "(" + args.map((x2) => source$5(x2)).join("|") + ")";
  return joined;
}
function sql(hljs2) {
  const COMMENT_MODE = hljs2.COMMENT("--", "$");
  const STRING = {
    className: "string",
    variants: [
      {
        begin: /'/,
        end: /'/,
        contains: [
          {begin: /''/}
        ]
      }
    ]
  };
  const QUOTED_IDENTIFIER = {
    begin: /"/,
    end: /"/,
    contains: [{begin: /""/}]
  };
  const LITERALS2 = [
    "true",
    "false",
    "unknown"
  ];
  const MULTI_WORD_TYPES = [
    "double precision",
    "large object",
    "with timezone",
    "without timezone"
  ];
  const TYPES2 = [
    "bigint",
    "binary",
    "blob",
    "boolean",
    "char",
    "character",
    "clob",
    "date",
    "dec",
    "decfloat",
    "decimal",
    "float",
    "int",
    "integer",
    "interval",
    "nchar",
    "nclob",
    "national",
    "numeric",
    "real",
    "row",
    "smallint",
    "time",
    "timestamp",
    "varchar",
    "varying",
    "varbinary"
  ];
  const NON_RESERVED_WORDS = [
    "add",
    "asc",
    "collation",
    "desc",
    "final",
    "first",
    "last",
    "view"
  ];
  const RESERVED_WORDS = [
    "abs",
    "acos",
    "all",
    "allocate",
    "alter",
    "and",
    "any",
    "are",
    "array",
    "array_agg",
    "array_max_cardinality",
    "as",
    "asensitive",
    "asin",
    "asymmetric",
    "at",
    "atan",
    "atomic",
    "authorization",
    "avg",
    "begin",
    "begin_frame",
    "begin_partition",
    "between",
    "bigint",
    "binary",
    "blob",
    "boolean",
    "both",
    "by",
    "call",
    "called",
    "cardinality",
    "cascaded",
    "case",
    "cast",
    "ceil",
    "ceiling",
    "char",
    "char_length",
    "character",
    "character_length",
    "check",
    "classifier",
    "clob",
    "close",
    "coalesce",
    "collate",
    "collect",
    "column",
    "commit",
    "condition",
    "connect",
    "constraint",
    "contains",
    "convert",
    "copy",
    "corr",
    "corresponding",
    "cos",
    "cosh",
    "count",
    "covar_pop",
    "covar_samp",
    "create",
    "cross",
    "cube",
    "cume_dist",
    "current",
    "current_catalog",
    "current_date",
    "current_default_transform_group",
    "current_path",
    "current_role",
    "current_row",
    "current_schema",
    "current_time",
    "current_timestamp",
    "current_path",
    "current_role",
    "current_transform_group_for_type",
    "current_user",
    "cursor",
    "cycle",
    "date",
    "day",
    "deallocate",
    "dec",
    "decimal",
    "decfloat",
    "declare",
    "default",
    "define",
    "delete",
    "dense_rank",
    "deref",
    "describe",
    "deterministic",
    "disconnect",
    "distinct",
    "double",
    "drop",
    "dynamic",
    "each",
    "element",
    "else",
    "empty",
    "end",
    "end_frame",
    "end_partition",
    "end-exec",
    "equals",
    "escape",
    "every",
    "except",
    "exec",
    "execute",
    "exists",
    "exp",
    "external",
    "extract",
    "false",
    "fetch",
    "filter",
    "first_value",
    "float",
    "floor",
    "for",
    "foreign",
    "frame_row",
    "free",
    "from",
    "full",
    "function",
    "fusion",
    "get",
    "global",
    "grant",
    "group",
    "grouping",
    "groups",
    "having",
    "hold",
    "hour",
    "identity",
    "in",
    "indicator",
    "initial",
    "inner",
    "inout",
    "insensitive",
    "insert",
    "int",
    "integer",
    "intersect",
    "intersection",
    "interval",
    "into",
    "is",
    "join",
    "json_array",
    "json_arrayagg",
    "json_exists",
    "json_object",
    "json_objectagg",
    "json_query",
    "json_table",
    "json_table_primitive",
    "json_value",
    "lag",
    "language",
    "large",
    "last_value",
    "lateral",
    "lead",
    "leading",
    "left",
    "like",
    "like_regex",
    "listagg",
    "ln",
    "local",
    "localtime",
    "localtimestamp",
    "log",
    "log10",
    "lower",
    "match",
    "match_number",
    "match_recognize",
    "matches",
    "max",
    "member",
    "merge",
    "method",
    "min",
    "minute",
    "mod",
    "modifies",
    "module",
    "month",
    "multiset",
    "national",
    "natural",
    "nchar",
    "nclob",
    "new",
    "no",
    "none",
    "normalize",
    "not",
    "nth_value",
    "ntile",
    "null",
    "nullif",
    "numeric",
    "octet_length",
    "occurrences_regex",
    "of",
    "offset",
    "old",
    "omit",
    "on",
    "one",
    "only",
    "open",
    "or",
    "order",
    "out",
    "outer",
    "over",
    "overlaps",
    "overlay",
    "parameter",
    "partition",
    "pattern",
    "per",
    "percent",
    "percent_rank",
    "percentile_cont",
    "percentile_disc",
    "period",
    "portion",
    "position",
    "position_regex",
    "power",
    "precedes",
    "precision",
    "prepare",
    "primary",
    "procedure",
    "ptf",
    "range",
    "rank",
    "reads",
    "real",
    "recursive",
    "ref",
    "references",
    "referencing",
    "regr_avgx",
    "regr_avgy",
    "regr_count",
    "regr_intercept",
    "regr_r2",
    "regr_slope",
    "regr_sxx",
    "regr_sxy",
    "regr_syy",
    "release",
    "result",
    "return",
    "returns",
    "revoke",
    "right",
    "rollback",
    "rollup",
    "row",
    "row_number",
    "rows",
    "running",
    "savepoint",
    "scope",
    "scroll",
    "search",
    "second",
    "seek",
    "select",
    "sensitive",
    "session_user",
    "set",
    "show",
    "similar",
    "sin",
    "sinh",
    "skip",
    "smallint",
    "some",
    "specific",
    "specifictype",
    "sql",
    "sqlexception",
    "sqlstate",
    "sqlwarning",
    "sqrt",
    "start",
    "static",
    "stddev_pop",
    "stddev_samp",
    "submultiset",
    "subset",
    "substring",
    "substring_regex",
    "succeeds",
    "sum",
    "symmetric",
    "system",
    "system_time",
    "system_user",
    "table",
    "tablesample",
    "tan",
    "tanh",
    "then",
    "time",
    "timestamp",
    "timezone_hour",
    "timezone_minute",
    "to",
    "trailing",
    "translate",
    "translate_regex",
    "translation",
    "treat",
    "trigger",
    "trim",
    "trim_array",
    "true",
    "truncate",
    "uescape",
    "union",
    "unique",
    "unknown",
    "unnest",
    "update   ",
    "upper",
    "user",
    "using",
    "value",
    "values",
    "value_of",
    "var_pop",
    "var_samp",
    "varbinary",
    "varchar",
    "varying",
    "versioning",
    "when",
    "whenever",
    "where",
    "width_bucket",
    "window",
    "with",
    "within",
    "without",
    "year"
  ];
  const RESERVED_FUNCTIONS = [
    "abs",
    "acos",
    "array_agg",
    "asin",
    "atan",
    "avg",
    "cast",
    "ceil",
    "ceiling",
    "coalesce",
    "corr",
    "cos",
    "cosh",
    "count",
    "covar_pop",
    "covar_samp",
    "cume_dist",
    "dense_rank",
    "deref",
    "element",
    "exp",
    "extract",
    "first_value",
    "floor",
    "json_array",
    "json_arrayagg",
    "json_exists",
    "json_object",
    "json_objectagg",
    "json_query",
    "json_table",
    "json_table_primitive",
    "json_value",
    "lag",
    "last_value",
    "lead",
    "listagg",
    "ln",
    "log",
    "log10",
    "lower",
    "max",
    "min",
    "mod",
    "nth_value",
    "ntile",
    "nullif",
    "percent_rank",
    "percentile_cont",
    "percentile_disc",
    "position",
    "position_regex",
    "power",
    "rank",
    "regr_avgx",
    "regr_avgy",
    "regr_count",
    "regr_intercept",
    "regr_r2",
    "regr_slope",
    "regr_sxx",
    "regr_sxy",
    "regr_syy",
    "row_number",
    "sin",
    "sinh",
    "sqrt",
    "stddev_pop",
    "stddev_samp",
    "substring",
    "substring_regex",
    "sum",
    "tan",
    "tanh",
    "translate",
    "translate_regex",
    "treat",
    "trim",
    "trim_array",
    "unnest",
    "upper",
    "value_of",
    "var_pop",
    "var_samp",
    "width_bucket"
  ];
  const POSSIBLE_WITHOUT_PARENS = [
    "current_catalog",
    "current_date",
    "current_default_transform_group",
    "current_path",
    "current_role",
    "current_schema",
    "current_transform_group_for_type",
    "current_user",
    "session_user",
    "system_time",
    "system_user",
    "current_time",
    "localtime",
    "current_timestamp",
    "localtimestamp"
  ];
  const COMBOS = [
    "create table",
    "insert into",
    "primary key",
    "foreign key",
    "not null",
    "alter table",
    "add constraint",
    "grouping sets",
    "on overflow",
    "character set",
    "respect nulls",
    "ignore nulls",
    "nulls first",
    "nulls last",
    "depth first",
    "breadth first"
  ];
  const FUNCTIONS = RESERVED_FUNCTIONS;
  const KEYWORDS2 = [...RESERVED_WORDS, ...NON_RESERVED_WORDS].filter((keyword) => {
    return !RESERVED_FUNCTIONS.includes(keyword);
  });
  const VARIABLE = {
    className: "variable",
    begin: /@[a-z0-9]+/
  };
  const OPERATOR = {
    className: "operator",
    begin: /[-+*/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?/,
    relevance: 0
  };
  const FUNCTION_CALL = {
    begin: concat$5(/\b/, either$3(...FUNCTIONS), /\s*\(/),
    keywords: {
      built_in: FUNCTIONS
    }
  };
  function reduceRelevancy(list, {exceptions, when} = {}) {
    const qualifyFn = when;
    exceptions = exceptions || [];
    return list.map((item) => {
      if (item.match(/\|\d+$/) || exceptions.includes(item)) {
        return item;
      } else if (qualifyFn(item)) {
        return `${item}|0`;
      } else {
        return item;
      }
    });
  }
  return {
    name: "SQL",
    case_insensitive: true,
    illegal: /[{}]|<\//,
    keywords: {
      $pattern: /\b[\w\.]+/,
      keyword: reduceRelevancy(KEYWORDS2, {when: (x2) => x2.length < 3}),
      literal: LITERALS2,
      type: TYPES2,
      built_in: POSSIBLE_WITHOUT_PARENS
    },
    contains: [
      {
        begin: either$3(...COMBOS),
        keywords: {
          $pattern: /[\w\.]+/,
          keyword: KEYWORDS2.concat(COMBOS),
          literal: LITERALS2,
          type: TYPES2
        }
      },
      {
        className: "type",
        begin: either$3(...MULTI_WORD_TYPES)
      },
      FUNCTION_CALL,
      VARIABLE,
      STRING,
      QUOTED_IDENTIFIER,
      hljs2.C_NUMBER_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      COMMENT_MODE,
      OPERATOR
    ]
  };
}
var sql_1 = sql;
function stan(hljs2) {
  const BLOCKS = [
    "functions",
    "model",
    "data",
    "parameters",
    "quantities",
    "transformed",
    "generated"
  ];
  const STATEMENTS = [
    "for",
    "in",
    "if",
    "else",
    "while",
    "break",
    "continue",
    "return"
  ];
  const SPECIAL_FUNCTIONS = [
    "print",
    "reject",
    "increment_log_prob|10",
    "integrate_ode|10",
    "integrate_ode_rk45|10",
    "integrate_ode_bdf|10",
    "algebra_solver"
  ];
  const VAR_TYPES = [
    "int",
    "real",
    "vector",
    "ordered",
    "positive_ordered",
    "simplex",
    "unit_vector",
    "row_vector",
    "matrix",
    "cholesky_factor_corr|10",
    "cholesky_factor_cov|10",
    "corr_matrix|10",
    "cov_matrix|10",
    "void"
  ];
  const FUNCTIONS = [
    "Phi",
    "Phi_approx",
    "abs",
    "acos",
    "acosh",
    "algebra_solver",
    "append_array",
    "append_col",
    "append_row",
    "asin",
    "asinh",
    "atan",
    "atan2",
    "atanh",
    "bernoulli_cdf",
    "bernoulli_lccdf",
    "bernoulli_lcdf",
    "bernoulli_logit_lpmf",
    "bernoulli_logit_rng",
    "bernoulli_lpmf",
    "bernoulli_rng",
    "bessel_first_kind",
    "bessel_second_kind",
    "beta_binomial_cdf",
    "beta_binomial_lccdf",
    "beta_binomial_lcdf",
    "beta_binomial_lpmf",
    "beta_binomial_rng",
    "beta_cdf",
    "beta_lccdf",
    "beta_lcdf",
    "beta_lpdf",
    "beta_rng",
    "binary_log_loss",
    "binomial_cdf",
    "binomial_coefficient_log",
    "binomial_lccdf",
    "binomial_lcdf",
    "binomial_logit_lpmf",
    "binomial_lpmf",
    "binomial_rng",
    "block",
    "categorical_logit_lpmf",
    "categorical_logit_rng",
    "categorical_lpmf",
    "categorical_rng",
    "cauchy_cdf",
    "cauchy_lccdf",
    "cauchy_lcdf",
    "cauchy_lpdf",
    "cauchy_rng",
    "cbrt",
    "ceil",
    "chi_square_cdf",
    "chi_square_lccdf",
    "chi_square_lcdf",
    "chi_square_lpdf",
    "chi_square_rng",
    "cholesky_decompose",
    "choose",
    "col",
    "cols",
    "columns_dot_product",
    "columns_dot_self",
    "cos",
    "cosh",
    "cov_exp_quad",
    "crossprod",
    "csr_extract_u",
    "csr_extract_v",
    "csr_extract_w",
    "csr_matrix_times_vector",
    "csr_to_dense_matrix",
    "cumulative_sum",
    "determinant",
    "diag_matrix",
    "diag_post_multiply",
    "diag_pre_multiply",
    "diagonal",
    "digamma",
    "dims",
    "dirichlet_lpdf",
    "dirichlet_rng",
    "distance",
    "dot_product",
    "dot_self",
    "double_exponential_cdf",
    "double_exponential_lccdf",
    "double_exponential_lcdf",
    "double_exponential_lpdf",
    "double_exponential_rng",
    "e",
    "eigenvalues_sym",
    "eigenvectors_sym",
    "erf",
    "erfc",
    "exp",
    "exp2",
    "exp_mod_normal_cdf",
    "exp_mod_normal_lccdf",
    "exp_mod_normal_lcdf",
    "exp_mod_normal_lpdf",
    "exp_mod_normal_rng",
    "expm1",
    "exponential_cdf",
    "exponential_lccdf",
    "exponential_lcdf",
    "exponential_lpdf",
    "exponential_rng",
    "fabs",
    "falling_factorial",
    "fdim",
    "floor",
    "fma",
    "fmax",
    "fmin",
    "fmod",
    "frechet_cdf",
    "frechet_lccdf",
    "frechet_lcdf",
    "frechet_lpdf",
    "frechet_rng",
    "gamma_cdf",
    "gamma_lccdf",
    "gamma_lcdf",
    "gamma_lpdf",
    "gamma_p",
    "gamma_q",
    "gamma_rng",
    "gaussian_dlm_obs_lpdf",
    "get_lp",
    "gumbel_cdf",
    "gumbel_lccdf",
    "gumbel_lcdf",
    "gumbel_lpdf",
    "gumbel_rng",
    "head",
    "hypergeometric_lpmf",
    "hypergeometric_rng",
    "hypot",
    "inc_beta",
    "int_step",
    "integrate_ode",
    "integrate_ode_bdf",
    "integrate_ode_rk45",
    "inv",
    "inv_Phi",
    "inv_chi_square_cdf",
    "inv_chi_square_lccdf",
    "inv_chi_square_lcdf",
    "inv_chi_square_lpdf",
    "inv_chi_square_rng",
    "inv_cloglog",
    "inv_gamma_cdf",
    "inv_gamma_lccdf",
    "inv_gamma_lcdf",
    "inv_gamma_lpdf",
    "inv_gamma_rng",
    "inv_logit",
    "inv_sqrt",
    "inv_square",
    "inv_wishart_lpdf",
    "inv_wishart_rng",
    "inverse",
    "inverse_spd",
    "is_inf",
    "is_nan",
    "lbeta",
    "lchoose",
    "lgamma",
    "lkj_corr_cholesky_lpdf",
    "lkj_corr_cholesky_rng",
    "lkj_corr_lpdf",
    "lkj_corr_rng",
    "lmgamma",
    "lmultiply",
    "log",
    "log10",
    "log1m",
    "log1m_exp",
    "log1m_inv_logit",
    "log1p",
    "log1p_exp",
    "log2",
    "log_determinant",
    "log_diff_exp",
    "log_falling_factorial",
    "log_inv_logit",
    "log_mix",
    "log_rising_factorial",
    "log_softmax",
    "log_sum_exp",
    "logistic_cdf",
    "logistic_lccdf",
    "logistic_lcdf",
    "logistic_lpdf",
    "logistic_rng",
    "logit",
    "lognormal_cdf",
    "lognormal_lccdf",
    "lognormal_lcdf",
    "lognormal_lpdf",
    "lognormal_rng",
    "machine_precision",
    "matrix_exp",
    "max",
    "mdivide_left_spd",
    "mdivide_left_tri_low",
    "mdivide_right_spd",
    "mdivide_right_tri_low",
    "mean",
    "min",
    "modified_bessel_first_kind",
    "modified_bessel_second_kind",
    "multi_gp_cholesky_lpdf",
    "multi_gp_lpdf",
    "multi_normal_cholesky_lpdf",
    "multi_normal_cholesky_rng",
    "multi_normal_lpdf",
    "multi_normal_prec_lpdf",
    "multi_normal_rng",
    "multi_student_t_lpdf",
    "multi_student_t_rng",
    "multinomial_lpmf",
    "multinomial_rng",
    "multiply_log",
    "multiply_lower_tri_self_transpose",
    "neg_binomial_2_cdf",
    "neg_binomial_2_lccdf",
    "neg_binomial_2_lcdf",
    "neg_binomial_2_log_lpmf",
    "neg_binomial_2_log_rng",
    "neg_binomial_2_lpmf",
    "neg_binomial_2_rng",
    "neg_binomial_cdf",
    "neg_binomial_lccdf",
    "neg_binomial_lcdf",
    "neg_binomial_lpmf",
    "neg_binomial_rng",
    "negative_infinity",
    "normal_cdf",
    "normal_lccdf",
    "normal_lcdf",
    "normal_lpdf",
    "normal_rng",
    "not_a_number",
    "num_elements",
    "ordered_logistic_lpmf",
    "ordered_logistic_rng",
    "owens_t",
    "pareto_cdf",
    "pareto_lccdf",
    "pareto_lcdf",
    "pareto_lpdf",
    "pareto_rng",
    "pareto_type_2_cdf",
    "pareto_type_2_lccdf",
    "pareto_type_2_lcdf",
    "pareto_type_2_lpdf",
    "pareto_type_2_rng",
    "pi",
    "poisson_cdf",
    "poisson_lccdf",
    "poisson_lcdf",
    "poisson_log_lpmf",
    "poisson_log_rng",
    "poisson_lpmf",
    "poisson_rng",
    "positive_infinity",
    "pow",
    "print",
    "prod",
    "qr_Q",
    "qr_R",
    "quad_form",
    "quad_form_diag",
    "quad_form_sym",
    "rank",
    "rayleigh_cdf",
    "rayleigh_lccdf",
    "rayleigh_lcdf",
    "rayleigh_lpdf",
    "rayleigh_rng",
    "reject",
    "rep_array",
    "rep_matrix",
    "rep_row_vector",
    "rep_vector",
    "rising_factorial",
    "round",
    "row",
    "rows",
    "rows_dot_product",
    "rows_dot_self",
    "scaled_inv_chi_square_cdf",
    "scaled_inv_chi_square_lccdf",
    "scaled_inv_chi_square_lcdf",
    "scaled_inv_chi_square_lpdf",
    "scaled_inv_chi_square_rng",
    "sd",
    "segment",
    "sin",
    "singular_values",
    "sinh",
    "size",
    "skew_normal_cdf",
    "skew_normal_lccdf",
    "skew_normal_lcdf",
    "skew_normal_lpdf",
    "skew_normal_rng",
    "softmax",
    "sort_asc",
    "sort_desc",
    "sort_indices_asc",
    "sort_indices_desc",
    "sqrt",
    "sqrt2",
    "square",
    "squared_distance",
    "step",
    "student_t_cdf",
    "student_t_lccdf",
    "student_t_lcdf",
    "student_t_lpdf",
    "student_t_rng",
    "sub_col",
    "sub_row",
    "sum",
    "tail",
    "tan",
    "tanh",
    "target",
    "tcrossprod",
    "tgamma",
    "to_array_1d",
    "to_array_2d",
    "to_matrix",
    "to_row_vector",
    "to_vector",
    "trace",
    "trace_gen_quad_form",
    "trace_quad_form",
    "trigamma",
    "trunc",
    "uniform_cdf",
    "uniform_lccdf",
    "uniform_lcdf",
    "uniform_lpdf",
    "uniform_rng",
    "variance",
    "von_mises_lpdf",
    "von_mises_rng",
    "weibull_cdf",
    "weibull_lccdf",
    "weibull_lcdf",
    "weibull_lpdf",
    "weibull_rng",
    "wiener_lpdf",
    "wishart_lpdf",
    "wishart_rng"
  ];
  const DISTRIBUTIONS = [
    "bernoulli",
    "bernoulli_logit",
    "beta",
    "beta_binomial",
    "binomial",
    "binomial_logit",
    "categorical",
    "categorical_logit",
    "cauchy",
    "chi_square",
    "dirichlet",
    "double_exponential",
    "exp_mod_normal",
    "exponential",
    "frechet",
    "gamma",
    "gaussian_dlm_obs",
    "gumbel",
    "hypergeometric",
    "inv_chi_square",
    "inv_gamma",
    "inv_wishart",
    "lkj_corr",
    "lkj_corr_cholesky",
    "logistic",
    "lognormal",
    "multi_gp",
    "multi_gp_cholesky",
    "multi_normal",
    "multi_normal_cholesky",
    "multi_normal_prec",
    "multi_student_t",
    "multinomial",
    "neg_binomial",
    "neg_binomial_2",
    "neg_binomial_2_log",
    "normal",
    "ordered_logistic",
    "pareto",
    "pareto_type_2",
    "poisson",
    "poisson_log",
    "rayleigh",
    "scaled_inv_chi_square",
    "skew_normal",
    "student_t",
    "uniform",
    "von_mises",
    "weibull",
    "wiener",
    "wishart"
  ];
  return {
    name: "Stan",
    aliases: ["stanfuncs"],
    keywords: {
      $pattern: hljs2.IDENT_RE,
      title: BLOCKS,
      keyword: STATEMENTS.concat(VAR_TYPES).concat(SPECIAL_FUNCTIONS),
      built_in: FUNCTIONS
    },
    contains: [
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.COMMENT(/#/, /$/, {
        relevance: 0,
        keywords: {
          "meta-keyword": "include"
        }
      }),
      hljs2.COMMENT(/\/\*/, /\*\//, {
        relevance: 0,
        contains: [
          {
            className: "doctag",
            begin: /@(return|param)/
          }
        ]
      }),
      {
        begin: /<\s*lower\s*=/,
        keywords: "lower"
      },
      {
        begin: /[<,]\s*upper\s*=/,
        keywords: "upper"
      },
      {
        className: "keyword",
        begin: /\btarget\s*\+=/,
        relevance: 10
      },
      {
        begin: "~\\s*(" + hljs2.IDENT_RE + ")\\s*\\(",
        keywords: DISTRIBUTIONS
      },
      {
        className: "number",
        variants: [
          {
            begin: /\b\d+(?:\.\d*)?(?:[eE][+-]?\d+)?/
          },
          {
            begin: /\.\d+(?:[eE][+-]?\d+)?\b/
          }
        ],
        relevance: 0
      },
      {
        className: "string",
        begin: '"',
        end: '"',
        relevance: 0
      }
    ]
  };
}
var stan_1 = stan;
function stata(hljs2) {
  return {
    name: "Stata",
    aliases: [
      "do",
      "ado"
    ],
    case_insensitive: true,
    keywords: "if else in foreach for forv forva forval forvalu forvalue forvalues by bys bysort xi quietly qui capture about ac ac_7 acprplot acprplot_7 adjust ado adopath adoupdate alpha ameans an ano anov anova anova_estat anova_terms anovadef aorder ap app appe appen append arch arch_dr arch_estat arch_p archlm areg areg_p args arima arima_dr arima_estat arima_p as asmprobit asmprobit_estat asmprobit_lf asmprobit_mfx__dlg asmprobit_p ass asse asser assert avplot avplot_7 avplots avplots_7 bcskew0 bgodfrey bias binreg bip0_lf biplot bipp_lf bipr_lf bipr_p biprobit bitest bitesti bitowt blogit bmemsize boot bootsamp bootstrap bootstrap_8 boxco_l boxco_p boxcox boxcox_6 boxcox_p bprobit br break brier bro brow brows browse brr brrstat bs bs_7 bsampl_w bsample bsample_7 bsqreg bstat bstat_7 bstat_8 bstrap bstrap_7 bubble bubbleplot ca ca_estat ca_p cabiplot camat canon canon_8 canon_8_p canon_estat canon_p cap caprojection capt captu captur capture cat cc cchart cchart_7 cci cd censobs_table centile cf char chdir checkdlgfiles checkestimationsample checkhlpfiles checksum chelp ci cii cl class classutil clear cli clis clist clo clog clog_lf clog_p clogi clogi_sw clogit clogit_lf clogit_p clogitp clogl_sw cloglog clonevar clslistarray cluster cluster_measures cluster_stop cluster_tree cluster_tree_8 clustermat cmdlog cnr cnre cnreg cnreg_p cnreg_sw cnsreg codebook collaps4 collapse colormult_nb colormult_nw compare compress conf confi confir confirm conren cons const constr constra constrai constrain constraint continue contract copy copyright copysource cor corc corr corr2data corr_anti corr_kmo corr_smc corre correl correla correlat correlate corrgram cou coun count cox cox_p cox_sw coxbase coxhaz coxvar cprplot cprplot_7 crc cret cretu cretur creturn cross cs cscript cscript_log csi ct ct_is ctset ctst_5 ctst_st cttost cumsp cumsp_7 cumul cusum cusum_7 cutil d|0 datasig datasign datasigna datasignat datasignatu datasignatur datasignature datetof db dbeta de dec deco decod decode deff des desc descr descri describ describe destring dfbeta dfgls dfuller di di_g dir dirstats dis discard disp disp_res disp_s displ displa display distinct do doe doed doedi doedit dotplot dotplot_7 dprobit drawnorm drop ds ds_util dstdize duplicates durbina dwstat dydx e|0 ed edi edit egen eivreg emdef en enc enco encod encode eq erase ereg ereg_lf ereg_p ereg_sw ereghet ereghet_glf ereghet_glf_sh ereghet_gp ereghet_ilf ereghet_ilf_sh ereghet_ip eret eretu eretur ereturn err erro error esize est est_cfexist est_cfname est_clickable est_expand est_hold est_table est_unhold est_unholdok estat estat_default estat_summ estat_vce_only esti estimates etodow etof etomdy ex exi exit expand expandcl fac fact facto factor factor_estat factor_p factor_pca_rotated factor_rotate factormat fcast fcast_compute fcast_graph fdades fdadesc fdadescr fdadescri fdadescrib fdadescribe fdasav fdasave fdause fh_st file open file read file close file filefilter fillin find_hlp_file findfile findit findit_7 fit fl fli flis flist for5_0 forest forestplot form forma format fpredict frac_154 frac_adj frac_chk frac_cox frac_ddp frac_dis frac_dv frac_in frac_mun frac_pp frac_pq frac_pv frac_wgt frac_xo fracgen fracplot fracplot_7 fracpoly fracpred fron_ex fron_hn fron_p fron_tn fron_tn2 frontier ftodate ftoe ftomdy ftowdate funnel funnelplot g|0 gamhet_glf gamhet_gp gamhet_ilf gamhet_ip gamma gamma_d2 gamma_p gamma_sw gammahet gdi_hexagon gdi_spokes ge gen gene gener genera generat generate genrank genstd genvmean gettoken gl gladder gladder_7 glim_l01 glim_l02 glim_l03 glim_l04 glim_l05 glim_l06 glim_l07 glim_l08 glim_l09 glim_l10 glim_l11 glim_l12 glim_lf glim_mu glim_nw1 glim_nw2 glim_nw3 glim_p glim_v1 glim_v2 glim_v3 glim_v4 glim_v5 glim_v6 glim_v7 glm glm_6 glm_p glm_sw glmpred glo glob globa global glogit glogit_8 glogit_p gmeans gnbre_lf gnbreg gnbreg_5 gnbreg_p gomp_lf gompe_sw gomper_p gompertz gompertzhet gomphet_glf gomphet_glf_sh gomphet_gp gomphet_ilf gomphet_ilf_sh gomphet_ip gphdot gphpen gphprint gprefs gprobi_p gprobit gprobit_8 gr gr7 gr_copy gr_current gr_db gr_describe gr_dir gr_draw gr_draw_replay gr_drop gr_edit gr_editviewopts gr_example gr_example2 gr_export gr_print gr_qscheme gr_query gr_read gr_rename gr_replay gr_save gr_set gr_setscheme gr_table gr_undo gr_use graph graph7 grebar greigen greigen_7 greigen_8 grmeanby grmeanby_7 gs_fileinfo gs_filetype gs_graphinfo gs_stat gsort gwood h|0 hadimvo hareg hausman haver he heck_d2 heckma_p heckman heckp_lf heckpr_p heckprob hel help hereg hetpr_lf hetpr_p hetprob hettest hexdump hilite hist hist_7 histogram hlogit hlu hmeans hotel hotelling hprobit hreg hsearch icd9 icd9_ff icd9p iis impute imtest inbase include inf infi infil infile infix inp inpu input ins insheet insp inspe inspec inspect integ inten intreg intreg_7 intreg_p intrg2_ll intrg_ll intrg_ll2 ipolate iqreg ir irf irf_create irfm iri is_svy is_svysum isid istdize ivprob_1_lf ivprob_lf ivprobit ivprobit_p ivreg ivreg_footnote ivtob_1_lf ivtob_lf ivtobit ivtobit_p jackknife jacknife jknife jknife_6 jknife_8 jkstat joinby kalarma1 kap kap_3 kapmeier kappa kapwgt kdensity kdensity_7 keep ksm ksmirnov ktau kwallis l|0 la lab labbe labbeplot labe label labelbook ladder levels levelsof leverage lfit lfit_p li lincom line linktest lis list lloghet_glf lloghet_glf_sh lloghet_gp lloghet_ilf lloghet_ilf_sh lloghet_ip llogi_sw llogis_p llogist llogistic llogistichet lnorm_lf lnorm_sw lnorma_p lnormal lnormalhet lnormhet_glf lnormhet_glf_sh lnormhet_gp lnormhet_ilf lnormhet_ilf_sh lnormhet_ip lnskew0 loadingplot loc loca local log logi logis_lf logistic logistic_p logit logit_estat logit_p loglogs logrank loneway lookfor lookup lowess lowess_7 lpredict lrecomp lroc lroc_7 lrtest ls lsens lsens_7 lsens_x lstat ltable ltable_7 ltriang lv lvr2plot lvr2plot_7 m|0 ma mac macr macro makecns man manova manova_estat manova_p manovatest mantel mark markin markout marksample mat mat_capp mat_order mat_put_rr mat_rapp mata mata_clear mata_describe mata_drop mata_matdescribe mata_matsave mata_matuse mata_memory mata_mlib mata_mosave mata_rename mata_which matalabel matcproc matlist matname matr matri matrix matrix_input__dlg matstrik mcc mcci md0_ md1_ md1debug_ md2_ md2debug_ mds mds_estat mds_p mdsconfig mdslong mdsmat mdsshepard mdytoe mdytof me_derd mean means median memory memsize menl meqparse mer merg merge meta mfp mfx mhelp mhodds minbound mixed_ll mixed_ll_reparm mkassert mkdir mkmat mkspline ml ml_5 ml_adjs ml_bhhhs ml_c_d ml_check ml_clear ml_cnt ml_debug ml_defd ml_e0 ml_e0_bfgs ml_e0_cycle ml_e0_dfp ml_e0i ml_e1 ml_e1_bfgs ml_e1_bhhh ml_e1_cycle ml_e1_dfp ml_e2 ml_e2_cycle ml_ebfg0 ml_ebfr0 ml_ebfr1 ml_ebh0q ml_ebhh0 ml_ebhr0 ml_ebr0i ml_ecr0i ml_edfp0 ml_edfr0 ml_edfr1 ml_edr0i ml_eds ml_eer0i ml_egr0i ml_elf ml_elf_bfgs ml_elf_bhhh ml_elf_cycle ml_elf_dfp ml_elfi ml_elfs ml_enr0i ml_enrr0 ml_erdu0 ml_erdu0_bfgs ml_erdu0_bhhh ml_erdu0_bhhhq ml_erdu0_cycle ml_erdu0_dfp ml_erdu0_nrbfgs ml_exde ml_footnote ml_geqnr ml_grad0 ml_graph ml_hbhhh ml_hd0 ml_hold ml_init ml_inv ml_log ml_max ml_mlout ml_mlout_8 ml_model ml_nb0 ml_opt ml_p ml_plot ml_query ml_rdgrd ml_repor ml_s_e ml_score ml_searc ml_technique ml_unhold mleval mlf_ mlmatbysum mlmatsum mlog mlogi mlogit mlogit_footnote mlogit_p mlopts mlsum mlvecsum mnl0_ mor more mov move mprobit mprobit_lf mprobit_p mrdu0_ mrdu1_ mvdecode mvencode mvreg mvreg_estat n|0 nbreg nbreg_al nbreg_lf nbreg_p nbreg_sw nestreg net newey newey_7 newey_p news nl nl_7 nl_9 nl_9_p nl_p nl_p_7 nlcom nlcom_p nlexp2 nlexp2_7 nlexp2a nlexp2a_7 nlexp3 nlexp3_7 nlgom3 nlgom3_7 nlgom4 nlgom4_7 nlinit nllog3 nllog3_7 nllog4 nllog4_7 nlog_rd nlogit nlogit_p nlogitgen nlogittree nlpred no nobreak noi nois noisi noisil noisily note notes notes_dlg nptrend numlabel numlist odbc old_ver olo olog ologi ologi_sw ologit ologit_p ologitp on one onew onewa oneway op_colnm op_comp op_diff op_inv op_str opr opro oprob oprob_sw oprobi oprobi_p oprobit oprobitp opts_exclusive order orthog orthpoly ou out outf outfi outfil outfile outs outsh outshe outshee outsheet ovtest pac pac_7 palette parse parse_dissim pause pca pca_8 pca_display pca_estat pca_p pca_rotate pcamat pchart pchart_7 pchi pchi_7 pcorr pctile pentium pergram pergram_7 permute permute_8 personal peto_st pkcollapse pkcross pkequiv pkexamine pkexamine_7 pkshape pksumm pksumm_7 pl plo plot plugin pnorm pnorm_7 poisgof poiss_lf poiss_sw poisso_p poisson poisson_estat post postclose postfile postutil pperron pr prais prais_e prais_e2 prais_p predict predictnl preserve print pro prob probi probit probit_estat probit_p proc_time procoverlay procrustes procrustes_estat procrustes_p profiler prog progr progra program prop proportion prtest prtesti pwcorr pwd q\\s qby qbys qchi qchi_7 qladder qladder_7 qnorm qnorm_7 qqplot qqplot_7 qreg qreg_c qreg_p qreg_sw qu quadchk quantile quantile_7 que quer query range ranksum ratio rchart rchart_7 rcof recast reclink recode reg reg3 reg3_p regdw regr regre regre_p2 regres regres_p regress regress_estat regriv_p remap ren rena renam rename renpfix repeat replace report reshape restore ret retu retur return rm rmdir robvar roccomp roccomp_7 roccomp_8 rocf_lf rocfit rocfit_8 rocgold rocplot rocplot_7 roctab roctab_7 rolling rologit rologit_p rot rota rotat rotate rotatemat rreg rreg_p ru run runtest rvfplot rvfplot_7 rvpplot rvpplot_7 sa safesum sample sampsi sav save savedresults saveold sc sca scal scala scalar scatter scm_mine sco scob_lf scob_p scobi_sw scobit scor score scoreplot scoreplot_help scree screeplot screeplot_help sdtest sdtesti se search separate seperate serrbar serrbar_7 serset set set_defaults sfrancia sh she shel shell shewhart shewhart_7 signestimationsample signrank signtest simul simul_7 simulate simulate_8 sktest sleep slogit slogit_d2 slogit_p smooth snapspan so sor sort spearman spikeplot spikeplot_7 spikeplt spline_x split sqreg sqreg_p sret sretu sretur sreturn ssc st st_ct st_hc st_hcd st_hcd_sh st_is st_issys st_note st_promo st_set st_show st_smpl st_subid stack statsby statsby_8 stbase stci stci_7 stcox stcox_estat stcox_fr stcox_fr_ll stcox_p stcox_sw stcoxkm stcoxkm_7 stcstat stcurv stcurve stcurve_7 stdes stem stepwise stereg stfill stgen stir stjoin stmc stmh stphplot stphplot_7 stphtest stphtest_7 stptime strate strate_7 streg streg_sw streset sts sts_7 stset stsplit stsum sttocc sttoct stvary stweib su suest suest_8 sum summ summa summar summari summariz summarize sunflower sureg survcurv survsum svar svar_p svmat svy svy_disp svy_dreg svy_est svy_est_7 svy_estat svy_get svy_gnbreg_p svy_head svy_header svy_heckman_p svy_heckprob_p svy_intreg_p svy_ivreg_p svy_logistic_p svy_logit_p svy_mlogit_p svy_nbreg_p svy_ologit_p svy_oprobit_p svy_poisson_p svy_probit_p svy_regress_p svy_sub svy_sub_7 svy_x svy_x_7 svy_x_p svydes svydes_8 svygen svygnbreg svyheckman svyheckprob svyintreg svyintreg_7 svyintrg svyivreg svylc svylog_p svylogit svymarkout svymarkout_8 svymean svymlog svymlogit svynbreg svyolog svyologit svyoprob svyoprobit svyopts svypois svypois_7 svypoisson svyprobit svyprobt svyprop svyprop_7 svyratio svyreg svyreg_p svyregress svyset svyset_7 svyset_8 svytab svytab_7 svytest svytotal sw sw_8 swcnreg swcox swereg swilk swlogis swlogit swologit swoprbt swpois swprobit swqreg swtobit swweib symmetry symmi symplot symplot_7 syntax sysdescribe sysdir sysuse szroeter ta tab tab1 tab2 tab_or tabd tabdi tabdis tabdisp tabi table tabodds tabodds_7 tabstat tabu tabul tabula tabulat tabulate te tempfile tempname tempvar tes test testnl testparm teststd tetrachoric time_it timer tis tob tobi tobit tobit_p tobit_sw token tokeni tokeniz tokenize tostring total translate translator transmap treat_ll treatr_p treatreg trim trimfill trnb_cons trnb_mean trpoiss_d2 trunc_ll truncr_p truncreg tsappend tset tsfill tsline tsline_ex tsreport tsrevar tsrline tsset tssmooth tsunab ttest ttesti tut_chk tut_wait tutorial tw tware_st two twoway twoway__fpfit_serset twoway__function_gen twoway__histogram_gen twoway__ipoint_serset twoway__ipoints_serset twoway__kdensity_gen twoway__lfit_serset twoway__normgen_gen twoway__pci_serset twoway__qfit_serset twoway__scatteri_serset twoway__sunflower_gen twoway_ksm_serset ty typ type typeof u|0 unab unabbrev unabcmd update us use uselabel var var_mkcompanion var_p varbasic varfcast vargranger varirf varirf_add varirf_cgraph varirf_create varirf_ctable varirf_describe varirf_dir varirf_drop varirf_erase varirf_graph varirf_ograph varirf_rename varirf_set varirf_table varlist varlmar varnorm varsoc varstable varstable_w varstable_w2 varwle vce vec vec_fevd vec_mkphi vec_p vec_p_w vecirf_create veclmar veclmar_w vecnorm vecnorm_w vecrank vecstable verinst vers versi versio version view viewsource vif vwls wdatetof webdescribe webseek webuse weib1_lf weib2_lf weib_lf weib_lf0 weibhet_glf weibhet_glf_sh weibhet_glfa weibhet_glfa_sh weibhet_gp weibhet_ilf weibhet_ilf_sh weibhet_ilfa weibhet_ilfa_sh weibhet_ip weibu_sw weibul_p weibull weibull_c weibull_s weibullhet wh whelp whi which whil while wilc_st wilcoxon win wind windo window winexec wntestb wntestb_7 wntestq xchart xchart_7 xcorr xcorr_7 xi xi_6 xmlsav xmlsave xmluse xpose xsh xshe xshel xshell xt_iis xt_tis xtab_p xtabond xtbin_p xtclog xtcloglog xtcloglog_8 xtcloglog_d2 xtcloglog_pa_p xtcloglog_re_p xtcnt_p xtcorr xtdata xtdes xtfront_p xtfrontier xtgee xtgee_elink xtgee_estat xtgee_makeivar xtgee_p xtgee_plink xtgls xtgls_p xthaus xthausman xtht_p xthtaylor xtile xtint_p xtintreg xtintreg_8 xtintreg_d2 xtintreg_p xtivp_1 xtivp_2 xtivreg xtline xtline_ex xtlogit xtlogit_8 xtlogit_d2 xtlogit_fe_p xtlogit_pa_p xtlogit_re_p xtmixed xtmixed_estat xtmixed_p xtnb_fe xtnb_lf xtnbreg xtnbreg_pa_p xtnbreg_refe_p xtpcse xtpcse_p xtpois xtpoisson xtpoisson_d2 xtpoisson_pa_p xtpoisson_refe_p xtpred xtprobit xtprobit_8 xtprobit_d2 xtprobit_re_p xtps_fe xtps_lf xtps_ren xtps_ren_8 xtrar_p xtrc xtrc_p xtrchh xtrefe_p xtreg xtreg_be xtreg_fe xtreg_ml xtreg_pa_p xtreg_re xtregar xtrere_p xtset xtsf_ll xtsf_llti xtsum xttab xttest0 xttobit xttobit_8 xttobit_p xttrans yx yxview__barlike_draw yxview_area_draw yxview_bar_draw yxview_dot_draw yxview_dropline_draw yxview_function_draw yxview_iarrow_draw yxview_ilabels_draw yxview_normal_draw yxview_pcarrow_draw yxview_pcbarrow_draw yxview_pccapsym_draw yxview_pcscatter_draw yxview_pcspike_draw yxview_rarea_draw yxview_rbar_draw yxview_rbarm_draw yxview_rcap_draw yxview_rcapsym_draw yxview_rconnected_draw yxview_rline_draw yxview_rscatter_draw yxview_rspike_draw yxview_spike_draw yxview_sunflower_draw zap_s zinb zinb_llf zinb_plf zip zip_llf zip_p zip_plf zt_ct_5 zt_hc_5 zt_hcd_5 zt_is_5 zt_iss_5 zt_sho_5 zt_smp_5 ztbase_5 ztcox_5 ztdes_5 ztereg_5 ztfill_5 ztgen_5 ztir_5 ztjoin_5 ztnb ztnb_p ztp ztp_p zts_5 ztset_5 ztspli_5 ztsum_5 zttoct_5 ztvary_5 ztweib_5",
    contains: [
      {
        className: "symbol",
        begin: /`[a-zA-Z0-9_]+'/
      },
      {
        className: "variable",
        begin: /\$\{?[a-zA-Z0-9_]+\}?/
      },
      {
        className: "string",
        variants: [
          {
            begin: '`"[^\r\n]*?"\''
          },
          {
            begin: '"[^\r\n"]*"'
          }
        ]
      },
      {
        className: "built_in",
        variants: [
          {
            begin: "\\b(abs|acos|asin|atan|atan2|atanh|ceil|cloglog|comb|cos|digamma|exp|floor|invcloglog|invlogit|ln|lnfact|lnfactorial|lngamma|log|log10|max|min|mod|reldif|round|sign|sin|sqrt|sum|tan|tanh|trigamma|trunc|betaden|Binomial|binorm|binormal|chi2|chi2tail|dgammapda|dgammapdada|dgammapdadx|dgammapdx|dgammapdxdx|F|Fden|Ftail|gammaden|gammap|ibeta|invbinomial|invchi2|invchi2tail|invF|invFtail|invgammap|invibeta|invnchi2|invnFtail|invnibeta|invnorm|invnormal|invttail|nbetaden|nchi2|nFden|nFtail|nibeta|norm|normal|normalden|normd|npnchi2|tden|ttail|uniform|abbrev|char|index|indexnot|length|lower|ltrim|match|plural|proper|real|regexm|regexr|regexs|reverse|rtrim|string|strlen|strlower|strltrim|strmatch|strofreal|strpos|strproper|strreverse|strrtrim|strtrim|strupper|subinstr|subinword|substr|trim|upper|word|wordcount|_caller|autocode|byteorder|chop|clip|cond|e|epsdouble|epsfloat|group|inlist|inrange|irecode|matrix|maxbyte|maxdouble|maxfloat|maxint|maxlong|mi|minbyte|mindouble|minfloat|minint|minlong|missing|r|recode|replay|return|s|scalar|d|date|day|dow|doy|halfyear|mdy|month|quarter|week|year|d|daily|dofd|dofh|dofm|dofq|dofw|dofy|h|halfyearly|hofd|m|mofd|monthly|q|qofd|quarterly|tin|twithin|w|weekly|wofd|y|yearly|yh|ym|yofd|yq|yw|cholesky|colnumb|colsof|corr|det|diag|diag0cnt|el|get|hadamard|I|inv|invsym|issym|issymmetric|J|matmissing|matuniform|mreldif|nullmat|rownumb|rowsof|sweep|syminv|trace|vec|vecdiag)(?=\\()"
          }
        ]
      },
      hljs2.COMMENT("^[ 	]*\\*.*$", false),
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE
    ]
  };
}
var stata_1 = stata;
function step21(hljs2) {
  const STEP21_IDENT_RE = "[A-Z_][A-Z0-9_.]*";
  const STEP21_KEYWORDS = {
    $pattern: STEP21_IDENT_RE,
    keyword: "HEADER ENDSEC DATA"
  };
  const STEP21_START = {
    className: "meta",
    begin: "ISO-10303-21;",
    relevance: 10
  };
  const STEP21_CLOSE = {
    className: "meta",
    begin: "END-ISO-10303-21;",
    relevance: 10
  };
  return {
    name: "STEP Part 21",
    aliases: [
      "p21",
      "step",
      "stp"
    ],
    case_insensitive: true,
    keywords: STEP21_KEYWORDS,
    contains: [
      STEP21_START,
      STEP21_CLOSE,
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      hljs2.COMMENT("/\\*\\*!", "\\*/"),
      hljs2.C_NUMBER_MODE,
      hljs2.inherit(hljs2.APOS_STRING_MODE, {
        illegal: null
      }),
      hljs2.inherit(hljs2.QUOTE_STRING_MODE, {
        illegal: null
      }),
      {
        className: "string",
        begin: "'",
        end: "'"
      },
      {
        className: "symbol",
        variants: [
          {
            begin: "#",
            end: "\\d+",
            illegal: "\\W"
          }
        ]
      }
    ]
  };
}
var step21_1 = step21;
const MODES = (hljs2) => {
  return {
    IMPORTANT: {
      className: "meta",
      begin: "!important"
    },
    HEXCOLOR: {
      className: "number",
      begin: "#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})"
    },
    ATTRIBUTE_SELECTOR_MODE: {
      className: "selector-attr",
      begin: /\[/,
      end: /\]/,
      illegal: "$",
      contains: [
        hljs2.APOS_STRING_MODE,
        hljs2.QUOTE_STRING_MODE
      ]
    }
  };
};
const TAGS = [
  "a",
  "abbr",
  "address",
  "article",
  "aside",
  "audio",
  "b",
  "blockquote",
  "body",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "dd",
  "del",
  "details",
  "dfn",
  "div",
  "dl",
  "dt",
  "em",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "header",
  "hgroup",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "label",
  "legend",
  "li",
  "main",
  "mark",
  "menu",
  "nav",
  "object",
  "ol",
  "p",
  "q",
  "quote",
  "samp",
  "section",
  "span",
  "strong",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "tr",
  "ul",
  "var",
  "video"
];
const MEDIA_FEATURES = [
  "any-hover",
  "any-pointer",
  "aspect-ratio",
  "color",
  "color-gamut",
  "color-index",
  "device-aspect-ratio",
  "device-height",
  "device-width",
  "display-mode",
  "forced-colors",
  "grid",
  "height",
  "hover",
  "inverted-colors",
  "monochrome",
  "orientation",
  "overflow-block",
  "overflow-inline",
  "pointer",
  "prefers-color-scheme",
  "prefers-contrast",
  "prefers-reduced-motion",
  "prefers-reduced-transparency",
  "resolution",
  "scan",
  "scripting",
  "update",
  "width",
  "min-width",
  "max-width",
  "min-height",
  "max-height"
];
const PSEUDO_CLASSES = [
  "active",
  "any-link",
  "blank",
  "checked",
  "current",
  "default",
  "defined",
  "dir",
  "disabled",
  "drop",
  "empty",
  "enabled",
  "first",
  "first-child",
  "first-of-type",
  "fullscreen",
  "future",
  "focus",
  "focus-visible",
  "focus-within",
  "has",
  "host",
  "host-context",
  "hover",
  "indeterminate",
  "in-range",
  "invalid",
  "is",
  "lang",
  "last-child",
  "last-of-type",
  "left",
  "link",
  "local-link",
  "not",
  "nth-child",
  "nth-col",
  "nth-last-child",
  "nth-last-col",
  "nth-last-of-type",
  "nth-of-type",
  "only-child",
  "only-of-type",
  "optional",
  "out-of-range",
  "past",
  "placeholder-shown",
  "read-only",
  "read-write",
  "required",
  "right",
  "root",
  "scope",
  "target",
  "target-within",
  "user-invalid",
  "valid",
  "visited",
  "where"
];
const PSEUDO_ELEMENTS = [
  "after",
  "backdrop",
  "before",
  "cue",
  "cue-region",
  "first-letter",
  "first-line",
  "grammar-error",
  "marker",
  "part",
  "placeholder",
  "selection",
  "slotted",
  "spelling-error"
];
const ATTRIBUTES = [
  "align-content",
  "align-items",
  "align-self",
  "animation",
  "animation-delay",
  "animation-direction",
  "animation-duration",
  "animation-fill-mode",
  "animation-iteration-count",
  "animation-name",
  "animation-play-state",
  "animation-timing-function",
  "auto",
  "backface-visibility",
  "background",
  "background-attachment",
  "background-clip",
  "background-color",
  "background-image",
  "background-origin",
  "background-position",
  "background-repeat",
  "background-size",
  "border",
  "border-bottom",
  "border-bottom-color",
  "border-bottom-left-radius",
  "border-bottom-right-radius",
  "border-bottom-style",
  "border-bottom-width",
  "border-collapse",
  "border-color",
  "border-image",
  "border-image-outset",
  "border-image-repeat",
  "border-image-slice",
  "border-image-source",
  "border-image-width",
  "border-left",
  "border-left-color",
  "border-left-style",
  "border-left-width",
  "border-radius",
  "border-right",
  "border-right-color",
  "border-right-style",
  "border-right-width",
  "border-spacing",
  "border-style",
  "border-top",
  "border-top-color",
  "border-top-left-radius",
  "border-top-right-radius",
  "border-top-style",
  "border-top-width",
  "border-width",
  "bottom",
  "box-decoration-break",
  "box-shadow",
  "box-sizing",
  "break-after",
  "break-before",
  "break-inside",
  "caption-side",
  "clear",
  "clip",
  "clip-path",
  "color",
  "column-count",
  "column-fill",
  "column-gap",
  "column-rule",
  "column-rule-color",
  "column-rule-style",
  "column-rule-width",
  "column-span",
  "column-width",
  "columns",
  "content",
  "counter-increment",
  "counter-reset",
  "cursor",
  "direction",
  "display",
  "empty-cells",
  "filter",
  "flex",
  "flex-basis",
  "flex-direction",
  "flex-flow",
  "flex-grow",
  "flex-shrink",
  "flex-wrap",
  "float",
  "font",
  "font-display",
  "font-family",
  "font-feature-settings",
  "font-kerning",
  "font-language-override",
  "font-size",
  "font-size-adjust",
  "font-smoothing",
  "font-stretch",
  "font-style",
  "font-variant",
  "font-variant-ligatures",
  "font-variation-settings",
  "font-weight",
  "height",
  "hyphens",
  "icon",
  "image-orientation",
  "image-rendering",
  "image-resolution",
  "ime-mode",
  "inherit",
  "initial",
  "justify-content",
  "left",
  "letter-spacing",
  "line-height",
  "list-style",
  "list-style-image",
  "list-style-position",
  "list-style-type",
  "margin",
  "margin-bottom",
  "margin-left",
  "margin-right",
  "margin-top",
  "marks",
  "mask",
  "max-height",
  "max-width",
  "min-height",
  "min-width",
  "nav-down",
  "nav-index",
  "nav-left",
  "nav-right",
  "nav-up",
  "none",
  "normal",
  "object-fit",
  "object-position",
  "opacity",
  "order",
  "orphans",
  "outline",
  "outline-color",
  "outline-offset",
  "outline-style",
  "outline-width",
  "overflow",
  "overflow-wrap",
  "overflow-x",
  "overflow-y",
  "padding",
  "padding-bottom",
  "padding-left",
  "padding-right",
  "padding-top",
  "page-break-after",
  "page-break-before",
  "page-break-inside",
  "perspective",
  "perspective-origin",
  "pointer-events",
  "position",
  "quotes",
  "resize",
  "right",
  "src",
  "tab-size",
  "table-layout",
  "text-align",
  "text-align-last",
  "text-decoration",
  "text-decoration-color",
  "text-decoration-line",
  "text-decoration-style",
  "text-indent",
  "text-overflow",
  "text-rendering",
  "text-shadow",
  "text-transform",
  "text-underline-position",
  "top",
  "transform",
  "transform-origin",
  "transform-style",
  "transition",
  "transition-delay",
  "transition-duration",
  "transition-property",
  "transition-timing-function",
  "unicode-bidi",
  "vertical-align",
  "visibility",
  "white-space",
  "widows",
  "width",
  "word-break",
  "word-spacing",
  "word-wrap",
  "z-index"
].reverse();
function stylus(hljs2) {
  const modes = MODES(hljs2);
  const AT_MODIFIERS = "and or not only";
  const VARIABLE = {
    className: "variable",
    begin: "\\$" + hljs2.IDENT_RE
  };
  const AT_KEYWORDS = [
    "charset",
    "css",
    "debug",
    "extend",
    "font-face",
    "for",
    "import",
    "include",
    "keyframes",
    "media",
    "mixin",
    "page",
    "warn",
    "while"
  ];
  const LOOKAHEAD_TAG_END = "(?=[.\\s\\n[:,(])";
  const ILLEGAL = [
    "\\?",
    "(\\bReturn\\b)",
    "(\\bEnd\\b)",
    "(\\bend\\b)",
    "(\\bdef\\b)",
    ";",
    "#\\s",
    "\\*\\s",
    "===\\s",
    "\\|",
    "%"
  ];
  return {
    name: "Stylus",
    aliases: ["styl"],
    case_insensitive: false,
    keywords: "if else for in",
    illegal: "(" + ILLEGAL.join("|") + ")",
    contains: [
      hljs2.QUOTE_STRING_MODE,
      hljs2.APOS_STRING_MODE,
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      modes.HEXCOLOR,
      {
        begin: "\\.[a-zA-Z][a-zA-Z0-9_-]*" + LOOKAHEAD_TAG_END,
        className: "selector-class"
      },
      {
        begin: "#[a-zA-Z][a-zA-Z0-9_-]*" + LOOKAHEAD_TAG_END,
        className: "selector-id"
      },
      {
        begin: "\\b(" + TAGS.join("|") + ")" + LOOKAHEAD_TAG_END,
        className: "selector-tag"
      },
      {
        className: "selector-pseudo",
        begin: "&?:(" + PSEUDO_CLASSES.join("|") + ")" + LOOKAHEAD_TAG_END
      },
      {
        className: "selector-pseudo",
        begin: "&?::(" + PSEUDO_ELEMENTS.join("|") + ")" + LOOKAHEAD_TAG_END
      },
      modes.ATTRIBUTE_SELECTOR_MODE,
      {
        className: "keyword",
        begin: /@media/,
        starts: {
          end: /[{;}]/,
          keywords: {
            $pattern: /[a-z-]+/,
            keyword: AT_MODIFIERS,
            attribute: MEDIA_FEATURES.join(" ")
          },
          contains: [hljs2.CSS_NUMBER_MODE]
        }
      },
      {
        className: "keyword",
        begin: "@((-(o|moz|ms|webkit)-)?(" + AT_KEYWORDS.join("|") + "))\\b"
      },
      VARIABLE,
      hljs2.CSS_NUMBER_MODE,
      {
        className: "function",
        begin: "^[a-zA-Z][a-zA-Z0-9_-]*\\(.*\\)",
        illegal: "[\\n]",
        returnBegin: true,
        contains: [
          {
            className: "title",
            begin: "\\b[a-zA-Z][a-zA-Z0-9_-]*"
          },
          {
            className: "params",
            begin: /\(/,
            end: /\)/,
            contains: [
              modes.HEXCOLOR,
              VARIABLE,
              hljs2.APOS_STRING_MODE,
              hljs2.CSS_NUMBER_MODE,
              hljs2.QUOTE_STRING_MODE
            ]
          }
        ]
      },
      {
        className: "attribute",
        begin: "\\b(" + ATTRIBUTES.join("|") + ")\\b",
        starts: {
          end: /;|$/,
          contains: [
            modes.HEXCOLOR,
            VARIABLE,
            hljs2.APOS_STRING_MODE,
            hljs2.QUOTE_STRING_MODE,
            hljs2.CSS_NUMBER_MODE,
            hljs2.C_BLOCK_COMMENT_MODE,
            modes.IMPORTANT
          ],
          illegal: /\./,
          relevance: 0
        }
      }
    ]
  };
}
var stylus_1 = stylus;
function subunit(hljs2) {
  const DETAILS = {
    className: "string",
    begin: "\\[\n(multipart)?",
    end: "\\]\n"
  };
  const TIME = {
    className: "string",
    begin: "\\d{4}-\\d{2}-\\d{2}(\\s+)\\d{2}:\\d{2}:\\d{2}.\\d+Z"
  };
  const PROGRESSVALUE = {
    className: "string",
    begin: "(\\+|-)\\d+"
  };
  const KEYWORDS2 = {
    className: "keyword",
    relevance: 10,
    variants: [
      {
        begin: "^(test|testing|success|successful|failure|error|skip|xfail|uxsuccess)(:?)\\s+(test)?"
      },
      {
        begin: "^progress(:?)(\\s+)?(pop|push)?"
      },
      {
        begin: "^tags:"
      },
      {
        begin: "^time:"
      }
    ]
  };
  return {
    name: "SubUnit",
    case_insensitive: true,
    contains: [
      DETAILS,
      TIME,
      PROGRESSVALUE,
      KEYWORDS2
    ]
  };
}
var subunit_1 = subunit;
function source$4(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function lookahead$1(re) {
  return concat$4("(?=", re, ")");
}
function concat$4(...args) {
  const joined = args.map((x2) => source$4(x2)).join("");
  return joined;
}
function either$2(...args) {
  const joined = "(" + args.map((x2) => source$4(x2)).join("|") + ")";
  return joined;
}
const keywordWrapper = (keyword) => concat$4(/\b/, keyword, /\w$/.test(keyword) ? /\b/ : /\B/);
const dotKeywords = [
  "Protocol",
  "Type"
].map(keywordWrapper);
const optionalDotKeywords = [
  "init",
  "self"
].map(keywordWrapper);
const keywordTypes = [
  "Any",
  "Self"
];
const keywords = [
  "associatedtype",
  "async",
  "await",
  /as\?/,
  /as!/,
  "as",
  "break",
  "case",
  "catch",
  "class",
  "continue",
  "convenience",
  "default",
  "defer",
  "deinit",
  "didSet",
  "do",
  "dynamic",
  "else",
  "enum",
  "extension",
  "fallthrough",
  /fileprivate\(set\)/,
  "fileprivate",
  "final",
  "for",
  "func",
  "get",
  "guard",
  "if",
  "import",
  "indirect",
  "infix",
  /init\?/,
  /init!/,
  "inout",
  /internal\(set\)/,
  "internal",
  "in",
  "is",
  "lazy",
  "let",
  "mutating",
  "nonmutating",
  /open\(set\)/,
  "open",
  "operator",
  "optional",
  "override",
  "postfix",
  "precedencegroup",
  "prefix",
  /private\(set\)/,
  "private",
  "protocol",
  /public\(set\)/,
  "public",
  "repeat",
  "required",
  "rethrows",
  "return",
  "set",
  "some",
  "static",
  "struct",
  "subscript",
  "super",
  "switch",
  "throws",
  "throw",
  /try\?/,
  /try!/,
  "try",
  "typealias",
  /unowned\(safe\)/,
  /unowned\(unsafe\)/,
  "unowned",
  "var",
  "weak",
  "where",
  "while",
  "willSet"
];
const literals = [
  "false",
  "nil",
  "true"
];
const precedencegroupKeywords = [
  "assignment",
  "associativity",
  "higherThan",
  "left",
  "lowerThan",
  "none",
  "right"
];
const numberSignKeywords = [
  "#colorLiteral",
  "#column",
  "#dsohandle",
  "#else",
  "#elseif",
  "#endif",
  "#error",
  "#file",
  "#fileID",
  "#fileLiteral",
  "#filePath",
  "#function",
  "#if",
  "#imageLiteral",
  "#keyPath",
  "#line",
  "#selector",
  "#sourceLocation",
  "#warn_unqualified_access",
  "#warning"
];
const builtIns = [
  "abs",
  "all",
  "any",
  "assert",
  "assertionFailure",
  "debugPrint",
  "dump",
  "fatalError",
  "getVaList",
  "isKnownUniquelyReferenced",
  "max",
  "min",
  "numericCast",
  "pointwiseMax",
  "pointwiseMin",
  "precondition",
  "preconditionFailure",
  "print",
  "readLine",
  "repeatElement",
  "sequence",
  "stride",
  "swap",
  "swift_unboxFromSwiftValueWithType",
  "transcode",
  "type",
  "unsafeBitCast",
  "unsafeDowncast",
  "withExtendedLifetime",
  "withUnsafeMutablePointer",
  "withUnsafePointer",
  "withVaList",
  "withoutActuallyEscaping",
  "zip"
];
const operatorHead = either$2(/[/=\-+!*%<>&|^~?]/, /[\u00A1-\u00A7]/, /[\u00A9\u00AB]/, /[\u00AC\u00AE]/, /[\u00B0\u00B1]/, /[\u00B6\u00BB\u00BF\u00D7\u00F7]/, /[\u2016-\u2017]/, /[\u2020-\u2027]/, /[\u2030-\u203E]/, /[\u2041-\u2053]/, /[\u2055-\u205E]/, /[\u2190-\u23FF]/, /[\u2500-\u2775]/, /[\u2794-\u2BFF]/, /[\u2E00-\u2E7F]/, /[\u3001-\u3003]/, /[\u3008-\u3020]/, /[\u3030]/);
const operatorCharacter = either$2(operatorHead, /[\u0300-\u036F]/, /[\u1DC0-\u1DFF]/, /[\u20D0-\u20FF]/, /[\uFE00-\uFE0F]/, /[\uFE20-\uFE2F]/);
const operator = concat$4(operatorHead, operatorCharacter, "*");
const identifierHead = either$2(/[a-zA-Z_]/, /[\u00A8\u00AA\u00AD\u00AF\u00B2-\u00B5\u00B7-\u00BA]/, /[\u00BC-\u00BE\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF]/, /[\u0100-\u02FF\u0370-\u167F\u1681-\u180D\u180F-\u1DBF]/, /[\u1E00-\u1FFF]/, /[\u200B-\u200D\u202A-\u202E\u203F-\u2040\u2054\u2060-\u206F]/, /[\u2070-\u20CF\u2100-\u218F\u2460-\u24FF\u2776-\u2793]/, /[\u2C00-\u2DFF\u2E80-\u2FFF]/, /[\u3004-\u3007\u3021-\u302F\u3031-\u303F\u3040-\uD7FF]/, /[\uF900-\uFD3D\uFD40-\uFDCF\uFDF0-\uFE1F\uFE30-\uFE44]/, /[\uFE47-\uFEFE\uFF00-\uFFFD]/);
const identifierCharacter = either$2(identifierHead, /\d/, /[\u0300-\u036F\u1DC0-\u1DFF\u20D0-\u20FF\uFE20-\uFE2F]/);
const identifier = concat$4(identifierHead, identifierCharacter, "*");
const typeIdentifier = concat$4(/[A-Z]/, identifierCharacter, "*");
const keywordAttributes = [
  "autoclosure",
  concat$4(/convention\(/, either$2("swift", "block", "c"), /\)/),
  "discardableResult",
  "dynamicCallable",
  "dynamicMemberLookup",
  "escaping",
  "frozen",
  "GKInspectable",
  "IBAction",
  "IBDesignable",
  "IBInspectable",
  "IBOutlet",
  "IBSegueAction",
  "inlinable",
  "main",
  "nonobjc",
  "NSApplicationMain",
  "NSCopying",
  "NSManaged",
  concat$4(/objc\(/, identifier, /\)/),
  "objc",
  "objcMembers",
  "propertyWrapper",
  "requires_stored_property_inits",
  "testable",
  "UIApplicationMain",
  "unknown",
  "usableFromInline"
];
const availabilityKeywords = [
  "iOS",
  "iOSApplicationExtension",
  "macOS",
  "macOSApplicationExtension",
  "macCatalyst",
  "macCatalystApplicationExtension",
  "watchOS",
  "watchOSApplicationExtension",
  "tvOS",
  "tvOSApplicationExtension",
  "swift"
];
function swift(hljs2) {
  const WHITESPACE = {
    match: /\s+/,
    relevance: 0
  };
  const BLOCK_COMMENT = hljs2.COMMENT("/\\*", "\\*/", {
    contains: ["self"]
  });
  const COMMENTS = [
    hljs2.C_LINE_COMMENT_MODE,
    BLOCK_COMMENT
  ];
  const DOT_KEYWORD = {
    className: "keyword",
    begin: concat$4(/\./, lookahead$1(either$2(...dotKeywords, ...optionalDotKeywords))),
    end: either$2(...dotKeywords, ...optionalDotKeywords),
    excludeBegin: true
  };
  const KEYWORD_GUARD = {
    match: concat$4(/\./, either$2(...keywords)),
    relevance: 0
  };
  const PLAIN_KEYWORDS = keywords.filter((kw) => typeof kw === "string").concat(["_|0"]);
  const REGEX_KEYWORDS = keywords.filter((kw) => typeof kw !== "string").concat(keywordTypes).map(keywordWrapper);
  const KEYWORD = {
    variants: [
      {
        className: "keyword",
        match: either$2(...REGEX_KEYWORDS, ...optionalDotKeywords)
      }
    ]
  };
  const KEYWORDS2 = {
    $pattern: either$2(/\b\w+/, /#\w+/),
    keyword: PLAIN_KEYWORDS.concat(numberSignKeywords),
    literal: literals
  };
  const KEYWORD_MODES = [
    DOT_KEYWORD,
    KEYWORD_GUARD,
    KEYWORD
  ];
  const BUILT_IN_GUARD = {
    match: concat$4(/\./, either$2(...builtIns)),
    relevance: 0
  };
  const BUILT_IN = {
    className: "built_in",
    match: concat$4(/\b/, either$2(...builtIns), /(?=\()/)
  };
  const BUILT_INS2 = [
    BUILT_IN_GUARD,
    BUILT_IN
  ];
  const OPERATOR_GUARD = {
    match: /->/,
    relevance: 0
  };
  const OPERATOR = {
    className: "operator",
    relevance: 0,
    variants: [
      {
        match: operator
      },
      {
        match: `\\.(\\.|${operatorCharacter})+`
      }
    ]
  };
  const OPERATORS = [
    OPERATOR_GUARD,
    OPERATOR
  ];
  const decimalDigits2 = "([0-9]_*)+";
  const hexDigits2 = "([0-9a-fA-F]_*)+";
  const NUMBER = {
    className: "number",
    relevance: 0,
    variants: [
      {
        match: `\\b(${decimalDigits2})(\\.(${decimalDigits2}))?([eE][+-]?(${decimalDigits2}))?\\b`
      },
      {
        match: `\\b0x(${hexDigits2})(\\.(${hexDigits2}))?([pP][+-]?(${decimalDigits2}))?\\b`
      },
      {
        match: /\b0o([0-7]_*)+\b/
      },
      {
        match: /\b0b([01]_*)+\b/
      }
    ]
  };
  const ESCAPED_CHARACTER = (rawDelimiter = "") => ({
    className: "subst",
    variants: [
      {
        match: concat$4(/\\/, rawDelimiter, /[0\\tnr"']/)
      },
      {
        match: concat$4(/\\/, rawDelimiter, /u\{[0-9a-fA-F]{1,8}\}/)
      }
    ]
  });
  const ESCAPED_NEWLINE = (rawDelimiter = "") => ({
    className: "subst",
    match: concat$4(/\\/, rawDelimiter, /[\t ]*(?:[\r\n]|\r\n)/)
  });
  const INTERPOLATION = (rawDelimiter = "") => ({
    className: "subst",
    label: "interpol",
    begin: concat$4(/\\/, rawDelimiter, /\(/),
    end: /\)/
  });
  const MULTILINE_STRING = (rawDelimiter = "") => ({
    begin: concat$4(rawDelimiter, /"""/),
    end: concat$4(/"""/, rawDelimiter),
    contains: [
      ESCAPED_CHARACTER(rawDelimiter),
      ESCAPED_NEWLINE(rawDelimiter),
      INTERPOLATION(rawDelimiter)
    ]
  });
  const SINGLE_LINE_STRING = (rawDelimiter = "") => ({
    begin: concat$4(rawDelimiter, /"/),
    end: concat$4(/"/, rawDelimiter),
    contains: [
      ESCAPED_CHARACTER(rawDelimiter),
      INTERPOLATION(rawDelimiter)
    ]
  });
  const STRING = {
    className: "string",
    variants: [
      MULTILINE_STRING(),
      MULTILINE_STRING("#"),
      MULTILINE_STRING("##"),
      MULTILINE_STRING("###"),
      SINGLE_LINE_STRING(),
      SINGLE_LINE_STRING("#"),
      SINGLE_LINE_STRING("##"),
      SINGLE_LINE_STRING("###")
    ]
  };
  const QUOTED_IDENTIFIER = {
    match: concat$4(/`/, identifier, /`/)
  };
  const IMPLICIT_PARAMETER = {
    className: "variable",
    match: /\$\d+/
  };
  const PROPERTY_WRAPPER_PROJECTION = {
    className: "variable",
    match: `\\$${identifierCharacter}+`
  };
  const IDENTIFIERS = [
    QUOTED_IDENTIFIER,
    IMPLICIT_PARAMETER,
    PROPERTY_WRAPPER_PROJECTION
  ];
  const AVAILABLE_ATTRIBUTE = {
    match: /(@|#)available/,
    className: "keyword",
    starts: {
      contains: [
        {
          begin: /\(/,
          end: /\)/,
          keywords: availabilityKeywords,
          contains: [
            ...OPERATORS,
            NUMBER,
            STRING
          ]
        }
      ]
    }
  };
  const KEYWORD_ATTRIBUTE = {
    className: "keyword",
    match: concat$4(/@/, either$2(...keywordAttributes))
  };
  const USER_DEFINED_ATTRIBUTE = {
    className: "meta",
    match: concat$4(/@/, identifier)
  };
  const ATTRIBUTES2 = [
    AVAILABLE_ATTRIBUTE,
    KEYWORD_ATTRIBUTE,
    USER_DEFINED_ATTRIBUTE
  ];
  const TYPE = {
    match: lookahead$1(/\b[A-Z]/),
    relevance: 0,
    contains: [
      {
        className: "type",
        match: concat$4(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/, identifierCharacter, "+")
      },
      {
        className: "type",
        match: typeIdentifier,
        relevance: 0
      },
      {
        match: /[?!]+/,
        relevance: 0
      },
      {
        match: /\.\.\./,
        relevance: 0
      },
      {
        match: concat$4(/\s+&\s+/, lookahead$1(typeIdentifier)),
        relevance: 0
      }
    ]
  };
  const GENERIC_ARGUMENTS = {
    begin: /</,
    end: />/,
    keywords: KEYWORDS2,
    contains: [
      ...COMMENTS,
      ...KEYWORD_MODES,
      ...ATTRIBUTES2,
      OPERATOR_GUARD,
      TYPE
    ]
  };
  TYPE.contains.push(GENERIC_ARGUMENTS);
  const TUPLE_ELEMENT_NAME = {
    match: concat$4(identifier, /\s*:/),
    keywords: "_|0",
    relevance: 0
  };
  const TUPLE = {
    begin: /\(/,
    end: /\)/,
    relevance: 0,
    keywords: KEYWORDS2,
    contains: [
      "self",
      TUPLE_ELEMENT_NAME,
      ...COMMENTS,
      ...KEYWORD_MODES,
      ...BUILT_INS2,
      ...OPERATORS,
      NUMBER,
      STRING,
      ...IDENTIFIERS,
      ...ATTRIBUTES2,
      TYPE
    ]
  };
  const FUNC_PLUS_TITLE = {
    beginKeywords: "func",
    contains: [
      {
        className: "title",
        match: either$2(QUOTED_IDENTIFIER.match, identifier, operator),
        endsParent: true,
        relevance: 0
      },
      WHITESPACE
    ]
  };
  const GENERIC_PARAMETERS = {
    begin: /</,
    end: />/,
    contains: [
      ...COMMENTS,
      TYPE
    ]
  };
  const FUNCTION_PARAMETER_NAME = {
    begin: either$2(lookahead$1(concat$4(identifier, /\s*:/)), lookahead$1(concat$4(identifier, /\s+/, identifier, /\s*:/))),
    end: /:/,
    relevance: 0,
    contains: [
      {
        className: "keyword",
        match: /\b_\b/
      },
      {
        className: "params",
        match: identifier
      }
    ]
  };
  const FUNCTION_PARAMETERS = {
    begin: /\(/,
    end: /\)/,
    keywords: KEYWORDS2,
    contains: [
      FUNCTION_PARAMETER_NAME,
      ...COMMENTS,
      ...KEYWORD_MODES,
      ...OPERATORS,
      NUMBER,
      STRING,
      ...ATTRIBUTES2,
      TYPE,
      TUPLE
    ],
    endsParent: true,
    illegal: /["']/
  };
  const FUNCTION = {
    className: "function",
    match: lookahead$1(/\bfunc\b/),
    contains: [
      FUNC_PLUS_TITLE,
      GENERIC_PARAMETERS,
      FUNCTION_PARAMETERS,
      WHITESPACE
    ],
    illegal: [
      /\[/,
      /%/
    ]
  };
  const INIT_SUBSCRIPT = {
    className: "function",
    match: /\b(subscript|init[?!]?)\s*(?=[<(])/,
    keywords: {
      keyword: "subscript init init? init!",
      $pattern: /\w+[?!]?/
    },
    contains: [
      GENERIC_PARAMETERS,
      FUNCTION_PARAMETERS,
      WHITESPACE
    ],
    illegal: /\[|%/
  };
  const OPERATOR_DECLARATION = {
    beginKeywords: "operator",
    end: hljs2.MATCH_NOTHING_RE,
    contains: [
      {
        className: "title",
        match: operator,
        endsParent: true,
        relevance: 0
      }
    ]
  };
  const PRECEDENCEGROUP = {
    beginKeywords: "precedencegroup",
    end: hljs2.MATCH_NOTHING_RE,
    contains: [
      {
        className: "title",
        match: typeIdentifier,
        relevance: 0
      },
      {
        begin: /{/,
        end: /}/,
        relevance: 0,
        endsParent: true,
        keywords: [
          ...precedencegroupKeywords,
          ...literals
        ],
        contains: [TYPE]
      }
    ]
  };
  for (const variant of STRING.variants) {
    const interpolation = variant.contains.find((mode) => mode.label === "interpol");
    interpolation.keywords = KEYWORDS2;
    const submodes = [
      ...KEYWORD_MODES,
      ...BUILT_INS2,
      ...OPERATORS,
      NUMBER,
      STRING,
      ...IDENTIFIERS
    ];
    interpolation.contains = [
      ...submodes,
      {
        begin: /\(/,
        end: /\)/,
        contains: [
          "self",
          ...submodes
        ]
      }
    ];
  }
  return {
    name: "Swift",
    keywords: KEYWORDS2,
    contains: [
      ...COMMENTS,
      FUNCTION,
      INIT_SUBSCRIPT,
      {
        className: "class",
        beginKeywords: "struct protocol class extension enum",
        end: "\\{",
        excludeEnd: true,
        keywords: KEYWORDS2,
        contains: [
          hljs2.inherit(hljs2.TITLE_MODE, {
            begin: /[A-Za-z$_][\u00C0-\u02B80-9A-Za-z$_]*/
          }),
          ...KEYWORD_MODES
        ]
      },
      OPERATOR_DECLARATION,
      PRECEDENCEGROUP,
      {
        beginKeywords: "import",
        end: /$/,
        contains: [...COMMENTS],
        relevance: 0
      },
      ...KEYWORD_MODES,
      ...BUILT_INS2,
      ...OPERATORS,
      NUMBER,
      STRING,
      ...IDENTIFIERS,
      ...ATTRIBUTES2,
      TYPE,
      TUPLE
    ]
  };
}
var swift_1 = swift;
function taggerscript(hljs2) {
  const COMMENT2 = {
    className: "comment",
    begin: /\$noop\(/,
    end: /\)/,
    contains: [{
      begin: /\(/,
      end: /\)/,
      contains: [
        "self",
        {
          begin: /\\./
        }
      ]
    }],
    relevance: 10
  };
  const FUNCTION = {
    className: "keyword",
    begin: /\$(?!noop)[a-zA-Z][_a-zA-Z0-9]*/,
    end: /\(/,
    excludeEnd: true
  };
  const VARIABLE = {
    className: "variable",
    begin: /%[_a-zA-Z0-9:]*/,
    end: "%"
  };
  const ESCAPE_SEQUENCE = {
    className: "symbol",
    begin: /\\./
  };
  return {
    name: "Tagger Script",
    contains: [
      COMMENT2,
      FUNCTION,
      VARIABLE,
      ESCAPE_SEQUENCE
    ]
  };
}
var taggerscript_1 = taggerscript;
function yaml(hljs2) {
  var LITERALS2 = "true false yes no null";
  var URI_CHARACTERS = "[\\w#;/?:@&=+$,.~*'()[\\]]+";
  var KEY = {
    className: "attr",
    variants: [
      {begin: "\\w[\\w :\\/.-]*:(?=[ 	]|$)"},
      {begin: '"\\w[\\w :\\/.-]*":(?=[ 	]|$)'},
      {begin: "'\\w[\\w :\\/.-]*':(?=[ 	]|$)"}
    ]
  };
  var TEMPLATE_VARIABLES = {
    className: "template-variable",
    variants: [
      {begin: /\{\{/, end: /\}\}/},
      {begin: /%\{/, end: /\}/}
    ]
  };
  var STRING = {
    className: "string",
    relevance: 0,
    variants: [
      {begin: /'/, end: /'/},
      {begin: /"/, end: /"/},
      {begin: /\S+/}
    ],
    contains: [
      hljs2.BACKSLASH_ESCAPE,
      TEMPLATE_VARIABLES
    ]
  };
  var CONTAINER_STRING = hljs2.inherit(STRING, {
    variants: [
      {begin: /'/, end: /'/},
      {begin: /"/, end: /"/},
      {begin: /[^\s,{}[\]]+/}
    ]
  });
  var DATE_RE = "[0-9]{4}(-[0-9][0-9]){0,2}";
  var TIME_RE = "([Tt \\t][0-9][0-9]?(:[0-9][0-9]){2})?";
  var FRACTION_RE = "(\\.[0-9]*)?";
  var ZONE_RE = "([ \\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?";
  var TIMESTAMP = {
    className: "number",
    begin: "\\b" + DATE_RE + TIME_RE + FRACTION_RE + ZONE_RE + "\\b"
  };
  var VALUE_CONTAINER = {
    end: ",",
    endsWithParent: true,
    excludeEnd: true,
    keywords: LITERALS2,
    relevance: 0
  };
  var OBJECT = {
    begin: /\{/,
    end: /\}/,
    contains: [VALUE_CONTAINER],
    illegal: "\\n",
    relevance: 0
  };
  var ARRAY = {
    begin: "\\[",
    end: "\\]",
    contains: [VALUE_CONTAINER],
    illegal: "\\n",
    relevance: 0
  };
  var MODES2 = [
    KEY,
    {
      className: "meta",
      begin: "^---\\s*$",
      relevance: 10
    },
    {
      className: "string",
      begin: "[\\|>]([1-9]?[+-])?[ ]*\\n( +)[^ ][^\\n]*\\n(\\2[^\\n]+\\n?)*"
    },
    {
      begin: "<%[%=-]?",
      end: "[%-]?%>",
      subLanguage: "ruby",
      excludeBegin: true,
      excludeEnd: true,
      relevance: 0
    },
    {
      className: "type",
      begin: "!\\w+!" + URI_CHARACTERS
    },
    {
      className: "type",
      begin: "!<" + URI_CHARACTERS + ">"
    },
    {
      className: "type",
      begin: "!" + URI_CHARACTERS
    },
    {
      className: "type",
      begin: "!!" + URI_CHARACTERS
    },
    {
      className: "meta",
      begin: "&" + hljs2.UNDERSCORE_IDENT_RE + "$"
    },
    {
      className: "meta",
      begin: "\\*" + hljs2.UNDERSCORE_IDENT_RE + "$"
    },
    {
      className: "bullet",
      begin: "-(?=[ ]|$)",
      relevance: 0
    },
    hljs2.HASH_COMMENT_MODE,
    {
      beginKeywords: LITERALS2,
      keywords: {literal: LITERALS2}
    },
    TIMESTAMP,
    {
      className: "number",
      begin: hljs2.C_NUMBER_RE + "\\b",
      relevance: 0
    },
    OBJECT,
    ARRAY,
    STRING
  ];
  var VALUE_MODES = [...MODES2];
  VALUE_MODES.pop();
  VALUE_MODES.push(CONTAINER_STRING);
  VALUE_CONTAINER.contains = VALUE_MODES;
  return {
    name: "YAML",
    case_insensitive: true,
    aliases: ["yml"],
    contains: MODES2
  };
}
var yaml_1 = yaml;
function tap(hljs2) {
  return {
    name: "Test Anything Protocol",
    case_insensitive: true,
    contains: [
      hljs2.HASH_COMMENT_MODE,
      {
        className: "meta",
        variants: [
          {
            begin: "^TAP version (\\d+)$"
          },
          {
            begin: "^1\\.\\.(\\d+)$"
          }
        ]
      },
      {
        begin: /---$/,
        end: "\\.\\.\\.$",
        subLanguage: "yaml",
        relevance: 0
      },
      {
        className: "number",
        begin: " (\\d+) "
      },
      {
        className: "symbol",
        variants: [
          {
            begin: "^ok"
          },
          {
            begin: "^not ok"
          }
        ]
      }
    ]
  };
}
var tap_1 = tap;
function source$3(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function optional(re) {
  return concat$3("(", re, ")?");
}
function concat$3(...args) {
  const joined = args.map((x2) => source$3(x2)).join("");
  return joined;
}
function tcl(hljs2) {
  const TCL_IDENT = /[a-zA-Z_][a-zA-Z0-9_]*/;
  const NUMBER = {
    className: "number",
    variants: [hljs2.BINARY_NUMBER_MODE, hljs2.C_NUMBER_MODE]
  };
  return {
    name: "Tcl",
    aliases: ["tk"],
    keywords: "after append apply array auto_execok auto_import auto_load auto_mkindex auto_mkindex_old auto_qualify auto_reset bgerror binary break catch cd chan clock close concat continue dde dict encoding eof error eval exec exit expr fblocked fconfigure fcopy file fileevent filename flush for foreach format gets glob global history http if incr info interp join lappend|10 lassign|10 lindex|10 linsert|10 list llength|10 load lrange|10 lrepeat|10 lreplace|10 lreverse|10 lsearch|10 lset|10 lsort|10 mathfunc mathop memory msgcat namespace open package parray pid pkg::create pkg_mkIndex platform platform::shell proc puts pwd read refchan regexp registry regsub|10 rename return safe scan seek set socket source split string subst switch tcl_endOfWord tcl_findLibrary tcl_startOfNextWord tcl_startOfPreviousWord tcl_wordBreakAfter tcl_wordBreakBefore tcltest tclvars tell time tm trace unknown unload unset update uplevel upvar variable vwait while",
    contains: [
      hljs2.COMMENT(";[ \\t]*#", "$"),
      hljs2.COMMENT("^[ \\t]*#", "$"),
      {
        beginKeywords: "proc",
        end: "[\\{]",
        excludeEnd: true,
        contains: [
          {
            className: "title",
            begin: "[ \\t\\n\\r]+(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*",
            end: "[ \\t\\n\\r]",
            endsWithParent: true,
            excludeEnd: true
          }
        ]
      },
      {
        className: "variable",
        variants: [
          {
            begin: concat$3(/\$/, optional(/::/), TCL_IDENT, "(::", TCL_IDENT, ")*")
          },
          {
            begin: "\\$\\{(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*",
            end: "\\}",
            contains: [
              NUMBER
            ]
          }
        ]
      },
      {
        className: "string",
        contains: [hljs2.BACKSLASH_ESCAPE],
        variants: [
          hljs2.inherit(hljs2.QUOTE_STRING_MODE, {illegal: null})
        ]
      },
      NUMBER
    ]
  };
}
var tcl_1 = tcl;
function thrift(hljs2) {
  const BUILT_IN_TYPES = "bool byte i16 i32 i64 double string binary";
  return {
    name: "Thrift",
    keywords: {
      keyword: "namespace const typedef struct enum service exception void oneway set list map required optional",
      built_in: BUILT_IN_TYPES,
      literal: "true false"
    },
    contains: [
      hljs2.QUOTE_STRING_MODE,
      hljs2.NUMBER_MODE,
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      {
        className: "class",
        beginKeywords: "struct enum service exception",
        end: /\{/,
        illegal: /\n/,
        contains: [
          hljs2.inherit(hljs2.TITLE_MODE, {
            starts: {
              endsWithParent: true,
              excludeEnd: true
            }
          })
        ]
      },
      {
        begin: "\\b(set|list|map)\\s*<",
        end: ">",
        keywords: BUILT_IN_TYPES,
        contains: ["self"]
      }
    ]
  };
}
var thrift_1 = thrift;
function tp(hljs2) {
  const TPID = {
    className: "number",
    begin: "[1-9][0-9]*",
    relevance: 0
  };
  const TPLABEL = {
    className: "symbol",
    begin: ":[^\\]]+"
  };
  const TPDATA = {
    className: "built_in",
    begin: "(AR|P|PAYLOAD|PR|R|SR|RSR|LBL|VR|UALM|MESSAGE|UTOOL|UFRAME|TIMER|TIMER_OVERFLOW|JOINT_MAX_SPEED|RESUME_PROG|DIAG_REC)\\[",
    end: "\\]",
    contains: [
      "self",
      TPID,
      TPLABEL
    ]
  };
  const TPIO = {
    className: "built_in",
    begin: "(AI|AO|DI|DO|F|RI|RO|UI|UO|GI|GO|SI|SO)\\[",
    end: "\\]",
    contains: [
      "self",
      TPID,
      hljs2.QUOTE_STRING_MODE,
      TPLABEL
    ]
  };
  return {
    name: "TP",
    keywords: {
      keyword: "ABORT ACC ADJUST AND AP_LD BREAK CALL CNT COL CONDITION CONFIG DA DB DIV DETECT ELSE END ENDFOR ERR_NUM ERROR_PROG FINE FOR GP GUARD INC IF JMP LINEAR_MAX_SPEED LOCK MOD MONITOR OFFSET Offset OR OVERRIDE PAUSE PREG PTH RT_LD RUN SELECT SKIP Skip TA TB TO TOOL_OFFSET Tool_Offset UF UT UFRAME_NUM UTOOL_NUM UNLOCK WAIT X Y Z W P R STRLEN SUBSTR FINDSTR VOFFSET PROG ATTR MN POS",
      literal: "ON OFF max_speed LPOS JPOS ENABLE DISABLE START STOP RESET"
    },
    contains: [
      TPDATA,
      TPIO,
      {
        className: "keyword",
        begin: "/(PROG|ATTR|MN|POS|END)\\b"
      },
      {
        className: "keyword",
        begin: "(CALL|RUN|POINT_LOGIC|LBL)\\b"
      },
      {
        className: "keyword",
        begin: "\\b(ACC|CNT|Skip|Offset|PSPD|RT_LD|AP_LD|Tool_Offset)"
      },
      {
        className: "number",
        begin: "\\d+(sec|msec|mm/sec|cm/min|inch/min|deg/sec|mm|in|cm)?\\b",
        relevance: 0
      },
      hljs2.COMMENT("//", "[;$]"),
      hljs2.COMMENT("!", "[;$]"),
      hljs2.COMMENT("--eg:", "$"),
      hljs2.QUOTE_STRING_MODE,
      {
        className: "string",
        begin: "'",
        end: "'"
      },
      hljs2.C_NUMBER_MODE,
      {
        className: "variable",
        begin: "\\$[A-Za-z0-9_]+"
      }
    ]
  };
}
var tp_1 = tp;
function twig(hljs2) {
  var PARAMS = {
    className: "params",
    begin: "\\(",
    end: "\\)"
  };
  var FUNCTION_NAMES = "attribute block constant cycle date dump include max min parent random range source template_from_string";
  var FUNCTIONS = {
    beginKeywords: FUNCTION_NAMES,
    keywords: {name: FUNCTION_NAMES},
    relevance: 0,
    contains: [
      PARAMS
    ]
  };
  var FILTER = {
    begin: /\|[A-Za-z_]+:?/,
    keywords: "abs batch capitalize column convert_encoding date date_modify default escape filter first format inky_to_html inline_css join json_encode keys last length lower map markdown merge nl2br number_format raw reduce replace reverse round slice sort spaceless split striptags title trim upper url_encode",
    contains: [
      FUNCTIONS
    ]
  };
  var TAGS2 = "apply autoescape block deprecated do embed extends filter flush for from if import include macro sandbox set use verbatim with";
  TAGS2 = TAGS2 + " " + TAGS2.split(" ").map(function(t) {
    return "end" + t;
  }).join(" ");
  return {
    name: "Twig",
    aliases: ["craftcms"],
    case_insensitive: true,
    subLanguage: "xml",
    contains: [
      hljs2.COMMENT(/\{#/, /#\}/),
      {
        className: "template-tag",
        begin: /\{%/,
        end: /%\}/,
        contains: [
          {
            className: "name",
            begin: /\w+/,
            keywords: TAGS2,
            starts: {
              endsWithParent: true,
              contains: [FILTER, FUNCTIONS],
              relevance: 0
            }
          }
        ]
      },
      {
        className: "template-variable",
        begin: /\{\{/,
        end: /\}\}/,
        contains: ["self", FILTER, FUNCTIONS]
      }
    ]
  };
}
var twig_1 = twig;
const IDENT_RE = "[A-Za-z$_][0-9A-Za-z$_]*";
const KEYWORDS = [
  "as",
  "in",
  "of",
  "if",
  "for",
  "while",
  "finally",
  "var",
  "new",
  "function",
  "do",
  "return",
  "void",
  "else",
  "break",
  "catch",
  "instanceof",
  "with",
  "throw",
  "case",
  "default",
  "try",
  "switch",
  "continue",
  "typeof",
  "delete",
  "let",
  "yield",
  "const",
  "class",
  "debugger",
  "async",
  "await",
  "static",
  "import",
  "from",
  "export",
  "extends"
];
const LITERALS = [
  "true",
  "false",
  "null",
  "undefined",
  "NaN",
  "Infinity"
];
const TYPES = [
  "Intl",
  "DataView",
  "Number",
  "Math",
  "Date",
  "String",
  "RegExp",
  "Object",
  "Function",
  "Boolean",
  "Error",
  "Symbol",
  "Set",
  "Map",
  "WeakSet",
  "WeakMap",
  "Proxy",
  "Reflect",
  "JSON",
  "Promise",
  "Float64Array",
  "Int16Array",
  "Int32Array",
  "Int8Array",
  "Uint16Array",
  "Uint32Array",
  "Float32Array",
  "Array",
  "Uint8Array",
  "Uint8ClampedArray",
  "ArrayBuffer",
  "BigInt64Array",
  "BigUint64Array",
  "BigInt"
];
const ERROR_TYPES = [
  "EvalError",
  "InternalError",
  "RangeError",
  "ReferenceError",
  "SyntaxError",
  "TypeError",
  "URIError"
];
const BUILT_IN_GLOBALS = [
  "setInterval",
  "setTimeout",
  "clearInterval",
  "clearTimeout",
  "require",
  "exports",
  "eval",
  "isFinite",
  "isNaN",
  "parseFloat",
  "parseInt",
  "decodeURI",
  "decodeURIComponent",
  "encodeURI",
  "encodeURIComponent",
  "escape",
  "unescape"
];
const BUILT_IN_VARIABLES = [
  "arguments",
  "this",
  "super",
  "console",
  "window",
  "document",
  "localStorage",
  "module",
  "global"
];
const BUILT_INS = [].concat(BUILT_IN_GLOBALS, BUILT_IN_VARIABLES, TYPES, ERROR_TYPES);
function source$2(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function lookahead(re) {
  return concat$2("(?=", re, ")");
}
function concat$2(...args) {
  const joined = args.map((x2) => source$2(x2)).join("");
  return joined;
}
function javascript(hljs2) {
  const hasClosingTag = (match2, {after}) => {
    const tag2 = "</" + match2[0].slice(1);
    const pos = match2.input.indexOf(tag2, after);
    return pos !== -1;
  };
  const IDENT_RE$12 = IDENT_RE;
  const FRAGMENT = {
    begin: "<>",
    end: "</>"
  };
  const XML_TAG = {
    begin: /<[A-Za-z0-9\\._:-]+/,
    end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
    isTrulyOpeningTag: (match2, response) => {
      const afterMatchIndex = match2[0].length + match2.index;
      const nextChar = match2.input[afterMatchIndex];
      if (nextChar === "<") {
        response.ignoreMatch();
        return;
      }
      if (nextChar === ">") {
        if (!hasClosingTag(match2, {after: afterMatchIndex})) {
          response.ignoreMatch();
        }
      }
    }
  };
  const KEYWORDS$12 = {
    $pattern: IDENT_RE,
    keyword: KEYWORDS,
    literal: LITERALS,
    built_in: BUILT_INS
  };
  const decimalDigits2 = "[0-9](_?[0-9])*";
  const frac2 = `\\.(${decimalDigits2})`;
  const decimalInteger = `0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*`;
  const NUMBER = {
    className: "number",
    variants: [
      {begin: `(\\b(${decimalInteger})((${frac2})|\\.)?|(${frac2}))[eE][+-]?(${decimalDigits2})\\b`},
      {begin: `\\b(${decimalInteger})\\b((${frac2})\\b|\\.)?|(${frac2})\\b`},
      {begin: `\\b(0|[1-9](_?[0-9])*)n\\b`},
      {begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b"},
      {begin: "\\b0[bB][0-1](_?[0-1])*n?\\b"},
      {begin: "\\b0[oO][0-7](_?[0-7])*n?\\b"},
      {begin: "\\b0[0-7]+n?\\b"}
    ],
    relevance: 0
  };
  const SUBST = {
    className: "subst",
    begin: "\\$\\{",
    end: "\\}",
    keywords: KEYWORDS$12,
    contains: []
  };
  const HTML_TEMPLATE = {
    begin: "html`",
    end: "",
    starts: {
      end: "`",
      returnEnd: false,
      contains: [
        hljs2.BACKSLASH_ESCAPE,
        SUBST
      ],
      subLanguage: "xml"
    }
  };
  const CSS_TEMPLATE = {
    begin: "css`",
    end: "",
    starts: {
      end: "`",
      returnEnd: false,
      contains: [
        hljs2.BACKSLASH_ESCAPE,
        SUBST
      ],
      subLanguage: "css"
    }
  };
  const TEMPLATE_STRING = {
    className: "string",
    begin: "`",
    end: "`",
    contains: [
      hljs2.BACKSLASH_ESCAPE,
      SUBST
    ]
  };
  const JSDOC_COMMENT = hljs2.COMMENT(/\/\*\*(?!\/)/, "\\*/", {
    relevance: 0,
    contains: [
      {
        className: "doctag",
        begin: "@[A-Za-z]+",
        contains: [
          {
            className: "type",
            begin: "\\{",
            end: "\\}",
            relevance: 0
          },
          {
            className: "variable",
            begin: IDENT_RE$12 + "(?=\\s*(-)|$)",
            endsParent: true,
            relevance: 0
          },
          {
            begin: /(?=[^\n])\s/,
            relevance: 0
          }
        ]
      }
    ]
  });
  const COMMENT2 = {
    className: "comment",
    variants: [
      JSDOC_COMMENT,
      hljs2.C_BLOCK_COMMENT_MODE,
      hljs2.C_LINE_COMMENT_MODE
    ]
  };
  const SUBST_INTERNALS = [
    hljs2.APOS_STRING_MODE,
    hljs2.QUOTE_STRING_MODE,
    HTML_TEMPLATE,
    CSS_TEMPLATE,
    TEMPLATE_STRING,
    NUMBER,
    hljs2.REGEXP_MODE
  ];
  SUBST.contains = SUBST_INTERNALS.concat({
    begin: /\{/,
    end: /\}/,
    keywords: KEYWORDS$12,
    contains: [
      "self"
    ].concat(SUBST_INTERNALS)
  });
  const SUBST_AND_COMMENTS = [].concat(COMMENT2, SUBST.contains);
  const PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([
    {
      begin: /\(/,
      end: /\)/,
      keywords: KEYWORDS$12,
      contains: ["self"].concat(SUBST_AND_COMMENTS)
    }
  ]);
  const PARAMS = {
    className: "params",
    begin: /\(/,
    end: /\)/,
    excludeBegin: true,
    excludeEnd: true,
    keywords: KEYWORDS$12,
    contains: PARAMS_CONTAINS
  };
  return {
    name: "Javascript",
    aliases: ["js", "jsx", "mjs", "cjs"],
    keywords: KEYWORDS$12,
    exports: {PARAMS_CONTAINS},
    illegal: /#(?![$_A-z])/,
    contains: [
      hljs2.SHEBANG({
        label: "shebang",
        binary: "node",
        relevance: 5
      }),
      {
        label: "use_strict",
        className: "meta",
        relevance: 10,
        begin: /^\s*['"]use (strict|asm)['"]/
      },
      hljs2.APOS_STRING_MODE,
      hljs2.QUOTE_STRING_MODE,
      HTML_TEMPLATE,
      CSS_TEMPLATE,
      TEMPLATE_STRING,
      COMMENT2,
      NUMBER,
      {
        begin: concat$2(/[{,\n]\s*/, lookahead(concat$2(/(((\/\/.*$)|(\/\*(\*[^/]|[^*])*\*\/))\s*)*/, IDENT_RE$12 + "\\s*:"))),
        relevance: 0,
        contains: [
          {
            className: "attr",
            begin: IDENT_RE$12 + lookahead("\\s*:"),
            relevance: 0
          }
        ]
      },
      {
        begin: "(" + hljs2.RE_STARTERS_RE + "|\\b(case|return|throw)\\b)\\s*",
        keywords: "return throw case",
        contains: [
          COMMENT2,
          hljs2.REGEXP_MODE,
          {
            className: "function",
            begin: "(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|" + hljs2.UNDERSCORE_IDENT_RE + ")\\s*=>",
            returnBegin: true,
            end: "\\s*=>",
            contains: [
              {
                className: "params",
                variants: [
                  {
                    begin: hljs2.UNDERSCORE_IDENT_RE,
                    relevance: 0
                  },
                  {
                    className: null,
                    begin: /\(\s*\)/,
                    skip: true
                  },
                  {
                    begin: /\(/,
                    end: /\)/,
                    excludeBegin: true,
                    excludeEnd: true,
                    keywords: KEYWORDS$12,
                    contains: PARAMS_CONTAINS
                  }
                ]
              }
            ]
          },
          {
            begin: /,/,
            relevance: 0
          },
          {
            className: "",
            begin: /\s/,
            end: /\s*/,
            skip: true
          },
          {
            variants: [
              {begin: FRAGMENT.begin, end: FRAGMENT.end},
              {
                begin: XML_TAG.begin,
                "on:begin": XML_TAG.isTrulyOpeningTag,
                end: XML_TAG.end
              }
            ],
            subLanguage: "xml",
            contains: [
              {
                begin: XML_TAG.begin,
                end: XML_TAG.end,
                skip: true,
                contains: ["self"]
              }
            ]
          }
        ],
        relevance: 0
      },
      {
        className: "function",
        beginKeywords: "function",
        end: /[{;]/,
        excludeEnd: true,
        keywords: KEYWORDS$12,
        contains: [
          "self",
          hljs2.inherit(hljs2.TITLE_MODE, {begin: IDENT_RE$12}),
          PARAMS
        ],
        illegal: /%/
      },
      {
        beginKeywords: "while if switch catch for"
      },
      {
        className: "function",
        begin: hljs2.UNDERSCORE_IDENT_RE + "\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{",
        returnBegin: true,
        contains: [
          PARAMS,
          hljs2.inherit(hljs2.TITLE_MODE, {begin: IDENT_RE$12})
        ]
      },
      {
        variants: [
          {begin: "\\." + IDENT_RE$12},
          {begin: "\\$" + IDENT_RE$12}
        ],
        relevance: 0
      },
      {
        className: "class",
        beginKeywords: "class",
        end: /[{;=]/,
        excludeEnd: true,
        illegal: /[:"[\]]/,
        contains: [
          {beginKeywords: "extends"},
          hljs2.UNDERSCORE_TITLE_MODE
        ]
      },
      {
        begin: /\b(?=constructor)/,
        end: /[{;]/,
        excludeEnd: true,
        contains: [
          hljs2.inherit(hljs2.TITLE_MODE, {begin: IDENT_RE$12}),
          "self",
          PARAMS
        ]
      },
      {
        begin: "(get|set)\\s+(?=" + IDENT_RE$12 + "\\()",
        end: /\{/,
        keywords: "get set",
        contains: [
          hljs2.inherit(hljs2.TITLE_MODE, {begin: IDENT_RE$12}),
          {begin: /\(\)/},
          PARAMS
        ]
      },
      {
        begin: /\$[(.]/
      }
    ]
  };
}
function typescript(hljs2) {
  const IDENT_RE$12 = IDENT_RE;
  const NAMESPACE = {
    beginKeywords: "namespace",
    end: /\{/,
    excludeEnd: true
  };
  const INTERFACE = {
    beginKeywords: "interface",
    end: /\{/,
    excludeEnd: true,
    keywords: "interface extends"
  };
  const USE_STRICT = {
    className: "meta",
    relevance: 10,
    begin: /^\s*['"]use strict['"]/
  };
  const TYPES2 = [
    "any",
    "void",
    "number",
    "boolean",
    "string",
    "object",
    "never",
    "enum"
  ];
  const TS_SPECIFIC_KEYWORDS = [
    "type",
    "namespace",
    "typedef",
    "interface",
    "public",
    "private",
    "protected",
    "implements",
    "declare",
    "abstract",
    "readonly"
  ];
  const KEYWORDS$12 = {
    $pattern: IDENT_RE,
    keyword: KEYWORDS.concat(TS_SPECIFIC_KEYWORDS),
    literal: LITERALS,
    built_in: BUILT_INS.concat(TYPES2)
  };
  const DECORATOR = {
    className: "meta",
    begin: "@" + IDENT_RE$12
  };
  const swapMode = (mode, label, replacement) => {
    const indx = mode.contains.findIndex((m2) => m2.label === label);
    if (indx === -1) {
      throw new Error("can not find mode to replace");
    }
    mode.contains.splice(indx, 1, replacement);
  };
  const tsLanguage = javascript(hljs2);
  Object.assign(tsLanguage.keywords, KEYWORDS$12);
  tsLanguage.exports.PARAMS_CONTAINS.push(DECORATOR);
  tsLanguage.contains = tsLanguage.contains.concat([
    DECORATOR,
    NAMESPACE,
    INTERFACE
  ]);
  swapMode(tsLanguage, "shebang", hljs2.SHEBANG());
  swapMode(tsLanguage, "use_strict", USE_STRICT);
  const functionDeclaration = tsLanguage.contains.find((m2) => m2.className === "function");
  functionDeclaration.relevance = 0;
  Object.assign(tsLanguage, {
    name: "TypeScript",
    aliases: ["ts", "tsx"]
  });
  return tsLanguage;
}
var typescript_1 = typescript;
function vala(hljs2) {
  return {
    name: "Vala",
    keywords: {
      keyword: "char uchar unichar int uint long ulong short ushort int8 int16 int32 int64 uint8 uint16 uint32 uint64 float double bool struct enum string void weak unowned owned async signal static abstract interface override virtual delegate if while do for foreach else switch case break default return try catch public private protected internal using new this get set const stdout stdin stderr var",
      built_in: "DBus GLib CCode Gee Object Gtk Posix",
      literal: "false true null"
    },
    contains: [
      {
        className: "class",
        beginKeywords: "class interface namespace",
        end: /\{/,
        excludeEnd: true,
        illegal: "[^,:\\n\\s\\.]",
        contains: [hljs2.UNDERSCORE_TITLE_MODE]
      },
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      {
        className: "string",
        begin: '"""',
        end: '"""',
        relevance: 5
      },
      hljs2.APOS_STRING_MODE,
      hljs2.QUOTE_STRING_MODE,
      hljs2.C_NUMBER_MODE,
      {
        className: "meta",
        begin: "^#",
        end: "$",
        relevance: 2
      }
    ]
  };
}
var vala_1 = vala;
function source$1(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function concat$1(...args) {
  const joined = args.map((x2) => source$1(x2)).join("");
  return joined;
}
function either$1(...args) {
  const joined = "(" + args.map((x2) => source$1(x2)).join("|") + ")";
  return joined;
}
function vbnet(hljs2) {
  const CHARACTER = {
    className: "string",
    begin: /"(""|[^/n])"C\b/
  };
  const STRING = {
    className: "string",
    begin: /"/,
    end: /"/,
    illegal: /\n/,
    contains: [
      {
        begin: /""/
      }
    ]
  };
  const MM_DD_YYYY = /\d{1,2}\/\d{1,2}\/\d{4}/;
  const YYYY_MM_DD = /\d{4}-\d{1,2}-\d{1,2}/;
  const TIME_12H = /(\d|1[012])(:\d+){0,2} *(AM|PM)/;
  const TIME_24H = /\d{1,2}(:\d{1,2}){1,2}/;
  const DATE = {
    className: "literal",
    variants: [
      {
        begin: concat$1(/# */, either$1(YYYY_MM_DD, MM_DD_YYYY), / *#/)
      },
      {
        begin: concat$1(/# */, TIME_24H, / *#/)
      },
      {
        begin: concat$1(/# */, TIME_12H, / *#/)
      },
      {
        begin: concat$1(/# */, either$1(YYYY_MM_DD, MM_DD_YYYY), / +/, either$1(TIME_12H, TIME_24H), / *#/)
      }
    ]
  };
  const NUMBER = {
    className: "number",
    relevance: 0,
    variants: [
      {
        begin: /\b\d[\d_]*((\.[\d_]+(E[+-]?[\d_]+)?)|(E[+-]?[\d_]+))[RFD@!#]?/
      },
      {
        begin: /\b\d[\d_]*((U?[SIL])|[%&])?/
      },
      {
        begin: /&H[\dA-F_]+((U?[SIL])|[%&])?/
      },
      {
        begin: /&O[0-7_]+((U?[SIL])|[%&])?/
      },
      {
        begin: /&B[01_]+((U?[SIL])|[%&])?/
      }
    ]
  };
  const LABEL = {
    className: "label",
    begin: /^\w+:/
  };
  const DOC_COMMENT = hljs2.COMMENT(/'''/, /$/, {
    contains: [
      {
        className: "doctag",
        begin: /<\/?/,
        end: />/
      }
    ]
  });
  const COMMENT2 = hljs2.COMMENT(null, /$/, {
    variants: [
      {
        begin: /'/
      },
      {
        begin: /([\t ]|^)REM(?=\s)/
      }
    ]
  });
  const DIRECTIVES = {
    className: "meta",
    begin: /[\t ]*#(const|disable|else|elseif|enable|end|externalsource|if|region)\b/,
    end: /$/,
    keywords: {
      "meta-keyword": "const disable else elseif enable end externalsource if region then"
    },
    contains: [COMMENT2]
  };
  return {
    name: "Visual Basic .NET",
    aliases: ["vb"],
    case_insensitive: true,
    classNameAliases: {
      label: "symbol"
    },
    keywords: {
      keyword: "addhandler alias aggregate ansi as async assembly auto binary by byref byval call case catch class compare const continue custom declare default delegate dim distinct do each equals else elseif end enum erase error event exit explicit finally for friend from function get global goto group handles if implements imports in inherits interface into iterator join key let lib loop me mid module mustinherit mustoverride mybase myclass namespace narrowing new next notinheritable notoverridable of off on operator option optional order overloads overridable overrides paramarray partial preserve private property protected public raiseevent readonly redim removehandler resume return select set shadows shared skip static step stop structure strict sub synclock take text then throw to try unicode until using when where while widening with withevents writeonly yield",
      built_in: "addressof and andalso await directcast gettype getxmlnamespace is isfalse isnot istrue like mod nameof new not or orelse trycast typeof xor cbool cbyte cchar cdate cdbl cdec cint clng cobj csbyte cshort csng cstr cuint culng cushort",
      type: "boolean byte char date decimal double integer long object sbyte short single string uinteger ulong ushort",
      literal: "true false nothing"
    },
    illegal: "//|\\{|\\}|endif|gosub|variant|wend|^\\$ ",
    contains: [
      CHARACTER,
      STRING,
      DATE,
      NUMBER,
      LABEL,
      DOC_COMMENT,
      COMMENT2,
      DIRECTIVES
    ]
  };
}
var vbnet_1 = vbnet;
function source(re) {
  if (!re)
    return null;
  if (typeof re === "string")
    return re;
  return re.source;
}
function concat(...args) {
  const joined = args.map((x2) => source(x2)).join("");
  return joined;
}
function either(...args) {
  const joined = "(" + args.map((x2) => source(x2)).join("|") + ")";
  return joined;
}
function vbscript(hljs2) {
  const BUILT_IN_FUNCTIONS = "lcase month vartype instrrev ubound setlocale getobject rgb getref string weekdayname rnd dateadd monthname now day minute isarray cbool round formatcurrency conversions csng timevalue second year space abs clng timeserial fixs len asc isempty maths dateserial atn timer isobject filter weekday datevalue ccur isdate instr datediff formatdatetime replace isnull right sgn array snumeric log cdbl hex chr lbound msgbox ucase getlocale cos cdate cbyte rtrim join hour oct typename trim strcomp int createobject loadpicture tan formatnumber mid split  cint sin datepart ltrim sqr time derived eval date formatpercent exp inputbox left ascw chrw regexp cstr err".split(" ");
  const BUILT_IN_OBJECTS = [
    "server",
    "response",
    "request",
    "scriptengine",
    "scriptenginebuildversion",
    "scriptengineminorversion",
    "scriptenginemajorversion"
  ];
  const BUILT_IN_CALL = {
    begin: concat(either(...BUILT_IN_FUNCTIONS), "\\s*\\("),
    relevance: 0,
    keywords: {
      built_in: BUILT_IN_FUNCTIONS
    }
  };
  return {
    name: "VBScript",
    aliases: ["vbs"],
    case_insensitive: true,
    keywords: {
      keyword: "call class const dim do loop erase execute executeglobal exit for each next function if then else on error option explicit new private property let get public randomize redim rem select case set stop sub while wend with end to elseif is or xor and not class_initialize class_terminate default preserve in me byval byref step resume goto",
      built_in: BUILT_IN_OBJECTS,
      literal: "true false null nothing empty"
    },
    illegal: "//",
    contains: [
      BUILT_IN_CALL,
      hljs2.inherit(hljs2.QUOTE_STRING_MODE, {contains: [{begin: '""'}]}),
      hljs2.COMMENT(/'/, /$/, {
        relevance: 0
      }),
      hljs2.C_NUMBER_MODE
    ]
  };
}
var vbscript_1 = vbscript;
function vbscriptHtml(hljs2) {
  return {
    name: "VBScript in HTML",
    subLanguage: "xml",
    contains: [
      {
        begin: "<%",
        end: "%>",
        subLanguage: "vbscript"
      }
    ]
  };
}
var vbscriptHtml_1 = vbscriptHtml;
function verilog(hljs2) {
  const SV_KEYWORDS = {
    $pattern: /[\w\$]+/,
    keyword: "accept_on alias always always_comb always_ff always_latch and assert assign assume automatic before begin bind bins binsof bit break buf|0 bufif0 bufif1 byte case casex casez cell chandle checker class clocking cmos config const constraint context continue cover covergroup coverpoint cross deassign default defparam design disable dist do edge else end endcase endchecker endclass endclocking endconfig endfunction endgenerate endgroup endinterface endmodule endpackage endprimitive endprogram endproperty endspecify endsequence endtable endtask enum event eventually expect export extends extern final first_match for force foreach forever fork forkjoin function generate|5 genvar global highz0 highz1 if iff ifnone ignore_bins illegal_bins implements implies import incdir include initial inout input inside instance int integer interconnect interface intersect join join_any join_none large let liblist library local localparam logic longint macromodule matches medium modport module nand negedge nettype new nexttime nmos nor noshowcancelled not notif0 notif1 or output package packed parameter pmos posedge primitive priority program property protected pull0 pull1 pulldown pullup pulsestyle_ondetect pulsestyle_onevent pure rand randc randcase randsequence rcmos real realtime ref reg reject_on release repeat restrict return rnmos rpmos rtran rtranif0 rtranif1 s_always s_eventually s_nexttime s_until s_until_with scalared sequence shortint shortreal showcancelled signed small soft solve specify specparam static string strong strong0 strong1 struct super supply0 supply1 sync_accept_on sync_reject_on table tagged task this throughout time timeprecision timeunit tran tranif0 tranif1 tri tri0 tri1 triand trior trireg type typedef union unique unique0 unsigned until until_with untyped use uwire var vectored virtual void wait wait_order wand weak weak0 weak1 while wildcard wire with within wor xnor xor",
    literal: "null",
    built_in: "$finish $stop $exit $fatal $error $warning $info $realtime $time $printtimescale $bitstoreal $bitstoshortreal $itor $signed $cast $bits $stime $timeformat $realtobits $shortrealtobits $rtoi $unsigned $asserton $assertkill $assertpasson $assertfailon $assertnonvacuouson $assertoff $assertcontrol $assertpassoff $assertfailoff $assertvacuousoff $isunbounded $sampled $fell $changed $past_gclk $fell_gclk $changed_gclk $rising_gclk $steady_gclk $coverage_control $coverage_get $coverage_save $set_coverage_db_name $rose $stable $past $rose_gclk $stable_gclk $future_gclk $falling_gclk $changing_gclk $display $coverage_get_max $coverage_merge $get_coverage $load_coverage_db $typename $unpacked_dimensions $left $low $increment $clog2 $ln $log10 $exp $sqrt $pow $floor $ceil $sin $cos $tan $countbits $onehot $isunknown $fatal $warning $dimensions $right $high $size $asin $acos $atan $atan2 $hypot $sinh $cosh $tanh $asinh $acosh $atanh $countones $onehot0 $error $info $random $dist_chi_square $dist_erlang $dist_exponential $dist_normal $dist_poisson $dist_t $dist_uniform $q_initialize $q_remove $q_exam $async$and$array $async$nand$array $async$or$array $async$nor$array $sync$and$array $sync$nand$array $sync$or$array $sync$nor$array $q_add $q_full $psprintf $async$and$plane $async$nand$plane $async$or$plane $async$nor$plane $sync$and$plane $sync$nand$plane $sync$or$plane $sync$nor$plane $system $display $displayb $displayh $displayo $strobe $strobeb $strobeh $strobeo $write $readmemb $readmemh $writememh $value$plusargs $dumpvars $dumpon $dumplimit $dumpports $dumpportson $dumpportslimit $writeb $writeh $writeo $monitor $monitorb $monitorh $monitoro $writememb $dumpfile $dumpoff $dumpall $dumpflush $dumpportsoff $dumpportsall $dumpportsflush $fclose $fdisplay $fdisplayb $fdisplayh $fdisplayo $fstrobe $fstrobeb $fstrobeh $fstrobeo $swrite $swriteb $swriteh $swriteo $fscanf $fread $fseek $fflush $feof $fopen $fwrite $fwriteb $fwriteh $fwriteo $fmonitor $fmonitorb $fmonitorh $fmonitoro $sformat $sformatf $fgetc $ungetc $fgets $sscanf $rewind $ftell $ferror"
  };
  return {
    name: "Verilog",
    aliases: [
      "v",
      "sv",
      "svh"
    ],
    case_insensitive: false,
    keywords: SV_KEYWORDS,
    contains: [
      hljs2.C_BLOCK_COMMENT_MODE,
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.QUOTE_STRING_MODE,
      {
        className: "number",
        contains: [hljs2.BACKSLASH_ESCAPE],
        variants: [
          {
            begin: "\\b((\\d+'(b|h|o|d|B|H|O|D))[0-9xzXZa-fA-F_]+)"
          },
          {
            begin: "\\B(('(b|h|o|d|B|H|O|D))[0-9xzXZa-fA-F_]+)"
          },
          {
            begin: "\\b([0-9_])+",
            relevance: 0
          }
        ]
      },
      {
        className: "variable",
        variants: [
          {
            begin: "#\\((?!parameter).+\\)"
          },
          {
            begin: "\\.\\w+",
            relevance: 0
          }
        ]
      },
      {
        className: "meta",
        begin: "`",
        end: "$",
        keywords: {
          "meta-keyword": "define __FILE__ __LINE__ begin_keywords celldefine default_nettype define else elsif end_keywords endcelldefine endif ifdef ifndef include line nounconnected_drive pragma resetall timescale unconnected_drive undef undefineall"
        },
        relevance: 0
      }
    ]
  };
}
var verilog_1 = verilog;
function vhdl(hljs2) {
  const INTEGER_RE = "\\d(_|\\d)*";
  const EXPONENT_RE = "[eE][-+]?" + INTEGER_RE;
  const DECIMAL_LITERAL_RE = INTEGER_RE + "(\\." + INTEGER_RE + ")?(" + EXPONENT_RE + ")?";
  const BASED_INTEGER_RE = "\\w+";
  const BASED_LITERAL_RE = INTEGER_RE + "#" + BASED_INTEGER_RE + "(\\." + BASED_INTEGER_RE + ")?#(" + EXPONENT_RE + ")?";
  const NUMBER_RE2 = "\\b(" + BASED_LITERAL_RE + "|" + DECIMAL_LITERAL_RE + ")";
  return {
    name: "VHDL",
    case_insensitive: true,
    keywords: {
      keyword: "abs access after alias all and architecture array assert assume assume_guarantee attribute begin block body buffer bus case component configuration constant context cover disconnect downto default else elsif end entity exit fairness file for force function generate generic group guarded if impure in inertial inout is label library linkage literal loop map mod nand new next nor not null of on open or others out package parameter port postponed procedure process property protected pure range record register reject release rem report restrict restrict_guarantee return rol ror select sequence severity shared signal sla sll sra srl strong subtype then to transport type unaffected units until use variable view vmode vprop vunit wait when while with xnor xor",
      built_in: "boolean bit character integer time delay_length natural positive string bit_vector file_open_kind file_open_status std_logic std_logic_vector unsigned signed boolean_vector integer_vector std_ulogic std_ulogic_vector unresolved_unsigned u_unsigned unresolved_signed u_signed real_vector time_vector",
      literal: "false true note warning error failure line text side width"
    },
    illegal: /\{/,
    contains: [
      hljs2.C_BLOCK_COMMENT_MODE,
      hljs2.COMMENT("--", "$"),
      hljs2.QUOTE_STRING_MODE,
      {
        className: "number",
        begin: NUMBER_RE2,
        relevance: 0
      },
      {
        className: "string",
        begin: "'(U|X|0|1|Z|W|L|H|-)'",
        contains: [hljs2.BACKSLASH_ESCAPE]
      },
      {
        className: "symbol",
        begin: "'[A-Za-z](_?[A-Za-z0-9])*",
        contains: [hljs2.BACKSLASH_ESCAPE]
      }
    ]
  };
}
var vhdl_1 = vhdl;
function vim(hljs2) {
  return {
    name: "Vim Script",
    keywords: {
      $pattern: /[!#@\w]+/,
      keyword: "N|0 P|0 X|0 a|0 ab abc abo al am an|0 ar arga argd arge argdo argg argl argu as au aug aun b|0 bN ba bad bd be bel bf bl bm bn bo bp br brea breaka breakd breakl bro bufdo buffers bun bw c|0 cN cNf ca cabc caddb cad caddf cal cat cb cc ccl cd ce cex cf cfir cgetb cgete cg changes chd che checkt cl cla clo cm cmapc cme cn cnew cnf cno cnorea cnoreme co col colo com comc comp con conf cope cp cpf cq cr cs cst cu cuna cunme cw delm deb debugg delc delf dif diffg diffo diffp diffpu diffs diffthis dig di dl dell dj dli do doautoa dp dr ds dsp e|0 ea ec echoe echoh echom echon el elsei em en endfo endf endt endw ene ex exe exi exu f|0 files filet fin fina fini fir fix fo foldc foldd folddoc foldo for fu go gr grepa gu gv ha helpf helpg helpt hi hid his ia iabc if ij il im imapc ime ino inorea inoreme int is isp iu iuna iunme j|0 ju k|0 keepa kee keepj lN lNf l|0 lad laddb laddf la lan lat lb lc lch lcl lcs le lefta let lex lf lfir lgetb lgete lg lgr lgrepa lh ll lla lli lmak lm lmapc lne lnew lnf ln loadk lo loc lockv lol lope lp lpf lr ls lt lu lua luad luaf lv lvimgrepa lw m|0 ma mak map mapc marks mat me menut mes mk mks mksp mkv mkvie mod mz mzf nbc nb nbs new nm nmapc nme nn nnoreme noa no noh norea noreme norm nu nun nunme ol o|0 om omapc ome on ono onoreme opt ou ounme ow p|0 profd prof pro promptr pc ped pe perld po popu pp pre prev ps pt ptN ptf ptj ptl ptn ptp ptr pts pu pw py3 python3 py3d py3f py pyd pyf quita qa rec red redi redr redraws reg res ret retu rew ri rightb rub rubyd rubyf rund ru rv sN san sa sal sav sb sbN sba sbf sbl sbm sbn sbp sbr scrip scripte scs se setf setg setl sf sfir sh sim sig sil sl sla sm smap smapc sme sn sni sno snor snoreme sor so spelld spe spelli spellr spellu spellw sp spr sre st sta startg startr star stopi stj sts sun sunm sunme sus sv sw sy synti sync tN tabN tabc tabdo tabe tabf tabfir tabl tabm tabnew tabn tabo tabp tabr tabs tab ta tags tc tcld tclf te tf th tj tl tm tn to tp tr try ts tu u|0 undoj undol una unh unl unlo unm unme uns up ve verb vert vim vimgrepa vi viu vie vm vmapc vme vne vn vnoreme vs vu vunme windo w|0 wN wa wh wi winc winp wn wp wq wqa ws wu wv x|0 xa xmapc xm xme xn xnoreme xu xunme y|0 z|0 ~ Next Print append abbreviate abclear aboveleft all amenu anoremenu args argadd argdelete argedit argglobal arglocal argument ascii autocmd augroup aunmenu buffer bNext ball badd bdelete behave belowright bfirst blast bmodified bnext botright bprevious brewind break breakadd breakdel breaklist browse bunload bwipeout change cNext cNfile cabbrev cabclear caddbuffer caddexpr caddfile call catch cbuffer cclose center cexpr cfile cfirst cgetbuffer cgetexpr cgetfile chdir checkpath checktime clist clast close cmap cmapclear cmenu cnext cnewer cnfile cnoremap cnoreabbrev cnoremenu copy colder colorscheme command comclear compiler continue confirm copen cprevious cpfile cquit crewind cscope cstag cunmap cunabbrev cunmenu cwindow delete delmarks debug debuggreedy delcommand delfunction diffupdate diffget diffoff diffpatch diffput diffsplit digraphs display deletel djump dlist doautocmd doautoall deletep drop dsearch dsplit edit earlier echo echoerr echohl echomsg else elseif emenu endif endfor endfunction endtry endwhile enew execute exit exusage file filetype find finally finish first fixdel fold foldclose folddoopen folddoclosed foldopen function global goto grep grepadd gui gvim hardcopy help helpfind helpgrep helptags highlight hide history insert iabbrev iabclear ijump ilist imap imapclear imenu inoremap inoreabbrev inoremenu intro isearch isplit iunmap iunabbrev iunmenu join jumps keepalt keepmarks keepjumps lNext lNfile list laddexpr laddbuffer laddfile last language later lbuffer lcd lchdir lclose lcscope left leftabove lexpr lfile lfirst lgetbuffer lgetexpr lgetfile lgrep lgrepadd lhelpgrep llast llist lmake lmap lmapclear lnext lnewer lnfile lnoremap loadkeymap loadview lockmarks lockvar lolder lopen lprevious lpfile lrewind ltag lunmap luado luafile lvimgrep lvimgrepadd lwindow move mark make mapclear match menu menutranslate messages mkexrc mksession mkspell mkvimrc mkview mode mzscheme mzfile nbclose nbkey nbsart next nmap nmapclear nmenu nnoremap nnoremenu noautocmd noremap nohlsearch noreabbrev noremenu normal number nunmap nunmenu oldfiles open omap omapclear omenu only onoremap onoremenu options ounmap ounmenu ownsyntax print profdel profile promptfind promptrepl pclose pedit perl perldo pop popup ppop preserve previous psearch ptag ptNext ptfirst ptjump ptlast ptnext ptprevious ptrewind ptselect put pwd py3do py3file python pydo pyfile quit quitall qall read recover redo redir redraw redrawstatus registers resize retab return rewind right rightbelow ruby rubydo rubyfile rundo runtime rviminfo substitute sNext sandbox sargument sall saveas sbuffer sbNext sball sbfirst sblast sbmodified sbnext sbprevious sbrewind scriptnames scriptencoding scscope set setfiletype setglobal setlocal sfind sfirst shell simalt sign silent sleep slast smagic smapclear smenu snext sniff snomagic snoremap snoremenu sort source spelldump spellgood spellinfo spellrepall spellundo spellwrong split sprevious srewind stop stag startgreplace startreplace startinsert stopinsert stjump stselect sunhide sunmap sunmenu suspend sview swapname syntax syntime syncbind tNext tabNext tabclose tabedit tabfind tabfirst tablast tabmove tabnext tabonly tabprevious tabrewind tag tcl tcldo tclfile tearoff tfirst throw tjump tlast tmenu tnext topleft tprevious trewind tselect tunmenu undo undojoin undolist unabbreviate unhide unlet unlockvar unmap unmenu unsilent update vglobal version verbose vertical vimgrep vimgrepadd visual viusage view vmap vmapclear vmenu vnew vnoremap vnoremenu vsplit vunmap vunmenu write wNext wall while winsize wincmd winpos wnext wprevious wqall wsverb wundo wviminfo xit xall xmapclear xmap xmenu xnoremap xnoremenu xunmap xunmenu yank",
      built_in: "synIDtrans atan2 range matcharg did_filetype asin feedkeys xor argv complete_check add getwinposx getqflist getwinposy screencol clearmatches empty extend getcmdpos mzeval garbagecollect setreg ceil sqrt diff_hlID inputsecret get getfperm getpid filewritable shiftwidth max sinh isdirectory synID system inputrestore winline atan visualmode inputlist tabpagewinnr round getregtype mapcheck hasmapto histdel argidx findfile sha256 exists toupper getcmdline taglist string getmatches bufnr strftime winwidth bufexists strtrans tabpagebuflist setcmdpos remote_read printf setloclist getpos getline bufwinnr float2nr len getcmdtype diff_filler luaeval resolve libcallnr foldclosedend reverse filter has_key bufname str2float strlen setline getcharmod setbufvar index searchpos shellescape undofile foldclosed setqflist buflisted strchars str2nr virtcol floor remove undotree remote_expr winheight gettabwinvar reltime cursor tabpagenr finddir localtime acos getloclist search tanh matchend rename gettabvar strdisplaywidth type abs py3eval setwinvar tolower wildmenumode log10 spellsuggest bufloaded synconcealed nextnonblank server2client complete settabwinvar executable input wincol setmatches getftype hlID inputsave searchpair or screenrow line settabvar histadd deepcopy strpart remote_peek and eval getftime submatch screenchar winsaveview matchadd mkdir screenattr getfontname libcall reltimestr getfsize winnr invert pow getbufline byte2line soundfold repeat fnameescape tagfiles sin strwidth spellbadword trunc maparg log lispindent hostname setpos globpath remote_foreground getchar synIDattr fnamemodify cscope_connection stridx winbufnr indent min complete_add nr2char searchpairpos inputdialog values matchlist items hlexists strridx browsedir expand fmod pathshorten line2byte argc count getwinvar glob foldtextresult getreg foreground cosh matchdelete has char2nr simplify histget searchdecl iconv winrestcmd pumvisible writefile foldlevel haslocaldir keys cos matchstr foldtext histnr tan tempname getcwd byteidx getbufvar islocked escape eventhandler remote_send serverlist winrestview synstack pyeval prevnonblank readfile cindent filereadable changenr exp"
    },
    illegal: /;/,
    contains: [
      hljs2.NUMBER_MODE,
      {
        className: "string",
        begin: "'",
        end: "'",
        illegal: "\\n"
      },
      {
        className: "string",
        begin: /"(\\"|\n\\|[^"\n])*"/
      },
      hljs2.COMMENT('"', "$"),
      {
        className: "variable",
        begin: /[bwtglsav]:[\w\d_]*/
      },
      {
        className: "function",
        beginKeywords: "function function!",
        end: "$",
        relevance: 0,
        contains: [
          hljs2.TITLE_MODE,
          {
            className: "params",
            begin: "\\(",
            end: "\\)"
          }
        ]
      },
      {
        className: "symbol",
        begin: /<[\w-]+>/
      }
    ]
  };
}
var vim_1 = vim;
function x86asm(hljs2) {
  return {
    name: "Intel x86 Assembly",
    case_insensitive: true,
    keywords: {
      $pattern: "[.%]?" + hljs2.IDENT_RE,
      keyword: "lock rep repe repz repne repnz xaquire xrelease bnd nobnd aaa aad aam aas adc add and arpl bb0_reset bb1_reset bound bsf bsr bswap bt btc btr bts call cbw cdq cdqe clc cld cli clts cmc cmp cmpsb cmpsd cmpsq cmpsw cmpxchg cmpxchg486 cmpxchg8b cmpxchg16b cpuid cpu_read cpu_write cqo cwd cwde daa das dec div dmint emms enter equ f2xm1 fabs fadd faddp fbld fbstp fchs fclex fcmovb fcmovbe fcmove fcmovnb fcmovnbe fcmovne fcmovnu fcmovu fcom fcomi fcomip fcomp fcompp fcos fdecstp fdisi fdiv fdivp fdivr fdivrp femms feni ffree ffreep fiadd ficom ficomp fidiv fidivr fild fimul fincstp finit fist fistp fisttp fisub fisubr fld fld1 fldcw fldenv fldl2e fldl2t fldlg2 fldln2 fldpi fldz fmul fmulp fnclex fndisi fneni fninit fnop fnsave fnstcw fnstenv fnstsw fpatan fprem fprem1 fptan frndint frstor fsave fscale fsetpm fsin fsincos fsqrt fst fstcw fstenv fstp fstsw fsub fsubp fsubr fsubrp ftst fucom fucomi fucomip fucomp fucompp fxam fxch fxtract fyl2x fyl2xp1 hlt ibts icebp idiv imul in inc incbin insb insd insw int int01 int1 int03 int3 into invd invpcid invlpg invlpga iret iretd iretq iretw jcxz jecxz jrcxz jmp jmpe lahf lar lds lea leave les lfence lfs lgdt lgs lidt lldt lmsw loadall loadall286 lodsb lodsd lodsq lodsw loop loope loopne loopnz loopz lsl lss ltr mfence monitor mov movd movq movsb movsd movsq movsw movsx movsxd movzx mul mwait neg nop not or out outsb outsd outsw packssdw packsswb packuswb paddb paddd paddsb paddsiw paddsw paddusb paddusw paddw pand pandn pause paveb pavgusb pcmpeqb pcmpeqd pcmpeqw pcmpgtb pcmpgtd pcmpgtw pdistib pf2id pfacc pfadd pfcmpeq pfcmpge pfcmpgt pfmax pfmin pfmul pfrcp pfrcpit1 pfrcpit2 pfrsqit1 pfrsqrt pfsub pfsubr pi2fd pmachriw pmaddwd pmagw pmulhriw pmulhrwa pmulhrwc pmulhw pmullw pmvgezb pmvlzb pmvnzb pmvzb pop popa popad popaw popf popfd popfq popfw por prefetch prefetchw pslld psllq psllw psrad psraw psrld psrlq psrlw psubb psubd psubsb psubsiw psubsw psubusb psubusw psubw punpckhbw punpckhdq punpckhwd punpcklbw punpckldq punpcklwd push pusha pushad pushaw pushf pushfd pushfq pushfw pxor rcl rcr rdshr rdmsr rdpmc rdtsc rdtscp ret retf retn rol ror rdm rsdc rsldt rsm rsts sahf sal salc sar sbb scasb scasd scasq scasw sfence sgdt shl shld shr shrd sidt sldt skinit smi smint smintold smsw stc std sti stosb stosd stosq stosw str sub svdc svldt svts swapgs syscall sysenter sysexit sysret test ud0 ud1 ud2b ud2 ud2a umov verr verw fwait wbinvd wrshr wrmsr xadd xbts xchg xlatb xlat xor cmove cmovz cmovne cmovnz cmova cmovnbe cmovae cmovnb cmovb cmovnae cmovbe cmovna cmovg cmovnle cmovge cmovnl cmovl cmovnge cmovle cmovng cmovc cmovnc cmovo cmovno cmovs cmovns cmovp cmovpe cmovnp cmovpo je jz jne jnz ja jnbe jae jnb jb jnae jbe jna jg jnle jge jnl jl jnge jle jng jc jnc jo jno js jns jpo jnp jpe jp sete setz setne setnz seta setnbe setae setnb setnc setb setnae setcset setbe setna setg setnle setge setnl setl setnge setle setng sets setns seto setno setpe setp setpo setnp addps addss andnps andps cmpeqps cmpeqss cmpleps cmpless cmpltps cmpltss cmpneqps cmpneqss cmpnleps cmpnless cmpnltps cmpnltss cmpordps cmpordss cmpunordps cmpunordss cmpps cmpss comiss cvtpi2ps cvtps2pi cvtsi2ss cvtss2si cvttps2pi cvttss2si divps divss ldmxcsr maxps maxss minps minss movaps movhps movlhps movlps movhlps movmskps movntps movss movups mulps mulss orps rcpps rcpss rsqrtps rsqrtss shufps sqrtps sqrtss stmxcsr subps subss ucomiss unpckhps unpcklps xorps fxrstor fxrstor64 fxsave fxsave64 xgetbv xsetbv xsave xsave64 xsaveopt xsaveopt64 xrstor xrstor64 prefetchnta prefetcht0 prefetcht1 prefetcht2 maskmovq movntq pavgb pavgw pextrw pinsrw pmaxsw pmaxub pminsw pminub pmovmskb pmulhuw psadbw pshufw pf2iw pfnacc pfpnacc pi2fw pswapd maskmovdqu clflush movntdq movnti movntpd movdqa movdqu movdq2q movq2dq paddq pmuludq pshufd pshufhw pshuflw pslldq psrldq psubq punpckhqdq punpcklqdq addpd addsd andnpd andpd cmpeqpd cmpeqsd cmplepd cmplesd cmpltpd cmpltsd cmpneqpd cmpneqsd cmpnlepd cmpnlesd cmpnltpd cmpnltsd cmpordpd cmpordsd cmpunordpd cmpunordsd cmppd comisd cvtdq2pd cvtdq2ps cvtpd2dq cvtpd2pi cvtpd2ps cvtpi2pd cvtps2dq cvtps2pd cvtsd2si cvtsd2ss cvtsi2sd cvtss2sd cvttpd2pi cvttpd2dq cvttps2dq cvttsd2si divpd divsd maxpd maxsd minpd minsd movapd movhpd movlpd movmskpd movupd mulpd mulsd orpd shufpd sqrtpd sqrtsd subpd subsd ucomisd unpckhpd unpcklpd xorpd addsubpd addsubps haddpd haddps hsubpd hsubps lddqu movddup movshdup movsldup clgi stgi vmcall vmclear vmfunc vmlaunch vmload vmmcall vmptrld vmptrst vmread vmresume vmrun vmsave vmwrite vmxoff vmxon invept invvpid pabsb pabsw pabsd palignr phaddw phaddd phaddsw phsubw phsubd phsubsw pmaddubsw pmulhrsw pshufb psignb psignw psignd extrq insertq movntsd movntss lzcnt blendpd blendps blendvpd blendvps dppd dpps extractps insertps movntdqa mpsadbw packusdw pblendvb pblendw pcmpeqq pextrb pextrd pextrq phminposuw pinsrb pinsrd pinsrq pmaxsb pmaxsd pmaxud pmaxuw pminsb pminsd pminud pminuw pmovsxbw pmovsxbd pmovsxbq pmovsxwd pmovsxwq pmovsxdq pmovzxbw pmovzxbd pmovzxbq pmovzxwd pmovzxwq pmovzxdq pmuldq pmulld ptest roundpd roundps roundsd roundss crc32 pcmpestri pcmpestrm pcmpistri pcmpistrm pcmpgtq popcnt getsec pfrcpv pfrsqrtv movbe aesenc aesenclast aesdec aesdeclast aesimc aeskeygenassist vaesenc vaesenclast vaesdec vaesdeclast vaesimc vaeskeygenassist vaddpd vaddps vaddsd vaddss vaddsubpd vaddsubps vandpd vandps vandnpd vandnps vblendpd vblendps vblendvpd vblendvps vbroadcastss vbroadcastsd vbroadcastf128 vcmpeq_ospd vcmpeqpd vcmplt_ospd vcmpltpd vcmple_ospd vcmplepd vcmpunord_qpd vcmpunordpd vcmpneq_uqpd vcmpneqpd vcmpnlt_uspd vcmpnltpd vcmpnle_uspd vcmpnlepd vcmpord_qpd vcmpordpd vcmpeq_uqpd vcmpnge_uspd vcmpngepd vcmpngt_uspd vcmpngtpd vcmpfalse_oqpd vcmpfalsepd vcmpneq_oqpd vcmpge_ospd vcmpgepd vcmpgt_ospd vcmpgtpd vcmptrue_uqpd vcmptruepd vcmplt_oqpd vcmple_oqpd vcmpunord_spd vcmpneq_uspd vcmpnlt_uqpd vcmpnle_uqpd vcmpord_spd vcmpeq_uspd vcmpnge_uqpd vcmpngt_uqpd vcmpfalse_ospd vcmpneq_ospd vcmpge_oqpd vcmpgt_oqpd vcmptrue_uspd vcmppd vcmpeq_osps vcmpeqps vcmplt_osps vcmpltps vcmple_osps vcmpleps vcmpunord_qps vcmpunordps vcmpneq_uqps vcmpneqps vcmpnlt_usps vcmpnltps vcmpnle_usps vcmpnleps vcmpord_qps vcmpordps vcmpeq_uqps vcmpnge_usps vcmpngeps vcmpngt_usps vcmpngtps vcmpfalse_oqps vcmpfalseps vcmpneq_oqps vcmpge_osps vcmpgeps vcmpgt_osps vcmpgtps vcmptrue_uqps vcmptrueps vcmplt_oqps vcmple_oqps vcmpunord_sps vcmpneq_usps vcmpnlt_uqps vcmpnle_uqps vcmpord_sps vcmpeq_usps vcmpnge_uqps vcmpngt_uqps vcmpfalse_osps vcmpneq_osps vcmpge_oqps vcmpgt_oqps vcmptrue_usps vcmpps vcmpeq_ossd vcmpeqsd vcmplt_ossd vcmpltsd vcmple_ossd vcmplesd vcmpunord_qsd vcmpunordsd vcmpneq_uqsd vcmpneqsd vcmpnlt_ussd vcmpnltsd vcmpnle_ussd vcmpnlesd vcmpord_qsd vcmpordsd vcmpeq_uqsd vcmpnge_ussd vcmpngesd vcmpngt_ussd vcmpngtsd vcmpfalse_oqsd vcmpfalsesd vcmpneq_oqsd vcmpge_ossd vcmpgesd vcmpgt_ossd vcmpgtsd vcmptrue_uqsd vcmptruesd vcmplt_oqsd vcmple_oqsd vcmpunord_ssd vcmpneq_ussd vcmpnlt_uqsd vcmpnle_uqsd vcmpord_ssd vcmpeq_ussd vcmpnge_uqsd vcmpngt_uqsd vcmpfalse_ossd vcmpneq_ossd vcmpge_oqsd vcmpgt_oqsd vcmptrue_ussd vcmpsd vcmpeq_osss vcmpeqss vcmplt_osss vcmpltss vcmple_osss vcmpless vcmpunord_qss vcmpunordss vcmpneq_uqss vcmpneqss vcmpnlt_usss vcmpnltss vcmpnle_usss vcmpnless vcmpord_qss vcmpordss vcmpeq_uqss vcmpnge_usss vcmpngess vcmpngt_usss vcmpngtss vcmpfalse_oqss vcmpfalsess vcmpneq_oqss vcmpge_osss vcmpgess vcmpgt_osss vcmpgtss vcmptrue_uqss vcmptruess vcmplt_oqss vcmple_oqss vcmpunord_sss vcmpneq_usss vcmpnlt_uqss vcmpnle_uqss vcmpord_sss vcmpeq_usss vcmpnge_uqss vcmpngt_uqss vcmpfalse_osss vcmpneq_osss vcmpge_oqss vcmpgt_oqss vcmptrue_usss vcmpss vcomisd vcomiss vcvtdq2pd vcvtdq2ps vcvtpd2dq vcvtpd2ps vcvtps2dq vcvtps2pd vcvtsd2si vcvtsd2ss vcvtsi2sd vcvtsi2ss vcvtss2sd vcvtss2si vcvttpd2dq vcvttps2dq vcvttsd2si vcvttss2si vdivpd vdivps vdivsd vdivss vdppd vdpps vextractf128 vextractps vhaddpd vhaddps vhsubpd vhsubps vinsertf128 vinsertps vlddqu vldqqu vldmxcsr vmaskmovdqu vmaskmovps vmaskmovpd vmaxpd vmaxps vmaxsd vmaxss vminpd vminps vminsd vminss vmovapd vmovaps vmovd vmovq vmovddup vmovdqa vmovqqa vmovdqu vmovqqu vmovhlps vmovhpd vmovhps vmovlhps vmovlpd vmovlps vmovmskpd vmovmskps vmovntdq vmovntqq vmovntdqa vmovntpd vmovntps vmovsd vmovshdup vmovsldup vmovss vmovupd vmovups vmpsadbw vmulpd vmulps vmulsd vmulss vorpd vorps vpabsb vpabsw vpabsd vpacksswb vpackssdw vpackuswb vpackusdw vpaddb vpaddw vpaddd vpaddq vpaddsb vpaddsw vpaddusb vpaddusw vpalignr vpand vpandn vpavgb vpavgw vpblendvb vpblendw vpcmpestri vpcmpestrm vpcmpistri vpcmpistrm vpcmpeqb vpcmpeqw vpcmpeqd vpcmpeqq vpcmpgtb vpcmpgtw vpcmpgtd vpcmpgtq vpermilpd vpermilps vperm2f128 vpextrb vpextrw vpextrd vpextrq vphaddw vphaddd vphaddsw vphminposuw vphsubw vphsubd vphsubsw vpinsrb vpinsrw vpinsrd vpinsrq vpmaddwd vpmaddubsw vpmaxsb vpmaxsw vpmaxsd vpmaxub vpmaxuw vpmaxud vpminsb vpminsw vpminsd vpminub vpminuw vpminud vpmovmskb vpmovsxbw vpmovsxbd vpmovsxbq vpmovsxwd vpmovsxwq vpmovsxdq vpmovzxbw vpmovzxbd vpmovzxbq vpmovzxwd vpmovzxwq vpmovzxdq vpmulhuw vpmulhrsw vpmulhw vpmullw vpmulld vpmuludq vpmuldq vpor vpsadbw vpshufb vpshufd vpshufhw vpshuflw vpsignb vpsignw vpsignd vpslldq vpsrldq vpsllw vpslld vpsllq vpsraw vpsrad vpsrlw vpsrld vpsrlq vptest vpsubb vpsubw vpsubd vpsubq vpsubsb vpsubsw vpsubusb vpsubusw vpunpckhbw vpunpckhwd vpunpckhdq vpunpckhqdq vpunpcklbw vpunpcklwd vpunpckldq vpunpcklqdq vpxor vrcpps vrcpss vrsqrtps vrsqrtss vroundpd vroundps vroundsd vroundss vshufpd vshufps vsqrtpd vsqrtps vsqrtsd vsqrtss vstmxcsr vsubpd vsubps vsubsd vsubss vtestps vtestpd vucomisd vucomiss vunpckhpd vunpckhps vunpcklpd vunpcklps vxorpd vxorps vzeroall vzeroupper pclmullqlqdq pclmulhqlqdq pclmullqhqdq pclmulhqhqdq pclmulqdq vpclmullqlqdq vpclmulhqlqdq vpclmullqhqdq vpclmulhqhqdq vpclmulqdq vfmadd132ps vfmadd132pd vfmadd312ps vfmadd312pd vfmadd213ps vfmadd213pd vfmadd123ps vfmadd123pd vfmadd231ps vfmadd231pd vfmadd321ps vfmadd321pd vfmaddsub132ps vfmaddsub132pd vfmaddsub312ps vfmaddsub312pd vfmaddsub213ps vfmaddsub213pd vfmaddsub123ps vfmaddsub123pd vfmaddsub231ps vfmaddsub231pd vfmaddsub321ps vfmaddsub321pd vfmsub132ps vfmsub132pd vfmsub312ps vfmsub312pd vfmsub213ps vfmsub213pd vfmsub123ps vfmsub123pd vfmsub231ps vfmsub231pd vfmsub321ps vfmsub321pd vfmsubadd132ps vfmsubadd132pd vfmsubadd312ps vfmsubadd312pd vfmsubadd213ps vfmsubadd213pd vfmsubadd123ps vfmsubadd123pd vfmsubadd231ps vfmsubadd231pd vfmsubadd321ps vfmsubadd321pd vfnmadd132ps vfnmadd132pd vfnmadd312ps vfnmadd312pd vfnmadd213ps vfnmadd213pd vfnmadd123ps vfnmadd123pd vfnmadd231ps vfnmadd231pd vfnmadd321ps vfnmadd321pd vfnmsub132ps vfnmsub132pd vfnmsub312ps vfnmsub312pd vfnmsub213ps vfnmsub213pd vfnmsub123ps vfnmsub123pd vfnmsub231ps vfnmsub231pd vfnmsub321ps vfnmsub321pd vfmadd132ss vfmadd132sd vfmadd312ss vfmadd312sd vfmadd213ss vfmadd213sd vfmadd123ss vfmadd123sd vfmadd231ss vfmadd231sd vfmadd321ss vfmadd321sd vfmsub132ss vfmsub132sd vfmsub312ss vfmsub312sd vfmsub213ss vfmsub213sd vfmsub123ss vfmsub123sd vfmsub231ss vfmsub231sd vfmsub321ss vfmsub321sd vfnmadd132ss vfnmadd132sd vfnmadd312ss vfnmadd312sd vfnmadd213ss vfnmadd213sd vfnmadd123ss vfnmadd123sd vfnmadd231ss vfnmadd231sd vfnmadd321ss vfnmadd321sd vfnmsub132ss vfnmsub132sd vfnmsub312ss vfnmsub312sd vfnmsub213ss vfnmsub213sd vfnmsub123ss vfnmsub123sd vfnmsub231ss vfnmsub231sd vfnmsub321ss vfnmsub321sd rdfsbase rdgsbase rdrand wrfsbase wrgsbase vcvtph2ps vcvtps2ph adcx adox rdseed clac stac xstore xcryptecb xcryptcbc xcryptctr xcryptcfb xcryptofb montmul xsha1 xsha256 llwpcb slwpcb lwpval lwpins vfmaddpd vfmaddps vfmaddsd vfmaddss vfmaddsubpd vfmaddsubps vfmsubaddpd vfmsubaddps vfmsubpd vfmsubps vfmsubsd vfmsubss vfnmaddpd vfnmaddps vfnmaddsd vfnmaddss vfnmsubpd vfnmsubps vfnmsubsd vfnmsubss vfrczpd vfrczps vfrczsd vfrczss vpcmov vpcomb vpcomd vpcomq vpcomub vpcomud vpcomuq vpcomuw vpcomw vphaddbd vphaddbq vphaddbw vphadddq vphaddubd vphaddubq vphaddubw vphaddudq vphadduwd vphadduwq vphaddwd vphaddwq vphsubbw vphsubdq vphsubwd vpmacsdd vpmacsdqh vpmacsdql vpmacssdd vpmacssdqh vpmacssdql vpmacsswd vpmacssww vpmacswd vpmacsww vpmadcsswd vpmadcswd vpperm vprotb vprotd vprotq vprotw vpshab vpshad vpshaq vpshaw vpshlb vpshld vpshlq vpshlw vbroadcasti128 vpblendd vpbroadcastb vpbroadcastw vpbroadcastd vpbroadcastq vpermd vpermpd vpermps vpermq vperm2i128 vextracti128 vinserti128 vpmaskmovd vpmaskmovq vpsllvd vpsllvq vpsravd vpsrlvd vpsrlvq vgatherdpd vgatherqpd vgatherdps vgatherqps vpgatherdd vpgatherqd vpgatherdq vpgatherqq xabort xbegin xend xtest andn bextr blci blcic blsi blsic blcfill blsfill blcmsk blsmsk blsr blcs bzhi mulx pdep pext rorx sarx shlx shrx tzcnt tzmsk t1mskc valignd valignq vblendmpd vblendmps vbroadcastf32x4 vbroadcastf64x4 vbroadcasti32x4 vbroadcasti64x4 vcompresspd vcompressps vcvtpd2udq vcvtps2udq vcvtsd2usi vcvtss2usi vcvttpd2udq vcvttps2udq vcvttsd2usi vcvttss2usi vcvtudq2pd vcvtudq2ps vcvtusi2sd vcvtusi2ss vexpandpd vexpandps vextractf32x4 vextractf64x4 vextracti32x4 vextracti64x4 vfixupimmpd vfixupimmps vfixupimmsd vfixupimmss vgetexppd vgetexpps vgetexpsd vgetexpss vgetmantpd vgetmantps vgetmantsd vgetmantss vinsertf32x4 vinsertf64x4 vinserti32x4 vinserti64x4 vmovdqa32 vmovdqa64 vmovdqu32 vmovdqu64 vpabsq vpandd vpandnd vpandnq vpandq vpblendmd vpblendmq vpcmpltd vpcmpled vpcmpneqd vpcmpnltd vpcmpnled vpcmpd vpcmpltq vpcmpleq vpcmpneqq vpcmpnltq vpcmpnleq vpcmpq vpcmpequd vpcmpltud vpcmpleud vpcmpnequd vpcmpnltud vpcmpnleud vpcmpud vpcmpequq vpcmpltuq vpcmpleuq vpcmpnequq vpcmpnltuq vpcmpnleuq vpcmpuq vpcompressd vpcompressq vpermi2d vpermi2pd vpermi2ps vpermi2q vpermt2d vpermt2pd vpermt2ps vpermt2q vpexpandd vpexpandq vpmaxsq vpmaxuq vpminsq vpminuq vpmovdb vpmovdw vpmovqb vpmovqd vpmovqw vpmovsdb vpmovsdw vpmovsqb vpmovsqd vpmovsqw vpmovusdb vpmovusdw vpmovusqb vpmovusqd vpmovusqw vpord vporq vprold vprolq vprolvd vprolvq vprord vprorq vprorvd vprorvq vpscatterdd vpscatterdq vpscatterqd vpscatterqq vpsraq vpsravq vpternlogd vpternlogq vptestmd vptestmq vptestnmd vptestnmq vpxord vpxorq vrcp14pd vrcp14ps vrcp14sd vrcp14ss vrndscalepd vrndscaleps vrndscalesd vrndscaless vrsqrt14pd vrsqrt14ps vrsqrt14sd vrsqrt14ss vscalefpd vscalefps vscalefsd vscalefss vscatterdpd vscatterdps vscatterqpd vscatterqps vshuff32x4 vshuff64x2 vshufi32x4 vshufi64x2 kandnw kandw kmovw knotw kortestw korw kshiftlw kshiftrw kunpckbw kxnorw kxorw vpbroadcastmb2q vpbroadcastmw2d vpconflictd vpconflictq vplzcntd vplzcntq vexp2pd vexp2ps vrcp28pd vrcp28ps vrcp28sd vrcp28ss vrsqrt28pd vrsqrt28ps vrsqrt28sd vrsqrt28ss vgatherpf0dpd vgatherpf0dps vgatherpf0qpd vgatherpf0qps vgatherpf1dpd vgatherpf1dps vgatherpf1qpd vgatherpf1qps vscatterpf0dpd vscatterpf0dps vscatterpf0qpd vscatterpf0qps vscatterpf1dpd vscatterpf1dps vscatterpf1qpd vscatterpf1qps prefetchwt1 bndmk bndcl bndcu bndcn bndmov bndldx bndstx sha1rnds4 sha1nexte sha1msg1 sha1msg2 sha256rnds2 sha256msg1 sha256msg2 hint_nop0 hint_nop1 hint_nop2 hint_nop3 hint_nop4 hint_nop5 hint_nop6 hint_nop7 hint_nop8 hint_nop9 hint_nop10 hint_nop11 hint_nop12 hint_nop13 hint_nop14 hint_nop15 hint_nop16 hint_nop17 hint_nop18 hint_nop19 hint_nop20 hint_nop21 hint_nop22 hint_nop23 hint_nop24 hint_nop25 hint_nop26 hint_nop27 hint_nop28 hint_nop29 hint_nop30 hint_nop31 hint_nop32 hint_nop33 hint_nop34 hint_nop35 hint_nop36 hint_nop37 hint_nop38 hint_nop39 hint_nop40 hint_nop41 hint_nop42 hint_nop43 hint_nop44 hint_nop45 hint_nop46 hint_nop47 hint_nop48 hint_nop49 hint_nop50 hint_nop51 hint_nop52 hint_nop53 hint_nop54 hint_nop55 hint_nop56 hint_nop57 hint_nop58 hint_nop59 hint_nop60 hint_nop61 hint_nop62 hint_nop63",
      built_in: "ip eip rip al ah bl bh cl ch dl dh sil dil bpl spl r8b r9b r10b r11b r12b r13b r14b r15b ax bx cx dx si di bp sp r8w r9w r10w r11w r12w r13w r14w r15w eax ebx ecx edx esi edi ebp esp eip r8d r9d r10d r11d r12d r13d r14d r15d rax rbx rcx rdx rsi rdi rbp rsp r8 r9 r10 r11 r12 r13 r14 r15 cs ds es fs gs ss st st0 st1 st2 st3 st4 st5 st6 st7 mm0 mm1 mm2 mm3 mm4 mm5 mm6 mm7 xmm0  xmm1  xmm2  xmm3  xmm4  xmm5  xmm6  xmm7  xmm8  xmm9 xmm10  xmm11 xmm12 xmm13 xmm14 xmm15 xmm16 xmm17 xmm18 xmm19 xmm20 xmm21 xmm22 xmm23 xmm24 xmm25 xmm26 xmm27 xmm28 xmm29 xmm30 xmm31 ymm0  ymm1  ymm2  ymm3  ymm4  ymm5  ymm6  ymm7  ymm8  ymm9 ymm10  ymm11 ymm12 ymm13 ymm14 ymm15 ymm16 ymm17 ymm18 ymm19 ymm20 ymm21 ymm22 ymm23 ymm24 ymm25 ymm26 ymm27 ymm28 ymm29 ymm30 ymm31 zmm0  zmm1  zmm2  zmm3  zmm4  zmm5  zmm6  zmm7  zmm8  zmm9 zmm10  zmm11 zmm12 zmm13 zmm14 zmm15 zmm16 zmm17 zmm18 zmm19 zmm20 zmm21 zmm22 zmm23 zmm24 zmm25 zmm26 zmm27 zmm28 zmm29 zmm30 zmm31 k0 k1 k2 k3 k4 k5 k6 k7 bnd0 bnd1 bnd2 bnd3 cr0 cr1 cr2 cr3 cr4 cr8 dr0 dr1 dr2 dr3 dr8 tr3 tr4 tr5 tr6 tr7 r0 r1 r2 r3 r4 r5 r6 r7 r0b r1b r2b r3b r4b r5b r6b r7b r0w r1w r2w r3w r4w r5w r6w r7w r0d r1d r2d r3d r4d r5d r6d r7d r0h r1h r2h r3h r0l r1l r2l r3l r4l r5l r6l r7l r8l r9l r10l r11l r12l r13l r14l r15l db dw dd dq dt ddq do dy dz resb resw resd resq rest resdq reso resy resz incbin equ times byte word dword qword nosplit rel abs seg wrt strict near far a32 ptr",
      meta: "%define %xdefine %+ %undef %defstr %deftok %assign %strcat %strlen %substr %rotate %elif %else %endif %if %ifmacro %ifctx %ifidn %ifidni %ifid %ifnum %ifstr %iftoken %ifempty %ifenv %error %warning %fatal %rep %endrep %include %push %pop %repl %pathsearch %depend %use %arg %stacksize %local %line %comment %endcomment .nolist __FILE__ __LINE__ __SECT__  __BITS__ __OUTPUT_FORMAT__ __DATE__ __TIME__ __DATE_NUM__ __TIME_NUM__ __UTC_DATE__ __UTC_TIME__ __UTC_DATE_NUM__ __UTC_TIME_NUM__  __PASS__ struc endstruc istruc at iend align alignb sectalign daz nodaz up down zero default option assume public bits use16 use32 use64 default section segment absolute extern global common cpu float __utf16__ __utf16le__ __utf16be__ __utf32__ __utf32le__ __utf32be__ __float8__ __float16__ __float32__ __float64__ __float80m__ __float80e__ __float128l__ __float128h__ __Infinity__ __QNaN__ __SNaN__ Inf NaN QNaN SNaN float8 float16 float32 float64 float80m float80e float128l float128h __FLOAT_DAZ__ __FLOAT_ROUND__ __FLOAT__"
    },
    contains: [
      hljs2.COMMENT(";", "$", {
        relevance: 0
      }),
      {
        className: "number",
        variants: [
          {
            begin: "\\b(?:([0-9][0-9_]*)?\\.[0-9_]*(?:[eE][+-]?[0-9_]+)?|(0[Xx])?[0-9][0-9_]*(\\.[0-9_]*)?(?:[pP](?:[+-]?[0-9_]+)?)?)\\b",
            relevance: 0
          },
          {
            begin: "\\$[0-9][0-9A-Fa-f]*",
            relevance: 0
          },
          {
            begin: "\\b(?:[0-9A-Fa-f][0-9A-Fa-f_]*[Hh]|[0-9][0-9_]*[DdTt]?|[0-7][0-7_]*[QqOo]|[0-1][0-1_]*[BbYy])\\b"
          },
          {
            begin: "\\b(?:0[Xx][0-9A-Fa-f_]+|0[DdTt][0-9_]+|0[QqOo][0-7_]+|0[BbYy][0-1_]+)\\b"
          }
        ]
      },
      hljs2.QUOTE_STRING_MODE,
      {
        className: "string",
        variants: [
          {
            begin: "'",
            end: "[^\\\\]'"
          },
          {
            begin: "`",
            end: "[^\\\\]`"
          }
        ],
        relevance: 0
      },
      {
        className: "symbol",
        variants: [
          {
            begin: "^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)"
          },
          {
            begin: "^\\s*%%[A-Za-z0-9_$#@~.?]*:"
          }
        ],
        relevance: 0
      },
      {
        className: "subst",
        begin: "%[0-9]+",
        relevance: 0
      },
      {
        className: "subst",
        begin: "%!S+",
        relevance: 0
      },
      {
        className: "meta",
        begin: /^\s*\.[\w_-]+/
      }
    ]
  };
}
var x86asm_1 = x86asm;
function xl(hljs2) {
  const BUILTIN_MODULES = "ObjectLoader Animate MovieCredits Slides Filters Shading Materials LensFlare Mapping VLCAudioVideo StereoDecoder PointCloud NetworkAccess RemoteControl RegExp ChromaKey Snowfall NodeJS Speech Charts";
  const XL_KEYWORDS = {
    $pattern: /[a-zA-Z][a-zA-Z0-9_?]*/,
    keyword: "if then else do while until for loop import with is as where when by data constant integer real text name boolean symbol infix prefix postfix block tree",
    literal: "true false nil",
    built_in: "in mod rem and or xor not abs sign floor ceil sqrt sin cos tan asin acos atan exp expm1 log log2 log10 log1p pi at text_length text_range text_find text_replace contains page slide basic_slide title_slide title subtitle fade_in fade_out fade_at clear_color color line_color line_width texture_wrap texture_transform texture scale_?x scale_?y scale_?z? translate_?x translate_?y translate_?z? rotate_?x rotate_?y rotate_?z? rectangle circle ellipse sphere path line_to move_to quad_to curve_to theme background contents locally time mouse_?x mouse_?y mouse_buttons " + BUILTIN_MODULES
  };
  const DOUBLE_QUOTE_TEXT = {
    className: "string",
    begin: '"',
    end: '"',
    illegal: "\\n"
  };
  const SINGLE_QUOTE_TEXT = {
    className: "string",
    begin: "'",
    end: "'",
    illegal: "\\n"
  };
  const LONG_TEXT = {
    className: "string",
    begin: "<<",
    end: ">>"
  };
  const BASED_NUMBER = {
    className: "number",
    begin: "[0-9]+#[0-9A-Z_]+(\\.[0-9-A-Z_]+)?#?([Ee][+-]?[0-9]+)?"
  };
  const IMPORT = {
    beginKeywords: "import",
    end: "$",
    keywords: XL_KEYWORDS,
    contains: [DOUBLE_QUOTE_TEXT]
  };
  const FUNCTION_DEFINITION = {
    className: "function",
    begin: /[a-z][^\n]*->/,
    returnBegin: true,
    end: /->/,
    contains: [
      hljs2.inherit(hljs2.TITLE_MODE, {
        starts: {
          endsWithParent: true,
          keywords: XL_KEYWORDS
        }
      })
    ]
  };
  return {
    name: "XL",
    aliases: ["tao"],
    keywords: XL_KEYWORDS,
    contains: [
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.C_BLOCK_COMMENT_MODE,
      DOUBLE_QUOTE_TEXT,
      SINGLE_QUOTE_TEXT,
      LONG_TEXT,
      FUNCTION_DEFINITION,
      IMPORT,
      BASED_NUMBER,
      hljs2.NUMBER_MODE
    ]
  };
}
var xl_1 = xl;
function xquery(_hljs) {
  const KEYWORDS2 = "module schema namespace boundary-space preserve no-preserve strip default collation base-uri ordering context decimal-format decimal-separator copy-namespaces empty-sequence except exponent-separator external grouping-separator inherit no-inherit lax minus-sign per-mille percent schema-attribute schema-element strict unordered zero-digit declare import option function validate variable for at in let where order group by return if then else tumbling sliding window start when only end previous next stable ascending descending allowing empty greatest least some every satisfies switch case typeswitch try catch and or to union intersect instance of treat as castable cast map array delete insert into replace value rename copy modify update";
  const TYPE = "item document-node node attribute document element comment namespace namespace-node processing-instruction text construction xs:anyAtomicType xs:untypedAtomic xs:duration xs:time xs:decimal xs:float xs:double xs:gYearMonth xs:gYear xs:gMonthDay xs:gMonth xs:gDay xs:boolean xs:base64Binary xs:hexBinary xs:anyURI xs:QName xs:NOTATION xs:dateTime xs:dateTimeStamp xs:date xs:string xs:normalizedString xs:token xs:language xs:NMTOKEN xs:Name xs:NCName xs:ID xs:IDREF xs:ENTITY xs:integer xs:nonPositiveInteger xs:negativeInteger xs:long xs:int xs:short xs:byte xs:nonNegativeInteger xs:unisignedLong xs:unsignedInt xs:unsignedShort xs:unsignedByte xs:positiveInteger xs:yearMonthDuration xs:dayTimeDuration";
  const LITERAL = "eq ne lt le gt ge is self:: child:: descendant:: descendant-or-self:: attribute:: following:: following-sibling:: parent:: ancestor:: ancestor-or-self:: preceding:: preceding-sibling:: NaN";
  const BUILT_IN = {
    className: "built_in",
    variants: [
      {
        begin: /\barray:/,
        end: /(?:append|filter|flatten|fold-(?:left|right)|for-each(?:-pair)?|get|head|insert-before|join|put|remove|reverse|size|sort|subarray|tail)\b/
      },
      {
        begin: /\bmap:/,
        end: /(?:contains|entry|find|for-each|get|keys|merge|put|remove|size)\b/
      },
      {
        begin: /\bmath:/,
        end: /(?:a(?:cos|sin|tan[2]?)|cos|exp(?:10)?|log(?:10)?|pi|pow|sin|sqrt|tan)\b/
      },
      {
        begin: /\bop:/,
        end: /\(/,
        excludeEnd: true
      },
      {
        begin: /\bfn:/,
        end: /\(/,
        excludeEnd: true
      },
      {
        begin: /[^</$:'"-]\b(?:abs|accumulator-(?:after|before)|adjust-(?:date(?:Time)?|time)-to-timezone|analyze-string|apply|available-(?:environment-variables|system-properties)|avg|base-uri|boolean|ceiling|codepoints?-(?:equal|to-string)|collation-key|collection|compare|concat|contains(?:-token)?|copy-of|count|current(?:-)?(?:date(?:Time)?|time|group(?:ing-key)?|output-uri|merge-(?:group|key))?data|dateTime|days?-from-(?:date(?:Time)?|duration)|deep-equal|default-(?:collation|language)|distinct-values|document(?:-uri)?|doc(?:-available)?|element-(?:available|with-id)|empty|encode-for-uri|ends-with|environment-variable|error|escape-html-uri|exactly-one|exists|false|filter|floor|fold-(?:left|right)|for-each(?:-pair)?|format-(?:date(?:Time)?|time|integer|number)|function-(?:arity|available|lookup|name)|generate-id|has-children|head|hours-from-(?:dateTime|duration|time)|id(?:ref)?|implicit-timezone|in-scope-prefixes|index-of|innermost|insert-before|iri-to-uri|json-(?:doc|to-xml)|key|lang|last|load-xquery-module|local-name(?:-from-QName)?|(?:lower|upper)-case|matches|max|minutes-from-(?:dateTime|duration|time)|min|months?-from-(?:date(?:Time)?|duration)|name(?:space-uri-?(?:for-prefix|from-QName)?)?|nilled|node-name|normalize-(?:space|unicode)|not|number|one-or-more|outermost|parse-(?:ietf-date|json)|path|position|(?:prefix-from-)?QName|random-number-generator|regex-group|remove|replace|resolve-(?:QName|uri)|reverse|root|round(?:-half-to-even)?|seconds-from-(?:dateTime|duration|time)|snapshot|sort|starts-with|static-base-uri|stream-available|string-?(?:join|length|to-codepoints)?|subsequence|substring-?(?:after|before)?|sum|system-property|tail|timezone-from-(?:date(?:Time)?|time)|tokenize|trace|trans(?:form|late)|true|type-available|unordered|unparsed-(?:entity|text)?-?(?:public-id|uri|available|lines)?|uri-collection|xml-to-json|years?-from-(?:date(?:Time)?|duration)|zero-or-one)\b/
      },
      {
        begin: /\blocal:/,
        end: /\(/,
        excludeEnd: true
      },
      {
        begin: /\bzip:/,
        end: /(?:zip-file|(?:xml|html|text|binary)-entry| (?:update-)?entries)\b/
      },
      {
        begin: /\b(?:util|db|functx|app|xdmp|xmldb):/,
        end: /\(/,
        excludeEnd: true
      }
    ]
  };
  const TITLE = {
    className: "title",
    begin: /\bxquery version "[13]\.[01]"\s?(?:encoding ".+")?/,
    end: /;/
  };
  const VAR = {
    className: "variable",
    begin: /[$][\w\-:]+/
  };
  const NUMBER = {
    className: "number",
    begin: /(\b0[0-7_]+)|(\b0x[0-9a-fA-F_]+)|(\b[1-9][0-9_]*(\.[0-9_]+)?)|[0_]\b/,
    relevance: 0
  };
  const STRING = {
    className: "string",
    variants: [
      {
        begin: /"/,
        end: /"/,
        contains: [
          {
            begin: /""/,
            relevance: 0
          }
        ]
      },
      {
        begin: /'/,
        end: /'/,
        contains: [
          {
            begin: /''/,
            relevance: 0
          }
        ]
      }
    ]
  };
  const ANNOTATION = {
    className: "meta",
    begin: /%[\w\-:]+/
  };
  const COMMENT2 = {
    className: "comment",
    begin: /\(:/,
    end: /:\)/,
    relevance: 10,
    contains: [
      {
        className: "doctag",
        begin: /@\w+/
      }
    ]
  };
  const COMPUTED = {
    beginKeywords: "element attribute comment document processing-instruction",
    end: /\{/,
    excludeEnd: true
  };
  const DIRECT = {
    begin: /<([\w._:-]+)(\s+\S*=('|").*('|"))?>/,
    end: /(\/[\w._:-]+>)/,
    subLanguage: "xml",
    contains: [
      {
        begin: /\{/,
        end: /\}/,
        subLanguage: "xquery"
      },
      "self"
    ]
  };
  const CONTAINS = [
    VAR,
    BUILT_IN,
    STRING,
    NUMBER,
    COMMENT2,
    ANNOTATION,
    TITLE,
    COMPUTED,
    DIRECT
  ];
  return {
    name: "XQuery",
    aliases: [
      "xpath",
      "xq"
    ],
    case_insensitive: false,
    illegal: /(proc)|(abstract)|(extends)|(until)|(#)/,
    keywords: {
      $pattern: /[a-zA-Z$][a-zA-Z0-9_:-]*/,
      keyword: KEYWORDS2,
      type: TYPE,
      literal: LITERAL
    },
    contains: CONTAINS
  };
}
var xquery_1 = xquery;
function zephir(hljs2) {
  const STRING = {
    className: "string",
    contains: [hljs2.BACKSLASH_ESCAPE],
    variants: [
      hljs2.inherit(hljs2.APOS_STRING_MODE, {
        illegal: null
      }),
      hljs2.inherit(hljs2.QUOTE_STRING_MODE, {
        illegal: null
      })
    ]
  };
  const TITLE_MODE2 = hljs2.UNDERSCORE_TITLE_MODE;
  const NUMBER = {
    variants: [
      hljs2.BINARY_NUMBER_MODE,
      hljs2.C_NUMBER_MODE
    ]
  };
  const KEYWORDS2 = "namespace class interface use extends function return abstract final public protected private static deprecated throw try catch Exception echo empty isset instanceof unset let var new const self require if else elseif switch case default do while loop for continue break likely unlikely __LINE__ __FILE__ __DIR__ __FUNCTION__ __CLASS__ __TRAIT__ __METHOD__ __NAMESPACE__ array boolean float double integer object resource string char long unsigned bool int uint ulong uchar true false null undefined";
  return {
    name: "Zephir",
    aliases: ["zep"],
    keywords: KEYWORDS2,
    contains: [
      hljs2.C_LINE_COMMENT_MODE,
      hljs2.COMMENT(/\/\*/, /\*\//, {
        contains: [
          {
            className: "doctag",
            begin: /@[A-Za-z]+/
          }
        ]
      }),
      {
        className: "string",
        begin: /<<<['"]?\w+['"]?$/,
        end: /^\w+;/,
        contains: [hljs2.BACKSLASH_ESCAPE]
      },
      {
        begin: /(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/
      },
      {
        className: "function",
        beginKeywords: "function fn",
        end: /[;{]/,
        excludeEnd: true,
        illegal: /\$|\[|%/,
        contains: [
          TITLE_MODE2,
          {
            className: "params",
            begin: /\(/,
            end: /\)/,
            keywords: KEYWORDS2,
            contains: [
              "self",
              hljs2.C_BLOCK_COMMENT_MODE,
              STRING,
              NUMBER
            ]
          }
        ]
      },
      {
        className: "class",
        beginKeywords: "class interface",
        end: /\{/,
        excludeEnd: true,
        illegal: /[:($"]/,
        contains: [
          {
            beginKeywords: "extends implements"
          },
          TITLE_MODE2
        ]
      },
      {
        beginKeywords: "namespace",
        end: /;/,
        illegal: /[.']/,
        contains: [TITLE_MODE2]
      },
      {
        beginKeywords: "use",
        end: /;/,
        contains: [TITLE_MODE2]
      },
      {
        begin: /=>/
      },
      STRING,
      NUMBER
    ]
  };
}
var zephir_1 = zephir;
var hljs = core;
hljs.registerLanguage("1c", _1c_1);
hljs.registerLanguage("abnf", abnf_1);
hljs.registerLanguage("accesslog", accesslog_1);
hljs.registerLanguage("actionscript", actionscript_1);
hljs.registerLanguage("ada", ada_1);
hljs.registerLanguage("angelscript", angelscript_1);
hljs.registerLanguage("apache", apache_1);
hljs.registerLanguage("applescript", applescript_1);
hljs.registerLanguage("arcade", arcade_1);
hljs.registerLanguage("arduino", arduino_1);
hljs.registerLanguage("armasm", armasm_1);
hljs.registerLanguage("xml", xml_1);
hljs.registerLanguage("asciidoc", asciidoc_1);
hljs.registerLanguage("aspectj", aspectj_1);
hljs.registerLanguage("autohotkey", autohotkey_1);
hljs.registerLanguage("autoit", autoit_1);
hljs.registerLanguage("avrasm", avrasm_1);
hljs.registerLanguage("awk", awk_1);
hljs.registerLanguage("axapta", axapta_1);
hljs.registerLanguage("bash", bash_1);
hljs.registerLanguage("basic", basic_1);
hljs.registerLanguage("bnf", bnf_1);
hljs.registerLanguage("brainfuck", brainfuck_1);
hljs.registerLanguage("c-like", cLike_1);
hljs.registerLanguage("c", c_1);
hljs.registerLanguage("cal", cal_1);
hljs.registerLanguage("capnproto", capnproto_1);
hljs.registerLanguage("ceylon", ceylon_1);
hljs.registerLanguage("clean", clean_1);
hljs.registerLanguage("clojure", clojure_1);
hljs.registerLanguage("clojure-repl", clojureRepl_1);
hljs.registerLanguage("cmake", cmake_1);
hljs.registerLanguage("coffeescript", coffeescript_1);
hljs.registerLanguage("coq", coq_1);
hljs.registerLanguage("cos", cos_1);
hljs.registerLanguage("cpp", cpp_1);
hljs.registerLanguage("crmsh", crmsh_1);
hljs.registerLanguage("crystal", crystal_1);
hljs.registerLanguage("csharp", csharp_1);
hljs.registerLanguage("csp", csp_1);
hljs.registerLanguage("css", css_1);
hljs.registerLanguage("d", d_1);
hljs.registerLanguage("markdown", markdown_1);
hljs.registerLanguage("dart", dart_1);
hljs.registerLanguage("delphi", delphi_1);
hljs.registerLanguage("diff", diff_1);
hljs.registerLanguage("django", django_1);
hljs.registerLanguage("dns", dns_1);
hljs.registerLanguage("dockerfile", dockerfile_1);
hljs.registerLanguage("dos", dos_1);
hljs.registerLanguage("dsconfig", dsconfig_1);
hljs.registerLanguage("dts", dts_1);
hljs.registerLanguage("dust", dust_1);
hljs.registerLanguage("ebnf", ebnf_1);
hljs.registerLanguage("elixir", elixir_1);
hljs.registerLanguage("elm", elm_1);
hljs.registerLanguage("ruby", ruby_1);
hljs.registerLanguage("erb", erb_1);
hljs.registerLanguage("erlang-repl", erlangRepl_1);
hljs.registerLanguage("erlang", erlang_1);
hljs.registerLanguage("excel", excel_1);
hljs.registerLanguage("fix", fix_1);
hljs.registerLanguage("flix", flix_1);
hljs.registerLanguage("fortran", fortran_1);
hljs.registerLanguage("fsharp", fsharp_1);
hljs.registerLanguage("gams", gams_1);
hljs.registerLanguage("gauss", gauss_1);
hljs.registerLanguage("gcode", gcode_1);
hljs.registerLanguage("gherkin", gherkin_1);
hljs.registerLanguage("glsl", glsl_1);
hljs.registerLanguage("gml", gml_1);
hljs.registerLanguage("go", go_1);
hljs.registerLanguage("golo", golo_1);
hljs.registerLanguage("gradle", gradle_1);
hljs.registerLanguage("groovy", groovy_1);
hljs.registerLanguage("haml", haml_1);
hljs.registerLanguage("handlebars", handlebars_1);
hljs.registerLanguage("haskell", haskell_1);
hljs.registerLanguage("haxe", haxe_1);
hljs.registerLanguage("hsp", hsp_1);
hljs.registerLanguage("htmlbars", htmlbars_1);
hljs.registerLanguage("http", http_1);
hljs.registerLanguage("hy", hy_1);
hljs.registerLanguage("inform7", inform7_1);
hljs.registerLanguage("ini", ini_1);
hljs.registerLanguage("irpf90", irpf90_1);
hljs.registerLanguage("isbl", isbl_1);
hljs.registerLanguage("java", java_1);
hljs.registerLanguage("javascript", javascript_1);
hljs.registerLanguage("jboss-cli", jbossCli_1);
hljs.registerLanguage("json", json_1);
hljs.registerLanguage("julia", julia_1);
hljs.registerLanguage("julia-repl", juliaRepl_1);
hljs.registerLanguage("kotlin", kotlin_1);
hljs.registerLanguage("lasso", lasso_1);
hljs.registerLanguage("latex", latex_1);
hljs.registerLanguage("ldif", ldif_1);
hljs.registerLanguage("leaf", leaf_1);
hljs.registerLanguage("less", less_1);
hljs.registerLanguage("lisp", lisp_1);
hljs.registerLanguage("livecodeserver", livecodeserver_1);
hljs.registerLanguage("livescript", livescript_1);
hljs.registerLanguage("llvm", llvm_1);
hljs.registerLanguage("lsl", lsl_1);
hljs.registerLanguage("lua", lua_1);
hljs.registerLanguage("makefile", makefile_1);
hljs.registerLanguage("mathematica", mathematica_1);
hljs.registerLanguage("matlab", matlab_1);
hljs.registerLanguage("maxima", maxima_1);
hljs.registerLanguage("mel", mel_1);
hljs.registerLanguage("mercury", mercury_1);
hljs.registerLanguage("mipsasm", mipsasm_1);
hljs.registerLanguage("mizar", mizar_1);
hljs.registerLanguage("perl", perl_1);
hljs.registerLanguage("mojolicious", mojolicious_1);
hljs.registerLanguage("monkey", monkey_1);
hljs.registerLanguage("moonscript", moonscript_1);
hljs.registerLanguage("n1ql", n1ql_1);
hljs.registerLanguage("nginx", nginx_1);
hljs.registerLanguage("nim", nim_1);
hljs.registerLanguage("nix", nix_1);
hljs.registerLanguage("node-repl", nodeRepl_1);
hljs.registerLanguage("nsis", nsis_1);
hljs.registerLanguage("objectivec", objectivec_1);
hljs.registerLanguage("ocaml", ocaml_1);
hljs.registerLanguage("openscad", openscad_1);
hljs.registerLanguage("oxygene", oxygene_1);
hljs.registerLanguage("parser3", parser3_1);
hljs.registerLanguage("pf", pf_1);
hljs.registerLanguage("pgsql", pgsql_1);
hljs.registerLanguage("php", php_1);
hljs.registerLanguage("php-template", phpTemplate_1);
hljs.registerLanguage("plaintext", plaintext_1);
hljs.registerLanguage("pony", pony_1);
hljs.registerLanguage("powershell", powershell_1);
hljs.registerLanguage("processing", processing_1);
hljs.registerLanguage("profile", profile_1);
hljs.registerLanguage("prolog", prolog_1);
hljs.registerLanguage("properties", properties_1);
hljs.registerLanguage("protobuf", protobuf_1);
hljs.registerLanguage("puppet", puppet_1);
hljs.registerLanguage("purebasic", purebasic_1);
hljs.registerLanguage("python", python_1);
hljs.registerLanguage("python-repl", pythonRepl_1);
hljs.registerLanguage("q", q_1);
hljs.registerLanguage("qml", qml_1);
hljs.registerLanguage("r", r_1);
hljs.registerLanguage("reasonml", reasonml_1);
hljs.registerLanguage("rib", rib_1);
hljs.registerLanguage("roboconf", roboconf_1);
hljs.registerLanguage("routeros", routeros_1);
hljs.registerLanguage("rsl", rsl_1);
hljs.registerLanguage("ruleslanguage", ruleslanguage_1);
hljs.registerLanguage("rust", rust_1);
hljs.registerLanguage("sas", sas_1);
hljs.registerLanguage("scala", scala_1);
hljs.registerLanguage("scheme", scheme_1);
hljs.registerLanguage("scilab", scilab_1);
hljs.registerLanguage("scss", scss_1);
hljs.registerLanguage("shell", shell_1);
hljs.registerLanguage("smali", smali_1);
hljs.registerLanguage("smalltalk", smalltalk_1);
hljs.registerLanguage("sml", sml_1);
hljs.registerLanguage("sqf", sqf_1);
hljs.registerLanguage("sql_more", sql_more_1);
hljs.registerLanguage("sql", sql_1);
hljs.registerLanguage("stan", stan_1);
hljs.registerLanguage("stata", stata_1);
hljs.registerLanguage("step21", step21_1);
hljs.registerLanguage("stylus", stylus_1);
hljs.registerLanguage("subunit", subunit_1);
hljs.registerLanguage("swift", swift_1);
hljs.registerLanguage("taggerscript", taggerscript_1);
hljs.registerLanguage("yaml", yaml_1);
hljs.registerLanguage("tap", tap_1);
hljs.registerLanguage("tcl", tcl_1);
hljs.registerLanguage("thrift", thrift_1);
hljs.registerLanguage("tp", tp_1);
hljs.registerLanguage("twig", twig_1);
hljs.registerLanguage("typescript", typescript_1);
hljs.registerLanguage("vala", vala_1);
hljs.registerLanguage("vbnet", vbnet_1);
hljs.registerLanguage("vbscript", vbscript_1);
hljs.registerLanguage("vbscript-html", vbscriptHtml_1);
hljs.registerLanguage("verilog", verilog_1);
hljs.registerLanguage("vhdl", vhdl_1);
hljs.registerLanguage("vim", vim_1);
hljs.registerLanguage("x86asm", x86asm_1);
hljs.registerLanguage("xl", xl_1);
hljs.registerLanguage("xquery", xquery_1);
hljs.registerLanguage("zephir", zephir_1);
var lib$2 = hljs;
var lib$1 = {};
var unicode$3 = {};
const UNDEFINED_CODE_POINTS = [
  65534,
  65535,
  131070,
  131071,
  196606,
  196607,
  262142,
  262143,
  327678,
  327679,
  393214,
  393215,
  458750,
  458751,
  524286,
  524287,
  589822,
  589823,
  655358,
  655359,
  720894,
  720895,
  786430,
  786431,
  851966,
  851967,
  917502,
  917503,
  983038,
  983039,
  1048574,
  1048575,
  1114110,
  1114111
];
unicode$3.REPLACEMENT_CHARACTER = "\uFFFD";
unicode$3.CODE_POINTS = {
  EOF: -1,
  NULL: 0,
  TABULATION: 9,
  CARRIAGE_RETURN: 13,
  LINE_FEED: 10,
  FORM_FEED: 12,
  SPACE: 32,
  EXCLAMATION_MARK: 33,
  QUOTATION_MARK: 34,
  NUMBER_SIGN: 35,
  AMPERSAND: 38,
  APOSTROPHE: 39,
  HYPHEN_MINUS: 45,
  SOLIDUS: 47,
  DIGIT_0: 48,
  DIGIT_9: 57,
  SEMICOLON: 59,
  LESS_THAN_SIGN: 60,
  EQUALS_SIGN: 61,
  GREATER_THAN_SIGN: 62,
  QUESTION_MARK: 63,
  LATIN_CAPITAL_A: 65,
  LATIN_CAPITAL_F: 70,
  LATIN_CAPITAL_X: 88,
  LATIN_CAPITAL_Z: 90,
  RIGHT_SQUARE_BRACKET: 93,
  GRAVE_ACCENT: 96,
  LATIN_SMALL_A: 97,
  LATIN_SMALL_F: 102,
  LATIN_SMALL_X: 120,
  LATIN_SMALL_Z: 122,
  REPLACEMENT_CHARACTER: 65533
};
unicode$3.CODE_POINT_SEQUENCES = {
  DASH_DASH_STRING: [45, 45],
  DOCTYPE_STRING: [68, 79, 67, 84, 89, 80, 69],
  CDATA_START_STRING: [91, 67, 68, 65, 84, 65, 91],
  SCRIPT_STRING: [115, 99, 114, 105, 112, 116],
  PUBLIC_STRING: [80, 85, 66, 76, 73, 67],
  SYSTEM_STRING: [83, 89, 83, 84, 69, 77]
};
unicode$3.isSurrogate = function(cp) {
  return cp >= 55296 && cp <= 57343;
};
unicode$3.isSurrogatePair = function(cp) {
  return cp >= 56320 && cp <= 57343;
};
unicode$3.getSurrogatePairCodePoint = function(cp1, cp2) {
  return (cp1 - 55296) * 1024 + 9216 + cp2;
};
unicode$3.isControlCodePoint = function(cp) {
  return cp !== 32 && cp !== 10 && cp !== 13 && cp !== 9 && cp !== 12 && cp >= 1 && cp <= 31 || cp >= 127 && cp <= 159;
};
unicode$3.isUndefinedCodePoint = function(cp) {
  return cp >= 64976 && cp <= 65007 || UNDEFINED_CODE_POINTS.indexOf(cp) > -1;
};
var errorCodes = {
  controlCharacterInInputStream: "control-character-in-input-stream",
  noncharacterInInputStream: "noncharacter-in-input-stream",
  surrogateInInputStream: "surrogate-in-input-stream",
  nonVoidHtmlElementStartTagWithTrailingSolidus: "non-void-html-element-start-tag-with-trailing-solidus",
  endTagWithAttributes: "end-tag-with-attributes",
  endTagWithTrailingSolidus: "end-tag-with-trailing-solidus",
  unexpectedSolidusInTag: "unexpected-solidus-in-tag",
  unexpectedNullCharacter: "unexpected-null-character",
  unexpectedQuestionMarkInsteadOfTagName: "unexpected-question-mark-instead-of-tag-name",
  invalidFirstCharacterOfTagName: "invalid-first-character-of-tag-name",
  unexpectedEqualsSignBeforeAttributeName: "unexpected-equals-sign-before-attribute-name",
  missingEndTagName: "missing-end-tag-name",
  unexpectedCharacterInAttributeName: "unexpected-character-in-attribute-name",
  unknownNamedCharacterReference: "unknown-named-character-reference",
  missingSemicolonAfterCharacterReference: "missing-semicolon-after-character-reference",
  unexpectedCharacterAfterDoctypeSystemIdentifier: "unexpected-character-after-doctype-system-identifier",
  unexpectedCharacterInUnquotedAttributeValue: "unexpected-character-in-unquoted-attribute-value",
  eofBeforeTagName: "eof-before-tag-name",
  eofInTag: "eof-in-tag",
  missingAttributeValue: "missing-attribute-value",
  missingWhitespaceBetweenAttributes: "missing-whitespace-between-attributes",
  missingWhitespaceAfterDoctypePublicKeyword: "missing-whitespace-after-doctype-public-keyword",
  missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers: "missing-whitespace-between-doctype-public-and-system-identifiers",
  missingWhitespaceAfterDoctypeSystemKeyword: "missing-whitespace-after-doctype-system-keyword",
  missingQuoteBeforeDoctypePublicIdentifier: "missing-quote-before-doctype-public-identifier",
  missingQuoteBeforeDoctypeSystemIdentifier: "missing-quote-before-doctype-system-identifier",
  missingDoctypePublicIdentifier: "missing-doctype-public-identifier",
  missingDoctypeSystemIdentifier: "missing-doctype-system-identifier",
  abruptDoctypePublicIdentifier: "abrupt-doctype-public-identifier",
  abruptDoctypeSystemIdentifier: "abrupt-doctype-system-identifier",
  cdataInHtmlContent: "cdata-in-html-content",
  incorrectlyOpenedComment: "incorrectly-opened-comment",
  eofInScriptHtmlCommentLikeText: "eof-in-script-html-comment-like-text",
  eofInDoctype: "eof-in-doctype",
  nestedComment: "nested-comment",
  abruptClosingOfEmptyComment: "abrupt-closing-of-empty-comment",
  eofInComment: "eof-in-comment",
  incorrectlyClosedComment: "incorrectly-closed-comment",
  eofInCdata: "eof-in-cdata",
  absenceOfDigitsInNumericCharacterReference: "absence-of-digits-in-numeric-character-reference",
  nullCharacterReference: "null-character-reference",
  surrogateCharacterReference: "surrogate-character-reference",
  characterReferenceOutsideUnicodeRange: "character-reference-outside-unicode-range",
  controlCharacterReference: "control-character-reference",
  noncharacterCharacterReference: "noncharacter-character-reference",
  missingWhitespaceBeforeDoctypeName: "missing-whitespace-before-doctype-name",
  missingDoctypeName: "missing-doctype-name",
  invalidCharacterSequenceAfterDoctypeName: "invalid-character-sequence-after-doctype-name",
  duplicateAttribute: "duplicate-attribute",
  nonConformingDoctype: "non-conforming-doctype",
  missingDoctype: "missing-doctype",
  misplacedDoctype: "misplaced-doctype",
  endTagWithoutMatchingOpenElement: "end-tag-without-matching-open-element",
  closingOfElementWithOpenChildElements: "closing-of-element-with-open-child-elements",
  disallowedContentInNoscriptInHead: "disallowed-content-in-noscript-in-head",
  openElementsLeftAfterEof: "open-elements-left-after-eof",
  abandonedHeadElementChild: "abandoned-head-element-child",
  misplacedStartTagForHeadElement: "misplaced-start-tag-for-head-element",
  nestedNoscriptInHead: "nested-noscript-in-head",
  eofInElementThatCanContainOnlyText: "eof-in-element-that-can-contain-only-text"
};
const unicode$2 = unicode$3;
const ERR$2 = errorCodes;
const $$8 = unicode$2.CODE_POINTS;
const DEFAULT_BUFFER_WATERLINE = 1 << 16;
class Preprocessor$1 {
  constructor() {
    this.html = null;
    this.pos = -1;
    this.lastGapPos = -1;
    this.lastCharPos = -1;
    this.gapStack = [];
    this.skipNextNewLine = false;
    this.lastChunkWritten = false;
    this.endOfChunkHit = false;
    this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;
  }
  _err() {
  }
  _addGap() {
    this.gapStack.push(this.lastGapPos);
    this.lastGapPos = this.pos;
  }
  _processSurrogate(cp) {
    if (this.pos !== this.lastCharPos) {
      const nextCp = this.html.charCodeAt(this.pos + 1);
      if (unicode$2.isSurrogatePair(nextCp)) {
        this.pos++;
        this._addGap();
        return unicode$2.getSurrogatePairCodePoint(cp, nextCp);
      }
    } else if (!this.lastChunkWritten) {
      this.endOfChunkHit = true;
      return $$8.EOF;
    }
    this._err(ERR$2.surrogateInInputStream);
    return cp;
  }
  dropParsedChunk() {
    if (this.pos > this.bufferWaterline) {
      this.lastCharPos -= this.pos;
      this.html = this.html.substring(this.pos);
      this.pos = 0;
      this.lastGapPos = -1;
      this.gapStack = [];
    }
  }
  write(chunk, isLastChunk) {
    if (this.html) {
      this.html += chunk;
    } else {
      this.html = chunk;
    }
    this.lastCharPos = this.html.length - 1;
    this.endOfChunkHit = false;
    this.lastChunkWritten = isLastChunk;
  }
  insertHtmlAtCurrentPos(chunk) {
    this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1, this.html.length);
    this.lastCharPos = this.html.length - 1;
    this.endOfChunkHit = false;
  }
  advance() {
    this.pos++;
    if (this.pos > this.lastCharPos) {
      this.endOfChunkHit = !this.lastChunkWritten;
      return $$8.EOF;
    }
    let cp = this.html.charCodeAt(this.pos);
    if (this.skipNextNewLine && cp === $$8.LINE_FEED) {
      this.skipNextNewLine = false;
      this._addGap();
      return this.advance();
    }
    if (cp === $$8.CARRIAGE_RETURN) {
      this.skipNextNewLine = true;
      return $$8.LINE_FEED;
    }
    this.skipNextNewLine = false;
    if (unicode$2.isSurrogate(cp)) {
      cp = this._processSurrogate(cp);
    }
    const isCommonValidRange = cp > 31 && cp < 127 || cp === $$8.LINE_FEED || cp === $$8.CARRIAGE_RETURN || cp > 159 && cp < 64976;
    if (!isCommonValidRange) {
      this._checkForProblematicCharacters(cp);
    }
    return cp;
  }
  _checkForProblematicCharacters(cp) {
    if (unicode$2.isControlCodePoint(cp)) {
      this._err(ERR$2.controlCharacterInInputStream);
    } else if (unicode$2.isUndefinedCodePoint(cp)) {
      this._err(ERR$2.noncharacterInInputStream);
    }
  }
  retreat() {
    if (this.pos === this.lastGapPos) {
      this.lastGapPos = this.gapStack.pop();
      this.pos--;
    }
    this.pos--;
  }
}
var preprocessor = Preprocessor$1;
var namedEntityData = new Uint16Array([4, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 106, 303, 412, 810, 1432, 1701, 1796, 1987, 2114, 2360, 2420, 2484, 3170, 3251, 4140, 4393, 4575, 4610, 5106, 5512, 5728, 6117, 6274, 6315, 6345, 6427, 6516, 7002, 7910, 8733, 9323, 9870, 10170, 10631, 10893, 11318, 11386, 11467, 12773, 13092, 14474, 14922, 15448, 15542, 16419, 17666, 18166, 18611, 19004, 19095, 19298, 19397, 4, 16, 69, 77, 97, 98, 99, 102, 103, 108, 109, 110, 111, 112, 114, 115, 116, 117, 140, 150, 158, 169, 176, 194, 199, 210, 216, 222, 226, 242, 256, 266, 283, 294, 108, 105, 103, 5, 198, 1, 59, 148, 1, 198, 80, 5, 38, 1, 59, 156, 1, 38, 99, 117, 116, 101, 5, 193, 1, 59, 167, 1, 193, 114, 101, 118, 101, 59, 1, 258, 4, 2, 105, 121, 182, 191, 114, 99, 5, 194, 1, 59, 189, 1, 194, 59, 1, 1040, 114, 59, 3, 55349, 56580, 114, 97, 118, 101, 5, 192, 1, 59, 208, 1, 192, 112, 104, 97, 59, 1, 913, 97, 99, 114, 59, 1, 256, 100, 59, 1, 10835, 4, 2, 103, 112, 232, 237, 111, 110, 59, 1, 260, 102, 59, 3, 55349, 56632, 112, 108, 121, 70, 117, 110, 99, 116, 105, 111, 110, 59, 1, 8289, 105, 110, 103, 5, 197, 1, 59, 264, 1, 197, 4, 2, 99, 115, 272, 277, 114, 59, 3, 55349, 56476, 105, 103, 110, 59, 1, 8788, 105, 108, 100, 101, 5, 195, 1, 59, 292, 1, 195, 109, 108, 5, 196, 1, 59, 301, 1, 196, 4, 8, 97, 99, 101, 102, 111, 114, 115, 117, 321, 350, 354, 383, 388, 394, 400, 405, 4, 2, 99, 114, 327, 336, 107, 115, 108, 97, 115, 104, 59, 1, 8726, 4, 2, 118, 119, 342, 345, 59, 1, 10983, 101, 100, 59, 1, 8966, 121, 59, 1, 1041, 4, 3, 99, 114, 116, 362, 369, 379, 97, 117, 115, 101, 59, 1, 8757, 110, 111, 117, 108, 108, 105, 115, 59, 1, 8492, 97, 59, 1, 914, 114, 59, 3, 55349, 56581, 112, 102, 59, 3, 55349, 56633, 101, 118, 101, 59, 1, 728, 99, 114, 59, 1, 8492, 109, 112, 101, 113, 59, 1, 8782, 4, 14, 72, 79, 97, 99, 100, 101, 102, 104, 105, 108, 111, 114, 115, 117, 442, 447, 456, 504, 542, 547, 569, 573, 577, 616, 678, 784, 790, 796, 99, 121, 59, 1, 1063, 80, 89, 5, 169, 1, 59, 454, 1, 169, 4, 3, 99, 112, 121, 464, 470, 497, 117, 116, 101, 59, 1, 262, 4, 2, 59, 105, 476, 478, 1, 8914, 116, 97, 108, 68, 105, 102, 102, 101, 114, 101, 110, 116, 105, 97, 108, 68, 59, 1, 8517, 108, 101, 121, 115, 59, 1, 8493, 4, 4, 97, 101, 105, 111, 514, 520, 530, 535, 114, 111, 110, 59, 1, 268, 100, 105, 108, 5, 199, 1, 59, 528, 1, 199, 114, 99, 59, 1, 264, 110, 105, 110, 116, 59, 1, 8752, 111, 116, 59, 1, 266, 4, 2, 100, 110, 553, 560, 105, 108, 108, 97, 59, 1, 184, 116, 101, 114, 68, 111, 116, 59, 1, 183, 114, 59, 1, 8493, 105, 59, 1, 935, 114, 99, 108, 101, 4, 4, 68, 77, 80, 84, 591, 596, 603, 609, 111, 116, 59, 1, 8857, 105, 110, 117, 115, 59, 1, 8854, 108, 117, 115, 59, 1, 8853, 105, 109, 101, 115, 59, 1, 8855, 111, 4, 2, 99, 115, 623, 646, 107, 119, 105, 115, 101, 67, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 1, 8754, 101, 67, 117, 114, 108, 121, 4, 2, 68, 81, 658, 671, 111, 117, 98, 108, 101, 81, 117, 111, 116, 101, 59, 1, 8221, 117, 111, 116, 101, 59, 1, 8217, 4, 4, 108, 110, 112, 117, 688, 701, 736, 753, 111, 110, 4, 2, 59, 101, 696, 698, 1, 8759, 59, 1, 10868, 4, 3, 103, 105, 116, 709, 717, 722, 114, 117, 101, 110, 116, 59, 1, 8801, 110, 116, 59, 1, 8751, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 1, 8750, 4, 2, 102, 114, 742, 745, 59, 1, 8450, 111, 100, 117, 99, 116, 59, 1, 8720, 110, 116, 101, 114, 67, 108, 111, 99, 107, 119, 105, 115, 101, 67, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 1, 8755, 111, 115, 115, 59, 1, 10799, 99, 114, 59, 3, 55349, 56478, 112, 4, 2, 59, 67, 803, 805, 1, 8915, 97, 112, 59, 1, 8781, 4, 11, 68, 74, 83, 90, 97, 99, 101, 102, 105, 111, 115, 834, 850, 855, 860, 865, 888, 903, 916, 921, 1011, 1415, 4, 2, 59, 111, 840, 842, 1, 8517, 116, 114, 97, 104, 100, 59, 1, 10513, 99, 121, 59, 1, 1026, 99, 121, 59, 1, 1029, 99, 121, 59, 1, 1039, 4, 3, 103, 114, 115, 873, 879, 883, 103, 101, 114, 59, 1, 8225, 114, 59, 1, 8609, 104, 118, 59, 1, 10980, 4, 2, 97, 121, 894, 900, 114, 111, 110, 59, 1, 270, 59, 1, 1044, 108, 4, 2, 59, 116, 910, 912, 1, 8711, 97, 59, 1, 916, 114, 59, 3, 55349, 56583, 4, 2, 97, 102, 927, 998, 4, 2, 99, 109, 933, 992, 114, 105, 116, 105, 99, 97, 108, 4, 4, 65, 68, 71, 84, 950, 957, 978, 985, 99, 117, 116, 101, 59, 1, 180, 111, 4, 2, 116, 117, 964, 967, 59, 1, 729, 98, 108, 101, 65, 99, 117, 116, 101, 59, 1, 733, 114, 97, 118, 101, 59, 1, 96, 105, 108, 100, 101, 59, 1, 732, 111, 110, 100, 59, 1, 8900, 102, 101, 114, 101, 110, 116, 105, 97, 108, 68, 59, 1, 8518, 4, 4, 112, 116, 117, 119, 1021, 1026, 1048, 1249, 102, 59, 3, 55349, 56635, 4, 3, 59, 68, 69, 1034, 1036, 1041, 1, 168, 111, 116, 59, 1, 8412, 113, 117, 97, 108, 59, 1, 8784, 98, 108, 101, 4, 6, 67, 68, 76, 82, 85, 86, 1065, 1082, 1101, 1189, 1211, 1236, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 1, 8751, 111, 4, 2, 116, 119, 1089, 1092, 59, 1, 168, 110, 65, 114, 114, 111, 119, 59, 1, 8659, 4, 2, 101, 111, 1107, 1141, 102, 116, 4, 3, 65, 82, 84, 1117, 1124, 1136, 114, 114, 111, 119, 59, 1, 8656, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 8660, 101, 101, 59, 1, 10980, 110, 103, 4, 2, 76, 82, 1149, 1177, 101, 102, 116, 4, 2, 65, 82, 1158, 1165, 114, 114, 111, 119, 59, 1, 10232, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 10234, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 10233, 105, 103, 104, 116, 4, 2, 65, 84, 1199, 1206, 114, 114, 111, 119, 59, 1, 8658, 101, 101, 59, 1, 8872, 112, 4, 2, 65, 68, 1218, 1225, 114, 114, 111, 119, 59, 1, 8657, 111, 119, 110, 65, 114, 114, 111, 119, 59, 1, 8661, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59, 1, 8741, 110, 4, 6, 65, 66, 76, 82, 84, 97, 1264, 1292, 1299, 1352, 1391, 1408, 114, 114, 111, 119, 4, 3, 59, 66, 85, 1276, 1278, 1283, 1, 8595, 97, 114, 59, 1, 10515, 112, 65, 114, 114, 111, 119, 59, 1, 8693, 114, 101, 118, 101, 59, 1, 785, 101, 102, 116, 4, 3, 82, 84, 86, 1310, 1323, 1334, 105, 103, 104, 116, 86, 101, 99, 116, 111, 114, 59, 1, 10576, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10590, 101, 99, 116, 111, 114, 4, 2, 59, 66, 1345, 1347, 1, 8637, 97, 114, 59, 1, 10582, 105, 103, 104, 116, 4, 2, 84, 86, 1362, 1373, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10591, 101, 99, 116, 111, 114, 4, 2, 59, 66, 1384, 1386, 1, 8641, 97, 114, 59, 1, 10583, 101, 101, 4, 2, 59, 65, 1399, 1401, 1, 8868, 114, 114, 111, 119, 59, 1, 8615, 114, 114, 111, 119, 59, 1, 8659, 4, 2, 99, 116, 1421, 1426, 114, 59, 3, 55349, 56479, 114, 111, 107, 59, 1, 272, 4, 16, 78, 84, 97, 99, 100, 102, 103, 108, 109, 111, 112, 113, 115, 116, 117, 120, 1466, 1470, 1478, 1489, 1515, 1520, 1525, 1536, 1544, 1593, 1609, 1617, 1650, 1664, 1668, 1677, 71, 59, 1, 330, 72, 5, 208, 1, 59, 1476, 1, 208, 99, 117, 116, 101, 5, 201, 1, 59, 1487, 1, 201, 4, 3, 97, 105, 121, 1497, 1503, 1512, 114, 111, 110, 59, 1, 282, 114, 99, 5, 202, 1, 59, 1510, 1, 202, 59, 1, 1069, 111, 116, 59, 1, 278, 114, 59, 3, 55349, 56584, 114, 97, 118, 101, 5, 200, 1, 59, 1534, 1, 200, 101, 109, 101, 110, 116, 59, 1, 8712, 4, 2, 97, 112, 1550, 1555, 99, 114, 59, 1, 274, 116, 121, 4, 2, 83, 86, 1563, 1576, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 1, 9723, 101, 114, 121, 83, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 1, 9643, 4, 2, 103, 112, 1599, 1604, 111, 110, 59, 1, 280, 102, 59, 3, 55349, 56636, 115, 105, 108, 111, 110, 59, 1, 917, 117, 4, 2, 97, 105, 1624, 1640, 108, 4, 2, 59, 84, 1631, 1633, 1, 10869, 105, 108, 100, 101, 59, 1, 8770, 108, 105, 98, 114, 105, 117, 109, 59, 1, 8652, 4, 2, 99, 105, 1656, 1660, 114, 59, 1, 8496, 109, 59, 1, 10867, 97, 59, 1, 919, 109, 108, 5, 203, 1, 59, 1675, 1, 203, 4, 2, 105, 112, 1683, 1689, 115, 116, 115, 59, 1, 8707, 111, 110, 101, 110, 116, 105, 97, 108, 69, 59, 1, 8519, 4, 5, 99, 102, 105, 111, 115, 1713, 1717, 1722, 1762, 1791, 121, 59, 1, 1060, 114, 59, 3, 55349, 56585, 108, 108, 101, 100, 4, 2, 83, 86, 1732, 1745, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 1, 9724, 101, 114, 121, 83, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 1, 9642, 4, 3, 112, 114, 117, 1770, 1775, 1781, 102, 59, 3, 55349, 56637, 65, 108, 108, 59, 1, 8704, 114, 105, 101, 114, 116, 114, 102, 59, 1, 8497, 99, 114, 59, 1, 8497, 4, 12, 74, 84, 97, 98, 99, 100, 102, 103, 111, 114, 115, 116, 1822, 1827, 1834, 1848, 1855, 1877, 1882, 1887, 1890, 1896, 1978, 1984, 99, 121, 59, 1, 1027, 5, 62, 1, 59, 1832, 1, 62, 109, 109, 97, 4, 2, 59, 100, 1843, 1845, 1, 915, 59, 1, 988, 114, 101, 118, 101, 59, 1, 286, 4, 3, 101, 105, 121, 1863, 1869, 1874, 100, 105, 108, 59, 1, 290, 114, 99, 59, 1, 284, 59, 1, 1043, 111, 116, 59, 1, 288, 114, 59, 3, 55349, 56586, 59, 1, 8921, 112, 102, 59, 3, 55349, 56638, 101, 97, 116, 101, 114, 4, 6, 69, 70, 71, 76, 83, 84, 1915, 1933, 1944, 1953, 1959, 1971, 113, 117, 97, 108, 4, 2, 59, 76, 1925, 1927, 1, 8805, 101, 115, 115, 59, 1, 8923, 117, 108, 108, 69, 113, 117, 97, 108, 59, 1, 8807, 114, 101, 97, 116, 101, 114, 59, 1, 10914, 101, 115, 115, 59, 1, 8823, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 10878, 105, 108, 100, 101, 59, 1, 8819, 99, 114, 59, 3, 55349, 56482, 59, 1, 8811, 4, 8, 65, 97, 99, 102, 105, 111, 115, 117, 2005, 2012, 2026, 2032, 2036, 2049, 2073, 2089, 82, 68, 99, 121, 59, 1, 1066, 4, 2, 99, 116, 2018, 2023, 101, 107, 59, 1, 711, 59, 1, 94, 105, 114, 99, 59, 1, 292, 114, 59, 1, 8460, 108, 98, 101, 114, 116, 83, 112, 97, 99, 101, 59, 1, 8459, 4, 2, 112, 114, 2055, 2059, 102, 59, 1, 8461, 105, 122, 111, 110, 116, 97, 108, 76, 105, 110, 101, 59, 1, 9472, 4, 2, 99, 116, 2079, 2083, 114, 59, 1, 8459, 114, 111, 107, 59, 1, 294, 109, 112, 4, 2, 68, 69, 2097, 2107, 111, 119, 110, 72, 117, 109, 112, 59, 1, 8782, 113, 117, 97, 108, 59, 1, 8783, 4, 14, 69, 74, 79, 97, 99, 100, 102, 103, 109, 110, 111, 115, 116, 117, 2144, 2149, 2155, 2160, 2171, 2189, 2194, 2198, 2209, 2245, 2307, 2329, 2334, 2341, 99, 121, 59, 1, 1045, 108, 105, 103, 59, 1, 306, 99, 121, 59, 1, 1025, 99, 117, 116, 101, 5, 205, 1, 59, 2169, 1, 205, 4, 2, 105, 121, 2177, 2186, 114, 99, 5, 206, 1, 59, 2184, 1, 206, 59, 1, 1048, 111, 116, 59, 1, 304, 114, 59, 1, 8465, 114, 97, 118, 101, 5, 204, 1, 59, 2207, 1, 204, 4, 3, 59, 97, 112, 2217, 2219, 2238, 1, 8465, 4, 2, 99, 103, 2225, 2229, 114, 59, 1, 298, 105, 110, 97, 114, 121, 73, 59, 1, 8520, 108, 105, 101, 115, 59, 1, 8658, 4, 2, 116, 118, 2251, 2281, 4, 2, 59, 101, 2257, 2259, 1, 8748, 4, 2, 103, 114, 2265, 2271, 114, 97, 108, 59, 1, 8747, 115, 101, 99, 116, 105, 111, 110, 59, 1, 8898, 105, 115, 105, 98, 108, 101, 4, 2, 67, 84, 2293, 2300, 111, 109, 109, 97, 59, 1, 8291, 105, 109, 101, 115, 59, 1, 8290, 4, 3, 103, 112, 116, 2315, 2320, 2325, 111, 110, 59, 1, 302, 102, 59, 3, 55349, 56640, 97, 59, 1, 921, 99, 114, 59, 1, 8464, 105, 108, 100, 101, 59, 1, 296, 4, 2, 107, 109, 2347, 2352, 99, 121, 59, 1, 1030, 108, 5, 207, 1, 59, 2358, 1, 207, 4, 5, 99, 102, 111, 115, 117, 2372, 2386, 2391, 2397, 2414, 4, 2, 105, 121, 2378, 2383, 114, 99, 59, 1, 308, 59, 1, 1049, 114, 59, 3, 55349, 56589, 112, 102, 59, 3, 55349, 56641, 4, 2, 99, 101, 2403, 2408, 114, 59, 3, 55349, 56485, 114, 99, 121, 59, 1, 1032, 107, 99, 121, 59, 1, 1028, 4, 7, 72, 74, 97, 99, 102, 111, 115, 2436, 2441, 2446, 2452, 2467, 2472, 2478, 99, 121, 59, 1, 1061, 99, 121, 59, 1, 1036, 112, 112, 97, 59, 1, 922, 4, 2, 101, 121, 2458, 2464, 100, 105, 108, 59, 1, 310, 59, 1, 1050, 114, 59, 3, 55349, 56590, 112, 102, 59, 3, 55349, 56642, 99, 114, 59, 3, 55349, 56486, 4, 11, 74, 84, 97, 99, 101, 102, 108, 109, 111, 115, 116, 2508, 2513, 2520, 2562, 2585, 2981, 2986, 3004, 3011, 3146, 3167, 99, 121, 59, 1, 1033, 5, 60, 1, 59, 2518, 1, 60, 4, 5, 99, 109, 110, 112, 114, 2532, 2538, 2544, 2548, 2558, 117, 116, 101, 59, 1, 313, 98, 100, 97, 59, 1, 923, 103, 59, 1, 10218, 108, 97, 99, 101, 116, 114, 102, 59, 1, 8466, 114, 59, 1, 8606, 4, 3, 97, 101, 121, 2570, 2576, 2582, 114, 111, 110, 59, 1, 317, 100, 105, 108, 59, 1, 315, 59, 1, 1051, 4, 2, 102, 115, 2591, 2907, 116, 4, 10, 65, 67, 68, 70, 82, 84, 85, 86, 97, 114, 2614, 2663, 2672, 2728, 2735, 2760, 2820, 2870, 2888, 2895, 4, 2, 110, 114, 2620, 2633, 103, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 1, 10216, 114, 111, 119, 4, 3, 59, 66, 82, 2644, 2646, 2651, 1, 8592, 97, 114, 59, 1, 8676, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 8646, 101, 105, 108, 105, 110, 103, 59, 1, 8968, 111, 4, 2, 117, 119, 2679, 2692, 98, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 1, 10214, 110, 4, 2, 84, 86, 2699, 2710, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10593, 101, 99, 116, 111, 114, 4, 2, 59, 66, 2721, 2723, 1, 8643, 97, 114, 59, 1, 10585, 108, 111, 111, 114, 59, 1, 8970, 105, 103, 104, 116, 4, 2, 65, 86, 2745, 2752, 114, 114, 111, 119, 59, 1, 8596, 101, 99, 116, 111, 114, 59, 1, 10574, 4, 2, 101, 114, 2766, 2792, 101, 4, 3, 59, 65, 86, 2775, 2777, 2784, 1, 8867, 114, 114, 111, 119, 59, 1, 8612, 101, 99, 116, 111, 114, 59, 1, 10586, 105, 97, 110, 103, 108, 101, 4, 3, 59, 66, 69, 2806, 2808, 2813, 1, 8882, 97, 114, 59, 1, 10703, 113, 117, 97, 108, 59, 1, 8884, 112, 4, 3, 68, 84, 86, 2829, 2841, 2852, 111, 119, 110, 86, 101, 99, 116, 111, 114, 59, 1, 10577, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10592, 101, 99, 116, 111, 114, 4, 2, 59, 66, 2863, 2865, 1, 8639, 97, 114, 59, 1, 10584, 101, 99, 116, 111, 114, 4, 2, 59, 66, 2881, 2883, 1, 8636, 97, 114, 59, 1, 10578, 114, 114, 111, 119, 59, 1, 8656, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8660, 115, 4, 6, 69, 70, 71, 76, 83, 84, 2922, 2936, 2947, 2956, 2962, 2974, 113, 117, 97, 108, 71, 114, 101, 97, 116, 101, 114, 59, 1, 8922, 117, 108, 108, 69, 113, 117, 97, 108, 59, 1, 8806, 114, 101, 97, 116, 101, 114, 59, 1, 8822, 101, 115, 115, 59, 1, 10913, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 10877, 105, 108, 100, 101, 59, 1, 8818, 114, 59, 3, 55349, 56591, 4, 2, 59, 101, 2992, 2994, 1, 8920, 102, 116, 97, 114, 114, 111, 119, 59, 1, 8666, 105, 100, 111, 116, 59, 1, 319, 4, 3, 110, 112, 119, 3019, 3110, 3115, 103, 4, 4, 76, 82, 108, 114, 3030, 3058, 3070, 3098, 101, 102, 116, 4, 2, 65, 82, 3039, 3046, 114, 114, 111, 119, 59, 1, 10229, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 10231, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 10230, 101, 102, 116, 4, 2, 97, 114, 3079, 3086, 114, 114, 111, 119, 59, 1, 10232, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 10234, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 10233, 102, 59, 3, 55349, 56643, 101, 114, 4, 2, 76, 82, 3123, 3134, 101, 102, 116, 65, 114, 114, 111, 119, 59, 1, 8601, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 8600, 4, 3, 99, 104, 116, 3154, 3158, 3161, 114, 59, 1, 8466, 59, 1, 8624, 114, 111, 107, 59, 1, 321, 59, 1, 8810, 4, 8, 97, 99, 101, 102, 105, 111, 115, 117, 3188, 3192, 3196, 3222, 3227, 3237, 3243, 3248, 112, 59, 1, 10501, 121, 59, 1, 1052, 4, 2, 100, 108, 3202, 3213, 105, 117, 109, 83, 112, 97, 99, 101, 59, 1, 8287, 108, 105, 110, 116, 114, 102, 59, 1, 8499, 114, 59, 3, 55349, 56592, 110, 117, 115, 80, 108, 117, 115, 59, 1, 8723, 112, 102, 59, 3, 55349, 56644, 99, 114, 59, 1, 8499, 59, 1, 924, 4, 9, 74, 97, 99, 101, 102, 111, 115, 116, 117, 3271, 3276, 3283, 3306, 3422, 3427, 4120, 4126, 4137, 99, 121, 59, 1, 1034, 99, 117, 116, 101, 59, 1, 323, 4, 3, 97, 101, 121, 3291, 3297, 3303, 114, 111, 110, 59, 1, 327, 100, 105, 108, 59, 1, 325, 59, 1, 1053, 4, 3, 103, 115, 119, 3314, 3380, 3415, 97, 116, 105, 118, 101, 4, 3, 77, 84, 86, 3327, 3340, 3365, 101, 100, 105, 117, 109, 83, 112, 97, 99, 101, 59, 1, 8203, 104, 105, 4, 2, 99, 110, 3348, 3357, 107, 83, 112, 97, 99, 101, 59, 1, 8203, 83, 112, 97, 99, 101, 59, 1, 8203, 101, 114, 121, 84, 104, 105, 110, 83, 112, 97, 99, 101, 59, 1, 8203, 116, 101, 100, 4, 2, 71, 76, 3389, 3405, 114, 101, 97, 116, 101, 114, 71, 114, 101, 97, 116, 101, 114, 59, 1, 8811, 101, 115, 115, 76, 101, 115, 115, 59, 1, 8810, 76, 105, 110, 101, 59, 1, 10, 114, 59, 3, 55349, 56593, 4, 4, 66, 110, 112, 116, 3437, 3444, 3460, 3464, 114, 101, 97, 107, 59, 1, 8288, 66, 114, 101, 97, 107, 105, 110, 103, 83, 112, 97, 99, 101, 59, 1, 160, 102, 59, 1, 8469, 4, 13, 59, 67, 68, 69, 71, 72, 76, 78, 80, 82, 83, 84, 86, 3492, 3494, 3517, 3536, 3578, 3657, 3685, 3784, 3823, 3860, 3915, 4066, 4107, 1, 10988, 4, 2, 111, 117, 3500, 3510, 110, 103, 114, 117, 101, 110, 116, 59, 1, 8802, 112, 67, 97, 112, 59, 1, 8813, 111, 117, 98, 108, 101, 86, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59, 1, 8742, 4, 3, 108, 113, 120, 3544, 3552, 3571, 101, 109, 101, 110, 116, 59, 1, 8713, 117, 97, 108, 4, 2, 59, 84, 3561, 3563, 1, 8800, 105, 108, 100, 101, 59, 3, 8770, 824, 105, 115, 116, 115, 59, 1, 8708, 114, 101, 97, 116, 101, 114, 4, 7, 59, 69, 70, 71, 76, 83, 84, 3600, 3602, 3609, 3621, 3631, 3637, 3650, 1, 8815, 113, 117, 97, 108, 59, 1, 8817, 117, 108, 108, 69, 113, 117, 97, 108, 59, 3, 8807, 824, 114, 101, 97, 116, 101, 114, 59, 3, 8811, 824, 101, 115, 115, 59, 1, 8825, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 3, 10878, 824, 105, 108, 100, 101, 59, 1, 8821, 117, 109, 112, 4, 2, 68, 69, 3666, 3677, 111, 119, 110, 72, 117, 109, 112, 59, 3, 8782, 824, 113, 117, 97, 108, 59, 3, 8783, 824, 101, 4, 2, 102, 115, 3692, 3724, 116, 84, 114, 105, 97, 110, 103, 108, 101, 4, 3, 59, 66, 69, 3709, 3711, 3717, 1, 8938, 97, 114, 59, 3, 10703, 824, 113, 117, 97, 108, 59, 1, 8940, 115, 4, 6, 59, 69, 71, 76, 83, 84, 3739, 3741, 3748, 3757, 3764, 3777, 1, 8814, 113, 117, 97, 108, 59, 1, 8816, 114, 101, 97, 116, 101, 114, 59, 1, 8824, 101, 115, 115, 59, 3, 8810, 824, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 3, 10877, 824, 105, 108, 100, 101, 59, 1, 8820, 101, 115, 116, 101, 100, 4, 2, 71, 76, 3795, 3812, 114, 101, 97, 116, 101, 114, 71, 114, 101, 97, 116, 101, 114, 59, 3, 10914, 824, 101, 115, 115, 76, 101, 115, 115, 59, 3, 10913, 824, 114, 101, 99, 101, 100, 101, 115, 4, 3, 59, 69, 83, 3838, 3840, 3848, 1, 8832, 113, 117, 97, 108, 59, 3, 10927, 824, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 8928, 4, 2, 101, 105, 3866, 3881, 118, 101, 114, 115, 101, 69, 108, 101, 109, 101, 110, 116, 59, 1, 8716, 103, 104, 116, 84, 114, 105, 97, 110, 103, 108, 101, 4, 3, 59, 66, 69, 3900, 3902, 3908, 1, 8939, 97, 114, 59, 3, 10704, 824, 113, 117, 97, 108, 59, 1, 8941, 4, 2, 113, 117, 3921, 3973, 117, 97, 114, 101, 83, 117, 4, 2, 98, 112, 3933, 3952, 115, 101, 116, 4, 2, 59, 69, 3942, 3945, 3, 8847, 824, 113, 117, 97, 108, 59, 1, 8930, 101, 114, 115, 101, 116, 4, 2, 59, 69, 3963, 3966, 3, 8848, 824, 113, 117, 97, 108, 59, 1, 8931, 4, 3, 98, 99, 112, 3981, 4e3, 4045, 115, 101, 116, 4, 2, 59, 69, 3990, 3993, 3, 8834, 8402, 113, 117, 97, 108, 59, 1, 8840, 99, 101, 101, 100, 115, 4, 4, 59, 69, 83, 84, 4015, 4017, 4025, 4037, 1, 8833, 113, 117, 97, 108, 59, 3, 10928, 824, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 8929, 105, 108, 100, 101, 59, 3, 8831, 824, 101, 114, 115, 101, 116, 4, 2, 59, 69, 4056, 4059, 3, 8835, 8402, 113, 117, 97, 108, 59, 1, 8841, 105, 108, 100, 101, 4, 4, 59, 69, 70, 84, 4080, 4082, 4089, 4100, 1, 8769, 113, 117, 97, 108, 59, 1, 8772, 117, 108, 108, 69, 113, 117, 97, 108, 59, 1, 8775, 105, 108, 100, 101, 59, 1, 8777, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59, 1, 8740, 99, 114, 59, 3, 55349, 56489, 105, 108, 100, 101, 5, 209, 1, 59, 4135, 1, 209, 59, 1, 925, 4, 14, 69, 97, 99, 100, 102, 103, 109, 111, 112, 114, 115, 116, 117, 118, 4170, 4176, 4187, 4205, 4212, 4217, 4228, 4253, 4259, 4292, 4295, 4316, 4337, 4346, 108, 105, 103, 59, 1, 338, 99, 117, 116, 101, 5, 211, 1, 59, 4185, 1, 211, 4, 2, 105, 121, 4193, 4202, 114, 99, 5, 212, 1, 59, 4200, 1, 212, 59, 1, 1054, 98, 108, 97, 99, 59, 1, 336, 114, 59, 3, 55349, 56594, 114, 97, 118, 101, 5, 210, 1, 59, 4226, 1, 210, 4, 3, 97, 101, 105, 4236, 4241, 4246, 99, 114, 59, 1, 332, 103, 97, 59, 1, 937, 99, 114, 111, 110, 59, 1, 927, 112, 102, 59, 3, 55349, 56646, 101, 110, 67, 117, 114, 108, 121, 4, 2, 68, 81, 4272, 4285, 111, 117, 98, 108, 101, 81, 117, 111, 116, 101, 59, 1, 8220, 117, 111, 116, 101, 59, 1, 8216, 59, 1, 10836, 4, 2, 99, 108, 4301, 4306, 114, 59, 3, 55349, 56490, 97, 115, 104, 5, 216, 1, 59, 4314, 1, 216, 105, 4, 2, 108, 109, 4323, 4332, 100, 101, 5, 213, 1, 59, 4330, 1, 213, 101, 115, 59, 1, 10807, 109, 108, 5, 214, 1, 59, 4344, 1, 214, 101, 114, 4, 2, 66, 80, 4354, 4380, 4, 2, 97, 114, 4360, 4364, 114, 59, 1, 8254, 97, 99, 4, 2, 101, 107, 4372, 4375, 59, 1, 9182, 101, 116, 59, 1, 9140, 97, 114, 101, 110, 116, 104, 101, 115, 105, 115, 59, 1, 9180, 4, 9, 97, 99, 102, 104, 105, 108, 111, 114, 115, 4413, 4422, 4426, 4431, 4435, 4438, 4448, 4471, 4561, 114, 116, 105, 97, 108, 68, 59, 1, 8706, 121, 59, 1, 1055, 114, 59, 3, 55349, 56595, 105, 59, 1, 934, 59, 1, 928, 117, 115, 77, 105, 110, 117, 115, 59, 1, 177, 4, 2, 105, 112, 4454, 4467, 110, 99, 97, 114, 101, 112, 108, 97, 110, 101, 59, 1, 8460, 102, 59, 1, 8473, 4, 4, 59, 101, 105, 111, 4481, 4483, 4526, 4531, 1, 10939, 99, 101, 100, 101, 115, 4, 4, 59, 69, 83, 84, 4498, 4500, 4507, 4519, 1, 8826, 113, 117, 97, 108, 59, 1, 10927, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 8828, 105, 108, 100, 101, 59, 1, 8830, 109, 101, 59, 1, 8243, 4, 2, 100, 112, 4537, 4543, 117, 99, 116, 59, 1, 8719, 111, 114, 116, 105, 111, 110, 4, 2, 59, 97, 4555, 4557, 1, 8759, 108, 59, 1, 8733, 4, 2, 99, 105, 4567, 4572, 114, 59, 3, 55349, 56491, 59, 1, 936, 4, 4, 85, 102, 111, 115, 4585, 4594, 4599, 4604, 79, 84, 5, 34, 1, 59, 4592, 1, 34, 114, 59, 3, 55349, 56596, 112, 102, 59, 1, 8474, 99, 114, 59, 3, 55349, 56492, 4, 12, 66, 69, 97, 99, 101, 102, 104, 105, 111, 114, 115, 117, 4636, 4642, 4650, 4681, 4704, 4763, 4767, 4771, 5047, 5069, 5081, 5094, 97, 114, 114, 59, 1, 10512, 71, 5, 174, 1, 59, 4648, 1, 174, 4, 3, 99, 110, 114, 4658, 4664, 4668, 117, 116, 101, 59, 1, 340, 103, 59, 1, 10219, 114, 4, 2, 59, 116, 4675, 4677, 1, 8608, 108, 59, 1, 10518, 4, 3, 97, 101, 121, 4689, 4695, 4701, 114, 111, 110, 59, 1, 344, 100, 105, 108, 59, 1, 342, 59, 1, 1056, 4, 2, 59, 118, 4710, 4712, 1, 8476, 101, 114, 115, 101, 4, 2, 69, 85, 4722, 4748, 4, 2, 108, 113, 4728, 4736, 101, 109, 101, 110, 116, 59, 1, 8715, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59, 1, 8651, 112, 69, 113, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59, 1, 10607, 114, 59, 1, 8476, 111, 59, 1, 929, 103, 104, 116, 4, 8, 65, 67, 68, 70, 84, 85, 86, 97, 4792, 4840, 4849, 4905, 4912, 4972, 5022, 5040, 4, 2, 110, 114, 4798, 4811, 103, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 1, 10217, 114, 111, 119, 4, 3, 59, 66, 76, 4822, 4824, 4829, 1, 8594, 97, 114, 59, 1, 8677, 101, 102, 116, 65, 114, 114, 111, 119, 59, 1, 8644, 101, 105, 108, 105, 110, 103, 59, 1, 8969, 111, 4, 2, 117, 119, 4856, 4869, 98, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 1, 10215, 110, 4, 2, 84, 86, 4876, 4887, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10589, 101, 99, 116, 111, 114, 4, 2, 59, 66, 4898, 4900, 1, 8642, 97, 114, 59, 1, 10581, 108, 111, 111, 114, 59, 1, 8971, 4, 2, 101, 114, 4918, 4944, 101, 4, 3, 59, 65, 86, 4927, 4929, 4936, 1, 8866, 114, 114, 111, 119, 59, 1, 8614, 101, 99, 116, 111, 114, 59, 1, 10587, 105, 97, 110, 103, 108, 101, 4, 3, 59, 66, 69, 4958, 4960, 4965, 1, 8883, 97, 114, 59, 1, 10704, 113, 117, 97, 108, 59, 1, 8885, 112, 4, 3, 68, 84, 86, 4981, 4993, 5004, 111, 119, 110, 86, 101, 99, 116, 111, 114, 59, 1, 10575, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10588, 101, 99, 116, 111, 114, 4, 2, 59, 66, 5015, 5017, 1, 8638, 97, 114, 59, 1, 10580, 101, 99, 116, 111, 114, 4, 2, 59, 66, 5033, 5035, 1, 8640, 97, 114, 59, 1, 10579, 114, 114, 111, 119, 59, 1, 8658, 4, 2, 112, 117, 5053, 5057, 102, 59, 1, 8477, 110, 100, 73, 109, 112, 108, 105, 101, 115, 59, 1, 10608, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8667, 4, 2, 99, 104, 5087, 5091, 114, 59, 1, 8475, 59, 1, 8625, 108, 101, 68, 101, 108, 97, 121, 101, 100, 59, 1, 10740, 4, 13, 72, 79, 97, 99, 102, 104, 105, 109, 111, 113, 115, 116, 117, 5134, 5150, 5157, 5164, 5198, 5203, 5259, 5265, 5277, 5283, 5374, 5380, 5385, 4, 2, 67, 99, 5140, 5146, 72, 99, 121, 59, 1, 1065, 121, 59, 1, 1064, 70, 84, 99, 121, 59, 1, 1068, 99, 117, 116, 101, 59, 1, 346, 4, 5, 59, 97, 101, 105, 121, 5176, 5178, 5184, 5190, 5195, 1, 10940, 114, 111, 110, 59, 1, 352, 100, 105, 108, 59, 1, 350, 114, 99, 59, 1, 348, 59, 1, 1057, 114, 59, 3, 55349, 56598, 111, 114, 116, 4, 4, 68, 76, 82, 85, 5216, 5227, 5238, 5250, 111, 119, 110, 65, 114, 114, 111, 119, 59, 1, 8595, 101, 102, 116, 65, 114, 114, 111, 119, 59, 1, 8592, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 8594, 112, 65, 114, 114, 111, 119, 59, 1, 8593, 103, 109, 97, 59, 1, 931, 97, 108, 108, 67, 105, 114, 99, 108, 101, 59, 1, 8728, 112, 102, 59, 3, 55349, 56650, 4, 2, 114, 117, 5289, 5293, 116, 59, 1, 8730, 97, 114, 101, 4, 4, 59, 73, 83, 85, 5306, 5308, 5322, 5367, 1, 9633, 110, 116, 101, 114, 115, 101, 99, 116, 105, 111, 110, 59, 1, 8851, 117, 4, 2, 98, 112, 5329, 5347, 115, 101, 116, 4, 2, 59, 69, 5338, 5340, 1, 8847, 113, 117, 97, 108, 59, 1, 8849, 101, 114, 115, 101, 116, 4, 2, 59, 69, 5358, 5360, 1, 8848, 113, 117, 97, 108, 59, 1, 8850, 110, 105, 111, 110, 59, 1, 8852, 99, 114, 59, 3, 55349, 56494, 97, 114, 59, 1, 8902, 4, 4, 98, 99, 109, 112, 5395, 5420, 5475, 5478, 4, 2, 59, 115, 5401, 5403, 1, 8912, 101, 116, 4, 2, 59, 69, 5411, 5413, 1, 8912, 113, 117, 97, 108, 59, 1, 8838, 4, 2, 99, 104, 5426, 5468, 101, 101, 100, 115, 4, 4, 59, 69, 83, 84, 5440, 5442, 5449, 5461, 1, 8827, 113, 117, 97, 108, 59, 1, 10928, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 8829, 105, 108, 100, 101, 59, 1, 8831, 84, 104, 97, 116, 59, 1, 8715, 59, 1, 8721, 4, 3, 59, 101, 115, 5486, 5488, 5507, 1, 8913, 114, 115, 101, 116, 4, 2, 59, 69, 5498, 5500, 1, 8835, 113, 117, 97, 108, 59, 1, 8839, 101, 116, 59, 1, 8913, 4, 11, 72, 82, 83, 97, 99, 102, 104, 105, 111, 114, 115, 5536, 5546, 5552, 5567, 5579, 5602, 5607, 5655, 5695, 5701, 5711, 79, 82, 78, 5, 222, 1, 59, 5544, 1, 222, 65, 68, 69, 59, 1, 8482, 4, 2, 72, 99, 5558, 5563, 99, 121, 59, 1, 1035, 121, 59, 1, 1062, 4, 2, 98, 117, 5573, 5576, 59, 1, 9, 59, 1, 932, 4, 3, 97, 101, 121, 5587, 5593, 5599, 114, 111, 110, 59, 1, 356, 100, 105, 108, 59, 1, 354, 59, 1, 1058, 114, 59, 3, 55349, 56599, 4, 2, 101, 105, 5613, 5631, 4, 2, 114, 116, 5619, 5627, 101, 102, 111, 114, 101, 59, 1, 8756, 97, 59, 1, 920, 4, 2, 99, 110, 5637, 5647, 107, 83, 112, 97, 99, 101, 59, 3, 8287, 8202, 83, 112, 97, 99, 101, 59, 1, 8201, 108, 100, 101, 4, 4, 59, 69, 70, 84, 5668, 5670, 5677, 5688, 1, 8764, 113, 117, 97, 108, 59, 1, 8771, 117, 108, 108, 69, 113, 117, 97, 108, 59, 1, 8773, 105, 108, 100, 101, 59, 1, 8776, 112, 102, 59, 3, 55349, 56651, 105, 112, 108, 101, 68, 111, 116, 59, 1, 8411, 4, 2, 99, 116, 5717, 5722, 114, 59, 3, 55349, 56495, 114, 111, 107, 59, 1, 358, 4, 14, 97, 98, 99, 100, 102, 103, 109, 110, 111, 112, 114, 115, 116, 117, 5758, 5789, 5805, 5823, 5830, 5835, 5846, 5852, 5921, 5937, 6089, 6095, 6101, 6108, 4, 2, 99, 114, 5764, 5774, 117, 116, 101, 5, 218, 1, 59, 5772, 1, 218, 114, 4, 2, 59, 111, 5781, 5783, 1, 8607, 99, 105, 114, 59, 1, 10569, 114, 4, 2, 99, 101, 5796, 5800, 121, 59, 1, 1038, 118, 101, 59, 1, 364, 4, 2, 105, 121, 5811, 5820, 114, 99, 5, 219, 1, 59, 5818, 1, 219, 59, 1, 1059, 98, 108, 97, 99, 59, 1, 368, 114, 59, 3, 55349, 56600, 114, 97, 118, 101, 5, 217, 1, 59, 5844, 1, 217, 97, 99, 114, 59, 1, 362, 4, 2, 100, 105, 5858, 5905, 101, 114, 4, 2, 66, 80, 5866, 5892, 4, 2, 97, 114, 5872, 5876, 114, 59, 1, 95, 97, 99, 4, 2, 101, 107, 5884, 5887, 59, 1, 9183, 101, 116, 59, 1, 9141, 97, 114, 101, 110, 116, 104, 101, 115, 105, 115, 59, 1, 9181, 111, 110, 4, 2, 59, 80, 5913, 5915, 1, 8899, 108, 117, 115, 59, 1, 8846, 4, 2, 103, 112, 5927, 5932, 111, 110, 59, 1, 370, 102, 59, 3, 55349, 56652, 4, 8, 65, 68, 69, 84, 97, 100, 112, 115, 5955, 5985, 5996, 6009, 6026, 6033, 6044, 6075, 114, 114, 111, 119, 4, 3, 59, 66, 68, 5967, 5969, 5974, 1, 8593, 97, 114, 59, 1, 10514, 111, 119, 110, 65, 114, 114, 111, 119, 59, 1, 8645, 111, 119, 110, 65, 114, 114, 111, 119, 59, 1, 8597, 113, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59, 1, 10606, 101, 101, 4, 2, 59, 65, 6017, 6019, 1, 8869, 114, 114, 111, 119, 59, 1, 8613, 114, 114, 111, 119, 59, 1, 8657, 111, 119, 110, 97, 114, 114, 111, 119, 59, 1, 8661, 101, 114, 4, 2, 76, 82, 6052, 6063, 101, 102, 116, 65, 114, 114, 111, 119, 59, 1, 8598, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 8599, 105, 4, 2, 59, 108, 6082, 6084, 1, 978, 111, 110, 59, 1, 933, 105, 110, 103, 59, 1, 366, 99, 114, 59, 3, 55349, 56496, 105, 108, 100, 101, 59, 1, 360, 109, 108, 5, 220, 1, 59, 6115, 1, 220, 4, 9, 68, 98, 99, 100, 101, 102, 111, 115, 118, 6137, 6143, 6148, 6152, 6166, 6250, 6255, 6261, 6267, 97, 115, 104, 59, 1, 8875, 97, 114, 59, 1, 10987, 121, 59, 1, 1042, 97, 115, 104, 4, 2, 59, 108, 6161, 6163, 1, 8873, 59, 1, 10982, 4, 2, 101, 114, 6172, 6175, 59, 1, 8897, 4, 3, 98, 116, 121, 6183, 6188, 6238, 97, 114, 59, 1, 8214, 4, 2, 59, 105, 6194, 6196, 1, 8214, 99, 97, 108, 4, 4, 66, 76, 83, 84, 6209, 6214, 6220, 6231, 97, 114, 59, 1, 8739, 105, 110, 101, 59, 1, 124, 101, 112, 97, 114, 97, 116, 111, 114, 59, 1, 10072, 105, 108, 100, 101, 59, 1, 8768, 84, 104, 105, 110, 83, 112, 97, 99, 101, 59, 1, 8202, 114, 59, 3, 55349, 56601, 112, 102, 59, 3, 55349, 56653, 99, 114, 59, 3, 55349, 56497, 100, 97, 115, 104, 59, 1, 8874, 4, 5, 99, 101, 102, 111, 115, 6286, 6292, 6298, 6303, 6309, 105, 114, 99, 59, 1, 372, 100, 103, 101, 59, 1, 8896, 114, 59, 3, 55349, 56602, 112, 102, 59, 3, 55349, 56654, 99, 114, 59, 3, 55349, 56498, 4, 4, 102, 105, 111, 115, 6325, 6330, 6333, 6339, 114, 59, 3, 55349, 56603, 59, 1, 926, 112, 102, 59, 3, 55349, 56655, 99, 114, 59, 3, 55349, 56499, 4, 9, 65, 73, 85, 97, 99, 102, 111, 115, 117, 6365, 6370, 6375, 6380, 6391, 6405, 6410, 6416, 6422, 99, 121, 59, 1, 1071, 99, 121, 59, 1, 1031, 99, 121, 59, 1, 1070, 99, 117, 116, 101, 5, 221, 1, 59, 6389, 1, 221, 4, 2, 105, 121, 6397, 6402, 114, 99, 59, 1, 374, 59, 1, 1067, 114, 59, 3, 55349, 56604, 112, 102, 59, 3, 55349, 56656, 99, 114, 59, 3, 55349, 56500, 109, 108, 59, 1, 376, 4, 8, 72, 97, 99, 100, 101, 102, 111, 115, 6445, 6450, 6457, 6472, 6477, 6501, 6505, 6510, 99, 121, 59, 1, 1046, 99, 117, 116, 101, 59, 1, 377, 4, 2, 97, 121, 6463, 6469, 114, 111, 110, 59, 1, 381, 59, 1, 1047, 111, 116, 59, 1, 379, 4, 2, 114, 116, 6483, 6497, 111, 87, 105, 100, 116, 104, 83, 112, 97, 99, 101, 59, 1, 8203, 97, 59, 1, 918, 114, 59, 1, 8488, 112, 102, 59, 1, 8484, 99, 114, 59, 3, 55349, 56501, 4, 16, 97, 98, 99, 101, 102, 103, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119, 6550, 6561, 6568, 6612, 6622, 6634, 6645, 6672, 6699, 6854, 6870, 6923, 6933, 6963, 6974, 6983, 99, 117, 116, 101, 5, 225, 1, 59, 6559, 1, 225, 114, 101, 118, 101, 59, 1, 259, 4, 6, 59, 69, 100, 105, 117, 121, 6582, 6584, 6588, 6591, 6600, 6609, 1, 8766, 59, 3, 8766, 819, 59, 1, 8767, 114, 99, 5, 226, 1, 59, 6598, 1, 226, 116, 101, 5, 180, 1, 59, 6607, 1, 180, 59, 1, 1072, 108, 105, 103, 5, 230, 1, 59, 6620, 1, 230, 4, 2, 59, 114, 6628, 6630, 1, 8289, 59, 3, 55349, 56606, 114, 97, 118, 101, 5, 224, 1, 59, 6643, 1, 224, 4, 2, 101, 112, 6651, 6667, 4, 2, 102, 112, 6657, 6663, 115, 121, 109, 59, 1, 8501, 104, 59, 1, 8501, 104, 97, 59, 1, 945, 4, 2, 97, 112, 6678, 6692, 4, 2, 99, 108, 6684, 6688, 114, 59, 1, 257, 103, 59, 1, 10815, 5, 38, 1, 59, 6697, 1, 38, 4, 2, 100, 103, 6705, 6737, 4, 5, 59, 97, 100, 115, 118, 6717, 6719, 6724, 6727, 6734, 1, 8743, 110, 100, 59, 1, 10837, 59, 1, 10844, 108, 111, 112, 101, 59, 1, 10840, 59, 1, 10842, 4, 7, 59, 101, 108, 109, 114, 115, 122, 6753, 6755, 6758, 6762, 6814, 6835, 6848, 1, 8736, 59, 1, 10660, 101, 59, 1, 8736, 115, 100, 4, 2, 59, 97, 6770, 6772, 1, 8737, 4, 8, 97, 98, 99, 100, 101, 102, 103, 104, 6790, 6793, 6796, 6799, 6802, 6805, 6808, 6811, 59, 1, 10664, 59, 1, 10665, 59, 1, 10666, 59, 1, 10667, 59, 1, 10668, 59, 1, 10669, 59, 1, 10670, 59, 1, 10671, 116, 4, 2, 59, 118, 6821, 6823, 1, 8735, 98, 4, 2, 59, 100, 6830, 6832, 1, 8894, 59, 1, 10653, 4, 2, 112, 116, 6841, 6845, 104, 59, 1, 8738, 59, 1, 197, 97, 114, 114, 59, 1, 9084, 4, 2, 103, 112, 6860, 6865, 111, 110, 59, 1, 261, 102, 59, 3, 55349, 56658, 4, 7, 59, 69, 97, 101, 105, 111, 112, 6886, 6888, 6891, 6897, 6900, 6904, 6908, 1, 8776, 59, 1, 10864, 99, 105, 114, 59, 1, 10863, 59, 1, 8778, 100, 59, 1, 8779, 115, 59, 1, 39, 114, 111, 120, 4, 2, 59, 101, 6917, 6919, 1, 8776, 113, 59, 1, 8778, 105, 110, 103, 5, 229, 1, 59, 6931, 1, 229, 4, 3, 99, 116, 121, 6941, 6946, 6949, 114, 59, 3, 55349, 56502, 59, 1, 42, 109, 112, 4, 2, 59, 101, 6957, 6959, 1, 8776, 113, 59, 1, 8781, 105, 108, 100, 101, 5, 227, 1, 59, 6972, 1, 227, 109, 108, 5, 228, 1, 59, 6981, 1, 228, 4, 2, 99, 105, 6989, 6997, 111, 110, 105, 110, 116, 59, 1, 8755, 110, 116, 59, 1, 10769, 4, 16, 78, 97, 98, 99, 100, 101, 102, 105, 107, 108, 110, 111, 112, 114, 115, 117, 7036, 7041, 7119, 7135, 7149, 7155, 7219, 7224, 7347, 7354, 7463, 7489, 7786, 7793, 7814, 7866, 111, 116, 59, 1, 10989, 4, 2, 99, 114, 7047, 7094, 107, 4, 4, 99, 101, 112, 115, 7058, 7064, 7073, 7080, 111, 110, 103, 59, 1, 8780, 112, 115, 105, 108, 111, 110, 59, 1, 1014, 114, 105, 109, 101, 59, 1, 8245, 105, 109, 4, 2, 59, 101, 7088, 7090, 1, 8765, 113, 59, 1, 8909, 4, 2, 118, 119, 7100, 7105, 101, 101, 59, 1, 8893, 101, 100, 4, 2, 59, 103, 7113, 7115, 1, 8965, 101, 59, 1, 8965, 114, 107, 4, 2, 59, 116, 7127, 7129, 1, 9141, 98, 114, 107, 59, 1, 9142, 4, 2, 111, 121, 7141, 7146, 110, 103, 59, 1, 8780, 59, 1, 1073, 113, 117, 111, 59, 1, 8222, 4, 5, 99, 109, 112, 114, 116, 7167, 7181, 7188, 7193, 7199, 97, 117, 115, 4, 2, 59, 101, 7176, 7178, 1, 8757, 59, 1, 8757, 112, 116, 121, 118, 59, 1, 10672, 115, 105, 59, 1, 1014, 110, 111, 117, 59, 1, 8492, 4, 3, 97, 104, 119, 7207, 7210, 7213, 59, 1, 946, 59, 1, 8502, 101, 101, 110, 59, 1, 8812, 114, 59, 3, 55349, 56607, 103, 4, 7, 99, 111, 115, 116, 117, 118, 119, 7241, 7262, 7288, 7305, 7328, 7335, 7340, 4, 3, 97, 105, 117, 7249, 7253, 7258, 112, 59, 1, 8898, 114, 99, 59, 1, 9711, 112, 59, 1, 8899, 4, 3, 100, 112, 116, 7270, 7275, 7281, 111, 116, 59, 1, 10752, 108, 117, 115, 59, 1, 10753, 105, 109, 101, 115, 59, 1, 10754, 4, 2, 113, 116, 7294, 7300, 99, 117, 112, 59, 1, 10758, 97, 114, 59, 1, 9733, 114, 105, 97, 110, 103, 108, 101, 4, 2, 100, 117, 7318, 7324, 111, 119, 110, 59, 1, 9661, 112, 59, 1, 9651, 112, 108, 117, 115, 59, 1, 10756, 101, 101, 59, 1, 8897, 101, 100, 103, 101, 59, 1, 8896, 97, 114, 111, 119, 59, 1, 10509, 4, 3, 97, 107, 111, 7362, 7436, 7458, 4, 2, 99, 110, 7368, 7432, 107, 4, 3, 108, 115, 116, 7377, 7386, 7394, 111, 122, 101, 110, 103, 101, 59, 1, 10731, 113, 117, 97, 114, 101, 59, 1, 9642, 114, 105, 97, 110, 103, 108, 101, 4, 4, 59, 100, 108, 114, 7411, 7413, 7419, 7425, 1, 9652, 111, 119, 110, 59, 1, 9662, 101, 102, 116, 59, 1, 9666, 105, 103, 104, 116, 59, 1, 9656, 107, 59, 1, 9251, 4, 2, 49, 51, 7442, 7454, 4, 2, 50, 52, 7448, 7451, 59, 1, 9618, 59, 1, 9617, 52, 59, 1, 9619, 99, 107, 59, 1, 9608, 4, 2, 101, 111, 7469, 7485, 4, 2, 59, 113, 7475, 7478, 3, 61, 8421, 117, 105, 118, 59, 3, 8801, 8421, 116, 59, 1, 8976, 4, 4, 112, 116, 119, 120, 7499, 7504, 7517, 7523, 102, 59, 3, 55349, 56659, 4, 2, 59, 116, 7510, 7512, 1, 8869, 111, 109, 59, 1, 8869, 116, 105, 101, 59, 1, 8904, 4, 12, 68, 72, 85, 86, 98, 100, 104, 109, 112, 116, 117, 118, 7549, 7571, 7597, 7619, 7655, 7660, 7682, 7708, 7715, 7721, 7728, 7750, 4, 4, 76, 82, 108, 114, 7559, 7562, 7565, 7568, 59, 1, 9559, 59, 1, 9556, 59, 1, 9558, 59, 1, 9555, 4, 5, 59, 68, 85, 100, 117, 7583, 7585, 7588, 7591, 7594, 1, 9552, 59, 1, 9574, 59, 1, 9577, 59, 1, 9572, 59, 1, 9575, 4, 4, 76, 82, 108, 114, 7607, 7610, 7613, 7616, 59, 1, 9565, 59, 1, 9562, 59, 1, 9564, 59, 1, 9561, 4, 7, 59, 72, 76, 82, 104, 108, 114, 7635, 7637, 7640, 7643, 7646, 7649, 7652, 1, 9553, 59, 1, 9580, 59, 1, 9571, 59, 1, 9568, 59, 1, 9579, 59, 1, 9570, 59, 1, 9567, 111, 120, 59, 1, 10697, 4, 4, 76, 82, 108, 114, 7670, 7673, 7676, 7679, 59, 1, 9557, 59, 1, 9554, 59, 1, 9488, 59, 1, 9484, 4, 5, 59, 68, 85, 100, 117, 7694, 7696, 7699, 7702, 7705, 1, 9472, 59, 1, 9573, 59, 1, 9576, 59, 1, 9516, 59, 1, 9524, 105, 110, 117, 115, 59, 1, 8863, 108, 117, 115, 59, 1, 8862, 105, 109, 101, 115, 59, 1, 8864, 4, 4, 76, 82, 108, 114, 7738, 7741, 7744, 7747, 59, 1, 9563, 59, 1, 9560, 59, 1, 9496, 59, 1, 9492, 4, 7, 59, 72, 76, 82, 104, 108, 114, 7766, 7768, 7771, 7774, 7777, 7780, 7783, 1, 9474, 59, 1, 9578, 59, 1, 9569, 59, 1, 9566, 59, 1, 9532, 59, 1, 9508, 59, 1, 9500, 114, 105, 109, 101, 59, 1, 8245, 4, 2, 101, 118, 7799, 7804, 118, 101, 59, 1, 728, 98, 97, 114, 5, 166, 1, 59, 7812, 1, 166, 4, 4, 99, 101, 105, 111, 7824, 7829, 7834, 7846, 114, 59, 3, 55349, 56503, 109, 105, 59, 1, 8271, 109, 4, 2, 59, 101, 7841, 7843, 1, 8765, 59, 1, 8909, 108, 4, 3, 59, 98, 104, 7855, 7857, 7860, 1, 92, 59, 1, 10693, 115, 117, 98, 59, 1, 10184, 4, 2, 108, 109, 7872, 7885, 108, 4, 2, 59, 101, 7879, 7881, 1, 8226, 116, 59, 1, 8226, 112, 4, 3, 59, 69, 101, 7894, 7896, 7899, 1, 8782, 59, 1, 10926, 4, 2, 59, 113, 7905, 7907, 1, 8783, 59, 1, 8783, 4, 15, 97, 99, 100, 101, 102, 104, 105, 108, 111, 114, 115, 116, 117, 119, 121, 7942, 8021, 8075, 8080, 8121, 8126, 8157, 8279, 8295, 8430, 8446, 8485, 8491, 8707, 8726, 4, 3, 99, 112, 114, 7950, 7956, 8007, 117, 116, 101, 59, 1, 263, 4, 6, 59, 97, 98, 99, 100, 115, 7970, 7972, 7977, 7984, 7998, 8003, 1, 8745, 110, 100, 59, 1, 10820, 114, 99, 117, 112, 59, 1, 10825, 4, 2, 97, 117, 7990, 7994, 112, 59, 1, 10827, 112, 59, 1, 10823, 111, 116, 59, 1, 10816, 59, 3, 8745, 65024, 4, 2, 101, 111, 8013, 8017, 116, 59, 1, 8257, 110, 59, 1, 711, 4, 4, 97, 101, 105, 117, 8031, 8046, 8056, 8061, 4, 2, 112, 114, 8037, 8041, 115, 59, 1, 10829, 111, 110, 59, 1, 269, 100, 105, 108, 5, 231, 1, 59, 8054, 1, 231, 114, 99, 59, 1, 265, 112, 115, 4, 2, 59, 115, 8069, 8071, 1, 10828, 109, 59, 1, 10832, 111, 116, 59, 1, 267, 4, 3, 100, 109, 110, 8088, 8097, 8104, 105, 108, 5, 184, 1, 59, 8095, 1, 184, 112, 116, 121, 118, 59, 1, 10674, 116, 5, 162, 2, 59, 101, 8112, 8114, 1, 162, 114, 100, 111, 116, 59, 1, 183, 114, 59, 3, 55349, 56608, 4, 3, 99, 101, 105, 8134, 8138, 8154, 121, 59, 1, 1095, 99, 107, 4, 2, 59, 109, 8146, 8148, 1, 10003, 97, 114, 107, 59, 1, 10003, 59, 1, 967, 114, 4, 7, 59, 69, 99, 101, 102, 109, 115, 8174, 8176, 8179, 8258, 8261, 8268, 8273, 1, 9675, 59, 1, 10691, 4, 3, 59, 101, 108, 8187, 8189, 8193, 1, 710, 113, 59, 1, 8791, 101, 4, 2, 97, 100, 8200, 8223, 114, 114, 111, 119, 4, 2, 108, 114, 8210, 8216, 101, 102, 116, 59, 1, 8634, 105, 103, 104, 116, 59, 1, 8635, 4, 5, 82, 83, 97, 99, 100, 8235, 8238, 8241, 8246, 8252, 59, 1, 174, 59, 1, 9416, 115, 116, 59, 1, 8859, 105, 114, 99, 59, 1, 8858, 97, 115, 104, 59, 1, 8861, 59, 1, 8791, 110, 105, 110, 116, 59, 1, 10768, 105, 100, 59, 1, 10991, 99, 105, 114, 59, 1, 10690, 117, 98, 115, 4, 2, 59, 117, 8288, 8290, 1, 9827, 105, 116, 59, 1, 9827, 4, 4, 108, 109, 110, 112, 8305, 8326, 8376, 8400, 111, 110, 4, 2, 59, 101, 8313, 8315, 1, 58, 4, 2, 59, 113, 8321, 8323, 1, 8788, 59, 1, 8788, 4, 2, 109, 112, 8332, 8344, 97, 4, 2, 59, 116, 8339, 8341, 1, 44, 59, 1, 64, 4, 3, 59, 102, 108, 8352, 8354, 8358, 1, 8705, 110, 59, 1, 8728, 101, 4, 2, 109, 120, 8365, 8371, 101, 110, 116, 59, 1, 8705, 101, 115, 59, 1, 8450, 4, 2, 103, 105, 8382, 8395, 4, 2, 59, 100, 8388, 8390, 1, 8773, 111, 116, 59, 1, 10861, 110, 116, 59, 1, 8750, 4, 3, 102, 114, 121, 8408, 8412, 8417, 59, 3, 55349, 56660, 111, 100, 59, 1, 8720, 5, 169, 2, 59, 115, 8424, 8426, 1, 169, 114, 59, 1, 8471, 4, 2, 97, 111, 8436, 8441, 114, 114, 59, 1, 8629, 115, 115, 59, 1, 10007, 4, 2, 99, 117, 8452, 8457, 114, 59, 3, 55349, 56504, 4, 2, 98, 112, 8463, 8474, 4, 2, 59, 101, 8469, 8471, 1, 10959, 59, 1, 10961, 4, 2, 59, 101, 8480, 8482, 1, 10960, 59, 1, 10962, 100, 111, 116, 59, 1, 8943, 4, 7, 100, 101, 108, 112, 114, 118, 119, 8507, 8522, 8536, 8550, 8600, 8697, 8702, 97, 114, 114, 4, 2, 108, 114, 8516, 8519, 59, 1, 10552, 59, 1, 10549, 4, 2, 112, 115, 8528, 8532, 114, 59, 1, 8926, 99, 59, 1, 8927, 97, 114, 114, 4, 2, 59, 112, 8545, 8547, 1, 8630, 59, 1, 10557, 4, 6, 59, 98, 99, 100, 111, 115, 8564, 8566, 8573, 8587, 8592, 8596, 1, 8746, 114, 99, 97, 112, 59, 1, 10824, 4, 2, 97, 117, 8579, 8583, 112, 59, 1, 10822, 112, 59, 1, 10826, 111, 116, 59, 1, 8845, 114, 59, 1, 10821, 59, 3, 8746, 65024, 4, 4, 97, 108, 114, 118, 8610, 8623, 8663, 8672, 114, 114, 4, 2, 59, 109, 8618, 8620, 1, 8631, 59, 1, 10556, 121, 4, 3, 101, 118, 119, 8632, 8651, 8656, 113, 4, 2, 112, 115, 8639, 8645, 114, 101, 99, 59, 1, 8926, 117, 99, 99, 59, 1, 8927, 101, 101, 59, 1, 8910, 101, 100, 103, 101, 59, 1, 8911, 101, 110, 5, 164, 1, 59, 8670, 1, 164, 101, 97, 114, 114, 111, 119, 4, 2, 108, 114, 8684, 8690, 101, 102, 116, 59, 1, 8630, 105, 103, 104, 116, 59, 1, 8631, 101, 101, 59, 1, 8910, 101, 100, 59, 1, 8911, 4, 2, 99, 105, 8713, 8721, 111, 110, 105, 110, 116, 59, 1, 8754, 110, 116, 59, 1, 8753, 108, 99, 116, 121, 59, 1, 9005, 4, 19, 65, 72, 97, 98, 99, 100, 101, 102, 104, 105, 106, 108, 111, 114, 115, 116, 117, 119, 122, 8773, 8778, 8783, 8821, 8839, 8854, 8887, 8914, 8930, 8944, 9036, 9041, 9058, 9197, 9227, 9258, 9281, 9297, 9305, 114, 114, 59, 1, 8659, 97, 114, 59, 1, 10597, 4, 4, 103, 108, 114, 115, 8793, 8799, 8805, 8809, 103, 101, 114, 59, 1, 8224, 101, 116, 104, 59, 1, 8504, 114, 59, 1, 8595, 104, 4, 2, 59, 118, 8816, 8818, 1, 8208, 59, 1, 8867, 4, 2, 107, 108, 8827, 8834, 97, 114, 111, 119, 59, 1, 10511, 97, 99, 59, 1, 733, 4, 2, 97, 121, 8845, 8851, 114, 111, 110, 59, 1, 271, 59, 1, 1076, 4, 3, 59, 97, 111, 8862, 8864, 8880, 1, 8518, 4, 2, 103, 114, 8870, 8876, 103, 101, 114, 59, 1, 8225, 114, 59, 1, 8650, 116, 115, 101, 113, 59, 1, 10871, 4, 3, 103, 108, 109, 8895, 8902, 8907, 5, 176, 1, 59, 8900, 1, 176, 116, 97, 59, 1, 948, 112, 116, 121, 118, 59, 1, 10673, 4, 2, 105, 114, 8920, 8926, 115, 104, 116, 59, 1, 10623, 59, 3, 55349, 56609, 97, 114, 4, 2, 108, 114, 8938, 8941, 59, 1, 8643, 59, 1, 8642, 4, 5, 97, 101, 103, 115, 118, 8956, 8986, 8989, 8996, 9001, 109, 4, 3, 59, 111, 115, 8965, 8967, 8983, 1, 8900, 110, 100, 4, 2, 59, 115, 8975, 8977, 1, 8900, 117, 105, 116, 59, 1, 9830, 59, 1, 9830, 59, 1, 168, 97, 109, 109, 97, 59, 1, 989, 105, 110, 59, 1, 8946, 4, 3, 59, 105, 111, 9009, 9011, 9031, 1, 247, 100, 101, 5, 247, 2, 59, 111, 9020, 9022, 1, 247, 110, 116, 105, 109, 101, 115, 59, 1, 8903, 110, 120, 59, 1, 8903, 99, 121, 59, 1, 1106, 99, 4, 2, 111, 114, 9048, 9053, 114, 110, 59, 1, 8990, 111, 112, 59, 1, 8973, 4, 5, 108, 112, 116, 117, 119, 9070, 9076, 9081, 9130, 9144, 108, 97, 114, 59, 1, 36, 102, 59, 3, 55349, 56661, 4, 5, 59, 101, 109, 112, 115, 9093, 9095, 9109, 9116, 9122, 1, 729, 113, 4, 2, 59, 100, 9102, 9104, 1, 8784, 111, 116, 59, 1, 8785, 105, 110, 117, 115, 59, 1, 8760, 108, 117, 115, 59, 1, 8724, 113, 117, 97, 114, 101, 59, 1, 8865, 98, 108, 101, 98, 97, 114, 119, 101, 100, 103, 101, 59, 1, 8966, 110, 4, 3, 97, 100, 104, 9153, 9160, 9172, 114, 114, 111, 119, 59, 1, 8595, 111, 119, 110, 97, 114, 114, 111, 119, 115, 59, 1, 8650, 97, 114, 112, 111, 111, 110, 4, 2, 108, 114, 9184, 9190, 101, 102, 116, 59, 1, 8643, 105, 103, 104, 116, 59, 1, 8642, 4, 2, 98, 99, 9203, 9211, 107, 97, 114, 111, 119, 59, 1, 10512, 4, 2, 111, 114, 9217, 9222, 114, 110, 59, 1, 8991, 111, 112, 59, 1, 8972, 4, 3, 99, 111, 116, 9235, 9248, 9252, 4, 2, 114, 121, 9241, 9245, 59, 3, 55349, 56505, 59, 1, 1109, 108, 59, 1, 10742, 114, 111, 107, 59, 1, 273, 4, 2, 100, 114, 9264, 9269, 111, 116, 59, 1, 8945, 105, 4, 2, 59, 102, 9276, 9278, 1, 9663, 59, 1, 9662, 4, 2, 97, 104, 9287, 9292, 114, 114, 59, 1, 8693, 97, 114, 59, 1, 10607, 97, 110, 103, 108, 101, 59, 1, 10662, 4, 2, 99, 105, 9311, 9315, 121, 59, 1, 1119, 103, 114, 97, 114, 114, 59, 1, 10239, 4, 18, 68, 97, 99, 100, 101, 102, 103, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 9361, 9376, 9398, 9439, 9444, 9447, 9462, 9495, 9531, 9585, 9598, 9614, 9659, 9755, 9771, 9792, 9808, 9826, 4, 2, 68, 111, 9367, 9372, 111, 116, 59, 1, 10871, 116, 59, 1, 8785, 4, 2, 99, 115, 9382, 9392, 117, 116, 101, 5, 233, 1, 59, 9390, 1, 233, 116, 101, 114, 59, 1, 10862, 4, 4, 97, 105, 111, 121, 9408, 9414, 9430, 9436, 114, 111, 110, 59, 1, 283, 114, 4, 2, 59, 99, 9421, 9423, 1, 8790, 5, 234, 1, 59, 9428, 1, 234, 108, 111, 110, 59, 1, 8789, 59, 1, 1101, 111, 116, 59, 1, 279, 59, 1, 8519, 4, 2, 68, 114, 9453, 9458, 111, 116, 59, 1, 8786, 59, 3, 55349, 56610, 4, 3, 59, 114, 115, 9470, 9472, 9482, 1, 10906, 97, 118, 101, 5, 232, 1, 59, 9480, 1, 232, 4, 2, 59, 100, 9488, 9490, 1, 10902, 111, 116, 59, 1, 10904, 4, 4, 59, 105, 108, 115, 9505, 9507, 9515, 9518, 1, 10905, 110, 116, 101, 114, 115, 59, 1, 9191, 59, 1, 8467, 4, 2, 59, 100, 9524, 9526, 1, 10901, 111, 116, 59, 1, 10903, 4, 3, 97, 112, 115, 9539, 9544, 9564, 99, 114, 59, 1, 275, 116, 121, 4, 3, 59, 115, 118, 9554, 9556, 9561, 1, 8709, 101, 116, 59, 1, 8709, 59, 1, 8709, 112, 4, 2, 49, 59, 9571, 9583, 4, 2, 51, 52, 9577, 9580, 59, 1, 8196, 59, 1, 8197, 1, 8195, 4, 2, 103, 115, 9591, 9594, 59, 1, 331, 112, 59, 1, 8194, 4, 2, 103, 112, 9604, 9609, 111, 110, 59, 1, 281, 102, 59, 3, 55349, 56662, 4, 3, 97, 108, 115, 9622, 9635, 9640, 114, 4, 2, 59, 115, 9629, 9631, 1, 8917, 108, 59, 1, 10723, 117, 115, 59, 1, 10865, 105, 4, 3, 59, 108, 118, 9649, 9651, 9656, 1, 949, 111, 110, 59, 1, 949, 59, 1, 1013, 4, 4, 99, 115, 117, 118, 9669, 9686, 9716, 9747, 4, 2, 105, 111, 9675, 9680, 114, 99, 59, 1, 8790, 108, 111, 110, 59, 1, 8789, 4, 2, 105, 108, 9692, 9696, 109, 59, 1, 8770, 97, 110, 116, 4, 2, 103, 108, 9705, 9710, 116, 114, 59, 1, 10902, 101, 115, 115, 59, 1, 10901, 4, 3, 97, 101, 105, 9724, 9729, 9734, 108, 115, 59, 1, 61, 115, 116, 59, 1, 8799, 118, 4, 2, 59, 68, 9741, 9743, 1, 8801, 68, 59, 1, 10872, 112, 97, 114, 115, 108, 59, 1, 10725, 4, 2, 68, 97, 9761, 9766, 111, 116, 59, 1, 8787, 114, 114, 59, 1, 10609, 4, 3, 99, 100, 105, 9779, 9783, 9788, 114, 59, 1, 8495, 111, 116, 59, 1, 8784, 109, 59, 1, 8770, 4, 2, 97, 104, 9798, 9801, 59, 1, 951, 5, 240, 1, 59, 9806, 1, 240, 4, 2, 109, 114, 9814, 9822, 108, 5, 235, 1, 59, 9820, 1, 235, 111, 59, 1, 8364, 4, 3, 99, 105, 112, 9834, 9838, 9843, 108, 59, 1, 33, 115, 116, 59, 1, 8707, 4, 2, 101, 111, 9849, 9859, 99, 116, 97, 116, 105, 111, 110, 59, 1, 8496, 110, 101, 110, 116, 105, 97, 108, 101, 59, 1, 8519, 4, 12, 97, 99, 101, 102, 105, 106, 108, 110, 111, 112, 114, 115, 9896, 9910, 9914, 9921, 9954, 9960, 9967, 9989, 9994, 10027, 10036, 10164, 108, 108, 105, 110, 103, 100, 111, 116, 115, 101, 113, 59, 1, 8786, 121, 59, 1, 1092, 109, 97, 108, 101, 59, 1, 9792, 4, 3, 105, 108, 114, 9929, 9935, 9950, 108, 105, 103, 59, 1, 64259, 4, 2, 105, 108, 9941, 9945, 103, 59, 1, 64256, 105, 103, 59, 1, 64260, 59, 3, 55349, 56611, 108, 105, 103, 59, 1, 64257, 108, 105, 103, 59, 3, 102, 106, 4, 3, 97, 108, 116, 9975, 9979, 9984, 116, 59, 1, 9837, 105, 103, 59, 1, 64258, 110, 115, 59, 1, 9649, 111, 102, 59, 1, 402, 4, 2, 112, 114, 1e4, 10005, 102, 59, 3, 55349, 56663, 4, 2, 97, 107, 10011, 10016, 108, 108, 59, 1, 8704, 4, 2, 59, 118, 10022, 10024, 1, 8916, 59, 1, 10969, 97, 114, 116, 105, 110, 116, 59, 1, 10765, 4, 2, 97, 111, 10042, 10159, 4, 2, 99, 115, 10048, 10155, 4, 6, 49, 50, 51, 52, 53, 55, 10062, 10102, 10114, 10135, 10139, 10151, 4, 6, 50, 51, 52, 53, 54, 56, 10076, 10083, 10086, 10093, 10096, 10099, 5, 189, 1, 59, 10081, 1, 189, 59, 1, 8531, 5, 188, 1, 59, 10091, 1, 188, 59, 1, 8533, 59, 1, 8537, 59, 1, 8539, 4, 2, 51, 53, 10108, 10111, 59, 1, 8532, 59, 1, 8534, 4, 3, 52, 53, 56, 10122, 10129, 10132, 5, 190, 1, 59, 10127, 1, 190, 59, 1, 8535, 59, 1, 8540, 53, 59, 1, 8536, 4, 2, 54, 56, 10145, 10148, 59, 1, 8538, 59, 1, 8541, 56, 59, 1, 8542, 108, 59, 1, 8260, 119, 110, 59, 1, 8994, 99, 114, 59, 3, 55349, 56507, 4, 17, 69, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 110, 111, 114, 115, 116, 118, 10206, 10217, 10247, 10254, 10268, 10273, 10358, 10363, 10374, 10380, 10385, 10406, 10458, 10464, 10470, 10497, 10610, 4, 2, 59, 108, 10212, 10214, 1, 8807, 59, 1, 10892, 4, 3, 99, 109, 112, 10225, 10231, 10244, 117, 116, 101, 59, 1, 501, 109, 97, 4, 2, 59, 100, 10239, 10241, 1, 947, 59, 1, 989, 59, 1, 10886, 114, 101, 118, 101, 59, 1, 287, 4, 2, 105, 121, 10260, 10265, 114, 99, 59, 1, 285, 59, 1, 1075, 111, 116, 59, 1, 289, 4, 4, 59, 108, 113, 115, 10283, 10285, 10288, 10308, 1, 8805, 59, 1, 8923, 4, 3, 59, 113, 115, 10296, 10298, 10301, 1, 8805, 59, 1, 8807, 108, 97, 110, 116, 59, 1, 10878, 4, 4, 59, 99, 100, 108, 10318, 10320, 10324, 10345, 1, 10878, 99, 59, 1, 10921, 111, 116, 4, 2, 59, 111, 10332, 10334, 1, 10880, 4, 2, 59, 108, 10340, 10342, 1, 10882, 59, 1, 10884, 4, 2, 59, 101, 10351, 10354, 3, 8923, 65024, 115, 59, 1, 10900, 114, 59, 3, 55349, 56612, 4, 2, 59, 103, 10369, 10371, 1, 8811, 59, 1, 8921, 109, 101, 108, 59, 1, 8503, 99, 121, 59, 1, 1107, 4, 4, 59, 69, 97, 106, 10395, 10397, 10400, 10403, 1, 8823, 59, 1, 10898, 59, 1, 10917, 59, 1, 10916, 4, 4, 69, 97, 101, 115, 10416, 10419, 10434, 10453, 59, 1, 8809, 112, 4, 2, 59, 112, 10426, 10428, 1, 10890, 114, 111, 120, 59, 1, 10890, 4, 2, 59, 113, 10440, 10442, 1, 10888, 4, 2, 59, 113, 10448, 10450, 1, 10888, 59, 1, 8809, 105, 109, 59, 1, 8935, 112, 102, 59, 3, 55349, 56664, 97, 118, 101, 59, 1, 96, 4, 2, 99, 105, 10476, 10480, 114, 59, 1, 8458, 109, 4, 3, 59, 101, 108, 10489, 10491, 10494, 1, 8819, 59, 1, 10894, 59, 1, 10896, 5, 62, 6, 59, 99, 100, 108, 113, 114, 10512, 10514, 10527, 10532, 10538, 10545, 1, 62, 4, 2, 99, 105, 10520, 10523, 59, 1, 10919, 114, 59, 1, 10874, 111, 116, 59, 1, 8919, 80, 97, 114, 59, 1, 10645, 117, 101, 115, 116, 59, 1, 10876, 4, 5, 97, 100, 101, 108, 115, 10557, 10574, 10579, 10599, 10605, 4, 2, 112, 114, 10563, 10570, 112, 114, 111, 120, 59, 1, 10886, 114, 59, 1, 10616, 111, 116, 59, 1, 8919, 113, 4, 2, 108, 113, 10586, 10592, 101, 115, 115, 59, 1, 8923, 108, 101, 115, 115, 59, 1, 10892, 101, 115, 115, 59, 1, 8823, 105, 109, 59, 1, 8819, 4, 2, 101, 110, 10616, 10626, 114, 116, 110, 101, 113, 113, 59, 3, 8809, 65024, 69, 59, 3, 8809, 65024, 4, 10, 65, 97, 98, 99, 101, 102, 107, 111, 115, 121, 10653, 10658, 10713, 10718, 10724, 10760, 10765, 10786, 10850, 10875, 114, 114, 59, 1, 8660, 4, 4, 105, 108, 109, 114, 10668, 10674, 10678, 10684, 114, 115, 112, 59, 1, 8202, 102, 59, 1, 189, 105, 108, 116, 59, 1, 8459, 4, 2, 100, 114, 10690, 10695, 99, 121, 59, 1, 1098, 4, 3, 59, 99, 119, 10703, 10705, 10710, 1, 8596, 105, 114, 59, 1, 10568, 59, 1, 8621, 97, 114, 59, 1, 8463, 105, 114, 99, 59, 1, 293, 4, 3, 97, 108, 114, 10732, 10748, 10754, 114, 116, 115, 4, 2, 59, 117, 10741, 10743, 1, 9829, 105, 116, 59, 1, 9829, 108, 105, 112, 59, 1, 8230, 99, 111, 110, 59, 1, 8889, 114, 59, 3, 55349, 56613, 115, 4, 2, 101, 119, 10772, 10779, 97, 114, 111, 119, 59, 1, 10533, 97, 114, 111, 119, 59, 1, 10534, 4, 5, 97, 109, 111, 112, 114, 10798, 10803, 10809, 10839, 10844, 114, 114, 59, 1, 8703, 116, 104, 116, 59, 1, 8763, 107, 4, 2, 108, 114, 10816, 10827, 101, 102, 116, 97, 114, 114, 111, 119, 59, 1, 8617, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8618, 102, 59, 3, 55349, 56665, 98, 97, 114, 59, 1, 8213, 4, 3, 99, 108, 116, 10858, 10863, 10869, 114, 59, 3, 55349, 56509, 97, 115, 104, 59, 1, 8463, 114, 111, 107, 59, 1, 295, 4, 2, 98, 112, 10881, 10887, 117, 108, 108, 59, 1, 8259, 104, 101, 110, 59, 1, 8208, 4, 15, 97, 99, 101, 102, 103, 105, 106, 109, 110, 111, 112, 113, 115, 116, 117, 10925, 10936, 10958, 10977, 10990, 11001, 11039, 11045, 11101, 11192, 11220, 11226, 11237, 11285, 11299, 99, 117, 116, 101, 5, 237, 1, 59, 10934, 1, 237, 4, 3, 59, 105, 121, 10944, 10946, 10955, 1, 8291, 114, 99, 5, 238, 1, 59, 10953, 1, 238, 59, 1, 1080, 4, 2, 99, 120, 10964, 10968, 121, 59, 1, 1077, 99, 108, 5, 161, 1, 59, 10975, 1, 161, 4, 2, 102, 114, 10983, 10986, 59, 1, 8660, 59, 3, 55349, 56614, 114, 97, 118, 101, 5, 236, 1, 59, 10999, 1, 236, 4, 4, 59, 105, 110, 111, 11011, 11013, 11028, 11034, 1, 8520, 4, 2, 105, 110, 11019, 11024, 110, 116, 59, 1, 10764, 116, 59, 1, 8749, 102, 105, 110, 59, 1, 10716, 116, 97, 59, 1, 8489, 108, 105, 103, 59, 1, 307, 4, 3, 97, 111, 112, 11053, 11092, 11096, 4, 3, 99, 103, 116, 11061, 11065, 11088, 114, 59, 1, 299, 4, 3, 101, 108, 112, 11073, 11076, 11082, 59, 1, 8465, 105, 110, 101, 59, 1, 8464, 97, 114, 116, 59, 1, 8465, 104, 59, 1, 305, 102, 59, 1, 8887, 101, 100, 59, 1, 437, 4, 5, 59, 99, 102, 111, 116, 11113, 11115, 11121, 11136, 11142, 1, 8712, 97, 114, 101, 59, 1, 8453, 105, 110, 4, 2, 59, 116, 11129, 11131, 1, 8734, 105, 101, 59, 1, 10717, 100, 111, 116, 59, 1, 305, 4, 5, 59, 99, 101, 108, 112, 11154, 11156, 11161, 11179, 11186, 1, 8747, 97, 108, 59, 1, 8890, 4, 2, 103, 114, 11167, 11173, 101, 114, 115, 59, 1, 8484, 99, 97, 108, 59, 1, 8890, 97, 114, 104, 107, 59, 1, 10775, 114, 111, 100, 59, 1, 10812, 4, 4, 99, 103, 112, 116, 11202, 11206, 11211, 11216, 121, 59, 1, 1105, 111, 110, 59, 1, 303, 102, 59, 3, 55349, 56666, 97, 59, 1, 953, 114, 111, 100, 59, 1, 10812, 117, 101, 115, 116, 5, 191, 1, 59, 11235, 1, 191, 4, 2, 99, 105, 11243, 11248, 114, 59, 3, 55349, 56510, 110, 4, 5, 59, 69, 100, 115, 118, 11261, 11263, 11266, 11271, 11282, 1, 8712, 59, 1, 8953, 111, 116, 59, 1, 8949, 4, 2, 59, 118, 11277, 11279, 1, 8948, 59, 1, 8947, 59, 1, 8712, 4, 2, 59, 105, 11291, 11293, 1, 8290, 108, 100, 101, 59, 1, 297, 4, 2, 107, 109, 11305, 11310, 99, 121, 59, 1, 1110, 108, 5, 239, 1, 59, 11316, 1, 239, 4, 6, 99, 102, 109, 111, 115, 117, 11332, 11346, 11351, 11357, 11363, 11380, 4, 2, 105, 121, 11338, 11343, 114, 99, 59, 1, 309, 59, 1, 1081, 114, 59, 3, 55349, 56615, 97, 116, 104, 59, 1, 567, 112, 102, 59, 3, 55349, 56667, 4, 2, 99, 101, 11369, 11374, 114, 59, 3, 55349, 56511, 114, 99, 121, 59, 1, 1112, 107, 99, 121, 59, 1, 1108, 4, 8, 97, 99, 102, 103, 104, 106, 111, 115, 11404, 11418, 11433, 11438, 11445, 11450, 11455, 11461, 112, 112, 97, 4, 2, 59, 118, 11413, 11415, 1, 954, 59, 1, 1008, 4, 2, 101, 121, 11424, 11430, 100, 105, 108, 59, 1, 311, 59, 1, 1082, 114, 59, 3, 55349, 56616, 114, 101, 101, 110, 59, 1, 312, 99, 121, 59, 1, 1093, 99, 121, 59, 1, 1116, 112, 102, 59, 3, 55349, 56668, 99, 114, 59, 3, 55349, 56512, 4, 23, 65, 66, 69, 72, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 11515, 11538, 11544, 11555, 11560, 11721, 11780, 11818, 11868, 12136, 12160, 12171, 12203, 12208, 12246, 12275, 12327, 12509, 12523, 12569, 12641, 12732, 12752, 4, 3, 97, 114, 116, 11523, 11528, 11532, 114, 114, 59, 1, 8666, 114, 59, 1, 8656, 97, 105, 108, 59, 1, 10523, 97, 114, 114, 59, 1, 10510, 4, 2, 59, 103, 11550, 11552, 1, 8806, 59, 1, 10891, 97, 114, 59, 1, 10594, 4, 9, 99, 101, 103, 109, 110, 112, 113, 114, 116, 11580, 11586, 11594, 11600, 11606, 11624, 11627, 11636, 11694, 117, 116, 101, 59, 1, 314, 109, 112, 116, 121, 118, 59, 1, 10676, 114, 97, 110, 59, 1, 8466, 98, 100, 97, 59, 1, 955, 103, 4, 3, 59, 100, 108, 11615, 11617, 11620, 1, 10216, 59, 1, 10641, 101, 59, 1, 10216, 59, 1, 10885, 117, 111, 5, 171, 1, 59, 11634, 1, 171, 114, 4, 8, 59, 98, 102, 104, 108, 112, 115, 116, 11655, 11657, 11669, 11673, 11677, 11681, 11685, 11690, 1, 8592, 4, 2, 59, 102, 11663, 11665, 1, 8676, 115, 59, 1, 10527, 115, 59, 1, 10525, 107, 59, 1, 8617, 112, 59, 1, 8619, 108, 59, 1, 10553, 105, 109, 59, 1, 10611, 108, 59, 1, 8610, 4, 3, 59, 97, 101, 11702, 11704, 11709, 1, 10923, 105, 108, 59, 1, 10521, 4, 2, 59, 115, 11715, 11717, 1, 10925, 59, 3, 10925, 65024, 4, 3, 97, 98, 114, 11729, 11734, 11739, 114, 114, 59, 1, 10508, 114, 107, 59, 1, 10098, 4, 2, 97, 107, 11745, 11758, 99, 4, 2, 101, 107, 11752, 11755, 59, 1, 123, 59, 1, 91, 4, 2, 101, 115, 11764, 11767, 59, 1, 10635, 108, 4, 2, 100, 117, 11774, 11777, 59, 1, 10639, 59, 1, 10637, 4, 4, 97, 101, 117, 121, 11790, 11796, 11811, 11815, 114, 111, 110, 59, 1, 318, 4, 2, 100, 105, 11802, 11807, 105, 108, 59, 1, 316, 108, 59, 1, 8968, 98, 59, 1, 123, 59, 1, 1083, 4, 4, 99, 113, 114, 115, 11828, 11832, 11845, 11864, 97, 59, 1, 10550, 117, 111, 4, 2, 59, 114, 11840, 11842, 1, 8220, 59, 1, 8222, 4, 2, 100, 117, 11851, 11857, 104, 97, 114, 59, 1, 10599, 115, 104, 97, 114, 59, 1, 10571, 104, 59, 1, 8626, 4, 5, 59, 102, 103, 113, 115, 11880, 11882, 12008, 12011, 12031, 1, 8804, 116, 4, 5, 97, 104, 108, 114, 116, 11895, 11913, 11935, 11947, 11996, 114, 114, 111, 119, 4, 2, 59, 116, 11905, 11907, 1, 8592, 97, 105, 108, 59, 1, 8610, 97, 114, 112, 111, 111, 110, 4, 2, 100, 117, 11925, 11931, 111, 119, 110, 59, 1, 8637, 112, 59, 1, 8636, 101, 102, 116, 97, 114, 114, 111, 119, 115, 59, 1, 8647, 105, 103, 104, 116, 4, 3, 97, 104, 115, 11959, 11974, 11984, 114, 114, 111, 119, 4, 2, 59, 115, 11969, 11971, 1, 8596, 59, 1, 8646, 97, 114, 112, 111, 111, 110, 115, 59, 1, 8651, 113, 117, 105, 103, 97, 114, 114, 111, 119, 59, 1, 8621, 104, 114, 101, 101, 116, 105, 109, 101, 115, 59, 1, 8907, 59, 1, 8922, 4, 3, 59, 113, 115, 12019, 12021, 12024, 1, 8804, 59, 1, 8806, 108, 97, 110, 116, 59, 1, 10877, 4, 5, 59, 99, 100, 103, 115, 12043, 12045, 12049, 12070, 12083, 1, 10877, 99, 59, 1, 10920, 111, 116, 4, 2, 59, 111, 12057, 12059, 1, 10879, 4, 2, 59, 114, 12065, 12067, 1, 10881, 59, 1, 10883, 4, 2, 59, 101, 12076, 12079, 3, 8922, 65024, 115, 59, 1, 10899, 4, 5, 97, 100, 101, 103, 115, 12095, 12103, 12108, 12126, 12131, 112, 112, 114, 111, 120, 59, 1, 10885, 111, 116, 59, 1, 8918, 113, 4, 2, 103, 113, 12115, 12120, 116, 114, 59, 1, 8922, 103, 116, 114, 59, 1, 10891, 116, 114, 59, 1, 8822, 105, 109, 59, 1, 8818, 4, 3, 105, 108, 114, 12144, 12150, 12156, 115, 104, 116, 59, 1, 10620, 111, 111, 114, 59, 1, 8970, 59, 3, 55349, 56617, 4, 2, 59, 69, 12166, 12168, 1, 8822, 59, 1, 10897, 4, 2, 97, 98, 12177, 12198, 114, 4, 2, 100, 117, 12184, 12187, 59, 1, 8637, 4, 2, 59, 108, 12193, 12195, 1, 8636, 59, 1, 10602, 108, 107, 59, 1, 9604, 99, 121, 59, 1, 1113, 4, 5, 59, 97, 99, 104, 116, 12220, 12222, 12227, 12235, 12241, 1, 8810, 114, 114, 59, 1, 8647, 111, 114, 110, 101, 114, 59, 1, 8990, 97, 114, 100, 59, 1, 10603, 114, 105, 59, 1, 9722, 4, 2, 105, 111, 12252, 12258, 100, 111, 116, 59, 1, 320, 117, 115, 116, 4, 2, 59, 97, 12267, 12269, 1, 9136, 99, 104, 101, 59, 1, 9136, 4, 4, 69, 97, 101, 115, 12285, 12288, 12303, 12322, 59, 1, 8808, 112, 4, 2, 59, 112, 12295, 12297, 1, 10889, 114, 111, 120, 59, 1, 10889, 4, 2, 59, 113, 12309, 12311, 1, 10887, 4, 2, 59, 113, 12317, 12319, 1, 10887, 59, 1, 8808, 105, 109, 59, 1, 8934, 4, 8, 97, 98, 110, 111, 112, 116, 119, 122, 12345, 12359, 12364, 12421, 12446, 12467, 12474, 12490, 4, 2, 110, 114, 12351, 12355, 103, 59, 1, 10220, 114, 59, 1, 8701, 114, 107, 59, 1, 10214, 103, 4, 3, 108, 109, 114, 12373, 12401, 12409, 101, 102, 116, 4, 2, 97, 114, 12382, 12389, 114, 114, 111, 119, 59, 1, 10229, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 10231, 97, 112, 115, 116, 111, 59, 1, 10236, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 10230, 112, 97, 114, 114, 111, 119, 4, 2, 108, 114, 12433, 12439, 101, 102, 116, 59, 1, 8619, 105, 103, 104, 116, 59, 1, 8620, 4, 3, 97, 102, 108, 12454, 12458, 12462, 114, 59, 1, 10629, 59, 3, 55349, 56669, 117, 115, 59, 1, 10797, 105, 109, 101, 115, 59, 1, 10804, 4, 2, 97, 98, 12480, 12485, 115, 116, 59, 1, 8727, 97, 114, 59, 1, 95, 4, 3, 59, 101, 102, 12498, 12500, 12506, 1, 9674, 110, 103, 101, 59, 1, 9674, 59, 1, 10731, 97, 114, 4, 2, 59, 108, 12517, 12519, 1, 40, 116, 59, 1, 10643, 4, 5, 97, 99, 104, 109, 116, 12535, 12540, 12548, 12561, 12564, 114, 114, 59, 1, 8646, 111, 114, 110, 101, 114, 59, 1, 8991, 97, 114, 4, 2, 59, 100, 12556, 12558, 1, 8651, 59, 1, 10605, 59, 1, 8206, 114, 105, 59, 1, 8895, 4, 6, 97, 99, 104, 105, 113, 116, 12583, 12589, 12594, 12597, 12614, 12635, 113, 117, 111, 59, 1, 8249, 114, 59, 3, 55349, 56513, 59, 1, 8624, 109, 4, 3, 59, 101, 103, 12606, 12608, 12611, 1, 8818, 59, 1, 10893, 59, 1, 10895, 4, 2, 98, 117, 12620, 12623, 59, 1, 91, 111, 4, 2, 59, 114, 12630, 12632, 1, 8216, 59, 1, 8218, 114, 111, 107, 59, 1, 322, 5, 60, 8, 59, 99, 100, 104, 105, 108, 113, 114, 12660, 12662, 12675, 12680, 12686, 12692, 12698, 12705, 1, 60, 4, 2, 99, 105, 12668, 12671, 59, 1, 10918, 114, 59, 1, 10873, 111, 116, 59, 1, 8918, 114, 101, 101, 59, 1, 8907, 109, 101, 115, 59, 1, 8905, 97, 114, 114, 59, 1, 10614, 117, 101, 115, 116, 59, 1, 10875, 4, 2, 80, 105, 12711, 12716, 97, 114, 59, 1, 10646, 4, 3, 59, 101, 102, 12724, 12726, 12729, 1, 9667, 59, 1, 8884, 59, 1, 9666, 114, 4, 2, 100, 117, 12739, 12746, 115, 104, 97, 114, 59, 1, 10570, 104, 97, 114, 59, 1, 10598, 4, 2, 101, 110, 12758, 12768, 114, 116, 110, 101, 113, 113, 59, 3, 8808, 65024, 69, 59, 3, 8808, 65024, 4, 14, 68, 97, 99, 100, 101, 102, 104, 105, 108, 110, 111, 112, 115, 117, 12803, 12809, 12893, 12908, 12914, 12928, 12933, 12937, 13011, 13025, 13032, 13049, 13052, 13069, 68, 111, 116, 59, 1, 8762, 4, 4, 99, 108, 112, 114, 12819, 12827, 12849, 12887, 114, 5, 175, 1, 59, 12825, 1, 175, 4, 2, 101, 116, 12833, 12836, 59, 1, 9794, 4, 2, 59, 101, 12842, 12844, 1, 10016, 115, 101, 59, 1, 10016, 4, 2, 59, 115, 12855, 12857, 1, 8614, 116, 111, 4, 4, 59, 100, 108, 117, 12869, 12871, 12877, 12883, 1, 8614, 111, 119, 110, 59, 1, 8615, 101, 102, 116, 59, 1, 8612, 112, 59, 1, 8613, 107, 101, 114, 59, 1, 9646, 4, 2, 111, 121, 12899, 12905, 109, 109, 97, 59, 1, 10793, 59, 1, 1084, 97, 115, 104, 59, 1, 8212, 97, 115, 117, 114, 101, 100, 97, 110, 103, 108, 101, 59, 1, 8737, 114, 59, 3, 55349, 56618, 111, 59, 1, 8487, 4, 3, 99, 100, 110, 12945, 12954, 12985, 114, 111, 5, 181, 1, 59, 12952, 1, 181, 4, 4, 59, 97, 99, 100, 12964, 12966, 12971, 12976, 1, 8739, 115, 116, 59, 1, 42, 105, 114, 59, 1, 10992, 111, 116, 5, 183, 1, 59, 12983, 1, 183, 117, 115, 4, 3, 59, 98, 100, 12995, 12997, 13e3, 1, 8722, 59, 1, 8863, 4, 2, 59, 117, 13006, 13008, 1, 8760, 59, 1, 10794, 4, 2, 99, 100, 13017, 13021, 112, 59, 1, 10971, 114, 59, 1, 8230, 112, 108, 117, 115, 59, 1, 8723, 4, 2, 100, 112, 13038, 13044, 101, 108, 115, 59, 1, 8871, 102, 59, 3, 55349, 56670, 59, 1, 8723, 4, 2, 99, 116, 13058, 13063, 114, 59, 3, 55349, 56514, 112, 111, 115, 59, 1, 8766, 4, 3, 59, 108, 109, 13077, 13079, 13087, 1, 956, 116, 105, 109, 97, 112, 59, 1, 8888, 97, 112, 59, 1, 8888, 4, 24, 71, 76, 82, 86, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 114, 115, 116, 117, 118, 119, 13142, 13165, 13217, 13229, 13247, 13330, 13359, 13414, 13420, 13508, 13513, 13579, 13602, 13626, 13631, 13762, 13767, 13855, 13936, 13995, 14214, 14285, 14312, 14432, 4, 2, 103, 116, 13148, 13152, 59, 3, 8921, 824, 4, 2, 59, 118, 13158, 13161, 3, 8811, 8402, 59, 3, 8811, 824, 4, 3, 101, 108, 116, 13173, 13200, 13204, 102, 116, 4, 2, 97, 114, 13181, 13188, 114, 114, 111, 119, 59, 1, 8653, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8654, 59, 3, 8920, 824, 4, 2, 59, 118, 13210, 13213, 3, 8810, 8402, 59, 3, 8810, 824, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8655, 4, 2, 68, 100, 13235, 13241, 97, 115, 104, 59, 1, 8879, 97, 115, 104, 59, 1, 8878, 4, 5, 98, 99, 110, 112, 116, 13259, 13264, 13270, 13275, 13308, 108, 97, 59, 1, 8711, 117, 116, 101, 59, 1, 324, 103, 59, 3, 8736, 8402, 4, 5, 59, 69, 105, 111, 112, 13287, 13289, 13293, 13298, 13302, 1, 8777, 59, 3, 10864, 824, 100, 59, 3, 8779, 824, 115, 59, 1, 329, 114, 111, 120, 59, 1, 8777, 117, 114, 4, 2, 59, 97, 13316, 13318, 1, 9838, 108, 4, 2, 59, 115, 13325, 13327, 1, 9838, 59, 1, 8469, 4, 2, 115, 117, 13336, 13344, 112, 5, 160, 1, 59, 13342, 1, 160, 109, 112, 4, 2, 59, 101, 13352, 13355, 3, 8782, 824, 59, 3, 8783, 824, 4, 5, 97, 101, 111, 117, 121, 13371, 13385, 13391, 13407, 13411, 4, 2, 112, 114, 13377, 13380, 59, 1, 10819, 111, 110, 59, 1, 328, 100, 105, 108, 59, 1, 326, 110, 103, 4, 2, 59, 100, 13399, 13401, 1, 8775, 111, 116, 59, 3, 10861, 824, 112, 59, 1, 10818, 59, 1, 1085, 97, 115, 104, 59, 1, 8211, 4, 7, 59, 65, 97, 100, 113, 115, 120, 13436, 13438, 13443, 13466, 13472, 13478, 13494, 1, 8800, 114, 114, 59, 1, 8663, 114, 4, 2, 104, 114, 13450, 13454, 107, 59, 1, 10532, 4, 2, 59, 111, 13460, 13462, 1, 8599, 119, 59, 1, 8599, 111, 116, 59, 3, 8784, 824, 117, 105, 118, 59, 1, 8802, 4, 2, 101, 105, 13484, 13489, 97, 114, 59, 1, 10536, 109, 59, 3, 8770, 824, 105, 115, 116, 4, 2, 59, 115, 13503, 13505, 1, 8708, 59, 1, 8708, 114, 59, 3, 55349, 56619, 4, 4, 69, 101, 115, 116, 13523, 13527, 13563, 13568, 59, 3, 8807, 824, 4, 3, 59, 113, 115, 13535, 13537, 13559, 1, 8817, 4, 3, 59, 113, 115, 13545, 13547, 13551, 1, 8817, 59, 3, 8807, 824, 108, 97, 110, 116, 59, 3, 10878, 824, 59, 3, 10878, 824, 105, 109, 59, 1, 8821, 4, 2, 59, 114, 13574, 13576, 1, 8815, 59, 1, 8815, 4, 3, 65, 97, 112, 13587, 13592, 13597, 114, 114, 59, 1, 8654, 114, 114, 59, 1, 8622, 97, 114, 59, 1, 10994, 4, 3, 59, 115, 118, 13610, 13612, 13623, 1, 8715, 4, 2, 59, 100, 13618, 13620, 1, 8956, 59, 1, 8954, 59, 1, 8715, 99, 121, 59, 1, 1114, 4, 7, 65, 69, 97, 100, 101, 115, 116, 13647, 13652, 13656, 13661, 13665, 13737, 13742, 114, 114, 59, 1, 8653, 59, 3, 8806, 824, 114, 114, 59, 1, 8602, 114, 59, 1, 8229, 4, 4, 59, 102, 113, 115, 13675, 13677, 13703, 13725, 1, 8816, 116, 4, 2, 97, 114, 13684, 13691, 114, 114, 111, 119, 59, 1, 8602, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8622, 4, 3, 59, 113, 115, 13711, 13713, 13717, 1, 8816, 59, 3, 8806, 824, 108, 97, 110, 116, 59, 3, 10877, 824, 4, 2, 59, 115, 13731, 13734, 3, 10877, 824, 59, 1, 8814, 105, 109, 59, 1, 8820, 4, 2, 59, 114, 13748, 13750, 1, 8814, 105, 4, 2, 59, 101, 13757, 13759, 1, 8938, 59, 1, 8940, 105, 100, 59, 1, 8740, 4, 2, 112, 116, 13773, 13778, 102, 59, 3, 55349, 56671, 5, 172, 3, 59, 105, 110, 13787, 13789, 13829, 1, 172, 110, 4, 4, 59, 69, 100, 118, 13800, 13802, 13806, 13812, 1, 8713, 59, 3, 8953, 824, 111, 116, 59, 3, 8949, 824, 4, 3, 97, 98, 99, 13820, 13823, 13826, 59, 1, 8713, 59, 1, 8951, 59, 1, 8950, 105, 4, 2, 59, 118, 13836, 13838, 1, 8716, 4, 3, 97, 98, 99, 13846, 13849, 13852, 59, 1, 8716, 59, 1, 8958, 59, 1, 8957, 4, 3, 97, 111, 114, 13863, 13892, 13899, 114, 4, 4, 59, 97, 115, 116, 13874, 13876, 13883, 13888, 1, 8742, 108, 108, 101, 108, 59, 1, 8742, 108, 59, 3, 11005, 8421, 59, 3, 8706, 824, 108, 105, 110, 116, 59, 1, 10772, 4, 3, 59, 99, 101, 13907, 13909, 13914, 1, 8832, 117, 101, 59, 1, 8928, 4, 2, 59, 99, 13920, 13923, 3, 10927, 824, 4, 2, 59, 101, 13929, 13931, 1, 8832, 113, 59, 3, 10927, 824, 4, 4, 65, 97, 105, 116, 13946, 13951, 13971, 13982, 114, 114, 59, 1, 8655, 114, 114, 4, 3, 59, 99, 119, 13961, 13963, 13967, 1, 8603, 59, 3, 10547, 824, 59, 3, 8605, 824, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8603, 114, 105, 4, 2, 59, 101, 13990, 13992, 1, 8939, 59, 1, 8941, 4, 7, 99, 104, 105, 109, 112, 113, 117, 14011, 14036, 14060, 14080, 14085, 14090, 14106, 4, 4, 59, 99, 101, 114, 14021, 14023, 14028, 14032, 1, 8833, 117, 101, 59, 1, 8929, 59, 3, 10928, 824, 59, 3, 55349, 56515, 111, 114, 116, 4, 2, 109, 112, 14045, 14050, 105, 100, 59, 1, 8740, 97, 114, 97, 108, 108, 101, 108, 59, 1, 8742, 109, 4, 2, 59, 101, 14067, 14069, 1, 8769, 4, 2, 59, 113, 14075, 14077, 1, 8772, 59, 1, 8772, 105, 100, 59, 1, 8740, 97, 114, 59, 1, 8742, 115, 117, 4, 2, 98, 112, 14098, 14102, 101, 59, 1, 8930, 101, 59, 1, 8931, 4, 3, 98, 99, 112, 14114, 14157, 14171, 4, 4, 59, 69, 101, 115, 14124, 14126, 14130, 14133, 1, 8836, 59, 3, 10949, 824, 59, 1, 8840, 101, 116, 4, 2, 59, 101, 14141, 14144, 3, 8834, 8402, 113, 4, 2, 59, 113, 14151, 14153, 1, 8840, 59, 3, 10949, 824, 99, 4, 2, 59, 101, 14164, 14166, 1, 8833, 113, 59, 3, 10928, 824, 4, 4, 59, 69, 101, 115, 14181, 14183, 14187, 14190, 1, 8837, 59, 3, 10950, 824, 59, 1, 8841, 101, 116, 4, 2, 59, 101, 14198, 14201, 3, 8835, 8402, 113, 4, 2, 59, 113, 14208, 14210, 1, 8841, 59, 3, 10950, 824, 4, 4, 103, 105, 108, 114, 14224, 14228, 14238, 14242, 108, 59, 1, 8825, 108, 100, 101, 5, 241, 1, 59, 14236, 1, 241, 103, 59, 1, 8824, 105, 97, 110, 103, 108, 101, 4, 2, 108, 114, 14254, 14269, 101, 102, 116, 4, 2, 59, 101, 14263, 14265, 1, 8938, 113, 59, 1, 8940, 105, 103, 104, 116, 4, 2, 59, 101, 14279, 14281, 1, 8939, 113, 59, 1, 8941, 4, 2, 59, 109, 14291, 14293, 1, 957, 4, 3, 59, 101, 115, 14301, 14303, 14308, 1, 35, 114, 111, 59, 1, 8470, 112, 59, 1, 8199, 4, 9, 68, 72, 97, 100, 103, 105, 108, 114, 115, 14332, 14338, 14344, 14349, 14355, 14369, 14376, 14408, 14426, 97, 115, 104, 59, 1, 8877, 97, 114, 114, 59, 1, 10500, 112, 59, 3, 8781, 8402, 97, 115, 104, 59, 1, 8876, 4, 2, 101, 116, 14361, 14365, 59, 3, 8805, 8402, 59, 3, 62, 8402, 110, 102, 105, 110, 59, 1, 10718, 4, 3, 65, 101, 116, 14384, 14389, 14393, 114, 114, 59, 1, 10498, 59, 3, 8804, 8402, 4, 2, 59, 114, 14399, 14402, 3, 60, 8402, 105, 101, 59, 3, 8884, 8402, 4, 2, 65, 116, 14414, 14419, 114, 114, 59, 1, 10499, 114, 105, 101, 59, 3, 8885, 8402, 105, 109, 59, 3, 8764, 8402, 4, 3, 65, 97, 110, 14440, 14445, 14468, 114, 114, 59, 1, 8662, 114, 4, 2, 104, 114, 14452, 14456, 107, 59, 1, 10531, 4, 2, 59, 111, 14462, 14464, 1, 8598, 119, 59, 1, 8598, 101, 97, 114, 59, 1, 10535, 4, 18, 83, 97, 99, 100, 101, 102, 103, 104, 105, 108, 109, 111, 112, 114, 115, 116, 117, 118, 14512, 14515, 14535, 14560, 14597, 14603, 14618, 14643, 14657, 14662, 14701, 14741, 14747, 14769, 14851, 14877, 14907, 14916, 59, 1, 9416, 4, 2, 99, 115, 14521, 14531, 117, 116, 101, 5, 243, 1, 59, 14529, 1, 243, 116, 59, 1, 8859, 4, 2, 105, 121, 14541, 14557, 114, 4, 2, 59, 99, 14548, 14550, 1, 8858, 5, 244, 1, 59, 14555, 1, 244, 59, 1, 1086, 4, 5, 97, 98, 105, 111, 115, 14572, 14577, 14583, 14587, 14591, 115, 104, 59, 1, 8861, 108, 97, 99, 59, 1, 337, 118, 59, 1, 10808, 116, 59, 1, 8857, 111, 108, 100, 59, 1, 10684, 108, 105, 103, 59, 1, 339, 4, 2, 99, 114, 14609, 14614, 105, 114, 59, 1, 10687, 59, 3, 55349, 56620, 4, 3, 111, 114, 116, 14626, 14630, 14640, 110, 59, 1, 731, 97, 118, 101, 5, 242, 1, 59, 14638, 1, 242, 59, 1, 10689, 4, 2, 98, 109, 14649, 14654, 97, 114, 59, 1, 10677, 59, 1, 937, 110, 116, 59, 1, 8750, 4, 4, 97, 99, 105, 116, 14672, 14677, 14693, 14698, 114, 114, 59, 1, 8634, 4, 2, 105, 114, 14683, 14687, 114, 59, 1, 10686, 111, 115, 115, 59, 1, 10683, 110, 101, 59, 1, 8254, 59, 1, 10688, 4, 3, 97, 101, 105, 14709, 14714, 14719, 99, 114, 59, 1, 333, 103, 97, 59, 1, 969, 4, 3, 99, 100, 110, 14727, 14733, 14736, 114, 111, 110, 59, 1, 959, 59, 1, 10678, 117, 115, 59, 1, 8854, 112, 102, 59, 3, 55349, 56672, 4, 3, 97, 101, 108, 14755, 14759, 14764, 114, 59, 1, 10679, 114, 112, 59, 1, 10681, 117, 115, 59, 1, 8853, 4, 7, 59, 97, 100, 105, 111, 115, 118, 14785, 14787, 14792, 14831, 14837, 14841, 14848, 1, 8744, 114, 114, 59, 1, 8635, 4, 4, 59, 101, 102, 109, 14802, 14804, 14817, 14824, 1, 10845, 114, 4, 2, 59, 111, 14811, 14813, 1, 8500, 102, 59, 1, 8500, 5, 170, 1, 59, 14822, 1, 170, 5, 186, 1, 59, 14829, 1, 186, 103, 111, 102, 59, 1, 8886, 114, 59, 1, 10838, 108, 111, 112, 101, 59, 1, 10839, 59, 1, 10843, 4, 3, 99, 108, 111, 14859, 14863, 14873, 114, 59, 1, 8500, 97, 115, 104, 5, 248, 1, 59, 14871, 1, 248, 108, 59, 1, 8856, 105, 4, 2, 108, 109, 14884, 14893, 100, 101, 5, 245, 1, 59, 14891, 1, 245, 101, 115, 4, 2, 59, 97, 14901, 14903, 1, 8855, 115, 59, 1, 10806, 109, 108, 5, 246, 1, 59, 14914, 1, 246, 98, 97, 114, 59, 1, 9021, 4, 12, 97, 99, 101, 102, 104, 105, 108, 109, 111, 114, 115, 117, 14948, 14992, 14996, 15033, 15038, 15068, 15090, 15189, 15192, 15222, 15427, 15441, 114, 4, 4, 59, 97, 115, 116, 14959, 14961, 14976, 14989, 1, 8741, 5, 182, 2, 59, 108, 14968, 14970, 1, 182, 108, 101, 108, 59, 1, 8741, 4, 2, 105, 108, 14982, 14986, 109, 59, 1, 10995, 59, 1, 11005, 59, 1, 8706, 121, 59, 1, 1087, 114, 4, 5, 99, 105, 109, 112, 116, 15009, 15014, 15019, 15024, 15027, 110, 116, 59, 1, 37, 111, 100, 59, 1, 46, 105, 108, 59, 1, 8240, 59, 1, 8869, 101, 110, 107, 59, 1, 8241, 114, 59, 3, 55349, 56621, 4, 3, 105, 109, 111, 15046, 15057, 15063, 4, 2, 59, 118, 15052, 15054, 1, 966, 59, 1, 981, 109, 97, 116, 59, 1, 8499, 110, 101, 59, 1, 9742, 4, 3, 59, 116, 118, 15076, 15078, 15087, 1, 960, 99, 104, 102, 111, 114, 107, 59, 1, 8916, 59, 1, 982, 4, 2, 97, 117, 15096, 15119, 110, 4, 2, 99, 107, 15103, 15115, 107, 4, 2, 59, 104, 15110, 15112, 1, 8463, 59, 1, 8462, 118, 59, 1, 8463, 115, 4, 9, 59, 97, 98, 99, 100, 101, 109, 115, 116, 15140, 15142, 15148, 15151, 15156, 15168, 15171, 15179, 15184, 1, 43, 99, 105, 114, 59, 1, 10787, 59, 1, 8862, 105, 114, 59, 1, 10786, 4, 2, 111, 117, 15162, 15165, 59, 1, 8724, 59, 1, 10789, 59, 1, 10866, 110, 5, 177, 1, 59, 15177, 1, 177, 105, 109, 59, 1, 10790, 119, 111, 59, 1, 10791, 59, 1, 177, 4, 3, 105, 112, 117, 15200, 15208, 15213, 110, 116, 105, 110, 116, 59, 1, 10773, 102, 59, 3, 55349, 56673, 110, 100, 5, 163, 1, 59, 15220, 1, 163, 4, 10, 59, 69, 97, 99, 101, 105, 110, 111, 115, 117, 15244, 15246, 15249, 15253, 15258, 15334, 15347, 15367, 15416, 15421, 1, 8826, 59, 1, 10931, 112, 59, 1, 10935, 117, 101, 59, 1, 8828, 4, 2, 59, 99, 15264, 15266, 1, 10927, 4, 6, 59, 97, 99, 101, 110, 115, 15280, 15282, 15290, 15299, 15303, 15329, 1, 8826, 112, 112, 114, 111, 120, 59, 1, 10935, 117, 114, 108, 121, 101, 113, 59, 1, 8828, 113, 59, 1, 10927, 4, 3, 97, 101, 115, 15311, 15319, 15324, 112, 112, 114, 111, 120, 59, 1, 10937, 113, 113, 59, 1, 10933, 105, 109, 59, 1, 8936, 105, 109, 59, 1, 8830, 109, 101, 4, 2, 59, 115, 15342, 15344, 1, 8242, 59, 1, 8473, 4, 3, 69, 97, 115, 15355, 15358, 15362, 59, 1, 10933, 112, 59, 1, 10937, 105, 109, 59, 1, 8936, 4, 3, 100, 102, 112, 15375, 15378, 15404, 59, 1, 8719, 4, 3, 97, 108, 115, 15386, 15392, 15398, 108, 97, 114, 59, 1, 9006, 105, 110, 101, 59, 1, 8978, 117, 114, 102, 59, 1, 8979, 4, 2, 59, 116, 15410, 15412, 1, 8733, 111, 59, 1, 8733, 105, 109, 59, 1, 8830, 114, 101, 108, 59, 1, 8880, 4, 2, 99, 105, 15433, 15438, 114, 59, 3, 55349, 56517, 59, 1, 968, 110, 99, 115, 112, 59, 1, 8200, 4, 6, 102, 105, 111, 112, 115, 117, 15462, 15467, 15472, 15478, 15485, 15491, 114, 59, 3, 55349, 56622, 110, 116, 59, 1, 10764, 112, 102, 59, 3, 55349, 56674, 114, 105, 109, 101, 59, 1, 8279, 99, 114, 59, 3, 55349, 56518, 4, 3, 97, 101, 111, 15499, 15520, 15534, 116, 4, 2, 101, 105, 15506, 15515, 114, 110, 105, 111, 110, 115, 59, 1, 8461, 110, 116, 59, 1, 10774, 115, 116, 4, 2, 59, 101, 15528, 15530, 1, 63, 113, 59, 1, 8799, 116, 5, 34, 1, 59, 15540, 1, 34, 4, 21, 65, 66, 72, 97, 98, 99, 100, 101, 102, 104, 105, 108, 109, 110, 111, 112, 114, 115, 116, 117, 120, 15586, 15609, 15615, 15620, 15796, 15855, 15893, 15931, 15977, 16001, 16039, 16183, 16204, 16222, 16228, 16285, 16312, 16318, 16363, 16408, 16416, 4, 3, 97, 114, 116, 15594, 15599, 15603, 114, 114, 59, 1, 8667, 114, 59, 1, 8658, 97, 105, 108, 59, 1, 10524, 97, 114, 114, 59, 1, 10511, 97, 114, 59, 1, 10596, 4, 7, 99, 100, 101, 110, 113, 114, 116, 15636, 15651, 15656, 15664, 15687, 15696, 15770, 4, 2, 101, 117, 15642, 15646, 59, 3, 8765, 817, 116, 101, 59, 1, 341, 105, 99, 59, 1, 8730, 109, 112, 116, 121, 118, 59, 1, 10675, 103, 4, 4, 59, 100, 101, 108, 15675, 15677, 15680, 15683, 1, 10217, 59, 1, 10642, 59, 1, 10661, 101, 59, 1, 10217, 117, 111, 5, 187, 1, 59, 15694, 1, 187, 114, 4, 11, 59, 97, 98, 99, 102, 104, 108, 112, 115, 116, 119, 15721, 15723, 15727, 15739, 15742, 15746, 15750, 15754, 15758, 15763, 15767, 1, 8594, 112, 59, 1, 10613, 4, 2, 59, 102, 15733, 15735, 1, 8677, 115, 59, 1, 10528, 59, 1, 10547, 115, 59, 1, 10526, 107, 59, 1, 8618, 112, 59, 1, 8620, 108, 59, 1, 10565, 105, 109, 59, 1, 10612, 108, 59, 1, 8611, 59, 1, 8605, 4, 2, 97, 105, 15776, 15781, 105, 108, 59, 1, 10522, 111, 4, 2, 59, 110, 15788, 15790, 1, 8758, 97, 108, 115, 59, 1, 8474, 4, 3, 97, 98, 114, 15804, 15809, 15814, 114, 114, 59, 1, 10509, 114, 107, 59, 1, 10099, 4, 2, 97, 107, 15820, 15833, 99, 4, 2, 101, 107, 15827, 15830, 59, 1, 125, 59, 1, 93, 4, 2, 101, 115, 15839, 15842, 59, 1, 10636, 108, 4, 2, 100, 117, 15849, 15852, 59, 1, 10638, 59, 1, 10640, 4, 4, 97, 101, 117, 121, 15865, 15871, 15886, 15890, 114, 111, 110, 59, 1, 345, 4, 2, 100, 105, 15877, 15882, 105, 108, 59, 1, 343, 108, 59, 1, 8969, 98, 59, 1, 125, 59, 1, 1088, 4, 4, 99, 108, 113, 115, 15903, 15907, 15914, 15927, 97, 59, 1, 10551, 100, 104, 97, 114, 59, 1, 10601, 117, 111, 4, 2, 59, 114, 15922, 15924, 1, 8221, 59, 1, 8221, 104, 59, 1, 8627, 4, 3, 97, 99, 103, 15939, 15966, 15970, 108, 4, 4, 59, 105, 112, 115, 15950, 15952, 15957, 15963, 1, 8476, 110, 101, 59, 1, 8475, 97, 114, 116, 59, 1, 8476, 59, 1, 8477, 116, 59, 1, 9645, 5, 174, 1, 59, 15975, 1, 174, 4, 3, 105, 108, 114, 15985, 15991, 15997, 115, 104, 116, 59, 1, 10621, 111, 111, 114, 59, 1, 8971, 59, 3, 55349, 56623, 4, 2, 97, 111, 16007, 16028, 114, 4, 2, 100, 117, 16014, 16017, 59, 1, 8641, 4, 2, 59, 108, 16023, 16025, 1, 8640, 59, 1, 10604, 4, 2, 59, 118, 16034, 16036, 1, 961, 59, 1, 1009, 4, 3, 103, 110, 115, 16047, 16167, 16171, 104, 116, 4, 6, 97, 104, 108, 114, 115, 116, 16063, 16081, 16103, 16130, 16143, 16155, 114, 114, 111, 119, 4, 2, 59, 116, 16073, 16075, 1, 8594, 97, 105, 108, 59, 1, 8611, 97, 114, 112, 111, 111, 110, 4, 2, 100, 117, 16093, 16099, 111, 119, 110, 59, 1, 8641, 112, 59, 1, 8640, 101, 102, 116, 4, 2, 97, 104, 16112, 16120, 114, 114, 111, 119, 115, 59, 1, 8644, 97, 114, 112, 111, 111, 110, 115, 59, 1, 8652, 105, 103, 104, 116, 97, 114, 114, 111, 119, 115, 59, 1, 8649, 113, 117, 105, 103, 97, 114, 114, 111, 119, 59, 1, 8605, 104, 114, 101, 101, 116, 105, 109, 101, 115, 59, 1, 8908, 103, 59, 1, 730, 105, 110, 103, 100, 111, 116, 115, 101, 113, 59, 1, 8787, 4, 3, 97, 104, 109, 16191, 16196, 16201, 114, 114, 59, 1, 8644, 97, 114, 59, 1, 8652, 59, 1, 8207, 111, 117, 115, 116, 4, 2, 59, 97, 16214, 16216, 1, 9137, 99, 104, 101, 59, 1, 9137, 109, 105, 100, 59, 1, 10990, 4, 4, 97, 98, 112, 116, 16238, 16252, 16257, 16278, 4, 2, 110, 114, 16244, 16248, 103, 59, 1, 10221, 114, 59, 1, 8702, 114, 107, 59, 1, 10215, 4, 3, 97, 102, 108, 16265, 16269, 16273, 114, 59, 1, 10630, 59, 3, 55349, 56675, 117, 115, 59, 1, 10798, 105, 109, 101, 115, 59, 1, 10805, 4, 2, 97, 112, 16291, 16304, 114, 4, 2, 59, 103, 16298, 16300, 1, 41, 116, 59, 1, 10644, 111, 108, 105, 110, 116, 59, 1, 10770, 97, 114, 114, 59, 1, 8649, 4, 4, 97, 99, 104, 113, 16328, 16334, 16339, 16342, 113, 117, 111, 59, 1, 8250, 114, 59, 3, 55349, 56519, 59, 1, 8625, 4, 2, 98, 117, 16348, 16351, 59, 1, 93, 111, 4, 2, 59, 114, 16358, 16360, 1, 8217, 59, 1, 8217, 4, 3, 104, 105, 114, 16371, 16377, 16383, 114, 101, 101, 59, 1, 8908, 109, 101, 115, 59, 1, 8906, 105, 4, 4, 59, 101, 102, 108, 16394, 16396, 16399, 16402, 1, 9657, 59, 1, 8885, 59, 1, 9656, 116, 114, 105, 59, 1, 10702, 108, 117, 104, 97, 114, 59, 1, 10600, 59, 1, 8478, 4, 19, 97, 98, 99, 100, 101, 102, 104, 105, 108, 109, 111, 112, 113, 114, 115, 116, 117, 119, 122, 16459, 16466, 16472, 16572, 16590, 16672, 16687, 16746, 16844, 16850, 16924, 16963, 16988, 17115, 17121, 17154, 17206, 17614, 17656, 99, 117, 116, 101, 59, 1, 347, 113, 117, 111, 59, 1, 8218, 4, 10, 59, 69, 97, 99, 101, 105, 110, 112, 115, 121, 16494, 16496, 16499, 16513, 16518, 16531, 16536, 16556, 16564, 16569, 1, 8827, 59, 1, 10932, 4, 2, 112, 114, 16505, 16508, 59, 1, 10936, 111, 110, 59, 1, 353, 117, 101, 59, 1, 8829, 4, 2, 59, 100, 16524, 16526, 1, 10928, 105, 108, 59, 1, 351, 114, 99, 59, 1, 349, 4, 3, 69, 97, 115, 16544, 16547, 16551, 59, 1, 10934, 112, 59, 1, 10938, 105, 109, 59, 1, 8937, 111, 108, 105, 110, 116, 59, 1, 10771, 105, 109, 59, 1, 8831, 59, 1, 1089, 111, 116, 4, 3, 59, 98, 101, 16582, 16584, 16587, 1, 8901, 59, 1, 8865, 59, 1, 10854, 4, 7, 65, 97, 99, 109, 115, 116, 120, 16606, 16611, 16634, 16642, 16646, 16652, 16668, 114, 114, 59, 1, 8664, 114, 4, 2, 104, 114, 16618, 16622, 107, 59, 1, 10533, 4, 2, 59, 111, 16628, 16630, 1, 8600, 119, 59, 1, 8600, 116, 5, 167, 1, 59, 16640, 1, 167, 105, 59, 1, 59, 119, 97, 114, 59, 1, 10537, 109, 4, 2, 105, 110, 16659, 16665, 110, 117, 115, 59, 1, 8726, 59, 1, 8726, 116, 59, 1, 10038, 114, 4, 2, 59, 111, 16679, 16682, 3, 55349, 56624, 119, 110, 59, 1, 8994, 4, 4, 97, 99, 111, 121, 16697, 16702, 16716, 16739, 114, 112, 59, 1, 9839, 4, 2, 104, 121, 16708, 16713, 99, 121, 59, 1, 1097, 59, 1, 1096, 114, 116, 4, 2, 109, 112, 16724, 16729, 105, 100, 59, 1, 8739, 97, 114, 97, 108, 108, 101, 108, 59, 1, 8741, 5, 173, 1, 59, 16744, 1, 173, 4, 2, 103, 109, 16752, 16770, 109, 97, 4, 3, 59, 102, 118, 16762, 16764, 16767, 1, 963, 59, 1, 962, 59, 1, 962, 4, 8, 59, 100, 101, 103, 108, 110, 112, 114, 16788, 16790, 16795, 16806, 16817, 16828, 16832, 16838, 1, 8764, 111, 116, 59, 1, 10858, 4, 2, 59, 113, 16801, 16803, 1, 8771, 59, 1, 8771, 4, 2, 59, 69, 16812, 16814, 1, 10910, 59, 1, 10912, 4, 2, 59, 69, 16823, 16825, 1, 10909, 59, 1, 10911, 101, 59, 1, 8774, 108, 117, 115, 59, 1, 10788, 97, 114, 114, 59, 1, 10610, 97, 114, 114, 59, 1, 8592, 4, 4, 97, 101, 105, 116, 16860, 16883, 16891, 16904, 4, 2, 108, 115, 16866, 16878, 108, 115, 101, 116, 109, 105, 110, 117, 115, 59, 1, 8726, 104, 112, 59, 1, 10803, 112, 97, 114, 115, 108, 59, 1, 10724, 4, 2, 100, 108, 16897, 16900, 59, 1, 8739, 101, 59, 1, 8995, 4, 2, 59, 101, 16910, 16912, 1, 10922, 4, 2, 59, 115, 16918, 16920, 1, 10924, 59, 3, 10924, 65024, 4, 3, 102, 108, 112, 16932, 16938, 16958, 116, 99, 121, 59, 1, 1100, 4, 2, 59, 98, 16944, 16946, 1, 47, 4, 2, 59, 97, 16952, 16954, 1, 10692, 114, 59, 1, 9023, 102, 59, 3, 55349, 56676, 97, 4, 2, 100, 114, 16970, 16985, 101, 115, 4, 2, 59, 117, 16978, 16980, 1, 9824, 105, 116, 59, 1, 9824, 59, 1, 8741, 4, 3, 99, 115, 117, 16996, 17028, 17089, 4, 2, 97, 117, 17002, 17015, 112, 4, 2, 59, 115, 17009, 17011, 1, 8851, 59, 3, 8851, 65024, 112, 4, 2, 59, 115, 17022, 17024, 1, 8852, 59, 3, 8852, 65024, 117, 4, 2, 98, 112, 17035, 17062, 4, 3, 59, 101, 115, 17043, 17045, 17048, 1, 8847, 59, 1, 8849, 101, 116, 4, 2, 59, 101, 17056, 17058, 1, 8847, 113, 59, 1, 8849, 4, 3, 59, 101, 115, 17070, 17072, 17075, 1, 8848, 59, 1, 8850, 101, 116, 4, 2, 59, 101, 17083, 17085, 1, 8848, 113, 59, 1, 8850, 4, 3, 59, 97, 102, 17097, 17099, 17112, 1, 9633, 114, 4, 2, 101, 102, 17106, 17109, 59, 1, 9633, 59, 1, 9642, 59, 1, 9642, 97, 114, 114, 59, 1, 8594, 4, 4, 99, 101, 109, 116, 17131, 17136, 17142, 17148, 114, 59, 3, 55349, 56520, 116, 109, 110, 59, 1, 8726, 105, 108, 101, 59, 1, 8995, 97, 114, 102, 59, 1, 8902, 4, 2, 97, 114, 17160, 17172, 114, 4, 2, 59, 102, 17167, 17169, 1, 9734, 59, 1, 9733, 4, 2, 97, 110, 17178, 17202, 105, 103, 104, 116, 4, 2, 101, 112, 17188, 17197, 112, 115, 105, 108, 111, 110, 59, 1, 1013, 104, 105, 59, 1, 981, 115, 59, 1, 175, 4, 5, 98, 99, 109, 110, 112, 17218, 17351, 17420, 17423, 17427, 4, 9, 59, 69, 100, 101, 109, 110, 112, 114, 115, 17238, 17240, 17243, 17248, 17261, 17267, 17279, 17285, 17291, 1, 8834, 59, 1, 10949, 111, 116, 59, 1, 10941, 4, 2, 59, 100, 17254, 17256, 1, 8838, 111, 116, 59, 1, 10947, 117, 108, 116, 59, 1, 10945, 4, 2, 69, 101, 17273, 17276, 59, 1, 10955, 59, 1, 8842, 108, 117, 115, 59, 1, 10943, 97, 114, 114, 59, 1, 10617, 4, 3, 101, 105, 117, 17299, 17335, 17339, 116, 4, 3, 59, 101, 110, 17308, 17310, 17322, 1, 8834, 113, 4, 2, 59, 113, 17317, 17319, 1, 8838, 59, 1, 10949, 101, 113, 4, 2, 59, 113, 17330, 17332, 1, 8842, 59, 1, 10955, 109, 59, 1, 10951, 4, 2, 98, 112, 17345, 17348, 59, 1, 10965, 59, 1, 10963, 99, 4, 6, 59, 97, 99, 101, 110, 115, 17366, 17368, 17376, 17385, 17389, 17415, 1, 8827, 112, 112, 114, 111, 120, 59, 1, 10936, 117, 114, 108, 121, 101, 113, 59, 1, 8829, 113, 59, 1, 10928, 4, 3, 97, 101, 115, 17397, 17405, 17410, 112, 112, 114, 111, 120, 59, 1, 10938, 113, 113, 59, 1, 10934, 105, 109, 59, 1, 8937, 105, 109, 59, 1, 8831, 59, 1, 8721, 103, 59, 1, 9834, 4, 13, 49, 50, 51, 59, 69, 100, 101, 104, 108, 109, 110, 112, 115, 17455, 17462, 17469, 17476, 17478, 17481, 17496, 17509, 17524, 17530, 17536, 17548, 17554, 5, 185, 1, 59, 17460, 1, 185, 5, 178, 1, 59, 17467, 1, 178, 5, 179, 1, 59, 17474, 1, 179, 1, 8835, 59, 1, 10950, 4, 2, 111, 115, 17487, 17491, 116, 59, 1, 10942, 117, 98, 59, 1, 10968, 4, 2, 59, 100, 17502, 17504, 1, 8839, 111, 116, 59, 1, 10948, 115, 4, 2, 111, 117, 17516, 17520, 108, 59, 1, 10185, 98, 59, 1, 10967, 97, 114, 114, 59, 1, 10619, 117, 108, 116, 59, 1, 10946, 4, 2, 69, 101, 17542, 17545, 59, 1, 10956, 59, 1, 8843, 108, 117, 115, 59, 1, 10944, 4, 3, 101, 105, 117, 17562, 17598, 17602, 116, 4, 3, 59, 101, 110, 17571, 17573, 17585, 1, 8835, 113, 4, 2, 59, 113, 17580, 17582, 1, 8839, 59, 1, 10950, 101, 113, 4, 2, 59, 113, 17593, 17595, 1, 8843, 59, 1, 10956, 109, 59, 1, 10952, 4, 2, 98, 112, 17608, 17611, 59, 1, 10964, 59, 1, 10966, 4, 3, 65, 97, 110, 17622, 17627, 17650, 114, 114, 59, 1, 8665, 114, 4, 2, 104, 114, 17634, 17638, 107, 59, 1, 10534, 4, 2, 59, 111, 17644, 17646, 1, 8601, 119, 59, 1, 8601, 119, 97, 114, 59, 1, 10538, 108, 105, 103, 5, 223, 1, 59, 17664, 1, 223, 4, 13, 97, 98, 99, 100, 101, 102, 104, 105, 111, 112, 114, 115, 119, 17694, 17709, 17714, 17737, 17742, 17749, 17754, 17860, 17905, 17957, 17964, 18090, 18122, 4, 2, 114, 117, 17700, 17706, 103, 101, 116, 59, 1, 8982, 59, 1, 964, 114, 107, 59, 1, 9140, 4, 3, 97, 101, 121, 17722, 17728, 17734, 114, 111, 110, 59, 1, 357, 100, 105, 108, 59, 1, 355, 59, 1, 1090, 111, 116, 59, 1, 8411, 108, 114, 101, 99, 59, 1, 8981, 114, 59, 3, 55349, 56625, 4, 4, 101, 105, 107, 111, 17764, 17805, 17836, 17851, 4, 2, 114, 116, 17770, 17786, 101, 4, 2, 52, 102, 17777, 17780, 59, 1, 8756, 111, 114, 101, 59, 1, 8756, 97, 4, 3, 59, 115, 118, 17795, 17797, 17802, 1, 952, 121, 109, 59, 1, 977, 59, 1, 977, 4, 2, 99, 110, 17811, 17831, 107, 4, 2, 97, 115, 17818, 17826, 112, 112, 114, 111, 120, 59, 1, 8776, 105, 109, 59, 1, 8764, 115, 112, 59, 1, 8201, 4, 2, 97, 115, 17842, 17846, 112, 59, 1, 8776, 105, 109, 59, 1, 8764, 114, 110, 5, 254, 1, 59, 17858, 1, 254, 4, 3, 108, 109, 110, 17868, 17873, 17901, 100, 101, 59, 1, 732, 101, 115, 5, 215, 3, 59, 98, 100, 17884, 17886, 17898, 1, 215, 4, 2, 59, 97, 17892, 17894, 1, 8864, 114, 59, 1, 10801, 59, 1, 10800, 116, 59, 1, 8749, 4, 3, 101, 112, 115, 17913, 17917, 17953, 97, 59, 1, 10536, 4, 4, 59, 98, 99, 102, 17927, 17929, 17934, 17939, 1, 8868, 111, 116, 59, 1, 9014, 105, 114, 59, 1, 10993, 4, 2, 59, 111, 17945, 17948, 3, 55349, 56677, 114, 107, 59, 1, 10970, 97, 59, 1, 10537, 114, 105, 109, 101, 59, 1, 8244, 4, 3, 97, 105, 112, 17972, 17977, 18082, 100, 101, 59, 1, 8482, 4, 7, 97, 100, 101, 109, 112, 115, 116, 17993, 18051, 18056, 18059, 18066, 18072, 18076, 110, 103, 108, 101, 4, 5, 59, 100, 108, 113, 114, 18009, 18011, 18017, 18032, 18035, 1, 9653, 111, 119, 110, 59, 1, 9663, 101, 102, 116, 4, 2, 59, 101, 18026, 18028, 1, 9667, 113, 59, 1, 8884, 59, 1, 8796, 105, 103, 104, 116, 4, 2, 59, 101, 18045, 18047, 1, 9657, 113, 59, 1, 8885, 111, 116, 59, 1, 9708, 59, 1, 8796, 105, 110, 117, 115, 59, 1, 10810, 108, 117, 115, 59, 1, 10809, 98, 59, 1, 10701, 105, 109, 101, 59, 1, 10811, 101, 122, 105, 117, 109, 59, 1, 9186, 4, 3, 99, 104, 116, 18098, 18111, 18116, 4, 2, 114, 121, 18104, 18108, 59, 3, 55349, 56521, 59, 1, 1094, 99, 121, 59, 1, 1115, 114, 111, 107, 59, 1, 359, 4, 2, 105, 111, 18128, 18133, 120, 116, 59, 1, 8812, 104, 101, 97, 100, 4, 2, 108, 114, 18143, 18154, 101, 102, 116, 97, 114, 114, 111, 119, 59, 1, 8606, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8608, 4, 18, 65, 72, 97, 98, 99, 100, 102, 103, 104, 108, 109, 111, 112, 114, 115, 116, 117, 119, 18204, 18209, 18214, 18234, 18250, 18268, 18292, 18308, 18319, 18343, 18379, 18397, 18413, 18504, 18547, 18553, 18584, 18603, 114, 114, 59, 1, 8657, 97, 114, 59, 1, 10595, 4, 2, 99, 114, 18220, 18230, 117, 116, 101, 5, 250, 1, 59, 18228, 1, 250, 114, 59, 1, 8593, 114, 4, 2, 99, 101, 18241, 18245, 121, 59, 1, 1118, 118, 101, 59, 1, 365, 4, 2, 105, 121, 18256, 18265, 114, 99, 5, 251, 1, 59, 18263, 1, 251, 59, 1, 1091, 4, 3, 97, 98, 104, 18276, 18281, 18287, 114, 114, 59, 1, 8645, 108, 97, 99, 59, 1, 369, 97, 114, 59, 1, 10606, 4, 2, 105, 114, 18298, 18304, 115, 104, 116, 59, 1, 10622, 59, 3, 55349, 56626, 114, 97, 118, 101, 5, 249, 1, 59, 18317, 1, 249, 4, 2, 97, 98, 18325, 18338, 114, 4, 2, 108, 114, 18332, 18335, 59, 1, 8639, 59, 1, 8638, 108, 107, 59, 1, 9600, 4, 2, 99, 116, 18349, 18374, 4, 2, 111, 114, 18355, 18369, 114, 110, 4, 2, 59, 101, 18363, 18365, 1, 8988, 114, 59, 1, 8988, 111, 112, 59, 1, 8975, 114, 105, 59, 1, 9720, 4, 2, 97, 108, 18385, 18390, 99, 114, 59, 1, 363, 5, 168, 1, 59, 18395, 1, 168, 4, 2, 103, 112, 18403, 18408, 111, 110, 59, 1, 371, 102, 59, 3, 55349, 56678, 4, 6, 97, 100, 104, 108, 115, 117, 18427, 18434, 18445, 18470, 18475, 18494, 114, 114, 111, 119, 59, 1, 8593, 111, 119, 110, 97, 114, 114, 111, 119, 59, 1, 8597, 97, 114, 112, 111, 111, 110, 4, 2, 108, 114, 18457, 18463, 101, 102, 116, 59, 1, 8639, 105, 103, 104, 116, 59, 1, 8638, 117, 115, 59, 1, 8846, 105, 4, 3, 59, 104, 108, 18484, 18486, 18489, 1, 965, 59, 1, 978, 111, 110, 59, 1, 965, 112, 97, 114, 114, 111, 119, 115, 59, 1, 8648, 4, 3, 99, 105, 116, 18512, 18537, 18542, 4, 2, 111, 114, 18518, 18532, 114, 110, 4, 2, 59, 101, 18526, 18528, 1, 8989, 114, 59, 1, 8989, 111, 112, 59, 1, 8974, 110, 103, 59, 1, 367, 114, 105, 59, 1, 9721, 99, 114, 59, 3, 55349, 56522, 4, 3, 100, 105, 114, 18561, 18566, 18572, 111, 116, 59, 1, 8944, 108, 100, 101, 59, 1, 361, 105, 4, 2, 59, 102, 18579, 18581, 1, 9653, 59, 1, 9652, 4, 2, 97, 109, 18590, 18595, 114, 114, 59, 1, 8648, 108, 5, 252, 1, 59, 18601, 1, 252, 97, 110, 103, 108, 101, 59, 1, 10663, 4, 15, 65, 66, 68, 97, 99, 100, 101, 102, 108, 110, 111, 112, 114, 115, 122, 18643, 18648, 18661, 18667, 18847, 18851, 18857, 18904, 18909, 18915, 18931, 18937, 18943, 18949, 18996, 114, 114, 59, 1, 8661, 97, 114, 4, 2, 59, 118, 18656, 18658, 1, 10984, 59, 1, 10985, 97, 115, 104, 59, 1, 8872, 4, 2, 110, 114, 18673, 18679, 103, 114, 116, 59, 1, 10652, 4, 7, 101, 107, 110, 112, 114, 115, 116, 18695, 18704, 18711, 18720, 18742, 18754, 18810, 112, 115, 105, 108, 111, 110, 59, 1, 1013, 97, 112, 112, 97, 59, 1, 1008, 111, 116, 104, 105, 110, 103, 59, 1, 8709, 4, 3, 104, 105, 114, 18728, 18732, 18735, 105, 59, 1, 981, 59, 1, 982, 111, 112, 116, 111, 59, 1, 8733, 4, 2, 59, 104, 18748, 18750, 1, 8597, 111, 59, 1, 1009, 4, 2, 105, 117, 18760, 18766, 103, 109, 97, 59, 1, 962, 4, 2, 98, 112, 18772, 18791, 115, 101, 116, 110, 101, 113, 4, 2, 59, 113, 18784, 18787, 3, 8842, 65024, 59, 3, 10955, 65024, 115, 101, 116, 110, 101, 113, 4, 2, 59, 113, 18803, 18806, 3, 8843, 65024, 59, 3, 10956, 65024, 4, 2, 104, 114, 18816, 18822, 101, 116, 97, 59, 1, 977, 105, 97, 110, 103, 108, 101, 4, 2, 108, 114, 18834, 18840, 101, 102, 116, 59, 1, 8882, 105, 103, 104, 116, 59, 1, 8883, 121, 59, 1, 1074, 97, 115, 104, 59, 1, 8866, 4, 3, 101, 108, 114, 18865, 18884, 18890, 4, 3, 59, 98, 101, 18873, 18875, 18880, 1, 8744, 97, 114, 59, 1, 8891, 113, 59, 1, 8794, 108, 105, 112, 59, 1, 8942, 4, 2, 98, 116, 18896, 18901, 97, 114, 59, 1, 124, 59, 1, 124, 114, 59, 3, 55349, 56627, 116, 114, 105, 59, 1, 8882, 115, 117, 4, 2, 98, 112, 18923, 18927, 59, 3, 8834, 8402, 59, 3, 8835, 8402, 112, 102, 59, 3, 55349, 56679, 114, 111, 112, 59, 1, 8733, 116, 114, 105, 59, 1, 8883, 4, 2, 99, 117, 18955, 18960, 114, 59, 3, 55349, 56523, 4, 2, 98, 112, 18966, 18981, 110, 4, 2, 69, 101, 18973, 18977, 59, 3, 10955, 65024, 59, 3, 8842, 65024, 110, 4, 2, 69, 101, 18988, 18992, 59, 3, 10956, 65024, 59, 3, 8843, 65024, 105, 103, 122, 97, 103, 59, 1, 10650, 4, 7, 99, 101, 102, 111, 112, 114, 115, 19020, 19026, 19061, 19066, 19072, 19075, 19089, 105, 114, 99, 59, 1, 373, 4, 2, 100, 105, 19032, 19055, 4, 2, 98, 103, 19038, 19043, 97, 114, 59, 1, 10847, 101, 4, 2, 59, 113, 19050, 19052, 1, 8743, 59, 1, 8793, 101, 114, 112, 59, 1, 8472, 114, 59, 3, 55349, 56628, 112, 102, 59, 3, 55349, 56680, 59, 1, 8472, 4, 2, 59, 101, 19081, 19083, 1, 8768, 97, 116, 104, 59, 1, 8768, 99, 114, 59, 3, 55349, 56524, 4, 14, 99, 100, 102, 104, 105, 108, 109, 110, 111, 114, 115, 117, 118, 119, 19125, 19146, 19152, 19157, 19173, 19176, 19192, 19197, 19202, 19236, 19252, 19269, 19286, 19291, 4, 3, 97, 105, 117, 19133, 19137, 19142, 112, 59, 1, 8898, 114, 99, 59, 1, 9711, 112, 59, 1, 8899, 116, 114, 105, 59, 1, 9661, 114, 59, 3, 55349, 56629, 4, 2, 65, 97, 19163, 19168, 114, 114, 59, 1, 10234, 114, 114, 59, 1, 10231, 59, 1, 958, 4, 2, 65, 97, 19182, 19187, 114, 114, 59, 1, 10232, 114, 114, 59, 1, 10229, 97, 112, 59, 1, 10236, 105, 115, 59, 1, 8955, 4, 3, 100, 112, 116, 19210, 19215, 19230, 111, 116, 59, 1, 10752, 4, 2, 102, 108, 19221, 19225, 59, 3, 55349, 56681, 117, 115, 59, 1, 10753, 105, 109, 101, 59, 1, 10754, 4, 2, 65, 97, 19242, 19247, 114, 114, 59, 1, 10233, 114, 114, 59, 1, 10230, 4, 2, 99, 113, 19258, 19263, 114, 59, 3, 55349, 56525, 99, 117, 112, 59, 1, 10758, 4, 2, 112, 116, 19275, 19281, 108, 117, 115, 59, 1, 10756, 114, 105, 59, 1, 9651, 101, 101, 59, 1, 8897, 101, 100, 103, 101, 59, 1, 8896, 4, 8, 97, 99, 101, 102, 105, 111, 115, 117, 19316, 19335, 19349, 19357, 19362, 19367, 19373, 19379, 99, 4, 2, 117, 121, 19323, 19332, 116, 101, 5, 253, 1, 59, 19330, 1, 253, 59, 1, 1103, 4, 2, 105, 121, 19341, 19346, 114, 99, 59, 1, 375, 59, 1, 1099, 110, 5, 165, 1, 59, 19355, 1, 165, 114, 59, 3, 55349, 56630, 99, 121, 59, 1, 1111, 112, 102, 59, 3, 55349, 56682, 99, 114, 59, 3, 55349, 56526, 4, 2, 99, 109, 19385, 19389, 121, 59, 1, 1102, 108, 5, 255, 1, 59, 19395, 1, 255, 4, 10, 97, 99, 100, 101, 102, 104, 105, 111, 115, 119, 19419, 19426, 19441, 19446, 19462, 19467, 19472, 19480, 19486, 19492, 99, 117, 116, 101, 59, 1, 378, 4, 2, 97, 121, 19432, 19438, 114, 111, 110, 59, 1, 382, 59, 1, 1079, 111, 116, 59, 1, 380, 4, 2, 101, 116, 19452, 19458, 116, 114, 102, 59, 1, 8488, 97, 59, 1, 950, 114, 59, 3, 55349, 56631, 99, 121, 59, 1, 1078, 103, 114, 97, 114, 114, 59, 1, 8669, 112, 102, 59, 3, 55349, 56683, 99, 114, 59, 3, 55349, 56527, 4, 2, 106, 110, 19498, 19501, 59, 1, 8205, 106, 59, 1, 8204]);
const Preprocessor = preprocessor;
const unicode$1 = unicode$3;
const neTree = namedEntityData;
const ERR$1 = errorCodes;
const $$7 = unicode$1.CODE_POINTS;
const $$ = unicode$1.CODE_POINT_SEQUENCES;
const C1_CONTROLS_REFERENCE_REPLACEMENTS = {
  128: 8364,
  130: 8218,
  131: 402,
  132: 8222,
  133: 8230,
  134: 8224,
  135: 8225,
  136: 710,
  137: 8240,
  138: 352,
  139: 8249,
  140: 338,
  142: 381,
  145: 8216,
  146: 8217,
  147: 8220,
  148: 8221,
  149: 8226,
  150: 8211,
  151: 8212,
  152: 732,
  153: 8482,
  154: 353,
  155: 8250,
  156: 339,
  158: 382,
  159: 376
};
const HAS_DATA_FLAG = 1 << 0;
const DATA_DUPLET_FLAG = 1 << 1;
const HAS_BRANCHES_FLAG = 1 << 2;
const MAX_BRANCH_MARKER_VALUE = HAS_DATA_FLAG | DATA_DUPLET_FLAG | HAS_BRANCHES_FLAG;
const DATA_STATE = "DATA_STATE";
const RCDATA_STATE = "RCDATA_STATE";
const RAWTEXT_STATE = "RAWTEXT_STATE";
const SCRIPT_DATA_STATE = "SCRIPT_DATA_STATE";
const PLAINTEXT_STATE = "PLAINTEXT_STATE";
const TAG_OPEN_STATE = "TAG_OPEN_STATE";
const END_TAG_OPEN_STATE = "END_TAG_OPEN_STATE";
const TAG_NAME_STATE = "TAG_NAME_STATE";
const RCDATA_LESS_THAN_SIGN_STATE = "RCDATA_LESS_THAN_SIGN_STATE";
const RCDATA_END_TAG_OPEN_STATE = "RCDATA_END_TAG_OPEN_STATE";
const RCDATA_END_TAG_NAME_STATE = "RCDATA_END_TAG_NAME_STATE";
const RAWTEXT_LESS_THAN_SIGN_STATE = "RAWTEXT_LESS_THAN_SIGN_STATE";
const RAWTEXT_END_TAG_OPEN_STATE = "RAWTEXT_END_TAG_OPEN_STATE";
const RAWTEXT_END_TAG_NAME_STATE = "RAWTEXT_END_TAG_NAME_STATE";
const SCRIPT_DATA_LESS_THAN_SIGN_STATE = "SCRIPT_DATA_LESS_THAN_SIGN_STATE";
const SCRIPT_DATA_END_TAG_OPEN_STATE = "SCRIPT_DATA_END_TAG_OPEN_STATE";
const SCRIPT_DATA_END_TAG_NAME_STATE = "SCRIPT_DATA_END_TAG_NAME_STATE";
const SCRIPT_DATA_ESCAPE_START_STATE = "SCRIPT_DATA_ESCAPE_START_STATE";
const SCRIPT_DATA_ESCAPE_START_DASH_STATE = "SCRIPT_DATA_ESCAPE_START_DASH_STATE";
const SCRIPT_DATA_ESCAPED_STATE = "SCRIPT_DATA_ESCAPED_STATE";
const SCRIPT_DATA_ESCAPED_DASH_STATE = "SCRIPT_DATA_ESCAPED_DASH_STATE";
const SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = "SCRIPT_DATA_ESCAPED_DASH_DASH_STATE";
const SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = "SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE";
const SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = "SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE";
const SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = "SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE";
const SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = "SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE";
const SCRIPT_DATA_DOUBLE_ESCAPED_STATE = "SCRIPT_DATA_DOUBLE_ESCAPED_STATE";
const SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE";
const SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE";
const SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = "SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE";
const SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = "SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE";
const BEFORE_ATTRIBUTE_NAME_STATE = "BEFORE_ATTRIBUTE_NAME_STATE";
const ATTRIBUTE_NAME_STATE = "ATTRIBUTE_NAME_STATE";
const AFTER_ATTRIBUTE_NAME_STATE = "AFTER_ATTRIBUTE_NAME_STATE";
const BEFORE_ATTRIBUTE_VALUE_STATE = "BEFORE_ATTRIBUTE_VALUE_STATE";
const ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = "ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE";
const ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = "ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE";
const ATTRIBUTE_VALUE_UNQUOTED_STATE = "ATTRIBUTE_VALUE_UNQUOTED_STATE";
const AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = "AFTER_ATTRIBUTE_VALUE_QUOTED_STATE";
const SELF_CLOSING_START_TAG_STATE = "SELF_CLOSING_START_TAG_STATE";
const BOGUS_COMMENT_STATE = "BOGUS_COMMENT_STATE";
const MARKUP_DECLARATION_OPEN_STATE = "MARKUP_DECLARATION_OPEN_STATE";
const COMMENT_START_STATE = "COMMENT_START_STATE";
const COMMENT_START_DASH_STATE = "COMMENT_START_DASH_STATE";
const COMMENT_STATE = "COMMENT_STATE";
const COMMENT_LESS_THAN_SIGN_STATE = "COMMENT_LESS_THAN_SIGN_STATE";
const COMMENT_LESS_THAN_SIGN_BANG_STATE = "COMMENT_LESS_THAN_SIGN_BANG_STATE";
const COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE = "COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE";
const COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE = "COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE";
const COMMENT_END_DASH_STATE = "COMMENT_END_DASH_STATE";
const COMMENT_END_STATE = "COMMENT_END_STATE";
const COMMENT_END_BANG_STATE = "COMMENT_END_BANG_STATE";
const DOCTYPE_STATE = "DOCTYPE_STATE";
const BEFORE_DOCTYPE_NAME_STATE = "BEFORE_DOCTYPE_NAME_STATE";
const DOCTYPE_NAME_STATE = "DOCTYPE_NAME_STATE";
const AFTER_DOCTYPE_NAME_STATE = "AFTER_DOCTYPE_NAME_STATE";
const AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE = "AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE";
const BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = "BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE";
const DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = "DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE";
const DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = "DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE";
const AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE = "AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE";
const BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = "BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE";
const AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE = "AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE";
const BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = "BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE";
const DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = "DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE";
const DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = "DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE";
const AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = "AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE";
const BOGUS_DOCTYPE_STATE = "BOGUS_DOCTYPE_STATE";
const CDATA_SECTION_STATE = "CDATA_SECTION_STATE";
const CDATA_SECTION_BRACKET_STATE = "CDATA_SECTION_BRACKET_STATE";
const CDATA_SECTION_END_STATE = "CDATA_SECTION_END_STATE";
const CHARACTER_REFERENCE_STATE = "CHARACTER_REFERENCE_STATE";
const NAMED_CHARACTER_REFERENCE_STATE = "NAMED_CHARACTER_REFERENCE_STATE";
const AMBIGUOUS_AMPERSAND_STATE = "AMBIGUOS_AMPERSAND_STATE";
const NUMERIC_CHARACTER_REFERENCE_STATE = "NUMERIC_CHARACTER_REFERENCE_STATE";
const HEXADEMICAL_CHARACTER_REFERENCE_START_STATE = "HEXADEMICAL_CHARACTER_REFERENCE_START_STATE";
const DECIMAL_CHARACTER_REFERENCE_START_STATE = "DECIMAL_CHARACTER_REFERENCE_START_STATE";
const HEXADEMICAL_CHARACTER_REFERENCE_STATE = "HEXADEMICAL_CHARACTER_REFERENCE_STATE";
const DECIMAL_CHARACTER_REFERENCE_STATE = "DECIMAL_CHARACTER_REFERENCE_STATE";
const NUMERIC_CHARACTER_REFERENCE_END_STATE = "NUMERIC_CHARACTER_REFERENCE_END_STATE";
function isWhitespace(cp) {
  return cp === $$7.SPACE || cp === $$7.LINE_FEED || cp === $$7.TABULATION || cp === $$7.FORM_FEED;
}
function isAsciiDigit(cp) {
  return cp >= $$7.DIGIT_0 && cp <= $$7.DIGIT_9;
}
function isAsciiUpper(cp) {
  return cp >= $$7.LATIN_CAPITAL_A && cp <= $$7.LATIN_CAPITAL_Z;
}
function isAsciiLower(cp) {
  return cp >= $$7.LATIN_SMALL_A && cp <= $$7.LATIN_SMALL_Z;
}
function isAsciiLetter(cp) {
  return isAsciiLower(cp) || isAsciiUpper(cp);
}
function isAsciiAlphaNumeric(cp) {
  return isAsciiLetter(cp) || isAsciiDigit(cp);
}
function isAsciiUpperHexDigit(cp) {
  return cp >= $$7.LATIN_CAPITAL_A && cp <= $$7.LATIN_CAPITAL_F;
}
function isAsciiLowerHexDigit(cp) {
  return cp >= $$7.LATIN_SMALL_A && cp <= $$7.LATIN_SMALL_F;
}
function isAsciiHexDigit(cp) {
  return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);
}
function toAsciiLowerCodePoint(cp) {
  return cp + 32;
}
function toChar(cp) {
  if (cp <= 65535) {
    return String.fromCharCode(cp);
  }
  cp -= 65536;
  return String.fromCharCode(cp >>> 10 & 1023 | 55296) + String.fromCharCode(56320 | cp & 1023);
}
function toAsciiLowerChar(cp) {
  return String.fromCharCode(toAsciiLowerCodePoint(cp));
}
function findNamedEntityTreeBranch(nodeIx, cp) {
  const branchCount = neTree[++nodeIx];
  let lo = ++nodeIx;
  let hi = lo + branchCount - 1;
  while (lo <= hi) {
    const mid = lo + hi >>> 1;
    const midCp = neTree[mid];
    if (midCp < cp) {
      lo = mid + 1;
    } else if (midCp > cp) {
      hi = mid - 1;
    } else {
      return neTree[mid + branchCount];
    }
  }
  return -1;
}
class Tokenizer$4 {
  constructor() {
    this.preprocessor = new Preprocessor();
    this.tokenQueue = [];
    this.allowCDATA = false;
    this.state = DATA_STATE;
    this.returnState = "";
    this.charRefCode = -1;
    this.tempBuff = [];
    this.lastStartTagName = "";
    this.consumedAfterSnapshot = -1;
    this.active = false;
    this.currentCharacterToken = null;
    this.currentToken = null;
    this.currentAttr = null;
  }
  _err() {
  }
  _errOnNextCodePoint(err) {
    this._consume();
    this._err(err);
    this._unconsume();
  }
  getNextToken() {
    while (!this.tokenQueue.length && this.active) {
      this.consumedAfterSnapshot = 0;
      const cp = this._consume();
      if (!this._ensureHibernation()) {
        this[this.state](cp);
      }
    }
    return this.tokenQueue.shift();
  }
  write(chunk, isLastChunk) {
    this.active = true;
    this.preprocessor.write(chunk, isLastChunk);
  }
  insertHtmlAtCurrentPos(chunk) {
    this.active = true;
    this.preprocessor.insertHtmlAtCurrentPos(chunk);
  }
  _ensureHibernation() {
    if (this.preprocessor.endOfChunkHit) {
      for (; this.consumedAfterSnapshot > 0; this.consumedAfterSnapshot--) {
        this.preprocessor.retreat();
      }
      this.active = false;
      this.tokenQueue.push({type: Tokenizer$4.HIBERNATION_TOKEN});
      return true;
    }
    return false;
  }
  _consume() {
    this.consumedAfterSnapshot++;
    return this.preprocessor.advance();
  }
  _unconsume() {
    this.consumedAfterSnapshot--;
    this.preprocessor.retreat();
  }
  _reconsumeInState(state) {
    this.state = state;
    this._unconsume();
  }
  _consumeSequenceIfMatch(pattern, startCp, caseSensitive) {
    let consumedCount = 0;
    let isMatch = true;
    const patternLength = pattern.length;
    let patternPos = 0;
    let cp = startCp;
    let patternCp = void 0;
    for (; patternPos < patternLength; patternPos++) {
      if (patternPos > 0) {
        cp = this._consume();
        consumedCount++;
      }
      if (cp === $$7.EOF) {
        isMatch = false;
        break;
      }
      patternCp = pattern[patternPos];
      if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {
        isMatch = false;
        break;
      }
    }
    if (!isMatch) {
      while (consumedCount--) {
        this._unconsume();
      }
    }
    return isMatch;
  }
  _isTempBufferEqualToScriptString() {
    if (this.tempBuff.length !== $$.SCRIPT_STRING.length) {
      return false;
    }
    for (let i2 = 0; i2 < this.tempBuff.length; i2++) {
      if (this.tempBuff[i2] !== $$.SCRIPT_STRING[i2]) {
        return false;
      }
    }
    return true;
  }
  _createStartTagToken() {
    this.currentToken = {
      type: Tokenizer$4.START_TAG_TOKEN,
      tagName: "",
      selfClosing: false,
      ackSelfClosing: false,
      attrs: []
    };
  }
  _createEndTagToken() {
    this.currentToken = {
      type: Tokenizer$4.END_TAG_TOKEN,
      tagName: "",
      selfClosing: false,
      attrs: []
    };
  }
  _createCommentToken() {
    this.currentToken = {
      type: Tokenizer$4.COMMENT_TOKEN,
      data: ""
    };
  }
  _createDoctypeToken(initialName) {
    this.currentToken = {
      type: Tokenizer$4.DOCTYPE_TOKEN,
      name: initialName,
      forceQuirks: false,
      publicId: null,
      systemId: null
    };
  }
  _createCharacterToken(type, ch) {
    this.currentCharacterToken = {
      type,
      chars: ch
    };
  }
  _createEOFToken() {
    this.currentToken = {type: Tokenizer$4.EOF_TOKEN};
  }
  _createAttr(attrNameFirstCh) {
    this.currentAttr = {
      name: attrNameFirstCh,
      value: ""
    };
  }
  _leaveAttrName(toState) {
    if (Tokenizer$4.getTokenAttr(this.currentToken, this.currentAttr.name) === null) {
      this.currentToken.attrs.push(this.currentAttr);
    } else {
      this._err(ERR$1.duplicateAttribute);
    }
    this.state = toState;
  }
  _leaveAttrValue(toState) {
    this.state = toState;
  }
  _emitCurrentToken() {
    this._emitCurrentCharacterToken();
    const ct = this.currentToken;
    this.currentToken = null;
    if (ct.type === Tokenizer$4.START_TAG_TOKEN) {
      this.lastStartTagName = ct.tagName;
    } else if (ct.type === Tokenizer$4.END_TAG_TOKEN) {
      if (ct.attrs.length > 0) {
        this._err(ERR$1.endTagWithAttributes);
      }
      if (ct.selfClosing) {
        this._err(ERR$1.endTagWithTrailingSolidus);
      }
    }
    this.tokenQueue.push(ct);
  }
  _emitCurrentCharacterToken() {
    if (this.currentCharacterToken) {
      this.tokenQueue.push(this.currentCharacterToken);
      this.currentCharacterToken = null;
    }
  }
  _emitEOFToken() {
    this._createEOFToken();
    this._emitCurrentToken();
  }
  _appendCharToCurrentCharacterToken(type, ch) {
    if (this.currentCharacterToken && this.currentCharacterToken.type !== type) {
      this._emitCurrentCharacterToken();
    }
    if (this.currentCharacterToken) {
      this.currentCharacterToken.chars += ch;
    } else {
      this._createCharacterToken(type, ch);
    }
  }
  _emitCodePoint(cp) {
    let type = Tokenizer$4.CHARACTER_TOKEN;
    if (isWhitespace(cp)) {
      type = Tokenizer$4.WHITESPACE_CHARACTER_TOKEN;
    } else if (cp === $$7.NULL) {
      type = Tokenizer$4.NULL_CHARACTER_TOKEN;
    }
    this._appendCharToCurrentCharacterToken(type, toChar(cp));
  }
  _emitSeveralCodePoints(codePoints) {
    for (let i2 = 0; i2 < codePoints.length; i2++) {
      this._emitCodePoint(codePoints[i2]);
    }
  }
  _emitChars(ch) {
    this._appendCharToCurrentCharacterToken(Tokenizer$4.CHARACTER_TOKEN, ch);
  }
  _matchNamedCharacterReference(startCp) {
    let result = null;
    let excess = 1;
    let i2 = findNamedEntityTreeBranch(0, startCp);
    this.tempBuff.push(startCp);
    while (i2 > -1) {
      const current = neTree[i2];
      const inNode = current < MAX_BRANCH_MARKER_VALUE;
      const nodeWithData = inNode && current & HAS_DATA_FLAG;
      if (nodeWithData) {
        result = current & DATA_DUPLET_FLAG ? [neTree[++i2], neTree[++i2]] : [neTree[++i2]];
        excess = 0;
      }
      const cp = this._consume();
      this.tempBuff.push(cp);
      excess++;
      if (cp === $$7.EOF) {
        break;
      }
      if (inNode) {
        i2 = current & HAS_BRANCHES_FLAG ? findNamedEntityTreeBranch(i2, cp) : -1;
      } else {
        i2 = cp === current ? ++i2 : -1;
      }
    }
    while (excess--) {
      this.tempBuff.pop();
      this._unconsume();
    }
    return result;
  }
  _isCharacterReferenceInAttribute() {
    return this.returnState === ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE || this.returnState === ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE || this.returnState === ATTRIBUTE_VALUE_UNQUOTED_STATE;
  }
  _isCharacterReferenceAttributeQuirk(withSemicolon) {
    if (!withSemicolon && this._isCharacterReferenceInAttribute()) {
      const nextCp = this._consume();
      this._unconsume();
      return nextCp === $$7.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);
    }
    return false;
  }
  _flushCodePointsConsumedAsCharacterReference() {
    if (this._isCharacterReferenceInAttribute()) {
      for (let i2 = 0; i2 < this.tempBuff.length; i2++) {
        this.currentAttr.value += toChar(this.tempBuff[i2]);
      }
    } else {
      this._emitSeveralCodePoints(this.tempBuff);
    }
    this.tempBuff = [];
  }
  [DATA_STATE](cp) {
    this.preprocessor.dropParsedChunk();
    if (cp === $$7.LESS_THAN_SIGN) {
      this.state = TAG_OPEN_STATE;
    } else if (cp === $$7.AMPERSAND) {
      this.returnState = DATA_STATE;
      this.state = CHARACTER_REFERENCE_STATE;
    } else if (cp === $$7.NULL) {
      this._err(ERR$1.unexpectedNullCharacter);
      this._emitCodePoint(cp);
    } else if (cp === $$7.EOF) {
      this._emitEOFToken();
    } else {
      this._emitCodePoint(cp);
    }
  }
  [RCDATA_STATE](cp) {
    this.preprocessor.dropParsedChunk();
    if (cp === $$7.AMPERSAND) {
      this.returnState = RCDATA_STATE;
      this.state = CHARACTER_REFERENCE_STATE;
    } else if (cp === $$7.LESS_THAN_SIGN) {
      this.state = RCDATA_LESS_THAN_SIGN_STATE;
    } else if (cp === $$7.NULL) {
      this._err(ERR$1.unexpectedNullCharacter);
      this._emitChars(unicode$1.REPLACEMENT_CHARACTER);
    } else if (cp === $$7.EOF) {
      this._emitEOFToken();
    } else {
      this._emitCodePoint(cp);
    }
  }
  [RAWTEXT_STATE](cp) {
    this.preprocessor.dropParsedChunk();
    if (cp === $$7.LESS_THAN_SIGN) {
      this.state = RAWTEXT_LESS_THAN_SIGN_STATE;
    } else if (cp === $$7.NULL) {
      this._err(ERR$1.unexpectedNullCharacter);
      this._emitChars(unicode$1.REPLACEMENT_CHARACTER);
    } else if (cp === $$7.EOF) {
      this._emitEOFToken();
    } else {
      this._emitCodePoint(cp);
    }
  }
  [SCRIPT_DATA_STATE](cp) {
    this.preprocessor.dropParsedChunk();
    if (cp === $$7.LESS_THAN_SIGN) {
      this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE;
    } else if (cp === $$7.NULL) {
      this._err(ERR$1.unexpectedNullCharacter);
      this._emitChars(unicode$1.REPLACEMENT_CHARACTER);
    } else if (cp === $$7.EOF) {
      this._emitEOFToken();
    } else {
      this._emitCodePoint(cp);
    }
  }
  [PLAINTEXT_STATE](cp) {
    this.preprocessor.dropParsedChunk();
    if (cp === $$7.NULL) {
      this._err(ERR$1.unexpectedNullCharacter);
      this._emitChars(unicode$1.REPLACEMENT_CHARACTER);
    } else if (cp === $$7.EOF) {
      this._emitEOFToken();
    } else {
      this._emitCodePoint(cp);
    }
  }
  [TAG_OPEN_STATE](cp) {
    if (cp === $$7.EXCLAMATION_MARK) {
      this.state = MARKUP_DECLARATION_OPEN_STATE;
    } else if (cp === $$7.SOLIDUS) {
      this.state = END_TAG_OPEN_STATE;
    } else if (isAsciiLetter(cp)) {
      this._createStartTagToken();
      this._reconsumeInState(TAG_NAME_STATE);
    } else if (cp === $$7.QUESTION_MARK) {
      this._err(ERR$1.unexpectedQuestionMarkInsteadOfTagName);
      this._createCommentToken();
      this._reconsumeInState(BOGUS_COMMENT_STATE);
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofBeforeTagName);
      this._emitChars("<");
      this._emitEOFToken();
    } else {
      this._err(ERR$1.invalidFirstCharacterOfTagName);
      this._emitChars("<");
      this._reconsumeInState(DATA_STATE);
    }
  }
  [END_TAG_OPEN_STATE](cp) {
    if (isAsciiLetter(cp)) {
      this._createEndTagToken();
      this._reconsumeInState(TAG_NAME_STATE);
    } else if (cp === $$7.GREATER_THAN_SIGN) {
      this._err(ERR$1.missingEndTagName);
      this.state = DATA_STATE;
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofBeforeTagName);
      this._emitChars("</");
      this._emitEOFToken();
    } else {
      this._err(ERR$1.invalidFirstCharacterOfTagName);
      this._createCommentToken();
      this._reconsumeInState(BOGUS_COMMENT_STATE);
    }
  }
  [TAG_NAME_STATE](cp) {
    if (isWhitespace(cp)) {
      this.state = BEFORE_ATTRIBUTE_NAME_STATE;
    } else if (cp === $$7.SOLIDUS) {
      this.state = SELF_CLOSING_START_TAG_STATE;
    } else if (cp === $$7.GREATER_THAN_SIGN) {
      this.state = DATA_STATE;
      this._emitCurrentToken();
    } else if (isAsciiUpper(cp)) {
      this.currentToken.tagName += toAsciiLowerChar(cp);
    } else if (cp === $$7.NULL) {
      this._err(ERR$1.unexpectedNullCharacter);
      this.currentToken.tagName += unicode$1.REPLACEMENT_CHARACTER;
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInTag);
      this._emitEOFToken();
    } else {
      this.currentToken.tagName += toChar(cp);
    }
  }
  [RCDATA_LESS_THAN_SIGN_STATE](cp) {
    if (cp === $$7.SOLIDUS) {
      this.tempBuff = [];
      this.state = RCDATA_END_TAG_OPEN_STATE;
    } else {
      this._emitChars("<");
      this._reconsumeInState(RCDATA_STATE);
    }
  }
  [RCDATA_END_TAG_OPEN_STATE](cp) {
    if (isAsciiLetter(cp)) {
      this._createEndTagToken();
      this._reconsumeInState(RCDATA_END_TAG_NAME_STATE);
    } else {
      this._emitChars("</");
      this._reconsumeInState(RCDATA_STATE);
    }
  }
  [RCDATA_END_TAG_NAME_STATE](cp) {
    if (isAsciiUpper(cp)) {
      this.currentToken.tagName += toAsciiLowerChar(cp);
      this.tempBuff.push(cp);
    } else if (isAsciiLower(cp)) {
      this.currentToken.tagName += toChar(cp);
      this.tempBuff.push(cp);
    } else {
      if (this.lastStartTagName === this.currentToken.tagName) {
        if (isWhitespace(cp)) {
          this.state = BEFORE_ATTRIBUTE_NAME_STATE;
          return;
        }
        if (cp === $$7.SOLIDUS) {
          this.state = SELF_CLOSING_START_TAG_STATE;
          return;
        }
        if (cp === $$7.GREATER_THAN_SIGN) {
          this.state = DATA_STATE;
          this._emitCurrentToken();
          return;
        }
      }
      this._emitChars("</");
      this._emitSeveralCodePoints(this.tempBuff);
      this._reconsumeInState(RCDATA_STATE);
    }
  }
  [RAWTEXT_LESS_THAN_SIGN_STATE](cp) {
    if (cp === $$7.SOLIDUS) {
      this.tempBuff = [];
      this.state = RAWTEXT_END_TAG_OPEN_STATE;
    } else {
      this._emitChars("<");
      this._reconsumeInState(RAWTEXT_STATE);
    }
  }
  [RAWTEXT_END_TAG_OPEN_STATE](cp) {
    if (isAsciiLetter(cp)) {
      this._createEndTagToken();
      this._reconsumeInState(RAWTEXT_END_TAG_NAME_STATE);
    } else {
      this._emitChars("</");
      this._reconsumeInState(RAWTEXT_STATE);
    }
  }
  [RAWTEXT_END_TAG_NAME_STATE](cp) {
    if (isAsciiUpper(cp)) {
      this.currentToken.tagName += toAsciiLowerChar(cp);
      this.tempBuff.push(cp);
    } else if (isAsciiLower(cp)) {
      this.currentToken.tagName += toChar(cp);
      this.tempBuff.push(cp);
    } else {
      if (this.lastStartTagName === this.currentToken.tagName) {
        if (isWhitespace(cp)) {
          this.state = BEFORE_ATTRIBUTE_NAME_STATE;
          return;
        }
        if (cp === $$7.SOLIDUS) {
          this.state = SELF_CLOSING_START_TAG_STATE;
          return;
        }
        if (cp === $$7.GREATER_THAN_SIGN) {
          this._emitCurrentToken();
          this.state = DATA_STATE;
          return;
        }
      }
      this._emitChars("</");
      this._emitSeveralCodePoints(this.tempBuff);
      this._reconsumeInState(RAWTEXT_STATE);
    }
  }
  [SCRIPT_DATA_LESS_THAN_SIGN_STATE](cp) {
    if (cp === $$7.SOLIDUS) {
      this.tempBuff = [];
      this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;
    } else if (cp === $$7.EXCLAMATION_MARK) {
      this.state = SCRIPT_DATA_ESCAPE_START_STATE;
      this._emitChars("<!");
    } else {
      this._emitChars("<");
      this._reconsumeInState(SCRIPT_DATA_STATE);
    }
  }
  [SCRIPT_DATA_END_TAG_OPEN_STATE](cp) {
    if (isAsciiLetter(cp)) {
      this._createEndTagToken();
      this._reconsumeInState(SCRIPT_DATA_END_TAG_NAME_STATE);
    } else {
      this._emitChars("</");
      this._reconsumeInState(SCRIPT_DATA_STATE);
    }
  }
  [SCRIPT_DATA_END_TAG_NAME_STATE](cp) {
    if (isAsciiUpper(cp)) {
      this.currentToken.tagName += toAsciiLowerChar(cp);
      this.tempBuff.push(cp);
    } else if (isAsciiLower(cp)) {
      this.currentToken.tagName += toChar(cp);
      this.tempBuff.push(cp);
    } else {
      if (this.lastStartTagName === this.currentToken.tagName) {
        if (isWhitespace(cp)) {
          this.state = BEFORE_ATTRIBUTE_NAME_STATE;
          return;
        } else if (cp === $$7.SOLIDUS) {
          this.state = SELF_CLOSING_START_TAG_STATE;
          return;
        } else if (cp === $$7.GREATER_THAN_SIGN) {
          this._emitCurrentToken();
          this.state = DATA_STATE;
          return;
        }
      }
      this._emitChars("</");
      this._emitSeveralCodePoints(this.tempBuff);
      this._reconsumeInState(SCRIPT_DATA_STATE);
    }
  }
  [SCRIPT_DATA_ESCAPE_START_STATE](cp) {
    if (cp === $$7.HYPHEN_MINUS) {
      this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;
      this._emitChars("-");
    } else {
      this._reconsumeInState(SCRIPT_DATA_STATE);
    }
  }
  [SCRIPT_DATA_ESCAPE_START_DASH_STATE](cp) {
    if (cp === $$7.HYPHEN_MINUS) {
      this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;
      this._emitChars("-");
    } else {
      this._reconsumeInState(SCRIPT_DATA_STATE);
    }
  }
  [SCRIPT_DATA_ESCAPED_STATE](cp) {
    if (cp === $$7.HYPHEN_MINUS) {
      this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;
      this._emitChars("-");
    } else if (cp === $$7.LESS_THAN_SIGN) {
      this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;
    } else if (cp === $$7.NULL) {
      this._err(ERR$1.unexpectedNullCharacter);
      this._emitChars(unicode$1.REPLACEMENT_CHARACTER);
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInScriptHtmlCommentLikeText);
      this._emitEOFToken();
    } else {
      this._emitCodePoint(cp);
    }
  }
  [SCRIPT_DATA_ESCAPED_DASH_STATE](cp) {
    if (cp === $$7.HYPHEN_MINUS) {
      this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;
      this._emitChars("-");
    } else if (cp === $$7.LESS_THAN_SIGN) {
      this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;
    } else if (cp === $$7.NULL) {
      this._err(ERR$1.unexpectedNullCharacter);
      this.state = SCRIPT_DATA_ESCAPED_STATE;
      this._emitChars(unicode$1.REPLACEMENT_CHARACTER);
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInScriptHtmlCommentLikeText);
      this._emitEOFToken();
    } else {
      this.state = SCRIPT_DATA_ESCAPED_STATE;
      this._emitCodePoint(cp);
    }
  }
  [SCRIPT_DATA_ESCAPED_DASH_DASH_STATE](cp) {
    if (cp === $$7.HYPHEN_MINUS) {
      this._emitChars("-");
    } else if (cp === $$7.LESS_THAN_SIGN) {
      this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;
    } else if (cp === $$7.GREATER_THAN_SIGN) {
      this.state = SCRIPT_DATA_STATE;
      this._emitChars(">");
    } else if (cp === $$7.NULL) {
      this._err(ERR$1.unexpectedNullCharacter);
      this.state = SCRIPT_DATA_ESCAPED_STATE;
      this._emitChars(unicode$1.REPLACEMENT_CHARACTER);
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInScriptHtmlCommentLikeText);
      this._emitEOFToken();
    } else {
      this.state = SCRIPT_DATA_ESCAPED_STATE;
      this._emitCodePoint(cp);
    }
  }
  [SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE](cp) {
    if (cp === $$7.SOLIDUS) {
      this.tempBuff = [];
      this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;
    } else if (isAsciiLetter(cp)) {
      this.tempBuff = [];
      this._emitChars("<");
      this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE);
    } else {
      this._emitChars("<");
      this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
    }
  }
  [SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE](cp) {
    if (isAsciiLetter(cp)) {
      this._createEndTagToken();
      this._reconsumeInState(SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE);
    } else {
      this._emitChars("</");
      this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
    }
  }
  [SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE](cp) {
    if (isAsciiUpper(cp)) {
      this.currentToken.tagName += toAsciiLowerChar(cp);
      this.tempBuff.push(cp);
    } else if (isAsciiLower(cp)) {
      this.currentToken.tagName += toChar(cp);
      this.tempBuff.push(cp);
    } else {
      if (this.lastStartTagName === this.currentToken.tagName) {
        if (isWhitespace(cp)) {
          this.state = BEFORE_ATTRIBUTE_NAME_STATE;
          return;
        }
        if (cp === $$7.SOLIDUS) {
          this.state = SELF_CLOSING_START_TAG_STATE;
          return;
        }
        if (cp === $$7.GREATER_THAN_SIGN) {
          this._emitCurrentToken();
          this.state = DATA_STATE;
          return;
        }
      }
      this._emitChars("</");
      this._emitSeveralCodePoints(this.tempBuff);
      this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
    }
  }
  [SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE](cp) {
    if (isWhitespace(cp) || cp === $$7.SOLIDUS || cp === $$7.GREATER_THAN_SIGN) {
      this.state = this._isTempBufferEqualToScriptString() ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE : SCRIPT_DATA_ESCAPED_STATE;
      this._emitCodePoint(cp);
    } else if (isAsciiUpper(cp)) {
      this.tempBuff.push(toAsciiLowerCodePoint(cp));
      this._emitCodePoint(cp);
    } else if (isAsciiLower(cp)) {
      this.tempBuff.push(cp);
      this._emitCodePoint(cp);
    } else {
      this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
    }
  }
  [SCRIPT_DATA_DOUBLE_ESCAPED_STATE](cp) {
    if (cp === $$7.HYPHEN_MINUS) {
      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;
      this._emitChars("-");
    } else if (cp === $$7.LESS_THAN_SIGN) {
      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
      this._emitChars("<");
    } else if (cp === $$7.NULL) {
      this._err(ERR$1.unexpectedNullCharacter);
      this._emitChars(unicode$1.REPLACEMENT_CHARACTER);
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInScriptHtmlCommentLikeText);
      this._emitEOFToken();
    } else {
      this._emitCodePoint(cp);
    }
  }
  [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE](cp) {
    if (cp === $$7.HYPHEN_MINUS) {
      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;
      this._emitChars("-");
    } else if (cp === $$7.LESS_THAN_SIGN) {
      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
      this._emitChars("<");
    } else if (cp === $$7.NULL) {
      this._err(ERR$1.unexpectedNullCharacter);
      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
      this._emitChars(unicode$1.REPLACEMENT_CHARACTER);
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInScriptHtmlCommentLikeText);
      this._emitEOFToken();
    } else {
      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
      this._emitCodePoint(cp);
    }
  }
  [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE](cp) {
    if (cp === $$7.HYPHEN_MINUS) {
      this._emitChars("-");
    } else if (cp === $$7.LESS_THAN_SIGN) {
      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
      this._emitChars("<");
    } else if (cp === $$7.GREATER_THAN_SIGN) {
      this.state = SCRIPT_DATA_STATE;
      this._emitChars(">");
    } else if (cp === $$7.NULL) {
      this._err(ERR$1.unexpectedNullCharacter);
      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
      this._emitChars(unicode$1.REPLACEMENT_CHARACTER);
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInScriptHtmlCommentLikeText);
      this._emitEOFToken();
    } else {
      this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
      this._emitCodePoint(cp);
    }
  }
  [SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE](cp) {
    if (cp === $$7.SOLIDUS) {
      this.tempBuff = [];
      this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;
      this._emitChars("/");
    } else {
      this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
    }
  }
  [SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE](cp) {
    if (isWhitespace(cp) || cp === $$7.SOLIDUS || cp === $$7.GREATER_THAN_SIGN) {
      this.state = this._isTempBufferEqualToScriptString() ? SCRIPT_DATA_ESCAPED_STATE : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
      this._emitCodePoint(cp);
    } else if (isAsciiUpper(cp)) {
      this.tempBuff.push(toAsciiLowerCodePoint(cp));
      this._emitCodePoint(cp);
    } else if (isAsciiLower(cp)) {
      this.tempBuff.push(cp);
      this._emitCodePoint(cp);
    } else {
      this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
    }
  }
  [BEFORE_ATTRIBUTE_NAME_STATE](cp) {
    if (isWhitespace(cp)) {
      return;
    }
    if (cp === $$7.SOLIDUS || cp === $$7.GREATER_THAN_SIGN || cp === $$7.EOF) {
      this._reconsumeInState(AFTER_ATTRIBUTE_NAME_STATE);
    } else if (cp === $$7.EQUALS_SIGN) {
      this._err(ERR$1.unexpectedEqualsSignBeforeAttributeName);
      this._createAttr("=");
      this.state = ATTRIBUTE_NAME_STATE;
    } else {
      this._createAttr("");
      this._reconsumeInState(ATTRIBUTE_NAME_STATE);
    }
  }
  [ATTRIBUTE_NAME_STATE](cp) {
    if (isWhitespace(cp) || cp === $$7.SOLIDUS || cp === $$7.GREATER_THAN_SIGN || cp === $$7.EOF) {
      this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE);
      this._unconsume();
    } else if (cp === $$7.EQUALS_SIGN) {
      this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE);
    } else if (isAsciiUpper(cp)) {
      this.currentAttr.name += toAsciiLowerChar(cp);
    } else if (cp === $$7.QUOTATION_MARK || cp === $$7.APOSTROPHE || cp === $$7.LESS_THAN_SIGN) {
      this._err(ERR$1.unexpectedCharacterInAttributeName);
      this.currentAttr.name += toChar(cp);
    } else if (cp === $$7.NULL) {
      this._err(ERR$1.unexpectedNullCharacter);
      this.currentAttr.name += unicode$1.REPLACEMENT_CHARACTER;
    } else {
      this.currentAttr.name += toChar(cp);
    }
  }
  [AFTER_ATTRIBUTE_NAME_STATE](cp) {
    if (isWhitespace(cp)) {
      return;
    }
    if (cp === $$7.SOLIDUS) {
      this.state = SELF_CLOSING_START_TAG_STATE;
    } else if (cp === $$7.EQUALS_SIGN) {
      this.state = BEFORE_ATTRIBUTE_VALUE_STATE;
    } else if (cp === $$7.GREATER_THAN_SIGN) {
      this.state = DATA_STATE;
      this._emitCurrentToken();
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInTag);
      this._emitEOFToken();
    } else {
      this._createAttr("");
      this._reconsumeInState(ATTRIBUTE_NAME_STATE);
    }
  }
  [BEFORE_ATTRIBUTE_VALUE_STATE](cp) {
    if (isWhitespace(cp)) {
      return;
    }
    if (cp === $$7.QUOTATION_MARK) {
      this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;
    } else if (cp === $$7.APOSTROPHE) {
      this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;
    } else if (cp === $$7.GREATER_THAN_SIGN) {
      this._err(ERR$1.missingAttributeValue);
      this.state = DATA_STATE;
      this._emitCurrentToken();
    } else {
      this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE);
    }
  }
  [ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE](cp) {
    if (cp === $$7.QUOTATION_MARK) {
      this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;
    } else if (cp === $$7.AMPERSAND) {
      this.returnState = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;
      this.state = CHARACTER_REFERENCE_STATE;
    } else if (cp === $$7.NULL) {
      this._err(ERR$1.unexpectedNullCharacter);
      this.currentAttr.value += unicode$1.REPLACEMENT_CHARACTER;
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInTag);
      this._emitEOFToken();
    } else {
      this.currentAttr.value += toChar(cp);
    }
  }
  [ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE](cp) {
    if (cp === $$7.APOSTROPHE) {
      this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;
    } else if (cp === $$7.AMPERSAND) {
      this.returnState = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;
      this.state = CHARACTER_REFERENCE_STATE;
    } else if (cp === $$7.NULL) {
      this._err(ERR$1.unexpectedNullCharacter);
      this.currentAttr.value += unicode$1.REPLACEMENT_CHARACTER;
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInTag);
      this._emitEOFToken();
    } else {
      this.currentAttr.value += toChar(cp);
    }
  }
  [ATTRIBUTE_VALUE_UNQUOTED_STATE](cp) {
    if (isWhitespace(cp)) {
      this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);
    } else if (cp === $$7.AMPERSAND) {
      this.returnState = ATTRIBUTE_VALUE_UNQUOTED_STATE;
      this.state = CHARACTER_REFERENCE_STATE;
    } else if (cp === $$7.GREATER_THAN_SIGN) {
      this._leaveAttrValue(DATA_STATE);
      this._emitCurrentToken();
    } else if (cp === $$7.NULL) {
      this._err(ERR$1.unexpectedNullCharacter);
      this.currentAttr.value += unicode$1.REPLACEMENT_CHARACTER;
    } else if (cp === $$7.QUOTATION_MARK || cp === $$7.APOSTROPHE || cp === $$7.LESS_THAN_SIGN || cp === $$7.EQUALS_SIGN || cp === $$7.GRAVE_ACCENT) {
      this._err(ERR$1.unexpectedCharacterInUnquotedAttributeValue);
      this.currentAttr.value += toChar(cp);
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInTag);
      this._emitEOFToken();
    } else {
      this.currentAttr.value += toChar(cp);
    }
  }
  [AFTER_ATTRIBUTE_VALUE_QUOTED_STATE](cp) {
    if (isWhitespace(cp)) {
      this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);
    } else if (cp === $$7.SOLIDUS) {
      this._leaveAttrValue(SELF_CLOSING_START_TAG_STATE);
    } else if (cp === $$7.GREATER_THAN_SIGN) {
      this._leaveAttrValue(DATA_STATE);
      this._emitCurrentToken();
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInTag);
      this._emitEOFToken();
    } else {
      this._err(ERR$1.missingWhitespaceBetweenAttributes);
      this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
    }
  }
  [SELF_CLOSING_START_TAG_STATE](cp) {
    if (cp === $$7.GREATER_THAN_SIGN) {
      this.currentToken.selfClosing = true;
      this.state = DATA_STATE;
      this._emitCurrentToken();
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInTag);
      this._emitEOFToken();
    } else {
      this._err(ERR$1.unexpectedSolidusInTag);
      this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
    }
  }
  [BOGUS_COMMENT_STATE](cp) {
    if (cp === $$7.GREATER_THAN_SIGN) {
      this.state = DATA_STATE;
      this._emitCurrentToken();
    } else if (cp === $$7.EOF) {
      this._emitCurrentToken();
      this._emitEOFToken();
    } else if (cp === $$7.NULL) {
      this._err(ERR$1.unexpectedNullCharacter);
      this.currentToken.data += unicode$1.REPLACEMENT_CHARACTER;
    } else {
      this.currentToken.data += toChar(cp);
    }
  }
  [MARKUP_DECLARATION_OPEN_STATE](cp) {
    if (this._consumeSequenceIfMatch($$.DASH_DASH_STRING, cp, true)) {
      this._createCommentToken();
      this.state = COMMENT_START_STATE;
    } else if (this._consumeSequenceIfMatch($$.DOCTYPE_STRING, cp, false)) {
      this.state = DOCTYPE_STATE;
    } else if (this._consumeSequenceIfMatch($$.CDATA_START_STRING, cp, true)) {
      if (this.allowCDATA) {
        this.state = CDATA_SECTION_STATE;
      } else {
        this._err(ERR$1.cdataInHtmlContent);
        this._createCommentToken();
        this.currentToken.data = "[CDATA[";
        this.state = BOGUS_COMMENT_STATE;
      }
    } else if (!this._ensureHibernation()) {
      this._err(ERR$1.incorrectlyOpenedComment);
      this._createCommentToken();
      this._reconsumeInState(BOGUS_COMMENT_STATE);
    }
  }
  [COMMENT_START_STATE](cp) {
    if (cp === $$7.HYPHEN_MINUS) {
      this.state = COMMENT_START_DASH_STATE;
    } else if (cp === $$7.GREATER_THAN_SIGN) {
      this._err(ERR$1.abruptClosingOfEmptyComment);
      this.state = DATA_STATE;
      this._emitCurrentToken();
    } else {
      this._reconsumeInState(COMMENT_STATE);
    }
  }
  [COMMENT_START_DASH_STATE](cp) {
    if (cp === $$7.HYPHEN_MINUS) {
      this.state = COMMENT_END_STATE;
    } else if (cp === $$7.GREATER_THAN_SIGN) {
      this._err(ERR$1.abruptClosingOfEmptyComment);
      this.state = DATA_STATE;
      this._emitCurrentToken();
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInComment);
      this._emitCurrentToken();
      this._emitEOFToken();
    } else {
      this.currentToken.data += "-";
      this._reconsumeInState(COMMENT_STATE);
    }
  }
  [COMMENT_STATE](cp) {
    if (cp === $$7.HYPHEN_MINUS) {
      this.state = COMMENT_END_DASH_STATE;
    } else if (cp === $$7.LESS_THAN_SIGN) {
      this.currentToken.data += "<";
      this.state = COMMENT_LESS_THAN_SIGN_STATE;
    } else if (cp === $$7.NULL) {
      this._err(ERR$1.unexpectedNullCharacter);
      this.currentToken.data += unicode$1.REPLACEMENT_CHARACTER;
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInComment);
      this._emitCurrentToken();
      this._emitEOFToken();
    } else {
      this.currentToken.data += toChar(cp);
    }
  }
  [COMMENT_LESS_THAN_SIGN_STATE](cp) {
    if (cp === $$7.EXCLAMATION_MARK) {
      this.currentToken.data += "!";
      this.state = COMMENT_LESS_THAN_SIGN_BANG_STATE;
    } else if (cp === $$7.LESS_THAN_SIGN) {
      this.currentToken.data += "!";
    } else {
      this._reconsumeInState(COMMENT_STATE);
    }
  }
  [COMMENT_LESS_THAN_SIGN_BANG_STATE](cp) {
    if (cp === $$7.HYPHEN_MINUS) {
      this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE;
    } else {
      this._reconsumeInState(COMMENT_STATE);
    }
  }
  [COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE](cp) {
    if (cp === $$7.HYPHEN_MINUS) {
      this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE;
    } else {
      this._reconsumeInState(COMMENT_END_DASH_STATE);
    }
  }
  [COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE](cp) {
    if (cp !== $$7.GREATER_THAN_SIGN && cp !== $$7.EOF) {
      this._err(ERR$1.nestedComment);
    }
    this._reconsumeInState(COMMENT_END_STATE);
  }
  [COMMENT_END_DASH_STATE](cp) {
    if (cp === $$7.HYPHEN_MINUS) {
      this.state = COMMENT_END_STATE;
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInComment);
      this._emitCurrentToken();
      this._emitEOFToken();
    } else {
      this.currentToken.data += "-";
      this._reconsumeInState(COMMENT_STATE);
    }
  }
  [COMMENT_END_STATE](cp) {
    if (cp === $$7.GREATER_THAN_SIGN) {
      this.state = DATA_STATE;
      this._emitCurrentToken();
    } else if (cp === $$7.EXCLAMATION_MARK) {
      this.state = COMMENT_END_BANG_STATE;
    } else if (cp === $$7.HYPHEN_MINUS) {
      this.currentToken.data += "-";
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInComment);
      this._emitCurrentToken();
      this._emitEOFToken();
    } else {
      this.currentToken.data += "--";
      this._reconsumeInState(COMMENT_STATE);
    }
  }
  [COMMENT_END_BANG_STATE](cp) {
    if (cp === $$7.HYPHEN_MINUS) {
      this.currentToken.data += "--!";
      this.state = COMMENT_END_DASH_STATE;
    } else if (cp === $$7.GREATER_THAN_SIGN) {
      this._err(ERR$1.incorrectlyClosedComment);
      this.state = DATA_STATE;
      this._emitCurrentToken();
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInComment);
      this._emitCurrentToken();
      this._emitEOFToken();
    } else {
      this.currentToken.data += "--!";
      this._reconsumeInState(COMMENT_STATE);
    }
  }
  [DOCTYPE_STATE](cp) {
    if (isWhitespace(cp)) {
      this.state = BEFORE_DOCTYPE_NAME_STATE;
    } else if (cp === $$7.GREATER_THAN_SIGN) {
      this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInDoctype);
      this._createDoctypeToken(null);
      this.currentToken.forceQuirks = true;
      this._emitCurrentToken();
      this._emitEOFToken();
    } else {
      this._err(ERR$1.missingWhitespaceBeforeDoctypeName);
      this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);
    }
  }
  [BEFORE_DOCTYPE_NAME_STATE](cp) {
    if (isWhitespace(cp)) {
      return;
    }
    if (isAsciiUpper(cp)) {
      this._createDoctypeToken(toAsciiLowerChar(cp));
      this.state = DOCTYPE_NAME_STATE;
    } else if (cp === $$7.NULL) {
      this._err(ERR$1.unexpectedNullCharacter);
      this._createDoctypeToken(unicode$1.REPLACEMENT_CHARACTER);
      this.state = DOCTYPE_NAME_STATE;
    } else if (cp === $$7.GREATER_THAN_SIGN) {
      this._err(ERR$1.missingDoctypeName);
      this._createDoctypeToken(null);
      this.currentToken.forceQuirks = true;
      this._emitCurrentToken();
      this.state = DATA_STATE;
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInDoctype);
      this._createDoctypeToken(null);
      this.currentToken.forceQuirks = true;
      this._emitCurrentToken();
      this._emitEOFToken();
    } else {
      this._createDoctypeToken(toChar(cp));
      this.state = DOCTYPE_NAME_STATE;
    }
  }
  [DOCTYPE_NAME_STATE](cp) {
    if (isWhitespace(cp)) {
      this.state = AFTER_DOCTYPE_NAME_STATE;
    } else if (cp === $$7.GREATER_THAN_SIGN) {
      this.state = DATA_STATE;
      this._emitCurrentToken();
    } else if (isAsciiUpper(cp)) {
      this.currentToken.name += toAsciiLowerChar(cp);
    } else if (cp === $$7.NULL) {
      this._err(ERR$1.unexpectedNullCharacter);
      this.currentToken.name += unicode$1.REPLACEMENT_CHARACTER;
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInDoctype);
      this.currentToken.forceQuirks = true;
      this._emitCurrentToken();
      this._emitEOFToken();
    } else {
      this.currentToken.name += toChar(cp);
    }
  }
  [AFTER_DOCTYPE_NAME_STATE](cp) {
    if (isWhitespace(cp)) {
      return;
    }
    if (cp === $$7.GREATER_THAN_SIGN) {
      this.state = DATA_STATE;
      this._emitCurrentToken();
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInDoctype);
      this.currentToken.forceQuirks = true;
      this._emitCurrentToken();
      this._emitEOFToken();
    } else if (this._consumeSequenceIfMatch($$.PUBLIC_STRING, cp, false)) {
      this.state = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;
    } else if (this._consumeSequenceIfMatch($$.SYSTEM_STRING, cp, false)) {
      this.state = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;
    } else if (!this._ensureHibernation()) {
      this._err(ERR$1.invalidCharacterSequenceAfterDoctypeName);
      this.currentToken.forceQuirks = true;
      this._reconsumeInState(BOGUS_DOCTYPE_STATE);
    }
  }
  [AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE](cp) {
    if (isWhitespace(cp)) {
      this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;
    } else if (cp === $$7.QUOTATION_MARK) {
      this._err(ERR$1.missingWhitespaceAfterDoctypePublicKeyword);
      this.currentToken.publicId = "";
      this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;
    } else if (cp === $$7.APOSTROPHE) {
      this._err(ERR$1.missingWhitespaceAfterDoctypePublicKeyword);
      this.currentToken.publicId = "";
      this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;
    } else if (cp === $$7.GREATER_THAN_SIGN) {
      this._err(ERR$1.missingDoctypePublicIdentifier);
      this.currentToken.forceQuirks = true;
      this.state = DATA_STATE;
      this._emitCurrentToken();
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInDoctype);
      this.currentToken.forceQuirks = true;
      this._emitCurrentToken();
      this._emitEOFToken();
    } else {
      this._err(ERR$1.missingQuoteBeforeDoctypePublicIdentifier);
      this.currentToken.forceQuirks = true;
      this._reconsumeInState(BOGUS_DOCTYPE_STATE);
    }
  }
  [BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {
    if (isWhitespace(cp)) {
      return;
    }
    if (cp === $$7.QUOTATION_MARK) {
      this.currentToken.publicId = "";
      this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;
    } else if (cp === $$7.APOSTROPHE) {
      this.currentToken.publicId = "";
      this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;
    } else if (cp === $$7.GREATER_THAN_SIGN) {
      this._err(ERR$1.missingDoctypePublicIdentifier);
      this.currentToken.forceQuirks = true;
      this.state = DATA_STATE;
      this._emitCurrentToken();
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInDoctype);
      this.currentToken.forceQuirks = true;
      this._emitCurrentToken();
      this._emitEOFToken();
    } else {
      this._err(ERR$1.missingQuoteBeforeDoctypePublicIdentifier);
      this.currentToken.forceQuirks = true;
      this._reconsumeInState(BOGUS_DOCTYPE_STATE);
    }
  }
  [DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {
    if (cp === $$7.QUOTATION_MARK) {
      this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;
    } else if (cp === $$7.NULL) {
      this._err(ERR$1.unexpectedNullCharacter);
      this.currentToken.publicId += unicode$1.REPLACEMENT_CHARACTER;
    } else if (cp === $$7.GREATER_THAN_SIGN) {
      this._err(ERR$1.abruptDoctypePublicIdentifier);
      this.currentToken.forceQuirks = true;
      this._emitCurrentToken();
      this.state = DATA_STATE;
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInDoctype);
      this.currentToken.forceQuirks = true;
      this._emitCurrentToken();
      this._emitEOFToken();
    } else {
      this.currentToken.publicId += toChar(cp);
    }
  }
  [DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {
    if (cp === $$7.APOSTROPHE) {
      this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;
    } else if (cp === $$7.NULL) {
      this._err(ERR$1.unexpectedNullCharacter);
      this.currentToken.publicId += unicode$1.REPLACEMENT_CHARACTER;
    } else if (cp === $$7.GREATER_THAN_SIGN) {
      this._err(ERR$1.abruptDoctypePublicIdentifier);
      this.currentToken.forceQuirks = true;
      this._emitCurrentToken();
      this.state = DATA_STATE;
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInDoctype);
      this.currentToken.forceQuirks = true;
      this._emitCurrentToken();
      this._emitEOFToken();
    } else {
      this.currentToken.publicId += toChar(cp);
    }
  }
  [AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {
    if (isWhitespace(cp)) {
      this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;
    } else if (cp === $$7.GREATER_THAN_SIGN) {
      this.state = DATA_STATE;
      this._emitCurrentToken();
    } else if (cp === $$7.QUOTATION_MARK) {
      this._err(ERR$1.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);
      this.currentToken.systemId = "";
      this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
    } else if (cp === $$7.APOSTROPHE) {
      this._err(ERR$1.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);
      this.currentToken.systemId = "";
      this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInDoctype);
      this.currentToken.forceQuirks = true;
      this._emitCurrentToken();
      this._emitEOFToken();
    } else {
      this._err(ERR$1.missingQuoteBeforeDoctypeSystemIdentifier);
      this.currentToken.forceQuirks = true;
      this._reconsumeInState(BOGUS_DOCTYPE_STATE);
    }
  }
  [BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE](cp) {
    if (isWhitespace(cp)) {
      return;
    }
    if (cp === $$7.GREATER_THAN_SIGN) {
      this._emitCurrentToken();
      this.state = DATA_STATE;
    } else if (cp === $$7.QUOTATION_MARK) {
      this.currentToken.systemId = "";
      this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
    } else if (cp === $$7.APOSTROPHE) {
      this.currentToken.systemId = "";
      this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInDoctype);
      this.currentToken.forceQuirks = true;
      this._emitCurrentToken();
      this._emitEOFToken();
    } else {
      this._err(ERR$1.missingQuoteBeforeDoctypeSystemIdentifier);
      this.currentToken.forceQuirks = true;
      this._reconsumeInState(BOGUS_DOCTYPE_STATE);
    }
  }
  [AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE](cp) {
    if (isWhitespace(cp)) {
      this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;
    } else if (cp === $$7.QUOTATION_MARK) {
      this._err(ERR$1.missingWhitespaceAfterDoctypeSystemKeyword);
      this.currentToken.systemId = "";
      this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
    } else if (cp === $$7.APOSTROPHE) {
      this._err(ERR$1.missingWhitespaceAfterDoctypeSystemKeyword);
      this.currentToken.systemId = "";
      this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
    } else if (cp === $$7.GREATER_THAN_SIGN) {
      this._err(ERR$1.missingDoctypeSystemIdentifier);
      this.currentToken.forceQuirks = true;
      this.state = DATA_STATE;
      this._emitCurrentToken();
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInDoctype);
      this.currentToken.forceQuirks = true;
      this._emitCurrentToken();
      this._emitEOFToken();
    } else {
      this._err(ERR$1.missingQuoteBeforeDoctypeSystemIdentifier);
      this.currentToken.forceQuirks = true;
      this._reconsumeInState(BOGUS_DOCTYPE_STATE);
    }
  }
  [BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {
    if (isWhitespace(cp)) {
      return;
    }
    if (cp === $$7.QUOTATION_MARK) {
      this.currentToken.systemId = "";
      this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
    } else if (cp === $$7.APOSTROPHE) {
      this.currentToken.systemId = "";
      this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
    } else if (cp === $$7.GREATER_THAN_SIGN) {
      this._err(ERR$1.missingDoctypeSystemIdentifier);
      this.currentToken.forceQuirks = true;
      this.state = DATA_STATE;
      this._emitCurrentToken();
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInDoctype);
      this.currentToken.forceQuirks = true;
      this._emitCurrentToken();
      this._emitEOFToken();
    } else {
      this._err(ERR$1.missingQuoteBeforeDoctypeSystemIdentifier);
      this.currentToken.forceQuirks = true;
      this._reconsumeInState(BOGUS_DOCTYPE_STATE);
    }
  }
  [DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {
    if (cp === $$7.QUOTATION_MARK) {
      this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;
    } else if (cp === $$7.NULL) {
      this._err(ERR$1.unexpectedNullCharacter);
      this.currentToken.systemId += unicode$1.REPLACEMENT_CHARACTER;
    } else if (cp === $$7.GREATER_THAN_SIGN) {
      this._err(ERR$1.abruptDoctypeSystemIdentifier);
      this.currentToken.forceQuirks = true;
      this._emitCurrentToken();
      this.state = DATA_STATE;
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInDoctype);
      this.currentToken.forceQuirks = true;
      this._emitCurrentToken();
      this._emitEOFToken();
    } else {
      this.currentToken.systemId += toChar(cp);
    }
  }
  [DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {
    if (cp === $$7.APOSTROPHE) {
      this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;
    } else if (cp === $$7.NULL) {
      this._err(ERR$1.unexpectedNullCharacter);
      this.currentToken.systemId += unicode$1.REPLACEMENT_CHARACTER;
    } else if (cp === $$7.GREATER_THAN_SIGN) {
      this._err(ERR$1.abruptDoctypeSystemIdentifier);
      this.currentToken.forceQuirks = true;
      this._emitCurrentToken();
      this.state = DATA_STATE;
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInDoctype);
      this.currentToken.forceQuirks = true;
      this._emitCurrentToken();
      this._emitEOFToken();
    } else {
      this.currentToken.systemId += toChar(cp);
    }
  }
  [AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {
    if (isWhitespace(cp)) {
      return;
    }
    if (cp === $$7.GREATER_THAN_SIGN) {
      this._emitCurrentToken();
      this.state = DATA_STATE;
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInDoctype);
      this.currentToken.forceQuirks = true;
      this._emitCurrentToken();
      this._emitEOFToken();
    } else {
      this._err(ERR$1.unexpectedCharacterAfterDoctypeSystemIdentifier);
      this._reconsumeInState(BOGUS_DOCTYPE_STATE);
    }
  }
  [BOGUS_DOCTYPE_STATE](cp) {
    if (cp === $$7.GREATER_THAN_SIGN) {
      this._emitCurrentToken();
      this.state = DATA_STATE;
    } else if (cp === $$7.NULL) {
      this._err(ERR$1.unexpectedNullCharacter);
    } else if (cp === $$7.EOF) {
      this._emitCurrentToken();
      this._emitEOFToken();
    }
  }
  [CDATA_SECTION_STATE](cp) {
    if (cp === $$7.RIGHT_SQUARE_BRACKET) {
      this.state = CDATA_SECTION_BRACKET_STATE;
    } else if (cp === $$7.EOF) {
      this._err(ERR$1.eofInCdata);
      this._emitEOFToken();
    } else {
      this._emitCodePoint(cp);
    }
  }
  [CDATA_SECTION_BRACKET_STATE](cp) {
    if (cp === $$7.RIGHT_SQUARE_BRACKET) {
      this.state = CDATA_SECTION_END_STATE;
    } else {
      this._emitChars("]");
      this._reconsumeInState(CDATA_SECTION_STATE);
    }
  }
  [CDATA_SECTION_END_STATE](cp) {
    if (cp === $$7.GREATER_THAN_SIGN) {
      this.state = DATA_STATE;
    } else if (cp === $$7.RIGHT_SQUARE_BRACKET) {
      this._emitChars("]");
    } else {
      this._emitChars("]]");
      this._reconsumeInState(CDATA_SECTION_STATE);
    }
  }
  [CHARACTER_REFERENCE_STATE](cp) {
    this.tempBuff = [$$7.AMPERSAND];
    if (cp === $$7.NUMBER_SIGN) {
      this.tempBuff.push(cp);
      this.state = NUMERIC_CHARACTER_REFERENCE_STATE;
    } else if (isAsciiAlphaNumeric(cp)) {
      this._reconsumeInState(NAMED_CHARACTER_REFERENCE_STATE);
    } else {
      this._flushCodePointsConsumedAsCharacterReference();
      this._reconsumeInState(this.returnState);
    }
  }
  [NAMED_CHARACTER_REFERENCE_STATE](cp) {
    const matchResult = this._matchNamedCharacterReference(cp);
    if (this._ensureHibernation()) {
      this.tempBuff = [$$7.AMPERSAND];
    } else if (matchResult) {
      const withSemicolon = this.tempBuff[this.tempBuff.length - 1] === $$7.SEMICOLON;
      if (!this._isCharacterReferenceAttributeQuirk(withSemicolon)) {
        if (!withSemicolon) {
          this._errOnNextCodePoint(ERR$1.missingSemicolonAfterCharacterReference);
        }
        this.tempBuff = matchResult;
      }
      this._flushCodePointsConsumedAsCharacterReference();
      this.state = this.returnState;
    } else {
      this._flushCodePointsConsumedAsCharacterReference();
      this.state = AMBIGUOUS_AMPERSAND_STATE;
    }
  }
  [AMBIGUOUS_AMPERSAND_STATE](cp) {
    if (isAsciiAlphaNumeric(cp)) {
      if (this._isCharacterReferenceInAttribute()) {
        this.currentAttr.value += toChar(cp);
      } else {
        this._emitCodePoint(cp);
      }
    } else {
      if (cp === $$7.SEMICOLON) {
        this._err(ERR$1.unknownNamedCharacterReference);
      }
      this._reconsumeInState(this.returnState);
    }
  }
  [NUMERIC_CHARACTER_REFERENCE_STATE](cp) {
    this.charRefCode = 0;
    if (cp === $$7.LATIN_SMALL_X || cp === $$7.LATIN_CAPITAL_X) {
      this.tempBuff.push(cp);
      this.state = HEXADEMICAL_CHARACTER_REFERENCE_START_STATE;
    } else {
      this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_START_STATE);
    }
  }
  [HEXADEMICAL_CHARACTER_REFERENCE_START_STATE](cp) {
    if (isAsciiHexDigit(cp)) {
      this._reconsumeInState(HEXADEMICAL_CHARACTER_REFERENCE_STATE);
    } else {
      this._err(ERR$1.absenceOfDigitsInNumericCharacterReference);
      this._flushCodePointsConsumedAsCharacterReference();
      this._reconsumeInState(this.returnState);
    }
  }
  [DECIMAL_CHARACTER_REFERENCE_START_STATE](cp) {
    if (isAsciiDigit(cp)) {
      this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_STATE);
    } else {
      this._err(ERR$1.absenceOfDigitsInNumericCharacterReference);
      this._flushCodePointsConsumedAsCharacterReference();
      this._reconsumeInState(this.returnState);
    }
  }
  [HEXADEMICAL_CHARACTER_REFERENCE_STATE](cp) {
    if (isAsciiUpperHexDigit(cp)) {
      this.charRefCode = this.charRefCode * 16 + cp - 55;
    } else if (isAsciiLowerHexDigit(cp)) {
      this.charRefCode = this.charRefCode * 16 + cp - 87;
    } else if (isAsciiDigit(cp)) {
      this.charRefCode = this.charRefCode * 16 + cp - 48;
    } else if (cp === $$7.SEMICOLON) {
      this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;
    } else {
      this._err(ERR$1.missingSemicolonAfterCharacterReference);
      this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);
    }
  }
  [DECIMAL_CHARACTER_REFERENCE_STATE](cp) {
    if (isAsciiDigit(cp)) {
      this.charRefCode = this.charRefCode * 10 + cp - 48;
    } else if (cp === $$7.SEMICOLON) {
      this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;
    } else {
      this._err(ERR$1.missingSemicolonAfterCharacterReference);
      this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);
    }
  }
  [NUMERIC_CHARACTER_REFERENCE_END_STATE]() {
    if (this.charRefCode === $$7.NULL) {
      this._err(ERR$1.nullCharacterReference);
      this.charRefCode = $$7.REPLACEMENT_CHARACTER;
    } else if (this.charRefCode > 1114111) {
      this._err(ERR$1.characterReferenceOutsideUnicodeRange);
      this.charRefCode = $$7.REPLACEMENT_CHARACTER;
    } else if (unicode$1.isSurrogate(this.charRefCode)) {
      this._err(ERR$1.surrogateCharacterReference);
      this.charRefCode = $$7.REPLACEMENT_CHARACTER;
    } else if (unicode$1.isUndefinedCodePoint(this.charRefCode)) {
      this._err(ERR$1.noncharacterCharacterReference);
    } else if (unicode$1.isControlCodePoint(this.charRefCode) || this.charRefCode === $$7.CARRIAGE_RETURN) {
      this._err(ERR$1.controlCharacterReference);
      const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS[this.charRefCode];
      if (replacement) {
        this.charRefCode = replacement;
      }
    }
    this.tempBuff = [this.charRefCode];
    this._flushCodePointsConsumedAsCharacterReference();
    this._reconsumeInState(this.returnState);
  }
}
Tokenizer$4.CHARACTER_TOKEN = "CHARACTER_TOKEN";
Tokenizer$4.NULL_CHARACTER_TOKEN = "NULL_CHARACTER_TOKEN";
Tokenizer$4.WHITESPACE_CHARACTER_TOKEN = "WHITESPACE_CHARACTER_TOKEN";
Tokenizer$4.START_TAG_TOKEN = "START_TAG_TOKEN";
Tokenizer$4.END_TAG_TOKEN = "END_TAG_TOKEN";
Tokenizer$4.COMMENT_TOKEN = "COMMENT_TOKEN";
Tokenizer$4.DOCTYPE_TOKEN = "DOCTYPE_TOKEN";
Tokenizer$4.EOF_TOKEN = "EOF_TOKEN";
Tokenizer$4.HIBERNATION_TOKEN = "HIBERNATION_TOKEN";
Tokenizer$4.MODE = {
  DATA: DATA_STATE,
  RCDATA: RCDATA_STATE,
  RAWTEXT: RAWTEXT_STATE,
  SCRIPT_DATA: SCRIPT_DATA_STATE,
  PLAINTEXT: PLAINTEXT_STATE
};
Tokenizer$4.getTokenAttr = function(token, attrName) {
  for (let i2 = token.attrs.length - 1; i2 >= 0; i2--) {
    if (token.attrs[i2].name === attrName) {
      return token.attrs[i2].value;
    }
  }
  return null;
};
var tokenizer = Tokenizer$4;
var html$1 = {};
const NS$5 = html$1.NAMESPACES = {
  HTML: "http://www.w3.org/1999/xhtml",
  MATHML: "http://www.w3.org/1998/Math/MathML",
  SVG: "http://www.w3.org/2000/svg",
  XLINK: "http://www.w3.org/1999/xlink",
  XML: "http://www.w3.org/XML/1998/namespace",
  XMLNS: "http://www.w3.org/2000/xmlns/"
};
html$1.ATTRS = {
  TYPE: "type",
  ACTION: "action",
  ENCODING: "encoding",
  PROMPT: "prompt",
  NAME: "name",
  COLOR: "color",
  FACE: "face",
  SIZE: "size"
};
html$1.DOCUMENT_MODE = {
  NO_QUIRKS: "no-quirks",
  QUIRKS: "quirks",
  LIMITED_QUIRKS: "limited-quirks"
};
const $$6 = html$1.TAG_NAMES = {
  A: "a",
  ADDRESS: "address",
  ANNOTATION_XML: "annotation-xml",
  APPLET: "applet",
  AREA: "area",
  ARTICLE: "article",
  ASIDE: "aside",
  B: "b",
  BASE: "base",
  BASEFONT: "basefont",
  BGSOUND: "bgsound",
  BIG: "big",
  BLOCKQUOTE: "blockquote",
  BODY: "body",
  BR: "br",
  BUTTON: "button",
  CAPTION: "caption",
  CENTER: "center",
  CODE: "code",
  COL: "col",
  COLGROUP: "colgroup",
  DD: "dd",
  DESC: "desc",
  DETAILS: "details",
  DIALOG: "dialog",
  DIR: "dir",
  DIV: "div",
  DL: "dl",
  DT: "dt",
  EM: "em",
  EMBED: "embed",
  FIELDSET: "fieldset",
  FIGCAPTION: "figcaption",
  FIGURE: "figure",
  FONT: "font",
  FOOTER: "footer",
  FOREIGN_OBJECT: "foreignObject",
  FORM: "form",
  FRAME: "frame",
  FRAMESET: "frameset",
  H1: "h1",
  H2: "h2",
  H3: "h3",
  H4: "h4",
  H5: "h5",
  H6: "h6",
  HEAD: "head",
  HEADER: "header",
  HGROUP: "hgroup",
  HR: "hr",
  HTML: "html",
  I: "i",
  IMG: "img",
  IMAGE: "image",
  INPUT: "input",
  IFRAME: "iframe",
  KEYGEN: "keygen",
  LABEL: "label",
  LI: "li",
  LINK: "link",
  LISTING: "listing",
  MAIN: "main",
  MALIGNMARK: "malignmark",
  MARQUEE: "marquee",
  MATH: "math",
  MENU: "menu",
  META: "meta",
  MGLYPH: "mglyph",
  MI: "mi",
  MO: "mo",
  MN: "mn",
  MS: "ms",
  MTEXT: "mtext",
  NAV: "nav",
  NOBR: "nobr",
  NOFRAMES: "noframes",
  NOEMBED: "noembed",
  NOSCRIPT: "noscript",
  OBJECT: "object",
  OL: "ol",
  OPTGROUP: "optgroup",
  OPTION: "option",
  P: "p",
  PARAM: "param",
  PLAINTEXT: "plaintext",
  PRE: "pre",
  RB: "rb",
  RP: "rp",
  RT: "rt",
  RTC: "rtc",
  RUBY: "ruby",
  S: "s",
  SCRIPT: "script",
  SECTION: "section",
  SELECT: "select",
  SOURCE: "source",
  SMALL: "small",
  SPAN: "span",
  STRIKE: "strike",
  STRONG: "strong",
  STYLE: "style",
  SUB: "sub",
  SUMMARY: "summary",
  SUP: "sup",
  TABLE: "table",
  TBODY: "tbody",
  TEMPLATE: "template",
  TEXTAREA: "textarea",
  TFOOT: "tfoot",
  TD: "td",
  TH: "th",
  THEAD: "thead",
  TITLE: "title",
  TR: "tr",
  TRACK: "track",
  TT: "tt",
  U: "u",
  UL: "ul",
  SVG: "svg",
  VAR: "var",
  WBR: "wbr",
  XMP: "xmp"
};
html$1.SPECIAL_ELEMENTS = {
  [NS$5.HTML]: {
    [$$6.ADDRESS]: true,
    [$$6.APPLET]: true,
    [$$6.AREA]: true,
    [$$6.ARTICLE]: true,
    [$$6.ASIDE]: true,
    [$$6.BASE]: true,
    [$$6.BASEFONT]: true,
    [$$6.BGSOUND]: true,
    [$$6.BLOCKQUOTE]: true,
    [$$6.BODY]: true,
    [$$6.BR]: true,
    [$$6.BUTTON]: true,
    [$$6.CAPTION]: true,
    [$$6.CENTER]: true,
    [$$6.COL]: true,
    [$$6.COLGROUP]: true,
    [$$6.DD]: true,
    [$$6.DETAILS]: true,
    [$$6.DIR]: true,
    [$$6.DIV]: true,
    [$$6.DL]: true,
    [$$6.DT]: true,
    [$$6.EMBED]: true,
    [$$6.FIELDSET]: true,
    [$$6.FIGCAPTION]: true,
    [$$6.FIGURE]: true,
    [$$6.FOOTER]: true,
    [$$6.FORM]: true,
    [$$6.FRAME]: true,
    [$$6.FRAMESET]: true,
    [$$6.H1]: true,
    [$$6.H2]: true,
    [$$6.H3]: true,
    [$$6.H4]: true,
    [$$6.H5]: true,
    [$$6.H6]: true,
    [$$6.HEAD]: true,
    [$$6.HEADER]: true,
    [$$6.HGROUP]: true,
    [$$6.HR]: true,
    [$$6.HTML]: true,
    [$$6.IFRAME]: true,
    [$$6.IMG]: true,
    [$$6.INPUT]: true,
    [$$6.LI]: true,
    [$$6.LINK]: true,
    [$$6.LISTING]: true,
    [$$6.MAIN]: true,
    [$$6.MARQUEE]: true,
    [$$6.MENU]: true,
    [$$6.META]: true,
    [$$6.NAV]: true,
    [$$6.NOEMBED]: true,
    [$$6.NOFRAMES]: true,
    [$$6.NOSCRIPT]: true,
    [$$6.OBJECT]: true,
    [$$6.OL]: true,
    [$$6.P]: true,
    [$$6.PARAM]: true,
    [$$6.PLAINTEXT]: true,
    [$$6.PRE]: true,
    [$$6.SCRIPT]: true,
    [$$6.SECTION]: true,
    [$$6.SELECT]: true,
    [$$6.SOURCE]: true,
    [$$6.STYLE]: true,
    [$$6.SUMMARY]: true,
    [$$6.TABLE]: true,
    [$$6.TBODY]: true,
    [$$6.TD]: true,
    [$$6.TEMPLATE]: true,
    [$$6.TEXTAREA]: true,
    [$$6.TFOOT]: true,
    [$$6.TH]: true,
    [$$6.THEAD]: true,
    [$$6.TITLE]: true,
    [$$6.TR]: true,
    [$$6.TRACK]: true,
    [$$6.UL]: true,
    [$$6.WBR]: true,
    [$$6.XMP]: true
  },
  [NS$5.MATHML]: {
    [$$6.MI]: true,
    [$$6.MO]: true,
    [$$6.MN]: true,
    [$$6.MS]: true,
    [$$6.MTEXT]: true,
    [$$6.ANNOTATION_XML]: true
  },
  [NS$5.SVG]: {
    [$$6.TITLE]: true,
    [$$6.FOREIGN_OBJECT]: true,
    [$$6.DESC]: true
  }
};
const HTML$4 = html$1;
const $$5 = HTML$4.TAG_NAMES;
const NS$4 = HTML$4.NAMESPACES;
function isImpliedEndTagRequired(tn) {
  switch (tn.length) {
    case 1:
      return tn === $$5.P;
    case 2:
      return tn === $$5.RB || tn === $$5.RP || tn === $$5.RT || tn === $$5.DD || tn === $$5.DT || tn === $$5.LI;
    case 3:
      return tn === $$5.RTC;
    case 6:
      return tn === $$5.OPTION;
    case 8:
      return tn === $$5.OPTGROUP;
  }
  return false;
}
function isImpliedEndTagRequiredThoroughly(tn) {
  switch (tn.length) {
    case 1:
      return tn === $$5.P;
    case 2:
      return tn === $$5.RB || tn === $$5.RP || tn === $$5.RT || tn === $$5.DD || tn === $$5.DT || tn === $$5.LI || tn === $$5.TD || tn === $$5.TH || tn === $$5.TR;
    case 3:
      return tn === $$5.RTC;
    case 5:
      return tn === $$5.TBODY || tn === $$5.TFOOT || tn === $$5.THEAD;
    case 6:
      return tn === $$5.OPTION;
    case 7:
      return tn === $$5.CAPTION;
    case 8:
      return tn === $$5.OPTGROUP || tn === $$5.COLGROUP;
  }
  return false;
}
function isScopingElement(tn, ns) {
  switch (tn.length) {
    case 2:
      if (tn === $$5.TD || tn === $$5.TH) {
        return ns === NS$4.HTML;
      } else if (tn === $$5.MI || tn === $$5.MO || tn === $$5.MN || tn === $$5.MS) {
        return ns === NS$4.MATHML;
      }
      break;
    case 4:
      if (tn === $$5.HTML) {
        return ns === NS$4.HTML;
      } else if (tn === $$5.DESC) {
        return ns === NS$4.SVG;
      }
      break;
    case 5:
      if (tn === $$5.TABLE) {
        return ns === NS$4.HTML;
      } else if (tn === $$5.MTEXT) {
        return ns === NS$4.MATHML;
      } else if (tn === $$5.TITLE) {
        return ns === NS$4.SVG;
      }
      break;
    case 6:
      return (tn === $$5.APPLET || tn === $$5.OBJECT) && ns === NS$4.HTML;
    case 7:
      return (tn === $$5.CAPTION || tn === $$5.MARQUEE) && ns === NS$4.HTML;
    case 8:
      return tn === $$5.TEMPLATE && ns === NS$4.HTML;
    case 13:
      return tn === $$5.FOREIGN_OBJECT && ns === NS$4.SVG;
    case 14:
      return tn === $$5.ANNOTATION_XML && ns === NS$4.MATHML;
  }
  return false;
}
class OpenElementStack$1 {
  constructor(document2, treeAdapter) {
    this.stackTop = -1;
    this.items = [];
    this.current = document2;
    this.currentTagName = null;
    this.currentTmplContent = null;
    this.tmplCount = 0;
    this.treeAdapter = treeAdapter;
  }
  _indexOf(element) {
    let idx = -1;
    for (let i2 = this.stackTop; i2 >= 0; i2--) {
      if (this.items[i2] === element) {
        idx = i2;
        break;
      }
    }
    return idx;
  }
  _isInTemplate() {
    return this.currentTagName === $$5.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === NS$4.HTML;
  }
  _updateCurrentElement() {
    this.current = this.items[this.stackTop];
    this.currentTagName = this.current && this.treeAdapter.getTagName(this.current);
    this.currentTmplContent = this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : null;
  }
  push(element) {
    this.items[++this.stackTop] = element;
    this._updateCurrentElement();
    if (this._isInTemplate()) {
      this.tmplCount++;
    }
  }
  pop() {
    this.stackTop--;
    if (this.tmplCount > 0 && this._isInTemplate()) {
      this.tmplCount--;
    }
    this._updateCurrentElement();
  }
  replace(oldElement, newElement) {
    const idx = this._indexOf(oldElement);
    this.items[idx] = newElement;
    if (idx === this.stackTop) {
      this._updateCurrentElement();
    }
  }
  insertAfter(referenceElement, newElement) {
    const insertionIdx = this._indexOf(referenceElement) + 1;
    this.items.splice(insertionIdx, 0, newElement);
    if (insertionIdx === ++this.stackTop) {
      this._updateCurrentElement();
    }
  }
  popUntilTagNamePopped(tagName) {
    while (this.stackTop > -1) {
      const tn = this.currentTagName;
      const ns = this.treeAdapter.getNamespaceURI(this.current);
      this.pop();
      if (tn === tagName && ns === NS$4.HTML) {
        break;
      }
    }
  }
  popUntilElementPopped(element) {
    while (this.stackTop > -1) {
      const poppedElement = this.current;
      this.pop();
      if (poppedElement === element) {
        break;
      }
    }
  }
  popUntilNumberedHeaderPopped() {
    while (this.stackTop > -1) {
      const tn = this.currentTagName;
      const ns = this.treeAdapter.getNamespaceURI(this.current);
      this.pop();
      if (tn === $$5.H1 || tn === $$5.H2 || tn === $$5.H3 || tn === $$5.H4 || tn === $$5.H5 || tn === $$5.H6 && ns === NS$4.HTML) {
        break;
      }
    }
  }
  popUntilTableCellPopped() {
    while (this.stackTop > -1) {
      const tn = this.currentTagName;
      const ns = this.treeAdapter.getNamespaceURI(this.current);
      this.pop();
      if (tn === $$5.TD || tn === $$5.TH && ns === NS$4.HTML) {
        break;
      }
    }
  }
  popAllUpToHtmlElement() {
    this.stackTop = 0;
    this._updateCurrentElement();
  }
  clearBackToTableContext() {
    while (this.currentTagName !== $$5.TABLE && this.currentTagName !== $$5.TEMPLATE && this.currentTagName !== $$5.HTML || this.treeAdapter.getNamespaceURI(this.current) !== NS$4.HTML) {
      this.pop();
    }
  }
  clearBackToTableBodyContext() {
    while (this.currentTagName !== $$5.TBODY && this.currentTagName !== $$5.TFOOT && this.currentTagName !== $$5.THEAD && this.currentTagName !== $$5.TEMPLATE && this.currentTagName !== $$5.HTML || this.treeAdapter.getNamespaceURI(this.current) !== NS$4.HTML) {
      this.pop();
    }
  }
  clearBackToTableRowContext() {
    while (this.currentTagName !== $$5.TR && this.currentTagName !== $$5.TEMPLATE && this.currentTagName !== $$5.HTML || this.treeAdapter.getNamespaceURI(this.current) !== NS$4.HTML) {
      this.pop();
    }
  }
  remove(element) {
    for (let i2 = this.stackTop; i2 >= 0; i2--) {
      if (this.items[i2] === element) {
        this.items.splice(i2, 1);
        this.stackTop--;
        this._updateCurrentElement();
        break;
      }
    }
  }
  tryPeekProperlyNestedBodyElement() {
    const element = this.items[1];
    return element && this.treeAdapter.getTagName(element) === $$5.BODY ? element : null;
  }
  contains(element) {
    return this._indexOf(element) > -1;
  }
  getCommonAncestor(element) {
    let elementIdx = this._indexOf(element);
    return --elementIdx >= 0 ? this.items[elementIdx] : null;
  }
  isRootHtmlElementCurrent() {
    return this.stackTop === 0 && this.currentTagName === $$5.HTML;
  }
  hasInScope(tagName) {
    for (let i2 = this.stackTop; i2 >= 0; i2--) {
      const tn = this.treeAdapter.getTagName(this.items[i2]);
      const ns = this.treeAdapter.getNamespaceURI(this.items[i2]);
      if (tn === tagName && ns === NS$4.HTML) {
        return true;
      }
      if (isScopingElement(tn, ns)) {
        return false;
      }
    }
    return true;
  }
  hasNumberedHeaderInScope() {
    for (let i2 = this.stackTop; i2 >= 0; i2--) {
      const tn = this.treeAdapter.getTagName(this.items[i2]);
      const ns = this.treeAdapter.getNamespaceURI(this.items[i2]);
      if ((tn === $$5.H1 || tn === $$5.H2 || tn === $$5.H3 || tn === $$5.H4 || tn === $$5.H5 || tn === $$5.H6) && ns === NS$4.HTML) {
        return true;
      }
      if (isScopingElement(tn, ns)) {
        return false;
      }
    }
    return true;
  }
  hasInListItemScope(tagName) {
    for (let i2 = this.stackTop; i2 >= 0; i2--) {
      const tn = this.treeAdapter.getTagName(this.items[i2]);
      const ns = this.treeAdapter.getNamespaceURI(this.items[i2]);
      if (tn === tagName && ns === NS$4.HTML) {
        return true;
      }
      if ((tn === $$5.UL || tn === $$5.OL) && ns === NS$4.HTML || isScopingElement(tn, ns)) {
        return false;
      }
    }
    return true;
  }
  hasInButtonScope(tagName) {
    for (let i2 = this.stackTop; i2 >= 0; i2--) {
      const tn = this.treeAdapter.getTagName(this.items[i2]);
      const ns = this.treeAdapter.getNamespaceURI(this.items[i2]);
      if (tn === tagName && ns === NS$4.HTML) {
        return true;
      }
      if (tn === $$5.BUTTON && ns === NS$4.HTML || isScopingElement(tn, ns)) {
        return false;
      }
    }
    return true;
  }
  hasInTableScope(tagName) {
    for (let i2 = this.stackTop; i2 >= 0; i2--) {
      const tn = this.treeAdapter.getTagName(this.items[i2]);
      const ns = this.treeAdapter.getNamespaceURI(this.items[i2]);
      if (ns !== NS$4.HTML) {
        continue;
      }
      if (tn === tagName) {
        return true;
      }
      if (tn === $$5.TABLE || tn === $$5.TEMPLATE || tn === $$5.HTML) {
        return false;
      }
    }
    return true;
  }
  hasTableBodyContextInTableScope() {
    for (let i2 = this.stackTop; i2 >= 0; i2--) {
      const tn = this.treeAdapter.getTagName(this.items[i2]);
      const ns = this.treeAdapter.getNamespaceURI(this.items[i2]);
      if (ns !== NS$4.HTML) {
        continue;
      }
      if (tn === $$5.TBODY || tn === $$5.THEAD || tn === $$5.TFOOT) {
        return true;
      }
      if (tn === $$5.TABLE || tn === $$5.HTML) {
        return false;
      }
    }
    return true;
  }
  hasInSelectScope(tagName) {
    for (let i2 = this.stackTop; i2 >= 0; i2--) {
      const tn = this.treeAdapter.getTagName(this.items[i2]);
      const ns = this.treeAdapter.getNamespaceURI(this.items[i2]);
      if (ns !== NS$4.HTML) {
        continue;
      }
      if (tn === tagName) {
        return true;
      }
      if (tn !== $$5.OPTION && tn !== $$5.OPTGROUP) {
        return false;
      }
    }
    return true;
  }
  generateImpliedEndTags() {
    while (isImpliedEndTagRequired(this.currentTagName)) {
      this.pop();
    }
  }
  generateImpliedEndTagsThoroughly() {
    while (isImpliedEndTagRequiredThoroughly(this.currentTagName)) {
      this.pop();
    }
  }
  generateImpliedEndTagsWithExclusion(exclusionTagName) {
    while (isImpliedEndTagRequired(this.currentTagName) && this.currentTagName !== exclusionTagName) {
      this.pop();
    }
  }
}
var openElementStack = OpenElementStack$1;
const NOAH_ARK_CAPACITY = 3;
class FormattingElementList$1 {
  constructor(treeAdapter) {
    this.length = 0;
    this.entries = [];
    this.treeAdapter = treeAdapter;
    this.bookmark = null;
  }
  _getNoahArkConditionCandidates(newElement) {
    const candidates = [];
    if (this.length >= NOAH_ARK_CAPACITY) {
      const neAttrsLength = this.treeAdapter.getAttrList(newElement).length;
      const neTagName = this.treeAdapter.getTagName(newElement);
      const neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);
      for (let i2 = this.length - 1; i2 >= 0; i2--) {
        const entry = this.entries[i2];
        if (entry.type === FormattingElementList$1.MARKER_ENTRY) {
          break;
        }
        const element = entry.element;
        const elementAttrs = this.treeAdapter.getAttrList(element);
        const isCandidate = this.treeAdapter.getTagName(element) === neTagName && this.treeAdapter.getNamespaceURI(element) === neNamespaceURI && elementAttrs.length === neAttrsLength;
        if (isCandidate) {
          candidates.push({idx: i2, attrs: elementAttrs});
        }
      }
    }
    return candidates.length < NOAH_ARK_CAPACITY ? [] : candidates;
  }
  _ensureNoahArkCondition(newElement) {
    const candidates = this._getNoahArkConditionCandidates(newElement);
    let cLength = candidates.length;
    if (cLength) {
      const neAttrs = this.treeAdapter.getAttrList(newElement);
      const neAttrsLength = neAttrs.length;
      const neAttrsMap = Object.create(null);
      for (let i2 = 0; i2 < neAttrsLength; i2++) {
        const neAttr = neAttrs[i2];
        neAttrsMap[neAttr.name] = neAttr.value;
      }
      for (let i2 = 0; i2 < neAttrsLength; i2++) {
        for (let j2 = 0; j2 < cLength; j2++) {
          const cAttr = candidates[j2].attrs[i2];
          if (neAttrsMap[cAttr.name] !== cAttr.value) {
            candidates.splice(j2, 1);
            cLength--;
          }
          if (candidates.length < NOAH_ARK_CAPACITY) {
            return;
          }
        }
      }
      for (let i2 = cLength - 1; i2 >= NOAH_ARK_CAPACITY - 1; i2--) {
        this.entries.splice(candidates[i2].idx, 1);
        this.length--;
      }
    }
  }
  insertMarker() {
    this.entries.push({type: FormattingElementList$1.MARKER_ENTRY});
    this.length++;
  }
  pushElement(element, token) {
    this._ensureNoahArkCondition(element);
    this.entries.push({
      type: FormattingElementList$1.ELEMENT_ENTRY,
      element,
      token
    });
    this.length++;
  }
  insertElementAfterBookmark(element, token) {
    let bookmarkIdx = this.length - 1;
    for (; bookmarkIdx >= 0; bookmarkIdx--) {
      if (this.entries[bookmarkIdx] === this.bookmark) {
        break;
      }
    }
    this.entries.splice(bookmarkIdx + 1, 0, {
      type: FormattingElementList$1.ELEMENT_ENTRY,
      element,
      token
    });
    this.length++;
  }
  removeEntry(entry) {
    for (let i2 = this.length - 1; i2 >= 0; i2--) {
      if (this.entries[i2] === entry) {
        this.entries.splice(i2, 1);
        this.length--;
        break;
      }
    }
  }
  clearToLastMarker() {
    while (this.length) {
      const entry = this.entries.pop();
      this.length--;
      if (entry.type === FormattingElementList$1.MARKER_ENTRY) {
        break;
      }
    }
  }
  getElementEntryInScopeWithTagName(tagName) {
    for (let i2 = this.length - 1; i2 >= 0; i2--) {
      const entry = this.entries[i2];
      if (entry.type === FormattingElementList$1.MARKER_ENTRY) {
        return null;
      }
      if (this.treeAdapter.getTagName(entry.element) === tagName) {
        return entry;
      }
    }
    return null;
  }
  getElementEntry(element) {
    for (let i2 = this.length - 1; i2 >= 0; i2--) {
      const entry = this.entries[i2];
      if (entry.type === FormattingElementList$1.ELEMENT_ENTRY && entry.element === element) {
        return entry;
      }
    }
    return null;
  }
}
FormattingElementList$1.MARKER_ENTRY = "MARKER_ENTRY";
FormattingElementList$1.ELEMENT_ENTRY = "ELEMENT_ENTRY";
var formattingElementList = FormattingElementList$1;
class Mixin$9 {
  constructor(host) {
    const originalMethods = {};
    const overriddenMethods = this._getOverriddenMethods(this, originalMethods);
    for (const key of Object.keys(overriddenMethods)) {
      if (typeof overriddenMethods[key] === "function") {
        originalMethods[key] = host[key];
        host[key] = overriddenMethods[key];
      }
    }
  }
  _getOverriddenMethods() {
    throw new Error("Not implemented");
  }
}
Mixin$9.install = function(host, Ctor, opts) {
  if (!host.__mixins) {
    host.__mixins = [];
  }
  for (let i2 = 0; i2 < host.__mixins.length; i2++) {
    if (host.__mixins[i2].constructor === Ctor) {
      return host.__mixins[i2];
    }
  }
  const mixin2 = new Ctor(host, opts);
  host.__mixins.push(mixin2);
  return mixin2;
};
var mixin = Mixin$9;
const Mixin$8 = mixin;
class PositionTrackingPreprocessorMixin$2 extends Mixin$8 {
  constructor(preprocessor2) {
    super(preprocessor2);
    this.preprocessor = preprocessor2;
    this.isEol = false;
    this.lineStartPos = 0;
    this.droppedBufferSize = 0;
    this.offset = 0;
    this.col = 0;
    this.line = 1;
  }
  _getOverriddenMethods(mxn, orig) {
    return {
      advance() {
        const pos = this.pos + 1;
        const ch = this.html[pos];
        if (mxn.isEol) {
          mxn.isEol = false;
          mxn.line++;
          mxn.lineStartPos = pos;
        }
        if (ch === "\n" || ch === "\r" && this.html[pos + 1] !== "\n") {
          mxn.isEol = true;
        }
        mxn.col = pos - mxn.lineStartPos + 1;
        mxn.offset = mxn.droppedBufferSize + pos;
        return orig.advance.call(this);
      },
      retreat() {
        orig.retreat.call(this);
        mxn.isEol = false;
        mxn.col = this.pos - mxn.lineStartPos + 1;
      },
      dropParsedChunk() {
        const prevPos = this.pos;
        orig.dropParsedChunk.call(this);
        const reduction = prevPos - this.pos;
        mxn.lineStartPos -= reduction;
        mxn.droppedBufferSize += reduction;
        mxn.offset = mxn.droppedBufferSize + this.pos;
      }
    };
  }
}
var preprocessorMixin$1 = PositionTrackingPreprocessorMixin$2;
const Mixin$7 = mixin;
const Tokenizer$3 = tokenizer;
const PositionTrackingPreprocessorMixin$1 = preprocessorMixin$1;
class LocationInfoTokenizerMixin$2 extends Mixin$7 {
  constructor(tokenizer2) {
    super(tokenizer2);
    this.tokenizer = tokenizer2;
    this.posTracker = Mixin$7.install(tokenizer2.preprocessor, PositionTrackingPreprocessorMixin$1);
    this.currentAttrLocation = null;
    this.ctLoc = null;
  }
  _getCurrentLocation() {
    return {
      startLine: this.posTracker.line,
      startCol: this.posTracker.col,
      startOffset: this.posTracker.offset,
      endLine: -1,
      endCol: -1,
      endOffset: -1
    };
  }
  _attachCurrentAttrLocationInfo() {
    this.currentAttrLocation.endLine = this.posTracker.line;
    this.currentAttrLocation.endCol = this.posTracker.col;
    this.currentAttrLocation.endOffset = this.posTracker.offset;
    const currentToken = this.tokenizer.currentToken;
    const currentAttr = this.tokenizer.currentAttr;
    if (!currentToken.location.attrs) {
      currentToken.location.attrs = Object.create(null);
    }
    currentToken.location.attrs[currentAttr.name] = this.currentAttrLocation;
  }
  _getOverriddenMethods(mxn, orig) {
    const methods = {
      _createStartTagToken() {
        orig._createStartTagToken.call(this);
        this.currentToken.location = mxn.ctLoc;
      },
      _createEndTagToken() {
        orig._createEndTagToken.call(this);
        this.currentToken.location = mxn.ctLoc;
      },
      _createCommentToken() {
        orig._createCommentToken.call(this);
        this.currentToken.location = mxn.ctLoc;
      },
      _createDoctypeToken(initialName) {
        orig._createDoctypeToken.call(this, initialName);
        this.currentToken.location = mxn.ctLoc;
      },
      _createCharacterToken(type, ch) {
        orig._createCharacterToken.call(this, type, ch);
        this.currentCharacterToken.location = mxn.ctLoc;
      },
      _createEOFToken() {
        orig._createEOFToken.call(this);
        this.currentToken.location = mxn._getCurrentLocation();
      },
      _createAttr(attrNameFirstCh) {
        orig._createAttr.call(this, attrNameFirstCh);
        mxn.currentAttrLocation = mxn._getCurrentLocation();
      },
      _leaveAttrName(toState) {
        orig._leaveAttrName.call(this, toState);
        mxn._attachCurrentAttrLocationInfo();
      },
      _leaveAttrValue(toState) {
        orig._leaveAttrValue.call(this, toState);
        mxn._attachCurrentAttrLocationInfo();
      },
      _emitCurrentToken() {
        const ctLoc = this.currentToken.location;
        if (this.currentCharacterToken) {
          this.currentCharacterToken.location.endLine = ctLoc.startLine;
          this.currentCharacterToken.location.endCol = ctLoc.startCol;
          this.currentCharacterToken.location.endOffset = ctLoc.startOffset;
        }
        if (this.currentToken.type === Tokenizer$3.EOF_TOKEN) {
          ctLoc.endLine = ctLoc.startLine;
          ctLoc.endCol = ctLoc.startCol;
          ctLoc.endOffset = ctLoc.startOffset;
        } else {
          ctLoc.endLine = mxn.posTracker.line;
          ctLoc.endCol = mxn.posTracker.col + 1;
          ctLoc.endOffset = mxn.posTracker.offset + 1;
        }
        orig._emitCurrentToken.call(this);
      },
      _emitCurrentCharacterToken() {
        const ctLoc = this.currentCharacterToken && this.currentCharacterToken.location;
        if (ctLoc && ctLoc.endOffset === -1) {
          ctLoc.endLine = mxn.posTracker.line;
          ctLoc.endCol = mxn.posTracker.col;
          ctLoc.endOffset = mxn.posTracker.offset;
        }
        orig._emitCurrentCharacterToken.call(this);
      }
    };
    Object.keys(Tokenizer$3.MODE).forEach((modeName) => {
      const state = Tokenizer$3.MODE[modeName];
      methods[state] = function(cp) {
        mxn.ctLoc = mxn._getCurrentLocation();
        orig[state].call(this, cp);
      };
    });
    return methods;
  }
}
var tokenizerMixin$1 = LocationInfoTokenizerMixin$2;
const Mixin$6 = mixin;
class LocationInfoOpenElementStackMixin$1 extends Mixin$6 {
  constructor(stack, opts) {
    super(stack);
    this.onItemPop = opts.onItemPop;
  }
  _getOverriddenMethods(mxn, orig) {
    return {
      pop() {
        mxn.onItemPop(this.current);
        orig.pop.call(this);
      },
      popAllUpToHtmlElement() {
        for (let i2 = this.stackTop; i2 > 0; i2--) {
          mxn.onItemPop(this.items[i2]);
        }
        orig.popAllUpToHtmlElement.call(this);
      },
      remove(element) {
        mxn.onItemPop(this.current);
        orig.remove.call(this, element);
      }
    };
  }
}
var openElementStackMixin = LocationInfoOpenElementStackMixin$1;
const Mixin$5 = mixin;
const Tokenizer$2 = tokenizer;
const LocationInfoTokenizerMixin$1 = tokenizerMixin$1;
const LocationInfoOpenElementStackMixin = openElementStackMixin;
const HTML$3 = html$1;
const $$4 = HTML$3.TAG_NAMES;
class LocationInfoParserMixin$1 extends Mixin$5 {
  constructor(parser2) {
    super(parser2);
    this.parser = parser2;
    this.treeAdapter = this.parser.treeAdapter;
    this.posTracker = null;
    this.lastStartTagToken = null;
    this.lastFosterParentingLocation = null;
    this.currentToken = null;
  }
  _setStartLocation(element) {
    let loc = null;
    if (this.lastStartTagToken) {
      loc = Object.assign({}, this.lastStartTagToken.location);
      loc.startTag = this.lastStartTagToken.location;
    }
    this.treeAdapter.setNodeSourceCodeLocation(element, loc);
  }
  _setEndLocation(element, closingToken) {
    const loc = this.treeAdapter.getNodeSourceCodeLocation(element);
    if (loc) {
      if (closingToken.location) {
        const ctLoc = closingToken.location;
        const tn = this.treeAdapter.getTagName(element);
        const isClosingEndTag = closingToken.type === Tokenizer$2.END_TAG_TOKEN && tn === closingToken.tagName;
        if (isClosingEndTag) {
          loc.endTag = Object.assign({}, ctLoc);
          loc.endLine = ctLoc.endLine;
          loc.endCol = ctLoc.endCol;
          loc.endOffset = ctLoc.endOffset;
        } else {
          loc.endLine = ctLoc.startLine;
          loc.endCol = ctLoc.startCol;
          loc.endOffset = ctLoc.startOffset;
        }
      }
    }
  }
  _getOverriddenMethods(mxn, orig) {
    return {
      _bootstrap(document2, fragmentContext) {
        orig._bootstrap.call(this, document2, fragmentContext);
        mxn.lastStartTagToken = null;
        mxn.lastFosterParentingLocation = null;
        mxn.currentToken = null;
        const tokenizerMixin2 = Mixin$5.install(this.tokenizer, LocationInfoTokenizerMixin$1);
        mxn.posTracker = tokenizerMixin2.posTracker;
        Mixin$5.install(this.openElements, LocationInfoOpenElementStackMixin, {
          onItemPop: function(element) {
            mxn._setEndLocation(element, mxn.currentToken);
          }
        });
      },
      _runParsingLoop(scriptHandler) {
        orig._runParsingLoop.call(this, scriptHandler);
        for (let i2 = this.openElements.stackTop; i2 >= 0; i2--) {
          mxn._setEndLocation(this.openElements.items[i2], mxn.currentToken);
        }
      },
      _processTokenInForeignContent(token) {
        mxn.currentToken = token;
        orig._processTokenInForeignContent.call(this, token);
      },
      _processToken(token) {
        mxn.currentToken = token;
        orig._processToken.call(this, token);
        const requireExplicitUpdate = token.type === Tokenizer$2.END_TAG_TOKEN && (token.tagName === $$4.HTML || token.tagName === $$4.BODY && this.openElements.hasInScope($$4.BODY));
        if (requireExplicitUpdate) {
          for (let i2 = this.openElements.stackTop; i2 >= 0; i2--) {
            const element = this.openElements.items[i2];
            if (this.treeAdapter.getTagName(element) === token.tagName) {
              mxn._setEndLocation(element, token);
              break;
            }
          }
        }
      },
      _setDocumentType(token) {
        orig._setDocumentType.call(this, token);
        const documentChildren = this.treeAdapter.getChildNodes(this.document);
        const cnLength = documentChildren.length;
        for (let i2 = 0; i2 < cnLength; i2++) {
          const node = documentChildren[i2];
          if (this.treeAdapter.isDocumentTypeNode(node)) {
            this.treeAdapter.setNodeSourceCodeLocation(node, token.location);
            break;
          }
        }
      },
      _attachElementToTree(element) {
        mxn._setStartLocation(element);
        mxn.lastStartTagToken = null;
        orig._attachElementToTree.call(this, element);
      },
      _appendElement(token, namespaceURI) {
        mxn.lastStartTagToken = token;
        orig._appendElement.call(this, token, namespaceURI);
      },
      _insertElement(token, namespaceURI) {
        mxn.lastStartTagToken = token;
        orig._insertElement.call(this, token, namespaceURI);
      },
      _insertTemplate(token) {
        mxn.lastStartTagToken = token;
        orig._insertTemplate.call(this, token);
        const tmplContent = this.treeAdapter.getTemplateContent(this.openElements.current);
        this.treeAdapter.setNodeSourceCodeLocation(tmplContent, null);
      },
      _insertFakeRootElement() {
        orig._insertFakeRootElement.call(this);
        this.treeAdapter.setNodeSourceCodeLocation(this.openElements.current, null);
      },
      _appendCommentNode(token, parent) {
        orig._appendCommentNode.call(this, token, parent);
        const children = this.treeAdapter.getChildNodes(parent);
        const commentNode = children[children.length - 1];
        this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);
      },
      _findFosterParentingLocation() {
        mxn.lastFosterParentingLocation = orig._findFosterParentingLocation.call(this);
        return mxn.lastFosterParentingLocation;
      },
      _insertCharacters(token) {
        orig._insertCharacters.call(this, token);
        const hasFosterParent = this._shouldFosterParentOnInsertion();
        const parent = hasFosterParent && mxn.lastFosterParentingLocation.parent || this.openElements.currentTmplContent || this.openElements.current;
        const siblings = this.treeAdapter.getChildNodes(parent);
        const textNodeIdx = hasFosterParent && mxn.lastFosterParentingLocation.beforeElement ? siblings.indexOf(mxn.lastFosterParentingLocation.beforeElement) - 1 : siblings.length - 1;
        const textNode = siblings[textNodeIdx];
        const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);
        if (tnLoc) {
          tnLoc.endLine = token.location.endLine;
          tnLoc.endCol = token.location.endCol;
          tnLoc.endOffset = token.location.endOffset;
        } else {
          this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);
        }
      }
    };
  }
}
var parserMixin$1 = LocationInfoParserMixin$1;
const Mixin$4 = mixin;
class ErrorReportingMixinBase$3 extends Mixin$4 {
  constructor(host, opts) {
    super(host);
    this.posTracker = null;
    this.onParseError = opts.onParseError;
  }
  _setErrorLocation(err) {
    err.startLine = err.endLine = this.posTracker.line;
    err.startCol = err.endCol = this.posTracker.col;
    err.startOffset = err.endOffset = this.posTracker.offset;
  }
  _reportError(code3) {
    const err = {
      code: code3,
      startLine: -1,
      startCol: -1,
      startOffset: -1,
      endLine: -1,
      endCol: -1,
      endOffset: -1
    };
    this._setErrorLocation(err);
    this.onParseError(err);
  }
  _getOverriddenMethods(mxn) {
    return {
      _err(code3) {
        mxn._reportError(code3);
      }
    };
  }
}
var mixinBase = ErrorReportingMixinBase$3;
const ErrorReportingMixinBase$2 = mixinBase;
const PositionTrackingPreprocessorMixin = preprocessorMixin$1;
const Mixin$3 = mixin;
class ErrorReportingPreprocessorMixin$1 extends ErrorReportingMixinBase$2 {
  constructor(preprocessor2, opts) {
    super(preprocessor2, opts);
    this.posTracker = Mixin$3.install(preprocessor2, PositionTrackingPreprocessorMixin);
    this.lastErrOffset = -1;
  }
  _reportError(code3) {
    if (this.lastErrOffset !== this.posTracker.offset) {
      this.lastErrOffset = this.posTracker.offset;
      super._reportError(code3);
    }
  }
}
var preprocessorMixin = ErrorReportingPreprocessorMixin$1;
const ErrorReportingMixinBase$1 = mixinBase;
const ErrorReportingPreprocessorMixin = preprocessorMixin;
const Mixin$2 = mixin;
class ErrorReportingTokenizerMixin$1 extends ErrorReportingMixinBase$1 {
  constructor(tokenizer2, opts) {
    super(tokenizer2, opts);
    const preprocessorMixin2 = Mixin$2.install(tokenizer2.preprocessor, ErrorReportingPreprocessorMixin, opts);
    this.posTracker = preprocessorMixin2.posTracker;
  }
}
var tokenizerMixin = ErrorReportingTokenizerMixin$1;
const ErrorReportingMixinBase = mixinBase;
const ErrorReportingTokenizerMixin = tokenizerMixin;
const LocationInfoTokenizerMixin = tokenizerMixin$1;
const Mixin$1 = mixin;
class ErrorReportingParserMixin$1 extends ErrorReportingMixinBase {
  constructor(parser2, opts) {
    super(parser2, opts);
    this.opts = opts;
    this.ctLoc = null;
    this.locBeforeToken = false;
  }
  _setErrorLocation(err) {
    if (this.ctLoc) {
      err.startLine = this.ctLoc.startLine;
      err.startCol = this.ctLoc.startCol;
      err.startOffset = this.ctLoc.startOffset;
      err.endLine = this.locBeforeToken ? this.ctLoc.startLine : this.ctLoc.endLine;
      err.endCol = this.locBeforeToken ? this.ctLoc.startCol : this.ctLoc.endCol;
      err.endOffset = this.locBeforeToken ? this.ctLoc.startOffset : this.ctLoc.endOffset;
    }
  }
  _getOverriddenMethods(mxn, orig) {
    return {
      _bootstrap(document2, fragmentContext) {
        orig._bootstrap.call(this, document2, fragmentContext);
        Mixin$1.install(this.tokenizer, ErrorReportingTokenizerMixin, mxn.opts);
        Mixin$1.install(this.tokenizer, LocationInfoTokenizerMixin);
      },
      _processInputToken(token) {
        mxn.ctLoc = token.location;
        orig._processInputToken.call(this, token);
      },
      _err(code3, options) {
        mxn.locBeforeToken = options && options.beforeToken;
        mxn._reportError(code3);
      }
    };
  }
}
var parserMixin = ErrorReportingParserMixin$1;
var _default = {};
const {DOCUMENT_MODE: DOCUMENT_MODE$3} = html$1;
_default.createDocument = function() {
  return {
    nodeName: "#document",
    mode: DOCUMENT_MODE$3.NO_QUIRKS,
    childNodes: []
  };
};
_default.createDocumentFragment = function() {
  return {
    nodeName: "#document-fragment",
    childNodes: []
  };
};
_default.createElement = function(tagName, namespaceURI, attrs) {
  return {
    nodeName: tagName,
    tagName,
    attrs,
    namespaceURI,
    childNodes: [],
    parentNode: null
  };
};
_default.createCommentNode = function(data) {
  return {
    nodeName: "#comment",
    data,
    parentNode: null
  };
};
const createTextNode$1 = function(value) {
  return {
    nodeName: "#text",
    value,
    parentNode: null
  };
};
const appendChild$1 = _default.appendChild = function(parentNode, newNode) {
  parentNode.childNodes.push(newNode);
  newNode.parentNode = parentNode;
};
const insertBefore$1 = _default.insertBefore = function(parentNode, newNode, referenceNode) {
  const insertionIdx = parentNode.childNodes.indexOf(referenceNode);
  parentNode.childNodes.splice(insertionIdx, 0, newNode);
  newNode.parentNode = parentNode;
};
_default.setTemplateContent = function(templateElement, contentElement) {
  templateElement.content = contentElement;
};
_default.getTemplateContent = function(templateElement) {
  return templateElement.content;
};
_default.setDocumentType = function(document2, name2, publicId, systemId) {
  let doctypeNode = null;
  for (let i2 = 0; i2 < document2.childNodes.length; i2++) {
    if (document2.childNodes[i2].nodeName === "#documentType") {
      doctypeNode = document2.childNodes[i2];
      break;
    }
  }
  if (doctypeNode) {
    doctypeNode.name = name2;
    doctypeNode.publicId = publicId;
    doctypeNode.systemId = systemId;
  } else {
    appendChild$1(document2, {
      nodeName: "#documentType",
      name: name2,
      publicId,
      systemId
    });
  }
};
_default.setDocumentMode = function(document2, mode) {
  document2.mode = mode;
};
_default.getDocumentMode = function(document2) {
  return document2.mode;
};
_default.detachNode = function(node) {
  if (node.parentNode) {
    const idx = node.parentNode.childNodes.indexOf(node);
    node.parentNode.childNodes.splice(idx, 1);
    node.parentNode = null;
  }
};
_default.insertText = function(parentNode, text) {
  if (parentNode.childNodes.length) {
    const prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];
    if (prevNode.nodeName === "#text") {
      prevNode.value += text;
      return;
    }
  }
  appendChild$1(parentNode, createTextNode$1(text));
};
_default.insertTextBefore = function(parentNode, text, referenceNode) {
  const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];
  if (prevNode && prevNode.nodeName === "#text") {
    prevNode.value += text;
  } else {
    insertBefore$1(parentNode, createTextNode$1(text), referenceNode);
  }
};
_default.adoptAttributes = function(recipient, attrs) {
  const recipientAttrsMap = [];
  for (let i2 = 0; i2 < recipient.attrs.length; i2++) {
    recipientAttrsMap.push(recipient.attrs[i2].name);
  }
  for (let j2 = 0; j2 < attrs.length; j2++) {
    if (recipientAttrsMap.indexOf(attrs[j2].name) === -1) {
      recipient.attrs.push(attrs[j2]);
    }
  }
};
_default.getFirstChild = function(node) {
  return node.childNodes[0];
};
_default.getChildNodes = function(node) {
  return node.childNodes;
};
_default.getParentNode = function(node) {
  return node.parentNode;
};
_default.getAttrList = function(element) {
  return element.attrs;
};
_default.getTagName = function(element) {
  return element.tagName;
};
_default.getNamespaceURI = function(element) {
  return element.namespaceURI;
};
_default.getTextNodeContent = function(textNode) {
  return textNode.value;
};
_default.getCommentNodeContent = function(commentNode) {
  return commentNode.data;
};
_default.getDocumentTypeNodeName = function(doctypeNode) {
  return doctypeNode.name;
};
_default.getDocumentTypeNodePublicId = function(doctypeNode) {
  return doctypeNode.publicId;
};
_default.getDocumentTypeNodeSystemId = function(doctypeNode) {
  return doctypeNode.systemId;
};
_default.isTextNode = function(node) {
  return node.nodeName === "#text";
};
_default.isCommentNode = function(node) {
  return node.nodeName === "#comment";
};
_default.isDocumentTypeNode = function(node) {
  return node.nodeName === "#documentType";
};
_default.isElementNode = function(node) {
  return !!node.tagName;
};
_default.setNodeSourceCodeLocation = function(node, location) {
  node.sourceCodeLocation = location;
};
_default.getNodeSourceCodeLocation = function(node) {
  return node.sourceCodeLocation;
};
var mergeOptions$2 = function mergeOptions2(defaults2, options) {
  options = options || Object.create(null);
  return [defaults2, options].reduce((merged, optObj) => {
    Object.keys(optObj).forEach((key) => {
      merged[key] = optObj[key];
    });
    return merged;
  }, Object.create(null));
};
var doctype$4 = {};
const {DOCUMENT_MODE: DOCUMENT_MODE$2} = html$1;
const VALID_DOCTYPE_NAME$1 = "html";
const VALID_SYSTEM_ID$1 = "about:legacy-compat";
const QUIRKS_MODE_SYSTEM_ID$1 = "http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd";
const QUIRKS_MODE_PUBLIC_ID_PREFIXES$1 = [
  "+//silmaril//dtd html pro v0r11 19970101//",
  "-//as//dtd html 3.0 aswedit + extensions//",
  "-//advasoft ltd//dtd html 3.0 aswedit + extensions//",
  "-//ietf//dtd html 2.0 level 1//",
  "-//ietf//dtd html 2.0 level 2//",
  "-//ietf//dtd html 2.0 strict level 1//",
  "-//ietf//dtd html 2.0 strict level 2//",
  "-//ietf//dtd html 2.0 strict//",
  "-//ietf//dtd html 2.0//",
  "-//ietf//dtd html 2.1e//",
  "-//ietf//dtd html 3.0//",
  "-//ietf//dtd html 3.2 final//",
  "-//ietf//dtd html 3.2//",
  "-//ietf//dtd html 3//",
  "-//ietf//dtd html level 0//",
  "-//ietf//dtd html level 1//",
  "-//ietf//dtd html level 2//",
  "-//ietf//dtd html level 3//",
  "-//ietf//dtd html strict level 0//",
  "-//ietf//dtd html strict level 1//",
  "-//ietf//dtd html strict level 2//",
  "-//ietf//dtd html strict level 3//",
  "-//ietf//dtd html strict//",
  "-//ietf//dtd html//",
  "-//metrius//dtd metrius presentational//",
  "-//microsoft//dtd internet explorer 2.0 html strict//",
  "-//microsoft//dtd internet explorer 2.0 html//",
  "-//microsoft//dtd internet explorer 2.0 tables//",
  "-//microsoft//dtd internet explorer 3.0 html strict//",
  "-//microsoft//dtd internet explorer 3.0 html//",
  "-//microsoft//dtd internet explorer 3.0 tables//",
  "-//netscape comm. corp.//dtd html//",
  "-//netscape comm. corp.//dtd strict html//",
  "-//o'reilly and associates//dtd html 2.0//",
  "-//o'reilly and associates//dtd html extended 1.0//",
  "-//o'reilly and associates//dtd html extended relaxed 1.0//",
  "-//sq//dtd html 2.0 hotmetal + extensions//",
  "-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//",
  "-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//",
  "-//spyglass//dtd html 2.0 extended//",
  "-//sun microsystems corp.//dtd hotjava html//",
  "-//sun microsystems corp.//dtd hotjava strict html//",
  "-//w3c//dtd html 3 1995-03-24//",
  "-//w3c//dtd html 3.2 draft//",
  "-//w3c//dtd html 3.2 final//",
  "-//w3c//dtd html 3.2//",
  "-//w3c//dtd html 3.2s draft//",
  "-//w3c//dtd html 4.0 frameset//",
  "-//w3c//dtd html 4.0 transitional//",
  "-//w3c//dtd html experimental 19960712//",
  "-//w3c//dtd html experimental 970421//",
  "-//w3c//dtd w3 html//",
  "-//w3o//dtd w3 html 3.0//",
  "-//webtechs//dtd mozilla html 2.0//",
  "-//webtechs//dtd mozilla html//"
];
const QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES$1 = QUIRKS_MODE_PUBLIC_ID_PREFIXES$1.concat([
  "-//w3c//dtd html 4.01 frameset//",
  "-//w3c//dtd html 4.01 transitional//"
]);
const QUIRKS_MODE_PUBLIC_IDS$1 = ["-//w3o//dtd w3 html strict 3.0//en//", "-/w3c/dtd html 4.0 transitional/en", "html"];
const LIMITED_QUIRKS_PUBLIC_ID_PREFIXES$1 = ["-//w3c//dtd xhtml 1.0 frameset//", "-//w3c//dtd xhtml 1.0 transitional//"];
const LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES$1 = LIMITED_QUIRKS_PUBLIC_ID_PREFIXES$1.concat([
  "-//w3c//dtd html 4.01 frameset//",
  "-//w3c//dtd html 4.01 transitional//"
]);
function enquoteDoctypeId$1(id2) {
  const quote = id2.indexOf('"') !== -1 ? "'" : '"';
  return quote + id2 + quote;
}
function hasPrefix$1(publicId, prefixes) {
  for (let i2 = 0; i2 < prefixes.length; i2++) {
    if (publicId.indexOf(prefixes[i2]) === 0) {
      return true;
    }
  }
  return false;
}
doctype$4.isConforming = function(token) {
  return token.name === VALID_DOCTYPE_NAME$1 && token.publicId === null && (token.systemId === null || token.systemId === VALID_SYSTEM_ID$1);
};
doctype$4.getDocumentMode = function(token) {
  if (token.name !== VALID_DOCTYPE_NAME$1) {
    return DOCUMENT_MODE$2.QUIRKS;
  }
  const systemId = token.systemId;
  if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID$1) {
    return DOCUMENT_MODE$2.QUIRKS;
  }
  let publicId = token.publicId;
  if (publicId !== null) {
    publicId = publicId.toLowerCase();
    if (QUIRKS_MODE_PUBLIC_IDS$1.indexOf(publicId) > -1) {
      return DOCUMENT_MODE$2.QUIRKS;
    }
    let prefixes = systemId === null ? QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES$1 : QUIRKS_MODE_PUBLIC_ID_PREFIXES$1;
    if (hasPrefix$1(publicId, prefixes)) {
      return DOCUMENT_MODE$2.QUIRKS;
    }
    prefixes = systemId === null ? LIMITED_QUIRKS_PUBLIC_ID_PREFIXES$1 : LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES$1;
    if (hasPrefix$1(publicId, prefixes)) {
      return DOCUMENT_MODE$2.LIMITED_QUIRKS;
    }
  }
  return DOCUMENT_MODE$2.NO_QUIRKS;
};
doctype$4.serializeContent = function(name2, publicId, systemId) {
  let str = "!DOCTYPE ";
  if (name2) {
    str += name2;
  }
  if (publicId) {
    str += " PUBLIC " + enquoteDoctypeId$1(publicId);
  } else if (systemId) {
    str += " SYSTEM";
  }
  if (systemId !== null) {
    str += " " + enquoteDoctypeId$1(systemId);
  }
  return str;
};
var foreignContent$1 = {};
const Tokenizer$1 = tokenizer;
const HTML$2 = html$1;
const $$3 = HTML$2.TAG_NAMES;
const NS$3 = HTML$2.NAMESPACES;
const ATTRS$1 = HTML$2.ATTRS;
const MIME_TYPES = {
  TEXT_HTML: "text/html",
  APPLICATION_XML: "application/xhtml+xml"
};
const DEFINITION_URL_ATTR = "definitionurl";
const ADJUSTED_DEFINITION_URL_ATTR = "definitionURL";
const SVG_ATTRS_ADJUSTMENT_MAP = {
  attributename: "attributeName",
  attributetype: "attributeType",
  basefrequency: "baseFrequency",
  baseprofile: "baseProfile",
  calcmode: "calcMode",
  clippathunits: "clipPathUnits",
  diffuseconstant: "diffuseConstant",
  edgemode: "edgeMode",
  filterunits: "filterUnits",
  glyphref: "glyphRef",
  gradienttransform: "gradientTransform",
  gradientunits: "gradientUnits",
  kernelmatrix: "kernelMatrix",
  kernelunitlength: "kernelUnitLength",
  keypoints: "keyPoints",
  keysplines: "keySplines",
  keytimes: "keyTimes",
  lengthadjust: "lengthAdjust",
  limitingconeangle: "limitingConeAngle",
  markerheight: "markerHeight",
  markerunits: "markerUnits",
  markerwidth: "markerWidth",
  maskcontentunits: "maskContentUnits",
  maskunits: "maskUnits",
  numoctaves: "numOctaves",
  pathlength: "pathLength",
  patterncontentunits: "patternContentUnits",
  patterntransform: "patternTransform",
  patternunits: "patternUnits",
  pointsatx: "pointsAtX",
  pointsaty: "pointsAtY",
  pointsatz: "pointsAtZ",
  preservealpha: "preserveAlpha",
  preserveaspectratio: "preserveAspectRatio",
  primitiveunits: "primitiveUnits",
  refx: "refX",
  refy: "refY",
  repeatcount: "repeatCount",
  repeatdur: "repeatDur",
  requiredextensions: "requiredExtensions",
  requiredfeatures: "requiredFeatures",
  specularconstant: "specularConstant",
  specularexponent: "specularExponent",
  spreadmethod: "spreadMethod",
  startoffset: "startOffset",
  stddeviation: "stdDeviation",
  stitchtiles: "stitchTiles",
  surfacescale: "surfaceScale",
  systemlanguage: "systemLanguage",
  tablevalues: "tableValues",
  targetx: "targetX",
  targety: "targetY",
  textlength: "textLength",
  viewbox: "viewBox",
  viewtarget: "viewTarget",
  xchannelselector: "xChannelSelector",
  ychannelselector: "yChannelSelector",
  zoomandpan: "zoomAndPan"
};
const XML_ATTRS_ADJUSTMENT_MAP = {
  "xlink:actuate": {prefix: "xlink", name: "actuate", namespace: NS$3.XLINK},
  "xlink:arcrole": {prefix: "xlink", name: "arcrole", namespace: NS$3.XLINK},
  "xlink:href": {prefix: "xlink", name: "href", namespace: NS$3.XLINK},
  "xlink:role": {prefix: "xlink", name: "role", namespace: NS$3.XLINK},
  "xlink:show": {prefix: "xlink", name: "show", namespace: NS$3.XLINK},
  "xlink:title": {prefix: "xlink", name: "title", namespace: NS$3.XLINK},
  "xlink:type": {prefix: "xlink", name: "type", namespace: NS$3.XLINK},
  "xml:base": {prefix: "xml", name: "base", namespace: NS$3.XML},
  "xml:lang": {prefix: "xml", name: "lang", namespace: NS$3.XML},
  "xml:space": {prefix: "xml", name: "space", namespace: NS$3.XML},
  xmlns: {prefix: "", name: "xmlns", namespace: NS$3.XMLNS},
  "xmlns:xlink": {prefix: "xmlns", name: "xlink", namespace: NS$3.XMLNS}
};
const SVG_TAG_NAMES_ADJUSTMENT_MAP = foreignContent$1.SVG_TAG_NAMES_ADJUSTMENT_MAP = {
  altglyph: "altGlyph",
  altglyphdef: "altGlyphDef",
  altglyphitem: "altGlyphItem",
  animatecolor: "animateColor",
  animatemotion: "animateMotion",
  animatetransform: "animateTransform",
  clippath: "clipPath",
  feblend: "feBlend",
  fecolormatrix: "feColorMatrix",
  fecomponenttransfer: "feComponentTransfer",
  fecomposite: "feComposite",
  feconvolvematrix: "feConvolveMatrix",
  fediffuselighting: "feDiffuseLighting",
  fedisplacementmap: "feDisplacementMap",
  fedistantlight: "feDistantLight",
  feflood: "feFlood",
  fefunca: "feFuncA",
  fefuncb: "feFuncB",
  fefuncg: "feFuncG",
  fefuncr: "feFuncR",
  fegaussianblur: "feGaussianBlur",
  feimage: "feImage",
  femerge: "feMerge",
  femergenode: "feMergeNode",
  femorphology: "feMorphology",
  feoffset: "feOffset",
  fepointlight: "fePointLight",
  fespecularlighting: "feSpecularLighting",
  fespotlight: "feSpotLight",
  fetile: "feTile",
  feturbulence: "feTurbulence",
  foreignobject: "foreignObject",
  glyphref: "glyphRef",
  lineargradient: "linearGradient",
  radialgradient: "radialGradient",
  textpath: "textPath"
};
const EXITS_FOREIGN_CONTENT = {
  [$$3.B]: true,
  [$$3.BIG]: true,
  [$$3.BLOCKQUOTE]: true,
  [$$3.BODY]: true,
  [$$3.BR]: true,
  [$$3.CENTER]: true,
  [$$3.CODE]: true,
  [$$3.DD]: true,
  [$$3.DIV]: true,
  [$$3.DL]: true,
  [$$3.DT]: true,
  [$$3.EM]: true,
  [$$3.EMBED]: true,
  [$$3.H1]: true,
  [$$3.H2]: true,
  [$$3.H3]: true,
  [$$3.H4]: true,
  [$$3.H5]: true,
  [$$3.H6]: true,
  [$$3.HEAD]: true,
  [$$3.HR]: true,
  [$$3.I]: true,
  [$$3.IMG]: true,
  [$$3.LI]: true,
  [$$3.LISTING]: true,
  [$$3.MENU]: true,
  [$$3.META]: true,
  [$$3.NOBR]: true,
  [$$3.OL]: true,
  [$$3.P]: true,
  [$$3.PRE]: true,
  [$$3.RUBY]: true,
  [$$3.S]: true,
  [$$3.SMALL]: true,
  [$$3.SPAN]: true,
  [$$3.STRONG]: true,
  [$$3.STRIKE]: true,
  [$$3.SUB]: true,
  [$$3.SUP]: true,
  [$$3.TABLE]: true,
  [$$3.TT]: true,
  [$$3.U]: true,
  [$$3.UL]: true,
  [$$3.VAR]: true
};
foreignContent$1.causesExit = function(startTagToken) {
  const tn = startTagToken.tagName;
  const isFontWithAttrs = tn === $$3.FONT && (Tokenizer$1.getTokenAttr(startTagToken, ATTRS$1.COLOR) !== null || Tokenizer$1.getTokenAttr(startTagToken, ATTRS$1.SIZE) !== null || Tokenizer$1.getTokenAttr(startTagToken, ATTRS$1.FACE) !== null);
  return isFontWithAttrs ? true : EXITS_FOREIGN_CONTENT[tn];
};
foreignContent$1.adjustTokenMathMLAttrs = function(token) {
  for (let i2 = 0; i2 < token.attrs.length; i2++) {
    if (token.attrs[i2].name === DEFINITION_URL_ATTR) {
      token.attrs[i2].name = ADJUSTED_DEFINITION_URL_ATTR;
      break;
    }
  }
};
foreignContent$1.adjustTokenSVGAttrs = function(token) {
  for (let i2 = 0; i2 < token.attrs.length; i2++) {
    const adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP[token.attrs[i2].name];
    if (adjustedAttrName) {
      token.attrs[i2].name = adjustedAttrName;
    }
  }
};
foreignContent$1.adjustTokenXMLAttrs = function(token) {
  for (let i2 = 0; i2 < token.attrs.length; i2++) {
    const adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP[token.attrs[i2].name];
    if (adjustedAttrEntry) {
      token.attrs[i2].prefix = adjustedAttrEntry.prefix;
      token.attrs[i2].name = adjustedAttrEntry.name;
      token.attrs[i2].namespace = adjustedAttrEntry.namespace;
    }
  }
};
foreignContent$1.adjustTokenSVGTagName = function(token) {
  const adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP[token.tagName];
  if (adjustedTagName) {
    token.tagName = adjustedTagName;
  }
};
function isMathMLTextIntegrationPoint(tn, ns) {
  return ns === NS$3.MATHML && (tn === $$3.MI || tn === $$3.MO || tn === $$3.MN || tn === $$3.MS || tn === $$3.MTEXT);
}
function isHtmlIntegrationPoint(tn, ns, attrs) {
  if (ns === NS$3.MATHML && tn === $$3.ANNOTATION_XML) {
    for (let i2 = 0; i2 < attrs.length; i2++) {
      if (attrs[i2].name === ATTRS$1.ENCODING) {
        const value = attrs[i2].value.toLowerCase();
        return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;
      }
    }
  }
  return ns === NS$3.SVG && (tn === $$3.FOREIGN_OBJECT || tn === $$3.DESC || tn === $$3.TITLE);
}
foreignContent$1.isIntegrationPoint = function(tn, ns, attrs, foreignNS) {
  if ((!foreignNS || foreignNS === NS$3.HTML) && isHtmlIntegrationPoint(tn, ns, attrs)) {
    return true;
  }
  if ((!foreignNS || foreignNS === NS$3.MATHML) && isMathMLTextIntegrationPoint(tn, ns)) {
    return true;
  }
  return false;
};
const Tokenizer = tokenizer;
const OpenElementStack = openElementStack;
const FormattingElementList = formattingElementList;
const LocationInfoParserMixin = parserMixin$1;
const ErrorReportingParserMixin = parserMixin;
const Mixin = mixin;
const defaultTreeAdapter$1 = _default;
const mergeOptions$1 = mergeOptions$2;
const doctype$3 = doctype$4;
const foreignContent = foreignContent$1;
const ERR = errorCodes;
const unicode = unicode$3;
const HTML$1 = html$1;
const $$2 = HTML$1.TAG_NAMES;
const NS$2 = HTML$1.NAMESPACES;
const ATTRS = HTML$1.ATTRS;
const DEFAULT_OPTIONS$1 = {
  scriptingEnabled: true,
  sourceCodeLocationInfo: false,
  onParseError: null,
  treeAdapter: defaultTreeAdapter$1
};
const HIDDEN_INPUT_TYPE = "hidden";
const AA_OUTER_LOOP_ITER = 8;
const AA_INNER_LOOP_ITER = 3;
const INITIAL_MODE = "INITIAL_MODE";
const BEFORE_HTML_MODE = "BEFORE_HTML_MODE";
const BEFORE_HEAD_MODE = "BEFORE_HEAD_MODE";
const IN_HEAD_MODE = "IN_HEAD_MODE";
const IN_HEAD_NO_SCRIPT_MODE = "IN_HEAD_NO_SCRIPT_MODE";
const AFTER_HEAD_MODE = "AFTER_HEAD_MODE";
const IN_BODY_MODE = "IN_BODY_MODE";
const TEXT_MODE = "TEXT_MODE";
const IN_TABLE_MODE = "IN_TABLE_MODE";
const IN_TABLE_TEXT_MODE = "IN_TABLE_TEXT_MODE";
const IN_CAPTION_MODE = "IN_CAPTION_MODE";
const IN_COLUMN_GROUP_MODE = "IN_COLUMN_GROUP_MODE";
const IN_TABLE_BODY_MODE = "IN_TABLE_BODY_MODE";
const IN_ROW_MODE = "IN_ROW_MODE";
const IN_CELL_MODE = "IN_CELL_MODE";
const IN_SELECT_MODE = "IN_SELECT_MODE";
const IN_SELECT_IN_TABLE_MODE = "IN_SELECT_IN_TABLE_MODE";
const IN_TEMPLATE_MODE = "IN_TEMPLATE_MODE";
const AFTER_BODY_MODE = "AFTER_BODY_MODE";
const IN_FRAMESET_MODE = "IN_FRAMESET_MODE";
const AFTER_FRAMESET_MODE = "AFTER_FRAMESET_MODE";
const AFTER_AFTER_BODY_MODE = "AFTER_AFTER_BODY_MODE";
const AFTER_AFTER_FRAMESET_MODE = "AFTER_AFTER_FRAMESET_MODE";
const INSERTION_MODE_RESET_MAP = {
  [$$2.TR]: IN_ROW_MODE,
  [$$2.TBODY]: IN_TABLE_BODY_MODE,
  [$$2.THEAD]: IN_TABLE_BODY_MODE,
  [$$2.TFOOT]: IN_TABLE_BODY_MODE,
  [$$2.CAPTION]: IN_CAPTION_MODE,
  [$$2.COLGROUP]: IN_COLUMN_GROUP_MODE,
  [$$2.TABLE]: IN_TABLE_MODE,
  [$$2.BODY]: IN_BODY_MODE,
  [$$2.FRAMESET]: IN_FRAMESET_MODE
};
const TEMPLATE_INSERTION_MODE_SWITCH_MAP = {
  [$$2.CAPTION]: IN_TABLE_MODE,
  [$$2.COLGROUP]: IN_TABLE_MODE,
  [$$2.TBODY]: IN_TABLE_MODE,
  [$$2.TFOOT]: IN_TABLE_MODE,
  [$$2.THEAD]: IN_TABLE_MODE,
  [$$2.COL]: IN_COLUMN_GROUP_MODE,
  [$$2.TR]: IN_TABLE_BODY_MODE,
  [$$2.TD]: IN_ROW_MODE,
  [$$2.TH]: IN_ROW_MODE
};
const TOKEN_HANDLERS = {
  [INITIAL_MODE]: {
    [Tokenizer.CHARACTER_TOKEN]: tokenInInitialMode,
    [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInInitialMode,
    [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: ignoreToken,
    [Tokenizer.COMMENT_TOKEN]: appendComment,
    [Tokenizer.DOCTYPE_TOKEN]: doctypeInInitialMode,
    [Tokenizer.START_TAG_TOKEN]: tokenInInitialMode,
    [Tokenizer.END_TAG_TOKEN]: tokenInInitialMode,
    [Tokenizer.EOF_TOKEN]: tokenInInitialMode
  },
  [BEFORE_HTML_MODE]: {
    [Tokenizer.CHARACTER_TOKEN]: tokenBeforeHtml,
    [Tokenizer.NULL_CHARACTER_TOKEN]: tokenBeforeHtml,
    [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: ignoreToken,
    [Tokenizer.COMMENT_TOKEN]: appendComment,
    [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
    [Tokenizer.START_TAG_TOKEN]: startTagBeforeHtml,
    [Tokenizer.END_TAG_TOKEN]: endTagBeforeHtml,
    [Tokenizer.EOF_TOKEN]: tokenBeforeHtml
  },
  [BEFORE_HEAD_MODE]: {
    [Tokenizer.CHARACTER_TOKEN]: tokenBeforeHead,
    [Tokenizer.NULL_CHARACTER_TOKEN]: tokenBeforeHead,
    [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: ignoreToken,
    [Tokenizer.COMMENT_TOKEN]: appendComment,
    [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,
    [Tokenizer.START_TAG_TOKEN]: startTagBeforeHead,
    [Tokenizer.END_TAG_TOKEN]: endTagBeforeHead,
    [Tokenizer.EOF_TOKEN]: tokenBeforeHead
  },
  [IN_HEAD_MODE]: {
    [Tokenizer.CHARACTER_TOKEN]: tokenInHead,
    [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInHead,
    [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
    [Tokenizer.COMMENT_TOKEN]: appendComment,
    [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,
    [Tokenizer.START_TAG_TOKEN]: startTagInHead,
    [Tokenizer.END_TAG_TOKEN]: endTagInHead,
    [Tokenizer.EOF_TOKEN]: tokenInHead
  },
  [IN_HEAD_NO_SCRIPT_MODE]: {
    [Tokenizer.CHARACTER_TOKEN]: tokenInHeadNoScript,
    [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInHeadNoScript,
    [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
    [Tokenizer.COMMENT_TOKEN]: appendComment,
    [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,
    [Tokenizer.START_TAG_TOKEN]: startTagInHeadNoScript,
    [Tokenizer.END_TAG_TOKEN]: endTagInHeadNoScript,
    [Tokenizer.EOF_TOKEN]: tokenInHeadNoScript
  },
  [AFTER_HEAD_MODE]: {
    [Tokenizer.CHARACTER_TOKEN]: tokenAfterHead,
    [Tokenizer.NULL_CHARACTER_TOKEN]: tokenAfterHead,
    [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
    [Tokenizer.COMMENT_TOKEN]: appendComment,
    [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,
    [Tokenizer.START_TAG_TOKEN]: startTagAfterHead,
    [Tokenizer.END_TAG_TOKEN]: endTagAfterHead,
    [Tokenizer.EOF_TOKEN]: tokenAfterHead
  },
  [IN_BODY_MODE]: {
    [Tokenizer.CHARACTER_TOKEN]: characterInBody,
    [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
    [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
    [Tokenizer.COMMENT_TOKEN]: appendComment,
    [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
    [Tokenizer.START_TAG_TOKEN]: startTagInBody,
    [Tokenizer.END_TAG_TOKEN]: endTagInBody,
    [Tokenizer.EOF_TOKEN]: eofInBody
  },
  [TEXT_MODE]: {
    [Tokenizer.CHARACTER_TOKEN]: insertCharacters,
    [Tokenizer.NULL_CHARACTER_TOKEN]: insertCharacters,
    [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
    [Tokenizer.COMMENT_TOKEN]: ignoreToken,
    [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
    [Tokenizer.START_TAG_TOKEN]: ignoreToken,
    [Tokenizer.END_TAG_TOKEN]: endTagInText,
    [Tokenizer.EOF_TOKEN]: eofInText
  },
  [IN_TABLE_MODE]: {
    [Tokenizer.CHARACTER_TOKEN]: characterInTable,
    [Tokenizer.NULL_CHARACTER_TOKEN]: characterInTable,
    [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: characterInTable,
    [Tokenizer.COMMENT_TOKEN]: appendComment,
    [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
    [Tokenizer.START_TAG_TOKEN]: startTagInTable,
    [Tokenizer.END_TAG_TOKEN]: endTagInTable,
    [Tokenizer.EOF_TOKEN]: eofInBody
  },
  [IN_TABLE_TEXT_MODE]: {
    [Tokenizer.CHARACTER_TOKEN]: characterInTableText,
    [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
    [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInTableText,
    [Tokenizer.COMMENT_TOKEN]: tokenInTableText,
    [Tokenizer.DOCTYPE_TOKEN]: tokenInTableText,
    [Tokenizer.START_TAG_TOKEN]: tokenInTableText,
    [Tokenizer.END_TAG_TOKEN]: tokenInTableText,
    [Tokenizer.EOF_TOKEN]: tokenInTableText
  },
  [IN_CAPTION_MODE]: {
    [Tokenizer.CHARACTER_TOKEN]: characterInBody,
    [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
    [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
    [Tokenizer.COMMENT_TOKEN]: appendComment,
    [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
    [Tokenizer.START_TAG_TOKEN]: startTagInCaption,
    [Tokenizer.END_TAG_TOKEN]: endTagInCaption,
    [Tokenizer.EOF_TOKEN]: eofInBody
  },
  [IN_COLUMN_GROUP_MODE]: {
    [Tokenizer.CHARACTER_TOKEN]: tokenInColumnGroup,
    [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInColumnGroup,
    [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
    [Tokenizer.COMMENT_TOKEN]: appendComment,
    [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
    [Tokenizer.START_TAG_TOKEN]: startTagInColumnGroup,
    [Tokenizer.END_TAG_TOKEN]: endTagInColumnGroup,
    [Tokenizer.EOF_TOKEN]: eofInBody
  },
  [IN_TABLE_BODY_MODE]: {
    [Tokenizer.CHARACTER_TOKEN]: characterInTable,
    [Tokenizer.NULL_CHARACTER_TOKEN]: characterInTable,
    [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: characterInTable,
    [Tokenizer.COMMENT_TOKEN]: appendComment,
    [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
    [Tokenizer.START_TAG_TOKEN]: startTagInTableBody,
    [Tokenizer.END_TAG_TOKEN]: endTagInTableBody,
    [Tokenizer.EOF_TOKEN]: eofInBody
  },
  [IN_ROW_MODE]: {
    [Tokenizer.CHARACTER_TOKEN]: characterInTable,
    [Tokenizer.NULL_CHARACTER_TOKEN]: characterInTable,
    [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: characterInTable,
    [Tokenizer.COMMENT_TOKEN]: appendComment,
    [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
    [Tokenizer.START_TAG_TOKEN]: startTagInRow,
    [Tokenizer.END_TAG_TOKEN]: endTagInRow,
    [Tokenizer.EOF_TOKEN]: eofInBody
  },
  [IN_CELL_MODE]: {
    [Tokenizer.CHARACTER_TOKEN]: characterInBody,
    [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
    [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
    [Tokenizer.COMMENT_TOKEN]: appendComment,
    [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
    [Tokenizer.START_TAG_TOKEN]: startTagInCell,
    [Tokenizer.END_TAG_TOKEN]: endTagInCell,
    [Tokenizer.EOF_TOKEN]: eofInBody
  },
  [IN_SELECT_MODE]: {
    [Tokenizer.CHARACTER_TOKEN]: insertCharacters,
    [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
    [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
    [Tokenizer.COMMENT_TOKEN]: appendComment,
    [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
    [Tokenizer.START_TAG_TOKEN]: startTagInSelect,
    [Tokenizer.END_TAG_TOKEN]: endTagInSelect,
    [Tokenizer.EOF_TOKEN]: eofInBody
  },
  [IN_SELECT_IN_TABLE_MODE]: {
    [Tokenizer.CHARACTER_TOKEN]: insertCharacters,
    [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
    [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
    [Tokenizer.COMMENT_TOKEN]: appendComment,
    [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
    [Tokenizer.START_TAG_TOKEN]: startTagInSelectInTable,
    [Tokenizer.END_TAG_TOKEN]: endTagInSelectInTable,
    [Tokenizer.EOF_TOKEN]: eofInBody
  },
  [IN_TEMPLATE_MODE]: {
    [Tokenizer.CHARACTER_TOKEN]: characterInBody,
    [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
    [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
    [Tokenizer.COMMENT_TOKEN]: appendComment,
    [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
    [Tokenizer.START_TAG_TOKEN]: startTagInTemplate,
    [Tokenizer.END_TAG_TOKEN]: endTagInTemplate,
    [Tokenizer.EOF_TOKEN]: eofInTemplate
  },
  [AFTER_BODY_MODE]: {
    [Tokenizer.CHARACTER_TOKEN]: tokenAfterBody,
    [Tokenizer.NULL_CHARACTER_TOKEN]: tokenAfterBody,
    [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
    [Tokenizer.COMMENT_TOKEN]: appendCommentToRootHtmlElement,
    [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
    [Tokenizer.START_TAG_TOKEN]: startTagAfterBody,
    [Tokenizer.END_TAG_TOKEN]: endTagAfterBody,
    [Tokenizer.EOF_TOKEN]: stopParsing
  },
  [IN_FRAMESET_MODE]: {
    [Tokenizer.CHARACTER_TOKEN]: ignoreToken,
    [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
    [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
    [Tokenizer.COMMENT_TOKEN]: appendComment,
    [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
    [Tokenizer.START_TAG_TOKEN]: startTagInFrameset,
    [Tokenizer.END_TAG_TOKEN]: endTagInFrameset,
    [Tokenizer.EOF_TOKEN]: stopParsing
  },
  [AFTER_FRAMESET_MODE]: {
    [Tokenizer.CHARACTER_TOKEN]: ignoreToken,
    [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
    [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
    [Tokenizer.COMMENT_TOKEN]: appendComment,
    [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
    [Tokenizer.START_TAG_TOKEN]: startTagAfterFrameset,
    [Tokenizer.END_TAG_TOKEN]: endTagAfterFrameset,
    [Tokenizer.EOF_TOKEN]: stopParsing
  },
  [AFTER_AFTER_BODY_MODE]: {
    [Tokenizer.CHARACTER_TOKEN]: tokenAfterAfterBody,
    [Tokenizer.NULL_CHARACTER_TOKEN]: tokenAfterAfterBody,
    [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
    [Tokenizer.COMMENT_TOKEN]: appendCommentToDocument,
    [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
    [Tokenizer.START_TAG_TOKEN]: startTagAfterAfterBody,
    [Tokenizer.END_TAG_TOKEN]: tokenAfterAfterBody,
    [Tokenizer.EOF_TOKEN]: stopParsing
  },
  [AFTER_AFTER_FRAMESET_MODE]: {
    [Tokenizer.CHARACTER_TOKEN]: ignoreToken,
    [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
    [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
    [Tokenizer.COMMENT_TOKEN]: appendCommentToDocument,
    [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
    [Tokenizer.START_TAG_TOKEN]: startTagAfterAfterFrameset,
    [Tokenizer.END_TAG_TOKEN]: ignoreToken,
    [Tokenizer.EOF_TOKEN]: stopParsing
  }
};
class Parser$1 {
  constructor(options) {
    this.options = mergeOptions$1(DEFAULT_OPTIONS$1, options);
    this.treeAdapter = this.options.treeAdapter;
    this.pendingScript = null;
    if (this.options.sourceCodeLocationInfo) {
      Mixin.install(this, LocationInfoParserMixin);
    }
    if (this.options.onParseError) {
      Mixin.install(this, ErrorReportingParserMixin, {onParseError: this.options.onParseError});
    }
  }
  parse(html2) {
    const document2 = this.treeAdapter.createDocument();
    this._bootstrap(document2, null);
    this.tokenizer.write(html2, true);
    this._runParsingLoop(null);
    return document2;
  }
  parseFragment(html2, fragmentContext) {
    if (!fragmentContext) {
      fragmentContext = this.treeAdapter.createElement($$2.TEMPLATE, NS$2.HTML, []);
    }
    const documentMock = this.treeAdapter.createElement("documentmock", NS$2.HTML, []);
    this._bootstrap(documentMock, fragmentContext);
    if (this.treeAdapter.getTagName(fragmentContext) === $$2.TEMPLATE) {
      this._pushTmplInsertionMode(IN_TEMPLATE_MODE);
    }
    this._initTokenizerForFragmentParsing();
    this._insertFakeRootElement();
    this._resetInsertionMode();
    this._findFormInFragmentContext();
    this.tokenizer.write(html2, true);
    this._runParsingLoop(null);
    const rootElement = this.treeAdapter.getFirstChild(documentMock);
    const fragment = this.treeAdapter.createDocumentFragment();
    this._adoptNodes(rootElement, fragment);
    return fragment;
  }
  _bootstrap(document2, fragmentContext) {
    this.tokenizer = new Tokenizer(this.options);
    this.stopped = false;
    this.insertionMode = INITIAL_MODE;
    this.originalInsertionMode = "";
    this.document = document2;
    this.fragmentContext = fragmentContext;
    this.headElement = null;
    this.formElement = null;
    this.openElements = new OpenElementStack(this.document, this.treeAdapter);
    this.activeFormattingElements = new FormattingElementList(this.treeAdapter);
    this.tmplInsertionModeStack = [];
    this.tmplInsertionModeStackTop = -1;
    this.currentTmplInsertionMode = null;
    this.pendingCharacterTokens = [];
    this.hasNonWhitespacePendingCharacterToken = false;
    this.framesetOk = true;
    this.skipNextNewLine = false;
    this.fosterParentingEnabled = false;
  }
  _err() {
  }
  _runParsingLoop(scriptHandler) {
    while (!this.stopped) {
      this._setupTokenizerCDATAMode();
      const token = this.tokenizer.getNextToken();
      if (token.type === Tokenizer.HIBERNATION_TOKEN) {
        break;
      }
      if (this.skipNextNewLine) {
        this.skipNextNewLine = false;
        if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN && token.chars[0] === "\n") {
          if (token.chars.length === 1) {
            continue;
          }
          token.chars = token.chars.substr(1);
        }
      }
      this._processInputToken(token);
      if (scriptHandler && this.pendingScript) {
        break;
      }
    }
  }
  runParsingLoopForCurrentChunk(writeCallback, scriptHandler) {
    this._runParsingLoop(scriptHandler);
    if (scriptHandler && this.pendingScript) {
      const script = this.pendingScript;
      this.pendingScript = null;
      scriptHandler(script);
      return;
    }
    if (writeCallback) {
      writeCallback();
    }
  }
  _setupTokenizerCDATAMode() {
    const current = this._getAdjustedCurrentElement();
    this.tokenizer.allowCDATA = current && current !== this.document && this.treeAdapter.getNamespaceURI(current) !== NS$2.HTML && !this._isIntegrationPoint(current);
  }
  _switchToTextParsing(currentToken, nextTokenizerState) {
    this._insertElement(currentToken, NS$2.HTML);
    this.tokenizer.state = nextTokenizerState;
    this.originalInsertionMode = this.insertionMode;
    this.insertionMode = TEXT_MODE;
  }
  switchToPlaintextParsing() {
    this.insertionMode = TEXT_MODE;
    this.originalInsertionMode = IN_BODY_MODE;
    this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
  }
  _getAdjustedCurrentElement() {
    return this.openElements.stackTop === 0 && this.fragmentContext ? this.fragmentContext : this.openElements.current;
  }
  _findFormInFragmentContext() {
    let node = this.fragmentContext;
    do {
      if (this.treeAdapter.getTagName(node) === $$2.FORM) {
        this.formElement = node;
        break;
      }
      node = this.treeAdapter.getParentNode(node);
    } while (node);
  }
  _initTokenizerForFragmentParsing() {
    if (this.treeAdapter.getNamespaceURI(this.fragmentContext) === NS$2.HTML) {
      const tn = this.treeAdapter.getTagName(this.fragmentContext);
      if (tn === $$2.TITLE || tn === $$2.TEXTAREA) {
        this.tokenizer.state = Tokenizer.MODE.RCDATA;
      } else if (tn === $$2.STYLE || tn === $$2.XMP || tn === $$2.IFRAME || tn === $$2.NOEMBED || tn === $$2.NOFRAMES || tn === $$2.NOSCRIPT) {
        this.tokenizer.state = Tokenizer.MODE.RAWTEXT;
      } else if (tn === $$2.SCRIPT) {
        this.tokenizer.state = Tokenizer.MODE.SCRIPT_DATA;
      } else if (tn === $$2.PLAINTEXT) {
        this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
      }
    }
  }
  _setDocumentType(token) {
    const name2 = token.name || "";
    const publicId = token.publicId || "";
    const systemId = token.systemId || "";
    this.treeAdapter.setDocumentType(this.document, name2, publicId, systemId);
  }
  _attachElementToTree(element) {
    if (this._shouldFosterParentOnInsertion()) {
      this._fosterParentElement(element);
    } else {
      const parent = this.openElements.currentTmplContent || this.openElements.current;
      this.treeAdapter.appendChild(parent, element);
    }
  }
  _appendElement(token, namespaceURI) {
    const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);
    this._attachElementToTree(element);
  }
  _insertElement(token, namespaceURI) {
    const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);
    this._attachElementToTree(element);
    this.openElements.push(element);
  }
  _insertFakeElement(tagName) {
    const element = this.treeAdapter.createElement(tagName, NS$2.HTML, []);
    this._attachElementToTree(element);
    this.openElements.push(element);
  }
  _insertTemplate(token) {
    const tmpl = this.treeAdapter.createElement(token.tagName, NS$2.HTML, token.attrs);
    const content = this.treeAdapter.createDocumentFragment();
    this.treeAdapter.setTemplateContent(tmpl, content);
    this._attachElementToTree(tmpl);
    this.openElements.push(tmpl);
  }
  _insertFakeRootElement() {
    const element = this.treeAdapter.createElement($$2.HTML, NS$2.HTML, []);
    this.treeAdapter.appendChild(this.openElements.current, element);
    this.openElements.push(element);
  }
  _appendCommentNode(token, parent) {
    const commentNode = this.treeAdapter.createCommentNode(token.data);
    this.treeAdapter.appendChild(parent, commentNode);
  }
  _insertCharacters(token) {
    if (this._shouldFosterParentOnInsertion()) {
      this._fosterParentText(token.chars);
    } else {
      const parent = this.openElements.currentTmplContent || this.openElements.current;
      this.treeAdapter.insertText(parent, token.chars);
    }
  }
  _adoptNodes(donor, recipient) {
    for (let child = this.treeAdapter.getFirstChild(donor); child; child = this.treeAdapter.getFirstChild(donor)) {
      this.treeAdapter.detachNode(child);
      this.treeAdapter.appendChild(recipient, child);
    }
  }
  _shouldProcessTokenInForeignContent(token) {
    const current = this._getAdjustedCurrentElement();
    if (!current || current === this.document) {
      return false;
    }
    const ns = this.treeAdapter.getNamespaceURI(current);
    if (ns === NS$2.HTML) {
      return false;
    }
    if (this.treeAdapter.getTagName(current) === $$2.ANNOTATION_XML && ns === NS$2.MATHML && token.type === Tokenizer.START_TAG_TOKEN && token.tagName === $$2.SVG) {
      return false;
    }
    const isCharacterToken = token.type === Tokenizer.CHARACTER_TOKEN || token.type === Tokenizer.NULL_CHARACTER_TOKEN || token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN;
    const isMathMLTextStartTag = token.type === Tokenizer.START_TAG_TOKEN && token.tagName !== $$2.MGLYPH && token.tagName !== $$2.MALIGNMARK;
    if ((isMathMLTextStartTag || isCharacterToken) && this._isIntegrationPoint(current, NS$2.MATHML)) {
      return false;
    }
    if ((token.type === Tokenizer.START_TAG_TOKEN || isCharacterToken) && this._isIntegrationPoint(current, NS$2.HTML)) {
      return false;
    }
    return token.type !== Tokenizer.EOF_TOKEN;
  }
  _processToken(token) {
    TOKEN_HANDLERS[this.insertionMode][token.type](this, token);
  }
  _processTokenInBodyMode(token) {
    TOKEN_HANDLERS[IN_BODY_MODE][token.type](this, token);
  }
  _processTokenInForeignContent(token) {
    if (token.type === Tokenizer.CHARACTER_TOKEN) {
      characterInForeignContent(this, token);
    } else if (token.type === Tokenizer.NULL_CHARACTER_TOKEN) {
      nullCharacterInForeignContent(this, token);
    } else if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN) {
      insertCharacters(this, token);
    } else if (token.type === Tokenizer.COMMENT_TOKEN) {
      appendComment(this, token);
    } else if (token.type === Tokenizer.START_TAG_TOKEN) {
      startTagInForeignContent(this, token);
    } else if (token.type === Tokenizer.END_TAG_TOKEN) {
      endTagInForeignContent(this, token);
    }
  }
  _processInputToken(token) {
    if (this._shouldProcessTokenInForeignContent(token)) {
      this._processTokenInForeignContent(token);
    } else {
      this._processToken(token);
    }
    if (token.type === Tokenizer.START_TAG_TOKEN && token.selfClosing && !token.ackSelfClosing) {
      this._err(ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);
    }
  }
  _isIntegrationPoint(element, foreignNS) {
    const tn = this.treeAdapter.getTagName(element);
    const ns = this.treeAdapter.getNamespaceURI(element);
    const attrs = this.treeAdapter.getAttrList(element);
    return foreignContent.isIntegrationPoint(tn, ns, attrs, foreignNS);
  }
  _reconstructActiveFormattingElements() {
    const listLength = this.activeFormattingElements.length;
    if (listLength) {
      let unopenIdx = listLength;
      let entry = null;
      do {
        unopenIdx--;
        entry = this.activeFormattingElements.entries[unopenIdx];
        if (entry.type === FormattingElementList.MARKER_ENTRY || this.openElements.contains(entry.element)) {
          unopenIdx++;
          break;
        }
      } while (unopenIdx > 0);
      for (let i2 = unopenIdx; i2 < listLength; i2++) {
        entry = this.activeFormattingElements.entries[i2];
        this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));
        entry.element = this.openElements.current;
      }
    }
  }
  _closeTableCell() {
    this.openElements.generateImpliedEndTags();
    this.openElements.popUntilTableCellPopped();
    this.activeFormattingElements.clearToLastMarker();
    this.insertionMode = IN_ROW_MODE;
  }
  _closePElement() {
    this.openElements.generateImpliedEndTagsWithExclusion($$2.P);
    this.openElements.popUntilTagNamePopped($$2.P);
  }
  _resetInsertionMode() {
    for (let i2 = this.openElements.stackTop, last2 = false; i2 >= 0; i2--) {
      let element = this.openElements.items[i2];
      if (i2 === 0) {
        last2 = true;
        if (this.fragmentContext) {
          element = this.fragmentContext;
        }
      }
      const tn = this.treeAdapter.getTagName(element);
      const newInsertionMode = INSERTION_MODE_RESET_MAP[tn];
      if (newInsertionMode) {
        this.insertionMode = newInsertionMode;
        break;
      } else if (!last2 && (tn === $$2.TD || tn === $$2.TH)) {
        this.insertionMode = IN_CELL_MODE;
        break;
      } else if (!last2 && tn === $$2.HEAD) {
        this.insertionMode = IN_HEAD_MODE;
        break;
      } else if (tn === $$2.SELECT) {
        this._resetInsertionModeForSelect(i2);
        break;
      } else if (tn === $$2.TEMPLATE) {
        this.insertionMode = this.currentTmplInsertionMode;
        break;
      } else if (tn === $$2.HTML) {
        this.insertionMode = this.headElement ? AFTER_HEAD_MODE : BEFORE_HEAD_MODE;
        break;
      } else if (last2) {
        this.insertionMode = IN_BODY_MODE;
        break;
      }
    }
  }
  _resetInsertionModeForSelect(selectIdx) {
    if (selectIdx > 0) {
      for (let i2 = selectIdx - 1; i2 > 0; i2--) {
        const ancestor = this.openElements.items[i2];
        const tn = this.treeAdapter.getTagName(ancestor);
        if (tn === $$2.TEMPLATE) {
          break;
        } else if (tn === $$2.TABLE) {
          this.insertionMode = IN_SELECT_IN_TABLE_MODE;
          return;
        }
      }
    }
    this.insertionMode = IN_SELECT_MODE;
  }
  _pushTmplInsertionMode(mode) {
    this.tmplInsertionModeStack.push(mode);
    this.tmplInsertionModeStackTop++;
    this.currentTmplInsertionMode = mode;
  }
  _popTmplInsertionMode() {
    this.tmplInsertionModeStack.pop();
    this.tmplInsertionModeStackTop--;
    this.currentTmplInsertionMode = this.tmplInsertionModeStack[this.tmplInsertionModeStackTop];
  }
  _isElementCausesFosterParenting(element) {
    const tn = this.treeAdapter.getTagName(element);
    return tn === $$2.TABLE || tn === $$2.TBODY || tn === $$2.TFOOT || tn === $$2.THEAD || tn === $$2.TR;
  }
  _shouldFosterParentOnInsertion() {
    return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.current);
  }
  _findFosterParentingLocation() {
    const location = {
      parent: null,
      beforeElement: null
    };
    for (let i2 = this.openElements.stackTop; i2 >= 0; i2--) {
      const openElement = this.openElements.items[i2];
      const tn = this.treeAdapter.getTagName(openElement);
      const ns = this.treeAdapter.getNamespaceURI(openElement);
      if (tn === $$2.TEMPLATE && ns === NS$2.HTML) {
        location.parent = this.treeAdapter.getTemplateContent(openElement);
        break;
      } else if (tn === $$2.TABLE) {
        location.parent = this.treeAdapter.getParentNode(openElement);
        if (location.parent) {
          location.beforeElement = openElement;
        } else {
          location.parent = this.openElements.items[i2 - 1];
        }
        break;
      }
    }
    if (!location.parent) {
      location.parent = this.openElements.items[0];
    }
    return location;
  }
  _fosterParentElement(element) {
    const location = this._findFosterParentingLocation();
    if (location.beforeElement) {
      this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);
    } else {
      this.treeAdapter.appendChild(location.parent, element);
    }
  }
  _fosterParentText(chars2) {
    const location = this._findFosterParentingLocation();
    if (location.beforeElement) {
      this.treeAdapter.insertTextBefore(location.parent, chars2, location.beforeElement);
    } else {
      this.treeAdapter.insertText(location.parent, chars2);
    }
  }
  _isSpecialElement(element) {
    const tn = this.treeAdapter.getTagName(element);
    const ns = this.treeAdapter.getNamespaceURI(element);
    return HTML$1.SPECIAL_ELEMENTS[ns][tn];
  }
}
var parser = Parser$1;
function aaObtainFormattingElementEntry(p2, token) {
  let formattingElementEntry = p2.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);
  if (formattingElementEntry) {
    if (!p2.openElements.contains(formattingElementEntry.element)) {
      p2.activeFormattingElements.removeEntry(formattingElementEntry);
      formattingElementEntry = null;
    } else if (!p2.openElements.hasInScope(token.tagName)) {
      formattingElementEntry = null;
    }
  } else {
    genericEndTagInBody(p2, token);
  }
  return formattingElementEntry;
}
function aaObtainFurthestBlock(p2, formattingElementEntry) {
  let furthestBlock = null;
  for (let i2 = p2.openElements.stackTop; i2 >= 0; i2--) {
    const element = p2.openElements.items[i2];
    if (element === formattingElementEntry.element) {
      break;
    }
    if (p2._isSpecialElement(element)) {
      furthestBlock = element;
    }
  }
  if (!furthestBlock) {
    p2.openElements.popUntilElementPopped(formattingElementEntry.element);
    p2.activeFormattingElements.removeEntry(formattingElementEntry);
  }
  return furthestBlock;
}
function aaInnerLoop(p2, furthestBlock, formattingElement) {
  let lastElement = furthestBlock;
  let nextElement = p2.openElements.getCommonAncestor(furthestBlock);
  for (let i2 = 0, element = nextElement; element !== formattingElement; i2++, element = nextElement) {
    nextElement = p2.openElements.getCommonAncestor(element);
    const elementEntry = p2.activeFormattingElements.getElementEntry(element);
    const counterOverflow = elementEntry && i2 >= AA_INNER_LOOP_ITER;
    const shouldRemoveFromOpenElements = !elementEntry || counterOverflow;
    if (shouldRemoveFromOpenElements) {
      if (counterOverflow) {
        p2.activeFormattingElements.removeEntry(elementEntry);
      }
      p2.openElements.remove(element);
    } else {
      element = aaRecreateElementFromEntry(p2, elementEntry);
      if (lastElement === furthestBlock) {
        p2.activeFormattingElements.bookmark = elementEntry;
      }
      p2.treeAdapter.detachNode(lastElement);
      p2.treeAdapter.appendChild(element, lastElement);
      lastElement = element;
    }
  }
  return lastElement;
}
function aaRecreateElementFromEntry(p2, elementEntry) {
  const ns = p2.treeAdapter.getNamespaceURI(elementEntry.element);
  const newElement = p2.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);
  p2.openElements.replace(elementEntry.element, newElement);
  elementEntry.element = newElement;
  return newElement;
}
function aaInsertLastNodeInCommonAncestor(p2, commonAncestor, lastElement) {
  if (p2._isElementCausesFosterParenting(commonAncestor)) {
    p2._fosterParentElement(lastElement);
  } else {
    const tn = p2.treeAdapter.getTagName(commonAncestor);
    const ns = p2.treeAdapter.getNamespaceURI(commonAncestor);
    if (tn === $$2.TEMPLATE && ns === NS$2.HTML) {
      commonAncestor = p2.treeAdapter.getTemplateContent(commonAncestor);
    }
    p2.treeAdapter.appendChild(commonAncestor, lastElement);
  }
}
function aaReplaceFormattingElement(p2, furthestBlock, formattingElementEntry) {
  const ns = p2.treeAdapter.getNamespaceURI(formattingElementEntry.element);
  const token = formattingElementEntry.token;
  const newElement = p2.treeAdapter.createElement(token.tagName, ns, token.attrs);
  p2._adoptNodes(furthestBlock, newElement);
  p2.treeAdapter.appendChild(furthestBlock, newElement);
  p2.activeFormattingElements.insertElementAfterBookmark(newElement, formattingElementEntry.token);
  p2.activeFormattingElements.removeEntry(formattingElementEntry);
  p2.openElements.remove(formattingElementEntry.element);
  p2.openElements.insertAfter(furthestBlock, newElement);
}
function callAdoptionAgency(p2, token) {
  let formattingElementEntry;
  for (let i2 = 0; i2 < AA_OUTER_LOOP_ITER; i2++) {
    formattingElementEntry = aaObtainFormattingElementEntry(p2, token);
    if (!formattingElementEntry) {
      break;
    }
    const furthestBlock = aaObtainFurthestBlock(p2, formattingElementEntry);
    if (!furthestBlock) {
      break;
    }
    p2.activeFormattingElements.bookmark = formattingElementEntry;
    const lastElement = aaInnerLoop(p2, furthestBlock, formattingElementEntry.element);
    const commonAncestor = p2.openElements.getCommonAncestor(formattingElementEntry.element);
    p2.treeAdapter.detachNode(lastElement);
    aaInsertLastNodeInCommonAncestor(p2, commonAncestor, lastElement);
    aaReplaceFormattingElement(p2, furthestBlock, formattingElementEntry);
  }
}
function ignoreToken() {
}
function misplacedDoctype(p2) {
  p2._err(ERR.misplacedDoctype);
}
function appendComment(p2, token) {
  p2._appendCommentNode(token, p2.openElements.currentTmplContent || p2.openElements.current);
}
function appendCommentToRootHtmlElement(p2, token) {
  p2._appendCommentNode(token, p2.openElements.items[0]);
}
function appendCommentToDocument(p2, token) {
  p2._appendCommentNode(token, p2.document);
}
function insertCharacters(p2, token) {
  p2._insertCharacters(token);
}
function stopParsing(p2) {
  p2.stopped = true;
}
function doctypeInInitialMode(p2, token) {
  p2._setDocumentType(token);
  const mode = token.forceQuirks ? HTML$1.DOCUMENT_MODE.QUIRKS : doctype$3.getDocumentMode(token);
  if (!doctype$3.isConforming(token)) {
    p2._err(ERR.nonConformingDoctype);
  }
  p2.treeAdapter.setDocumentMode(p2.document, mode);
  p2.insertionMode = BEFORE_HTML_MODE;
}
function tokenInInitialMode(p2, token) {
  p2._err(ERR.missingDoctype, {beforeToken: true});
  p2.treeAdapter.setDocumentMode(p2.document, HTML$1.DOCUMENT_MODE.QUIRKS);
  p2.insertionMode = BEFORE_HTML_MODE;
  p2._processToken(token);
}
function startTagBeforeHtml(p2, token) {
  if (token.tagName === $$2.HTML) {
    p2._insertElement(token, NS$2.HTML);
    p2.insertionMode = BEFORE_HEAD_MODE;
  } else {
    tokenBeforeHtml(p2, token);
  }
}
function endTagBeforeHtml(p2, token) {
  const tn = token.tagName;
  if (tn === $$2.HTML || tn === $$2.HEAD || tn === $$2.BODY || tn === $$2.BR) {
    tokenBeforeHtml(p2, token);
  }
}
function tokenBeforeHtml(p2, token) {
  p2._insertFakeRootElement();
  p2.insertionMode = BEFORE_HEAD_MODE;
  p2._processToken(token);
}
function startTagBeforeHead(p2, token) {
  const tn = token.tagName;
  if (tn === $$2.HTML) {
    startTagInBody(p2, token);
  } else if (tn === $$2.HEAD) {
    p2._insertElement(token, NS$2.HTML);
    p2.headElement = p2.openElements.current;
    p2.insertionMode = IN_HEAD_MODE;
  } else {
    tokenBeforeHead(p2, token);
  }
}
function endTagBeforeHead(p2, token) {
  const tn = token.tagName;
  if (tn === $$2.HEAD || tn === $$2.BODY || tn === $$2.HTML || tn === $$2.BR) {
    tokenBeforeHead(p2, token);
  } else {
    p2._err(ERR.endTagWithoutMatchingOpenElement);
  }
}
function tokenBeforeHead(p2, token) {
  p2._insertFakeElement($$2.HEAD);
  p2.headElement = p2.openElements.current;
  p2.insertionMode = IN_HEAD_MODE;
  p2._processToken(token);
}
function startTagInHead(p2, token) {
  const tn = token.tagName;
  if (tn === $$2.HTML) {
    startTagInBody(p2, token);
  } else if (tn === $$2.BASE || tn === $$2.BASEFONT || tn === $$2.BGSOUND || tn === $$2.LINK || tn === $$2.META) {
    p2._appendElement(token, NS$2.HTML);
    token.ackSelfClosing = true;
  } else if (tn === $$2.TITLE) {
    p2._switchToTextParsing(token, Tokenizer.MODE.RCDATA);
  } else if (tn === $$2.NOSCRIPT) {
    if (p2.options.scriptingEnabled) {
      p2._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
    } else {
      p2._insertElement(token, NS$2.HTML);
      p2.insertionMode = IN_HEAD_NO_SCRIPT_MODE;
    }
  } else if (tn === $$2.NOFRAMES || tn === $$2.STYLE) {
    p2._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
  } else if (tn === $$2.SCRIPT) {
    p2._switchToTextParsing(token, Tokenizer.MODE.SCRIPT_DATA);
  } else if (tn === $$2.TEMPLATE) {
    p2._insertTemplate(token, NS$2.HTML);
    p2.activeFormattingElements.insertMarker();
    p2.framesetOk = false;
    p2.insertionMode = IN_TEMPLATE_MODE;
    p2._pushTmplInsertionMode(IN_TEMPLATE_MODE);
  } else if (tn === $$2.HEAD) {
    p2._err(ERR.misplacedStartTagForHeadElement);
  } else {
    tokenInHead(p2, token);
  }
}
function endTagInHead(p2, token) {
  const tn = token.tagName;
  if (tn === $$2.HEAD) {
    p2.openElements.pop();
    p2.insertionMode = AFTER_HEAD_MODE;
  } else if (tn === $$2.BODY || tn === $$2.BR || tn === $$2.HTML) {
    tokenInHead(p2, token);
  } else if (tn === $$2.TEMPLATE) {
    if (p2.openElements.tmplCount > 0) {
      p2.openElements.generateImpliedEndTagsThoroughly();
      if (p2.openElements.currentTagName !== $$2.TEMPLATE) {
        p2._err(ERR.closingOfElementWithOpenChildElements);
      }
      p2.openElements.popUntilTagNamePopped($$2.TEMPLATE);
      p2.activeFormattingElements.clearToLastMarker();
      p2._popTmplInsertionMode();
      p2._resetInsertionMode();
    } else {
      p2._err(ERR.endTagWithoutMatchingOpenElement);
    }
  } else {
    p2._err(ERR.endTagWithoutMatchingOpenElement);
  }
}
function tokenInHead(p2, token) {
  p2.openElements.pop();
  p2.insertionMode = AFTER_HEAD_MODE;
  p2._processToken(token);
}
function startTagInHeadNoScript(p2, token) {
  const tn = token.tagName;
  if (tn === $$2.HTML) {
    startTagInBody(p2, token);
  } else if (tn === $$2.BASEFONT || tn === $$2.BGSOUND || tn === $$2.HEAD || tn === $$2.LINK || tn === $$2.META || tn === $$2.NOFRAMES || tn === $$2.STYLE) {
    startTagInHead(p2, token);
  } else if (tn === $$2.NOSCRIPT) {
    p2._err(ERR.nestedNoscriptInHead);
  } else {
    tokenInHeadNoScript(p2, token);
  }
}
function endTagInHeadNoScript(p2, token) {
  const tn = token.tagName;
  if (tn === $$2.NOSCRIPT) {
    p2.openElements.pop();
    p2.insertionMode = IN_HEAD_MODE;
  } else if (tn === $$2.BR) {
    tokenInHeadNoScript(p2, token);
  } else {
    p2._err(ERR.endTagWithoutMatchingOpenElement);
  }
}
function tokenInHeadNoScript(p2, token) {
  const errCode = token.type === Tokenizer.EOF_TOKEN ? ERR.openElementsLeftAfterEof : ERR.disallowedContentInNoscriptInHead;
  p2._err(errCode);
  p2.openElements.pop();
  p2.insertionMode = IN_HEAD_MODE;
  p2._processToken(token);
}
function startTagAfterHead(p2, token) {
  const tn = token.tagName;
  if (tn === $$2.HTML) {
    startTagInBody(p2, token);
  } else if (tn === $$2.BODY) {
    p2._insertElement(token, NS$2.HTML);
    p2.framesetOk = false;
    p2.insertionMode = IN_BODY_MODE;
  } else if (tn === $$2.FRAMESET) {
    p2._insertElement(token, NS$2.HTML);
    p2.insertionMode = IN_FRAMESET_MODE;
  } else if (tn === $$2.BASE || tn === $$2.BASEFONT || tn === $$2.BGSOUND || tn === $$2.LINK || tn === $$2.META || tn === $$2.NOFRAMES || tn === $$2.SCRIPT || tn === $$2.STYLE || tn === $$2.TEMPLATE || tn === $$2.TITLE) {
    p2._err(ERR.abandonedHeadElementChild);
    p2.openElements.push(p2.headElement);
    startTagInHead(p2, token);
    p2.openElements.remove(p2.headElement);
  } else if (tn === $$2.HEAD) {
    p2._err(ERR.misplacedStartTagForHeadElement);
  } else {
    tokenAfterHead(p2, token);
  }
}
function endTagAfterHead(p2, token) {
  const tn = token.tagName;
  if (tn === $$2.BODY || tn === $$2.HTML || tn === $$2.BR) {
    tokenAfterHead(p2, token);
  } else if (tn === $$2.TEMPLATE) {
    endTagInHead(p2, token);
  } else {
    p2._err(ERR.endTagWithoutMatchingOpenElement);
  }
}
function tokenAfterHead(p2, token) {
  p2._insertFakeElement($$2.BODY);
  p2.insertionMode = IN_BODY_MODE;
  p2._processToken(token);
}
function whitespaceCharacterInBody(p2, token) {
  p2._reconstructActiveFormattingElements();
  p2._insertCharacters(token);
}
function characterInBody(p2, token) {
  p2._reconstructActiveFormattingElements();
  p2._insertCharacters(token);
  p2.framesetOk = false;
}
function htmlStartTagInBody(p2, token) {
  if (p2.openElements.tmplCount === 0) {
    p2.treeAdapter.adoptAttributes(p2.openElements.items[0], token.attrs);
  }
}
function bodyStartTagInBody(p2, token) {
  const bodyElement = p2.openElements.tryPeekProperlyNestedBodyElement();
  if (bodyElement && p2.openElements.tmplCount === 0) {
    p2.framesetOk = false;
    p2.treeAdapter.adoptAttributes(bodyElement, token.attrs);
  }
}
function framesetStartTagInBody(p2, token) {
  const bodyElement = p2.openElements.tryPeekProperlyNestedBodyElement();
  if (p2.framesetOk && bodyElement) {
    p2.treeAdapter.detachNode(bodyElement);
    p2.openElements.popAllUpToHtmlElement();
    p2._insertElement(token, NS$2.HTML);
    p2.insertionMode = IN_FRAMESET_MODE;
  }
}
function addressStartTagInBody(p2, token) {
  if (p2.openElements.hasInButtonScope($$2.P)) {
    p2._closePElement();
  }
  p2._insertElement(token, NS$2.HTML);
}
function numberedHeaderStartTagInBody(p2, token) {
  if (p2.openElements.hasInButtonScope($$2.P)) {
    p2._closePElement();
  }
  const tn = p2.openElements.currentTagName;
  if (tn === $$2.H1 || tn === $$2.H2 || tn === $$2.H3 || tn === $$2.H4 || tn === $$2.H5 || tn === $$2.H6) {
    p2.openElements.pop();
  }
  p2._insertElement(token, NS$2.HTML);
}
function preStartTagInBody(p2, token) {
  if (p2.openElements.hasInButtonScope($$2.P)) {
    p2._closePElement();
  }
  p2._insertElement(token, NS$2.HTML);
  p2.skipNextNewLine = true;
  p2.framesetOk = false;
}
function formStartTagInBody(p2, token) {
  const inTemplate = p2.openElements.tmplCount > 0;
  if (!p2.formElement || inTemplate) {
    if (p2.openElements.hasInButtonScope($$2.P)) {
      p2._closePElement();
    }
    p2._insertElement(token, NS$2.HTML);
    if (!inTemplate) {
      p2.formElement = p2.openElements.current;
    }
  }
}
function listItemStartTagInBody(p2, token) {
  p2.framesetOk = false;
  const tn = token.tagName;
  for (let i2 = p2.openElements.stackTop; i2 >= 0; i2--) {
    const element = p2.openElements.items[i2];
    const elementTn = p2.treeAdapter.getTagName(element);
    let closeTn = null;
    if (tn === $$2.LI && elementTn === $$2.LI) {
      closeTn = $$2.LI;
    } else if ((tn === $$2.DD || tn === $$2.DT) && (elementTn === $$2.DD || elementTn === $$2.DT)) {
      closeTn = elementTn;
    }
    if (closeTn) {
      p2.openElements.generateImpliedEndTagsWithExclusion(closeTn);
      p2.openElements.popUntilTagNamePopped(closeTn);
      break;
    }
    if (elementTn !== $$2.ADDRESS && elementTn !== $$2.DIV && elementTn !== $$2.P && p2._isSpecialElement(element)) {
      break;
    }
  }
  if (p2.openElements.hasInButtonScope($$2.P)) {
    p2._closePElement();
  }
  p2._insertElement(token, NS$2.HTML);
}
function plaintextStartTagInBody(p2, token) {
  if (p2.openElements.hasInButtonScope($$2.P)) {
    p2._closePElement();
  }
  p2._insertElement(token, NS$2.HTML);
  p2.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
}
function buttonStartTagInBody(p2, token) {
  if (p2.openElements.hasInScope($$2.BUTTON)) {
    p2.openElements.generateImpliedEndTags();
    p2.openElements.popUntilTagNamePopped($$2.BUTTON);
  }
  p2._reconstructActiveFormattingElements();
  p2._insertElement(token, NS$2.HTML);
  p2.framesetOk = false;
}
function aStartTagInBody(p2, token) {
  const activeElementEntry = p2.activeFormattingElements.getElementEntryInScopeWithTagName($$2.A);
  if (activeElementEntry) {
    callAdoptionAgency(p2, token);
    p2.openElements.remove(activeElementEntry.element);
    p2.activeFormattingElements.removeEntry(activeElementEntry);
  }
  p2._reconstructActiveFormattingElements();
  p2._insertElement(token, NS$2.HTML);
  p2.activeFormattingElements.pushElement(p2.openElements.current, token);
}
function bStartTagInBody(p2, token) {
  p2._reconstructActiveFormattingElements();
  p2._insertElement(token, NS$2.HTML);
  p2.activeFormattingElements.pushElement(p2.openElements.current, token);
}
function nobrStartTagInBody(p2, token) {
  p2._reconstructActiveFormattingElements();
  if (p2.openElements.hasInScope($$2.NOBR)) {
    callAdoptionAgency(p2, token);
    p2._reconstructActiveFormattingElements();
  }
  p2._insertElement(token, NS$2.HTML);
  p2.activeFormattingElements.pushElement(p2.openElements.current, token);
}
function appletStartTagInBody(p2, token) {
  p2._reconstructActiveFormattingElements();
  p2._insertElement(token, NS$2.HTML);
  p2.activeFormattingElements.insertMarker();
  p2.framesetOk = false;
}
function tableStartTagInBody(p2, token) {
  if (p2.treeAdapter.getDocumentMode(p2.document) !== HTML$1.DOCUMENT_MODE.QUIRKS && p2.openElements.hasInButtonScope($$2.P)) {
    p2._closePElement();
  }
  p2._insertElement(token, NS$2.HTML);
  p2.framesetOk = false;
  p2.insertionMode = IN_TABLE_MODE;
}
function areaStartTagInBody(p2, token) {
  p2._reconstructActiveFormattingElements();
  p2._appendElement(token, NS$2.HTML);
  p2.framesetOk = false;
  token.ackSelfClosing = true;
}
function inputStartTagInBody(p2, token) {
  p2._reconstructActiveFormattingElements();
  p2._appendElement(token, NS$2.HTML);
  const inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);
  if (!inputType || inputType.toLowerCase() !== HIDDEN_INPUT_TYPE) {
    p2.framesetOk = false;
  }
  token.ackSelfClosing = true;
}
function paramStartTagInBody(p2, token) {
  p2._appendElement(token, NS$2.HTML);
  token.ackSelfClosing = true;
}
function hrStartTagInBody(p2, token) {
  if (p2.openElements.hasInButtonScope($$2.P)) {
    p2._closePElement();
  }
  p2._appendElement(token, NS$2.HTML);
  p2.framesetOk = false;
  p2.ackSelfClosing = true;
}
function imageStartTagInBody(p2, token) {
  token.tagName = $$2.IMG;
  areaStartTagInBody(p2, token);
}
function textareaStartTagInBody(p2, token) {
  p2._insertElement(token, NS$2.HTML);
  p2.skipNextNewLine = true;
  p2.tokenizer.state = Tokenizer.MODE.RCDATA;
  p2.originalInsertionMode = p2.insertionMode;
  p2.framesetOk = false;
  p2.insertionMode = TEXT_MODE;
}
function xmpStartTagInBody(p2, token) {
  if (p2.openElements.hasInButtonScope($$2.P)) {
    p2._closePElement();
  }
  p2._reconstructActiveFormattingElements();
  p2.framesetOk = false;
  p2._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
}
function iframeStartTagInBody(p2, token) {
  p2.framesetOk = false;
  p2._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
}
function noembedStartTagInBody(p2, token) {
  p2._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
}
function selectStartTagInBody(p2, token) {
  p2._reconstructActiveFormattingElements();
  p2._insertElement(token, NS$2.HTML);
  p2.framesetOk = false;
  if (p2.insertionMode === IN_TABLE_MODE || p2.insertionMode === IN_CAPTION_MODE || p2.insertionMode === IN_TABLE_BODY_MODE || p2.insertionMode === IN_ROW_MODE || p2.insertionMode === IN_CELL_MODE) {
    p2.insertionMode = IN_SELECT_IN_TABLE_MODE;
  } else {
    p2.insertionMode = IN_SELECT_MODE;
  }
}
function optgroupStartTagInBody(p2, token) {
  if (p2.openElements.currentTagName === $$2.OPTION) {
    p2.openElements.pop();
  }
  p2._reconstructActiveFormattingElements();
  p2._insertElement(token, NS$2.HTML);
}
function rbStartTagInBody(p2, token) {
  if (p2.openElements.hasInScope($$2.RUBY)) {
    p2.openElements.generateImpliedEndTags();
  }
  p2._insertElement(token, NS$2.HTML);
}
function rtStartTagInBody(p2, token) {
  if (p2.openElements.hasInScope($$2.RUBY)) {
    p2.openElements.generateImpliedEndTagsWithExclusion($$2.RTC);
  }
  p2._insertElement(token, NS$2.HTML);
}
function menuStartTagInBody(p2, token) {
  if (p2.openElements.hasInButtonScope($$2.P)) {
    p2._closePElement();
  }
  p2._insertElement(token, NS$2.HTML);
}
function mathStartTagInBody(p2, token) {
  p2._reconstructActiveFormattingElements();
  foreignContent.adjustTokenMathMLAttrs(token);
  foreignContent.adjustTokenXMLAttrs(token);
  if (token.selfClosing) {
    p2._appendElement(token, NS$2.MATHML);
  } else {
    p2._insertElement(token, NS$2.MATHML);
  }
  token.ackSelfClosing = true;
}
function svgStartTagInBody(p2, token) {
  p2._reconstructActiveFormattingElements();
  foreignContent.adjustTokenSVGAttrs(token);
  foreignContent.adjustTokenXMLAttrs(token);
  if (token.selfClosing) {
    p2._appendElement(token, NS$2.SVG);
  } else {
    p2._insertElement(token, NS$2.SVG);
  }
  token.ackSelfClosing = true;
}
function genericStartTagInBody(p2, token) {
  p2._reconstructActiveFormattingElements();
  p2._insertElement(token, NS$2.HTML);
}
function startTagInBody(p2, token) {
  const tn = token.tagName;
  switch (tn.length) {
    case 1:
      if (tn === $$2.I || tn === $$2.S || tn === $$2.B || tn === $$2.U) {
        bStartTagInBody(p2, token);
      } else if (tn === $$2.P) {
        addressStartTagInBody(p2, token);
      } else if (tn === $$2.A) {
        aStartTagInBody(p2, token);
      } else {
        genericStartTagInBody(p2, token);
      }
      break;
    case 2:
      if (tn === $$2.DL || tn === $$2.OL || tn === $$2.UL) {
        addressStartTagInBody(p2, token);
      } else if (tn === $$2.H1 || tn === $$2.H2 || tn === $$2.H3 || tn === $$2.H4 || tn === $$2.H5 || tn === $$2.H6) {
        numberedHeaderStartTagInBody(p2, token);
      } else if (tn === $$2.LI || tn === $$2.DD || tn === $$2.DT) {
        listItemStartTagInBody(p2, token);
      } else if (tn === $$2.EM || tn === $$2.TT) {
        bStartTagInBody(p2, token);
      } else if (tn === $$2.BR) {
        areaStartTagInBody(p2, token);
      } else if (tn === $$2.HR) {
        hrStartTagInBody(p2, token);
      } else if (tn === $$2.RB) {
        rbStartTagInBody(p2, token);
      } else if (tn === $$2.RT || tn === $$2.RP) {
        rtStartTagInBody(p2, token);
      } else if (tn !== $$2.TH && tn !== $$2.TD && tn !== $$2.TR) {
        genericStartTagInBody(p2, token);
      }
      break;
    case 3:
      if (tn === $$2.DIV || tn === $$2.DIR || tn === $$2.NAV) {
        addressStartTagInBody(p2, token);
      } else if (tn === $$2.PRE) {
        preStartTagInBody(p2, token);
      } else if (tn === $$2.BIG) {
        bStartTagInBody(p2, token);
      } else if (tn === $$2.IMG || tn === $$2.WBR) {
        areaStartTagInBody(p2, token);
      } else if (tn === $$2.XMP) {
        xmpStartTagInBody(p2, token);
      } else if (tn === $$2.SVG) {
        svgStartTagInBody(p2, token);
      } else if (tn === $$2.RTC) {
        rbStartTagInBody(p2, token);
      } else if (tn !== $$2.COL) {
        genericStartTagInBody(p2, token);
      }
      break;
    case 4:
      if (tn === $$2.HTML) {
        htmlStartTagInBody(p2, token);
      } else if (tn === $$2.BASE || tn === $$2.LINK || tn === $$2.META) {
        startTagInHead(p2, token);
      } else if (tn === $$2.BODY) {
        bodyStartTagInBody(p2, token);
      } else if (tn === $$2.MAIN || tn === $$2.MENU) {
        addressStartTagInBody(p2, token);
      } else if (tn === $$2.FORM) {
        formStartTagInBody(p2, token);
      } else if (tn === $$2.CODE || tn === $$2.FONT) {
        bStartTagInBody(p2, token);
      } else if (tn === $$2.NOBR) {
        nobrStartTagInBody(p2, token);
      } else if (tn === $$2.AREA) {
        areaStartTagInBody(p2, token);
      } else if (tn === $$2.MATH) {
        mathStartTagInBody(p2, token);
      } else if (tn === $$2.MENU) {
        menuStartTagInBody(p2, token);
      } else if (tn !== $$2.HEAD) {
        genericStartTagInBody(p2, token);
      }
      break;
    case 5:
      if (tn === $$2.STYLE || tn === $$2.TITLE) {
        startTagInHead(p2, token);
      } else if (tn === $$2.ASIDE) {
        addressStartTagInBody(p2, token);
      } else if (tn === $$2.SMALL) {
        bStartTagInBody(p2, token);
      } else if (tn === $$2.TABLE) {
        tableStartTagInBody(p2, token);
      } else if (tn === $$2.EMBED) {
        areaStartTagInBody(p2, token);
      } else if (tn === $$2.INPUT) {
        inputStartTagInBody(p2, token);
      } else if (tn === $$2.PARAM || tn === $$2.TRACK) {
        paramStartTagInBody(p2, token);
      } else if (tn === $$2.IMAGE) {
        imageStartTagInBody(p2, token);
      } else if (tn !== $$2.FRAME && tn !== $$2.TBODY && tn !== $$2.TFOOT && tn !== $$2.THEAD) {
        genericStartTagInBody(p2, token);
      }
      break;
    case 6:
      if (tn === $$2.SCRIPT) {
        startTagInHead(p2, token);
      } else if (tn === $$2.CENTER || tn === $$2.FIGURE || tn === $$2.FOOTER || tn === $$2.HEADER || tn === $$2.HGROUP || tn === $$2.DIALOG) {
        addressStartTagInBody(p2, token);
      } else if (tn === $$2.BUTTON) {
        buttonStartTagInBody(p2, token);
      } else if (tn === $$2.STRIKE || tn === $$2.STRONG) {
        bStartTagInBody(p2, token);
      } else if (tn === $$2.APPLET || tn === $$2.OBJECT) {
        appletStartTagInBody(p2, token);
      } else if (tn === $$2.KEYGEN) {
        areaStartTagInBody(p2, token);
      } else if (tn === $$2.SOURCE) {
        paramStartTagInBody(p2, token);
      } else if (tn === $$2.IFRAME) {
        iframeStartTagInBody(p2, token);
      } else if (tn === $$2.SELECT) {
        selectStartTagInBody(p2, token);
      } else if (tn === $$2.OPTION) {
        optgroupStartTagInBody(p2, token);
      } else {
        genericStartTagInBody(p2, token);
      }
      break;
    case 7:
      if (tn === $$2.BGSOUND) {
        startTagInHead(p2, token);
      } else if (tn === $$2.DETAILS || tn === $$2.ADDRESS || tn === $$2.ARTICLE || tn === $$2.SECTION || tn === $$2.SUMMARY) {
        addressStartTagInBody(p2, token);
      } else if (tn === $$2.LISTING) {
        preStartTagInBody(p2, token);
      } else if (tn === $$2.MARQUEE) {
        appletStartTagInBody(p2, token);
      } else if (tn === $$2.NOEMBED) {
        noembedStartTagInBody(p2, token);
      } else if (tn !== $$2.CAPTION) {
        genericStartTagInBody(p2, token);
      }
      break;
    case 8:
      if (tn === $$2.BASEFONT) {
        startTagInHead(p2, token);
      } else if (tn === $$2.FRAMESET) {
        framesetStartTagInBody(p2, token);
      } else if (tn === $$2.FIELDSET) {
        addressStartTagInBody(p2, token);
      } else if (tn === $$2.TEXTAREA) {
        textareaStartTagInBody(p2, token);
      } else if (tn === $$2.TEMPLATE) {
        startTagInHead(p2, token);
      } else if (tn === $$2.NOSCRIPT) {
        if (p2.options.scriptingEnabled) {
          noembedStartTagInBody(p2, token);
        } else {
          genericStartTagInBody(p2, token);
        }
      } else if (tn === $$2.OPTGROUP) {
        optgroupStartTagInBody(p2, token);
      } else if (tn !== $$2.COLGROUP) {
        genericStartTagInBody(p2, token);
      }
      break;
    case 9:
      if (tn === $$2.PLAINTEXT) {
        plaintextStartTagInBody(p2, token);
      } else {
        genericStartTagInBody(p2, token);
      }
      break;
    case 10:
      if (tn === $$2.BLOCKQUOTE || tn === $$2.FIGCAPTION) {
        addressStartTagInBody(p2, token);
      } else {
        genericStartTagInBody(p2, token);
      }
      break;
    default:
      genericStartTagInBody(p2, token);
  }
}
function bodyEndTagInBody(p2) {
  if (p2.openElements.hasInScope($$2.BODY)) {
    p2.insertionMode = AFTER_BODY_MODE;
  }
}
function htmlEndTagInBody(p2, token) {
  if (p2.openElements.hasInScope($$2.BODY)) {
    p2.insertionMode = AFTER_BODY_MODE;
    p2._processToken(token);
  }
}
function addressEndTagInBody(p2, token) {
  const tn = token.tagName;
  if (p2.openElements.hasInScope(tn)) {
    p2.openElements.generateImpliedEndTags();
    p2.openElements.popUntilTagNamePopped(tn);
  }
}
function formEndTagInBody(p2) {
  const inTemplate = p2.openElements.tmplCount > 0;
  const formElement = p2.formElement;
  if (!inTemplate) {
    p2.formElement = null;
  }
  if ((formElement || inTemplate) && p2.openElements.hasInScope($$2.FORM)) {
    p2.openElements.generateImpliedEndTags();
    if (inTemplate) {
      p2.openElements.popUntilTagNamePopped($$2.FORM);
    } else {
      p2.openElements.remove(formElement);
    }
  }
}
function pEndTagInBody(p2) {
  if (!p2.openElements.hasInButtonScope($$2.P)) {
    p2._insertFakeElement($$2.P);
  }
  p2._closePElement();
}
function liEndTagInBody(p2) {
  if (p2.openElements.hasInListItemScope($$2.LI)) {
    p2.openElements.generateImpliedEndTagsWithExclusion($$2.LI);
    p2.openElements.popUntilTagNamePopped($$2.LI);
  }
}
function ddEndTagInBody(p2, token) {
  const tn = token.tagName;
  if (p2.openElements.hasInScope(tn)) {
    p2.openElements.generateImpliedEndTagsWithExclusion(tn);
    p2.openElements.popUntilTagNamePopped(tn);
  }
}
function numberedHeaderEndTagInBody(p2) {
  if (p2.openElements.hasNumberedHeaderInScope()) {
    p2.openElements.generateImpliedEndTags();
    p2.openElements.popUntilNumberedHeaderPopped();
  }
}
function appletEndTagInBody(p2, token) {
  const tn = token.tagName;
  if (p2.openElements.hasInScope(tn)) {
    p2.openElements.generateImpliedEndTags();
    p2.openElements.popUntilTagNamePopped(tn);
    p2.activeFormattingElements.clearToLastMarker();
  }
}
function brEndTagInBody(p2) {
  p2._reconstructActiveFormattingElements();
  p2._insertFakeElement($$2.BR);
  p2.openElements.pop();
  p2.framesetOk = false;
}
function genericEndTagInBody(p2, token) {
  const tn = token.tagName;
  for (let i2 = p2.openElements.stackTop; i2 > 0; i2--) {
    const element = p2.openElements.items[i2];
    if (p2.treeAdapter.getTagName(element) === tn) {
      p2.openElements.generateImpliedEndTagsWithExclusion(tn);
      p2.openElements.popUntilElementPopped(element);
      break;
    }
    if (p2._isSpecialElement(element)) {
      break;
    }
  }
}
function endTagInBody(p2, token) {
  const tn = token.tagName;
  switch (tn.length) {
    case 1:
      if (tn === $$2.A || tn === $$2.B || tn === $$2.I || tn === $$2.S || tn === $$2.U) {
        callAdoptionAgency(p2, token);
      } else if (tn === $$2.P) {
        pEndTagInBody(p2);
      } else {
        genericEndTagInBody(p2, token);
      }
      break;
    case 2:
      if (tn === $$2.DL || tn === $$2.UL || tn === $$2.OL) {
        addressEndTagInBody(p2, token);
      } else if (tn === $$2.LI) {
        liEndTagInBody(p2);
      } else if (tn === $$2.DD || tn === $$2.DT) {
        ddEndTagInBody(p2, token);
      } else if (tn === $$2.H1 || tn === $$2.H2 || tn === $$2.H3 || tn === $$2.H4 || tn === $$2.H5 || tn === $$2.H6) {
        numberedHeaderEndTagInBody(p2);
      } else if (tn === $$2.BR) {
        brEndTagInBody(p2);
      } else if (tn === $$2.EM || tn === $$2.TT) {
        callAdoptionAgency(p2, token);
      } else {
        genericEndTagInBody(p2, token);
      }
      break;
    case 3:
      if (tn === $$2.BIG) {
        callAdoptionAgency(p2, token);
      } else if (tn === $$2.DIR || tn === $$2.DIV || tn === $$2.NAV || tn === $$2.PRE) {
        addressEndTagInBody(p2, token);
      } else {
        genericEndTagInBody(p2, token);
      }
      break;
    case 4:
      if (tn === $$2.BODY) {
        bodyEndTagInBody(p2);
      } else if (tn === $$2.HTML) {
        htmlEndTagInBody(p2, token);
      } else if (tn === $$2.FORM) {
        formEndTagInBody(p2);
      } else if (tn === $$2.CODE || tn === $$2.FONT || tn === $$2.NOBR) {
        callAdoptionAgency(p2, token);
      } else if (tn === $$2.MAIN || tn === $$2.MENU) {
        addressEndTagInBody(p2, token);
      } else {
        genericEndTagInBody(p2, token);
      }
      break;
    case 5:
      if (tn === $$2.ASIDE) {
        addressEndTagInBody(p2, token);
      } else if (tn === $$2.SMALL) {
        callAdoptionAgency(p2, token);
      } else {
        genericEndTagInBody(p2, token);
      }
      break;
    case 6:
      if (tn === $$2.CENTER || tn === $$2.FIGURE || tn === $$2.FOOTER || tn === $$2.HEADER || tn === $$2.HGROUP || tn === $$2.DIALOG) {
        addressEndTagInBody(p2, token);
      } else if (tn === $$2.APPLET || tn === $$2.OBJECT) {
        appletEndTagInBody(p2, token);
      } else if (tn === $$2.STRIKE || tn === $$2.STRONG) {
        callAdoptionAgency(p2, token);
      } else {
        genericEndTagInBody(p2, token);
      }
      break;
    case 7:
      if (tn === $$2.ADDRESS || tn === $$2.ARTICLE || tn === $$2.DETAILS || tn === $$2.SECTION || tn === $$2.SUMMARY || tn === $$2.LISTING) {
        addressEndTagInBody(p2, token);
      } else if (tn === $$2.MARQUEE) {
        appletEndTagInBody(p2, token);
      } else {
        genericEndTagInBody(p2, token);
      }
      break;
    case 8:
      if (tn === $$2.FIELDSET) {
        addressEndTagInBody(p2, token);
      } else if (tn === $$2.TEMPLATE) {
        endTagInHead(p2, token);
      } else {
        genericEndTagInBody(p2, token);
      }
      break;
    case 10:
      if (tn === $$2.BLOCKQUOTE || tn === $$2.FIGCAPTION) {
        addressEndTagInBody(p2, token);
      } else {
        genericEndTagInBody(p2, token);
      }
      break;
    default:
      genericEndTagInBody(p2, token);
  }
}
function eofInBody(p2, token) {
  if (p2.tmplInsertionModeStackTop > -1) {
    eofInTemplate(p2, token);
  } else {
    p2.stopped = true;
  }
}
function endTagInText(p2, token) {
  if (token.tagName === $$2.SCRIPT) {
    p2.pendingScript = p2.openElements.current;
  }
  p2.openElements.pop();
  p2.insertionMode = p2.originalInsertionMode;
}
function eofInText(p2, token) {
  p2._err(ERR.eofInElementThatCanContainOnlyText);
  p2.openElements.pop();
  p2.insertionMode = p2.originalInsertionMode;
  p2._processToken(token);
}
function characterInTable(p2, token) {
  const curTn = p2.openElements.currentTagName;
  if (curTn === $$2.TABLE || curTn === $$2.TBODY || curTn === $$2.TFOOT || curTn === $$2.THEAD || curTn === $$2.TR) {
    p2.pendingCharacterTokens = [];
    p2.hasNonWhitespacePendingCharacterToken = false;
    p2.originalInsertionMode = p2.insertionMode;
    p2.insertionMode = IN_TABLE_TEXT_MODE;
    p2._processToken(token);
  } else {
    tokenInTable(p2, token);
  }
}
function captionStartTagInTable(p2, token) {
  p2.openElements.clearBackToTableContext();
  p2.activeFormattingElements.insertMarker();
  p2._insertElement(token, NS$2.HTML);
  p2.insertionMode = IN_CAPTION_MODE;
}
function colgroupStartTagInTable(p2, token) {
  p2.openElements.clearBackToTableContext();
  p2._insertElement(token, NS$2.HTML);
  p2.insertionMode = IN_COLUMN_GROUP_MODE;
}
function colStartTagInTable(p2, token) {
  p2.openElements.clearBackToTableContext();
  p2._insertFakeElement($$2.COLGROUP);
  p2.insertionMode = IN_COLUMN_GROUP_MODE;
  p2._processToken(token);
}
function tbodyStartTagInTable(p2, token) {
  p2.openElements.clearBackToTableContext();
  p2._insertElement(token, NS$2.HTML);
  p2.insertionMode = IN_TABLE_BODY_MODE;
}
function tdStartTagInTable(p2, token) {
  p2.openElements.clearBackToTableContext();
  p2._insertFakeElement($$2.TBODY);
  p2.insertionMode = IN_TABLE_BODY_MODE;
  p2._processToken(token);
}
function tableStartTagInTable(p2, token) {
  if (p2.openElements.hasInTableScope($$2.TABLE)) {
    p2.openElements.popUntilTagNamePopped($$2.TABLE);
    p2._resetInsertionMode();
    p2._processToken(token);
  }
}
function inputStartTagInTable(p2, token) {
  const inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);
  if (inputType && inputType.toLowerCase() === HIDDEN_INPUT_TYPE) {
    p2._appendElement(token, NS$2.HTML);
  } else {
    tokenInTable(p2, token);
  }
  token.ackSelfClosing = true;
}
function formStartTagInTable(p2, token) {
  if (!p2.formElement && p2.openElements.tmplCount === 0) {
    p2._insertElement(token, NS$2.HTML);
    p2.formElement = p2.openElements.current;
    p2.openElements.pop();
  }
}
function startTagInTable(p2, token) {
  const tn = token.tagName;
  switch (tn.length) {
    case 2:
      if (tn === $$2.TD || tn === $$2.TH || tn === $$2.TR) {
        tdStartTagInTable(p2, token);
      } else {
        tokenInTable(p2, token);
      }
      break;
    case 3:
      if (tn === $$2.COL) {
        colStartTagInTable(p2, token);
      } else {
        tokenInTable(p2, token);
      }
      break;
    case 4:
      if (tn === $$2.FORM) {
        formStartTagInTable(p2, token);
      } else {
        tokenInTable(p2, token);
      }
      break;
    case 5:
      if (tn === $$2.TABLE) {
        tableStartTagInTable(p2, token);
      } else if (tn === $$2.STYLE) {
        startTagInHead(p2, token);
      } else if (tn === $$2.TBODY || tn === $$2.TFOOT || tn === $$2.THEAD) {
        tbodyStartTagInTable(p2, token);
      } else if (tn === $$2.INPUT) {
        inputStartTagInTable(p2, token);
      } else {
        tokenInTable(p2, token);
      }
      break;
    case 6:
      if (tn === $$2.SCRIPT) {
        startTagInHead(p2, token);
      } else {
        tokenInTable(p2, token);
      }
      break;
    case 7:
      if (tn === $$2.CAPTION) {
        captionStartTagInTable(p2, token);
      } else {
        tokenInTable(p2, token);
      }
      break;
    case 8:
      if (tn === $$2.COLGROUP) {
        colgroupStartTagInTable(p2, token);
      } else if (tn === $$2.TEMPLATE) {
        startTagInHead(p2, token);
      } else {
        tokenInTable(p2, token);
      }
      break;
    default:
      tokenInTable(p2, token);
  }
}
function endTagInTable(p2, token) {
  const tn = token.tagName;
  if (tn === $$2.TABLE) {
    if (p2.openElements.hasInTableScope($$2.TABLE)) {
      p2.openElements.popUntilTagNamePopped($$2.TABLE);
      p2._resetInsertionMode();
    }
  } else if (tn === $$2.TEMPLATE) {
    endTagInHead(p2, token);
  } else if (tn !== $$2.BODY && tn !== $$2.CAPTION && tn !== $$2.COL && tn !== $$2.COLGROUP && tn !== $$2.HTML && tn !== $$2.TBODY && tn !== $$2.TD && tn !== $$2.TFOOT && tn !== $$2.TH && tn !== $$2.THEAD && tn !== $$2.TR) {
    tokenInTable(p2, token);
  }
}
function tokenInTable(p2, token) {
  const savedFosterParentingState = p2.fosterParentingEnabled;
  p2.fosterParentingEnabled = true;
  p2._processTokenInBodyMode(token);
  p2.fosterParentingEnabled = savedFosterParentingState;
}
function whitespaceCharacterInTableText(p2, token) {
  p2.pendingCharacterTokens.push(token);
}
function characterInTableText(p2, token) {
  p2.pendingCharacterTokens.push(token);
  p2.hasNonWhitespacePendingCharacterToken = true;
}
function tokenInTableText(p2, token) {
  let i2 = 0;
  if (p2.hasNonWhitespacePendingCharacterToken) {
    for (; i2 < p2.pendingCharacterTokens.length; i2++) {
      tokenInTable(p2, p2.pendingCharacterTokens[i2]);
    }
  } else {
    for (; i2 < p2.pendingCharacterTokens.length; i2++) {
      p2._insertCharacters(p2.pendingCharacterTokens[i2]);
    }
  }
  p2.insertionMode = p2.originalInsertionMode;
  p2._processToken(token);
}
function startTagInCaption(p2, token) {
  const tn = token.tagName;
  if (tn === $$2.CAPTION || tn === $$2.COL || tn === $$2.COLGROUP || tn === $$2.TBODY || tn === $$2.TD || tn === $$2.TFOOT || tn === $$2.TH || tn === $$2.THEAD || tn === $$2.TR) {
    if (p2.openElements.hasInTableScope($$2.CAPTION)) {
      p2.openElements.generateImpliedEndTags();
      p2.openElements.popUntilTagNamePopped($$2.CAPTION);
      p2.activeFormattingElements.clearToLastMarker();
      p2.insertionMode = IN_TABLE_MODE;
      p2._processToken(token);
    }
  } else {
    startTagInBody(p2, token);
  }
}
function endTagInCaption(p2, token) {
  const tn = token.tagName;
  if (tn === $$2.CAPTION || tn === $$2.TABLE) {
    if (p2.openElements.hasInTableScope($$2.CAPTION)) {
      p2.openElements.generateImpliedEndTags();
      p2.openElements.popUntilTagNamePopped($$2.CAPTION);
      p2.activeFormattingElements.clearToLastMarker();
      p2.insertionMode = IN_TABLE_MODE;
      if (tn === $$2.TABLE) {
        p2._processToken(token);
      }
    }
  } else if (tn !== $$2.BODY && tn !== $$2.COL && tn !== $$2.COLGROUP && tn !== $$2.HTML && tn !== $$2.TBODY && tn !== $$2.TD && tn !== $$2.TFOOT && tn !== $$2.TH && tn !== $$2.THEAD && tn !== $$2.TR) {
    endTagInBody(p2, token);
  }
}
function startTagInColumnGroup(p2, token) {
  const tn = token.tagName;
  if (tn === $$2.HTML) {
    startTagInBody(p2, token);
  } else if (tn === $$2.COL) {
    p2._appendElement(token, NS$2.HTML);
    token.ackSelfClosing = true;
  } else if (tn === $$2.TEMPLATE) {
    startTagInHead(p2, token);
  } else {
    tokenInColumnGroup(p2, token);
  }
}
function endTagInColumnGroup(p2, token) {
  const tn = token.tagName;
  if (tn === $$2.COLGROUP) {
    if (p2.openElements.currentTagName === $$2.COLGROUP) {
      p2.openElements.pop();
      p2.insertionMode = IN_TABLE_MODE;
    }
  } else if (tn === $$2.TEMPLATE) {
    endTagInHead(p2, token);
  } else if (tn !== $$2.COL) {
    tokenInColumnGroup(p2, token);
  }
}
function tokenInColumnGroup(p2, token) {
  if (p2.openElements.currentTagName === $$2.COLGROUP) {
    p2.openElements.pop();
    p2.insertionMode = IN_TABLE_MODE;
    p2._processToken(token);
  }
}
function startTagInTableBody(p2, token) {
  const tn = token.tagName;
  if (tn === $$2.TR) {
    p2.openElements.clearBackToTableBodyContext();
    p2._insertElement(token, NS$2.HTML);
    p2.insertionMode = IN_ROW_MODE;
  } else if (tn === $$2.TH || tn === $$2.TD) {
    p2.openElements.clearBackToTableBodyContext();
    p2._insertFakeElement($$2.TR);
    p2.insertionMode = IN_ROW_MODE;
    p2._processToken(token);
  } else if (tn === $$2.CAPTION || tn === $$2.COL || tn === $$2.COLGROUP || tn === $$2.TBODY || tn === $$2.TFOOT || tn === $$2.THEAD) {
    if (p2.openElements.hasTableBodyContextInTableScope()) {
      p2.openElements.clearBackToTableBodyContext();
      p2.openElements.pop();
      p2.insertionMode = IN_TABLE_MODE;
      p2._processToken(token);
    }
  } else {
    startTagInTable(p2, token);
  }
}
function endTagInTableBody(p2, token) {
  const tn = token.tagName;
  if (tn === $$2.TBODY || tn === $$2.TFOOT || tn === $$2.THEAD) {
    if (p2.openElements.hasInTableScope(tn)) {
      p2.openElements.clearBackToTableBodyContext();
      p2.openElements.pop();
      p2.insertionMode = IN_TABLE_MODE;
    }
  } else if (tn === $$2.TABLE) {
    if (p2.openElements.hasTableBodyContextInTableScope()) {
      p2.openElements.clearBackToTableBodyContext();
      p2.openElements.pop();
      p2.insertionMode = IN_TABLE_MODE;
      p2._processToken(token);
    }
  } else if (tn !== $$2.BODY && tn !== $$2.CAPTION && tn !== $$2.COL && tn !== $$2.COLGROUP || tn !== $$2.HTML && tn !== $$2.TD && tn !== $$2.TH && tn !== $$2.TR) {
    endTagInTable(p2, token);
  }
}
function startTagInRow(p2, token) {
  const tn = token.tagName;
  if (tn === $$2.TH || tn === $$2.TD) {
    p2.openElements.clearBackToTableRowContext();
    p2._insertElement(token, NS$2.HTML);
    p2.insertionMode = IN_CELL_MODE;
    p2.activeFormattingElements.insertMarker();
  } else if (tn === $$2.CAPTION || tn === $$2.COL || tn === $$2.COLGROUP || tn === $$2.TBODY || tn === $$2.TFOOT || tn === $$2.THEAD || tn === $$2.TR) {
    if (p2.openElements.hasInTableScope($$2.TR)) {
      p2.openElements.clearBackToTableRowContext();
      p2.openElements.pop();
      p2.insertionMode = IN_TABLE_BODY_MODE;
      p2._processToken(token);
    }
  } else {
    startTagInTable(p2, token);
  }
}
function endTagInRow(p2, token) {
  const tn = token.tagName;
  if (tn === $$2.TR) {
    if (p2.openElements.hasInTableScope($$2.TR)) {
      p2.openElements.clearBackToTableRowContext();
      p2.openElements.pop();
      p2.insertionMode = IN_TABLE_BODY_MODE;
    }
  } else if (tn === $$2.TABLE) {
    if (p2.openElements.hasInTableScope($$2.TR)) {
      p2.openElements.clearBackToTableRowContext();
      p2.openElements.pop();
      p2.insertionMode = IN_TABLE_BODY_MODE;
      p2._processToken(token);
    }
  } else if (tn === $$2.TBODY || tn === $$2.TFOOT || tn === $$2.THEAD) {
    if (p2.openElements.hasInTableScope(tn) || p2.openElements.hasInTableScope($$2.TR)) {
      p2.openElements.clearBackToTableRowContext();
      p2.openElements.pop();
      p2.insertionMode = IN_TABLE_BODY_MODE;
      p2._processToken(token);
    }
  } else if (tn !== $$2.BODY && tn !== $$2.CAPTION && tn !== $$2.COL && tn !== $$2.COLGROUP || tn !== $$2.HTML && tn !== $$2.TD && tn !== $$2.TH) {
    endTagInTable(p2, token);
  }
}
function startTagInCell(p2, token) {
  const tn = token.tagName;
  if (tn === $$2.CAPTION || tn === $$2.COL || tn === $$2.COLGROUP || tn === $$2.TBODY || tn === $$2.TD || tn === $$2.TFOOT || tn === $$2.TH || tn === $$2.THEAD || tn === $$2.TR) {
    if (p2.openElements.hasInTableScope($$2.TD) || p2.openElements.hasInTableScope($$2.TH)) {
      p2._closeTableCell();
      p2._processToken(token);
    }
  } else {
    startTagInBody(p2, token);
  }
}
function endTagInCell(p2, token) {
  const tn = token.tagName;
  if (tn === $$2.TD || tn === $$2.TH) {
    if (p2.openElements.hasInTableScope(tn)) {
      p2.openElements.generateImpliedEndTags();
      p2.openElements.popUntilTagNamePopped(tn);
      p2.activeFormattingElements.clearToLastMarker();
      p2.insertionMode = IN_ROW_MODE;
    }
  } else if (tn === $$2.TABLE || tn === $$2.TBODY || tn === $$2.TFOOT || tn === $$2.THEAD || tn === $$2.TR) {
    if (p2.openElements.hasInTableScope(tn)) {
      p2._closeTableCell();
      p2._processToken(token);
    }
  } else if (tn !== $$2.BODY && tn !== $$2.CAPTION && tn !== $$2.COL && tn !== $$2.COLGROUP && tn !== $$2.HTML) {
    endTagInBody(p2, token);
  }
}
function startTagInSelect(p2, token) {
  const tn = token.tagName;
  if (tn === $$2.HTML) {
    startTagInBody(p2, token);
  } else if (tn === $$2.OPTION) {
    if (p2.openElements.currentTagName === $$2.OPTION) {
      p2.openElements.pop();
    }
    p2._insertElement(token, NS$2.HTML);
  } else if (tn === $$2.OPTGROUP) {
    if (p2.openElements.currentTagName === $$2.OPTION) {
      p2.openElements.pop();
    }
    if (p2.openElements.currentTagName === $$2.OPTGROUP) {
      p2.openElements.pop();
    }
    p2._insertElement(token, NS$2.HTML);
  } else if (tn === $$2.INPUT || tn === $$2.KEYGEN || tn === $$2.TEXTAREA || tn === $$2.SELECT) {
    if (p2.openElements.hasInSelectScope($$2.SELECT)) {
      p2.openElements.popUntilTagNamePopped($$2.SELECT);
      p2._resetInsertionMode();
      if (tn !== $$2.SELECT) {
        p2._processToken(token);
      }
    }
  } else if (tn === $$2.SCRIPT || tn === $$2.TEMPLATE) {
    startTagInHead(p2, token);
  }
}
function endTagInSelect(p2, token) {
  const tn = token.tagName;
  if (tn === $$2.OPTGROUP) {
    const prevOpenElement = p2.openElements.items[p2.openElements.stackTop - 1];
    const prevOpenElementTn = prevOpenElement && p2.treeAdapter.getTagName(prevOpenElement);
    if (p2.openElements.currentTagName === $$2.OPTION && prevOpenElementTn === $$2.OPTGROUP) {
      p2.openElements.pop();
    }
    if (p2.openElements.currentTagName === $$2.OPTGROUP) {
      p2.openElements.pop();
    }
  } else if (tn === $$2.OPTION) {
    if (p2.openElements.currentTagName === $$2.OPTION) {
      p2.openElements.pop();
    }
  } else if (tn === $$2.SELECT && p2.openElements.hasInSelectScope($$2.SELECT)) {
    p2.openElements.popUntilTagNamePopped($$2.SELECT);
    p2._resetInsertionMode();
  } else if (tn === $$2.TEMPLATE) {
    endTagInHead(p2, token);
  }
}
function startTagInSelectInTable(p2, token) {
  const tn = token.tagName;
  if (tn === $$2.CAPTION || tn === $$2.TABLE || tn === $$2.TBODY || tn === $$2.TFOOT || tn === $$2.THEAD || tn === $$2.TR || tn === $$2.TD || tn === $$2.TH) {
    p2.openElements.popUntilTagNamePopped($$2.SELECT);
    p2._resetInsertionMode();
    p2._processToken(token);
  } else {
    startTagInSelect(p2, token);
  }
}
function endTagInSelectInTable(p2, token) {
  const tn = token.tagName;
  if (tn === $$2.CAPTION || tn === $$2.TABLE || tn === $$2.TBODY || tn === $$2.TFOOT || tn === $$2.THEAD || tn === $$2.TR || tn === $$2.TD || tn === $$2.TH) {
    if (p2.openElements.hasInTableScope(tn)) {
      p2.openElements.popUntilTagNamePopped($$2.SELECT);
      p2._resetInsertionMode();
      p2._processToken(token);
    }
  } else {
    endTagInSelect(p2, token);
  }
}
function startTagInTemplate(p2, token) {
  const tn = token.tagName;
  if (tn === $$2.BASE || tn === $$2.BASEFONT || tn === $$2.BGSOUND || tn === $$2.LINK || tn === $$2.META || tn === $$2.NOFRAMES || tn === $$2.SCRIPT || tn === $$2.STYLE || tn === $$2.TEMPLATE || tn === $$2.TITLE) {
    startTagInHead(p2, token);
  } else {
    const newInsertionMode = TEMPLATE_INSERTION_MODE_SWITCH_MAP[tn] || IN_BODY_MODE;
    p2._popTmplInsertionMode();
    p2._pushTmplInsertionMode(newInsertionMode);
    p2.insertionMode = newInsertionMode;
    p2._processToken(token);
  }
}
function endTagInTemplate(p2, token) {
  if (token.tagName === $$2.TEMPLATE) {
    endTagInHead(p2, token);
  }
}
function eofInTemplate(p2, token) {
  if (p2.openElements.tmplCount > 0) {
    p2.openElements.popUntilTagNamePopped($$2.TEMPLATE);
    p2.activeFormattingElements.clearToLastMarker();
    p2._popTmplInsertionMode();
    p2._resetInsertionMode();
    p2._processToken(token);
  } else {
    p2.stopped = true;
  }
}
function startTagAfterBody(p2, token) {
  if (token.tagName === $$2.HTML) {
    startTagInBody(p2, token);
  } else {
    tokenAfterBody(p2, token);
  }
}
function endTagAfterBody(p2, token) {
  if (token.tagName === $$2.HTML) {
    if (!p2.fragmentContext) {
      p2.insertionMode = AFTER_AFTER_BODY_MODE;
    }
  } else {
    tokenAfterBody(p2, token);
  }
}
function tokenAfterBody(p2, token) {
  p2.insertionMode = IN_BODY_MODE;
  p2._processToken(token);
}
function startTagInFrameset(p2, token) {
  const tn = token.tagName;
  if (tn === $$2.HTML) {
    startTagInBody(p2, token);
  } else if (tn === $$2.FRAMESET) {
    p2._insertElement(token, NS$2.HTML);
  } else if (tn === $$2.FRAME) {
    p2._appendElement(token, NS$2.HTML);
    token.ackSelfClosing = true;
  } else if (tn === $$2.NOFRAMES) {
    startTagInHead(p2, token);
  }
}
function endTagInFrameset(p2, token) {
  if (token.tagName === $$2.FRAMESET && !p2.openElements.isRootHtmlElementCurrent()) {
    p2.openElements.pop();
    if (!p2.fragmentContext && p2.openElements.currentTagName !== $$2.FRAMESET) {
      p2.insertionMode = AFTER_FRAMESET_MODE;
    }
  }
}
function startTagAfterFrameset(p2, token) {
  const tn = token.tagName;
  if (tn === $$2.HTML) {
    startTagInBody(p2, token);
  } else if (tn === $$2.NOFRAMES) {
    startTagInHead(p2, token);
  }
}
function endTagAfterFrameset(p2, token) {
  if (token.tagName === $$2.HTML) {
    p2.insertionMode = AFTER_AFTER_FRAMESET_MODE;
  }
}
function startTagAfterAfterBody(p2, token) {
  if (token.tagName === $$2.HTML) {
    startTagInBody(p2, token);
  } else {
    tokenAfterAfterBody(p2, token);
  }
}
function tokenAfterAfterBody(p2, token) {
  p2.insertionMode = IN_BODY_MODE;
  p2._processToken(token);
}
function startTagAfterAfterFrameset(p2, token) {
  const tn = token.tagName;
  if (tn === $$2.HTML) {
    startTagInBody(p2, token);
  } else if (tn === $$2.NOFRAMES) {
    startTagInHead(p2, token);
  }
}
function nullCharacterInForeignContent(p2, token) {
  token.chars = unicode.REPLACEMENT_CHARACTER;
  p2._insertCharacters(token);
}
function characterInForeignContent(p2, token) {
  p2._insertCharacters(token);
  p2.framesetOk = false;
}
function startTagInForeignContent(p2, token) {
  if (foreignContent.causesExit(token) && !p2.fragmentContext) {
    while (p2.treeAdapter.getNamespaceURI(p2.openElements.current) !== NS$2.HTML && !p2._isIntegrationPoint(p2.openElements.current)) {
      p2.openElements.pop();
    }
    p2._processToken(token);
  } else {
    const current = p2._getAdjustedCurrentElement();
    const currentNs = p2.treeAdapter.getNamespaceURI(current);
    if (currentNs === NS$2.MATHML) {
      foreignContent.adjustTokenMathMLAttrs(token);
    } else if (currentNs === NS$2.SVG) {
      foreignContent.adjustTokenSVGTagName(token);
      foreignContent.adjustTokenSVGAttrs(token);
    }
    foreignContent.adjustTokenXMLAttrs(token);
    if (token.selfClosing) {
      p2._appendElement(token, currentNs);
    } else {
      p2._insertElement(token, currentNs);
    }
    token.ackSelfClosing = true;
  }
}
function endTagInForeignContent(p2, token) {
  for (let i2 = p2.openElements.stackTop; i2 > 0; i2--) {
    const element = p2.openElements.items[i2];
    if (p2.treeAdapter.getNamespaceURI(element) === NS$2.HTML) {
      p2._processToken(token);
      break;
    }
    if (p2.treeAdapter.getTagName(element).toLowerCase() === token.tagName) {
      p2.openElements.popUntilElementPopped(element);
      break;
    }
  }
}
const defaultTreeAdapter = _default;
const mergeOptions = mergeOptions$2;
const doctype$2 = doctype$4;
const HTML = html$1;
const $$1 = HTML.TAG_NAMES;
const NS$1 = HTML.NAMESPACES;
const DEFAULT_OPTIONS = {
  treeAdapter: defaultTreeAdapter
};
const AMP_REGEX = /&/g;
const NBSP_REGEX = /\u00a0/g;
const DOUBLE_QUOTE_REGEX = /"/g;
const LT_REGEX = /</g;
const GT_REGEX = />/g;
class Serializer$1 {
  constructor(node, options) {
    this.options = mergeOptions(DEFAULT_OPTIONS, options);
    this.treeAdapter = this.options.treeAdapter;
    this.html = "";
    this.startNode = node;
  }
  serialize() {
    this._serializeChildNodes(this.startNode);
    return this.html;
  }
  _serializeChildNodes(parentNode) {
    const childNodes = this.treeAdapter.getChildNodes(parentNode);
    if (childNodes) {
      for (let i2 = 0, cnLength = childNodes.length; i2 < cnLength; i2++) {
        const currentNode = childNodes[i2];
        if (this.treeAdapter.isElementNode(currentNode)) {
          this._serializeElement(currentNode);
        } else if (this.treeAdapter.isTextNode(currentNode)) {
          this._serializeTextNode(currentNode);
        } else if (this.treeAdapter.isCommentNode(currentNode)) {
          this._serializeCommentNode(currentNode);
        } else if (this.treeAdapter.isDocumentTypeNode(currentNode)) {
          this._serializeDocumentTypeNode(currentNode);
        }
      }
    }
  }
  _serializeElement(node) {
    const tn = this.treeAdapter.getTagName(node);
    const ns = this.treeAdapter.getNamespaceURI(node);
    this.html += "<" + tn;
    this._serializeAttributes(node);
    this.html += ">";
    if (tn !== $$1.AREA && tn !== $$1.BASE && tn !== $$1.BASEFONT && tn !== $$1.BGSOUND && tn !== $$1.BR && tn !== $$1.COL && tn !== $$1.EMBED && tn !== $$1.FRAME && tn !== $$1.HR && tn !== $$1.IMG && tn !== $$1.INPUT && tn !== $$1.KEYGEN && tn !== $$1.LINK && tn !== $$1.META && tn !== $$1.PARAM && tn !== $$1.SOURCE && tn !== $$1.TRACK && tn !== $$1.WBR) {
      const childNodesHolder = tn === $$1.TEMPLATE && ns === NS$1.HTML ? this.treeAdapter.getTemplateContent(node) : node;
      this._serializeChildNodes(childNodesHolder);
      this.html += "</" + tn + ">";
    }
  }
  _serializeAttributes(node) {
    const attrs = this.treeAdapter.getAttrList(node);
    for (let i2 = 0, attrsLength = attrs.length; i2 < attrsLength; i2++) {
      const attr = attrs[i2];
      const value = Serializer$1.escapeString(attr.value, true);
      this.html += " ";
      if (!attr.namespace) {
        this.html += attr.name;
      } else if (attr.namespace === NS$1.XML) {
        this.html += "xml:" + attr.name;
      } else if (attr.namespace === NS$1.XMLNS) {
        if (attr.name !== "xmlns") {
          this.html += "xmlns:";
        }
        this.html += attr.name;
      } else if (attr.namespace === NS$1.XLINK) {
        this.html += "xlink:" + attr.name;
      } else {
        this.html += attr.prefix + ":" + attr.name;
      }
      this.html += '="' + value + '"';
    }
  }
  _serializeTextNode(node) {
    const content = this.treeAdapter.getTextNodeContent(node);
    const parent = this.treeAdapter.getParentNode(node);
    let parentTn = void 0;
    if (parent && this.treeAdapter.isElementNode(parent)) {
      parentTn = this.treeAdapter.getTagName(parent);
    }
    if (parentTn === $$1.STYLE || parentTn === $$1.SCRIPT || parentTn === $$1.XMP || parentTn === $$1.IFRAME || parentTn === $$1.NOEMBED || parentTn === $$1.NOFRAMES || parentTn === $$1.PLAINTEXT || parentTn === $$1.NOSCRIPT) {
      this.html += content;
    } else {
      this.html += Serializer$1.escapeString(content, false);
    }
  }
  _serializeCommentNode(node) {
    this.html += "<!--" + this.treeAdapter.getCommentNodeContent(node) + "-->";
  }
  _serializeDocumentTypeNode(node) {
    const name2 = this.treeAdapter.getDocumentTypeNodeName(node);
    this.html += "<" + doctype$2.serializeContent(name2, null, null) + ">";
  }
}
Serializer$1.escapeString = function(str, attrMode) {
  str = str.replace(AMP_REGEX, "&amp;").replace(NBSP_REGEX, "&nbsp;");
  if (attrMode) {
    str = str.replace(DOUBLE_QUOTE_REGEX, "&quot;");
  } else {
    str = str.replace(LT_REGEX, "&lt;").replace(GT_REGEX, "&gt;");
  }
  return str;
};
var serializer = Serializer$1;
const Parser = parser;
const Serializer = serializer;
lib$1.parse = function parse4(html2, options) {
  const parser2 = new Parser(options);
  return parser2.parse(html2);
};
lib$1.parseFragment = function parseFragment(fragmentContext, html2, options) {
  if (typeof fragmentContext === "string") {
    options = html2;
    html2 = fragmentContext;
    fragmentContext = null;
  }
  const parser2 = new Parser(options);
  return parser2.parseFragment(html2, fragmentContext);
};
lib$1.serialize = function(node, options) {
  const serializer2 = new Serializer(node, options);
  return serializer2.serialize();
};
var lib = {};
var doctype$1 = {};
var html = {};
const NS = html.NAMESPACES = {
  HTML: "http://www.w3.org/1999/xhtml",
  MATHML: "http://www.w3.org/1998/Math/MathML",
  SVG: "http://www.w3.org/2000/svg",
  XLINK: "http://www.w3.org/1999/xlink",
  XML: "http://www.w3.org/XML/1998/namespace",
  XMLNS: "http://www.w3.org/2000/xmlns/"
};
html.ATTRS = {
  TYPE: "type",
  ACTION: "action",
  ENCODING: "encoding",
  PROMPT: "prompt",
  NAME: "name",
  COLOR: "color",
  FACE: "face",
  SIZE: "size"
};
html.DOCUMENT_MODE = {
  NO_QUIRKS: "no-quirks",
  QUIRKS: "quirks",
  LIMITED_QUIRKS: "limited-quirks"
};
const $ = html.TAG_NAMES = {
  A: "a",
  ADDRESS: "address",
  ANNOTATION_XML: "annotation-xml",
  APPLET: "applet",
  AREA: "area",
  ARTICLE: "article",
  ASIDE: "aside",
  B: "b",
  BASE: "base",
  BASEFONT: "basefont",
  BGSOUND: "bgsound",
  BIG: "big",
  BLOCKQUOTE: "blockquote",
  BODY: "body",
  BR: "br",
  BUTTON: "button",
  CAPTION: "caption",
  CENTER: "center",
  CODE: "code",
  COL: "col",
  COLGROUP: "colgroup",
  DD: "dd",
  DESC: "desc",
  DETAILS: "details",
  DIALOG: "dialog",
  DIR: "dir",
  DIV: "div",
  DL: "dl",
  DT: "dt",
  EM: "em",
  EMBED: "embed",
  FIELDSET: "fieldset",
  FIGCAPTION: "figcaption",
  FIGURE: "figure",
  FONT: "font",
  FOOTER: "footer",
  FOREIGN_OBJECT: "foreignObject",
  FORM: "form",
  FRAME: "frame",
  FRAMESET: "frameset",
  H1: "h1",
  H2: "h2",
  H3: "h3",
  H4: "h4",
  H5: "h5",
  H6: "h6",
  HEAD: "head",
  HEADER: "header",
  HGROUP: "hgroup",
  HR: "hr",
  HTML: "html",
  I: "i",
  IMG: "img",
  IMAGE: "image",
  INPUT: "input",
  IFRAME: "iframe",
  KEYGEN: "keygen",
  LABEL: "label",
  LI: "li",
  LINK: "link",
  LISTING: "listing",
  MAIN: "main",
  MALIGNMARK: "malignmark",
  MARQUEE: "marquee",
  MATH: "math",
  MENU: "menu",
  META: "meta",
  MGLYPH: "mglyph",
  MI: "mi",
  MO: "mo",
  MN: "mn",
  MS: "ms",
  MTEXT: "mtext",
  NAV: "nav",
  NOBR: "nobr",
  NOFRAMES: "noframes",
  NOEMBED: "noembed",
  NOSCRIPT: "noscript",
  OBJECT: "object",
  OL: "ol",
  OPTGROUP: "optgroup",
  OPTION: "option",
  P: "p",
  PARAM: "param",
  PLAINTEXT: "plaintext",
  PRE: "pre",
  RB: "rb",
  RP: "rp",
  RT: "rt",
  RTC: "rtc",
  RUBY: "ruby",
  S: "s",
  SCRIPT: "script",
  SECTION: "section",
  SELECT: "select",
  SOURCE: "source",
  SMALL: "small",
  SPAN: "span",
  STRIKE: "strike",
  STRONG: "strong",
  STYLE: "style",
  SUB: "sub",
  SUMMARY: "summary",
  SUP: "sup",
  TABLE: "table",
  TBODY: "tbody",
  TEMPLATE: "template",
  TEXTAREA: "textarea",
  TFOOT: "tfoot",
  TD: "td",
  TH: "th",
  THEAD: "thead",
  TITLE: "title",
  TR: "tr",
  TRACK: "track",
  TT: "tt",
  U: "u",
  UL: "ul",
  SVG: "svg",
  VAR: "var",
  WBR: "wbr",
  XMP: "xmp"
};
html.SPECIAL_ELEMENTS = {
  [NS.HTML]: {
    [$.ADDRESS]: true,
    [$.APPLET]: true,
    [$.AREA]: true,
    [$.ARTICLE]: true,
    [$.ASIDE]: true,
    [$.BASE]: true,
    [$.BASEFONT]: true,
    [$.BGSOUND]: true,
    [$.BLOCKQUOTE]: true,
    [$.BODY]: true,
    [$.BR]: true,
    [$.BUTTON]: true,
    [$.CAPTION]: true,
    [$.CENTER]: true,
    [$.COL]: true,
    [$.COLGROUP]: true,
    [$.DD]: true,
    [$.DETAILS]: true,
    [$.DIR]: true,
    [$.DIV]: true,
    [$.DL]: true,
    [$.DT]: true,
    [$.EMBED]: true,
    [$.FIELDSET]: true,
    [$.FIGCAPTION]: true,
    [$.FIGURE]: true,
    [$.FOOTER]: true,
    [$.FORM]: true,
    [$.FRAME]: true,
    [$.FRAMESET]: true,
    [$.H1]: true,
    [$.H2]: true,
    [$.H3]: true,
    [$.H4]: true,
    [$.H5]: true,
    [$.H6]: true,
    [$.HEAD]: true,
    [$.HEADER]: true,
    [$.HGROUP]: true,
    [$.HR]: true,
    [$.HTML]: true,
    [$.IFRAME]: true,
    [$.IMG]: true,
    [$.INPUT]: true,
    [$.LI]: true,
    [$.LINK]: true,
    [$.LISTING]: true,
    [$.MAIN]: true,
    [$.MARQUEE]: true,
    [$.MENU]: true,
    [$.META]: true,
    [$.NAV]: true,
    [$.NOEMBED]: true,
    [$.NOFRAMES]: true,
    [$.NOSCRIPT]: true,
    [$.OBJECT]: true,
    [$.OL]: true,
    [$.P]: true,
    [$.PARAM]: true,
    [$.PLAINTEXT]: true,
    [$.PRE]: true,
    [$.SCRIPT]: true,
    [$.SECTION]: true,
    [$.SELECT]: true,
    [$.SOURCE]: true,
    [$.STYLE]: true,
    [$.SUMMARY]: true,
    [$.TABLE]: true,
    [$.TBODY]: true,
    [$.TD]: true,
    [$.TEMPLATE]: true,
    [$.TEXTAREA]: true,
    [$.TFOOT]: true,
    [$.TH]: true,
    [$.THEAD]: true,
    [$.TITLE]: true,
    [$.TR]: true,
    [$.TRACK]: true,
    [$.UL]: true,
    [$.WBR]: true,
    [$.XMP]: true
  },
  [NS.MATHML]: {
    [$.MI]: true,
    [$.MO]: true,
    [$.MN]: true,
    [$.MS]: true,
    [$.MTEXT]: true,
    [$.ANNOTATION_XML]: true
  },
  [NS.SVG]: {
    [$.TITLE]: true,
    [$.FOREIGN_OBJECT]: true,
    [$.DESC]: true
  }
};
const {DOCUMENT_MODE: DOCUMENT_MODE$1} = html;
const VALID_DOCTYPE_NAME = "html";
const VALID_SYSTEM_ID = "about:legacy-compat";
const QUIRKS_MODE_SYSTEM_ID = "http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd";
const QUIRKS_MODE_PUBLIC_ID_PREFIXES = [
  "+//silmaril//dtd html pro v0r11 19970101//",
  "-//as//dtd html 3.0 aswedit + extensions//",
  "-//advasoft ltd//dtd html 3.0 aswedit + extensions//",
  "-//ietf//dtd html 2.0 level 1//",
  "-//ietf//dtd html 2.0 level 2//",
  "-//ietf//dtd html 2.0 strict level 1//",
  "-//ietf//dtd html 2.0 strict level 2//",
  "-//ietf//dtd html 2.0 strict//",
  "-//ietf//dtd html 2.0//",
  "-//ietf//dtd html 2.1e//",
  "-//ietf//dtd html 3.0//",
  "-//ietf//dtd html 3.2 final//",
  "-//ietf//dtd html 3.2//",
  "-//ietf//dtd html 3//",
  "-//ietf//dtd html level 0//",
  "-//ietf//dtd html level 1//",
  "-//ietf//dtd html level 2//",
  "-//ietf//dtd html level 3//",
  "-//ietf//dtd html strict level 0//",
  "-//ietf//dtd html strict level 1//",
  "-//ietf//dtd html strict level 2//",
  "-//ietf//dtd html strict level 3//",
  "-//ietf//dtd html strict//",
  "-//ietf//dtd html//",
  "-//metrius//dtd metrius presentational//",
  "-//microsoft//dtd internet explorer 2.0 html strict//",
  "-//microsoft//dtd internet explorer 2.0 html//",
  "-//microsoft//dtd internet explorer 2.0 tables//",
  "-//microsoft//dtd internet explorer 3.0 html strict//",
  "-//microsoft//dtd internet explorer 3.0 html//",
  "-//microsoft//dtd internet explorer 3.0 tables//",
  "-//netscape comm. corp.//dtd html//",
  "-//netscape comm. corp.//dtd strict html//",
  "-//o'reilly and associates//dtd html 2.0//",
  "-//o'reilly and associates//dtd html extended 1.0//",
  "-//o'reilly and associates//dtd html extended relaxed 1.0//",
  "-//sq//dtd html 2.0 hotmetal + extensions//",
  "-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//",
  "-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//",
  "-//spyglass//dtd html 2.0 extended//",
  "-//sun microsystems corp.//dtd hotjava html//",
  "-//sun microsystems corp.//dtd hotjava strict html//",
  "-//w3c//dtd html 3 1995-03-24//",
  "-//w3c//dtd html 3.2 draft//",
  "-//w3c//dtd html 3.2 final//",
  "-//w3c//dtd html 3.2//",
  "-//w3c//dtd html 3.2s draft//",
  "-//w3c//dtd html 4.0 frameset//",
  "-//w3c//dtd html 4.0 transitional//",
  "-//w3c//dtd html experimental 19960712//",
  "-//w3c//dtd html experimental 970421//",
  "-//w3c//dtd w3 html//",
  "-//w3o//dtd w3 html 3.0//",
  "-//webtechs//dtd mozilla html 2.0//",
  "-//webtechs//dtd mozilla html//"
];
const QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = QUIRKS_MODE_PUBLIC_ID_PREFIXES.concat([
  "-//w3c//dtd html 4.01 frameset//",
  "-//w3c//dtd html 4.01 transitional//"
]);
const QUIRKS_MODE_PUBLIC_IDS = ["-//w3o//dtd w3 html strict 3.0//en//", "-/w3c/dtd html 4.0 transitional/en", "html"];
const LIMITED_QUIRKS_PUBLIC_ID_PREFIXES = ["-//w3c//dtd xhtml 1.0 frameset//", "-//w3c//dtd xhtml 1.0 transitional//"];
const LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES = LIMITED_QUIRKS_PUBLIC_ID_PREFIXES.concat([
  "-//w3c//dtd html 4.01 frameset//",
  "-//w3c//dtd html 4.01 transitional//"
]);
function enquoteDoctypeId(id2) {
  const quote = id2.indexOf('"') !== -1 ? "'" : '"';
  return quote + id2 + quote;
}
function hasPrefix(publicId, prefixes) {
  for (let i2 = 0; i2 < prefixes.length; i2++) {
    if (publicId.indexOf(prefixes[i2]) === 0) {
      return true;
    }
  }
  return false;
}
doctype$1.isConforming = function(token) {
  return token.name === VALID_DOCTYPE_NAME && token.publicId === null && (token.systemId === null || token.systemId === VALID_SYSTEM_ID);
};
doctype$1.getDocumentMode = function(token) {
  if (token.name !== VALID_DOCTYPE_NAME) {
    return DOCUMENT_MODE$1.QUIRKS;
  }
  const systemId = token.systemId;
  if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID) {
    return DOCUMENT_MODE$1.QUIRKS;
  }
  let publicId = token.publicId;
  if (publicId !== null) {
    publicId = publicId.toLowerCase();
    if (QUIRKS_MODE_PUBLIC_IDS.indexOf(publicId) > -1) {
      return DOCUMENT_MODE$1.QUIRKS;
    }
    let prefixes = systemId === null ? QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES : QUIRKS_MODE_PUBLIC_ID_PREFIXES;
    if (hasPrefix(publicId, prefixes)) {
      return DOCUMENT_MODE$1.QUIRKS;
    }
    prefixes = systemId === null ? LIMITED_QUIRKS_PUBLIC_ID_PREFIXES : LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES;
    if (hasPrefix(publicId, prefixes)) {
      return DOCUMENT_MODE$1.LIMITED_QUIRKS;
    }
  }
  return DOCUMENT_MODE$1.NO_QUIRKS;
};
doctype$1.serializeContent = function(name2, publicId, systemId) {
  let str = "!DOCTYPE ";
  if (name2) {
    str += name2;
  }
  if (publicId) {
    str += " PUBLIC " + enquoteDoctypeId(publicId);
  } else if (systemId) {
    str += " SYSTEM";
  }
  if (systemId !== null) {
    str += " " + enquoteDoctypeId(systemId);
  }
  return str;
};
const doctype = doctype$1;
const {DOCUMENT_MODE} = html;
const nodeTypes = {
  element: 1,
  text: 3,
  cdata: 4,
  comment: 8
};
const nodePropertyShorthands = {
  tagName: "name",
  childNodes: "children",
  parentNode: "parent",
  previousSibling: "prev",
  nextSibling: "next",
  nodeValue: "data"
};
class Node$1 {
  constructor(props) {
    for (const key of Object.keys(props)) {
      this[key] = props[key];
    }
  }
  get firstChild() {
    const children = this.children;
    return children && children[0] || null;
  }
  get lastChild() {
    const children = this.children;
    return children && children[children.length - 1] || null;
  }
  get nodeType() {
    return nodeTypes[this.type] || nodeTypes.element;
  }
}
Object.keys(nodePropertyShorthands).forEach((key) => {
  const shorthand = nodePropertyShorthands[key];
  Object.defineProperty(Node$1.prototype, key, {
    get: function() {
      return this[shorthand] || null;
    },
    set: function(val) {
      this[shorthand] = val;
      return val;
    }
  });
});
lib.createDocument = function() {
  return new Node$1({
    type: "root",
    name: "root",
    parent: null,
    prev: null,
    next: null,
    children: [],
    "x-mode": DOCUMENT_MODE.NO_QUIRKS
  });
};
lib.createDocumentFragment = function() {
  return new Node$1({
    type: "root",
    name: "root",
    parent: null,
    prev: null,
    next: null,
    children: []
  });
};
lib.createElement = function(tagName, namespaceURI, attrs) {
  const attribs = Object.create(null);
  const attribsNamespace = Object.create(null);
  const attribsPrefix = Object.create(null);
  for (let i2 = 0; i2 < attrs.length; i2++) {
    const attrName = attrs[i2].name;
    attribs[attrName] = attrs[i2].value;
    attribsNamespace[attrName] = attrs[i2].namespace;
    attribsPrefix[attrName] = attrs[i2].prefix;
  }
  return new Node$1({
    type: tagName === "script" || tagName === "style" ? tagName : "tag",
    name: tagName,
    namespace: namespaceURI,
    attribs,
    "x-attribsNamespace": attribsNamespace,
    "x-attribsPrefix": attribsPrefix,
    children: [],
    parent: null,
    prev: null,
    next: null
  });
};
lib.createCommentNode = function(data) {
  return new Node$1({
    type: "comment",
    data,
    parent: null,
    prev: null,
    next: null
  });
};
const createTextNode = function(value) {
  return new Node$1({
    type: "text",
    data: value,
    parent: null,
    prev: null,
    next: null
  });
};
const appendChild = lib.appendChild = function(parentNode, newNode) {
  const prev = parentNode.children[parentNode.children.length - 1];
  if (prev) {
    prev.next = newNode;
    newNode.prev = prev;
  }
  parentNode.children.push(newNode);
  newNode.parent = parentNode;
};
const insertBefore = lib.insertBefore = function(parentNode, newNode, referenceNode) {
  const insertionIdx = parentNode.children.indexOf(referenceNode);
  const prev = referenceNode.prev;
  if (prev) {
    prev.next = newNode;
    newNode.prev = prev;
  }
  referenceNode.prev = newNode;
  newNode.next = referenceNode;
  parentNode.children.splice(insertionIdx, 0, newNode);
  newNode.parent = parentNode;
};
lib.setTemplateContent = function(templateElement, contentElement) {
  appendChild(templateElement, contentElement);
};
lib.getTemplateContent = function(templateElement) {
  return templateElement.children[0];
};
lib.setDocumentType = function(document2, name2, publicId, systemId) {
  const data = doctype.serializeContent(name2, publicId, systemId);
  let doctypeNode = null;
  for (let i2 = 0; i2 < document2.children.length; i2++) {
    if (document2.children[i2].type === "directive" && document2.children[i2].name === "!doctype") {
      doctypeNode = document2.children[i2];
      break;
    }
  }
  if (doctypeNode) {
    doctypeNode.data = data;
    doctypeNode["x-name"] = name2;
    doctypeNode["x-publicId"] = publicId;
    doctypeNode["x-systemId"] = systemId;
  } else {
    appendChild(document2, new Node$1({
      type: "directive",
      name: "!doctype",
      data,
      "x-name": name2,
      "x-publicId": publicId,
      "x-systemId": systemId
    }));
  }
};
lib.setDocumentMode = function(document2, mode) {
  document2["x-mode"] = mode;
};
lib.getDocumentMode = function(document2) {
  return document2["x-mode"];
};
lib.detachNode = function(node) {
  if (node.parent) {
    const idx = node.parent.children.indexOf(node);
    const prev = node.prev;
    const next = node.next;
    node.prev = null;
    node.next = null;
    if (prev) {
      prev.next = next;
    }
    if (next) {
      next.prev = prev;
    }
    node.parent.children.splice(idx, 1);
    node.parent = null;
  }
};
lib.insertText = function(parentNode, text) {
  const lastChild = parentNode.children[parentNode.children.length - 1];
  if (lastChild && lastChild.type === "text") {
    lastChild.data += text;
  } else {
    appendChild(parentNode, createTextNode(text));
  }
};
lib.insertTextBefore = function(parentNode, text, referenceNode) {
  const prevNode = parentNode.children[parentNode.children.indexOf(referenceNode) - 1];
  if (prevNode && prevNode.type === "text") {
    prevNode.data += text;
  } else {
    insertBefore(parentNode, createTextNode(text), referenceNode);
  }
};
lib.adoptAttributes = function(recipient, attrs) {
  for (let i2 = 0; i2 < attrs.length; i2++) {
    const attrName = attrs[i2].name;
    if (typeof recipient.attribs[attrName] === "undefined") {
      recipient.attribs[attrName] = attrs[i2].value;
      recipient["x-attribsNamespace"][attrName] = attrs[i2].namespace;
      recipient["x-attribsPrefix"][attrName] = attrs[i2].prefix;
    }
  }
};
lib.getFirstChild = function(node) {
  return node.children[0];
};
lib.getChildNodes = function(node) {
  return node.children;
};
lib.getParentNode = function(node) {
  return node.parent;
};
lib.getAttrList = function(element) {
  const attrList = [];
  for (const name2 in element.attribs) {
    attrList.push({
      name: name2,
      value: element.attribs[name2],
      namespace: element["x-attribsNamespace"][name2],
      prefix: element["x-attribsPrefix"][name2]
    });
  }
  return attrList;
};
lib.getTagName = function(element) {
  return element.name;
};
lib.getNamespaceURI = function(element) {
  return element.namespace;
};
lib.getTextNodeContent = function(textNode) {
  return textNode.data;
};
lib.getCommentNodeContent = function(commentNode) {
  return commentNode.data;
};
lib.getDocumentTypeNodeName = function(doctypeNode) {
  return doctypeNode["x-name"];
};
lib.getDocumentTypeNodePublicId = function(doctypeNode) {
  return doctypeNode["x-publicId"];
};
lib.getDocumentTypeNodeSystemId = function(doctypeNode) {
  return doctypeNode["x-systemId"];
};
lib.isTextNode = function(node) {
  return node.type === "text";
};
lib.isCommentNode = function(node) {
  return node.type === "comment";
};
lib.isDocumentTypeNode = function(node) {
  return node.type === "directive" && node.name === "!doctype";
};
lib.isElementNode = function(node) {
  return !!node.attribs;
};
lib.setNodeSourceCodeLocation = function(node, location) {
  node.sourceCodeLocation = location;
};
lib.getNodeSourceCodeLocation = function(node) {
  return node.sourceCodeLocation;
};
lib.updateNodeSourceCodeLocation = function(node, endLocation) {
  node.sourceCodeLocation = Object.assign(node.sourceCodeLocation, endLocation);
};
var theme = {};
(function(exports) {
  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {"default": mod};
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.parse = exports.stringify = exports.toJson = exports.fromJson = exports.DEFAULT_THEME = exports.plain = void 0;
  var chalk_1 = __importDefault(source$D);
  var plain = function(codePart) {
    return codePart;
  };
  exports.plain = plain;
  exports.DEFAULT_THEME = {
    keyword: chalk_1.default.blue,
    built_in: chalk_1.default.cyan,
    type: chalk_1.default.cyan.dim,
    literal: chalk_1.default.blue,
    number: chalk_1.default.green,
    regexp: chalk_1.default.red,
    string: chalk_1.default.red,
    subst: exports.plain,
    symbol: exports.plain,
    class: chalk_1.default.blue,
    function: chalk_1.default.yellow,
    title: exports.plain,
    params: exports.plain,
    comment: chalk_1.default.green,
    doctag: chalk_1.default.green,
    meta: chalk_1.default.grey,
    "meta-keyword": exports.plain,
    "meta-string": exports.plain,
    section: exports.plain,
    tag: chalk_1.default.grey,
    name: chalk_1.default.blue,
    "builtin-name": exports.plain,
    attr: chalk_1.default.cyan,
    attribute: exports.plain,
    variable: exports.plain,
    bullet: exports.plain,
    code: exports.plain,
    emphasis: chalk_1.default.italic,
    strong: chalk_1.default.bold,
    formula: exports.plain,
    link: chalk_1.default.underline,
    quote: exports.plain,
    "selector-tag": exports.plain,
    "selector-id": exports.plain,
    "selector-class": exports.plain,
    "selector-attr": exports.plain,
    "selector-pseudo": exports.plain,
    "template-tag": exports.plain,
    "template-variable": exports.plain,
    addition: chalk_1.default.green,
    deletion: chalk_1.default.red,
    default: exports.plain
  };
  function fromJson(json2) {
    var theme2 = {};
    for (var _i = 0, _a2 = Object.keys(json2); _i < _a2.length; _i++) {
      var key = _a2[_i];
      var style = json2[key];
      if (Array.isArray(style)) {
        theme2[key] = style.reduce(function(previous, current) {
          return current === "plain" ? exports.plain : previous[current];
        }, chalk_1.default);
      } else {
        theme2[key] = chalk_1.default[style];
      }
    }
    return theme2;
  }
  exports.fromJson = fromJson;
  function toJson2(theme2) {
    var jsonTheme = {};
    for (var _i = 0, _a2 = Object.keys(jsonTheme); _i < _a2.length; _i++) {
      var key = _a2[_i];
      var style = jsonTheme[key];
      jsonTheme[key] = style._styles;
    }
    return jsonTheme;
  }
  exports.toJson = toJson2;
  function stringify2(theme2) {
    return JSON.stringify(toJson2());
  }
  exports.stringify = stringify2;
  function parse5(json2) {
    return fromJson(JSON.parse(json2));
  }
  exports.parse = parse5;
})(theme);
(function(exports) {
  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    Object.defineProperty(o2, k22, {enumerable: true, get: function() {
      return m2[k2];
    }});
  } : function(o2, m2, k2, k22) {
    if (k22 === void 0)
      k22 = k2;
    o2[k22] = m2[k2];
  });
  var __setModuleDefault = commonjsGlobal && commonjsGlobal.__setModuleDefault || (Object.create ? function(o2, v2) {
    Object.defineProperty(o2, "default", {enumerable: true, value: v2});
  } : function(o2, v2) {
    o2["default"] = v2;
  });
  var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function(mod) {
    if (mod && mod.__esModule)
      return mod;
    var result = {};
    if (mod != null) {
      for (var k2 in mod)
        if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
          __createBinding(result, mod, k2);
    }
    __setModuleDefault(result, mod);
    return result;
  };
  var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function(m2, exports2) {
    for (var p2 in m2)
      if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
        __createBinding(exports2, m2, p2);
  };
  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {"default": mod};
  };
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.supportsLanguage = exports.listLanguages = exports.highlight = void 0;
  var hljs2 = __importStar(lib$2);
  var parse5 = __importStar(lib$1);
  var parse5_htmlparser2_tree_adapter_1 = __importDefault(lib);
  var theme_1 = theme;
  function colorizeNode(node, theme2, context) {
    if (theme2 === void 0) {
      theme2 = {};
    }
    switch (node.type) {
      case "text": {
        var text = node.data;
        if (context === void 0) {
          return (theme2.default || theme_1.DEFAULT_THEME.default || theme_1.plain)(text);
        }
        return text;
      }
      case "tag": {
        var hljsClass = /hljs-(\w+)/.exec(node.attribs.class);
        if (hljsClass) {
          var token_1 = hljsClass[1];
          var nodeData = node.childNodes.map(function(node2) {
            return colorizeNode(node2, theme2, token_1);
          }).join("");
          return (theme2[token_1] || theme_1.DEFAULT_THEME[token_1] || theme_1.plain)(nodeData);
        }
        return node.childNodes.map(function(node2) {
          return colorizeNode(node2, theme2);
        }).join("");
      }
    }
    throw new Error("Invalid node type " + node.type);
  }
  function colorize(code3, theme2) {
    if (theme2 === void 0) {
      theme2 = {};
    }
    var fragment = parse5.parseFragment(code3, {
      treeAdapter: parse5_htmlparser2_tree_adapter_1.default
    });
    return fragment.childNodes.map(function(node) {
      return colorizeNode(node, theme2);
    }).join("");
  }
  function highlight2(code3, options) {
    if (options === void 0) {
      options = {};
    }
    var html2;
    if (options.language) {
      html2 = hljs2.highlight(code3, {language: options.language, ignoreIllegals: options.ignoreIllegals}).value;
    } else {
      html2 = hljs2.highlightAuto(code3, options.languageSubset).value;
    }
    return colorize(html2, options.theme);
  }
  exports.highlight = highlight2;
  function listLanguages() {
    return hljs2.listLanguages();
  }
  exports.listLanguages = listLanguages;
  function supportsLanguage(name2) {
    return !!hljs2.getLanguage(name2);
  }
  exports.supportsLanguage = supportsLanguage;
  exports.default = highlight2;
  __exportStar(theme, exports);
})(dist);
function l$1() {
  return uuid_1.v4();
}
let h;
const p$1 = {};
class d$1 extends SInterface {
}
d$1.definition = {method: {type: "String", values: ["get", "post"], default: "get"}, url: {type: "String", required: true}, trigger: {type: "String", values: ["event"], default: "event"}, on: {type: "String"}, cache: {type: "String|Boolean", default: false}};
var y$1 = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : {};
function g(t) {
  if (t.__esModule)
    return t;
  var e2 = Object.defineProperty({}, "__esModule", {value: true});
  return Object.keys(t).forEach(function(r2) {
    var n2 = Object.getOwnPropertyDescriptor(t, r2);
    Object.defineProperty(e2, r2, n2.get ? n2 : {enumerable: true, get: function() {
      return t[r2];
    }});
  }), e2;
}
var m$1, v = {exports: {}}, w = new Proxy({}, {get() {
  throw new Error('Module "crypto" has been externalized for browser compatibility and cannot be accessed in client code.');
}}), _ = g(Object.freeze({__proto__: null, [Symbol.toStringTag]: "Module", default: w}));
v.exports = m$1 = m$1 || function(t, e2) {
  var r2;
  if (typeof window != "undefined" && window.crypto && (r2 = window.crypto), !r2 && typeof window != "undefined" && window.msCrypto && (r2 = window.msCrypto), !r2 && y$1 !== void 0 && y$1.crypto && (r2 = y$1.crypto), !r2 && typeof require == "function")
    try {
      r2 = _;
    } catch (g2) {
    }
  var n2 = function() {
    if (r2) {
      if (typeof r2.getRandomValues == "function")
        try {
          return r2.getRandomValues(new Uint32Array(1))[0];
        } catch (g2) {
        }
      if (typeof r2.randomBytes == "function")
        try {
          return r2.randomBytes(4).readInt32LE();
        } catch (g2) {
        }
    }
    throw new Error("Native crypto module could not be used to get secure random number.");
  }, o2 = Object.create || function() {
    function t2() {
    }
    return function(e3) {
      var r3;
      return t2.prototype = e3, r3 = new t2(), t2.prototype = null, r3;
    };
  }(), i2 = {}, s2 = i2.lib = {}, c2 = s2.Base = {extend: function(t2) {
    var e3 = o2(this);
    return t2 && e3.mixIn(t2), e3.hasOwnProperty("init") && this.init !== e3.init || (e3.init = function() {
      e3.$super.init.apply(this, arguments);
    }), e3.init.prototype = e3, e3.$super = this, e3;
  }, create: function() {
    var t2 = this.extend();
    return t2.init.apply(t2, arguments), t2;
  }, init: function() {
  }, mixIn: function(t2) {
    for (var e3 in t2)
      t2.hasOwnProperty(e3) && (this[e3] = t2[e3]);
    t2.hasOwnProperty("toString") && (this.toString = t2.toString);
  }, clone: function() {
    return this.init.prototype.extend(this);
  }}, a2 = s2.WordArray = c2.extend({init: function(t2, r3) {
    t2 = this.words = t2 || [], this.sigBytes = r3 != e2 ? r3 : 4 * t2.length;
  }, toString: function(t2) {
    return (t2 || f2).stringify(this);
  }, concat: function(t2) {
    var e3 = this.words, r3 = t2.words, n3 = this.sigBytes, o3 = t2.sigBytes;
    if (this.clamp(), n3 % 4)
      for (var i3 = 0; i3 < o3; i3++) {
        var s3 = r3[i3 >>> 2] >>> 24 - i3 % 4 * 8 & 255;
        e3[n3 + i3 >>> 2] |= s3 << 24 - (n3 + i3) % 4 * 8;
      }
    else
      for (i3 = 0; i3 < o3; i3 += 4)
        e3[n3 + i3 >>> 2] = r3[i3 >>> 2];
    return this.sigBytes += o3, this;
  }, clamp: function() {
    var e3 = this.words, r3 = this.sigBytes;
    e3[r3 >>> 2] &= 4294967295 << 32 - r3 % 4 * 8, e3.length = t.ceil(r3 / 4);
  }, clone: function() {
    var t2 = c2.clone.call(this);
    return t2.words = this.words.slice(0), t2;
  }, random: function(t2) {
    for (var e3 = [], r3 = 0; r3 < t2; r3 += 4)
      e3.push(n2());
    return new a2.init(e3, t2);
  }}), u = i2.enc = {}, f2 = u.Hex = {stringify: function(t2) {
    for (var e3 = t2.words, r3 = t2.sigBytes, n3 = [], o3 = 0; o3 < r3; o3++) {
      var i3 = e3[o3 >>> 2] >>> 24 - o3 % 4 * 8 & 255;
      n3.push((i3 >>> 4).toString(16)), n3.push((15 & i3).toString(16));
    }
    return n3.join("");
  }, parse: function(t2) {
    for (var e3 = t2.length, r3 = [], n3 = 0; n3 < e3; n3 += 2)
      r3[n3 >>> 3] |= parseInt(t2.substr(n3, 2), 16) << 24 - n3 % 8 * 4;
    return new a2.init(r3, e3 / 2);
  }}, l2 = u.Latin1 = {stringify: function(t2) {
    for (var e3 = t2.words, r3 = t2.sigBytes, n3 = [], o3 = 0; o3 < r3; o3++) {
      var i3 = e3[o3 >>> 2] >>> 24 - o3 % 4 * 8 & 255;
      n3.push(String.fromCharCode(i3));
    }
    return n3.join("");
  }, parse: function(t2) {
    for (var e3 = t2.length, r3 = [], n3 = 0; n3 < e3; n3++)
      r3[n3 >>> 2] |= (255 & t2.charCodeAt(n3)) << 24 - n3 % 4 * 8;
    return new a2.init(r3, e3);
  }}, h2 = u.Utf8 = {stringify: function(t2) {
    try {
      return decodeURIComponent(escape(l2.stringify(t2)));
    } catch (e3) {
      throw new Error("Malformed UTF-8 data");
    }
  }, parse: function(t2) {
    return l2.parse(unescape(encodeURIComponent(t2)));
  }}, p2 = s2.BufferedBlockAlgorithm = c2.extend({reset: function() {
    this._data = new a2.init(), this._nDataBytes = 0;
  }, _append: function(t2) {
    typeof t2 == "string" && (t2 = h2.parse(t2)), this._data.concat(t2), this._nDataBytes += t2.sigBytes;
  }, _process: function(e3) {
    var r3, n3 = this._data, o3 = n3.words, i3 = n3.sigBytes, s3 = this.blockSize, c3 = i3 / (4 * s3), u2 = (c3 = e3 ? t.ceil(c3) : t.max((0 | c3) - this._minBufferSize, 0)) * s3, f3 = t.min(4 * u2, i3);
    if (u2) {
      for (var l3 = 0; l3 < u2; l3 += s3)
        this._doProcessBlock(o3, l3);
      r3 = o3.splice(0, u2), n3.sigBytes -= f3;
    }
    return new a2.init(r3, f3);
  }, clone: function() {
    var t2 = c2.clone.call(this);
    return t2._data = this._data.clone(), t2;
  }, _minBufferSize: 0});
  s2.Hasher = p2.extend({cfg: c2.extend(), init: function(t2) {
    this.cfg = this.cfg.extend(t2), this.reset();
  }, reset: function() {
    p2.reset.call(this), this._doReset();
  }, update: function(t2) {
    return this._append(t2), this._process(), this;
  }, finalize: function(t2) {
    return t2 && this._append(t2), this._doFinalize();
  }, blockSize: 16, _createHelper: function(t2) {
    return function(e3, r3) {
      return new t2.init(r3).finalize(e3);
    };
  }, _createHmacHelper: function(t2) {
    return function(e3, r3) {
      return new d2.HMAC.init(t2, r3).finalize(e3);
    };
  }});
  var d2 = i2.algo = {};
  return i2;
}(Math);
var j = function(t) {
  return function(e2) {
    var r2 = t, n2 = r2.lib, o2 = n2.WordArray, i2 = n2.Hasher, s2 = r2.algo, c2 = [];
    !function() {
      for (var t2 = 0; t2 < 64; t2++)
        c2[t2] = 4294967296 * e2.abs(e2.sin(t2 + 1)) | 0;
    }();
    var a2 = s2.MD5 = i2.extend({_doReset: function() {
      this._hash = new o2.init([1732584193, 4023233417, 2562383102, 271733878]);
    }, _doProcessBlock: function(t2, e3) {
      for (var r3 = 0; r3 < 16; r3++) {
        var n3 = e3 + r3, o3 = t2[n3];
        t2[n3] = 16711935 & (o3 << 8 | o3 >>> 24) | 4278255360 & (o3 << 24 | o3 >>> 8);
      }
      var i3 = this._hash.words, s3 = t2[e3 + 0], a3 = t2[e3 + 1], p2 = t2[e3 + 2], d2 = t2[e3 + 3], y2 = t2[e3 + 4], g2 = t2[e3 + 5], m2 = t2[e3 + 6], b = t2[e3 + 7], v2 = t2[e3 + 8], w2 = t2[e3 + 9], _2 = t2[e3 + 10], j2 = t2[e3 + 11], S2 = t2[e3 + 12], O2 = t2[e3 + 13], x2 = t2[e3 + 14], q2 = t2[e3 + 15], B2 = i3[0], k2 = i3[1], A = i3[2], M2 = i3[3];
      B2 = u(B2, k2, A, M2, s3, 7, c2[0]), M2 = u(M2, B2, k2, A, a3, 12, c2[1]), A = u(A, M2, B2, k2, p2, 17, c2[2]), k2 = u(k2, A, M2, B2, d2, 22, c2[3]), B2 = u(B2, k2, A, M2, y2, 7, c2[4]), M2 = u(M2, B2, k2, A, g2, 12, c2[5]), A = u(A, M2, B2, k2, m2, 17, c2[6]), k2 = u(k2, A, M2, B2, b, 22, c2[7]), B2 = u(B2, k2, A, M2, v2, 7, c2[8]), M2 = u(M2, B2, k2, A, w2, 12, c2[9]), A = u(A, M2, B2, k2, _2, 17, c2[10]), k2 = u(k2, A, M2, B2, j2, 22, c2[11]), B2 = u(B2, k2, A, M2, S2, 7, c2[12]), M2 = u(M2, B2, k2, A, O2, 12, c2[13]), A = u(A, M2, B2, k2, x2, 17, c2[14]), B2 = f2(B2, k2 = u(k2, A, M2, B2, q2, 22, c2[15]), A, M2, a3, 5, c2[16]), M2 = f2(M2, B2, k2, A, m2, 9, c2[17]), A = f2(A, M2, B2, k2, j2, 14, c2[18]), k2 = f2(k2, A, M2, B2, s3, 20, c2[19]), B2 = f2(B2, k2, A, M2, g2, 5, c2[20]), M2 = f2(M2, B2, k2, A, _2, 9, c2[21]), A = f2(A, M2, B2, k2, q2, 14, c2[22]), k2 = f2(k2, A, M2, B2, y2, 20, c2[23]), B2 = f2(B2, k2, A, M2, w2, 5, c2[24]), M2 = f2(M2, B2, k2, A, x2, 9, c2[25]), A = f2(A, M2, B2, k2, d2, 14, c2[26]), k2 = f2(k2, A, M2, B2, v2, 20, c2[27]), B2 = f2(B2, k2, A, M2, O2, 5, c2[28]), M2 = f2(M2, B2, k2, A, p2, 9, c2[29]), A = f2(A, M2, B2, k2, b, 14, c2[30]), B2 = l2(B2, k2 = f2(k2, A, M2, B2, S2, 20, c2[31]), A, M2, g2, 4, c2[32]), M2 = l2(M2, B2, k2, A, v2, 11, c2[33]), A = l2(A, M2, B2, k2, j2, 16, c2[34]), k2 = l2(k2, A, M2, B2, x2, 23, c2[35]), B2 = l2(B2, k2, A, M2, a3, 4, c2[36]), M2 = l2(M2, B2, k2, A, y2, 11, c2[37]), A = l2(A, M2, B2, k2, b, 16, c2[38]), k2 = l2(k2, A, M2, B2, _2, 23, c2[39]), B2 = l2(B2, k2, A, M2, O2, 4, c2[40]), M2 = l2(M2, B2, k2, A, s3, 11, c2[41]), A = l2(A, M2, B2, k2, d2, 16, c2[42]), k2 = l2(k2, A, M2, B2, m2, 23, c2[43]), B2 = l2(B2, k2, A, M2, w2, 4, c2[44]), M2 = l2(M2, B2, k2, A, S2, 11, c2[45]), A = l2(A, M2, B2, k2, q2, 16, c2[46]), B2 = h2(B2, k2 = l2(k2, A, M2, B2, p2, 23, c2[47]), A, M2, s3, 6, c2[48]), M2 = h2(M2, B2, k2, A, b, 10, c2[49]), A = h2(A, M2, B2, k2, x2, 15, c2[50]), k2 = h2(k2, A, M2, B2, g2, 21, c2[51]), B2 = h2(B2, k2, A, M2, S2, 6, c2[52]), M2 = h2(M2, B2, k2, A, d2, 10, c2[53]), A = h2(A, M2, B2, k2, _2, 15, c2[54]), k2 = h2(k2, A, M2, B2, a3, 21, c2[55]), B2 = h2(B2, k2, A, M2, v2, 6, c2[56]), M2 = h2(M2, B2, k2, A, q2, 10, c2[57]), A = h2(A, M2, B2, k2, m2, 15, c2[58]), k2 = h2(k2, A, M2, B2, O2, 21, c2[59]), B2 = h2(B2, k2, A, M2, y2, 6, c2[60]), M2 = h2(M2, B2, k2, A, j2, 10, c2[61]), A = h2(A, M2, B2, k2, p2, 15, c2[62]), k2 = h2(k2, A, M2, B2, w2, 21, c2[63]), i3[0] = i3[0] + B2 | 0, i3[1] = i3[1] + k2 | 0, i3[2] = i3[2] + A | 0, i3[3] = i3[3] + M2 | 0;
    }, _doFinalize: function() {
      var t2 = this._data, r3 = t2.words, n3 = 8 * this._nDataBytes, o3 = 8 * t2.sigBytes;
      r3[o3 >>> 5] |= 128 << 24 - o3 % 32;
      var i3 = e2.floor(n3 / 4294967296), s3 = n3;
      r3[15 + (o3 + 64 >>> 9 << 4)] = 16711935 & (i3 << 8 | i3 >>> 24) | 4278255360 & (i3 << 24 | i3 >>> 8), r3[14 + (o3 + 64 >>> 9 << 4)] = 16711935 & (s3 << 8 | s3 >>> 24) | 4278255360 & (s3 << 24 | s3 >>> 8), t2.sigBytes = 4 * (r3.length + 1), this._process();
      for (var c3 = this._hash, a3 = c3.words, u2 = 0; u2 < 4; u2++) {
        var f3 = a3[u2];
        a3[u2] = 16711935 & (f3 << 8 | f3 >>> 24) | 4278255360 & (f3 << 24 | f3 >>> 8);
      }
      return c3;
    }, clone: function() {
      var t2 = i2.clone.call(this);
      return t2._hash = this._hash.clone(), t2;
    }});
    function u(t2, e3, r3, n3, o3, i3, s3) {
      var c3 = t2 + (e3 & r3 | ~e3 & n3) + o3 + s3;
      return (c3 << i3 | c3 >>> 32 - i3) + e3;
    }
    function f2(t2, e3, r3, n3, o3, i3, s3) {
      var c3 = t2 + (e3 & n3 | r3 & ~n3) + o3 + s3;
      return (c3 << i3 | c3 >>> 32 - i3) + e3;
    }
    function l2(t2, e3, r3, n3, o3, i3, s3) {
      var c3 = t2 + (e3 ^ r3 ^ n3) + o3 + s3;
      return (c3 << i3 | c3 >>> 32 - i3) + e3;
    }
    function h2(t2, e3, r3, n3, o3, i3, s3) {
      var c3 = t2 + (r3 ^ (e3 | ~n3)) + o3 + s3;
      return (c3 << i3 | c3 >>> 32 - i3) + e3;
    }
    r2.MD5 = i2._createHelper(a2), r2.HmacMD5 = i2._createHmacHelper(a2);
  }(Math), t.MD5;
}(v.exports);
function S(t) {
  return !!t && (typeof t == "object" && ((!t.constructor || t.constructor.name === "Object") && (Object.prototype.toString.call(t) === "[object Object]" && t === Object(t))));
}
function O(t) {
  const e2 = t.concat();
  for (let r2 = 0; r2 < e2.length; ++r2)
    for (let t2 = r2 + 1; t2 < e2.length; ++t2)
      e2[r2] === e2[t2] && e2.splice(t2--, 1);
  return e2;
}
function x(...t) {
  const e2 = {array: false, object: true};
  function r2(t2, n3) {
    const o3 = {};
    if (!t2 && n3)
      return n3;
    if (!n3 && t2)
      return t2;
    if (!t2 && !n3)
      return {};
    copyTo(t2).override(o3);
    for (const i2 of Object.keys(n3))
      if (e2.array === true && Array.isArray(t2[i2]) && Array.isArray(n3[i2])) {
        const e3 = O([...t2[i2], ...n3[i2]]);
        o3[i2] = e3;
      } else
        e2.object === true && S(t2[i2]) && S(n3[i2]) ? o3[i2] = r2(t2[i2], n3[i2]) : copyTo(n3).pick(i2).toCover(o3);
    return o3;
  }
  const n2 = t[t.length - 1] || {};
  (n2.array && typeof n2.array == "boolean" || n2.object && typeof n2.object == "boolean") && (n2.array !== void 0 && (e2.array = n2.array), n2.object !== void 0 && (e2.object = n2.object), t.pop());
  let o2 = {};
  for (let i2 = 0; i2 < t.length; i2++) {
    o2 = r2(o2, t[i2] || {});
  }
  return o2;
}
function q(t, e2, r2 = {}, n2 = []) {
  r2 = x({classInstances: false, array: true, privateProps: false, cloneFirst: true}, r2);
  const o2 = Array.isArray(t), i2 = o2 ? [] : r2.cloneFirst ? Object.assign({}, t) : t;
  return Object.keys(t).forEach((s2) => {
    if (!r2.privateProps && s2.match(/^_/))
      return;
    if (S(t[s2]) || (c2 = t[s2]) && typeof c2 == "object" && (!c2.constructor || c2.constructor.name !== "Object") && Object.prototype.toString.call(c2) !== "[object Object]" && c2.constructor !== Object && r2.classInstances || Array.isArray(t[s2]) && r2.array) {
      const c3 = q(t[s2], e2, r2, [...n2, s2]);
      return void (o2 ? i2.push(c3) : i2[s2] = c3);
    }
    var c2;
    const a2 = e2({object: t, prop: s2, value: t[s2], path: [...n2, s2].join(".")});
    a2 !== -1 ? o2 ? i2.push(a2) : i2[s2] = a2 : delete t[s2];
  }), i2;
}
function B(t) {
  const e2 = {};
  for (const [r2, n2] of t)
    e2[r2] = n2;
  return e2;
}
function k$1(t, e2 = {}) {
  if (e2 = x({beautify: true, highlight: true, verbose: true, theme: {number: source$D.yellow, default: source$D.white, keyword: source$D.blue, regexp: source$D.red, string: source$D.whiteBright, class: source$D.yellow, function: source$D.yellow, comment: source$D.gray, variable: source$D.red, attr: source$D.green}}, e2), typeof t == "string")
    return t;
  if (t === null)
    return null;
  if (t === void 0)
    return;
  if (t instanceof Error) {
    const r3 = t.toString(), n2 = t.stack, o2 = t.message;
    return e2.verbose ? [`<red>${t.constructor.name || "Error"}</red>`, "", o2, "", n2].join("\n") : r3;
  }
  if (function(t2) {
    return t2 instanceof Map;
  }(t) && (t = B(t)), function(t2) {
    return t2 && typeof t2 == "object" && t2.constructor === Object;
  }(t) || function(t2) {
    return t2 && typeof t2 == "object" && t2.constructor === Array;
  }(t) || function(t2) {
    try {
      const e3 = JSON.parse(t2);
      return !!Object.keys(e3).length;
    } catch (e3) {
      return false;
    }
    return true;
  }(t)) {
    try {
      t = decycle_1(t);
    } catch (n2) {
    }
    t = q(t, ({value: t2}) => t2 instanceof Map ? B(t2) : t2);
    let r3 = JSON.stringify(t, null, e2.beautify ? 4 : 0);
    return r3 = r3.replace(/"([^"]+)":/g, "$1:").replace(/\uFFFF/g, '\\"'), e2.highlight && (r3 = dist.highlight(r3, {language: "js", theme: e2.theme})), r3;
  }
  if (function(t2) {
    return typeof t2 == "boolean";
  }(t))
    return t ? "true" : "false";
  if (function(t2) {
    return t2 && {}.toString.call(t2) === "[object Function]";
  }(t))
    return "" + t;
  let r2 = "";
  try {
    t = decycle_1(t), r2 = JSON.stringify(t, null, e2.beautify ? 4 : 0);
  } catch (n2) {
    try {
      r2 = t.toString();
    } catch (o2) {
      r2 = t;
    }
  }
  return r2;
}
var M = function(t) {
  typeof t != "string" && (t = k$1(t));
  const e2 = j(t).toString();
  return e2;
};
const E = {css: 's-request,[is="s-request"]{ display: none; }', exports: {_inlineProxyObj: void 0, async onBeforeMount() {
  this.component = new SComponentUtils(this.root, this.props, {interface: d$1});
  const t = this.root.querySelector("script");
  if (t) {
    const e2 = l$1();
    let r2 = t.innerText.trim();
    r2 = r2.replace(/^export default /, `window['s-request-script-${e2}'] = `);
    const n2 = document.createElement("script");
    n2.text = r2, t.parentNode.insertBefore(n2, t), t.remove(), this._inlineProxyObj = window[`s-request-script-${e2}`];
  }
  this.component.props.cache && (this._cache = new SCache("s-request")), this.root.request = this.request.bind(this), this.root.getData = this.getData.bind(this);
}, async getData(t) {
  return this.request(t);
}, async request(t) {
  var e2, r2, o2;
  let i2 = {type: (e2 = this.component.props.type) != null ? e2 : "get", url: this.component.props.url, data: t, headers: {"Cache-Control": "no-cache", Pragma: "no-cache", Expires: "0"}};
  ((r2 = this._inlineProxyObj) == null ? void 0 : r2.request) && (i2 = this._inlineProxyObj.request(i2));
  const s2 = M(i2), c2 = new SRequest(i2);
  let a2 = await c2.send();
  for (let n2 = 0; n2 < 2; n2++)
    try {
      this.component.props.cache !== false && await this._cache.set(s2, a2.data, {ttl: typeof this.component.props.cache == "string" ? this.component.props.cache : -1});
      break;
    } catch (u) {
      this._cache.clear();
    }
  return ((o2 = this._inlineProxyObj) == null ? void 0 : o2.response) && (a2 = this._inlineProxyObj.response(a2)), a2.data && a2.status && a2.headers && (a2 = a2.data), a2;
}, onMounted() {
}}, template: null, name: "s-request"};
register("s-request", E), function(t, e2 = null, n2 = {}) {
  const o2 = `${t} - ${l$1()}`;
  n2 = Object.assign({}, {rootNode: document, once: true}, n2), p$1[t] ? p$1[t].push({id: o2, selector: t, cb: e2, settings: n2}) : p$1[t] = [{id: o2, selector: t, cb: e2, settings: n2}], new SPromise(({resolve: e3, reject: r2, emit: o3}) => {
    function i2(t2, e4) {
      const r3 = p$1[e4];
      r3 && r3.forEach((e5) => {
        if (e5.settings.once) {
          if (t2._querySelectorLive || (t2._querySelectorLive = {}), t2._querySelectorLive[e5.id])
            return;
          t2._querySelectorLive[e5.id] = true;
        }
        o3("node", t2), e5.cb && e5.cb(t2, () => {
          delete p$1[e5.selector];
        });
      });
    }
    h || (h = new MutationObserver((t2) => {
      t2.forEach((t3) => {
        t3.addedNodes && [].forEach.call(t3.addedNodes, (t4) => {
          const e4 = Object.keys(p$1);
          e4.forEach((e5) => {
            (function(t5, e6) {
              if (t5.nodeName == "#comment" || t5.nodeName == "#text")
                return false;
              const r3 = Element.prototype;
              return (r3.matches || r3.webkitMatchesSelector || r3.mozMatchesSelector || r3.msMatchesSelector || function(t6) {
                return [].indexOf.call(document.querySelectorAll(t6), this) !== -1;
              }).call(t5, e6);
            })(t4, e5) && i2(t4, e5);
          }), t4.querySelectorAll && e4.forEach((e5) => {
            const r3 = t4.querySelectorAll(e5);
            [].forEach.call(r3, (t5) => {
              i2(t5, e5);
            });
          });
        });
      });
    }), h.observe(n2.rootNode, {childList: true, subtree: true})), [].forEach.call(n2.rootNode.querySelectorAll(t), (e4) => {
      i2(e4, t);
    });
  });
}("s-request", (e2) => {
  const r2 = e2.id || "s-request-" + l$1();
  e2.setAttribute("id", r2), mount("#" + r2);
}), E.mount = () => {
  mount("s-request");
}, window.env || (window.env = {SUGAR: {}}), window.env.SUGAR = JSON.parse('{"ENVIRONMENT":"development"}');
var prism = {exports: {}};
(function(module) {
  var _self = typeof window !== "undefined" ? window : typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope ? self : {};
  /**
   * Prism: Lightweight, robust, elegant syntax highlighting
   *
   * @license MIT <https://opensource.org/licenses/MIT>
   * @author Lea Verou <https://lea.verou.me>
   * @namespace
   * @public
   */
  var Prism2 = function(_self2) {
    var lang = /\blang(?:uage)?-([\w-]+)\b/i;
    var uniqueId = 0;
    var _2 = {
      manual: _self2.Prism && _self2.Prism.manual,
      disableWorkerMessageHandler: _self2.Prism && _self2.Prism.disableWorkerMessageHandler,
      util: {
        encode: function encode2(tokens) {
          if (tokens instanceof Token) {
            return new Token(tokens.type, encode2(tokens.content), tokens.alias);
          } else if (Array.isArray(tokens)) {
            return tokens.map(encode2);
          } else {
            return tokens.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/\u00a0/g, " ");
          }
        },
        type: function(o2) {
          return Object.prototype.toString.call(o2).slice(8, -1);
        },
        objId: function(obj) {
          if (!obj["__id"]) {
            Object.defineProperty(obj, "__id", {value: ++uniqueId});
          }
          return obj["__id"];
        },
        clone: function deepClone(o2, visited) {
          visited = visited || {};
          var clone2, id2;
          switch (_2.util.type(o2)) {
            case "Object":
              id2 = _2.util.objId(o2);
              if (visited[id2]) {
                return visited[id2];
              }
              clone2 = {};
              visited[id2] = clone2;
              for (var key in o2) {
                if (o2.hasOwnProperty(key)) {
                  clone2[key] = deepClone(o2[key], visited);
                }
              }
              return clone2;
            case "Array":
              id2 = _2.util.objId(o2);
              if (visited[id2]) {
                return visited[id2];
              }
              clone2 = [];
              visited[id2] = clone2;
              o2.forEach(function(v2, i2) {
                clone2[i2] = deepClone(v2, visited);
              });
              return clone2;
            default:
              return o2;
          }
        },
        getLanguage: function(element) {
          while (element && !lang.test(element.className)) {
            element = element.parentElement;
          }
          if (element) {
            return (element.className.match(lang) || [, "none"])[1].toLowerCase();
          }
          return "none";
        },
        currentScript: function() {
          if (typeof document === "undefined") {
            return null;
          }
          if ("currentScript" in document && 1 < 2) {
            return document.currentScript;
          }
          try {
            throw new Error();
          } catch (err) {
            var src = (/at [^(\r\n]*\((.*):.+:.+\)$/i.exec(err.stack) || [])[1];
            if (src) {
              var scripts = document.getElementsByTagName("script");
              for (var i2 in scripts) {
                if (scripts[i2].src == src) {
                  return scripts[i2];
                }
              }
            }
            return null;
          }
        },
        isActive: function(element, className, defaultActivation) {
          var no = "no-" + className;
          while (element) {
            var classList = element.classList;
            if (classList.contains(className)) {
              return true;
            }
            if (classList.contains(no)) {
              return false;
            }
            element = element.parentElement;
          }
          return !!defaultActivation;
        }
      },
      languages: {
        extend: function(id2, redef) {
          var lang2 = _2.util.clone(_2.languages[id2]);
          for (var key in redef) {
            lang2[key] = redef[key];
          }
          return lang2;
        },
        insertBefore: function(inside, before, insert, root) {
          root = root || _2.languages;
          var grammar = root[inside];
          var ret = {};
          for (var token in grammar) {
            if (grammar.hasOwnProperty(token)) {
              if (token == before) {
                for (var newToken in insert) {
                  if (insert.hasOwnProperty(newToken)) {
                    ret[newToken] = insert[newToken];
                  }
                }
              }
              if (!insert.hasOwnProperty(token)) {
                ret[token] = grammar[token];
              }
            }
          }
          var old = root[inside];
          root[inside] = ret;
          _2.languages.DFS(_2.languages, function(key, value) {
            if (value === old && key != inside) {
              this[key] = ret;
            }
          });
          return ret;
        },
        DFS: function DFS(o2, callback, type, visited) {
          visited = visited || {};
          var objId = _2.util.objId;
          for (var i2 in o2) {
            if (o2.hasOwnProperty(i2)) {
              callback.call(o2, i2, o2[i2], type || i2);
              var property = o2[i2], propertyType = _2.util.type(property);
              if (propertyType === "Object" && !visited[objId(property)]) {
                visited[objId(property)] = true;
                DFS(property, callback, null, visited);
              } else if (propertyType === "Array" && !visited[objId(property)]) {
                visited[objId(property)] = true;
                DFS(property, callback, i2, visited);
              }
            }
          }
        }
      },
      plugins: {},
      highlightAll: function(async, callback) {
        _2.highlightAllUnder(document, async, callback);
      },
      highlightAllUnder: function(container, async, callback) {
        var env = {
          callback,
          container,
          selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'
        };
        _2.hooks.run("before-highlightall", env);
        env.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));
        _2.hooks.run("before-all-elements-highlight", env);
        for (var i2 = 0, element; element = env.elements[i2++]; ) {
          _2.highlightElement(element, async === true, env.callback);
        }
      },
      highlightElement: function(element, async, callback) {
        var language = _2.util.getLanguage(element);
        var grammar = _2.languages[language];
        element.className = element.className.replace(lang, "").replace(/\s+/g, " ") + " language-" + language;
        var parent = element.parentElement;
        if (parent && parent.nodeName.toLowerCase() === "pre") {
          parent.className = parent.className.replace(lang, "").replace(/\s+/g, " ") + " language-" + language;
        }
        var code3 = element.textContent;
        var env = {
          element,
          language,
          grammar,
          code: code3
        };
        function insertHighlightedCode(highlightedCode) {
          env.highlightedCode = highlightedCode;
          _2.hooks.run("before-insert", env);
          env.element.innerHTML = env.highlightedCode;
          _2.hooks.run("after-highlight", env);
          _2.hooks.run("complete", env);
          callback && callback.call(env.element);
        }
        _2.hooks.run("before-sanity-check", env);
        if (!env.code) {
          _2.hooks.run("complete", env);
          callback && callback.call(env.element);
          return;
        }
        _2.hooks.run("before-highlight", env);
        if (!env.grammar) {
          insertHighlightedCode(_2.util.encode(env.code));
          return;
        }
        if (async && _self2.Worker) {
          var worker = new Worker(_2.filename);
          worker.onmessage = function(evt) {
            insertHighlightedCode(evt.data);
          };
          worker.postMessage(JSON.stringify({
            language: env.language,
            code: env.code,
            immediateClose: true
          }));
        } else {
          insertHighlightedCode(_2.highlight(env.code, env.grammar, env.language));
        }
      },
      highlight: function(text, grammar, language) {
        var env = {
          code: text,
          grammar,
          language
        };
        _2.hooks.run("before-tokenize", env);
        env.tokens = _2.tokenize(env.code, env.grammar);
        _2.hooks.run("after-tokenize", env);
        return Token.stringify(_2.util.encode(env.tokens), env.language);
      },
      tokenize: function(text, grammar) {
        var rest = grammar.rest;
        if (rest) {
          for (var token in rest) {
            grammar[token] = rest[token];
          }
          delete grammar.rest;
        }
        var tokenList = new LinkedList();
        addAfter(tokenList, tokenList.head, text);
        matchGrammar(text, tokenList, grammar, tokenList.head, 0);
        return toArray(tokenList);
      },
      hooks: {
        all: {},
        add: function(name2, callback) {
          var hooks = _2.hooks.all;
          hooks[name2] = hooks[name2] || [];
          hooks[name2].push(callback);
        },
        run: function(name2, env) {
          var callbacks = _2.hooks.all[name2];
          if (!callbacks || !callbacks.length) {
            return;
          }
          for (var i2 = 0, callback; callback = callbacks[i2++]; ) {
            callback(env);
          }
        }
      },
      Token
    };
    _self2.Prism = _2;
    function Token(type, content, alias, matchedStr) {
      this.type = type;
      this.content = content;
      this.alias = alias;
      this.length = (matchedStr || "").length | 0;
    }
    Token.stringify = function stringify2(o2, language) {
      if (typeof o2 == "string") {
        return o2;
      }
      if (Array.isArray(o2)) {
        var s2 = "";
        o2.forEach(function(e2) {
          s2 += stringify2(e2, language);
        });
        return s2;
      }
      var env = {
        type: o2.type,
        content: stringify2(o2.content, language),
        tag: "span",
        classes: ["token", o2.type],
        attributes: {},
        language
      };
      var aliases = o2.alias;
      if (aliases) {
        if (Array.isArray(aliases)) {
          Array.prototype.push.apply(env.classes, aliases);
        } else {
          env.classes.push(aliases);
        }
      }
      _2.hooks.run("wrap", env);
      var attributes = "";
      for (var name2 in env.attributes) {
        attributes += " " + name2 + '="' + (env.attributes[name2] || "").replace(/"/g, "&quot;") + '"';
      }
      return "<" + env.tag + ' class="' + env.classes.join(" ") + '"' + attributes + ">" + env.content + "</" + env.tag + ">";
    };
    function matchPattern(pattern, pos, text, lookbehind) {
      pattern.lastIndex = pos;
      var match2 = pattern.exec(text);
      if (match2 && lookbehind && match2[1]) {
        var lookbehindLength = match2[1].length;
        match2.index += lookbehindLength;
        match2[0] = match2[0].slice(lookbehindLength);
      }
      return match2;
    }
    function matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {
      for (var token in grammar) {
        if (!grammar.hasOwnProperty(token) || !grammar[token]) {
          continue;
        }
        var patterns = grammar[token];
        patterns = Array.isArray(patterns) ? patterns : [patterns];
        for (var j2 = 0; j2 < patterns.length; ++j2) {
          if (rematch && rematch.cause == token + "," + j2) {
            return;
          }
          var patternObj = patterns[j2], inside = patternObj.inside, lookbehind = !!patternObj.lookbehind, greedy = !!patternObj.greedy, alias = patternObj.alias;
          if (greedy && !patternObj.pattern.global) {
            var flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];
            patternObj.pattern = RegExp(patternObj.pattern.source, flags + "g");
          }
          var pattern = patternObj.pattern || patternObj;
          for (var currentNode = startNode.next, pos = startPos; currentNode !== tokenList.tail; pos += currentNode.value.length, currentNode = currentNode.next) {
            if (rematch && pos >= rematch.reach) {
              break;
            }
            var str = currentNode.value;
            if (tokenList.length > text.length) {
              return;
            }
            if (str instanceof Token) {
              continue;
            }
            var removeCount = 1;
            var match2;
            if (greedy) {
              match2 = matchPattern(pattern, pos, text, lookbehind);
              if (!match2) {
                break;
              }
              var from = match2.index;
              var to = match2.index + match2[0].length;
              var p2 = pos;
              p2 += currentNode.value.length;
              while (from >= p2) {
                currentNode = currentNode.next;
                p2 += currentNode.value.length;
              }
              p2 -= currentNode.value.length;
              pos = p2;
              if (currentNode.value instanceof Token) {
                continue;
              }
              for (var k2 = currentNode; k2 !== tokenList.tail && (p2 < to || typeof k2.value === "string"); k2 = k2.next) {
                removeCount++;
                p2 += k2.value.length;
              }
              removeCount--;
              str = text.slice(pos, p2);
              match2.index -= pos;
            } else {
              match2 = matchPattern(pattern, 0, str, lookbehind);
              if (!match2) {
                continue;
              }
            }
            var from = match2.index, matchStr = match2[0], before = str.slice(0, from), after = str.slice(from + matchStr.length);
            var reach = pos + str.length;
            if (rematch && reach > rematch.reach) {
              rematch.reach = reach;
            }
            var removeFrom = currentNode.prev;
            if (before) {
              removeFrom = addAfter(tokenList, removeFrom, before);
              pos += before.length;
            }
            removeRange(tokenList, removeFrom, removeCount);
            var wrapped = new Token(token, inside ? _2.tokenize(matchStr, inside) : matchStr, alias, matchStr);
            currentNode = addAfter(tokenList, removeFrom, wrapped);
            if (after) {
              addAfter(tokenList, currentNode, after);
            }
            if (removeCount > 1) {
              matchGrammar(text, tokenList, grammar, currentNode.prev, pos, {
                cause: token + "," + j2,
                reach
              });
            }
          }
        }
      }
    }
    function LinkedList() {
      var head = {value: null, prev: null, next: null};
      var tail = {value: null, prev: head, next: null};
      head.next = tail;
      this.head = head;
      this.tail = tail;
      this.length = 0;
    }
    function addAfter(list, node, value) {
      var next = node.next;
      var newNode = {value, prev: node, next};
      node.next = newNode;
      next.prev = newNode;
      list.length++;
      return newNode;
    }
    function removeRange(list, node, count) {
      var next = node.next;
      for (var i2 = 0; i2 < count && next !== list.tail; i2++) {
        next = next.next;
      }
      node.next = next;
      next.prev = node;
      list.length -= i2;
    }
    function toArray(list) {
      var array = [];
      var node = list.head.next;
      while (node !== list.tail) {
        array.push(node.value);
        node = node.next;
      }
      return array;
    }
    if (!_self2.document) {
      if (!_self2.addEventListener) {
        return _2;
      }
      if (!_2.disableWorkerMessageHandler) {
        _self2.addEventListener("message", function(evt) {
          var message = JSON.parse(evt.data), lang2 = message.language, code3 = message.code, immediateClose = message.immediateClose;
          _self2.postMessage(_2.highlight(code3, _2.languages[lang2], lang2));
          if (immediateClose) {
            _self2.close();
          }
        }, false);
      }
      return _2;
    }
    var script = _2.util.currentScript();
    if (script) {
      _2.filename = script.src;
      if (script.hasAttribute("data-manual")) {
        _2.manual = true;
      }
    }
    function highlightAutomaticallyCallback() {
      if (!_2.manual) {
        _2.highlightAll();
      }
    }
    if (!_2.manual) {
      var readyState = document.readyState;
      if (readyState === "loading" || readyState === "interactive" && script && script.defer) {
        document.addEventListener("DOMContentLoaded", highlightAutomaticallyCallback);
      } else {
        if (window.requestAnimationFrame) {
          window.requestAnimationFrame(highlightAutomaticallyCallback);
        } else {
          window.setTimeout(highlightAutomaticallyCallback, 16);
        }
      }
    }
    return _2;
  }(_self);
  if (module.exports) {
    module.exports = Prism2;
  }
  if (typeof commonjsGlobal !== "undefined") {
    commonjsGlobal.Prism = Prism2;
  }
  Prism2.languages.markup = {
    "comment": /<!--[\s\S]*?-->/,
    "prolog": /<\?[\s\S]+?\?>/,
    "doctype": {
      pattern: /<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,
      greedy: true,
      inside: {
        "internal-subset": {
          pattern: /(\[)[\s\S]+(?=\]>$)/,
          lookbehind: true,
          greedy: true,
          inside: null
        },
        "string": {
          pattern: /"[^"]*"|'[^']*'/,
          greedy: true
        },
        "punctuation": /^<!|>$|[[\]]/,
        "doctype-tag": /^DOCTYPE/,
        "name": /[^\s<>'"]+/
      }
    },
    "cdata": /<!\[CDATA\[[\s\S]*?]]>/i,
    "tag": {
      pattern: /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,
      greedy: true,
      inside: {
        "tag": {
          pattern: /^<\/?[^\s>\/]+/,
          inside: {
            "punctuation": /^<\/?/,
            "namespace": /^[^\s>\/:]+:/
          }
        },
        "attr-value": {
          pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,
          inside: {
            "punctuation": [
              {
                pattern: /^=/,
                alias: "attr-equals"
              },
              /"|'/
            ]
          }
        },
        "punctuation": /\/?>/,
        "attr-name": {
          pattern: /[^\s>\/]+/,
          inside: {
            "namespace": /^[^\s>\/:]+:/
          }
        }
      }
    },
    "entity": [
      {
        pattern: /&[\da-z]{1,8};/i,
        alias: "named-entity"
      },
      /&#x?[\da-f]{1,8};/i
    ]
  };
  Prism2.languages.markup["tag"].inside["attr-value"].inside["entity"] = Prism2.languages.markup["entity"];
  Prism2.languages.markup["doctype"].inside["internal-subset"].inside = Prism2.languages.markup;
  Prism2.hooks.add("wrap", function(env) {
    if (env.type === "entity") {
      env.attributes["title"] = env.content.replace(/&amp;/, "&");
    }
  });
  Object.defineProperty(Prism2.languages.markup.tag, "addInlined", {
    value: function addInlined(tagName, lang) {
      var includedCdataInside = {};
      includedCdataInside["language-" + lang] = {
        pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,
        lookbehind: true,
        inside: Prism2.languages[lang]
      };
      includedCdataInside["cdata"] = /^<!\[CDATA\[|\]\]>$/i;
      var inside = {
        "included-cdata": {
          pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
          inside: includedCdataInside
        }
      };
      inside["language-" + lang] = {
        pattern: /[\s\S]+/,
        inside: Prism2.languages[lang]
      };
      var def = {};
      def[tagName] = {
        pattern: RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g, function() {
          return tagName;
        }), "i"),
        lookbehind: true,
        greedy: true,
        inside
      };
      Prism2.languages.insertBefore("markup", "cdata", def);
    }
  });
  Prism2.languages.html = Prism2.languages.markup;
  Prism2.languages.mathml = Prism2.languages.markup;
  Prism2.languages.svg = Prism2.languages.markup;
  Prism2.languages.xml = Prism2.languages.extend("markup", {});
  Prism2.languages.ssml = Prism2.languages.xml;
  Prism2.languages.atom = Prism2.languages.xml;
  Prism2.languages.rss = Prism2.languages.xml;
  (function(Prism3) {
    var string = /("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/;
    Prism3.languages.css = {
      "comment": /\/\*[\s\S]*?\*\//,
      "atrule": {
        pattern: /@[\w-](?:[^;{\s]|\s+(?![\s{]))*(?:;|(?=\s*\{))/,
        inside: {
          "rule": /^@[\w-]+/,
          "selector-function-argument": {
            pattern: /(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,
            lookbehind: true,
            alias: "selector"
          },
          "keyword": {
            pattern: /(^|[^\w-])(?:and|not|only|or)(?![\w-])/,
            lookbehind: true
          }
        }
      },
      "url": {
        pattern: RegExp("\\burl\\((?:" + string.source + "|" + /(?:[^\\\r\n()"']|\\[\s\S])*/.source + ")\\)", "i"),
        greedy: true,
        inside: {
          "function": /^url/i,
          "punctuation": /^\(|\)$/,
          "string": {
            pattern: RegExp("^" + string.source + "$"),
            alias: "url"
          }
        }
      },
      "selector": RegExp(`[^{}\\s](?:[^{};"'\\s]|\\s+(?![\\s{])|` + string.source + ")*(?=\\s*\\{)"),
      "string": {
        pattern: string,
        greedy: true
      },
      "property": /(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,
      "important": /!important\b/i,
      "function": /[-a-z0-9]+(?=\()/i,
      "punctuation": /[(){};:,]/
    };
    Prism3.languages.css["atrule"].inside.rest = Prism3.languages.css;
    var markup = Prism3.languages.markup;
    if (markup) {
      markup.tag.addInlined("style", "css");
      Prism3.languages.insertBefore("inside", "attr-value", {
        "style-attr": {
          pattern: /(^|["'\s])style\s*=\s*(?:"[^"]*"|'[^']*')/i,
          lookbehind: true,
          inside: {
            "attr-value": {
              pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,
              inside: {
                "style": {
                  pattern: /(["'])[\s\S]+(?=["']$)/,
                  lookbehind: true,
                  alias: "language-css",
                  inside: Prism3.languages.css
                },
                "punctuation": [
                  {
                    pattern: /^=/,
                    alias: "attr-equals"
                  },
                  /"|'/
                ]
              }
            },
            "attr-name": /^style/i
          }
        }
      }, markup.tag);
    }
  })(Prism2);
  Prism2.languages.clike = {
    "comment": [
      {
        pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
        lookbehind: true,
        greedy: true
      },
      {
        pattern: /(^|[^\\:])\/\/.*/,
        lookbehind: true,
        greedy: true
      }
    ],
    "string": {
      pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
      greedy: true
    },
    "class-name": {
      pattern: /(\b(?:class|interface|extends|implements|trait|instanceof|new)\s+|\bcatch\s+\()[\w.\\]+/i,
      lookbehind: true,
      inside: {
        "punctuation": /[.\\]/
      }
    },
    "keyword": /\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,
    "boolean": /\b(?:true|false)\b/,
    "function": /\w+(?=\()/,
    "number": /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
    "operator": /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,
    "punctuation": /[{}[\];(),.:]/
  };
  Prism2.languages.javascript = Prism2.languages.extend("clike", {
    "class-name": [
      Prism2.languages.clike["class-name"],
      {
        pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:prototype|constructor))/,
        lookbehind: true
      }
    ],
    "keyword": [
      {
        pattern: /((?:^|})\s*)(?:catch|finally)\b/,
        lookbehind: true
      },
      {
        pattern: /(^|[^.]|\.\.\.\s*)\b(?:as|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|(?:get|set)(?=\s*[\[$\w\xA0-\uFFFF])|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,
        lookbehind: true
      }
    ],
    "function": /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
    "number": /\b(?:(?:0[xX](?:[\dA-Fa-f](?:_[\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\d(?:_\d)?)+n|NaN|Infinity)\b|(?:\b(?:\d(?:_\d)?)+\.?(?:\d(?:_\d)?)*|\B\.(?:\d(?:_\d)?)+)(?:[Ee][+-]?(?:\d(?:_\d)?)+)?/,
    "operator": /--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/
  });
  Prism2.languages.javascript["class-name"][0].pattern = /(\b(?:class|interface|extends|implements|instanceof|new)\s+)[\w.\\]+/;
  Prism2.languages.insertBefore("javascript", "keyword", {
    "regex": {
      pattern: /((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)\/(?:\[(?:[^\]\\\r\n]|\\.)*]|\\.|[^/\\\[\r\n])+\/[gimyus]{0,6}(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/,
      lookbehind: true,
      greedy: true,
      inside: {
        "regex-source": {
          pattern: /^(\/)[\s\S]+(?=\/[a-z]*$)/,
          lookbehind: true,
          alias: "language-regex",
          inside: Prism2.languages.regex
        },
        "regex-flags": /[a-z]+$/,
        "regex-delimiter": /^\/|\/$/
      }
    },
    "function-variable": {
      pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,
      alias: "function"
    },
    "parameter": [
      {
        pattern: /(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,
        lookbehind: true,
        inside: Prism2.languages.javascript
      },
      {
        pattern: /(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,
        inside: Prism2.languages.javascript
      },
      {
        pattern: /(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,
        lookbehind: true,
        inside: Prism2.languages.javascript
      },
      {
        pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,
        lookbehind: true,
        inside: Prism2.languages.javascript
      }
    ],
    "constant": /\b[A-Z](?:[A-Z_]|\dx?)*\b/
  });
  Prism2.languages.insertBefore("javascript", "string", {
    "template-string": {
      pattern: /`(?:\\[\s\S]|\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}|(?!\${)[^\\`])*`/,
      greedy: true,
      inside: {
        "template-punctuation": {
          pattern: /^`|`$/,
          alias: "string"
        },
        "interpolation": {
          pattern: /((?:^|[^\\])(?:\\{2})*)\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/,
          lookbehind: true,
          inside: {
            "interpolation-punctuation": {
              pattern: /^\${|}$/,
              alias: "punctuation"
            },
            rest: Prism2.languages.javascript
          }
        },
        "string": /[\s\S]+/
      }
    }
  });
  if (Prism2.languages.markup) {
    Prism2.languages.markup.tag.addInlined("script", "javascript");
  }
  Prism2.languages.js = Prism2.languages.javascript;
  (function() {
    if (typeof self === "undefined" || !self.Prism || !self.document) {
      return;
    }
    if (!Element.prototype.matches) {
      Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
    }
    var Prism3 = window.Prism;
    var LOADING_MESSAGE = "Loading\u2026";
    var FAILURE_MESSAGE = function(status, message) {
      return "\u2716 Error " + status + " while fetching file: " + message;
    };
    var FAILURE_EMPTY_MESSAGE = "\u2716 Error: File does not exist or is empty";
    var EXTENSIONS = {
      "js": "javascript",
      "py": "python",
      "rb": "ruby",
      "ps1": "powershell",
      "psm1": "powershell",
      "sh": "bash",
      "bat": "batch",
      "h": "c",
      "tex": "latex"
    };
    var STATUS_ATTR = "data-src-status";
    var STATUS_LOADING = "loading";
    var STATUS_LOADED = "loaded";
    var STATUS_FAILED = "failed";
    var SELECTOR = "pre[data-src]:not([" + STATUS_ATTR + '="' + STATUS_LOADED + '"]):not([' + STATUS_ATTR + '="' + STATUS_LOADING + '"])';
    var lang = /\blang(?:uage)?-([\w-]+)\b/i;
    function setLanguageClass(element, language) {
      var className = element.className;
      className = className.replace(lang, " ") + " language-" + language;
      element.className = className.replace(/\s+/g, " ").trim();
    }
    Prism3.hooks.add("before-highlightall", function(env) {
      env.selector += ", " + SELECTOR;
    });
    Prism3.hooks.add("before-sanity-check", function(env) {
      var pre = env.element;
      if (pre.matches(SELECTOR)) {
        env.code = "";
        pre.setAttribute(STATUS_ATTR, STATUS_LOADING);
        var code3 = pre.appendChild(document.createElement("CODE"));
        code3.textContent = LOADING_MESSAGE;
        var src = pre.getAttribute("data-src");
        var language = env.language;
        if (language === "none") {
          var extension = (/\.(\w+)$/.exec(src) || [, "none"])[1];
          language = EXTENSIONS[extension] || extension;
        }
        setLanguageClass(code3, language);
        setLanguageClass(pre, language);
        var autoloader = Prism3.plugins.autoloader;
        if (autoloader) {
          autoloader.loadLanguages(language);
        }
        var xhr2 = new XMLHttpRequest();
        xhr2.open("GET", src, true);
        xhr2.onreadystatechange = function() {
          if (xhr2.readyState == 4) {
            if (xhr2.status < 400 && xhr2.responseText) {
              pre.setAttribute(STATUS_ATTR, STATUS_LOADED);
              code3.textContent = xhr2.responseText;
              Prism3.highlightElement(code3);
            } else {
              pre.setAttribute(STATUS_ATTR, STATUS_FAILED);
              if (xhr2.status >= 400) {
                code3.textContent = FAILURE_MESSAGE(xhr2.status, xhr2.statusText);
              } else {
                code3.textContent = FAILURE_EMPTY_MESSAGE;
              }
            }
          }
        };
        xhr2.send(null);
      }
    });
    Prism3.plugins.fileHighlight = {
      highlight: function highlight2(container) {
        var elements = (container || document).querySelectorAll(SELECTOR);
        for (var i2 = 0, element; element = elements[i2++]; ) {
          Prism3.highlightElement(element);
        }
      }
    };
    var logged = false;
    Prism3.fileHighlight = function() {
      if (!logged) {
        console.warn("Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.");
        logged = true;
      }
      Prism3.plugins.fileHighlight.highlight.apply(this, arguments);
    };
  })();
})(prism);
var n$2 = prism.exports;
/*! clipboard-copy. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
var clipboardCopy_1 = clipboardCopy;
function makeError() {
  return new DOMException("The request is not allowed", "NotAllowedError");
}
async function copyClipboardApi(text) {
  if (!navigator.clipboard) {
    throw makeError();
  }
  return navigator.clipboard.writeText(text);
}
async function copyExecCommand(text) {
  const span = document.createElement("span");
  span.textContent = text;
  span.style.whiteSpace = "pre";
  span.style.webkitUserSelect = "auto";
  span.style.userSelect = "all";
  document.body.appendChild(span);
  const selection = window.getSelection();
  const range2 = window.document.createRange();
  selection.removeAllRanges();
  range2.selectNode(span);
  selection.addRange(range2);
  let success = false;
  try {
    success = window.document.execCommand("copy");
  } finally {
    selection.removeAllRanges();
    window.document.body.removeChild(span);
  }
  if (!success)
    throw makeError();
}
async function clipboardCopy(text) {
  try {
    await copyClipboardApi(text);
  } catch (err) {
    try {
      await copyExecCommand(text);
    } catch (err2) {
      throw err2 || err || makeError();
    }
  }
}
class r$2 extends SInterface {
}
r$2.definition = {successTimeout: {type: "Number", default: 1500}, errorTimeout: {type: "Number", default: 3e3}};
const c$2 = {css: 's-clipboard-copy,[is="s-clipboard-copy"]{ display: inline-block; width: 1em; height: 1em; position: relative; cursor: pointer; } s-clipboard-copy[state="pending"] svg[class$="__icon"],[is="s-clipboard-copy"][state="pending"] svg[class$="__icon"]{ opacity: 1; } s-clipboard-copy[state="copy"] svg[class$="__icon-copy"],[is="s-clipboard-copy"][state="copy"] svg[class$="__icon-copy"]{ opacity: 1; } s-clipboard-copy[state="success"] svg[class$="__icon-success"],[is="s-clipboard-copy"][state="success"] svg[class$="__icon-success"]{ opacity: 1; } s-clipboard-copy[state="error"] svg[class$="__icon-error"],[is="s-clipboard-copy"][state="error"] svg[class$="__icon-error"]{ opacity: 1; } s-clipboard-copy svg,[is="s-clipboard-copy"] svg{ position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); display: block; width: 1em; height: 1em; background-size:contain; opacity: 0; pointer-events: none; } s-clipboard-copy svg[class$="__icon-success"],[is="s-clipboard-copy"] svg[class$="__icon-success"]{ color: hsl(calc(var(--s-theme-color-success-default-h, 0) + var(--s-theme-color-success-spin ,0)),calc((var(--s-theme-color-success-default-s, 0) + var(--s-theme-color-success-saturationOffset, 0)) * 1%),calc((var(--s-theme-color-success-default-l, 0) + var(--s-theme-color-success-lightnessOffset, 0)) * 1%)); } s-clipboard-copy svg[class$="__icon-error"],[is="s-clipboard-copy"] svg[class$="__icon-error"]{ color: hsl(calc(var(--s-theme-color-error-default-h, 0) + var(--s-theme-color-error-spin ,0)),calc((var(--s-theme-color-error-default-s, 0) + var(--s-theme-color-error-saturationOffset, 0)) * 1%),calc((var(--s-theme-color-error-default-l, 0) + var(--s-theme-color-error-lightnessOffset, 0)) * 1%)); }', exports: {state: {state: "pending"}, onBeforeMount() {
  this.component = new SComponentUtils(this.root, this.props, {interface: r$2}), this.root.copy = this.copy.bind(this);
}, onMounted() {
}, async copy(e2) {
  this.update({state: "copy"}), function(e3) {
    return clipboardCopy_1(e3);
  }(e2).then(() => {
    this.update({state: "success"}), setTimeout(() => {
      this.update({state: "pending"});
    }, this.component.props.successTimeout);
  }).catch(() => {
    this.update({state: "error"}), setTimeout(() => {
      this.update({state: "pending"});
    }, this.component.props.errorTimeout);
  });
}}, template: function(e2, s2, o2, t) {
  return e2('<svg expr48="expr48" width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg"><g clip-path="url(#clip0)"><path d="M4.55512 0.00402832L2.07324 2.4859H4.55512V0.00402832Z" fill="currentColor"/><path d="M14.9937 0H5.72598V3.65762H2.06836V17.0624H14.9937V0H14.9937ZM12.5801 11.3218H4.48195V10.1499H12.5801V11.3218ZM12.5801 8.83219H4.48195V7.66031H12.5801V8.83219ZM12.5801 6.34254H4.48195V5.17066H12.5801V6.34254Z" fill="currentColor"/><path d="M16.1655 2.93762V18.2343H5.00586V20H17.9312V2.93762H16.1655Z" fill="currentColor"/></g><defs><clippath id="clip0"><rect width="20" height="20" fill="currentColor"/></clippath></defs></svg><svg expr49="expr49" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-check-circle"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"/><polyline points="22 4 12 14.01 9 11.01"/></svg><svg expr50="expr50" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-x-octagon"><polygon points="7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"/><line x1="15" y1="9" x2="9" y2="15"/><line x1="9" y1="9" x2="15" y2="15"/></svg>', [{expressions: [{type: s2.ATTRIBUTE, name: "state", evaluate: function(e3) {
    return e3.state.state;
  }}]}, {redundantAttribute: "expr48", selector: "[expr48]", expressions: [{type: s2.ATTRIBUTE, name: "class", evaluate: function(e3) {
    return e3.component.className("__icon");
  }}]}, {redundantAttribute: "expr49", selector: "[expr49]", expressions: [{type: s2.ATTRIBUTE, name: "class", evaluate: function(e3) {
    return e3.component.className("__icon-success");
  }}]}, {redundantAttribute: "expr50", selector: "[expr50]", expressions: [{type: s2.ATTRIBUTE, name: "class", evaluate: function(e3) {
    return e3.component.className("__icon-error");
  }}]}]);
}, name: "s-clipboard-copy"};
register("s-clipboard-copy", c$2), setTimeout(() => {
  mount("s-clipboard-copy");
}), c$2.mount = () => {
  mount("s-clipboard-copy");
}, window.env || (window.env = {SUGAR: {}}), window.env.SUGAR = JSON.parse('{"ENVIRONMENT":"development"}');
function r$1() {
  return uuid_1.v4();
}
function o$1(e2, t) {
  if (e2.nodeName == "#comment" || e2.nodeName == "#text")
    return false;
  const a2 = Element.prototype;
  return (a2.matches || a2.webkitMatchesSelector || a2.mozMatchesSelector || a2.msMatchesSelector || function(e3) {
    return [].indexOf.call(document.querySelectorAll(e3), this) !== -1;
  }).call(e2, t);
}
let l;
const p = {};
Prism.languages.javascript = Prism.languages.extend("clike", {"class-name": [Prism.languages.clike["class-name"], {pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:prototype|constructor))/, lookbehind: true}], keyword: [{pattern: /((?:^|})\s*)(?:catch|finally)\b/, lookbehind: true}, {pattern: /(^|[^.]|\.\.\.\s*)\b(?:as|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|(?:get|set)(?=\s*[\[$\w\xA0-\uFFFF])|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/, lookbehind: true}], function: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/, number: /\b(?:(?:0[xX](?:[\dA-Fa-f](?:_[\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\d(?:_\d)?)+n|NaN|Infinity)\b|(?:\b(?:\d(?:_\d)?)+\.?(?:\d(?:_\d)?)*|\B\.(?:\d(?:_\d)?)+)(?:[Ee][+-]?(?:\d(?:_\d)?)+)?/, operator: /--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/}), Prism.languages.javascript["class-name"][0].pattern = /(\b(?:class|interface|extends|implements|instanceof|new)\s+)[\w.\\]+/, Prism.languages.insertBefore("javascript", "keyword", {regex: {pattern: /((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)\/(?:\[(?:[^\]\\\r\n]|\\.)*]|\\.|[^/\\\[\r\n])+\/[gimyus]{0,6}(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/, lookbehind: true, greedy: true, inside: {"regex-source": {pattern: /^(\/)[\s\S]+(?=\/[a-z]*$)/, lookbehind: true, alias: "language-regex", inside: Prism.languages.regex}, "regex-flags": /[a-z]+$/, "regex-delimiter": /^\/|\/$/}}, "function-variable": {pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/, alias: "function"}, parameter: [{pattern: /(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/, lookbehind: true, inside: Prism.languages.javascript}, {pattern: /(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i, inside: Prism.languages.javascript}, {pattern: /(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/, lookbehind: true, inside: Prism.languages.javascript}, {pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/, lookbehind: true, inside: Prism.languages.javascript}], constant: /\b[A-Z](?:[A-Z_]|\dx?)*\b/}), Prism.languages.insertBefore("javascript", "string", {"template-string": {pattern: /`(?:\\[\s\S]|\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}|(?!\${)[^\\`])*`/, greedy: true, inside: {"template-punctuation": {pattern: /^`|`$/, alias: "string"}, interpolation: {pattern: /((?:^|[^\\])(?:\\{2})*)\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/, lookbehind: true, inside: {"interpolation-punctuation": {pattern: /^\${|}$/, alias: "punctuation"}, rest: Prism.languages.javascript}}, string: /[\s\S]+/}}}), Prism.languages.markup && Prism.languages.markup.tag.addInlined("script", "javascript"), Prism.languages.js = Prism.languages.javascript, function(e2) {
  var t = /("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/;
  e2.languages.css = {comment: /\/\*[\s\S]*?\*\//, atrule: {pattern: /@[\w-](?:[^;{\s]|\s+(?![\s{]))*(?:;|(?=\s*\{))/, inside: {rule: /^@[\w-]+/, "selector-function-argument": {pattern: /(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/, lookbehind: true, alias: "selector"}, keyword: {pattern: /(^|[^\w-])(?:and|not|only|or)(?![\w-])/, lookbehind: true}}}, url: {pattern: RegExp("\\burl\\((?:" + t.source + "|" + /(?:[^\\\r\n()"']|\\[\s\S])*/.source + ")\\)", "i"), greedy: true, inside: {function: /^url/i, punctuation: /^\(|\)$/, string: {pattern: RegExp("^" + t.source + "$"), alias: "url"}}}, selector: RegExp(`[^{}\\s](?:[^{};"'\\s]|\\s+(?![\\s{])|` + t.source + ")*(?=\\s*\\{)"), string: {pattern: t, greedy: true}, property: /(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i, important: /!important\b/i, function: /[-a-z0-9]+(?=\()/i, punctuation: /[(){};:,]/}, e2.languages.css.atrule.inside.rest = e2.languages.css;
  var a2 = e2.languages.markup;
  a2 && (a2.tag.addInlined("style", "css"), e2.languages.insertBefore("inside", "attr-value", {"style-attr": {pattern: /(^|["'\s])style\s*=\s*(?:"[^"]*"|'[^']*')/i, lookbehind: true, inside: {"attr-value": {pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/, inside: {style: {pattern: /(["'])[\s\S]+(?=["']$)/, lookbehind: true, alias: "language-css", inside: e2.languages.css}, punctuation: [{pattern: /^=/, alias: "attr-equals"}, /"|'/]}}, "attr-name": /^style/i}}}, a2.tag));
}(Prism), Prism.languages.markup = {comment: /<!--[\s\S]*?-->/, prolog: /<\?[\s\S]+?\?>/, doctype: {pattern: /<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i, greedy: true, inside: {"internal-subset": {pattern: /(\[)[\s\S]+(?=\]>$)/, lookbehind: true, greedy: true, inside: null}, string: {pattern: /"[^"]*"|'[^']*'/, greedy: true}, punctuation: /^<!|>$|[[\]]/, "doctype-tag": /^DOCTYPE/, name: /[^\s<>'"]+/}}, cdata: /<!\[CDATA\[[\s\S]*?]]>/i, tag: {pattern: /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/, greedy: true, inside: {tag: {pattern: /^<\/?[^\s>\/]+/, inside: {punctuation: /^<\/?/, namespace: /^[^\s>\/:]+:/}}, "attr-value": {pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/, inside: {punctuation: [{pattern: /^=/, alias: "attr-equals"}, /"|'/]}}, punctuation: /\/?>/, "attr-name": {pattern: /[^\s>\/]+/, inside: {namespace: /^[^\s>\/:]+:/}}}}, entity: [{pattern: /&[\da-z]{1,8};/i, alias: "named-entity"}, /&#x?[\da-f]{1,8};/i]}, Prism.languages.markup.tag.inside["attr-value"].inside.entity = Prism.languages.markup.entity, Prism.languages.markup.doctype.inside["internal-subset"].inside = Prism.languages.markup, Prism.hooks.add("wrap", function(e2) {
  e2.type === "entity" && (e2.attributes.title = e2.content.replace(/&amp;/, "&"));
}), Object.defineProperty(Prism.languages.markup.tag, "addInlined", {value: function(e2, t) {
  var a2 = {};
  a2["language-" + t] = {pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i, lookbehind: true, inside: Prism.languages[t]}, a2.cdata = /^<!\[CDATA\[|\]\]>$/i;
  var n2 = {"included-cdata": {pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i, inside: a2}};
  n2["language-" + t] = {pattern: /[\s\S]+/, inside: Prism.languages[t]};
  var s2 = {};
  s2[e2] = {pattern: RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g, function() {
    return e2;
  }), "i"), lookbehind: true, greedy: true, inside: n2}, Prism.languages.insertBefore("markup", "cdata", s2);
}}), Prism.languages.html = Prism.languages.markup, Prism.languages.mathml = Prism.languages.markup, Prism.languages.svg = Prism.languages.markup, Prism.languages.xml = Prism.languages.extend("markup", {}), Prism.languages.ssml = Prism.languages.xml, Prism.languages.atom = Prism.languages.xml, Prism.languages.rss = Prism.languages.xml, function(e2) {
  var t = "\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\b", a2 = {pattern: /(^(["']?)\w+\2)[ \t]+\S.*/, lookbehind: true, alias: "punctuation", inside: null}, n2 = {bash: a2, environment: {pattern: RegExp("\\$" + t), alias: "constant"}, variable: [{pattern: /\$?\(\([\s\S]+?\)\)/, greedy: true, inside: {variable: [{pattern: /(^\$\(\([\s\S]+)\)\)/, lookbehind: true}, /^\$\(\(/], number: /\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee]-?\d+)?/, operator: /--?|-=|\+\+?|\+=|!=?|~|\*\*?|\*=|\/=?|%=?|<<=?|>>=?|<=?|>=?|==?|&&?|&=|\^=?|\|\|?|\|=|\?|:/, punctuation: /\(\(?|\)\)?|,|;/}}, {pattern: /\$\((?:\([^)]+\)|[^()])+\)|`[^`]+`/, greedy: true, inside: {variable: /^\$\(|^`|\)$|`$/}}, {pattern: /\$\{[^}]+\}/, greedy: true, inside: {operator: /:[-=?+]?|[!\/]|##?|%%?|\^\^?|,,?/, punctuation: /[\[\]]/, environment: {pattern: RegExp("(\\{)" + t), lookbehind: true, alias: "constant"}}}, /\$(?:\w+|[#?*!@$])/], entity: /\\(?:[abceEfnrtv\\"]|O?[0-7]{1,3}|x[0-9a-fA-F]{1,2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})/};
  e2.languages.bash = {shebang: {pattern: /^#!\s*\/.*/, alias: "important"}, comment: {pattern: /(^|[^"{\\$])#.*/, lookbehind: true}, "function-name": [{pattern: /(\bfunction\s+)\w+(?=(?:\s*\(?:\s*\))?\s*\{)/, lookbehind: true, alias: "function"}, {pattern: /\b\w+(?=\s*\(\s*\)\s*\{)/, alias: "function"}], "for-or-select": {pattern: /(\b(?:for|select)\s+)\w+(?=\s+in\s)/, alias: "variable", lookbehind: true}, "assign-left": {pattern: /(^|[\s;|&]|[<>]\()\w+(?=\+?=)/, inside: {environment: {pattern: RegExp("(^|[\\s;|&]|[<>]\\()" + t), lookbehind: true, alias: "constant"}}, alias: "variable", lookbehind: true}, string: [{pattern: /((?:^|[^<])<<-?\s*)(\w+?)\s[\s\S]*?(?:\r?\n|\r)\2/, lookbehind: true, greedy: true, inside: n2}, {pattern: /((?:^|[^<])<<-?\s*)(["'])(\w+)\2\s[\s\S]*?(?:\r?\n|\r)\3/, lookbehind: true, greedy: true, inside: {bash: a2}}, {pattern: /(^|[^\\](?:\\\\)*)(["'])(?:\\[\s\S]|\$\([^)]+\)|\$(?!\()|`[^`]+`|(?!\2)[^\\`$])*\2/, lookbehind: true, greedy: true, inside: n2}], environment: {pattern: RegExp("\\$?" + t), alias: "constant"}, variable: n2.variable, function: {pattern: /(^|[\s;|&]|[<>]\()(?:add|apropos|apt|aptitude|apt-cache|apt-get|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\s;|&])/, lookbehind: true}, keyword: {pattern: /(^|[\s;|&]|[<>]\()(?:if|then|else|elif|fi|for|while|in|case|esac|function|select|do|done|until)(?=$|[)\s;|&])/, lookbehind: true}, builtin: {pattern: /(^|[\s;|&]|[<>]\()(?:\.|:|break|cd|continue|eval|exec|exit|export|getopts|hash|pwd|readonly|return|shift|test|times|trap|umask|unset|alias|bind|builtin|caller|command|declare|echo|enable|help|let|local|logout|mapfile|printf|read|readarray|source|type|typeset|ulimit|unalias|set|shopt)(?=$|[)\s;|&])/, lookbehind: true, alias: "class-name"}, boolean: {pattern: /(^|[\s;|&]|[<>]\()(?:true|false)(?=$|[)\s;|&])/, lookbehind: true}, "file-descriptor": {pattern: /\B&\d\b/, alias: "important"}, operator: {pattern: /\d?<>|>\||\+=|==?|!=?|=~|<<[<-]?|[&\d]?>>|\d?[<>]&?|&[>&]?|\|[&|]?|<=?|>=?/, inside: {"file-descriptor": {pattern: /^\d/, alias: "important"}}}, punctuation: /\$?\(\(?|\)\)?|\.\.|[{}[\];\\]/, number: {pattern: /(^|\s)(?:[1-9]\d*|0)(?:[.,]\d+)?\b/, lookbehind: true}}, a2.inside = e2.languages.bash;
  for (var s2 = ["comment", "function-name", "for-or-select", "assign-left", "string", "environment", "function", "keyword", "builtin", "boolean", "file-descriptor", "operator", "punctuation", "number"], i2 = n2.variable[1].inside, r2 = 0; r2 < s2.length; r2++)
    i2[s2[r2]] = e2.languages.bash[s2[r2]];
  e2.languages.shell = e2.languages.bash;
}(Prism), function(e2) {
  var t = /\/\*[\s\S]*?\*\/|\/\/.*|#(?!\[).*/, a2 = [{pattern: /\b(?:false|true)\b/i, alias: "boolean"}, /\b[A-Z_][A-Z0-9_]*\b(?!\s*\()/, /\b(?:null)\b/i], n2 = /\b0b[01]+\b|\b0x[\da-f]+\b|(?:\b\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\B\.\d+)(?:e[+-]?\d+)?/i, s2 = /<?=>|\?\?=?|\.{3}|\??->|[!=]=?=?|::|\*\*=?|--|\+\+|&&|\|\||<<|>>|[?~]|[/^|%*&<>.+-]=?/, i2 = /[{}\[\](),:;]/;
  e2.languages.php = {delimiter: {pattern: /\?>$|^<\?(?:php(?=\s)|=)?/i, alias: "important"}, comment: t, variable: /\$+(?:\w+\b|(?={))/i, package: {pattern: /(namespace\s+|use\s+(?:function\s+)?)(?:\\?\b[a-z_]\w*)+\b(?!\\)/i, lookbehind: true, inside: {punctuation: /\\/}}, keyword: [{pattern: /(\(\s*)\b(?:bool|boolean|int|integer|float|string|object|array)\b(?=\s*\))/i, alias: "type-casting", greedy: true, lookbehind: true}, {pattern: /([(,?]\s*)\b(?:bool|int|float|string|object|array(?!\s*\()|mixed|self|static|callable|iterable|(?:null|false)(?=\s*\|))\b(?=\s*\$)/i, alias: "type-hint", greedy: true, lookbehind: true}, {pattern: /([(,?]\s*[a-z0-9_|]\|\s*)(?:null|false)\b(?=\s*\$)/i, alias: "type-hint", greedy: true, lookbehind: true}, {pattern: /(\)\s*:\s*(?:\?\s*)?)\b(?:bool|int|float|string|object|void|array(?!\s*\()|mixed|self|static|callable|iterable|(?:null|false)(?=\s*\|))\b/i, alias: "return-type", greedy: true, lookbehind: true}, {pattern: /(\)\s*:\s*(?:\?\s*)?[a-z0-9_|]\|\s*)(?:null|false)\b/i, alias: "return-type", greedy: true, lookbehind: true}, {pattern: /\b(?:bool|int|float|string|object|void|array(?!\s*\()|mixed|iterable|(?:null|false)(?=\s*\|))\b/i, alias: "type-declaration", greedy: true}, {pattern: /(\|\s*)(?:null|false)\b/i, alias: "type-declaration", greedy: true, lookbehind: true}, {pattern: /\b(?:parent|self|static)(?=\s*::)/i, alias: "static-context", greedy: true}, /\b(?:__halt_compiler|abstract|and|array|as|break|callable|case|catch|class|clone|const|continue|declare|default|die|do|echo|else|elseif|empty|enddeclare|endfor|endforeach|endif|endswitch|endwhile|eval|exit|extends|final|finally|for|foreach|function|global|goto|if|implements|include|include_once|instanceof|insteadof|interface|isset|list|namespace|match|new|or|parent|print|private|protected|public|require|require_once|return|self|static|switch|throw|trait|try|unset|use|var|while|xor|yield)\b/i], "argument-name": /\b[a-z_]\w*(?=\s*:(?!:))/i, "class-name": [{pattern: /(\b(?:class|interface|extends|implements|trait|instanceof|new(?!\s+self|\s+static))\s+|\bcatch\s*\()\b[a-z_]\w*(?!\\)\b/i, greedy: true, lookbehind: true}, {pattern: /(\|\s*)\b[a-z_]\w*(?!\\)\b/i, greedy: true, lookbehind: true}, {pattern: /\b[a-z_]\w*(?!\\)\b(?=\s*\|)/i, greedy: true}, {pattern: /(\|\s*)(?:\\?\b[a-z_]\w*)+\b/i, alias: "class-name-fully-qualified", greedy: true, lookbehind: true, inside: {punctuation: /\\/}}, {pattern: /(?:\\?\b[a-z_]\w*)+\b(?=\s*\|)/i, alias: "class-name-fully-qualified", greedy: true, inside: {punctuation: /\\/}}, {pattern: /(\b(?:extends|implements|instanceof|new(?!\s+self\b|\s+static\b))\s+|\bcatch\s*\()(?:\\?\b[a-z_]\w*)+\b(?!\\)/i, alias: "class-name-fully-qualified", greedy: true, lookbehind: true, inside: {punctuation: /\\/}}, {pattern: /\b[a-z_]\w*(?=\s*\$)/i, alias: "type-declaration", greedy: true}, {pattern: /(?:\\?\b[a-z_]\w*)+(?=\s*\$)/i, alias: ["class-name-fully-qualified", "type-declaration"], greedy: true, inside: {punctuation: /\\/}}, {pattern: /\b[a-z_]\w*(?=\s*::)/i, alias: "static-context", greedy: true}, {pattern: /(?:\\?\b[a-z_]\w*)+(?=\s*::)/i, alias: ["class-name-fully-qualified", "static-context"], greedy: true, inside: {punctuation: /\\/}}, {pattern: /([(,?]\s*)[a-z_]\w*(?=\s*\$)/i, alias: "type-hint", greedy: true, lookbehind: true}, {pattern: /([(,?]\s*)(?:\\?\b[a-z_]\w*)+(?=\s*\$)/i, alias: ["class-name-fully-qualified", "type-hint"], greedy: true, lookbehind: true, inside: {punctuation: /\\/}}, {pattern: /(\)\s*:\s*(?:\?\s*)?)\b[a-z_]\w*(?!\\)\b/i, alias: "return-type", greedy: true, lookbehind: true}, {pattern: /(\)\s*:\s*(?:\?\s*)?)(?:\\?\b[a-z_]\w*)+\b(?!\\)/i, alias: ["class-name-fully-qualified", "return-type"], greedy: true, lookbehind: true, inside: {punctuation: /\\/}}], constant: a2, function: /\w+\s*(?=\()/, property: {pattern: /(->)[\w]+/, lookbehind: true}, number: n2, operator: s2, punctuation: i2};
  var r2 = {pattern: /{\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\{])\$+(?:\w+(?:\[[^\r\n\[\]]+\]|->\w+)*)/, lookbehind: true, inside: e2.languages.php}, o2 = [{pattern: /<<<'([^']+)'[\r\n](?:.*[\r\n])*?\1;/, alias: "nowdoc-string", greedy: true, inside: {delimiter: {pattern: /^<<<'[^']+'|[a-z_]\w*;$/i, alias: "symbol", inside: {punctuation: /^<<<'?|[';]$/}}}}, {pattern: /<<<(?:"([^"]+)"[\r\n](?:.*[\r\n])*?\1;|([a-z_]\w*)[\r\n](?:.*[\r\n])*?\2;)/i, alias: "heredoc-string", greedy: true, inside: {delimiter: {pattern: /^<<<(?:"[^"]+"|[a-z_]\w*)|[a-z_]\w*;$/i, alias: "symbol", inside: {punctuation: /^<<<"?|[";]$/}}, interpolation: r2}}, {pattern: /`(?:\\[\s\S]|[^\\`])*`/, alias: "backtick-quoted-string", greedy: true}, {pattern: /'(?:\\[\s\S]|[^\\'])*'/, alias: "single-quoted-string", greedy: true}, {pattern: /"(?:\\[\s\S]|[^\\"])*"/, alias: "double-quoted-string", greedy: true, inside: {interpolation: r2}}];
  e2.languages.insertBefore("php", "variable", {string: o2}), e2.languages.insertBefore("php", "variable", {attribute: {pattern: /#\[(?:[^"'\/#]|\/(?![*/])|\/\/.*$|#(?!\[).*$|\/\*(?:[^*]|\*(?!\/))*\*\/|"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*')+\](?=\s*[a-z$#])/im, greedy: true, inside: {"attribute-content": {pattern: /^(#\[)[\s\S]+(?=]$)/, lookbehind: true, inside: {comment: t, string: o2, "attribute-class-name": [{pattern: /([^:]|^)\b[a-z_]\w*(?!\\)\b/i, alias: "class-name", greedy: true, lookbehind: true}, {pattern: /([^:]|^)(?:\\?\b[a-z_]\w*)+/i, alias: ["class-name", "class-name-fully-qualified"], greedy: true, lookbehind: true, inside: {punctuation: /\\/}}], constant: a2, number: n2, operator: s2, punctuation: i2}}, delimiter: {pattern: /^#\[|]$/, alias: "punctuation"}}}}), e2.hooks.add("before-tokenize", function(t2) {
    if (/<\?/.test(t2.code)) {
      e2.languages["markup-templating"].buildPlaceholders(t2, "php", /<\?(?:[^"'/#]|\/(?![*/])|("|')(?:\\[\s\S]|(?!\1)[^\\])*\1|(?:\/\/|#(?!\[))(?:[^?\n\r]|\?(?!>))*(?=$|\?>|[\r\n])|#\[|\/\*(?:[^*]|\*(?!\/))*(?:\*\/|$))*?(?:\?>|$)/gi);
    }
  }), e2.hooks.add("after-tokenize", function(t2) {
    e2.languages["markup-templating"].tokenizePlaceholders(t2, "php");
  });
}(Prism), function(e2) {
  function t(e3, t2) {
    return "___" + e3.toUpperCase() + t2 + "___";
  }
  Object.defineProperties(e2.languages["markup-templating"] = {}, {buildPlaceholders: {value: function(a2, n2, s2, i2) {
    if (a2.language === n2) {
      var r2 = a2.tokenStack = [];
      a2.code = a2.code.replace(s2, function(e3) {
        if (typeof i2 == "function" && !i2(e3))
          return e3;
        for (var s3, o2 = r2.length; a2.code.indexOf(s3 = t(n2, o2)) !== -1; )
          ++o2;
        return r2[o2] = e3, s3;
      }), a2.grammar = e2.languages.markup;
    }
  }}, tokenizePlaceholders: {value: function(a2, n2) {
    if (a2.language === n2 && a2.tokenStack) {
      a2.grammar = e2.languages[n2];
      var s2 = 0, i2 = Object.keys(a2.tokenStack);
      !function r2(o2) {
        for (var l2 = 0; l2 < o2.length && !(s2 >= i2.length); l2++) {
          var p2 = o2[l2];
          if (typeof p2 == "string" || p2.content && typeof p2.content == "string") {
            var c2 = i2[s2], d2 = a2.tokenStack[c2], u = typeof p2 == "string" ? p2 : p2.content, m2 = t(n2, c2), g2 = u.indexOf(m2);
            if (g2 > -1) {
              ++s2;
              var b = u.substring(0, g2), f2 = new e2.Token(n2, e2.tokenize(d2, a2.grammar), "language-" + n2, d2), h2 = u.substring(g2 + m2.length), y2 = [];
              b && y2.push.apply(y2, r2([b])), y2.push(f2), h2 && y2.push.apply(y2, r2([h2])), typeof p2 == "string" ? o2.splice.apply(o2, [l2, 1].concat(y2)) : p2.content = y2;
            }
          } else
            p2.content && r2(p2.content);
        }
        return o2;
      }(a2.tokens);
    }
  }}});
}(Prism);
class c$1 extends SInterface {
}
c$1.definition = {theme: {type: "String", default: "https://gitcdn.link/repo/PrismJS/prism-themes/master/themes/prism-nord.css"}, active: {type: "String"}, toolbar: {type: "Array<String>", values: ["copy"], default: ["copy"]}, toolbarPosition: {type: "String", values: ["content", "nav"], default: "content"}, language: {type: "String", default: "javascript"}, defaultStyleClasses: {type: "Object", default: {main: "s-tabs"}}};
const d = {css: 's-code-example,[is="s-code-example"]{ display: block; } s-code-example[toolbar-position="nav"],[is="s-code-example"][toolbar-position="nav"]{ position: relative; } s-code-example .s-code-example__slot,[is="s-code-example"] .s-code-example__slot{ display: none; } s-code-example .s-code-example__nav,[is="s-code-example"] .s-code-example__nav{ } s-code-example .s-code-example__tabs,[is="s-code-example"] .s-code-example__tabs{ display: flex; list-style: none; border-bottom-left-radius: 0 !important; border-bottom-right-radius: 0 !important; } s-code-example .s-code-example__tab,[is="s-code-example"] .s-code-example__tab{ } s-code-example .s-code-example__content,[is="s-code-example"] .s-code-example__content{ overflow: hidden; } s-code-example[toolbar-position="content"] .s-code-example__content { position: relative; } s-code-example .s-code-example__code,[is="s-code-example"] .s-code-example__code{ display: none; border-top-left-radius: 0 !important; border-top-right-radius: 0 !important; line-height: 0; overflow: hidden; } s-code-example .s-code-example__code[active],[is="s-code-example"] .s-code-example__code[active]{ display: block; } s-code-example .s-code-example__toolbar,[is="s-code-example"] .s-code-example__toolbar{ position: absolute; top: var(--s-theme-space-20, 24px); right: var(--s-theme-space-20, 24px); z-index: 10; } s-code-example .s-code-example__toolbar > *,[is="s-code-example"] .s-code-example__toolbar > *{ font-size: 20px; opacity: 0.5; } s-code-example .s-code-example__toolbar > *:hover,[is="s-code-example"] .s-code-example__toolbar > *:hover{ opacity: 1; } s-code-example[toolbar-position="nav"] .s-code-example__toolbar { top: var(--s-theme-space-10, 12px); right: var(--s-theme-space-10, 12px); }', exports: {state: {activeTabId: void 0, items: []}, onBeforeMount() {
  this.component = new SComponentUtils(this.root, this.props, {interface: c$1});
}, async onMounted() {
  await function(e2, t = {}) {
    return t = Object.assign({offset: 50}, t), new Promise((a2) => {
      const n2 = {root: null, rootMargin: `${t.offset}px`, threshold: 1};
      new IntersectionObserver(function(t2, n3) {
        t2.forEach((t3) => {
          t3.intersectionRatio > 0 && (n3.disconnect(), a2(e2));
        });
      }, n2).observe(e2);
    });
  }(this.root), this.$copy = this.$("s-clipboard-copy"), this.$templates = Array.from(this.$$("template,textarea")), this.$templates.forEach((e2) => {
    var t, a2, n2;
    this.update({items: [...this.state.items, {id: (a2 = (t = e2.getAttribute("id")) != null ? t : e2.getAttribute("language")) != null ? a2 : e2.getAttribute("lang"), lang: (n2 = e2.getAttribute("language")) != null ? n2 : e2.getAttribute("lang"), code: e2.innerHTML.trim()}]}), e2.remove();
  }), this.component.props.active ? this.setActiveTab(this.component.props.active) : this.setActiveTab(this.state.items[0].id);
}, setActiveTab(e2) {
  this.update({activeTabId: e2}), this.initPrismOnTab(e2);
}, initPrismOnTab(e2) {
  this.root.querySelector(`li#${e2}`);
  const t = this.root.querySelector(`pre#${e2} code`);
  t.hasAttribute("inited") || (t.setAttribute("inited", true), n$2.highlightElement(t));
}, copy(e2 = this.state.activeTabId) {
  const t = this.state.items.filter((t2) => t2.id === e2)[0];
  this.$copy.copy(t.code);
}}, template: function(e2, t, a2, n2) {
  return e2('<div expr290="expr290"><slot expr291="expr291"></slot></div><header expr292="expr292"><ol expr293="expr293"><li expr294="expr294"></li></ol></header><div expr295="expr295"><div expr296="expr296"><s-clipboard-copy expr297="expr297"></s-clipboard-copy></div><pre expr298="expr298"></pre></div>', [{expressions: [{type: t.ATTRIBUTE, name: "toolbar-position", evaluate: function(e3) {
    return e3.component.props.toolbarPosition;
  }}]}, {redundantAttribute: "expr290", selector: "[expr290]", expressions: [{type: t.ATTRIBUTE, name: "class", evaluate: function(e3) {
    return e3.component.className("__slot");
  }}]}, {type: a2.SLOT, attributes: [], name: "default", redundantAttribute: "expr291", selector: "[expr291]"}, {redundantAttribute: "expr292", selector: "[expr292]", expressions: [{type: t.ATTRIBUTE, name: "class", evaluate: function(e3) {
    return e3.component.className("__nav");
  }}]}, {redundantAttribute: "expr293", selector: "[expr293]", expressions: [{type: t.ATTRIBUTE, name: "class", evaluate: function(e3) {
    return e3.component.className("__tabs", e3.component.props.defaultStyleClasses.main);
  }}]}, {type: a2.EACH, getKey: null, condition: null, template: e2(" ", [{expressions: [{type: t.TEXT, childNodeIndex: 0, evaluate: function(e3) {
    return [e3.item.lang].join("");
  }}, {type: t.ATTRIBUTE, name: "class", evaluate: function(e3) {
    return e3.component.className("__tab");
  }}, {type: t.ATTRIBUTE, name: "id", evaluate: function(e3) {
    return e3.item.id;
  }}, {type: t.ATTRIBUTE, name: "active", evaluate: function(e3) {
    return e3.state.activeTabId === e3.item.id;
  }}, {type: t.EVENT, name: "onclick", evaluate: function(e3) {
    return () => e3.setActiveTab(e3.item.id);
  }}]}]), redundantAttribute: "expr294", selector: "[expr294]", itemName: "item", indexName: "idx", evaluate: function(e3) {
    var t2;
    return (t2 = e3.state.items) != null ? t2 : [];
  }}, {redundantAttribute: "expr295", selector: "[expr295]", expressions: [{type: t.ATTRIBUTE, name: "class", evaluate: function(e3) {
    return e3.component.className("__content");
  }}]}, {redundantAttribute: "expr296", selector: "[expr296]", expressions: [{type: t.ATTRIBUTE, name: "class", evaluate: function(e3) {
    return e3.component.className("__toolbar");
  }}]}, {type: a2.TAG, getComponent: n2, evaluate: function(e3) {
    return "s-clipboard-copy";
  }, slots: [], attributes: [{type: t.ATTRIBUTE, name: "class", evaluate: function(e3) {
    return e3.component.className("__copy");
  }}, {type: t.EVENT, name: "onclick", evaluate: function(e3) {
    return () => e3.copy();
  }}], redundantAttribute: "expr297", selector: "[expr297]"}, {type: a2.EACH, getKey: null, condition: null, template: e2('\n        <code expr299="expr299"> </code>\n    ', [{expressions: [{type: t.ATTRIBUTE, name: "class", evaluate: function(e3) {
    return e3.component.className("__code");
  }}, {type: t.ATTRIBUTE, name: "id", evaluate: function(e3) {
    var t2;
    return (t2 = e3.item.id) != null ? t2 : e3.item.lang;
  }}, {type: t.ATTRIBUTE, name: "active", evaluate: function(e3) {
    var t2;
    return e3.state.activeTabId === ((t2 = e3.item.id) != null ? t2 : e3.item.lang);
  }}]}, {redundantAttribute: "expr299", selector: "[expr299]", expressions: [{type: t.TEXT, childNodeIndex: 0, evaluate: function(e3) {
    return e3.item.code;
  }}, {type: t.ATTRIBUTE, name: "class", evaluate: function(e3) {
    return `language-${e3.item.lang}`;
  }}]}]), redundantAttribute: "expr298", selector: "[expr298]", itemName: "item", indexName: "idx", evaluate: function(e3) {
    var t2;
    return (t2 = e3.state.items) != null ? t2 : [];
  }}]);
}, name: "s-code-example"};
register("s-code-example", d), function(e2, t = null, n2 = {}) {
  const s2 = `${e2} - ${r$1()}`;
  n2 = Object.assign({}, {rootNode: document, once: true}, n2), p[e2] ? p[e2].push({id: s2, selector: e2, cb: t, lastMutationId: null, settings: n2}) : p[e2] = [{id: s2, selector: e2, cb: t, lastMutationId: null, settings: n2}], new SPromise(({resolve: t2, reject: a2, emit: s3}) => {
    function i2(e3, t3, a3) {
      const n3 = p[t3];
      n3 && n3.forEach((t4) => {
        if (!t4.lastMutationId || t4.lastMutationId !== a3) {
          if (t4.settings.once) {
            if (e3._querySelectorLive || (e3._querySelectorLive = {}), e3._querySelectorLive[t4.id])
              return;
            e3._querySelectorLive[t4.id] = true;
          }
          s3("node", e3), t4.cb && t4.cb(e3, () => {
            delete p[t4.selector];
          });
        }
      });
    }
    l || (l = new MutationObserver((e3) => {
      const t3 = `mutation-${r$1()}`;
      e3.forEach((e4) => {
        if (e4.addedNodes && e4.addedNodes.length)
          [].forEach.call(e4.addedNodes, (e5) => {
            const a3 = Object.keys(p);
            a3.forEach((a4) => {
              o$1(e5, a4) && i2(e5, a4, t3);
            }), e5.querySelectorAll && a3.forEach((a4) => {
              const n3 = e5.querySelectorAll(a4);
              [].forEach.call(n3, (e6) => {
                i2(e6, a4, t3);
              });
            });
          });
        else if (e4.attributeName) {
          Object.keys(p).forEach((a3) => {
            o$1(e4.target, a3) && i2(e4.target, a3, t3);
          });
        }
      });
    }), l.observe(n2.rootNode, {childList: true, subtree: true, attributes: true, attributeFilter: ["class", "id"]})), [].forEach.call(n2.rootNode.querySelectorAll(e2), (t3) => {
      i2(t3, e2, "init");
    });
  });
}("s-code-example:not([s-mounted])", (t) => {
  const a2 = t.id || "s-code-example-" + r$1();
  t.setAttribute("id", a2), mount("#" + a2);
}), d.mount = () => {
  mount("s-code-example");
}, window.env || (window.env = {SUGAR: {}}), window.env.SUGAR = JSON.parse('{"ENVIRONMENT":"development"}');
class n$1 extends SInterface {
}
n$1.definition = {url: {type: "String", required: true}};
const r = {css: 's-opengraph-viewer,[is="s-opengraph-viewer"]{ display: block; }', exports: {state: {loading: false}, onBeforeMount() {
  this.component = new SComponentUtils(this.root, this.props, {interface: n$1});
}, async onMounted() {
  var e2, o2;
  console.log((e2 = this.component.props.url, (o2 = new XMLHttpRequest()).onreadystatechange = function() {
  }, o2.open("GET", e2, true), o2.withCredentials = true, o2.setRequestHeader("Content-Type", "text/html"), o2.setRequestHeader("Access-Control-Allow-Origin", "*"), o2.send(), o2.responseText));
}}, template: null, name: "s-opengraph-viewer"};
register("s-opengraph-viewer", r), setTimeout(() => {
  mount("s-opengraph-viewer");
}), r.mount = () => {
  mount("s-opengraph-viewer");
}, window.env || (window.env = {SUGAR: {}}), window.env.SUGAR = JSON.parse('{"ENVIRONMENT":"development"}');
function n() {
  return uuid_1.v4();
}
let a$1;
const o = {};
function c(e2) {
  return e2 && e2.__esModule && Object.prototype.hasOwnProperty.call(e2, "default") ? e2.default : e2;
}
new Proxy({}, {get() {
  throw new Error('Module "fs" has been externalized for browser compatibility and cannot be accessed in client code.');
}});
new Proxy({}, {get() {
  throw new Error('Module "path" has been externalized for browser compatibility and cannot be accessed in client code.');
}});
var f = c(function() {
  function e2(e3) {
    return e3.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
  }
  function t(e3) {
    return e3.replace(/-(\w)/g, (e4, t2) => t2.toUpperCase());
  }
  function r2(e3) {
    return Array.from(e3.attributes).reduce((e4, r3) => (e4[t(r3.name)] = r3.value, e4), {});
  }
  function s2(e3, t2) {
    e3.firstChild && (t2.appendChild(e3.firstChild), s2(e3, t2));
  }
  function i2(e3) {
    n2(e3.childNodes);
  }
  function n2(e3) {
    Array.from(e3).forEach(a2);
  }
  const a2 = (e3) => e3 && e3.parentNode && e3.parentNode.removeChild(e3), o2 = (e3, t2) => t2 && t2.parentNode && t2.parentNode.insertBefore(e3, t2), c2 = (e3, t2) => t2 && t2.parentNode && t2.parentNode.replaceChild(e3, t2), u = new Map(), h2 = Symbol("riot-component"), p2 = new Set(), d2 = "is", f2 = "value", m2 = "mount", y2 = "update", g2 = "unmount", x2 = "shouldUpdate", b = "onBeforeMount", E2 = "onMounted", v2 = "onBeforeUpdate", S2 = "onUpdated", A = "onBeforeUnmount", T = "onUnmounted", w2 = "props", C = "state", P = "slots", D = "root", k2 = Symbol("pure"), N = Symbol("is_updating"), I = Symbol("parent"), F = Symbol("attributes"), M2 = Symbol("template");
  var L = Object.freeze({__proto__: null, COMPONENTS_IMPLEMENTATION_MAP: u, DOM_COMPONENT_INSTANCE_PROPERTY: h2, PLUGINS_SET: p2, IS_DIRECTIVE: d2, VALUE_ATTRIBUTE: f2, MOUNT_METHOD_KEY: m2, UPDATE_METHOD_KEY: y2, UNMOUNT_METHOD_KEY: g2, SHOULD_UPDATE_KEY: x2, ON_BEFORE_MOUNT_KEY: b, ON_MOUNTED_KEY: E2, ON_BEFORE_UPDATE_KEY: v2, ON_UPDATED_KEY: S2, ON_BEFORE_UNMOUNT_KEY: A, ON_UNMOUNTED_KEY: T, PROPS_KEY: w2, STATE_KEY: C, SLOTS_KEY: P, ROOT_KEY: D, IS_PURE_SYMBOL: k2, IS_COMPONENT_UPDATING: N, PARENT_KEY_SYMBOL: I, ATTRIBUTES_KEY_SYMBOL: F, TEMPLATE_KEY_SYMBOL: M2});
  const O2 = 0, _2 = 1, B2 = 2, R = 3, j2 = 4;
  var U = {EACH: O2, IF: _2, SIMPLE: B2, TAG: R, SLOT: j2};
  const q2 = 0, z = 1, V = 2, J = 3;
  var X = {ATTRIBUTE: q2, EVENT: z, TEXT: V, VALUE: J};
  const G = Symbol("head"), H = Symbol("tail");
  function W() {
    const e3 = document.createComment("fragment head"), t2 = document.createComment("fragment tail");
    return e3[G] = true, t2[H] = true, {head: e3, tail: t2};
  }
  function K(e3) {
    const t2 = e3.dom.cloneNode(true), {head: r3, tail: s3} = W();
    return {avoidDOMInjection: true, fragment: t2, head: r3, tail: s3, children: [r3, ...Array.from(t2.childNodes), s3]};
  }
  function $2(e3) {
    let {head: t2, tail: r3} = e3;
    const s3 = Y([t2], t2.nextSibling, (e4) => e4 === r3, false);
    return s3.push(r3), s3;
  }
  function Y(e3, t2, r3, s3) {
    const {nextSibling: i3} = t2;
    return s3 || t2[G] || t2[H] || e3.push(t2), !i3 || r3(t2) ? e3 : Y(e3, i3, r3, s3 && !t2[H] || i3[G]);
  }
  function Q(e3, t2) {
    return typeof e3 === t2;
  }
  function Z(e3) {
    const t2 = e3.ownerSVGElement;
    return !!t2 || t2 === null;
  }
  function ee(e3) {
    return !ie(e3.content);
  }
  function te(e3) {
    return Q(e3, "function");
  }
  function re(e3) {
    return Q(e3, "boolean");
  }
  function se(e3) {
    return !ie(e3) && e3.constructor === Object;
  }
  function ie(e3) {
    return e3 == null;
  }
  var ne = (e3, t2, r3, s3) => {
    const i3 = t2.length;
    let n3 = e3.length, l2 = i3, u2 = 0, h3 = 0, p3 = null;
    for (; u2 < n3 || h3 < l2; )
      if (n3 === u2) {
        const e4 = l2 < i3 ? h3 ? r3(t2[h3 - 1], -0).nextSibling : r3(t2[l2 - h3], 0) : s3;
        for (; h3 < l2; )
          o2(r3(t2[h3++], 1), e4);
      } else if (l2 === h3)
        for (; u2 < n3; )
          p3 && p3.has(e3[u2]) || a2(r3(e3[u2], -1)), u2++;
      else if (e3[u2] === t2[h3])
        u2++, h3++;
      else if (e3[n3 - 1] === t2[l2 - 1])
        n3--, l2--;
      else if (e3[u2] === t2[l2 - 1] && t2[h3] === e3[n3 - 1]) {
        const s4 = r3(e3[--n3], -1).nextSibling;
        o2(r3(t2[h3++], 1), r3(e3[u2++], -1).nextSibling), o2(r3(t2[--l2], 1), s4), e3[n3] = t2[l2];
      } else {
        if (!p3) {
          p3 = new Map();
          let e4 = h3;
          for (; e4 < l2; )
            p3.set(t2[e4], e4++);
        }
        if (p3.has(e3[u2])) {
          const s4 = p3.get(e3[u2]);
          if (h3 < s4 && s4 < l2) {
            let i4 = u2, a3 = 1;
            for (; ++i4 < n3 && i4 < l2 && p3.get(e3[i4]) === s4 + a3; )
              a3++;
            if (a3 > s4 - h3) {
              const i5 = r3(e3[u2], 0);
              for (; h3 < s4; )
                o2(r3(t2[h3++], 1), i5);
            } else
              c2(r3(t2[h3++], 1), r3(e3[u2++], -1));
          } else
            u2++;
        } else
          a2(r3(e3[u2++], -1));
      }
    return t2;
  };
  const ae = Symbol("unmount"), oe = {nodes: [], mount(e3, t2) {
    return this.update(e3, t2);
  }, update(e3, t2) {
    const {placeholder: r3, nodes: s3, childrenMap: i3} = this, n3 = e3 === ae ? null : this.evaluate(e3), a3 = n3 ? Array.from(n3) : [], {newChildrenMap: o3, batches: l2, futureNodes: c3} = pe(a3, e3, t2, this);
    return ne(s3, c3, le(Array.from(i3.values()), t2), r3), l2.forEach((e4) => e4()), this.childrenMap = o3, this.nodes = c3, he(this.nodes), this;
  }, unmount(e3, t2) {
    return this.update(ae, t2), this;
  }};
  function le(e3, t2) {
    return (r3, s3) => {
      if (s3 < 0) {
        const r4 = e3[e3.length - 1];
        if (r4) {
          const {template: s4, nodes: i3, context: n3} = r4;
          i3.pop(), i3.length === 0 && (e3.pop(), s4.unmount(n3, t2, null));
        }
      }
      return r3;
    };
  }
  function ce(e3, t2) {
    return !!e3 && Boolean(e3(t2)) === false;
  }
  function ue(e3, t2) {
    let {itemName: r3, indexName: s3, index: i3, item: n3} = t2;
    return e3[r3] = n3, s3 && (e3[s3] = i3), e3;
  }
  function he(e3) {
    const t2 = e3[0], r3 = e3[e3.length - 1];
    t2 && (t2[G] = true), r3 && (r3[H] = true);
  }
  function pe(e3, t2, r3, s3) {
    const {condition: i3, template: n3, childrenMap: a3, itemName: o3, getKey: l2, indexName: c3, root: u2, isTemplateTag: h3} = s3, p3 = new Map(), d3 = [], f3 = [];
    return e3.forEach((e4, s4) => {
      const m3 = ue(Object.create(t2), {itemName: o3, indexName: c3, index: s4, item: e4}), y3 = l2 ? l2(m3) : s4, g3 = a3.get(y3), x3 = [];
      if (ce(i3, m3))
        return;
      const b2 = !g3, E3 = g3 ? g3.template : n3.clone(), v3 = E3.el || u2.cloneNode(), S3 = h3 && b2 ? K(E3) : E3.meta;
      b2 ? d3.push(() => E3.mount(v3, m3, r3, S3)) : d3.push(() => E3.update(m3, r3)), h3 ? x3.push(...b2 ? S3.children : $2(S3)) : x3.push(v3), a3.delete(y3), f3.push(...x3), p3.set(y3, {nodes: x3, template: E3, context: m3, index: s4});
    }), {newChildrenMap: p3, batches: d3, futureNodes: f3};
  }
  function de(e3, t2) {
    let {evaluate: r3, condition: s3, itemName: i3, indexName: n3, getKey: l2, template: c3} = t2;
    const u2 = document.createTextNode(""), h3 = e3.cloneNode();
    return o2(u2, e3), a2(e3), Object.assign({}, oe, {childrenMap: new Map(), node: e3, root: h3, condition: s3, evaluate: r3, isTemplateTag: ee(h3), template: c3.createDOM(e3), getKey: l2, indexName: n3, itemName: i3, placeholder: u2});
  }
  const fe = {mount(e3, t2) {
    return this.update(e3, t2);
  }, update(e3, t2) {
    const r3 = !!this.evaluate(e3), s3 = !this.value && r3, i3 = this.value && !r3, n3 = () => {
      const r4 = this.node.cloneNode();
      o2(r4, this.placeholder), this.template = this.template.clone(), this.template.mount(r4, e3, t2);
    };
    switch (true) {
      case s3:
        n3();
        break;
      case i3:
        this.unmount(e3);
        break;
      default:
        r3 && this.template.update(e3, t2);
    }
    return this.value = r3, this;
  }, unmount(e3, t2) {
    return this.template.unmount(e3, t2, true), this;
  }};
  function me(e3, t2) {
    let {evaluate: r3, template: s3} = t2;
    const i3 = document.createTextNode("");
    return o2(i3, e3), a2(e3), Object.assign({}, fe, {node: e3, evaluate: r3, placeholder: i3, template: s3.createDOM(e3)});
  }
  function ye(e3) {
    throw new Error(e3);
  }
  function ge(e3) {
    const t2 = new Map(), r3 = (r4) => (t2.has(r4) || t2.set(r4, e3.call(this, r4))) && t2.get(r4);
    return r3.cache = t2, r3;
  }
  function xe(e3) {
    return e3.reduce((e4, r3) => {
      const {value: s3, type: i3} = r3;
      switch (true) {
        case (!r3.name && i3 === q2):
          return Object.assign({}, e4, s3);
        case i3 === J:
          e4.value = r3.value;
          break;
        default:
          e4[t(r3.name)] = r3.value;
      }
      return e4;
    }, {});
  }
  const be = typeof Element == "undefined" ? {} : Element.prototype, Ee = ge((e3) => be.hasOwnProperty(e3));
  function ve(e3, t2) {
    Object.entries(t2).forEach((t3) => {
      let [r3, s3] = t3;
      return we(e3, {name: r3}, s3);
    });
  }
  function Se(e3, t2, r3) {
    const s3 = t2 ? Object.keys(t2) : [];
    Object.keys(r3).filter((e4) => !s3.includes(e4)).forEach((t3) => e3.removeAttribute(t3));
  }
  function Ae(e3) {
    return e3 === true || ["string", "number"].includes(typeof e3);
  }
  function Te(e3) {
    return ie(e3) || e3 === false || e3 === "";
  }
  function we(e3, t2, r3, s3) {
    let {name: i3} = t2;
    if (!i3)
      return s3 && Se(e3, r3, s3), void (r3 && ve(e3, r3));
    !Ee(i3) && (re(r3) || se(r3) || te(r3)) && (e3[i3] = r3), Te(r3) ? e3.removeAttribute(i3) : Ae(r3) && e3.setAttribute(i3, Ce(i3, r3));
  }
  function Ce(e3, t2) {
    return t2 === true ? e3 : t2;
  }
  const Pe = /^on/, De = (e3) => Array.isArray(e3) ? e3 : [e3, false], ke = {handleEvent(e3) {
    this[e3.type](e3);
  }}, Ne = new WeakMap(), Ie = (e3) => {
    const t2 = Object.create(ke);
    return Ne.set(e3, t2), t2;
  };
  function Fe(e3, t2, r3) {
    let {name: s3} = t2;
    const i3 = s3.replace(Pe, ""), n3 = Ne.get(e3) || Ie(e3), [a3, o3] = De(r3), l2 = n3[i3], c3 = a3 && !l2;
    l2 && !a3 && e3.removeEventListener(i3, n3), c3 && e3.addEventListener(i3, n3, o3), n3[i3] = a3;
  }
  function Me(e3) {
    return ie(e3) ? "" : e3;
  }
  const Le = (e3, t2) => {
    const r3 = e3.childNodes[t2];
    if (r3.nodeType === Node.COMMENT_NODE) {
      const t3 = document.createTextNode("");
      return e3.replaceChild(t3, r3), t3;
    }
    return r3;
  };
  function Oe(e3, t2, r3) {
    e3.data = Me(r3);
  }
  function _e(e3, t2, r3) {
    e3.value = Me(r3);
  }
  var Be = {[q2]: we, [z]: Fe, [V]: Oe, [J]: _e};
  const Re = {mount(e3) {
    return this.value = this.evaluate(e3), je(this, this.value), this;
  }, update(e3) {
    const t2 = this.evaluate(e3);
    return this.value !== t2 && (je(this, t2), this.value = t2), this;
  }, unmount() {
    return this.type === z && je(this, null), this;
  }};
  function je(e3, t2) {
    return Be[e3.type](e3.node, e3, t2, e3.value);
  }
  function Ue(e3, t2) {
    return Object.assign({}, Re, t2, {node: t2.type === V ? Le(e3, t2.childNodeIndex) : e3});
  }
  function qe(e3, t2, r3) {
    return t2.reduce((t3, s3) => Object.assign({}, t3, {[s3]: (t4) => e3.map((e4) => e4[s3](t4)) && r3}), {});
  }
  function ze(e3, t2) {
    let {expressions: r3} = t2;
    return Object.assign({}, qe(r3.map((t3) => Ue(e3, t3)), ["mount", "update", "unmount"]));
  }
  function Ve(e3, t2, r3) {
    if (!e3 || !e3.length)
      return r3;
    const s3 = e3.map((e4) => Object.assign({}, e4, {value: e4.evaluate(t2)}));
    return Object.assign(Object.create(r3 || null), xe(s3));
  }
  const Je = (e3, t2) => e3[I] || t2, Xe = {attributes: [], getTemplateScope(e3, t2) {
    return Ve(this.attributes, e3, t2);
  }, mount(e3, t2) {
    const r3 = !!e3.slots && e3.slots.find((e4) => {
      let {id: t3} = e4;
      return t3 === this.name;
    }), {parentNode: s3} = this.node, i3 = Je(e3, t2);
    return this.template = r3 && lt(r3.html, r3.bindings).createDOM(s3), this.template && (this.template.mount(this.node, this.getTemplateScope(e3, i3), i3), this.template.children = Array.from(this.node.childNodes), Ge(this.node)), a2(this.node), this;
  }, update(e3, t2) {
    if (this.template) {
      const r3 = Je(e3, t2);
      this.template.update(this.getTemplateScope(e3, r3), r3);
    }
    return this;
  }, unmount(e3, t2, r3) {
    return this.template && this.template.unmount(this.getTemplateScope(e3, t2), null, r3), this;
  }};
  function Ge(e3) {
    const t2 = e3 && e3.firstChild;
    t2 && (o2(t2, e3), Ge(e3));
  }
  function He(e3, t2) {
    let {name: r3, attributes: s3} = t2;
    return Object.assign({}, Xe, {attributes: s3, node: e3, name: r3});
  }
  function We(e3, t2, r3) {
    return t2 === void 0 && (t2 = []), r3 === void 0 && (r3 = []), e3 ? e3({slots: t2, attributes: r3}) : lt($e(t2), [...Ke(t2), {expressions: r3.map((e4) => Object.assign({type: q2}, e4))}]);
  }
  function Ke(e3) {
    return e3.reduce((e4, t2) => {
      let {bindings: r3} = t2;
      return e4.concat(r3);
    }, []);
  }
  function $e(e3) {
    return e3.reduce((e4, t2) => e4 + t2.html, "");
  }
  const Ye = {mount(e3) {
    return this.update(e3);
  }, update(e3, t2) {
    const r3 = this.evaluate(e3);
    return r3 && r3 === this.name ? this.tag.update(e3) : (this.unmount(e3, t2, true), this.name = r3, this.tag = We(this.getComponent(r3), this.slots, this.attributes), this.tag.mount(this.node, e3)), this;
  }, unmount(e3, t2, r3) {
    return this.tag && this.tag.unmount(r3), this;
  }};
  function Qe(e3, t2) {
    let {evaluate: r3, getComponent: s3, slots: i3, attributes: n3} = t2;
    return Object.assign({}, Ye, {node: e3, evaluate: r3, slots: i3, attributes: n3, getComponent: s3});
  }
  var Ze = {[_2]: me, [B2]: ze, [O2]: de, [R]: Qe, [j2]: He};
  function et(e3, t2) {
    return e3.map((e4) => e4.type === V ? Object.assign({}, e4, {childNodeIndex: e4.childNodeIndex + t2}) : e4);
  }
  function tt(e3, t2, r3) {
    const {selector: s3, type: i3, redundantAttribute: n3, expressions: a3} = t2, o3 = s3 ? e3.querySelector(s3) : e3;
    n3 && o3.removeAttribute(n3);
    const l2 = a3 || [];
    return (Ze[i3] || Ze[B2])(o3, Object.assign({}, t2, {expressions: r3 && !s3 ? et(l2, r3) : l2}));
  }
  function rt(e3, t2) {
    const r3 = ee(t2) ? t2 : document.createElement("template");
    return r3.innerHTML = e3, r3.content;
  }
  function st(e3, t2) {
    return t2.ownerDocument.importNode(new window.DOMParser().parseFromString(`<svg xmlns="http://www.w3.org/2000/svg">${e3}</svg>`, "application/xml").documentElement, true);
  }
  function it(e3, t2) {
    return Z(e3) ? st(t2, e3) : rt(t2, e3);
  }
  function nt(e3, t2) {
    switch (true) {
      case Z(e3):
        s2(t2, e3);
        break;
      case ee(e3):
        e3.parentNode.replaceChild(t2, e3);
        break;
      default:
        e3.appendChild(t2);
    }
  }
  function at(e3, t2) {
    return t2 && (typeof t2 == "string" ? it(e3, t2) : t2);
  }
  const ot = Object.freeze({createDOM(e3) {
    return this.dom = this.dom || at(e3, this.html), this;
  }, mount(e3, t2, r3, s3) {
    if (s3 === void 0 && (s3 = {}), !e3)
      throw new Error("Please provide DOM node to mount properly your template");
    this.el && this.unmount(t2);
    const {fragment: i3, children: n3, avoidDOMInjection: a3} = s3, {parentNode: o3} = n3 ? n3[0] : e3, l2 = ee(e3), c3 = l2 ? Math.max(Array.from(o3.childNodes).indexOf(e3), 0) : null;
    return this.isTemplateTag = l2, this.createDOM(e3), this.dom && (this.fragment = i3 || this.dom.cloneNode(true)), this.el = this.isTemplateTag ? o3 : e3, this.children = this.isTemplateTag ? n3 || Array.from(this.fragment.childNodes) : null, !a3 && this.fragment && nt(e3, this.fragment), this.bindings = this.bindingsData.map((e4) => tt(this.el, e4, c3)), this.bindings.forEach((e4) => e4.mount(t2, r3)), this.meta = s3, this;
  }, update(e3, t2) {
    return this.bindings.forEach((r3) => r3.update(e3, t2)), this;
  }, unmount(e3, t2, r3) {
    if (this.el) {
      switch (this.bindings.forEach((s3) => s3.unmount(e3, t2, r3)), true) {
        case this.el[k2]:
          break;
        case (this.children && r3 !== null):
          n2(this.children);
          break;
        case r3 === true:
          a2(this.el);
          break;
        case r3 !== null:
          i2(this.el);
      }
      this.el = null;
    }
    return this;
  }, clone() {
    return Object.assign({}, this, {meta: {}, el: null});
  }});
  function lt(e3, t2) {
    return t2 === void 0 && (t2 = []), Object.assign({}, ot, {html: e3, bindingsData: t2});
  }
  var ct = Object.freeze({__proto__: null, template: lt, createBinding: tt, createExpression: Ue, bindingTypes: U, expressionTypes: X});
  function ut() {
    return this;
  }
  function ht(e3, t2) {
    return t2.forEach((t3) => {
      e3[t3] = e3[t3].bind(e3);
    }), e3;
  }
  function pt(e3) {
    return te(e3) ? e3.prototype && e3.prototype.constructor ? new e3() : e3() : e3;
  }
  function dt(e3, t2, r3, s3) {
    return s3 === void 0 && (s3 = {}), Object.defineProperty(e3, t2, Object.assign({value: r3, enumerable: false, writable: false, configurable: true}, s3)), e3;
  }
  function ft(e3, t2, r3) {
    return Object.entries(t2).forEach((t3) => {
      let [s3, i3] = t3;
      dt(e3, s3, i3, r3);
    }), e3;
  }
  function mt(e3, t2) {
    return Object.entries(t2).forEach((t3) => {
      let [r3, s3] = t3;
      e3[r3] || (e3[r3] = s3);
    }), e3;
  }
  function yt(e3) {
    return Array.isArray(e3) ? e3 : /^\[object (HTMLCollection|NodeList|Object)\]$/.test(Object.prototype.toString.call(e3)) && typeof e3.length == "number" ? Array.from(e3) : [e3];
  }
  function gt(e3, t2) {
    return yt(typeof e3 == "string" ? (t2 || document).querySelectorAll(e3) : e3);
  }
  const xt = (e3) => e3.length === 1 ? e3[0] : e3;
  function bt(e3, t2, r3) {
    const s3 = typeof t2 == "string" ? [t2] : t2;
    return xt(yt(e3).map((e4) => xt(s3.map((t3) => e4[r3](t3)))));
  }
  function Et(e3, t2, r3) {
    const s3 = typeof t2 == "object" ? t2 : {[t2]: r3}, i3 = Object.keys(s3);
    return yt(e3).forEach((e4) => {
      i3.forEach((t3) => e4.setAttribute(t3, s3[t3]));
    }), e3;
  }
  function vt(e3, t2) {
    return bt(e3, t2, "getAttribute");
  }
  const St = new Map(), At = "style[riot]", Tt = () => wt || (Et(wt = gt(At)[0] || document.createElement("style"), "type", "text/css"), wt.parentNode || document.head.appendChild(wt), wt);
  var wt, Ct = {CSS_BY_NAME: St, add(e3, t2) {
    return St.has(e3) || (St.set(e3, t2), this.inject()), this;
  }, inject() {
    return Tt().innerHTML = [...St.values()].join("\n"), this;
  }, remove(e3) {
    return St.has(e3) && (St.delete(e3), this.inject()), this;
  }};
  function Pt(e3) {
    for (var t2 = arguments.length, r3 = new Array(t2 > 1 ? t2 - 1 : 0), s3 = 1; s3 < t2; s3++)
      r3[s3 - 1] = arguments[s3];
    return function() {
      for (var t3 = arguments.length, s4 = new Array(t3), i3 = 0; i3 < t3; i3++)
        s4[i3] = arguments[i3];
      return (s4 = [...r3, ...s4]).length < e3.length ? Pt(e3, ...s4) : e3(...s4);
    };
  }
  function Dt(e3) {
    return vt(e3, d2) || e3.tagName.toLowerCase();
  }
  const kt = Object.freeze({$(e3) {
    return gt(e3, this.root)[0];
  }, $$(e3) {
    return gt(e3, this.root);
  }}), Nt = Object.freeze({[m2]: ut, [y2]: ut, [g2]: ut}), It = Object.freeze({[x2]: ut, [b]: ut, [E2]: ut, [v2]: ut, [S2]: ut, [A]: ut, [T]: ut}), Ft = Object.assign({}, Nt, {clone: ut, createDOM: ut}), Mt = ge(jt);
  function Lt(e3, t2) {
    return t2 === void 0 && (t2 = {}), Object.assign({}, r2(e3), pt(t2));
  }
  const Ot = (e3, t2) => e3[h2] = t2;
  function _t(e3) {
    return [m2, y2, g2].reduce((t2, r3) => (t2[r3] = e3(r3), t2), {});
  }
  function Bt(e3, t2) {
    const r3 = zt(t2.exports ? t2.exports.components : {});
    return e3(lt, X, U, (e4) => e4 === t2.name ? Mt(t2) : r3[e4] || u.get(e4));
  }
  function Rt(e3, t2) {
    let {slots: r3, attributes: s3, props: i3, css: n3, template: a3} = t2;
    a3 && ye("Pure components can not have html"), n3 && ye("Pure components do not have css");
    const o3 = mt(e3({slots: r3, attributes: s3, props: i3}), Nt);
    return _t((e4) => function() {
      for (var t3 = arguments.length, r4 = new Array(t3), s4 = 0; s4 < t3; s4++)
        r4[s4] = arguments[s4];
      if (e4 === m2) {
        const [e5] = r4;
        e5[k2] = true, Ot(e5, o3);
      }
      return o3[e4](...r4), o3;
    });
  }
  function jt(e3) {
    const {css: t2, template: r3, exports: s3, name: i3} = e3, n3 = r3 ? Bt(r3, e3) : Ft;
    return (e4) => {
      let {slots: a3, attributes: o3, props: l2} = e4;
      if (s3 && s3[k2])
        return Rt(s3, {slots: a3, attributes: o3, props: l2, css: t2, template: r3});
      const c3 = pt(s3) || {}, u2 = Ut({css: t2, template: n3, componentAPI: c3, name: i3})({slots: a3, attributes: o3, props: l2});
      return {mount: (e5, t3, r4) => u2.mount(e5, r4, t3), update: (e5, t3) => u2.update(t3, e5), unmount: (e5) => u2.unmount(e5)};
    };
  }
  function Ut(e3) {
    let {css: t2, template: r3, componentAPI: s3, name: i3} = e3;
    return t2 && i3 && Ct.add(i3, t2), Pt(Gt)(ft(mt(s3, Object.assign({}, It, {[w2]: {}, [C]: {}})), Object.assign({[P]: null, [D]: null}, kt, {name: i3, css: t2, template: r3})));
  }
  function qt(e3, t2) {
    t2 === void 0 && (t2 = []);
    const r3 = t2.map((t3) => Ue(e3, t3)), s3 = {};
    return Object.assign(s3, Object.assign({expressions: r3}, _t((e4) => (t3) => (r3.forEach((r4) => r4[e4](t3)), s3))));
  }
  function zt(t2) {
    return t2 === void 0 && (t2 = {}), Object.entries(pt(t2)).reduce((t3, r3) => {
      let [s3, i3] = r3;
      return t3[e2(s3)] = jt(i3), t3;
    }, {});
  }
  function Vt(e3) {
    return [...p2].reduce((e4, t2) => t2(e4) || e4, e3);
  }
  function Jt(e3, t2) {
    return Object.assign({}, e3, pt(t2));
  }
  function Xt(e3, t2) {
    Dt(e3) !== t2 && Et(e3, d2, t2);
  }
  function Gt(e3, t2) {
    let {slots: r3, attributes: s3, props: i3} = t2;
    return ht(Vt(ft(se(e3) ? Object.create(e3) : e3, {mount(t3, n3, a3) {
      return n3 === void 0 && (n3 = {}), this[I] = a3, this[F] = qt(t3, s3).mount(a3), dt(this, w2, Object.freeze(Object.assign({}, Lt(t3, i3), xe(this[F].expressions)))), this[C] = Jt(this[C], n3), this[M2] = this.template.createDOM(t3).clone(), Ot(t3, this), e3.name && Xt(t3, e3.name), dt(this, D, t3), dt(this, P, r3), this[b](this[w2], this[C]), this[M2].mount(t3, this, a3), this[E2](this[w2], this[C]), this;
    }, update(e4, t3) {
      e4 === void 0 && (e4 = {}), t3 && (this[I] = t3, this[F].update(t3));
      const r4 = xe(this[F].expressions);
      if (this[x2](r4, this[w2]) !== false)
        return dt(this, w2, Object.freeze(Object.assign({}, this[w2], r4))), this[C] = Jt(this[C], e4), this[v2](this[w2], this[C]), this[N] || (this[N] = true, this[M2].update(this, this[I])), this[S2](this[w2], this[C]), this[N] = false, this;
    }, unmount(e4) {
      return this[A](this[w2], this[C]), this[F].unmount(), this[M2].unmount(this, this[I], e4 === null ? null : !e4), this[T](this[w2], this[C]), this;
    }})), Object.keys(e3).filter((t3) => te(e3[t3])));
  }
  function Ht(e3, t2, r3) {
    const s3 = r3 || Dt(e3);
    return u.has(s3) || ye(`The component named "${s3}" was never registered`), u.get(s3)({props: t2}).mount(e3);
  }
  function Wt() {
    for (var e3 = arguments.length, t2 = new Array(e3), r3 = 0; r3 < e3; r3++)
      t2[r3] = arguments[r3];
    return t2.reduce((e4, t3) => function() {
      return e4(t3(...arguments));
    });
  }
  const {DOM_COMPONENT_INSTANCE_PROPERTY: Kt, COMPONENTS_IMPLEMENTATION_MAP: $t, PLUGINS_SET: Yt} = L;
  function Qt(e3, t2) {
    let {css: r3, template: s3, exports: i3} = t2;
    return $t.has(e3) && ye(`The component "${e3}" was already registered`), $t.set(e3, jt({name: e3, css: r3, template: s3, exports: i3})), $t;
  }
  function Zt(e3) {
    return $t.has(e3) || ye(`The component "${e3}" was never registered`), $t.delete(e3), Ct.remove(e3), $t;
  }
  function er(e3, t2, r3) {
    return gt(e3).map((e4) => Ht(e4, t2, r3));
  }
  function tr(e3, t2) {
    return gt(e3).map((e4) => (e4[Kt] && e4[Kt].unmount(t2), e4));
  }
  function rr(e3) {
    return te(e3) || ye("Plugins must be of type function"), Yt.has(e3) && ye("This plugin was already installed"), Yt.add(e3), Yt;
  }
  function sr(e3) {
    return Yt.has(e3) || ye("This plugin was never installed"), Yt.delete(e3), Yt;
  }
  function ir(e3) {
    return function(t2, r3, s3) {
      let {slots: i3, attributes: n3, parentScope: a3} = s3 === void 0 ? {} : s3;
      return Wt((e4) => e4.mount(t2, a3), (e4) => e4({props: r3, slots: i3, attributes: n3}), jt)(e3);
    };
  }
  function nr(e3) {
    return te(e3) || ye('riot.pure accepts only arguments of type "function"'), e3[k2] = true, e3;
  }
  const ar = "v5.4.2", or = {cssManager: Ct, DOMBindings: ct, createComponent: jt, defineComponent: Ut, globals: L};
  var lr = Object.freeze({__proto__: null, register: Qt, unregister: Zt, mount: er, unmount: tr, install: rr, uninstall: sr, component: ir, pure: nr, version: ar, __: or});
  function cr(e3) {
    return e3 && e3.__esModule && Object.prototype.hasOwnProperty.call(e3, "default") ? e3.default : e3;
  }
  var ur, hr = {exports: {}}, pr = void 0, dr = void 0, fr = void 0;
  ur = hr.exports, function(e3, t2) {
    t2(ur, pr, dr, fr);
  }(0, function(e3, t2, r3, s3) {
    var i3 = window;
    function n3(e4) {
      return e4 && typeof e4 == "object" && "default" in e4 ? e4 : {default: e4};
    }
    var a3 = n3(t2), o3 = n3(r3), l2 = n3(s3);
    const c3 = "exports", u2 = "css", h3 = "template", p3 = "name";
    function d3(e4) {
      if (e4.__esModule)
        return e4;
      var t3 = Object.defineProperty({}, "__esModule", {value: true});
      return Object.keys(e4).forEach(function(r4) {
        var s4 = Object.getOwnPropertyDescriptor(e4, r4);
        Object.defineProperty(t3, r4, s4.get ? s4 : {enumerable: true, get: function() {
          return e4[r4];
        }});
      }), t3;
    }
    function f3(e4) {
      var t3 = {exports: {}};
      return e4(t3, t3.exports), t3.exports;
      /*! *****************************************************************************
                	Copyright (c) Microsoft Corporation.
              
                	Permission to use, copy, modify, and/or distribute this software for any
                	purpose with or without fee is hereby granted.
              
                	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
                	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
                	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
                	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
                	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
                	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
                	PERFORMANCE OF THIS SOFTWARE.
                	***************************************************************************** */
    }
    var m3 = function(e4, t3) {
      return (m3 = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(e5, t4) {
        e5.__proto__ = t4;
      } || function(e5, t4) {
        for (var r4 in t4)
          Object.prototype.hasOwnProperty.call(t4, r4) && (e5[r4] = t4[r4]);
      })(e4, t3);
    };
    function y3(e4, t3) {
      function r4() {
        this.constructor = e4;
      }
      m3(e4, t3), e4.prototype = t3 === null ? Object.create(t3) : (r4.prototype = t3.prototype, new r4());
    }
    var g3 = function() {
      return (g3 = Object.assign || function(e4) {
        for (var t3, r4 = 1, s4 = arguments.length; r4 < s4; r4++)
          for (var i4 in t3 = arguments[r4])
            Object.prototype.hasOwnProperty.call(t3, i4) && (e4[i4] = t3[i4]);
        return e4;
      }).apply(this, arguments);
    };
    function x3(e4, t3) {
      var r4 = {};
      for (var s4 in e4)
        Object.prototype.hasOwnProperty.call(e4, s4) && t3.indexOf(s4) < 0 && (r4[s4] = e4[s4]);
      if (e4 != null && typeof Object.getOwnPropertySymbols == "function") {
        var i4 = 0;
        for (s4 = Object.getOwnPropertySymbols(e4); i4 < s4.length; i4++)
          t3.indexOf(s4[i4]) < 0 && Object.prototype.propertyIsEnumerable.call(e4, s4[i4]) && (r4[s4[i4]] = e4[s4[i4]]);
      }
      return r4;
    }
    function b2(e4, t3, r4, s4) {
      var i4, n4 = arguments.length, a4 = n4 < 3 ? t3 : s4 === null ? s4 = Object.getOwnPropertyDescriptor(t3, r4) : s4;
      if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
        a4 = Reflect.decorate(e4, t3, r4, s4);
      else
        for (var o4 = e4.length - 1; o4 >= 0; o4--)
          (i4 = e4[o4]) && (a4 = (n4 < 3 ? i4(a4) : n4 > 3 ? i4(t3, r4, a4) : i4(t3, r4)) || a4);
      return n4 > 3 && a4 && Object.defineProperty(t3, r4, a4), a4;
    }
    function E3(e4, t3) {
      return function(r4, s4) {
        t3(r4, s4, e4);
      };
    }
    function v3(e4, t3) {
      if (typeof Reflect == "object" && typeof Reflect.metadata == "function")
        return Reflect.metadata(e4, t3);
    }
    function S3(e4, t3, r4, s4) {
      function i4(e5) {
        return e5 instanceof r4 ? e5 : new r4(function(t4) {
          t4(e5);
        });
      }
      return new (r4 || (r4 = Promise))(function(r5, n4) {
        function a4(e5) {
          try {
            l3(s4.next(e5));
          } catch (t4) {
            n4(t4);
          }
        }
        function o4(e5) {
          try {
            l3(s4.throw(e5));
          } catch (t4) {
            n4(t4);
          }
        }
        function l3(e5) {
          e5.done ? r5(e5.value) : i4(e5.value).then(a4, o4);
        }
        l3((s4 = s4.apply(e4, t3 || [])).next());
      });
    }
    function A2(e4, t3) {
      var r4, s4, i4, n4, a4 = {label: 0, sent: function() {
        if (1 & i4[0])
          throw i4[1];
        return i4[1];
      }, trys: [], ops: []};
      return n4 = {next: o4(0), throw: o4(1), return: o4(2)}, typeof Symbol == "function" && (n4[Symbol.iterator] = function() {
        return this;
      }), n4;
      function o4(e5) {
        return function(t4) {
          return l3([e5, t4]);
        };
      }
      function l3(n5) {
        if (r4)
          throw new TypeError("Generator is already executing.");
        for (; a4; )
          try {
            if (r4 = 1, s4 && (i4 = 2 & n5[0] ? s4.return : n5[0] ? s4.throw || ((i4 = s4.return) && i4.call(s4), 0) : s4.next) && !(i4 = i4.call(s4, n5[1])).done)
              return i4;
            switch (s4 = 0, i4 && (n5 = [2 & n5[0], i4.value]), n5[0]) {
              case 0:
              case 1:
                i4 = n5;
                break;
              case 4:
                return a4.label++, {value: n5[1], done: false};
              case 5:
                a4.label++, s4 = n5[1], n5 = [0];
                continue;
              case 7:
                n5 = a4.ops.pop(), a4.trys.pop();
                continue;
              default:
                if (!((i4 = (i4 = a4.trys).length > 0 && i4[i4.length - 1]) || n5[0] !== 6 && n5[0] !== 2)) {
                  a4 = 0;
                  continue;
                }
                if (n5[0] === 3 && (!i4 || n5[1] > i4[0] && n5[1] < i4[3])) {
                  a4.label = n5[1];
                  break;
                }
                if (n5[0] === 6 && a4.label < i4[1]) {
                  a4.label = i4[1], i4 = n5;
                  break;
                }
                if (i4 && a4.label < i4[2]) {
                  a4.label = i4[2], a4.ops.push(n5);
                  break;
                }
                i4[2] && a4.ops.pop(), a4.trys.pop();
                continue;
            }
            n5 = t3.call(e4, a4);
          } catch (o5) {
            n5 = [6, o5], s4 = 0;
          } finally {
            r4 = i4 = 0;
          }
        if (5 & n5[0])
          throw n5[1];
        return {value: n5[0] ? n5[1] : void 0, done: true};
      }
    }
    var T2 = Object.create ? function(e4, t3, r4, s4) {
      s4 === void 0 && (s4 = r4), Object.defineProperty(e4, s4, {enumerable: true, get: function() {
        return t3[r4];
      }});
    } : function(e4, t3, r4, s4) {
      s4 === void 0 && (s4 = r4), e4[s4] = t3[r4];
    };
    function w3(e4, t3) {
      for (var r4 in e4)
        r4 === "default" || Object.prototype.hasOwnProperty.call(t3, r4) || T2(t3, e4, r4);
    }
    function C2(e4) {
      var t3 = typeof Symbol == "function" && Symbol.iterator, r4 = t3 && e4[t3], s4 = 0;
      if (r4)
        return r4.call(e4);
      if (e4 && typeof e4.length == "number")
        return {next: function() {
          return e4 && s4 >= e4.length && (e4 = void 0), {value: e4 && e4[s4++], done: !e4};
        }};
      throw new TypeError(t3 ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function P2(e4, t3) {
      var r4 = typeof Symbol == "function" && e4[Symbol.iterator];
      if (!r4)
        return e4;
      var s4, i4, n4 = r4.call(e4), a4 = [];
      try {
        for (; (t3 === void 0 || t3-- > 0) && !(s4 = n4.next()).done; )
          a4.push(s4.value);
      } catch (o4) {
        i4 = {error: o4};
      } finally {
        try {
          s4 && !s4.done && (r4 = n4.return) && r4.call(n4);
        } finally {
          if (i4)
            throw i4.error;
        }
      }
      return a4;
    }
    function D2() {
      for (var e4 = [], t3 = 0; t3 < arguments.length; t3++)
        e4 = e4.concat(P2(arguments[t3]));
      return e4;
    }
    function k3() {
      for (var e4 = 0, t3 = 0, r4 = arguments.length; t3 < r4; t3++)
        e4 += arguments[t3].length;
      var s4 = Array(e4), i4 = 0;
      for (t3 = 0; t3 < r4; t3++)
        for (var n4 = arguments[t3], a4 = 0, o4 = n4.length; a4 < o4; a4++, i4++)
          s4[i4] = n4[a4];
      return s4;
    }
    function N2(e4) {
      return this instanceof N2 ? (this.v = e4, this) : new N2(e4);
    }
    function I2(e4, t3, r4) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var s4, i4 = r4.apply(e4, t3 || []), n4 = [];
      return s4 = {}, a4("next"), a4("throw"), a4("return"), s4[Symbol.asyncIterator] = function() {
        return this;
      }, s4;
      function a4(e5) {
        i4[e5] && (s4[e5] = function(t4) {
          return new Promise(function(r5, s5) {
            n4.push([e5, t4, r5, s5]) > 1 || o4(e5, t4);
          });
        });
      }
      function o4(e5, t4) {
        try {
          l3(i4[e5](t4));
        } catch (r5) {
          h4(n4[0][3], r5);
        }
      }
      function l3(e5) {
        e5.value instanceof N2 ? Promise.resolve(e5.value.v).then(c4, u3) : h4(n4[0][2], e5);
      }
      function c4(e5) {
        o4("next", e5);
      }
      function u3(e5) {
        o4("throw", e5);
      }
      function h4(e5, t4) {
        e5(t4), n4.shift(), n4.length && o4(n4[0][0], n4[0][1]);
      }
    }
    function F2(e4) {
      var t3, r4;
      return t3 = {}, s4("next"), s4("throw", function(e5) {
        throw e5;
      }), s4("return"), t3[Symbol.iterator] = function() {
        return this;
      }, t3;
      function s4(s5, i4) {
        t3[s5] = e4[s5] ? function(t4) {
          return (r4 = !r4) ? {value: N2(e4[s5](t4)), done: s5 === "return"} : i4 ? i4(t4) : t4;
        } : i4;
      }
    }
    function M3(e4) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var t3, r4 = e4[Symbol.asyncIterator];
      return r4 ? r4.call(e4) : (e4 = typeof C2 == "function" ? C2(e4) : e4[Symbol.iterator](), t3 = {}, s4("next"), s4("throw"), s4("return"), t3[Symbol.asyncIterator] = function() {
        return this;
      }, t3);
      function s4(r5) {
        t3[r5] = e4[r5] && function(t4) {
          return new Promise(function(s5, n4) {
            i4(s5, n4, (t4 = e4[r5](t4)).done, t4.value);
          });
        };
      }
      function i4(e5, t4, r5, s5) {
        Promise.resolve(s5).then(function(t5) {
          e5({value: t5, done: r5});
        }, t4);
      }
    }
    function L2(e4, t3) {
      return Object.defineProperty ? Object.defineProperty(e4, "raw", {value: t3}) : e4.raw = t3, e4;
    }
    var O3 = Object.create ? function(e4, t3) {
      Object.defineProperty(e4, "default", {enumerable: true, value: t3});
    } : function(e4, t3) {
      e4.default = t3;
    };
    function _3(e4) {
      if (e4 && e4.__esModule)
        return e4;
      var t3 = {};
      if (e4 != null)
        for (var r4 in e4)
          r4 !== "default" && Object.prototype.hasOwnProperty.call(e4, r4) && T2(t3, e4, r4);
      return O3(t3, e4), t3;
    }
    function B3(e4) {
      return e4 && e4.__esModule ? e4 : {default: e4};
    }
    function R2(e4, t3) {
      if (!t3.has(e4))
        throw new TypeError("attempted to get private field on non-instance");
      return t3.get(e4);
    }
    function j3(e4, t3, r4) {
      if (!t3.has(e4))
        throw new TypeError("attempted to set private field on non-instance");
      return t3.set(e4, r4), r4;
    }
    var U2 = d3(Object.freeze({__proto__: null, __extends: y3, get __assign() {
      return g3;
    }, __rest: x3, __decorate: b2, __param: E3, __metadata: v3, __awaiter: S3, __generator: A2, __createBinding: T2, __exportStar: w3, __values: C2, __read: P2, __spread: D2, __spreadArrays: k3, __await: N2, __asyncGenerator: I2, __asyncDelegator: F2, __asyncValues: M3, __makeTemplateObject: L2, __importStar: _3, __importDefault: B3, __classPrivateFieldGet: R2, __classPrivateFieldSet: j3})), q3 = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true}), t3.Def = void 0;
      var r4 = Object.prototype, s4 = r4.toString, i4 = r4.hasOwnProperty, n4 = function() {
        function e5() {
        }
        return e5.prototype.assert = function(e6, t4) {
          if (!this.check(e6, t4)) {
            var r5 = d4(e6);
            throw new Error(r5 + " does not match type " + this);
          }
          return true;
        }, e5.prototype.arrayOf = function() {
          return new a4(this);
        }, e5;
      }(), a4 = function(e5) {
        function t4(t5) {
          var r5 = e5.call(this) || this;
          return r5.elemType = t5, r5.kind = "ArrayType", r5;
        }
        return U2.__extends(t4, e5), t4.prototype.toString = function() {
          return "[" + this.elemType + "]";
        }, t4.prototype.check = function(e6, t5) {
          var r5 = this;
          return Array.isArray(e6) && e6.every(function(e7) {
            return r5.elemType.check(e7, t5);
          });
        }, t4;
      }(n4), o4 = function(e5) {
        function t4(t5) {
          var r5 = e5.call(this) || this;
          return r5.value = t5, r5.kind = "IdentityType", r5;
        }
        return U2.__extends(t4, e5), t4.prototype.toString = function() {
          return String(this.value);
        }, t4.prototype.check = function(e6, t5) {
          var r5 = e6 === this.value;
          return r5 || typeof t5 != "function" || t5(this, e6), r5;
        }, t4;
      }(n4), l3 = function(e5) {
        function t4(t5) {
          var r5 = e5.call(this) || this;
          return r5.fields = t5, r5.kind = "ObjectType", r5;
        }
        return U2.__extends(t4, e5), t4.prototype.toString = function() {
          return "{ " + this.fields.join(", ") + " }";
        }, t4.prototype.check = function(e6, t5) {
          return s4.call(e6) === s4.call({}) && this.fields.every(function(r5) {
            return r5.type.check(e6[r5.name], t5);
          });
        }, t4;
      }(n4), c4 = function(e5) {
        function t4(t5) {
          var r5 = e5.call(this) || this;
          return r5.types = t5, r5.kind = "OrType", r5;
        }
        return U2.__extends(t4, e5), t4.prototype.toString = function() {
          return this.types.join(" | ");
        }, t4.prototype.check = function(e6, t5) {
          return this.types.some(function(r5) {
            return r5.check(e6, t5);
          });
        }, t4;
      }(n4), u3 = function(e5) {
        function t4(t5, r5) {
          var s5 = e5.call(this) || this;
          return s5.name = t5, s5.predicate = r5, s5.kind = "PredicateType", s5;
        }
        return U2.__extends(t4, e5), t4.prototype.toString = function() {
          return this.name;
        }, t4.prototype.check = function(e6, t5) {
          var r5 = this.predicate(e6, t5);
          return r5 || typeof t5 != "function" || t5(this, e6), r5;
        }, t4;
      }(n4), h4 = function() {
        function e5(e6, t4) {
          this.type = e6, this.typeName = t4, this.baseNames = [], this.ownFields = Object.create(null), this.allSupertypes = Object.create(null), this.supertypeList = [], this.allFields = Object.create(null), this.fieldNames = [], this.finalized = false, this.buildable = false, this.buildParams = [];
        }
        return e5.prototype.isSupertypeOf = function(t4) {
          if (t4 instanceof e5) {
            if (this.finalized !== true || t4.finalized !== true)
              throw new Error("");
            return i4.call(t4.allSupertypes, this.typeName);
          }
          throw new Error(t4 + " is not a Def");
        }, e5.prototype.checkAllFields = function(e6, t4) {
          var r5 = this.allFields;
          if (this.finalized !== true)
            throw new Error("" + this.typeName);
          function s5(s6) {
            var i5 = r5[s6], n5 = i5.type, a5 = i5.getValue(e6);
            return n5.check(a5, t4);
          }
          return e6 !== null && typeof e6 == "object" && Object.keys(r5).every(s5);
        }, e5.prototype.bases = function() {
          for (var e6 = [], t4 = 0; t4 < arguments.length; t4++)
            e6[t4] = arguments[t4];
          var r5 = this.baseNames;
          if (this.finalized) {
            if (e6.length !== r5.length)
              throw new Error("");
            for (var s5 = 0; s5 < e6.length; s5++)
              if (e6[s5] !== r5[s5])
                throw new Error("");
            return this;
          }
          return e6.forEach(function(e7) {
            r5.indexOf(e7) < 0 && r5.push(e7);
          }), this;
        }, e5;
      }();
      t3.Def = h4;
      var p4 = function() {
        function e5(e6, t4, r5, s5) {
          this.name = e6, this.type = t4, this.defaultFn = r5, this.hidden = !!s5;
        }
        return e5.prototype.toString = function() {
          return JSON.stringify(this.name) + ": " + this.type;
        }, e5.prototype.getValue = function(e6) {
          var t4 = e6[this.name];
          return t4 !== void 0 || typeof this.defaultFn == "function" && (t4 = this.defaultFn.call(e6)), t4;
        }, e5;
      }();
      function d4(e5) {
        return Array.isArray(e5) ? "[" + e5.map(d4).join(", ") + "]" : e5 && typeof e5 == "object" ? "{ " + Object.keys(e5).map(function(t4) {
          return t4 + ": " + e5[t4];
        }).join(", ") + " }" : JSON.stringify(e5);
      }
      function f4(e5) {
        var t4 = {or: function() {
          for (var e6 = [], r6 = 0; r6 < arguments.length; r6++)
            e6[r6] = arguments[r6];
          return new c4(e6.map(function(e7) {
            return t4.from(e7);
          }));
        }, from: function(e6, s5) {
          if (e6 instanceof a4 || e6 instanceof o4 || e6 instanceof l3 || e6 instanceof c4 || e6 instanceof u3)
            return e6;
          if (e6 instanceof h4)
            return e6.type;
          if (g4.check(e6)) {
            if (e6.length !== 1)
              throw new Error("only one element type is permitted for typed arrays");
            return new a4(t4.from(e6[0]));
          }
          if (x4.check(e6))
            return new l3(Object.keys(e6).map(function(r6) {
              return new p4(r6, t4.from(e6[r6], r6));
            }));
          if (typeof e6 == "function") {
            var i5 = r5.indexOf(e6);
            if (i5 >= 0)
              return n5[i5];
            if (typeof s5 != "string")
              throw new Error("missing name");
            return new u3(s5, e6);
          }
          return new o4(e6);
        }, def: function(e6) {
          return i4.call(C3, e6) ? C3[e6] : C3[e6] = new D3(e6);
        }, hasDef: function(e6) {
          return i4.call(C3, e6);
        }}, r5 = [], n5 = [];
        function f5(e6, t5) {
          var i5 = s4.call(t5), a5 = new u3(e6, function(e7) {
            return s4.call(e7) === i5;
          });
          return t5 && typeof t5.constructor == "function" && (r5.push(t5.constructor), n5.push(a5)), a5;
        }
        var m4 = f5("string", "truthy"), y4 = f5("function", function() {
        }), g4 = f5("array", []), x4 = f5("object", {}), b3 = f5("RegExp", /./), E4 = f5("Date", new Date()), v5 = f5("number", 3), S4 = f5("boolean", true), A3 = f5("null", null), T3 = f5("undefined", void 0), w4 = {string: m4, function: y4, array: g4, object: x4, RegExp: b3, Date: E4, number: v5, boolean: S4, null: A3, undefined: T3}, C3 = Object.create(null);
        function P3(e6) {
          if (e6 && typeof e6 == "object") {
            var t5 = e6.type;
            if (typeof t5 == "string" && i4.call(C3, t5)) {
              var r6 = C3[t5];
              if (r6.finalized)
                return r6;
            }
          }
          return null;
        }
        var D3 = function(e6) {
          function r6(t5) {
            var r7 = e6.call(this, new u3(t5, function(e7, t6) {
              return r7.check(e7, t6);
            }), t5) || this;
            return r7;
          }
          return U2.__extends(r6, e6), r6.prototype.check = function(e7, t5) {
            if (this.finalized !== true)
              throw new Error("prematurely checking unfinalized type " + this.typeName);
            if (e7 === null || typeof e7 != "object")
              return false;
            var r7 = P3(e7);
            return r7 ? t5 && r7 === this ? this.checkAllFields(e7, t5) : !!this.isSupertypeOf(r7) && (!t5 || r7.checkAllFields(e7, t5) && this.checkAllFields(e7, false)) : (this.typeName === "SourceLocation" || this.typeName === "Position") && this.checkAllFields(e7, t5);
          }, r6.prototype.build = function() {
            for (var e7 = this, t5 = [], r7 = 0; r7 < arguments.length; r7++)
              t5[r7] = arguments[r7];
            if (this.buildParams = t5, this.buildable)
              return this;
            this.field("type", String, function() {
              return e7.typeName;
            }), this.buildable = true;
            var s5 = function(t6, r8, s6, n7) {
              if (!i4.call(t6, r8)) {
                var a5 = e7.allFields;
                if (!i4.call(a5, r8))
                  throw new Error("" + r8);
                var o5, l4 = a5[r8], c5 = l4.type;
                if (n7)
                  o5 = s6;
                else {
                  if (!l4.defaultFn) {
                    var u4 = "no value or default function given for field " + JSON.stringify(r8) + " of " + e7.typeName + "(" + e7.buildParams.map(function(e8) {
                      return a5[e8];
                    }).join(", ") + ")";
                    throw new Error(u4);
                  }
                  o5 = l4.defaultFn.call(t6);
                }
                if (!c5.check(o5))
                  throw new Error(d4(o5) + " does not match field " + l4 + " of type " + e7.typeName);
                t6[r8] = o5;
              }
            }, n6 = function() {
              for (var t6 = [], r8 = 0; r8 < arguments.length; r8++)
                t6[r8] = arguments[r8];
              var i5 = t6.length;
              if (!e7.finalized)
                throw new Error("attempting to instantiate unfinalized type " + e7.typeName);
              var n7 = Object.create(F3);
              if (e7.buildParams.forEach(function(e8, r9) {
                r9 < i5 ? s5(n7, e8, t6[r9], true) : s5(n7, e8, null, false);
              }), Object.keys(e7.allFields).forEach(function(e8) {
                s5(n7, e8, null, false);
              }), n7.type !== e7.typeName)
                throw new Error("");
              return n7;
            };
            return n6.from = function(t6) {
              if (!e7.finalized)
                throw new Error("attempting to instantiate unfinalized type " + e7.typeName);
              var r8 = Object.create(F3);
              if (Object.keys(e7.allFields).forEach(function(e8) {
                i4.call(t6, e8) ? s5(r8, e8, t6[e8], true) : s5(r8, e8, null, false);
              }), r8.type !== e7.typeName)
                throw new Error("");
              return r8;
            }, Object.defineProperty(I3, L3(this.typeName), {enumerable: true, value: n6}), this;
          }, r6.prototype.field = function(e7, r7, s5, i5) {
            return this.finalized ? (console.error("Ignoring attempt to redefine field " + JSON.stringify(e7) + " of finalized type " + JSON.stringify(this.typeName)), this) : (this.ownFields[e7] = new p4(e7, t4.from(r7), s5, i5), this);
          }, r6.prototype.finalize = function() {
            var e7 = this;
            if (!this.finalized) {
              var t5 = this.allFields, r7 = this.allSupertypes;
              for (var s5 in this.baseNames.forEach(function(s6) {
                var i5 = C3[s6];
                if (!(i5 instanceof h4)) {
                  var n6 = "unknown supertype name " + JSON.stringify(s6) + " for subtype " + JSON.stringify(e7.typeName);
                  throw new Error(n6);
                }
                i5.finalize(), J3(t5, i5.allFields), J3(r7, i5.allSupertypes);
              }), J3(t5, this.ownFields), r7[this.typeName] = this, this.fieldNames.length = 0, t5)
                i4.call(t5, s5) && !t5[s5].hidden && this.fieldNames.push(s5);
              Object.defineProperty(_4, this.typeName, {enumerable: true, value: this.type}), this.finalized = true, V3(this.typeName, this.supertypeList), this.buildable && this.supertypeList.lastIndexOf("Expression") >= 0 && z3(this.typeName);
            }
          }, r6;
        }(h4);
        function k4(e6) {
          if (!i4.call(C3, e6))
            throw new Error("");
          var t5 = C3[e6];
          if (t5.finalized !== true)
            throw new Error("");
          return t5.supertypeList.slice(1);
        }
        function N3(e6) {
          for (var t5 = {}, r6 = Object.keys(C3), s5 = r6.length, n6 = 0; n6 < s5; ++n6) {
            var a5 = r6[n6], o5 = C3[a5];
            if (o5.finalized !== true)
              throw new Error("" + a5);
            for (var l4 = 0; l4 < o5.supertypeList.length; ++l4) {
              var c5 = o5.supertypeList[l4];
              if (i4.call(e6, c5)) {
                t5[a5] = c5;
                break;
              }
            }
          }
          return t5;
        }
        var I3 = Object.create(null), F3 = {};
        function M4(e6, t5) {
          var r6 = F3[e6];
          return T3.check(t5) ? delete F3[e6] : (y4.assert(t5), Object.defineProperty(F3, e6, {enumerable: true, configurable: true, value: t5})), r6;
        }
        function L3(e6) {
          return e6.replace(/^[A-Z]+/, function(e7) {
            var t5 = e7.length;
            switch (t5) {
              case 0:
                return "";
              case 1:
                return e7.toLowerCase();
              default:
                return e7.slice(0, t5 - 1).toLowerCase() + e7.charAt(t5 - 1);
            }
          });
        }
        function O4(e6) {
          return (e6 = L3(e6)).replace(/(Expression)?$/, "Statement");
        }
        var _4 = {};
        function B4(e6) {
          var t5 = P3(e6);
          if (t5)
            return t5.fieldNames.slice(0);
          if ("type" in e6)
            throw new Error("did not recognize object of type " + JSON.stringify(e6.type));
          return Object.keys(e6);
        }
        function R3(e6, t5) {
          var r6 = P3(e6);
          if (r6) {
            var s5 = r6.allFields[t5];
            if (s5)
              return s5.getValue(e6);
          }
          return e6 && e6[t5];
        }
        function j4(e6, t5, r6) {
          B4(e6).forEach(function(r7) {
            t5.call(this, r7, R3(e6, r7));
          }, r6);
        }
        function q4(e6, t5, r6) {
          return B4(e6).some(function(r7) {
            return t5.call(this, r7, R3(e6, r7));
          }, r6);
        }
        function z3(e6) {
          var t5 = O4(e6);
          if (!I3[t5]) {
            var r6 = I3[L3(e6)];
            if (r6) {
              var s5 = function() {
                for (var e7 = [], t6 = 0; t6 < arguments.length; t6++)
                  e7[t6] = arguments[t6];
                return I3.expressionStatement(r6.apply(I3, e7));
              };
              s5.from = function() {
                for (var e7 = [], t6 = 0; t6 < arguments.length; t6++)
                  e7[t6] = arguments[t6];
                return I3.expressionStatement(r6.from.apply(I3, e7));
              }, I3[t5] = s5;
            }
          }
        }
        function V3(e6, t5) {
          t5.length = 0, t5.push(e6);
          for (var r6 = Object.create(null), s5 = 0; s5 < t5.length; ++s5) {
            e6 = t5[s5];
            var n6 = C3[e6];
            if (n6.finalized !== true)
              throw new Error("");
            i4.call(r6, e6) && delete t5[r6[e6]], r6[e6] = s5, t5.push.apply(t5, n6.baseNames);
          }
          for (var a5 = 0, o5 = a5, l4 = t5.length; o5 < l4; ++o5)
            i4.call(t5, o5) && (t5[a5++] = t5[o5]);
          t5.length = a5;
        }
        function J3(e6, t5) {
          return Object.keys(t5).forEach(function(r6) {
            e6[r6] = t5[r6];
          }), e6;
        }
        function X3() {
          Object.keys(C3).forEach(function(e6) {
            C3[e6].finalize();
          });
        }
        return {Type: t4, builtInTypes: w4, getSupertypeNames: k4, computeSupertypeLookupTable: N3, builders: I3, defineMethod: M4, getBuilderName: L3, getStatementBuilderName: O4, namedTypes: _4, getFieldNames: B4, getFieldValue: R3, eachField: j4, someField: q4, finalize: X3};
      }
      t3.default = f4;
    }), z2 = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true});
      var r4 = U2.__importDefault(q3), s4 = Object.prototype.hasOwnProperty;
      function i4(e5) {
        var t4 = e5.use(r4.default), i5 = t4.builtInTypes.array, n4 = t4.builtInTypes.number, a4 = function e6(t5, r5, s5) {
          if (!(this instanceof e6))
            throw new Error("Path constructor cannot be invoked without 'new'");
          if (r5) {
            if (!(r5 instanceof e6))
              throw new Error("");
          } else
            r5 = null, s5 = null;
          this.value = t5, this.parentPath = r5, this.name = s5, this.__childCache = null;
        }, o4 = a4.prototype;
        function l3(e6) {
          return e6.__childCache || (e6.__childCache = Object.create(null));
        }
        function c4(e6, t5) {
          var r5 = l3(e6), i6 = e6.getValueProperty(t5), n5 = r5[t5];
          return s4.call(r5, t5) && n5.value === i6 || (n5 = r5[t5] = new e6.constructor(i6, e6, t5)), n5;
        }
        function u3() {
        }
        function h4(e6, t5, r5, a5) {
          if (i5.assert(e6.value), t5 === 0)
            return u3;
          var o5 = e6.value.length;
          if (o5 < 1)
            return u3;
          var c5 = arguments.length;
          c5 === 2 ? (r5 = 0, a5 = o5) : c5 === 3 ? (r5 = Math.max(r5, 0), a5 = o5) : (r5 = Math.max(r5, 0), a5 = Math.min(a5, o5)), n4.assert(r5), n4.assert(a5);
          for (var h5 = Object.create(null), p5 = l3(e6), d4 = r5; d4 < a5; ++d4)
            if (s4.call(e6.value, d4)) {
              var f4 = e6.get(d4);
              if (f4.name !== d4)
                throw new Error("");
              var m4 = d4 + t5;
              f4.name = m4, h5[m4] = f4, delete p5[d4];
            }
          return delete p5.length, function() {
            for (var t6 in h5) {
              var r6 = h5[t6];
              if (r6.name !== +t6)
                throw new Error("");
              p5[t6] = r6, e6.value[t6] = r6.value;
            }
          };
        }
        function p4(e6) {
          if (!(e6 instanceof a4))
            throw new Error("");
          var t5 = e6.parentPath;
          if (!t5)
            return e6;
          var r5 = t5.value, s5 = l3(t5);
          if (r5[e6.name] === e6.value)
            s5[e6.name] = e6;
          else if (i5.check(r5)) {
            var n5 = r5.indexOf(e6.value);
            n5 >= 0 && (s5[e6.name = n5] = e6);
          } else
            r5[e6.name] = e6.value, s5[e6.name] = e6;
          if (r5[e6.name] !== e6.value)
            throw new Error("");
          if (e6.parentPath.get(e6.name) !== e6)
            throw new Error("");
          return e6;
        }
        return o4.getValueProperty = function(e6) {
          return this.value[e6];
        }, o4.get = function() {
          for (var e6 = [], t5 = 0; t5 < arguments.length; t5++)
            e6[t5] = arguments[t5];
          for (var r5 = this, s5 = e6.length, i6 = 0; i6 < s5; ++i6)
            r5 = c4(r5, e6[i6]);
          return r5;
        }, o4.each = function(e6, t5) {
          var r5 = [], i6 = this.value.length, n5 = 0;
          for (n5 = 0; n5 < i6; ++n5)
            s4.call(this.value, n5) && (r5[n5] = this.get(n5));
          for (t5 = t5 || this, n5 = 0; n5 < i6; ++n5)
            s4.call(r5, n5) && e6.call(t5, r5[n5]);
        }, o4.map = function(e6, t5) {
          var r5 = [];
          return this.each(function(t6) {
            r5.push(e6.call(this, t6));
          }, t5), r5;
        }, o4.filter = function(e6, t5) {
          var r5 = [];
          return this.each(function(t6) {
            e6.call(this, t6) && r5.push(t6);
          }, t5), r5;
        }, o4.shift = function() {
          var e6 = h4(this, -1), t5 = this.value.shift();
          return e6(), t5;
        }, o4.unshift = function() {
          for (var e6 = [], t5 = 0; t5 < arguments.length; t5++)
            e6[t5] = arguments[t5];
          var r5 = h4(this, e6.length), s5 = this.value.unshift.apply(this.value, e6);
          return r5(), s5;
        }, o4.push = function() {
          for (var e6 = [], t5 = 0; t5 < arguments.length; t5++)
            e6[t5] = arguments[t5];
          return i5.assert(this.value), delete l3(this).length, this.value.push.apply(this.value, e6);
        }, o4.pop = function() {
          i5.assert(this.value);
          var e6 = l3(this);
          return delete e6[this.value.length - 1], delete e6.length, this.value.pop();
        }, o4.insertAt = function(e6) {
          var t5 = arguments.length, r5 = h4(this, t5 - 1, e6);
          if (r5 === u3 && t5 <= 1)
            return this;
          e6 = Math.max(e6, 0);
          for (var s5 = 1; s5 < t5; ++s5)
            this.value[e6 + s5 - 1] = arguments[s5];
          return r5(), this;
        }, o4.insertBefore = function() {
          for (var e6 = [], t5 = 0; t5 < arguments.length; t5++)
            e6[t5] = arguments[t5];
          for (var r5 = this.parentPath, s5 = e6.length, i6 = [this.name], n5 = 0; n5 < s5; ++n5)
            i6.push(e6[n5]);
          return r5.insertAt.apply(r5, i6);
        }, o4.insertAfter = function() {
          for (var e6 = [], t5 = 0; t5 < arguments.length; t5++)
            e6[t5] = arguments[t5];
          for (var r5 = this.parentPath, s5 = e6.length, i6 = [this.name + 1], n5 = 0; n5 < s5; ++n5)
            i6.push(e6[n5]);
          return r5.insertAt.apply(r5, i6);
        }, o4.replace = function(e6) {
          var t5 = [], r5 = this.parentPath.value, s5 = l3(this.parentPath), n5 = arguments.length;
          if (p4(this), i5.check(r5)) {
            for (var a5 = r5.length, o5 = h4(this.parentPath, n5 - 1, this.name + 1), c5 = [this.name, 1], u4 = 0; u4 < n5; ++u4)
              c5.push(arguments[u4]);
            if (r5.splice.apply(r5, c5)[0] !== this.value)
              throw new Error("");
            if (r5.length !== a5 - 1 + n5)
              throw new Error("");
            if (o5(), n5 === 0)
              delete this.value, delete s5[this.name], this.__childCache = null;
            else {
              if (r5[this.name] !== e6)
                throw new Error("");
              for (this.value !== e6 && (this.value = e6, this.__childCache = null), u4 = 0; u4 < n5; ++u4)
                t5.push(this.parentPath.get(this.name + u4));
              if (t5[0] !== this)
                throw new Error("");
            }
          } else if (n5 === 1)
            this.value !== e6 && (this.__childCache = null), this.value = r5[this.name] = e6, t5.push(this);
          else {
            if (n5 !== 0)
              throw new Error("Could not replace path");
            delete r5[this.name], delete this.value, this.__childCache = null;
          }
          return t5;
        }, a4;
      }
      t3.default = i4, e4.exports = t3.default;
    }), V2 = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true});
      var r4 = U2.__importDefault(q3), s4 = Object.prototype.hasOwnProperty;
      function i4(e5) {
        var t4 = e5.use(r4.default), i5 = t4.Type, n4 = t4.namedTypes, a4 = n4.Node, o4 = n4.Expression, l3 = t4.builtInTypes.array, c4 = t4.builders, u3 = function e6(t5, r5) {
          if (!(this instanceof e6))
            throw new Error("Scope constructor cannot be invoked without 'new'");
          var s5;
          if (p4.assert(t5.value), r5) {
            if (!(r5 instanceof e6))
              throw new Error("");
            s5 = r5.depth + 1;
          } else
            r5 = null, s5 = 0;
          Object.defineProperties(this, {path: {value: t5}, node: {value: t5.value}, isGlobal: {value: !r5, enumerable: true}, depth: {value: s5}, parent: {value: r5}, bindings: {value: {}}, types: {value: {}}});
        }, h4 = [n4.Program, n4.Function, n4.CatchClause], p4 = i5.or.apply(i5, h4);
        u3.isEstablishedBy = function(e6) {
          return p4.check(e6);
        };
        var d4 = u3.prototype;
        function f4(e6, t5, r5) {
          var s5 = e6.value;
          if (p4.assert(s5), n4.CatchClause.check(s5)) {
            var i6 = e6.get("param");
            i6.value && x4(i6, t5);
          } else
            m4(e6, t5, r5);
        }
        function m4(e6, r5, s5) {
          var i6 = e6.value;
          e6.parent && n4.FunctionExpression.check(e6.parent.node) && e6.parent.node.id && x4(e6.parent.get("id"), r5), i6 && (l3.check(i6) ? e6.each(function(e7) {
            g4(e7, r5, s5);
          }) : n4.Function.check(i6) ? (e6.get("params").each(function(e7) {
            x4(e7, r5);
          }), g4(e6.get("body"), r5, s5)) : n4.TypeAlias && n4.TypeAlias.check(i6) || n4.InterfaceDeclaration && n4.InterfaceDeclaration.check(i6) || n4.TSTypeAliasDeclaration && n4.TSTypeAliasDeclaration.check(i6) || n4.TSInterfaceDeclaration && n4.TSInterfaceDeclaration.check(i6) ? b3(e6.get("id"), s5) : n4.VariableDeclarator.check(i6) ? (x4(e6.get("id"), r5), g4(e6.get("init"), r5, s5)) : i6.type === "ImportSpecifier" || i6.type === "ImportNamespaceSpecifier" || i6.type === "ImportDefaultSpecifier" ? x4(e6.get(i6.local ? "local" : i6.name ? "name" : "id"), r5) : a4.check(i6) && !o4.check(i6) && t4.eachField(i6, function(t5, i7) {
            var n5 = e6.get(t5);
            if (!y4(n5, i7))
              throw new Error("");
            g4(n5, r5, s5);
          }));
        }
        function y4(e6, t5) {
          return e6.value === t5 || !(!Array.isArray(e6.value) || e6.value.length !== 0 || !Array.isArray(t5) || t5.length !== 0);
        }
        function g4(e6, t5, r5) {
          var i6 = e6.value;
          if (!i6 || o4.check(i6))
            ;
          else if (n4.FunctionDeclaration.check(i6) && i6.id !== null)
            x4(e6.get("id"), t5);
          else if (n4.ClassDeclaration && n4.ClassDeclaration.check(i6))
            x4(e6.get("id"), t5);
          else if (p4.check(i6)) {
            if (n4.CatchClause.check(i6) && n4.Identifier.check(i6.param)) {
              var a5 = i6.param.name, l4 = s4.call(t5, a5);
              m4(e6.get("body"), t5, r5), l4 || delete t5[a5];
            }
          } else
            m4(e6, t5, r5);
        }
        function x4(e6, t5) {
          var r5 = e6.value;
          n4.Pattern.assert(r5), n4.Identifier.check(r5) ? s4.call(t5, r5.name) ? t5[r5.name].push(e6) : t5[r5.name] = [e6] : n4.AssignmentPattern && n4.AssignmentPattern.check(r5) ? x4(e6.get("left"), t5) : n4.ObjectPattern && n4.ObjectPattern.check(r5) ? e6.get("properties").each(function(e7) {
            var r6 = e7.value;
            n4.Pattern.check(r6) ? x4(e7, t5) : n4.Property.check(r6) ? x4(e7.get("value"), t5) : n4.SpreadProperty && n4.SpreadProperty.check(r6) && x4(e7.get("argument"), t5);
          }) : n4.ArrayPattern && n4.ArrayPattern.check(r5) ? e6.get("elements").each(function(e7) {
            var r6 = e7.value;
            n4.Pattern.check(r6) ? x4(e7, t5) : n4.SpreadElement && n4.SpreadElement.check(r6) && x4(e7.get("argument"), t5);
          }) : n4.PropertyPattern && n4.PropertyPattern.check(r5) ? x4(e6.get("pattern"), t5) : (n4.SpreadElementPattern && n4.SpreadElementPattern.check(r5) || n4.RestElement && n4.RestElement.check(r5) || n4.SpreadPropertyPattern && n4.SpreadPropertyPattern.check(r5)) && x4(e6.get("argument"), t5);
        }
        function b3(e6, t5) {
          var r5 = e6.value;
          n4.Pattern.assert(r5), n4.Identifier.check(r5) && (s4.call(t5, r5.name) ? t5[r5.name].push(e6) : t5[r5.name] = [e6]);
        }
        return d4.didScan = false, d4.declares = function(e6) {
          return this.scan(), s4.call(this.bindings, e6);
        }, d4.declaresType = function(e6) {
          return this.scan(), s4.call(this.types, e6);
        }, d4.declareTemporary = function(e6) {
          if (e6) {
            if (!/^[a-z$_]/i.test(e6))
              throw new Error("");
          } else
            e6 = "t$";
          e6 += this.depth.toString(36) + "$", this.scan();
          for (var r5 = 0; this.declares(e6 + r5); )
            ++r5;
          var s5 = e6 + r5;
          return this.bindings[s5] = t4.builders.identifier(s5);
        }, d4.injectTemporary = function(e6, t5) {
          e6 || (e6 = this.declareTemporary());
          var r5 = this.path.get("body");
          return n4.BlockStatement.check(r5.value) && (r5 = r5.get("body")), r5.unshift(c4.variableDeclaration("var", [c4.variableDeclarator(e6, t5 || null)])), e6;
        }, d4.scan = function(e6) {
          if (e6 || !this.didScan) {
            for (var t5 in this.bindings)
              delete this.bindings[t5];
            f4(this.path, this.bindings, this.types), this.didScan = true;
          }
        }, d4.getBindings = function() {
          return this.scan(), this.bindings;
        }, d4.getTypes = function() {
          return this.scan(), this.types;
        }, d4.lookup = function(e6) {
          for (var t5 = this; t5 && !t5.declares(e6); t5 = t5.parent)
            ;
          return t5;
        }, d4.lookupType = function(e6) {
          for (var t5 = this; t5 && !t5.declaresType(e6); t5 = t5.parent)
            ;
          return t5;
        }, d4.getGlobalScope = function() {
          for (var e6 = this; !e6.isGlobal; )
            e6 = e6.parent;
          return e6;
        }, u3;
      }
      t3.default = i4, e4.exports = t3.default;
    }), J2 = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true});
      var r4 = U2.__importDefault(q3), s4 = U2.__importDefault(z2), i4 = U2.__importDefault(V2);
      function n4(e5) {
        var t4 = e5.use(r4.default), n5 = t4.namedTypes, a4 = t4.builders, o4 = t4.builtInTypes.number, l3 = t4.builtInTypes.array, c4 = e5.use(s4.default), u3 = e5.use(i4.default), h4 = function e6(t5, r5, s5) {
          if (!(this instanceof e6))
            throw new Error("NodePath constructor cannot be invoked without 'new'");
          c4.call(this, t5, r5, s5);
        }, p4 = h4.prototype = Object.create(c4.prototype, {constructor: {value: h4, enumerable: false, writable: true, configurable: true}});
        function d4(e6) {
          return n5.BinaryExpression.check(e6) || n5.LogicalExpression.check(e6);
        }
        Object.defineProperties(p4, {node: {get: function() {
          return Object.defineProperty(this, "node", {configurable: true, value: this._computeNode()}), this.node;
        }}, parent: {get: function() {
          return Object.defineProperty(this, "parent", {configurable: true, value: this._computeParent()}), this.parent;
        }}, scope: {get: function() {
          return Object.defineProperty(this, "scope", {configurable: true, value: this._computeScope()}), this.scope;
        }}}), p4.replace = function() {
          return delete this.node, delete this.parent, delete this.scope, c4.prototype.replace.apply(this, arguments);
        }, p4.prune = function() {
          var e6 = this.parent;
          return this.replace(), g4(e6);
        }, p4._computeNode = function() {
          var e6 = this.value;
          if (n5.Node.check(e6))
            return e6;
          var t5 = this.parentPath;
          return t5 && t5.node || null;
        }, p4._computeParent = function() {
          var e6 = this.value, t5 = this.parentPath;
          if (!n5.Node.check(e6)) {
            for (; t5 && !n5.Node.check(t5.value); )
              t5 = t5.parentPath;
            t5 && (t5 = t5.parentPath);
          }
          for (; t5 && !n5.Node.check(t5.value); )
            t5 = t5.parentPath;
          return t5 || null;
        }, p4._computeScope = function() {
          var e6 = this.value, t5 = this.parentPath, r5 = t5 && t5.scope;
          return n5.Node.check(e6) && u3.isEstablishedBy(e6) && (r5 = new u3(this, r5)), r5 || null;
        }, p4.getValueProperty = function(e6) {
          return t4.getFieldValue(this.value, e6);
        }, p4.needsParens = function(e6) {
          var t5 = this.parentPath;
          if (!t5)
            return false;
          var r5 = this.value;
          if (!n5.Expression.check(r5))
            return false;
          if (r5.type === "Identifier")
            return false;
          for (; !n5.Node.check(t5.value); )
            if (!(t5 = t5.parentPath))
              return false;
          var s5 = t5.value;
          switch (r5.type) {
            case "UnaryExpression":
            case "SpreadElement":
            case "SpreadProperty":
              return s5.type === "MemberExpression" && this.name === "object" && s5.object === r5;
            case "BinaryExpression":
            case "LogicalExpression":
              switch (s5.type) {
                case "CallExpression":
                  return this.name === "callee" && s5.callee === r5;
                case "UnaryExpression":
                case "SpreadElement":
                case "SpreadProperty":
                  return true;
                case "MemberExpression":
                  return this.name === "object" && s5.object === r5;
                case "BinaryExpression":
                case "LogicalExpression":
                  var i5 = r5, a5 = s5.operator, l4 = f4[a5], c5 = i5.operator, u4 = f4[c5];
                  if (l4 > u4)
                    return true;
                  if (l4 === u4 && this.name === "right") {
                    if (s5.right !== i5)
                      throw new Error("Nodes must be equal");
                    return true;
                  }
                default:
                  return false;
              }
            case "SequenceExpression":
              switch (s5.type) {
                case "ForStatement":
                  return false;
                case "ExpressionStatement":
                  return this.name !== "expression";
                default:
                  return true;
              }
            case "YieldExpression":
              switch (s5.type) {
                case "BinaryExpression":
                case "LogicalExpression":
                case "UnaryExpression":
                case "SpreadElement":
                case "SpreadProperty":
                case "CallExpression":
                case "MemberExpression":
                case "NewExpression":
                case "ConditionalExpression":
                case "YieldExpression":
                  return true;
                default:
                  return false;
              }
            case "Literal":
              return s5.type === "MemberExpression" && o4.check(r5.value) && this.name === "object" && s5.object === r5;
            case "AssignmentExpression":
            case "ConditionalExpression":
              switch (s5.type) {
                case "UnaryExpression":
                case "SpreadElement":
                case "SpreadProperty":
                case "BinaryExpression":
                case "LogicalExpression":
                  return true;
                case "CallExpression":
                  return this.name === "callee" && s5.callee === r5;
                case "ConditionalExpression":
                  return this.name === "test" && s5.test === r5;
                case "MemberExpression":
                  return this.name === "object" && s5.object === r5;
                default:
                  return false;
              }
            default:
              if (s5.type === "NewExpression" && this.name === "callee" && s5.callee === r5)
                return m4(r5);
          }
          return !(e6 === true || this.canBeFirstInStatement() || !this.firstInStatement());
        };
        var f4 = {};
        function m4(e6) {
          return !!n5.CallExpression.check(e6) || (l3.check(e6) ? e6.some(m4) : !!n5.Node.check(e6) && t4.someField(e6, function(e7, t5) {
            return m4(t5);
          }));
        }
        function y4(e6) {
          for (var t5, r5; e6.parent; e6 = e6.parent) {
            if (t5 = e6.node, r5 = e6.parent.node, n5.BlockStatement.check(r5) && e6.parent.name === "body" && e6.name === 0) {
              if (r5.body[0] !== t5)
                throw new Error("Nodes must be equal");
              return true;
            }
            if (n5.ExpressionStatement.check(r5) && e6.name === "expression") {
              if (r5.expression !== t5)
                throw new Error("Nodes must be equal");
              return true;
            }
            if (n5.SequenceExpression.check(r5) && e6.parent.name === "expressions" && e6.name === 0) {
              if (r5.expressions[0] !== t5)
                throw new Error("Nodes must be equal");
            } else if (n5.CallExpression.check(r5) && e6.name === "callee") {
              if (r5.callee !== t5)
                throw new Error("Nodes must be equal");
            } else if (n5.MemberExpression.check(r5) && e6.name === "object") {
              if (r5.object !== t5)
                throw new Error("Nodes must be equal");
            } else if (n5.ConditionalExpression.check(r5) && e6.name === "test") {
              if (r5.test !== t5)
                throw new Error("Nodes must be equal");
            } else if (d4(r5) && e6.name === "left") {
              if (r5.left !== t5)
                throw new Error("Nodes must be equal");
            } else {
              if (!n5.UnaryExpression.check(r5) || r5.prefix || e6.name !== "argument")
                return false;
              if (r5.argument !== t5)
                throw new Error("Nodes must be equal");
            }
          }
          return true;
        }
        function g4(e6) {
          if (n5.VariableDeclaration.check(e6.node)) {
            var t5 = e6.get("declarations").value;
            if (!t5 || t5.length === 0)
              return e6.prune();
          } else if (n5.ExpressionStatement.check(e6.node)) {
            if (!e6.get("expression").value)
              return e6.prune();
          } else
            n5.IfStatement.check(e6.node) && x4(e6);
          return e6;
        }
        function x4(e6) {
          var t5 = e6.get("test").value, r5 = e6.get("alternate").value, s5 = e6.get("consequent").value;
          if (s5 || r5) {
            if (!s5 && r5) {
              var i5 = a4.unaryExpression("!", t5, true);
              n5.UnaryExpression.check(t5) && t5.operator === "!" && (i5 = t5.argument), e6.get("test").replace(i5), e6.get("consequent").replace(r5), e6.get("alternate").replace();
            }
          } else {
            var o5 = a4.expressionStatement(t5);
            e6.replace(o5);
          }
        }
        return [["||"], ["&&"], ["|"], ["^"], ["&"], ["==", "===", "!=", "!=="], ["<", ">", "<=", ">=", "in", "instanceof"], [">>", "<<", ">>>"], ["+", "-"], ["*", "/", "%"]].forEach(function(e6, t5) {
          e6.forEach(function(e7) {
            f4[e7] = t5;
          });
        }), p4.canBeFirstInStatement = function() {
          var e6 = this.node;
          return !n5.FunctionExpression.check(e6) && !n5.ObjectExpression.check(e6);
        }, p4.firstInStatement = function() {
          return y4(this);
        }, h4;
      }
      t3.default = n4, e4.exports = t3.default;
    }), X2 = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true});
      var r4 = U2.__importDefault(q3), s4 = U2.__importDefault(J2), i4 = Object.prototype.hasOwnProperty;
      function n4(e5) {
        var t4, n5 = e5.use(r4.default), a4 = e5.use(s4.default), o4 = n5.builtInTypes.array, l3 = n5.builtInTypes.object, c4 = n5.builtInTypes.function, u3 = function e6() {
          if (!(this instanceof e6))
            throw new Error("PathVisitor constructor cannot be invoked without 'new'");
          this._reusableContextStack = [], this._methodNameTable = h4(this), this._shouldVisitComments = i4.call(this._methodNameTable, "Block") || i4.call(this._methodNameTable, "Line"), this.Context = m4(this), this._visiting = false, this._changeReported = false;
        };
        function h4(e6) {
          var t5 = Object.create(null);
          for (var r5 in e6)
            /^visit[A-Z]/.test(r5) && (t5[r5.slice("visit".length)] = true);
          for (var s5 = n5.computeSupertypeLookupTable(t5), i5 = Object.create(null), a5 = Object.keys(s5), o5 = a5.length, l4 = 0; l4 < o5; ++l4) {
            var u4 = a5[l4];
            r5 = "visit" + s5[u4], c4.check(e6[r5]) && (i5[u4] = r5);
          }
          return i5;
        }
        function p4(e6, t5) {
          for (var r5 in t5)
            i4.call(t5, r5) && (e6[r5] = t5[r5]);
          return e6;
        }
        u3.fromMethodsObject = function(e6) {
          if (e6 instanceof u3)
            return e6;
          if (!l3.check(e6))
            return new u3();
          var t5 = function e7() {
            if (!(this instanceof e7))
              throw new Error("Visitor constructor cannot be invoked without 'new'");
            u3.call(this);
          }, r5 = t5.prototype = Object.create(d4);
          return r5.constructor = t5, p4(r5, e6), p4(t5, u3), c4.assert(t5.fromMethodsObject), c4.assert(t5.visit), new t5();
        }, u3.visit = function(e6, t5) {
          return u3.fromMethodsObject(t5).visit(e6);
        };
        var d4 = u3.prototype;
        function f4(e6, t5) {
          if (!(e6 instanceof a4))
            throw new Error("");
          if (!(t5 instanceof u3))
            throw new Error("");
          var r5 = e6.value;
          if (o4.check(r5))
            e6.each(t5.visitWithoutReset, t5);
          else if (l3.check(r5)) {
            var s5 = n5.getFieldNames(r5);
            t5._shouldVisitComments && r5.comments && s5.indexOf("comments") < 0 && s5.push("comments");
            for (var c5 = s5.length, h5 = [], p5 = 0; p5 < c5; ++p5) {
              var d5 = s5[p5];
              i4.call(r5, d5) || (r5[d5] = n5.getFieldValue(r5, d5)), h5.push(e6.get(d5));
            }
            for (p5 = 0; p5 < c5; ++p5)
              t5.visitWithoutReset(h5[p5]);
          }
          return e6.value;
        }
        function m4(e6) {
          function t5(r6) {
            if (!(this instanceof t5))
              throw new Error("");
            if (!(this instanceof u3))
              throw new Error("");
            if (!(r6 instanceof a4))
              throw new Error("");
            Object.defineProperty(this, "visitor", {value: e6, writable: false, enumerable: true, configurable: false}), this.currentPath = r6, this.needToCallTraverse = true, Object.seal(this);
          }
          if (!(e6 instanceof u3))
            throw new Error("");
          var r5 = t5.prototype = Object.create(e6);
          return r5.constructor = t5, p4(r5, y4), t5;
        }
        d4.visit = function() {
          if (this._visiting)
            throw new Error("Recursively calling visitor.visit(path) resets visitor state. Try this.visit(path) or this.traverse(path) instead.");
          this._visiting = true, this._changeReported = false, this._abortRequested = false;
          for (var e6, t5 = arguments.length, r5 = new Array(t5), s5 = 0; s5 < t5; ++s5)
            r5[s5] = arguments[s5];
          r5[0] instanceof a4 || (r5[0] = new a4({root: r5[0]}).get("root")), this.reset.apply(this, r5);
          try {
            var i5 = this.visitWithoutReset(r5[0]);
            e6 = true;
          } finally {
            if (this._visiting = false, !e6 && this._abortRequested)
              return r5[0].value;
          }
          return i5;
        }, d4.AbortRequest = function() {
        }, d4.abort = function() {
          var e6 = this;
          e6._abortRequested = true;
          var t5 = new e6.AbortRequest();
          throw t5.cancel = function() {
            e6._abortRequested = false;
          }, t5;
        }, d4.reset = function(e6) {
        }, d4.visitWithoutReset = function(e6) {
          if (this instanceof this.Context)
            return this.visitor.visitWithoutReset(e6);
          if (!(e6 instanceof a4))
            throw new Error("");
          var t5 = e6.value, r5 = t5 && typeof t5 == "object" && typeof t5.type == "string" && this._methodNameTable[t5.type];
          if (!r5)
            return f4(e6, this);
          var s5 = this.acquireContext(e6);
          try {
            return s5.invokeVisitorMethod(r5);
          } finally {
            this.releaseContext(s5);
          }
        }, d4.acquireContext = function(e6) {
          return this._reusableContextStack.length === 0 ? new this.Context(e6) : this._reusableContextStack.pop().reset(e6);
        }, d4.releaseContext = function(e6) {
          if (!(e6 instanceof this.Context))
            throw new Error("");
          this._reusableContextStack.push(e6), e6.currentPath = null;
        }, d4.reportChanged = function() {
          this._changeReported = true;
        }, d4.wasChangeReported = function() {
          return this._changeReported;
        };
        var y4 = Object.create(null);
        return y4.reset = function(e6) {
          if (!(this instanceof this.Context))
            throw new Error("");
          if (!(e6 instanceof a4))
            throw new Error("");
          return this.currentPath = e6, this.needToCallTraverse = true, this;
        }, y4.invokeVisitorMethod = function(e6) {
          if (!(this instanceof this.Context))
            throw new Error("");
          if (!(this.currentPath instanceof a4))
            throw new Error("");
          var r5 = this.visitor[e6].call(this, this.currentPath);
          if (r5 === false ? this.needToCallTraverse = false : r5 !== t4 && (this.currentPath = this.currentPath.replace(r5)[0], this.needToCallTraverse && this.traverse(this.currentPath)), this.needToCallTraverse !== false)
            throw new Error("Must either call this.traverse or return false in " + e6);
          var s5 = this.currentPath;
          return s5 && s5.value;
        }, y4.traverse = function(e6, t5) {
          if (!(this instanceof this.Context))
            throw new Error("");
          if (!(e6 instanceof a4))
            throw new Error("");
          if (!(this.currentPath instanceof a4))
            throw new Error("");
          return this.needToCallTraverse = false, f4(e6, u3.fromMethodsObject(t5 || this.visitor));
        }, y4.visit = function(e6, t5) {
          if (!(this instanceof this.Context))
            throw new Error("");
          if (!(e6 instanceof a4))
            throw new Error("");
          if (!(this.currentPath instanceof a4))
            throw new Error("");
          return this.needToCallTraverse = false, u3.fromMethodsObject(t5 || this.visitor).visitWithoutReset(e6);
        }, y4.reportChanged = function() {
          this.visitor.reportChanged();
        }, y4.abort = function() {
          this.needToCallTraverse = false, this.visitor.abort();
        }, u3;
      }
      t3.default = n4, e4.exports = t3.default;
    }), G2 = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true});
      var r4 = U2.__importDefault(q3);
      function s4(e5) {
        var t4 = e5.use(r4.default), s5 = t4.getFieldNames, i4 = t4.getFieldValue, n4 = t4.builtInTypes.array, a4 = t4.builtInTypes.object, o4 = t4.builtInTypes.Date, l3 = t4.builtInTypes.RegExp, c4 = Object.prototype.hasOwnProperty;
        function u3(e6, t5, r5) {
          return n4.check(r5) ? r5.length = 0 : r5 = null, p4(e6, t5, r5);
        }
        function h4(e6) {
          return /[_$a-z][_$a-z0-9]*/i.test(e6) ? "." + e6 : "[" + JSON.stringify(e6) + "]";
        }
        function p4(e6, t5, r5) {
          return e6 === t5 || (n4.check(e6) ? d4(e6, t5, r5) : a4.check(e6) ? f4(e6, t5, r5) : o4.check(e6) ? o4.check(t5) && +e6 == +t5 : l3.check(e6) ? l3.check(t5) && e6.source === t5.source && e6.global === t5.global && e6.multiline === t5.multiline && e6.ignoreCase === t5.ignoreCase : e6 == t5);
        }
        function d4(e6, t5, r5) {
          n4.assert(e6);
          var s6 = e6.length;
          if (!n4.check(t5) || t5.length !== s6)
            return r5 && r5.push("length"), false;
          for (var i5 = 0; i5 < s6; ++i5) {
            if (r5 && r5.push(i5), i5 in e6 != i5 in t5)
              return false;
            if (!p4(e6[i5], t5[i5], r5))
              return false;
            if (r5) {
              var a5 = r5.pop();
              if (a5 !== i5)
                throw new Error("" + a5);
            }
          }
          return true;
        }
        function f4(e6, t5, r5) {
          if (a4.assert(e6), !a4.check(t5))
            return false;
          if (e6.type !== t5.type)
            return r5 && r5.push("type"), false;
          var n5 = s5(e6), o5 = n5.length, l4 = s5(t5), u4 = l4.length;
          if (o5 === u4) {
            for (var h5 = 0; h5 < o5; ++h5) {
              var d5 = n5[h5], f5 = i4(e6, d5), m4 = i4(t5, d5);
              if (r5 && r5.push(d5), !p4(f5, m4, r5))
                return false;
              if (r5) {
                var y4 = r5.pop();
                if (y4 !== d5)
                  throw new Error("" + y4);
              }
            }
            return true;
          }
          if (!r5)
            return false;
          var g4 = Object.create(null);
          for (h5 = 0; h5 < o5; ++h5)
            g4[n5[h5]] = true;
          for (h5 = 0; h5 < u4; ++h5) {
            if (d5 = l4[h5], !c4.call(g4, d5))
              return r5.push(d5), false;
            delete g4[d5];
          }
          for (d5 in g4) {
            r5.push(d5);
            break;
          }
          return false;
        }
        return u3.assert = function(e6, t5) {
          var r5 = [];
          if (!u3(e6, t5, r5)) {
            if (r5.length !== 0)
              throw new Error("Nodes differ in the following path: " + r5.map(h4).join(""));
            if (e6 !== t5)
              throw new Error("Nodes must be equal");
          }
        }, u3;
      }
      t3.default = s4, e4.exports = t3.default;
    }), H2 = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true});
      var r4 = U2.__importDefault(q3), s4 = U2.__importDefault(X2), i4 = U2.__importDefault(G2), n4 = U2.__importDefault(z2), a4 = U2.__importDefault(J2);
      function o4(e5) {
        var t4 = l3(), o5 = t4.use(r4.default);
        e5.forEach(t4.use), o5.finalize();
        var c4 = t4.use(s4.default);
        return {Type: o5.Type, builtInTypes: o5.builtInTypes, namedTypes: o5.namedTypes, builders: o5.builders, defineMethod: o5.defineMethod, getFieldNames: o5.getFieldNames, getFieldValue: o5.getFieldValue, eachField: o5.eachField, someField: o5.someField, getSupertypeNames: o5.getSupertypeNames, getBuilderName: o5.getBuilderName, astNodesAreEquivalent: t4.use(i4.default), finalize: o5.finalize, Path: t4.use(n4.default), NodePath: t4.use(a4.default), PathVisitor: c4, use: t4.use, visit: c4.visit};
      }
      function l3() {
        var e5 = [], t4 = [];
        function r5(r6) {
          var i5 = e5.indexOf(r6);
          return i5 === -1 && (i5 = e5.length, e5.push(r6), t4[i5] = r6(s5)), t4[i5];
        }
        var s5 = {use: r5};
        return s5;
      }
      t3.default = o4, e4.exports = t3.default;
    }), W2 = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true}), t3.LogicalOperators = t3.AssignmentOperators = t3.BinaryOperators = void 0, t3.BinaryOperators = ["==", "!=", "===", "!==", "<", "<=", ">", ">=", "<<", ">>", ">>>", "+", "-", "*", "/", "%", "&", "|", "^", "in", "instanceof"], t3.AssignmentOperators = ["=", "+=", "-=", "*=", "/=", "%=", "<<=", ">>=", ">>>=", "|=", "^=", "&="], t3.LogicalOperators = ["||", "&&"];
    }), K2 = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true});
      var r4 = U2.__importDefault(q3);
      function s4(e5) {
        var t4 = e5.use(r4.default), s5 = t4.Type, i4 = t4.builtInTypes, n4 = i4.number;
        function a4(e6) {
          return s5.from(function(t5) {
            return n4.check(t5) && t5 >= e6;
          }, n4 + " >= " + e6);
        }
        var o4 = {null: function() {
          return null;
        }, emptyArray: function() {
          return [];
        }, false: function() {
          return false;
        }, true: function() {
          return true;
        }, undefined: function() {
        }, "use strict": function() {
          return "use strict";
        }}, l3 = s5.or(i4.string, i4.number, i4.boolean, i4.null, i4.undefined);
        return {geq: a4, defaults: o4, isPrimitive: s5.from(function(e6) {
          if (e6 === null)
            return true;
          var t5 = typeof e6;
          return t5 !== "object" && t5 !== "function";
        }, l3.toString())};
      }
      t3.default = s4, e4.exports = t3.default;
    }), $3 = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true});
      var r4 = U2.__importDefault(q3), s4 = U2.__importDefault(K2);
      function i4(e5) {
        var t4 = e5.use(r4.default).Type, i5 = t4.def, n4 = t4.or, a4 = e5.use(s4.default), o4 = a4.defaults, l3 = a4.geq;
        i5("Printable").field("loc", n4(i5("SourceLocation"), null), o4.null, true), i5("Node").bases("Printable").field("type", String).field("comments", n4([i5("Comment")], null), o4.null, true), i5("SourceLocation").field("start", i5("Position")).field("end", i5("Position")).field("source", n4(String, null), o4.null), i5("Position").field("line", l3(1)).field("column", l3(0)), i5("File").bases("Node").build("program", "name").field("program", i5("Program")).field("name", n4(String, null), o4.null), i5("Program").bases("Node").build("body").field("body", [i5("Statement")]), i5("Function").bases("Node").field("id", n4(i5("Identifier"), null), o4.null).field("params", [i5("Pattern")]).field("body", i5("BlockStatement")).field("generator", Boolean, o4.false).field("async", Boolean, o4.false), i5("Statement").bases("Node"), i5("EmptyStatement").bases("Statement").build(), i5("BlockStatement").bases("Statement").build("body").field("body", [i5("Statement")]), i5("ExpressionStatement").bases("Statement").build("expression").field("expression", i5("Expression")), i5("IfStatement").bases("Statement").build("test", "consequent", "alternate").field("test", i5("Expression")).field("consequent", i5("Statement")).field("alternate", n4(i5("Statement"), null), o4.null), i5("LabeledStatement").bases("Statement").build("label", "body").field("label", i5("Identifier")).field("body", i5("Statement")), i5("BreakStatement").bases("Statement").build("label").field("label", n4(i5("Identifier"), null), o4.null), i5("ContinueStatement").bases("Statement").build("label").field("label", n4(i5("Identifier"), null), o4.null), i5("WithStatement").bases("Statement").build("object", "body").field("object", i5("Expression")).field("body", i5("Statement")), i5("SwitchStatement").bases("Statement").build("discriminant", "cases", "lexical").field("discriminant", i5("Expression")).field("cases", [i5("SwitchCase")]).field("lexical", Boolean, o4.false), i5("ReturnStatement").bases("Statement").build("argument").field("argument", n4(i5("Expression"), null)), i5("ThrowStatement").bases("Statement").build("argument").field("argument", i5("Expression")), i5("TryStatement").bases("Statement").build("block", "handler", "finalizer").field("block", i5("BlockStatement")).field("handler", n4(i5("CatchClause"), null), function() {
          return this.handlers && this.handlers[0] || null;
        }).field("handlers", [i5("CatchClause")], function() {
          return this.handler ? [this.handler] : [];
        }, true).field("guardedHandlers", [i5("CatchClause")], o4.emptyArray).field("finalizer", n4(i5("BlockStatement"), null), o4.null), i5("CatchClause").bases("Node").build("param", "guard", "body").field("param", i5("Pattern")).field("guard", n4(i5("Expression"), null), o4.null).field("body", i5("BlockStatement")), i5("WhileStatement").bases("Statement").build("test", "body").field("test", i5("Expression")).field("body", i5("Statement")), i5("DoWhileStatement").bases("Statement").build("body", "test").field("body", i5("Statement")).field("test", i5("Expression")), i5("ForStatement").bases("Statement").build("init", "test", "update", "body").field("init", n4(i5("VariableDeclaration"), i5("Expression"), null)).field("test", n4(i5("Expression"), null)).field("update", n4(i5("Expression"), null)).field("body", i5("Statement")), i5("ForInStatement").bases("Statement").build("left", "right", "body").field("left", n4(i5("VariableDeclaration"), i5("Expression"))).field("right", i5("Expression")).field("body", i5("Statement")), i5("DebuggerStatement").bases("Statement").build(), i5("Declaration").bases("Statement"), i5("FunctionDeclaration").bases("Function", "Declaration").build("id", "params", "body").field("id", i5("Identifier")), i5("FunctionExpression").bases("Function", "Expression").build("id", "params", "body"), i5("VariableDeclaration").bases("Declaration").build("kind", "declarations").field("kind", n4("var", "let", "const")).field("declarations", [i5("VariableDeclarator")]), i5("VariableDeclarator").bases("Node").build("id", "init").field("id", i5("Pattern")).field("init", n4(i5("Expression"), null), o4.null), i5("Expression").bases("Node"), i5("ThisExpression").bases("Expression").build(), i5("ArrayExpression").bases("Expression").build("elements").field("elements", [n4(i5("Expression"), null)]), i5("ObjectExpression").bases("Expression").build("properties").field("properties", [i5("Property")]), i5("Property").bases("Node").build("kind", "key", "value").field("kind", n4("init", "get", "set")).field("key", n4(i5("Literal"), i5("Identifier"))).field("value", i5("Expression")), i5("SequenceExpression").bases("Expression").build("expressions").field("expressions", [i5("Expression")]);
        var c4 = n4("-", "+", "!", "~", "typeof", "void", "delete");
        i5("UnaryExpression").bases("Expression").build("operator", "argument", "prefix").field("operator", c4).field("argument", i5("Expression")).field("prefix", Boolean, o4.true);
        var u3 = n4.apply(void 0, W2.BinaryOperators);
        i5("BinaryExpression").bases("Expression").build("operator", "left", "right").field("operator", u3).field("left", i5("Expression")).field("right", i5("Expression"));
        var h4 = n4.apply(void 0, W2.AssignmentOperators);
        i5("AssignmentExpression").bases("Expression").build("operator", "left", "right").field("operator", h4).field("left", n4(i5("Pattern"), i5("MemberExpression"))).field("right", i5("Expression"));
        var p4 = n4("++", "--");
        i5("UpdateExpression").bases("Expression").build("operator", "argument", "prefix").field("operator", p4).field("argument", i5("Expression")).field("prefix", Boolean);
        var d4 = n4.apply(void 0, W2.LogicalOperators);
        i5("LogicalExpression").bases("Expression").build("operator", "left", "right").field("operator", d4).field("left", i5("Expression")).field("right", i5("Expression")), i5("ConditionalExpression").bases("Expression").build("test", "consequent", "alternate").field("test", i5("Expression")).field("consequent", i5("Expression")).field("alternate", i5("Expression")), i5("NewExpression").bases("Expression").build("callee", "arguments").field("callee", i5("Expression")).field("arguments", [i5("Expression")]), i5("CallExpression").bases("Expression").build("callee", "arguments").field("callee", i5("Expression")).field("arguments", [i5("Expression")]), i5("MemberExpression").bases("Expression").build("object", "property", "computed").field("object", i5("Expression")).field("property", n4(i5("Identifier"), i5("Expression"))).field("computed", Boolean, function() {
          var e6 = this.property.type;
          return e6 === "Literal" || e6 === "MemberExpression" || e6 === "BinaryExpression";
        }), i5("Pattern").bases("Node"), i5("SwitchCase").bases("Node").build("test", "consequent").field("test", n4(i5("Expression"), null)).field("consequent", [i5("Statement")]), i5("Identifier").bases("Expression", "Pattern").build("name").field("name", String).field("optional", Boolean, o4.false), i5("Literal").bases("Expression").build("value").field("value", n4(String, Boolean, null, Number, RegExp)).field("regex", n4({pattern: String, flags: String}, null), function() {
          if (this.value instanceof RegExp) {
            var e6 = "";
            return this.value.ignoreCase && (e6 += "i"), this.value.multiline && (e6 += "m"), this.value.global && (e6 += "g"), {pattern: this.value.source, flags: e6};
          }
          return null;
        }), i5("Comment").bases("Printable").field("value", String).field("leading", Boolean, o4.true).field("trailing", Boolean, o4.false);
      }
      t3.default = i4, e4.exports = t3.default;
    }), Y2 = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true});
      var r4 = U2.__importDefault($3), s4 = U2.__importDefault(q3), i4 = U2.__importDefault(K2);
      function n4(e5) {
        e5.use(r4.default);
        var t4 = e5.use(s4.default), n5 = t4.Type.def, a4 = t4.Type.or, o4 = e5.use(i4.default).defaults;
        n5("Function").field("generator", Boolean, o4.false).field("expression", Boolean, o4.false).field("defaults", [a4(n5("Expression"), null)], o4.emptyArray).field("rest", a4(n5("Identifier"), null), o4.null), n5("RestElement").bases("Pattern").build("argument").field("argument", n5("Pattern")).field("typeAnnotation", a4(n5("TypeAnnotation"), n5("TSTypeAnnotation"), null), o4.null), n5("SpreadElementPattern").bases("Pattern").build("argument").field("argument", n5("Pattern")), n5("FunctionDeclaration").build("id", "params", "body", "generator", "expression").field("id", a4(n5("Identifier"), null)), n5("FunctionExpression").build("id", "params", "body", "generator", "expression"), n5("ArrowFunctionExpression").bases("Function", "Expression").build("params", "body", "expression").field("id", null, o4.null).field("body", a4(n5("BlockStatement"), n5("Expression"))).field("generator", false, o4.false), n5("ForOfStatement").bases("Statement").build("left", "right", "body").field("left", a4(n5("VariableDeclaration"), n5("Pattern"))).field("right", n5("Expression")).field("body", n5("Statement")), n5("YieldExpression").bases("Expression").build("argument", "delegate").field("argument", a4(n5("Expression"), null)).field("delegate", Boolean, o4.false), n5("GeneratorExpression").bases("Expression").build("body", "blocks", "filter").field("body", n5("Expression")).field("blocks", [n5("ComprehensionBlock")]).field("filter", a4(n5("Expression"), null)), n5("ComprehensionExpression").bases("Expression").build("body", "blocks", "filter").field("body", n5("Expression")).field("blocks", [n5("ComprehensionBlock")]).field("filter", a4(n5("Expression"), null)), n5("ComprehensionBlock").bases("Node").build("left", "right", "each").field("left", n5("Pattern")).field("right", n5("Expression")).field("each", Boolean), n5("Property").field("key", a4(n5("Literal"), n5("Identifier"), n5("Expression"))).field("value", a4(n5("Expression"), n5("Pattern"))).field("method", Boolean, o4.false).field("shorthand", Boolean, o4.false).field("computed", Boolean, o4.false), n5("ObjectProperty").field("shorthand", Boolean, o4.false), n5("PropertyPattern").bases("Pattern").build("key", "pattern").field("key", a4(n5("Literal"), n5("Identifier"), n5("Expression"))).field("pattern", n5("Pattern")).field("computed", Boolean, o4.false), n5("ObjectPattern").bases("Pattern").build("properties").field("properties", [a4(n5("PropertyPattern"), n5("Property"))]), n5("ArrayPattern").bases("Pattern").build("elements").field("elements", [a4(n5("Pattern"), null)]), n5("SpreadElement").bases("Node").build("argument").field("argument", n5("Expression")), n5("ArrayExpression").field("elements", [a4(n5("Expression"), n5("SpreadElement"), n5("RestElement"), null)]), n5("NewExpression").field("arguments", [a4(n5("Expression"), n5("SpreadElement"))]), n5("CallExpression").field("arguments", [a4(n5("Expression"), n5("SpreadElement"))]), n5("AssignmentPattern").bases("Pattern").build("left", "right").field("left", n5("Pattern")).field("right", n5("Expression")), n5("MethodDefinition").bases("Declaration").build("kind", "key", "value", "static").field("kind", a4("constructor", "method", "get", "set")).field("key", n5("Expression")).field("value", n5("Function")).field("computed", Boolean, o4.false).field("static", Boolean, o4.false);
        var l3 = a4(n5("MethodDefinition"), n5("VariableDeclarator"), n5("ClassPropertyDefinition"), n5("ClassProperty"));
        n5("ClassProperty").bases("Declaration").build("key").field("key", a4(n5("Literal"), n5("Identifier"), n5("Expression"))).field("computed", Boolean, o4.false), n5("ClassPropertyDefinition").bases("Declaration").build("definition").field("definition", l3), n5("ClassBody").bases("Declaration").build("body").field("body", [l3]), n5("ClassDeclaration").bases("Declaration").build("id", "body", "superClass").field("id", a4(n5("Identifier"), null)).field("body", n5("ClassBody")).field("superClass", a4(n5("Expression"), null), o4.null), n5("ClassExpression").bases("Expression").build("id", "body", "superClass").field("id", a4(n5("Identifier"), null), o4.null).field("body", n5("ClassBody")).field("superClass", a4(n5("Expression"), null), o4.null), n5("Super").bases("Expression").build(), n5("Specifier").bases("Node"), n5("ModuleSpecifier").bases("Specifier").field("local", a4(n5("Identifier"), null), o4.null).field("id", a4(n5("Identifier"), null), o4.null).field("name", a4(n5("Identifier"), null), o4.null), n5("ImportSpecifier").bases("ModuleSpecifier").build("imported", "local").field("imported", n5("Identifier")), n5("ImportDefaultSpecifier").bases("ModuleSpecifier").build("local"), n5("ImportNamespaceSpecifier").bases("ModuleSpecifier").build("local"), n5("ImportDeclaration").bases("Declaration").build("specifiers", "source", "importKind").field("specifiers", [a4(n5("ImportSpecifier"), n5("ImportNamespaceSpecifier"), n5("ImportDefaultSpecifier"))], o4.emptyArray).field("source", n5("Literal")).field("importKind", a4("value", "type"), function() {
          return "value";
        }), n5("ExportNamedDeclaration").bases("Declaration").build("declaration", "specifiers", "source").field("declaration", a4(n5("Declaration"), null)).field("specifiers", [n5("ExportSpecifier")], o4.emptyArray).field("source", a4(n5("Literal"), null), o4.null), n5("ExportSpecifier").bases("ModuleSpecifier").build("local", "exported").field("exported", n5("Identifier")), n5("ExportDefaultDeclaration").bases("Declaration").build("declaration").field("declaration", a4(n5("Declaration"), n5("Expression"))), n5("ExportAllDeclaration").bases("Declaration").build("source").field("source", n5("Literal")), n5("TaggedTemplateExpression").bases("Expression").build("tag", "quasi").field("tag", n5("Expression")).field("quasi", n5("TemplateLiteral")), n5("TemplateLiteral").bases("Expression").build("quasis", "expressions").field("quasis", [n5("TemplateElement")]).field("expressions", [n5("Expression")]), n5("TemplateElement").bases("Node").build("value", "tail").field("value", {cooked: String, raw: String}).field("tail", Boolean), n5("MetaProperty").bases("Expression").build("meta", "property").field("meta", n5("Identifier")).field("property", n5("Identifier"));
      }
      t3.default = n4, e4.exports = t3.default;
    }), Q2 = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true});
      var r4 = U2.__importDefault(Y2), s4 = U2.__importDefault(q3);
      function i4(e5) {
        e5.use(r4.default);
        var t4 = e5.use(s4.default), i5 = t4.Type.def, n4 = t4.Type.or, a4 = n4.apply(void 0, U2.__spreadArrays(W2.BinaryOperators, ["**"]));
        i5("BinaryExpression").field("operator", a4);
        var o4 = n4.apply(void 0, U2.__spreadArrays(W2.AssignmentOperators, ["**="]));
        i5("AssignmentExpression").field("operator", o4);
      }
      t3.default = i4, e4.exports = t3.default;
    }), Z2 = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true});
      var r4 = U2.__importDefault(Q2), s4 = U2.__importDefault(q3), i4 = U2.__importDefault(K2);
      function n4(e5) {
        e5.use(r4.default);
        var t4 = e5.use(s4.default).Type.def, n5 = e5.use(i4.default).defaults;
        t4("Function").field("async", Boolean, n5.false), t4("AwaitExpression").bases("Expression").build("argument").field("argument", t4("Expression"));
      }
      t3.default = n4, e4.exports = t3.default;
    }), ee2 = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true});
      var r4 = U2.__importDefault(Z2), s4 = U2.__importDefault(q3), i4 = U2.__importDefault(K2);
      function n4(e5) {
        e5.use(r4.default);
        var t4 = e5.use(s4.default), n5 = t4.Type.def, a4 = t4.Type.or, o4 = e5.use(i4.default).defaults;
        n5("ForOfStatement").field("await", Boolean, o4.false), n5("SpreadProperty").bases("Node").build("argument").field("argument", n5("Expression")), n5("ObjectExpression").field("properties", [a4(n5("Property"), n5("SpreadProperty"), n5("SpreadElement"))]), n5("TemplateElement").field("value", {cooked: a4(String, null), raw: String}), n5("SpreadPropertyPattern").bases("Pattern").build("argument").field("argument", n5("Pattern")), n5("ObjectPattern").field("properties", [a4(n5("PropertyPattern"), n5("Property"), n5("RestElement"), n5("SpreadPropertyPattern"))]);
      }
      t3.default = n4, e4.exports = t3.default;
    }), te2 = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true});
      var r4 = U2.__importDefault(ee2), s4 = U2.__importDefault(q3), i4 = U2.__importDefault(K2);
      function n4(e5) {
        e5.use(r4.default);
        var t4 = e5.use(s4.default), n5 = t4.Type.def, a4 = t4.Type.or, o4 = e5.use(i4.default).defaults;
        n5("CatchClause").field("param", a4(n5("Pattern"), null), o4.null);
      }
      t3.default = n4, e4.exports = t3.default;
    }), re2 = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true});
      var r4 = U2.__importDefault(te2), s4 = U2.__importDefault(q3), i4 = U2.__importDefault(K2);
      function n4(e5) {
        e5.use(r4.default);
        var t4 = e5.use(s4.default), n5 = t4.Type.def, a4 = t4.Type.or, o4 = e5.use(i4.default).defaults;
        n5("ImportExpression").bases("Expression").build("source").field("source", n5("Expression")), n5("ExportAllDeclaration").build("source", "exported").field("source", n5("Literal")).field("exported", a4(n5("Identifier"), null)), n5("ChainElement").bases("Node").field("optional", Boolean, o4.false), n5("CallExpression").bases("Expression", "ChainElement"), n5("MemberExpression").bases("Expression", "ChainElement"), n5("ChainExpression").bases("Expression").build("expression").field("expression", n5("ChainElement")), n5("OptionalCallExpression").bases("CallExpression").build("callee", "arguments", "optional").field("optional", Boolean, o4.true), n5("OptionalMemberExpression").bases("MemberExpression").build("object", "property", "computed", "optional").field("optional", Boolean, o4.true);
        var l3 = a4.apply(void 0, U2.__spreadArrays(W2.LogicalOperators, ["??"]));
        n5("LogicalExpression").field("operator", l3);
      }
      t3.default = n4, e4.exports = t3.default;
    }), se2 = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true});
      var r4 = U2.__importDefault(re2), s4 = U2.__importDefault(q3), i4 = U2.__importDefault(K2);
      function n4(e5) {
        e5.use(r4.default);
        var t4 = e5.use(s4.default), n5 = t4.Type.def, a4 = t4.Type.or, o4 = e5.use(i4.default).defaults;
        n5("JSXAttribute").bases("Node").build("name", "value").field("name", a4(n5("JSXIdentifier"), n5("JSXNamespacedName"))).field("value", a4(n5("Literal"), n5("JSXExpressionContainer"), n5("JSXElement"), n5("JSXFragment"), null), o4.null), n5("JSXIdentifier").bases("Identifier").build("name").field("name", String), n5("JSXNamespacedName").bases("Node").build("namespace", "name").field("namespace", n5("JSXIdentifier")).field("name", n5("JSXIdentifier")), n5("JSXMemberExpression").bases("MemberExpression").build("object", "property").field("object", a4(n5("JSXIdentifier"), n5("JSXMemberExpression"))).field("property", n5("JSXIdentifier")).field("computed", Boolean, o4.false);
        var l3 = a4(n5("JSXIdentifier"), n5("JSXNamespacedName"), n5("JSXMemberExpression"));
        n5("JSXSpreadAttribute").bases("Node").build("argument").field("argument", n5("Expression"));
        var c4 = [a4(n5("JSXAttribute"), n5("JSXSpreadAttribute"))];
        n5("JSXExpressionContainer").bases("Expression").build("expression").field("expression", a4(n5("Expression"), n5("JSXEmptyExpression")));
        var u3 = [a4(n5("JSXText"), n5("JSXExpressionContainer"), n5("JSXSpreadChild"), n5("JSXElement"), n5("JSXFragment"), n5("Literal"))];
        n5("JSXElement").bases("Expression").build("openingElement", "closingElement", "children").field("openingElement", n5("JSXOpeningElement")).field("closingElement", a4(n5("JSXClosingElement"), null), o4.null).field("children", u3, o4.emptyArray).field("name", l3, function() {
          return this.openingElement.name;
        }, true).field("selfClosing", Boolean, function() {
          return this.openingElement.selfClosing;
        }, true).field("attributes", c4, function() {
          return this.openingElement.attributes;
        }, true), n5("JSXOpeningElement").bases("Node").build("name", "attributes", "selfClosing").field("name", l3).field("attributes", c4, o4.emptyArray).field("selfClosing", Boolean, o4.false), n5("JSXClosingElement").bases("Node").build("name").field("name", l3), n5("JSXFragment").bases("Expression").build("openingFragment", "closingFragment", "children").field("openingFragment", n5("JSXOpeningFragment")).field("closingFragment", n5("JSXClosingFragment")).field("children", u3, o4.emptyArray), n5("JSXOpeningFragment").bases("Node").build(), n5("JSXClosingFragment").bases("Node").build(), n5("JSXText").bases("Literal").build("value", "raw").field("value", String).field("raw", String, function() {
          return this.value;
        }), n5("JSXEmptyExpression").bases("Node").build(), n5("JSXSpreadChild").bases("Node").build("expression").field("expression", n5("Expression"));
      }
      t3.default = n4, e4.exports = t3.default;
    }), ie2 = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true});
      var r4 = U2.__importDefault(q3), s4 = U2.__importDefault(K2), i4 = U2.__importDefault(re2);
      function n4(e5) {
        e5.use(i4.default);
        var t4 = e5.use(r4.default), n5 = t4.Type, a4 = t4.Type.def, o4 = n5.or, l3 = e5.use(s4.default).defaults;
        a4("AwaitExpression").build("argument", "all").field("argument", o4(a4("Expression"), null)).field("all", Boolean, l3.false), a4("Decorator").bases("Node").build("expression").field("expression", a4("Expression")), a4("Property").field("decorators", o4([a4("Decorator")], null), l3.null), a4("MethodDefinition").field("decorators", o4([a4("Decorator")], null), l3.null), a4("PrivateName").bases("Expression", "Pattern").build("id").field("id", a4("Identifier")), a4("ClassPrivateProperty").bases("ClassProperty").build("key", "value").field("key", a4("PrivateName")).field("value", o4(a4("Expression"), null), l3.null);
      }
      t3.default = n4, e4.exports = t3.default;
    }), ne2 = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true});
      var r4 = U2.__importDefault(q3), s4 = U2.__importDefault(K2);
      function i4(e5) {
        var t4 = e5.use(r4.default), i5 = t4.Type.def, n4 = t4.Type.or, a4 = e5.use(s4.default).defaults, o4 = n4(i5("TypeAnnotation"), i5("TSTypeAnnotation"), null), l3 = n4(i5("TypeParameterDeclaration"), i5("TSTypeParameterDeclaration"), null);
        i5("Identifier").field("typeAnnotation", o4, a4.null), i5("ObjectPattern").field("typeAnnotation", o4, a4.null), i5("Function").field("returnType", o4, a4.null).field("typeParameters", l3, a4.null), i5("ClassProperty").build("key", "value", "typeAnnotation", "static").field("value", n4(i5("Expression"), null)).field("static", Boolean, a4.false).field("typeAnnotation", o4, a4.null), ["ClassDeclaration", "ClassExpression"].forEach(function(e6) {
          i5(e6).field("typeParameters", l3, a4.null).field("superTypeParameters", n4(i5("TypeParameterInstantiation"), i5("TSTypeParameterInstantiation"), null), a4.null).field("implements", n4([i5("ClassImplements")], [i5("TSExpressionWithTypeArguments")]), a4.emptyArray);
        });
      }
      t3.default = i4, e4.exports = t3.default;
    }), ae2 = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true});
      var r4 = U2.__importDefault(ie2), s4 = U2.__importDefault(ne2), i4 = U2.__importDefault(q3), n4 = U2.__importDefault(K2);
      function a4(e5) {
        e5.use(r4.default), e5.use(s4.default);
        var t4 = e5.use(i4.default), a5 = t4.Type.def, o4 = t4.Type.or, l3 = e5.use(n4.default).defaults;
        a5("Flow").bases("Node"), a5("FlowType").bases("Flow"), a5("AnyTypeAnnotation").bases("FlowType").build(), a5("EmptyTypeAnnotation").bases("FlowType").build(), a5("MixedTypeAnnotation").bases("FlowType").build(), a5("VoidTypeAnnotation").bases("FlowType").build(), a5("SymbolTypeAnnotation").bases("FlowType").build(), a5("NumberTypeAnnotation").bases("FlowType").build(), a5("BigIntTypeAnnotation").bases("FlowType").build(), a5("NumberLiteralTypeAnnotation").bases("FlowType").build("value", "raw").field("value", Number).field("raw", String), a5("NumericLiteralTypeAnnotation").bases("FlowType").build("value", "raw").field("value", Number).field("raw", String), a5("BigIntLiteralTypeAnnotation").bases("FlowType").build("value", "raw").field("value", null).field("raw", String), a5("StringTypeAnnotation").bases("FlowType").build(), a5("StringLiteralTypeAnnotation").bases("FlowType").build("value", "raw").field("value", String).field("raw", String), a5("BooleanTypeAnnotation").bases("FlowType").build(), a5("BooleanLiteralTypeAnnotation").bases("FlowType").build("value", "raw").field("value", Boolean).field("raw", String), a5("TypeAnnotation").bases("Node").build("typeAnnotation").field("typeAnnotation", a5("FlowType")), a5("NullableTypeAnnotation").bases("FlowType").build("typeAnnotation").field("typeAnnotation", a5("FlowType")), a5("NullLiteralTypeAnnotation").bases("FlowType").build(), a5("NullTypeAnnotation").bases("FlowType").build(), a5("ThisTypeAnnotation").bases("FlowType").build(), a5("ExistsTypeAnnotation").bases("FlowType").build(), a5("ExistentialTypeParam").bases("FlowType").build(), a5("FunctionTypeAnnotation").bases("FlowType").build("params", "returnType", "rest", "typeParameters").field("params", [a5("FunctionTypeParam")]).field("returnType", a5("FlowType")).field("rest", o4(a5("FunctionTypeParam"), null)).field("typeParameters", o4(a5("TypeParameterDeclaration"), null)), a5("FunctionTypeParam").bases("Node").build("name", "typeAnnotation", "optional").field("name", o4(a5("Identifier"), null)).field("typeAnnotation", a5("FlowType")).field("optional", Boolean), a5("ArrayTypeAnnotation").bases("FlowType").build("elementType").field("elementType", a5("FlowType")), a5("ObjectTypeAnnotation").bases("FlowType").build("properties", "indexers", "callProperties").field("properties", [o4(a5("ObjectTypeProperty"), a5("ObjectTypeSpreadProperty"))]).field("indexers", [a5("ObjectTypeIndexer")], l3.emptyArray).field("callProperties", [a5("ObjectTypeCallProperty")], l3.emptyArray).field("inexact", o4(Boolean, void 0), l3[void 0]).field("exact", Boolean, l3.false).field("internalSlots", [a5("ObjectTypeInternalSlot")], l3.emptyArray), a5("Variance").bases("Node").build("kind").field("kind", o4("plus", "minus"));
        var c4 = o4(a5("Variance"), "plus", "minus", null);
        a5("ObjectTypeProperty").bases("Node").build("key", "value", "optional").field("key", o4(a5("Literal"), a5("Identifier"))).field("value", a5("FlowType")).field("optional", Boolean).field("variance", c4, l3.null), a5("ObjectTypeIndexer").bases("Node").build("id", "key", "value").field("id", a5("Identifier")).field("key", a5("FlowType")).field("value", a5("FlowType")).field("variance", c4, l3.null).field("static", Boolean, l3.false), a5("ObjectTypeCallProperty").bases("Node").build("value").field("value", a5("FunctionTypeAnnotation")).field("static", Boolean, l3.false), a5("QualifiedTypeIdentifier").bases("Node").build("qualification", "id").field("qualification", o4(a5("Identifier"), a5("QualifiedTypeIdentifier"))).field("id", a5("Identifier")), a5("GenericTypeAnnotation").bases("FlowType").build("id", "typeParameters").field("id", o4(a5("Identifier"), a5("QualifiedTypeIdentifier"))).field("typeParameters", o4(a5("TypeParameterInstantiation"), null)), a5("MemberTypeAnnotation").bases("FlowType").build("object", "property").field("object", a5("Identifier")).field("property", o4(a5("MemberTypeAnnotation"), a5("GenericTypeAnnotation"))), a5("UnionTypeAnnotation").bases("FlowType").build("types").field("types", [a5("FlowType")]), a5("IntersectionTypeAnnotation").bases("FlowType").build("types").field("types", [a5("FlowType")]), a5("TypeofTypeAnnotation").bases("FlowType").build("argument").field("argument", a5("FlowType")), a5("ObjectTypeSpreadProperty").bases("Node").build("argument").field("argument", a5("FlowType")), a5("ObjectTypeInternalSlot").bases("Node").build("id", "value", "optional", "static", "method").field("id", a5("Identifier")).field("value", a5("FlowType")).field("optional", Boolean).field("static", Boolean).field("method", Boolean), a5("TypeParameterDeclaration").bases("Node").build("params").field("params", [a5("TypeParameter")]), a5("TypeParameterInstantiation").bases("Node").build("params").field("params", [a5("FlowType")]), a5("TypeParameter").bases("FlowType").build("name", "variance", "bound", "default").field("name", String).field("variance", c4, l3.null).field("bound", o4(a5("TypeAnnotation"), null), l3.null).field("default", o4(a5("FlowType"), null), l3.null), a5("ClassProperty").field("variance", c4, l3.null), a5("ClassImplements").bases("Node").build("id").field("id", a5("Identifier")).field("superClass", o4(a5("Expression"), null), l3.null).field("typeParameters", o4(a5("TypeParameterInstantiation"), null), l3.null), a5("InterfaceTypeAnnotation").bases("FlowType").build("body", "extends").field("body", a5("ObjectTypeAnnotation")).field("extends", o4([a5("InterfaceExtends")], null), l3.null), a5("InterfaceDeclaration").bases("Declaration").build("id", "body", "extends").field("id", a5("Identifier")).field("typeParameters", o4(a5("TypeParameterDeclaration"), null), l3.null).field("body", a5("ObjectTypeAnnotation")).field("extends", [a5("InterfaceExtends")]), a5("DeclareInterface").bases("InterfaceDeclaration").build("id", "body", "extends"), a5("InterfaceExtends").bases("Node").build("id").field("id", a5("Identifier")).field("typeParameters", o4(a5("TypeParameterInstantiation"), null), l3.null), a5("TypeAlias").bases("Declaration").build("id", "typeParameters", "right").field("id", a5("Identifier")).field("typeParameters", o4(a5("TypeParameterDeclaration"), null)).field("right", a5("FlowType")), a5("DeclareTypeAlias").bases("TypeAlias").build("id", "typeParameters", "right"), a5("OpaqueType").bases("Declaration").build("id", "typeParameters", "impltype", "supertype").field("id", a5("Identifier")).field("typeParameters", o4(a5("TypeParameterDeclaration"), null)).field("impltype", a5("FlowType")).field("supertype", o4(a5("FlowType"), null)), a5("DeclareOpaqueType").bases("OpaqueType").build("id", "typeParameters", "supertype").field("impltype", o4(a5("FlowType"), null)), a5("TypeCastExpression").bases("Expression").build("expression", "typeAnnotation").field("expression", a5("Expression")).field("typeAnnotation", a5("TypeAnnotation")), a5("TupleTypeAnnotation").bases("FlowType").build("types").field("types", [a5("FlowType")]), a5("DeclareVariable").bases("Statement").build("id").field("id", a5("Identifier")), a5("DeclareFunction").bases("Statement").build("id").field("id", a5("Identifier")).field("predicate", o4(a5("FlowPredicate"), null), l3.null), a5("DeclareClass").bases("InterfaceDeclaration").build("id"), a5("DeclareModule").bases("Statement").build("id", "body").field("id", o4(a5("Identifier"), a5("Literal"))).field("body", a5("BlockStatement")), a5("DeclareModuleExports").bases("Statement").build("typeAnnotation").field("typeAnnotation", a5("TypeAnnotation")), a5("DeclareExportDeclaration").bases("Declaration").build("default", "declaration", "specifiers", "source").field("default", Boolean).field("declaration", o4(a5("DeclareVariable"), a5("DeclareFunction"), a5("DeclareClass"), a5("FlowType"), a5("TypeAlias"), a5("DeclareOpaqueType"), a5("InterfaceDeclaration"), null)).field("specifiers", [o4(a5("ExportSpecifier"), a5("ExportBatchSpecifier"))], l3.emptyArray).field("source", o4(a5("Literal"), null), l3.null), a5("DeclareExportAllDeclaration").bases("Declaration").build("source").field("source", o4(a5("Literal"), null), l3.null), a5("ImportDeclaration").field("importKind", o4("value", "type", "typeof"), function() {
          return "value";
        }), a5("FlowPredicate").bases("Flow"), a5("InferredPredicate").bases("FlowPredicate").build(), a5("DeclaredPredicate").bases("FlowPredicate").build("value").field("value", a5("Expression")), a5("Function").field("predicate", o4(a5("FlowPredicate"), null), l3.null), a5("CallExpression").field("typeArguments", o4(null, a5("TypeParameterInstantiation")), l3.null), a5("NewExpression").field("typeArguments", o4(null, a5("TypeParameterInstantiation")), l3.null), a5("EnumDeclaration").bases("Declaration").build("id", "body").field("id", a5("Identifier")).field("body", o4(a5("EnumBooleanBody"), a5("EnumNumberBody"), a5("EnumStringBody"), a5("EnumSymbolBody"))), a5("EnumBooleanBody").build("members", "explicitType").field("members", [a5("EnumBooleanMember")]).field("explicitType", Boolean), a5("EnumNumberBody").build("members", "explicitType").field("members", [a5("EnumNumberMember")]).field("explicitType", Boolean), a5("EnumStringBody").build("members", "explicitType").field("members", o4([a5("EnumStringMember")], [a5("EnumDefaultedMember")])).field("explicitType", Boolean), a5("EnumSymbolBody").build("members").field("members", [a5("EnumDefaultedMember")]), a5("EnumBooleanMember").build("id", "init").field("id", a5("Identifier")).field("init", o4(a5("Literal"), Boolean)), a5("EnumNumberMember").build("id", "init").field("id", a5("Identifier")).field("init", a5("Literal")), a5("EnumStringMember").build("id", "init").field("id", a5("Identifier")).field("init", a5("Literal")), a5("EnumDefaultedMember").build("id").field("id", a5("Identifier"));
      }
      t3.default = a4, e4.exports = t3.default;
    }), oe2 = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true});
      var r4 = U2.__importDefault(re2), s4 = U2.__importDefault(q3), i4 = U2.__importDefault(K2);
      function n4(e5) {
        e5.use(r4.default);
        var t4 = e5.use(s4.default), n5 = e5.use(i4.default).defaults, a4 = t4.Type.def, o4 = t4.Type.or;
        a4("VariableDeclaration").field("declarations", [o4(a4("VariableDeclarator"), a4("Identifier"))]), a4("Property").field("value", o4(a4("Expression"), a4("Pattern"))), a4("ArrayPattern").field("elements", [o4(a4("Pattern"), a4("SpreadElement"), null)]), a4("ObjectPattern").field("properties", [o4(a4("Property"), a4("PropertyPattern"), a4("SpreadPropertyPattern"), a4("SpreadProperty"))]), a4("ExportSpecifier").bases("ModuleSpecifier").build("id", "name"), a4("ExportBatchSpecifier").bases("Specifier").build(), a4("ExportDeclaration").bases("Declaration").build("default", "declaration", "specifiers", "source").field("default", Boolean).field("declaration", o4(a4("Declaration"), a4("Expression"), null)).field("specifiers", [o4(a4("ExportSpecifier"), a4("ExportBatchSpecifier"))], n5.emptyArray).field("source", o4(a4("Literal"), null), n5.null), a4("Block").bases("Comment").build("value", "leading", "trailing"), a4("Line").bases("Comment").build("value", "leading", "trailing");
      }
      t3.default = n4, e4.exports = t3.default;
    }), le2 = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true});
      var r4 = U2.__importDefault(ie2), s4 = U2.__importDefault(q3), i4 = U2.__importDefault(K2);
      function n4(e5) {
        e5.use(r4.default);
        var t4 = e5.use(s4.default), n5 = e5.use(i4.default).defaults, a4 = t4.Type.def, o4 = t4.Type.or;
        a4("Noop").bases("Statement").build(), a4("DoExpression").bases("Expression").build("body").field("body", [a4("Statement")]), a4("BindExpression").bases("Expression").build("object", "callee").field("object", o4(a4("Expression"), null)).field("callee", a4("Expression")), a4("ParenthesizedExpression").bases("Expression").build("expression").field("expression", a4("Expression")), a4("ExportNamespaceSpecifier").bases("Specifier").build("exported").field("exported", a4("Identifier")), a4("ExportDefaultSpecifier").bases("Specifier").build("exported").field("exported", a4("Identifier")), a4("CommentBlock").bases("Comment").build("value", "leading", "trailing"), a4("CommentLine").bases("Comment").build("value", "leading", "trailing"), a4("Directive").bases("Node").build("value").field("value", a4("DirectiveLiteral")), a4("DirectiveLiteral").bases("Node", "Expression").build("value").field("value", String, n5["use strict"]), a4("InterpreterDirective").bases("Node").build("value").field("value", String), a4("BlockStatement").bases("Statement").build("body").field("body", [a4("Statement")]).field("directives", [a4("Directive")], n5.emptyArray), a4("Program").bases("Node").build("body").field("body", [a4("Statement")]).field("directives", [a4("Directive")], n5.emptyArray).field("interpreter", o4(a4("InterpreterDirective"), null), n5.null), a4("StringLiteral").bases("Literal").build("value").field("value", String), a4("NumericLiteral").bases("Literal").build("value").field("value", Number).field("raw", o4(String, null), n5.null).field("extra", {rawValue: Number, raw: String}, function() {
          return {rawValue: this.value, raw: this.value + ""};
        }), a4("BigIntLiteral").bases("Literal").build("value").field("value", o4(String, Number)).field("extra", {rawValue: String, raw: String}, function() {
          return {rawValue: String(this.value), raw: this.value + "n"};
        }), a4("NullLiteral").bases("Literal").build().field("value", null, n5.null), a4("BooleanLiteral").bases("Literal").build("value").field("value", Boolean), a4("RegExpLiteral").bases("Literal").build("pattern", "flags").field("pattern", String).field("flags", String).field("value", RegExp, function() {
          return new RegExp(this.pattern, this.flags);
        });
        var l3 = o4(a4("Property"), a4("ObjectMethod"), a4("ObjectProperty"), a4("SpreadProperty"), a4("SpreadElement"));
        a4("ObjectExpression").bases("Expression").build("properties").field("properties", [l3]), a4("ObjectMethod").bases("Node", "Function").build("kind", "key", "params", "body", "computed").field("kind", o4("method", "get", "set")).field("key", o4(a4("Literal"), a4("Identifier"), a4("Expression"))).field("params", [a4("Pattern")]).field("body", a4("BlockStatement")).field("computed", Boolean, n5.false).field("generator", Boolean, n5.false).field("async", Boolean, n5.false).field("accessibility", o4(a4("Literal"), null), n5.null).field("decorators", o4([a4("Decorator")], null), n5.null), a4("ObjectProperty").bases("Node").build("key", "value").field("key", o4(a4("Literal"), a4("Identifier"), a4("Expression"))).field("value", o4(a4("Expression"), a4("Pattern"))).field("accessibility", o4(a4("Literal"), null), n5.null).field("computed", Boolean, n5.false);
        var c4 = o4(a4("MethodDefinition"), a4("VariableDeclarator"), a4("ClassPropertyDefinition"), a4("ClassProperty"), a4("ClassPrivateProperty"), a4("ClassMethod"), a4("ClassPrivateMethod"));
        a4("ClassBody").bases("Declaration").build("body").field("body", [c4]), a4("ClassMethod").bases("Declaration", "Function").build("kind", "key", "params", "body", "computed", "static").field("key", o4(a4("Literal"), a4("Identifier"), a4("Expression"))), a4("ClassPrivateMethod").bases("Declaration", "Function").build("key", "params", "body", "kind", "computed", "static").field("key", a4("PrivateName")), ["ClassMethod", "ClassPrivateMethod"].forEach(function(e6) {
          a4(e6).field("kind", o4("get", "set", "method", "constructor"), function() {
            return "method";
          }).field("body", a4("BlockStatement")).field("computed", Boolean, n5.false).field("static", o4(Boolean, null), n5.null).field("abstract", o4(Boolean, null), n5.null).field("access", o4("public", "private", "protected", null), n5.null).field("accessibility", o4("public", "private", "protected", null), n5.null).field("decorators", o4([a4("Decorator")], null), n5.null).field("optional", o4(Boolean, null), n5.null);
        });
        var u3 = o4(a4("Property"), a4("PropertyPattern"), a4("SpreadPropertyPattern"), a4("SpreadProperty"), a4("ObjectProperty"), a4("RestProperty"));
        a4("ObjectPattern").bases("Pattern").build("properties").field("properties", [u3]).field("decorators", o4([a4("Decorator")], null), n5.null), a4("SpreadProperty").bases("Node").build("argument").field("argument", a4("Expression")), a4("RestProperty").bases("Node").build("argument").field("argument", a4("Expression")), a4("ForAwaitStatement").bases("Statement").build("left", "right", "body").field("left", o4(a4("VariableDeclaration"), a4("Expression"))).field("right", a4("Expression")).field("body", a4("Statement")), a4("Import").bases("Expression").build();
      }
      t3.default = n4, e4.exports = t3.default;
    }), ce2 = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true});
      var r4 = U2.__importDefault(le2), s4 = U2.__importDefault(ae2);
      function i4(e5) {
        e5.use(r4.default), e5.use(s4.default);
      }
      t3.default = i4, e4.exports = t3.default;
    }), ue2 = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true});
      var r4 = U2.__importDefault(le2), s4 = U2.__importDefault(ne2), i4 = U2.__importDefault(q3), n4 = U2.__importDefault(K2);
      function a4(e5) {
        e5.use(r4.default), e5.use(s4.default);
        var t4 = e5.use(i4.default), a5 = t4.namedTypes, o4 = t4.Type.def, l3 = t4.Type.or, c4 = e5.use(n4.default).defaults, u3 = t4.Type.from(function(e6, t5) {
          return !(!a5.StringLiteral || !a5.StringLiteral.check(e6, t5)) || !(!a5.Literal || !a5.Literal.check(e6, t5) || typeof e6.value != "string");
        }, "StringLiteral");
        o4("TSType").bases("Node");
        var h4 = l3(o4("Identifier"), o4("TSQualifiedName"));
        o4("TSTypeReference").bases("TSType", "TSHasOptionalTypeParameterInstantiation").build("typeName", "typeParameters").field("typeName", h4), o4("TSHasOptionalTypeParameterInstantiation").field("typeParameters", l3(o4("TSTypeParameterInstantiation"), null), c4.null), o4("TSHasOptionalTypeParameters").field("typeParameters", l3(o4("TSTypeParameterDeclaration"), null, void 0), c4.null), o4("TSHasOptionalTypeAnnotation").field("typeAnnotation", l3(o4("TSTypeAnnotation"), null), c4.null), o4("TSQualifiedName").bases("Node").build("left", "right").field("left", h4).field("right", h4), o4("TSAsExpression").bases("Expression", "Pattern").build("expression", "typeAnnotation").field("expression", o4("Expression")).field("typeAnnotation", o4("TSType")).field("extra", l3({parenthesized: Boolean}, null), c4.null), o4("TSNonNullExpression").bases("Expression", "Pattern").build("expression").field("expression", o4("Expression")), ["TSAnyKeyword", "TSBigIntKeyword", "TSBooleanKeyword", "TSNeverKeyword", "TSNullKeyword", "TSNumberKeyword", "TSObjectKeyword", "TSStringKeyword", "TSSymbolKeyword", "TSUndefinedKeyword", "TSUnknownKeyword", "TSVoidKeyword", "TSThisType"].forEach(function(e6) {
          o4(e6).bases("TSType").build();
        }), o4("TSArrayType").bases("TSType").build("elementType").field("elementType", o4("TSType")), o4("TSLiteralType").bases("TSType").build("literal").field("literal", l3(o4("NumericLiteral"), o4("StringLiteral"), o4("BooleanLiteral"), o4("TemplateLiteral"), o4("UnaryExpression"))), ["TSUnionType", "TSIntersectionType"].forEach(function(e6) {
          o4(e6).bases("TSType").build("types").field("types", [o4("TSType")]);
        }), o4("TSConditionalType").bases("TSType").build("checkType", "extendsType", "trueType", "falseType").field("checkType", o4("TSType")).field("extendsType", o4("TSType")).field("trueType", o4("TSType")).field("falseType", o4("TSType")), o4("TSInferType").bases("TSType").build("typeParameter").field("typeParameter", o4("TSTypeParameter")), o4("TSParenthesizedType").bases("TSType").build("typeAnnotation").field("typeAnnotation", o4("TSType"));
        var p4 = [l3(o4("Identifier"), o4("RestElement"), o4("ArrayPattern"), o4("ObjectPattern"))];
        ["TSFunctionType", "TSConstructorType"].forEach(function(e6) {
          o4(e6).bases("TSType", "TSHasOptionalTypeParameters", "TSHasOptionalTypeAnnotation").build("parameters").field("parameters", p4);
        }), o4("TSDeclareFunction").bases("Declaration", "TSHasOptionalTypeParameters").build("id", "params", "returnType").field("declare", Boolean, c4.false).field("async", Boolean, c4.false).field("generator", Boolean, c4.false).field("id", l3(o4("Identifier"), null), c4.null).field("params", [o4("Pattern")]).field("returnType", l3(o4("TSTypeAnnotation"), o4("Noop"), null), c4.null), o4("TSDeclareMethod").bases("Declaration", "TSHasOptionalTypeParameters").build("key", "params", "returnType").field("async", Boolean, c4.false).field("generator", Boolean, c4.false).field("params", [o4("Pattern")]).field("abstract", Boolean, c4.false).field("accessibility", l3("public", "private", "protected", void 0), c4[void 0]).field("static", Boolean, c4.false).field("computed", Boolean, c4.false).field("optional", Boolean, c4.false).field("key", l3(o4("Identifier"), o4("StringLiteral"), o4("NumericLiteral"), o4("Expression"))).field("kind", l3("get", "set", "method", "constructor"), function() {
          return "method";
        }).field("access", l3("public", "private", "protected", void 0), c4[void 0]).field("decorators", l3([o4("Decorator")], null), c4.null).field("returnType", l3(o4("TSTypeAnnotation"), o4("Noop"), null), c4.null), o4("TSMappedType").bases("TSType").build("typeParameter", "typeAnnotation").field("readonly", l3(Boolean, "+", "-"), c4.false).field("typeParameter", o4("TSTypeParameter")).field("optional", l3(Boolean, "+", "-"), c4.false).field("typeAnnotation", l3(o4("TSType"), null), c4.null), o4("TSTupleType").bases("TSType").build("elementTypes").field("elementTypes", [l3(o4("TSType"), o4("TSNamedTupleMember"))]), o4("TSNamedTupleMember").bases("TSType").build("label", "elementType", "optional").field("label", o4("Identifier")).field("optional", Boolean, c4.false).field("elementType", o4("TSType")), o4("TSRestType").bases("TSType").build("typeAnnotation").field("typeAnnotation", o4("TSType")), o4("TSOptionalType").bases("TSType").build("typeAnnotation").field("typeAnnotation", o4("TSType")), o4("TSIndexedAccessType").bases("TSType").build("objectType", "indexType").field("objectType", o4("TSType")).field("indexType", o4("TSType")), o4("TSTypeOperator").bases("TSType").build("operator").field("operator", String).field("typeAnnotation", o4("TSType")), o4("TSTypeAnnotation").bases("Node").build("typeAnnotation").field("typeAnnotation", l3(o4("TSType"), o4("TSTypeAnnotation"))), o4("TSIndexSignature").bases("Declaration", "TSHasOptionalTypeAnnotation").build("parameters", "typeAnnotation").field("parameters", [o4("Identifier")]).field("readonly", Boolean, c4.false), o4("TSPropertySignature").bases("Declaration", "TSHasOptionalTypeAnnotation").build("key", "typeAnnotation", "optional").field("key", o4("Expression")).field("computed", Boolean, c4.false).field("readonly", Boolean, c4.false).field("optional", Boolean, c4.false).field("initializer", l3(o4("Expression"), null), c4.null), o4("TSMethodSignature").bases("Declaration", "TSHasOptionalTypeParameters", "TSHasOptionalTypeAnnotation").build("key", "parameters", "typeAnnotation").field("key", o4("Expression")).field("computed", Boolean, c4.false).field("optional", Boolean, c4.false).field("parameters", p4), o4("TSTypePredicate").bases("TSTypeAnnotation", "TSType").build("parameterName", "typeAnnotation", "asserts").field("parameterName", l3(o4("Identifier"), o4("TSThisType"))).field("typeAnnotation", l3(o4("TSTypeAnnotation"), null), c4.null).field("asserts", Boolean, c4.false), ["TSCallSignatureDeclaration", "TSConstructSignatureDeclaration"].forEach(function(e6) {
          o4(e6).bases("Declaration", "TSHasOptionalTypeParameters", "TSHasOptionalTypeAnnotation").build("parameters", "typeAnnotation").field("parameters", p4);
        }), o4("TSEnumMember").bases("Node").build("id", "initializer").field("id", l3(o4("Identifier"), u3)).field("initializer", l3(o4("Expression"), null), c4.null), o4("TSTypeQuery").bases("TSType").build("exprName").field("exprName", l3(h4, o4("TSImportType")));
        var d4 = l3(o4("TSCallSignatureDeclaration"), o4("TSConstructSignatureDeclaration"), o4("TSIndexSignature"), o4("TSMethodSignature"), o4("TSPropertySignature"));
        o4("TSTypeLiteral").bases("TSType").build("members").field("members", [d4]), o4("TSTypeParameter").bases("Identifier").build("name", "constraint", "default").field("name", String).field("constraint", l3(o4("TSType"), void 0), c4[void 0]).field("default", l3(o4("TSType"), void 0), c4[void 0]), o4("TSTypeAssertion").bases("Expression", "Pattern").build("typeAnnotation", "expression").field("typeAnnotation", o4("TSType")).field("expression", o4("Expression")).field("extra", l3({parenthesized: Boolean}, null), c4.null), o4("TSTypeParameterDeclaration").bases("Declaration").build("params").field("params", [o4("TSTypeParameter")]), o4("TSTypeParameterInstantiation").bases("Node").build("params").field("params", [o4("TSType")]), o4("TSEnumDeclaration").bases("Declaration").build("id", "members").field("id", o4("Identifier")).field("const", Boolean, c4.false).field("declare", Boolean, c4.false).field("members", [o4("TSEnumMember")]).field("initializer", l3(o4("Expression"), null), c4.null), o4("TSTypeAliasDeclaration").bases("Declaration", "TSHasOptionalTypeParameters").build("id", "typeAnnotation").field("id", o4("Identifier")).field("declare", Boolean, c4.false).field("typeAnnotation", o4("TSType")), o4("TSModuleBlock").bases("Node").build("body").field("body", [o4("Statement")]), o4("TSModuleDeclaration").bases("Declaration").build("id", "body").field("id", l3(u3, h4)).field("declare", Boolean, c4.false).field("global", Boolean, c4.false).field("body", l3(o4("TSModuleBlock"), o4("TSModuleDeclaration"), null), c4.null), o4("TSImportType").bases("TSType", "TSHasOptionalTypeParameterInstantiation").build("argument", "qualifier", "typeParameters").field("argument", u3).field("qualifier", l3(h4, void 0), c4[void 0]), o4("TSImportEqualsDeclaration").bases("Declaration").build("id", "moduleReference").field("id", o4("Identifier")).field("isExport", Boolean, c4.false).field("moduleReference", l3(h4, o4("TSExternalModuleReference"))), o4("TSExternalModuleReference").bases("Declaration").build("expression").field("expression", u3), o4("TSExportAssignment").bases("Statement").build("expression").field("expression", o4("Expression")), o4("TSNamespaceExportDeclaration").bases("Declaration").build("id").field("id", o4("Identifier")), o4("TSInterfaceBody").bases("Node").build("body").field("body", [d4]), o4("TSExpressionWithTypeArguments").bases("TSType", "TSHasOptionalTypeParameterInstantiation").build("expression", "typeParameters").field("expression", h4), o4("TSInterfaceDeclaration").bases("Declaration", "TSHasOptionalTypeParameters").build("id", "body").field("id", h4).field("declare", Boolean, c4.false).field("extends", l3([o4("TSExpressionWithTypeArguments")], null), c4.null).field("body", o4("TSInterfaceBody")), o4("TSParameterProperty").bases("Pattern").build("parameter").field("accessibility", l3("public", "private", "protected", void 0), c4[void 0]).field("readonly", Boolean, c4.false).field("parameter", l3(o4("Identifier"), o4("AssignmentPattern"))), o4("ClassProperty").field("access", l3("public", "private", "protected", void 0), c4[void 0]), o4("ClassBody").field("body", [l3(o4("MethodDefinition"), o4("VariableDeclarator"), o4("ClassPropertyDefinition"), o4("ClassProperty"), o4("ClassPrivateProperty"), o4("ClassMethod"), o4("ClassPrivateMethod"), o4("TSDeclareMethod"), d4)]);
      }
      t3.default = a4, e4.exports = t3.default;
    }), he2 = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true}), t3.namedTypes = void 0, t3.namedTypes || (t3.namedTypes = {});
    }), pe2 = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true}), t3.visit = t3.use = t3.Type = t3.someField = t3.PathVisitor = t3.Path = t3.NodePath = t3.namedTypes = t3.getSupertypeNames = t3.getFieldValue = t3.getFieldNames = t3.getBuilderName = t3.finalize = t3.eachField = t3.defineMethod = t3.builtInTypes = t3.builders = t3.astNodesAreEquivalent = void 0;
      var r4 = U2.__importDefault(H2), s4 = U2.__importDefault($3), i4 = U2.__importDefault(Y2), n4 = U2.__importDefault(Q2), a4 = U2.__importDefault(Z2), o4 = U2.__importDefault(ee2), l3 = U2.__importDefault(te2), c4 = U2.__importDefault(re2), u3 = U2.__importDefault(se2), h4 = U2.__importDefault(ae2), p4 = U2.__importDefault(oe2), d4 = U2.__importDefault(ce2), f4 = U2.__importDefault(ue2), m4 = U2.__importDefault(ie2);
      Object.defineProperty(t3, "namedTypes", {enumerable: true, get: function() {
        return he2.namedTypes;
      }});
      var y4 = r4.default([s4.default, i4.default, n4.default, a4.default, o4.default, l3.default, c4.default, u3.default, h4.default, p4.default, d4.default, f4.default, m4.default]), g4 = y4.astNodesAreEquivalent, x4 = y4.builders, b3 = y4.builtInTypes, E4 = y4.defineMethod, v5 = y4.eachField, S4 = y4.finalize, A3 = y4.getBuilderName, T3 = y4.getFieldNames, w4 = y4.getFieldValue, C3 = y4.getSupertypeNames, P3 = y4.namedTypes, D3 = y4.NodePath, k4 = y4.Path, N3 = y4.PathVisitor, I3 = y4.someField, F3 = y4.Type, M4 = y4.use, L3 = y4.visit;
      t3.astNodesAreEquivalent = g4, t3.builders = x4, t3.builtInTypes = b3, t3.defineMethod = E4, t3.eachField = v5, t3.finalize = S4, t3.getBuilderName = A3, t3.getFieldNames = T3, t3.getFieldValue = w4, t3.getSupertypeNames = C3, t3.NodePath = D3, t3.Path = k4, t3.PathVisitor = N3, t3.someField = I3, t3.Type = F3, t3.use = M4, t3.visit = L3, Object.assign(he2.namedTypes, P3);
    }), de2 = [], fe2 = [], me2 = typeof Uint8Array != "undefined" ? Uint8Array : Array, ye2 = false;
    function ge2() {
      ye2 = true;
      for (var e4 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", t3 = 0, r4 = e4.length; t3 < r4; ++t3)
        de2[t3] = e4[t3], fe2[e4.charCodeAt(t3)] = t3;
      fe2["-".charCodeAt(0)] = 62, fe2["_".charCodeAt(0)] = 63;
    }
    function xe2(e4) {
      var t3, r4, s4, i4, n4, a4;
      ye2 || ge2();
      var o4 = e4.length;
      if (o4 % 4 > 0)
        throw new Error("Invalid string. Length must be a multiple of 4");
      n4 = e4[o4 - 2] === "=" ? 2 : e4[o4 - 1] === "=" ? 1 : 0, a4 = new me2(3 * o4 / 4 - n4), s4 = n4 > 0 ? o4 - 4 : o4;
      var l3 = 0;
      for (t3 = 0, r4 = 0; t3 < s4; t3 += 4, r4 += 3)
        i4 = fe2[e4.charCodeAt(t3)] << 18 | fe2[e4.charCodeAt(t3 + 1)] << 12 | fe2[e4.charCodeAt(t3 + 2)] << 6 | fe2[e4.charCodeAt(t3 + 3)], a4[l3++] = i4 >> 16 & 255, a4[l3++] = i4 >> 8 & 255, a4[l3++] = 255 & i4;
      return n4 === 2 ? (i4 = fe2[e4.charCodeAt(t3)] << 2 | fe2[e4.charCodeAt(t3 + 1)] >> 4, a4[l3++] = 255 & i4) : n4 === 1 && (i4 = fe2[e4.charCodeAt(t3)] << 10 | fe2[e4.charCodeAt(t3 + 1)] << 4 | fe2[e4.charCodeAt(t3 + 2)] >> 2, a4[l3++] = i4 >> 8 & 255, a4[l3++] = 255 & i4), a4;
    }
    function be2(e4) {
      return de2[e4 >> 18 & 63] + de2[e4 >> 12 & 63] + de2[e4 >> 6 & 63] + de2[63 & e4];
    }
    function Ee2(e4, t3, r4) {
      for (var s4, i4 = [], n4 = t3; n4 < r4; n4 += 3)
        s4 = (e4[n4] << 16) + (e4[n4 + 1] << 8) + e4[n4 + 2], i4.push(be2(s4));
      return i4.join("");
    }
    function ve2(e4) {
      var t3;
      ye2 || ge2();
      for (var r4 = e4.length, s4 = r4 % 3, i4 = "", n4 = [], a4 = 16383, o4 = 0, l3 = r4 - s4; o4 < l3; o4 += a4)
        n4.push(Ee2(e4, o4, o4 + a4 > l3 ? l3 : o4 + a4));
      return s4 === 1 ? (t3 = e4[r4 - 1], i4 += de2[t3 >> 2], i4 += de2[t3 << 4 & 63], i4 += "==") : s4 === 2 && (t3 = (e4[r4 - 2] << 8) + e4[r4 - 1], i4 += de2[t3 >> 10], i4 += de2[t3 >> 4 & 63], i4 += de2[t3 << 2 & 63], i4 += "="), n4.push(i4), n4.join("");
    }
    function Se2(e4, t3, r4, s4, i4) {
      var n4, a4, o4 = 8 * i4 - s4 - 1, l3 = (1 << o4) - 1, c4 = l3 >> 1, u3 = -7, h4 = r4 ? i4 - 1 : 0, p4 = r4 ? -1 : 1, d4 = e4[t3 + h4];
      for (h4 += p4, n4 = d4 & (1 << -u3) - 1, d4 >>= -u3, u3 += o4; u3 > 0; n4 = 256 * n4 + e4[t3 + h4], h4 += p4, u3 -= 8)
        ;
      for (a4 = n4 & (1 << -u3) - 1, n4 >>= -u3, u3 += s4; u3 > 0; a4 = 256 * a4 + e4[t3 + h4], h4 += p4, u3 -= 8)
        ;
      if (n4 === 0)
        n4 = 1 - c4;
      else {
        if (n4 === l3)
          return a4 ? NaN : 1 / 0 * (d4 ? -1 : 1);
        a4 += Math.pow(2, s4), n4 -= c4;
      }
      return (d4 ? -1 : 1) * a4 * Math.pow(2, n4 - s4);
    }
    function Ae2(e4, t3, r4, s4, i4, n4) {
      var a4, o4, l3, c4 = 8 * n4 - i4 - 1, u3 = (1 << c4) - 1, h4 = u3 >> 1, p4 = i4 === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, d4 = s4 ? 0 : n4 - 1, f4 = s4 ? 1 : -1, m4 = t3 < 0 || t3 === 0 && 1 / t3 < 0 ? 1 : 0;
      for (t3 = Math.abs(t3), isNaN(t3) || t3 === 1 / 0 ? (o4 = isNaN(t3) ? 1 : 0, a4 = u3) : (a4 = Math.floor(Math.log(t3) / Math.LN2), t3 * (l3 = Math.pow(2, -a4)) < 1 && (a4--, l3 *= 2), (t3 += a4 + h4 >= 1 ? p4 / l3 : p4 * Math.pow(2, 1 - h4)) * l3 >= 2 && (a4++, l3 /= 2), a4 + h4 >= u3 ? (o4 = 0, a4 = u3) : a4 + h4 >= 1 ? (o4 = (t3 * l3 - 1) * Math.pow(2, i4), a4 += h4) : (o4 = t3 * Math.pow(2, h4 - 1) * Math.pow(2, i4), a4 = 0)); i4 >= 8; e4[r4 + d4] = 255 & o4, d4 += f4, o4 /= 256, i4 -= 8)
        ;
      for (a4 = a4 << i4 | o4, c4 += i4; c4 > 0; e4[r4 + d4] = 255 & a4, d4 += f4, a4 /= 256, c4 -= 8)
        ;
      e4[r4 + d4 - f4] |= 128 * m4;
    }
    var Te2 = {}.toString, we2 = Array.isArray || function(e4) {
      return Te2.call(e4) == "[object Array]";
    }, Ce2 = 50;
    function Pe2() {
      return ke2.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
    }
    function De2(e4, t3) {
      if (Pe2() < t3)
        throw new RangeError("Invalid typed array length");
      return ke2.TYPED_ARRAY_SUPPORT ? (e4 = new Uint8Array(t3)).__proto__ = ke2.prototype : (e4 === null && (e4 = new ke2(t3)), e4.length = t3), e4;
    }
    function ke2(e4, t3, r4) {
      if (!(ke2.TYPED_ARRAY_SUPPORT || this instanceof ke2))
        return new ke2(e4, t3, r4);
      if (typeof e4 == "number") {
        if (typeof t3 == "string")
          throw new Error("If encoding is specified then the first argument must be a string");
        return Me2(this, e4);
      }
      return Ne2(this, e4, t3, r4);
    }
    function Ne2(e4, t3, r4, s4) {
      if (typeof t3 == "number")
        throw new TypeError('"value" argument must not be a number');
      return typeof ArrayBuffer != "undefined" && t3 instanceof ArrayBuffer ? _e2(e4, t3, r4, s4) : typeof t3 == "string" ? Le2(e4, t3, r4) : Be2(e4, t3);
    }
    function Ie2(e4) {
      if (typeof e4 != "number")
        throw new TypeError('"size" argument must be a number');
      if (e4 < 0)
        throw new RangeError('"size" argument must not be negative');
    }
    function Fe2(e4, t3, r4, s4) {
      return Ie2(t3), t3 <= 0 ? De2(e4, t3) : r4 !== void 0 ? typeof s4 == "string" ? De2(e4, t3).fill(r4, s4) : De2(e4, t3).fill(r4) : De2(e4, t3);
    }
    function Me2(e4, t3) {
      if (Ie2(t3), e4 = De2(e4, t3 < 0 ? 0 : 0 | Re2(t3)), !ke2.TYPED_ARRAY_SUPPORT)
        for (var r4 = 0; r4 < t3; ++r4)
          e4[r4] = 0;
      return e4;
    }
    function Le2(e4, t3, r4) {
      if (typeof r4 == "string" && r4 !== "" || (r4 = "utf8"), !ke2.isEncoding(r4))
        throw new TypeError('"encoding" must be a valid string encoding');
      var s4 = 0 | Ue2(t3, r4), i4 = (e4 = De2(e4, s4)).write(t3, r4);
      return i4 !== s4 && (e4 = e4.slice(0, i4)), e4;
    }
    function Oe2(e4, t3) {
      var r4 = t3.length < 0 ? 0 : 0 | Re2(t3.length);
      e4 = De2(e4, r4);
      for (var s4 = 0; s4 < r4; s4 += 1)
        e4[s4] = 255 & t3[s4];
      return e4;
    }
    function _e2(e4, t3, r4, s4) {
      if (t3.byteLength, r4 < 0 || t3.byteLength < r4)
        throw new RangeError("'offset' is out of bounds");
      if (t3.byteLength < r4 + (s4 || 0))
        throw new RangeError("'length' is out of bounds");
      return t3 = r4 === void 0 && s4 === void 0 ? new Uint8Array(t3) : s4 === void 0 ? new Uint8Array(t3, r4) : new Uint8Array(t3, r4, s4), ke2.TYPED_ARRAY_SUPPORT ? (e4 = t3).__proto__ = ke2.prototype : e4 = Oe2(e4, t3), e4;
    }
    function Be2(e4, t3) {
      if (je2(t3)) {
        var r4 = 0 | Re2(t3.length);
        return (e4 = De2(e4, r4)).length === 0 || t3.copy(e4, 0, 0, r4), e4;
      }
      if (t3) {
        if (typeof ArrayBuffer != "undefined" && t3.buffer instanceof ArrayBuffer || "length" in t3)
          return typeof t3.length != "number" || vt2(t3.length) ? De2(e4, 0) : Oe2(e4, t3);
        if (t3.type === "Buffer" && we2(t3.data))
          return Oe2(e4, t3.data);
      }
      throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
    }
    function Re2(e4) {
      if (e4 >= Pe2())
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + Pe2().toString(16) + " bytes");
      return 0 | e4;
    }
    function je2(e4) {
      return !(e4 == null || !e4._isBuffer);
    }
    function Ue2(e4, t3) {
      if (je2(e4))
        return e4.length;
      if (typeof ArrayBuffer != "undefined" && typeof ArrayBuffer.isView == "function" && (ArrayBuffer.isView(e4) || e4 instanceof ArrayBuffer))
        return e4.byteLength;
      typeof e4 != "string" && (e4 = "" + e4);
      var r4 = e4.length;
      if (r4 === 0)
        return 0;
      for (var s4 = false; ; )
        switch (t3) {
          case "ascii":
          case "latin1":
          case "binary":
            return r4;
          case "utf8":
          case "utf-8":
          case void 0:
            return yt2(e4).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return 2 * r4;
          case "hex":
            return r4 >>> 1;
          case "base64":
            return bt2(e4).length;
          default:
            if (s4)
              return yt2(e4).length;
            t3 = ("" + t3).toLowerCase(), s4 = true;
        }
    }
    function qe2(e4, t3, r4) {
      var s4 = false;
      if ((t3 === void 0 || t3 < 0) && (t3 = 0), t3 > this.length)
        return "";
      if ((r4 === void 0 || r4 > this.length) && (r4 = this.length), r4 <= 0)
        return "";
      if ((r4 >>>= 0) <= (t3 >>>= 0))
        return "";
      for (e4 || (e4 = "utf8"); ; )
        switch (e4) {
          case "hex":
            return st2(this, t3, r4);
          case "utf8":
          case "utf-8":
            return Qe2(this, t3, r4);
          case "ascii":
            return tt2(this, t3, r4);
          case "latin1":
          case "binary":
            return rt2(this, t3, r4);
          case "base64":
            return Ye2(this, t3, r4);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return it2(this, t3, r4);
          default:
            if (s4)
              throw new TypeError("Unknown encoding: " + e4);
            e4 = (e4 + "").toLowerCase(), s4 = true;
        }
    }
    function ze2(e4, t3, r4) {
      var s4 = e4[t3];
      e4[t3] = e4[r4], e4[r4] = s4;
    }
    function Ve2(e4, t3, r4, s4, i4) {
      if (e4.length === 0)
        return -1;
      if (typeof r4 == "string" ? (s4 = r4, r4 = 0) : r4 > 2147483647 ? r4 = 2147483647 : r4 < -2147483648 && (r4 = -2147483648), r4 = +r4, isNaN(r4) && (r4 = i4 ? 0 : e4.length - 1), r4 < 0 && (r4 = e4.length + r4), r4 >= e4.length) {
        if (i4)
          return -1;
        r4 = e4.length - 1;
      } else if (r4 < 0) {
        if (!i4)
          return -1;
        r4 = 0;
      }
      if (typeof t3 == "string" && (t3 = ke2.from(t3, s4)), je2(t3))
        return t3.length === 0 ? -1 : Je2(e4, t3, r4, s4, i4);
      if (typeof t3 == "number")
        return t3 &= 255, ke2.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf == "function" ? i4 ? Uint8Array.prototype.indexOf.call(e4, t3, r4) : Uint8Array.prototype.lastIndexOf.call(e4, t3, r4) : Je2(e4, [t3], r4, s4, i4);
      throw new TypeError("val must be string, number or Buffer");
    }
    function Je2(e4, t3, r4, s4, i4) {
      var n4, a4 = 1, o4 = e4.length, l3 = t3.length;
      if (s4 !== void 0 && ((s4 = String(s4).toLowerCase()) === "ucs2" || s4 === "ucs-2" || s4 === "utf16le" || s4 === "utf-16le")) {
        if (e4.length < 2 || t3.length < 2)
          return -1;
        a4 = 2, o4 /= 2, l3 /= 2, r4 /= 2;
      }
      function c4(e5, t4) {
        return a4 === 1 ? e5[t4] : e5.readUInt16BE(t4 * a4);
      }
      if (i4) {
        var u3 = -1;
        for (n4 = r4; n4 < o4; n4++)
          if (c4(e4, n4) === c4(t3, u3 === -1 ? 0 : n4 - u3)) {
            if (u3 === -1 && (u3 = n4), n4 - u3 + 1 === l3)
              return u3 * a4;
          } else
            u3 !== -1 && (n4 -= n4 - u3), u3 = -1;
      } else
        for (r4 + l3 > o4 && (r4 = o4 - l3), n4 = r4; n4 >= 0; n4--) {
          for (var h4 = true, p4 = 0; p4 < l3; p4++)
            if (c4(e4, n4 + p4) !== c4(t3, p4)) {
              h4 = false;
              break;
            }
          if (h4)
            return n4;
        }
      return -1;
    }
    function Xe2(e4, t3, r4, s4) {
      r4 = Number(r4) || 0;
      var i4 = e4.length - r4;
      s4 ? (s4 = Number(s4)) > i4 && (s4 = i4) : s4 = i4;
      var n4 = t3.length;
      if (n4 % 2 != 0)
        throw new TypeError("Invalid hex string");
      s4 > n4 / 2 && (s4 = n4 / 2);
      for (var a4 = 0; a4 < s4; ++a4) {
        var o4 = parseInt(t3.substr(2 * a4, 2), 16);
        if (isNaN(o4))
          return a4;
        e4[r4 + a4] = o4;
      }
      return a4;
    }
    function Ge2(e4, t3, r4, s4) {
      return Et2(yt2(t3, e4.length - r4), e4, r4, s4);
    }
    function He2(e4, t3, r4, s4) {
      return Et2(gt2(t3), e4, r4, s4);
    }
    function We2(e4, t3, r4, s4) {
      return He2(e4, t3, r4, s4);
    }
    function Ke2(e4, t3, r4, s4) {
      return Et2(bt2(t3), e4, r4, s4);
    }
    function $e2(e4, t3, r4, s4) {
      return Et2(xt2(t3, e4.length - r4), e4, r4, s4);
    }
    function Ye2(e4, t3, r4) {
      return t3 === 0 && r4 === e4.length ? ve2(e4) : ve2(e4.slice(t3, r4));
    }
    function Qe2(e4, t3, r4) {
      r4 = Math.min(e4.length, r4);
      for (var s4 = [], i4 = t3; i4 < r4; ) {
        var n4, a4, o4, l3, c4 = e4[i4], u3 = null, h4 = c4 > 239 ? 4 : c4 > 223 ? 3 : c4 > 191 ? 2 : 1;
        if (i4 + h4 <= r4)
          switch (h4) {
            case 1:
              c4 < 128 && (u3 = c4);
              break;
            case 2:
              (192 & (n4 = e4[i4 + 1])) == 128 && (l3 = (31 & c4) << 6 | 63 & n4) > 127 && (u3 = l3);
              break;
            case 3:
              n4 = e4[i4 + 1], a4 = e4[i4 + 2], (192 & n4) == 128 && (192 & a4) == 128 && (l3 = (15 & c4) << 12 | (63 & n4) << 6 | 63 & a4) > 2047 && (l3 < 55296 || l3 > 57343) && (u3 = l3);
              break;
            case 4:
              n4 = e4[i4 + 1], a4 = e4[i4 + 2], o4 = e4[i4 + 3], (192 & n4) == 128 && (192 & a4) == 128 && (192 & o4) == 128 && (l3 = (15 & c4) << 18 | (63 & n4) << 12 | (63 & a4) << 6 | 63 & o4) > 65535 && l3 < 1114112 && (u3 = l3);
          }
        u3 === null ? (u3 = 65533, h4 = 1) : u3 > 65535 && (u3 -= 65536, s4.push(u3 >>> 10 & 1023 | 55296), u3 = 56320 | 1023 & u3), s4.push(u3), i4 += h4;
      }
      return et2(s4);
    }
    ke2.TYPED_ARRAY_SUPPORT = i3.TYPED_ARRAY_SUPPORT === void 0 || i3.TYPED_ARRAY_SUPPORT, ke2.poolSize = 8192, ke2._augment = function(e4) {
      return e4.__proto__ = ke2.prototype, e4;
    }, ke2.from = function(e4, t3, r4) {
      return Ne2(null, e4, t3, r4);
    }, ke2.TYPED_ARRAY_SUPPORT && (ke2.prototype.__proto__ = Uint8Array.prototype, ke2.__proto__ = Uint8Array), ke2.alloc = function(e4, t3, r4) {
      return Fe2(null, e4, t3, r4);
    }, ke2.allocUnsafe = function(e4) {
      return Me2(null, e4);
    }, ke2.allocUnsafeSlow = function(e4) {
      return Me2(null, e4);
    }, ke2.isBuffer = St2, ke2.compare = function(e4, t3) {
      if (!je2(e4) || !je2(t3))
        throw new TypeError("Arguments must be Buffers");
      if (e4 === t3)
        return 0;
      for (var r4 = e4.length, s4 = t3.length, i4 = 0, n4 = Math.min(r4, s4); i4 < n4; ++i4)
        if (e4[i4] !== t3[i4]) {
          r4 = e4[i4], s4 = t3[i4];
          break;
        }
      return r4 < s4 ? -1 : s4 < r4 ? 1 : 0;
    }, ke2.isEncoding = function(e4) {
      switch (String(e4).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    }, ke2.concat = function(e4, t3) {
      if (!we2(e4))
        throw new TypeError('"list" argument must be an Array of Buffers');
      if (e4.length === 0)
        return ke2.alloc(0);
      var r4;
      if (t3 === void 0)
        for (t3 = 0, r4 = 0; r4 < e4.length; ++r4)
          t3 += e4[r4].length;
      var s4 = ke2.allocUnsafe(t3), i4 = 0;
      for (r4 = 0; r4 < e4.length; ++r4) {
        var n4 = e4[r4];
        if (!je2(n4))
          throw new TypeError('"list" argument must be an Array of Buffers');
        n4.copy(s4, i4), i4 += n4.length;
      }
      return s4;
    }, ke2.byteLength = Ue2, ke2.prototype._isBuffer = true, ke2.prototype.swap16 = function() {
      var e4 = this.length;
      if (e4 % 2 != 0)
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      for (var t3 = 0; t3 < e4; t3 += 2)
        ze2(this, t3, t3 + 1);
      return this;
    }, ke2.prototype.swap32 = function() {
      var e4 = this.length;
      if (e4 % 4 != 0)
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      for (var t3 = 0; t3 < e4; t3 += 4)
        ze2(this, t3, t3 + 3), ze2(this, t3 + 1, t3 + 2);
      return this;
    }, ke2.prototype.swap64 = function() {
      var e4 = this.length;
      if (e4 % 8 != 0)
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      for (var t3 = 0; t3 < e4; t3 += 8)
        ze2(this, t3, t3 + 7), ze2(this, t3 + 1, t3 + 6), ze2(this, t3 + 2, t3 + 5), ze2(this, t3 + 3, t3 + 4);
      return this;
    }, ke2.prototype.toString = function() {
      var e4 = 0 | this.length;
      return e4 === 0 ? "" : arguments.length === 0 ? Qe2(this, 0, e4) : qe2.apply(this, arguments);
    }, ke2.prototype.equals = function(e4) {
      if (!je2(e4))
        throw new TypeError("Argument must be a Buffer");
      return this === e4 || ke2.compare(this, e4) === 0;
    }, ke2.prototype.inspect = function() {
      var e4 = "", t3 = Ce2;
      return this.length > 0 && (e4 = this.toString("hex", 0, t3).match(/.{2}/g).join(" "), this.length > t3 && (e4 += " ... ")), "<Buffer " + e4 + ">";
    }, ke2.prototype.compare = function(e4, t3, r4, s4, i4) {
      if (!je2(e4))
        throw new TypeError("Argument must be a Buffer");
      if (t3 === void 0 && (t3 = 0), r4 === void 0 && (r4 = e4 ? e4.length : 0), s4 === void 0 && (s4 = 0), i4 === void 0 && (i4 = this.length), t3 < 0 || r4 > e4.length || s4 < 0 || i4 > this.length)
        throw new RangeError("out of range index");
      if (s4 >= i4 && t3 >= r4)
        return 0;
      if (s4 >= i4)
        return -1;
      if (t3 >= r4)
        return 1;
      if (this === e4)
        return 0;
      for (var n4 = (i4 >>>= 0) - (s4 >>>= 0), a4 = (r4 >>>= 0) - (t3 >>>= 0), o4 = Math.min(n4, a4), l3 = this.slice(s4, i4), c4 = e4.slice(t3, r4), u3 = 0; u3 < o4; ++u3)
        if (l3[u3] !== c4[u3]) {
          n4 = l3[u3], a4 = c4[u3];
          break;
        }
      return n4 < a4 ? -1 : a4 < n4 ? 1 : 0;
    }, ke2.prototype.includes = function(e4, t3, r4) {
      return this.indexOf(e4, t3, r4) !== -1;
    }, ke2.prototype.indexOf = function(e4, t3, r4) {
      return Ve2(this, e4, t3, r4, true);
    }, ke2.prototype.lastIndexOf = function(e4, t3, r4) {
      return Ve2(this, e4, t3, r4, false);
    }, ke2.prototype.write = function(e4, t3, r4, s4) {
      if (t3 === void 0)
        s4 = "utf8", r4 = this.length, t3 = 0;
      else if (r4 === void 0 && typeof t3 == "string")
        s4 = t3, r4 = this.length, t3 = 0;
      else {
        if (!isFinite(t3))
          throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
        t3 |= 0, isFinite(r4) ? (r4 |= 0, s4 === void 0 && (s4 = "utf8")) : (s4 = r4, r4 = void 0);
      }
      var i4 = this.length - t3;
      if ((r4 === void 0 || r4 > i4) && (r4 = i4), e4.length > 0 && (r4 < 0 || t3 < 0) || t3 > this.length)
        throw new RangeError("Attempt to write outside buffer bounds");
      s4 || (s4 = "utf8");
      for (var n4 = false; ; )
        switch (s4) {
          case "hex":
            return Xe2(this, e4, t3, r4);
          case "utf8":
          case "utf-8":
            return Ge2(this, e4, t3, r4);
          case "ascii":
            return He2(this, e4, t3, r4);
          case "latin1":
          case "binary":
            return We2(this, e4, t3, r4);
          case "base64":
            return Ke2(this, e4, t3, r4);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return $e2(this, e4, t3, r4);
          default:
            if (n4)
              throw new TypeError("Unknown encoding: " + s4);
            s4 = ("" + s4).toLowerCase(), n4 = true;
        }
    }, ke2.prototype.toJSON = function() {
      return {type: "Buffer", data: Array.prototype.slice.call(this._arr || this, 0)};
    };
    var Ze2 = 4096;
    function et2(e4) {
      var t3 = e4.length;
      if (t3 <= Ze2)
        return String.fromCharCode.apply(String, e4);
      for (var r4 = "", s4 = 0; s4 < t3; )
        r4 += String.fromCharCode.apply(String, e4.slice(s4, s4 += Ze2));
      return r4;
    }
    function tt2(e4, t3, r4) {
      var s4 = "";
      r4 = Math.min(e4.length, r4);
      for (var i4 = t3; i4 < r4; ++i4)
        s4 += String.fromCharCode(127 & e4[i4]);
      return s4;
    }
    function rt2(e4, t3, r4) {
      var s4 = "";
      r4 = Math.min(e4.length, r4);
      for (var i4 = t3; i4 < r4; ++i4)
        s4 += String.fromCharCode(e4[i4]);
      return s4;
    }
    function st2(e4, t3, r4) {
      var s4 = e4.length;
      (!t3 || t3 < 0) && (t3 = 0), (!r4 || r4 < 0 || r4 > s4) && (r4 = s4);
      for (var i4 = "", n4 = t3; n4 < r4; ++n4)
        i4 += mt2(e4[n4]);
      return i4;
    }
    function it2(e4, t3, r4) {
      for (var s4 = e4.slice(t3, r4), i4 = "", n4 = 0; n4 < s4.length; n4 += 2)
        i4 += String.fromCharCode(s4[n4] + 256 * s4[n4 + 1]);
      return i4;
    }
    function nt2(e4, t3, r4) {
      if (e4 % 1 != 0 || e4 < 0)
        throw new RangeError("offset is not uint");
      if (e4 + t3 > r4)
        throw new RangeError("Trying to access beyond buffer length");
    }
    function at2(e4, t3, r4, s4, i4, n4) {
      if (!je2(e4))
        throw new TypeError('"buffer" argument must be a Buffer instance');
      if (t3 > i4 || t3 < n4)
        throw new RangeError('"value" argument is out of bounds');
      if (r4 + s4 > e4.length)
        throw new RangeError("Index out of range");
    }
    function ot2(e4, t3, r4, s4) {
      t3 < 0 && (t3 = 65535 + t3 + 1);
      for (var i4 = 0, n4 = Math.min(e4.length - r4, 2); i4 < n4; ++i4)
        e4[r4 + i4] = (t3 & 255 << 8 * (s4 ? i4 : 1 - i4)) >>> 8 * (s4 ? i4 : 1 - i4);
    }
    function lt2(e4, t3, r4, s4) {
      t3 < 0 && (t3 = 4294967295 + t3 + 1);
      for (var i4 = 0, n4 = Math.min(e4.length - r4, 4); i4 < n4; ++i4)
        e4[r4 + i4] = t3 >>> 8 * (s4 ? i4 : 3 - i4) & 255;
    }
    function ct2(e4, t3, r4, s4, i4, n4) {
      if (r4 + s4 > e4.length)
        throw new RangeError("Index out of range");
      if (r4 < 0)
        throw new RangeError("Index out of range");
    }
    function ut2(e4, t3, r4, s4, i4) {
      return i4 || ct2(e4, t3, r4, 4), Ae2(e4, t3, r4, s4, 23, 4), r4 + 4;
    }
    function ht2(e4, t3, r4, s4, i4) {
      return i4 || ct2(e4, t3, r4, 8), Ae2(e4, t3, r4, s4, 52, 8), r4 + 8;
    }
    ke2.prototype.slice = function(e4, t3) {
      var r4, s4 = this.length;
      if ((e4 = ~~e4) < 0 ? (e4 += s4) < 0 && (e4 = 0) : e4 > s4 && (e4 = s4), (t3 = t3 === void 0 ? s4 : ~~t3) < 0 ? (t3 += s4) < 0 && (t3 = 0) : t3 > s4 && (t3 = s4), t3 < e4 && (t3 = e4), ke2.TYPED_ARRAY_SUPPORT)
        (r4 = this.subarray(e4, t3)).__proto__ = ke2.prototype;
      else {
        var i4 = t3 - e4;
        r4 = new ke2(i4, void 0);
        for (var n4 = 0; n4 < i4; ++n4)
          r4[n4] = this[n4 + e4];
      }
      return r4;
    }, ke2.prototype.readUIntLE = function(e4, t3, r4) {
      e4 |= 0, t3 |= 0, r4 || nt2(e4, t3, this.length);
      for (var s4 = this[e4], i4 = 1, n4 = 0; ++n4 < t3 && (i4 *= 256); )
        s4 += this[e4 + n4] * i4;
      return s4;
    }, ke2.prototype.readUIntBE = function(e4, t3, r4) {
      e4 |= 0, t3 |= 0, r4 || nt2(e4, t3, this.length);
      for (var s4 = this[e4 + --t3], i4 = 1; t3 > 0 && (i4 *= 256); )
        s4 += this[e4 + --t3] * i4;
      return s4;
    }, ke2.prototype.readUInt8 = function(e4, t3) {
      return t3 || nt2(e4, 1, this.length), this[e4];
    }, ke2.prototype.readUInt16LE = function(e4, t3) {
      return t3 || nt2(e4, 2, this.length), this[e4] | this[e4 + 1] << 8;
    }, ke2.prototype.readUInt16BE = function(e4, t3) {
      return t3 || nt2(e4, 2, this.length), this[e4] << 8 | this[e4 + 1];
    }, ke2.prototype.readUInt32LE = function(e4, t3) {
      return t3 || nt2(e4, 4, this.length), (this[e4] | this[e4 + 1] << 8 | this[e4 + 2] << 16) + 16777216 * this[e4 + 3];
    }, ke2.prototype.readUInt32BE = function(e4, t3) {
      return t3 || nt2(e4, 4, this.length), 16777216 * this[e4] + (this[e4 + 1] << 16 | this[e4 + 2] << 8 | this[e4 + 3]);
    }, ke2.prototype.readIntLE = function(e4, t3, r4) {
      e4 |= 0, t3 |= 0, r4 || nt2(e4, t3, this.length);
      for (var s4 = this[e4], i4 = 1, n4 = 0; ++n4 < t3 && (i4 *= 256); )
        s4 += this[e4 + n4] * i4;
      return s4 >= (i4 *= 128) && (s4 -= Math.pow(2, 8 * t3)), s4;
    }, ke2.prototype.readIntBE = function(e4, t3, r4) {
      e4 |= 0, t3 |= 0, r4 || nt2(e4, t3, this.length);
      for (var s4 = t3, i4 = 1, n4 = this[e4 + --s4]; s4 > 0 && (i4 *= 256); )
        n4 += this[e4 + --s4] * i4;
      return n4 >= (i4 *= 128) && (n4 -= Math.pow(2, 8 * t3)), n4;
    }, ke2.prototype.readInt8 = function(e4, t3) {
      return t3 || nt2(e4, 1, this.length), 128 & this[e4] ? -1 * (255 - this[e4] + 1) : this[e4];
    }, ke2.prototype.readInt16LE = function(e4, t3) {
      t3 || nt2(e4, 2, this.length);
      var r4 = this[e4] | this[e4 + 1] << 8;
      return 32768 & r4 ? 4294901760 | r4 : r4;
    }, ke2.prototype.readInt16BE = function(e4, t3) {
      t3 || nt2(e4, 2, this.length);
      var r4 = this[e4 + 1] | this[e4] << 8;
      return 32768 & r4 ? 4294901760 | r4 : r4;
    }, ke2.prototype.readInt32LE = function(e4, t3) {
      return t3 || nt2(e4, 4, this.length), this[e4] | this[e4 + 1] << 8 | this[e4 + 2] << 16 | this[e4 + 3] << 24;
    }, ke2.prototype.readInt32BE = function(e4, t3) {
      return t3 || nt2(e4, 4, this.length), this[e4] << 24 | this[e4 + 1] << 16 | this[e4 + 2] << 8 | this[e4 + 3];
    }, ke2.prototype.readFloatLE = function(e4, t3) {
      return t3 || nt2(e4, 4, this.length), Se2(this, e4, true, 23, 4);
    }, ke2.prototype.readFloatBE = function(e4, t3) {
      return t3 || nt2(e4, 4, this.length), Se2(this, e4, false, 23, 4);
    }, ke2.prototype.readDoubleLE = function(e4, t3) {
      return t3 || nt2(e4, 8, this.length), Se2(this, e4, true, 52, 8);
    }, ke2.prototype.readDoubleBE = function(e4, t3) {
      return t3 || nt2(e4, 8, this.length), Se2(this, e4, false, 52, 8);
    }, ke2.prototype.writeUIntLE = function(e4, t3, r4, s4) {
      e4 = +e4, t3 |= 0, r4 |= 0, s4 || at2(this, e4, t3, r4, Math.pow(2, 8 * r4) - 1, 0);
      var i4 = 1, n4 = 0;
      for (this[t3] = 255 & e4; ++n4 < r4 && (i4 *= 256); )
        this[t3 + n4] = e4 / i4 & 255;
      return t3 + r4;
    }, ke2.prototype.writeUIntBE = function(e4, t3, r4, s4) {
      e4 = +e4, t3 |= 0, r4 |= 0, s4 || at2(this, e4, t3, r4, Math.pow(2, 8 * r4) - 1, 0);
      var i4 = r4 - 1, n4 = 1;
      for (this[t3 + i4] = 255 & e4; --i4 >= 0 && (n4 *= 256); )
        this[t3 + i4] = e4 / n4 & 255;
      return t3 + r4;
    }, ke2.prototype.writeUInt8 = function(e4, t3, r4) {
      return e4 = +e4, t3 |= 0, r4 || at2(this, e4, t3, 1, 255, 0), ke2.TYPED_ARRAY_SUPPORT || (e4 = Math.floor(e4)), this[t3] = 255 & e4, t3 + 1;
    }, ke2.prototype.writeUInt16LE = function(e4, t3, r4) {
      return e4 = +e4, t3 |= 0, r4 || at2(this, e4, t3, 2, 65535, 0), ke2.TYPED_ARRAY_SUPPORT ? (this[t3] = 255 & e4, this[t3 + 1] = e4 >>> 8) : ot2(this, e4, t3, true), t3 + 2;
    }, ke2.prototype.writeUInt16BE = function(e4, t3, r4) {
      return e4 = +e4, t3 |= 0, r4 || at2(this, e4, t3, 2, 65535, 0), ke2.TYPED_ARRAY_SUPPORT ? (this[t3] = e4 >>> 8, this[t3 + 1] = 255 & e4) : ot2(this, e4, t3, false), t3 + 2;
    }, ke2.prototype.writeUInt32LE = function(e4, t3, r4) {
      return e4 = +e4, t3 |= 0, r4 || at2(this, e4, t3, 4, 4294967295, 0), ke2.TYPED_ARRAY_SUPPORT ? (this[t3 + 3] = e4 >>> 24, this[t3 + 2] = e4 >>> 16, this[t3 + 1] = e4 >>> 8, this[t3] = 255 & e4) : lt2(this, e4, t3, true), t3 + 4;
    }, ke2.prototype.writeUInt32BE = function(e4, t3, r4) {
      return e4 = +e4, t3 |= 0, r4 || at2(this, e4, t3, 4, 4294967295, 0), ke2.TYPED_ARRAY_SUPPORT ? (this[t3] = e4 >>> 24, this[t3 + 1] = e4 >>> 16, this[t3 + 2] = e4 >>> 8, this[t3 + 3] = 255 & e4) : lt2(this, e4, t3, false), t3 + 4;
    }, ke2.prototype.writeIntLE = function(e4, t3, r4, s4) {
      if (e4 = +e4, t3 |= 0, !s4) {
        var i4 = Math.pow(2, 8 * r4 - 1);
        at2(this, e4, t3, r4, i4 - 1, -i4);
      }
      var n4 = 0, a4 = 1, o4 = 0;
      for (this[t3] = 255 & e4; ++n4 < r4 && (a4 *= 256); )
        e4 < 0 && o4 === 0 && this[t3 + n4 - 1] !== 0 && (o4 = 1), this[t3 + n4] = (e4 / a4 >> 0) - o4 & 255;
      return t3 + r4;
    }, ke2.prototype.writeIntBE = function(e4, t3, r4, s4) {
      if (e4 = +e4, t3 |= 0, !s4) {
        var i4 = Math.pow(2, 8 * r4 - 1);
        at2(this, e4, t3, r4, i4 - 1, -i4);
      }
      var n4 = r4 - 1, a4 = 1, o4 = 0;
      for (this[t3 + n4] = 255 & e4; --n4 >= 0 && (a4 *= 256); )
        e4 < 0 && o4 === 0 && this[t3 + n4 + 1] !== 0 && (o4 = 1), this[t3 + n4] = (e4 / a4 >> 0) - o4 & 255;
      return t3 + r4;
    }, ke2.prototype.writeInt8 = function(e4, t3, r4) {
      return e4 = +e4, t3 |= 0, r4 || at2(this, e4, t3, 1, 127, -128), ke2.TYPED_ARRAY_SUPPORT || (e4 = Math.floor(e4)), e4 < 0 && (e4 = 255 + e4 + 1), this[t3] = 255 & e4, t3 + 1;
    }, ke2.prototype.writeInt16LE = function(e4, t3, r4) {
      return e4 = +e4, t3 |= 0, r4 || at2(this, e4, t3, 2, 32767, -32768), ke2.TYPED_ARRAY_SUPPORT ? (this[t3] = 255 & e4, this[t3 + 1] = e4 >>> 8) : ot2(this, e4, t3, true), t3 + 2;
    }, ke2.prototype.writeInt16BE = function(e4, t3, r4) {
      return e4 = +e4, t3 |= 0, r4 || at2(this, e4, t3, 2, 32767, -32768), ke2.TYPED_ARRAY_SUPPORT ? (this[t3] = e4 >>> 8, this[t3 + 1] = 255 & e4) : ot2(this, e4, t3, false), t3 + 2;
    }, ke2.prototype.writeInt32LE = function(e4, t3, r4) {
      return e4 = +e4, t3 |= 0, r4 || at2(this, e4, t3, 4, 2147483647, -2147483648), ke2.TYPED_ARRAY_SUPPORT ? (this[t3] = 255 & e4, this[t3 + 1] = e4 >>> 8, this[t3 + 2] = e4 >>> 16, this[t3 + 3] = e4 >>> 24) : lt2(this, e4, t3, true), t3 + 4;
    }, ke2.prototype.writeInt32BE = function(e4, t3, r4) {
      return e4 = +e4, t3 |= 0, r4 || at2(this, e4, t3, 4, 2147483647, -2147483648), e4 < 0 && (e4 = 4294967295 + e4 + 1), ke2.TYPED_ARRAY_SUPPORT ? (this[t3] = e4 >>> 24, this[t3 + 1] = e4 >>> 16, this[t3 + 2] = e4 >>> 8, this[t3 + 3] = 255 & e4) : lt2(this, e4, t3, false), t3 + 4;
    }, ke2.prototype.writeFloatLE = function(e4, t3, r4) {
      return ut2(this, e4, t3, true, r4);
    }, ke2.prototype.writeFloatBE = function(e4, t3, r4) {
      return ut2(this, e4, t3, false, r4);
    }, ke2.prototype.writeDoubleLE = function(e4, t3, r4) {
      return ht2(this, e4, t3, true, r4);
    }, ke2.prototype.writeDoubleBE = function(e4, t3, r4) {
      return ht2(this, e4, t3, false, r4);
    }, ke2.prototype.copy = function(e4, t3, r4, s4) {
      if (r4 || (r4 = 0), s4 || s4 === 0 || (s4 = this.length), t3 >= e4.length && (t3 = e4.length), t3 || (t3 = 0), s4 > 0 && s4 < r4 && (s4 = r4), s4 === r4)
        return 0;
      if (e4.length === 0 || this.length === 0)
        return 0;
      if (t3 < 0)
        throw new RangeError("targetStart out of bounds");
      if (r4 < 0 || r4 >= this.length)
        throw new RangeError("sourceStart out of bounds");
      if (s4 < 0)
        throw new RangeError("sourceEnd out of bounds");
      s4 > this.length && (s4 = this.length), e4.length - t3 < s4 - r4 && (s4 = e4.length - t3 + r4);
      var i4, n4 = s4 - r4;
      if (this === e4 && r4 < t3 && t3 < s4)
        for (i4 = n4 - 1; i4 >= 0; --i4)
          e4[i4 + t3] = this[i4 + r4];
      else if (n4 < 1e3 || !ke2.TYPED_ARRAY_SUPPORT)
        for (i4 = 0; i4 < n4; ++i4)
          e4[i4 + t3] = this[i4 + r4];
      else
        Uint8Array.prototype.set.call(e4, this.subarray(r4, r4 + n4), t3);
      return n4;
    }, ke2.prototype.fill = function(e4, t3, r4, s4) {
      if (typeof e4 == "string") {
        if (typeof t3 == "string" ? (s4 = t3, t3 = 0, r4 = this.length) : typeof r4 == "string" && (s4 = r4, r4 = this.length), e4.length === 1) {
          var i4 = e4.charCodeAt(0);
          i4 < 256 && (e4 = i4);
        }
        if (s4 !== void 0 && typeof s4 != "string")
          throw new TypeError("encoding must be a string");
        if (typeof s4 == "string" && !ke2.isEncoding(s4))
          throw new TypeError("Unknown encoding: " + s4);
      } else
        typeof e4 == "number" && (e4 &= 255);
      if (t3 < 0 || this.length < t3 || this.length < r4)
        throw new RangeError("Out of range index");
      if (r4 <= t3)
        return this;
      var n4;
      if (t3 >>>= 0, r4 = r4 === void 0 ? this.length : r4 >>> 0, e4 || (e4 = 0), typeof e4 == "number")
        for (n4 = t3; n4 < r4; ++n4)
          this[n4] = e4;
      else {
        var a4 = je2(e4) ? e4 : yt2(new ke2(e4, s4).toString()), o4 = a4.length;
        for (n4 = 0; n4 < r4 - t3; ++n4)
          this[n4 + t3] = a4[n4 % o4];
      }
      return this;
    };
    var pt2 = /[^+\/0-9A-Za-z-_]/g;
    function dt2(e4) {
      if ((e4 = ft2(e4).replace(pt2, "")).length < 2)
        return "";
      for (; e4.length % 4 != 0; )
        e4 += "=";
      return e4;
    }
    function ft2(e4) {
      return e4.trim ? e4.trim() : e4.replace(/^\s+|\s+$/g, "");
    }
    function mt2(e4) {
      return e4 < 16 ? "0" + e4.toString(16) : e4.toString(16);
    }
    function yt2(e4, t3) {
      var r4;
      t3 = t3 || 1 / 0;
      for (var s4 = e4.length, i4 = null, n4 = [], a4 = 0; a4 < s4; ++a4) {
        if ((r4 = e4.charCodeAt(a4)) > 55295 && r4 < 57344) {
          if (!i4) {
            if (r4 > 56319) {
              (t3 -= 3) > -1 && n4.push(239, 191, 189);
              continue;
            }
            if (a4 + 1 === s4) {
              (t3 -= 3) > -1 && n4.push(239, 191, 189);
              continue;
            }
            i4 = r4;
            continue;
          }
          if (r4 < 56320) {
            (t3 -= 3) > -1 && n4.push(239, 191, 189), i4 = r4;
            continue;
          }
          r4 = 65536 + (i4 - 55296 << 10 | r4 - 56320);
        } else
          i4 && (t3 -= 3) > -1 && n4.push(239, 191, 189);
        if (i4 = null, r4 < 128) {
          if ((t3 -= 1) < 0)
            break;
          n4.push(r4);
        } else if (r4 < 2048) {
          if ((t3 -= 2) < 0)
            break;
          n4.push(r4 >> 6 | 192, 63 & r4 | 128);
        } else if (r4 < 65536) {
          if ((t3 -= 3) < 0)
            break;
          n4.push(r4 >> 12 | 224, r4 >> 6 & 63 | 128, 63 & r4 | 128);
        } else {
          if (!(r4 < 1114112))
            throw new Error("Invalid code point");
          if ((t3 -= 4) < 0)
            break;
          n4.push(r4 >> 18 | 240, r4 >> 12 & 63 | 128, r4 >> 6 & 63 | 128, 63 & r4 | 128);
        }
      }
      return n4;
    }
    function gt2(e4) {
      for (var t3 = [], r4 = 0; r4 < e4.length; ++r4)
        t3.push(255 & e4.charCodeAt(r4));
      return t3;
    }
    function xt2(e4, t3) {
      for (var r4, s4, i4, n4 = [], a4 = 0; a4 < e4.length && !((t3 -= 2) < 0); ++a4)
        s4 = (r4 = e4.charCodeAt(a4)) >> 8, i4 = r4 % 256, n4.push(i4), n4.push(s4);
      return n4;
    }
    function bt2(e4) {
      return xe2(dt2(e4));
    }
    function Et2(e4, t3, r4, s4) {
      for (var i4 = 0; i4 < s4 && !(i4 + r4 >= t3.length || i4 >= e4.length); ++i4)
        t3[i4 + r4] = e4[i4];
      return i4;
    }
    function vt2(e4) {
      return e4 != e4;
    }
    function St2(e4) {
      return e4 != null && (!!e4._isBuffer || At2(e4) || Tt2(e4));
    }
    function At2(e4) {
      return !!e4.constructor && typeof e4.constructor.isBuffer == "function" && e4.constructor.isBuffer(e4);
    }
    function Tt2(e4) {
      return typeof e4.readFloatLE == "function" && typeof e4.slice == "function" && At2(e4.slice(0, 0));
    }
    var wt2 = typeof Object.create == "function" ? function(e4, t3) {
      e4.super_ = t3, e4.prototype = Object.create(t3.prototype, {constructor: {value: e4, enumerable: false, writable: true, configurable: true}});
    } : function(e4, t3) {
      e4.super_ = t3;
      var r4 = function() {
      };
      r4.prototype = t3.prototype, e4.prototype = new r4(), e4.prototype.constructor = e4;
    };
    function Ct2(e4, t3) {
      var r4 = {seen: [], stylize: Dt2};
      return arguments.length >= 3 && (r4.depth = arguments[2]), arguments.length >= 4 && (r4.colors = arguments[3]), Bt2(t3) ? r4.showHidden = t3 : t3 && Kt2(r4, t3), qt2(r4.showHidden) && (r4.showHidden = false), qt2(r4.depth) && (r4.depth = 2), qt2(r4.colors) && (r4.colors = false), qt2(r4.customInspect) && (r4.customInspect = true), r4.colors && (r4.stylize = Pt2), Nt2(r4, e4, r4.depth);
    }
    function Pt2(e4, t3) {
      var r4 = Ct2.styles[t3];
      return r4 ? "[" + Ct2.colors[r4][0] + "m" + e4 + "[" + Ct2.colors[r4][1] + "m" : e4;
    }
    function Dt2(e4, t3) {
      return e4;
    }
    function kt2(e4) {
      var t3 = {};
      return e4.forEach(function(e5, r4) {
        t3[e5] = true;
      }), t3;
    }
    function Nt2(e4, t3, r4) {
      if (e4.customInspect && t3 && Gt2(t3.inspect) && t3.inspect !== Ct2 && (!t3.constructor || t3.constructor.prototype !== t3)) {
        var s4 = t3.inspect(r4, e4);
        return Ut2(s4) || (s4 = Nt2(e4, s4, r4)), s4;
      }
      var i4 = It2(e4, t3);
      if (i4)
        return i4;
      var n4 = Object.keys(t3), a4 = kt2(n4);
      if (e4.showHidden && (n4 = Object.getOwnPropertyNames(t3)), Xt2(t3) && (n4.indexOf("message") >= 0 || n4.indexOf("description") >= 0))
        return Ft2(t3);
      if (n4.length === 0) {
        if (Gt2(t3)) {
          var o4 = t3.name ? ": " + t3.name : "";
          return e4.stylize("[Function" + o4 + "]", "special");
        }
        if (zt2(t3))
          return e4.stylize(RegExp.prototype.toString.call(t3), "regexp");
        if (Jt2(t3))
          return e4.stylize(Date.prototype.toString.call(t3), "date");
        if (Xt2(t3))
          return Ft2(t3);
      }
      var l3, c4 = "", u3 = false, h4 = ["{", "}"];
      return _t2(t3) && (u3 = true, h4 = ["[", "]"]), Gt2(t3) && (c4 = " [Function" + (t3.name ? ": " + t3.name : "") + "]"), zt2(t3) && (c4 = " " + RegExp.prototype.toString.call(t3)), Jt2(t3) && (c4 = " " + Date.prototype.toUTCString.call(t3)), Xt2(t3) && (c4 = " " + Ft2(t3)), n4.length !== 0 || u3 && t3.length != 0 ? r4 < 0 ? zt2(t3) ? e4.stylize(RegExp.prototype.toString.call(t3), "regexp") : e4.stylize("[Object]", "special") : (e4.seen.push(t3), l3 = u3 ? Mt2(e4, t3, r4, a4, n4) : n4.map(function(s5) {
        return Lt2(e4, t3, r4, a4, s5, u3);
      }), e4.seen.pop(), Ot2(l3, c4, h4)) : h4[0] + c4 + h4[1];
    }
    function It2(e4, t3) {
      if (qt2(t3))
        return e4.stylize("undefined", "undefined");
      if (Ut2(t3)) {
        var r4 = "'" + JSON.stringify(t3).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return e4.stylize(r4, "string");
      }
      return jt2(t3) ? e4.stylize("" + t3, "number") : Bt2(t3) ? e4.stylize("" + t3, "boolean") : Rt2(t3) ? e4.stylize("null", "null") : void 0;
    }
    function Ft2(e4) {
      return "[" + Error.prototype.toString.call(e4) + "]";
    }
    function Mt2(e4, t3, r4, s4, i4) {
      for (var n4 = [], a4 = 0, o4 = t3.length; a4 < o4; ++a4)
        $t2(t3, String(a4)) ? n4.push(Lt2(e4, t3, r4, s4, String(a4), true)) : n4.push("");
      return i4.forEach(function(i5) {
        i5.match(/^\d+$/) || n4.push(Lt2(e4, t3, r4, s4, i5, true));
      }), n4;
    }
    function Lt2(e4, t3, r4, s4, i4, n4) {
      var a4, o4, l3;
      if ((l3 = Object.getOwnPropertyDescriptor(t3, i4) || {value: t3[i4]}).get ? o4 = l3.set ? e4.stylize("[Getter/Setter]", "special") : e4.stylize("[Getter]", "special") : l3.set && (o4 = e4.stylize("[Setter]", "special")), $t2(s4, i4) || (a4 = "[" + i4 + "]"), o4 || (e4.seen.indexOf(l3.value) < 0 ? (o4 = Rt2(r4) ? Nt2(e4, l3.value, null) : Nt2(e4, l3.value, r4 - 1)).indexOf("\n") > -1 && (o4 = n4 ? o4.split("\n").map(function(e5) {
        return "  " + e5;
      }).join("\n").substr(2) : "\n" + o4.split("\n").map(function(e5) {
        return "   " + e5;
      }).join("\n")) : o4 = e4.stylize("[Circular]", "special")), qt2(a4)) {
        if (n4 && i4.match(/^\d+$/))
          return o4;
        (a4 = JSON.stringify("" + i4)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/) ? (a4 = a4.substr(1, a4.length - 2), a4 = e4.stylize(a4, "name")) : (a4 = a4.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), a4 = e4.stylize(a4, "string"));
      }
      return a4 + ": " + o4;
    }
    function Ot2(e4, t3, r4) {
      return e4.reduce(function(e5, t4) {
        return t4.indexOf("\n"), e5 + t4.replace(/\u001b\[\d\d?m/g, "").length + 1;
      }, 0) > 60 ? r4[0] + (t3 === "" ? "" : t3 + "\n ") + " " + e4.join(",\n  ") + " " + r4[1] : r4[0] + t3 + " " + e4.join(", ") + " " + r4[1];
    }
    function _t2(e4) {
      return Array.isArray(e4);
    }
    function Bt2(e4) {
      return typeof e4 == "boolean";
    }
    function Rt2(e4) {
      return e4 === null;
    }
    function jt2(e4) {
      return typeof e4 == "number";
    }
    function Ut2(e4) {
      return typeof e4 == "string";
    }
    function qt2(e4) {
      return e4 === void 0;
    }
    function zt2(e4) {
      return Vt2(e4) && Wt2(e4) === "[object RegExp]";
    }
    function Vt2(e4) {
      return typeof e4 == "object" && e4 !== null;
    }
    function Jt2(e4) {
      return Vt2(e4) && Wt2(e4) === "[object Date]";
    }
    function Xt2(e4) {
      return Vt2(e4) && (Wt2(e4) === "[object Error]" || e4 instanceof Error);
    }
    function Gt2(e4) {
      return typeof e4 == "function";
    }
    function Ht2(e4) {
      return e4 === null || typeof e4 == "boolean" || typeof e4 == "number" || typeof e4 == "string" || typeof e4 == "symbol" || e4 === void 0;
    }
    function Wt2(e4) {
      return Object.prototype.toString.call(e4);
    }
    function Kt2(e4, t3) {
      if (!t3 || !Vt2(t3))
        return e4;
      for (var r4 = Object.keys(t3), s4 = r4.length; s4--; )
        e4[r4[s4]] = t3[r4[s4]];
      return e4;
    }
    function $t2(e4, t3) {
      return Object.prototype.hasOwnProperty.call(e4, t3);
    }
    function Yt2(e4, t3) {
      if (e4 === t3)
        return 0;
      for (var r4 = e4.length, s4 = t3.length, i4 = 0, n4 = Math.min(r4, s4); i4 < n4; ++i4)
        if (e4[i4] !== t3[i4]) {
          r4 = e4[i4], s4 = t3[i4];
          break;
        }
      return r4 < s4 ? -1 : s4 < r4 ? 1 : 0;
    }
    Ct2.colors = {bold: [1, 22], italic: [3, 23], underline: [4, 24], inverse: [7, 27], white: [37, 39], grey: [90, 39], black: [30, 39], blue: [34, 39], cyan: [36, 39], green: [32, 39], magenta: [35, 39], red: [31, 39], yellow: [33, 39]}, Ct2.styles = {special: "cyan", number: "yellow", boolean: "yellow", undefined: "grey", null: "bold", string: "green", date: "magenta", regexp: "red"};
    var Qt2, Zt2 = Object.prototype.hasOwnProperty, er2 = Object.keys || function(e4) {
      var t3 = [];
      for (var r4 in e4)
        Zt2.call(e4, r4) && t3.push(r4);
      return t3;
    }, tr2 = Array.prototype.slice;
    function rr2() {
      return Qt2 !== void 0 ? Qt2 : Qt2 = function() {
      }.name === "foo";
    }
    function sr2(e4) {
      return Object.prototype.toString.call(e4);
    }
    function ir2(e4) {
      return !St2(e4) && typeof i3.ArrayBuffer == "function" && (typeof ArrayBuffer.isView == "function" ? ArrayBuffer.isView(e4) : !!e4 && (e4 instanceof DataView || !!(e4.buffer && e4.buffer instanceof ArrayBuffer)));
    }
    function nr2(e4, t3) {
      e4 || pr2(e4, true, t3, "==", dr2);
    }
    var ar2 = /\s*function\s+([^\(\s]*)\s*/;
    function or2(e4) {
      if (Gt2(e4)) {
        if (rr2())
          return e4.name;
        var t3 = e4.toString().match(ar2);
        return t3 && t3[1];
      }
    }
    function lr2(e4) {
      this.name = "AssertionError", this.actual = e4.actual, this.expected = e4.expected, this.operator = e4.operator, e4.message ? (this.message = e4.message, this.generatedMessage = false) : (this.message = hr2(this), this.generatedMessage = true);
      var t3 = e4.stackStartFunction || pr2;
      if (Error.captureStackTrace)
        Error.captureStackTrace(this, t3);
      else {
        var r4 = new Error();
        if (r4.stack) {
          var s4 = r4.stack, i4 = or2(t3), n4 = s4.indexOf("\n" + i4);
          if (n4 >= 0) {
            var a4 = s4.indexOf("\n", n4 + 1);
            s4 = s4.substring(a4 + 1);
          }
          this.stack = s4;
        }
      }
    }
    function cr2(e4, t3) {
      return typeof e4 == "string" ? e4.length < t3 ? e4 : e4.slice(0, t3) : e4;
    }
    function ur2(e4) {
      if (rr2() || !Gt2(e4))
        return Ct2(e4);
      var t3 = or2(e4);
      return "[Function" + (t3 ? ": " + t3 : "") + "]";
    }
    function hr2(e4) {
      return cr2(ur2(e4.actual), 128) + " " + e4.operator + " " + cr2(ur2(e4.expected), 128);
    }
    function pr2(e4, t3, r4, s4, i4) {
      throw new lr2({message: r4, actual: e4, expected: t3, operator: s4, stackStartFunction: i4});
    }
    function dr2(e4, t3) {
      e4 || pr2(e4, true, t3, "==", dr2);
    }
    function fr2(e4, t3, r4) {
      e4 != t3 && pr2(e4, t3, r4, "==", fr2);
    }
    function mr2(e4, t3, r4) {
      e4 == t3 && pr2(e4, t3, r4, "!=", mr2);
    }
    function yr2(e4, t3, r4) {
      xr2(e4, t3, false) || pr2(e4, t3, r4, "deepEqual", yr2);
    }
    function gr2(e4, t3, r4) {
      xr2(e4, t3, true) || pr2(e4, t3, r4, "deepStrictEqual", gr2);
    }
    function xr2(e4, t3, r4, s4) {
      if (e4 === t3)
        return true;
      if (St2(e4) && St2(t3))
        return Yt2(e4, t3) === 0;
      if (Jt2(e4) && Jt2(t3))
        return e4.getTime() === t3.getTime();
      if (zt2(e4) && zt2(t3))
        return e4.source === t3.source && e4.global === t3.global && e4.multiline === t3.multiline && e4.lastIndex === t3.lastIndex && e4.ignoreCase === t3.ignoreCase;
      if (e4 !== null && typeof e4 == "object" || t3 !== null && typeof t3 == "object") {
        if (ir2(e4) && ir2(t3) && sr2(e4) === sr2(t3) && !(e4 instanceof Float32Array || e4 instanceof Float64Array))
          return Yt2(new Uint8Array(e4.buffer), new Uint8Array(t3.buffer)) === 0;
        if (St2(e4) !== St2(t3))
          return false;
        var i4 = (s4 = s4 || {actual: [], expected: []}).actual.indexOf(e4);
        return i4 !== -1 && i4 === s4.expected.indexOf(t3) || (s4.actual.push(e4), s4.expected.push(t3), Er2(e4, t3, r4, s4));
      }
      return r4 ? e4 === t3 : e4 == t3;
    }
    function br2(e4) {
      return Object.prototype.toString.call(e4) == "[object Arguments]";
    }
    function Er2(e4, t3, r4, s4) {
      if (e4 == null || t3 == null)
        return false;
      if (Ht2(e4) || Ht2(t3))
        return e4 === t3;
      if (r4 && Object.getPrototypeOf(e4) !== Object.getPrototypeOf(t3))
        return false;
      var i4 = br2(e4), n4 = br2(t3);
      if (i4 && !n4 || !i4 && n4)
        return false;
      if (i4)
        return xr2(e4 = tr2.call(e4), t3 = tr2.call(t3), r4);
      var a4, o4, l3 = er2(e4), c4 = er2(t3);
      if (l3.length !== c4.length)
        return false;
      for (l3.sort(), c4.sort(), o4 = l3.length - 1; o4 >= 0; o4--)
        if (l3[o4] !== c4[o4])
          return false;
      for (o4 = l3.length - 1; o4 >= 0; o4--)
        if (!xr2(e4[a4 = l3[o4]], t3[a4], r4, s4))
          return false;
      return true;
    }
    function vr2(e4, t3, r4) {
      xr2(e4, t3, false) && pr2(e4, t3, r4, "notDeepEqual", vr2);
    }
    function Sr2(e4, t3, r4) {
      xr2(e4, t3, true) && pr2(e4, t3, r4, "notDeepStrictEqual", Sr2);
    }
    function Ar(e4, t3, r4) {
      e4 !== t3 && pr2(e4, t3, r4, "===", Ar);
    }
    function Tr(e4, t3, r4) {
      e4 === t3 && pr2(e4, t3, r4, "!==", Tr);
    }
    function wr(e4, t3) {
      if (!e4 || !t3)
        return false;
      if (Object.prototype.toString.call(t3) == "[object RegExp]")
        return t3.test(e4);
      try {
        if (e4 instanceof t3)
          return true;
      } catch (r4) {
      }
      return !Error.isPrototypeOf(t3) && t3.call({}, e4) === true;
    }
    function Cr(e4) {
      var t3;
      try {
        e4();
      } catch (r4) {
        t3 = r4;
      }
      return t3;
    }
    function Pr(e4, t3, r4, s4) {
      var i4;
      if (typeof t3 != "function")
        throw new TypeError('"block" argument must be a function');
      typeof r4 == "string" && (s4 = r4, r4 = null), i4 = Cr(t3), s4 = (r4 && r4.name ? " (" + r4.name + ")." : ".") + (s4 ? " " + s4 : "."), e4 && !i4 && pr2(i4, r4, "Missing expected exception" + s4);
      var n4 = typeof s4 == "string", a4 = !e4 && i4 && !r4;
      if ((!e4 && Xt2(i4) && n4 && wr(i4, r4) || a4) && pr2(i4, r4, "Got unwanted exception" + s4), e4 && i4 && r4 && !wr(i4, r4) || !e4 && i4)
        throw i4;
    }
    function Dr(e4, t3, r4) {
      Pr(true, e4, t3, r4);
    }
    function kr(e4, t3, r4) {
      Pr(false, e4, t3, r4);
    }
    function Nr(e4) {
      if (e4)
        throw e4;
    }
    nr2.AssertionError = lr2, wt2(lr2, Error), nr2.fail = pr2, nr2.ok = dr2, nr2.equal = fr2, nr2.notEqual = mr2, nr2.deepEqual = yr2, nr2.deepStrictEqual = gr2, nr2.notDeepEqual = vr2, nr2.notDeepStrictEqual = Sr2, nr2.strictEqual = Ar, nr2.notStrictEqual = Tr, nr2.throws = Dr, nr2.doesNotThrow = kr, nr2.ifError = Nr;
    var Ir = Object.freeze({__proto__: null, default: nr2, AssertionError: lr2, fail: pr2, ok: dr2, assert: dr2, equal: fr2, notEqual: mr2, deepEqual: yr2, deepStrictEqual: gr2, notDeepEqual: vr2, notDeepStrictEqual: Sr2, strictEqual: Ar, notStrictEqual: Tr, throws: Dr, doesNotThrow: kr, ifError: Nr}), Fr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split(""), Mr = {encode: function(e4) {
      if (0 <= e4 && e4 < Fr.length)
        return Fr[e4];
      throw new TypeError("Must be between 0 and 63: " + e4);
    }, decode: function(e4) {
      var t3 = 65, r4 = 97, s4 = 48;
      return t3 <= e4 && e4 <= 90 ? e4 - t3 : r4 <= e4 && e4 <= 122 ? e4 - r4 + 26 : s4 <= e4 && e4 <= 57 ? e4 - s4 + 52 : e4 == 43 ? 62 : e4 == 47 ? 63 : -1;
    }}, Lr = 5, Or = 1 << Lr, _r = Or - 1, Br = Or;
    function Rr(e4) {
      return e4 < 0 ? 1 + (-e4 << 1) : 0 + (e4 << 1);
    }
    function jr(e4) {
      var t3 = e4 >> 1;
      return (1 & e4) == 1 ? -t3 : t3;
    }
    var Ur = {encode: function(e4) {
      var t3, r4 = "", s4 = Rr(e4);
      do {
        t3 = s4 & _r, (s4 >>>= Lr) > 0 && (t3 |= Br), r4 += Mr.encode(t3);
      } while (s4 > 0);
      return r4;
    }, decode: function(e4, t3, r4) {
      var s4, i4, n4 = e4.length, a4 = 0, o4 = 0;
      do {
        if (t3 >= n4)
          throw new Error("Expected more digits in base 64 VLQ value.");
        if ((i4 = Mr.decode(e4.charCodeAt(t3++))) === -1)
          throw new Error("Invalid base64 digit: " + e4.charAt(t3 - 1));
        s4 = !!(i4 & Br), a4 += (i4 &= _r) << o4, o4 += Lr;
      } while (s4);
      r4.value = jr(a4), r4.rest = t3;
    }}, qr = f3(function(e4, t3) {
      function r4(e5, t4, r5) {
        if (t4 in e5)
          return e5[t4];
        if (arguments.length === 3)
          return r5;
        throw new Error('"' + t4 + '" is a required argument.');
      }
      t3.getArg = r4;
      var s4 = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/, i4 = /^data:.+\,.+$/;
      function n4(e5) {
        var t4 = e5.match(s4);
        return t4 ? {scheme: t4[1], auth: t4[2], host: t4[3], port: t4[4], path: t4[5]} : null;
      }
      function a4(e5) {
        var t4 = "";
        return e5.scheme && (t4 += e5.scheme + ":"), t4 += "//", e5.auth && (t4 += e5.auth + "@"), e5.host && (t4 += e5.host), e5.port && (t4 += ":" + e5.port), e5.path && (t4 += e5.path), t4;
      }
      function o4(e5) {
        var r5 = e5, s5 = n4(e5);
        if (s5) {
          if (!s5.path)
            return e5;
          r5 = s5.path;
        }
        for (var i5, o5 = t3.isAbsolute(r5), l4 = r5.split(/\/+/), c5 = 0, u4 = l4.length - 1; u4 >= 0; u4--)
          (i5 = l4[u4]) === "." ? l4.splice(u4, 1) : i5 === ".." ? c5++ : c5 > 0 && (i5 === "" ? (l4.splice(u4 + 1, c5), c5 = 0) : (l4.splice(u4, 2), c5--));
        return (r5 = l4.join("/")) === "" && (r5 = o5 ? "/" : "."), s5 ? (s5.path = r5, a4(s5)) : r5;
      }
      function l3(e5, t4) {
        e5 === "" && (e5 = "."), t4 === "" && (t4 = ".");
        var r5 = n4(t4), s5 = n4(e5);
        if (s5 && (e5 = s5.path || "/"), r5 && !r5.scheme)
          return s5 && (r5.scheme = s5.scheme), a4(r5);
        if (r5 || t4.match(i4))
          return t4;
        if (s5 && !s5.host && !s5.path)
          return s5.host = t4, a4(s5);
        var l4 = t4.charAt(0) === "/" ? t4 : o4(e5.replace(/\/+$/, "") + "/" + t4);
        return s5 ? (s5.path = l4, a4(s5)) : l4;
      }
      function c4(e5, t4) {
        e5 === "" && (e5 = "."), e5 = e5.replace(/\/$/, "");
        for (var r5 = 0; t4.indexOf(e5 + "/") !== 0; ) {
          var s5 = e5.lastIndexOf("/");
          if (s5 < 0)
            return t4;
          if ((e5 = e5.slice(0, s5)).match(/^([^\/]+:\/)?\/*$/))
            return t4;
          ++r5;
        }
        return Array(r5 + 1).join("../") + t4.substr(e5.length + 1);
      }
      t3.urlParse = n4, t3.urlGenerate = a4, t3.normalize = o4, t3.join = l3, t3.isAbsolute = function(e5) {
        return e5.charAt(0) === "/" || s4.test(e5);
      }, t3.relative = c4;
      var u3 = !("__proto__" in Object.create(null));
      function h4(e5) {
        return e5;
      }
      function p4(e5) {
        return f4(e5) ? "$" + e5 : e5;
      }
      function d4(e5) {
        return f4(e5) ? e5.slice(1) : e5;
      }
      function f4(e5) {
        if (!e5)
          return false;
        var t4 = e5.length;
        if (t4 < 9)
          return false;
        if (e5.charCodeAt(t4 - 1) !== 95 || e5.charCodeAt(t4 - 2) !== 95 || e5.charCodeAt(t4 - 3) !== 111 || e5.charCodeAt(t4 - 4) !== 116 || e5.charCodeAt(t4 - 5) !== 111 || e5.charCodeAt(t4 - 6) !== 114 || e5.charCodeAt(t4 - 7) !== 112 || e5.charCodeAt(t4 - 8) !== 95 || e5.charCodeAt(t4 - 9) !== 95)
          return false;
        for (var r5 = t4 - 10; r5 >= 0; r5--)
          if (e5.charCodeAt(r5) !== 36)
            return false;
        return true;
      }
      function m4(e5, t4, r5) {
        var s5 = g4(e5.source, t4.source);
        return s5 !== 0 || (s5 = e5.originalLine - t4.originalLine) != 0 || (s5 = e5.originalColumn - t4.originalColumn) != 0 || r5 || (s5 = e5.generatedColumn - t4.generatedColumn) != 0 || (s5 = e5.generatedLine - t4.generatedLine) != 0 ? s5 : g4(e5.name, t4.name);
      }
      function y4(e5, t4, r5) {
        var s5 = e5.generatedLine - t4.generatedLine;
        return s5 !== 0 || (s5 = e5.generatedColumn - t4.generatedColumn) != 0 || r5 || (s5 = g4(e5.source, t4.source)) !== 0 || (s5 = e5.originalLine - t4.originalLine) != 0 || (s5 = e5.originalColumn - t4.originalColumn) != 0 ? s5 : g4(e5.name, t4.name);
      }
      function g4(e5, t4) {
        return e5 === t4 ? 0 : e5 === null ? 1 : t4 === null ? -1 : e5 > t4 ? 1 : -1;
      }
      function x4(e5, t4) {
        var r5 = e5.generatedLine - t4.generatedLine;
        return r5 !== 0 || (r5 = e5.generatedColumn - t4.generatedColumn) != 0 || (r5 = g4(e5.source, t4.source)) !== 0 || (r5 = e5.originalLine - t4.originalLine) != 0 || (r5 = e5.originalColumn - t4.originalColumn) != 0 ? r5 : g4(e5.name, t4.name);
      }
      function b3(e5) {
        return JSON.parse(e5.replace(/^\)]}'[^\n]*\n/, ""));
      }
      function E4(e5, t4, r5) {
        if (t4 = t4 || "", e5 && (e5[e5.length - 1] !== "/" && t4[0] !== "/" && (e5 += "/"), t4 = e5 + t4), r5) {
          var s5 = n4(r5);
          if (!s5)
            throw new Error("sourceMapURL could not be parsed");
          if (s5.path) {
            var i5 = s5.path.lastIndexOf("/");
            i5 >= 0 && (s5.path = s5.path.substring(0, i5 + 1));
          }
          t4 = l3(a4(s5), t4);
        }
        return o4(t4);
      }
      t3.toSetString = u3 ? h4 : p4, t3.fromSetString = u3 ? h4 : d4, t3.compareByOriginalPositions = m4, t3.compareByGeneratedPositionsDeflated = y4, t3.compareByGeneratedPositionsInflated = x4, t3.parseSourceMapInput = b3, t3.computeSourceURL = E4;
    }), zr = Object.prototype.hasOwnProperty, Vr = typeof Map != "undefined";
    function Jr() {
      this._array = [], this._set = Vr ? new Map() : Object.create(null);
    }
    Jr.fromArray = function(e4, t3) {
      for (var r4 = new Jr(), s4 = 0, i4 = e4.length; s4 < i4; s4++)
        r4.add(e4[s4], t3);
      return r4;
    }, Jr.prototype.size = function() {
      return Vr ? this._set.size : Object.getOwnPropertyNames(this._set).length;
    }, Jr.prototype.add = function(e4, t3) {
      var r4 = Vr ? e4 : qr.toSetString(e4), s4 = Vr ? this.has(e4) : zr.call(this._set, r4), i4 = this._array.length;
      s4 && !t3 || this._array.push(e4), s4 || (Vr ? this._set.set(e4, i4) : this._set[r4] = i4);
    }, Jr.prototype.has = function(e4) {
      if (Vr)
        return this._set.has(e4);
      var t3 = qr.toSetString(e4);
      return zr.call(this._set, t3);
    }, Jr.prototype.indexOf = function(e4) {
      if (Vr) {
        var t3 = this._set.get(e4);
        if (t3 >= 0)
          return t3;
      } else {
        var r4 = qr.toSetString(e4);
        if (zr.call(this._set, r4))
          return this._set[r4];
      }
      throw new Error('"' + e4 + '" is not in the set.');
    }, Jr.prototype.at = function(e4) {
      if (e4 >= 0 && e4 < this._array.length)
        return this._array[e4];
      throw new Error("No element indexed by " + e4);
    }, Jr.prototype.toArray = function() {
      return this._array.slice();
    };
    var Xr = {ArraySet: Jr};
    function Gr(e4, t3) {
      var r4 = e4.generatedLine, s4 = t3.generatedLine, i4 = e4.generatedColumn, n4 = t3.generatedColumn;
      return s4 > r4 || s4 == r4 && n4 >= i4 || qr.compareByGeneratedPositionsInflated(e4, t3) <= 0;
    }
    function Hr() {
      this._array = [], this._sorted = true, this._last = {generatedLine: -1, generatedColumn: 0};
    }
    Hr.prototype.unsortedForEach = function(e4, t3) {
      this._array.forEach(e4, t3);
    }, Hr.prototype.add = function(e4) {
      Gr(this._last, e4) ? (this._last = e4, this._array.push(e4)) : (this._sorted = false, this._array.push(e4));
    }, Hr.prototype.toArray = function() {
      return this._sorted || (this._array.sort(qr.compareByGeneratedPositionsInflated), this._sorted = true), this._array;
    };
    var Wr = {MappingList: Hr}, Kr = Xr.ArraySet, $r = Wr.MappingList;
    function Yr(e4) {
      e4 || (e4 = {}), this._file = qr.getArg(e4, "file", null), this._sourceRoot = qr.getArg(e4, "sourceRoot", null), this._skipValidation = qr.getArg(e4, "skipValidation", false), this._sources = new Kr(), this._names = new Kr(), this._mappings = new $r(), this._sourcesContents = null;
    }
    Yr.prototype._version = 3, Yr.fromSourceMap = function(e4) {
      var t3 = e4.sourceRoot, r4 = new Yr({file: e4.file, sourceRoot: t3});
      return e4.eachMapping(function(e5) {
        var s4 = {generated: {line: e5.generatedLine, column: e5.generatedColumn}};
        e5.source != null && (s4.source = e5.source, t3 != null && (s4.source = qr.relative(t3, s4.source)), s4.original = {line: e5.originalLine, column: e5.originalColumn}, e5.name != null && (s4.name = e5.name)), r4.addMapping(s4);
      }), e4.sources.forEach(function(s4) {
        var i4 = s4;
        t3 !== null && (i4 = qr.relative(t3, s4)), r4._sources.has(i4) || r4._sources.add(i4);
        var n4 = e4.sourceContentFor(s4);
        n4 != null && r4.setSourceContent(s4, n4);
      }), r4;
    }, Yr.prototype.addMapping = function(e4) {
      var t3 = qr.getArg(e4, "generated"), r4 = qr.getArg(e4, "original", null), s4 = qr.getArg(e4, "source", null), i4 = qr.getArg(e4, "name", null);
      this._skipValidation || this._validateMapping(t3, r4, s4, i4), s4 != null && (s4 = String(s4), this._sources.has(s4) || this._sources.add(s4)), i4 != null && (i4 = String(i4), this._names.has(i4) || this._names.add(i4)), this._mappings.add({generatedLine: t3.line, generatedColumn: t3.column, originalLine: r4 != null && r4.line, originalColumn: r4 != null && r4.column, source: s4, name: i4});
    }, Yr.prototype.setSourceContent = function(e4, t3) {
      var r4 = e4;
      this._sourceRoot != null && (r4 = qr.relative(this._sourceRoot, r4)), t3 != null ? (this._sourcesContents || (this._sourcesContents = Object.create(null)), this._sourcesContents[qr.toSetString(r4)] = t3) : this._sourcesContents && (delete this._sourcesContents[qr.toSetString(r4)], Object.keys(this._sourcesContents).length === 0 && (this._sourcesContents = null));
    }, Yr.prototype.applySourceMap = function(e4, t3, r4) {
      var s4 = t3;
      if (t3 == null) {
        if (e4.file == null)
          throw new Error(`SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's "file" property. Both were omitted.`);
        s4 = e4.file;
      }
      var i4 = this._sourceRoot;
      i4 != null && (s4 = qr.relative(i4, s4));
      var n4 = new Kr(), a4 = new Kr();
      this._mappings.unsortedForEach(function(t4) {
        if (t4.source === s4 && t4.originalLine != null) {
          var o4 = e4.originalPositionFor({line: t4.originalLine, column: t4.originalColumn});
          o4.source != null && (t4.source = o4.source, r4 != null && (t4.source = qr.join(r4, t4.source)), i4 != null && (t4.source = qr.relative(i4, t4.source)), t4.originalLine = o4.line, t4.originalColumn = o4.column, o4.name != null && (t4.name = o4.name));
        }
        var l3 = t4.source;
        l3 == null || n4.has(l3) || n4.add(l3);
        var c4 = t4.name;
        c4 == null || a4.has(c4) || a4.add(c4);
      }, this), this._sources = n4, this._names = a4, e4.sources.forEach(function(t4) {
        var s5 = e4.sourceContentFor(t4);
        s5 != null && (r4 != null && (t4 = qr.join(r4, t4)), i4 != null && (t4 = qr.relative(i4, t4)), this.setSourceContent(t4, s5));
      }, this);
    }, Yr.prototype._validateMapping = function(e4, t3, r4, s4) {
      if (t3 && typeof t3.line != "number" && typeof t3.column != "number")
        throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");
      if ((!(e4 && "line" in e4 && "column" in e4 && e4.line > 0 && e4.column >= 0) || t3 || r4 || s4) && !(e4 && "line" in e4 && "column" in e4 && t3 && "line" in t3 && "column" in t3 && e4.line > 0 && e4.column >= 0 && t3.line > 0 && t3.column >= 0 && r4))
        throw new Error("Invalid mapping: " + JSON.stringify({generated: e4, source: r4, original: t3, name: s4}));
    }, Yr.prototype._serializeMappings = function() {
      for (var e4, t3, r4, s4, i4 = 0, n4 = 1, a4 = 0, o4 = 0, l3 = 0, c4 = 0, u3 = "", h4 = this._mappings.toArray(), p4 = 0, d4 = h4.length; p4 < d4; p4++) {
        if (e4 = "", (t3 = h4[p4]).generatedLine !== n4)
          for (i4 = 0; t3.generatedLine !== n4; )
            e4 += ";", n4++;
        else if (p4 > 0) {
          if (!qr.compareByGeneratedPositionsInflated(t3, h4[p4 - 1]))
            continue;
          e4 += ",";
        }
        e4 += Ur.encode(t3.generatedColumn - i4), i4 = t3.generatedColumn, t3.source != null && (s4 = this._sources.indexOf(t3.source), e4 += Ur.encode(s4 - c4), c4 = s4, e4 += Ur.encode(t3.originalLine - 1 - o4), o4 = t3.originalLine - 1, e4 += Ur.encode(t3.originalColumn - a4), a4 = t3.originalColumn, t3.name != null && (r4 = this._names.indexOf(t3.name), e4 += Ur.encode(r4 - l3), l3 = r4)), u3 += e4;
      }
      return u3;
    }, Yr.prototype._generateSourcesContent = function(e4, t3) {
      return e4.map(function(e5) {
        if (!this._sourcesContents)
          return null;
        t3 != null && (e5 = qr.relative(t3, e5));
        var r4 = qr.toSetString(e5);
        return Object.prototype.hasOwnProperty.call(this._sourcesContents, r4) ? this._sourcesContents[r4] : null;
      }, this);
    }, Yr.prototype.toJSON = function() {
      var e4 = {version: this._version, sources: this._sources.toArray(), names: this._names.toArray(), mappings: this._serializeMappings()};
      return this._file != null && (e4.file = this._file), this._sourceRoot != null && (e4.sourceRoot = this._sourceRoot), this._sourcesContents && (e4.sourcesContent = this._generateSourcesContent(e4.sources, e4.sourceRoot)), e4;
    }, Yr.prototype.toString = function() {
      return JSON.stringify(this.toJSON());
    };
    var Qr = {SourceMapGenerator: Yr}, Zr = f3(function(e4, t3) {
      function r4(e5, s4, i4, n4, a4, o4) {
        var l3 = Math.floor((s4 - e5) / 2) + e5, c4 = a4(i4, n4[l3], true);
        return c4 === 0 ? l3 : c4 > 0 ? s4 - l3 > 1 ? r4(l3, s4, i4, n4, a4, o4) : o4 == t3.LEAST_UPPER_BOUND ? s4 < n4.length ? s4 : -1 : l3 : l3 - e5 > 1 ? r4(e5, l3, i4, n4, a4, o4) : o4 == t3.LEAST_UPPER_BOUND ? l3 : e5 < 0 ? -1 : e5;
      }
      t3.GREATEST_LOWER_BOUND = 1, t3.LEAST_UPPER_BOUND = 2, t3.search = function(e5, s4, i4, n4) {
        if (s4.length === 0)
          return -1;
        var a4 = r4(-1, s4.length, e5, s4, i4, n4 || t3.GREATEST_LOWER_BOUND);
        if (a4 < 0)
          return -1;
        for (; a4 - 1 >= 0 && i4(s4[a4], s4[a4 - 1], true) === 0; )
          --a4;
        return a4;
      };
    });
    function es(e4, t3, r4) {
      var s4 = e4[t3];
      e4[t3] = e4[r4], e4[r4] = s4;
    }
    function ts(e4, t3) {
      return Math.round(e4 + Math.random() * (t3 - e4));
    }
    function rs(e4, t3, r4, s4) {
      if (r4 < s4) {
        var i4 = r4 - 1;
        es(e4, ts(r4, s4), s4);
        for (var n4 = e4[s4], a4 = r4; a4 < s4; a4++)
          t3(e4[a4], n4) <= 0 && es(e4, i4 += 1, a4);
        es(e4, i4 + 1, a4);
        var o4 = i4 + 1;
        rs(e4, t3, r4, o4 - 1), rs(e4, t3, o4 + 1, s4);
      }
    }
    var ss = {quickSort: function(e4, t3) {
      rs(e4, t3, 0, e4.length - 1);
    }}, is = Xr.ArraySet, ns = ss.quickSort;
    function as(e4, t3) {
      var r4 = e4;
      return typeof e4 == "string" && (r4 = qr.parseSourceMapInput(e4)), r4.sections != null ? new hs(r4, t3) : new ls(r4, t3);
    }
    as.fromSourceMap = function(e4, t3) {
      return ls.fromSourceMap(e4, t3);
    }, as.prototype._version = 3, as.prototype.__generatedMappings = null, Object.defineProperty(as.prototype, "_generatedMappings", {configurable: true, enumerable: true, get: function() {
      return this.__generatedMappings || this._parseMappings(this._mappings, this.sourceRoot), this.__generatedMappings;
    }}), as.prototype.__originalMappings = null, Object.defineProperty(as.prototype, "_originalMappings", {configurable: true, enumerable: true, get: function() {
      return this.__originalMappings || this._parseMappings(this._mappings, this.sourceRoot), this.__originalMappings;
    }}), as.prototype._charIsMappingSeparator = function(e4, t3) {
      var r4 = e4.charAt(t3);
      return r4 === ";" || r4 === ",";
    }, as.prototype._parseMappings = function(e4, t3) {
      throw new Error("Subclasses must implement _parseMappings");
    }, as.GENERATED_ORDER = 1, as.ORIGINAL_ORDER = 2, as.GREATEST_LOWER_BOUND = 1, as.LEAST_UPPER_BOUND = 2, as.prototype.eachMapping = function(e4, t3, r4) {
      var s4, i4 = t3 || null;
      switch (r4 || as.GENERATED_ORDER) {
        case as.GENERATED_ORDER:
          s4 = this._generatedMappings;
          break;
        case as.ORIGINAL_ORDER:
          s4 = this._originalMappings;
          break;
        default:
          throw new Error("Unknown order of iteration.");
      }
      var n4 = this.sourceRoot;
      s4.map(function(e5) {
        var t4 = e5.source === null ? null : this._sources.at(e5.source);
        return {source: t4 = qr.computeSourceURL(n4, t4, this._sourceMapURL), generatedLine: e5.generatedLine, generatedColumn: e5.generatedColumn, originalLine: e5.originalLine, originalColumn: e5.originalColumn, name: e5.name === null ? null : this._names.at(e5.name)};
      }, this).forEach(e4, i4);
    }, as.prototype.allGeneratedPositionsFor = function(e4) {
      var t3 = qr.getArg(e4, "line"), r4 = {source: qr.getArg(e4, "source"), originalLine: t3, originalColumn: qr.getArg(e4, "column", 0)};
      if (r4.source = this._findSourceIndex(r4.source), r4.source < 0)
        return [];
      var s4 = [], i4 = this._findMapping(r4, this._originalMappings, "originalLine", "originalColumn", qr.compareByOriginalPositions, Zr.LEAST_UPPER_BOUND);
      if (i4 >= 0) {
        var n4 = this._originalMappings[i4];
        if (e4.column === void 0)
          for (var a4 = n4.originalLine; n4 && n4.originalLine === a4; )
            s4.push({line: qr.getArg(n4, "generatedLine", null), column: qr.getArg(n4, "generatedColumn", null), lastColumn: qr.getArg(n4, "lastGeneratedColumn", null)}), n4 = this._originalMappings[++i4];
        else
          for (var o4 = n4.originalColumn; n4 && n4.originalLine === t3 && n4.originalColumn == o4; )
            s4.push({line: qr.getArg(n4, "generatedLine", null), column: qr.getArg(n4, "generatedColumn", null), lastColumn: qr.getArg(n4, "lastGeneratedColumn", null)}), n4 = this._originalMappings[++i4];
      }
      return s4;
    };
    var os = as;
    function ls(e4, t3) {
      var r4 = e4;
      typeof e4 == "string" && (r4 = qr.parseSourceMapInput(e4));
      var s4 = qr.getArg(r4, "version"), i4 = qr.getArg(r4, "sources"), n4 = qr.getArg(r4, "names", []), a4 = qr.getArg(r4, "sourceRoot", null), o4 = qr.getArg(r4, "sourcesContent", null), l3 = qr.getArg(r4, "mappings"), c4 = qr.getArg(r4, "file", null);
      if (s4 != this._version)
        throw new Error("Unsupported version: " + s4);
      a4 && (a4 = qr.normalize(a4)), i4 = i4.map(String).map(qr.normalize).map(function(e5) {
        return a4 && qr.isAbsolute(a4) && qr.isAbsolute(e5) ? qr.relative(a4, e5) : e5;
      }), this._names = is.fromArray(n4.map(String), true), this._sources = is.fromArray(i4, true), this._absoluteSources = this._sources.toArray().map(function(e5) {
        return qr.computeSourceURL(a4, e5, t3);
      }), this.sourceRoot = a4, this.sourcesContent = o4, this._mappings = l3, this._sourceMapURL = t3, this.file = c4;
    }
    function cs() {
      this.generatedLine = 0, this.generatedColumn = 0, this.source = null, this.originalLine = null, this.originalColumn = null, this.name = null;
    }
    ls.prototype = Object.create(as.prototype), ls.prototype.consumer = as, ls.prototype._findSourceIndex = function(e4) {
      var t3, r4 = e4;
      if (this.sourceRoot != null && (r4 = qr.relative(this.sourceRoot, r4)), this._sources.has(r4))
        return this._sources.indexOf(r4);
      for (t3 = 0; t3 < this._absoluteSources.length; ++t3)
        if (this._absoluteSources[t3] == e4)
          return t3;
      return -1;
    }, ls.fromSourceMap = function(e4, t3) {
      var r4 = Object.create(ls.prototype), s4 = r4._names = is.fromArray(e4._names.toArray(), true), i4 = r4._sources = is.fromArray(e4._sources.toArray(), true);
      r4.sourceRoot = e4._sourceRoot, r4.sourcesContent = e4._generateSourcesContent(r4._sources.toArray(), r4.sourceRoot), r4.file = e4._file, r4._sourceMapURL = t3, r4._absoluteSources = r4._sources.toArray().map(function(e5) {
        return qr.computeSourceURL(r4.sourceRoot, e5, t3);
      });
      for (var n4 = e4._mappings.toArray().slice(), a4 = r4.__generatedMappings = [], o4 = r4.__originalMappings = [], l3 = 0, c4 = n4.length; l3 < c4; l3++) {
        var u3 = n4[l3], h4 = new cs();
        h4.generatedLine = u3.generatedLine, h4.generatedColumn = u3.generatedColumn, u3.source && (h4.source = i4.indexOf(u3.source), h4.originalLine = u3.originalLine, h4.originalColumn = u3.originalColumn, u3.name && (h4.name = s4.indexOf(u3.name)), o4.push(h4)), a4.push(h4);
      }
      return ns(r4.__originalMappings, qr.compareByOriginalPositions), r4;
    }, ls.prototype._version = 3, Object.defineProperty(ls.prototype, "sources", {get: function() {
      return this._absoluteSources.slice();
    }}), ls.prototype._parseMappings = function(e4, t3) {
      for (var r4, s4, i4, n4, a4, o4 = 1, l3 = 0, c4 = 0, u3 = 0, h4 = 0, p4 = 0, d4 = e4.length, f4 = 0, m4 = {}, y4 = {}, g4 = [], x4 = []; f4 < d4; )
        if (e4.charAt(f4) === ";")
          o4++, f4++, l3 = 0;
        else if (e4.charAt(f4) === ",")
          f4++;
        else {
          for ((r4 = new cs()).generatedLine = o4, n4 = f4; n4 < d4 && !this._charIsMappingSeparator(e4, n4); n4++)
            ;
          if (i4 = m4[s4 = e4.slice(f4, n4)])
            f4 += s4.length;
          else {
            for (i4 = []; f4 < n4; )
              Ur.decode(e4, f4, y4), a4 = y4.value, f4 = y4.rest, i4.push(a4);
            if (i4.length === 2)
              throw new Error("Found a source, but no line and column");
            if (i4.length === 3)
              throw new Error("Found a source and line, but no column");
            m4[s4] = i4;
          }
          r4.generatedColumn = l3 + i4[0], l3 = r4.generatedColumn, i4.length > 1 && (r4.source = h4 + i4[1], h4 += i4[1], r4.originalLine = c4 + i4[2], c4 = r4.originalLine, r4.originalLine += 1, r4.originalColumn = u3 + i4[3], u3 = r4.originalColumn, i4.length > 4 && (r4.name = p4 + i4[4], p4 += i4[4])), x4.push(r4), typeof r4.originalLine == "number" && g4.push(r4);
        }
      ns(x4, qr.compareByGeneratedPositionsDeflated), this.__generatedMappings = x4, ns(g4, qr.compareByOriginalPositions), this.__originalMappings = g4;
    }, ls.prototype._findMapping = function(e4, t3, r4, s4, i4, n4) {
      if (e4[r4] <= 0)
        throw new TypeError("Line must be greater than or equal to 1, got " + e4[r4]);
      if (e4[s4] < 0)
        throw new TypeError("Column must be greater than or equal to 0, got " + e4[s4]);
      return Zr.search(e4, t3, i4, n4);
    }, ls.prototype.computeColumnSpans = function() {
      for (var e4 = 0; e4 < this._generatedMappings.length; ++e4) {
        var t3 = this._generatedMappings[e4];
        if (e4 + 1 < this._generatedMappings.length) {
          var r4 = this._generatedMappings[e4 + 1];
          if (t3.generatedLine === r4.generatedLine) {
            t3.lastGeneratedColumn = r4.generatedColumn - 1;
            continue;
          }
        }
        t3.lastGeneratedColumn = 1 / 0;
      }
    }, ls.prototype.originalPositionFor = function(e4) {
      var t3 = {generatedLine: qr.getArg(e4, "line"), generatedColumn: qr.getArg(e4, "column")}, r4 = this._findMapping(t3, this._generatedMappings, "generatedLine", "generatedColumn", qr.compareByGeneratedPositionsDeflated, qr.getArg(e4, "bias", as.GREATEST_LOWER_BOUND));
      if (r4 >= 0) {
        var s4 = this._generatedMappings[r4];
        if (s4.generatedLine === t3.generatedLine) {
          var i4 = qr.getArg(s4, "source", null);
          i4 !== null && (i4 = this._sources.at(i4), i4 = qr.computeSourceURL(this.sourceRoot, i4, this._sourceMapURL));
          var n4 = qr.getArg(s4, "name", null);
          return n4 !== null && (n4 = this._names.at(n4)), {source: i4, line: qr.getArg(s4, "originalLine", null), column: qr.getArg(s4, "originalColumn", null), name: n4};
        }
      }
      return {source: null, line: null, column: null, name: null};
    }, ls.prototype.hasContentsOfAllSources = function() {
      return !!this.sourcesContent && this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(e4) {
        return e4 == null;
      });
    }, ls.prototype.sourceContentFor = function(e4, t3) {
      if (!this.sourcesContent)
        return null;
      var r4 = this._findSourceIndex(e4);
      if (r4 >= 0)
        return this.sourcesContent[r4];
      var s4, i4 = e4;
      if (this.sourceRoot != null && (i4 = qr.relative(this.sourceRoot, i4)), this.sourceRoot != null && (s4 = qr.urlParse(this.sourceRoot))) {
        var n4 = i4.replace(/^file:\/\//, "");
        if (s4.scheme == "file" && this._sources.has(n4))
          return this.sourcesContent[this._sources.indexOf(n4)];
        if ((!s4.path || s4.path == "/") && this._sources.has("/" + i4))
          return this.sourcesContent[this._sources.indexOf("/" + i4)];
      }
      if (t3)
        return null;
      throw new Error('"' + i4 + '" is not in the SourceMap.');
    }, ls.prototype.generatedPositionFor = function(e4) {
      var t3 = qr.getArg(e4, "source");
      if ((t3 = this._findSourceIndex(t3)) < 0)
        return {line: null, column: null, lastColumn: null};
      var r4 = {source: t3, originalLine: qr.getArg(e4, "line"), originalColumn: qr.getArg(e4, "column")}, s4 = this._findMapping(r4, this._originalMappings, "originalLine", "originalColumn", qr.compareByOriginalPositions, qr.getArg(e4, "bias", as.GREATEST_LOWER_BOUND));
      if (s4 >= 0) {
        var i4 = this._originalMappings[s4];
        if (i4.source === r4.source)
          return {line: qr.getArg(i4, "generatedLine", null), column: qr.getArg(i4, "generatedColumn", null), lastColumn: qr.getArg(i4, "lastGeneratedColumn", null)};
      }
      return {line: null, column: null, lastColumn: null};
    };
    var us = ls;
    function hs(e4, t3) {
      var r4 = e4;
      typeof e4 == "string" && (r4 = qr.parseSourceMapInput(e4));
      var s4 = qr.getArg(r4, "version"), i4 = qr.getArg(r4, "sections");
      if (s4 != this._version)
        throw new Error("Unsupported version: " + s4);
      this._sources = new is(), this._names = new is();
      var n4 = {line: -1, column: 0};
      this._sections = i4.map(function(e5) {
        if (e5.url)
          throw new Error("Support for url field in sections not implemented.");
        var r5 = qr.getArg(e5, "offset"), s5 = qr.getArg(r5, "line"), i5 = qr.getArg(r5, "column");
        if (s5 < n4.line || s5 === n4.line && i5 < n4.column)
          throw new Error("Section offsets must be ordered and non-overlapping.");
        return n4 = r5, {generatedOffset: {generatedLine: s5 + 1, generatedColumn: i5 + 1}, consumer: new as(qr.getArg(e5, "map"), t3)};
      });
    }
    hs.prototype = Object.create(as.prototype), hs.prototype.constructor = as, hs.prototype._version = 3, Object.defineProperty(hs.prototype, "sources", {get: function() {
      for (var e4 = [], t3 = 0; t3 < this._sections.length; t3++)
        for (var r4 = 0; r4 < this._sections[t3].consumer.sources.length; r4++)
          e4.push(this._sections[t3].consumer.sources[r4]);
      return e4;
    }}), hs.prototype.originalPositionFor = function(e4) {
      var t3 = {generatedLine: qr.getArg(e4, "line"), generatedColumn: qr.getArg(e4, "column")}, r4 = Zr.search(t3, this._sections, function(e5, t4) {
        var r5 = e5.generatedLine - t4.generatedOffset.generatedLine;
        return r5 || e5.generatedColumn - t4.generatedOffset.generatedColumn;
      }), s4 = this._sections[r4];
      return s4 ? s4.consumer.originalPositionFor({line: t3.generatedLine - (s4.generatedOffset.generatedLine - 1), column: t3.generatedColumn - (s4.generatedOffset.generatedLine === t3.generatedLine ? s4.generatedOffset.generatedColumn - 1 : 0), bias: e4.bias}) : {source: null, line: null, column: null, name: null};
    }, hs.prototype.hasContentsOfAllSources = function() {
      return this._sections.every(function(e4) {
        return e4.consumer.hasContentsOfAllSources();
      });
    }, hs.prototype.sourceContentFor = function(e4, t3) {
      for (var r4 = 0; r4 < this._sections.length; r4++) {
        var s4 = this._sections[r4].consumer.sourceContentFor(e4, true);
        if (s4)
          return s4;
      }
      if (t3)
        return null;
      throw new Error('"' + e4 + '" is not in the SourceMap.');
    }, hs.prototype.generatedPositionFor = function(e4) {
      for (var t3 = 0; t3 < this._sections.length; t3++) {
        var r4 = this._sections[t3];
        if (r4.consumer._findSourceIndex(qr.getArg(e4, "source")) !== -1) {
          var s4 = r4.consumer.generatedPositionFor(e4);
          if (s4)
            return {line: s4.line + (r4.generatedOffset.generatedLine - 1), column: s4.column + (r4.generatedOffset.generatedLine === s4.line ? r4.generatedOffset.generatedColumn - 1 : 0)};
        }
      }
      return {line: null, column: null};
    }, hs.prototype._parseMappings = function(e4, t3) {
      this.__generatedMappings = [], this.__originalMappings = [];
      for (var r4 = 0; r4 < this._sections.length; r4++)
        for (var s4 = this._sections[r4], i4 = s4.consumer._generatedMappings, n4 = 0; n4 < i4.length; n4++) {
          var a4 = i4[n4], o4 = s4.consumer._sources.at(a4.source);
          o4 = qr.computeSourceURL(s4.consumer.sourceRoot, o4, this._sourceMapURL), this._sources.add(o4), o4 = this._sources.indexOf(o4);
          var l3 = null;
          a4.name && (l3 = s4.consumer._names.at(a4.name), this._names.add(l3), l3 = this._names.indexOf(l3));
          var c4 = {source: o4, generatedLine: a4.generatedLine + (s4.generatedOffset.generatedLine - 1), generatedColumn: a4.generatedColumn + (s4.generatedOffset.generatedLine === a4.generatedLine ? s4.generatedOffset.generatedColumn - 1 : 0), originalLine: a4.originalLine, originalColumn: a4.originalColumn, name: l3};
          this.__generatedMappings.push(c4), typeof c4.originalLine == "number" && this.__originalMappings.push(c4);
        }
      ns(this.__generatedMappings, qr.compareByGeneratedPositionsDeflated), ns(this.__originalMappings, qr.compareByOriginalPositions);
    };
    var ps = {SourceMapConsumer: os, BasicSourceMapConsumer: us, IndexedSourceMapConsumer: hs}, ds = Qr.SourceMapGenerator, fs = /(\r?\n)/, ms = 10, ys = "$$$isSourceNode$$$";
    function gs(e4, t3, r4, s4, i4) {
      this.children = [], this.sourceContents = {}, this.line = e4 == null ? null : e4, this.column = t3 == null ? null : t3, this.source = r4 == null ? null : r4, this.name = i4 == null ? null : i4, this[ys] = true, s4 != null && this.add(s4);
    }
    gs.fromStringWithSourceMap = function(e4, t3, r4) {
      var s4 = new gs(), i4 = e4.split(fs), n4 = 0, a4 = function() {
        return e5() + (e5() || "");
        function e5() {
          return n4 < i4.length ? i4[n4++] : void 0;
        }
      }, o4 = 1, l3 = 0, c4 = null;
      return t3.eachMapping(function(e5) {
        if (c4 !== null) {
          if (!(o4 < e5.generatedLine)) {
            var t4 = (r5 = i4[n4] || "").substr(0, e5.generatedColumn - l3);
            return i4[n4] = r5.substr(e5.generatedColumn - l3), l3 = e5.generatedColumn, u3(c4, t4), void (c4 = e5);
          }
          u3(c4, a4()), o4++, l3 = 0;
        }
        for (; o4 < e5.generatedLine; )
          s4.add(a4()), o4++;
        if (l3 < e5.generatedColumn) {
          var r5 = i4[n4] || "";
          s4.add(r5.substr(0, e5.generatedColumn)), i4[n4] = r5.substr(e5.generatedColumn), l3 = e5.generatedColumn;
        }
        c4 = e5;
      }, this), n4 < i4.length && (c4 && u3(c4, a4()), s4.add(i4.splice(n4).join(""))), t3.sources.forEach(function(e5) {
        var i5 = t3.sourceContentFor(e5);
        i5 != null && (r4 != null && (e5 = qr.join(r4, e5)), s4.setSourceContent(e5, i5));
      }), s4;
      function u3(e5, t4) {
        if (e5 === null || e5.source === void 0)
          s4.add(t4);
        else {
          var i5 = r4 ? qr.join(r4, e5.source) : e5.source;
          s4.add(new gs(e5.originalLine, e5.originalColumn, i5, t4, e5.name));
        }
      }
    }, gs.prototype.add = function(e4) {
      if (Array.isArray(e4))
        e4.forEach(function(e5) {
          this.add(e5);
        }, this);
      else {
        if (!e4[ys] && typeof e4 != "string")
          throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + e4);
        e4 && this.children.push(e4);
      }
      return this;
    }, gs.prototype.prepend = function(e4) {
      if (Array.isArray(e4))
        for (var t3 = e4.length - 1; t3 >= 0; t3--)
          this.prepend(e4[t3]);
      else {
        if (!e4[ys] && typeof e4 != "string")
          throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + e4);
        this.children.unshift(e4);
      }
      return this;
    }, gs.prototype.walk = function(e4) {
      for (var t3, r4 = 0, s4 = this.children.length; r4 < s4; r4++)
        (t3 = this.children[r4])[ys] ? t3.walk(e4) : t3 !== "" && e4(t3, {source: this.source, line: this.line, column: this.column, name: this.name});
    }, gs.prototype.join = function(e4) {
      var t3, r4, s4 = this.children.length;
      if (s4 > 0) {
        for (t3 = [], r4 = 0; r4 < s4 - 1; r4++)
          t3.push(this.children[r4]), t3.push(e4);
        t3.push(this.children[r4]), this.children = t3;
      }
      return this;
    }, gs.prototype.replaceRight = function(e4, t3) {
      var r4 = this.children[this.children.length - 1];
      return r4[ys] ? r4.replaceRight(e4, t3) : typeof r4 == "string" ? this.children[this.children.length - 1] = r4.replace(e4, t3) : this.children.push("".replace(e4, t3)), this;
    }, gs.prototype.setSourceContent = function(e4, t3) {
      this.sourceContents[qr.toSetString(e4)] = t3;
    }, gs.prototype.walkSourceContents = function(e4) {
      for (var t3 = 0, r4 = this.children.length; t3 < r4; t3++)
        this.children[t3][ys] && this.children[t3].walkSourceContents(e4);
      var s4 = Object.keys(this.sourceContents);
      for (t3 = 0, r4 = s4.length; t3 < r4; t3++)
        e4(qr.fromSetString(s4[t3]), this.sourceContents[s4[t3]]);
    }, gs.prototype.toString = function() {
      var e4 = "";
      return this.walk(function(t3) {
        e4 += t3;
      }), e4;
    }, gs.prototype.toStringWithSourceMap = function(e4) {
      var t3 = {code: "", line: 1, column: 0}, r4 = new ds(e4), s4 = false, i4 = null, n4 = null, a4 = null, o4 = null;
      return this.walk(function(e5, l3) {
        t3.code += e5, l3.source !== null && l3.line !== null && l3.column !== null ? (i4 === l3.source && n4 === l3.line && a4 === l3.column && o4 === l3.name || r4.addMapping({source: l3.source, original: {line: l3.line, column: l3.column}, generated: {line: t3.line, column: t3.column}, name: l3.name}), i4 = l3.source, n4 = l3.line, a4 = l3.column, o4 = l3.name, s4 = true) : s4 && (r4.addMapping({generated: {line: t3.line, column: t3.column}}), i4 = null, s4 = false);
        for (var c4 = 0, u3 = e5.length; c4 < u3; c4++)
          e5.charCodeAt(c4) === ms ? (t3.line++, t3.column = 0, c4 + 1 === u3 ? (i4 = null, s4 = false) : s4 && r4.addMapping({source: l3.source, original: {line: l3.line, column: l3.column}, generated: {line: t3.line, column: t3.column}, name: l3.name})) : t3.column++;
      }), this.walkSourceContents(function(e5, t4) {
        r4.setSourceContent(e5, t4);
      }), {code: t3.code, map: r4};
    };
    var xs, bs = {SourceNode: gs}, Es = {SourceMapGenerator: Qr.SourceMapGenerator, SourceMapConsumer: ps.SourceMapConsumer, SourceNode: bs.SourceNode}, vs = d3(Ir), Ss = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true}), t3.isTrailingCommaEnabled = t3.getParentExportDeclaration = t3.isExportDeclaration = t3.fixFaultyLocations = t3.getTrueLoc = t3.composeSourceMaps = t3.copyPos = t3.comparePos = t3.getUnionOfKeys = t3.getOption = void 0;
      var r4 = U2.__importDefault(vs), s4 = U2.__importStar(pe2).namedTypes, i4 = U2.__importDefault(Es), n4 = i4.default.SourceMapConsumer, a4 = i4.default.SourceMapGenerator, o4 = Object.prototype.hasOwnProperty;
      function l3(e5, t4, r5) {
        return e5 && o4.call(e5, t4) ? e5[t4] : r5;
      }
      function c4() {
        for (var e5 = [], t4 = 0; t4 < arguments.length; t4++)
          e5[t4] = arguments[t4];
        for (var r5 = {}, s5 = e5.length, i5 = 0; i5 < s5; ++i5)
          for (var n5 = Object.keys(e5[i5]), a5 = n5.length, o5 = 0; o5 < a5; ++o5)
            r5[n5[o5]] = true;
        return r5;
      }
      function u3(e5, t4) {
        return e5.line - t4.line || e5.column - t4.column;
      }
      function h4(e5) {
        return {line: e5.line, column: e5.column};
      }
      function p4(e5, t4) {
        if (!e5)
          return t4 || null;
        if (!t4)
          return e5;
        var r5 = new n4(e5), s5 = new n4(t4), i5 = new a4({file: t4.file, sourceRoot: t4.sourceRoot}), l4 = {};
        return s5.eachMapping(function(e6) {
          var t5 = r5.originalPositionFor({line: e6.originalLine, column: e6.originalColumn}), s6 = t5.source;
          if (s6 !== null) {
            i5.addMapping({source: s6, original: h4(t5), generated: {line: e6.generatedLine, column: e6.generatedColumn}, name: e6.name});
            var n5 = r5.sourceContentFor(s6);
            n5 && !o4.call(l4, s6) && (l4[s6] = n5, i5.setSourceContent(s6, n5));
          }
        }), i5.toJSON();
      }
      function d4(e5, t4) {
        if (!e5.loc)
          return null;
        var r5 = {start: e5.loc.start, end: e5.loc.end};
        function s5(e6) {
          f4(r5, e6.loc);
        }
        return e5.declaration && e5.declaration.decorators && x4(e5) && e5.declaration.decorators.forEach(s5), u3(r5.start, r5.end) < 0 && (r5.start = h4(r5.start), t4.skipSpaces(r5.start, false, true), u3(r5.start, r5.end) < 0 && (r5.end = h4(r5.end), t4.skipSpaces(r5.end, true, true))), e5.comments && e5.comments.forEach(s5), r5;
      }
      function f4(e5, t4) {
        e5 && t4 && (u3(t4.start, e5.start) < 0 && (e5.start = t4.start), u3(e5.end, t4.end) < 0 && (e5.end = t4.end));
      }
      function m4(e5, t4) {
        var r5 = e5.loc;
        if (r5 && (r5.start.line < 1 && (r5.start.line = 1), r5.end.line < 1 && (r5.end.line = 1)), e5.type === "File" && (r5.start = t4.firstPos(), r5.end = t4.lastPos()), y4(e5, t4), g4(e5, t4), r5 && e5.decorators)
          e5.decorators.forEach(function(e6) {
            f4(r5, e6.loc);
          });
        else if (e5.declaration && x4(e5)) {
          e5.declaration.loc = null;
          var i5 = e5.declaration.decorators;
          i5 && i5.forEach(function(e6) {
            f4(r5, e6.loc);
          });
        } else if (s4.MethodDefinition && s4.MethodDefinition.check(e5) || s4.Property.check(e5) && (e5.method || e5.shorthand))
          e5.value.loc = null, s4.FunctionExpression.check(e5.value) && (e5.value.id = null);
        else if (e5.type === "ObjectTypeProperty") {
          var n5 = e5.loc, a5 = n5 && n5.end;
          a5 && (a5 = h4(a5), t4.prevPos(a5) && t4.charAt(a5) === "," && (a5 = t4.skipSpaces(a5, true, true)) && (n5.end = a5));
        }
      }
      function y4(e5, t4) {
        function r5(e6) {
          for (var r6 = e6 && e6.loc, s5 = r6 && r6.start, i5 = r6 && h4(r6.end); s5 && i5 && u3(s5, i5) < 0 && (t4.prevPos(i5), t4.charAt(i5) === ";"); )
            r6.end.line = i5.line, r6.end.column = i5.column;
        }
        e5.type === "ForStatement" && (r5(e5.init), r5(e5.test), r5(e5.update));
      }
      function g4(e5, t4) {
        if (e5.type === "TemplateLiteral" && e5.quasis.length !== 0) {
          if (e5.loc) {
            var s5 = h4(e5.loc.start);
            r4.default.strictEqual(t4.charAt(s5), "`"), r4.default.ok(t4.nextPos(s5));
            var i5 = e5.quasis[0];
            u3(i5.loc.start, s5) < 0 && (i5.loc.start = s5);
            var n5 = h4(e5.loc.end);
            r4.default.ok(t4.prevPos(n5)), r4.default.strictEqual(t4.charAt(n5), "`");
            var a5 = e5.quasis[e5.quasis.length - 1];
            u3(n5, a5.loc.end) < 0 && (a5.loc.end = n5);
          }
          e5.expressions.forEach(function(s6, i6) {
            var n6 = t4.skipSpaces(s6.loc.start, true, false);
            if (t4.prevPos(n6) && t4.charAt(n6) === "{" && t4.prevPos(n6) && t4.charAt(n6) === "$") {
              var a6 = e5.quasis[i6];
              u3(n6, a6.loc.end) < 0 && (a6.loc.end = n6);
            }
            var o5 = t4.skipSpaces(s6.loc.end, false, false);
            if (t4.charAt(o5) === "}") {
              r4.default.ok(t4.nextPos(o5));
              var l4 = e5.quasis[i6 + 1];
              u3(l4.loc.start, o5) < 0 && (l4.loc.start = o5);
            }
          });
        }
      }
      function x4(e5) {
        if (e5)
          switch (e5.type) {
            case "ExportDeclaration":
            case "ExportDefaultDeclaration":
            case "ExportDefaultSpecifier":
            case "DeclareExportDeclaration":
            case "ExportNamedDeclaration":
            case "ExportAllDeclaration":
              return true;
          }
        return false;
      }
      function b3(e5) {
        var t4 = e5.getParentNode();
        return e5.getName() === "declaration" && x4(t4) ? t4 : null;
      }
      function E4(e5, t4) {
        var r5 = e5.trailingComma;
        return typeof r5 == "object" ? !!r5[t4] : !!r5;
      }
      t3.getOption = l3, t3.getUnionOfKeys = c4, t3.comparePos = u3, t3.copyPos = h4, t3.composeSourceMaps = p4, t3.getTrueLoc = d4, t3.fixFaultyLocations = m4, t3.isExportDeclaration = x4, t3.getParentExportDeclaration = b3, t3.isTrailingCommaEnabled = E4;
    }), As = f3(function(e4, t3) {
      !function(t4, r4) {
        e4.exports = r4();
      }(0, function() {
        return function(e5) {
          var t4 = {};
          function r4(s4) {
            if (t4[s4])
              return t4[s4].exports;
            var i4 = t4[s4] = {exports: {}, id: s4, loaded: false};
            return e5[s4].call(i4.exports, i4, i4.exports, r4), i4.loaded = true, i4.exports;
          }
          return r4.m = e5, r4.c = t4, r4.p = "", r4(0);
        }([function(e5, t4, r4) {
          Object.defineProperty(t4, "__esModule", {value: true});
          var s4 = r4(1), i4 = r4(3), n4 = r4(8), a4 = r4(15);
          function o4(e6, t5, r5) {
            var a5 = null, o5 = function(e7, t6) {
              r5 && r5(e7, t6), a5 && a5.visit(e7, t6);
            }, l4 = typeof r5 == "function" ? o5 : null, c5 = false;
            if (t5) {
              c5 = typeof t5.comment == "boolean" && t5.comment;
              var u4 = typeof t5.attachComment == "boolean" && t5.attachComment;
              (c5 || u4) && ((a5 = new s4.CommentHandler()).attach = u4, t5.comment = true, l4 = o5);
            }
            var h5, p4 = false;
            t5 && typeof t5.sourceType == "string" && (p4 = t5.sourceType === "module"), h5 = t5 && typeof t5.jsx == "boolean" && t5.jsx ? new i4.JSXParser(e6, t5, l4) : new n4.Parser(e6, t5, l4);
            var d4 = p4 ? h5.parseModule() : h5.parseScript();
            return c5 && a5 && (d4.comments = a5.comments), h5.config.tokens && (d4.tokens = h5.tokens), h5.config.tolerant && (d4.errors = h5.errorHandler.errors), d4;
          }
          function l3(e6, t5, r5) {
            var s5 = t5 || {};
            return s5.sourceType = "module", o4(e6, s5, r5);
          }
          function c4(e6, t5, r5) {
            var s5 = t5 || {};
            return s5.sourceType = "script", o4(e6, s5, r5);
          }
          function u3(e6, t5, r5) {
            var s5, i5 = new a4.Tokenizer(e6, t5);
            s5 = [];
            try {
              for (; ; ) {
                var n5 = i5.getNextToken();
                if (!n5)
                  break;
                r5 && (n5 = r5(n5)), s5.push(n5);
              }
            } catch (o5) {
              i5.errorHandler.tolerate(o5);
            }
            return i5.errorHandler.tolerant && (s5.errors = i5.errors()), s5;
          }
          t4.parse = o4, t4.parseModule = l3, t4.parseScript = c4, t4.tokenize = u3;
          var h4 = r4(2);
          t4.Syntax = h4.Syntax, t4.version = "4.0.1";
        }, function(e5, t4, r4) {
          Object.defineProperty(t4, "__esModule", {value: true});
          var s4 = r4(2), i4 = function() {
            function e6() {
              this.attach = false, this.comments = [], this.stack = [], this.leading = [], this.trailing = [];
            }
            return e6.prototype.insertInnerComments = function(e7, t5) {
              if (e7.type === s4.Syntax.BlockStatement && e7.body.length === 0) {
                for (var r5 = [], i5 = this.leading.length - 1; i5 >= 0; --i5) {
                  var n4 = this.leading[i5];
                  t5.end.offset >= n4.start && (r5.unshift(n4.comment), this.leading.splice(i5, 1), this.trailing.splice(i5, 1));
                }
                r5.length && (e7.innerComments = r5);
              }
            }, e6.prototype.findTrailingComments = function(e7) {
              var t5 = [];
              if (this.trailing.length > 0) {
                for (var r5 = this.trailing.length - 1; r5 >= 0; --r5) {
                  var s5 = this.trailing[r5];
                  s5.start >= e7.end.offset && t5.unshift(s5.comment);
                }
                return this.trailing.length = 0, t5;
              }
              var i5 = this.stack[this.stack.length - 1];
              if (i5 && i5.node.trailingComments) {
                var n4 = i5.node.trailingComments[0];
                n4 && n4.range[0] >= e7.end.offset && (t5 = i5.node.trailingComments, delete i5.node.trailingComments);
              }
              return t5;
            }, e6.prototype.findLeadingComments = function(e7) {
              for (var t5, r5 = []; this.stack.length > 0 && (n4 = this.stack[this.stack.length - 1]) && n4.start >= e7.start.offset; )
                t5 = n4.node, this.stack.pop();
              if (t5) {
                for (var s5 = (t5.leadingComments ? t5.leadingComments.length : 0) - 1; s5 >= 0; --s5) {
                  var i5 = t5.leadingComments[s5];
                  i5.range[1] <= e7.start.offset && (r5.unshift(i5), t5.leadingComments.splice(s5, 1));
                }
                return t5.leadingComments && t5.leadingComments.length === 0 && delete t5.leadingComments, r5;
              }
              for (s5 = this.leading.length - 1; s5 >= 0; --s5) {
                var n4;
                (n4 = this.leading[s5]).start <= e7.start.offset && (r5.unshift(n4.comment), this.leading.splice(s5, 1));
              }
              return r5;
            }, e6.prototype.visitNode = function(e7, t5) {
              if (!(e7.type === s4.Syntax.Program && e7.body.length > 0)) {
                this.insertInnerComments(e7, t5);
                var r5 = this.findTrailingComments(t5), i5 = this.findLeadingComments(t5);
                i5.length > 0 && (e7.leadingComments = i5), r5.length > 0 && (e7.trailingComments = r5), this.stack.push({node: e7, start: t5.start.offset});
              }
            }, e6.prototype.visitComment = function(e7, t5) {
              var r5 = e7.type[0] === "L" ? "Line" : "Block", s5 = {type: r5, value: e7.value};
              if (e7.range && (s5.range = e7.range), e7.loc && (s5.loc = e7.loc), this.comments.push(s5), this.attach) {
                var i5 = {comment: {type: r5, value: e7.value, range: [t5.start.offset, t5.end.offset]}, start: t5.start.offset};
                e7.loc && (i5.comment.loc = e7.loc), e7.type = r5, this.leading.push(i5), this.trailing.push(i5);
              }
            }, e6.prototype.visit = function(e7, t5) {
              e7.type === "LineComment" || e7.type === "BlockComment" ? this.visitComment(e7, t5) : this.attach && this.visitNode(e7, t5);
            }, e6;
          }();
          t4.CommentHandler = i4;
        }, function(e5, t4) {
          Object.defineProperty(t4, "__esModule", {value: true}), t4.Syntax = {AssignmentExpression: "AssignmentExpression", AssignmentPattern: "AssignmentPattern", ArrayExpression: "ArrayExpression", ArrayPattern: "ArrayPattern", ArrowFunctionExpression: "ArrowFunctionExpression", AwaitExpression: "AwaitExpression", BlockStatement: "BlockStatement", BinaryExpression: "BinaryExpression", BreakStatement: "BreakStatement", CallExpression: "CallExpression", CatchClause: "CatchClause", ClassBody: "ClassBody", ClassDeclaration: "ClassDeclaration", ClassExpression: "ClassExpression", ConditionalExpression: "ConditionalExpression", ContinueStatement: "ContinueStatement", DoWhileStatement: "DoWhileStatement", DebuggerStatement: "DebuggerStatement", EmptyStatement: "EmptyStatement", ExportAllDeclaration: "ExportAllDeclaration", ExportDefaultDeclaration: "ExportDefaultDeclaration", ExportNamedDeclaration: "ExportNamedDeclaration", ExportSpecifier: "ExportSpecifier", ExpressionStatement: "ExpressionStatement", ForStatement: "ForStatement", ForOfStatement: "ForOfStatement", ForInStatement: "ForInStatement", FunctionDeclaration: "FunctionDeclaration", FunctionExpression: "FunctionExpression", Identifier: "Identifier", IfStatement: "IfStatement", ImportDeclaration: "ImportDeclaration", ImportDefaultSpecifier: "ImportDefaultSpecifier", ImportNamespaceSpecifier: "ImportNamespaceSpecifier", ImportSpecifier: "ImportSpecifier", Literal: "Literal", LabeledStatement: "LabeledStatement", LogicalExpression: "LogicalExpression", MemberExpression: "MemberExpression", MetaProperty: "MetaProperty", MethodDefinition: "MethodDefinition", NewExpression: "NewExpression", ObjectExpression: "ObjectExpression", ObjectPattern: "ObjectPattern", Program: "Program", Property: "Property", RestElement: "RestElement", ReturnStatement: "ReturnStatement", SequenceExpression: "SequenceExpression", SpreadElement: "SpreadElement", Super: "Super", SwitchCase: "SwitchCase", SwitchStatement: "SwitchStatement", TaggedTemplateExpression: "TaggedTemplateExpression", TemplateElement: "TemplateElement", TemplateLiteral: "TemplateLiteral", ThisExpression: "ThisExpression", ThrowStatement: "ThrowStatement", TryStatement: "TryStatement", UnaryExpression: "UnaryExpression", UpdateExpression: "UpdateExpression", VariableDeclaration: "VariableDeclaration", VariableDeclarator: "VariableDeclarator", WhileStatement: "WhileStatement", WithStatement: "WithStatement", YieldExpression: "YieldExpression"};
        }, function(e5, t4, r4) {
          var s4, i4 = this && this.__extends || (s4 = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(e6, t5) {
            e6.__proto__ = t5;
          } || function(e6, t5) {
            for (var r5 in t5)
              t5.hasOwnProperty(r5) && (e6[r5] = t5[r5]);
          }, function(e6, t5) {
            function r5() {
              this.constructor = e6;
            }
            s4(e6, t5), e6.prototype = t5 === null ? Object.create(t5) : (r5.prototype = t5.prototype, new r5());
          });
          Object.defineProperty(t4, "__esModule", {value: true});
          var n4 = r4(4), a4 = r4(5), o4 = r4(6), l3 = r4(7), c4 = r4(8), u3 = r4(13), h4 = r4(14);
          function p4(e6) {
            var t5;
            switch (e6.type) {
              case o4.JSXSyntax.JSXIdentifier:
                t5 = e6.name;
                break;
              case o4.JSXSyntax.JSXNamespacedName:
                var r5 = e6;
                t5 = p4(r5.namespace) + ":" + p4(r5.name);
                break;
              case o4.JSXSyntax.JSXMemberExpression:
                var s5 = e6;
                t5 = p4(s5.object) + "." + p4(s5.property);
            }
            return t5;
          }
          u3.TokenName[100] = "JSXIdentifier", u3.TokenName[101] = "JSXText";
          var d4 = function(e6) {
            function t5(t6, r5, s5) {
              return e6.call(this, t6, r5, s5) || this;
            }
            return i4(t5, e6), t5.prototype.parsePrimaryExpression = function() {
              return this.match("<") ? this.parseJSXRoot() : e6.prototype.parsePrimaryExpression.call(this);
            }, t5.prototype.startJSX = function() {
              this.scanner.index = this.startMarker.index, this.scanner.lineNumber = this.startMarker.line, this.scanner.lineStart = this.startMarker.index - this.startMarker.column;
            }, t5.prototype.finishJSX = function() {
              this.nextToken();
            }, t5.prototype.reenterJSX = function() {
              this.startJSX(), this.expectJSX("}"), this.config.tokens && this.tokens.pop();
            }, t5.prototype.createJSXNode = function() {
              return this.collectComments(), {index: this.scanner.index, line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart};
            }, t5.prototype.createJSXChildNode = function() {
              return {index: this.scanner.index, line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart};
            }, t5.prototype.scanXHTMLEntity = function(e7) {
              for (var t6 = "&", r5 = true, s5 = false, i5 = false, a5 = false; !this.scanner.eof() && r5 && !s5; ) {
                var o5 = this.scanner.source[this.scanner.index];
                if (o5 === e7)
                  break;
                if (s5 = o5 === ";", t6 += o5, ++this.scanner.index, !s5)
                  switch (t6.length) {
                    case 2:
                      i5 = o5 === "#";
                      break;
                    case 3:
                      i5 && (r5 = (a5 = o5 === "x") || n4.Character.isDecimalDigit(o5.charCodeAt(0)), i5 = i5 && !a5);
                      break;
                    default:
                      r5 = (r5 = r5 && !(i5 && !n4.Character.isDecimalDigit(o5.charCodeAt(0)))) && !(a5 && !n4.Character.isHexDigit(o5.charCodeAt(0)));
                  }
              }
              if (r5 && s5 && t6.length > 2) {
                var l4 = t6.substr(1, t6.length - 2);
                i5 && l4.length > 1 ? t6 = String.fromCharCode(parseInt(l4.substr(1), 10)) : a5 && l4.length > 2 ? t6 = String.fromCharCode(parseInt("0" + l4.substr(1), 16)) : i5 || a5 || !h4.XHTMLEntities[l4] || (t6 = h4.XHTMLEntities[l4]);
              }
              return t6;
            }, t5.prototype.lexJSX = function() {
              var e7 = this.scanner.source.charCodeAt(this.scanner.index);
              if (e7 === 60 || e7 === 62 || e7 === 47 || e7 === 58 || e7 === 61 || e7 === 123 || e7 === 125)
                return {type: 7, value: o5 = this.scanner.source[this.scanner.index++], lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: this.scanner.index - 1, end: this.scanner.index};
              if (e7 === 34 || e7 === 39) {
                for (var t6 = this.scanner.index, r5 = this.scanner.source[this.scanner.index++], s5 = ""; !this.scanner.eof() && (l4 = this.scanner.source[this.scanner.index++]) !== r5; )
                  s5 += l4 === "&" ? this.scanXHTMLEntity(r5) : l4;
                return {type: 8, value: s5, lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: t6, end: this.scanner.index};
              }
              if (e7 === 46) {
                var i5 = this.scanner.source.charCodeAt(this.scanner.index + 1), a5 = this.scanner.source.charCodeAt(this.scanner.index + 2), o5 = i5 === 46 && a5 === 46 ? "..." : ".";
                return t6 = this.scanner.index, this.scanner.index += o5.length, {type: 7, value: o5, lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: t6, end: this.scanner.index};
              }
              if (e7 === 96)
                return {type: 10, value: "", lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: this.scanner.index, end: this.scanner.index};
              if (n4.Character.isIdentifierStart(e7) && e7 !== 92) {
                for (t6 = this.scanner.index, ++this.scanner.index; !this.scanner.eof(); ) {
                  var l4 = this.scanner.source.charCodeAt(this.scanner.index);
                  if (n4.Character.isIdentifierPart(l4) && l4 !== 92)
                    ++this.scanner.index;
                  else {
                    if (l4 !== 45)
                      break;
                    ++this.scanner.index;
                  }
                }
                return {type: 100, value: this.scanner.source.slice(t6, this.scanner.index), lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: t6, end: this.scanner.index};
              }
              return this.scanner.lex();
            }, t5.prototype.nextJSXToken = function() {
              this.collectComments(), this.startMarker.index = this.scanner.index, this.startMarker.line = this.scanner.lineNumber, this.startMarker.column = this.scanner.index - this.scanner.lineStart;
              var e7 = this.lexJSX();
              return this.lastMarker.index = this.scanner.index, this.lastMarker.line = this.scanner.lineNumber, this.lastMarker.column = this.scanner.index - this.scanner.lineStart, this.config.tokens && this.tokens.push(this.convertToken(e7)), e7;
            }, t5.prototype.nextJSXText = function() {
              this.startMarker.index = this.scanner.index, this.startMarker.line = this.scanner.lineNumber, this.startMarker.column = this.scanner.index - this.scanner.lineStart;
              for (var e7 = this.scanner.index, t6 = ""; !this.scanner.eof(); ) {
                var r5 = this.scanner.source[this.scanner.index];
                if (r5 === "{" || r5 === "<")
                  break;
                ++this.scanner.index, t6 += r5, n4.Character.isLineTerminator(r5.charCodeAt(0)) && (++this.scanner.lineNumber, r5 === "\r" && this.scanner.source[this.scanner.index] === "\n" && ++this.scanner.index, this.scanner.lineStart = this.scanner.index);
              }
              this.lastMarker.index = this.scanner.index, this.lastMarker.line = this.scanner.lineNumber, this.lastMarker.column = this.scanner.index - this.scanner.lineStart;
              var s5 = {type: 101, value: t6, lineNumber: this.scanner.lineNumber, lineStart: this.scanner.lineStart, start: e7, end: this.scanner.index};
              return t6.length > 0 && this.config.tokens && this.tokens.push(this.convertToken(s5)), s5;
            }, t5.prototype.peekJSXToken = function() {
              var e7 = this.scanner.saveState();
              this.scanner.scanComments();
              var t6 = this.lexJSX();
              return this.scanner.restoreState(e7), t6;
            }, t5.prototype.expectJSX = function(e7) {
              var t6 = this.nextJSXToken();
              t6.type === 7 && t6.value === e7 || this.throwUnexpectedToken(t6);
            }, t5.prototype.matchJSX = function(e7) {
              var t6 = this.peekJSXToken();
              return t6.type === 7 && t6.value === e7;
            }, t5.prototype.parseJSXIdentifier = function() {
              var e7 = this.createJSXNode(), t6 = this.nextJSXToken();
              return t6.type !== 100 && this.throwUnexpectedToken(t6), this.finalize(e7, new a4.JSXIdentifier(t6.value));
            }, t5.prototype.parseJSXElementName = function() {
              var e7 = this.createJSXNode(), t6 = this.parseJSXIdentifier();
              if (this.matchJSX(":")) {
                var r5 = t6;
                this.expectJSX(":");
                var s5 = this.parseJSXIdentifier();
                t6 = this.finalize(e7, new a4.JSXNamespacedName(r5, s5));
              } else if (this.matchJSX("."))
                for (; this.matchJSX("."); ) {
                  var i5 = t6;
                  this.expectJSX(".");
                  var n5 = this.parseJSXIdentifier();
                  t6 = this.finalize(e7, new a4.JSXMemberExpression(i5, n5));
                }
              return t6;
            }, t5.prototype.parseJSXAttributeName = function() {
              var e7, t6 = this.createJSXNode(), r5 = this.parseJSXIdentifier();
              if (this.matchJSX(":")) {
                var s5 = r5;
                this.expectJSX(":");
                var i5 = this.parseJSXIdentifier();
                e7 = this.finalize(t6, new a4.JSXNamespacedName(s5, i5));
              } else
                e7 = r5;
              return e7;
            }, t5.prototype.parseJSXStringLiteralAttribute = function() {
              var e7 = this.createJSXNode(), t6 = this.nextJSXToken();
              t6.type !== 8 && this.throwUnexpectedToken(t6);
              var r5 = this.getTokenRaw(t6);
              return this.finalize(e7, new l3.Literal(t6.value, r5));
            }, t5.prototype.parseJSXExpressionAttribute = function() {
              var e7 = this.createJSXNode();
              this.expectJSX("{"), this.finishJSX(), this.match("}") && this.tolerateError("JSX attributes must only be assigned a non-empty expression");
              var t6 = this.parseAssignmentExpression();
              return this.reenterJSX(), this.finalize(e7, new a4.JSXExpressionContainer(t6));
            }, t5.prototype.parseJSXAttributeValue = function() {
              return this.matchJSX("{") ? this.parseJSXExpressionAttribute() : this.matchJSX("<") ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();
            }, t5.prototype.parseJSXNameValueAttribute = function() {
              var e7 = this.createJSXNode(), t6 = this.parseJSXAttributeName(), r5 = null;
              return this.matchJSX("=") && (this.expectJSX("="), r5 = this.parseJSXAttributeValue()), this.finalize(e7, new a4.JSXAttribute(t6, r5));
            }, t5.prototype.parseJSXSpreadAttribute = function() {
              var e7 = this.createJSXNode();
              this.expectJSX("{"), this.expectJSX("..."), this.finishJSX();
              var t6 = this.parseAssignmentExpression();
              return this.reenterJSX(), this.finalize(e7, new a4.JSXSpreadAttribute(t6));
            }, t5.prototype.parseJSXAttributes = function() {
              for (var e7 = []; !this.matchJSX("/") && !this.matchJSX(">"); ) {
                var t6 = this.matchJSX("{") ? this.parseJSXSpreadAttribute() : this.parseJSXNameValueAttribute();
                e7.push(t6);
              }
              return e7;
            }, t5.prototype.parseJSXOpeningElement = function() {
              var e7 = this.createJSXNode();
              this.expectJSX("<");
              var t6 = this.parseJSXElementName(), r5 = this.parseJSXAttributes(), s5 = this.matchJSX("/");
              return s5 && this.expectJSX("/"), this.expectJSX(">"), this.finalize(e7, new a4.JSXOpeningElement(t6, s5, r5));
            }, t5.prototype.parseJSXBoundaryElement = function() {
              var e7 = this.createJSXNode();
              if (this.expectJSX("<"), this.matchJSX("/")) {
                this.expectJSX("/");
                var t6 = this.parseJSXElementName();
                return this.expectJSX(">"), this.finalize(e7, new a4.JSXClosingElement(t6));
              }
              var r5 = this.parseJSXElementName(), s5 = this.parseJSXAttributes(), i5 = this.matchJSX("/");
              return i5 && this.expectJSX("/"), this.expectJSX(">"), this.finalize(e7, new a4.JSXOpeningElement(r5, i5, s5));
            }, t5.prototype.parseJSXEmptyExpression = function() {
              var e7 = this.createJSXChildNode();
              return this.collectComments(), this.lastMarker.index = this.scanner.index, this.lastMarker.line = this.scanner.lineNumber, this.lastMarker.column = this.scanner.index - this.scanner.lineStart, this.finalize(e7, new a4.JSXEmptyExpression());
            }, t5.prototype.parseJSXExpressionContainer = function() {
              var e7, t6 = this.createJSXNode();
              return this.expectJSX("{"), this.matchJSX("}") ? (e7 = this.parseJSXEmptyExpression(), this.expectJSX("}")) : (this.finishJSX(), e7 = this.parseAssignmentExpression(), this.reenterJSX()), this.finalize(t6, new a4.JSXExpressionContainer(e7));
            }, t5.prototype.parseJSXChildren = function() {
              for (var e7 = []; !this.scanner.eof(); ) {
                var t6 = this.createJSXChildNode(), r5 = this.nextJSXText();
                if (r5.start < r5.end) {
                  var s5 = this.getTokenRaw(r5), i5 = this.finalize(t6, new a4.JSXText(r5.value, s5));
                  e7.push(i5);
                }
                if (this.scanner.source[this.scanner.index] !== "{")
                  break;
                var n5 = this.parseJSXExpressionContainer();
                e7.push(n5);
              }
              return e7;
            }, t5.prototype.parseComplexJSXElement = function(e7) {
              for (var t6 = []; !this.scanner.eof(); ) {
                e7.children = e7.children.concat(this.parseJSXChildren());
                var r5 = this.createJSXChildNode(), s5 = this.parseJSXBoundaryElement();
                if (s5.type === o4.JSXSyntax.JSXOpeningElement) {
                  var i5 = s5;
                  if (i5.selfClosing) {
                    var n5 = this.finalize(r5, new a4.JSXElement(i5, [], null));
                    e7.children.push(n5);
                  } else
                    t6.push(e7), e7 = {node: r5, opening: i5, closing: null, children: []};
                }
                if (s5.type === o4.JSXSyntax.JSXClosingElement) {
                  e7.closing = s5;
                  var l4 = p4(e7.opening.name);
                  if (l4 !== p4(e7.closing.name) && this.tolerateError("Expected corresponding JSX closing tag for %0", l4), !(t6.length > 0))
                    break;
                  n5 = this.finalize(e7.node, new a4.JSXElement(e7.opening, e7.children, e7.closing)), (e7 = t6[t6.length - 1]).children.push(n5), t6.pop();
                }
              }
              return e7;
            }, t5.prototype.parseJSXElement = function() {
              var e7 = this.createJSXNode(), t6 = this.parseJSXOpeningElement(), r5 = [], s5 = null;
              if (!t6.selfClosing) {
                var i5 = this.parseComplexJSXElement({node: e7, opening: t6, closing: s5, children: r5});
                r5 = i5.children, s5 = i5.closing;
              }
              return this.finalize(e7, new a4.JSXElement(t6, r5, s5));
            }, t5.prototype.parseJSXRoot = function() {
              this.config.tokens && this.tokens.pop(), this.startJSX();
              var e7 = this.parseJSXElement();
              return this.finishJSX(), e7;
            }, t5.prototype.isStartOfExpression = function() {
              return e6.prototype.isStartOfExpression.call(this) || this.match("<");
            }, t5;
          }(c4.Parser);
          t4.JSXParser = d4;
        }, function(e5, t4) {
          Object.defineProperty(t4, "__esModule", {value: true});
          var r4 = {NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]/, NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B4\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/};
          t4.Character = {fromCodePoint: function(e6) {
            return e6 < 65536 ? String.fromCharCode(e6) : String.fromCharCode(55296 + (e6 - 65536 >> 10)) + String.fromCharCode(56320 + (e6 - 65536 & 1023));
          }, isWhiteSpace: function(e6) {
            return e6 === 32 || e6 === 9 || e6 === 11 || e6 === 12 || e6 === 160 || e6 >= 5760 && [5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200, 8201, 8202, 8239, 8287, 12288, 65279].indexOf(e6) >= 0;
          }, isLineTerminator: function(e6) {
            return e6 === 10 || e6 === 13 || e6 === 8232 || e6 === 8233;
          }, isIdentifierStart: function(e6) {
            return e6 === 36 || e6 === 95 || e6 >= 65 && e6 <= 90 || e6 >= 97 && e6 <= 122 || e6 === 92 || e6 >= 128 && r4.NonAsciiIdentifierStart.test(t4.Character.fromCodePoint(e6));
          }, isIdentifierPart: function(e6) {
            return e6 === 36 || e6 === 95 || e6 >= 65 && e6 <= 90 || e6 >= 97 && e6 <= 122 || e6 >= 48 && e6 <= 57 || e6 === 92 || e6 >= 128 && r4.NonAsciiIdentifierPart.test(t4.Character.fromCodePoint(e6));
          }, isDecimalDigit: function(e6) {
            return e6 >= 48 && e6 <= 57;
          }, isHexDigit: function(e6) {
            return e6 >= 48 && e6 <= 57 || e6 >= 65 && e6 <= 70 || e6 >= 97 && e6 <= 102;
          }, isOctalDigit: function(e6) {
            return e6 >= 48 && e6 <= 55;
          }};
        }, function(e5, t4, r4) {
          Object.defineProperty(t4, "__esModule", {value: true});
          var s4 = r4(6), i4 = function() {
            function e6(e7) {
              this.type = s4.JSXSyntax.JSXClosingElement, this.name = e7;
            }
            return e6;
          }();
          t4.JSXClosingElement = i4;
          var n4 = function() {
            function e6(e7, t5, r5) {
              this.type = s4.JSXSyntax.JSXElement, this.openingElement = e7, this.children = t5, this.closingElement = r5;
            }
            return e6;
          }();
          t4.JSXElement = n4;
          var a4 = function() {
            function e6() {
              this.type = s4.JSXSyntax.JSXEmptyExpression;
            }
            return e6;
          }();
          t4.JSXEmptyExpression = a4;
          var o4 = function() {
            function e6(e7) {
              this.type = s4.JSXSyntax.JSXExpressionContainer, this.expression = e7;
            }
            return e6;
          }();
          t4.JSXExpressionContainer = o4;
          var l3 = function() {
            function e6(e7) {
              this.type = s4.JSXSyntax.JSXIdentifier, this.name = e7;
            }
            return e6;
          }();
          t4.JSXIdentifier = l3;
          var c4 = function() {
            function e6(e7, t5) {
              this.type = s4.JSXSyntax.JSXMemberExpression, this.object = e7, this.property = t5;
            }
            return e6;
          }();
          t4.JSXMemberExpression = c4;
          var u3 = function() {
            function e6(e7, t5) {
              this.type = s4.JSXSyntax.JSXAttribute, this.name = e7, this.value = t5;
            }
            return e6;
          }();
          t4.JSXAttribute = u3;
          var h4 = function() {
            function e6(e7, t5) {
              this.type = s4.JSXSyntax.JSXNamespacedName, this.namespace = e7, this.name = t5;
            }
            return e6;
          }();
          t4.JSXNamespacedName = h4;
          var p4 = function() {
            function e6(e7, t5, r5) {
              this.type = s4.JSXSyntax.JSXOpeningElement, this.name = e7, this.selfClosing = t5, this.attributes = r5;
            }
            return e6;
          }();
          t4.JSXOpeningElement = p4;
          var d4 = function() {
            function e6(e7) {
              this.type = s4.JSXSyntax.JSXSpreadAttribute, this.argument = e7;
            }
            return e6;
          }();
          t4.JSXSpreadAttribute = d4;
          var f4 = function() {
            function e6(e7, t5) {
              this.type = s4.JSXSyntax.JSXText, this.value = e7, this.raw = t5;
            }
            return e6;
          }();
          t4.JSXText = f4;
        }, function(e5, t4) {
          Object.defineProperty(t4, "__esModule", {value: true}), t4.JSXSyntax = {JSXAttribute: "JSXAttribute", JSXClosingElement: "JSXClosingElement", JSXElement: "JSXElement", JSXEmptyExpression: "JSXEmptyExpression", JSXExpressionContainer: "JSXExpressionContainer", JSXIdentifier: "JSXIdentifier", JSXMemberExpression: "JSXMemberExpression", JSXNamespacedName: "JSXNamespacedName", JSXOpeningElement: "JSXOpeningElement", JSXSpreadAttribute: "JSXSpreadAttribute", JSXText: "JSXText"};
        }, function(e5, t4, r4) {
          Object.defineProperty(t4, "__esModule", {value: true});
          var s4 = r4(2), i4 = function() {
            function e6(e7) {
              this.type = s4.Syntax.ArrayExpression, this.elements = e7;
            }
            return e6;
          }();
          t4.ArrayExpression = i4;
          var n4 = function() {
            function e6(e7) {
              this.type = s4.Syntax.ArrayPattern, this.elements = e7;
            }
            return e6;
          }();
          t4.ArrayPattern = n4;
          var a4 = function() {
            function e6(e7, t5, r5) {
              this.type = s4.Syntax.ArrowFunctionExpression, this.id = null, this.params = e7, this.body = t5, this.generator = false, this.expression = r5, this.async = false;
            }
            return e6;
          }();
          t4.ArrowFunctionExpression = a4;
          var o4 = function() {
            function e6(e7, t5, r5) {
              this.type = s4.Syntax.AssignmentExpression, this.operator = e7, this.left = t5, this.right = r5;
            }
            return e6;
          }();
          t4.AssignmentExpression = o4;
          var l3 = function() {
            function e6(e7, t5) {
              this.type = s4.Syntax.AssignmentPattern, this.left = e7, this.right = t5;
            }
            return e6;
          }();
          t4.AssignmentPattern = l3;
          var c4 = function() {
            function e6(e7, t5, r5) {
              this.type = s4.Syntax.ArrowFunctionExpression, this.id = null, this.params = e7, this.body = t5, this.generator = false, this.expression = r5, this.async = true;
            }
            return e6;
          }();
          t4.AsyncArrowFunctionExpression = c4;
          var u3 = function() {
            function e6(e7, t5, r5) {
              this.type = s4.Syntax.FunctionDeclaration, this.id = e7, this.params = t5, this.body = r5, this.generator = false, this.expression = false, this.async = true;
            }
            return e6;
          }();
          t4.AsyncFunctionDeclaration = u3;
          var h4 = function() {
            function e6(e7, t5, r5) {
              this.type = s4.Syntax.FunctionExpression, this.id = e7, this.params = t5, this.body = r5, this.generator = false, this.expression = false, this.async = true;
            }
            return e6;
          }();
          t4.AsyncFunctionExpression = h4;
          var p4 = function() {
            function e6(e7) {
              this.type = s4.Syntax.AwaitExpression, this.argument = e7;
            }
            return e6;
          }();
          t4.AwaitExpression = p4;
          var d4 = function() {
            function e6(e7, t5, r5) {
              var i5 = e7 === "||" || e7 === "&&";
              this.type = i5 ? s4.Syntax.LogicalExpression : s4.Syntax.BinaryExpression, this.operator = e7, this.left = t5, this.right = r5;
            }
            return e6;
          }();
          t4.BinaryExpression = d4;
          var f4 = function() {
            function e6(e7) {
              this.type = s4.Syntax.BlockStatement, this.body = e7;
            }
            return e6;
          }();
          t4.BlockStatement = f4;
          var m4 = function() {
            function e6(e7) {
              this.type = s4.Syntax.BreakStatement, this.label = e7;
            }
            return e6;
          }();
          t4.BreakStatement = m4;
          var y4 = function() {
            function e6(e7, t5) {
              this.type = s4.Syntax.CallExpression, this.callee = e7, this.arguments = t5;
            }
            return e6;
          }();
          t4.CallExpression = y4;
          var g4 = function() {
            function e6(e7, t5) {
              this.type = s4.Syntax.CatchClause, this.param = e7, this.body = t5;
            }
            return e6;
          }();
          t4.CatchClause = g4;
          var x4 = function() {
            function e6(e7) {
              this.type = s4.Syntax.ClassBody, this.body = e7;
            }
            return e6;
          }();
          t4.ClassBody = x4;
          var b3 = function() {
            function e6(e7, t5, r5) {
              this.type = s4.Syntax.ClassDeclaration, this.id = e7, this.superClass = t5, this.body = r5;
            }
            return e6;
          }();
          t4.ClassDeclaration = b3;
          var E4 = function() {
            function e6(e7, t5, r5) {
              this.type = s4.Syntax.ClassExpression, this.id = e7, this.superClass = t5, this.body = r5;
            }
            return e6;
          }();
          t4.ClassExpression = E4;
          var v5 = function() {
            function e6(e7, t5) {
              this.type = s4.Syntax.MemberExpression, this.computed = true, this.object = e7, this.property = t5;
            }
            return e6;
          }();
          t4.ComputedMemberExpression = v5;
          var S4 = function() {
            function e6(e7, t5, r5) {
              this.type = s4.Syntax.ConditionalExpression, this.test = e7, this.consequent = t5, this.alternate = r5;
            }
            return e6;
          }();
          t4.ConditionalExpression = S4;
          var A3 = function() {
            function e6(e7) {
              this.type = s4.Syntax.ContinueStatement, this.label = e7;
            }
            return e6;
          }();
          t4.ContinueStatement = A3;
          var T3 = function() {
            function e6() {
              this.type = s4.Syntax.DebuggerStatement;
            }
            return e6;
          }();
          t4.DebuggerStatement = T3;
          var w4 = function() {
            function e6(e7, t5) {
              this.type = s4.Syntax.ExpressionStatement, this.expression = e7, this.directive = t5;
            }
            return e6;
          }();
          t4.Directive = w4;
          var C3 = function() {
            function e6(e7, t5) {
              this.type = s4.Syntax.DoWhileStatement, this.body = e7, this.test = t5;
            }
            return e6;
          }();
          t4.DoWhileStatement = C3;
          var P3 = function() {
            function e6() {
              this.type = s4.Syntax.EmptyStatement;
            }
            return e6;
          }();
          t4.EmptyStatement = P3;
          var D3 = function() {
            function e6(e7) {
              this.type = s4.Syntax.ExportAllDeclaration, this.source = e7;
            }
            return e6;
          }();
          t4.ExportAllDeclaration = D3;
          var k4 = function() {
            function e6(e7) {
              this.type = s4.Syntax.ExportDefaultDeclaration, this.declaration = e7;
            }
            return e6;
          }();
          t4.ExportDefaultDeclaration = k4;
          var N3 = function() {
            function e6(e7, t5, r5) {
              this.type = s4.Syntax.ExportNamedDeclaration, this.declaration = e7, this.specifiers = t5, this.source = r5;
            }
            return e6;
          }();
          t4.ExportNamedDeclaration = N3;
          var I3 = function() {
            function e6(e7, t5) {
              this.type = s4.Syntax.ExportSpecifier, this.exported = t5, this.local = e7;
            }
            return e6;
          }();
          t4.ExportSpecifier = I3;
          var F3 = function() {
            function e6(e7) {
              this.type = s4.Syntax.ExpressionStatement, this.expression = e7;
            }
            return e6;
          }();
          t4.ExpressionStatement = F3;
          var M4 = function() {
            function e6(e7, t5, r5) {
              this.type = s4.Syntax.ForInStatement, this.left = e7, this.right = t5, this.body = r5, this.each = false;
            }
            return e6;
          }();
          t4.ForInStatement = M4;
          var L3 = function() {
            function e6(e7, t5, r5) {
              this.type = s4.Syntax.ForOfStatement, this.left = e7, this.right = t5, this.body = r5;
            }
            return e6;
          }();
          t4.ForOfStatement = L3;
          var O4 = function() {
            function e6(e7, t5, r5, i5) {
              this.type = s4.Syntax.ForStatement, this.init = e7, this.test = t5, this.update = r5, this.body = i5;
            }
            return e6;
          }();
          t4.ForStatement = O4;
          var _4 = function() {
            function e6(e7, t5, r5, i5) {
              this.type = s4.Syntax.FunctionDeclaration, this.id = e7, this.params = t5, this.body = r5, this.generator = i5, this.expression = false, this.async = false;
            }
            return e6;
          }();
          t4.FunctionDeclaration = _4;
          var B4 = function() {
            function e6(e7, t5, r5, i5) {
              this.type = s4.Syntax.FunctionExpression, this.id = e7, this.params = t5, this.body = r5, this.generator = i5, this.expression = false, this.async = false;
            }
            return e6;
          }();
          t4.FunctionExpression = B4;
          var R3 = function() {
            function e6(e7) {
              this.type = s4.Syntax.Identifier, this.name = e7;
            }
            return e6;
          }();
          t4.Identifier = R3;
          var j4 = function() {
            function e6(e7, t5, r5) {
              this.type = s4.Syntax.IfStatement, this.test = e7, this.consequent = t5, this.alternate = r5;
            }
            return e6;
          }();
          t4.IfStatement = j4;
          var U3 = function() {
            function e6(e7, t5) {
              this.type = s4.Syntax.ImportDeclaration, this.specifiers = e7, this.source = t5;
            }
            return e6;
          }();
          t4.ImportDeclaration = U3;
          var q4 = function() {
            function e6(e7) {
              this.type = s4.Syntax.ImportDefaultSpecifier, this.local = e7;
            }
            return e6;
          }();
          t4.ImportDefaultSpecifier = q4;
          var z3 = function() {
            function e6(e7) {
              this.type = s4.Syntax.ImportNamespaceSpecifier, this.local = e7;
            }
            return e6;
          }();
          t4.ImportNamespaceSpecifier = z3;
          var V3 = function() {
            function e6(e7, t5) {
              this.type = s4.Syntax.ImportSpecifier, this.local = e7, this.imported = t5;
            }
            return e6;
          }();
          t4.ImportSpecifier = V3;
          var J3 = function() {
            function e6(e7, t5) {
              this.type = s4.Syntax.LabeledStatement, this.label = e7, this.body = t5;
            }
            return e6;
          }();
          t4.LabeledStatement = J3;
          var X3 = function() {
            function e6(e7, t5) {
              this.type = s4.Syntax.Literal, this.value = e7, this.raw = t5;
            }
            return e6;
          }();
          t4.Literal = X3;
          var G3 = function() {
            function e6(e7, t5) {
              this.type = s4.Syntax.MetaProperty, this.meta = e7, this.property = t5;
            }
            return e6;
          }();
          t4.MetaProperty = G3;
          var H3 = function() {
            function e6(e7, t5, r5, i5, n5) {
              this.type = s4.Syntax.MethodDefinition, this.key = e7, this.computed = t5, this.value = r5, this.kind = i5, this.static = n5;
            }
            return e6;
          }();
          t4.MethodDefinition = H3;
          var W3 = function() {
            function e6(e7) {
              this.type = s4.Syntax.Program, this.body = e7, this.sourceType = "module";
            }
            return e6;
          }();
          t4.Module = W3;
          var K3 = function() {
            function e6(e7, t5) {
              this.type = s4.Syntax.NewExpression, this.callee = e7, this.arguments = t5;
            }
            return e6;
          }();
          t4.NewExpression = K3;
          var $4 = function() {
            function e6(e7) {
              this.type = s4.Syntax.ObjectExpression, this.properties = e7;
            }
            return e6;
          }();
          t4.ObjectExpression = $4;
          var Y3 = function() {
            function e6(e7) {
              this.type = s4.Syntax.ObjectPattern, this.properties = e7;
            }
            return e6;
          }();
          t4.ObjectPattern = Y3;
          var Q3 = function() {
            function e6(e7, t5, r5, i5, n5, a5) {
              this.type = s4.Syntax.Property, this.key = t5, this.computed = r5, this.value = i5, this.kind = e7, this.method = n5, this.shorthand = a5;
            }
            return e6;
          }();
          t4.Property = Q3;
          var Z3 = function() {
            function e6(e7, t5, r5, i5) {
              this.type = s4.Syntax.Literal, this.value = e7, this.raw = t5, this.regex = {pattern: r5, flags: i5};
            }
            return e6;
          }();
          t4.RegexLiteral = Z3;
          var ee3 = function() {
            function e6(e7) {
              this.type = s4.Syntax.RestElement, this.argument = e7;
            }
            return e6;
          }();
          t4.RestElement = ee3;
          var te3 = function() {
            function e6(e7) {
              this.type = s4.Syntax.ReturnStatement, this.argument = e7;
            }
            return e6;
          }();
          t4.ReturnStatement = te3;
          var re3 = function() {
            function e6(e7) {
              this.type = s4.Syntax.Program, this.body = e7, this.sourceType = "script";
            }
            return e6;
          }();
          t4.Script = re3;
          var se3 = function() {
            function e6(e7) {
              this.type = s4.Syntax.SequenceExpression, this.expressions = e7;
            }
            return e6;
          }();
          t4.SequenceExpression = se3;
          var ie3 = function() {
            function e6(e7) {
              this.type = s4.Syntax.SpreadElement, this.argument = e7;
            }
            return e6;
          }();
          t4.SpreadElement = ie3;
          var ne3 = function() {
            function e6(e7, t5) {
              this.type = s4.Syntax.MemberExpression, this.computed = false, this.object = e7, this.property = t5;
            }
            return e6;
          }();
          t4.StaticMemberExpression = ne3;
          var ae3 = function() {
            function e6() {
              this.type = s4.Syntax.Super;
            }
            return e6;
          }();
          t4.Super = ae3;
          var oe3 = function() {
            function e6(e7, t5) {
              this.type = s4.Syntax.SwitchCase, this.test = e7, this.consequent = t5;
            }
            return e6;
          }();
          t4.SwitchCase = oe3;
          var le3 = function() {
            function e6(e7, t5) {
              this.type = s4.Syntax.SwitchStatement, this.discriminant = e7, this.cases = t5;
            }
            return e6;
          }();
          t4.SwitchStatement = le3;
          var ce3 = function() {
            function e6(e7, t5) {
              this.type = s4.Syntax.TaggedTemplateExpression, this.tag = e7, this.quasi = t5;
            }
            return e6;
          }();
          t4.TaggedTemplateExpression = ce3;
          var ue3 = function() {
            function e6(e7, t5) {
              this.type = s4.Syntax.TemplateElement, this.value = e7, this.tail = t5;
            }
            return e6;
          }();
          t4.TemplateElement = ue3;
          var he3 = function() {
            function e6(e7, t5) {
              this.type = s4.Syntax.TemplateLiteral, this.quasis = e7, this.expressions = t5;
            }
            return e6;
          }();
          t4.TemplateLiteral = he3;
          var pe3 = function() {
            function e6() {
              this.type = s4.Syntax.ThisExpression;
            }
            return e6;
          }();
          t4.ThisExpression = pe3;
          var de3 = function() {
            function e6(e7) {
              this.type = s4.Syntax.ThrowStatement, this.argument = e7;
            }
            return e6;
          }();
          t4.ThrowStatement = de3;
          var fe3 = function() {
            function e6(e7, t5, r5) {
              this.type = s4.Syntax.TryStatement, this.block = e7, this.handler = t5, this.finalizer = r5;
            }
            return e6;
          }();
          t4.TryStatement = fe3;
          var me3 = function() {
            function e6(e7, t5) {
              this.type = s4.Syntax.UnaryExpression, this.operator = e7, this.argument = t5, this.prefix = true;
            }
            return e6;
          }();
          t4.UnaryExpression = me3;
          var ye3 = function() {
            function e6(e7, t5, r5) {
              this.type = s4.Syntax.UpdateExpression, this.operator = e7, this.argument = t5, this.prefix = r5;
            }
            return e6;
          }();
          t4.UpdateExpression = ye3;
          var ge3 = function() {
            function e6(e7, t5) {
              this.type = s4.Syntax.VariableDeclaration, this.declarations = e7, this.kind = t5;
            }
            return e6;
          }();
          t4.VariableDeclaration = ge3;
          var xe3 = function() {
            function e6(e7, t5) {
              this.type = s4.Syntax.VariableDeclarator, this.id = e7, this.init = t5;
            }
            return e6;
          }();
          t4.VariableDeclarator = xe3;
          var be3 = function() {
            function e6(e7, t5) {
              this.type = s4.Syntax.WhileStatement, this.test = e7, this.body = t5;
            }
            return e6;
          }();
          t4.WhileStatement = be3;
          var Ee3 = function() {
            function e6(e7, t5) {
              this.type = s4.Syntax.WithStatement, this.object = e7, this.body = t5;
            }
            return e6;
          }();
          t4.WithStatement = Ee3;
          var ve3 = function() {
            function e6(e7, t5) {
              this.type = s4.Syntax.YieldExpression, this.argument = e7, this.delegate = t5;
            }
            return e6;
          }();
          t4.YieldExpression = ve3;
        }, function(e5, t4, r4) {
          Object.defineProperty(t4, "__esModule", {value: true});
          var s4 = r4(9), i4 = r4(10), n4 = r4(11), a4 = r4(7), o4 = r4(12), l3 = r4(2), c4 = r4(13), u3 = "ArrowParameterPlaceHolder", h4 = function() {
            function e6(e7, t5, r5) {
              t5 === void 0 && (t5 = {}), this.config = {range: typeof t5.range == "boolean" && t5.range, loc: typeof t5.loc == "boolean" && t5.loc, source: null, tokens: typeof t5.tokens == "boolean" && t5.tokens, comment: typeof t5.comment == "boolean" && t5.comment, tolerant: typeof t5.tolerant == "boolean" && t5.tolerant}, this.config.loc && t5.source && t5.source !== null && (this.config.source = String(t5.source)), this.delegate = r5, this.errorHandler = new i4.ErrorHandler(), this.errorHandler.tolerant = this.config.tolerant, this.scanner = new o4.Scanner(e7, this.errorHandler), this.scanner.trackComment = this.config.comment, this.operatorPrecedence = {")": 0, ";": 0, ",": 0, "=": 0, "]": 0, "||": 1, "&&": 2, "|": 3, "^": 4, "&": 5, "==": 6, "!=": 6, "===": 6, "!==": 6, "<": 7, ">": 7, "<=": 7, ">=": 7, "<<": 8, ">>": 8, ">>>": 8, "+": 9, "-": 9, "*": 11, "/": 11, "%": 11}, this.lookahead = {type: 2, value: "", lineNumber: this.scanner.lineNumber, lineStart: 0, start: 0, end: 0}, this.hasLineTerminator = false, this.context = {isModule: false, await: false, allowIn: true, allowStrictDirective: true, allowYield: true, firstCoverInitializedNameError: null, isAssignmentTarget: false, isBindingElement: false, inFunctionBody: false, inIteration: false, inSwitch: false, labelSet: {}, strict: false}, this.tokens = [], this.startMarker = {index: 0, line: this.scanner.lineNumber, column: 0}, this.lastMarker = {index: 0, line: this.scanner.lineNumber, column: 0}, this.nextToken(), this.lastMarker = {index: this.scanner.index, line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart};
            }
            return e6.prototype.throwError = function(e7) {
              for (var t5 = [], r5 = 1; r5 < arguments.length; r5++)
                t5[r5 - 1] = arguments[r5];
              var i5 = Array.prototype.slice.call(arguments, 1), n5 = e7.replace(/%(\d)/g, function(e8, t6) {
                return s4.assert(t6 < i5.length, "Message reference must be in range"), i5[t6];
              }), a5 = this.lastMarker.index, o5 = this.lastMarker.line, l4 = this.lastMarker.column + 1;
              throw this.errorHandler.createError(a5, o5, l4, n5);
            }, e6.prototype.tolerateError = function(e7) {
              for (var t5 = [], r5 = 1; r5 < arguments.length; r5++)
                t5[r5 - 1] = arguments[r5];
              var i5 = Array.prototype.slice.call(arguments, 1), n5 = e7.replace(/%(\d)/g, function(e8, t6) {
                return s4.assert(t6 < i5.length, "Message reference must be in range"), i5[t6];
              }), a5 = this.lastMarker.index, o5 = this.scanner.lineNumber, l4 = this.lastMarker.column + 1;
              this.errorHandler.tolerateError(a5, o5, l4, n5);
            }, e6.prototype.unexpectedTokenError = function(e7, t5) {
              var r5, s5 = t5 || n4.Messages.UnexpectedToken;
              if (e7 ? (t5 || (s5 = e7.type === 2 ? n4.Messages.UnexpectedEOS : e7.type === 3 ? n4.Messages.UnexpectedIdentifier : e7.type === 6 ? n4.Messages.UnexpectedNumber : e7.type === 8 ? n4.Messages.UnexpectedString : e7.type === 10 ? n4.Messages.UnexpectedTemplate : n4.Messages.UnexpectedToken, e7.type === 4 && (this.scanner.isFutureReservedWord(e7.value) ? s5 = n4.Messages.UnexpectedReserved : this.context.strict && this.scanner.isStrictModeReservedWord(e7.value) && (s5 = n4.Messages.StrictReservedWord))), r5 = e7.value) : r5 = "ILLEGAL", s5 = s5.replace("%0", r5), e7 && typeof e7.lineNumber == "number") {
                var i5 = e7.start, a5 = e7.lineNumber, o5 = this.lastMarker.index - this.lastMarker.column, l4 = e7.start - o5 + 1;
                return this.errorHandler.createError(i5, a5, l4, s5);
              }
              return i5 = this.lastMarker.index, a5 = this.lastMarker.line, l4 = this.lastMarker.column + 1, this.errorHandler.createError(i5, a5, l4, s5);
            }, e6.prototype.throwUnexpectedToken = function(e7, t5) {
              throw this.unexpectedTokenError(e7, t5);
            }, e6.prototype.tolerateUnexpectedToken = function(e7, t5) {
              this.errorHandler.tolerate(this.unexpectedTokenError(e7, t5));
            }, e6.prototype.collectComments = function() {
              if (this.config.comment) {
                var e7 = this.scanner.scanComments();
                if (e7.length > 0 && this.delegate)
                  for (var t5 = 0; t5 < e7.length; ++t5) {
                    var r5 = e7[t5], s5 = void 0;
                    s5 = {type: r5.multiLine ? "BlockComment" : "LineComment", value: this.scanner.source.slice(r5.slice[0], r5.slice[1])}, this.config.range && (s5.range = r5.range), this.config.loc && (s5.loc = r5.loc);
                    var i5 = {start: {line: r5.loc.start.line, column: r5.loc.start.column, offset: r5.range[0]}, end: {line: r5.loc.end.line, column: r5.loc.end.column, offset: r5.range[1]}};
                    this.delegate(s5, i5);
                  }
              } else
                this.scanner.scanComments();
            }, e6.prototype.getTokenRaw = function(e7) {
              return this.scanner.source.slice(e7.start, e7.end);
            }, e6.prototype.convertToken = function(e7) {
              var t5 = {type: c4.TokenName[e7.type], value: this.getTokenRaw(e7)};
              if (this.config.range && (t5.range = [e7.start, e7.end]), this.config.loc && (t5.loc = {start: {line: this.startMarker.line, column: this.startMarker.column}, end: {line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart}}), e7.type === 9) {
                var r5 = e7.pattern, s5 = e7.flags;
                t5.regex = {pattern: r5, flags: s5};
              }
              return t5;
            }, e6.prototype.nextToken = function() {
              var e7 = this.lookahead;
              this.lastMarker.index = this.scanner.index, this.lastMarker.line = this.scanner.lineNumber, this.lastMarker.column = this.scanner.index - this.scanner.lineStart, this.collectComments(), this.scanner.index !== this.startMarker.index && (this.startMarker.index = this.scanner.index, this.startMarker.line = this.scanner.lineNumber, this.startMarker.column = this.scanner.index - this.scanner.lineStart);
              var t5 = this.scanner.lex();
              return this.hasLineTerminator = e7.lineNumber !== t5.lineNumber, t5 && this.context.strict && t5.type === 3 && this.scanner.isStrictModeReservedWord(t5.value) && (t5.type = 4), this.lookahead = t5, this.config.tokens && t5.type !== 2 && this.tokens.push(this.convertToken(t5)), e7;
            }, e6.prototype.nextRegexToken = function() {
              this.collectComments();
              var e7 = this.scanner.scanRegExp();
              return this.config.tokens && (this.tokens.pop(), this.tokens.push(this.convertToken(e7))), this.lookahead = e7, this.nextToken(), e7;
            }, e6.prototype.createNode = function() {
              return {index: this.startMarker.index, line: this.startMarker.line, column: this.startMarker.column};
            }, e6.prototype.startNode = function(e7, t5) {
              t5 === void 0 && (t5 = 0);
              var r5 = e7.start - e7.lineStart, s5 = e7.lineNumber;
              return r5 < 0 && (r5 += t5, s5--), {index: e7.start, line: s5, column: r5};
            }, e6.prototype.finalize = function(e7, t5) {
              if (this.config.range && (t5.range = [e7.index, this.lastMarker.index]), this.config.loc && (t5.loc = {start: {line: e7.line, column: e7.column}, end: {line: this.lastMarker.line, column: this.lastMarker.column}}, this.config.source && (t5.loc.source = this.config.source)), this.delegate) {
                var r5 = {start: {line: e7.line, column: e7.column, offset: e7.index}, end: {line: this.lastMarker.line, column: this.lastMarker.column, offset: this.lastMarker.index}};
                this.delegate(t5, r5);
              }
              return t5;
            }, e6.prototype.expect = function(e7) {
              var t5 = this.nextToken();
              t5.type === 7 && t5.value === e7 || this.throwUnexpectedToken(t5);
            }, e6.prototype.expectCommaSeparator = function() {
              if (this.config.tolerant) {
                var e7 = this.lookahead;
                e7.type === 7 && e7.value === "," ? this.nextToken() : e7.type === 7 && e7.value === ";" ? (this.nextToken(), this.tolerateUnexpectedToken(e7)) : this.tolerateUnexpectedToken(e7, n4.Messages.UnexpectedToken);
              } else
                this.expect(",");
            }, e6.prototype.expectKeyword = function(e7) {
              var t5 = this.nextToken();
              t5.type === 4 && t5.value === e7 || this.throwUnexpectedToken(t5);
            }, e6.prototype.match = function(e7) {
              return this.lookahead.type === 7 && this.lookahead.value === e7;
            }, e6.prototype.matchKeyword = function(e7) {
              return this.lookahead.type === 4 && this.lookahead.value === e7;
            }, e6.prototype.matchContextualKeyword = function(e7) {
              return this.lookahead.type === 3 && this.lookahead.value === e7;
            }, e6.prototype.matchAssign = function() {
              if (this.lookahead.type !== 7)
                return false;
              var e7 = this.lookahead.value;
              return e7 === "=" || e7 === "*=" || e7 === "**=" || e7 === "/=" || e7 === "%=" || e7 === "+=" || e7 === "-=" || e7 === "<<=" || e7 === ">>=" || e7 === ">>>=" || e7 === "&=" || e7 === "^=" || e7 === "|=";
            }, e6.prototype.isolateCoverGrammar = function(e7) {
              var t5 = this.context.isBindingElement, r5 = this.context.isAssignmentTarget, s5 = this.context.firstCoverInitializedNameError;
              this.context.isBindingElement = true, this.context.isAssignmentTarget = true, this.context.firstCoverInitializedNameError = null;
              var i5 = e7.call(this);
              return this.context.firstCoverInitializedNameError !== null && this.throwUnexpectedToken(this.context.firstCoverInitializedNameError), this.context.isBindingElement = t5, this.context.isAssignmentTarget = r5, this.context.firstCoverInitializedNameError = s5, i5;
            }, e6.prototype.inheritCoverGrammar = function(e7) {
              var t5 = this.context.isBindingElement, r5 = this.context.isAssignmentTarget, s5 = this.context.firstCoverInitializedNameError;
              this.context.isBindingElement = true, this.context.isAssignmentTarget = true, this.context.firstCoverInitializedNameError = null;
              var i5 = e7.call(this);
              return this.context.isBindingElement = this.context.isBindingElement && t5, this.context.isAssignmentTarget = this.context.isAssignmentTarget && r5, this.context.firstCoverInitializedNameError = s5 || this.context.firstCoverInitializedNameError, i5;
            }, e6.prototype.consumeSemicolon = function() {
              this.match(";") ? this.nextToken() : this.hasLineTerminator || (this.lookahead.type === 2 || this.match("}") || this.throwUnexpectedToken(this.lookahead), this.lastMarker.index = this.startMarker.index, this.lastMarker.line = this.startMarker.line, this.lastMarker.column = this.startMarker.column);
            }, e6.prototype.parsePrimaryExpression = function() {
              var e7, t5, r5, s5 = this.createNode();
              switch (this.lookahead.type) {
                case 3:
                  (this.context.isModule || this.context.await) && this.lookahead.value === "await" && this.tolerateUnexpectedToken(this.lookahead), e7 = this.matchAsyncFunction() ? this.parseFunctionExpression() : this.finalize(s5, new a4.Identifier(this.nextToken().value));
                  break;
                case 6:
                case 8:
                  this.context.strict && this.lookahead.octal && this.tolerateUnexpectedToken(this.lookahead, n4.Messages.StrictOctalLiteral), this.context.isAssignmentTarget = false, this.context.isBindingElement = false, t5 = this.nextToken(), r5 = this.getTokenRaw(t5), e7 = this.finalize(s5, new a4.Literal(t5.value, r5));
                  break;
                case 1:
                  this.context.isAssignmentTarget = false, this.context.isBindingElement = false, t5 = this.nextToken(), r5 = this.getTokenRaw(t5), e7 = this.finalize(s5, new a4.Literal(t5.value === "true", r5));
                  break;
                case 5:
                  this.context.isAssignmentTarget = false, this.context.isBindingElement = false, t5 = this.nextToken(), r5 = this.getTokenRaw(t5), e7 = this.finalize(s5, new a4.Literal(null, r5));
                  break;
                case 10:
                  e7 = this.parseTemplateLiteral();
                  break;
                case 7:
                  switch (this.lookahead.value) {
                    case "(":
                      this.context.isBindingElement = false, e7 = this.inheritCoverGrammar(this.parseGroupExpression);
                      break;
                    case "[":
                      e7 = this.inheritCoverGrammar(this.parseArrayInitializer);
                      break;
                    case "{":
                      e7 = this.inheritCoverGrammar(this.parseObjectInitializer);
                      break;
                    case "/":
                    case "/=":
                      this.context.isAssignmentTarget = false, this.context.isBindingElement = false, this.scanner.index = this.startMarker.index, t5 = this.nextRegexToken(), r5 = this.getTokenRaw(t5), e7 = this.finalize(s5, new a4.RegexLiteral(t5.regex, r5, t5.pattern, t5.flags));
                      break;
                    default:
                      e7 = this.throwUnexpectedToken(this.nextToken());
                  }
                  break;
                case 4:
                  !this.context.strict && this.context.allowYield && this.matchKeyword("yield") ? e7 = this.parseIdentifierName() : !this.context.strict && this.matchKeyword("let") ? e7 = this.finalize(s5, new a4.Identifier(this.nextToken().value)) : (this.context.isAssignmentTarget = false, this.context.isBindingElement = false, this.matchKeyword("function") ? e7 = this.parseFunctionExpression() : this.matchKeyword("this") ? (this.nextToken(), e7 = this.finalize(s5, new a4.ThisExpression())) : e7 = this.matchKeyword("class") ? this.parseClassExpression() : this.throwUnexpectedToken(this.nextToken()));
                  break;
                default:
                  e7 = this.throwUnexpectedToken(this.nextToken());
              }
              return e7;
            }, e6.prototype.parseSpreadElement = function() {
              var e7 = this.createNode();
              this.expect("...");
              var t5 = this.inheritCoverGrammar(this.parseAssignmentExpression);
              return this.finalize(e7, new a4.SpreadElement(t5));
            }, e6.prototype.parseArrayInitializer = function() {
              var e7 = this.createNode(), t5 = [];
              for (this.expect("["); !this.match("]"); )
                if (this.match(","))
                  this.nextToken(), t5.push(null);
                else if (this.match("...")) {
                  var r5 = this.parseSpreadElement();
                  this.match("]") || (this.context.isAssignmentTarget = false, this.context.isBindingElement = false, this.expect(",")), t5.push(r5);
                } else
                  t5.push(this.inheritCoverGrammar(this.parseAssignmentExpression)), this.match("]") || this.expect(",");
              return this.expect("]"), this.finalize(e7, new a4.ArrayExpression(t5));
            }, e6.prototype.parsePropertyMethod = function(e7) {
              this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
              var t5 = this.context.strict, r5 = this.context.allowStrictDirective;
              this.context.allowStrictDirective = e7.simple;
              var s5 = this.isolateCoverGrammar(this.parseFunctionSourceElements);
              return this.context.strict && e7.firstRestricted && this.tolerateUnexpectedToken(e7.firstRestricted, e7.message), this.context.strict && e7.stricted && this.tolerateUnexpectedToken(e7.stricted, e7.message), this.context.strict = t5, this.context.allowStrictDirective = r5, s5;
            }, e6.prototype.parsePropertyMethodFunction = function() {
              var e7 = false, t5 = this.createNode(), r5 = this.context.allowYield;
              this.context.allowYield = true;
              var s5 = this.parseFormalParameters(), i5 = this.parsePropertyMethod(s5);
              return this.context.allowYield = r5, this.finalize(t5, new a4.FunctionExpression(null, s5.params, i5, e7));
            }, e6.prototype.parsePropertyMethodAsyncFunction = function() {
              var e7 = this.createNode(), t5 = this.context.allowYield, r5 = this.context.await;
              this.context.allowYield = false, this.context.await = true;
              var s5 = this.parseFormalParameters(), i5 = this.parsePropertyMethod(s5);
              return this.context.allowYield = t5, this.context.await = r5, this.finalize(e7, new a4.AsyncFunctionExpression(null, s5.params, i5));
            }, e6.prototype.parseObjectPropertyKey = function() {
              var e7, t5 = this.createNode(), r5 = this.nextToken();
              switch (r5.type) {
                case 8:
                case 6:
                  this.context.strict && r5.octal && this.tolerateUnexpectedToken(r5, n4.Messages.StrictOctalLiteral);
                  var s5 = this.getTokenRaw(r5);
                  e7 = this.finalize(t5, new a4.Literal(r5.value, s5));
                  break;
                case 3:
                case 1:
                case 5:
                case 4:
                  e7 = this.finalize(t5, new a4.Identifier(r5.value));
                  break;
                case 7:
                  r5.value === "[" ? (e7 = this.isolateCoverGrammar(this.parseAssignmentExpression), this.expect("]")) : e7 = this.throwUnexpectedToken(r5);
                  break;
                default:
                  e7 = this.throwUnexpectedToken(r5);
              }
              return e7;
            }, e6.prototype.isPropertyKey = function(e7, t5) {
              return e7.type === l3.Syntax.Identifier && e7.name === t5 || e7.type === l3.Syntax.Literal && e7.value === t5;
            }, e6.prototype.parseObjectProperty = function(e7) {
              var t5, r5 = this.createNode(), s5 = this.lookahead, i5 = null, o5 = null, l4 = false, c5 = false, u4 = false, h5 = false;
              if (s5.type === 3) {
                var p4 = s5.value;
                this.nextToken(), l4 = this.match("["), i5 = (h5 = !(this.hasLineTerminator || p4 !== "async" || this.match(":") || this.match("(") || this.match("*") || this.match(","))) ? this.parseObjectPropertyKey() : this.finalize(r5, new a4.Identifier(p4));
              } else
                this.match("*") ? this.nextToken() : (l4 = this.match("["), i5 = this.parseObjectPropertyKey());
              var d4 = this.qualifiedPropertyName(this.lookahead);
              if (s5.type === 3 && !h5 && s5.value === "get" && d4)
                t5 = "get", l4 = this.match("["), i5 = this.parseObjectPropertyKey(), this.context.allowYield = false, o5 = this.parseGetterMethod();
              else if (s5.type === 3 && !h5 && s5.value === "set" && d4)
                t5 = "set", l4 = this.match("["), i5 = this.parseObjectPropertyKey(), o5 = this.parseSetterMethod();
              else if (s5.type === 7 && s5.value === "*" && d4)
                t5 = "init", l4 = this.match("["), i5 = this.parseObjectPropertyKey(), o5 = this.parseGeneratorMethod(), c5 = true;
              else if (i5 || this.throwUnexpectedToken(this.lookahead), t5 = "init", this.match(":") && !h5)
                !l4 && this.isPropertyKey(i5, "__proto__") && (e7.value && this.tolerateError(n4.Messages.DuplicateProtoProperty), e7.value = true), this.nextToken(), o5 = this.inheritCoverGrammar(this.parseAssignmentExpression);
              else if (this.match("("))
                o5 = h5 ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction(), c5 = true;
              else if (s5.type === 3)
                if (p4 = this.finalize(r5, new a4.Identifier(s5.value)), this.match("=")) {
                  this.context.firstCoverInitializedNameError = this.lookahead, this.nextToken(), u4 = true;
                  var f4 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                  o5 = this.finalize(r5, new a4.AssignmentPattern(p4, f4));
                } else
                  u4 = true, o5 = p4;
              else
                this.throwUnexpectedToken(this.nextToken());
              return this.finalize(r5, new a4.Property(t5, i5, l4, o5, c5, u4));
            }, e6.prototype.parseObjectInitializer = function() {
              var e7 = this.createNode();
              this.expect("{");
              for (var t5 = [], r5 = {value: false}; !this.match("}"); )
                t5.push(this.parseObjectProperty(r5)), this.match("}") || this.expectCommaSeparator();
              return this.expect("}"), this.finalize(e7, new a4.ObjectExpression(t5));
            }, e6.prototype.parseTemplateHead = function() {
              s4.assert(this.lookahead.head, "Template literal must start with a template head");
              var e7 = this.createNode(), t5 = this.nextToken(), r5 = t5.value, i5 = t5.cooked;
              return this.finalize(e7, new a4.TemplateElement({raw: r5, cooked: i5}, t5.tail));
            }, e6.prototype.parseTemplateElement = function() {
              this.lookahead.type !== 10 && this.throwUnexpectedToken();
              var e7 = this.createNode(), t5 = this.nextToken(), r5 = t5.value, s5 = t5.cooked;
              return this.finalize(e7, new a4.TemplateElement({raw: r5, cooked: s5}, t5.tail));
            }, e6.prototype.parseTemplateLiteral = function() {
              var e7 = this.createNode(), t5 = [], r5 = [], s5 = this.parseTemplateHead();
              for (r5.push(s5); !s5.tail; )
                t5.push(this.parseExpression()), s5 = this.parseTemplateElement(), r5.push(s5);
              return this.finalize(e7, new a4.TemplateLiteral(r5, t5));
            }, e6.prototype.reinterpretExpressionAsPattern = function(e7) {
              switch (e7.type) {
                case l3.Syntax.Identifier:
                case l3.Syntax.MemberExpression:
                case l3.Syntax.RestElement:
                case l3.Syntax.AssignmentPattern:
                  break;
                case l3.Syntax.SpreadElement:
                  e7.type = l3.Syntax.RestElement, this.reinterpretExpressionAsPattern(e7.argument);
                  break;
                case l3.Syntax.ArrayExpression:
                  e7.type = l3.Syntax.ArrayPattern;
                  for (var t5 = 0; t5 < e7.elements.length; t5++)
                    e7.elements[t5] !== null && this.reinterpretExpressionAsPattern(e7.elements[t5]);
                  break;
                case l3.Syntax.ObjectExpression:
                  for (e7.type = l3.Syntax.ObjectPattern, t5 = 0; t5 < e7.properties.length; t5++)
                    this.reinterpretExpressionAsPattern(e7.properties[t5].value);
                  break;
                case l3.Syntax.AssignmentExpression:
                  e7.type = l3.Syntax.AssignmentPattern, delete e7.operator, this.reinterpretExpressionAsPattern(e7.left);
              }
            }, e6.prototype.parseGroupExpression = function() {
              var e7;
              if (this.expect("("), this.match(")"))
                this.nextToken(), this.match("=>") || this.expect("=>"), e7 = {type: u3, params: [], async: false};
              else {
                var t5 = this.lookahead, r5 = [];
                if (this.match("..."))
                  e7 = this.parseRestElement(r5), this.expect(")"), this.match("=>") || this.expect("=>"), e7 = {type: u3, params: [e7], async: false};
                else {
                  var s5 = false;
                  if (this.context.isBindingElement = true, e7 = this.inheritCoverGrammar(this.parseAssignmentExpression), this.match(",")) {
                    var i5 = [];
                    for (this.context.isAssignmentTarget = false, i5.push(e7); this.lookahead.type !== 2 && this.match(","); ) {
                      if (this.nextToken(), this.match(")")) {
                        this.nextToken();
                        for (var n5 = 0; n5 < i5.length; n5++)
                          this.reinterpretExpressionAsPattern(i5[n5]);
                        s5 = true, e7 = {type: u3, params: i5, async: false};
                      } else if (this.match("...")) {
                        for (this.context.isBindingElement || this.throwUnexpectedToken(this.lookahead), i5.push(this.parseRestElement(r5)), this.expect(")"), this.match("=>") || this.expect("=>"), this.context.isBindingElement = false, n5 = 0; n5 < i5.length; n5++)
                          this.reinterpretExpressionAsPattern(i5[n5]);
                        s5 = true, e7 = {type: u3, params: i5, async: false};
                      } else
                        i5.push(this.inheritCoverGrammar(this.parseAssignmentExpression));
                      if (s5)
                        break;
                    }
                    s5 || (e7 = this.finalize(this.startNode(t5), new a4.SequenceExpression(i5)));
                  }
                  if (!s5) {
                    if (this.expect(")"), this.match("=>") && (e7.type === l3.Syntax.Identifier && e7.name === "yield" && (s5 = true, e7 = {type: u3, params: [e7], async: false}), !s5)) {
                      if (this.context.isBindingElement || this.throwUnexpectedToken(this.lookahead), e7.type === l3.Syntax.SequenceExpression)
                        for (n5 = 0; n5 < e7.expressions.length; n5++)
                          this.reinterpretExpressionAsPattern(e7.expressions[n5]);
                      else
                        this.reinterpretExpressionAsPattern(e7);
                      var o5 = e7.type === l3.Syntax.SequenceExpression ? e7.expressions : [e7];
                      e7 = {type: u3, params: o5, async: false};
                    }
                    this.context.isBindingElement = false;
                  }
                }
              }
              return e7;
            }, e6.prototype.parseArguments = function() {
              this.expect("(");
              var e7 = [];
              if (!this.match(")"))
                for (; ; ) {
                  var t5 = this.match("...") ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAssignmentExpression);
                  if (e7.push(t5), this.match(")"))
                    break;
                  if (this.expectCommaSeparator(), this.match(")"))
                    break;
                }
              return this.expect(")"), e7;
            }, e6.prototype.isIdentifierName = function(e7) {
              return e7.type === 3 || e7.type === 4 || e7.type === 1 || e7.type === 5;
            }, e6.prototype.parseIdentifierName = function() {
              var e7 = this.createNode(), t5 = this.nextToken();
              return this.isIdentifierName(t5) || this.throwUnexpectedToken(t5), this.finalize(e7, new a4.Identifier(t5.value));
            }, e6.prototype.parseNewExpression = function() {
              var e7, t5 = this.createNode(), r5 = this.parseIdentifierName();
              if (s4.assert(r5.name === "new", "New expression must start with `new`"), this.match("."))
                if (this.nextToken(), this.lookahead.type === 3 && this.context.inFunctionBody && this.lookahead.value === "target") {
                  var i5 = this.parseIdentifierName();
                  e7 = new a4.MetaProperty(r5, i5);
                } else
                  this.throwUnexpectedToken(this.lookahead);
              else {
                var n5 = this.isolateCoverGrammar(this.parseLeftHandSideExpression), o5 = this.match("(") ? this.parseArguments() : [];
                e7 = new a4.NewExpression(n5, o5), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
              }
              return this.finalize(t5, e7);
            }, e6.prototype.parseAsyncArgument = function() {
              var e7 = this.parseAssignmentExpression();
              return this.context.firstCoverInitializedNameError = null, e7;
            }, e6.prototype.parseAsyncArguments = function() {
              this.expect("(");
              var e7 = [];
              if (!this.match(")"))
                for (; ; ) {
                  var t5 = this.match("...") ? this.parseSpreadElement() : this.isolateCoverGrammar(this.parseAsyncArgument);
                  if (e7.push(t5), this.match(")"))
                    break;
                  if (this.expectCommaSeparator(), this.match(")"))
                    break;
                }
              return this.expect(")"), e7;
            }, e6.prototype.parseLeftHandSideExpressionAllowCall = function() {
              var e7, t5 = this.lookahead, r5 = this.matchContextualKeyword("async"), s5 = this.context.allowIn;
              for (this.context.allowIn = true, this.matchKeyword("super") && this.context.inFunctionBody ? (e7 = this.createNode(), this.nextToken(), e7 = this.finalize(e7, new a4.Super()), this.match("(") || this.match(".") || this.match("[") || this.throwUnexpectedToken(this.lookahead)) : e7 = this.inheritCoverGrammar(this.matchKeyword("new") ? this.parseNewExpression : this.parsePrimaryExpression); ; )
                if (this.match(".")) {
                  this.context.isBindingElement = false, this.context.isAssignmentTarget = true, this.expect(".");
                  var i5 = this.parseIdentifierName();
                  e7 = this.finalize(this.startNode(t5), new a4.StaticMemberExpression(e7, i5));
                } else if (this.match("(")) {
                  var n5 = r5 && t5.lineNumber === this.lookahead.lineNumber;
                  this.context.isBindingElement = false, this.context.isAssignmentTarget = false;
                  var o5 = n5 ? this.parseAsyncArguments() : this.parseArguments();
                  if (e7 = this.finalize(this.startNode(t5), new a4.CallExpression(e7, o5)), n5 && this.match("=>")) {
                    for (var l4 = 0; l4 < o5.length; ++l4)
                      this.reinterpretExpressionAsPattern(o5[l4]);
                    e7 = {type: u3, params: o5, async: true};
                  }
                } else if (this.match("["))
                  this.context.isBindingElement = false, this.context.isAssignmentTarget = true, this.expect("["), i5 = this.isolateCoverGrammar(this.parseExpression), this.expect("]"), e7 = this.finalize(this.startNode(t5), new a4.ComputedMemberExpression(e7, i5));
                else {
                  if (this.lookahead.type !== 10 || !this.lookahead.head)
                    break;
                  var c5 = this.parseTemplateLiteral();
                  e7 = this.finalize(this.startNode(t5), new a4.TaggedTemplateExpression(e7, c5));
                }
              return this.context.allowIn = s5, e7;
            }, e6.prototype.parseSuper = function() {
              var e7 = this.createNode();
              return this.expectKeyword("super"), this.match("[") || this.match(".") || this.throwUnexpectedToken(this.lookahead), this.finalize(e7, new a4.Super());
            }, e6.prototype.parseLeftHandSideExpression = function() {
              s4.assert(this.context.allowIn, "callee of new expression always allow in keyword.");
              for (var e7 = this.startNode(this.lookahead), t5 = this.matchKeyword("super") && this.context.inFunctionBody ? this.parseSuper() : this.inheritCoverGrammar(this.matchKeyword("new") ? this.parseNewExpression : this.parsePrimaryExpression); ; )
                if (this.match("[")) {
                  this.context.isBindingElement = false, this.context.isAssignmentTarget = true, this.expect("[");
                  var r5 = this.isolateCoverGrammar(this.parseExpression);
                  this.expect("]"), t5 = this.finalize(e7, new a4.ComputedMemberExpression(t5, r5));
                } else if (this.match("."))
                  this.context.isBindingElement = false, this.context.isAssignmentTarget = true, this.expect("."), r5 = this.parseIdentifierName(), t5 = this.finalize(e7, new a4.StaticMemberExpression(t5, r5));
                else {
                  if (this.lookahead.type !== 10 || !this.lookahead.head)
                    break;
                  var i5 = this.parseTemplateLiteral();
                  t5 = this.finalize(e7, new a4.TaggedTemplateExpression(t5, i5));
                }
              return t5;
            }, e6.prototype.parseUpdateExpression = function() {
              var e7, t5 = this.lookahead;
              if (this.match("++") || this.match("--")) {
                var r5 = this.startNode(t5), s5 = this.nextToken();
                e7 = this.inheritCoverGrammar(this.parseUnaryExpression), this.context.strict && e7.type === l3.Syntax.Identifier && this.scanner.isRestrictedWord(e7.name) && this.tolerateError(n4.Messages.StrictLHSPrefix), this.context.isAssignmentTarget || this.tolerateError(n4.Messages.InvalidLHSInAssignment);
                var i5 = true;
                e7 = this.finalize(r5, new a4.UpdateExpression(s5.value, e7, i5)), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
              } else if (e7 = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall), !this.hasLineTerminator && this.lookahead.type === 7 && (this.match("++") || this.match("--"))) {
                this.context.strict && e7.type === l3.Syntax.Identifier && this.scanner.isRestrictedWord(e7.name) && this.tolerateError(n4.Messages.StrictLHSPostfix), this.context.isAssignmentTarget || this.tolerateError(n4.Messages.InvalidLHSInAssignment), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                var o5 = this.nextToken().value;
                i5 = false, e7 = this.finalize(this.startNode(t5), new a4.UpdateExpression(o5, e7, i5));
              }
              return e7;
            }, e6.prototype.parseAwaitExpression = function() {
              var e7 = this.createNode();
              this.nextToken();
              var t5 = this.parseUnaryExpression();
              return this.finalize(e7, new a4.AwaitExpression(t5));
            }, e6.prototype.parseUnaryExpression = function() {
              var e7;
              if (this.match("+") || this.match("-") || this.match("~") || this.match("!") || this.matchKeyword("delete") || this.matchKeyword("void") || this.matchKeyword("typeof")) {
                var t5 = this.startNode(this.lookahead), r5 = this.nextToken();
                e7 = this.inheritCoverGrammar(this.parseUnaryExpression), e7 = this.finalize(t5, new a4.UnaryExpression(r5.value, e7)), this.context.strict && e7.operator === "delete" && e7.argument.type === l3.Syntax.Identifier && this.tolerateError(n4.Messages.StrictDelete), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
              } else
                e7 = this.context.await && this.matchContextualKeyword("await") ? this.parseAwaitExpression() : this.parseUpdateExpression();
              return e7;
            }, e6.prototype.parseExponentiationExpression = function() {
              var e7 = this.lookahead, t5 = this.inheritCoverGrammar(this.parseUnaryExpression);
              if (t5.type !== l3.Syntax.UnaryExpression && this.match("**")) {
                this.nextToken(), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                var r5 = t5, s5 = this.isolateCoverGrammar(this.parseExponentiationExpression);
                t5 = this.finalize(this.startNode(e7), new a4.BinaryExpression("**", r5, s5));
              }
              return t5;
            }, e6.prototype.binaryPrecedence = function(e7) {
              var t5 = e7.value;
              return e7.type === 7 ? this.operatorPrecedence[t5] || 0 : e7.type === 4 && (t5 === "instanceof" || this.context.allowIn && t5 === "in") ? 7 : 0;
            }, e6.prototype.parseBinaryExpression = function() {
              var e7 = this.lookahead, t5 = this.inheritCoverGrammar(this.parseExponentiationExpression), r5 = this.lookahead, s5 = this.binaryPrecedence(r5);
              if (s5 > 0) {
                this.nextToken(), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                for (var i5 = [e7, this.lookahead], n5 = t5, o5 = this.isolateCoverGrammar(this.parseExponentiationExpression), l4 = [n5, r5.value, o5], c5 = [s5]; !((s5 = this.binaryPrecedence(this.lookahead)) <= 0); ) {
                  for (; l4.length > 2 && s5 <= c5[c5.length - 1]; ) {
                    o5 = l4.pop();
                    var u4 = l4.pop();
                    c5.pop(), n5 = l4.pop(), i5.pop();
                    var h5 = this.startNode(i5[i5.length - 1]);
                    l4.push(this.finalize(h5, new a4.BinaryExpression(u4, n5, o5)));
                  }
                  l4.push(this.nextToken().value), c5.push(s5), i5.push(this.lookahead), l4.push(this.isolateCoverGrammar(this.parseExponentiationExpression));
                }
                var p4 = l4.length - 1;
                t5 = l4[p4];
                for (var d4 = i5.pop(); p4 > 1; ) {
                  var f4 = i5.pop(), m4 = d4 && d4.lineStart;
                  h5 = this.startNode(f4, m4), u4 = l4[p4 - 1], t5 = this.finalize(h5, new a4.BinaryExpression(u4, l4[p4 - 2], t5)), p4 -= 2, d4 = f4;
                }
              }
              return t5;
            }, e6.prototype.parseConditionalExpression = function() {
              var e7 = this.lookahead, t5 = this.inheritCoverGrammar(this.parseBinaryExpression);
              if (this.match("?")) {
                this.nextToken();
                var r5 = this.context.allowIn;
                this.context.allowIn = true;
                var s5 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                this.context.allowIn = r5, this.expect(":");
                var i5 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                t5 = this.finalize(this.startNode(e7), new a4.ConditionalExpression(t5, s5, i5)), this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
              }
              return t5;
            }, e6.prototype.checkPatternParam = function(e7, t5) {
              switch (t5.type) {
                case l3.Syntax.Identifier:
                  this.validateParam(e7, t5, t5.name);
                  break;
                case l3.Syntax.RestElement:
                  this.checkPatternParam(e7, t5.argument);
                  break;
                case l3.Syntax.AssignmentPattern:
                  this.checkPatternParam(e7, t5.left);
                  break;
                case l3.Syntax.ArrayPattern:
                  for (var r5 = 0; r5 < t5.elements.length; r5++)
                    t5.elements[r5] !== null && this.checkPatternParam(e7, t5.elements[r5]);
                  break;
                case l3.Syntax.ObjectPattern:
                  for (r5 = 0; r5 < t5.properties.length; r5++)
                    this.checkPatternParam(e7, t5.properties[r5].value);
              }
              e7.simple = e7.simple && t5 instanceof a4.Identifier;
            }, e6.prototype.reinterpretAsCoverFormalsList = function(e7) {
              var t5, r5 = [e7], s5 = false;
              switch (e7.type) {
                case l3.Syntax.Identifier:
                  break;
                case u3:
                  r5 = e7.params, s5 = e7.async;
                  break;
                default:
                  return null;
              }
              t5 = {simple: true, paramSet: {}};
              for (var i5 = 0; i5 < r5.length; ++i5)
                (a5 = r5[i5]).type === l3.Syntax.AssignmentPattern ? a5.right.type === l3.Syntax.YieldExpression && (a5.right.argument && this.throwUnexpectedToken(this.lookahead), a5.right.type = l3.Syntax.Identifier, a5.right.name = "yield", delete a5.right.argument, delete a5.right.delegate) : s5 && a5.type === l3.Syntax.Identifier && a5.name === "await" && this.throwUnexpectedToken(this.lookahead), this.checkPatternParam(t5, a5), r5[i5] = a5;
              if (this.context.strict || !this.context.allowYield)
                for (i5 = 0; i5 < r5.length; ++i5) {
                  var a5;
                  (a5 = r5[i5]).type === l3.Syntax.YieldExpression && this.throwUnexpectedToken(this.lookahead);
                }
              if (t5.message === n4.Messages.StrictParamDupe) {
                var o5 = this.context.strict ? t5.stricted : t5.firstRestricted;
                this.throwUnexpectedToken(o5, t5.message);
              }
              return {simple: t5.simple, params: r5, stricted: t5.stricted, firstRestricted: t5.firstRestricted, message: t5.message};
            }, e6.prototype.parseAssignmentExpression = function() {
              var e7;
              if (!this.context.allowYield && this.matchKeyword("yield"))
                e7 = this.parseYieldExpression();
              else {
                var t5 = this.lookahead, r5 = t5;
                if (e7 = this.parseConditionalExpression(), r5.type === 3 && r5.lineNumber === this.lookahead.lineNumber && r5.value === "async" && (this.lookahead.type === 3 || this.matchKeyword("yield"))) {
                  var s5 = this.parsePrimaryExpression();
                  this.reinterpretExpressionAsPattern(s5), e7 = {type: u3, params: [s5], async: true};
                }
                if (e7.type === u3 || this.match("=>")) {
                  this.context.isAssignmentTarget = false, this.context.isBindingElement = false;
                  var i5 = e7.async, o5 = this.reinterpretAsCoverFormalsList(e7);
                  if (o5) {
                    this.hasLineTerminator && this.tolerateUnexpectedToken(this.lookahead), this.context.firstCoverInitializedNameError = null;
                    var c5 = this.context.strict, h5 = this.context.allowStrictDirective;
                    this.context.allowStrictDirective = o5.simple;
                    var p4 = this.context.allowYield, d4 = this.context.await;
                    this.context.allowYield = true, this.context.await = i5;
                    var f4 = this.startNode(t5);
                    this.expect("=>");
                    var m4 = void 0;
                    if (this.match("{")) {
                      var y4 = this.context.allowIn;
                      this.context.allowIn = true, m4 = this.parseFunctionSourceElements(), this.context.allowIn = y4;
                    } else
                      m4 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                    var g4 = m4.type !== l3.Syntax.BlockStatement;
                    this.context.strict && o5.firstRestricted && this.throwUnexpectedToken(o5.firstRestricted, o5.message), this.context.strict && o5.stricted && this.tolerateUnexpectedToken(o5.stricted, o5.message), e7 = i5 ? this.finalize(f4, new a4.AsyncArrowFunctionExpression(o5.params, m4, g4)) : this.finalize(f4, new a4.ArrowFunctionExpression(o5.params, m4, g4)), this.context.strict = c5, this.context.allowStrictDirective = h5, this.context.allowYield = p4, this.context.await = d4;
                  }
                } else if (this.matchAssign()) {
                  if (this.context.isAssignmentTarget || this.tolerateError(n4.Messages.InvalidLHSInAssignment), this.context.strict && e7.type === l3.Syntax.Identifier) {
                    var x4 = e7;
                    this.scanner.isRestrictedWord(x4.name) && this.tolerateUnexpectedToken(r5, n4.Messages.StrictLHSAssignment), this.scanner.isStrictModeReservedWord(x4.name) && this.tolerateUnexpectedToken(r5, n4.Messages.StrictReservedWord);
                  }
                  this.match("=") ? this.reinterpretExpressionAsPattern(e7) : (this.context.isAssignmentTarget = false, this.context.isBindingElement = false);
                  var b3 = (r5 = this.nextToken()).value, E4 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                  e7 = this.finalize(this.startNode(t5), new a4.AssignmentExpression(b3, e7, E4)), this.context.firstCoverInitializedNameError = null;
                }
              }
              return e7;
            }, e6.prototype.parseExpression = function() {
              var e7 = this.lookahead, t5 = this.isolateCoverGrammar(this.parseAssignmentExpression);
              if (this.match(",")) {
                var r5 = [];
                for (r5.push(t5); this.lookahead.type !== 2 && this.match(","); )
                  this.nextToken(), r5.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
                t5 = this.finalize(this.startNode(e7), new a4.SequenceExpression(r5));
              }
              return t5;
            }, e6.prototype.parseStatementListItem = function() {
              var e7;
              if (this.context.isAssignmentTarget = true, this.context.isBindingElement = true, this.lookahead.type === 4)
                switch (this.lookahead.value) {
                  case "export":
                    this.context.isModule || this.tolerateUnexpectedToken(this.lookahead, n4.Messages.IllegalExportDeclaration), e7 = this.parseExportDeclaration();
                    break;
                  case "import":
                    this.context.isModule || this.tolerateUnexpectedToken(this.lookahead, n4.Messages.IllegalImportDeclaration), e7 = this.parseImportDeclaration();
                    break;
                  case "const":
                    e7 = this.parseLexicalDeclaration({inFor: false});
                    break;
                  case "function":
                    e7 = this.parseFunctionDeclaration();
                    break;
                  case "class":
                    e7 = this.parseClassDeclaration();
                    break;
                  case "let":
                    e7 = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({inFor: false}) : this.parseStatement();
                    break;
                  default:
                    e7 = this.parseStatement();
                }
              else
                e7 = this.parseStatement();
              return e7;
            }, e6.prototype.parseBlock = function() {
              var e7 = this.createNode();
              this.expect("{");
              for (var t5 = []; !this.match("}"); )
                t5.push(this.parseStatementListItem());
              return this.expect("}"), this.finalize(e7, new a4.BlockStatement(t5));
            }, e6.prototype.parseLexicalBinding = function(e7, t5) {
              var r5 = this.createNode(), s5 = [], i5 = this.parsePattern(s5, e7);
              this.context.strict && i5.type === l3.Syntax.Identifier && this.scanner.isRestrictedWord(i5.name) && this.tolerateError(n4.Messages.StrictVarName);
              var o5 = null;
              return e7 === "const" ? this.matchKeyword("in") || this.matchContextualKeyword("of") || (this.match("=") ? (this.nextToken(), o5 = this.isolateCoverGrammar(this.parseAssignmentExpression)) : this.throwError(n4.Messages.DeclarationMissingInitializer, "const")) : (!t5.inFor && i5.type !== l3.Syntax.Identifier || this.match("=")) && (this.expect("="), o5 = this.isolateCoverGrammar(this.parseAssignmentExpression)), this.finalize(r5, new a4.VariableDeclarator(i5, o5));
            }, e6.prototype.parseBindingList = function(e7, t5) {
              for (var r5 = [this.parseLexicalBinding(e7, t5)]; this.match(","); )
                this.nextToken(), r5.push(this.parseLexicalBinding(e7, t5));
              return r5;
            }, e6.prototype.isLexicalDeclaration = function() {
              var e7 = this.scanner.saveState();
              this.scanner.scanComments();
              var t5 = this.scanner.lex();
              return this.scanner.restoreState(e7), t5.type === 3 || t5.type === 7 && t5.value === "[" || t5.type === 7 && t5.value === "{" || t5.type === 4 && t5.value === "let" || t5.type === 4 && t5.value === "yield";
            }, e6.prototype.parseLexicalDeclaration = function(e7) {
              var t5 = this.createNode(), r5 = this.nextToken().value;
              s4.assert(r5 === "let" || r5 === "const", "Lexical declaration must be either let or const");
              var i5 = this.parseBindingList(r5, e7);
              return this.consumeSemicolon(), this.finalize(t5, new a4.VariableDeclaration(i5, r5));
            }, e6.prototype.parseBindingRestElement = function(e7, t5) {
              var r5 = this.createNode();
              this.expect("...");
              var s5 = this.parsePattern(e7, t5);
              return this.finalize(r5, new a4.RestElement(s5));
            }, e6.prototype.parseArrayPattern = function(e7, t5) {
              var r5 = this.createNode();
              this.expect("[");
              for (var s5 = []; !this.match("]"); )
                if (this.match(","))
                  this.nextToken(), s5.push(null);
                else {
                  if (this.match("...")) {
                    s5.push(this.parseBindingRestElement(e7, t5));
                    break;
                  }
                  s5.push(this.parsePatternWithDefault(e7, t5)), this.match("]") || this.expect(",");
                }
              return this.expect("]"), this.finalize(r5, new a4.ArrayPattern(s5));
            }, e6.prototype.parsePropertyPattern = function(e7, t5) {
              var r5, s5, i5 = this.createNode(), n5 = false, o5 = false, l4 = false;
              if (this.lookahead.type === 3) {
                var c5 = this.lookahead;
                r5 = this.parseVariableIdentifier();
                var u4 = this.finalize(i5, new a4.Identifier(c5.value));
                if (this.match("=")) {
                  e7.push(c5), o5 = true, this.nextToken();
                  var h5 = this.parseAssignmentExpression();
                  s5 = this.finalize(this.startNode(c5), new a4.AssignmentPattern(u4, h5));
                } else
                  this.match(":") ? (this.expect(":"), s5 = this.parsePatternWithDefault(e7, t5)) : (e7.push(c5), o5 = true, s5 = u4);
              } else
                n5 = this.match("["), r5 = this.parseObjectPropertyKey(), this.expect(":"), s5 = this.parsePatternWithDefault(e7, t5);
              return this.finalize(i5, new a4.Property("init", r5, n5, s5, l4, o5));
            }, e6.prototype.parseObjectPattern = function(e7, t5) {
              var r5 = this.createNode(), s5 = [];
              for (this.expect("{"); !this.match("}"); )
                s5.push(this.parsePropertyPattern(e7, t5)), this.match("}") || this.expect(",");
              return this.expect("}"), this.finalize(r5, new a4.ObjectPattern(s5));
            }, e6.prototype.parsePattern = function(e7, t5) {
              var r5;
              return this.match("[") ? r5 = this.parseArrayPattern(e7, t5) : this.match("{") ? r5 = this.parseObjectPattern(e7, t5) : (!this.matchKeyword("let") || t5 !== "const" && t5 !== "let" || this.tolerateUnexpectedToken(this.lookahead, n4.Messages.LetInLexicalBinding), e7.push(this.lookahead), r5 = this.parseVariableIdentifier(t5)), r5;
            }, e6.prototype.parsePatternWithDefault = function(e7, t5) {
              var r5 = this.lookahead, s5 = this.parsePattern(e7, t5);
              if (this.match("=")) {
                this.nextToken();
                var i5 = this.context.allowYield;
                this.context.allowYield = true;
                var n5 = this.isolateCoverGrammar(this.parseAssignmentExpression);
                this.context.allowYield = i5, s5 = this.finalize(this.startNode(r5), new a4.AssignmentPattern(s5, n5));
              }
              return s5;
            }, e6.prototype.parseVariableIdentifier = function(e7) {
              var t5 = this.createNode(), r5 = this.nextToken();
              return r5.type === 4 && r5.value === "yield" ? this.context.strict ? this.tolerateUnexpectedToken(r5, n4.Messages.StrictReservedWord) : this.context.allowYield || this.throwUnexpectedToken(r5) : r5.type !== 3 ? this.context.strict && r5.type === 4 && this.scanner.isStrictModeReservedWord(r5.value) ? this.tolerateUnexpectedToken(r5, n4.Messages.StrictReservedWord) : (this.context.strict || r5.value !== "let" || e7 !== "var") && this.throwUnexpectedToken(r5) : (this.context.isModule || this.context.await) && r5.type === 3 && r5.value === "await" && this.tolerateUnexpectedToken(r5), this.finalize(t5, new a4.Identifier(r5.value));
            }, e6.prototype.parseVariableDeclaration = function(e7) {
              var t5 = this.createNode(), r5 = [], s5 = this.parsePattern(r5, "var");
              this.context.strict && s5.type === l3.Syntax.Identifier && this.scanner.isRestrictedWord(s5.name) && this.tolerateError(n4.Messages.StrictVarName);
              var i5 = null;
              return this.match("=") ? (this.nextToken(), i5 = this.isolateCoverGrammar(this.parseAssignmentExpression)) : s5.type === l3.Syntax.Identifier || e7.inFor || this.expect("="), this.finalize(t5, new a4.VariableDeclarator(s5, i5));
            }, e6.prototype.parseVariableDeclarationList = function(e7) {
              var t5 = {inFor: e7.inFor}, r5 = [];
              for (r5.push(this.parseVariableDeclaration(t5)); this.match(","); )
                this.nextToken(), r5.push(this.parseVariableDeclaration(t5));
              return r5;
            }, e6.prototype.parseVariableStatement = function() {
              var e7 = this.createNode();
              this.expectKeyword("var");
              var t5 = this.parseVariableDeclarationList({inFor: false});
              return this.consumeSemicolon(), this.finalize(e7, new a4.VariableDeclaration(t5, "var"));
            }, e6.prototype.parseEmptyStatement = function() {
              var e7 = this.createNode();
              return this.expect(";"), this.finalize(e7, new a4.EmptyStatement());
            }, e6.prototype.parseExpressionStatement = function() {
              var e7 = this.createNode(), t5 = this.parseExpression();
              return this.consumeSemicolon(), this.finalize(e7, new a4.ExpressionStatement(t5));
            }, e6.prototype.parseIfClause = function() {
              return this.context.strict && this.matchKeyword("function") && this.tolerateError(n4.Messages.StrictFunction), this.parseStatement();
            }, e6.prototype.parseIfStatement = function() {
              var e7, t5 = this.createNode(), r5 = null;
              this.expectKeyword("if"), this.expect("(");
              var s5 = this.parseExpression();
              return !this.match(")") && this.config.tolerant ? (this.tolerateUnexpectedToken(this.nextToken()), e7 = this.finalize(this.createNode(), new a4.EmptyStatement())) : (this.expect(")"), e7 = this.parseIfClause(), this.matchKeyword("else") && (this.nextToken(), r5 = this.parseIfClause())), this.finalize(t5, new a4.IfStatement(s5, e7, r5));
            }, e6.prototype.parseDoWhileStatement = function() {
              var e7 = this.createNode();
              this.expectKeyword("do");
              var t5 = this.context.inIteration;
              this.context.inIteration = true;
              var r5 = this.parseStatement();
              this.context.inIteration = t5, this.expectKeyword("while"), this.expect("(");
              var s5 = this.parseExpression();
              return !this.match(")") && this.config.tolerant ? this.tolerateUnexpectedToken(this.nextToken()) : (this.expect(")"), this.match(";") && this.nextToken()), this.finalize(e7, new a4.DoWhileStatement(r5, s5));
            }, e6.prototype.parseWhileStatement = function() {
              var e7, t5 = this.createNode();
              this.expectKeyword("while"), this.expect("(");
              var r5 = this.parseExpression();
              if (!this.match(")") && this.config.tolerant)
                this.tolerateUnexpectedToken(this.nextToken()), e7 = this.finalize(this.createNode(), new a4.EmptyStatement());
              else {
                this.expect(")");
                var s5 = this.context.inIteration;
                this.context.inIteration = true, e7 = this.parseStatement(), this.context.inIteration = s5;
              }
              return this.finalize(t5, new a4.WhileStatement(r5, e7));
            }, e6.prototype.parseForStatement = function() {
              var e7, t5, r5, s5 = null, i5 = null, o5 = null, c5 = true, u4 = this.createNode();
              if (this.expectKeyword("for"), this.expect("("), this.match(";"))
                this.nextToken();
              else if (this.matchKeyword("var")) {
                s5 = this.createNode(), this.nextToken();
                var h5 = this.context.allowIn;
                this.context.allowIn = false;
                var p4 = this.parseVariableDeclarationList({inFor: true});
                if (this.context.allowIn = h5, p4.length === 1 && this.matchKeyword("in")) {
                  var d4 = p4[0];
                  d4.init && (d4.id.type === l3.Syntax.ArrayPattern || d4.id.type === l3.Syntax.ObjectPattern || this.context.strict) && this.tolerateError(n4.Messages.ForInOfLoopInitializer, "for-in"), s5 = this.finalize(s5, new a4.VariableDeclaration(p4, "var")), this.nextToken(), e7 = s5, t5 = this.parseExpression(), s5 = null;
                } else
                  p4.length === 1 && p4[0].init === null && this.matchContextualKeyword("of") ? (s5 = this.finalize(s5, new a4.VariableDeclaration(p4, "var")), this.nextToken(), e7 = s5, t5 = this.parseAssignmentExpression(), s5 = null, c5 = false) : (s5 = this.finalize(s5, new a4.VariableDeclaration(p4, "var")), this.expect(";"));
              } else if (this.matchKeyword("const") || this.matchKeyword("let")) {
                s5 = this.createNode();
                var f4 = this.nextToken().value;
                this.context.strict || this.lookahead.value !== "in" ? (h5 = this.context.allowIn, this.context.allowIn = false, p4 = this.parseBindingList(f4, {inFor: true}), this.context.allowIn = h5, p4.length === 1 && p4[0].init === null && this.matchKeyword("in") ? (s5 = this.finalize(s5, new a4.VariableDeclaration(p4, f4)), this.nextToken(), e7 = s5, t5 = this.parseExpression(), s5 = null) : p4.length === 1 && p4[0].init === null && this.matchContextualKeyword("of") ? (s5 = this.finalize(s5, new a4.VariableDeclaration(p4, f4)), this.nextToken(), e7 = s5, t5 = this.parseAssignmentExpression(), s5 = null, c5 = false) : (this.consumeSemicolon(), s5 = this.finalize(s5, new a4.VariableDeclaration(p4, f4)))) : (s5 = this.finalize(s5, new a4.Identifier(f4)), this.nextToken(), e7 = s5, t5 = this.parseExpression(), s5 = null);
              } else {
                var m4 = this.lookahead;
                if (h5 = this.context.allowIn, this.context.allowIn = false, s5 = this.inheritCoverGrammar(this.parseAssignmentExpression), this.context.allowIn = h5, this.matchKeyword("in"))
                  this.context.isAssignmentTarget && s5.type !== l3.Syntax.AssignmentExpression || this.tolerateError(n4.Messages.InvalidLHSInForIn), this.nextToken(), this.reinterpretExpressionAsPattern(s5), e7 = s5, t5 = this.parseExpression(), s5 = null;
                else if (this.matchContextualKeyword("of"))
                  this.context.isAssignmentTarget && s5.type !== l3.Syntax.AssignmentExpression || this.tolerateError(n4.Messages.InvalidLHSInForLoop), this.nextToken(), this.reinterpretExpressionAsPattern(s5), e7 = s5, t5 = this.parseAssignmentExpression(), s5 = null, c5 = false;
                else {
                  if (this.match(",")) {
                    for (var y4 = [s5]; this.match(","); )
                      this.nextToken(), y4.push(this.isolateCoverGrammar(this.parseAssignmentExpression));
                    s5 = this.finalize(this.startNode(m4), new a4.SequenceExpression(y4));
                  }
                  this.expect(";");
                }
              }
              if (e7 === void 0 && (this.match(";") || (i5 = this.parseExpression()), this.expect(";"), this.match(")") || (o5 = this.parseExpression())), !this.match(")") && this.config.tolerant)
                this.tolerateUnexpectedToken(this.nextToken()), r5 = this.finalize(this.createNode(), new a4.EmptyStatement());
              else {
                this.expect(")");
                var g4 = this.context.inIteration;
                this.context.inIteration = true, r5 = this.isolateCoverGrammar(this.parseStatement), this.context.inIteration = g4;
              }
              return e7 === void 0 ? this.finalize(u4, new a4.ForStatement(s5, i5, o5, r5)) : c5 ? this.finalize(u4, new a4.ForInStatement(e7, t5, r5)) : this.finalize(u4, new a4.ForOfStatement(e7, t5, r5));
            }, e6.prototype.parseContinueStatement = function() {
              var e7 = this.createNode();
              this.expectKeyword("continue");
              var t5 = null;
              if (this.lookahead.type === 3 && !this.hasLineTerminator) {
                var r5 = this.parseVariableIdentifier();
                t5 = r5;
                var s5 = "$" + r5.name;
                Object.prototype.hasOwnProperty.call(this.context.labelSet, s5) || this.throwError(n4.Messages.UnknownLabel, r5.name);
              }
              return this.consumeSemicolon(), t5 !== null || this.context.inIteration || this.throwError(n4.Messages.IllegalContinue), this.finalize(e7, new a4.ContinueStatement(t5));
            }, e6.prototype.parseBreakStatement = function() {
              var e7 = this.createNode();
              this.expectKeyword("break");
              var t5 = null;
              if (this.lookahead.type === 3 && !this.hasLineTerminator) {
                var r5 = this.parseVariableIdentifier(), s5 = "$" + r5.name;
                Object.prototype.hasOwnProperty.call(this.context.labelSet, s5) || this.throwError(n4.Messages.UnknownLabel, r5.name), t5 = r5;
              }
              return this.consumeSemicolon(), t5 !== null || this.context.inIteration || this.context.inSwitch || this.throwError(n4.Messages.IllegalBreak), this.finalize(e7, new a4.BreakStatement(t5));
            }, e6.prototype.parseReturnStatement = function() {
              this.context.inFunctionBody || this.tolerateError(n4.Messages.IllegalReturn);
              var e7 = this.createNode();
              this.expectKeyword("return");
              var t5 = (this.match(";") || this.match("}") || this.hasLineTerminator || this.lookahead.type === 2) && this.lookahead.type !== 8 && this.lookahead.type !== 10 ? null : this.parseExpression();
              return this.consumeSemicolon(), this.finalize(e7, new a4.ReturnStatement(t5));
            }, e6.prototype.parseWithStatement = function() {
              this.context.strict && this.tolerateError(n4.Messages.StrictModeWith);
              var e7, t5 = this.createNode();
              this.expectKeyword("with"), this.expect("(");
              var r5 = this.parseExpression();
              return !this.match(")") && this.config.tolerant ? (this.tolerateUnexpectedToken(this.nextToken()), e7 = this.finalize(this.createNode(), new a4.EmptyStatement())) : (this.expect(")"), e7 = this.parseStatement()), this.finalize(t5, new a4.WithStatement(r5, e7));
            }, e6.prototype.parseSwitchCase = function() {
              var e7, t5 = this.createNode();
              this.matchKeyword("default") ? (this.nextToken(), e7 = null) : (this.expectKeyword("case"), e7 = this.parseExpression()), this.expect(":");
              for (var r5 = []; !(this.match("}") || this.matchKeyword("default") || this.matchKeyword("case")); )
                r5.push(this.parseStatementListItem());
              return this.finalize(t5, new a4.SwitchCase(e7, r5));
            }, e6.prototype.parseSwitchStatement = function() {
              var e7 = this.createNode();
              this.expectKeyword("switch"), this.expect("(");
              var t5 = this.parseExpression();
              this.expect(")");
              var r5 = this.context.inSwitch;
              this.context.inSwitch = true;
              var s5 = [], i5 = false;
              for (this.expect("{"); !this.match("}"); ) {
                var o5 = this.parseSwitchCase();
                o5.test === null && (i5 && this.throwError(n4.Messages.MultipleDefaultsInSwitch), i5 = true), s5.push(o5);
              }
              return this.expect("}"), this.context.inSwitch = r5, this.finalize(e7, new a4.SwitchStatement(t5, s5));
            }, e6.prototype.parseLabelledStatement = function() {
              var e7, t5 = this.createNode(), r5 = this.parseExpression();
              if (r5.type === l3.Syntax.Identifier && this.match(":")) {
                this.nextToken();
                var s5 = r5, i5 = "$" + s5.name;
                Object.prototype.hasOwnProperty.call(this.context.labelSet, i5) && this.throwError(n4.Messages.Redeclaration, "Label", s5.name), this.context.labelSet[i5] = true;
                var o5 = void 0;
                if (this.matchKeyword("class"))
                  this.tolerateUnexpectedToken(this.lookahead), o5 = this.parseClassDeclaration();
                else if (this.matchKeyword("function")) {
                  var c5 = this.lookahead, u4 = this.parseFunctionDeclaration();
                  this.context.strict ? this.tolerateUnexpectedToken(c5, n4.Messages.StrictFunction) : u4.generator && this.tolerateUnexpectedToken(c5, n4.Messages.GeneratorInLegacyContext), o5 = u4;
                } else
                  o5 = this.parseStatement();
                delete this.context.labelSet[i5], e7 = new a4.LabeledStatement(s5, o5);
              } else
                this.consumeSemicolon(), e7 = new a4.ExpressionStatement(r5);
              return this.finalize(t5, e7);
            }, e6.prototype.parseThrowStatement = function() {
              var e7 = this.createNode();
              this.expectKeyword("throw"), this.hasLineTerminator && this.throwError(n4.Messages.NewlineAfterThrow);
              var t5 = this.parseExpression();
              return this.consumeSemicolon(), this.finalize(e7, new a4.ThrowStatement(t5));
            }, e6.prototype.parseCatchClause = function() {
              var e7 = this.createNode();
              this.expectKeyword("catch"), this.expect("("), this.match(")") && this.throwUnexpectedToken(this.lookahead);
              for (var t5 = [], r5 = this.parsePattern(t5), s5 = {}, i5 = 0; i5 < t5.length; i5++) {
                var o5 = "$" + t5[i5].value;
                Object.prototype.hasOwnProperty.call(s5, o5) && this.tolerateError(n4.Messages.DuplicateBinding, t5[i5].value), s5[o5] = true;
              }
              this.context.strict && r5.type === l3.Syntax.Identifier && this.scanner.isRestrictedWord(r5.name) && this.tolerateError(n4.Messages.StrictCatchVariable), this.expect(")");
              var c5 = this.parseBlock();
              return this.finalize(e7, new a4.CatchClause(r5, c5));
            }, e6.prototype.parseFinallyClause = function() {
              return this.expectKeyword("finally"), this.parseBlock();
            }, e6.prototype.parseTryStatement = function() {
              var e7 = this.createNode();
              this.expectKeyword("try");
              var t5 = this.parseBlock(), r5 = this.matchKeyword("catch") ? this.parseCatchClause() : null, s5 = this.matchKeyword("finally") ? this.parseFinallyClause() : null;
              return r5 || s5 || this.throwError(n4.Messages.NoCatchOrFinally), this.finalize(e7, new a4.TryStatement(t5, r5, s5));
            }, e6.prototype.parseDebuggerStatement = function() {
              var e7 = this.createNode();
              return this.expectKeyword("debugger"), this.consumeSemicolon(), this.finalize(e7, new a4.DebuggerStatement());
            }, e6.prototype.parseStatement = function() {
              var e7;
              switch (this.lookahead.type) {
                case 1:
                case 5:
                case 6:
                case 8:
                case 10:
                case 9:
                  e7 = this.parseExpressionStatement();
                  break;
                case 7:
                  var t5 = this.lookahead.value;
                  e7 = t5 === "{" ? this.parseBlock() : t5 === "(" ? this.parseExpressionStatement() : t5 === ";" ? this.parseEmptyStatement() : this.parseExpressionStatement();
                  break;
                case 3:
                  e7 = this.matchAsyncFunction() ? this.parseFunctionDeclaration() : this.parseLabelledStatement();
                  break;
                case 4:
                  switch (this.lookahead.value) {
                    case "break":
                      e7 = this.parseBreakStatement();
                      break;
                    case "continue":
                      e7 = this.parseContinueStatement();
                      break;
                    case "debugger":
                      e7 = this.parseDebuggerStatement();
                      break;
                    case "do":
                      e7 = this.parseDoWhileStatement();
                      break;
                    case "for":
                      e7 = this.parseForStatement();
                      break;
                    case "function":
                      e7 = this.parseFunctionDeclaration();
                      break;
                    case "if":
                      e7 = this.parseIfStatement();
                      break;
                    case "return":
                      e7 = this.parseReturnStatement();
                      break;
                    case "switch":
                      e7 = this.parseSwitchStatement();
                      break;
                    case "throw":
                      e7 = this.parseThrowStatement();
                      break;
                    case "try":
                      e7 = this.parseTryStatement();
                      break;
                    case "var":
                      e7 = this.parseVariableStatement();
                      break;
                    case "while":
                      e7 = this.parseWhileStatement();
                      break;
                    case "with":
                      e7 = this.parseWithStatement();
                      break;
                    default:
                      e7 = this.parseExpressionStatement();
                  }
                  break;
                default:
                  e7 = this.throwUnexpectedToken(this.lookahead);
              }
              return e7;
            }, e6.prototype.parseFunctionSourceElements = function() {
              var e7 = this.createNode();
              this.expect("{");
              var t5 = this.parseDirectivePrologues(), r5 = this.context.labelSet, s5 = this.context.inIteration, i5 = this.context.inSwitch, n5 = this.context.inFunctionBody;
              for (this.context.labelSet = {}, this.context.inIteration = false, this.context.inSwitch = false, this.context.inFunctionBody = true; this.lookahead.type !== 2 && !this.match("}"); )
                t5.push(this.parseStatementListItem());
              return this.expect("}"), this.context.labelSet = r5, this.context.inIteration = s5, this.context.inSwitch = i5, this.context.inFunctionBody = n5, this.finalize(e7, new a4.BlockStatement(t5));
            }, e6.prototype.validateParam = function(e7, t5, r5) {
              var s5 = "$" + r5;
              this.context.strict ? (this.scanner.isRestrictedWord(r5) && (e7.stricted = t5, e7.message = n4.Messages.StrictParamName), Object.prototype.hasOwnProperty.call(e7.paramSet, s5) && (e7.stricted = t5, e7.message = n4.Messages.StrictParamDupe)) : e7.firstRestricted || (this.scanner.isRestrictedWord(r5) ? (e7.firstRestricted = t5, e7.message = n4.Messages.StrictParamName) : this.scanner.isStrictModeReservedWord(r5) ? (e7.firstRestricted = t5, e7.message = n4.Messages.StrictReservedWord) : Object.prototype.hasOwnProperty.call(e7.paramSet, s5) && (e7.stricted = t5, e7.message = n4.Messages.StrictParamDupe)), typeof Object.defineProperty == "function" ? Object.defineProperty(e7.paramSet, s5, {value: true, enumerable: true, writable: true, configurable: true}) : e7.paramSet[s5] = true;
            }, e6.prototype.parseRestElement = function(e7) {
              var t5 = this.createNode();
              this.expect("...");
              var r5 = this.parsePattern(e7);
              return this.match("=") && this.throwError(n4.Messages.DefaultRestParameter), this.match(")") || this.throwError(n4.Messages.ParameterAfterRestParameter), this.finalize(t5, new a4.RestElement(r5));
            }, e6.prototype.parseFormalParameter = function(e7) {
              for (var t5 = [], r5 = this.match("...") ? this.parseRestElement(t5) : this.parsePatternWithDefault(t5), s5 = 0; s5 < t5.length; s5++)
                this.validateParam(e7, t5[s5], t5[s5].value);
              e7.simple = e7.simple && r5 instanceof a4.Identifier, e7.params.push(r5);
            }, e6.prototype.parseFormalParameters = function(e7) {
              var t5;
              if (t5 = {simple: true, params: [], firstRestricted: e7}, this.expect("("), !this.match(")"))
                for (t5.paramSet = {}; this.lookahead.type !== 2 && (this.parseFormalParameter(t5), !this.match(")")) && (this.expect(","), !this.match(")")); )
                  ;
              return this.expect(")"), {simple: t5.simple, params: t5.params, stricted: t5.stricted, firstRestricted: t5.firstRestricted, message: t5.message};
            }, e6.prototype.matchAsyncFunction = function() {
              var e7 = this.matchContextualKeyword("async");
              if (e7) {
                var t5 = this.scanner.saveState();
                this.scanner.scanComments();
                var r5 = this.scanner.lex();
                this.scanner.restoreState(t5), e7 = t5.lineNumber === r5.lineNumber && r5.type === 4 && r5.value === "function";
              }
              return e7;
            }, e6.prototype.parseFunctionDeclaration = function(e7) {
              var t5 = this.createNode(), r5 = this.matchContextualKeyword("async");
              r5 && this.nextToken(), this.expectKeyword("function");
              var s5, i5 = !r5 && this.match("*");
              i5 && this.nextToken();
              var o5 = null, l4 = null;
              if (!e7 || !this.match("(")) {
                var c5 = this.lookahead;
                o5 = this.parseVariableIdentifier(), this.context.strict ? this.scanner.isRestrictedWord(c5.value) && this.tolerateUnexpectedToken(c5, n4.Messages.StrictFunctionName) : this.scanner.isRestrictedWord(c5.value) ? (l4 = c5, s5 = n4.Messages.StrictFunctionName) : this.scanner.isStrictModeReservedWord(c5.value) && (l4 = c5, s5 = n4.Messages.StrictReservedWord);
              }
              var u4 = this.context.await, h5 = this.context.allowYield;
              this.context.await = r5, this.context.allowYield = !i5;
              var p4 = this.parseFormalParameters(l4), d4 = p4.params, f4 = p4.stricted;
              l4 = p4.firstRestricted, p4.message && (s5 = p4.message);
              var m4 = this.context.strict, y4 = this.context.allowStrictDirective;
              this.context.allowStrictDirective = p4.simple;
              var g4 = this.parseFunctionSourceElements();
              return this.context.strict && l4 && this.throwUnexpectedToken(l4, s5), this.context.strict && f4 && this.tolerateUnexpectedToken(f4, s5), this.context.strict = m4, this.context.allowStrictDirective = y4, this.context.await = u4, this.context.allowYield = h5, r5 ? this.finalize(t5, new a4.AsyncFunctionDeclaration(o5, d4, g4)) : this.finalize(t5, new a4.FunctionDeclaration(o5, d4, g4, i5));
            }, e6.prototype.parseFunctionExpression = function() {
              var e7 = this.createNode(), t5 = this.matchContextualKeyword("async");
              t5 && this.nextToken(), this.expectKeyword("function");
              var r5, s5 = !t5 && this.match("*");
              s5 && this.nextToken();
              var i5, o5 = null, l4 = this.context.await, c5 = this.context.allowYield;
              if (this.context.await = t5, this.context.allowYield = !s5, !this.match("(")) {
                var u4 = this.lookahead;
                o5 = this.context.strict || s5 || !this.matchKeyword("yield") ? this.parseVariableIdentifier() : this.parseIdentifierName(), this.context.strict ? this.scanner.isRestrictedWord(u4.value) && this.tolerateUnexpectedToken(u4, n4.Messages.StrictFunctionName) : this.scanner.isRestrictedWord(u4.value) ? (i5 = u4, r5 = n4.Messages.StrictFunctionName) : this.scanner.isStrictModeReservedWord(u4.value) && (i5 = u4, r5 = n4.Messages.StrictReservedWord);
              }
              var h5 = this.parseFormalParameters(i5), p4 = h5.params, d4 = h5.stricted;
              i5 = h5.firstRestricted, h5.message && (r5 = h5.message);
              var f4 = this.context.strict, m4 = this.context.allowStrictDirective;
              this.context.allowStrictDirective = h5.simple;
              var y4 = this.parseFunctionSourceElements();
              return this.context.strict && i5 && this.throwUnexpectedToken(i5, r5), this.context.strict && d4 && this.tolerateUnexpectedToken(d4, r5), this.context.strict = f4, this.context.allowStrictDirective = m4, this.context.await = l4, this.context.allowYield = c5, t5 ? this.finalize(e7, new a4.AsyncFunctionExpression(o5, p4, y4)) : this.finalize(e7, new a4.FunctionExpression(o5, p4, y4, s5));
            }, e6.prototype.parseDirective = function() {
              var e7 = this.lookahead, t5 = this.createNode(), r5 = this.parseExpression(), s5 = r5.type === l3.Syntax.Literal ? this.getTokenRaw(e7).slice(1, -1) : null;
              return this.consumeSemicolon(), this.finalize(t5, s5 ? new a4.Directive(r5, s5) : new a4.ExpressionStatement(r5));
            }, e6.prototype.parseDirectivePrologues = function() {
              for (var e7 = null, t5 = []; ; ) {
                var r5 = this.lookahead;
                if (r5.type !== 8)
                  break;
                var s5 = this.parseDirective();
                t5.push(s5);
                var i5 = s5.directive;
                if (typeof i5 != "string")
                  break;
                i5 === "use strict" ? (this.context.strict = true, e7 && this.tolerateUnexpectedToken(e7, n4.Messages.StrictOctalLiteral), this.context.allowStrictDirective || this.tolerateUnexpectedToken(r5, n4.Messages.IllegalLanguageModeDirective)) : !e7 && r5.octal && (e7 = r5);
              }
              return t5;
            }, e6.prototype.qualifiedPropertyName = function(e7) {
              switch (e7.type) {
                case 3:
                case 8:
                case 1:
                case 5:
                case 6:
                case 4:
                  return true;
                case 7:
                  return e7.value === "[";
              }
              return false;
            }, e6.prototype.parseGetterMethod = function() {
              var e7 = this.createNode(), t5 = false, r5 = this.context.allowYield;
              this.context.allowYield = !t5;
              var s5 = this.parseFormalParameters();
              s5.params.length > 0 && this.tolerateError(n4.Messages.BadGetterArity);
              var i5 = this.parsePropertyMethod(s5);
              return this.context.allowYield = r5, this.finalize(e7, new a4.FunctionExpression(null, s5.params, i5, t5));
            }, e6.prototype.parseSetterMethod = function() {
              var e7 = this.createNode(), t5 = false, r5 = this.context.allowYield;
              this.context.allowYield = !t5;
              var s5 = this.parseFormalParameters();
              s5.params.length !== 1 ? this.tolerateError(n4.Messages.BadSetterArity) : s5.params[0] instanceof a4.RestElement && this.tolerateError(n4.Messages.BadSetterRestParameter);
              var i5 = this.parsePropertyMethod(s5);
              return this.context.allowYield = r5, this.finalize(e7, new a4.FunctionExpression(null, s5.params, i5, t5));
            }, e6.prototype.parseGeneratorMethod = function() {
              var e7 = this.createNode(), t5 = true, r5 = this.context.allowYield;
              this.context.allowYield = true;
              var s5 = this.parseFormalParameters();
              this.context.allowYield = false;
              var i5 = this.parsePropertyMethod(s5);
              return this.context.allowYield = r5, this.finalize(e7, new a4.FunctionExpression(null, s5.params, i5, t5));
            }, e6.prototype.isStartOfExpression = function() {
              var e7 = true, t5 = this.lookahead.value;
              switch (this.lookahead.type) {
                case 7:
                  e7 = t5 === "[" || t5 === "(" || t5 === "{" || t5 === "+" || t5 === "-" || t5 === "!" || t5 === "~" || t5 === "++" || t5 === "--" || t5 === "/" || t5 === "/=";
                  break;
                case 4:
                  e7 = t5 === "class" || t5 === "delete" || t5 === "function" || t5 === "let" || t5 === "new" || t5 === "super" || t5 === "this" || t5 === "typeof" || t5 === "void" || t5 === "yield";
              }
              return e7;
            }, e6.prototype.parseYieldExpression = function() {
              var e7 = this.createNode();
              this.expectKeyword("yield");
              var t5 = null, r5 = false;
              if (!this.hasLineTerminator) {
                var s5 = this.context.allowYield;
                this.context.allowYield = false, (r5 = this.match("*")) ? (this.nextToken(), t5 = this.parseAssignmentExpression()) : this.isStartOfExpression() && (t5 = this.parseAssignmentExpression()), this.context.allowYield = s5;
              }
              return this.finalize(e7, new a4.YieldExpression(t5, r5));
            }, e6.prototype.parseClassElement = function(e7) {
              var t5 = this.lookahead, r5 = this.createNode(), s5 = "", i5 = null, o5 = null, l4 = false, c5 = false, u4 = false, h5 = false;
              if (this.match("*"))
                this.nextToken();
              else if (l4 = this.match("["), (i5 = this.parseObjectPropertyKey()).name === "static" && (this.qualifiedPropertyName(this.lookahead) || this.match("*")) && (t5 = this.lookahead, u4 = true, l4 = this.match("["), this.match("*") ? this.nextToken() : i5 = this.parseObjectPropertyKey()), t5.type === 3 && !this.hasLineTerminator && t5.value === "async") {
                var p4 = this.lookahead.value;
                p4 !== ":" && p4 !== "(" && p4 !== "*" && (h5 = true, t5 = this.lookahead, i5 = this.parseObjectPropertyKey(), t5.type === 3 && t5.value === "constructor" && this.tolerateUnexpectedToken(t5, n4.Messages.ConstructorIsAsync));
              }
              var d4 = this.qualifiedPropertyName(this.lookahead);
              return t5.type === 3 ? t5.value === "get" && d4 ? (s5 = "get", l4 = this.match("["), i5 = this.parseObjectPropertyKey(), this.context.allowYield = false, o5 = this.parseGetterMethod()) : t5.value === "set" && d4 && (s5 = "set", l4 = this.match("["), i5 = this.parseObjectPropertyKey(), o5 = this.parseSetterMethod()) : t5.type === 7 && t5.value === "*" && d4 && (s5 = "init", l4 = this.match("["), i5 = this.parseObjectPropertyKey(), o5 = this.parseGeneratorMethod(), c5 = true), !s5 && i5 && this.match("(") && (s5 = "init", o5 = h5 ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction(), c5 = true), s5 || this.throwUnexpectedToken(this.lookahead), s5 === "init" && (s5 = "method"), l4 || (u4 && this.isPropertyKey(i5, "prototype") && this.throwUnexpectedToken(t5, n4.Messages.StaticPrototype), !u4 && this.isPropertyKey(i5, "constructor") && ((s5 !== "method" || !c5 || o5 && o5.generator) && this.throwUnexpectedToken(t5, n4.Messages.ConstructorSpecialMethod), e7.value ? this.throwUnexpectedToken(t5, n4.Messages.DuplicateConstructor) : e7.value = true, s5 = "constructor")), this.finalize(r5, new a4.MethodDefinition(i5, l4, o5, s5, u4));
            }, e6.prototype.parseClassElementList = function() {
              var e7 = [], t5 = {value: false};
              for (this.expect("{"); !this.match("}"); )
                this.match(";") ? this.nextToken() : e7.push(this.parseClassElement(t5));
              return this.expect("}"), e7;
            }, e6.prototype.parseClassBody = function() {
              var e7 = this.createNode(), t5 = this.parseClassElementList();
              return this.finalize(e7, new a4.ClassBody(t5));
            }, e6.prototype.parseClassDeclaration = function(e7) {
              var t5 = this.createNode(), r5 = this.context.strict;
              this.context.strict = true, this.expectKeyword("class");
              var s5 = e7 && this.lookahead.type !== 3 ? null : this.parseVariableIdentifier(), i5 = null;
              this.matchKeyword("extends") && (this.nextToken(), i5 = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall));
              var n5 = this.parseClassBody();
              return this.context.strict = r5, this.finalize(t5, new a4.ClassDeclaration(s5, i5, n5));
            }, e6.prototype.parseClassExpression = function() {
              var e7 = this.createNode(), t5 = this.context.strict;
              this.context.strict = true, this.expectKeyword("class");
              var r5 = this.lookahead.type === 3 ? this.parseVariableIdentifier() : null, s5 = null;
              this.matchKeyword("extends") && (this.nextToken(), s5 = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall));
              var i5 = this.parseClassBody();
              return this.context.strict = t5, this.finalize(e7, new a4.ClassExpression(r5, s5, i5));
            }, e6.prototype.parseModule = function() {
              this.context.strict = true, this.context.isModule = true, this.scanner.isModule = true;
              for (var e7 = this.createNode(), t5 = this.parseDirectivePrologues(); this.lookahead.type !== 2; )
                t5.push(this.parseStatementListItem());
              return this.finalize(e7, new a4.Module(t5));
            }, e6.prototype.parseScript = function() {
              for (var e7 = this.createNode(), t5 = this.parseDirectivePrologues(); this.lookahead.type !== 2; )
                t5.push(this.parseStatementListItem());
              return this.finalize(e7, new a4.Script(t5));
            }, e6.prototype.parseModuleSpecifier = function() {
              var e7 = this.createNode();
              this.lookahead.type !== 8 && this.throwError(n4.Messages.InvalidModuleSpecifier);
              var t5 = this.nextToken(), r5 = this.getTokenRaw(t5);
              return this.finalize(e7, new a4.Literal(t5.value, r5));
            }, e6.prototype.parseImportSpecifier = function() {
              var e7, t5, r5 = this.createNode();
              return this.lookahead.type === 3 ? (t5 = e7 = this.parseVariableIdentifier(), this.matchContextualKeyword("as") && (this.nextToken(), t5 = this.parseVariableIdentifier())) : (t5 = e7 = this.parseIdentifierName(), this.matchContextualKeyword("as") ? (this.nextToken(), t5 = this.parseVariableIdentifier()) : this.throwUnexpectedToken(this.nextToken())), this.finalize(r5, new a4.ImportSpecifier(t5, e7));
            }, e6.prototype.parseNamedImports = function() {
              this.expect("{");
              for (var e7 = []; !this.match("}"); )
                e7.push(this.parseImportSpecifier()), this.match("}") || this.expect(",");
              return this.expect("}"), e7;
            }, e6.prototype.parseImportDefaultSpecifier = function() {
              var e7 = this.createNode(), t5 = this.parseIdentifierName();
              return this.finalize(e7, new a4.ImportDefaultSpecifier(t5));
            }, e6.prototype.parseImportNamespaceSpecifier = function() {
              var e7 = this.createNode();
              this.expect("*"), this.matchContextualKeyword("as") || this.throwError(n4.Messages.NoAsAfterImportNamespace), this.nextToken();
              var t5 = this.parseIdentifierName();
              return this.finalize(e7, new a4.ImportNamespaceSpecifier(t5));
            }, e6.prototype.parseImportDeclaration = function() {
              this.context.inFunctionBody && this.throwError(n4.Messages.IllegalImportDeclaration);
              var e7, t5 = this.createNode();
              this.expectKeyword("import");
              var r5 = [];
              if (this.lookahead.type === 8)
                e7 = this.parseModuleSpecifier();
              else {
                if (this.match("{") ? r5 = r5.concat(this.parseNamedImports()) : this.match("*") ? r5.push(this.parseImportNamespaceSpecifier()) : this.isIdentifierName(this.lookahead) && !this.matchKeyword("default") ? (r5.push(this.parseImportDefaultSpecifier()), this.match(",") && (this.nextToken(), this.match("*") ? r5.push(this.parseImportNamespaceSpecifier()) : this.match("{") ? r5 = r5.concat(this.parseNamedImports()) : this.throwUnexpectedToken(this.lookahead))) : this.throwUnexpectedToken(this.nextToken()), !this.matchContextualKeyword("from")) {
                  var s5 = this.lookahead.value ? n4.Messages.UnexpectedToken : n4.Messages.MissingFromClause;
                  this.throwError(s5, this.lookahead.value);
                }
                this.nextToken(), e7 = this.parseModuleSpecifier();
              }
              return this.consumeSemicolon(), this.finalize(t5, new a4.ImportDeclaration(r5, e7));
            }, e6.prototype.parseExportSpecifier = function() {
              var e7 = this.createNode(), t5 = this.parseIdentifierName(), r5 = t5;
              return this.matchContextualKeyword("as") && (this.nextToken(), r5 = this.parseIdentifierName()), this.finalize(e7, new a4.ExportSpecifier(t5, r5));
            }, e6.prototype.parseExportDeclaration = function() {
              this.context.inFunctionBody && this.throwError(n4.Messages.IllegalExportDeclaration);
              var e7, t5 = this.createNode();
              if (this.expectKeyword("export"), this.matchKeyword("default"))
                if (this.nextToken(), this.matchKeyword("function")) {
                  var r5 = this.parseFunctionDeclaration(true);
                  e7 = this.finalize(t5, new a4.ExportDefaultDeclaration(r5));
                } else
                  this.matchKeyword("class") ? (r5 = this.parseClassDeclaration(true), e7 = this.finalize(t5, new a4.ExportDefaultDeclaration(r5))) : this.matchContextualKeyword("async") ? (r5 = this.matchAsyncFunction() ? this.parseFunctionDeclaration(true) : this.parseAssignmentExpression(), e7 = this.finalize(t5, new a4.ExportDefaultDeclaration(r5))) : (this.matchContextualKeyword("from") && this.throwError(n4.Messages.UnexpectedToken, this.lookahead.value), r5 = this.match("{") ? this.parseObjectInitializer() : this.match("[") ? this.parseArrayInitializer() : this.parseAssignmentExpression(), this.consumeSemicolon(), e7 = this.finalize(t5, new a4.ExportDefaultDeclaration(r5)));
              else if (this.match("*")) {
                if (this.nextToken(), !this.matchContextualKeyword("from")) {
                  var s5 = this.lookahead.value ? n4.Messages.UnexpectedToken : n4.Messages.MissingFromClause;
                  this.throwError(s5, this.lookahead.value);
                }
                this.nextToken();
                var i5 = this.parseModuleSpecifier();
                this.consumeSemicolon(), e7 = this.finalize(t5, new a4.ExportAllDeclaration(i5));
              } else if (this.lookahead.type === 4) {
                switch (r5 = void 0, this.lookahead.value) {
                  case "let":
                  case "const":
                    r5 = this.parseLexicalDeclaration({inFor: false});
                    break;
                  case "var":
                  case "class":
                  case "function":
                    r5 = this.parseStatementListItem();
                    break;
                  default:
                    this.throwUnexpectedToken(this.lookahead);
                }
                e7 = this.finalize(t5, new a4.ExportNamedDeclaration(r5, [], null));
              } else if (this.matchAsyncFunction())
                r5 = this.parseFunctionDeclaration(), e7 = this.finalize(t5, new a4.ExportNamedDeclaration(r5, [], null));
              else {
                var o5 = [], l4 = null, c5 = false;
                for (this.expect("{"); !this.match("}"); )
                  c5 = c5 || this.matchKeyword("default"), o5.push(this.parseExportSpecifier()), this.match("}") || this.expect(",");
                this.expect("}"), this.matchContextualKeyword("from") ? (this.nextToken(), l4 = this.parseModuleSpecifier(), this.consumeSemicolon()) : c5 ? (s5 = this.lookahead.value ? n4.Messages.UnexpectedToken : n4.Messages.MissingFromClause, this.throwError(s5, this.lookahead.value)) : this.consumeSemicolon(), e7 = this.finalize(t5, new a4.ExportNamedDeclaration(null, o5, l4));
              }
              return e7;
            }, e6;
          }();
          t4.Parser = h4;
        }, function(e5, t4) {
          function r4(e6, t5) {
            if (!e6)
              throw new Error("ASSERT: " + t5);
          }
          Object.defineProperty(t4, "__esModule", {value: true}), t4.assert = r4;
        }, function(e5, t4) {
          Object.defineProperty(t4, "__esModule", {value: true});
          var r4 = function() {
            function e6() {
              this.errors = [], this.tolerant = false;
            }
            return e6.prototype.recordError = function(e7) {
              this.errors.push(e7);
            }, e6.prototype.tolerate = function(e7) {
              if (!this.tolerant)
                throw e7;
              this.recordError(e7);
            }, e6.prototype.constructError = function(e7, t5) {
              var r5 = new Error(e7);
              try {
                throw r5;
              } catch (s4) {
                Object.create && Object.defineProperty && (r5 = Object.create(s4), Object.defineProperty(r5, "column", {value: t5}));
              }
              return r5;
            }, e6.prototype.createError = function(e7, t5, r5, s4) {
              var i4 = "Line " + t5 + ": " + s4, n4 = this.constructError(i4, r5);
              return n4.index = e7, n4.lineNumber = t5, n4.description = s4, n4;
            }, e6.prototype.throwError = function(e7, t5, r5, s4) {
              throw this.createError(e7, t5, r5, s4);
            }, e6.prototype.tolerateError = function(e7, t5, r5, s4) {
              var i4 = this.createError(e7, t5, r5, s4);
              if (!this.tolerant)
                throw i4;
              this.recordError(i4);
            }, e6;
          }();
          t4.ErrorHandler = r4;
        }, function(e5, t4) {
          Object.defineProperty(t4, "__esModule", {value: true}), t4.Messages = {BadGetterArity: "Getter must not have any formal parameters", BadSetterArity: "Setter must have exactly one formal parameter", BadSetterRestParameter: "Setter function argument must not be a rest parameter", ConstructorIsAsync: "Class constructor may not be an async method", ConstructorSpecialMethod: "Class constructor may not be an accessor", DeclarationMissingInitializer: "Missing initializer in %0 declaration", DefaultRestParameter: "Unexpected token =", DuplicateBinding: "Duplicate binding %0", DuplicateConstructor: "A class may only have one constructor", DuplicateProtoProperty: "Duplicate __proto__ fields are not allowed in object literals", ForInOfLoopInitializer: "%0 loop variable declaration may not have an initializer", GeneratorInLegacyContext: "Generator declarations are not allowed in legacy contexts", IllegalBreak: "Illegal break statement", IllegalContinue: "Illegal continue statement", IllegalExportDeclaration: "Unexpected token", IllegalImportDeclaration: "Unexpected token", IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list", IllegalReturn: "Illegal return statement", InvalidEscapedReservedWord: "Keyword must not contain escaped characters", InvalidHexEscapeSequence: "Invalid hexadecimal escape sequence", InvalidLHSInAssignment: "Invalid left-hand side in assignment", InvalidLHSInForIn: "Invalid left-hand side in for-in", InvalidLHSInForLoop: "Invalid left-hand side in for-loop", InvalidModuleSpecifier: "Unexpected token", InvalidRegExp: "Invalid regular expression", LetInLexicalBinding: "let is disallowed as a lexically bound name", MissingFromClause: "Unexpected token", MultipleDefaultsInSwitch: "More than one default clause in switch statement", NewlineAfterThrow: "Illegal newline after throw", NoAsAfterImportNamespace: "Unexpected token", NoCatchOrFinally: "Missing catch or finally after try", ParameterAfterRestParameter: "Rest parameter must be last formal parameter", Redeclaration: "%0 '%1' has already been declared", StaticPrototype: "Classes may not have static property named prototype", StrictCatchVariable: "Catch variable may not be eval or arguments in strict mode", StrictDelete: "Delete of an unqualified identifier in strict mode.", StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block", StrictFunctionName: "Function name may not be eval or arguments in strict mode", StrictLHSAssignment: "Assignment to eval or arguments is not allowed in strict mode", StrictLHSPostfix: "Postfix increment/decrement may not have eval or arguments operand in strict mode", StrictLHSPrefix: "Prefix increment/decrement may not have eval or arguments operand in strict mode", StrictModeWith: "Strict mode code may not include a with statement", StrictOctalLiteral: "Octal literals are not allowed in strict mode.", StrictParamDupe: "Strict mode function may not have duplicate parameter names", StrictParamName: "Parameter name eval or arguments is not allowed in strict mode", StrictReservedWord: "Use of future reserved word in strict mode", StrictVarName: "Variable name may not be eval or arguments in strict mode", TemplateOctalLiteral: "Octal literals are not allowed in template strings.", UnexpectedEOS: "Unexpected end of input", UnexpectedIdentifier: "Unexpected identifier", UnexpectedNumber: "Unexpected number", UnexpectedReserved: "Unexpected reserved word", UnexpectedString: "Unexpected string", UnexpectedTemplate: "Unexpected quasi %0", UnexpectedToken: "Unexpected token %0", UnexpectedTokenIllegal: "Unexpected token ILLEGAL", UnknownLabel: "Undefined label '%0'", UnterminatedRegExp: "Invalid regular expression: missing /"};
        }, function(e5, t4, r4) {
          Object.defineProperty(t4, "__esModule", {value: true});
          var s4 = r4(9), i4 = r4(4), n4 = r4(11);
          function a4(e6) {
            return "0123456789abcdef".indexOf(e6.toLowerCase());
          }
          function o4(e6) {
            return "01234567".indexOf(e6);
          }
          var l3 = function() {
            function e6(e7, t5) {
              this.source = e7, this.errorHandler = t5, this.trackComment = false, this.isModule = false, this.length = e7.length, this.index = 0, this.lineNumber = e7.length > 0 ? 1 : 0, this.lineStart = 0, this.curlyStack = [];
            }
            return e6.prototype.saveState = function() {
              return {index: this.index, lineNumber: this.lineNumber, lineStart: this.lineStart};
            }, e6.prototype.restoreState = function(e7) {
              this.index = e7.index, this.lineNumber = e7.lineNumber, this.lineStart = e7.lineStart;
            }, e6.prototype.eof = function() {
              return this.index >= this.length;
            }, e6.prototype.throwUnexpectedToken = function(e7) {
              return e7 === void 0 && (e7 = n4.Messages.UnexpectedTokenIllegal), this.errorHandler.throwError(this.index, this.lineNumber, this.index - this.lineStart + 1, e7);
            }, e6.prototype.tolerateUnexpectedToken = function(e7) {
              e7 === void 0 && (e7 = n4.Messages.UnexpectedTokenIllegal), this.errorHandler.tolerateError(this.index, this.lineNumber, this.index - this.lineStart + 1, e7);
            }, e6.prototype.skipSingleLineComment = function(e7) {
              var t5, r5, s5 = [];
              for (this.trackComment && (s5 = [], t5 = this.index - e7, r5 = {start: {line: this.lineNumber, column: this.index - this.lineStart - e7}, end: {}}); !this.eof(); ) {
                var n5 = this.source.charCodeAt(this.index);
                if (++this.index, i4.Character.isLineTerminator(n5)) {
                  if (this.trackComment) {
                    r5.end = {line: this.lineNumber, column: this.index - this.lineStart - 1};
                    var a5 = {multiLine: false, slice: [t5 + e7, this.index - 1], range: [t5, this.index - 1], loc: r5};
                    s5.push(a5);
                  }
                  return n5 === 13 && this.source.charCodeAt(this.index) === 10 && ++this.index, ++this.lineNumber, this.lineStart = this.index, s5;
                }
              }
              return this.trackComment && (r5.end = {line: this.lineNumber, column: this.index - this.lineStart}, a5 = {multiLine: false, slice: [t5 + e7, this.index], range: [t5, this.index], loc: r5}, s5.push(a5)), s5;
            }, e6.prototype.skipMultiLineComment = function() {
              var e7, t5, r5 = [];
              for (this.trackComment && (r5 = [], e7 = this.index - 2, t5 = {start: {line: this.lineNumber, column: this.index - this.lineStart - 2}, end: {}}); !this.eof(); ) {
                var s5 = this.source.charCodeAt(this.index);
                if (i4.Character.isLineTerminator(s5))
                  s5 === 13 && this.source.charCodeAt(this.index + 1) === 10 && ++this.index, ++this.lineNumber, ++this.index, this.lineStart = this.index;
                else if (s5 === 42) {
                  if (this.source.charCodeAt(this.index + 1) === 47) {
                    if (this.index += 2, this.trackComment) {
                      t5.end = {line: this.lineNumber, column: this.index - this.lineStart};
                      var n5 = {multiLine: true, slice: [e7 + 2, this.index - 2], range: [e7, this.index], loc: t5};
                      r5.push(n5);
                    }
                    return r5;
                  }
                  ++this.index;
                } else
                  ++this.index;
              }
              return this.trackComment && (t5.end = {line: this.lineNumber, column: this.index - this.lineStart}, n5 = {multiLine: true, slice: [e7 + 2, this.index], range: [e7, this.index], loc: t5}, r5.push(n5)), this.tolerateUnexpectedToken(), r5;
            }, e6.prototype.scanComments = function() {
              var e7;
              this.trackComment && (e7 = []);
              for (var t5 = this.index === 0; !this.eof(); ) {
                var r5 = this.source.charCodeAt(this.index);
                if (i4.Character.isWhiteSpace(r5))
                  ++this.index;
                else if (i4.Character.isLineTerminator(r5))
                  ++this.index, r5 === 13 && this.source.charCodeAt(this.index) === 10 && ++this.index, ++this.lineNumber, this.lineStart = this.index, t5 = true;
                else if (r5 === 47)
                  if ((r5 = this.source.charCodeAt(this.index + 1)) === 47) {
                    this.index += 2;
                    var s5 = this.skipSingleLineComment(2);
                    this.trackComment && (e7 = e7.concat(s5)), t5 = true;
                  } else {
                    if (r5 !== 42)
                      break;
                    this.index += 2, s5 = this.skipMultiLineComment(), this.trackComment && (e7 = e7.concat(s5));
                  }
                else if (t5 && r5 === 45) {
                  if (this.source.charCodeAt(this.index + 1) !== 45 || this.source.charCodeAt(this.index + 2) !== 62)
                    break;
                  this.index += 3, s5 = this.skipSingleLineComment(3), this.trackComment && (e7 = e7.concat(s5));
                } else {
                  if (r5 !== 60 || this.isModule)
                    break;
                  if (this.source.slice(this.index + 1, this.index + 4) !== "!--")
                    break;
                  this.index += 4, s5 = this.skipSingleLineComment(4), this.trackComment && (e7 = e7.concat(s5));
                }
              }
              return e7;
            }, e6.prototype.isFutureReservedWord = function(e7) {
              switch (e7) {
                case "enum":
                case "export":
                case "import":
                case "super":
                  return true;
                default:
                  return false;
              }
            }, e6.prototype.isStrictModeReservedWord = function(e7) {
              switch (e7) {
                case "implements":
                case "interface":
                case "package":
                case "private":
                case "protected":
                case "public":
                case "static":
                case "yield":
                case "let":
                  return true;
                default:
                  return false;
              }
            }, e6.prototype.isRestrictedWord = function(e7) {
              return e7 === "eval" || e7 === "arguments";
            }, e6.prototype.isKeyword = function(e7) {
              switch (e7.length) {
                case 2:
                  return e7 === "if" || e7 === "in" || e7 === "do";
                case 3:
                  return e7 === "var" || e7 === "for" || e7 === "new" || e7 === "try" || e7 === "let";
                case 4:
                  return e7 === "this" || e7 === "else" || e7 === "case" || e7 === "void" || e7 === "with" || e7 === "enum";
                case 5:
                  return e7 === "while" || e7 === "break" || e7 === "catch" || e7 === "throw" || e7 === "const" || e7 === "yield" || e7 === "class" || e7 === "super";
                case 6:
                  return e7 === "return" || e7 === "typeof" || e7 === "delete" || e7 === "switch" || e7 === "export" || e7 === "import";
                case 7:
                  return e7 === "default" || e7 === "finally" || e7 === "extends";
                case 8:
                  return e7 === "function" || e7 === "continue" || e7 === "debugger";
                case 10:
                  return e7 === "instanceof";
                default:
                  return false;
              }
            }, e6.prototype.codePointAt = function(e7) {
              var t5 = this.source.charCodeAt(e7);
              if (t5 >= 55296 && t5 <= 56319) {
                var r5 = this.source.charCodeAt(e7 + 1);
                r5 >= 56320 && r5 <= 57343 && (t5 = 1024 * (t5 - 55296) + r5 - 56320 + 65536);
              }
              return t5;
            }, e6.prototype.scanHexEscape = function(e7) {
              for (var t5 = e7 === "u" ? 4 : 2, r5 = 0, s5 = 0; s5 < t5; ++s5) {
                if (this.eof() || !i4.Character.isHexDigit(this.source.charCodeAt(this.index)))
                  return null;
                r5 = 16 * r5 + a4(this.source[this.index++]);
              }
              return String.fromCharCode(r5);
            }, e6.prototype.scanUnicodeCodePointEscape = function() {
              var e7 = this.source[this.index], t5 = 0;
              for (e7 === "}" && this.throwUnexpectedToken(); !this.eof() && (e7 = this.source[this.index++], i4.Character.isHexDigit(e7.charCodeAt(0))); )
                t5 = 16 * t5 + a4(e7);
              return (t5 > 1114111 || e7 !== "}") && this.throwUnexpectedToken(), i4.Character.fromCodePoint(t5);
            }, e6.prototype.getIdentifier = function() {
              for (var e7 = this.index++; !this.eof(); ) {
                var t5 = this.source.charCodeAt(this.index);
                if (t5 === 92)
                  return this.index = e7, this.getComplexIdentifier();
                if (t5 >= 55296 && t5 < 57343)
                  return this.index = e7, this.getComplexIdentifier();
                if (!i4.Character.isIdentifierPart(t5))
                  break;
                ++this.index;
              }
              return this.source.slice(e7, this.index);
            }, e6.prototype.getComplexIdentifier = function() {
              var e7, t5 = this.codePointAt(this.index), r5 = i4.Character.fromCodePoint(t5);
              for (this.index += r5.length, t5 === 92 && (this.source.charCodeAt(this.index) !== 117 && this.throwUnexpectedToken(), ++this.index, this.source[this.index] === "{" ? (++this.index, e7 = this.scanUnicodeCodePointEscape()) : (e7 = this.scanHexEscape("u")) !== null && e7 !== "\\" && i4.Character.isIdentifierStart(e7.charCodeAt(0)) || this.throwUnexpectedToken(), r5 = e7); !this.eof() && (t5 = this.codePointAt(this.index), i4.Character.isIdentifierPart(t5)); )
                r5 += e7 = i4.Character.fromCodePoint(t5), this.index += e7.length, t5 === 92 && (r5 = r5.substr(0, r5.length - 1), this.source.charCodeAt(this.index) !== 117 && this.throwUnexpectedToken(), ++this.index, this.source[this.index] === "{" ? (++this.index, e7 = this.scanUnicodeCodePointEscape()) : (e7 = this.scanHexEscape("u")) !== null && e7 !== "\\" && i4.Character.isIdentifierPart(e7.charCodeAt(0)) || this.throwUnexpectedToken(), r5 += e7);
              return r5;
            }, e6.prototype.octalToDecimal = function(e7) {
              var t5 = e7 !== "0", r5 = o4(e7);
              return !this.eof() && i4.Character.isOctalDigit(this.source.charCodeAt(this.index)) && (t5 = true, r5 = 8 * r5 + o4(this.source[this.index++]), "0123".indexOf(e7) >= 0 && !this.eof() && i4.Character.isOctalDigit(this.source.charCodeAt(this.index)) && (r5 = 8 * r5 + o4(this.source[this.index++]))), {code: r5, octal: t5};
            }, e6.prototype.scanIdentifier = function() {
              var e7, t5 = this.index, r5 = this.source.charCodeAt(t5) === 92 ? this.getComplexIdentifier() : this.getIdentifier();
              if ((e7 = r5.length === 1 ? 3 : this.isKeyword(r5) ? 4 : r5 === "null" ? 5 : r5 === "true" || r5 === "false" ? 1 : 3) != 3 && t5 + r5.length !== this.index) {
                var s5 = this.index;
                this.index = t5, this.tolerateUnexpectedToken(n4.Messages.InvalidEscapedReservedWord), this.index = s5;
              }
              return {type: e7, value: r5, lineNumber: this.lineNumber, lineStart: this.lineStart, start: t5, end: this.index};
            }, e6.prototype.scanPunctuator = function() {
              var e7 = this.index, t5 = this.source[this.index];
              switch (t5) {
                case "(":
                case "{":
                  t5 === "{" && this.curlyStack.push("{"), ++this.index;
                  break;
                case ".":
                  ++this.index, this.source[this.index] === "." && this.source[this.index + 1] === "." && (this.index += 2, t5 = "...");
                  break;
                case "}":
                  ++this.index, this.curlyStack.pop();
                  break;
                case ")":
                case ";":
                case ",":
                case "[":
                case "]":
                case ":":
                case "?":
                case "~":
                  ++this.index;
                  break;
                default:
                  (t5 = this.source.substr(this.index, 4)) === ">>>=" ? this.index += 4 : (t5 = t5.substr(0, 3)) === "===" || t5 === "!==" || t5 === ">>>" || t5 === "<<=" || t5 === ">>=" || t5 === "**=" ? this.index += 3 : (t5 = t5.substr(0, 2)) === "&&" || t5 === "||" || t5 === "==" || t5 === "!=" || t5 === "+=" || t5 === "-=" || t5 === "*=" || t5 === "/=" || t5 === "++" || t5 === "--" || t5 === "<<" || t5 === ">>" || t5 === "&=" || t5 === "|=" || t5 === "^=" || t5 === "%=" || t5 === "<=" || t5 === ">=" || t5 === "=>" || t5 === "**" ? this.index += 2 : (t5 = this.source[this.index], "<>=!+-*%&|^/".indexOf(t5) >= 0 && ++this.index);
              }
              return this.index === e7 && this.throwUnexpectedToken(), {type: 7, value: t5, lineNumber: this.lineNumber, lineStart: this.lineStart, start: e7, end: this.index};
            }, e6.prototype.scanHexLiteral = function(e7) {
              for (var t5 = ""; !this.eof() && i4.Character.isHexDigit(this.source.charCodeAt(this.index)); )
                t5 += this.source[this.index++];
              return t5.length === 0 && this.throwUnexpectedToken(), i4.Character.isIdentifierStart(this.source.charCodeAt(this.index)) && this.throwUnexpectedToken(), {type: 6, value: parseInt("0x" + t5, 16), lineNumber: this.lineNumber, lineStart: this.lineStart, start: e7, end: this.index};
            }, e6.prototype.scanBinaryLiteral = function(e7) {
              for (var t5, r5 = ""; !this.eof() && ((t5 = this.source[this.index]) === "0" || t5 === "1"); )
                r5 += this.source[this.index++];
              return r5.length === 0 && this.throwUnexpectedToken(), this.eof() || (t5 = this.source.charCodeAt(this.index), (i4.Character.isIdentifierStart(t5) || i4.Character.isDecimalDigit(t5)) && this.throwUnexpectedToken()), {type: 6, value: parseInt(r5, 2), lineNumber: this.lineNumber, lineStart: this.lineStart, start: e7, end: this.index};
            }, e6.prototype.scanOctalLiteral = function(e7, t5) {
              var r5 = "", s5 = false;
              for (i4.Character.isOctalDigit(e7.charCodeAt(0)) ? (s5 = true, r5 = "0" + this.source[this.index++]) : ++this.index; !this.eof() && i4.Character.isOctalDigit(this.source.charCodeAt(this.index)); )
                r5 += this.source[this.index++];
              return s5 || r5.length !== 0 || this.throwUnexpectedToken(), (i4.Character.isIdentifierStart(this.source.charCodeAt(this.index)) || i4.Character.isDecimalDigit(this.source.charCodeAt(this.index))) && this.throwUnexpectedToken(), {type: 6, value: parseInt(r5, 8), octal: s5, lineNumber: this.lineNumber, lineStart: this.lineStart, start: t5, end: this.index};
            }, e6.prototype.isImplicitOctalLiteral = function() {
              for (var e7 = this.index + 1; e7 < this.length; ++e7) {
                var t5 = this.source[e7];
                if (t5 === "8" || t5 === "9")
                  return false;
                if (!i4.Character.isOctalDigit(t5.charCodeAt(0)))
                  return true;
              }
              return true;
            }, e6.prototype.scanNumericLiteral = function() {
              var e7 = this.index, t5 = this.source[e7];
              s4.assert(i4.Character.isDecimalDigit(t5.charCodeAt(0)) || t5 === ".", "Numeric literal must start with a decimal digit or a decimal point");
              var r5 = "";
              if (t5 !== ".") {
                if (r5 = this.source[this.index++], t5 = this.source[this.index], r5 === "0") {
                  if (t5 === "x" || t5 === "X")
                    return ++this.index, this.scanHexLiteral(e7);
                  if (t5 === "b" || t5 === "B")
                    return ++this.index, this.scanBinaryLiteral(e7);
                  if (t5 === "o" || t5 === "O")
                    return this.scanOctalLiteral(t5, e7);
                  if (t5 && i4.Character.isOctalDigit(t5.charCodeAt(0)) && this.isImplicitOctalLiteral())
                    return this.scanOctalLiteral(t5, e7);
                }
                for (; i4.Character.isDecimalDigit(this.source.charCodeAt(this.index)); )
                  r5 += this.source[this.index++];
                t5 = this.source[this.index];
              }
              if (t5 === ".") {
                for (r5 += this.source[this.index++]; i4.Character.isDecimalDigit(this.source.charCodeAt(this.index)); )
                  r5 += this.source[this.index++];
                t5 = this.source[this.index];
              }
              if (t5 === "e" || t5 === "E")
                if (r5 += this.source[this.index++], (t5 = this.source[this.index]) !== "+" && t5 !== "-" || (r5 += this.source[this.index++]), i4.Character.isDecimalDigit(this.source.charCodeAt(this.index)))
                  for (; i4.Character.isDecimalDigit(this.source.charCodeAt(this.index)); )
                    r5 += this.source[this.index++];
                else
                  this.throwUnexpectedToken();
              return i4.Character.isIdentifierStart(this.source.charCodeAt(this.index)) && this.throwUnexpectedToken(), {type: 6, value: parseFloat(r5), lineNumber: this.lineNumber, lineStart: this.lineStart, start: e7, end: this.index};
            }, e6.prototype.scanStringLiteral = function() {
              var e7 = this.index, t5 = this.source[e7];
              s4.assert(t5 === "'" || t5 === '"', "String literal must starts with a quote"), ++this.index;
              for (var r5 = false, a5 = ""; !this.eof(); ) {
                var o5 = this.source[this.index++];
                if (o5 === t5) {
                  t5 = "";
                  break;
                }
                if (o5 === "\\")
                  if ((o5 = this.source[this.index++]) && i4.Character.isLineTerminator(o5.charCodeAt(0)))
                    ++this.lineNumber, o5 === "\r" && this.source[this.index] === "\n" && ++this.index, this.lineStart = this.index;
                  else
                    switch (o5) {
                      case "u":
                        if (this.source[this.index] === "{")
                          ++this.index, a5 += this.scanUnicodeCodePointEscape();
                        else {
                          var l4 = this.scanHexEscape(o5);
                          l4 === null && this.throwUnexpectedToken(), a5 += l4;
                        }
                        break;
                      case "x":
                        var c4 = this.scanHexEscape(o5);
                        c4 === null && this.throwUnexpectedToken(n4.Messages.InvalidHexEscapeSequence), a5 += c4;
                        break;
                      case "n":
                        a5 += "\n";
                        break;
                      case "r":
                        a5 += "\r";
                        break;
                      case "t":
                        a5 += "	";
                        break;
                      case "b":
                        a5 += "\b";
                        break;
                      case "f":
                        a5 += "\f";
                        break;
                      case "v":
                        a5 += "\v";
                        break;
                      case "8":
                      case "9":
                        a5 += o5, this.tolerateUnexpectedToken();
                        break;
                      default:
                        if (o5 && i4.Character.isOctalDigit(o5.charCodeAt(0))) {
                          var u3 = this.octalToDecimal(o5);
                          r5 = u3.octal || r5, a5 += String.fromCharCode(u3.code);
                        } else
                          a5 += o5;
                    }
                else {
                  if (i4.Character.isLineTerminator(o5.charCodeAt(0)))
                    break;
                  a5 += o5;
                }
              }
              return t5 !== "" && (this.index = e7, this.throwUnexpectedToken()), {type: 8, value: a5, octal: r5, lineNumber: this.lineNumber, lineStart: this.lineStart, start: e7, end: this.index};
            }, e6.prototype.scanTemplate = function() {
              var e7 = "", t5 = false, r5 = this.index, s5 = this.source[r5] === "`", a5 = false, o5 = 2;
              for (++this.index; !this.eof(); ) {
                var l4 = this.source[this.index++];
                if (l4 === "`") {
                  o5 = 1, a5 = true, t5 = true;
                  break;
                }
                if (l4 === "$") {
                  if (this.source[this.index] === "{") {
                    this.curlyStack.push("${"), ++this.index, t5 = true;
                    break;
                  }
                  e7 += l4;
                } else if (l4 === "\\")
                  if (l4 = this.source[this.index++], i4.Character.isLineTerminator(l4.charCodeAt(0)))
                    ++this.lineNumber, l4 === "\r" && this.source[this.index] === "\n" && ++this.index, this.lineStart = this.index;
                  else
                    switch (l4) {
                      case "n":
                        e7 += "\n";
                        break;
                      case "r":
                        e7 += "\r";
                        break;
                      case "t":
                        e7 += "	";
                        break;
                      case "u":
                        if (this.source[this.index] === "{")
                          ++this.index, e7 += this.scanUnicodeCodePointEscape();
                        else {
                          var c4 = this.index, u3 = this.scanHexEscape(l4);
                          u3 !== null ? e7 += u3 : (this.index = c4, e7 += l4);
                        }
                        break;
                      case "x":
                        var h4 = this.scanHexEscape(l4);
                        h4 === null && this.throwUnexpectedToken(n4.Messages.InvalidHexEscapeSequence), e7 += h4;
                        break;
                      case "b":
                        e7 += "\b";
                        break;
                      case "f":
                        e7 += "\f";
                        break;
                      case "v":
                        e7 += "\v";
                        break;
                      default:
                        l4 === "0" ? (i4.Character.isDecimalDigit(this.source.charCodeAt(this.index)) && this.throwUnexpectedToken(n4.Messages.TemplateOctalLiteral), e7 += "\0") : i4.Character.isOctalDigit(l4.charCodeAt(0)) ? this.throwUnexpectedToken(n4.Messages.TemplateOctalLiteral) : e7 += l4;
                    }
                else
                  i4.Character.isLineTerminator(l4.charCodeAt(0)) ? (++this.lineNumber, l4 === "\r" && this.source[this.index] === "\n" && ++this.index, this.lineStart = this.index, e7 += "\n") : e7 += l4;
              }
              return t5 || this.throwUnexpectedToken(), s5 || this.curlyStack.pop(), {type: 10, value: this.source.slice(r5 + 1, this.index - o5), cooked: e7, head: s5, tail: a5, lineNumber: this.lineNumber, lineStart: this.lineStart, start: r5, end: this.index};
            }, e6.prototype.testRegExp = function(e7, t5) {
              var r5 = "\uFFFF", s5 = e7, i5 = this;
              t5.indexOf("u") >= 0 && (s5 = s5.replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g, function(e8, t6, s6) {
                var a5 = parseInt(t6 || s6, 16);
                return a5 > 1114111 && i5.throwUnexpectedToken(n4.Messages.InvalidRegExp), a5 <= 65535 ? String.fromCharCode(a5) : r5;
              }).replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, r5));
              try {
                RegExp(s5);
              } catch (a5) {
                this.throwUnexpectedToken(n4.Messages.InvalidRegExp);
              }
              try {
                return new RegExp(e7, t5);
              } catch (o5) {
                return null;
              }
            }, e6.prototype.scanRegExpBody = function() {
              var e7 = this.source[this.index];
              s4.assert(e7 === "/", "Regular expression literal must start with a slash");
              for (var t5 = this.source[this.index++], r5 = false, a5 = false; !this.eof(); )
                if (t5 += e7 = this.source[this.index++], e7 === "\\")
                  e7 = this.source[this.index++], i4.Character.isLineTerminator(e7.charCodeAt(0)) && this.throwUnexpectedToken(n4.Messages.UnterminatedRegExp), t5 += e7;
                else if (i4.Character.isLineTerminator(e7.charCodeAt(0)))
                  this.throwUnexpectedToken(n4.Messages.UnterminatedRegExp);
                else if (r5)
                  e7 === "]" && (r5 = false);
                else {
                  if (e7 === "/") {
                    a5 = true;
                    break;
                  }
                  e7 === "[" && (r5 = true);
                }
              return a5 || this.throwUnexpectedToken(n4.Messages.UnterminatedRegExp), t5.substr(1, t5.length - 2);
            }, e6.prototype.scanRegExpFlags = function() {
              for (var e7 = ""; !this.eof(); ) {
                var t5 = this.source[this.index];
                if (!i4.Character.isIdentifierPart(t5.charCodeAt(0)))
                  break;
                if (++this.index, t5 !== "\\" || this.eof())
                  e7 += t5;
                else if ((t5 = this.source[this.index]) === "u") {
                  ++this.index;
                  var r5 = this.index, s5 = this.scanHexEscape("u");
                  if (s5 !== null)
                    for (e7 += s5; r5 < this.index; ++r5)
                      this.source[r5];
                  else
                    this.index = r5, e7 += "u";
                  this.tolerateUnexpectedToken();
                } else
                  this.tolerateUnexpectedToken();
              }
              return e7;
            }, e6.prototype.scanRegExp = function() {
              var e7 = this.index, t5 = this.scanRegExpBody(), r5 = this.scanRegExpFlags();
              return {type: 9, value: "", pattern: t5, flags: r5, regex: this.testRegExp(t5, r5), lineNumber: this.lineNumber, lineStart: this.lineStart, start: e7, end: this.index};
            }, e6.prototype.lex = function() {
              if (this.eof())
                return {type: 2, value: "", lineNumber: this.lineNumber, lineStart: this.lineStart, start: this.index, end: this.index};
              var e7 = this.source.charCodeAt(this.index);
              return i4.Character.isIdentifierStart(e7) ? this.scanIdentifier() : e7 === 40 || e7 === 41 || e7 === 59 ? this.scanPunctuator() : e7 === 39 || e7 === 34 ? this.scanStringLiteral() : e7 === 46 ? i4.Character.isDecimalDigit(this.source.charCodeAt(this.index + 1)) ? this.scanNumericLiteral() : this.scanPunctuator() : i4.Character.isDecimalDigit(e7) ? this.scanNumericLiteral() : e7 === 96 || e7 === 125 && this.curlyStack[this.curlyStack.length - 1] === "${" ? this.scanTemplate() : e7 >= 55296 && e7 < 57343 && i4.Character.isIdentifierStart(this.codePointAt(this.index)) ? this.scanIdentifier() : this.scanPunctuator();
            }, e6;
          }();
          t4.Scanner = l3;
        }, function(e5, t4) {
          Object.defineProperty(t4, "__esModule", {value: true}), t4.TokenName = {}, t4.TokenName[1] = "Boolean", t4.TokenName[2] = "<end>", t4.TokenName[3] = "Identifier", t4.TokenName[4] = "Keyword", t4.TokenName[5] = "Null", t4.TokenName[6] = "Numeric", t4.TokenName[7] = "Punctuator", t4.TokenName[8] = "String", t4.TokenName[9] = "RegularExpression", t4.TokenName[10] = "Template";
        }, function(e5, t4) {
          Object.defineProperty(t4, "__esModule", {value: true}), t4.XHTMLEntities = {quot: '"', amp: "&", apos: "'", gt: ">", nbsp: "\xA0", iexcl: "\xA1", cent: "\xA2", pound: "\xA3", curren: "\xA4", yen: "\xA5", brvbar: "\xA6", sect: "\xA7", uml: "\xA8", copy: "\xA9", ordf: "\xAA", laquo: "\xAB", not: "\xAC", shy: "\xAD", reg: "\xAE", macr: "\xAF", deg: "\xB0", plusmn: "\xB1", sup2: "\xB2", sup3: "\xB3", acute: "\xB4", micro: "\xB5", para: "\xB6", middot: "\xB7", cedil: "\xB8", sup1: "\xB9", ordm: "\xBA", raquo: "\xBB", frac14: "\xBC", frac12: "\xBD", frac34: "\xBE", iquest: "\xBF", Agrave: "\xC0", Aacute: "\xC1", Acirc: "\xC2", Atilde: "\xC3", Auml: "\xC4", Aring: "\xC5", AElig: "\xC6", Ccedil: "\xC7", Egrave: "\xC8", Eacute: "\xC9", Ecirc: "\xCA", Euml: "\xCB", Igrave: "\xCC", Iacute: "\xCD", Icirc: "\xCE", Iuml: "\xCF", ETH: "\xD0", Ntilde: "\xD1", Ograve: "\xD2", Oacute: "\xD3", Ocirc: "\xD4", Otilde: "\xD5", Ouml: "\xD6", times: "\xD7", Oslash: "\xD8", Ugrave: "\xD9", Uacute: "\xDA", Ucirc: "\xDB", Uuml: "\xDC", Yacute: "\xDD", THORN: "\xDE", szlig: "\xDF", agrave: "\xE0", aacute: "\xE1", acirc: "\xE2", atilde: "\xE3", auml: "\xE4", aring: "\xE5", aelig: "\xE6", ccedil: "\xE7", egrave: "\xE8", eacute: "\xE9", ecirc: "\xEA", euml: "\xEB", igrave: "\xEC", iacute: "\xED", icirc: "\xEE", iuml: "\xEF", eth: "\xF0", ntilde: "\xF1", ograve: "\xF2", oacute: "\xF3", ocirc: "\xF4", otilde: "\xF5", ouml: "\xF6", divide: "\xF7", oslash: "\xF8", ugrave: "\xF9", uacute: "\xFA", ucirc: "\xFB", uuml: "\xFC", yacute: "\xFD", thorn: "\xFE", yuml: "\xFF", OElig: "\u0152", oelig: "\u0153", Scaron: "\u0160", scaron: "\u0161", Yuml: "\u0178", fnof: "\u0192", circ: "\u02C6", tilde: "\u02DC", Alpha: "\u0391", Beta: "\u0392", Gamma: "\u0393", Delta: "\u0394", Epsilon: "\u0395", Zeta: "\u0396", Eta: "\u0397", Theta: "\u0398", Iota: "\u0399", Kappa: "\u039A", Lambda: "\u039B", Mu: "\u039C", Nu: "\u039D", Xi: "\u039E", Omicron: "\u039F", Pi: "\u03A0", Rho: "\u03A1", Sigma: "\u03A3", Tau: "\u03A4", Upsilon: "\u03A5", Phi: "\u03A6", Chi: "\u03A7", Psi: "\u03A8", Omega: "\u03A9", alpha: "\u03B1", beta: "\u03B2", gamma: "\u03B3", delta: "\u03B4", epsilon: "\u03B5", zeta: "\u03B6", eta: "\u03B7", theta: "\u03B8", iota: "\u03B9", kappa: "\u03BA", lambda: "\u03BB", mu: "\u03BC", nu: "\u03BD", xi: "\u03BE", omicron: "\u03BF", pi: "\u03C0", rho: "\u03C1", sigmaf: "\u03C2", sigma: "\u03C3", tau: "\u03C4", upsilon: "\u03C5", phi: "\u03C6", chi: "\u03C7", psi: "\u03C8", omega: "\u03C9", thetasym: "\u03D1", upsih: "\u03D2", piv: "\u03D6", ensp: "\u2002", emsp: "\u2003", thinsp: "\u2009", zwnj: "\u200C", zwj: "\u200D", lrm: "\u200E", rlm: "\u200F", ndash: "\u2013", mdash: "\u2014", lsquo: "\u2018", rsquo: "\u2019", sbquo: "\u201A", ldquo: "\u201C", rdquo: "\u201D", bdquo: "\u201E", dagger: "\u2020", Dagger: "\u2021", bull: "\u2022", hellip: "\u2026", permil: "\u2030", prime: "\u2032", Prime: "\u2033", lsaquo: "\u2039", rsaquo: "\u203A", oline: "\u203E", frasl: "\u2044", euro: "\u20AC", image: "\u2111", weierp: "\u2118", real: "\u211C", trade: "\u2122", alefsym: "\u2135", larr: "\u2190", uarr: "\u2191", rarr: "\u2192", darr: "\u2193", harr: "\u2194", crarr: "\u21B5", lArr: "\u21D0", uArr: "\u21D1", rArr: "\u21D2", dArr: "\u21D3", hArr: "\u21D4", forall: "\u2200", part: "\u2202", exist: "\u2203", empty: "\u2205", nabla: "\u2207", isin: "\u2208", notin: "\u2209", ni: "\u220B", prod: "\u220F", sum: "\u2211", minus: "\u2212", lowast: "\u2217", radic: "\u221A", prop: "\u221D", infin: "\u221E", ang: "\u2220", and: "\u2227", or: "\u2228", cap: "\u2229", cup: "\u222A", int: "\u222B", there4: "\u2234", sim: "\u223C", cong: "\u2245", asymp: "\u2248", ne: "\u2260", equiv: "\u2261", le: "\u2264", ge: "\u2265", sub: "\u2282", sup: "\u2283", nsub: "\u2284", sube: "\u2286", supe: "\u2287", oplus: "\u2295", otimes: "\u2297", perp: "\u22A5", sdot: "\u22C5", lceil: "\u2308", rceil: "\u2309", lfloor: "\u230A", rfloor: "\u230B", loz: "\u25CA", spades: "\u2660", clubs: "\u2663", hearts: "\u2665", diams: "\u2666", lang: "\u27E8", rang: "\u27E9"};
        }, function(e5, t4, r4) {
          Object.defineProperty(t4, "__esModule", {value: true});
          var s4 = r4(10), i4 = r4(12), n4 = r4(13), a4 = function() {
            function e6() {
              this.values = [], this.curly = this.paren = -1;
            }
            return e6.prototype.beforeFunctionExpression = function(e7) {
              return ["(", "{", "[", "in", "typeof", "instanceof", "new", "return", "case", "delete", "throw", "void", "=", "+=", "-=", "*=", "**=", "/=", "%=", "<<=", ">>=", ">>>=", "&=", "|=", "^=", ",", "+", "-", "*", "**", "/", "%", "++", "--", "<<", ">>", ">>>", "&", "|", "^", "!", "~", "&&", "||", "?", ":", "===", "==", ">=", "<=", "<", ">", "!=", "!=="].indexOf(e7) >= 0;
            }, e6.prototype.isRegexStart = function() {
              var e7 = this.values[this.values.length - 1], t5 = e7 !== null;
              switch (e7) {
                case "this":
                case "]":
                  t5 = false;
                  break;
                case ")":
                  var r5 = this.values[this.paren - 1];
                  t5 = r5 === "if" || r5 === "while" || r5 === "for" || r5 === "with";
                  break;
                case "}":
                  if (t5 = false, this.values[this.curly - 3] === "function")
                    t5 = !!(s5 = this.values[this.curly - 4]) && !this.beforeFunctionExpression(s5);
                  else if (this.values[this.curly - 4] === "function") {
                    var s5;
                    t5 = !(s5 = this.values[this.curly - 5]) || !this.beforeFunctionExpression(s5);
                  }
              }
              return t5;
            }, e6.prototype.push = function(e7) {
              e7.type === 7 || e7.type === 4 ? (e7.value === "{" ? this.curly = this.values.length : e7.value === "(" && (this.paren = this.values.length), this.values.push(e7.value)) : this.values.push(null);
            }, e6;
          }(), o4 = function() {
            function e6(e7, t5) {
              this.errorHandler = new s4.ErrorHandler(), this.errorHandler.tolerant = !!t5 && typeof t5.tolerant == "boolean" && t5.tolerant, this.scanner = new i4.Scanner(e7, this.errorHandler), this.scanner.trackComment = !!t5 && typeof t5.comment == "boolean" && t5.comment, this.trackRange = !!t5 && typeof t5.range == "boolean" && t5.range, this.trackLoc = !!t5 && typeof t5.loc == "boolean" && t5.loc, this.buffer = [], this.reader = new a4();
            }
            return e6.prototype.errors = function() {
              return this.errorHandler.errors;
            }, e6.prototype.getNextToken = function() {
              if (this.buffer.length === 0) {
                var e7 = this.scanner.scanComments();
                if (this.scanner.trackComment)
                  for (var t5 = 0; t5 < e7.length; ++t5) {
                    var r5 = e7[t5], s5 = this.scanner.source.slice(r5.slice[0], r5.slice[1]), i5 = {type: r5.multiLine ? "BlockComment" : "LineComment", value: s5};
                    this.trackRange && (i5.range = r5.range), this.trackLoc && (i5.loc = r5.loc), this.buffer.push(i5);
                  }
                if (!this.scanner.eof()) {
                  var a5 = void 0;
                  this.trackLoc && (a5 = {start: {line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart}, end: {}});
                  var o5 = this.scanner.source[this.scanner.index] === "/" && this.reader.isRegexStart() ? this.scanner.scanRegExp() : this.scanner.lex();
                  this.reader.push(o5);
                  var l3 = {type: n4.TokenName[o5.type], value: this.scanner.source.slice(o5.start, o5.end)};
                  if (this.trackRange && (l3.range = [o5.start, o5.end]), this.trackLoc && (a5.end = {line: this.scanner.lineNumber, column: this.scanner.index - this.scanner.lineStart}, l3.loc = a5), o5.type === 9) {
                    var c4 = o5.pattern, u3 = o5.flags;
                    l3.regex = {pattern: c4, flags: u3};
                  }
                  this.buffer.push(l3);
                }
              }
              return this.buffer.shift();
            }, e6;
          }();
          t4.Tokenizer = o4;
        }]);
      });
    }), Ts = f3(function(e4, t3) {
      function r4(e5, t4) {
        var r5 = [], s4 = As.parse(e5, {loc: true, locations: true, comment: true, onComment: r5, range: Ss.getOption(t4, "range", false), tolerant: Ss.getOption(t4, "tolerant", true), tokens: true, jsx: Ss.getOption(t4, "jsx", false)});
        return Array.isArray(s4.comments) || (s4.comments = r5), s4;
      }
      Object.defineProperty(t3, "__esModule", {value: true}), t3.parse = void 0, t3.parse = r4;
    });
    function ws() {
      if (xs === void 0) {
        var e4 = new ArrayBuffer(2), t3 = new Uint8Array(e4), r4 = new Uint16Array(e4);
        if (t3[0] = 1, t3[1] = 2, r4[0] === 258)
          xs = "BE";
        else {
          if (r4[0] !== 513)
            throw new Error("unable to figure out endianess");
          xs = "LE";
        }
      }
      return xs;
    }
    function Cs() {
      return i3.location !== void 0 ? i3.location.hostname : "";
    }
    function Ps() {
      return [];
    }
    function Ds() {
      return 0;
    }
    function ks() {
      return Number.MAX_VALUE;
    }
    function Ns() {
      return Number.MAX_VALUE;
    }
    function Is() {
      return [];
    }
    function Fs() {
      return "Browser";
    }
    function Ms() {
      return i3.navigator !== void 0 ? i3.navigator.appVersion : "";
    }
    function Ls() {
    }
    function Os() {
    }
    function _s() {
      return "javascript";
    }
    function Bs() {
      return "browser";
    }
    function Rs() {
      return "/tmp";
    }
    var js = Rs, Us = "\n", qs2 = {EOL: Us, tmpdir: js, tmpDir: Rs, networkInterfaces: Ls, getNetworkInterfaces: Os, release: Ms, type: Fs, cpus: Is, totalmem: Ns, freemem: ks, uptime: Ds, loadavg: Ps, hostname: Cs, endianness: ws}, zs = d3(Object.freeze({__proto__: null, endianness: ws, hostname: Cs, loadavg: Ps, uptime: Ds, freemem: ks, totalmem: Ns, cpus: Is, type: Fs, release: Ms, networkInterfaces: Ls, getNetworkInterfaces: Os, arch: _s, platform: Bs, tmpDir: Rs, tmpdir: js, EOL: Us, default: qs2})), Vs = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true}), t3.normalize = void 0;
      var r4 = {parser: Ts, tabWidth: 4, useTabs: false, reuseWhitespace: true, lineTerminator: zs.EOL || "\n", wrapColumn: 74, sourceFileName: null, sourceMapName: null, sourceRoot: null, inputSourceMap: null, range: false, tolerant: true, quote: null, trailingComma: false, arrayBracketSpacing: false, objectCurlySpacing: true, arrowParensAlways: false, flowObjectCommas: true, tokens: true}, s4 = r4.hasOwnProperty;
      function i4(e5) {
        var t4 = e5 || r4;
        function i5(e6) {
          return s4.call(t4, e6) ? t4[e6] : r4[e6];
        }
        return {tabWidth: +i5("tabWidth"), useTabs: !!i5("useTabs"), reuseWhitespace: !!i5("reuseWhitespace"), lineTerminator: i5("lineTerminator"), wrapColumn: Math.max(i5("wrapColumn"), 0), sourceFileName: i5("sourceFileName"), sourceMapName: i5("sourceMapName"), sourceRoot: i5("sourceRoot"), inputSourceMap: i5("inputSourceMap"), parser: i5("esprima") || i5("parser"), range: i5("range"), tolerant: i5("tolerant"), quote: i5("quote"), trailingComma: i5("trailingComma"), arrayBracketSpacing: i5("arrayBracketSpacing"), objectCurlySpacing: i5("objectCurlySpacing"), arrowParensAlways: i5("arrowParensAlways"), flowObjectCommas: i5("flowObjectCommas"), tokens: !!i5("tokens")};
      }
      t3.normalize = i4;
    }), Js = U2.__importDefault(vs), Xs = function() {
      function e4(e5, t3, r4) {
        r4 === void 0 && (r4 = t3), this.sourceLines = e5, this.sourceLoc = t3, this.targetLoc = r4;
      }
      return e4.prototype.slice = function(t3, r4, s4) {
        s4 === void 0 && (s4 = t3.lastPos());
        var i4 = this.sourceLines, n4 = this.sourceLoc, a4 = this.targetLoc;
        function o4(e5) {
          var o5 = n4[e5], l3 = a4[e5], c4 = r4;
          return e5 === "end" ? c4 = s4 : Js.default.strictEqual(e5, "start"), Ws(i4, o5, t3, l3, c4);
        }
        if (Ss.comparePos(r4, a4.start) <= 0)
          if (Ss.comparePos(a4.end, s4) <= 0)
            a4 = {start: Hs(a4.start, r4.line, r4.column), end: Hs(a4.end, r4.line, r4.column)};
          else {
            if (Ss.comparePos(s4, a4.start) <= 0)
              return null;
            n4 = {start: n4.start, end: o4("end")}, a4 = {start: Hs(a4.start, r4.line, r4.column), end: Hs(s4, r4.line, r4.column)};
          }
        else {
          if (Ss.comparePos(a4.end, r4) <= 0)
            return null;
          Ss.comparePos(a4.end, s4) <= 0 ? (n4 = {start: o4("start"), end: n4.end}, a4 = {start: {line: 1, column: 0}, end: Hs(a4.end, r4.line, r4.column)}) : (n4 = {start: o4("start"), end: o4("end")}, a4 = {start: {line: 1, column: 0}, end: Hs(s4, r4.line, r4.column)});
        }
        return new e4(this.sourceLines, n4, a4);
      }, e4.prototype.add = function(t3, r4) {
        return new e4(this.sourceLines, this.sourceLoc, {start: Gs(this.targetLoc.start, t3, r4), end: Gs(this.targetLoc.end, t3, r4)});
      }, e4.prototype.subtract = function(t3, r4) {
        return new e4(this.sourceLines, this.sourceLoc, {start: Hs(this.targetLoc.start, t3, r4), end: Hs(this.targetLoc.end, t3, r4)});
      }, e4.prototype.indent = function(t3, r4, s4) {
        if (r4 === void 0 && (r4 = false), s4 === void 0 && (s4 = false), t3 === 0)
          return this;
        var i4 = this.targetLoc, n4 = i4.start.line, a4 = i4.end.line;
        if (r4 && n4 === 1 && a4 === 1)
          return this;
        if (i4 = {start: i4.start, end: i4.end}, !r4 || n4 > 1) {
          var o4 = i4.start.column + t3;
          i4.start = {line: n4, column: s4 ? Math.max(0, o4) : o4};
        }
        if (!r4 || a4 > 1) {
          var l3 = i4.end.column + t3;
          i4.end = {line: a4, column: s4 ? Math.max(0, l3) : l3};
        }
        return new e4(this.sourceLines, this.sourceLoc, i4);
      }, e4;
    }();
    function Gs(e4, t3, r4) {
      return {line: e4.line + t3 - 1, column: e4.line === 1 ? e4.column + r4 : e4.column};
    }
    function Hs(e4, t3, r4) {
      return {line: e4.line - t3 + 1, column: e4.line === t3 ? e4.column - r4 : e4.column};
    }
    function Ws(e4, t3, r4, s4, i4) {
      var n4, a4, o4 = Ss.comparePos(s4, i4);
      if (o4 === 0)
        return t3;
      if (o4 < 0) {
        n4 = e4.skipSpaces(t3) || e4.lastPos(), a4 = r4.skipSpaces(s4) || r4.lastPos();
        var l3 = i4.line - a4.line;
        for (n4.line += l3, a4.line += l3, l3 > 0 ? (n4.column = 0, a4.column = 0) : Js.default.strictEqual(l3, 0); Ss.comparePos(a4, i4) < 0 && r4.nextPos(a4, true); )
          Js.default.ok(e4.nextPos(n4, true)), Js.default.strictEqual(e4.charAt(n4), r4.charAt(a4));
      } else
        for (n4 = e4.skipSpaces(t3, true) || e4.firstPos(), a4 = r4.skipSpaces(s4, true) || r4.firstPos(), l3 = i4.line - a4.line, n4.line += l3, a4.line += l3, l3 < 0 ? (n4.column = e4.getLineLength(n4.line), a4.column = r4.getLineLength(a4.line)) : Js.default.strictEqual(l3, 0); Ss.comparePos(i4, a4) < 0 && r4.prevPos(a4, true); )
          Js.default.ok(e4.prevPos(n4, true)), Js.default.strictEqual(e4.charAt(n4), r4.charAt(a4));
      return n4;
    }
    var Ks = Object.defineProperty({default: Xs}, "__esModule", {value: true}), $s = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true}), t3.concat = t3.fromString = t3.countSpaces = t3.Lines = void 0;
      var r4 = U2.__importDefault(vs), s4 = U2.__importDefault(Es), i4 = U2.__importDefault(Ks), n4 = function() {
        function e5(e6, t4) {
          t4 === void 0 && (t4 = null), this.infos = e6, this.mappings = [], this.cachedSourceMap = null, this.cachedTabWidth = void 0, r4.default.ok(e6.length > 0), this.length = e6.length, this.name = t4 || null, this.name && this.mappings.push(new i4.default(this, {start: this.firstPos(), end: this.lastPos()}));
        }
        return e5.prototype.toString = function(e6) {
          return this.sliceString(this.firstPos(), this.lastPos(), e6);
        }, e5.prototype.getSourceMap = function(e6, t4) {
          if (!e6)
            return null;
          var i5 = this;
          function n5(r5) {
            return (r5 = r5 || {}).file = e6, t4 && (r5.sourceRoot = t4), r5;
          }
          if (i5.cachedSourceMap)
            return n5(i5.cachedSourceMap.toJSON());
          var a5 = new s4.default.SourceMapGenerator(n5()), l4 = {};
          return i5.mappings.forEach(function(e7) {
            for (var t5 = e7.sourceLines.skipSpaces(e7.sourceLoc.start) || e7.sourceLines.lastPos(), s5 = i5.skipSpaces(e7.targetLoc.start) || i5.lastPos(); Ss.comparePos(t5, e7.sourceLoc.end) < 0 && Ss.comparePos(s5, e7.targetLoc.end) < 0; ) {
              var n6 = e7.sourceLines.charAt(t5), c5 = i5.charAt(s5);
              r4.default.strictEqual(n6, c5);
              var u4 = e7.sourceLines.name;
              if (a5.addMapping({source: u4, original: {line: t5.line, column: t5.column}, generated: {line: s5.line, column: s5.column}}), !o4.call(l4, u4)) {
                var h5 = e7.sourceLines.toString();
                a5.setSourceContent(u4, h5), l4[u4] = h5;
              }
              i5.nextPos(s5, true), e7.sourceLines.nextPos(t5, true);
            }
          }), i5.cachedSourceMap = a5, a5.toJSON();
        }, e5.prototype.bootstrapCharAt = function(e6) {
          r4.default.strictEqual(typeof e6, "object"), r4.default.strictEqual(typeof e6.line, "number"), r4.default.strictEqual(typeof e6.column, "number");
          var t4 = e6.line, s5 = e6.column, i5 = this.toString().split(h4), n5 = i5[t4 - 1];
          return n5 === void 0 ? "" : s5 === n5.length && t4 < i5.length ? "\n" : s5 >= n5.length ? "" : n5.charAt(s5);
        }, e5.prototype.charAt = function(e6) {
          r4.default.strictEqual(typeof e6, "object"), r4.default.strictEqual(typeof e6.line, "number"), r4.default.strictEqual(typeof e6.column, "number");
          var t4 = e6.line, s5 = e6.column, i5 = this.infos[t4 - 1], n5 = s5;
          if (i5 === void 0 || n5 < 0)
            return "";
          var a5 = this.getIndentAt(t4);
          return n5 < a5 ? " " : (n5 += i5.sliceStart - a5) === i5.sliceEnd && t4 < this.length ? "\n" : n5 >= i5.sliceEnd ? "" : i5.line.charAt(n5);
        }, e5.prototype.stripMargin = function(t4, s5) {
          if (t4 === 0)
            return this;
          if (r4.default.ok(t4 > 0, "negative margin: " + t4), s5 && this.length === 1)
            return this;
          var i5 = new e5(this.infos.map(function(e6, r5) {
            return e6.line && (r5 > 0 || !s5) && (e6 = U2.__assign(U2.__assign({}, e6), {indent: Math.max(0, e6.indent - t4)})), e6;
          }));
          if (this.mappings.length > 0) {
            var n5 = i5.mappings;
            r4.default.strictEqual(n5.length, 0), this.mappings.forEach(function(e6) {
              n5.push(e6.indent(t4, s5, true));
            });
          }
          return i5;
        }, e5.prototype.indent = function(t4) {
          if (t4 === 0)
            return this;
          var s5 = new e5(this.infos.map(function(e6) {
            return e6.line && !e6.locked && (e6 = U2.__assign(U2.__assign({}, e6), {indent: e6.indent + t4})), e6;
          }));
          if (this.mappings.length > 0) {
            var i5 = s5.mappings;
            r4.default.strictEqual(i5.length, 0), this.mappings.forEach(function(e6) {
              i5.push(e6.indent(t4));
            });
          }
          return s5;
        }, e5.prototype.indentTail = function(t4) {
          if (t4 === 0)
            return this;
          if (this.length < 2)
            return this;
          var s5 = new e5(this.infos.map(function(e6, r5) {
            return r5 > 0 && e6.line && !e6.locked && (e6 = U2.__assign(U2.__assign({}, e6), {indent: e6.indent + t4})), e6;
          }));
          if (this.mappings.length > 0) {
            var i5 = s5.mappings;
            r4.default.strictEqual(i5.length, 0), this.mappings.forEach(function(e6) {
              i5.push(e6.indent(t4, true));
            });
          }
          return s5;
        }, e5.prototype.lockIndentTail = function() {
          return this.length < 2 ? this : new e5(this.infos.map(function(e6, t4) {
            return U2.__assign(U2.__assign({}, e6), {locked: t4 > 0});
          }));
        }, e5.prototype.getIndentAt = function(e6) {
          return r4.default.ok(e6 >= 1, "no line " + e6 + " (line numbers start from 1)"), Math.max(this.infos[e6 - 1].indent, 0);
        }, e5.prototype.guessTabWidth = function() {
          if (typeof this.cachedTabWidth == "number")
            return this.cachedTabWidth;
          for (var e6 = [], t4 = 0, r5 = 1, s5 = this.length; r5 <= s5; ++r5) {
            var i5 = this.infos[r5 - 1];
            if (!d4(i5.line.slice(i5.sliceStart, i5.sliceEnd))) {
              var n5 = Math.abs(i5.indent - t4);
              e6[n5] = 1 + ~~e6[n5], t4 = i5.indent;
            }
          }
          for (var a5 = -1, l4 = 2, c5 = 1; c5 < e6.length; c5 += 1)
            o4.call(e6, c5) && e6[c5] > a5 && (a5 = e6[c5], l4 = c5);
          return this.cachedTabWidth = l4;
        }, e5.prototype.startsWithComment = function() {
          if (this.infos.length === 0)
            return false;
          var e6 = this.infos[0], t4 = e6.sliceStart, r5 = e6.sliceEnd, s5 = e6.line.slice(t4, r5).trim();
          return s5.length === 0 || s5.slice(0, 2) === "//" || s5.slice(0, 2) === "/*";
        }, e5.prototype.isOnlyWhitespace = function() {
          return d4(this.toString());
        }, e5.prototype.isPrecededOnlyByWhitespace = function(e6) {
          var t4 = this.infos[e6.line - 1], r5 = Math.max(t4.indent, 0), s5 = e6.column - r5;
          if (s5 <= 0)
            return true;
          var i5 = t4.sliceStart, n5 = Math.min(i5 + s5, t4.sliceEnd);
          return d4(t4.line.slice(i5, n5));
        }, e5.prototype.getLineLength = function(e6) {
          var t4 = this.infos[e6 - 1];
          return this.getIndentAt(e6) + t4.sliceEnd - t4.sliceStart;
        }, e5.prototype.nextPos = function(e6, t4) {
          t4 === void 0 && (t4 = false);
          var r5 = Math.max(e6.line, 0);
          return Math.max(e6.column, 0) < this.getLineLength(r5) ? (e6.column += 1, !t4 || !!this.skipSpaces(e6, false, true)) : r5 < this.length && (e6.line += 1, e6.column = 0, !t4 || !!this.skipSpaces(e6, false, true));
        }, e5.prototype.prevPos = function(e6, t4) {
          t4 === void 0 && (t4 = false);
          var r5 = e6.line, s5 = e6.column;
          if (s5 < 1) {
            if ((r5 -= 1) < 1)
              return false;
            s5 = this.getLineLength(r5);
          } else
            s5 = Math.min(s5 - 1, this.getLineLength(r5));
          return e6.line = r5, e6.column = s5, !t4 || !!this.skipSpaces(e6, true, true);
        }, e5.prototype.firstPos = function() {
          return {line: 1, column: 0};
        }, e5.prototype.lastPos = function() {
          return {line: this.length, column: this.getLineLength(this.length)};
        }, e5.prototype.skipSpaces = function(e6, t4, r5) {
          if (t4 === void 0 && (t4 = false), r5 === void 0 && (r5 = false), e6 = e6 ? r5 ? e6 : {line: e6.line, column: e6.column} : t4 ? this.lastPos() : this.firstPos(), t4) {
            for (; this.prevPos(e6); )
              if (!d4(this.charAt(e6)) && this.nextPos(e6))
                return e6;
            return null;
          }
          for (; d4(this.charAt(e6)); )
            if (!this.nextPos(e6))
              return null;
          return e6;
        }, e5.prototype.trimLeft = function() {
          var e6 = this.skipSpaces(this.firstPos(), false, true);
          return e6 ? this.slice(e6) : y4;
        }, e5.prototype.trimRight = function() {
          var e6 = this.skipSpaces(this.lastPos(), true, true);
          return e6 ? this.slice(this.firstPos(), e6) : y4;
        }, e5.prototype.trim = function() {
          var e6 = this.skipSpaces(this.firstPos(), false, true);
          if (e6 === null)
            return y4;
          var t4 = this.skipSpaces(this.lastPos(), true, true);
          return t4 === null ? y4 : this.slice(e6, t4);
        }, e5.prototype.eachPos = function(e6, t4, r5) {
          t4 === void 0 && (t4 = this.firstPos()), r5 === void 0 && (r5 = false);
          var s5 = this.firstPos();
          if (t4 && (s5.line = t4.line, s5.column = t4.column), !r5 || this.skipSpaces(s5, false, true))
            do {
              e6.call(this, s5);
            } while (this.nextPos(s5, r5));
        }, e5.prototype.bootstrapSlice = function(e6, t4) {
          var r5 = this.toString().split(h4).slice(e6.line - 1, t4.line);
          return r5.length > 0 && (r5.push(r5.pop().slice(0, t4.column)), r5[0] = r5[0].slice(e6.column)), p4(r5.join("\n"));
        }, e5.prototype.slice = function(t4, s5) {
          if (!s5) {
            if (!t4)
              return this;
            s5 = this.lastPos();
          }
          if (!t4)
            throw new Error("cannot slice with end but not start");
          var i5 = this.infos.slice(t4.line - 1, s5.line);
          t4.line === s5.line ? i5[0] = f4(i5[0], t4.column, s5.column) : (r4.default.ok(t4.line < s5.line), i5[0] = f4(i5[0], t4.column), i5.push(f4(i5.pop(), 0, s5.column)));
          var n5 = new e5(i5);
          if (this.mappings.length > 0) {
            var a5 = n5.mappings;
            r4.default.strictEqual(a5.length, 0), this.mappings.forEach(function(e6) {
              var r5 = e6.slice(this, t4, s5);
              r5 && a5.push(r5);
            }, this);
          }
          return n5;
        }, e5.prototype.bootstrapSliceString = function(e6, t4, r5) {
          return this.slice(e6, t4).toString(r5);
        }, e5.prototype.sliceString = function(e6, t4, r5) {
          e6 === void 0 && (e6 = this.firstPos()), t4 === void 0 && (t4 = this.lastPos());
          for (var s5 = Vs.normalize(r5), i5 = s5.tabWidth, n5 = s5.useTabs, a5 = s5.reuseWhitespace, o5 = s5.lineTerminator, l4 = [], u4 = e6.line; u4 <= t4.line; ++u4) {
            var h5 = this.infos[u4 - 1];
            u4 === e6.line ? h5 = u4 === t4.line ? f4(h5, e6.column, t4.column) : f4(h5, e6.column) : u4 === t4.line && (h5 = f4(h5, 0, t4.column));
            var p5 = Math.max(h5.indent, 0), m5 = h5.line.slice(0, h5.sliceStart);
            if (a5 && d4(m5) && c4(m5, i5) === p5)
              l4.push(h5.line.slice(0, h5.sliceEnd));
            else {
              var y5 = 0, g4 = p5;
              n5 && (g4 -= (y5 = Math.floor(p5 / i5)) * i5);
              var x4 = "";
              y5 > 0 && (x4 += new Array(y5 + 1).join("	")), g4 > 0 && (x4 += new Array(g4 + 1).join(" ")), x4 += h5.line.slice(h5.sliceStart, h5.sliceEnd), l4.push(x4);
            }
          }
          return l4.join(o5);
        }, e5.prototype.isEmpty = function() {
          return this.length < 2 && this.getLineLength(1) < 1;
        }, e5.prototype.join = function(t4) {
          var r5, s5 = this, i5 = [], n5 = [];
          function a5(e6) {
            if (e6 !== null) {
              if (r5) {
                var t5 = e6.infos[0], s6 = new Array(t5.indent + 1).join(" "), a6 = i5.length, o6 = Math.max(r5.indent, 0) + r5.sliceEnd - r5.sliceStart;
                r5.line = r5.line.slice(0, r5.sliceEnd) + s6 + t5.line.slice(t5.sliceStart, t5.sliceEnd), r5.locked = r5.locked || t5.locked, r5.sliceEnd = r5.line.length, e6.mappings.length > 0 && e6.mappings.forEach(function(e7) {
                  n5.push(e7.add(a6, o6));
                });
              } else
                e6.mappings.length > 0 && n5.push.apply(n5, e6.mappings);
              e6.infos.forEach(function(e7, t6) {
                (!r5 || t6 > 0) && (r5 = U2.__assign({}, e7), i5.push(r5));
              });
            }
          }
          function o5(e6, t5) {
            t5 > 0 && a5(s5), a5(e6);
          }
          if (t4.map(function(e6) {
            var t5 = p4(e6);
            return t5.isEmpty() ? null : t5;
          }).forEach(function(e6, t5) {
            s5.isEmpty() ? a5(e6) : o5(e6, t5);
          }), i5.length < 1)
            return y4;
          var l4 = new e5(i5);
          return l4.mappings = n5, l4;
        }, e5.prototype.concat = function() {
          for (var e6 = [], t4 = 0; t4 < arguments.length; t4++)
            e6[t4] = arguments[t4];
          var s5 = [this];
          return s5.push.apply(s5, e6), r4.default.strictEqual(s5.length, e6.length + 1), y4.join(s5);
        }, e5;
      }();
      t3.Lines = n4;
      var a4 = {}, o4 = a4.hasOwnProperty, l3 = 10;
      function c4(e5, t4) {
        for (var s5 = 0, i5 = e5.length, n5 = 0; n5 < i5; ++n5)
          switch (e5.charCodeAt(n5)) {
            case 9:
              r4.default.strictEqual(typeof t4, "number"), r4.default.ok(t4 > 0);
              var a5 = Math.ceil(s5 / t4) * t4;
              a5 === s5 ? s5 += t4 : s5 = a5;
              break;
            case 11:
            case 12:
            case 13:
            case 65279:
              break;
            case 32:
            default:
              s5 += 1;
          }
        return s5;
      }
      t3.countSpaces = c4;
      var u3 = /^\s*/, h4 = /\u000D\u000A|\u000D(?!\u000A)|\u000A|\u2028|\u2029/;
      function p4(e5, t4) {
        if (e5 instanceof n4)
          return e5;
        e5 += "";
        var s5 = t4 && t4.tabWidth, i5 = e5.indexOf("	") < 0, p5 = !t4 && i5 && e5.length <= l3;
        if (r4.default.ok(s5 || i5, "No tab width specified but encountered tabs in string\n" + e5), p5 && o4.call(a4, e5))
          return a4[e5];
        var d5 = new n4(e5.split(h4).map(function(e6) {
          var t5 = u3.exec(e6)[0];
          return {line: e6, indent: c4(t5, s5), locked: false, sliceStart: t5.length, sliceEnd: e6.length};
        }), Vs.normalize(t4).sourceFileName);
        return p5 && (a4[e5] = d5), d5;
      }
      function d4(e5) {
        return !/\S/.test(e5);
      }
      function f4(e5, t4, s5) {
        var i5 = e5.sliceStart, n5 = e5.sliceEnd, a5 = Math.max(e5.indent, 0), o5 = a5 + n5 - i5;
        return s5 === void 0 && (s5 = o5), t4 = Math.max(t4, 0), s5 = Math.min(s5, o5), (s5 = Math.max(s5, t4)) < a5 ? (a5 = s5, n5 = i5) : n5 -= o5 - s5, o5 = s5, o5 -= t4, t4 < a5 ? a5 -= t4 : (t4 -= a5, a5 = 0, i5 += t4), r4.default.ok(a5 >= 0), r4.default.ok(i5 <= n5), r4.default.strictEqual(o5, a5 + n5 - i5), e5.indent === a5 && e5.sliceStart === i5 && e5.sliceEnd === n5 ? e5 : {line: e5.line, indent: a5, locked: false, sliceStart: i5, sliceEnd: n5};
      }
      function m4(e5) {
        return y4.join(e5);
      }
      t3.fromString = p4, t3.concat = m4;
      var y4 = p4("");
    }), Ys = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true}), t3.printComments = t3.attach = void 0;
      var r4 = U2.__importDefault(vs), s4 = U2.__importStar(pe2), i4 = s4.namedTypes, n4 = s4.builtInTypes.array, a4 = s4.builtInTypes.object, o4 = new WeakMap();
      function l3(e5, t4, r5) {
        if (!e5)
          return r5;
        if (Ss.fixFaultyLocations(e5, t4), r5) {
          if (i4.Node.check(e5) && i4.SourceLocation.check(e5.loc)) {
            for (var c5 = r5.length - 1; c5 >= 0; --c5) {
              var u4 = r5[c5];
              if (u4 && u4.loc && Ss.comparePos(u4.loc.end, e5.loc.start) <= 0)
                break;
            }
            return r5.splice(c5 + 1, 0, e5), r5;
          }
        } else {
          var h5 = o4.get(e5);
          if (h5)
            return h5;
        }
        var p5;
        if (n4.check(e5))
          p5 = Object.keys(e5);
        else {
          if (!a4.check(e5))
            return r5;
          p5 = s4.getFieldNames(e5);
        }
        r5 || o4.set(e5, r5 = []), c5 = 0;
        for (var d5 = p5.length; c5 < d5; ++c5)
          l3(e5[p5[c5]], t4, r5);
        return r5;
      }
      function c4(e5, t4, r5) {
        for (var s5, i5, n5 = l3(e5, r5), a5 = 0, o5 = n5 && n5.length; typeof o5 == "number" && a5 < o5; ) {
          var u4 = a5 + o5 >> 1, h5 = n5[u4];
          if (Ss.comparePos(h5.loc.start, t4.loc.start) <= 0 && Ss.comparePos(t4.loc.end, h5.loc.end) <= 0)
            return void c4(t4.enclosingNode = h5, t4, r5);
          if (Ss.comparePos(h5.loc.end, t4.loc.start) <= 0)
            s5 = h5, a5 = u4 + 1;
          else {
            if (!(Ss.comparePos(t4.loc.end, h5.loc.start) <= 0))
              throw new Error("Comment location overlaps with node location");
            i5 = h5, o5 = u4;
          }
        }
        s5 && (t4.precedingNode = s5), i5 && (t4.followingNode = i5);
      }
      function u3(e5, t4, s5) {
        if (n4.check(e5)) {
          var i5 = [];
          e5.forEach(function(e6) {
            e6.loc.lines = s5, c4(t4, e6, s5);
            var n5 = e6.precedingNode, a5 = e6.enclosingNode, o5 = e6.followingNode;
            if (n5 && o5) {
              var l4 = i5.length;
              if (l4 > 0) {
                var u4 = i5[l4 - 1];
                r4.default.strictEqual(u4.precedingNode === e6.precedingNode, u4.followingNode === e6.followingNode), u4.followingNode !== e6.followingNode && h4(i5, s5);
              }
              i5.push(e6);
            } else if (n5)
              h4(i5, s5), m4(n5, e6);
            else if (o5)
              h4(i5, s5), d4(o5, e6);
            else {
              if (!a5)
                throw new Error("AST contains no nodes at all?");
              h4(i5, s5), f4(a5, e6);
            }
          }), h4(i5, s5), e5.forEach(function(e6) {
            delete e6.precedingNode, delete e6.enclosingNode, delete e6.followingNode;
          });
        }
      }
      function h4(e5, t4) {
        var s5 = e5.length;
        if (s5 !== 0) {
          for (var i5, n5 = e5[0].precedingNode, a5 = e5[0].followingNode, o5 = a5.loc.start, l4 = s5; l4 > 0; --l4) {
            i5 = e5[l4 - 1], r4.default.strictEqual(i5.precedingNode, n5), r4.default.strictEqual(i5.followingNode, a5);
            var c5 = t4.sliceString(i5.loc.end, o5);
            if (/\S/.test(c5))
              break;
            o5 = i5.loc.start;
          }
          for (; l4 <= s5 && (i5 = e5[l4]) && (i5.type === "Line" || i5.type === "CommentLine") && i5.loc.start.column > a5.loc.start.column; )
            ++l4;
          e5.forEach(function(e6, t5) {
            t5 < l4 ? m4(n5, e6) : d4(a5, e6);
          }), e5.length = 0;
        }
      }
      function p4(e5, t4) {
        (e5.comments || (e5.comments = [])).push(t4);
      }
      function d4(e5, t4) {
        t4.leading = true, t4.trailing = false, p4(e5, t4);
      }
      function f4(e5, t4) {
        t4.leading = false, t4.trailing = false, p4(e5, t4);
      }
      function m4(e5, t4) {
        t4.leading = false, t4.trailing = true, p4(e5, t4);
      }
      function y4(e5, t4) {
        var r5 = e5.getValue();
        i4.Comment.assert(r5);
        var s5 = r5.loc, n5 = s5 && s5.lines, a5 = [t4(e5)];
        if (r5.trailing)
          a5.push("\n");
        else if (n5 instanceof $s.Lines) {
          var o5 = n5.slice(s5.end, n5.skipSpaces(s5.end) || n5.lastPos());
          o5.length === 1 ? a5.push(o5) : a5.push(new Array(o5.length).join("\n"));
        } else
          a5.push("\n");
        return $s.concat(a5);
      }
      function g4(e5, t4) {
        var r5 = e5.getValue(e5);
        i4.Comment.assert(r5);
        var s5 = r5.loc, n5 = s5 && s5.lines, a5 = [];
        if (n5 instanceof $s.Lines) {
          var o5 = n5.skipSpaces(s5.start, true) || n5.firstPos(), l4 = n5.slice(o5, s5.start);
          l4.length === 1 ? a5.push(l4) : a5.push(new Array(l4.length).join("\n"));
        }
        return a5.push(t4(e5)), $s.concat(a5);
      }
      function x4(e5, t4) {
        var r5 = e5.getValue(), n5 = t4(e5), a5 = i4.Node.check(r5) && s4.getFieldValue(r5, "comments");
        if (!a5 || a5.length === 0)
          return n5;
        var o5 = [], l4 = [n5];
        return e5.each(function(e6) {
          var n6 = e6.getValue(), a6 = s4.getFieldValue(n6, "leading"), c5 = s4.getFieldValue(n6, "trailing");
          a6 || c5 && !i4.Statement.check(r5) && n6.type !== "Block" && n6.type !== "CommentBlock" ? o5.push(y4(e6, t4)) : c5 && l4.push(g4(e6, t4));
        }, "comments"), o5.push.apply(o5, l4), $s.concat(o5);
      }
      t3.attach = u3, t3.printComments = x4;
    }), Qs = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true}), t3.parse = void 0;
      var r4 = U2.__importDefault(vs), s4 = U2.__importStar(pe2), i4 = s4.builders, n4 = s4.builtInTypes.object, a4 = s4.builtInTypes.array, o4 = U2.__importStar(Ss);
      function l3(e5, t4) {
        t4 = Vs.normalize(t4);
        var r5, s5, n5 = $s.fromString(e5, t4), a5 = n5.toString({tabWidth: t4.tabWidth, reuseWhitespace: false, useTabs: false}), l4 = [], u4 = t4.parser.parse(a5, {jsx: true, loc: true, locations: true, range: t4.range, comment: true, onComment: l4, tolerant: o4.getOption(t4, "tolerant", true), ecmaVersion: 6, sourceType: o4.getOption(t4, "sourceType", "module")}), h4 = Array.isArray(u4.tokens) ? u4.tokens : As.tokenize(a5, {loc: true});
        delete u4.tokens, h4.forEach(function(e6) {
          typeof e6.value != "string" && (e6.value = n5.sliceString(e6.loc.start, e6.loc.end));
        }), Array.isArray(u4.comments) && (l4 = u4.comments, delete u4.comments), u4.loc ? o4.fixFaultyLocations(u4, n5) : u4.loc = {start: n5.firstPos(), end: n5.lastPos()}, u4.loc.lines = n5, u4.loc.indent = 0, u4.type === "Program" ? (s5 = u4, (r5 = i4.file(u4, t4.sourceFileName || null)).loc = {start: n5.firstPos(), end: n5.lastPos(), lines: n5, indent: 0}) : u4.type === "File" && (s5 = (r5 = u4).program), t4.tokens && (r5.tokens = h4);
        var p4 = o4.getTrueLoc({type: s5.type, loc: s5.loc, body: [], comments: l4}, n5);
        return s5.loc.start = p4.start, s5.loc.end = p4.end, Ys.attach(l4, s5.body.length ? r5.program : r5, n5), new c4(n5, h4).copy(r5);
      }
      t3.parse = l3;
      var c4 = function e5(t4, s5) {
        r4.default.ok(this instanceof e5), this.lines = t4, this.tokens = s5, this.startTokenIndex = 0, this.endTokenIndex = s5.length, this.indent = 0, this.seen = new Map();
      }, u3 = c4.prototype;
      u3.copy = function(e5) {
        if (this.seen.has(e5))
          return this.seen.get(e5);
        if (a4.check(e5)) {
          var t4 = new Array(e5.length);
          return this.seen.set(e5, t4), e5.forEach(function(e6, r6) {
            t4[r6] = this.copy(e6);
          }, this), t4;
        }
        if (!n4.check(e5))
          return e5;
        o4.fixFaultyLocations(e5, this.lines);
        var r5 = Object.create(Object.getPrototypeOf(e5), {original: {value: e5, configurable: false, enumerable: false, writable: true}});
        this.seen.set(e5, r5);
        var s5 = e5.loc, i5 = this.indent, l4 = i5, c5 = this.startTokenIndex, u4 = this.endTokenIndex;
        s5 && ((e5.type === "Block" || e5.type === "Line" || e5.type === "CommentBlock" || e5.type === "CommentLine" || this.lines.isPrecededOnlyByWhitespace(s5.start)) && (l4 = this.indent = s5.start.column), s5.lines = this.lines, s5.tokens = this.tokens, s5.indent = l4, this.findTokenRange(s5));
        for (var h4 = Object.keys(e5), p4 = h4.length, d4 = 0; d4 < p4; ++d4) {
          var f4 = h4[d4];
          f4 === "loc" || f4 === "tokens" && e5.type === "File" ? r5[f4] = e5[f4] : r5[f4] = this.copy(e5[f4]);
        }
        return this.indent = i5, this.startTokenIndex = c5, this.endTokenIndex = u4, r5;
      }, u3.findTokenRange = function(e5) {
        for (; this.startTokenIndex > 0; ) {
          var t4 = e5.tokens[this.startTokenIndex];
          if (!(o4.comparePos(e5.start, t4.loc.start) < 0))
            break;
          --this.startTokenIndex;
        }
        for (; this.endTokenIndex < e5.tokens.length && (t4 = e5.tokens[this.endTokenIndex], o4.comparePos(t4.loc.end, e5.end) < 0); )
          ++this.endTokenIndex;
        for (; this.startTokenIndex < this.endTokenIndex && (t4 = e5.tokens[this.startTokenIndex], o4.comparePos(t4.loc.start, e5.start) < 0); )
          ++this.startTokenIndex;
        for (e5.start.token = this.startTokenIndex; this.endTokenIndex > this.startTokenIndex && (t4 = e5.tokens[this.endTokenIndex - 1], o4.comparePos(e5.end, t4.loc.end) < 0); )
          --this.endTokenIndex;
        e5.end.token = this.endTokenIndex;
      };
    }), Zs = U2.__importDefault(vs), ei = U2.__importStar(pe2), ti = U2.__importStar(Ss), ri = ei.namedTypes, si = ei.builtInTypes.array, ii = ei.builtInTypes.number, ni = {};
    [["||"], ["&&"], ["|"], ["^"], ["&"], ["==", "===", "!=", "!=="], ["<", ">", "<=", ">=", "in", "instanceof"], [">>", "<<", ">>>"], ["+", "-"], ["*", "/", "%"], ["**"]].forEach(function(e4, t3) {
      e4.forEach(function(e5) {
        ni[e5] = t3;
      });
    });
    var ai = function e4(t3) {
      Zs.default.ok(this instanceof e4), this.stack = [t3];
    }, oi = ai.prototype;
    function li(e4, t3) {
      for (var r4 = e4.stack, s4 = r4.length - 1; s4 >= 0; s4 -= 2) {
        var i4 = r4[s4];
        if (ri.Node.check(i4) && --t3 < 0)
          return i4;
      }
      return null;
    }
    function ci(e4) {
      return ri.BinaryExpression.check(e4) || ri.LogicalExpression.check(e4);
    }
    function ui(e4) {
      return !!ri.CallExpression.check(e4) || (si.check(e4) ? e4.some(ui) : !!ri.Node.check(e4) && ei.someField(e4, function(e5, t3) {
        return ui(t3);
      }));
    }
    ai.from = function(e4) {
      if (e4 instanceof ai)
        return e4.copy();
      if (e4 instanceof ei.NodePath) {
        for (var t3 = Object.create(ai.prototype), r4 = [e4.value], s4 = void 0; s4 = e4.parentPath; e4 = s4)
          r4.push(e4.name, s4.value);
        return t3.stack = r4.reverse(), t3;
      }
      return new ai(e4);
    }, oi.copy = function() {
      var e4 = Object.create(ai.prototype);
      return e4.stack = this.stack.slice(0), e4;
    }, oi.getName = function() {
      var e4 = this.stack, t3 = e4.length;
      return t3 > 1 ? e4[t3 - 2] : null;
    }, oi.getValue = function() {
      var e4 = this.stack;
      return e4[e4.length - 1];
    }, oi.valueIsDuplicate = function() {
      var e4 = this.stack, t3 = e4.length - 1;
      return e4.lastIndexOf(e4[t3], t3 - 1) >= 0;
    }, oi.getNode = function(e4) {
      return e4 === void 0 && (e4 = 0), li(this, ~~e4);
    }, oi.getParentNode = function(e4) {
      return e4 === void 0 && (e4 = 0), li(this, 1 + ~~e4);
    }, oi.getRootValue = function() {
      var e4 = this.stack;
      return e4.length % 2 == 0 ? e4[1] : e4[0];
    }, oi.call = function(e4) {
      for (var t3 = this.stack, r4 = t3.length, s4 = t3[r4 - 1], i4 = arguments.length, n4 = 1; n4 < i4; ++n4) {
        var a4 = arguments[n4];
        s4 = s4[a4], t3.push(a4, s4);
      }
      var o4 = e4(this);
      return t3.length = r4, o4;
    }, oi.each = function(e4) {
      for (var t3 = this.stack, r4 = t3.length, s4 = t3[r4 - 1], i4 = arguments.length, n4 = 1; n4 < i4; ++n4) {
        var a4 = arguments[n4];
        s4 = s4[a4], t3.push(a4, s4);
      }
      for (n4 = 0; n4 < s4.length; ++n4)
        n4 in s4 && (t3.push(n4, s4[n4]), e4(this), t3.length -= 2);
      t3.length = r4;
    }, oi.map = function(e4) {
      for (var t3 = this.stack, r4 = t3.length, s4 = t3[r4 - 1], i4 = arguments.length, n4 = 1; n4 < i4; ++n4) {
        var a4 = arguments[n4];
        s4 = s4[a4], t3.push(a4, s4);
      }
      var o4 = new Array(s4.length);
      for (n4 = 0; n4 < s4.length; ++n4)
        n4 in s4 && (t3.push(n4, s4[n4]), o4[n4] = e4(this, n4), t3.length -= 2);
      return t3.length = r4, o4;
    }, oi.hasParens = function() {
      var e4 = this.getNode(), t3 = this.getPrevToken(e4);
      if (!t3)
        return false;
      var r4 = this.getNextToken(e4);
      if (!r4)
        return false;
      if (t3.value === "(") {
        if (r4.value === ")")
          return true;
        if (!this.canBeFirstInStatement() && this.firstInStatement() && !this.needsParens(true))
          return true;
      }
      return false;
    }, oi.getPrevToken = function(e4) {
      var t3 = (e4 = e4 || this.getNode()) && e4.loc, r4 = t3 && t3.tokens;
      if (r4 && t3.start.token > 0) {
        var s4 = r4[t3.start.token - 1];
        if (s4) {
          var i4 = this.getRootValue().loc;
          if (ti.comparePos(i4.start, s4.loc.start) <= 0)
            return s4;
        }
      }
      return null;
    }, oi.getNextToken = function(e4) {
      var t3 = (e4 = e4 || this.getNode()) && e4.loc, r4 = t3 && t3.tokens;
      if (r4 && t3.end.token < r4.length) {
        var s4 = r4[t3.end.token];
        if (s4) {
          var i4 = this.getRootValue().loc;
          if (ti.comparePos(s4.loc.end, i4.end) <= 0)
            return s4;
        }
      }
      return null;
    }, oi.needsParens = function(e4) {
      var t3 = this.getNode();
      if (t3.type === "AssignmentExpression" && t3.left.type === "ObjectPattern")
        return true;
      var r4 = this.getParentNode();
      if (!r4)
        return false;
      var s4 = this.getName();
      if (this.getValue() !== t3)
        return false;
      if (ri.Statement.check(t3))
        return false;
      if (t3.type === "Identifier")
        return false;
      if (r4.type === "ParenthesizedExpression" || t3.extra && t3.extra.parenthesized)
        return false;
      switch (t3.type) {
        case "UnaryExpression":
        case "SpreadElement":
        case "SpreadProperty":
          return r4.type === "MemberExpression" && s4 === "object" && r4.object === t3;
        case "BinaryExpression":
        case "LogicalExpression":
          switch (r4.type) {
            case "CallExpression":
              return s4 === "callee" && r4.callee === t3;
            case "UnaryExpression":
            case "SpreadElement":
            case "SpreadProperty":
              return true;
            case "MemberExpression":
              return s4 === "object" && r4.object === t3;
            case "BinaryExpression":
            case "LogicalExpression":
              var i4 = r4.operator, n4 = ni[i4], a4 = t3.operator, o4 = ni[a4];
              if (n4 > o4)
                return true;
              if (n4 === o4 && s4 === "right")
                return Zs.default.strictEqual(r4.right, t3), true;
              break;
            default:
              return false;
          }
          break;
        case "SequenceExpression":
          switch (r4.type) {
            case "ReturnStatement":
            case "ForStatement":
              return false;
            case "ExpressionStatement":
              return s4 !== "expression";
            default:
              return true;
          }
        case "IntersectionTypeAnnotation":
        case "UnionTypeAnnotation":
          return r4.type === "NullableTypeAnnotation";
        case "Literal":
          return r4.type === "MemberExpression" && ii.check(t3.value) && s4 === "object" && r4.object === t3;
        case "NumericLiteral":
          return r4.type === "MemberExpression" && s4 === "object" && r4.object === t3;
        case "YieldExpression":
        case "AwaitExpression":
        case "AssignmentExpression":
        case "ConditionalExpression":
          switch (r4.type) {
            case "UnaryExpression":
            case "SpreadElement":
            case "SpreadProperty":
            case "BinaryExpression":
            case "LogicalExpression":
              return true;
            case "CallExpression":
            case "NewExpression":
              return s4 === "callee" && r4.callee === t3;
            case "ConditionalExpression":
              return s4 === "test" && r4.test === t3;
            case "MemberExpression":
              return s4 === "object" && r4.object === t3;
            default:
              return false;
          }
        case "ArrowFunctionExpression":
          return !(!ri.CallExpression.check(r4) || s4 !== "callee" || r4.callee !== t3) || !(!ri.MemberExpression.check(r4) || s4 !== "object" || r4.object !== t3) || !(!ri.TSAsExpression || !ri.TSAsExpression.check(r4) || s4 !== "expression" || r4.expression !== t3) || ci(r4);
        case "ObjectExpression":
          if (r4.type === "ArrowFunctionExpression" && s4 === "body" && r4.body === t3)
            return true;
          break;
        case "TSAsExpression":
          if (r4.type === "ArrowFunctionExpression" && s4 === "body" && r4.body === t3 && t3.expression.type === "ObjectExpression")
            return true;
          break;
        case "CallExpression":
          if (s4 === "declaration" && ri.ExportDefaultDeclaration.check(r4) && ri.FunctionExpression.check(t3.callee))
            return true;
      }
      return r4.type === "NewExpression" && s4 === "callee" && r4.callee === t3 ? ui(t3) : !(e4 === true || this.canBeFirstInStatement() || !this.firstInStatement());
    }, oi.canBeFirstInStatement = function() {
      var e4 = this.getNode();
      return !ri.FunctionExpression.check(e4) && !ri.ObjectExpression.check(e4) && !ri.ClassExpression.check(e4);
    }, oi.firstInStatement = function() {
      for (var e4, t3, r4, s4, i4 = this.stack, n4 = i4.length - 1; n4 >= 0; n4 -= 2)
        if (ri.Node.check(i4[n4]) && (r4 = e4, s4 = t3, e4 = i4[n4 - 1], t3 = i4[n4]), t3 && s4) {
          if (ri.BlockStatement.check(t3) && e4 === "body" && r4 === 0)
            return Zs.default.strictEqual(t3.body[0], s4), true;
          if (ri.ExpressionStatement.check(t3) && r4 === "expression")
            return Zs.default.strictEqual(t3.expression, s4), true;
          if (ri.AssignmentExpression.check(t3) && r4 === "left")
            return Zs.default.strictEqual(t3.left, s4), true;
          if (ri.ArrowFunctionExpression.check(t3) && r4 === "body")
            return Zs.default.strictEqual(t3.body, s4), true;
          if (ri.SequenceExpression.check(t3) && e4 === "expressions" && r4 === 0)
            Zs.default.strictEqual(t3.expressions[0], s4);
          else if (ri.CallExpression.check(t3) && r4 === "callee")
            Zs.default.strictEqual(t3.callee, s4);
          else if (ri.MemberExpression.check(t3) && r4 === "object")
            Zs.default.strictEqual(t3.object, s4);
          else if (ri.ConditionalExpression.check(t3) && r4 === "test")
            Zs.default.strictEqual(t3.test, s4);
          else if (ci(t3) && r4 === "left")
            Zs.default.strictEqual(t3.left, s4);
          else {
            if (!ri.UnaryExpression.check(t3) || t3.prefix || r4 !== "argument")
              return false;
            Zs.default.strictEqual(t3.argument, s4);
          }
        }
      return true;
    };
    var hi = ai, pi = Object.defineProperty({default: hi}, "__esModule", {value: true}), di = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true}), t3.getReprinter = t3.Patcher = void 0;
      var r4 = U2.__importDefault(vs), s4 = U2.__importStar($s), i4 = U2.__importStar(pe2), n4 = i4.namedTypes.Printable, a4 = i4.namedTypes.Expression, o4 = i4.namedTypes.ReturnStatement, l3 = i4.namedTypes.SourceLocation, c4 = U2.__importDefault(pi), u3 = i4.builtInTypes.object, h4 = i4.builtInTypes.array, p4 = i4.builtInTypes.string, d4 = /[0-9a-z_$]/i, f4 = function e5(t4) {
        r4.default.ok(this instanceof e5), r4.default.ok(t4 instanceof s4.Lines);
        var i5 = this, n5 = [];
        i5.replace = function(e6, t5) {
          p4.check(t5) && (t5 = s4.fromString(t5)), n5.push({lines: t5, start: e6.start, end: e6.end});
        }, i5.get = function(e6) {
          var i6 = (e6 = e6 || {start: {line: 1, column: 0}, end: {line: t4.length, column: t4.getLineLength(t4.length)}}).start, a5 = [];
          function o5(e7, s5) {
            r4.default.ok(Ss.comparePos(e7, s5) <= 0), a5.push(t4.slice(e7, s5));
          }
          return n5.sort(function(e7, t5) {
            return Ss.comparePos(e7.start, t5.start);
          }).forEach(function(e7) {
            Ss.comparePos(i6, e7.start) > 0 || (o5(i6, e7.start), a5.push(e7.lines), i6 = e7.end);
          }), o5(i6, e6.end), s4.concat(a5);
        };
      };
      t3.Patcher = f4;
      var m4 = f4.prototype;
      function y4(e5) {
        var t4 = [];
        return e5.comments && e5.comments.length > 0 && e5.comments.forEach(function(e6) {
          (e6.leading || e6.trailing) && t4.push(e6);
        }), t4;
      }
      function g4(e5) {
        r4.default.ok(e5 instanceof c4.default);
        var t4 = e5.getValue();
        if (n4.check(t4)) {
          var i5 = t4.original, a5 = i5 && i5.loc, o5 = a5 && a5.lines, u4 = [];
          if (o5 && E4(e5, u4))
            return function(t5) {
              var r5 = new f4(o5);
              u4.forEach(function(e6) {
                var i6 = e6.newPath.getValue(), n6 = e6.oldPath.getValue();
                l3.assert(n6.loc, true);
                var a6 = !r5.tryToReprintComments(i6, n6, t5);
                a6 && r5.deleteComments(n6);
                var c5 = t5(e6.newPath, {includeComments: a6, avoidRootParens: n6.type === i6.type && e6.oldPath.hasParens()}).indentTail(n6.loc.indent), u5 = x4(o5, n6.loc, c5), h5 = b3(o5, n6.loc, c5);
                if (u5 || h5) {
                  var p5 = [];
                  u5 && p5.push(" "), p5.push(c5), h5 && p5.push(" "), c5 = s4.concat(p5);
                }
                r5.replace(n6.loc, c5);
              });
              var n5 = r5.get(a5).indentTail(-i5.loc.indent);
              return e5.needsParens() ? s4.concat(["(", n5, ")"]) : n5;
            };
        }
      }
      function x4(e5, t4, r5) {
        var s5 = Ss.copyPos(t4.start), i5 = e5.prevPos(s5) && e5.charAt(s5), n5 = r5.charAt(r5.firstPos());
        return i5 && d4.test(i5) && n5 && d4.test(n5);
      }
      function b3(e5, t4, r5) {
        var s5 = e5.charAt(t4.end), i5 = r5.lastPos(), n5 = r5.prevPos(i5) && r5.charAt(i5);
        return n5 && d4.test(n5) && s5 && d4.test(s5);
      }
      function E4(e5, t4) {
        var s5 = e5.getValue();
        n4.assert(s5);
        var i5 = s5.original;
        if (n4.assert(i5), r4.default.deepEqual(t4, []), s5.type !== i5.type)
          return false;
        var a5 = T3(e5, new c4.default(i5), t4);
        return a5 || (t4.length = 0), a5;
      }
      function v5(e5, t4, r5) {
        var s5 = e5.getValue();
        return s5 === t4.getValue() || (h4.check(s5) ? S4(e5, t4, r5) : !!u3.check(s5) && A3(e5, t4, r5));
      }
      function S4(e5, t4, r5) {
        var s5 = e5.getValue(), i5 = t4.getValue();
        if (s5 === i5 || e5.valueIsDuplicate() || t4.valueIsDuplicate())
          return true;
        h4.assert(s5);
        var n5 = s5.length;
        if (!h4.check(i5) || i5.length !== n5)
          return false;
        for (var a5 = 0; a5 < n5; ++a5) {
          e5.stack.push(a5, s5[a5]), t4.stack.push(a5, i5[a5]);
          var o5 = v5(e5, t4, r5);
          if (e5.stack.length -= 2, t4.stack.length -= 2, !o5)
            return false;
        }
        return true;
      }
      function A3(e5, t4, r5) {
        var s5 = e5.getValue();
        if (u3.assert(s5), s5.original === null)
          return false;
        var i5 = t4.getValue();
        if (!u3.check(i5))
          return false;
        if (s5 === i5 || e5.valueIsDuplicate() || t4.valueIsDuplicate())
          return true;
        if (n4.check(s5)) {
          if (!n4.check(i5))
            return false;
          var o5 = e5.getParentNode(), l4 = t4.getParentNode();
          if (l4 !== null && l4.type === "FunctionTypeAnnotation" && o5 !== null && o5.type === "FunctionTypeAnnotation") {
            var c5 = l4.params.length !== 1 || !!l4.params[0].name, h5 = o5.params.length !== 1 || !!o5.params[0].name;
            if (!c5 && h5)
              return false;
          }
          if (s5.type === i5.type) {
            var p5 = [];
            if (T3(e5, t4, p5))
              r5.push.apply(r5, p5);
            else {
              if (!i5.loc)
                return false;
              r5.push({oldPath: t4.copy(), newPath: e5.copy()});
            }
            return true;
          }
          return !!(a4.check(s5) && a4.check(i5) && i5.loc) && (r5.push({oldPath: t4.copy(), newPath: e5.copy()}), true);
        }
        return T3(e5, t4, r5);
      }
      function T3(e5, t4, r5) {
        var s5 = e5.getValue(), n5 = t4.getValue();
        if (u3.assert(s5), u3.assert(n5), s5.original === null)
          return false;
        if (e5.needsParens() && !t4.hasParens())
          return false;
        var a5 = Ss.getUnionOfKeys(n5, s5);
        n5.type !== "File" && s5.type !== "File" || delete a5.tokens, delete a5.loc;
        var l4 = r5.length;
        for (var c5 in a5)
          if (c5.charAt(0) !== "_") {
            e5.stack.push(c5, i4.getFieldValue(s5, c5)), t4.stack.push(c5, i4.getFieldValue(n5, c5));
            var h5 = v5(e5, t4, r5);
            if (e5.stack.length -= 2, t4.stack.length -= 2, !h5)
              return false;
          }
        return !(o4.check(e5.getNode()) && r5.length > l4);
      }
      m4.tryToReprintComments = function(e5, t4, s5) {
        var i5 = this;
        if (!e5.comments && !t4.comments)
          return true;
        var n5 = c4.default.from(e5), a5 = c4.default.from(t4);
        n5.stack.push("comments", y4(e5)), a5.stack.push("comments", y4(t4));
        var o5 = [], l4 = S4(n5, a5, o5);
        return l4 && o5.length > 0 && o5.forEach(function(e6) {
          var t5 = e6.oldPath.getValue();
          r4.default.ok(t5.leading || t5.trailing), i5.replace(t5.loc, s5(e6.newPath).indentTail(t5.loc.indent));
        }), l4;
      }, m4.deleteComments = function(e5) {
        if (e5.comments) {
          var t4 = this;
          e5.comments.forEach(function(r5) {
            r5.leading ? t4.replace({start: r5.loc.start, end: e5.loc.lines.skipSpaces(r5.loc.end, false, false)}, "") : r5.trailing && t4.replace({start: e5.loc.lines.skipSpaces(r5.loc.start, true, false), end: r5.loc.end}, "");
          });
        }
      }, t3.getReprinter = g4;
    }), fi = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true}), t3.Printer = void 0;
      var r4 = U2.__importDefault(vs), s4 = U2.__importStar(pe2), i4 = s4.namedTypes, n4 = s4.builtInTypes.string, a4 = s4.builtInTypes.object, o4 = U2.__importDefault(pi), l3 = U2.__importStar(Ss), c4 = function e5(t4, s5) {
        r4.default.ok(this instanceof e5), n4.assert(t4), this.code = t4, s5 && (a4.assert(s5), this.map = s5);
      }, u3 = c4.prototype, h4 = false;
      u3.toString = function() {
        return h4 || (console.warn("Deprecation warning: recast.print now returns an object with a .code property. You appear to be treating the object as a string, which might still work but is strongly discouraged."), h4 = true), this.code;
      };
      var p4 = new c4(""), d4 = function e5(t4) {
        r4.default.ok(this instanceof e5);
        var s5 = t4 && t4.tabWidth;
        function i5(e6, t5) {
          return e6 = Object.assign({}, e6, t5), function(t6) {
            return n5(t6, e6);
          };
        }
        function n5(e6, a5) {
          if (r4.default.ok(e6 instanceof o4.default), (a5 = a5 || {}).includeComments)
            return Ys.printComments(e6, i5(a5, {includeComments: false}));
          var l4 = t4.tabWidth;
          if (!s5) {
            var c5 = e6.getNode().loc;
            c5 && c5.lines && c5.lines.guessTabWidth && (t4.tabWidth = c5.lines.guessTabWidth());
          }
          var u4 = di.getReprinter(e6), h5 = u4 ? u4(n5) : f4(e6, t4, a5, i5(a5, {includeComments: true, avoidRootParens: false}));
          return t4.tabWidth = l4, h5;
        }
        (t4 = Vs.normalize(t4)).sourceFileName = null, this.print = function(e6) {
          if (!e6)
            return p4;
          var r5 = n5(o4.default.from(e6), {includeComments: true, avoidRootParens: false});
          return new c4(r5.toString(t4), l3.composeSourceMaps(t4.inputSourceMap, r5.getSourceMap(t4.sourceMapName, t4.sourceRoot)));
        }, this.printGenerically = function(e6) {
          if (!e6)
            return p4;
          function r5(e7) {
            return Ys.printComments(e7, function(e8) {
              return f4(e8, t4, {includeComments: true, avoidRootParens: false}, r5);
            });
          }
          var s6 = o4.default.from(e6), i6 = t4.reuseWhitespace;
          t4.reuseWhitespace = false;
          var n6 = new c4(r5(s6).toString(t4));
          return t4.reuseWhitespace = i6, n6;
        };
      };
      function f4(e5, t4, s5, i5) {
        r4.default.ok(e5 instanceof o4.default);
        var n5 = e5.getValue(), a5 = [], l4 = m4(e5, t4, i5);
        if (!n5 || l4.isEmpty())
          return l4;
        var c5 = !!n5.extra && n5.extra.parenthesized, u4 = y4(e5, i5);
        return u4.isEmpty() ? s5.avoidRootParens || (c5 = c5 || e5.needsParens()) : a5.push(u4), c5 && a5.unshift("("), a5.push(l4), c5 && a5.push(")"), $s.concat(a5);
      }
      function m4(e5, t4, n5) {
        var a5 = e5.getValue();
        if (!a5)
          return $s.fromString("");
        if (typeof a5 == "string")
          return $s.fromString(a5, t4);
        i4.Printable.assert(a5);
        var o5 = [];
        switch (a5.type) {
          case "File":
            return e5.call(n5, "program");
          case "Program":
            return a5.directives && e5.each(function(e6) {
              o5.push(n5(e6), ";\n");
            }, "directives"), a5.interpreter && o5.push(e5.call(n5, "interpreter")), o5.push(e5.call(function(e6) {
              return g4(e6, t4, n5);
            }, "body")), $s.concat(o5);
          case "Noop":
          case "EmptyStatement":
            return $s.fromString("");
          case "ExpressionStatement":
            return $s.concat([e5.call(n5, "expression"), ";"]);
          case "ParenthesizedExpression":
            return $s.concat(["(", e5.call(n5, "expression"), ")"]);
          case "BinaryExpression":
          case "LogicalExpression":
          case "AssignmentExpression":
            return $s.fromString(" ").join([e5.call(n5, "left"), a5.operator, e5.call(n5, "right")]);
          case "AssignmentPattern":
            return $s.concat([e5.call(n5, "left"), " = ", e5.call(n5, "right")]);
          case "MemberExpression":
          case "OptionalMemberExpression":
            o5.push(e5.call(n5, "object"));
            var c5 = e5.call(n5, "property"), u4 = s4.getFieldValue(a5, "optional");
            return a5.computed ? o5.push(u4 ? "?.[" : "[", c5, "]") : o5.push(u4 ? "?." : ".", c5), $s.concat(o5);
          case "ChainExpression":
            return e5.call(n5, "expression");
          case "MetaProperty":
            return $s.concat([e5.call(n5, "meta"), ".", e5.call(n5, "property")]);
          case "BindExpression":
            return a5.object && o5.push(e5.call(n5, "object")), o5.push("::", e5.call(n5, "callee")), $s.concat(o5);
          case "Path":
            return $s.fromString(".").join(a5.body);
          case "Identifier":
            return $s.concat([$s.fromString(a5.name, t4), a5.optional ? "?" : "", e5.call(n5, "typeAnnotation")]);
          case "SpreadElement":
          case "SpreadElementPattern":
          case "RestProperty":
          case "SpreadProperty":
          case "SpreadPropertyPattern":
          case "ObjectTypeSpreadProperty":
          case "RestElement":
            return $s.concat(["...", e5.call(n5, "argument"), e5.call(n5, "typeAnnotation")]);
          case "FunctionDeclaration":
          case "FunctionExpression":
          case "TSDeclareFunction":
            return a5.declare && o5.push("declare "), a5.async && o5.push("async "), o5.push("function"), a5.generator && o5.push("*"), a5.id ? o5.push(" ", e5.call(n5, "id"), e5.call(n5, "typeParameters")) : a5.typeParameters && o5.push(e5.call(n5, "typeParameters")), o5.push("(", v5(e5, t4, n5), ")", e5.call(n5, "returnType")), a5.body && o5.push(" ", e5.call(n5, "body")), $s.concat(o5);
          case "ArrowFunctionExpression":
            return a5.async && o5.push("async "), a5.typeParameters && o5.push(e5.call(n5, "typeParameters")), t4.arrowParensAlways || a5.params.length !== 1 || a5.rest || a5.params[0].type !== "Identifier" || a5.params[0].typeAnnotation || a5.returnType ? o5.push("(", v5(e5, t4, n5), ")", e5.call(n5, "returnType")) : o5.push(e5.call(n5, "params", 0)), o5.push(" => ", e5.call(n5, "body")), $s.concat(o5);
          case "MethodDefinition":
            return b3(e5, t4, n5);
          case "YieldExpression":
            return o5.push("yield"), a5.delegate && o5.push("*"), a5.argument && o5.push(" ", e5.call(n5, "argument")), $s.concat(o5);
          case "AwaitExpression":
            return o5.push("await"), a5.all && o5.push("*"), a5.argument && o5.push(" ", e5.call(n5, "argument")), $s.concat(o5);
          case "ModuleDeclaration":
            return o5.push("module", e5.call(n5, "id")), a5.source ? (r4.default.ok(!a5.body), o5.push("from", e5.call(n5, "source"))) : o5.push(e5.call(n5, "body")), $s.fromString(" ").join(o5);
          case "ImportSpecifier":
            return a5.importKind && a5.importKind !== "value" && o5.push(a5.importKind + " "), a5.imported ? (o5.push(e5.call(n5, "imported")), a5.local && a5.local.name !== a5.imported.name && o5.push(" as ", e5.call(n5, "local"))) : a5.id && (o5.push(e5.call(n5, "id")), a5.name && o5.push(" as ", e5.call(n5, "name"))), $s.concat(o5);
          case "ExportSpecifier":
            return a5.local ? (o5.push(e5.call(n5, "local")), a5.exported && a5.exported.name !== a5.local.name && o5.push(" as ", e5.call(n5, "exported"))) : a5.id && (o5.push(e5.call(n5, "id")), a5.name && o5.push(" as ", e5.call(n5, "name"))), $s.concat(o5);
          case "ExportBatchSpecifier":
            return $s.fromString("*");
          case "ImportNamespaceSpecifier":
            return o5.push("* as "), a5.local ? o5.push(e5.call(n5, "local")) : a5.id && o5.push(e5.call(n5, "id")), $s.concat(o5);
          case "ImportDefaultSpecifier":
            return a5.local ? e5.call(n5, "local") : e5.call(n5, "id");
          case "TSExportAssignment":
            return $s.concat(["export = ", e5.call(n5, "expression")]);
          case "ExportDeclaration":
          case "ExportDefaultDeclaration":
          case "ExportNamedDeclaration":
            return S4(e5, t4, n5);
          case "ExportAllDeclaration":
            return o5.push("export *"), a5.exported && o5.push(" as ", e5.call(n5, "exported")), o5.push(" from ", e5.call(n5, "source"), ";"), $s.concat(o5);
          case "TSNamespaceExportDeclaration":
            return o5.push("export as namespace ", e5.call(n5, "id")), N3($s.concat(o5));
          case "ExportNamespaceSpecifier":
            return $s.concat(["* as ", e5.call(n5, "exported")]);
          case "ExportDefaultSpecifier":
            return e5.call(n5, "exported");
          case "Import":
            return $s.fromString("import", t4);
          case "ImportExpression":
            return $s.concat(["import(", e5.call(n5, "source"), ")"]);
          case "ImportDeclaration":
            if (o5.push("import "), a5.importKind && a5.importKind !== "value" && o5.push(a5.importKind + " "), a5.specifiers && a5.specifiers.length > 0) {
              var h5 = [], p5 = [];
              e5.each(function(e6) {
                var t5 = e6.getValue();
                t5.type === "ImportSpecifier" ? p5.push(n5(e6)) : t5.type !== "ImportDefaultSpecifier" && t5.type !== "ImportNamespaceSpecifier" || h5.push(n5(e6));
              }, "specifiers"), h5.forEach(function(e6, t5) {
                t5 > 0 && o5.push(", "), o5.push(e6);
              }), p5.length > 0 && ((ge3 = $s.fromString(", ").join(p5)).getLineLength(1) > t4.wrapColumn && (ge3 = $s.concat([$s.fromString(",\n").join(p5).indent(t4.tabWidth), ","])), h5.length > 0 && o5.push(", "), ge3.length > 1 ? o5.push("{\n", ge3, "\n}") : t4.objectCurlySpacing ? o5.push("{ ", ge3, " }") : o5.push("{", ge3, "}")), o5.push(" from ");
            }
            return o5.push(e5.call(n5, "source"), ";"), $s.concat(o5);
          case "BlockStatement":
            var d5 = e5.call(function(e6) {
              return g4(e6, t4, n5);
            }, "body");
            return !d5.isEmpty() || a5.directives && a5.directives.length !== 0 ? (o5.push("{\n"), a5.directives && e5.each(function(e6) {
              o5.push(N3(n5(e6).indent(t4.tabWidth)), a5.directives.length > 1 || !d5.isEmpty() ? "\n" : "");
            }, "directives"), o5.push(d5.indent(t4.tabWidth)), o5.push("\n}"), $s.concat(o5)) : $s.fromString("{}");
          case "ReturnStatement":
            if (o5.push("return"), a5.argument) {
              var f5 = e5.call(n5, "argument");
              f5.startsWithComment() || f5.length > 1 && i4.JSXElement && i4.JSXElement.check(a5.argument) ? o5.push(" (\n", f5.indent(t4.tabWidth), "\n)") : o5.push(" ", f5);
            }
            return o5.push(";"), $s.concat(o5);
          case "CallExpression":
          case "OptionalCallExpression":
            return o5.push(e5.call(n5, "callee")), a5.typeParameters && o5.push(e5.call(n5, "typeParameters")), a5.typeArguments && o5.push(e5.call(n5, "typeArguments")), s4.getFieldValue(a5, "optional") && o5.push("?."), o5.push(E4(e5, t4, n5)), $s.concat(o5);
          case "ObjectExpression":
          case "ObjectPattern":
          case "ObjectTypeAnnotation":
            var m5 = a5.type === "ObjectTypeAnnotation", y5 = t4.flowObjectCommas ? "," : m5 ? ";" : ",", x5 = [], C4 = false;
            m5 && (x5.push("indexers", "callProperties"), a5.internalSlots != null && x5.push("internalSlots")), x5.push("properties");
            var D4 = 0;
            x5.forEach(function(e6) {
              D4 += a5[e6].length;
            });
            var I3 = m5 && D4 === 1 || D4 === 0, F3 = a5.exact ? "{|" : "{", M4 = a5.exact ? "|}" : "}";
            o5.push(I3 ? F3 : F3 + "\n");
            var L3 = o5.length - 1, O4 = 0;
            if (x5.forEach(function(r5) {
              e5.each(function(e6) {
                var r6 = n5(e6);
                I3 || (r6 = r6.indent(t4.tabWidth));
                var s5 = !m5 && r6.length > 1;
                s5 && C4 && o5.push("\n"), o5.push(r6), O4 < D4 - 1 ? (o5.push(y5 + (s5 ? "\n\n" : "\n")), C4 = !s5) : (D4 !== 1 && m5 || !I3 && l3.isTrailingCommaEnabled(t4, "objects") && e6.getValue().type !== "RestElement") && o5.push(y5), O4++;
              }, r5);
            }), a5.inexact) {
              var _4 = $s.fromString("...", t4);
              I3 ? (D4 > 0 && o5.push(y5, " "), o5.push(_4)) : o5.push("\n", _4.indent(t4.tabWidth));
            }
            return o5.push(I3 ? M4 : "\n" + M4), O4 !== 0 && I3 && t4.objectCurlySpacing && (o5[L3] = F3 + " ", o5[o5.length - 1] = " " + M4), a5.typeAnnotation && o5.push(e5.call(n5, "typeAnnotation")), $s.concat(o5);
          case "PropertyPattern":
            return $s.concat([e5.call(n5, "key"), ": ", e5.call(n5, "pattern")]);
          case "ObjectProperty":
          case "Property":
            if (a5.method || a5.kind === "get" || a5.kind === "set")
              return b3(e5, t4, n5);
            if (a5.shorthand && a5.value.type === "AssignmentPattern")
              return e5.call(n5, "value");
            var B4 = e5.call(n5, "key");
            return a5.computed ? o5.push("[", B4, "]") : o5.push(B4), a5.shorthand && a5.key.name === a5.value.name || o5.push(": ", e5.call(n5, "value")), $s.concat(o5);
          case "ClassMethod":
          case "ObjectMethod":
          case "ClassPrivateMethod":
          case "TSDeclareMethod":
            return b3(e5, t4, n5);
          case "PrivateName":
            return $s.concat(["#", e5.call(n5, "id")]);
          case "Decorator":
            return $s.concat(["@", e5.call(n5, "expression")]);
          case "ArrayExpression":
          case "ArrayPattern":
            var R3 = a5.elements.length, j4 = e5.map(n5, "elements"), U3 = $s.fromString(", ").join(j4).getLineLength(1) <= t4.wrapColumn;
            return U3 ? t4.arrayBracketSpacing ? o5.push("[ ") : o5.push("[") : o5.push("[\n"), e5.each(function(e6) {
              var r5 = e6.getName();
              if (e6.getValue()) {
                var s5 = j4[r5];
                U3 ? r5 > 0 && o5.push(" ") : s5 = s5.indent(t4.tabWidth), o5.push(s5), (r5 < R3 - 1 || !U3 && l3.isTrailingCommaEnabled(t4, "arrays")) && o5.push(","), U3 || o5.push("\n");
              } else
                o5.push(",");
            }, "elements"), U3 && t4.arrayBracketSpacing ? o5.push(" ]") : o5.push("]"), a5.typeAnnotation && o5.push(e5.call(n5, "typeAnnotation")), $s.concat(o5);
          case "SequenceExpression":
            return $s.fromString(", ").join(e5.map(n5, "expressions"));
          case "ThisExpression":
            return $s.fromString("this");
          case "Super":
            return $s.fromString("super");
          case "NullLiteral":
            return $s.fromString("null");
          case "RegExpLiteral":
            return $s.fromString(a5.extra.raw);
          case "BigIntLiteral":
            return $s.fromString(a5.value + "n");
          case "NumericLiteral":
            return a5.extra && typeof a5.extra.raw == "string" && Number(a5.extra.raw) === a5.value ? $s.fromString(a5.extra.raw, t4) : $s.fromString(a5.value, t4);
          case "BooleanLiteral":
          case "StringLiteral":
          case "Literal":
            return typeof a5.value == "number" && typeof a5.raw == "string" && Number(a5.raw) === a5.value ? $s.fromString(a5.raw, t4) : typeof a5.value != "string" ? $s.fromString(a5.value, t4) : $s.fromString(k4(a5.value, t4), t4);
          case "Directive":
            return e5.call(n5, "value");
          case "DirectiveLiteral":
            return $s.fromString(k4(a5.value, t4));
          case "InterpreterDirective":
            return $s.fromString("#!" + a5.value + "\n", t4);
          case "ModuleSpecifier":
            if (a5.local)
              throw new Error("The ESTree ModuleSpecifier type should be abstract");
            return $s.fromString(k4(a5.value, t4), t4);
          case "UnaryExpression":
            return o5.push(a5.operator), /[a-z]$/.test(a5.operator) && o5.push(" "), o5.push(e5.call(n5, "argument")), $s.concat(o5);
          case "UpdateExpression":
            return o5.push(e5.call(n5, "argument"), a5.operator), a5.prefix && o5.reverse(), $s.concat(o5);
          case "ConditionalExpression":
            return $s.concat([e5.call(n5, "test"), " ? ", e5.call(n5, "consequent"), " : ", e5.call(n5, "alternate")]);
          case "NewExpression":
            return o5.push("new ", e5.call(n5, "callee")), a5.typeParameters && o5.push(e5.call(n5, "typeParameters")), a5.typeArguments && o5.push(e5.call(n5, "typeArguments")), a5.arguments && o5.push(E4(e5, t4, n5)), $s.concat(o5);
          case "VariableDeclaration":
            a5.declare && o5.push("declare "), o5.push(a5.kind, " ");
            var q4 = 0, z3 = e5.map(function(e6) {
              var t5 = n5(e6);
              return q4 = Math.max(t5.length, q4), t5;
            }, "declarations");
            q4 === 1 ? o5.push($s.fromString(", ").join(z3)) : z3.length > 1 ? o5.push($s.fromString(",\n").join(z3).indentTail(a5.kind.length + 1)) : o5.push(z3[0]);
            var V3 = e5.getParentNode();
            return i4.ForStatement.check(V3) || i4.ForInStatement.check(V3) || i4.ForOfStatement && i4.ForOfStatement.check(V3) || i4.ForAwaitStatement && i4.ForAwaitStatement.check(V3) || o5.push(";"), $s.concat(o5);
          case "VariableDeclarator":
            return a5.init ? $s.fromString(" = ").join([e5.call(n5, "id"), e5.call(n5, "init")]) : e5.call(n5, "id");
          case "WithStatement":
            return $s.concat(["with (", e5.call(n5, "object"), ") ", e5.call(n5, "body")]);
          case "IfStatement":
            var J3 = w4(e5.call(n5, "consequent"), t4);
            return o5.push("if (", e5.call(n5, "test"), ")", J3), a5.alternate && o5.push(P3(J3) ? " else" : "\nelse", w4(e5.call(n5, "alternate"), t4)), $s.concat(o5);
          case "ForStatement":
            var X3 = e5.call(n5, "init"), G3 = X3.length > 1 ? ";\n" : "; ", H3 = "for (", W3 = $s.fromString(G3).join([X3, e5.call(n5, "test"), e5.call(n5, "update")]).indentTail(H3.length), K3 = $s.concat([H3, W3, ")"]), $4 = w4(e5.call(n5, "body"), t4);
            return o5.push(K3), K3.length > 1 && (o5.push("\n"), $4 = $4.trimLeft()), o5.push($4), $s.concat(o5);
          case "WhileStatement":
            return $s.concat(["while (", e5.call(n5, "test"), ")", w4(e5.call(n5, "body"), t4)]);
          case "ForInStatement":
            return $s.concat([a5.each ? "for each (" : "for (", e5.call(n5, "left"), " in ", e5.call(n5, "right"), ")", w4(e5.call(n5, "body"), t4)]);
          case "ForOfStatement":
          case "ForAwaitStatement":
            return o5.push("for "), (a5.await || a5.type === "ForAwaitStatement") && o5.push("await "), o5.push("(", e5.call(n5, "left"), " of ", e5.call(n5, "right"), ")", w4(e5.call(n5, "body"), t4)), $s.concat(o5);
          case "DoWhileStatement":
            var Y3 = $s.concat(["do", w4(e5.call(n5, "body"), t4)]);
            return o5.push(Y3), P3(Y3) ? o5.push(" while") : o5.push("\nwhile"), o5.push(" (", e5.call(n5, "test"), ");"), $s.concat(o5);
          case "DoExpression":
            var Q3 = e5.call(function(e6) {
              return g4(e6, t4, n5);
            }, "body");
            return $s.concat(["do {\n", Q3.indent(t4.tabWidth), "\n}"]);
          case "BreakStatement":
            return o5.push("break"), a5.label && o5.push(" ", e5.call(n5, "label")), o5.push(";"), $s.concat(o5);
          case "ContinueStatement":
            return o5.push("continue"), a5.label && o5.push(" ", e5.call(n5, "label")), o5.push(";"), $s.concat(o5);
          case "LabeledStatement":
            return $s.concat([e5.call(n5, "label"), ":\n", e5.call(n5, "body")]);
          case "TryStatement":
            return o5.push("try ", e5.call(n5, "block")), a5.handler ? o5.push(" ", e5.call(n5, "handler")) : a5.handlers && e5.each(function(e6) {
              o5.push(" ", n5(e6));
            }, "handlers"), a5.finalizer && o5.push(" finally ", e5.call(n5, "finalizer")), $s.concat(o5);
          case "CatchClause":
            return o5.push("catch "), a5.param && o5.push("(", e5.call(n5, "param")), a5.guard && o5.push(" if ", e5.call(n5, "guard")), a5.param && o5.push(") "), o5.push(e5.call(n5, "body")), $s.concat(o5);
          case "ThrowStatement":
            return $s.concat(["throw ", e5.call(n5, "argument"), ";"]);
          case "SwitchStatement":
            return $s.concat(["switch (", e5.call(n5, "discriminant"), ") {\n", $s.fromString("\n").join(e5.map(n5, "cases")), "\n}"]);
          case "SwitchCase":
            return a5.test ? o5.push("case ", e5.call(n5, "test"), ":") : o5.push("default:"), a5.consequent.length > 0 && o5.push("\n", e5.call(function(e6) {
              return g4(e6, t4, n5);
            }, "consequent").indent(t4.tabWidth)), $s.concat(o5);
          case "DebuggerStatement":
            return $s.fromString("debugger;");
          case "JSXAttribute":
            return o5.push(e5.call(n5, "name")), a5.value && o5.push("=", e5.call(n5, "value")), $s.concat(o5);
          case "JSXIdentifier":
            return $s.fromString(a5.name, t4);
          case "JSXNamespacedName":
            return $s.fromString(":").join([e5.call(n5, "namespace"), e5.call(n5, "name")]);
          case "JSXMemberExpression":
            return $s.fromString(".").join([e5.call(n5, "object"), e5.call(n5, "property")]);
          case "JSXSpreadAttribute":
            return $s.concat(["{...", e5.call(n5, "argument"), "}"]);
          case "JSXSpreadChild":
            return $s.concat(["{...", e5.call(n5, "expression"), "}"]);
          case "JSXExpressionContainer":
            return $s.concat(["{", e5.call(n5, "expression"), "}"]);
          case "JSXElement":
          case "JSXFragment":
            var Z3 = "opening" + (a5.type === "JSXElement" ? "Element" : "Fragment"), ee3 = "closing" + (a5.type === "JSXElement" ? "Element" : "Fragment"), te3 = e5.call(n5, Z3);
            if (a5[Z3].selfClosing)
              return r4.default.ok(!a5[ee3], "unexpected " + ee3 + " element in self-closing " + a5.type), te3;
            var re3 = $s.concat(e5.map(function(e6) {
              var t5 = e6.getValue();
              if (i4.Literal.check(t5) && typeof t5.value == "string") {
                if (/\S/.test(t5.value))
                  return t5.value.replace(/^\s+|\s+$/g, "");
                if (/\n/.test(t5.value))
                  return "\n";
              }
              return n5(e6);
            }, "children")).indentTail(t4.tabWidth), se3 = e5.call(n5, ee3);
            return $s.concat([te3, re3, se3]);
          case "JSXOpeningElement":
            o5.push("<", e5.call(n5, "name"));
            var ie3 = [];
            e5.each(function(e6) {
              ie3.push(" ", n5(e6));
            }, "attributes");
            var ne3 = $s.concat(ie3);
            return (ne3.length > 1 || ne3.getLineLength(1) > t4.wrapColumn) && (ie3.forEach(function(e6, t5) {
              e6 === " " && (r4.default.strictEqual(t5 % 2, 0), ie3[t5] = "\n");
            }), ne3 = $s.concat(ie3).indentTail(t4.tabWidth)), o5.push(ne3, a5.selfClosing ? " />" : ">"), $s.concat(o5);
          case "JSXClosingElement":
            return $s.concat(["</", e5.call(n5, "name"), ">"]);
          case "JSXOpeningFragment":
            return $s.fromString("<>");
          case "JSXClosingFragment":
            return $s.fromString("</>");
          case "JSXText":
            return $s.fromString(a5.value, t4);
          case "JSXEmptyExpression":
            return $s.fromString("");
          case "TypeAnnotatedIdentifier":
            return $s.concat([e5.call(n5, "annotation"), " ", e5.call(n5, "identifier")]);
          case "ClassBody":
            return a5.body.length === 0 ? $s.fromString("{}") : $s.concat(["{\n", e5.call(function(e6) {
              return g4(e6, t4, n5);
            }, "body").indent(t4.tabWidth), "\n}"]);
          case "ClassPropertyDefinition":
            return o5.push("static ", e5.call(n5, "definition")), i4.MethodDefinition.check(a5.definition) || o5.push(";"), $s.concat(o5);
          case "ClassProperty":
            a5.declare && o5.push("declare ");
            var ae3 = a5.accessibility || a5.access;
            return typeof ae3 == "string" && o5.push(ae3, " "), a5.static && o5.push("static "), a5.abstract && o5.push("abstract "), a5.readonly && o5.push("readonly "), B4 = e5.call(n5, "key"), a5.computed && (B4 = $s.concat(["[", B4, "]"])), a5.variance && (B4 = $s.concat([T3(e5, n5), B4])), o5.push(B4), a5.optional && o5.push("?"), a5.typeAnnotation && o5.push(e5.call(n5, "typeAnnotation")), a5.value && o5.push(" = ", e5.call(n5, "value")), o5.push(";"), $s.concat(o5);
          case "ClassPrivateProperty":
            return a5.static && o5.push("static "), o5.push(e5.call(n5, "key")), a5.typeAnnotation && o5.push(e5.call(n5, "typeAnnotation")), a5.value && o5.push(" = ", e5.call(n5, "value")), o5.push(";"), $s.concat(o5);
          case "ClassDeclaration":
          case "ClassExpression":
            return a5.declare && o5.push("declare "), a5.abstract && o5.push("abstract "), o5.push("class"), a5.id && o5.push(" ", e5.call(n5, "id")), a5.typeParameters && o5.push(e5.call(n5, "typeParameters")), a5.superClass && o5.push(" extends ", e5.call(n5, "superClass"), e5.call(n5, "superTypeParameters")), a5.implements && a5.implements.length > 0 && o5.push(" implements ", $s.fromString(", ").join(e5.map(n5, "implements"))), o5.push(" ", e5.call(n5, "body")), $s.concat(o5);
          case "TemplateElement":
            return $s.fromString(a5.value.raw, t4).lockIndentTail();
          case "TemplateLiteral":
            var oe3 = e5.map(n5, "expressions");
            return o5.push("`"), e5.each(function(e6) {
              var t5 = e6.getName();
              o5.push(n5(e6)), t5 < oe3.length && o5.push("${", oe3[t5], "}");
            }, "quasis"), o5.push("`"), $s.concat(o5).lockIndentTail();
          case "TaggedTemplateExpression":
            return $s.concat([e5.call(n5, "tag"), e5.call(n5, "quasi")]);
          case "Node":
          case "Printable":
          case "SourceLocation":
          case "Position":
          case "Statement":
          case "Function":
          case "Pattern":
          case "Expression":
          case "Declaration":
          case "Specifier":
          case "NamedSpecifier":
          case "Comment":
          case "Flow":
          case "FlowType":
          case "FlowPredicate":
          case "MemberTypeAnnotation":
          case "Type":
          case "TSHasOptionalTypeParameterInstantiation":
          case "TSHasOptionalTypeParameters":
          case "TSHasOptionalTypeAnnotation":
          case "ChainElement":
            throw new Error("unprintable type: " + JSON.stringify(a5.type));
          case "CommentBlock":
          case "Block":
            return $s.concat(["/*", $s.fromString(a5.value, t4), "*/"]);
          case "CommentLine":
          case "Line":
            return $s.concat(["//", $s.fromString(a5.value, t4)]);
          case "TypeAnnotation":
            return a5.typeAnnotation ? (a5.typeAnnotation.type !== "FunctionTypeAnnotation" && o5.push(": "), o5.push(e5.call(n5, "typeAnnotation")), $s.concat(o5)) : $s.fromString("");
          case "ExistentialTypeParam":
          case "ExistsTypeAnnotation":
            return $s.fromString("*", t4);
          case "EmptyTypeAnnotation":
            return $s.fromString("empty", t4);
          case "AnyTypeAnnotation":
            return $s.fromString("any", t4);
          case "MixedTypeAnnotation":
            return $s.fromString("mixed", t4);
          case "ArrayTypeAnnotation":
            return $s.concat([e5.call(n5, "elementType"), "[]"]);
          case "TupleTypeAnnotation":
            var le3 = e5.map(n5, "types"), ce3 = $s.fromString(", ").join(le3).getLineLength(1) <= t4.wrapColumn;
            return ce3 ? t4.arrayBracketSpacing ? o5.push("[ ") : o5.push("[") : o5.push("[\n"), e5.each(function(e6) {
              var r5 = e6.getName();
              if (e6.getValue()) {
                var s5 = le3[r5];
                ce3 ? r5 > 0 && o5.push(" ") : s5 = s5.indent(t4.tabWidth), o5.push(s5), (r5 < a5.types.length - 1 || !ce3 && l3.isTrailingCommaEnabled(t4, "arrays")) && o5.push(","), ce3 || o5.push("\n");
              } else
                o5.push(",");
            }, "types"), ce3 && t4.arrayBracketSpacing ? o5.push(" ]") : o5.push("]"), $s.concat(o5);
          case "BooleanTypeAnnotation":
            return $s.fromString("boolean", t4);
          case "BooleanLiteralTypeAnnotation":
            return r4.default.strictEqual(typeof a5.value, "boolean"), $s.fromString("" + a5.value, t4);
          case "InterfaceTypeAnnotation":
            return o5.push("interface"), a5.extends && a5.extends.length > 0 && o5.push(" extends ", $s.fromString(", ").join(e5.map(n5, "extends"))), o5.push(" ", e5.call(n5, "body")), $s.concat(o5);
          case "DeclareClass":
            return A3(e5, ["class ", e5.call(n5, "id"), " ", e5.call(n5, "body")]);
          case "DeclareFunction":
            return A3(e5, ["function ", e5.call(n5, "id"), ";"]);
          case "DeclareModule":
            return A3(e5, ["module ", e5.call(n5, "id"), " ", e5.call(n5, "body")]);
          case "DeclareModuleExports":
            return A3(e5, ["module.exports", e5.call(n5, "typeAnnotation")]);
          case "DeclareVariable":
            return A3(e5, ["var ", e5.call(n5, "id"), ";"]);
          case "DeclareExportDeclaration":
          case "DeclareExportAllDeclaration":
            return $s.concat(["declare ", S4(e5, t4, n5)]);
          case "EnumDeclaration":
            return $s.concat(["enum ", e5.call(n5, "id"), e5.call(n5, "body")]);
          case "EnumBooleanBody":
          case "EnumNumberBody":
          case "EnumStringBody":
          case "EnumSymbolBody":
            return (a5.type === "EnumSymbolBody" || a5.explicitType) && o5.push(" of ", a5.type.slice(4, -4).toLowerCase()), o5.push(" {\n", $s.fromString("\n").join(e5.map(n5, "members")).indent(t4.tabWidth), "\n}"), $s.concat(o5);
          case "EnumDefaultedMember":
            return $s.concat([e5.call(n5, "id"), ","]);
          case "EnumBooleanMember":
          case "EnumNumberMember":
          case "EnumStringMember":
            return $s.concat([e5.call(n5, "id"), " = ", e5.call(n5, "init"), ","]);
          case "InferredPredicate":
            return $s.fromString("%checks", t4);
          case "DeclaredPredicate":
            return $s.concat(["%checks(", e5.call(n5, "value"), ")"]);
          case "FunctionTypeAnnotation":
            var ue3 = e5.getParentNode(0), he3 = !(i4.ObjectTypeCallProperty.check(ue3) || i4.ObjectTypeInternalSlot.check(ue3) && ue3.method || i4.DeclareFunction.check(e5.getParentNode(2)));
            he3 && !i4.FunctionTypeParam.check(ue3) && !i4.TypeAlias.check(ue3) && o5.push(": ");
            var pe3 = a5.params.length !== 1 || a5.params[0].name;
            return o5.push(pe3 ? "(" : "", v5(e5, t4, n5), pe3 ? ")" : ""), a5.returnType && o5.push(he3 ? " => " : ": ", e5.call(n5, "returnType")), $s.concat(o5);
          case "FunctionTypeParam":
            var de3 = e5.call(n5, "name");
            return o5.push(de3), a5.optional && o5.push("?"), de3.infos[0].line && o5.push(": "), o5.push(e5.call(n5, "typeAnnotation")), $s.concat(o5);
          case "GenericTypeAnnotation":
            return $s.concat([e5.call(n5, "id"), e5.call(n5, "typeParameters")]);
          case "DeclareInterface":
            o5.push("declare ");
          case "InterfaceDeclaration":
          case "TSInterfaceDeclaration":
            return a5.declare && o5.push("declare "), o5.push("interface ", e5.call(n5, "id"), e5.call(n5, "typeParameters"), " "), a5.extends && a5.extends.length > 0 && o5.push("extends ", $s.fromString(", ").join(e5.map(n5, "extends")), " "), a5.body && o5.push(e5.call(n5, "body")), $s.concat(o5);
          case "ClassImplements":
          case "InterfaceExtends":
            return $s.concat([e5.call(n5, "id"), e5.call(n5, "typeParameters")]);
          case "IntersectionTypeAnnotation":
            return $s.fromString(" & ").join(e5.map(n5, "types"));
          case "NullableTypeAnnotation":
            return $s.concat(["?", e5.call(n5, "typeAnnotation")]);
          case "NullLiteralTypeAnnotation":
            return $s.fromString("null", t4);
          case "ThisTypeAnnotation":
            return $s.fromString("this", t4);
          case "NumberTypeAnnotation":
            return $s.fromString("number", t4);
          case "ObjectTypeCallProperty":
            return e5.call(n5, "value");
          case "ObjectTypeIndexer":
            return a5.static && o5.push("static "), o5.push(T3(e5, n5), "["), a5.id && o5.push(e5.call(n5, "id"), ": "), o5.push(e5.call(n5, "key"), "]: ", e5.call(n5, "value")), $s.concat(o5);
          case "ObjectTypeProperty":
            return $s.concat([T3(e5, n5), e5.call(n5, "key"), a5.optional ? "?" : "", ": ", e5.call(n5, "value")]);
          case "ObjectTypeInternalSlot":
            return $s.concat([a5.static ? "static " : "", "[[", e5.call(n5, "id"), "]]", a5.optional ? "?" : "", a5.value.type !== "FunctionTypeAnnotation" ? ": " : "", e5.call(n5, "value")]);
          case "QualifiedTypeIdentifier":
            return $s.concat([e5.call(n5, "qualification"), ".", e5.call(n5, "id")]);
          case "StringLiteralTypeAnnotation":
            return $s.fromString(k4(a5.value, t4), t4);
          case "NumberLiteralTypeAnnotation":
          case "NumericLiteralTypeAnnotation":
            return r4.default.strictEqual(typeof a5.value, "number"), $s.fromString(JSON.stringify(a5.value), t4);
          case "BigIntLiteralTypeAnnotation":
            return $s.fromString(a5.raw, t4);
          case "StringTypeAnnotation":
            return $s.fromString("string", t4);
          case "DeclareTypeAlias":
            o5.push("declare ");
          case "TypeAlias":
            return $s.concat(["type ", e5.call(n5, "id"), e5.call(n5, "typeParameters"), " = ", e5.call(n5, "right"), ";"]);
          case "DeclareOpaqueType":
            o5.push("declare ");
          case "OpaqueType":
            return o5.push("opaque type ", e5.call(n5, "id"), e5.call(n5, "typeParameters")), a5.supertype && o5.push(": ", e5.call(n5, "supertype")), a5.impltype && o5.push(" = ", e5.call(n5, "impltype")), o5.push(";"), $s.concat(o5);
          case "TypeCastExpression":
            return $s.concat(["(", e5.call(n5, "expression"), e5.call(n5, "typeAnnotation"), ")"]);
          case "TypeParameterDeclaration":
          case "TypeParameterInstantiation":
            return $s.concat(["<", $s.fromString(", ").join(e5.map(n5, "params")), ">"]);
          case "Variance":
            return a5.kind === "plus" ? $s.fromString("+") : a5.kind === "minus" ? $s.fromString("-") : $s.fromString("");
          case "TypeParameter":
            return a5.variance && o5.push(T3(e5, n5)), o5.push(e5.call(n5, "name")), a5.bound && o5.push(e5.call(n5, "bound")), a5.default && o5.push("=", e5.call(n5, "default")), $s.concat(o5);
          case "TypeofTypeAnnotation":
            return $s.concat([$s.fromString("typeof ", t4), e5.call(n5, "argument")]);
          case "UnionTypeAnnotation":
            return $s.fromString(" | ").join(e5.map(n5, "types"));
          case "VoidTypeAnnotation":
            return $s.fromString("void", t4);
          case "NullTypeAnnotation":
            return $s.fromString("null", t4);
          case "SymbolTypeAnnotation":
            return $s.fromString("symbol", t4);
          case "BigIntTypeAnnotation":
            return $s.fromString("bigint", t4);
          case "TSType":
            throw new Error("unprintable type: " + JSON.stringify(a5.type));
          case "TSNumberKeyword":
            return $s.fromString("number", t4);
          case "TSBigIntKeyword":
            return $s.fromString("bigint", t4);
          case "TSObjectKeyword":
            return $s.fromString("object", t4);
          case "TSBooleanKeyword":
            return $s.fromString("boolean", t4);
          case "TSStringKeyword":
            return $s.fromString("string", t4);
          case "TSSymbolKeyword":
            return $s.fromString("symbol", t4);
          case "TSAnyKeyword":
            return $s.fromString("any", t4);
          case "TSVoidKeyword":
            return $s.fromString("void", t4);
          case "TSThisType":
            return $s.fromString("this", t4);
          case "TSNullKeyword":
            return $s.fromString("null", t4);
          case "TSUndefinedKeyword":
            return $s.fromString("undefined", t4);
          case "TSUnknownKeyword":
            return $s.fromString("unknown", t4);
          case "TSNeverKeyword":
            return $s.fromString("never", t4);
          case "TSArrayType":
            return $s.concat([e5.call(n5, "elementType"), "[]"]);
          case "TSLiteralType":
            return e5.call(n5, "literal");
          case "TSUnionType":
            return $s.fromString(" | ").join(e5.map(n5, "types"));
          case "TSIntersectionType":
            return $s.fromString(" & ").join(e5.map(n5, "types"));
          case "TSConditionalType":
            return o5.push(e5.call(n5, "checkType"), " extends ", e5.call(n5, "extendsType"), " ? ", e5.call(n5, "trueType"), " : ", e5.call(n5, "falseType")), $s.concat(o5);
          case "TSInferType":
            return o5.push("infer ", e5.call(n5, "typeParameter")), $s.concat(o5);
          case "TSParenthesizedType":
            return $s.concat(["(", e5.call(n5, "typeAnnotation"), ")"]);
          case "TSFunctionType":
            return $s.concat([e5.call(n5, "typeParameters"), "(", v5(e5, t4, n5), ") => ", e5.call(n5, "typeAnnotation", "typeAnnotation")]);
          case "TSConstructorType":
            return $s.concat(["new ", e5.call(n5, "typeParameters"), "(", v5(e5, t4, n5), ") => ", e5.call(n5, "typeAnnotation", "typeAnnotation")]);
          case "TSMappedType":
            return o5.push(a5.readonly ? "readonly " : "", "[", e5.call(n5, "typeParameter"), "]", a5.optional ? "?" : ""), a5.typeAnnotation && o5.push(": ", e5.call(n5, "typeAnnotation"), ";"), $s.concat(["{\n", $s.concat(o5).indent(t4.tabWidth), "\n}"]);
          case "TSTupleType":
            return $s.concat(["[", $s.fromString(", ").join(e5.map(n5, "elementTypes")), "]"]);
          case "TSNamedTupleMember":
            return o5.push(e5.call(n5, "label")), a5.optional && o5.push("?"), o5.push(": ", e5.call(n5, "elementType")), $s.concat(o5);
          case "TSRestType":
            return $s.concat(["...", e5.call(n5, "typeAnnotation")]);
          case "TSOptionalType":
            return $s.concat([e5.call(n5, "typeAnnotation"), "?"]);
          case "TSIndexedAccessType":
            return $s.concat([e5.call(n5, "objectType"), "[", e5.call(n5, "indexType"), "]"]);
          case "TSTypeOperator":
            return $s.concat([e5.call(n5, "operator"), " ", e5.call(n5, "typeAnnotation")]);
          case "TSTypeLiteral":
            return (ye3 = $s.fromString(",\n").join(e5.map(n5, "members"))).isEmpty() ? $s.fromString("{}", t4) : (o5.push("{\n", ye3.indent(t4.tabWidth), "\n}"), $s.concat(o5));
          case "TSEnumMember":
            return o5.push(e5.call(n5, "id")), a5.initializer && o5.push(" = ", e5.call(n5, "initializer")), $s.concat(o5);
          case "TSTypeQuery":
            return $s.concat(["typeof ", e5.call(n5, "exprName")]);
          case "TSParameterProperty":
            return a5.accessibility && o5.push(a5.accessibility, " "), a5.export && o5.push("export "), a5.static && o5.push("static "), a5.readonly && o5.push("readonly "), o5.push(e5.call(n5, "parameter")), $s.concat(o5);
          case "TSTypeReference":
            return $s.concat([e5.call(n5, "typeName"), e5.call(n5, "typeParameters")]);
          case "TSQualifiedName":
            return $s.concat([e5.call(n5, "left"), ".", e5.call(n5, "right")]);
          case "TSAsExpression":
            var fe3 = e5.call(n5, "expression");
            return o5.push(fe3, $s.fromString(" as "), e5.call(n5, "typeAnnotation")), $s.concat(o5);
          case "TSNonNullExpression":
            return $s.concat([e5.call(n5, "expression"), "!"]);
          case "TSTypeAnnotation":
            return $s.concat([": ", e5.call(n5, "typeAnnotation")]);
          case "TSIndexSignature":
            return $s.concat([a5.readonly ? "readonly " : "", "[", e5.map(n5, "parameters"), "]", e5.call(n5, "typeAnnotation")]);
          case "TSPropertySignature":
            return o5.push(T3(e5, n5), a5.readonly ? "readonly " : ""), a5.computed ? o5.push("[", e5.call(n5, "key"), "]") : o5.push(e5.call(n5, "key")), o5.push(a5.optional ? "?" : "", e5.call(n5, "typeAnnotation")), $s.concat(o5);
          case "TSMethodSignature":
            return a5.computed ? o5.push("[", e5.call(n5, "key"), "]") : o5.push(e5.call(n5, "key")), a5.optional && o5.push("?"), o5.push(e5.call(n5, "typeParameters"), "(", v5(e5, t4, n5), ")", e5.call(n5, "typeAnnotation")), $s.concat(o5);
          case "TSTypePredicate":
            return a5.asserts && o5.push("asserts "), o5.push(e5.call(n5, "parameterName")), a5.typeAnnotation && o5.push(" is ", e5.call(n5, "typeAnnotation", "typeAnnotation")), $s.concat(o5);
          case "TSCallSignatureDeclaration":
            return $s.concat([e5.call(n5, "typeParameters"), "(", v5(e5, t4, n5), ")", e5.call(n5, "typeAnnotation")]);
          case "TSConstructSignatureDeclaration":
            return a5.typeParameters ? o5.push("new", e5.call(n5, "typeParameters")) : o5.push("new "), o5.push("(", v5(e5, t4, n5), ")", e5.call(n5, "typeAnnotation")), $s.concat(o5);
          case "TSTypeAliasDeclaration":
            return $s.concat([a5.declare ? "declare " : "", "type ", e5.call(n5, "id"), e5.call(n5, "typeParameters"), " = ", e5.call(n5, "typeAnnotation"), ";"]);
          case "TSTypeParameter":
            o5.push(e5.call(n5, "name")), ue3 = e5.getParentNode(0);
            var me3 = i4.TSMappedType.check(ue3);
            return a5.constraint && o5.push(me3 ? " in " : " extends ", e5.call(n5, "constraint")), a5.default && o5.push(" = ", e5.call(n5, "default")), $s.concat(o5);
          case "TSTypeAssertion":
            return o5.push("<", e5.call(n5, "typeAnnotation"), "> ", e5.call(n5, "expression")), $s.concat(o5);
          case "TSTypeParameterDeclaration":
          case "TSTypeParameterInstantiation":
            return $s.concat(["<", $s.fromString(", ").join(e5.map(n5, "params")), ">"]);
          case "TSEnumDeclaration":
            var ye3;
            return o5.push(a5.declare ? "declare " : "", a5.const ? "const " : "", "enum ", e5.call(n5, "id")), (ye3 = $s.fromString(",\n").join(e5.map(n5, "members"))).isEmpty() ? o5.push(" {}") : o5.push(" {\n", ye3.indent(t4.tabWidth), "\n}"), $s.concat(o5);
          case "TSExpressionWithTypeArguments":
            return $s.concat([e5.call(n5, "expression"), e5.call(n5, "typeParameters")]);
          case "TSInterfaceBody":
            var ge3;
            return (ge3 = $s.fromString(";\n").join(e5.map(n5, "body"))).isEmpty() ? $s.fromString("{}", t4) : $s.concat(["{\n", ge3.indent(t4.tabWidth), ";", "\n}"]);
          case "TSImportType":
            return o5.push("import(", e5.call(n5, "argument"), ")"), a5.qualifier && o5.push(".", e5.call(n5, "qualifier")), a5.typeParameters && o5.push(e5.call(n5, "typeParameters")), $s.concat(o5);
          case "TSImportEqualsDeclaration":
            return a5.isExport && o5.push("export "), o5.push("import ", e5.call(n5, "id"), " = ", e5.call(n5, "moduleReference")), N3($s.concat(o5));
          case "TSExternalModuleReference":
            return $s.concat(["require(", e5.call(n5, "expression"), ")"]);
          case "TSModuleDeclaration":
            if ((ue3 = e5.getParentNode()).type === "TSModuleDeclaration" ? o5.push(".") : (a5.declare && o5.push("declare "), a5.global || (a5.id.type === "StringLiteral" || a5.id.type === "Literal" && typeof a5.id.value == "string" || a5.loc && a5.loc.lines && a5.id.loc && a5.loc.lines.sliceString(a5.loc.start, a5.id.loc.start).indexOf("module") >= 0 ? o5.push("module ") : o5.push("namespace "))), o5.push(e5.call(n5, "id")), a5.body && a5.body.type === "TSModuleDeclaration")
              o5.push(e5.call(n5, "body"));
            else if (a5.body) {
              var xe3 = e5.call(n5, "body");
              xe3.isEmpty() ? o5.push(" {}") : o5.push(" {\n", xe3.indent(t4.tabWidth), "\n}");
            }
            return $s.concat(o5);
          case "TSModuleBlock":
            return e5.call(function(e6) {
              return g4(e6, t4, n5);
            }, "body");
          case "ClassHeritage":
          case "ComprehensionBlock":
          case "ComprehensionExpression":
          case "Glob":
          case "GeneratorExpression":
          case "LetStatement":
          case "LetExpression":
          case "GraphExpression":
          case "GraphIndexExpression":
          case "XMLDefaultDeclaration":
          case "XMLAnyName":
          case "XMLQualifiedIdentifier":
          case "XMLFunctionQualifiedIdentifier":
          case "XMLAttributeSelector":
          case "XMLFilterExpression":
          case "XML":
          case "XMLElement":
          case "XMLList":
          case "XMLEscape":
          case "XMLText":
          case "XMLStartTag":
          case "XMLEndTag":
          case "XMLPointTag":
          case "XMLName":
          case "XMLAttribute":
          case "XMLCdata":
          case "XMLComment":
          case "XMLProcessingInstruction":
          default:
            throw new Error("unknown type: " + JSON.stringify(a5.type));
        }
      }
      function y4(e5, t4) {
        var r5 = [], s5 = e5.getValue();
        return s5.decorators && s5.decorators.length > 0 && !l3.getParentExportDeclaration(e5) ? e5.each(function(e6) {
          r5.push(t4(e6), "\n");
        }, "decorators") : l3.isExportDeclaration(s5) && s5.declaration && s5.declaration.decorators && e5.each(function(e6) {
          r5.push(t4(e6), "\n");
        }, "declaration", "decorators"), $s.concat(r5);
      }
      function g4(e5, t4, s5) {
        var a5 = [], o5 = false, c5 = false;
        e5.each(function(e6) {
          var t5 = e6.getValue();
          t5 && (t5.type !== "EmptyStatement" || t5.comments && t5.comments.length > 0) && (i4.Comment.check(t5) ? o5 = true : i4.Statement.check(t5) ? c5 = true : n4.assert(t5), a5.push({node: t5, printed: s5(e6)}));
        }), o5 && r4.default.strictEqual(c5, false, "Comments may appear as statements in otherwise empty statement lists, but may not coexist with non-Comment nodes.");
        var u4 = null, h5 = a5.length, p5 = [];
        return a5.forEach(function(e6, r5) {
          var s6, i5, n5 = e6.printed, a6 = e6.node, o6 = n5.length > 1, c6 = r5 > 0, d5 = r5 < h5 - 1, f5 = a6 && a6.loc && a6.loc.lines, m5 = f5 && t4.reuseWhitespace && l3.getTrueLoc(a6, f5);
          if (c6)
            if (m5) {
              var y5 = f5.skipSpaces(m5.start, true), g5 = y5 ? y5.line : 1, b4 = m5.start.line - g5;
              s6 = Array(b4 + 1).join("\n");
            } else
              s6 = o6 ? "\n\n" : "\n";
          else
            s6 = "";
          if (d5)
            if (m5) {
              var E5 = f5.skipSpaces(m5.end), v6 = (E5 ? E5.line : f5.length) - m5.end.line;
              i5 = Array(v6 + 1).join("\n");
            } else
              i5 = o6 ? "\n\n" : "\n";
          else
            i5 = "";
          p5.push(x4(u4, s6), n5), d5 ? u4 = i5 : i5 && p5.push(i5);
        }), $s.concat(p5);
      }
      function x4(e5, t4) {
        if (!e5 && !t4)
          return $s.fromString("");
        if (!e5)
          return $s.fromString(t4);
        if (!t4)
          return $s.fromString(e5);
        var r5 = $s.fromString(e5), s5 = $s.fromString(t4);
        return s5.length > r5.length ? s5 : r5;
      }
      function b3(e5, t4, r5) {
        var s5 = e5.getNode(), n5 = s5.kind, a5 = [], o5 = s5.value;
        i4.FunctionExpression.check(o5) || (o5 = s5);
        var l4 = s5.accessibility || s5.access;
        typeof l4 == "string" && a5.push(l4, " "), s5.static && a5.push("static "), s5.abstract && a5.push("abstract "), s5.readonly && a5.push("readonly "), o5.async && a5.push("async "), o5.generator && a5.push("*"), n5 !== "get" && n5 !== "set" || a5.push(n5, " ");
        var c5 = e5.call(r5, "key");
        return s5.computed && (c5 = $s.concat(["[", c5, "]"])), a5.push(c5), s5.optional && a5.push("?"), s5 === o5 ? (a5.push(e5.call(r5, "typeParameters"), "(", v5(e5, t4, r5), ")", e5.call(r5, "returnType")), s5.body ? a5.push(" ", e5.call(r5, "body")) : a5.push(";")) : (a5.push(e5.call(r5, "value", "typeParameters"), "(", e5.call(function(e6) {
          return v5(e6, t4, r5);
        }, "value"), ")", e5.call(r5, "value", "returnType")), o5.body ? a5.push(" ", e5.call(r5, "value", "body")) : a5.push(";")), $s.concat(a5);
      }
      function E4(e5, t4, r5) {
        var s5 = e5.map(r5, "arguments"), i5 = l3.isTrailingCommaEnabled(t4, "parameters"), n5 = $s.fromString(", ").join(s5);
        return n5.getLineLength(1) > t4.wrapColumn ? (n5 = $s.fromString(",\n").join(s5), $s.concat(["(\n", n5.indent(t4.tabWidth), i5 ? ",\n)" : "\n)"])) : $s.concat(["(", n5, ")"]);
      }
      function v5(e5, t4, r5) {
        var s5, i5 = e5.getValue(), n5 = [];
        i5.params ? (s5 = i5.params, n5 = e5.map(r5, "params")) : i5.parameters && (s5 = i5.parameters, n5 = e5.map(r5, "parameters")), i5.defaults && e5.each(function(e6) {
          var t5 = e6.getName(), s6 = n5[t5];
          s6 && e6.getValue() && (n5[t5] = $s.concat([s6, " = ", r5(e6)]));
        }, "defaults"), i5.rest && n5.push($s.concat(["...", e5.call(r5, "rest")]));
        var a5 = $s.fromString(", ").join(n5);
        return a5.length > 1 || a5.getLineLength(1) > t4.wrapColumn ? (a5 = $s.fromString(",\n").join(n5), a5 = l3.isTrailingCommaEnabled(t4, "parameters") && !i5.rest && s5[s5.length - 1].type !== "RestElement" ? $s.concat([a5, ",\n"]) : $s.concat([a5, "\n"]), $s.concat(["\n", a5.indent(t4.tabWidth)])) : a5;
      }
      function S4(e5, t4, r5) {
        var s5 = e5.getValue(), n5 = ["export "];
        s5.exportKind && s5.exportKind === "type" && (s5.declaration || n5.push("type "));
        var a5 = t4.objectCurlySpacing;
        if (i4.Declaration.assert(s5), (s5.default || s5.type === "ExportDefaultDeclaration") && n5.push("default "), s5.declaration)
          n5.push(e5.call(r5, "declaration"));
        else if (s5.specifiers) {
          if (s5.specifiers.length === 1 && s5.specifiers[0].type === "ExportBatchSpecifier")
            n5.push("*");
          else if (s5.specifiers.length === 0)
            n5.push("{}");
          else if (s5.specifiers[0].type === "ExportDefaultSpecifier") {
            var o5 = [], l4 = [];
            if (e5.each(function(e6) {
              e6.getValue().type === "ExportDefaultSpecifier" ? o5.push(r5(e6)) : l4.push(r5(e6));
            }, "specifiers"), o5.forEach(function(e6, t5) {
              t5 > 0 && n5.push(", "), n5.push(e6);
            }), l4.length > 0) {
              var c5 = $s.fromString(", ").join(l4);
              c5.getLineLength(1) > t4.wrapColumn && (c5 = $s.concat([$s.fromString(",\n").join(l4).indent(t4.tabWidth), ","])), o5.length > 0 && n5.push(", "), c5.length > 1 ? n5.push("{\n", c5, "\n}") : t4.objectCurlySpacing ? n5.push("{ ", c5, " }") : n5.push("{", c5, "}");
            }
          } else
            n5.push(a5 ? "{ " : "{", $s.fromString(", ").join(e5.map(r5, "specifiers")), a5 ? " }" : "}");
          s5.source && n5.push(" from ", e5.call(r5, "source"));
        }
        var u4 = $s.concat(n5);
        return C3(u4) === ";" || s5.declaration && (s5.declaration.type === "FunctionDeclaration" || s5.declaration.type === "ClassDeclaration" || s5.declaration.type === "TSModuleDeclaration" || s5.declaration.type === "TSInterfaceDeclaration" || s5.declaration.type === "TSEnumDeclaration") || (u4 = $s.concat([u4, ";"])), u4;
      }
      function A3(e5, t4) {
        var s5 = l3.getParentExportDeclaration(e5);
        return s5 ? r4.default.strictEqual(s5.type, "DeclareExportDeclaration") : t4.unshift("declare "), $s.concat(t4);
      }
      function T3(e5, t4) {
        return e5.call(function(e6) {
          var r5 = e6.getValue();
          return r5 ? r5 === "plus" ? $s.fromString("+") : r5 === "minus" ? $s.fromString("-") : t4(e6) : $s.fromString("");
        }, "variance");
      }
      function w4(e5, t4) {
        return e5.length > 1 ? $s.concat([" ", e5]) : $s.concat(["\n", N3(e5).indent(t4.tabWidth)]);
      }
      function C3(e5) {
        var t4 = e5.lastPos();
        do {
          var r5 = e5.charAt(t4);
          if (/\S/.test(r5))
            return r5;
        } while (e5.prevPos(t4));
      }
      function P3(e5) {
        return C3(e5) === "}";
      }
      function D3(e5) {
        return e5.replace(/['"]/g, function(e6) {
          return e6 === '"' ? "'" : '"';
        });
      }
      function k4(e5, t4) {
        switch (n4.assert(e5), t4.quote) {
          case "auto":
            var r5 = JSON.stringify(e5), s5 = D3(JSON.stringify(D3(e5)));
            return r5.length > s5.length ? s5 : r5;
          case "single":
            return D3(JSON.stringify(D3(e5)));
          case "double":
          default:
            return JSON.stringify(e5);
        }
      }
      function N3(e5) {
        var t4 = C3(e5);
        return !t4 || "\n};".indexOf(t4) < 0 ? $s.concat([e5, ";"]) : e5;
      }
      t3.Printer = d4;
    }), mi = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true}), t3.run = t3.prettyPrint = t3.print = t3.types = t3.parse = void 0;
      var r4 = U2.__importDefault(a3.default), s4 = U2.__importStar(pe2);
      function i4(e5, t4) {
        return new fi.Printer(t4).print(e5);
      }
      function n4(e5, t4) {
        return new fi.Printer(t4).printGenerically(e5);
      }
      function o4(e5, t4) {
        return l3(process.argv[2], e5, t4);
      }
      function l3(e5, t4, s5) {
        r4.default.readFile(e5, "utf-8", function(e6, r5) {
          e6 ? console.error(e6) : u3(r5, t4, s5);
        });
      }
      function c4(e5) {
        process.stdout.write(e5);
      }
      function u3(e5, t4, r5) {
        var s5 = r5 && r5.writeback || c4;
        t4(Qs.parse(e5, r5), function(e6) {
          s5(i4(e6, r5).code);
        });
      }
      t3.types = s4, Object.defineProperty(t3, "parse", {enumerable: true, get: function() {
        return Qs.parse;
      }}), Object.defineProperty(t3, "visit", {enumerable: true, get: function() {
        return pe2.visit;
      }}), t3.print = i4, t3.prettyPrint = n4, t3.run = o4;
    });
    const yi = mi.types, gi = mi.types.builders, xi = mi.types.namedTypes;
    function bi() {
      return gi.literal(null);
    }
    function Ei(e4, t3) {
      return gi.property("init", gi.literal(e4), t3, false);
    }
    function vi(e4) {
      return e4 && e4.toJSON ? e4.toJSON() : e4;
    }
    function Si(e4) {
      return !Ai(e4) && e4.constructor === Object;
    }
    function Ai(e4) {
      return e4 == null;
    }
    function Ti() {
      return typeof process != "undefined";
    }
    function wi(e4, t3) {
      return Ti() && e4 && t3 && t3.mappings ? Ss.composeSourceMaps(vi(e4), vi(t3)) : Ti() && e4 ? vi(e4) : {};
    }
    const Ci = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
    var Pi = {encode: function(e4) {
      if (0 <= e4 && e4 < Ci.length)
        return Ci[e4];
      throw new TypeError("Must be between 0 and 63: " + e4);
    }};
    const Di = 5, ki = 1 << Di, Ni = ki - 1, Ii = ki;
    function Fi(e4) {
      return e4 < 0 ? 1 + (-e4 << 1) : 0 + (e4 << 1);
    }
    var Mi = {encode: function(e4) {
      let t3, r4 = "", s4 = Fi(e4);
      do {
        t3 = s4 & Ni, s4 >>>= Di, s4 > 0 && (t3 |= Ii), r4 += Pi.encode(t3);
      } while (s4 > 0);
      return r4;
    }}, Li = f3(function(e4, t3) {
      function r4(e5, t4, r5) {
        if (t4 in e5)
          return e5[t4];
        if (arguments.length === 3)
          return r5;
        throw new Error('"' + t4 + '" is a required argument.');
      }
      t3.getArg = r4;
      const s4 = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/, i4 = /^data:.+\,.+$/;
      function n4(e5) {
        const t4 = e5.match(s4);
        return t4 ? {scheme: t4[1], auth: t4[2], host: t4[3], port: t4[4], path: t4[5]} : null;
      }
      function a4(e5) {
        let t4 = "";
        return e5.scheme && (t4 += e5.scheme + ":"), t4 += "//", e5.auth && (t4 += e5.auth + "@"), e5.host && (t4 += e5.host), e5.port && (t4 += ":" + e5.port), e5.path && (t4 += e5.path), t4;
      }
      t3.urlParse = n4, t3.urlGenerate = a4;
      const o4 = 32;
      function l3(e5) {
        const t4 = [];
        return function(r5) {
          for (let e6 = 0; e6 < t4.length; e6++)
            if (t4[e6].input === r5) {
              const r6 = t4[0];
              return t4[0] = t4[e6], t4[e6] = r6, t4[0].result;
            }
          const s5 = e5(r5);
          return t4.unshift({input: r5, result: s5}), t4.length > o4 && t4.pop(), s5;
        };
      }
      const c4 = l3(function(e5) {
        let r5 = e5;
        const s5 = n4(e5);
        if (s5) {
          if (!s5.path)
            return e5;
          r5 = s5.path;
        }
        const i5 = t3.isAbsolute(r5), o5 = [];
        let l4 = 0, c5 = 0;
        for (; ; ) {
          if (l4 = c5, c5 = r5.indexOf("/", l4), c5 === -1) {
            o5.push(r5.slice(l4));
            break;
          }
          for (o5.push(r5.slice(l4, c5)); c5 < r5.length && r5[c5] === "/"; )
            c5++;
        }
        let u4 = 0;
        for (c5 = o5.length - 1; c5 >= 0; c5--) {
          const e6 = o5[c5];
          e6 === "." ? o5.splice(c5, 1) : e6 === ".." ? u4++ : u4 > 0 && (e6 === "" ? (o5.splice(c5 + 1, u4), u4 = 0) : (o5.splice(c5, 2), u4--));
        }
        return r5 = o5.join("/"), r5 === "" && (r5 = i5 ? "/" : "."), s5 ? (s5.path = r5, a4(s5)) : r5;
      });
      function u3(e5, t4) {
        e5 === "" && (e5 = "."), t4 === "" && (t4 = ".");
        const r5 = n4(t4), s5 = n4(e5);
        if (s5 && (e5 = s5.path || "/"), r5 && !r5.scheme)
          return s5 && (r5.scheme = s5.scheme), a4(r5);
        if (r5 || t4.match(i4))
          return t4;
        if (s5 && !s5.host && !s5.path)
          return s5.host = t4, a4(s5);
        const o5 = t4.charAt(0) === "/" ? t4 : c4(e5.replace(/\/+$/, "") + "/" + t4);
        return s5 ? (s5.path = o5, a4(s5)) : o5;
      }
      function h4(e5, t4) {
        e5 === "" && (e5 = "."), e5 = e5.replace(/\/$/, "");
        let r5 = 0;
        for (; t4.indexOf(e5 + "/") !== 0; ) {
          const s5 = e5.lastIndexOf("/");
          if (s5 < 0)
            return t4;
          if ((e5 = e5.slice(0, s5)).match(/^([^\/]+:\/)?\/*$/))
            return t4;
          ++r5;
        }
        return Array(r5 + 1).join("../") + t4.substr(e5.length + 1);
      }
      t3.normalize = c4, t3.join = u3, t3.isAbsolute = function(e5) {
        return e5.charAt(0) === "/" || s4.test(e5);
      }, t3.relative = h4;
      const p4 = !("__proto__" in Object.create(null));
      function d4(e5) {
        return e5;
      }
      function f4(e5) {
        return y4(e5) ? "$" + e5 : e5;
      }
      function m4(e5) {
        return y4(e5) ? e5.slice(1) : e5;
      }
      function y4(e5) {
        if (!e5)
          return false;
        const t4 = e5.length;
        if (t4 < 9)
          return false;
        if (e5.charCodeAt(t4 - 1) !== 95 || e5.charCodeAt(t4 - 2) !== 95 || e5.charCodeAt(t4 - 3) !== 111 || e5.charCodeAt(t4 - 4) !== 116 || e5.charCodeAt(t4 - 5) !== 111 || e5.charCodeAt(t4 - 6) !== 114 || e5.charCodeAt(t4 - 7) !== 112 || e5.charCodeAt(t4 - 8) !== 95 || e5.charCodeAt(t4 - 9) !== 95)
          return false;
        for (let r5 = t4 - 10; r5 >= 0; r5--)
          if (e5.charCodeAt(r5) !== 36)
            return false;
        return true;
      }
      function g4(e5, t4, r5) {
        let s5 = b3(e5.source, t4.source);
        return s5 !== 0 ? s5 : (s5 = e5.originalLine - t4.originalLine, s5 !== 0 ? s5 : (s5 = e5.originalColumn - t4.originalColumn, s5 !== 0 || r5 ? s5 : (s5 = e5.generatedColumn - t4.generatedColumn, s5 !== 0 ? s5 : (s5 = e5.generatedLine - t4.generatedLine, s5 !== 0 ? s5 : b3(e5.name, t4.name)))));
      }
      function x4(e5, t4, r5) {
        let s5 = e5.generatedLine - t4.generatedLine;
        return s5 !== 0 ? s5 : (s5 = e5.generatedColumn - t4.generatedColumn, s5 !== 0 || r5 ? s5 : (s5 = b3(e5.source, t4.source), s5 !== 0 ? s5 : (s5 = e5.originalLine - t4.originalLine, s5 !== 0 ? s5 : (s5 = e5.originalColumn - t4.originalColumn, s5 !== 0 ? s5 : b3(e5.name, t4.name)))));
      }
      function b3(e5, t4) {
        return e5 === t4 ? 0 : e5 === null ? 1 : t4 === null ? -1 : e5 > t4 ? 1 : -1;
      }
      function E4(e5, t4) {
        let r5 = e5.generatedLine - t4.generatedLine;
        return r5 !== 0 ? r5 : (r5 = e5.generatedColumn - t4.generatedColumn, r5 !== 0 ? r5 : (r5 = b3(e5.source, t4.source), r5 !== 0 ? r5 : (r5 = e5.originalLine - t4.originalLine, r5 !== 0 ? r5 : (r5 = e5.originalColumn - t4.originalColumn, r5 !== 0 ? r5 : b3(e5.name, t4.name)))));
      }
      function v5(e5) {
        return JSON.parse(e5.replace(/^\)]}'[^\n]*\n/, ""));
      }
      function S4(e5, t4, r5) {
        if (t4 = t4 || "", e5 && (e5[e5.length - 1] !== "/" && t4[0] !== "/" && (e5 += "/"), t4 = e5 + t4), r5) {
          const e6 = n4(r5);
          if (!e6)
            throw new Error("sourceMapURL could not be parsed");
          if (e6.path) {
            const t5 = e6.path.lastIndexOf("/");
            t5 >= 0 && (e6.path = e6.path.substring(0, t5 + 1));
          }
          t4 = u3(a4(e6), t4);
        }
        return c4(t4);
      }
      t3.toSetString = p4 ? d4 : f4, t3.fromSetString = p4 ? d4 : m4, t3.compareByOriginalPositions = g4, t3.compareByGeneratedPositionsDeflated = x4, t3.compareByGeneratedPositionsInflated = E4, t3.parseSourceMapInput = v5, t3.computeSourceURL = S4;
    });
    class Oi {
      constructor() {
        this._array = [], this._set = new Map();
      }
      static fromArray(e4, t3) {
        const r4 = new Oi();
        for (let s4 = 0, i4 = e4.length; s4 < i4; s4++)
          r4.add(e4[s4], t3);
        return r4;
      }
      size() {
        return this._set.size;
      }
      add(e4, t3) {
        const r4 = this.has(e4), s4 = this._array.length;
        r4 && !t3 || this._array.push(e4), r4 || this._set.set(e4, s4);
      }
      has(e4) {
        return this._set.has(e4);
      }
      indexOf(e4) {
        const t3 = this._set.get(e4);
        if (t3 >= 0)
          return t3;
        throw new Error('"' + e4 + '" is not in the set.');
      }
      at(e4) {
        if (e4 >= 0 && e4 < this._array.length)
          return this._array[e4];
        throw new Error("No element indexed by " + e4);
      }
      toArray() {
        return this._array.slice();
      }
    }
    var _i = {ArraySet: Oi};
    function Bi(e4, t3) {
      const r4 = e4.generatedLine, s4 = t3.generatedLine, i4 = e4.generatedColumn, n4 = t3.generatedColumn;
      return s4 > r4 || s4 == r4 && n4 >= i4 || Li.compareByGeneratedPositionsInflated(e4, t3) <= 0;
    }
    class Ri {
      constructor() {
        this._array = [], this._sorted = true, this._last = {generatedLine: -1, generatedColumn: 0};
      }
      unsortedForEach(e4, t3) {
        this._array.forEach(e4, t3);
      }
      add(e4) {
        Bi(this._last, e4) ? (this._last = e4, this._array.push(e4)) : (this._sorted = false, this._array.push(e4));
      }
      toArray() {
        return this._sorted || (this._array.sort(Li.compareByGeneratedPositionsInflated), this._sorted = true), this._array;
      }
    }
    var ji = {MappingList: Ri};
    const Ui = _i.ArraySet, qi = ji.MappingList;
    class zi {
      constructor(e4) {
        e4 || (e4 = {}), this._file = Li.getArg(e4, "file", null), this._sourceRoot = Li.getArg(e4, "sourceRoot", null), this._skipValidation = Li.getArg(e4, "skipValidation", false), this._sources = new Ui(), this._names = new Ui(), this._mappings = new qi(), this._sourcesContents = null;
      }
      static fromSourceMap(e4) {
        const t3 = e4.sourceRoot, r4 = new zi({file: e4.file, sourceRoot: t3});
        return e4.eachMapping(function(e5) {
          const s4 = {generated: {line: e5.generatedLine, column: e5.generatedColumn}};
          e5.source != null && (s4.source = e5.source, t3 != null && (s4.source = Li.relative(t3, s4.source)), s4.original = {line: e5.originalLine, column: e5.originalColumn}, e5.name != null && (s4.name = e5.name)), r4.addMapping(s4);
        }), e4.sources.forEach(function(s4) {
          let i4 = s4;
          t3 !== null && (i4 = Li.relative(t3, s4)), r4._sources.has(i4) || r4._sources.add(i4);
          const n4 = e4.sourceContentFor(s4);
          n4 != null && r4.setSourceContent(s4, n4);
        }), r4;
      }
      addMapping(e4) {
        const t3 = Li.getArg(e4, "generated"), r4 = Li.getArg(e4, "original", null);
        let s4 = Li.getArg(e4, "source", null), i4 = Li.getArg(e4, "name", null);
        this._skipValidation || this._validateMapping(t3, r4, s4, i4), s4 != null && (s4 = String(s4), this._sources.has(s4) || this._sources.add(s4)), i4 != null && (i4 = String(i4), this._names.has(i4) || this._names.add(i4)), this._mappings.add({generatedLine: t3.line, generatedColumn: t3.column, originalLine: r4 != null && r4.line, originalColumn: r4 != null && r4.column, source: s4, name: i4});
      }
      setSourceContent(e4, t3) {
        let r4 = e4;
        this._sourceRoot != null && (r4 = Li.relative(this._sourceRoot, r4)), t3 != null ? (this._sourcesContents || (this._sourcesContents = Object.create(null)), this._sourcesContents[Li.toSetString(r4)] = t3) : this._sourcesContents && (delete this._sourcesContents[Li.toSetString(r4)], Object.keys(this._sourcesContents).length === 0 && (this._sourcesContents = null));
      }
      applySourceMap(e4, t3, r4) {
        let s4 = t3;
        if (t3 == null) {
          if (e4.file == null)
            throw new Error(`SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's "file" property. Both were omitted.`);
          s4 = e4.file;
        }
        const i4 = this._sourceRoot;
        i4 != null && (s4 = Li.relative(i4, s4));
        const n4 = this._mappings.toArray().length > 0 ? new Ui() : this._sources, a4 = new Ui();
        this._mappings.unsortedForEach(function(t4) {
          if (t4.source === s4 && t4.originalLine != null) {
            const s5 = e4.originalPositionFor({line: t4.originalLine, column: t4.originalColumn});
            s5.source != null && (t4.source = s5.source, r4 != null && (t4.source = Li.join(r4, t4.source)), i4 != null && (t4.source = Li.relative(i4, t4.source)), t4.originalLine = s5.line, t4.originalColumn = s5.column, s5.name != null && (t4.name = s5.name));
          }
          const o4 = t4.source;
          o4 == null || n4.has(o4) || n4.add(o4);
          const l3 = t4.name;
          l3 == null || a4.has(l3) || a4.add(l3);
        }, this), this._sources = n4, this._names = a4, e4.sources.forEach(function(t4) {
          const s5 = e4.sourceContentFor(t4);
          s5 != null && (r4 != null && (t4 = Li.join(r4, t4)), i4 != null && (t4 = Li.relative(i4, t4)), this.setSourceContent(t4, s5));
        }, this);
      }
      _validateMapping(e4, t3, r4, s4) {
        if (t3 && typeof t3.line != "number" && typeof t3.column != "number")
          throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");
        if (e4 && "line" in e4 && "column" in e4 && e4.line > 0 && e4.column >= 0 && !t3 && !r4 && !s4)
          ;
        else if (!(e4 && "line" in e4 && "column" in e4 && t3 && "line" in t3 && "column" in t3 && e4.line > 0 && e4.column >= 0 && t3.line > 0 && t3.column >= 0 && r4))
          throw new Error("Invalid mapping: " + JSON.stringify({generated: e4, source: r4, original: t3, name: s4}));
      }
      _serializeMappings() {
        let e4, t3, r4, s4, i4 = 0, n4 = 1, a4 = 0, o4 = 0, l3 = 0, c4 = 0, u3 = "";
        const h4 = this._mappings.toArray();
        for (let p4 = 0, d4 = h4.length; p4 < d4; p4++) {
          if (t3 = h4[p4], e4 = "", t3.generatedLine !== n4)
            for (i4 = 0; t3.generatedLine !== n4; )
              e4 += ";", n4++;
          else if (p4 > 0) {
            if (!Li.compareByGeneratedPositionsInflated(t3, h4[p4 - 1]))
              continue;
            e4 += ",";
          }
          e4 += Mi.encode(t3.generatedColumn - i4), i4 = t3.generatedColumn, t3.source != null && (s4 = this._sources.indexOf(t3.source), e4 += Mi.encode(s4 - c4), c4 = s4, e4 += Mi.encode(t3.originalLine - 1 - o4), o4 = t3.originalLine - 1, e4 += Mi.encode(t3.originalColumn - a4), a4 = t3.originalColumn, t3.name != null && (r4 = this._names.indexOf(t3.name), e4 += Mi.encode(r4 - l3), l3 = r4)), u3 += e4;
        }
        return u3;
      }
      _generateSourcesContent(e4, t3) {
        return e4.map(function(e5) {
          if (!this._sourcesContents)
            return null;
          t3 != null && (e5 = Li.relative(t3, e5));
          const r4 = Li.toSetString(e5);
          return Object.prototype.hasOwnProperty.call(this._sourcesContents, r4) ? this._sourcesContents[r4] : null;
        }, this);
      }
      toJSON() {
        const e4 = {version: this._version, sources: this._sources.toArray(), names: this._names.toArray(), mappings: this._serializeMappings()};
        return this._file != null && (e4.file = this._file), this._sourceRoot != null && (e4.sourceRoot = this._sourceRoot), this._sourcesContents && (e4.sourcesContent = this._generateSourcesContent(e4.sources, e4.sourceRoot)), e4;
      }
      toString() {
        return JSON.stringify(this.toJSON());
      }
    }
    zi.prototype._version = 3;
    var Vi = {SourceMapGenerator: zi};
    f3(function(e4, t3) {
      function r4(e5, s4, i4, n4, a4, o4) {
        const l3 = Math.floor((s4 - e5) / 2) + e5, c4 = a4(i4, n4[l3], true);
        return c4 === 0 ? l3 : c4 > 0 ? s4 - l3 > 1 ? r4(l3, s4, i4, n4, a4, o4) : o4 == t3.LEAST_UPPER_BOUND ? s4 < n4.length ? s4 : -1 : l3 : l3 - e5 > 1 ? r4(e5, l3, i4, n4, a4, o4) : o4 == t3.LEAST_UPPER_BOUND ? l3 : e5 < 0 ? -1 : e5;
      }
      t3.GREATEST_LOWER_BOUND = 1, t3.LEAST_UPPER_BOUND = 2, t3.search = function(e5, s4, i4, n4) {
        if (s4.length === 0)
          return -1;
        let a4 = r4(-1, s4.length, e5, s4, i4, n4 || t3.GREATEST_LOWER_BOUND);
        if (a4 < 0)
          return -1;
        for (; a4 - 1 >= 0 && i4(s4[a4], s4[a4 - 1], true) === 0; )
          --a4;
        return a4;
      };
    }), f3(function(e4) {
      if (typeof fetch == "function") {
        let t3 = null;
        e4.exports = function() {
          if (typeof t3 != "string")
            throw new Error("You must provide the URL of lib/mappings.wasm by calling SourceMapConsumer.initialize({ 'lib/mappings.wasm': ... }) before using SourceMapConsumer");
          return fetch(t3).then((e5) => e5.arrayBuffer());
        }, e4.exports.initialize = (e5) => t3 = e5;
      } else {
        const t3 = a3.default, r4 = o3.default;
        e4.exports = function() {
          return new Promise((e5, s4) => {
            const i4 = r4.join(__dirname, "mappings.wasm");
            t3.readFile(i4, null, (t4, r5) => {
              t4 ? s4(t4) : e5(r5.buffer);
            });
          });
        }, e4.exports.initialize = (e5) => {
          console.debug("SourceMapConsumer.initialize is a no-op when running in node.js");
        };
      }
    });
    var Ji = Vi.SourceMapGenerator;
    function Xi(e4) {
      return new Ji(e4);
    }
    const Gi = Object.freeze({code: "", ast: [], meta: {}, map: null});
    function Hi(e4, t3) {
      const r4 = Object.assign({}, Gi, e4, {meta: t3});
      return !r4.map && t3 && t3.options && t3.options.file ? Object.assign({}, r4, {map: Xi({file: t3.options.file})}) : r4;
    }
    function Wi(e4, t3, r4) {
      return Hi(e4 ? e4(r4, t3) : {code: r4}, t3);
    }
    function Ki(e4) {
      throw new Error(e4);
    }
    const $i = new Set();
    function Yi(e4) {
      return $i.has(e4) && Ki(`This postprocessor "${e4.name || e4.toString()}" was already registered`), $i.add(e4), $i;
    }
    function Qi(e4, t3) {
      return Array.from($i).reduce(function(e5, r4) {
        const {code: s4, map: i4} = e5, n4 = r4(s4, t3);
        return {code: n4.code, map: wi(i4, n4.map)};
      }, Hi(e4, t3));
    }
    const Zi = Object.freeze({javascript: new Map(), css: new Map(), template: new Map().set("default", (e4) => ({code: e4}))});
    function en(e4) {
      Ki(`No preprocessor of type "${e4}" was found, please make sure to use one of these: 'javascript', 'css' or 'template'`);
    }
    function tn(e4) {
      Ki(`No preprocessor named "${e4}" was found, are you sure you have registered it?'`);
    }
    function rn(e4, t3, r4) {
      return e4 || Ki("Please define the type of preprocessor you want to register 'javascript', 'css' or 'template'"), t3 || Ki("Please define a name for your preprocessor"), r4 || Ki("Please provide a preprocessor function"), Zi[e4] || en(e4), Zi[e4].has(t3) && Ki(`The preprocessor ${t3} was already registered before`), Zi[e4].set(t3, r4), Zi;
    }
    function sn(e4, t3, r4, s4) {
      return Zi[e4] || en(e4), Zi[e4].has(t3) || tn(t3), Wi(Zi[e4].get(t3), r4, s4);
    }
    function nn() {
      for (var e4 = arguments.length, t3 = new Array(e4), r4 = 0; r4 < e4; r4++)
        t3[r4] = arguments[r4];
      return t3.reduce((e5, t4) => function() {
        return e5(t4(...arguments));
      });
    }
    /*! https://mths.be/cssesc v3.0.0 by @mathias */
    var an = {}.hasOwnProperty, on = function(e4, t3) {
      if (!e4)
        return t3;
      var r4 = {};
      for (var s4 in t3)
        r4[s4] = an.call(e4, s4) ? e4[s4] : t3[s4];
      return r4;
    }, ln = /[ -,\.\/:-@\[-\^`\{-~]/, cn = /[ -,\.\/:-@\[\]\^`\{-~]/, un = /(^|\\+)?(\\[A-F0-9]{1,6})\x20(?![a-fA-F0-9\x20])/g, hn = function e4(t3, r4) {
      (r4 = on(r4, e4.options)).quotes != "single" && r4.quotes != "double" && (r4.quotes = "single");
      for (var s4 = r4.quotes == "double" ? '"' : "'", i4 = r4.isIdentifier, n4 = t3.charAt(0), a4 = "", o4 = 0, l3 = t3.length; o4 < l3; ) {
        var c4 = t3.charAt(o4++), u3 = c4.charCodeAt(), h4 = void 0;
        if (u3 < 32 || u3 > 126) {
          if (u3 >= 55296 && u3 <= 56319 && o4 < l3) {
            var p4 = t3.charCodeAt(o4++);
            (64512 & p4) == 56320 ? u3 = ((1023 & u3) << 10) + (1023 & p4) + 65536 : o4--;
          }
          h4 = "\\" + u3.toString(16).toUpperCase() + " ";
        } else
          h4 = r4.escapeEverything ? ln.test(c4) ? "\\" + c4 : "\\" + u3.toString(16).toUpperCase() + " " : /[\t\n\f\r\x0B]/.test(c4) ? "\\" + u3.toString(16).toUpperCase() + " " : c4 == "\\" || !i4 && (c4 == '"' && s4 == c4 || c4 == "'" && s4 == c4) || i4 && cn.test(c4) ? "\\" + c4 : c4;
        a4 += h4;
      }
      return i4 && (/^-[-\d]/.test(a4) ? a4 = "\\-" + a4.slice(1) : /\d/.test(n4) && (a4 = "\\3" + n4 + " " + a4.slice(1))), a4 = a4.replace(un, function(e5, t4, r5) {
        return t4 && t4.length % 2 ? e5 : (t4 || "") + r5;
      }), !i4 && r4.wrap ? s4 + a4 + s4 : a4;
    };
    hn.options = {escapeEverything: false, isIdentifier: false, quotes: "single", wrap: false}, hn.version = "3.0.0";
    var pn = hn;
    const dn = "type";
    function fn2(e4) {
      const t3 = e4.attributes ? e4.attributes.find((e5) => e5.name === dn) : null;
      return t3 ? mn(t3.value) : null;
    }
    function mn(e4) {
      return e4.replace("text/", "");
    }
    function yn(e4, t3, r4, s4) {
      const i4 = s4.text;
      return t3 ? sn(e4, t3, r4, i4) : {code: i4};
    }
    const gn = /\/\*[^*]*\*+(?:[^*/][^*]*\*+)*\//g, xn = RegExp(`([{}]|^)[; ]*((?:[^@ ;{}][^{}]*)?[^@ ;{}:] ?)(?={)|${/"[^"\n\\]*(?:\\[\S\s][^"\n\\]*)*"|'[^'\n\\]*(?:\\[\S\s][^'\n\\]*)*'/.source}`, "g");
    function bn(e4, t3) {
      const r4 = ":host", s4 = ["from", "to"];
      return t3.replace(xn, function(t4, i4, n4) {
        return n4 ? (n4 = n4.replace(/[^,]+/g, function(t5) {
          const i5 = t5.trim();
          return i5.indexOf(e4) === 0 || !i5 || s4.indexOf(i5) > -1 || i5.slice(-1) === "%" ? t5 : i5.indexOf(r4) < 0 ? `${e4} ${i5},[is="${e4}"] ${i5}` : `${i5.replace(r4, e4)},${i5.replace(r4, `[is="${e4}"]`)}`;
        }), i4 ? `${i4} ${n4}` : n4) : t4;
      });
    }
    function En(e4) {
      return e4.replace(gn, "").replace(/\s+/g, " ").trim();
    }
    const vn = (e4) => e4.replace(/\\/g, "\\\\"), Sn = (e4) => vn(pn(e4, {isIdentifier: true}));
    function An(e4, t3, r4, s4) {
      const i4 = fn2(e4), {options: n4} = r4, a4 = En(yn("css", i4, r4, e4.text).code), o4 = Sn(r4.tagName), l3 = (n4.scopedCss ? bn(o4, vn(a4)) : vn(a4)).trim();
      return yi.visit(s4, {visitProperty(e5) {
        if (e5.value.key.value === u2)
          return e5.value.value = gi.templateLiteral([gi.templateElement({raw: l3, cooked: ""}, false)], []), false;
        this.traverse(e5);
      }}), s4;
    }
    function Tn(e4) {
      for (var t3 = arguments.length, r4 = new Array(t3 > 1 ? t3 - 1 : 0), s4 = 1; s4 < t3; s4++)
        r4[s4 - 1] = arguments[s4];
      return function() {
        for (var t4 = arguments.length, s5 = new Array(t4), i4 = 0; i4 < t4; i4++)
          s5[i4] = arguments[i4];
        return (s5 = [...r4, ...s5]).length < e4.length ? Tn(e4, ...s5) : e4(...s5);
      };
    }
    function wn(e4, t3) {
      return mi.print(e4, Object.assign({}, t3, {tabWidth: 2, wrapColumn: 0, quote: "single"}));
    }
    function Cn(e4, t3, r4) {
      const s4 = e4 ? [t3.substr(0, e4.start), t3.substr(e4.end, t3.length)].join("").trim() : "";
      if (s4)
        try {
          const {template: e5, javascript: t4, css: i4} = r4(s4).output;
          return [e5, t4, i4].some(Si);
        } catch (i4) {
          return false;
        }
      return false;
    }
    function Pn(e4) {
      return !e4 || !e4.mappings || !e4.mappings.length;
    }
    var Dn = {builtin: {AggregateError: false, Array: false, ArrayBuffer: false, Atomics: false, BigInt: false, BigInt64Array: false, BigUint64Array: false, Boolean: false, constructor: false, DataView: false, Date: false, decodeURI: false, decodeURIComponent: false, encodeURI: false, encodeURIComponent: false, Error: false, escape: false, eval: false, EvalError: false, FinalizationRegistry: false, Float32Array: false, Float64Array: false, Function: false, globalThis: false, hasOwnProperty: false, Infinity: false, Int16Array: false, Int32Array: false, Int8Array: false, isFinite: false, isNaN: false, isPrototypeOf: false, JSON: false, Map: false, Math: false, NaN: false, Number: false, Object: false, parseFloat: false, parseInt: false, Promise: false, propertyIsEnumerable: false, Proxy: false, RangeError: false, ReferenceError: false, Reflect: false, RegExp: false, Set: false, SharedArrayBuffer: false, String: false, Symbol: false, SyntaxError: false, toLocaleString: false, toString: false, TypeError: false, Uint16Array: false, Uint32Array: false, Uint8Array: false, Uint8ClampedArray: false, undefined: false, unescape: false, URIError: false, valueOf: false, WeakMap: false, WeakRef: false, WeakSet: false}, es5: {Array: false, Boolean: false, constructor: false, Date: false, decodeURI: false, decodeURIComponent: false, encodeURI: false, encodeURIComponent: false, Error: false, escape: false, eval: false, EvalError: false, Function: false, hasOwnProperty: false, Infinity: false, isFinite: false, isNaN: false, isPrototypeOf: false, JSON: false, Math: false, NaN: false, Number: false, Object: false, parseFloat: false, parseInt: false, propertyIsEnumerable: false, RangeError: false, ReferenceError: false, RegExp: false, String: false, SyntaxError: false, toLocaleString: false, toString: false, TypeError: false, undefined: false, unescape: false, URIError: false, valueOf: false}, es2015: {Array: false, ArrayBuffer: false, Boolean: false, constructor: false, DataView: false, Date: false, decodeURI: false, decodeURIComponent: false, encodeURI: false, encodeURIComponent: false, Error: false, escape: false, eval: false, EvalError: false, Float32Array: false, Float64Array: false, Function: false, hasOwnProperty: false, Infinity: false, Int16Array: false, Int32Array: false, Int8Array: false, isFinite: false, isNaN: false, isPrototypeOf: false, JSON: false, Map: false, Math: false, NaN: false, Number: false, Object: false, parseFloat: false, parseInt: false, Promise: false, propertyIsEnumerable: false, Proxy: false, RangeError: false, ReferenceError: false, Reflect: false, RegExp: false, Set: false, String: false, Symbol: false, SyntaxError: false, toLocaleString: false, toString: false, TypeError: false, Uint16Array: false, Uint32Array: false, Uint8Array: false, Uint8ClampedArray: false, undefined: false, unescape: false, URIError: false, valueOf: false, WeakMap: false, WeakSet: false}, es2017: {Array: false, ArrayBuffer: false, Atomics: false, Boolean: false, constructor: false, DataView: false, Date: false, decodeURI: false, decodeURIComponent: false, encodeURI: false, encodeURIComponent: false, Error: false, escape: false, eval: false, EvalError: false, Float32Array: false, Float64Array: false, Function: false, hasOwnProperty: false, Infinity: false, Int16Array: false, Int32Array: false, Int8Array: false, isFinite: false, isNaN: false, isPrototypeOf: false, JSON: false, Map: false, Math: false, NaN: false, Number: false, Object: false, parseFloat: false, parseInt: false, Promise: false, propertyIsEnumerable: false, Proxy: false, RangeError: false, ReferenceError: false, Reflect: false, RegExp: false, Set: false, SharedArrayBuffer: false, String: false, Symbol: false, SyntaxError: false, toLocaleString: false, toString: false, TypeError: false, Uint16Array: false, Uint32Array: false, Uint8Array: false, Uint8ClampedArray: false, undefined: false, unescape: false, URIError: false, valueOf: false, WeakMap: false, WeakSet: false}, es2020: {Array: false, ArrayBuffer: false, Atomics: false, BigInt: false, BigInt64Array: false, BigUint64Array: false, Boolean: false, constructor: false, DataView: false, Date: false, decodeURI: false, decodeURIComponent: false, encodeURI: false, encodeURIComponent: false, Error: false, escape: false, eval: false, EvalError: false, Float32Array: false, Float64Array: false, Function: false, globalThis: false, hasOwnProperty: false, Infinity: false, Int16Array: false, Int32Array: false, Int8Array: false, isFinite: false, isNaN: false, isPrototypeOf: false, JSON: false, Map: false, Math: false, NaN: false, Number: false, Object: false, parseFloat: false, parseInt: false, Promise: false, propertyIsEnumerable: false, Proxy: false, RangeError: false, ReferenceError: false, Reflect: false, RegExp: false, Set: false, SharedArrayBuffer: false, String: false, Symbol: false, SyntaxError: false, toLocaleString: false, toString: false, TypeError: false, Uint16Array: false, Uint32Array: false, Uint8Array: false, Uint8ClampedArray: false, undefined: false, unescape: false, URIError: false, valueOf: false, WeakMap: false, WeakSet: false}, es2021: {AggregateError: false, Array: false, ArrayBuffer: false, Atomics: false, BigInt: false, BigInt64Array: false, BigUint64Array: false, Boolean: false, constructor: false, DataView: false, Date: false, decodeURI: false, decodeURIComponent: false, encodeURI: false, encodeURIComponent: false, Error: false, escape: false, eval: false, EvalError: false, FinalizationRegistry: false, Float32Array: false, Float64Array: false, Function: false, globalThis: false, hasOwnProperty: false, Infinity: false, Int16Array: false, Int32Array: false, Int8Array: false, isFinite: false, isNaN: false, isPrototypeOf: false, JSON: false, Map: false, Math: false, NaN: false, Number: false, Object: false, parseFloat: false, parseInt: false, Promise: false, propertyIsEnumerable: false, Proxy: false, RangeError: false, ReferenceError: false, Reflect: false, RegExp: false, Set: false, SharedArrayBuffer: false, String: false, Symbol: false, SyntaxError: false, toLocaleString: false, toString: false, TypeError: false, Uint16Array: false, Uint32Array: false, Uint8Array: false, Uint8ClampedArray: false, undefined: false, unescape: false, URIError: false, valueOf: false, WeakMap: false, WeakRef: false, WeakSet: false}, browser: {AbortController: false, AbortSignal: false, addEventListener: false, alert: false, AnalyserNode: false, Animation: false, AnimationEffectReadOnly: false, AnimationEffectTiming: false, AnimationEffectTimingReadOnly: false, AnimationEvent: false, AnimationPlaybackEvent: false, AnimationTimeline: false, applicationCache: false, ApplicationCache: false, ApplicationCacheErrorEvent: false, atob: false, Attr: false, Audio: false, AudioBuffer: false, AudioBufferSourceNode: false, AudioContext: false, AudioDestinationNode: false, AudioListener: false, AudioNode: false, AudioParam: false, AudioProcessingEvent: false, AudioScheduledSourceNode: false, "AudioWorkletGlobalScope ": false, AudioWorkletNode: false, AudioWorkletProcessor: false, BarProp: false, BaseAudioContext: false, BatteryManager: false, BeforeUnloadEvent: false, BiquadFilterNode: false, Blob: false, BlobEvent: false, blur: false, BroadcastChannel: false, btoa: false, BudgetService: false, ByteLengthQueuingStrategy: false, Cache: false, caches: false, CacheStorage: false, cancelAnimationFrame: false, cancelIdleCallback: false, CanvasCaptureMediaStreamTrack: false, CanvasGradient: false, CanvasPattern: false, CanvasRenderingContext2D: false, ChannelMergerNode: false, ChannelSplitterNode: false, CharacterData: false, clearInterval: false, clearTimeout: false, clientInformation: false, ClipboardEvent: false, close: false, closed: false, CloseEvent: false, Comment: false, CompositionEvent: false, confirm: false, console: false, ConstantSourceNode: false, ConvolverNode: false, CountQueuingStrategy: false, createImageBitmap: false, Credential: false, CredentialsContainer: false, crypto: false, Crypto: false, CryptoKey: false, CSS: false, CSSConditionRule: false, CSSFontFaceRule: false, CSSGroupingRule: false, CSSImportRule: false, CSSKeyframeRule: false, CSSKeyframesRule: false, CSSMediaRule: false, CSSNamespaceRule: false, CSSPageRule: false, CSSRule: false, CSSRuleList: false, CSSStyleDeclaration: false, CSSStyleRule: false, CSSStyleSheet: false, CSSSupportsRule: false, CustomElementRegistry: false, customElements: false, CustomEvent: false, DataTransfer: false, DataTransferItem: false, DataTransferItemList: false, defaultstatus: false, defaultStatus: false, DelayNode: false, DeviceMotionEvent: false, DeviceOrientationEvent: false, devicePixelRatio: false, dispatchEvent: false, document: false, Document: false, DocumentFragment: false, DocumentType: false, DOMError: false, DOMException: false, DOMImplementation: false, DOMMatrix: false, DOMMatrixReadOnly: false, DOMParser: false, DOMPoint: false, DOMPointReadOnly: false, DOMQuad: false, DOMRect: false, DOMRectReadOnly: false, DOMStringList: false, DOMStringMap: false, DOMTokenList: false, DragEvent: false, DynamicsCompressorNode: false, Element: false, ErrorEvent: false, event: false, Event: false, EventSource: false, EventTarget: false, external: false, fetch: false, File: false, FileList: false, FileReader: false, find: false, focus: false, FocusEvent: false, FontFace: false, FontFaceSetLoadEvent: false, FormData: false, frameElement: false, frames: false, GainNode: false, Gamepad: false, GamepadButton: false, GamepadEvent: false, getComputedStyle: false, getSelection: false, HashChangeEvent: false, Headers: false, history: false, History: false, HTMLAllCollection: false, HTMLAnchorElement: false, HTMLAreaElement: false, HTMLAudioElement: false, HTMLBaseElement: false, HTMLBodyElement: false, HTMLBRElement: false, HTMLButtonElement: false, HTMLCanvasElement: false, HTMLCollection: false, HTMLContentElement: false, HTMLDataElement: false, HTMLDataListElement: false, HTMLDetailsElement: false, HTMLDialogElement: false, HTMLDirectoryElement: false, HTMLDivElement: false, HTMLDListElement: false, HTMLDocument: false, HTMLElement: false, HTMLEmbedElement: false, HTMLFieldSetElement: false, HTMLFontElement: false, HTMLFormControlsCollection: false, HTMLFormElement: false, HTMLFrameElement: false, HTMLFrameSetElement: false, HTMLHeadElement: false, HTMLHeadingElement: false, HTMLHRElement: false, HTMLHtmlElement: false, HTMLIFrameElement: false, HTMLImageElement: false, HTMLInputElement: false, HTMLLabelElement: false, HTMLLegendElement: false, HTMLLIElement: false, HTMLLinkElement: false, HTMLMapElement: false, HTMLMarqueeElement: false, HTMLMediaElement: false, HTMLMenuElement: false, HTMLMetaElement: false, HTMLMeterElement: false, HTMLModElement: false, HTMLObjectElement: false, HTMLOListElement: false, HTMLOptGroupElement: false, HTMLOptionElement: false, HTMLOptionsCollection: false, HTMLOutputElement: false, HTMLParagraphElement: false, HTMLParamElement: false, HTMLPictureElement: false, HTMLPreElement: false, HTMLProgressElement: false, HTMLQuoteElement: false, HTMLScriptElement: false, HTMLSelectElement: false, HTMLShadowElement: false, HTMLSlotElement: false, HTMLSourceElement: false, HTMLSpanElement: false, HTMLStyleElement: false, HTMLTableCaptionElement: false, HTMLTableCellElement: false, HTMLTableColElement: false, HTMLTableElement: false, HTMLTableRowElement: false, HTMLTableSectionElement: false, HTMLTemplateElement: false, HTMLTextAreaElement: false, HTMLTimeElement: false, HTMLTitleElement: false, HTMLTrackElement: false, HTMLUListElement: false, HTMLUnknownElement: false, HTMLVideoElement: false, IDBCursor: false, IDBCursorWithValue: false, IDBDatabase: false, IDBFactory: false, IDBIndex: false, IDBKeyRange: false, IDBObjectStore: false, IDBOpenDBRequest: false, IDBRequest: false, IDBTransaction: false, IDBVersionChangeEvent: false, IdleDeadline: false, IIRFilterNode: false, Image: false, ImageBitmap: false, ImageBitmapRenderingContext: false, ImageCapture: false, ImageData: false, indexedDB: false, innerHeight: false, innerWidth: false, InputEvent: false, IntersectionObserver: false, IntersectionObserverEntry: false, Intl: false, isSecureContext: false, KeyboardEvent: false, KeyframeEffect: false, KeyframeEffectReadOnly: false, length: false, localStorage: false, location: true, Location: false, locationbar: false, matchMedia: false, MediaDeviceInfo: false, MediaDevices: false, MediaElementAudioSourceNode: false, MediaEncryptedEvent: false, MediaError: false, MediaKeyMessageEvent: false, MediaKeySession: false, MediaKeyStatusMap: false, MediaKeySystemAccess: false, MediaList: false, MediaQueryList: false, MediaQueryListEvent: false, MediaRecorder: false, MediaSettingsRange: false, MediaSource: false, MediaStream: false, MediaStreamAudioDestinationNode: false, MediaStreamAudioSourceNode: false, MediaStreamEvent: false, MediaStreamTrack: false, MediaStreamTrackEvent: false, menubar: false, MessageChannel: false, MessageEvent: false, MessagePort: false, MIDIAccess: false, MIDIConnectionEvent: false, MIDIInput: false, MIDIInputMap: false, MIDIMessageEvent: false, MIDIOutput: false, MIDIOutputMap: false, MIDIPort: false, MimeType: false, MimeTypeArray: false, MouseEvent: false, moveBy: false, moveTo: false, MutationEvent: false, MutationObserver: false, MutationRecord: false, name: false, NamedNodeMap: false, NavigationPreloadManager: false, navigator: false, Navigator: false, NetworkInformation: false, Node: false, NodeFilter: false, NodeIterator: false, NodeList: false, Notification: false, OfflineAudioCompletionEvent: false, OfflineAudioContext: false, offscreenBuffering: false, OffscreenCanvas: true, OffscreenCanvasRenderingContext2D: false, onabort: true, onafterprint: true, onanimationend: true, onanimationiteration: true, onanimationstart: true, onappinstalled: true, onauxclick: true, onbeforeinstallprompt: true, onbeforeprint: true, onbeforeunload: true, onblur: true, oncancel: true, oncanplay: true, oncanplaythrough: true, onchange: true, onclick: true, onclose: true, oncontextmenu: true, oncuechange: true, ondblclick: true, ondevicemotion: true, ondeviceorientation: true, ondeviceorientationabsolute: true, ondrag: true, ondragend: true, ondragenter: true, ondragleave: true, ondragover: true, ondragstart: true, ondrop: true, ondurationchange: true, onemptied: true, onended: true, onerror: true, onfocus: true, ongotpointercapture: true, onhashchange: true, oninput: true, oninvalid: true, onkeydown: true, onkeypress: true, onkeyup: true, onlanguagechange: true, onload: true, onloadeddata: true, onloadedmetadata: true, onloadstart: true, onlostpointercapture: true, onmessage: true, onmessageerror: true, onmousedown: true, onmouseenter: true, onmouseleave: true, onmousemove: true, onmouseout: true, onmouseover: true, onmouseup: true, onmousewheel: true, onoffline: true, ononline: true, onpagehide: true, onpageshow: true, onpause: true, onplay: true, onplaying: true, onpointercancel: true, onpointerdown: true, onpointerenter: true, onpointerleave: true, onpointermove: true, onpointerout: true, onpointerover: true, onpointerup: true, onpopstate: true, onprogress: true, onratechange: true, onrejectionhandled: true, onreset: true, onresize: true, onscroll: true, onsearch: true, onseeked: true, onseeking: true, onselect: true, onstalled: true, onstorage: true, onsubmit: true, onsuspend: true, ontimeupdate: true, ontoggle: true, ontransitionend: true, onunhandledrejection: true, onunload: true, onvolumechange: true, onwaiting: true, onwheel: true, open: false, openDatabase: false, opener: false, Option: false, origin: false, OscillatorNode: false, outerHeight: false, outerWidth: false, OverconstrainedError: false, PageTransitionEvent: false, pageXOffset: false, pageYOffset: false, PannerNode: false, parent: false, Path2D: false, PaymentAddress: false, PaymentRequest: false, PaymentRequestUpdateEvent: false, PaymentResponse: false, performance: false, Performance: false, PerformanceEntry: false, PerformanceLongTaskTiming: false, PerformanceMark: false, PerformanceMeasure: false, PerformanceNavigation: false, PerformanceNavigationTiming: false, PerformanceObserver: false, PerformanceObserverEntryList: false, PerformancePaintTiming: false, PerformanceResourceTiming: false, PerformanceTiming: false, PeriodicWave: false, Permissions: false, PermissionStatus: false, personalbar: false, PhotoCapabilities: false, Plugin: false, PluginArray: false, PointerEvent: false, PopStateEvent: false, postMessage: false, Presentation: false, PresentationAvailability: false, PresentationConnection: false, PresentationConnectionAvailableEvent: false, PresentationConnectionCloseEvent: false, PresentationConnectionList: false, PresentationReceiver: false, PresentationRequest: false, print: false, ProcessingInstruction: false, ProgressEvent: false, PromiseRejectionEvent: false, prompt: false, PushManager: false, PushSubscription: false, PushSubscriptionOptions: false, queueMicrotask: false, RadioNodeList: false, Range: false, ReadableStream: false, registerProcessor: false, RemotePlayback: false, removeEventListener: false, Request: false, requestAnimationFrame: false, requestIdleCallback: false, resizeBy: false, ResizeObserver: false, ResizeObserverEntry: false, resizeTo: false, Response: false, RTCCertificate: false, RTCDataChannel: false, RTCDataChannelEvent: false, RTCDtlsTransport: false, RTCIceCandidate: false, RTCIceGatherer: false, RTCIceTransport: false, RTCPeerConnection: false, RTCPeerConnectionIceEvent: false, RTCRtpContributingSource: false, RTCRtpReceiver: false, RTCRtpSender: false, RTCSctpTransport: false, RTCSessionDescription: false, RTCStatsReport: false, RTCTrackEvent: false, screen: false, Screen: false, screenLeft: false, ScreenOrientation: false, screenTop: false, screenX: false, screenY: false, ScriptProcessorNode: false, scroll: false, scrollbars: false, scrollBy: false, scrollTo: false, scrollX: false, scrollY: false, SecurityPolicyViolationEvent: false, Selection: false, self: false, ServiceWorker: false, ServiceWorkerContainer: false, ServiceWorkerRegistration: false, sessionStorage: false, setInterval: false, setTimeout: false, ShadowRoot: false, SharedWorker: false, SourceBuffer: false, SourceBufferList: false, speechSynthesis: false, SpeechSynthesisEvent: false, SpeechSynthesisUtterance: false, StaticRange: false, status: false, statusbar: false, StereoPannerNode: false, stop: false, Storage: false, StorageEvent: false, StorageManager: false, styleMedia: false, StyleSheet: false, StyleSheetList: false, SubtleCrypto: false, SVGAElement: false, SVGAngle: false, SVGAnimatedAngle: false, SVGAnimatedBoolean: false, SVGAnimatedEnumeration: false, SVGAnimatedInteger: false, SVGAnimatedLength: false, SVGAnimatedLengthList: false, SVGAnimatedNumber: false, SVGAnimatedNumberList: false, SVGAnimatedPreserveAspectRatio: false, SVGAnimatedRect: false, SVGAnimatedString: false, SVGAnimatedTransformList: false, SVGAnimateElement: false, SVGAnimateMotionElement: false, SVGAnimateTransformElement: false, SVGAnimationElement: false, SVGCircleElement: false, SVGClipPathElement: false, SVGComponentTransferFunctionElement: false, SVGDefsElement: false, SVGDescElement: false, SVGDiscardElement: false, SVGElement: false, SVGEllipseElement: false, SVGFEBlendElement: false, SVGFEColorMatrixElement: false, SVGFEComponentTransferElement: false, SVGFECompositeElement: false, SVGFEConvolveMatrixElement: false, SVGFEDiffuseLightingElement: false, SVGFEDisplacementMapElement: false, SVGFEDistantLightElement: false, SVGFEDropShadowElement: false, SVGFEFloodElement: false, SVGFEFuncAElement: false, SVGFEFuncBElement: false, SVGFEFuncGElement: false, SVGFEFuncRElement: false, SVGFEGaussianBlurElement: false, SVGFEImageElement: false, SVGFEMergeElement: false, SVGFEMergeNodeElement: false, SVGFEMorphologyElement: false, SVGFEOffsetElement: false, SVGFEPointLightElement: false, SVGFESpecularLightingElement: false, SVGFESpotLightElement: false, SVGFETileElement: false, SVGFETurbulenceElement: false, SVGFilterElement: false, SVGForeignObjectElement: false, SVGGElement: false, SVGGeometryElement: false, SVGGradientElement: false, SVGGraphicsElement: false, SVGImageElement: false, SVGLength: false, SVGLengthList: false, SVGLinearGradientElement: false, SVGLineElement: false, SVGMarkerElement: false, SVGMaskElement: false, SVGMatrix: false, SVGMetadataElement: false, SVGMPathElement: false, SVGNumber: false, SVGNumberList: false, SVGPathElement: false, SVGPatternElement: false, SVGPoint: false, SVGPointList: false, SVGPolygonElement: false, SVGPolylineElement: false, SVGPreserveAspectRatio: false, SVGRadialGradientElement: false, SVGRect: false, SVGRectElement: false, SVGScriptElement: false, SVGSetElement: false, SVGStopElement: false, SVGStringList: false, SVGStyleElement: false, SVGSVGElement: false, SVGSwitchElement: false, SVGSymbolElement: false, SVGTextContentElement: false, SVGTextElement: false, SVGTextPathElement: false, SVGTextPositioningElement: false, SVGTitleElement: false, SVGTransform: false, SVGTransformList: false, SVGTSpanElement: false, SVGUnitTypes: false, SVGUseElement: false, SVGViewElement: false, TaskAttributionTiming: false, Text: false, TextDecoder: false, TextEncoder: false, TextEvent: false, TextMetrics: false, TextTrack: false, TextTrackCue: false, TextTrackCueList: false, TextTrackList: false, TimeRanges: false, toolbar: false, top: false, Touch: false, TouchEvent: false, TouchList: false, TrackEvent: false, TransitionEvent: false, TreeWalker: false, UIEvent: false, URL: false, URLSearchParams: false, ValidityState: false, visualViewport: false, VisualViewport: false, VTTCue: false, WaveShaperNode: false, WebAssembly: false, WebGL2RenderingContext: false, WebGLActiveInfo: false, WebGLBuffer: false, WebGLContextEvent: false, WebGLFramebuffer: false, WebGLProgram: false, WebGLQuery: false, WebGLRenderbuffer: false, WebGLRenderingContext: false, WebGLSampler: false, WebGLShader: false, WebGLShaderPrecisionFormat: false, WebGLSync: false, WebGLTexture: false, WebGLTransformFeedback: false, WebGLUniformLocation: false, WebGLVertexArrayObject: false, WebSocket: false, WheelEvent: false, window: false, Window: false, Worker: false, WritableStream: false, XMLDocument: false, XMLHttpRequest: false, XMLHttpRequestEventTarget: false, XMLHttpRequestUpload: false, XMLSerializer: false, XPathEvaluator: false, XPathExpression: false, XPathResult: false, XSLTProcessor: false}, worker: {addEventListener: false, applicationCache: false, atob: false, Blob: false, BroadcastChannel: false, btoa: false, Cache: false, caches: false, clearInterval: false, clearTimeout: false, close: true, console: false, fetch: false, FileReaderSync: false, FormData: false, Headers: false, IDBCursor: false, IDBCursorWithValue: false, IDBDatabase: false, IDBFactory: false, IDBIndex: false, IDBKeyRange: false, IDBObjectStore: false, IDBOpenDBRequest: false, IDBRequest: false, IDBTransaction: false, IDBVersionChangeEvent: false, ImageData: false, importScripts: true, indexedDB: false, location: false, MessageChannel: false, MessagePort: false, name: false, navigator: false, Notification: false, onclose: true, onconnect: true, onerror: true, onlanguagechange: true, onmessage: true, onoffline: true, ononline: true, onrejectionhandled: true, onunhandledrejection: true, performance: false, Performance: false, PerformanceEntry: false, PerformanceMark: false, PerformanceMeasure: false, PerformanceNavigation: false, PerformanceResourceTiming: false, PerformanceTiming: false, postMessage: true, Promise: false, queueMicrotask: false, removeEventListener: false, Request: false, Response: false, self: true, ServiceWorkerRegistration: false, setInterval: false, setTimeout: false, TextDecoder: false, TextEncoder: false, URL: false, URLSearchParams: false, WebSocket: false, Worker: false, WorkerGlobalScope: false, XMLHttpRequest: false}, node: {__dirname: false, __filename: false, AbortController: false, Buffer: false, clearImmediate: false, clearInterval: false, clearTimeout: false, console: false, exports: true, global: false, Intl: false, module: false, process: false, queueMicrotask: false, require: false, setImmediate: false, setInterval: false, setTimeout: false, TextDecoder: false, TextEncoder: false, URL: false, URLSearchParams: false}, nodeBuiltin: {AbortController: false, Buffer: false, clearImmediate: false, clearInterval: false, clearTimeout: false, console: false, global: false, Intl: false, process: false, queueMicrotask: false, setImmediate: false, setInterval: false, setTimeout: false, TextDecoder: false, TextEncoder: false, URL: false, URLSearchParams: false}, commonjs: {exports: true, global: false, module: false, require: false}, amd: {define: false, require: false}, mocha: {after: false, afterEach: false, before: false, beforeEach: false, context: false, describe: false, it: false, mocha: false, run: false, setup: false, specify: false, suite: false, suiteSetup: false, suiteTeardown: false, teardown: false, test: false, xcontext: false, xdescribe: false, xit: false, xspecify: false}, jasmine: {afterAll: false, afterEach: false, beforeAll: false, beforeEach: false, describe: false, expect: false, expectAsync: false, fail: false, fdescribe: false, fit: false, it: false, jasmine: false, pending: false, runs: false, spyOn: false, spyOnAllFunctions: false, spyOnProperty: false, waits: false, waitsFor: false, xdescribe: false, xit: false}, jest: {afterAll: false, afterEach: false, beforeAll: false, beforeEach: false, describe: false, expect: false, fdescribe: false, fit: false, it: false, jest: false, pit: false, require: false, test: false, xdescribe: false, xit: false, xtest: false}, qunit: {asyncTest: false, deepEqual: false, equal: false, expect: false, module: false, notDeepEqual: false, notEqual: false, notOk: false, notPropEqual: false, notStrictEqual: false, ok: false, propEqual: false, QUnit: false, raises: false, start: false, stop: false, strictEqual: false, test: false, throws: false}, phantomjs: {console: true, exports: true, phantom: true, require: true, WebPage: true}, couch: {emit: false, exports: false, getRow: false, log: false, module: false, provides: false, require: false, respond: false, send: false, start: false, sum: false}, rhino: {defineClass: false, deserialize: false, gc: false, help: false, importClass: false, importPackage: false, java: false, load: false, loadClass: false, Packages: false, print: false, quit: false, readFile: false, readUrl: false, runCommand: false, seal: false, serialize: false, spawn: false, sync: false, toint32: false, version: false}, nashorn: {__DIR__: false, __FILE__: false, __LINE__: false, com: false, edu: false, exit: false, java: false, Java: false, javafx: false, JavaImporter: false, javax: false, JSAdapter: false, load: false, loadWithNewGlobal: false, org: false, Packages: false, print: false, quit: false}, wsh: {ActiveXObject: false, CollectGarbage: false, Debug: false, Enumerator: false, GetObject: false, RuntimeObject: false, ScriptEngine: false, ScriptEngineBuildVersion: false, ScriptEngineMajorVersion: false, ScriptEngineMinorVersion: false, VBArray: false, WScript: false, WSH: false}, jquery: {$: false, jQuery: false}, yui: {YAHOO: false, YAHOO_config: false, YUI: false, YUI_config: false}, shelljs: {cat: false, cd: false, chmod: false, config: false, cp: false, dirs: false, echo: false, env: false, error: false, exec: false, exit: false, find: false, grep: false, ln: false, ls: false, mkdir: false, mv: false, popd: false, pushd: false, pwd: false, rm: false, sed: false, set: false, target: false, tempdir: false, test: false, touch: false, which: false}, prototypejs: {$: false, $$: false, $A: false, $break: false, $continue: false, $F: false, $H: false, $R: false, $w: false, Abstract: false, Ajax: false, Autocompleter: false, Builder: false, Class: false, Control: false, Draggable: false, Draggables: false, Droppables: false, Effect: false, Element: false, Enumerable: false, Event: false, Field: false, Form: false, Hash: false, Insertion: false, ObjectRange: false, PeriodicalExecuter: false, Position: false, Prototype: false, Scriptaculous: false, Selector: false, Sortable: false, SortableObserver: false, Sound: false, Template: false, Toggle: false, Try: false}, meteor: {$: false, Accounts: false, AccountsClient: false, AccountsCommon: false, AccountsServer: false, App: false, Assets: false, Blaze: false, check: false, Cordova: false, DDP: false, DDPRateLimiter: false, DDPServer: false, Deps: false, EJSON: false, Email: false, HTTP: false, Log: false, Match: false, Meteor: false, Mongo: false, MongoInternals: false, Npm: false, Package: false, Plugin: false, process: false, Random: false, ReactiveDict: false, ReactiveVar: false, Router: false, ServiceConfiguration: false, Session: false, share: false, Spacebars: false, Template: false, Tinytest: false, Tracker: false, UI: false, Utils: false, WebApp: false, WebAppInternals: false}, mongo: {_isWindows: false, _rand: false, BulkWriteResult: false, cat: false, cd: false, connect: false, db: false, getHostName: false, getMemInfo: false, hostname: false, ISODate: false, listFiles: false, load: false, ls: false, md5sumFile: false, mkdir: false, Mongo: false, NumberInt: false, NumberLong: false, ObjectId: false, PlanCache: false, print: false, printjson: false, pwd: false, quit: false, removeFile: false, rs: false, sh: false, UUID: false, version: false, WriteResult: false}, applescript: {$: false, Application: false, Automation: false, console: false, delay: false, Library: false, ObjC: false, ObjectSpecifier: false, Path: false, Progress: false, Ref: false}, serviceworker: {addEventListener: false, applicationCache: false, atob: false, Blob: false, BroadcastChannel: false, btoa: false, Cache: false, caches: false, CacheStorage: false, clearInterval: false, clearTimeout: false, Client: false, clients: false, Clients: false, close: true, console: false, ExtendableEvent: false, ExtendableMessageEvent: false, fetch: false, FetchEvent: false, FileReaderSync: false, FormData: false, Headers: false, IDBCursor: false, IDBCursorWithValue: false, IDBDatabase: false, IDBFactory: false, IDBIndex: false, IDBKeyRange: false, IDBObjectStore: false, IDBOpenDBRequest: false, IDBRequest: false, IDBTransaction: false, IDBVersionChangeEvent: false, ImageData: false, importScripts: false, indexedDB: false, location: false, MessageChannel: false, MessagePort: false, name: false, navigator: false, Notification: false, onclose: true, onconnect: true, onerror: true, onfetch: true, oninstall: true, onlanguagechange: true, onmessage: true, onmessageerror: true, onnotificationclick: true, onnotificationclose: true, onoffline: true, ononline: true, onpush: true, onpushsubscriptionchange: true, onrejectionhandled: true, onsync: true, onunhandledrejection: true, performance: false, Performance: false, PerformanceEntry: false, PerformanceMark: false, PerformanceMeasure: false, PerformanceNavigation: false, PerformanceResourceTiming: false, PerformanceTiming: false, postMessage: true, Promise: false, queueMicrotask: false, registration: false, removeEventListener: false, Request: false, Response: false, self: false, ServiceWorker: false, ServiceWorkerContainer: false, ServiceWorkerGlobalScope: false, ServiceWorkerMessageEvent: false, ServiceWorkerRegistration: false, setInterval: false, setTimeout: false, skipWaiting: false, TextDecoder: false, TextEncoder: false, URL: false, URLSearchParams: false, WebSocket: false, WindowClient: false, Worker: false, WorkerGlobalScope: false, XMLHttpRequest: false}, atomtest: {advanceClock: false, atom: false, fakeClearInterval: false, fakeClearTimeout: false, fakeSetInterval: false, fakeSetTimeout: false, resetTimeouts: false, waitsForPromise: false}, embertest: {andThen: false, click: false, currentPath: false, currentRouteName: false, currentURL: false, fillIn: false, find: false, findAll: false, findWithAssert: false, keyEvent: false, pauseTest: false, resumeTest: false, triggerEvent: false, visit: false, wait: false}, protractor: {$: false, $$: false, browser: false, by: false, By: false, DartObject: false, element: false, protractor: false}, "shared-node-browser": {clearInterval: false, clearTimeout: false, console: false, setInterval: false, setTimeout: false, URL: false, URLSearchParams: false}, webextensions: {browser: false, chrome: false, opr: false}, greasemonkey: {cloneInto: false, createObjectIn: false, exportFunction: false, GM: false, GM_addStyle: false, GM_addValueChangeListener: false, GM_deleteValue: false, GM_download: false, GM_getResourceText: false, GM_getResourceURL: false, GM_getTab: false, GM_getTabs: false, GM_getValue: false, GM_info: false, GM_listValues: false, GM_log: false, GM_notification: false, GM_openInTab: false, GM_registerMenuCommand: false, GM_removeValueChangeListener: false, GM_saveTab: false, GM_setClipboard: false, GM_setValue: false, GM_unregisterMenuCommand: false, GM_xmlhttpRequest: false, unsafeWindow: false}, devtools: {$: false, $_: false, $$: false, $0: false, $1: false, $2: false, $3: false, $4: false, $x: false, chrome: false, clear: false, copy: false, debug: false, dir: false, dirxml: false, getEventListeners: false, inspect: false, keys: false, monitor: false, monitorEvents: false, profile: false, profileEnd: false, queryObjects: false, table: false, undebug: false, unmonitor: false, unmonitorEvents: false, values: false}};
    const kn = ["window", "document", "console"], Nn = Object.keys(Dn.builtin), In = (e4) => xi.Identifier.check(e4), Fn = (e4) => xi.Literal.check(e4), Mn = (e4) => xi.ExpressionStatement.check(e4), Ln = (e4) => xi.ThisExpression.check(e4), On = (e4) => Mn(e4) && jn(e4.expression.left) && Ln(e4.expression.left.object), _n = (e4) => xi.NewExpression.check(e4), Bn = (e4) => xi.SequenceExpression.check(e4), Rn = (e4) => xi.ExportDefaultDeclaration.check(e4), jn = (e4) => xi.MemberExpression.check(e4), Un = (e4) => xi.ImportDeclaration.check(e4), qn = (e4) => {
      let {name: t3} = e4;
      return kn.includes(t3);
    }, zn = (e4) => {
      let {name: t3} = e4;
      return Nn.includes(t3);
    }, Vn = (e4) => e4 && e4.raw, Jn = /\r\n?|\n/g;
    function Xn(e4) {
      return e4.split(Jn);
    }
    function Gn(e4, t3) {
      const r4 = Xn(e4.slice(0, t3));
      return {line: r4.length, column: r4[r4.length - 1].length};
    }
    function Hn(e4, t3, r4) {
      const {column: s4, line: i4} = Gn(t3, r4.start);
      return `${"\n".repeat(i4 - 1)}${" ".repeat(s4 + 1)}${e4}`;
    }
    function Wn(e4) {
      return {sourceType: Ss.getOption(e4, "sourceType", "module"), strictMode: Ss.getOption(e4, "strictMode", false), allowImportExportEverywhere: true, allowReturnOutsideFunction: true, startLine: 1, tokens: true, plugins: ["asyncGenerators", "bigInt", "classPrivateMethods", "classPrivateProperties", "classProperties", "decorators-legacy", "doExpressions", "dynamicImport", "exportDefaultFrom", "exportExtensions", "exportNamespaceFrom", "functionBind", "functionSent", "importMeta", "nullishCoalescingOperator", "numericSeparator", "objectRestSpread", "optionalCatchBinding", "optionalChaining", ["pipelineOperator", {proposal: "minimal"}], "throwExpressions"]};
    }
    var Kn = Wn, $n = Object.defineProperty({default: Kn}, "__esModule", {value: true});
    const Yn = true, Qn = true, Zn = true, ea = true, ta = true, ra = true;
    class sa {
      constructor(e4, t3) {
        t3 === void 0 && (t3 = {}), this.label = void 0, this.keyword = void 0, this.beforeExpr = void 0, this.startsExpr = void 0, this.rightAssociative = void 0, this.isLoop = void 0, this.isAssign = void 0, this.prefix = void 0, this.postfix = void 0, this.binop = void 0, this.updateContext = void 0, this.label = e4, this.keyword = t3.keyword, this.beforeExpr = !!t3.beforeExpr, this.startsExpr = !!t3.startsExpr, this.rightAssociative = !!t3.rightAssociative, this.isLoop = !!t3.isLoop, this.isAssign = !!t3.isAssign, this.prefix = !!t3.prefix, this.postfix = !!t3.postfix, this.binop = t3.binop != null ? t3.binop : null, this.updateContext = null;
      }
    }
    const ia = new Map();
    function na(e4, t3) {
      t3 === void 0 && (t3 = {}), t3.keyword = e4;
      const r4 = new sa(e4, t3);
      return ia.set(e4, r4), r4;
    }
    function aa(e4, t3) {
      return new sa(e4, {beforeExpr: Yn, binop: t3});
    }
    const oa = {num: new sa("num", {startsExpr: Qn}), bigint: new sa("bigint", {startsExpr: Qn}), decimal: new sa("decimal", {startsExpr: Qn}), regexp: new sa("regexp", {startsExpr: Qn}), string: new sa("string", {startsExpr: Qn}), name: new sa("name", {startsExpr: Qn}), eof: new sa("eof"), bracketL: new sa("[", {beforeExpr: Yn, startsExpr: Qn}), bracketHashL: new sa("#[", {beforeExpr: Yn, startsExpr: Qn}), bracketBarL: new sa("[|", {beforeExpr: Yn, startsExpr: Qn}), bracketR: new sa("]"), bracketBarR: new sa("|]"), braceL: new sa("{", {beforeExpr: Yn, startsExpr: Qn}), braceBarL: new sa("{|", {beforeExpr: Yn, startsExpr: Qn}), braceHashL: new sa("#{", {beforeExpr: Yn, startsExpr: Qn}), braceR: new sa("}"), braceBarR: new sa("|}"), parenL: new sa("(", {beforeExpr: Yn, startsExpr: Qn}), parenR: new sa(")"), comma: new sa(",", {beforeExpr: Yn}), semi: new sa(";", {beforeExpr: Yn}), colon: new sa(":", {beforeExpr: Yn}), doubleColon: new sa("::", {beforeExpr: Yn}), dot: new sa("."), question: new sa("?", {beforeExpr: Yn}), questionDot: new sa("?."), arrow: new sa("=>", {beforeExpr: Yn}), template: new sa("template"), ellipsis: new sa("...", {beforeExpr: Yn}), backQuote: new sa("`", {startsExpr: Qn}), dollarBraceL: new sa("${", {beforeExpr: Yn, startsExpr: Qn}), at: new sa("@"), hash: new sa("#", {startsExpr: Qn}), interpreterDirective: new sa("#!..."), eq: new sa("=", {beforeExpr: Yn, isAssign: ea}), assign: new sa("_=", {beforeExpr: Yn, isAssign: ea}), incDec: new sa("++/--", {prefix: ta, postfix: ra, startsExpr: Qn}), bang: new sa("!", {beforeExpr: Yn, prefix: ta, startsExpr: Qn}), tilde: new sa("~", {beforeExpr: Yn, prefix: ta, startsExpr: Qn}), pipeline: aa("|>", 0), nullishCoalescing: aa("??", 1), logicalOR: aa("||", 1), logicalAND: aa("&&", 2), bitwiseOR: aa("|", 3), bitwiseXOR: aa("^", 4), bitwiseAND: aa("&", 5), equality: aa("==/!=/===/!==", 6), relational: aa("</>/<=/>=", 7), bitShift: aa("<</>>/>>>", 8), plusMin: new sa("+/-", {beforeExpr: Yn, binop: 9, prefix: ta, startsExpr: Qn}), modulo: new sa("%", {beforeExpr: Yn, binop: 10, startsExpr: Qn}), star: new sa("*", {binop: 10}), slash: aa("/", 10), exponent: new sa("**", {beforeExpr: Yn, binop: 11, rightAssociative: true}), _break: na("break"), _case: na("case", {beforeExpr: Yn}), _catch: na("catch"), _continue: na("continue"), _debugger: na("debugger"), _default: na("default", {beforeExpr: Yn}), _do: na("do", {isLoop: Zn, beforeExpr: Yn}), _else: na("else", {beforeExpr: Yn}), _finally: na("finally"), _for: na("for", {isLoop: Zn}), _function: na("function", {startsExpr: Qn}), _if: na("if"), _return: na("return", {beforeExpr: Yn}), _switch: na("switch"), _throw: na("throw", {beforeExpr: Yn, prefix: ta, startsExpr: Qn}), _try: na("try"), _var: na("var"), _const: na("const"), _while: na("while", {isLoop: Zn}), _with: na("with"), _new: na("new", {beforeExpr: Yn, startsExpr: Qn}), _this: na("this", {startsExpr: Qn}), _super: na("super", {startsExpr: Qn}), _class: na("class", {startsExpr: Qn}), _extends: na("extends", {beforeExpr: Yn}), _export: na("export"), _import: na("import", {startsExpr: Qn}), _null: na("null", {startsExpr: Qn}), _true: na("true", {startsExpr: Qn}), _false: na("false", {startsExpr: Qn}), _in: na("in", {beforeExpr: Yn, binop: 7}), _instanceof: na("instanceof", {beforeExpr: Yn, binop: 7}), _typeof: na("typeof", {beforeExpr: Yn, prefix: ta, startsExpr: Qn}), _void: na("void", {beforeExpr: Yn, prefix: ta, startsExpr: Qn}), _delete: na("delete", {beforeExpr: Yn, prefix: ta, startsExpr: Qn})}, la = /\r\n?|[\n\u2028\u2029]/, ca = new RegExp(la.source, "g");
    function ua(e4) {
      switch (e4) {
        case 10:
        case 13:
        case 8232:
        case 8233:
          return true;
        default:
          return false;
      }
    }
    const ha = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
    function pa(e4) {
      switch (e4) {
        case 9:
        case 11:
        case 12:
        case 32:
        case 160:
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          return true;
        default:
          return false;
      }
    }
    class da {
      constructor(e4, t3) {
        this.line = void 0, this.column = void 0, this.line = e4, this.column = t3;
      }
    }
    class fa {
      constructor(e4, t3) {
        this.start = void 0, this.end = void 0, this.filename = void 0, this.identifierName = void 0, this.start = e4, this.end = t3;
      }
    }
    function ma(e4, t3) {
      let r4, s4 = 1, i4 = 0;
      for (ca.lastIndex = 0; (r4 = ca.exec(e4)) && r4.index < t3; )
        s4++, i4 = ca.lastIndex;
      return new da(s4, t3 - i4);
    }
    class ya {
      constructor() {
        this.sawUnambiguousESM = false, this.ambiguousScriptDifferentAst = false;
      }
      hasPlugin(e4) {
        return this.plugins.has(e4);
      }
      getPluginOption(e4, t3) {
        if (this.hasPlugin(e4))
          return this.plugins.get(e4)[t3];
      }
    }
    function ga(e4) {
      return e4[e4.length - 1];
    }
    class xa extends ya {
      addComment(e4) {
        this.filename && (e4.loc.filename = this.filename), this.state.trailingComments.push(e4), this.state.leadingComments.push(e4);
      }
      adjustCommentsAfterTrailingComma(e4, t3, r4) {
        if (this.state.leadingComments.length === 0)
          return;
        let s4 = null, i4 = t3.length;
        for (; s4 === null && i4 > 0; )
          s4 = t3[--i4];
        if (s4 === null)
          return;
        for (let a4 = 0; a4 < this.state.leadingComments.length; a4++)
          this.state.leadingComments[a4].end < this.state.commentPreviousNode.end && (this.state.leadingComments.splice(a4, 1), a4--);
        const n4 = [];
        for (let a4 = 0; a4 < this.state.leadingComments.length; a4++) {
          const t4 = this.state.leadingComments[a4];
          t4.end < e4.end ? (n4.push(t4), r4 || (this.state.leadingComments.splice(a4, 1), a4--)) : (e4.trailingComments === void 0 && (e4.trailingComments = []), e4.trailingComments.push(t4));
        }
        r4 && (this.state.leadingComments = []), n4.length > 0 ? s4.trailingComments = n4 : s4.trailingComments !== void 0 && (s4.trailingComments = []);
      }
      processComment(e4) {
        if (e4.type === "Program" && e4.body.length > 0)
          return;
        const t3 = this.state.commentStack;
        let r4, s4, i4, n4, a4;
        if (this.state.trailingComments.length > 0)
          this.state.trailingComments[0].start >= e4.end ? (i4 = this.state.trailingComments, this.state.trailingComments = []) : this.state.trailingComments.length = 0;
        else if (t3.length > 0) {
          const r5 = ga(t3);
          r5.trailingComments && r5.trailingComments[0].start >= e4.end && (i4 = r5.trailingComments, delete r5.trailingComments);
        }
        for (t3.length > 0 && ga(t3).start >= e4.start && (r4 = t3.pop()); t3.length > 0 && ga(t3).start >= e4.start; )
          s4 = t3.pop();
        if (!s4 && r4 && (s4 = r4), r4)
          switch (e4.type) {
            case "ObjectExpression":
              this.adjustCommentsAfterTrailingComma(e4, e4.properties);
              break;
            case "ObjectPattern":
              this.adjustCommentsAfterTrailingComma(e4, e4.properties, true);
              break;
            case "CallExpression":
              this.adjustCommentsAfterTrailingComma(e4, e4.arguments);
              break;
            case "ArrayExpression":
              this.adjustCommentsAfterTrailingComma(e4, e4.elements);
              break;
            case "ArrayPattern":
              this.adjustCommentsAfterTrailingComma(e4, e4.elements, true);
          }
        else
          this.state.commentPreviousNode && (this.state.commentPreviousNode.type === "ImportSpecifier" && e4.type !== "ImportSpecifier" || this.state.commentPreviousNode.type === "ExportSpecifier" && e4.type !== "ExportSpecifier") && this.adjustCommentsAfterTrailingComma(e4, [this.state.commentPreviousNode]);
        if (s4) {
          if (s4.leadingComments) {
            if (s4 !== e4 && s4.leadingComments.length > 0 && ga(s4.leadingComments).end <= e4.start)
              e4.leadingComments = s4.leadingComments, delete s4.leadingComments;
            else
              for (n4 = s4.leadingComments.length - 2; n4 >= 0; --n4)
                if (s4.leadingComments[n4].end <= e4.start) {
                  e4.leadingComments = s4.leadingComments.splice(0, n4 + 1);
                  break;
                }
          }
        } else if (this.state.leadingComments.length > 0)
          if (ga(this.state.leadingComments).end <= e4.start) {
            if (this.state.commentPreviousNode)
              for (a4 = 0; a4 < this.state.leadingComments.length; a4++)
                this.state.leadingComments[a4].end < this.state.commentPreviousNode.end && (this.state.leadingComments.splice(a4, 1), a4--);
            this.state.leadingComments.length > 0 && (e4.leadingComments = this.state.leadingComments, this.state.leadingComments = []);
          } else {
            for (n4 = 0; n4 < this.state.leadingComments.length && !(this.state.leadingComments[n4].end > e4.start); n4++)
              ;
            const t4 = this.state.leadingComments.slice(0, n4);
            t4.length && (e4.leadingComments = t4), i4 = this.state.leadingComments.slice(n4), i4.length === 0 && (i4 = null);
          }
        if (this.state.commentPreviousNode = e4, i4)
          if (i4.length && i4[0].start >= e4.start && ga(i4).end <= e4.end)
            e4.innerComments = i4;
          else {
            const t4 = i4.findIndex((t5) => t5.end >= e4.end);
            t4 > 0 ? (e4.innerComments = i4.slice(0, t4), e4.trailingComments = i4.slice(t4)) : e4.trailingComments = i4;
          }
        t3.push(e4);
      }
    }
    const ba = Object.freeze({SyntaxError: "BABEL_PARSER_SYNTAX_ERROR", SourceTypeModuleError: "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED"}), Ea = Sa({AccessorIsGenerator: "A %0ter cannot be a generator.", ArgumentsInClass: "'arguments' is only allowed in functions and class methods.", AsyncFunctionInSingleStatementContext: "Async functions can only be declared at the top level or inside a block.", AwaitBindingIdentifier: "Can not use 'await' as identifier inside an async function.", AwaitBindingIdentifierInStaticBlock: "Can not use 'await' as identifier inside a static block.", AwaitExpressionFormalParameter: "'await' is not allowed in async function parameters.", AwaitNotInAsyncContext: "'await' is only allowed within async functions and at the top levels of modules.", AwaitNotInAsyncFunction: "'await' is only allowed within async functions.", BadGetterArity: "A 'get' accesor must not have any formal parameters.", BadSetterArity: "A 'set' accesor must have exactly one formal parameter.", BadSetterRestParameter: "A 'set' accesor function argument must not be a rest parameter.", ConstructorClassField: "Classes may not have a field named 'constructor'.", ConstructorClassPrivateField: "Classes may not have a private field named '#constructor'.", ConstructorIsAccessor: "Class constructor may not be an accessor.", ConstructorIsAsync: "Constructor can't be an async function.", ConstructorIsGenerator: "Constructor can't be a generator.", DeclarationMissingInitializer: "'%0' require an initialization value.", DecoratorBeforeExport: "Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.", DecoratorConstructor: "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?", DecoratorExportClass: "Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.", DecoratorSemicolon: "Decorators must not be followed by a semicolon.", DecoratorStaticBlock: "Decorators can't be used with a static block.", DeletePrivateField: "Deleting a private field is not allowed.", DestructureNamedImport: "ES2015 named imports do not destructure. Use another statement for destructuring after the import.", DuplicateConstructor: "Duplicate constructor in the same class.", DuplicateDefaultExport: "Only one default export allowed per module.", DuplicateExport: "`%0` has already been exported. Exported identifiers must be unique.", DuplicateProto: "Redefinition of __proto__ property.", DuplicateRegExpFlags: "Duplicate regular expression flag.", ElementAfterRest: "Rest element must be last element.", EscapedCharNotAnIdentifier: "Invalid Unicode escape.", ExportBindingIsString: "A string literal cannot be used as an exported binding without `from`.\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?", ExportDefaultFromAsIdentifier: "'from' is not allowed as an identifier after 'export default'.", ForInOfLoopInitializer: "'%0' loop variable declaration may not have an initializer.", ForOfAsync: "The left-hand side of a for-of loop may not be 'async'.", ForOfLet: "The left-hand side of a for-of loop may not start with 'let'.", GeneratorInSingleStatementContext: "Generators can only be declared at the top level or inside a block.", IllegalBreakContinue: "Unsyntactic %0.", IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list.", IllegalReturn: "'return' outside of function.", ImportBindingIsString: 'A string literal cannot be used as an imported binding.\n- Did you mean `import { "%0" as foo }`?', ImportCallArgumentTrailingComma: "Trailing comma is disallowed inside import(...) arguments.", ImportCallArity: "`import()` requires exactly %0.", ImportCallNotNewExpression: "Cannot use new with import(...).", ImportCallSpreadArgument: "`...` is not allowed in `import()`.", InvalidBigIntLiteral: "Invalid BigIntLiteral.", InvalidCodePoint: "Code point out of bounds.", InvalidDecimal: "Invalid decimal.", InvalidDigit: "Expected number in radix %0.", InvalidEscapeSequence: "Bad character escape sequence.", InvalidEscapeSequenceTemplate: "Invalid escape sequence in template.", InvalidEscapedReservedWord: "Escape sequence in keyword %0.", InvalidIdentifier: "Invalid identifier %0.", InvalidLhs: "Invalid left-hand side in %0.", InvalidLhsBinding: "Binding invalid left-hand side in %0.", InvalidNumber: "Invalid number.", InvalidOrMissingExponent: "Floating-point numbers require a valid exponent after the 'e'.", InvalidOrUnexpectedToken: "Unexpected character '%0'.", InvalidParenthesizedAssignment: "Invalid parenthesized assignment pattern.", InvalidPrivateFieldResolution: "Private name #%0 is not defined.", InvalidPropertyBindingPattern: "Binding member expression.", InvalidRecordProperty: "Only properties and spread elements are allowed in record definitions.", InvalidRestAssignmentPattern: "Invalid rest operator's argument.", LabelRedeclaration: "Label '%0' is already declared.", LetInLexicalBinding: "'let' is not allowed to be used as a name in 'let' or 'const' declarations.", LineTerminatorBeforeArrow: "No line break is allowed before '=>'.", MalformedRegExpFlags: "Invalid regular expression flag.", MissingClassName: "A class name is required.", MissingEqInAssignment: "Only '=' operator can be used for specifying default value.", MissingSemicolon: "Missing semicolon.", MissingUnicodeEscape: "Expecting Unicode escape sequence \\uXXXX.", MixingCoalesceWithLogical: "Nullish coalescing operator(??) requires parens when mixing with logical operators.", ModuleAttributeDifferentFromType: "The only accepted module attribute is `type`.", ModuleAttributeInvalidValue: "Only string literals are allowed as module attribute values.", ModuleAttributesWithDuplicateKeys: 'Duplicate key "%0" is not allowed in module attributes.', ModuleExportNameHasLoneSurrogate: "An export name cannot include a lone surrogate, found '\\u%0'.", ModuleExportUndefined: "Export '%0' is not defined.", MultipleDefaultsInSwitch: "Multiple default clauses.", NewlineAfterThrow: "Illegal newline after throw.", NoCatchOrFinally: "Missing catch or finally clause.", NumberIdentifier: "Identifier directly after number.", NumericSeparatorInEscapeSequence: "Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.", ObsoleteAwaitStar: "'await*' has been removed from the async functions proposal. Use Promise.all() instead.", OptionalChainingNoNew: "Constructors in/after an Optional Chain are not allowed.", OptionalChainingNoTemplate: "Tagged Template Literals are not allowed in optionalChain.", OverrideOnConstructor: "'override' modifier cannot appear on a constructor declaration.", ParamDupe: "Argument name clash.", PatternHasAccessor: "Object pattern can't contain getter or setter.", PatternHasMethod: "Object pattern can't contain methods.", PipelineBodyNoArrow: 'Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.', PipelineBodySequenceExpression: "Pipeline body may not be a comma-separated sequence expression.", PipelineHeadSequenceExpression: "Pipeline head should not be a comma-separated sequence expression.", PipelineTopicUnused: "Pipeline is in topic style but does not use topic reference.", PrimaryTopicNotAllowed: "Topic reference was used in a lexical context without topic binding.", PrimaryTopicRequiresSmartPipeline: "Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.", PrivateInExpectedIn: "Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).", PrivateNameRedeclaration: "Duplicate private name #%0.", RecordExpressionBarIncorrectEndSyntaxType: "Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", RecordExpressionBarIncorrectStartSyntaxType: "Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", RecordExpressionHashIncorrectStartSyntaxType: "Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.", RecordNoProto: "'__proto__' is not allowed in Record expressions.", RestTrailingComma: "Unexpected trailing comma after rest element.", SloppyFunction: "In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.", StaticPrototype: "Classes may not have static property named prototype.", StrictDelete: "Deleting local variable in strict mode.", StrictEvalArguments: "Assigning to '%0' in strict mode.", StrictEvalArgumentsBinding: "Binding '%0' in strict mode.", StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block.", StrictNumericEscape: "The only valid numeric escape in strict mode is '\\0'.", StrictOctalLiteral: "Legacy octal literals are not allowed in strict mode.", StrictWith: "'with' in strict mode.", SuperNotAllowed: "`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?", SuperPrivateField: "Private fields can't be accessed on super.", TrailingDecorator: "Decorators must be attached to a class element.", TupleExpressionBarIncorrectEndSyntaxType: "Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", TupleExpressionBarIncorrectStartSyntaxType: "Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", TupleExpressionHashIncorrectStartSyntaxType: "Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.", UnexpectedArgumentPlaceholder: "Unexpected argument placeholder.", UnexpectedAwaitAfterPipelineBody: 'Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.', UnexpectedDigitAfterHash: "Unexpected digit after hash token.", UnexpectedImportExport: "'import' and 'export' may only appear at the top level.", UnexpectedKeyword: "Unexpected keyword '%0'.", UnexpectedLeadingDecorator: "Leading decorators must be attached to a class declaration.", UnexpectedLexicalDeclaration: "Lexical declaration cannot appear in a single-statement context.", UnexpectedNewTarget: "`new.target` can only be used in functions or class properties.", UnexpectedNumericSeparator: "A numeric separator is only allowed between two digits.", UnexpectedPrivateField: "Private names can only be used as the name of a class element (i.e. class C { #p = 42; #m() {} } )\n or a property of member expression (i.e. this.#p).", UnexpectedReservedWord: "Unexpected reserved word '%0'.", UnexpectedSuper: "'super' is only allowed in object methods and classes.", UnexpectedToken: "Unexpected token '%0'.", UnexpectedTokenUnaryExponentiation: "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.", UnsupportedBind: "Binding should be performed on object property.", UnsupportedDecoratorExport: "A decorated export must export a class declaration.", UnsupportedDefaultExport: "Only expressions, functions or classes are allowed as the `default` export.", UnsupportedImport: "`import` can only be used in `import()` or `import.meta`.", UnsupportedMetaProperty: "The only valid meta property for %0 is %0.%1.", UnsupportedParameterDecorator: "Decorators cannot be used to decorate parameters.", UnsupportedPropertyDecorator: "Decorators cannot be used to decorate object literal properties.", UnsupportedSuper: "'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).", UnterminatedComment: "Unterminated comment.", UnterminatedRegExp: "Unterminated regular expression.", UnterminatedString: "Unterminated string constant.", UnterminatedTemplate: "Unterminated template.", VarRedeclaration: "Identifier '%0' has already been declared.", YieldBindingIdentifier: "Can not use 'yield' as identifier inside a generator.", YieldInParameter: "Yield expression is not allowed in formal parameters.", ZeroDigitNumericSeparator: "Numeric separator can not be used after leading 0."}, ba.SyntaxError), va = Sa({ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: "module"'`, ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: "module"'`}, ba.SourceTypeModuleError);
    function Sa(e4, t3) {
      const r4 = {};
      return Object.keys(e4).forEach((s4) => {
        r4[s4] = Object.freeze({code: t3, reasonCode: s4, template: e4[s4]});
      }), Object.freeze(r4);
    }
    class Aa extends xa {
      getLocationForPosition(e4) {
        let t3;
        return t3 = e4 === this.state.start ? this.state.startLoc : e4 === this.state.lastTokStart ? this.state.lastTokStartLoc : e4 === this.state.end ? this.state.endLoc : e4 === this.state.lastTokEnd ? this.state.lastTokEndLoc : ma(this.input, e4), t3;
      }
      raise(e4, t3) {
        let {code: r4, reasonCode: s4, template: i4} = t3;
        for (var n4 = arguments.length, a4 = new Array(n4 > 2 ? n4 - 2 : 0), o4 = 2; o4 < n4; o4++)
          a4[o4 - 2] = arguments[o4];
        return this.raiseWithData(e4, {code: r4, reasonCode: s4}, i4, ...a4);
      }
      raiseOverwrite(e4, t3) {
        let {code: r4, template: s4} = t3;
        for (var i4 = arguments.length, n4 = new Array(i4 > 2 ? i4 - 2 : 0), a4 = 2; a4 < i4; a4++)
          n4[a4 - 2] = arguments[a4];
        const o4 = this.getLocationForPosition(e4), l3 = s4.replace(/%(\d+)/g, (e5, t4) => n4[t4]) + ` (${o4.line}:${o4.column})`;
        if (this.options.errorRecovery) {
          const t4 = this.state.errors;
          for (let r5 = t4.length - 1; r5 >= 0; r5--) {
            const s5 = t4[r5];
            if (s5.pos === e4)
              return Object.assign(s5, {message: l3});
            if (s5.pos < e4)
              break;
          }
        }
        return this._raise({code: r4, loc: o4, pos: e4}, l3);
      }
      raiseWithData(e4, t3, r4) {
        for (var s4 = arguments.length, i4 = new Array(s4 > 3 ? s4 - 3 : 0), n4 = 3; n4 < s4; n4++)
          i4[n4 - 3] = arguments[n4];
        const a4 = this.getLocationForPosition(e4), o4 = r4.replace(/%(\d+)/g, (e5, t4) => i4[t4]) + ` (${a4.line}:${a4.column})`;
        return this._raise(Object.assign({loc: a4, pos: e4}, t3), o4);
      }
      _raise(e4, t3) {
        const r4 = new SyntaxError(t3);
        if (Object.assign(r4, e4), this.options.errorRecovery)
          return this.isLookahead || this.state.errors.push(r4), r4;
        throw r4;
      }
    }
    var Ta = (e4) => class extends e4 {
      estreeParseRegExpLiteral(e5) {
        let {pattern: t3, flags: r4} = e5, s4 = null;
        try {
          s4 = new RegExp(t3, r4);
        } catch (n4) {
        }
        const i4 = this.estreeParseLiteral(s4);
        return i4.regex = {pattern: t3, flags: r4}, i4;
      }
      estreeParseBigIntLiteral(e5) {
        let t3;
        try {
          t3 = BigInt(e5);
        } catch (s4) {
          t3 = null;
        }
        const r4 = this.estreeParseLiteral(t3);
        return r4.bigint = String(r4.value || e5), r4;
      }
      estreeParseDecimalLiteral(e5) {
        const t3 = null, r4 = this.estreeParseLiteral(t3);
        return r4.decimal = String(r4.value || e5), r4;
      }
      estreeParseLiteral(e5) {
        return this.parseLiteral(e5, "Literal");
      }
      directiveToStmt(e5) {
        const t3 = e5.value, r4 = this.startNodeAt(e5.start, e5.loc.start), s4 = this.startNodeAt(t3.start, t3.loc.start);
        return s4.value = t3.extra.expressionValue, s4.raw = t3.extra.raw, r4.expression = this.finishNodeAt(s4, "Literal", t3.end, t3.loc.end), r4.directive = t3.extra.raw.slice(1, -1), this.finishNodeAt(r4, "ExpressionStatement", e5.end, e5.loc.end);
      }
      initFunction(e5, t3) {
        super.initFunction(e5, t3), e5.expression = false;
      }
      checkDeclaration(e5) {
        e5 != null && this.isObjectProperty(e5) ? this.checkDeclaration(e5.value) : super.checkDeclaration(e5);
      }
      getObjectOrClassMethodParams(e5) {
        return e5.value.params;
      }
      isValidDirective(e5) {
        var t3;
        return e5.type === "ExpressionStatement" && e5.expression.type === "Literal" && typeof e5.expression.value == "string" && !((t3 = e5.expression.extra) != null && t3.parenthesized);
      }
      stmtToDirective(e5) {
        const t3 = super.stmtToDirective(e5), r4 = e5.expression.value;
        return this.addExtra(t3.value, "expressionValue", r4), t3;
      }
      parseBlockBody(e5) {
        for (var t3 = arguments.length, r4 = new Array(t3 > 1 ? t3 - 1 : 0), s4 = 1; s4 < t3; s4++)
          r4[s4 - 1] = arguments[s4];
        super.parseBlockBody(e5, ...r4);
        const i4 = e5.directives.map((e6) => this.directiveToStmt(e6));
        e5.body = i4.concat(e5.body), delete e5.directives;
      }
      pushClassMethod(e5, t3, r4, s4, i4, n4) {
        this.parseMethod(t3, r4, s4, i4, n4, "ClassMethod", true), t3.typeParameters && (t3.value.typeParameters = t3.typeParameters, delete t3.typeParameters), e5.body.push(t3);
      }
      parseExprAtom(e5) {
        switch (this.state.type) {
          case oa.num:
          case oa.string:
            return this.estreeParseLiteral(this.state.value);
          case oa.regexp:
            return this.estreeParseRegExpLiteral(this.state.value);
          case oa.bigint:
            return this.estreeParseBigIntLiteral(this.state.value);
          case oa.decimal:
            return this.estreeParseDecimalLiteral(this.state.value);
          case oa._null:
            return this.estreeParseLiteral(null);
          case oa._true:
            return this.estreeParseLiteral(true);
          case oa._false:
            return this.estreeParseLiteral(false);
          default:
            return super.parseExprAtom(e5);
        }
      }
      parseMaybePrivateName() {
        const e5 = super.parseMaybePrivateName(...arguments);
        return e5.type === "PrivateName" && this.getPluginOption("estree", "classFeatures") ? this.convertPrivateNameToPrivateIdentifier(e5) : e5;
      }
      convertPrivateNameToPrivateIdentifier(e5) {
        const t3 = super.getPrivateNameSV(e5);
        return delete (e5 = e5).id, e5.name = t3, e5.type = "PrivateIdentifier", e5;
      }
      isPrivateName(e5) {
        return this.getPluginOption("estree", "classFeatures") ? e5.type === "PrivateIdentifier" : super.isPrivateName(e5);
      }
      getPrivateNameSV(e5) {
        return this.getPluginOption("estree", "classFeatures") ? e5.name : super.getPrivateNameSV(e5);
      }
      parseLiteral(e5, t3, r4, s4) {
        const i4 = super.parseLiteral(e5, t3, r4, s4);
        return i4.raw = i4.extra.raw, delete i4.extra, i4;
      }
      parseFunctionBody(e5, t3, r4) {
        r4 === void 0 && (r4 = false), super.parseFunctionBody(e5, t3, r4), e5.expression = e5.body.type !== "BlockStatement";
      }
      parseMethod(e5, t3, r4, s4, i4, n4, a4) {
        a4 === void 0 && (a4 = false);
        let o4 = this.startNode();
        return o4.kind = e5.kind, o4 = super.parseMethod(o4, t3, r4, s4, i4, n4, a4), o4.type = "FunctionExpression", delete o4.kind, e5.value = o4, n4 === "ClassPrivateMethod" && (e5.computed = false), n4 = "MethodDefinition", this.finishNode(e5, n4);
      }
      parseClassProperty() {
        const e5 = super.parseClassProperty(...arguments);
        return this.getPluginOption("estree", "classFeatures") && (e5.type = "PropertyDefinition"), e5;
      }
      parseClassPrivateProperty() {
        const e5 = super.parseClassPrivateProperty(...arguments);
        return this.getPluginOption("estree", "classFeatures") && (e5.type = "PropertyDefinition", e5.computed = false), e5;
      }
      parseObjectMethod(e5, t3, r4, s4, i4) {
        const n4 = super.parseObjectMethod(e5, t3, r4, s4, i4);
        return n4 && (n4.type = "Property", n4.kind === "method" && (n4.kind = "init"), n4.shorthand = false), n4;
      }
      parseObjectProperty(e5, t3, r4, s4, i4) {
        const n4 = super.parseObjectProperty(e5, t3, r4, s4, i4);
        return n4 && (n4.kind = "init", n4.type = "Property"), n4;
      }
      toAssignable(e5, t3) {
        return t3 === void 0 && (t3 = false), e5 != null && this.isObjectProperty(e5) ? (this.toAssignable(e5.value, t3), e5) : super.toAssignable(e5, t3);
      }
      toAssignableObjectExpressionProp(e5) {
        if (e5.kind === "get" || e5.kind === "set")
          this.raise(e5.key.start, Ea.PatternHasAccessor);
        else if (e5.method)
          this.raise(e5.key.start, Ea.PatternHasMethod);
        else {
          for (var t3 = arguments.length, r4 = new Array(t3 > 1 ? t3 - 1 : 0), s4 = 1; s4 < t3; s4++)
            r4[s4 - 1] = arguments[s4];
          super.toAssignableObjectExpressionProp(e5, ...r4);
        }
      }
      finishCallExpression(e5, t3) {
        return super.finishCallExpression(e5, t3), e5.callee.type === "Import" && (e5.type = "ImportExpression", e5.source = e5.arguments[0], delete e5.arguments, delete e5.callee), e5;
      }
      toReferencedArguments(e5) {
        e5.type !== "ImportExpression" && super.toReferencedArguments(e5);
      }
      parseExport(e5) {
        switch (super.parseExport(e5), e5.type) {
          case "ExportAllDeclaration":
            e5.exported = null;
            break;
          case "ExportNamedDeclaration":
            e5.specifiers.length === 1 && e5.specifiers[0].type === "ExportNamespaceSpecifier" && (e5.type = "ExportAllDeclaration", e5.exported = e5.specifiers[0].exported, delete e5.specifiers);
        }
        return e5;
      }
      parseSubscript(e5, t3, r4, s4, i4) {
        const n4 = super.parseSubscript(e5, t3, r4, s4, i4);
        if (i4.optionalChainMember) {
          if (n4.type !== "OptionalMemberExpression" && n4.type !== "OptionalCallExpression" || (n4.type = n4.type.substring(8)), i4.stop) {
            const e6 = this.startNodeAtNode(n4);
            return e6.expression = n4, this.finishNode(e6, "ChainExpression");
          }
        } else
          n4.type !== "MemberExpression" && n4.type !== "CallExpression" || (n4.optional = false);
        return n4;
      }
      hasPropertyAsPrivateName(e5) {
        return e5.type === "ChainExpression" && (e5 = e5.expression), super.hasPropertyAsPrivateName(e5);
      }
      isOptionalChain(e5) {
        return e5.type === "ChainExpression";
      }
      isObjectProperty(e5) {
        return e5.type === "Property" && e5.kind === "init" && !e5.method;
      }
      isObjectMethod(e5) {
        return e5.method || e5.kind === "get" || e5.kind === "set";
      }
    };
    class wa {
      constructor(e4, t3, r4, s4) {
        this.token = void 0, this.isExpr = void 0, this.preserveSpace = void 0, this.override = void 0, this.token = e4, this.isExpr = !!t3, this.preserveSpace = !!r4, this.override = s4;
      }
    }
    const Ca = {braceStatement: new wa("{", false), braceExpression: new wa("{", true), recordExpression: new wa("#{", true), templateQuasi: new wa("${", false), parenStatement: new wa("(", false), parenExpression: new wa("(", true), template: new wa("`", true, true, (e4) => e4.readTmplToken()), functionExpression: new wa("function", true), functionStatement: new wa("function", false)};
    oa.parenR.updateContext = oa.braceR.updateContext = function() {
      if (this.state.context.length === 1)
        return void (this.state.exprAllowed = true);
      let e4 = this.state.context.pop();
      e4 === Ca.braceStatement && this.curContext().token === "function" && (e4 = this.state.context.pop()), this.state.exprAllowed = !e4.isExpr;
    }, oa.name.updateContext = function(e4) {
      let t3 = false;
      e4 !== oa.dot && (this.state.value !== "of" || this.state.exprAllowed || e4 === oa._function || e4 === oa._class || (t3 = true)), this.state.exprAllowed = t3, this.state.isIterator && (this.state.isIterator = false);
    }, oa.braceL.updateContext = function(e4) {
      this.state.context.push(this.braceIsBlock(e4) ? Ca.braceStatement : Ca.braceExpression), this.state.exprAllowed = true;
    }, oa.dollarBraceL.updateContext = function() {
      this.state.context.push(Ca.templateQuasi), this.state.exprAllowed = true;
    }, oa.parenL.updateContext = function(e4) {
      const t3 = e4 === oa._if || e4 === oa._for || e4 === oa._with || e4 === oa._while;
      this.state.context.push(t3 ? Ca.parenStatement : Ca.parenExpression), this.state.exprAllowed = true;
    }, oa.incDec.updateContext = function() {
    }, oa._function.updateContext = oa._class.updateContext = function(e4) {
      !e4.beforeExpr || e4 === oa.semi || e4 === oa._else || e4 === oa._return && this.hasPrecedingLineBreak() || (e4 === oa.colon || e4 === oa.braceL) && this.curContext() === Ca.b_stat ? this.state.context.push(Ca.functionStatement) : this.state.context.push(Ca.functionExpression), this.state.exprAllowed = false;
    }, oa.backQuote.updateContext = function() {
      this.curContext() === Ca.template ? this.state.context.pop() : this.state.context.push(Ca.template), this.state.exprAllowed = false;
    }, oa.braceHashL.updateContext = function() {
      this.state.context.push(Ca.recordExpression), this.state.exprAllowed = true;
    };
    let Pa = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC", Da = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF\u1AC0\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F";
    const ka = new RegExp("[" + Pa + "]"), Na = new RegExp("[" + Pa + Da + "]");
    Pa = Da = null;
    const Ia = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938], Fa = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
    function Ma(e4, t3) {
      let r4 = 65536;
      for (let s4 = 0, i4 = t3.length; s4 < i4; s4 += 2) {
        if (r4 += t3[s4], r4 > e4)
          return false;
        if (r4 += t3[s4 + 1], r4 >= e4)
          return true;
      }
      return false;
    }
    function La(e4) {
      return e4 < 65 ? e4 === 36 : e4 <= 90 || (e4 < 97 ? e4 === 95 : e4 <= 122 || (e4 <= 65535 ? e4 >= 170 && ka.test(String.fromCharCode(e4)) : Ma(e4, Ia)));
    }
    function Oa(e4) {
      return e4 < 48 ? e4 === 36 : e4 < 58 || !(e4 < 65) && (e4 <= 90 || (e4 < 97 ? e4 === 95 : e4 <= 122 || (e4 <= 65535 ? e4 >= 170 && Na.test(String.fromCharCode(e4)) : Ma(e4, Ia) || Ma(e4, Fa))));
    }
    const _a2 = {keyword: ["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"], strict: ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"], strictBind: ["eval", "arguments"]}, Ba = new Set(_a2.keyword), Ra = new Set(_a2.strict), ja = new Set(_a2.strictBind);
    function Ua(e4, t3) {
      return t3 && e4 === "await" || e4 === "enum";
    }
    function qa(e4, t3) {
      return Ua(e4, t3) || Ra.has(e4);
    }
    function za(e4) {
      return ja.has(e4);
    }
    function Va(e4, t3) {
      return qa(e4, t3) || za(e4);
    }
    function Ja(e4) {
      return Ba.has(e4);
    }
    const Xa = /^in(stanceof)?$/;
    function Ga(e4, t3) {
      return e4 === 64 && t3 === 64;
    }
    const Ha = 0, Wa = 1, Ka = 2, $a = 4, Ya = 8, Qa = 16, Za = 32, eo = 64, to = 128, ro = 256, so = Wa | Ka | ro, io = 1, no = 2, ao = 4, oo = 8, lo = 16, co = 64, uo = 128, ho = 256, po = 512, fo = 1024, mo = 2048, yo = io | no | oo | uo, go2 = 0 | io | oo | 0, xo = 0 | io | ao | 0, bo = 0 | io | lo | 0, Eo = 0 | no | uo, vo = 0 | no, So = io | no | oo | ho, Ao = 0 | fo, To = 0 | co, wo = 0 | io | co, Co = So | po, Po = 0 | fo, Do = mo, ko = 4, No = 2, Io = 1, Fo = No | Io, Mo = No | ko, Lo = Io | ko, Oo = No, _o = Io, Bo = 0;
    class Ro {
      constructor(e4) {
        this.flags = void 0, this.var = [], this.lexical = [], this.functions = [], this.flags = e4;
      }
    }
    class jo {
      constructor(e4, t3) {
        this.scopeStack = [], this.undefinedExports = new Map(), this.undefinedPrivateNames = new Map(), this.raise = e4, this.inModule = t3;
      }
      get inFunction() {
        return (this.currentVarScope().flags & Ka) > 0;
      }
      get allowSuper() {
        return (this.currentThisScope().flags & Qa) > 0;
      }
      get allowDirectSuper() {
        return (this.currentThisScope().flags & Za) > 0;
      }
      get inClass() {
        return (this.currentThisScope().flags & eo) > 0;
      }
      get inStaticBlock() {
        return (this.currentThisScope().flags & to) > 0;
      }
      get inNonArrowFunction() {
        return (this.currentThisScope().flags & Ka) > 0;
      }
      get treatFunctionsAsVar() {
        return this.treatFunctionsAsVarInScope(this.currentScope());
      }
      createScope(e4) {
        return new Ro(e4);
      }
      enter(e4) {
        this.scopeStack.push(this.createScope(e4));
      }
      exit() {
        this.scopeStack.pop();
      }
      treatFunctionsAsVarInScope(e4) {
        return !!(e4.flags & Ka || !this.inModule && e4.flags & Wa);
      }
      declareName(e4, t3, r4) {
        let s4 = this.currentScope();
        if (t3 & oo || t3 & lo)
          this.checkRedeclarationInScope(s4, e4, t3, r4), t3 & lo ? s4.functions.push(e4) : s4.lexical.push(e4), t3 & oo && this.maybeExportDefined(s4, e4);
        else if (t3 & ao)
          for (let i4 = this.scopeStack.length - 1; i4 >= 0 && (s4 = this.scopeStack[i4], this.checkRedeclarationInScope(s4, e4, t3, r4), s4.var.push(e4), this.maybeExportDefined(s4, e4), !(s4.flags & so)); --i4)
            ;
        this.inModule && s4.flags & Wa && this.undefinedExports.delete(e4);
      }
      maybeExportDefined(e4, t3) {
        this.inModule && e4.flags & Wa && this.undefinedExports.delete(t3);
      }
      checkRedeclarationInScope(e4, t3, r4, s4) {
        this.isRedeclaredInScope(e4, t3, r4) && this.raise(s4, Ea.VarRedeclaration, t3);
      }
      isRedeclaredInScope(e4, t3, r4) {
        return !!(r4 & io) && (r4 & oo ? e4.lexical.indexOf(t3) > -1 || e4.functions.indexOf(t3) > -1 || e4.var.indexOf(t3) > -1 : r4 & lo ? e4.lexical.indexOf(t3) > -1 || !this.treatFunctionsAsVarInScope(e4) && e4.var.indexOf(t3) > -1 : e4.lexical.indexOf(t3) > -1 && !(e4.flags & Ya && e4.lexical[0] === t3) || !this.treatFunctionsAsVarInScope(e4) && e4.functions.indexOf(t3) > -1);
      }
      checkLocalExport(e4) {
        this.scopeStack[0].lexical.indexOf(e4.name) === -1 && this.scopeStack[0].var.indexOf(e4.name) === -1 && this.scopeStack[0].functions.indexOf(e4.name) === -1 && this.undefinedExports.set(e4.name, e4.start);
      }
      currentScope() {
        return this.scopeStack[this.scopeStack.length - 1];
      }
      currentVarScope() {
        for (let e4 = this.scopeStack.length - 1; ; e4--) {
          const t3 = this.scopeStack[e4];
          if (t3.flags & so)
            return t3;
        }
      }
      currentThisScope() {
        for (let e4 = this.scopeStack.length - 1; ; e4--) {
          const t3 = this.scopeStack[e4];
          if ((t3.flags & so || t3.flags & eo) && !(t3.flags & $a))
            return t3;
        }
      }
    }
    class Uo extends Ro {
      constructor() {
        super(...arguments), this.declareFunctions = [];
      }
    }
    class qo extends jo {
      createScope(e4) {
        return new Uo(e4);
      }
      declareName(e4, t3, r4) {
        const s4 = this.currentScope();
        if (t3 & mo)
          return this.checkRedeclarationInScope(s4, e4, t3, r4), this.maybeExportDefined(s4, e4), void s4.declareFunctions.push(e4);
        super.declareName(...arguments);
      }
      isRedeclaredInScope(e4, t3, r4) {
        return !!super.isRedeclaredInScope(...arguments) || !!(r4 & mo) && !e4.declareFunctions.includes(t3) && (e4.lexical.includes(t3) || e4.functions.includes(t3));
      }
      checkLocalExport(e4) {
        this.scopeStack[0].declareFunctions.indexOf(e4.name) === -1 && super.checkLocalExport(e4);
      }
    }
    const zo = new Set(["_", "any", "bool", "boolean", "empty", "extends", "false", "interface", "mixed", "null", "number", "static", "string", "true", "typeof", "void"]), Vo = Sa({AmbiguousConditionalArrow: "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.", AmbiguousDeclareModuleKind: "Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.", AssignReservedType: "Cannot overwrite reserved type %0.", DeclareClassElement: "The `declare` modifier can only appear on class fields.", DeclareClassFieldInitializer: "Initializers are not allowed in fields with the `declare` modifier.", DuplicateDeclareModuleExports: "Duplicate `declare module.exports` statement.", EnumBooleanMemberNotInitialized: "Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.", EnumDuplicateMemberName: "Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.", EnumInconsistentMemberValues: "Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.", EnumInvalidExplicitType: "Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.", EnumInvalidExplicitTypeUnknownSupplied: "Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.", EnumInvalidMemberInitializerPrimaryType: "Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.", EnumInvalidMemberInitializerSymbolType: "Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.", EnumInvalidMemberInitializerUnknownType: "The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.", EnumInvalidMemberName: "Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.", EnumNumberMemberNotInitialized: "Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.", EnumStringMemberInconsistentlyInitailized: "String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.", GetterMayNotHaveThisParam: "A getter cannot have a `this` parameter.", ImportTypeShorthandOnlyInPureImport: "The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.", InexactInsideExact: "Explicit inexact syntax cannot appear inside an explicit exact object type.", InexactInsideNonObject: "Explicit inexact syntax cannot appear in class or interface definitions.", InexactVariance: "Explicit inexact syntax cannot have variance.", InvalidNonTypeImportInDeclareModule: "Imports within a `declare module` body must always be `import type` or `import typeof`.", MissingTypeParamDefault: "Type parameter declaration needs a default, since a preceding type parameter declaration has a default.", NestedDeclareModule: "`declare module` cannot be used inside another `declare module`.", NestedFlowComment: "Cannot have a flow comment inside another flow comment.", OptionalBindingPattern: "A binding pattern parameter cannot be optional in an implementation signature.", SetterMayNotHaveThisParam: "A setter cannot have a `this` parameter.", SpreadVariance: "Spread properties cannot have variance.", ThisParamAnnotationRequired: "A type annotation is required for the `this` parameter.", ThisParamBannedInConstructor: "Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.", ThisParamMayNotBeOptional: "The `this` parameter cannot be optional.", ThisParamMustBeFirst: "The `this` parameter must be the first function parameter.", ThisParamNoDefault: "The `this` parameter may not have a default value.", TypeBeforeInitializer: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.", TypeCastInPattern: "The type cast expression is expected to be wrapped with parenthesis.", UnexpectedExplicitInexactInObject: "Explicit inexact syntax must appear at the end of an inexact object.", UnexpectedReservedType: "Unexpected reserved type %0.", UnexpectedReservedUnderscore: "`_` is only allowed as a type argument to call or new.", UnexpectedSpaceBetweenModuloChecks: "Spaces between `%` and `checks` are not allowed here.", UnexpectedSpreadType: "Spread operator cannot appear in class or interface definitions.", UnexpectedSubtractionOperand: 'Unexpected token, expected "number" or "bigint".', UnexpectedTokenAfterTypeParameter: "Expected an arrow function after this type parameter declaration.", UnexpectedTypeParameterBeforeAsyncArrowFunction: "Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.", UnsupportedDeclareExportKind: "`declare export %0` is not supported. Use `%1` instead.", UnsupportedStatementInDeclareModule: "Only declares and type imports are allowed inside declare module.", UnterminatedFlowComment: "Unterminated flow-comment."}, ba.SyntaxError);
    function Jo(e4) {
      return e4.type === "DeclareExportAllDeclaration" || e4.type === "DeclareExportDeclaration" && (!e4.declaration || e4.declaration.type !== "TypeAlias" && e4.declaration.type !== "InterfaceDeclaration");
    }
    function Xo(e4) {
      return e4.importKind === "type" || e4.importKind === "typeof";
    }
    function Go(e4) {
      return (e4.type === oa.name || !!e4.type.keyword) && e4.value !== "from";
    }
    const Ho = {const: "declare export var", let: "declare export var", type: "export type", interface: "export interface"};
    function Wo(e4, t3) {
      const r4 = [], s4 = [];
      for (let i4 = 0; i4 < e4.length; i4++)
        (t3(e4[i4], i4, e4) ? r4 : s4).push(e4[i4]);
      return [r4, s4];
    }
    const Ko = /\*?\s*@((?:no)?flow)\b/;
    var $o = (e4) => class extends e4 {
      constructor() {
        super(...arguments), this.flowPragma = void 0;
      }
      getScopeHandler() {
        return qo;
      }
      shouldParseTypes() {
        return this.getPluginOption("flow", "all") || this.flowPragma === "flow";
      }
      shouldParseEnums() {
        return !!this.getPluginOption("flow", "enums");
      }
      finishToken(e5, t3) {
        return e5 !== oa.string && e5 !== oa.semi && e5 !== oa.interpreterDirective && this.flowPragma === void 0 && (this.flowPragma = null), super.finishToken(e5, t3);
      }
      addComment(e5) {
        if (this.flowPragma === void 0) {
          const t3 = Ko.exec(e5.value);
          if (t3)
            if (t3[1] === "flow")
              this.flowPragma = "flow";
            else {
              if (t3[1] !== "noflow")
                throw new Error("Unexpected flow pragma");
              this.flowPragma = "noflow";
            }
        }
        return super.addComment(e5);
      }
      flowParseTypeInitialiser(e5) {
        const t3 = this.state.inType;
        this.state.inType = true, this.expect(e5 || oa.colon);
        const r4 = this.flowParseType();
        return this.state.inType = t3, r4;
      }
      flowParsePredicate() {
        const e5 = this.startNode(), t3 = this.state.start;
        return this.next(), this.expectContextual("checks"), this.state.lastTokStart > t3 + 1 && this.raise(t3, Vo.UnexpectedSpaceBetweenModuloChecks), this.eat(oa.parenL) ? (e5.value = this.parseExpression(), this.expect(oa.parenR), this.finishNode(e5, "DeclaredPredicate")) : this.finishNode(e5, "InferredPredicate");
      }
      flowParseTypeAndPredicateInitialiser() {
        const e5 = this.state.inType;
        this.state.inType = true, this.expect(oa.colon);
        let t3 = null, r4 = null;
        return this.match(oa.modulo) ? (this.state.inType = e5, r4 = this.flowParsePredicate()) : (t3 = this.flowParseType(), this.state.inType = e5, this.match(oa.modulo) && (r4 = this.flowParsePredicate())), [t3, r4];
      }
      flowParseDeclareClass(e5) {
        return this.next(), this.flowParseInterfaceish(e5, true), this.finishNode(e5, "DeclareClass");
      }
      flowParseDeclareFunction(e5) {
        this.next();
        const t3 = e5.id = this.parseIdentifier(), r4 = this.startNode(), s4 = this.startNode();
        this.isRelational("<") ? r4.typeParameters = this.flowParseTypeParameterDeclaration() : r4.typeParameters = null, this.expect(oa.parenL);
        const i4 = this.flowParseFunctionTypeParams();
        return r4.params = i4.params, r4.rest = i4.rest, r4.this = i4._this, this.expect(oa.parenR), [r4.returnType, e5.predicate] = this.flowParseTypeAndPredicateInitialiser(), s4.typeAnnotation = this.finishNode(r4, "FunctionTypeAnnotation"), t3.typeAnnotation = this.finishNode(s4, "TypeAnnotation"), this.resetEndLocation(t3), this.semicolon(), this.scope.declareName(e5.id.name, Do, e5.id.start), this.finishNode(e5, "DeclareFunction");
      }
      flowParseDeclare(e5, t3) {
        if (this.match(oa._class))
          return this.flowParseDeclareClass(e5);
        if (this.match(oa._function))
          return this.flowParseDeclareFunction(e5);
        if (this.match(oa._var))
          return this.flowParseDeclareVariable(e5);
        if (this.eatContextual("module"))
          return this.match(oa.dot) ? this.flowParseDeclareModuleExports(e5) : (t3 && this.raise(this.state.lastTokStart, Vo.NestedDeclareModule), this.flowParseDeclareModule(e5));
        if (this.isContextual("type"))
          return this.flowParseDeclareTypeAlias(e5);
        if (this.isContextual("opaque"))
          return this.flowParseDeclareOpaqueType(e5);
        if (this.isContextual("interface"))
          return this.flowParseDeclareInterface(e5);
        if (this.match(oa._export))
          return this.flowParseDeclareExportDeclaration(e5, t3);
        throw this.unexpected();
      }
      flowParseDeclareVariable(e5) {
        return this.next(), e5.id = this.flowParseTypeAnnotatableIdentifier(true), this.scope.declareName(e5.id.name, xo, e5.id.start), this.semicolon(), this.finishNode(e5, "DeclareVariable");
      }
      flowParseDeclareModule(e5) {
        this.scope.enter(Ha), this.match(oa.string) ? e5.id = this.parseExprAtom() : e5.id = this.parseIdentifier();
        const t3 = e5.body = this.startNode(), r4 = t3.body = [];
        for (this.expect(oa.braceL); !this.match(oa.braceR); ) {
          let e6 = this.startNode();
          this.match(oa._import) ? (this.next(), this.isContextual("type") || this.match(oa._typeof) || this.raise(this.state.lastTokStart, Vo.InvalidNonTypeImportInDeclareModule), this.parseImport(e6)) : (this.expectContextual("declare", Vo.UnsupportedStatementInDeclareModule), e6 = this.flowParseDeclare(e6, true)), r4.push(e6);
        }
        this.scope.exit(), this.expect(oa.braceR), this.finishNode(t3, "BlockStatement");
        let s4 = null, i4 = false;
        return r4.forEach((e6) => {
          Jo(e6) ? (s4 === "CommonJS" && this.raise(e6.start, Vo.AmbiguousDeclareModuleKind), s4 = "ES") : e6.type === "DeclareModuleExports" && (i4 && this.raise(e6.start, Vo.DuplicateDeclareModuleExports), s4 === "ES" && this.raise(e6.start, Vo.AmbiguousDeclareModuleKind), s4 = "CommonJS", i4 = true);
        }), e5.kind = s4 || "CommonJS", this.finishNode(e5, "DeclareModule");
      }
      flowParseDeclareExportDeclaration(e5, t3) {
        if (this.expect(oa._export), this.eat(oa._default))
          return this.match(oa._function) || this.match(oa._class) ? e5.declaration = this.flowParseDeclare(this.startNode()) : (e5.declaration = this.flowParseType(), this.semicolon()), e5.default = true, this.finishNode(e5, "DeclareExportDeclaration");
        if (this.match(oa._const) || this.isLet() || (this.isContextual("type") || this.isContextual("interface")) && !t3) {
          const e6 = this.state.value, t4 = Ho[e6];
          throw this.raise(this.state.start, Vo.UnsupportedDeclareExportKind, e6, t4);
        }
        if (this.match(oa._var) || this.match(oa._function) || this.match(oa._class) || this.isContextual("opaque"))
          return e5.declaration = this.flowParseDeclare(this.startNode()), e5.default = false, this.finishNode(e5, "DeclareExportDeclaration");
        if (this.match(oa.star) || this.match(oa.braceL) || this.isContextual("interface") || this.isContextual("type") || this.isContextual("opaque"))
          return (e5 = this.parseExport(e5)).type === "ExportNamedDeclaration" && (e5.type = "ExportDeclaration", e5.default = false, delete e5.exportKind), e5.type = "Declare" + e5.type, e5;
        throw this.unexpected();
      }
      flowParseDeclareModuleExports(e5) {
        return this.next(), this.expectContextual("exports"), e5.typeAnnotation = this.flowParseTypeAnnotation(), this.semicolon(), this.finishNode(e5, "DeclareModuleExports");
      }
      flowParseDeclareTypeAlias(e5) {
        return this.next(), this.flowParseTypeAlias(e5), e5.type = "DeclareTypeAlias", e5;
      }
      flowParseDeclareOpaqueType(e5) {
        return this.next(), this.flowParseOpaqueType(e5, true), e5.type = "DeclareOpaqueType", e5;
      }
      flowParseDeclareInterface(e5) {
        return this.next(), this.flowParseInterfaceish(e5), this.finishNode(e5, "DeclareInterface");
      }
      flowParseInterfaceish(e5, t3) {
        if (t3 === void 0 && (t3 = false), e5.id = this.flowParseRestrictedIdentifier(!t3, true), this.scope.declareName(e5.id.name, t3 ? bo : go2, e5.id.start), this.isRelational("<") ? e5.typeParameters = this.flowParseTypeParameterDeclaration() : e5.typeParameters = null, e5.extends = [], e5.implements = [], e5.mixins = [], this.eat(oa._extends))
          do {
            e5.extends.push(this.flowParseInterfaceExtends());
          } while (!t3 && this.eat(oa.comma));
        if (this.isContextual("mixins")) {
          this.next();
          do {
            e5.mixins.push(this.flowParseInterfaceExtends());
          } while (this.eat(oa.comma));
        }
        if (this.isContextual("implements")) {
          this.next();
          do {
            e5.implements.push(this.flowParseInterfaceExtends());
          } while (this.eat(oa.comma));
        }
        e5.body = this.flowParseObjectType({allowStatic: t3, allowExact: false, allowSpread: false, allowProto: t3, allowInexact: false});
      }
      flowParseInterfaceExtends() {
        const e5 = this.startNode();
        return e5.id = this.flowParseQualifiedTypeIdentifier(), this.isRelational("<") ? e5.typeParameters = this.flowParseTypeParameterInstantiation() : e5.typeParameters = null, this.finishNode(e5, "InterfaceExtends");
      }
      flowParseInterface(e5) {
        return this.flowParseInterfaceish(e5), this.finishNode(e5, "InterfaceDeclaration");
      }
      checkNotUnderscore(e5) {
        e5 === "_" && this.raise(this.state.start, Vo.UnexpectedReservedUnderscore);
      }
      checkReservedType(e5, t3, r4) {
        zo.has(e5) && this.raise(t3, r4 ? Vo.AssignReservedType : Vo.UnexpectedReservedType, e5);
      }
      flowParseRestrictedIdentifier(e5, t3) {
        return this.checkReservedType(this.state.value, this.state.start, t3), this.parseIdentifier(e5);
      }
      flowParseTypeAlias(e5) {
        return e5.id = this.flowParseRestrictedIdentifier(false, true), this.scope.declareName(e5.id.name, go2, e5.id.start), this.isRelational("<") ? e5.typeParameters = this.flowParseTypeParameterDeclaration() : e5.typeParameters = null, e5.right = this.flowParseTypeInitialiser(oa.eq), this.semicolon(), this.finishNode(e5, "TypeAlias");
      }
      flowParseOpaqueType(e5, t3) {
        return this.expectContextual("type"), e5.id = this.flowParseRestrictedIdentifier(true, true), this.scope.declareName(e5.id.name, go2, e5.id.start), this.isRelational("<") ? e5.typeParameters = this.flowParseTypeParameterDeclaration() : e5.typeParameters = null, e5.supertype = null, this.match(oa.colon) && (e5.supertype = this.flowParseTypeInitialiser(oa.colon)), e5.impltype = null, t3 || (e5.impltype = this.flowParseTypeInitialiser(oa.eq)), this.semicolon(), this.finishNode(e5, "OpaqueType");
      }
      flowParseTypeParameter(e5) {
        e5 === void 0 && (e5 = false);
        const t3 = this.state.start, r4 = this.startNode(), s4 = this.flowParseVariance(), i4 = this.flowParseTypeAnnotatableIdentifier();
        return r4.name = i4.name, r4.variance = s4, r4.bound = i4.typeAnnotation, this.match(oa.eq) ? (this.eat(oa.eq), r4.default = this.flowParseType()) : e5 && this.raise(t3, Vo.MissingTypeParamDefault), this.finishNode(r4, "TypeParameter");
      }
      flowParseTypeParameterDeclaration() {
        const e5 = this.state.inType, t3 = this.startNode();
        t3.params = [], this.state.inType = true, this.isRelational("<") || this.match(oa.jsxTagStart) ? this.next() : this.unexpected();
        let r4 = false;
        do {
          const e6 = this.flowParseTypeParameter(r4);
          t3.params.push(e6), e6.default && (r4 = true), this.isRelational(">") || this.expect(oa.comma);
        } while (!this.isRelational(">"));
        return this.expectRelational(">"), this.state.inType = e5, this.finishNode(t3, "TypeParameterDeclaration");
      }
      flowParseTypeParameterInstantiation() {
        const e5 = this.startNode(), t3 = this.state.inType;
        e5.params = [], this.state.inType = true, this.expectRelational("<");
        const r4 = this.state.noAnonFunctionType;
        for (this.state.noAnonFunctionType = false; !this.isRelational(">"); )
          e5.params.push(this.flowParseType()), this.isRelational(">") || this.expect(oa.comma);
        return this.state.noAnonFunctionType = r4, this.expectRelational(">"), this.state.inType = t3, this.finishNode(e5, "TypeParameterInstantiation");
      }
      flowParseTypeParameterInstantiationCallOrNew() {
        const e5 = this.startNode(), t3 = this.state.inType;
        for (e5.params = [], this.state.inType = true, this.expectRelational("<"); !this.isRelational(">"); )
          e5.params.push(this.flowParseTypeOrImplicitInstantiation()), this.isRelational(">") || this.expect(oa.comma);
        return this.expectRelational(">"), this.state.inType = t3, this.finishNode(e5, "TypeParameterInstantiation");
      }
      flowParseInterfaceType() {
        const e5 = this.startNode();
        if (this.expectContextual("interface"), e5.extends = [], this.eat(oa._extends))
          do {
            e5.extends.push(this.flowParseInterfaceExtends());
          } while (this.eat(oa.comma));
        return e5.body = this.flowParseObjectType({allowStatic: false, allowExact: false, allowSpread: false, allowProto: false, allowInexact: false}), this.finishNode(e5, "InterfaceTypeAnnotation");
      }
      flowParseObjectPropertyKey() {
        return this.match(oa.num) || this.match(oa.string) ? this.parseExprAtom() : this.parseIdentifier(true);
      }
      flowParseObjectTypeIndexer(e5, t3, r4) {
        return e5.static = t3, this.lookahead().type === oa.colon ? (e5.id = this.flowParseObjectPropertyKey(), e5.key = this.flowParseTypeInitialiser()) : (e5.id = null, e5.key = this.flowParseType()), this.expect(oa.bracketR), e5.value = this.flowParseTypeInitialiser(), e5.variance = r4, this.finishNode(e5, "ObjectTypeIndexer");
      }
      flowParseObjectTypeInternalSlot(e5, t3) {
        return e5.static = t3, e5.id = this.flowParseObjectPropertyKey(), this.expect(oa.bracketR), this.expect(oa.bracketR), this.isRelational("<") || this.match(oa.parenL) ? (e5.method = true, e5.optional = false, e5.value = this.flowParseObjectTypeMethodish(this.startNodeAt(e5.start, e5.loc.start))) : (e5.method = false, this.eat(oa.question) && (e5.optional = true), e5.value = this.flowParseTypeInitialiser()), this.finishNode(e5, "ObjectTypeInternalSlot");
      }
      flowParseObjectTypeMethodish(e5) {
        for (e5.params = [], e5.rest = null, e5.typeParameters = null, e5.this = null, this.isRelational("<") && (e5.typeParameters = this.flowParseTypeParameterDeclaration()), this.expect(oa.parenL), this.match(oa._this) && (e5.this = this.flowParseFunctionTypeParam(true), e5.this.name = null, this.match(oa.parenR) || this.expect(oa.comma)); !this.match(oa.parenR) && !this.match(oa.ellipsis); )
          e5.params.push(this.flowParseFunctionTypeParam(false)), this.match(oa.parenR) || this.expect(oa.comma);
        return this.eat(oa.ellipsis) && (e5.rest = this.flowParseFunctionTypeParam(false)), this.expect(oa.parenR), e5.returnType = this.flowParseTypeInitialiser(), this.finishNode(e5, "FunctionTypeAnnotation");
      }
      flowParseObjectTypeCallProperty(e5, t3) {
        const r4 = this.startNode();
        return e5.static = t3, e5.value = this.flowParseObjectTypeMethodish(r4), this.finishNode(e5, "ObjectTypeCallProperty");
      }
      flowParseObjectType(e5) {
        let {allowStatic: t3, allowExact: r4, allowSpread: s4, allowProto: i4, allowInexact: n4} = e5;
        const a4 = this.state.inType;
        this.state.inType = true;
        const o4 = this.startNode();
        let l3, c4;
        o4.callProperties = [], o4.properties = [], o4.indexers = [], o4.internalSlots = [];
        let u3 = false;
        for (r4 && this.match(oa.braceBarL) ? (this.expect(oa.braceBarL), l3 = oa.braceBarR, c4 = true) : (this.expect(oa.braceL), l3 = oa.braceR, c4 = false), o4.exact = c4; !this.match(l3); ) {
          let e6 = false, r5 = null, a5 = null;
          const l4 = this.startNode();
          if (i4 && this.isContextual("proto")) {
            const e7 = this.lookahead();
            e7.type !== oa.colon && e7.type !== oa.question && (this.next(), r5 = this.state.start, t3 = false);
          }
          if (t3 && this.isContextual("static")) {
            const t4 = this.lookahead();
            t4.type !== oa.colon && t4.type !== oa.question && (this.next(), e6 = true);
          }
          const h5 = this.flowParseVariance();
          if (this.eat(oa.bracketL))
            r5 != null && this.unexpected(r5), this.eat(oa.bracketL) ? (h5 && this.unexpected(h5.start), o4.internalSlots.push(this.flowParseObjectTypeInternalSlot(l4, e6))) : o4.indexers.push(this.flowParseObjectTypeIndexer(l4, e6, h5));
          else if (this.match(oa.parenL) || this.isRelational("<"))
            r5 != null && this.unexpected(r5), h5 && this.unexpected(h5.start), o4.callProperties.push(this.flowParseObjectTypeCallProperty(l4, e6));
          else {
            let t4 = "init";
            if (this.isContextual("get") || this.isContextual("set")) {
              const e7 = this.lookahead();
              e7.type !== oa.name && e7.type !== oa.string && e7.type !== oa.num || (t4 = this.state.value, this.next());
            }
            const i5 = this.flowParseObjectTypeProperty(l4, e6, r5, h5, t4, s4, n4 != null ? n4 : !c4);
            i5 === null ? (u3 = true, a5 = this.state.lastTokStart) : o4.properties.push(i5);
          }
          this.flowObjectTypeSemicolon(), !a5 || this.match(oa.braceR) || this.match(oa.braceBarR) || this.raise(a5, Vo.UnexpectedExplicitInexactInObject);
        }
        this.expect(l3), s4 && (o4.inexact = u3);
        const h4 = this.finishNode(o4, "ObjectTypeAnnotation");
        return this.state.inType = a4, h4;
      }
      flowParseObjectTypeProperty(e5, t3, r4, s4, i4, n4, a4) {
        if (this.eat(oa.ellipsis))
          return this.match(oa.comma) || this.match(oa.semi) || this.match(oa.braceR) || this.match(oa.braceBarR) ? (n4 ? a4 || this.raise(this.state.lastTokStart, Vo.InexactInsideExact) : this.raise(this.state.lastTokStart, Vo.InexactInsideNonObject), s4 && this.raise(s4.start, Vo.InexactVariance), null) : (n4 || this.raise(this.state.lastTokStart, Vo.UnexpectedSpreadType), r4 != null && this.unexpected(r4), s4 && this.raise(s4.start, Vo.SpreadVariance), e5.argument = this.flowParseType(), this.finishNode(e5, "ObjectTypeSpreadProperty"));
        {
          e5.key = this.flowParseObjectPropertyKey(), e5.static = t3, e5.proto = r4 != null, e5.kind = i4;
          let a5 = false;
          return this.isRelational("<") || this.match(oa.parenL) ? (e5.method = true, r4 != null && this.unexpected(r4), s4 && this.unexpected(s4.start), e5.value = this.flowParseObjectTypeMethodish(this.startNodeAt(e5.start, e5.loc.start)), i4 !== "get" && i4 !== "set" || this.flowCheckGetterSetterParams(e5), !n4 && e5.key.name === "constructor" && e5.value.this && this.raise(e5.value.this.start, Vo.ThisParamBannedInConstructor)) : (i4 !== "init" && this.unexpected(), e5.method = false, this.eat(oa.question) && (a5 = true), e5.value = this.flowParseTypeInitialiser(), e5.variance = s4), e5.optional = a5, this.finishNode(e5, "ObjectTypeProperty");
        }
      }
      flowCheckGetterSetterParams(e5) {
        const t3 = e5.kind === "get" ? 0 : 1, r4 = e5.start, s4 = e5.value.params.length + (e5.value.rest ? 1 : 0);
        e5.value.this && this.raise(e5.value.this.start, e5.kind === "get" ? Vo.GetterMayNotHaveThisParam : Vo.SetterMayNotHaveThisParam), s4 !== t3 && (e5.kind === "get" ? this.raise(r4, Ea.BadGetterArity) : this.raise(r4, Ea.BadSetterArity)), e5.kind === "set" && e5.value.rest && this.raise(r4, Ea.BadSetterRestParameter);
      }
      flowObjectTypeSemicolon() {
        this.eat(oa.semi) || this.eat(oa.comma) || this.match(oa.braceR) || this.match(oa.braceBarR) || this.unexpected();
      }
      flowParseQualifiedTypeIdentifier(e5, t3, r4) {
        e5 = e5 || this.state.start, t3 = t3 || this.state.startLoc;
        let s4 = r4 || this.flowParseRestrictedIdentifier(true);
        for (; this.eat(oa.dot); ) {
          const r5 = this.startNodeAt(e5, t3);
          r5.qualification = s4, r5.id = this.flowParseRestrictedIdentifier(true), s4 = this.finishNode(r5, "QualifiedTypeIdentifier");
        }
        return s4;
      }
      flowParseGenericType(e5, t3, r4) {
        const s4 = this.startNodeAt(e5, t3);
        return s4.typeParameters = null, s4.id = this.flowParseQualifiedTypeIdentifier(e5, t3, r4), this.isRelational("<") && (s4.typeParameters = this.flowParseTypeParameterInstantiation()), this.finishNode(s4, "GenericTypeAnnotation");
      }
      flowParseTypeofType() {
        const e5 = this.startNode();
        return this.expect(oa._typeof), e5.argument = this.flowParsePrimaryType(), this.finishNode(e5, "TypeofTypeAnnotation");
      }
      flowParseTupleType() {
        const e5 = this.startNode();
        for (e5.types = [], this.expect(oa.bracketL); this.state.pos < this.length && !this.match(oa.bracketR) && (e5.types.push(this.flowParseType()), !this.match(oa.bracketR)); )
          this.expect(oa.comma);
        return this.expect(oa.bracketR), this.finishNode(e5, "TupleTypeAnnotation");
      }
      flowParseFunctionTypeParam(e5) {
        let t3 = null, r4 = false, s4 = null;
        const i4 = this.startNode(), n4 = this.lookahead(), a4 = this.state.type === oa._this;
        return n4.type === oa.colon || n4.type === oa.question ? (a4 && !e5 && this.raise(i4.start, Vo.ThisParamMustBeFirst), t3 = this.parseIdentifier(a4), this.eat(oa.question) && (r4 = true, a4 && this.raise(i4.start, Vo.ThisParamMayNotBeOptional)), s4 = this.flowParseTypeInitialiser()) : s4 = this.flowParseType(), i4.name = t3, i4.optional = r4, i4.typeAnnotation = s4, this.finishNode(i4, "FunctionTypeParam");
      }
      reinterpretTypeAsFunctionTypeParam(e5) {
        const t3 = this.startNodeAt(e5.start, e5.loc.start);
        return t3.name = null, t3.optional = false, t3.typeAnnotation = e5, this.finishNode(t3, "FunctionTypeParam");
      }
      flowParseFunctionTypeParams(e5) {
        e5 === void 0 && (e5 = []);
        let t3 = null, r4 = null;
        for (this.match(oa._this) && (r4 = this.flowParseFunctionTypeParam(true), r4.name = null, this.match(oa.parenR) || this.expect(oa.comma)); !this.match(oa.parenR) && !this.match(oa.ellipsis); )
          e5.push(this.flowParseFunctionTypeParam(false)), this.match(oa.parenR) || this.expect(oa.comma);
        return this.eat(oa.ellipsis) && (t3 = this.flowParseFunctionTypeParam(false)), {params: e5, rest: t3, _this: r4};
      }
      flowIdentToTypeAnnotation(e5, t3, r4, s4) {
        switch (s4.name) {
          case "any":
            return this.finishNode(r4, "AnyTypeAnnotation");
          case "bool":
          case "boolean":
            return this.finishNode(r4, "BooleanTypeAnnotation");
          case "mixed":
            return this.finishNode(r4, "MixedTypeAnnotation");
          case "empty":
            return this.finishNode(r4, "EmptyTypeAnnotation");
          case "number":
            return this.finishNode(r4, "NumberTypeAnnotation");
          case "string":
            return this.finishNode(r4, "StringTypeAnnotation");
          case "symbol":
            return this.finishNode(r4, "SymbolTypeAnnotation");
          default:
            return this.checkNotUnderscore(s4.name), this.flowParseGenericType(e5, t3, s4);
        }
      }
      flowParsePrimaryType() {
        const e5 = this.state.start, t3 = this.state.startLoc, r4 = this.startNode();
        let s4, i4, n4 = false;
        const a4 = this.state.noAnonFunctionType;
        switch (this.state.type) {
          case oa.name:
            return this.isContextual("interface") ? this.flowParseInterfaceType() : this.flowIdentToTypeAnnotation(e5, t3, r4, this.parseIdentifier());
          case oa.braceL:
            return this.flowParseObjectType({allowStatic: false, allowExact: false, allowSpread: true, allowProto: false, allowInexact: true});
          case oa.braceBarL:
            return this.flowParseObjectType({allowStatic: false, allowExact: true, allowSpread: true, allowProto: false, allowInexact: false});
          case oa.bracketL:
            return this.state.noAnonFunctionType = false, i4 = this.flowParseTupleType(), this.state.noAnonFunctionType = a4, i4;
          case oa.relational:
            if (this.state.value === "<")
              return r4.typeParameters = this.flowParseTypeParameterDeclaration(), this.expect(oa.parenL), s4 = this.flowParseFunctionTypeParams(), r4.params = s4.params, r4.rest = s4.rest, r4.this = s4._this, this.expect(oa.parenR), this.expect(oa.arrow), r4.returnType = this.flowParseType(), this.finishNode(r4, "FunctionTypeAnnotation");
            break;
          case oa.parenL:
            if (this.next(), !this.match(oa.parenR) && !this.match(oa.ellipsis))
              if (this.match(oa.name) || this.match(oa._this)) {
                const e6 = this.lookahead().type;
                n4 = e6 !== oa.question && e6 !== oa.colon;
              } else
                n4 = true;
            if (n4) {
              if (this.state.noAnonFunctionType = false, i4 = this.flowParseType(), this.state.noAnonFunctionType = a4, this.state.noAnonFunctionType || !(this.match(oa.comma) || this.match(oa.parenR) && this.lookahead().type === oa.arrow))
                return this.expect(oa.parenR), i4;
              this.eat(oa.comma);
            }
            return s4 = i4 ? this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(i4)]) : this.flowParseFunctionTypeParams(), r4.params = s4.params, r4.rest = s4.rest, r4.this = s4._this, this.expect(oa.parenR), this.expect(oa.arrow), r4.returnType = this.flowParseType(), r4.typeParameters = null, this.finishNode(r4, "FunctionTypeAnnotation");
          case oa.string:
            return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");
          case oa._true:
          case oa._false:
            return r4.value = this.match(oa._true), this.next(), this.finishNode(r4, "BooleanLiteralTypeAnnotation");
          case oa.plusMin:
            if (this.state.value === "-") {
              if (this.next(), this.match(oa.num))
                return this.parseLiteral(-this.state.value, "NumberLiteralTypeAnnotation", r4.start, r4.loc.start);
              if (this.match(oa.bigint))
                return this.parseLiteral(-this.state.value, "BigIntLiteralTypeAnnotation", r4.start, r4.loc.start);
              throw this.raise(this.state.start, Vo.UnexpectedSubtractionOperand);
            }
            throw this.unexpected();
          case oa.num:
            return this.parseLiteral(this.state.value, "NumberLiteralTypeAnnotation");
          case oa.bigint:
            return this.parseLiteral(this.state.value, "BigIntLiteralTypeAnnotation");
          case oa._void:
            return this.next(), this.finishNode(r4, "VoidTypeAnnotation");
          case oa._null:
            return this.next(), this.finishNode(r4, "NullLiteralTypeAnnotation");
          case oa._this:
            return this.next(), this.finishNode(r4, "ThisTypeAnnotation");
          case oa.star:
            return this.next(), this.finishNode(r4, "ExistsTypeAnnotation");
          default:
            if (this.state.type.keyword === "typeof")
              return this.flowParseTypeofType();
            if (this.state.type.keyword) {
              const e6 = this.state.type.label;
              return this.next(), super.createIdentifier(r4, e6);
            }
        }
        throw this.unexpected();
      }
      flowParsePostfixType() {
        const e5 = this.state.start, t3 = this.state.startLoc;
        let r4 = this.flowParsePrimaryType(), s4 = false;
        for (; (this.match(oa.bracketL) || this.match(oa.questionDot)) && !this.canInsertSemicolon(); ) {
          const i4 = this.startNodeAt(e5, t3), n4 = this.eat(oa.questionDot);
          s4 = s4 || n4, this.expect(oa.bracketL), !n4 && this.match(oa.bracketR) ? (i4.elementType = r4, this.next(), r4 = this.finishNode(i4, "ArrayTypeAnnotation")) : (i4.objectType = r4, i4.indexType = this.flowParseType(), this.expect(oa.bracketR), s4 ? (i4.optional = n4, r4 = this.finishNode(i4, "OptionalIndexedAccessType")) : r4 = this.finishNode(i4, "IndexedAccessType"));
        }
        return r4;
      }
      flowParsePrefixType() {
        const e5 = this.startNode();
        return this.eat(oa.question) ? (e5.typeAnnotation = this.flowParsePrefixType(), this.finishNode(e5, "NullableTypeAnnotation")) : this.flowParsePostfixType();
      }
      flowParseAnonFunctionWithoutParens() {
        const e5 = this.flowParsePrefixType();
        if (!this.state.noAnonFunctionType && this.eat(oa.arrow)) {
          const t3 = this.startNodeAt(e5.start, e5.loc.start);
          return t3.params = [this.reinterpretTypeAsFunctionTypeParam(e5)], t3.rest = null, t3.this = null, t3.returnType = this.flowParseType(), t3.typeParameters = null, this.finishNode(t3, "FunctionTypeAnnotation");
        }
        return e5;
      }
      flowParseIntersectionType() {
        const e5 = this.startNode();
        this.eat(oa.bitwiseAND);
        const t3 = this.flowParseAnonFunctionWithoutParens();
        for (e5.types = [t3]; this.eat(oa.bitwiseAND); )
          e5.types.push(this.flowParseAnonFunctionWithoutParens());
        return e5.types.length === 1 ? t3 : this.finishNode(e5, "IntersectionTypeAnnotation");
      }
      flowParseUnionType() {
        const e5 = this.startNode();
        this.eat(oa.bitwiseOR);
        const t3 = this.flowParseIntersectionType();
        for (e5.types = [t3]; this.eat(oa.bitwiseOR); )
          e5.types.push(this.flowParseIntersectionType());
        return e5.types.length === 1 ? t3 : this.finishNode(e5, "UnionTypeAnnotation");
      }
      flowParseType() {
        const e5 = this.state.inType;
        this.state.inType = true;
        const t3 = this.flowParseUnionType();
        return this.state.inType = e5, this.state.exprAllowed = this.state.exprAllowed || this.state.noAnonFunctionType, t3;
      }
      flowParseTypeOrImplicitInstantiation() {
        if (this.state.type === oa.name && this.state.value === "_") {
          const e5 = this.state.start, t3 = this.state.startLoc, r4 = this.parseIdentifier();
          return this.flowParseGenericType(e5, t3, r4);
        }
        return this.flowParseType();
      }
      flowParseTypeAnnotation() {
        const e5 = this.startNode();
        return e5.typeAnnotation = this.flowParseTypeInitialiser(), this.finishNode(e5, "TypeAnnotation");
      }
      flowParseTypeAnnotatableIdentifier(e5) {
        const t3 = e5 ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();
        return this.match(oa.colon) && (t3.typeAnnotation = this.flowParseTypeAnnotation(), this.resetEndLocation(t3)), t3;
      }
      typeCastToParameter(e5) {
        return e5.expression.typeAnnotation = e5.typeAnnotation, this.resetEndLocation(e5.expression, e5.typeAnnotation.end, e5.typeAnnotation.loc.end), e5.expression;
      }
      flowParseVariance() {
        let e5 = null;
        return this.match(oa.plusMin) && (e5 = this.startNode(), this.state.value === "+" ? e5.kind = "plus" : e5.kind = "minus", this.next(), this.finishNode(e5, "Variance")), e5;
      }
      parseFunctionBody(e5, t3, r4) {
        return r4 === void 0 && (r4 = false), t3 ? this.forwardNoArrowParamsConversionAt(e5, () => super.parseFunctionBody(e5, true, r4)) : super.parseFunctionBody(e5, false, r4);
      }
      parseFunctionBodyAndFinish(e5, t3, r4) {
        if (r4 === void 0 && (r4 = false), this.match(oa.colon)) {
          const t4 = this.startNode();
          [t4.typeAnnotation, e5.predicate] = this.flowParseTypeAndPredicateInitialiser(), e5.returnType = t4.typeAnnotation ? this.finishNode(t4, "TypeAnnotation") : null;
        }
        super.parseFunctionBodyAndFinish(e5, t3, r4);
      }
      parseStatement(e5, t3) {
        if (this.state.strict && this.match(oa.name) && this.state.value === "interface") {
          const e6 = this.lookahead();
          if (e6.type === oa.name || Ja(e6.value)) {
            const e7 = this.startNode();
            return this.next(), this.flowParseInterface(e7);
          }
        } else if (this.shouldParseEnums() && this.isContextual("enum")) {
          const e6 = this.startNode();
          return this.next(), this.flowParseEnumDeclaration(e6);
        }
        const r4 = super.parseStatement(e5, t3);
        return this.flowPragma !== void 0 || this.isValidDirective(r4) || (this.flowPragma = null), r4;
      }
      parseExpressionStatement(e5, t3) {
        if (t3.type === "Identifier") {
          if (t3.name === "declare") {
            if (this.match(oa._class) || this.match(oa.name) || this.match(oa._function) || this.match(oa._var) || this.match(oa._export))
              return this.flowParseDeclare(e5);
          } else if (this.match(oa.name)) {
            if (t3.name === "interface")
              return this.flowParseInterface(e5);
            if (t3.name === "type")
              return this.flowParseTypeAlias(e5);
            if (t3.name === "opaque")
              return this.flowParseOpaqueType(e5, false);
          }
        }
        return super.parseExpressionStatement(e5, t3);
      }
      shouldParseExportDeclaration() {
        return this.isContextual("type") || this.isContextual("interface") || this.isContextual("opaque") || this.shouldParseEnums() && this.isContextual("enum") || super.shouldParseExportDeclaration();
      }
      isExportDefaultSpecifier() {
        return (!this.match(oa.name) || !(this.state.value === "type" || this.state.value === "interface" || this.state.value === "opaque" || this.shouldParseEnums() && this.state.value === "enum")) && super.isExportDefaultSpecifier();
      }
      parseExportDefaultExpression() {
        if (this.shouldParseEnums() && this.isContextual("enum")) {
          const e5 = this.startNode();
          return this.next(), this.flowParseEnumDeclaration(e5);
        }
        return super.parseExportDefaultExpression();
      }
      parseConditional(e5, t3, r4, s4) {
        if (!this.match(oa.question))
          return e5;
        if (s4) {
          const i5 = this.tryParse(() => super.parseConditional(e5, t3, r4));
          return i5.node ? (i5.error && (this.state = i5.failState), i5.node) : (s4.start = i5.error.pos || this.state.start, e5);
        }
        this.expect(oa.question);
        const i4 = this.state.clone(), n4 = this.state.noArrowAt, a4 = this.startNodeAt(t3, r4);
        let {consequent: o4, failed: l3} = this.tryParseConditionalConsequent(), [c4, u3] = this.getArrowLikeExpressions(o4);
        if (l3 || u3.length > 0) {
          const e6 = [...n4];
          if (u3.length > 0) {
            this.state = i4, this.state.noArrowAt = e6;
            for (let t4 = 0; t4 < u3.length; t4++)
              e6.push(u3[t4].start);
            ({consequent: o4, failed: l3} = this.tryParseConditionalConsequent()), [c4, u3] = this.getArrowLikeExpressions(o4);
          }
          l3 && c4.length > 1 && this.raise(i4.start, Vo.AmbiguousConditionalArrow), l3 && c4.length === 1 && (this.state = i4, this.state.noArrowAt = e6.concat(c4[0].start), {consequent: o4, failed: l3} = this.tryParseConditionalConsequent());
        }
        return this.getArrowLikeExpressions(o4, true), this.state.noArrowAt = n4, this.expect(oa.colon), a4.test = e5, a4.consequent = o4, a4.alternate = this.forwardNoArrowParamsConversionAt(a4, () => this.parseMaybeAssign(void 0, void 0, void 0)), this.finishNode(a4, "ConditionalExpression");
      }
      tryParseConditionalConsequent() {
        this.state.noArrowParamsConversionAt.push(this.state.start);
        const e5 = this.parseMaybeAssignAllowIn(), t3 = !this.match(oa.colon);
        return this.state.noArrowParamsConversionAt.pop(), {consequent: e5, failed: t3};
      }
      getArrowLikeExpressions(e5, t3) {
        const r4 = [e5], s4 = [];
        for (; r4.length !== 0; ) {
          const e6 = r4.pop();
          e6.type === "ArrowFunctionExpression" ? (e6.typeParameters || !e6.returnType ? this.finishArrowValidation(e6) : s4.push(e6), r4.push(e6.body)) : e6.type === "ConditionalExpression" && (r4.push(e6.consequent), r4.push(e6.alternate));
        }
        return t3 ? (s4.forEach((e6) => this.finishArrowValidation(e6)), [s4, []]) : Wo(s4, (e6) => e6.params.every((e7) => this.isAssignable(e7, true)));
      }
      finishArrowValidation(e5) {
        var t3;
        this.toAssignableList(e5.params, (t3 = e5.extra) == null ? void 0 : t3.trailingComma, false), this.scope.enter(Ka | $a), super.checkParams(e5, false, true), this.scope.exit();
      }
      forwardNoArrowParamsConversionAt(e5, t3) {
        let r4;
        return this.state.noArrowParamsConversionAt.indexOf(e5.start) !== -1 ? (this.state.noArrowParamsConversionAt.push(this.state.start), r4 = t3(), this.state.noArrowParamsConversionAt.pop()) : r4 = t3(), r4;
      }
      parseParenItem(e5, t3, r4) {
        if (e5 = super.parseParenItem(e5, t3, r4), this.eat(oa.question) && (e5.optional = true, this.resetEndLocation(e5)), this.match(oa.colon)) {
          const s4 = this.startNodeAt(t3, r4);
          return s4.expression = e5, s4.typeAnnotation = this.flowParseTypeAnnotation(), this.finishNode(s4, "TypeCastExpression");
        }
        return e5;
      }
      assertModuleNodeAllowed(e5) {
        e5.type === "ImportDeclaration" && (e5.importKind === "type" || e5.importKind === "typeof") || e5.type === "ExportNamedDeclaration" && e5.exportKind === "type" || e5.type === "ExportAllDeclaration" && e5.exportKind === "type" || super.assertModuleNodeAllowed(e5);
      }
      parseExport(e5) {
        const t3 = super.parseExport(e5);
        return t3.type !== "ExportNamedDeclaration" && t3.type !== "ExportAllDeclaration" || (t3.exportKind = t3.exportKind || "value"), t3;
      }
      parseExportDeclaration(e5) {
        if (this.isContextual("type")) {
          e5.exportKind = "type";
          const t3 = this.startNode();
          return this.next(), this.match(oa.braceL) ? (e5.specifiers = this.parseExportSpecifiers(), this.parseExportFrom(e5), null) : this.flowParseTypeAlias(t3);
        }
        if (this.isContextual("opaque")) {
          e5.exportKind = "type";
          const t3 = this.startNode();
          return this.next(), this.flowParseOpaqueType(t3, false);
        }
        if (this.isContextual("interface")) {
          e5.exportKind = "type";
          const t3 = this.startNode();
          return this.next(), this.flowParseInterface(t3);
        }
        if (this.shouldParseEnums() && this.isContextual("enum")) {
          e5.exportKind = "value";
          const t3 = this.startNode();
          return this.next(), this.flowParseEnumDeclaration(t3);
        }
        return super.parseExportDeclaration(e5);
      }
      eatExportStar(e5) {
        return !!super.eatExportStar(...arguments) || !(!this.isContextual("type") || this.lookahead().type !== oa.star) && (e5.exportKind = "type", this.next(), this.next(), true);
      }
      maybeParseExportNamespaceSpecifier(e5) {
        const t3 = this.state.start, r4 = super.maybeParseExportNamespaceSpecifier(e5);
        return r4 && e5.exportKind === "type" && this.unexpected(t3), r4;
      }
      parseClassId(e5, t3, r4) {
        super.parseClassId(e5, t3, r4), this.isRelational("<") && (e5.typeParameters = this.flowParseTypeParameterDeclaration());
      }
      parseClassMember(e5, t3, r4) {
        const s4 = this.state.start;
        if (this.isContextual("declare")) {
          if (this.parseClassMemberFromModifier(e5, t3))
            return;
          t3.declare = true;
        }
        super.parseClassMember(e5, t3, r4), t3.declare && (t3.type !== "ClassProperty" && t3.type !== "ClassPrivateProperty" && t3.type !== "PropertyDefinition" ? this.raise(s4, Vo.DeclareClassElement) : t3.value && this.raise(t3.value.start, Vo.DeclareClassFieldInitializer));
      }
      getTokenFromCode(e5) {
        const t3 = this.input.charCodeAt(this.state.pos + 1);
        return e5 === 123 && t3 === 124 ? this.finishOp(oa.braceBarL, 2) : !this.state.inType || e5 !== 62 && e5 !== 60 ? this.state.inType && e5 === 63 ? t3 === 46 ? this.finishOp(oa.questionDot, 2) : this.finishOp(oa.question, 1) : Ga(e5, t3) ? (this.state.isIterator = true, super.readWord()) : super.getTokenFromCode(e5) : this.finishOp(oa.relational, 1);
      }
      isAssignable(e5, t3) {
        switch (e5.type) {
          case "Identifier":
          case "ObjectPattern":
          case "ArrayPattern":
          case "AssignmentPattern":
            return true;
          case "ObjectExpression": {
            const t4 = e5.properties.length - 1;
            return e5.properties.every((e6, r4) => e6.type !== "ObjectMethod" && (r4 === t4 || e6.type === "SpreadElement") && this.isAssignable(e6));
          }
          case "ObjectProperty":
            return this.isAssignable(e5.value);
          case "SpreadElement":
            return this.isAssignable(e5.argument);
          case "ArrayExpression":
            return e5.elements.every((e6) => this.isAssignable(e6));
          case "AssignmentExpression":
            return e5.operator === "=";
          case "ParenthesizedExpression":
          case "TypeCastExpression":
            return this.isAssignable(e5.expression);
          case "MemberExpression":
          case "OptionalMemberExpression":
            return !t3;
          default:
            return false;
        }
      }
      toAssignable(e5, t3) {
        return t3 === void 0 && (t3 = false), e5.type === "TypeCastExpression" ? super.toAssignable(this.typeCastToParameter(e5), t3) : super.toAssignable(e5, t3);
      }
      toAssignableList(e5, t3, r4) {
        for (let s4 = 0; s4 < e5.length; s4++) {
          const t4 = e5[s4];
          (t4 == null ? void 0 : t4.type) === "TypeCastExpression" && (e5[s4] = this.typeCastToParameter(t4));
        }
        return super.toAssignableList(e5, t3, r4);
      }
      toReferencedList(e5, t3) {
        for (let s4 = 0; s4 < e5.length; s4++) {
          var r4;
          const i4 = e5[s4];
          !i4 || i4.type !== "TypeCastExpression" || (r4 = i4.extra) != null && r4.parenthesized || !(e5.length > 1) && t3 || this.raise(i4.typeAnnotation.start, Vo.TypeCastInPattern);
        }
        return e5;
      }
      parseArrayLike(e5, t3, r4, s4) {
        const i4 = super.parseArrayLike(e5, t3, r4, s4);
        return t3 && !this.state.maybeInArrowParameters && this.toReferencedList(i4.elements), i4;
      }
      checkLVal(e5) {
        if (e5.type !== "TypeCastExpression") {
          for (var t3 = arguments.length, r4 = new Array(t3 > 1 ? t3 - 1 : 0), s4 = 1; s4 < t3; s4++)
            r4[s4 - 1] = arguments[s4];
          return super.checkLVal(e5, ...r4);
        }
      }
      parseClassProperty(e5) {
        return this.match(oa.colon) && (e5.typeAnnotation = this.flowParseTypeAnnotation()), super.parseClassProperty(e5);
      }
      parseClassPrivateProperty(e5) {
        return this.match(oa.colon) && (e5.typeAnnotation = this.flowParseTypeAnnotation()), super.parseClassPrivateProperty(e5);
      }
      isClassMethod() {
        return this.isRelational("<") || super.isClassMethod();
      }
      isClassProperty() {
        return this.match(oa.colon) || super.isClassProperty();
      }
      isNonstaticConstructor(e5) {
        return !this.match(oa.colon) && super.isNonstaticConstructor(e5);
      }
      pushClassMethod(e5, t3, r4, s4, i4, n4) {
        if (t3.variance && this.unexpected(t3.variance.start), delete t3.variance, this.isRelational("<") && (t3.typeParameters = this.flowParseTypeParameterDeclaration()), super.pushClassMethod(e5, t3, r4, s4, i4, n4), t3.params && i4) {
          const e6 = t3.params;
          e6.length > 0 && this.isThisParam(e6[0]) && this.raise(t3.start, Vo.ThisParamBannedInConstructor);
        } else if (t3.type === "MethodDefinition" && i4 && t3.value.params) {
          const e6 = t3.value.params;
          e6.length > 0 && this.isThisParam(e6[0]) && this.raise(t3.start, Vo.ThisParamBannedInConstructor);
        }
      }
      pushClassPrivateMethod(e5, t3, r4, s4) {
        t3.variance && this.unexpected(t3.variance.start), delete t3.variance, this.isRelational("<") && (t3.typeParameters = this.flowParseTypeParameterDeclaration()), super.pushClassPrivateMethod(e5, t3, r4, s4);
      }
      parseClassSuper(e5) {
        if (super.parseClassSuper(e5), e5.superClass && this.isRelational("<") && (e5.superTypeParameters = this.flowParseTypeParameterInstantiation()), this.isContextual("implements")) {
          this.next();
          const t3 = e5.implements = [];
          do {
            const e6 = this.startNode();
            e6.id = this.flowParseRestrictedIdentifier(true), this.isRelational("<") ? e6.typeParameters = this.flowParseTypeParameterInstantiation() : e6.typeParameters = null, t3.push(this.finishNode(e6, "ClassImplements"));
          } while (this.eat(oa.comma));
        }
      }
      checkGetterSetterParams(e5) {
        super.checkGetterSetterParams(e5);
        const t3 = this.getObjectOrClassMethodParams(e5);
        if (t3.length > 0) {
          const r4 = t3[0];
          this.isThisParam(r4) && e5.kind === "get" ? this.raise(r4.start, Vo.GetterMayNotHaveThisParam) : this.isThisParam(r4) && this.raise(r4.start, Vo.SetterMayNotHaveThisParam);
        }
      }
      parsePropertyName(e5, t3) {
        const r4 = this.flowParseVariance(), s4 = super.parsePropertyName(e5, t3);
        return e5.variance = r4, s4;
      }
      parseObjPropValue(e5, t3, r4, s4, i4, n4, a4, o4) {
        let l3;
        e5.variance && this.unexpected(e5.variance.start), delete e5.variance, this.isRelational("<") && !a4 && (l3 = this.flowParseTypeParameterDeclaration(), this.match(oa.parenL) || this.unexpected()), super.parseObjPropValue(e5, t3, r4, s4, i4, n4, a4, o4), l3 && ((e5.value || e5).typeParameters = l3);
      }
      parseAssignableListItemTypes(e5) {
        return this.eat(oa.question) && (e5.type !== "Identifier" && this.raise(e5.start, Vo.OptionalBindingPattern), this.isThisParam(e5) && this.raise(e5.start, Vo.ThisParamMayNotBeOptional), e5.optional = true), this.match(oa.colon) ? e5.typeAnnotation = this.flowParseTypeAnnotation() : this.isThisParam(e5) && this.raise(e5.start, Vo.ThisParamAnnotationRequired), this.match(oa.eq) && this.isThisParam(e5) && this.raise(e5.start, Vo.ThisParamNoDefault), this.resetEndLocation(e5), e5;
      }
      parseMaybeDefault(e5, t3, r4) {
        const s4 = super.parseMaybeDefault(e5, t3, r4);
        return s4.type === "AssignmentPattern" && s4.typeAnnotation && s4.right.start < s4.typeAnnotation.start && this.raise(s4.typeAnnotation.start, Vo.TypeBeforeInitializer), s4;
      }
      shouldParseDefaultImport(e5) {
        return Xo(e5) ? Go(this.state) : super.shouldParseDefaultImport(e5);
      }
      parseImportSpecifierLocal(e5, t3, r4, s4) {
        t3.local = Xo(e5) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier(), this.checkLVal(t3.local, s4, go2), e5.specifiers.push(this.finishNode(t3, r4));
      }
      maybeParseDefaultImportSpecifier(e5) {
        e5.importKind = "value";
        let t3 = null;
        if (this.match(oa._typeof) ? t3 = "typeof" : this.isContextual("type") && (t3 = "type"), t3) {
          const r4 = this.lookahead();
          t3 === "type" && r4.type === oa.star && this.unexpected(r4.start), (Go(r4) || r4.type === oa.braceL || r4.type === oa.star) && (this.next(), e5.importKind = t3);
        }
        return super.maybeParseDefaultImportSpecifier(e5);
      }
      parseImportSpecifier(e5) {
        const t3 = this.startNode(), r4 = this.state.start, s4 = this.parseModuleExportName();
        let i4 = null;
        s4.type === "Identifier" && (s4.name === "type" ? i4 = "type" : s4.name === "typeof" && (i4 = "typeof"));
        let n4 = false;
        if (this.isContextual("as") && !this.isLookaheadContextual("as")) {
          const e6 = this.parseIdentifier(true);
          i4 === null || this.match(oa.name) || this.state.type.keyword ? (t3.imported = s4, t3.importKind = null, t3.local = this.parseIdentifier()) : (t3.imported = e6, t3.importKind = i4, t3.local = e6.__clone());
        } else if (i4 !== null && (this.match(oa.name) || this.state.type.keyword))
          t3.imported = this.parseIdentifier(true), t3.importKind = i4, this.eatContextual("as") ? t3.local = this.parseIdentifier() : (n4 = true, t3.local = t3.imported.__clone());
        else {
          if (s4.type === "StringLiteral")
            throw this.raise(t3.start, Ea.ImportBindingIsString, s4.value);
          n4 = true, t3.imported = s4, t3.importKind = null, t3.local = t3.imported.__clone();
        }
        const a4 = Xo(e5), o4 = Xo(t3);
        a4 && o4 && this.raise(r4, Vo.ImportTypeShorthandOnlyInPureImport), (a4 || o4) && this.checkReservedType(t3.local.name, t3.local.start, true), !n4 || a4 || o4 || this.checkReservedWord(t3.local.name, t3.start, true, true), this.checkLVal(t3.local, "import specifier", go2), e5.specifiers.push(this.finishNode(t3, "ImportSpecifier"));
      }
      parseBindingAtom() {
        switch (this.state.type) {
          case oa._this:
            return this.parseIdentifier(true);
          default:
            return super.parseBindingAtom();
        }
      }
      parseFunctionParams(e5, t3) {
        const r4 = e5.kind;
        r4 !== "get" && r4 !== "set" && this.isRelational("<") && (e5.typeParameters = this.flowParseTypeParameterDeclaration()), super.parseFunctionParams(e5, t3);
      }
      parseVarId(e5, t3) {
        super.parseVarId(e5, t3), this.match(oa.colon) && (e5.id.typeAnnotation = this.flowParseTypeAnnotation(), this.resetEndLocation(e5.id));
      }
      parseAsyncArrowFromCallExpression(e5, t3) {
        if (this.match(oa.colon)) {
          const t4 = this.state.noAnonFunctionType;
          this.state.noAnonFunctionType = true, e5.returnType = this.flowParseTypeAnnotation(), this.state.noAnonFunctionType = t4;
        }
        return super.parseAsyncArrowFromCallExpression(e5, t3);
      }
      shouldParseAsyncArrow() {
        return this.match(oa.colon) || super.shouldParseAsyncArrow();
      }
      parseMaybeAssign(e5, t3, r4) {
        var s4;
        let i4, n4 = null;
        if (this.hasPlugin("jsx") && (this.match(oa.jsxTagStart) || this.isRelational("<"))) {
          if (n4 = this.state.clone(), i4 = this.tryParse(() => super.parseMaybeAssign(e5, t3, r4), n4), !i4.error)
            return i4.node;
          const {context: s5} = this.state;
          s5[s5.length - 1] === Ca.j_oTag ? s5.length -= 2 : s5[s5.length - 1] === Ca.j_expr && (s5.length -= 1);
        }
        if ((s4 = i4) != null && s4.error || this.isRelational("<")) {
          var a4, o4;
          let s5;
          n4 = n4 || this.state.clone();
          const l3 = this.tryParse((i5) => {
            var n5;
            s5 = this.flowParseTypeParameterDeclaration();
            const a5 = this.forwardNoArrowParamsConversionAt(s5, () => {
              const i6 = super.parseMaybeAssign(e5, t3, r4);
              return this.resetStartLocationFromNode(i6, s5), i6;
            });
            a5.type !== "ArrowFunctionExpression" && (n5 = a5.extra) != null && n5.parenthesized && i5();
            const o5 = this.maybeUnwrapTypeCastExpression(a5);
            return o5.typeParameters = s5, this.resetStartLocationFromNode(o5, s5), a5;
          }, n4);
          let c4 = null;
          if (l3.node && this.maybeUnwrapTypeCastExpression(l3.node).type === "ArrowFunctionExpression") {
            if (!l3.error && !l3.aborted)
              return l3.node.async && this.raise(s5.start, Vo.UnexpectedTypeParameterBeforeAsyncArrowFunction), l3.node;
            c4 = l3.node;
          }
          if ((a4 = i4) != null && a4.node)
            return this.state = i4.failState, i4.node;
          if (c4)
            return this.state = l3.failState, c4;
          if ((o4 = i4) != null && o4.thrown)
            throw i4.error;
          if (l3.thrown)
            throw l3.error;
          throw this.raise(s5.start, Vo.UnexpectedTokenAfterTypeParameter);
        }
        return super.parseMaybeAssign(e5, t3, r4);
      }
      parseArrow(e5) {
        if (this.match(oa.colon)) {
          const t3 = this.tryParse(() => {
            const t4 = this.state.noAnonFunctionType;
            this.state.noAnonFunctionType = true;
            const r4 = this.startNode();
            return [r4.typeAnnotation, e5.predicate] = this.flowParseTypeAndPredicateInitialiser(), this.state.noAnonFunctionType = t4, this.canInsertSemicolon() && this.unexpected(), this.match(oa.arrow) || this.unexpected(), r4;
          });
          if (t3.thrown)
            return null;
          t3.error && (this.state = t3.failState), e5.returnType = t3.node.typeAnnotation ? this.finishNode(t3.node, "TypeAnnotation") : null;
        }
        return super.parseArrow(e5);
      }
      shouldParseArrow() {
        return this.match(oa.colon) || super.shouldParseArrow();
      }
      setArrowFunctionParameters(e5, t3) {
        this.state.noArrowParamsConversionAt.indexOf(e5.start) !== -1 ? e5.params = t3 : super.setArrowFunctionParameters(e5, t3);
      }
      checkParams(e5, t3, r4) {
        if (!r4 || this.state.noArrowParamsConversionAt.indexOf(e5.start) === -1) {
          for (let t4 = 0; t4 < e5.params.length; t4++)
            this.isThisParam(e5.params[t4]) && t4 > 0 && this.raise(e5.params[t4].start, Vo.ThisParamMustBeFirst);
          return super.checkParams(...arguments);
        }
      }
      parseParenAndDistinguishExpression(e5) {
        return super.parseParenAndDistinguishExpression(e5 && this.state.noArrowAt.indexOf(this.state.start) === -1);
      }
      parseSubscripts(e5, t3, r4, s4) {
        if (e5.type === "Identifier" && e5.name === "async" && this.state.noArrowAt.indexOf(t3) !== -1) {
          this.next();
          const s5 = this.startNodeAt(t3, r4);
          s5.callee = e5, s5.arguments = this.parseCallExpressionArguments(oa.parenR, false), e5 = this.finishNode(s5, "CallExpression");
        } else if (e5.type === "Identifier" && e5.name === "async" && this.isRelational("<")) {
          const i4 = this.state.clone(), n4 = this.tryParse((e6) => this.parseAsyncArrowWithTypeParameters(t3, r4) || e6(), i4);
          if (!n4.error && !n4.aborted)
            return n4.node;
          const a4 = this.tryParse(() => super.parseSubscripts(e5, t3, r4, s4), i4);
          if (a4.node && !a4.error)
            return a4.node;
          if (n4.node)
            return this.state = n4.failState, n4.node;
          if (a4.node)
            return this.state = a4.failState, a4.node;
          throw n4.error || a4.error;
        }
        return super.parseSubscripts(e5, t3, r4, s4);
      }
      parseSubscript(e5, t3, r4, s4, i4) {
        if (this.match(oa.questionDot) && this.isLookaheadToken_lt()) {
          if (i4.optionalChainMember = true, s4)
            return i4.stop = true, e5;
          this.next();
          const n4 = this.startNodeAt(t3, r4);
          return n4.callee = e5, n4.typeArguments = this.flowParseTypeParameterInstantiation(), this.expect(oa.parenL), n4.arguments = this.parseCallExpressionArguments(oa.parenR, false), n4.optional = true, this.finishCallExpression(n4, true);
        }
        if (!s4 && this.shouldParseTypes() && this.isRelational("<")) {
          const s5 = this.startNodeAt(t3, r4);
          s5.callee = e5;
          const n4 = this.tryParse(() => (s5.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew(), this.expect(oa.parenL), s5.arguments = this.parseCallExpressionArguments(oa.parenR, false), i4.optionalChainMember && (s5.optional = false), this.finishCallExpression(s5, i4.optionalChainMember)));
          if (n4.node)
            return n4.error && (this.state = n4.failState), n4.node;
        }
        return super.parseSubscript(e5, t3, r4, s4, i4);
      }
      parseNewArguments(e5) {
        let t3 = null;
        this.shouldParseTypes() && this.isRelational("<") && (t3 = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node), e5.typeArguments = t3, super.parseNewArguments(e5);
      }
      parseAsyncArrowWithTypeParameters(e5, t3) {
        const r4 = this.startNodeAt(e5, t3);
        if (this.parseFunctionParams(r4), this.parseArrow(r4))
          return this.parseArrowExpression(r4, void 0, true);
      }
      readToken_mult_modulo(e5) {
        const t3 = this.input.charCodeAt(this.state.pos + 1);
        if (e5 === 42 && t3 === 47 && this.state.hasFlowComment)
          return this.state.hasFlowComment = false, this.state.pos += 2, void this.nextToken();
        super.readToken_mult_modulo(e5);
      }
      readToken_pipe_amp(e5) {
        const t3 = this.input.charCodeAt(this.state.pos + 1);
        e5 !== 124 || t3 !== 125 ? super.readToken_pipe_amp(e5) : this.finishOp(oa.braceBarR, 2);
      }
      parseTopLevel(e5, t3) {
        const r4 = super.parseTopLevel(e5, t3);
        return this.state.hasFlowComment && this.raise(this.state.pos, Vo.UnterminatedFlowComment), r4;
      }
      skipBlockComment() {
        if (this.hasPlugin("flowComments") && this.skipFlowComment())
          return this.state.hasFlowComment && this.unexpected(null, Vo.NestedFlowComment), this.hasFlowCommentCompletion(), this.state.pos += this.skipFlowComment(), void (this.state.hasFlowComment = true);
        if (this.state.hasFlowComment) {
          const e5 = this.input.indexOf("*-/", this.state.pos += 2);
          if (e5 === -1)
            throw this.raise(this.state.pos - 2, Ea.UnterminatedComment);
          this.state.pos = e5 + 3;
        } else
          super.skipBlockComment();
      }
      skipFlowComment() {
        const {pos: e5} = this.state;
        let t3 = 2;
        for (; [32, 9].includes(this.input.charCodeAt(e5 + t3)); )
          t3++;
        const r4 = this.input.charCodeAt(t3 + e5), s4 = this.input.charCodeAt(t3 + e5 + 1);
        return r4 === 58 && s4 === 58 ? t3 + 2 : this.input.slice(t3 + e5, t3 + e5 + 12) === "flow-include" ? t3 + 12 : r4 === 58 && s4 !== 58 && t3;
      }
      hasFlowCommentCompletion() {
        if (this.input.indexOf("*/", this.state.pos) === -1)
          throw this.raise(this.state.pos, Ea.UnterminatedComment);
      }
      flowEnumErrorBooleanMemberNotInitialized(e5, t3) {
        let {enumName: r4, memberName: s4} = t3;
        this.raise(e5, Vo.EnumBooleanMemberNotInitialized, s4, r4);
      }
      flowEnumErrorInvalidMemberName(e5, t3) {
        let {enumName: r4, memberName: s4} = t3;
        const i4 = s4[0].toUpperCase() + s4.slice(1);
        this.raise(e5, Vo.EnumInvalidMemberName, s4, i4, r4);
      }
      flowEnumErrorDuplicateMemberName(e5, t3) {
        let {enumName: r4, memberName: s4} = t3;
        this.raise(e5, Vo.EnumDuplicateMemberName, s4, r4);
      }
      flowEnumErrorInconsistentMemberValues(e5, t3) {
        let {enumName: r4} = t3;
        this.raise(e5, Vo.EnumInconsistentMemberValues, r4);
      }
      flowEnumErrorInvalidExplicitType(e5, t3) {
        let {enumName: r4, suppliedType: s4} = t3;
        return this.raise(e5, s4 === null ? Vo.EnumInvalidExplicitTypeUnknownSupplied : Vo.EnumInvalidExplicitType, r4, s4);
      }
      flowEnumErrorInvalidMemberInitializer(e5, t3) {
        let {enumName: r4, explicitType: s4, memberName: i4} = t3, n4 = null;
        switch (s4) {
          case "boolean":
          case "number":
          case "string":
            n4 = Vo.EnumInvalidMemberInitializerPrimaryType;
            break;
          case "symbol":
            n4 = Vo.EnumInvalidMemberInitializerSymbolType;
            break;
          default:
            n4 = Vo.EnumInvalidMemberInitializerUnknownType;
        }
        return this.raise(e5, n4, r4, i4, s4);
      }
      flowEnumErrorNumberMemberNotInitialized(e5, t3) {
        let {enumName: r4, memberName: s4} = t3;
        this.raise(e5, Vo.EnumNumberMemberNotInitialized, r4, s4);
      }
      flowEnumErrorStringMemberInconsistentlyInitailized(e5, t3) {
        let {enumName: r4} = t3;
        this.raise(e5, Vo.EnumStringMemberInconsistentlyInitailized, r4);
      }
      flowEnumMemberInit() {
        const e5 = this.state.start, t3 = () => this.match(oa.comma) || this.match(oa.braceR);
        switch (this.state.type) {
          case oa.num: {
            const r4 = this.parseLiteral(this.state.value, "NumericLiteral");
            return t3() ? {type: "number", pos: r4.start, value: r4} : {type: "invalid", pos: e5};
          }
          case oa.string: {
            const r4 = this.parseLiteral(this.state.value, "StringLiteral");
            return t3() ? {type: "string", pos: r4.start, value: r4} : {type: "invalid", pos: e5};
          }
          case oa._true:
          case oa._false: {
            const r4 = this.parseBooleanLiteral();
            return t3() ? {type: "boolean", pos: r4.start, value: r4} : {type: "invalid", pos: e5};
          }
          default:
            return {type: "invalid", pos: e5};
        }
      }
      flowEnumMemberRaw() {
        const e5 = this.state.start;
        return {id: this.parseIdentifier(true), init: this.eat(oa.eq) ? this.flowEnumMemberInit() : {type: "none", pos: e5}};
      }
      flowEnumCheckExplicitTypeMismatch(e5, t3, r4) {
        const {explicitType: s4} = t3;
        s4 !== null && s4 !== r4 && this.flowEnumErrorInvalidMemberInitializer(e5, t3);
      }
      flowEnumMembers(e5) {
        let {enumName: t3, explicitType: r4} = e5;
        const s4 = new Set(), i4 = {booleanMembers: [], numberMembers: [], stringMembers: [], defaultedMembers: []};
        let n4 = false;
        for (; !this.match(oa.braceR); ) {
          if (this.eat(oa.ellipsis)) {
            n4 = true;
            break;
          }
          const e6 = this.startNode(), {id: a4, init: o4} = this.flowEnumMemberRaw(), l3 = a4.name;
          if (l3 === "")
            continue;
          /^[a-z]/.test(l3) && this.flowEnumErrorInvalidMemberName(a4.start, {enumName: t3, memberName: l3}), s4.has(l3) && this.flowEnumErrorDuplicateMemberName(a4.start, {enumName: t3, memberName: l3}), s4.add(l3);
          const c4 = {enumName: t3, explicitType: r4, memberName: l3};
          switch (e6.id = a4, o4.type) {
            case "boolean":
              this.flowEnumCheckExplicitTypeMismatch(o4.pos, c4, "boolean"), e6.init = o4.value, i4.booleanMembers.push(this.finishNode(e6, "EnumBooleanMember"));
              break;
            case "number":
              this.flowEnumCheckExplicitTypeMismatch(o4.pos, c4, "number"), e6.init = o4.value, i4.numberMembers.push(this.finishNode(e6, "EnumNumberMember"));
              break;
            case "string":
              this.flowEnumCheckExplicitTypeMismatch(o4.pos, c4, "string"), e6.init = o4.value, i4.stringMembers.push(this.finishNode(e6, "EnumStringMember"));
              break;
            case "invalid":
              throw this.flowEnumErrorInvalidMemberInitializer(o4.pos, c4);
            case "none":
              switch (r4) {
                case "boolean":
                  this.flowEnumErrorBooleanMemberNotInitialized(o4.pos, c4);
                  break;
                case "number":
                  this.flowEnumErrorNumberMemberNotInitialized(o4.pos, c4);
                  break;
                default:
                  i4.defaultedMembers.push(this.finishNode(e6, "EnumDefaultedMember"));
              }
          }
          this.match(oa.braceR) || this.expect(oa.comma);
        }
        return {members: i4, hasUnknownMembers: n4};
      }
      flowEnumStringMembers(e5, t3, r4) {
        let {enumName: s4} = r4;
        if (e5.length === 0)
          return t3;
        if (t3.length === 0)
          return e5;
        if (t3.length > e5.length) {
          for (const t4 of e5)
            this.flowEnumErrorStringMemberInconsistentlyInitailized(t4.start, {enumName: s4});
          return t3;
        }
        for (const i4 of t3)
          this.flowEnumErrorStringMemberInconsistentlyInitailized(i4.start, {enumName: s4});
        return e5;
      }
      flowEnumParseExplicitType(e5) {
        let {enumName: t3} = e5;
        if (this.eatContextual("of")) {
          if (!this.match(oa.name))
            throw this.flowEnumErrorInvalidExplicitType(this.state.start, {enumName: t3, suppliedType: null});
          const {value: e6} = this.state;
          return this.next(), e6 !== "boolean" && e6 !== "number" && e6 !== "string" && e6 !== "symbol" && this.flowEnumErrorInvalidExplicitType(this.state.start, {enumName: t3, suppliedType: e6}), e6;
        }
        return null;
      }
      flowEnumBody(e5, t3) {
        let {enumName: r4, nameLoc: s4} = t3;
        const i4 = this.flowEnumParseExplicitType({enumName: r4});
        this.expect(oa.braceL);
        const {members: n4, hasUnknownMembers: a4} = this.flowEnumMembers({enumName: r4, explicitType: i4});
        switch (e5.hasUnknownMembers = a4, i4) {
          case "boolean":
            return e5.explicitType = true, e5.members = n4.booleanMembers, this.expect(oa.braceR), this.finishNode(e5, "EnumBooleanBody");
          case "number":
            return e5.explicitType = true, e5.members = n4.numberMembers, this.expect(oa.braceR), this.finishNode(e5, "EnumNumberBody");
          case "string":
            return e5.explicitType = true, e5.members = this.flowEnumStringMembers(n4.stringMembers, n4.defaultedMembers, {enumName: r4}), this.expect(oa.braceR), this.finishNode(e5, "EnumStringBody");
          case "symbol":
            return e5.members = n4.defaultedMembers, this.expect(oa.braceR), this.finishNode(e5, "EnumSymbolBody");
          default: {
            const t4 = () => (e5.members = [], this.expect(oa.braceR), this.finishNode(e5, "EnumStringBody"));
            e5.explicitType = false;
            const i5 = n4.booleanMembers.length, a5 = n4.numberMembers.length, o4 = n4.stringMembers.length, l3 = n4.defaultedMembers.length;
            if (i5 || a5 || o4 || l3) {
              if (i5 || a5) {
                if (!a5 && !o4 && i5 >= l3) {
                  for (const e6 of n4.defaultedMembers)
                    this.flowEnumErrorBooleanMemberNotInitialized(e6.start, {enumName: r4, memberName: e6.id.name});
                  return e5.members = n4.booleanMembers, this.expect(oa.braceR), this.finishNode(e5, "EnumBooleanBody");
                }
                if (!i5 && !o4 && a5 >= l3) {
                  for (const e6 of n4.defaultedMembers)
                    this.flowEnumErrorNumberMemberNotInitialized(e6.start, {enumName: r4, memberName: e6.id.name});
                  return e5.members = n4.numberMembers, this.expect(oa.braceR), this.finishNode(e5, "EnumNumberBody");
                }
                return this.flowEnumErrorInconsistentMemberValues(s4, {enumName: r4}), t4();
              }
              return e5.members = this.flowEnumStringMembers(n4.stringMembers, n4.defaultedMembers, {enumName: r4}), this.expect(oa.braceR), this.finishNode(e5, "EnumStringBody");
            }
            return t4();
          }
        }
      }
      flowParseEnumDeclaration(e5) {
        const t3 = this.parseIdentifier();
        return e5.id = t3, e5.body = this.flowEnumBody(this.startNode(), {enumName: t3.name, nameLoc: t3.start}), this.finishNode(e5, "EnumDeclaration");
      }
      updateContext(e5) {
        this.match(oa.name) && this.state.value === "of" && e5 === oa.name && this.input.slice(this.state.lastTokStart, this.state.lastTokEnd) === "interface" ? this.state.exprAllowed = false : super.updateContext(e5);
      }
      isLookaheadToken_lt() {
        const e5 = this.nextTokenStart();
        if (this.input.charCodeAt(e5) === 60) {
          const t3 = this.input.charCodeAt(e5 + 1);
          return t3 !== 60 && t3 !== 61;
        }
        return false;
      }
      maybeUnwrapTypeCastExpression(e5) {
        return e5.type === "TypeCastExpression" ? e5.expression : e5;
      }
    };
    const Yo = {quot: '"', amp: "&", apos: "'", lt: "<", gt: ">", nbsp: "\xA0", iexcl: "\xA1", cent: "\xA2", pound: "\xA3", curren: "\xA4", yen: "\xA5", brvbar: "\xA6", sect: "\xA7", uml: "\xA8", copy: "\xA9", ordf: "\xAA", laquo: "\xAB", not: "\xAC", shy: "\xAD", reg: "\xAE", macr: "\xAF", deg: "\xB0", plusmn: "\xB1", sup2: "\xB2", sup3: "\xB3", acute: "\xB4", micro: "\xB5", para: "\xB6", middot: "\xB7", cedil: "\xB8", sup1: "\xB9", ordm: "\xBA", raquo: "\xBB", frac14: "\xBC", frac12: "\xBD", frac34: "\xBE", iquest: "\xBF", Agrave: "\xC0", Aacute: "\xC1", Acirc: "\xC2", Atilde: "\xC3", Auml: "\xC4", Aring: "\xC5", AElig: "\xC6", Ccedil: "\xC7", Egrave: "\xC8", Eacute: "\xC9", Ecirc: "\xCA", Euml: "\xCB", Igrave: "\xCC", Iacute: "\xCD", Icirc: "\xCE", Iuml: "\xCF", ETH: "\xD0", Ntilde: "\xD1", Ograve: "\xD2", Oacute: "\xD3", Ocirc: "\xD4", Otilde: "\xD5", Ouml: "\xD6", times: "\xD7", Oslash: "\xD8", Ugrave: "\xD9", Uacute: "\xDA", Ucirc: "\xDB", Uuml: "\xDC", Yacute: "\xDD", THORN: "\xDE", szlig: "\xDF", agrave: "\xE0", aacute: "\xE1", acirc: "\xE2", atilde: "\xE3", auml: "\xE4", aring: "\xE5", aelig: "\xE6", ccedil: "\xE7", egrave: "\xE8", eacute: "\xE9", ecirc: "\xEA", euml: "\xEB", igrave: "\xEC", iacute: "\xED", icirc: "\xEE", iuml: "\xEF", eth: "\xF0", ntilde: "\xF1", ograve: "\xF2", oacute: "\xF3", ocirc: "\xF4", otilde: "\xF5", ouml: "\xF6", divide: "\xF7", oslash: "\xF8", ugrave: "\xF9", uacute: "\xFA", ucirc: "\xFB", uuml: "\xFC", yacute: "\xFD", thorn: "\xFE", yuml: "\xFF", OElig: "\u0152", oelig: "\u0153", Scaron: "\u0160", scaron: "\u0161", Yuml: "\u0178", fnof: "\u0192", circ: "\u02C6", tilde: "\u02DC", Alpha: "\u0391", Beta: "\u0392", Gamma: "\u0393", Delta: "\u0394", Epsilon: "\u0395", Zeta: "\u0396", Eta: "\u0397", Theta: "\u0398", Iota: "\u0399", Kappa: "\u039A", Lambda: "\u039B", Mu: "\u039C", Nu: "\u039D", Xi: "\u039E", Omicron: "\u039F", Pi: "\u03A0", Rho: "\u03A1", Sigma: "\u03A3", Tau: "\u03A4", Upsilon: "\u03A5", Phi: "\u03A6", Chi: "\u03A7", Psi: "\u03A8", Omega: "\u03A9", alpha: "\u03B1", beta: "\u03B2", gamma: "\u03B3", delta: "\u03B4", epsilon: "\u03B5", zeta: "\u03B6", eta: "\u03B7", theta: "\u03B8", iota: "\u03B9", kappa: "\u03BA", lambda: "\u03BB", mu: "\u03BC", nu: "\u03BD", xi: "\u03BE", omicron: "\u03BF", pi: "\u03C0", rho: "\u03C1", sigmaf: "\u03C2", sigma: "\u03C3", tau: "\u03C4", upsilon: "\u03C5", phi: "\u03C6", chi: "\u03C7", psi: "\u03C8", omega: "\u03C9", thetasym: "\u03D1", upsih: "\u03D2", piv: "\u03D6", ensp: "\u2002", emsp: "\u2003", thinsp: "\u2009", zwnj: "\u200C", zwj: "\u200D", lrm: "\u200E", rlm: "\u200F", ndash: "\u2013", mdash: "\u2014", lsquo: "\u2018", rsquo: "\u2019", sbquo: "\u201A", ldquo: "\u201C", rdquo: "\u201D", bdquo: "\u201E", dagger: "\u2020", Dagger: "\u2021", bull: "\u2022", hellip: "\u2026", permil: "\u2030", prime: "\u2032", Prime: "\u2033", lsaquo: "\u2039", rsaquo: "\u203A", oline: "\u203E", frasl: "\u2044", euro: "\u20AC", image: "\u2111", weierp: "\u2118", real: "\u211C", trade: "\u2122", alefsym: "\u2135", larr: "\u2190", uarr: "\u2191", rarr: "\u2192", darr: "\u2193", harr: "\u2194", crarr: "\u21B5", lArr: "\u21D0", uArr: "\u21D1", rArr: "\u21D2", dArr: "\u21D3", hArr: "\u21D4", forall: "\u2200", part: "\u2202", exist: "\u2203", empty: "\u2205", nabla: "\u2207", isin: "\u2208", notin: "\u2209", ni: "\u220B", prod: "\u220F", sum: "\u2211", minus: "\u2212", lowast: "\u2217", radic: "\u221A", prop: "\u221D", infin: "\u221E", ang: "\u2220", and: "\u2227", or: "\u2228", cap: "\u2229", cup: "\u222A", int: "\u222B", there4: "\u2234", sim: "\u223C", cong: "\u2245", asymp: "\u2248", ne: "\u2260", equiv: "\u2261", le: "\u2264", ge: "\u2265", sub: "\u2282", sup: "\u2283", nsub: "\u2284", sube: "\u2286", supe: "\u2287", oplus: "\u2295", otimes: "\u2297", perp: "\u22A5", sdot: "\u22C5", lceil: "\u2308", rceil: "\u2309", lfloor: "\u230A", rfloor: "\u230B", lang: "\u2329", rang: "\u232A", loz: "\u25CA", spades: "\u2660", clubs: "\u2663", hearts: "\u2665", diams: "\u2666"}, Qo = /^[\da-fA-F]+$/, Zo = /^\d+$/, el = Sa({AttributeIsEmpty: "JSX attributes must only be assigned a non-empty expression.", MissingClosingTagElement: "Expected corresponding JSX closing tag for <%0>.", MissingClosingTagFragment: "Expected corresponding JSX closing tag for <>.", UnexpectedSequenceExpression: "Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?", UnsupportedJsxValue: "JSX value should be either an expression or a quoted JSX text.", UnterminatedJsxContent: "Unterminated JSX contents.", UnwrappedAdjacentJSXElements: "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?"}, ba.SyntaxError);
    function tl(e4) {
      return !!e4 && (e4.type === "JSXOpeningFragment" || e4.type === "JSXClosingFragment");
    }
    function rl(e4) {
      if (e4.type === "JSXIdentifier")
        return e4.name;
      if (e4.type === "JSXNamespacedName")
        return e4.namespace.name + ":" + e4.name.name;
      if (e4.type === "JSXMemberExpression")
        return rl(e4.object) + "." + rl(e4.property);
      throw new Error("Node had unexpected type: " + e4.type);
    }
    Ca.j_oTag = new wa("<tag", false), Ca.j_cTag = new wa("</tag", false), Ca.j_expr = new wa("<tag>...</tag>", true, true), oa.jsxName = new sa("jsxName"), oa.jsxText = new sa("jsxText", {beforeExpr: true}), oa.jsxTagStart = new sa("jsxTagStart", {startsExpr: true}), oa.jsxTagEnd = new sa("jsxTagEnd"), oa.jsxTagStart.updateContext = function() {
      this.state.context.push(Ca.j_expr), this.state.context.push(Ca.j_oTag), this.state.exprAllowed = false;
    }, oa.jsxTagEnd.updateContext = function(e4) {
      const t3 = this.state.context.pop();
      t3 === Ca.j_oTag && e4 === oa.slash || t3 === Ca.j_cTag ? (this.state.context.pop(), this.state.exprAllowed = this.curContext() === Ca.j_expr) : this.state.exprAllowed = true;
    };
    var sl = (e4) => class extends e4 {
      jsxReadToken() {
        let e5 = "", t3 = this.state.pos;
        for (; ; ) {
          if (this.state.pos >= this.length)
            throw this.raise(this.state.start, el.UnterminatedJsxContent);
          const r4 = this.input.charCodeAt(this.state.pos);
          switch (r4) {
            case 60:
            case 123:
              return this.state.pos === this.state.start ? r4 === 60 && this.state.exprAllowed ? (++this.state.pos, this.finishToken(oa.jsxTagStart)) : super.getTokenFromCode(r4) : (e5 += this.input.slice(t3, this.state.pos), this.finishToken(oa.jsxText, e5));
            case 38:
              e5 += this.input.slice(t3, this.state.pos), e5 += this.jsxReadEntity(), t3 = this.state.pos;
              break;
            case 62:
            case 125:
            default:
              ua(r4) ? (e5 += this.input.slice(t3, this.state.pos), e5 += this.jsxReadNewLine(true), t3 = this.state.pos) : ++this.state.pos;
          }
        }
      }
      jsxReadNewLine(e5) {
        const t3 = this.input.charCodeAt(this.state.pos);
        let r4;
        return ++this.state.pos, t3 === 13 && this.input.charCodeAt(this.state.pos) === 10 ? (++this.state.pos, r4 = e5 ? "\n" : "\r\n") : r4 = String.fromCharCode(t3), ++this.state.curLine, this.state.lineStart = this.state.pos, r4;
      }
      jsxReadString(e5) {
        let t3 = "", r4 = ++this.state.pos;
        for (; ; ) {
          if (this.state.pos >= this.length)
            throw this.raise(this.state.start, Ea.UnterminatedString);
          const s4 = this.input.charCodeAt(this.state.pos);
          if (s4 === e5)
            break;
          s4 === 38 ? (t3 += this.input.slice(r4, this.state.pos), t3 += this.jsxReadEntity(), r4 = this.state.pos) : ua(s4) ? (t3 += this.input.slice(r4, this.state.pos), t3 += this.jsxReadNewLine(false), r4 = this.state.pos) : ++this.state.pos;
        }
        return t3 += this.input.slice(r4, this.state.pos++), this.finishToken(oa.string, t3);
      }
      jsxReadEntity() {
        let e5, t3 = "", r4 = 0, s4 = this.input[this.state.pos];
        const i4 = ++this.state.pos;
        for (; this.state.pos < this.length && r4++ < 10; ) {
          if (s4 = this.input[this.state.pos++], s4 === ";") {
            t3[0] === "#" ? t3[1] === "x" ? (t3 = t3.substr(2), Qo.test(t3) && (e5 = String.fromCodePoint(parseInt(t3, 16)))) : (t3 = t3.substr(1), Zo.test(t3) && (e5 = String.fromCodePoint(parseInt(t3, 10)))) : e5 = Yo[t3];
            break;
          }
          t3 += s4;
        }
        return e5 || (this.state.pos = i4, "&");
      }
      jsxReadWord() {
        let e5;
        const t3 = this.state.pos;
        do {
          e5 = this.input.charCodeAt(++this.state.pos);
        } while (Oa(e5) || e5 === 45);
        return this.finishToken(oa.jsxName, this.input.slice(t3, this.state.pos));
      }
      jsxParseIdentifier() {
        const e5 = this.startNode();
        return this.match(oa.jsxName) ? e5.name = this.state.value : this.state.type.keyword ? e5.name = this.state.type.keyword : this.unexpected(), this.next(), this.finishNode(e5, "JSXIdentifier");
      }
      jsxParseNamespacedName() {
        const e5 = this.state.start, t3 = this.state.startLoc, r4 = this.jsxParseIdentifier();
        if (!this.eat(oa.colon))
          return r4;
        const s4 = this.startNodeAt(e5, t3);
        return s4.namespace = r4, s4.name = this.jsxParseIdentifier(), this.finishNode(s4, "JSXNamespacedName");
      }
      jsxParseElementName() {
        const e5 = this.state.start, t3 = this.state.startLoc;
        let r4 = this.jsxParseNamespacedName();
        if (r4.type === "JSXNamespacedName")
          return r4;
        for (; this.eat(oa.dot); ) {
          const s4 = this.startNodeAt(e5, t3);
          s4.object = r4, s4.property = this.jsxParseIdentifier(), r4 = this.finishNode(s4, "JSXMemberExpression");
        }
        return r4;
      }
      jsxParseAttributeValue() {
        let e5;
        switch (this.state.type) {
          case oa.braceL:
            return e5 = this.startNode(), this.next(), e5 = this.jsxParseExpressionContainer(e5), e5.expression.type === "JSXEmptyExpression" && this.raise(e5.start, el.AttributeIsEmpty), e5;
          case oa.jsxTagStart:
          case oa.string:
            return this.parseExprAtom();
          default:
            throw this.raise(this.state.start, el.UnsupportedJsxValue);
        }
      }
      jsxParseEmptyExpression() {
        const e5 = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);
        return this.finishNodeAt(e5, "JSXEmptyExpression", this.state.start, this.state.startLoc);
      }
      jsxParseSpreadChild(e5) {
        return this.next(), e5.expression = this.parseExpression(), this.expect(oa.braceR), this.finishNode(e5, "JSXSpreadChild");
      }
      jsxParseExpressionContainer(e5) {
        if (this.match(oa.braceR))
          e5.expression = this.jsxParseEmptyExpression();
        else {
          const t3 = this.parseExpression();
          e5.expression = t3;
        }
        return this.expect(oa.braceR), this.finishNode(e5, "JSXExpressionContainer");
      }
      jsxParseAttribute() {
        const e5 = this.startNode();
        return this.eat(oa.braceL) ? (this.expect(oa.ellipsis), e5.argument = this.parseMaybeAssignAllowIn(), this.expect(oa.braceR), this.finishNode(e5, "JSXSpreadAttribute")) : (e5.name = this.jsxParseNamespacedName(), e5.value = this.eat(oa.eq) ? this.jsxParseAttributeValue() : null, this.finishNode(e5, "JSXAttribute"));
      }
      jsxParseOpeningElementAt(e5, t3) {
        const r4 = this.startNodeAt(e5, t3);
        return this.match(oa.jsxTagEnd) ? (this.expect(oa.jsxTagEnd), this.finishNode(r4, "JSXOpeningFragment")) : (r4.name = this.jsxParseElementName(), this.jsxParseOpeningElementAfterName(r4));
      }
      jsxParseOpeningElementAfterName(e5) {
        const t3 = [];
        for (; !this.match(oa.slash) && !this.match(oa.jsxTagEnd); )
          t3.push(this.jsxParseAttribute());
        return e5.attributes = t3, e5.selfClosing = this.eat(oa.slash), this.expect(oa.jsxTagEnd), this.finishNode(e5, "JSXOpeningElement");
      }
      jsxParseClosingElementAt(e5, t3) {
        const r4 = this.startNodeAt(e5, t3);
        return this.match(oa.jsxTagEnd) ? (this.expect(oa.jsxTagEnd), this.finishNode(r4, "JSXClosingFragment")) : (r4.name = this.jsxParseElementName(), this.expect(oa.jsxTagEnd), this.finishNode(r4, "JSXClosingElement"));
      }
      jsxParseElementAt(e5, t3) {
        const r4 = this.startNodeAt(e5, t3), s4 = [], i4 = this.jsxParseOpeningElementAt(e5, t3);
        let n4 = null;
        if (!i4.selfClosing) {
          e:
            for (; ; )
              switch (this.state.type) {
                case oa.jsxTagStart:
                  if (e5 = this.state.start, t3 = this.state.startLoc, this.next(), this.eat(oa.slash)) {
                    n4 = this.jsxParseClosingElementAt(e5, t3);
                    break e;
                  }
                  s4.push(this.jsxParseElementAt(e5, t3));
                  break;
                case oa.jsxText:
                  s4.push(this.parseExprAtom());
                  break;
                case oa.braceL: {
                  const e6 = this.startNode();
                  this.next(), this.match(oa.ellipsis) ? s4.push(this.jsxParseSpreadChild(e6)) : s4.push(this.jsxParseExpressionContainer(e6));
                  break;
                }
                default:
                  throw this.unexpected();
              }
          tl(i4) && !tl(n4) ? this.raise(n4.start, el.MissingClosingTagFragment) : !tl(i4) && tl(n4) ? this.raise(n4.start, el.MissingClosingTagElement, rl(i4.name)) : tl(i4) || tl(n4) || rl(n4.name) !== rl(i4.name) && this.raise(n4.start, el.MissingClosingTagElement, rl(i4.name));
        }
        if (tl(i4) ? (r4.openingFragment = i4, r4.closingFragment = n4) : (r4.openingElement = i4, r4.closingElement = n4), r4.children = s4, this.isRelational("<"))
          throw this.raise(this.state.start, el.UnwrappedAdjacentJSXElements);
        return tl(i4) ? this.finishNode(r4, "JSXFragment") : this.finishNode(r4, "JSXElement");
      }
      jsxParseElement() {
        const e5 = this.state.start, t3 = this.state.startLoc;
        return this.next(), this.jsxParseElementAt(e5, t3);
      }
      parseExprAtom(e5) {
        return this.match(oa.jsxText) ? this.parseLiteral(this.state.value, "JSXText") : this.match(oa.jsxTagStart) ? this.jsxParseElement() : this.isRelational("<") && this.input.charCodeAt(this.state.pos) !== 33 ? (this.finishToken(oa.jsxTagStart), this.jsxParseElement()) : super.parseExprAtom(e5);
      }
      getTokenFromCode(e5) {
        if (this.state.inPropertyName)
          return super.getTokenFromCode(e5);
        const t3 = this.curContext();
        if (t3 === Ca.j_expr)
          return this.jsxReadToken();
        if (t3 === Ca.j_oTag || t3 === Ca.j_cTag) {
          if (La(e5))
            return this.jsxReadWord();
          if (e5 === 62)
            return ++this.state.pos, this.finishToken(oa.jsxTagEnd);
          if ((e5 === 34 || e5 === 39) && t3 === Ca.j_oTag)
            return this.jsxReadString(e5);
        }
        return e5 === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33 ? (++this.state.pos, this.finishToken(oa.jsxTagStart)) : super.getTokenFromCode(e5);
      }
      updateContext(e5) {
        if (this.match(oa.braceL)) {
          const t3 = this.curContext();
          t3 === Ca.j_oTag ? this.state.context.push(Ca.braceExpression) : t3 === Ca.j_expr ? this.state.context.push(Ca.templateQuasi) : super.updateContext(e5), this.state.exprAllowed = true;
        } else {
          if (!this.match(oa.slash) || e5 !== oa.jsxTagStart)
            return super.updateContext(e5);
          this.state.context.length -= 2, this.state.context.push(Ca.j_cTag), this.state.exprAllowed = false;
        }
      }
    };
    class il extends Ro {
      constructor() {
        super(...arguments), this.types = [], this.enums = [], this.constEnums = [], this.classes = [], this.exportOnlyBindings = [];
      }
    }
    class nl extends jo {
      createScope(e4) {
        return new il(e4);
      }
      declareName(e4, t3, r4) {
        const s4 = this.currentScope();
        if (t3 & fo)
          return this.maybeExportDefined(s4, e4), void s4.exportOnlyBindings.push(e4);
        super.declareName(...arguments), t3 & no && (t3 & io || (this.checkRedeclarationInScope(s4, e4, t3, r4), this.maybeExportDefined(s4, e4)), s4.types.push(e4)), t3 & ho && s4.enums.push(e4), t3 & po && s4.constEnums.push(e4), t3 & uo && s4.classes.push(e4);
      }
      isRedeclaredInScope(e4, t3, r4) {
        return e4.enums.indexOf(t3) > -1 ? !(r4 & ho) || !!(r4 & po) != e4.constEnums.indexOf(t3) > -1 : r4 & uo && e4.classes.indexOf(t3) > -1 ? e4.lexical.indexOf(t3) > -1 && !!(r4 & io) : !!(r4 & no && e4.types.indexOf(t3) > -1) || super.isRedeclaredInScope(...arguments);
      }
      checkLocalExport(e4) {
        this.scopeStack[0].types.indexOf(e4.name) === -1 && this.scopeStack[0].exportOnlyBindings.indexOf(e4.name) === -1 && super.checkLocalExport(e4);
      }
    }
    const al = 0, ol = 1, ll = 2, cl = 4, ul = 8;
    class hl {
      constructor() {
        this.stacks = [];
      }
      enter(e4) {
        this.stacks.push(e4);
      }
      exit() {
        this.stacks.pop();
      }
      currentFlags() {
        return this.stacks[this.stacks.length - 1];
      }
      get hasAwait() {
        return (this.currentFlags() & ll) > 0;
      }
      get hasYield() {
        return (this.currentFlags() & ol) > 0;
      }
      get hasReturn() {
        return (this.currentFlags() & cl) > 0;
      }
      get hasIn() {
        return (this.currentFlags() & ul) > 0;
      }
    }
    function pl(e4, t3) {
      return (e4 ? ll : 0) | (t3 ? ol : 0);
    }
    function dl(e4) {
      if (e4 == null)
        throw new Error(`Unexpected ${e4} value.`);
      return e4;
    }
    function fl(e4) {
      if (!e4)
        throw new Error("Assert fail");
    }
    const ml = Sa({AbstractMethodHasImplementation: "Method '%0' cannot have an implementation because it is marked abstract.", AccesorCannotDeclareThisParameter: "'get' and 'set' accessors cannot declare 'this' parameters.", AccesorCannotHaveTypeParameters: "An accessor cannot have type parameters.", ClassMethodHasDeclare: "Class methods cannot have the 'declare' modifier.", ClassMethodHasReadonly: "Class methods cannot have the 'readonly' modifier.", ConstructorHasTypeParameters: "Type parameters cannot appear on a constructor declaration.", DeclareAccessor: "'declare' is not allowed in %0ters.", DeclareClassFieldHasInitializer: "Initializers are not allowed in ambient contexts.", DeclareFunctionHasImplementation: "An implementation cannot be declared in ambient contexts.", DuplicateAccessibilityModifier: "Accessibility modifier already seen.", DuplicateModifier: "Duplicate modifier: '%0'.", EmptyHeritageClauseType: "'%0' list cannot be empty.", EmptyTypeArguments: "Type argument list cannot be empty.", EmptyTypeParameters: "Type parameter list cannot be empty.", ExpectedAmbientAfterExportDeclare: "'export declare' must be followed by an ambient declaration.", ImportAliasHasImportType: "An import alias can not use 'import type'.", IncompatibleModifiers: "'%0' modifier cannot be used with '%1' modifier.", IndexSignatureHasAbstract: "Index signatures cannot have the 'abstract' modifier.", IndexSignatureHasAccessibility: "Index signatures cannot have an accessibility modifier ('%0').", IndexSignatureHasDeclare: "Index signatures cannot have the 'declare' modifier.", IndexSignatureHasOverride: "'override' modifier cannot appear on an index signature.", IndexSignatureHasStatic: "Index signatures cannot have the 'static' modifier.", InvalidModifierOnTypeMember: "'%0' modifier cannot appear on a type member.", InvalidModifiersOrder: "'%0' modifier must precede '%1' modifier.", InvalidTupleMemberLabel: "Tuple members must be labeled with a simple identifier.", MixedLabeledAndUnlabeledElements: "Tuple members must all have names or all not have names.", NonAbstractClassHasAbstractMethod: "Abstract methods can only appear within an abstract class.", NonClassMethodPropertyHasAbstractModifer: "'abstract' modifier can only appear on a class, method, or property declaration.", OptionalTypeBeforeRequired: "A required element cannot follow an optional element.", OverrideNotInSubClass: "This member cannot have an 'override' modifier because its containing class does not extend another class.", PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.", PrivateElementHasAbstract: "Private elements cannot have the 'abstract' modifier.", PrivateElementHasAccessibility: "Private elements cannot have an accessibility modifier ('%0').", ReadonlyForMethodSignature: "'readonly' modifier can only appear on a property declaration or index signature.", SetAccesorCannotHaveOptionalParameter: "A 'set' accessor cannot have an optional parameter.", SetAccesorCannotHaveRestParameter: "A 'set' accessor cannot have rest parameter.", SetAccesorCannotHaveReturnType: "A 'set' accessor cannot have a return type annotation.", StaticBlockCannotHaveModifier: "Static class blocks cannot have any modifier.", TypeAnnotationAfterAssign: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.", TypeImportCannotSpecifyDefaultAndNamed: "A type-only import can specify a default import or named bindings, but not both.", UnexpectedParameterModifier: "A parameter property is only allowed in a constructor implementation.", UnexpectedReadonly: "'readonly' type modifier is only permitted on array and tuple literal types.", UnexpectedTypeAnnotation: "Did not expect a type annotation here.", UnexpectedTypeCastInParameter: "Unexpected type cast in parameter position.", UnsupportedImportTypeArgument: "Argument in a type import must be a string literal.", UnsupportedParameterPropertyKind: "A parameter property may not be declared using a binding pattern.", UnsupportedSignatureParameterKind: "Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0."}, ba.SyntaxError);
    function yl(e4) {
      switch (e4) {
        case "any":
          return "TSAnyKeyword";
        case "boolean":
          return "TSBooleanKeyword";
        case "bigint":
          return "TSBigIntKeyword";
        case "never":
          return "TSNeverKeyword";
        case "number":
          return "TSNumberKeyword";
        case "object":
          return "TSObjectKeyword";
        case "string":
          return "TSStringKeyword";
        case "symbol":
          return "TSSymbolKeyword";
        case "undefined":
          return "TSUndefinedKeyword";
        case "unknown":
          return "TSUnknownKeyword";
        default:
          return;
      }
    }
    function gl(e4) {
      return e4 === "private" || e4 === "public" || e4 === "protected";
    }
    var xl2 = (e4) => class extends e4 {
      getScopeHandler() {
        return nl;
      }
      tsIsIdentifier() {
        return this.match(oa.name);
      }
      tsTokenCanFollowModifier() {
        return (this.match(oa.bracketL) || this.match(oa.braceL) || this.match(oa.star) || this.match(oa.ellipsis) || this.match(oa.hash) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();
      }
      tsNextTokenCanFollowModifier() {
        return this.next(), this.tsTokenCanFollowModifier();
      }
      tsParseModifier(e5) {
        if (!this.match(oa.name))
          return;
        const t3 = this.state.value;
        return e5.indexOf(t3) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this)) ? t3 : void 0;
      }
      tsParseModifiers(e5, t3, r4, s4) {
        const i4 = (t4, r5, s5, i5) => {
          r5 === s5 && e5[i5] && this.raise(t4, ml.InvalidModifiersOrder, s5, i5);
        }, n4 = (t4, r5, s5, i5) => {
          (e5[s5] && r5 === i5 || e5[i5] && r5 === s5) && this.raise(t4, ml.IncompatibleModifiers, s5, i5);
        };
        for (; ; ) {
          const a4 = this.state.start, o4 = this.tsParseModifier(t3.concat(r4 != null ? r4 : []));
          if (!o4)
            break;
          gl(o4) ? e5.accessibility ? this.raise(a4, ml.DuplicateAccessibilityModifier) : (i4(a4, o4, o4, "override"), i4(a4, o4, o4, "static"), e5.accessibility = o4) : (Object.hasOwnProperty.call(e5, o4) ? this.raise(a4, ml.DuplicateModifier, o4) : (i4(a4, o4, "static", "readonly"), i4(a4, o4, "static", "override"), i4(a4, o4, "override", "readonly"), i4(a4, o4, "abstract", "override"), n4(a4, o4, "declare", "override"), n4(a4, o4, "static", "abstract")), e5[o4] = true), r4 != null && r4.includes(o4) && this.raise(a4, s4, o4);
        }
      }
      tsIsListTerminator(e5) {
        switch (e5) {
          case "EnumMembers":
          case "TypeMembers":
            return this.match(oa.braceR);
          case "HeritageClauseElement":
            return this.match(oa.braceL);
          case "TupleElementTypes":
            return this.match(oa.bracketR);
          case "TypeParametersOrArguments":
            return this.isRelational(">");
        }
        throw new Error("Unreachable");
      }
      tsParseList(e5, t3) {
        const r4 = [];
        for (; !this.tsIsListTerminator(e5); )
          r4.push(t3());
        return r4;
      }
      tsParseDelimitedList(e5, t3) {
        return dl(this.tsParseDelimitedListWorker(e5, t3, true));
      }
      tsParseDelimitedListWorker(e5, t3, r4) {
        const s4 = [];
        for (; !this.tsIsListTerminator(e5); ) {
          const i4 = t3();
          if (i4 == null)
            return;
          if (s4.push(i4), !this.eat(oa.comma)) {
            if (this.tsIsListTerminator(e5))
              break;
            return void (r4 && this.expect(oa.comma));
          }
        }
        return s4;
      }
      tsParseBracketedList(e5, t3, r4, s4) {
        s4 || (r4 ? this.expect(oa.bracketL) : this.expectRelational("<"));
        const i4 = this.tsParseDelimitedList(e5, t3);
        return r4 ? this.expect(oa.bracketR) : this.expectRelational(">"), i4;
      }
      tsParseImportType() {
        const e5 = this.startNode();
        return this.expect(oa._import), this.expect(oa.parenL), this.match(oa.string) || this.raise(this.state.start, ml.UnsupportedImportTypeArgument), e5.argument = this.parseExprAtom(), this.expect(oa.parenR), this.eat(oa.dot) && (e5.qualifier = this.tsParseEntityName(true)), this.isRelational("<") && (e5.typeParameters = this.tsParseTypeArguments()), this.finishNode(e5, "TSImportType");
      }
      tsParseEntityName(e5) {
        let t3 = this.parseIdentifier();
        for (; this.eat(oa.dot); ) {
          const r4 = this.startNodeAtNode(t3);
          r4.left = t3, r4.right = this.parseIdentifier(e5), t3 = this.finishNode(r4, "TSQualifiedName");
        }
        return t3;
      }
      tsParseTypeReference() {
        const e5 = this.startNode();
        return e5.typeName = this.tsParseEntityName(false), !this.hasPrecedingLineBreak() && this.isRelational("<") && (e5.typeParameters = this.tsParseTypeArguments()), this.finishNode(e5, "TSTypeReference");
      }
      tsParseThisTypePredicate(e5) {
        this.next();
        const t3 = this.startNodeAtNode(e5);
        return t3.parameterName = e5, t3.typeAnnotation = this.tsParseTypeAnnotation(false), t3.asserts = false, this.finishNode(t3, "TSTypePredicate");
      }
      tsParseThisTypeNode() {
        const e5 = this.startNode();
        return this.next(), this.finishNode(e5, "TSThisType");
      }
      tsParseTypeQuery() {
        const e5 = this.startNode();
        return this.expect(oa._typeof), this.match(oa._import) ? e5.exprName = this.tsParseImportType() : e5.exprName = this.tsParseEntityName(true), this.finishNode(e5, "TSTypeQuery");
      }
      tsParseTypeParameter() {
        const e5 = this.startNode();
        return e5.name = this.parseIdentifierName(e5.start), e5.constraint = this.tsEatThenParseType(oa._extends), e5.default = this.tsEatThenParseType(oa.eq), this.finishNode(e5, "TSTypeParameter");
      }
      tsTryParseTypeParameters() {
        if (this.isRelational("<"))
          return this.tsParseTypeParameters();
      }
      tsParseTypeParameters() {
        const e5 = this.startNode();
        return this.isRelational("<") || this.match(oa.jsxTagStart) ? this.next() : this.unexpected(), e5.params = this.tsParseBracketedList("TypeParametersOrArguments", this.tsParseTypeParameter.bind(this), false, true), e5.params.length === 0 && this.raise(e5.start, ml.EmptyTypeParameters), this.finishNode(e5, "TSTypeParameterDeclaration");
      }
      tsTryNextParseConstantContext() {
        return this.lookahead().type === oa._const ? (this.next(), this.tsParseTypeReference()) : null;
      }
      tsFillSignature(e5, t3) {
        const r4 = e5 === oa.arrow;
        t3.typeParameters = this.tsTryParseTypeParameters(), this.expect(oa.parenL), t3.parameters = this.tsParseBindingListForSignature(), (r4 || this.match(e5)) && (t3.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(e5));
      }
      tsParseBindingListForSignature() {
        return this.parseBindingList(oa.parenR, 41).map((e5) => (e5.type !== "Identifier" && e5.type !== "RestElement" && e5.type !== "ObjectPattern" && e5.type !== "ArrayPattern" && this.raise(e5.start, ml.UnsupportedSignatureParameterKind, e5.type), e5));
      }
      tsParseTypeMemberSemicolon() {
        this.eat(oa.comma) || this.isLineTerminator() || this.expect(oa.semi);
      }
      tsParseSignatureMember(e5, t3) {
        return this.tsFillSignature(oa.colon, t3), this.tsParseTypeMemberSemicolon(), this.finishNode(t3, e5);
      }
      tsIsUnambiguouslyIndexSignature() {
        return this.next(), this.eat(oa.name) && this.match(oa.colon);
      }
      tsTryParseIndexSignature(e5) {
        if (!this.match(oa.bracketL) || !this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))
          return;
        this.expect(oa.bracketL);
        const t3 = this.parseIdentifier();
        t3.typeAnnotation = this.tsParseTypeAnnotation(), this.resetEndLocation(t3), this.expect(oa.bracketR), e5.parameters = [t3];
        const r4 = this.tsTryParseTypeAnnotation();
        return r4 && (e5.typeAnnotation = r4), this.tsParseTypeMemberSemicolon(), this.finishNode(e5, "TSIndexSignature");
      }
      tsParsePropertyOrMethodSignature(e5, t3) {
        this.eat(oa.question) && (e5.optional = true);
        const r4 = e5;
        if (this.match(oa.parenL) || this.isRelational("<")) {
          t3 && this.raise(e5.start, ml.ReadonlyForMethodSignature);
          const s4 = r4;
          if (s4.kind && this.isRelational("<") && this.raise(this.state.pos, ml.AccesorCannotHaveTypeParameters), this.tsFillSignature(oa.colon, s4), this.tsParseTypeMemberSemicolon(), s4.kind === "get")
            s4.parameters.length > 0 && (this.raise(this.state.pos, Ea.BadGetterArity), this.isThisParam(s4.parameters[0]) && this.raise(this.state.pos, ml.AccesorCannotDeclareThisParameter));
          else if (s4.kind === "set") {
            if (s4.parameters.length !== 1)
              this.raise(this.state.pos, Ea.BadSetterArity);
            else {
              const e6 = s4.parameters[0];
              this.isThisParam(e6) && this.raise(this.state.pos, ml.AccesorCannotDeclareThisParameter), e6.type === "Identifier" && e6.optional && this.raise(this.state.pos, ml.SetAccesorCannotHaveOptionalParameter), e6.type === "RestElement" && this.raise(this.state.pos, ml.SetAccesorCannotHaveRestParameter);
            }
            s4.typeAnnotation && this.raise(s4.typeAnnotation.start, ml.SetAccesorCannotHaveReturnType);
          } else
            s4.kind = "method";
          return this.finishNode(s4, "TSMethodSignature");
        }
        {
          const e6 = r4;
          t3 && (e6.readonly = true);
          const s4 = this.tsTryParseTypeAnnotation();
          return s4 && (e6.typeAnnotation = s4), this.tsParseTypeMemberSemicolon(), this.finishNode(e6, "TSPropertySignature");
        }
      }
      tsParseTypeMember() {
        const e5 = this.startNode();
        if (this.match(oa.parenL) || this.isRelational("<"))
          return this.tsParseSignatureMember("TSCallSignatureDeclaration", e5);
        if (this.match(oa._new)) {
          const t4 = this.startNode();
          return this.next(), this.match(oa.parenL) || this.isRelational("<") ? this.tsParseSignatureMember("TSConstructSignatureDeclaration", e5) : (e5.key = this.createIdentifier(t4, "new"), this.tsParsePropertyOrMethodSignature(e5, false));
        }
        this.tsParseModifiers(e5, ["readonly"], ["declare", "abstract", "private", "protected", "public", "static", "override"], ml.InvalidModifierOnTypeMember);
        const t3 = this.tsTryParseIndexSignature(e5);
        return t3 || (this.parsePropertyName(e5, false), e5.computed || e5.key.type !== "Identifier" || e5.key.name !== "get" && e5.key.name !== "set" || !this.tsTokenCanFollowModifier() || (e5.kind = e5.key.name, this.parsePropertyName(e5, false)), this.tsParsePropertyOrMethodSignature(e5, !!e5.readonly));
      }
      tsParseTypeLiteral() {
        const e5 = this.startNode();
        return e5.members = this.tsParseObjectTypeMembers(), this.finishNode(e5, "TSTypeLiteral");
      }
      tsParseObjectTypeMembers() {
        this.expect(oa.braceL);
        const e5 = this.tsParseList("TypeMembers", this.tsParseTypeMember.bind(this));
        return this.expect(oa.braceR), e5;
      }
      tsIsStartOfMappedType() {
        return this.next(), this.eat(oa.plusMin) ? this.isContextual("readonly") : (this.isContextual("readonly") && this.next(), !!this.match(oa.bracketL) && (this.next(), !!this.tsIsIdentifier() && (this.next(), this.match(oa._in))));
      }
      tsParseMappedTypeParameter() {
        const e5 = this.startNode();
        return e5.name = this.parseIdentifierName(e5.start), e5.constraint = this.tsExpectThenParseType(oa._in), this.finishNode(e5, "TSTypeParameter");
      }
      tsParseMappedType() {
        const e5 = this.startNode();
        return this.expect(oa.braceL), this.match(oa.plusMin) ? (e5.readonly = this.state.value, this.next(), this.expectContextual("readonly")) : this.eatContextual("readonly") && (e5.readonly = true), this.expect(oa.bracketL), e5.typeParameter = this.tsParseMappedTypeParameter(), e5.nameType = this.eatContextual("as") ? this.tsParseType() : null, this.expect(oa.bracketR), this.match(oa.plusMin) ? (e5.optional = this.state.value, this.next(), this.expect(oa.question)) : this.eat(oa.question) && (e5.optional = true), e5.typeAnnotation = this.tsTryParseType(), this.semicolon(), this.expect(oa.braceR), this.finishNode(e5, "TSMappedType");
      }
      tsParseTupleType() {
        const e5 = this.startNode();
        e5.elementTypes = this.tsParseBracketedList("TupleElementTypes", this.tsParseTupleElementType.bind(this), true, false);
        let t3 = false, r4 = null;
        return e5.elementTypes.forEach((e6) => {
          var s4;
          let {type: i4} = e6;
          !t3 || i4 === "TSRestType" || i4 === "TSOptionalType" || i4 === "TSNamedTupleMember" && e6.optional || this.raise(e6.start, ml.OptionalTypeBeforeRequired), t3 = t3 || i4 === "TSNamedTupleMember" && e6.optional || i4 === "TSOptionalType", i4 === "TSRestType" && (i4 = (e6 = e6.typeAnnotation).type);
          const n4 = i4 === "TSNamedTupleMember";
          r4 = (s4 = r4) != null ? s4 : n4, r4 !== n4 && this.raise(e6.start, ml.MixedLabeledAndUnlabeledElements);
        }), this.finishNode(e5, "TSTupleType");
      }
      tsParseTupleElementType() {
        const {start: e5, startLoc: t3} = this.state, r4 = this.eat(oa.ellipsis);
        let s4 = this.tsParseType();
        const i4 = this.eat(oa.question);
        if (this.eat(oa.colon)) {
          const e6 = this.startNodeAtNode(s4);
          e6.optional = i4, s4.type !== "TSTypeReference" || s4.typeParameters || s4.typeName.type !== "Identifier" ? (this.raise(s4.start, ml.InvalidTupleMemberLabel), e6.label = s4) : e6.label = s4.typeName, e6.elementType = this.tsParseType(), s4 = this.finishNode(e6, "TSNamedTupleMember");
        } else if (i4) {
          const e6 = this.startNodeAtNode(s4);
          e6.typeAnnotation = s4, s4 = this.finishNode(e6, "TSOptionalType");
        }
        if (r4) {
          const r5 = this.startNodeAt(e5, t3);
          r5.typeAnnotation = s4, s4 = this.finishNode(r5, "TSRestType");
        }
        return s4;
      }
      tsParseParenthesizedType() {
        const e5 = this.startNode();
        return this.expect(oa.parenL), e5.typeAnnotation = this.tsParseType(), this.expect(oa.parenR), this.finishNode(e5, "TSParenthesizedType");
      }
      tsParseFunctionOrConstructorType(e5, t3) {
        const r4 = this.startNode();
        return e5 === "TSConstructorType" && (r4.abstract = !!t3, t3 && this.next(), this.next()), this.tsFillSignature(oa.arrow, r4), this.finishNode(r4, e5);
      }
      tsParseLiteralTypeNode() {
        const e5 = this.startNode();
        return e5.literal = (() => {
          switch (this.state.type) {
            case oa.num:
            case oa.bigint:
            case oa.string:
            case oa._true:
            case oa._false:
              return this.parseExprAtom();
            default:
              throw this.unexpected();
          }
        })(), this.finishNode(e5, "TSLiteralType");
      }
      tsParseTemplateLiteralType() {
        const e5 = this.startNode();
        return e5.literal = this.parseTemplate(false), this.finishNode(e5, "TSLiteralType");
      }
      parseTemplateSubstitution() {
        return this.state.inType ? this.tsParseType() : super.parseTemplateSubstitution();
      }
      tsParseThisTypeOrThisTypePredicate() {
        const e5 = this.tsParseThisTypeNode();
        return this.isContextual("is") && !this.hasPrecedingLineBreak() ? this.tsParseThisTypePredicate(e5) : e5;
      }
      tsParseNonArrayType() {
        switch (this.state.type) {
          case oa.name:
          case oa._void:
          case oa._null: {
            const e5 = this.match(oa._void) ? "TSVoidKeyword" : this.match(oa._null) ? "TSNullKeyword" : yl(this.state.value);
            if (e5 !== void 0 && this.lookaheadCharCode() !== 46) {
              const t3 = this.startNode();
              return this.next(), this.finishNode(t3, e5);
            }
            return this.tsParseTypeReference();
          }
          case oa.string:
          case oa.num:
          case oa.bigint:
          case oa._true:
          case oa._false:
            return this.tsParseLiteralTypeNode();
          case oa.plusMin:
            if (this.state.value === "-") {
              const e5 = this.startNode(), t3 = this.lookahead();
              if (t3.type !== oa.num && t3.type !== oa.bigint)
                throw this.unexpected();
              return e5.literal = this.parseMaybeUnary(), this.finishNode(e5, "TSLiteralType");
            }
            break;
          case oa._this:
            return this.tsParseThisTypeOrThisTypePredicate();
          case oa._typeof:
            return this.tsParseTypeQuery();
          case oa._import:
            return this.tsParseImportType();
          case oa.braceL:
            return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();
          case oa.bracketL:
            return this.tsParseTupleType();
          case oa.parenL:
            return this.tsParseParenthesizedType();
          case oa.backQuote:
            return this.tsParseTemplateLiteralType();
        }
        throw this.unexpected();
      }
      tsParseArrayTypeOrHigher() {
        let e5 = this.tsParseNonArrayType();
        for (; !this.hasPrecedingLineBreak() && this.eat(oa.bracketL); )
          if (this.match(oa.bracketR)) {
            const t3 = this.startNodeAtNode(e5);
            t3.elementType = e5, this.expect(oa.bracketR), e5 = this.finishNode(t3, "TSArrayType");
          } else {
            const t3 = this.startNodeAtNode(e5);
            t3.objectType = e5, t3.indexType = this.tsParseType(), this.expect(oa.bracketR), e5 = this.finishNode(t3, "TSIndexedAccessType");
          }
        return e5;
      }
      tsParseTypeOperator(e5) {
        const t3 = this.startNode();
        return this.expectContextual(e5), t3.operator = e5, t3.typeAnnotation = this.tsParseTypeOperatorOrHigher(), e5 === "readonly" && this.tsCheckTypeAnnotationForReadOnly(t3), this.finishNode(t3, "TSTypeOperator");
      }
      tsCheckTypeAnnotationForReadOnly(e5) {
        switch (e5.typeAnnotation.type) {
          case "TSTupleType":
          case "TSArrayType":
            return;
          default:
            this.raise(e5.start, ml.UnexpectedReadonly);
        }
      }
      tsParseInferType() {
        const e5 = this.startNode();
        this.expectContextual("infer");
        const t3 = this.startNode();
        return t3.name = this.parseIdentifierName(t3.start), e5.typeParameter = this.finishNode(t3, "TSTypeParameter"), this.finishNode(e5, "TSInferType");
      }
      tsParseTypeOperatorOrHigher() {
        const e5 = ["keyof", "unique", "readonly"].find((e6) => this.isContextual(e6));
        return e5 ? this.tsParseTypeOperator(e5) : this.isContextual("infer") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();
      }
      tsParseUnionOrIntersectionType(e5, t3, r4) {
        const s4 = this.startNode(), i4 = this.eat(r4), n4 = [];
        do {
          n4.push(t3());
        } while (this.eat(r4));
        return n4.length !== 1 || i4 ? (s4.types = n4, this.finishNode(s4, e5)) : n4[0];
      }
      tsParseIntersectionTypeOrHigher() {
        return this.tsParseUnionOrIntersectionType("TSIntersectionType", this.tsParseTypeOperatorOrHigher.bind(this), oa.bitwiseAND);
      }
      tsParseUnionTypeOrHigher() {
        return this.tsParseUnionOrIntersectionType("TSUnionType", this.tsParseIntersectionTypeOrHigher.bind(this), oa.bitwiseOR);
      }
      tsIsStartOfFunctionType() {
        return !!this.isRelational("<") || this.match(oa.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));
      }
      tsSkipParameterStart() {
        if (this.match(oa.name) || this.match(oa._this))
          return this.next(), true;
        if (this.match(oa.braceL)) {
          let e5 = 1;
          for (this.next(); e5 > 0; )
            this.match(oa.braceL) ? ++e5 : this.match(oa.braceR) && --e5, this.next();
          return true;
        }
        if (this.match(oa.bracketL)) {
          let e5 = 1;
          for (this.next(); e5 > 0; )
            this.match(oa.bracketL) ? ++e5 : this.match(oa.bracketR) && --e5, this.next();
          return true;
        }
        return false;
      }
      tsIsUnambiguouslyStartOfFunctionType() {
        if (this.next(), this.match(oa.parenR) || this.match(oa.ellipsis))
          return true;
        if (this.tsSkipParameterStart()) {
          if (this.match(oa.colon) || this.match(oa.comma) || this.match(oa.question) || this.match(oa.eq))
            return true;
          if (this.match(oa.parenR) && (this.next(), this.match(oa.arrow)))
            return true;
        }
        return false;
      }
      tsParseTypeOrTypePredicateAnnotation(e5) {
        return this.tsInType(() => {
          const t3 = this.startNode();
          this.expect(e5);
          const r4 = this.startNode(), s4 = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));
          if (s4 && this.match(oa._this)) {
            let e6 = this.tsParseThisTypeOrThisTypePredicate();
            return e6.type === "TSThisType" ? (r4.parameterName = e6, r4.asserts = true, e6 = this.finishNode(r4, "TSTypePredicate")) : (this.resetStartLocationFromNode(e6, r4), e6.asserts = true), t3.typeAnnotation = e6, this.finishNode(t3, "TSTypeAnnotation");
          }
          const i4 = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));
          if (!i4)
            return s4 ? (r4.parameterName = this.parseIdentifier(), r4.asserts = s4, t3.typeAnnotation = this.finishNode(r4, "TSTypePredicate"), this.finishNode(t3, "TSTypeAnnotation")) : this.tsParseTypeAnnotation(false, t3);
          const n4 = this.tsParseTypeAnnotation(false);
          return r4.parameterName = i4, r4.typeAnnotation = n4, r4.asserts = s4, t3.typeAnnotation = this.finishNode(r4, "TSTypePredicate"), this.finishNode(t3, "TSTypeAnnotation");
        });
      }
      tsTryParseTypeOrTypePredicateAnnotation() {
        return this.match(oa.colon) ? this.tsParseTypeOrTypePredicateAnnotation(oa.colon) : void 0;
      }
      tsTryParseTypeAnnotation() {
        return this.match(oa.colon) ? this.tsParseTypeAnnotation() : void 0;
      }
      tsTryParseType() {
        return this.tsEatThenParseType(oa.colon);
      }
      tsParseTypePredicatePrefix() {
        const e5 = this.parseIdentifier();
        if (this.isContextual("is") && !this.hasPrecedingLineBreak())
          return this.next(), e5;
      }
      tsParseTypePredicateAsserts() {
        if (!this.match(oa.name) || this.state.value !== "asserts" || this.hasPrecedingLineBreak())
          return false;
        const e5 = this.state.containsEsc;
        return this.next(), !(!this.match(oa.name) && !this.match(oa._this) || (e5 && this.raise(this.state.lastTokStart, Ea.InvalidEscapedReservedWord, "asserts"), 0));
      }
      tsParseTypeAnnotation(e5, t3) {
        return e5 === void 0 && (e5 = true), t3 === void 0 && (t3 = this.startNode()), this.tsInType(() => {
          e5 && this.expect(oa.colon), t3.typeAnnotation = this.tsParseType();
        }), this.finishNode(t3, "TSTypeAnnotation");
      }
      tsParseType() {
        fl(this.state.inType);
        const e5 = this.tsParseNonConditionalType();
        if (this.hasPrecedingLineBreak() || !this.eat(oa._extends))
          return e5;
        const t3 = this.startNodeAtNode(e5);
        return t3.checkType = e5, t3.extendsType = this.tsParseNonConditionalType(), this.expect(oa.question), t3.trueType = this.tsParseType(), this.expect(oa.colon), t3.falseType = this.tsParseType(), this.finishNode(t3, "TSConditionalType");
      }
      isAbstractConstructorSignature() {
        return this.isContextual("abstract") && this.lookahead().type === oa._new;
      }
      tsParseNonConditionalType() {
        return this.tsIsStartOfFunctionType() ? this.tsParseFunctionOrConstructorType("TSFunctionType") : this.match(oa._new) ? this.tsParseFunctionOrConstructorType("TSConstructorType") : this.isAbstractConstructorSignature() ? this.tsParseFunctionOrConstructorType("TSConstructorType", true) : this.tsParseUnionTypeOrHigher();
      }
      tsParseTypeAssertion() {
        const e5 = this.startNode(), t3 = this.tsTryNextParseConstantContext();
        return e5.typeAnnotation = t3 || this.tsNextThenParseType(), this.expectRelational(">"), e5.expression = this.parseMaybeUnary(), this.finishNode(e5, "TSTypeAssertion");
      }
      tsParseHeritageClause(e5) {
        const t3 = this.state.start, r4 = this.tsParseDelimitedList("HeritageClauseElement", this.tsParseExpressionWithTypeArguments.bind(this));
        return r4.length || this.raise(t3, ml.EmptyHeritageClauseType, e5), r4;
      }
      tsParseExpressionWithTypeArguments() {
        const e5 = this.startNode();
        return e5.expression = this.tsParseEntityName(false), this.isRelational("<") && (e5.typeParameters = this.tsParseTypeArguments()), this.finishNode(e5, "TSExpressionWithTypeArguments");
      }
      tsParseInterfaceDeclaration(e5) {
        e5.id = this.parseIdentifier(), this.checkLVal(e5.id, "typescript interface declaration", Eo), e5.typeParameters = this.tsTryParseTypeParameters(), this.eat(oa._extends) && (e5.extends = this.tsParseHeritageClause("extends"));
        const t3 = this.startNode();
        return t3.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this)), e5.body = this.finishNode(t3, "TSInterfaceBody"), this.finishNode(e5, "TSInterfaceDeclaration");
      }
      tsParseTypeAliasDeclaration(e5) {
        return e5.id = this.parseIdentifier(), this.checkLVal(e5.id, "typescript type alias", vo), e5.typeParameters = this.tsTryParseTypeParameters(), e5.typeAnnotation = this.tsInType(() => {
          if (this.expect(oa.eq), this.isContextual("intrinsic") && this.lookahead().type !== oa.dot) {
            const e6 = this.startNode();
            return this.next(), this.finishNode(e6, "TSIntrinsicKeyword");
          }
          return this.tsParseType();
        }), this.semicolon(), this.finishNode(e5, "TSTypeAliasDeclaration");
      }
      tsInNoContext(e5) {
        const t3 = this.state.context;
        this.state.context = [t3[0]];
        try {
          return e5();
        } finally {
          this.state.context = t3;
        }
      }
      tsInType(e5) {
        const t3 = this.state.inType;
        this.state.inType = true;
        try {
          return e5();
        } finally {
          this.state.inType = t3;
        }
      }
      tsEatThenParseType(e5) {
        return this.match(e5) ? this.tsNextThenParseType() : void 0;
      }
      tsExpectThenParseType(e5) {
        return this.tsDoThenParseType(() => this.expect(e5));
      }
      tsNextThenParseType() {
        return this.tsDoThenParseType(() => this.next());
      }
      tsDoThenParseType(e5) {
        return this.tsInType(() => (e5(), this.tsParseType()));
      }
      tsParseEnumMember() {
        const e5 = this.startNode();
        return e5.id = this.match(oa.string) ? this.parseExprAtom() : this.parseIdentifier(true), this.eat(oa.eq) && (e5.initializer = this.parseMaybeAssignAllowIn()), this.finishNode(e5, "TSEnumMember");
      }
      tsParseEnumDeclaration(e5, t3) {
        return t3 && (e5.const = true), e5.id = this.parseIdentifier(), this.checkLVal(e5.id, "typescript enum declaration", t3 ? Co : So), this.expect(oa.braceL), e5.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this)), this.expect(oa.braceR), this.finishNode(e5, "TSEnumDeclaration");
      }
      tsParseModuleBlock() {
        const e5 = this.startNode();
        return this.scope.enter(Ha), this.expect(oa.braceL), this.parseBlockOrModuleBlockBody(e5.body = [], void 0, true, oa.braceR), this.scope.exit(), this.finishNode(e5, "TSModuleBlock");
      }
      tsParseModuleOrNamespaceDeclaration(e5, t3) {
        if (t3 === void 0 && (t3 = false), e5.id = this.parseIdentifier(), t3 || this.checkLVal(e5.id, "module or namespace declaration", Po), this.eat(oa.dot)) {
          const t4 = this.startNode();
          this.tsParseModuleOrNamespaceDeclaration(t4, true), e5.body = t4;
        } else
          this.scope.enter(ro), this.prodParam.enter(al), e5.body = this.tsParseModuleBlock(), this.prodParam.exit(), this.scope.exit();
        return this.finishNode(e5, "TSModuleDeclaration");
      }
      tsParseAmbientExternalModuleDeclaration(e5) {
        return this.isContextual("global") ? (e5.global = true, e5.id = this.parseIdentifier()) : this.match(oa.string) ? e5.id = this.parseExprAtom() : this.unexpected(), this.match(oa.braceL) ? (this.scope.enter(ro), this.prodParam.enter(al), e5.body = this.tsParseModuleBlock(), this.prodParam.exit(), this.scope.exit()) : this.semicolon(), this.finishNode(e5, "TSModuleDeclaration");
      }
      tsParseImportEqualsDeclaration(e5, t3) {
        e5.isExport = t3 || false, e5.id = this.parseIdentifier(), this.checkLVal(e5.id, "import equals declaration", go2), this.expect(oa.eq);
        const r4 = this.tsParseModuleReference();
        return e5.importKind === "type" && r4.type !== "TSExternalModuleReference" && this.raise(r4.start, ml.ImportAliasHasImportType), e5.moduleReference = r4, this.semicolon(), this.finishNode(e5, "TSImportEqualsDeclaration");
      }
      tsIsExternalModuleReference() {
        return this.isContextual("require") && this.lookaheadCharCode() === 40;
      }
      tsParseModuleReference() {
        return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);
      }
      tsParseExternalModuleReference() {
        const e5 = this.startNode();
        if (this.expectContextual("require"), this.expect(oa.parenL), !this.match(oa.string))
          throw this.unexpected();
        return e5.expression = this.parseExprAtom(), this.expect(oa.parenR), this.finishNode(e5, "TSExternalModuleReference");
      }
      tsLookAhead(e5) {
        const t3 = this.state.clone(), r4 = e5();
        return this.state = t3, r4;
      }
      tsTryParseAndCatch(e5) {
        const t3 = this.tryParse((t4) => e5() || t4());
        if (!t3.aborted && t3.node)
          return t3.error && (this.state = t3.failState), t3.node;
      }
      tsTryParse(e5) {
        const t3 = this.state.clone(), r4 = e5();
        return r4 !== void 0 && r4 !== false ? r4 : void (this.state = t3);
      }
      tsTryParseDeclare(e5) {
        if (this.isLineTerminator())
          return;
        let t3, r4 = this.state.type;
        return this.isContextual("let") && (r4 = oa._var, t3 = "let"), this.tsInAmbientContext(() => {
          switch (r4) {
            case oa._function:
              return e5.declare = true, this.parseFunctionStatement(e5, false, true);
            case oa._class:
              return e5.declare = true, this.parseClass(e5, true, false);
            case oa._const:
              if (this.match(oa._const) && this.isLookaheadContextual("enum"))
                return this.expect(oa._const), this.expectContextual("enum"), this.tsParseEnumDeclaration(e5, true);
            case oa._var:
              return t3 = t3 || this.state.value, this.parseVarStatement(e5, t3);
            case oa.name: {
              const t4 = this.state.value;
              return t4 === "global" ? this.tsParseAmbientExternalModuleDeclaration(e5) : this.tsParseDeclaration(e5, t4, true);
            }
          }
        });
      }
      tsTryParseExportDeclaration() {
        return this.tsParseDeclaration(this.startNode(), this.state.value, true);
      }
      tsParseExpressionStatement(e5, t3) {
        switch (t3.name) {
          case "declare": {
            const t4 = this.tsTryParseDeclare(e5);
            if (t4)
              return t4.declare = true, t4;
            break;
          }
          case "global":
            if (this.match(oa.braceL)) {
              this.scope.enter(ro), this.prodParam.enter(al);
              const r4 = e5;
              return r4.global = true, r4.id = t3, r4.body = this.tsParseModuleBlock(), this.scope.exit(), this.prodParam.exit(), this.finishNode(r4, "TSModuleDeclaration");
            }
            break;
          default:
            return this.tsParseDeclaration(e5, t3.name, false);
        }
      }
      tsParseDeclaration(e5, t3, r4) {
        switch (t3) {
          case "abstract":
            if (this.tsCheckLineTerminator(r4) && (this.match(oa._class) || this.match(oa.name)))
              return this.tsParseAbstractDeclaration(e5);
            break;
          case "enum":
            if (r4 || this.match(oa.name))
              return r4 && this.next(), this.tsParseEnumDeclaration(e5, false);
            break;
          case "interface":
            if (this.tsCheckLineTerminator(r4) && this.match(oa.name))
              return this.tsParseInterfaceDeclaration(e5);
            break;
          case "module":
            if (this.tsCheckLineTerminator(r4)) {
              if (this.match(oa.string))
                return this.tsParseAmbientExternalModuleDeclaration(e5);
              if (this.match(oa.name))
                return this.tsParseModuleOrNamespaceDeclaration(e5);
            }
            break;
          case "namespace":
            if (this.tsCheckLineTerminator(r4) && this.match(oa.name))
              return this.tsParseModuleOrNamespaceDeclaration(e5);
            break;
          case "type":
            if (this.tsCheckLineTerminator(r4) && this.match(oa.name))
              return this.tsParseTypeAliasDeclaration(e5);
        }
      }
      tsCheckLineTerminator(e5) {
        return e5 ? !this.hasFollowingLineBreak() && (this.next(), true) : !this.isLineTerminator();
      }
      tsTryParseGenericAsyncArrowFunction(e5, t3) {
        if (!this.isRelational("<"))
          return;
        const r4 = this.state.maybeInArrowParameters;
        this.state.maybeInArrowParameters = true;
        const s4 = this.tsTryParseAndCatch(() => {
          const r5 = this.startNodeAt(e5, t3);
          return r5.typeParameters = this.tsParseTypeParameters(), super.parseFunctionParams(r5), r5.returnType = this.tsTryParseTypeOrTypePredicateAnnotation(), this.expect(oa.arrow), r5;
        });
        return this.state.maybeInArrowParameters = r4, s4 ? this.parseArrowExpression(s4, null, true) : void 0;
      }
      tsParseTypeArguments() {
        const e5 = this.startNode();
        return e5.params = this.tsInType(() => this.tsInNoContext(() => (this.expectRelational("<"), this.tsParseDelimitedList("TypeParametersOrArguments", this.tsParseType.bind(this))))), e5.params.length === 0 && this.raise(e5.start, ml.EmptyTypeArguments), this.state.exprAllowed = false, this.expectRelational(">"), this.finishNode(e5, "TSTypeParameterInstantiation");
      }
      tsIsDeclarationStart() {
        if (this.match(oa.name))
          switch (this.state.value) {
            case "abstract":
            case "declare":
            case "enum":
            case "interface":
            case "module":
            case "namespace":
            case "type":
              return true;
          }
        return false;
      }
      isExportDefaultSpecifier() {
        return !this.tsIsDeclarationStart() && super.isExportDefaultSpecifier();
      }
      parseAssignableListItem(e5, t3) {
        const r4 = this.state.start, s4 = this.state.startLoc;
        let i4, n4 = false;
        e5 !== void 0 && (i4 = this.parseAccessModifier(), n4 = !!this.tsParseModifier(["readonly"]), e5 === false && (i4 || n4) && this.raise(r4, ml.UnexpectedParameterModifier));
        const a4 = this.parseMaybeDefault();
        this.parseAssignableListItemTypes(a4);
        const o4 = this.parseMaybeDefault(a4.start, a4.loc.start, a4);
        if (i4 || n4) {
          const e6 = this.startNodeAt(r4, s4);
          return t3.length && (e6.decorators = t3), i4 && (e6.accessibility = i4), n4 && (e6.readonly = n4), o4.type !== "Identifier" && o4.type !== "AssignmentPattern" && this.raise(e6.start, ml.UnsupportedParameterPropertyKind), e6.parameter = o4, this.finishNode(e6, "TSParameterProperty");
        }
        return t3.length && (a4.decorators = t3), o4;
      }
      parseFunctionBodyAndFinish(e5, t3, r4) {
        r4 === void 0 && (r4 = false), this.match(oa.colon) && (e5.returnType = this.tsParseTypeOrTypePredicateAnnotation(oa.colon));
        const s4 = t3 === "FunctionDeclaration" ? "TSDeclareFunction" : t3 === "ClassMethod" ? "TSDeclareMethod" : void 0;
        s4 && !this.match(oa.braceL) && this.isLineTerminator() ? this.finishNode(e5, s4) : s4 === "TSDeclareFunction" && this.state.isAmbientContext && (this.raise(e5.start, ml.DeclareFunctionHasImplementation), e5.declare) ? super.parseFunctionBodyAndFinish(e5, s4, r4) : super.parseFunctionBodyAndFinish(e5, t3, r4);
      }
      registerFunctionStatementId(e5) {
        !e5.body && e5.id ? this.checkLVal(e5.id, "function name", Ao) : super.registerFunctionStatementId(...arguments);
      }
      tsCheckForInvalidTypeCasts(e5) {
        e5.forEach((e6) => {
          (e6 == null ? void 0 : e6.type) === "TSTypeCastExpression" && this.raise(e6.typeAnnotation.start, ml.UnexpectedTypeAnnotation);
        });
      }
      toReferencedList(e5, t3) {
        return this.tsCheckForInvalidTypeCasts(e5), e5;
      }
      parseArrayLike() {
        const e5 = super.parseArrayLike(...arguments);
        return e5.type === "ArrayExpression" && this.tsCheckForInvalidTypeCasts(e5.elements), e5;
      }
      parseSubscript(e5, t3, r4, s4, i4) {
        if (!this.hasPrecedingLineBreak() && this.match(oa.bang)) {
          this.state.exprAllowed = false, this.next();
          const s5 = this.startNodeAt(t3, r4);
          return s5.expression = e5, this.finishNode(s5, "TSNonNullExpression");
        }
        if (this.isRelational("<")) {
          const n4 = this.tsTryParseAndCatch(() => {
            if (!s4 && this.atPossibleAsyncArrow(e5)) {
              const e6 = this.tsTryParseGenericAsyncArrowFunction(t3, r4);
              if (e6)
                return e6;
            }
            const n5 = this.startNodeAt(t3, r4);
            n5.callee = e5;
            const a4 = this.tsParseTypeArguments();
            if (a4) {
              if (!s4 && this.eat(oa.parenL))
                return n5.arguments = this.parseCallExpressionArguments(oa.parenR, false), this.tsCheckForInvalidTypeCasts(n5.arguments), n5.typeParameters = a4, i4.optionalChainMember && (n5.optional = false), this.finishCallExpression(n5, i4.optionalChainMember);
              if (this.match(oa.backQuote)) {
                const s5 = this.parseTaggedTemplateExpression(e5, t3, r4, i4);
                return s5.typeParameters = a4, s5;
              }
            }
            this.unexpected();
          });
          if (n4)
            return n4;
        }
        return super.parseSubscript(e5, t3, r4, s4, i4);
      }
      parseNewArguments(e5) {
        if (this.isRelational("<")) {
          const t3 = this.tsTryParseAndCatch(() => {
            const e6 = this.tsParseTypeArguments();
            return this.match(oa.parenL) || this.unexpected(), e6;
          });
          t3 && (e5.typeParameters = t3);
        }
        super.parseNewArguments(e5);
      }
      parseExprOp(e5, t3, r4, s4) {
        if (dl(oa._in.binop) > s4 && !this.hasPrecedingLineBreak() && this.isContextual("as")) {
          const i4 = this.startNodeAt(t3, r4);
          i4.expression = e5;
          const n4 = this.tsTryNextParseConstantContext();
          return i4.typeAnnotation = n4 || this.tsNextThenParseType(), this.finishNode(i4, "TSAsExpression"), this.reScan_lt_gt(), this.parseExprOp(i4, t3, r4, s4);
        }
        return super.parseExprOp(e5, t3, r4, s4);
      }
      checkReservedWord(e5, t3, r4, s4) {
      }
      checkDuplicateExports() {
      }
      parseImport(e5) {
        if (e5.importKind = "value", this.match(oa.name) || this.match(oa.star) || this.match(oa.braceL)) {
          let t4 = this.lookahead();
          if (!this.isContextual("type") || t4.type === oa.comma || t4.type === oa.name && t4.value === "from" || t4.type === oa.eq || (e5.importKind = "type", this.next(), t4 = this.lookahead()), this.match(oa.name) && t4.type === oa.eq)
            return this.tsParseImportEqualsDeclaration(e5);
        }
        const t3 = super.parseImport(e5);
        return t3.importKind === "type" && t3.specifiers.length > 1 && t3.specifiers[0].type === "ImportDefaultSpecifier" && this.raise(t3.start, ml.TypeImportCannotSpecifyDefaultAndNamed), t3;
      }
      parseExport(e5) {
        if (this.match(oa._import))
          return this.next(), this.isContextual("type") && this.lookaheadCharCode() !== 61 ? (e5.importKind = "type", this.next()) : e5.importKind = "value", this.tsParseImportEqualsDeclaration(e5, true);
        if (this.eat(oa.eq)) {
          const t3 = e5;
          return t3.expression = this.parseExpression(), this.semicolon(), this.finishNode(t3, "TSExportAssignment");
        }
        if (this.eatContextual("as")) {
          const t3 = e5;
          return this.expectContextual("namespace"), t3.id = this.parseIdentifier(), this.semicolon(), this.finishNode(t3, "TSNamespaceExportDeclaration");
        }
        return this.isContextual("type") && this.lookahead().type === oa.braceL ? (this.next(), e5.exportKind = "type") : e5.exportKind = "value", super.parseExport(e5);
      }
      isAbstractClass() {
        return this.isContextual("abstract") && this.lookahead().type === oa._class;
      }
      parseExportDefaultExpression() {
        if (this.isAbstractClass()) {
          const e5 = this.startNode();
          return this.next(), e5.abstract = true, this.parseClass(e5, true, true), e5;
        }
        if (this.state.value === "interface") {
          const e5 = this.tsParseDeclaration(this.startNode(), this.state.value, true);
          if (e5)
            return e5;
        }
        return super.parseExportDefaultExpression();
      }
      parseStatementContent(e5, t3) {
        if (this.state.type === oa._const) {
          const e6 = this.lookahead();
          if (e6.type === oa.name && e6.value === "enum") {
            const e7 = this.startNode();
            return this.expect(oa._const), this.expectContextual("enum"), this.tsParseEnumDeclaration(e7, true);
          }
        }
        return super.parseStatementContent(e5, t3);
      }
      parseAccessModifier() {
        return this.tsParseModifier(["public", "protected", "private"]);
      }
      tsHasSomeModifiers(e5, t3) {
        return t3.some((t4) => gl(t4) ? e5.accessibility === t4 : !!e5[t4]);
      }
      parseClassMember(e5, t3, r4) {
        const s4 = ["declare", "private", "public", "protected", "override", "abstract", "readonly"];
        this.tsParseModifiers(t3, s4.concat(["static"]));
        const i4 = () => {
          const i5 = !!t3.static;
          i5 && this.eat(oa.braceL) ? (this.tsHasSomeModifiers(t3, s4) && this.raise(this.state.pos, ml.StaticBlockCannotHaveModifier), this.parseClassStaticBlock(e5, t3)) : this.parseClassMemberWithIsStatic(e5, t3, r4, i5);
        };
        t3.declare ? this.tsInAmbientContext(i4) : i4();
      }
      parseClassMemberWithIsStatic(e5, t3, r4, s4) {
        const i4 = this.tsTryParseIndexSignature(t3);
        if (i4)
          return e5.body.push(i4), t3.abstract && this.raise(t3.start, ml.IndexSignatureHasAbstract), t3.accessibility && this.raise(t3.start, ml.IndexSignatureHasAccessibility, t3.accessibility), t3.declare && this.raise(t3.start, ml.IndexSignatureHasDeclare), void (t3.override && this.raise(t3.start, ml.IndexSignatureHasOverride));
        !this.state.inAbstractClass && t3.abstract && this.raise(t3.start, ml.NonAbstractClassHasAbstractMethod), t3.override && (r4.hadSuperClass || this.raise(t3.start, ml.OverrideNotInSubClass)), super.parseClassMemberWithIsStatic(e5, t3, r4, s4);
      }
      parsePostMemberNameModifiers(e5) {
        this.eat(oa.question) && (e5.optional = true), e5.readonly && this.match(oa.parenL) && this.raise(e5.start, ml.ClassMethodHasReadonly), e5.declare && this.match(oa.parenL) && this.raise(e5.start, ml.ClassMethodHasDeclare);
      }
      parseExpressionStatement(e5, t3) {
        return (t3.type === "Identifier" ? this.tsParseExpressionStatement(e5, t3) : void 0) || super.parseExpressionStatement(e5, t3);
      }
      shouldParseExportDeclaration() {
        return !!this.tsIsDeclarationStart() || super.shouldParseExportDeclaration();
      }
      parseConditional(e5, t3, r4, s4) {
        if (!s4 || !this.match(oa.question))
          return super.parseConditional(e5, t3, r4, s4);
        const i4 = this.tryParse(() => super.parseConditional(e5, t3, r4));
        return i4.node ? (i4.error && (this.state = i4.failState), i4.node) : (s4.start = i4.error.pos || this.state.start, e5);
      }
      parseParenItem(e5, t3, r4) {
        if (e5 = super.parseParenItem(e5, t3, r4), this.eat(oa.question) && (e5.optional = true, this.resetEndLocation(e5)), this.match(oa.colon)) {
          const s4 = this.startNodeAt(t3, r4);
          return s4.expression = e5, s4.typeAnnotation = this.tsParseTypeAnnotation(), this.finishNode(s4, "TSTypeCastExpression");
        }
        return e5;
      }
      parseExportDeclaration(e5) {
        const t3 = this.state.start, r4 = this.state.startLoc, s4 = this.eatContextual("declare");
        if (s4 && (this.isContextual("declare") || !this.shouldParseExportDeclaration()))
          throw this.raise(this.state.start, ml.ExpectedAmbientAfterExportDeclare);
        let i4;
        return this.match(oa.name) && (i4 = this.tsTryParseExportDeclaration()), i4 || (i4 = super.parseExportDeclaration(e5)), i4 && (i4.type === "TSInterfaceDeclaration" || i4.type === "TSTypeAliasDeclaration" || s4) && (e5.exportKind = "type"), i4 && s4 && (this.resetStartLocation(i4, t3, r4), i4.declare = true), i4;
      }
      parseClassId(e5, t3, r4) {
        if ((!t3 || r4) && this.isContextual("implements"))
          return;
        super.parseClassId(e5, t3, r4, e5.declare ? Ao : yo);
        const s4 = this.tsTryParseTypeParameters();
        s4 && (e5.typeParameters = s4);
      }
      parseClassPropertyAnnotation(e5) {
        !e5.optional && this.eat(oa.bang) && (e5.definite = true);
        const t3 = this.tsTryParseTypeAnnotation();
        t3 && (e5.typeAnnotation = t3);
      }
      parseClassProperty(e5) {
        return this.parseClassPropertyAnnotation(e5), this.state.isAmbientContext && this.match(oa.eq) && this.raise(this.state.start, ml.DeclareClassFieldHasInitializer), super.parseClassProperty(e5);
      }
      parseClassPrivateProperty(e5) {
        return e5.abstract && this.raise(e5.start, ml.PrivateElementHasAbstract), e5.accessibility && this.raise(e5.start, ml.PrivateElementHasAccessibility, e5.accessibility), this.parseClassPropertyAnnotation(e5), super.parseClassPrivateProperty(e5);
      }
      pushClassMethod(e5, t3, r4, s4, i4, n4) {
        const a4 = this.tsTryParseTypeParameters();
        a4 && i4 && this.raise(a4.start, ml.ConstructorHasTypeParameters), !t3.declare || t3.kind !== "get" && t3.kind !== "set" || this.raise(t3.start, ml.DeclareAccessor, t3.kind), a4 && (t3.typeParameters = a4), super.pushClassMethod(e5, t3, r4, s4, i4, n4);
      }
      pushClassPrivateMethod(e5, t3, r4, s4) {
        const i4 = this.tsTryParseTypeParameters();
        i4 && (t3.typeParameters = i4), super.pushClassPrivateMethod(e5, t3, r4, s4);
      }
      parseClassSuper(e5) {
        super.parseClassSuper(e5), e5.superClass && this.isRelational("<") && (e5.superTypeParameters = this.tsParseTypeArguments()), this.eatContextual("implements") && (e5.implements = this.tsParseHeritageClause("implements"));
      }
      parseObjPropValue(e5) {
        const t3 = this.tsTryParseTypeParameters();
        t3 && (e5.typeParameters = t3);
        for (var r4 = arguments.length, s4 = new Array(r4 > 1 ? r4 - 1 : 0), i4 = 1; i4 < r4; i4++)
          s4[i4 - 1] = arguments[i4];
        super.parseObjPropValue(e5, ...s4);
      }
      parseFunctionParams(e5, t3) {
        const r4 = this.tsTryParseTypeParameters();
        r4 && (e5.typeParameters = r4), super.parseFunctionParams(e5, t3);
      }
      parseVarId(e5, t3) {
        super.parseVarId(e5, t3), e5.id.type === "Identifier" && this.eat(oa.bang) && (e5.definite = true);
        const r4 = this.tsTryParseTypeAnnotation();
        r4 && (e5.id.typeAnnotation = r4, this.resetEndLocation(e5.id));
      }
      parseAsyncArrowFromCallExpression(e5, t3) {
        return this.match(oa.colon) && (e5.returnType = this.tsParseTypeAnnotation()), super.parseAsyncArrowFromCallExpression(e5, t3);
      }
      parseMaybeAssign() {
        for (var e5 = arguments.length, t3 = new Array(e5), r4 = 0; r4 < e5; r4++)
          t3[r4] = arguments[r4];
        var s4, i4, n4, a4, o4, l3, c4;
        let u3, h4, p4, d4;
        if (this.hasPlugin("jsx") && (this.match(oa.jsxTagStart) || this.isRelational("<"))) {
          if (u3 = this.state.clone(), h4 = this.tryParse(() => super.parseMaybeAssign(...t3), u3), !h4.error)
            return h4.node;
          const {context: e6} = this.state;
          e6[e6.length - 1] === Ca.j_oTag ? e6.length -= 2 : e6[e6.length - 1] === Ca.j_expr && (e6.length -= 1);
        }
        if (!((s4 = h4) != null && s4.error || this.isRelational("<")))
          return super.parseMaybeAssign(...t3);
        u3 = u3 || this.state.clone();
        const f4 = this.tryParse((e6) => {
          var r5, s5;
          d4 = this.tsParseTypeParameters();
          const i5 = super.parseMaybeAssign(...t3);
          return (i5.type !== "ArrowFunctionExpression" || (r5 = i5.extra) != null && r5.parenthesized) && e6(), ((s5 = d4) == null ? void 0 : s5.params.length) !== 0 && this.resetStartLocationFromNode(i5, d4), i5.typeParameters = d4, i5;
        }, u3);
        if (!f4.error && !f4.aborted)
          return f4.node;
        if (!h4 && (fl(!this.hasPlugin("jsx")), p4 = this.tryParse(() => super.parseMaybeAssign(...t3), u3), !p4.error))
          return p4.node;
        if ((i4 = h4) != null && i4.node)
          return this.state = h4.failState, h4.node;
        if (f4.node)
          return this.state = f4.failState, f4.node;
        if ((n4 = p4) != null && n4.node)
          return this.state = p4.failState, p4.node;
        if ((a4 = h4) != null && a4.thrown)
          throw h4.error;
        if (f4.thrown)
          throw f4.error;
        if ((o4 = p4) != null && o4.thrown)
          throw p4.error;
        throw ((l3 = h4) == null ? void 0 : l3.error) || f4.error || ((c4 = p4) == null ? void 0 : c4.error);
      }
      parseMaybeUnary(e5) {
        return !this.hasPlugin("jsx") && this.isRelational("<") ? this.tsParseTypeAssertion() : super.parseMaybeUnary(e5);
      }
      parseArrow(e5) {
        if (this.match(oa.colon)) {
          const t3 = this.tryParse((e6) => {
            const t4 = this.tsParseTypeOrTypePredicateAnnotation(oa.colon);
            return !this.canInsertSemicolon() && this.match(oa.arrow) || e6(), t4;
          });
          if (t3.aborted)
            return;
          t3.thrown || (t3.error && (this.state = t3.failState), e5.returnType = t3.node);
        }
        return super.parseArrow(e5);
      }
      parseAssignableListItemTypes(e5) {
        this.eat(oa.question) && (e5.type === "Identifier" || this.state.isAmbientContext || this.state.inType || this.raise(e5.start, ml.PatternIsOptional), e5.optional = true);
        const t3 = this.tsTryParseTypeAnnotation();
        return t3 && (e5.typeAnnotation = t3), this.resetEndLocation(e5), e5;
      }
      toAssignable(e5, t3) {
        switch (t3 === void 0 && (t3 = false), e5.type) {
          case "TSTypeCastExpression":
            return super.toAssignable(this.typeCastToParameter(e5), t3);
          case "TSParameterProperty":
            return super.toAssignable(e5, t3);
          case "ParenthesizedExpression":
            return this.toAssignableParenthesizedExpression(e5, t3);
          case "TSAsExpression":
          case "TSNonNullExpression":
          case "TSTypeAssertion":
            return e5.expression = this.toAssignable(e5.expression, t3), e5;
          default:
            return super.toAssignable(e5, t3);
        }
      }
      toAssignableParenthesizedExpression(e5, t3) {
        switch (e5.expression.type) {
          case "TSAsExpression":
          case "TSNonNullExpression":
          case "TSTypeAssertion":
          case "ParenthesizedExpression":
            return e5.expression = this.toAssignable(e5.expression, t3), e5;
          default:
            return super.toAssignable(e5, t3);
        }
      }
      checkLVal(e5, t3) {
        for (var r4, s4 = arguments.length, i4 = new Array(s4 > 2 ? s4 - 2 : 0), n4 = 2; n4 < s4; n4++)
          i4[n4 - 2] = arguments[n4];
        switch (e5.type) {
          case "TSTypeCastExpression":
            return;
          case "TSParameterProperty":
            return void this.checkLVal(e5.parameter, "parameter property", ...i4);
          case "TSAsExpression":
          case "TSTypeAssertion":
            if (!(i4[0] || t3 === "parenthesized expression" || (r4 = e5.extra) != null && r4.parenthesized)) {
              this.raise(e5.start, Ea.InvalidLhs, t3);
              break;
            }
            return void this.checkLVal(e5.expression, "parenthesized expression", ...i4);
          case "TSNonNullExpression":
            return void this.checkLVal(e5.expression, t3, ...i4);
          default:
            return void super.checkLVal(e5, t3, ...i4);
        }
      }
      parseBindingAtom() {
        switch (this.state.type) {
          case oa._this:
            return this.parseIdentifier(true);
          default:
            return super.parseBindingAtom();
        }
      }
      parseMaybeDecoratorArguments(e5) {
        if (this.isRelational("<")) {
          const t3 = this.tsParseTypeArguments();
          if (this.match(oa.parenL)) {
            const r4 = super.parseMaybeDecoratorArguments(e5);
            return r4.typeParameters = t3, r4;
          }
          this.unexpected(this.state.start, oa.parenL);
        }
        return super.parseMaybeDecoratorArguments(e5);
      }
      checkCommaAfterRest(e5) {
        this.state.isAmbientContext && this.match(oa.comma) && this.lookaheadCharCode() === e5 ? this.next() : super.checkCommaAfterRest(e5);
      }
      isClassMethod() {
        return this.isRelational("<") || super.isClassMethod();
      }
      isClassProperty() {
        return this.match(oa.bang) || this.match(oa.colon) || super.isClassProperty();
      }
      parseMaybeDefault() {
        const e5 = super.parseMaybeDefault(...arguments);
        return e5.type === "AssignmentPattern" && e5.typeAnnotation && e5.right.start < e5.typeAnnotation.start && this.raise(e5.typeAnnotation.start, ml.TypeAnnotationAfterAssign), e5;
      }
      getTokenFromCode(e5) {
        return !this.state.inType || e5 !== 62 && e5 !== 60 ? super.getTokenFromCode(e5) : this.finishOp(oa.relational, 1);
      }
      reScan_lt_gt() {
        if (this.match(oa.relational)) {
          const e5 = this.input.charCodeAt(this.state.start);
          e5 !== 60 && e5 !== 62 || (this.state.pos -= 1, this.readToken_lt_gt(e5));
        }
      }
      toAssignableList(e5) {
        for (let t3 = 0; t3 < e5.length; t3++) {
          const r4 = e5[t3];
          if (r4)
            switch (r4.type) {
              case "TSTypeCastExpression":
                e5[t3] = this.typeCastToParameter(r4);
                break;
              case "TSAsExpression":
              case "TSTypeAssertion":
                this.state.maybeInArrowParameters ? this.raise(r4.start, ml.UnexpectedTypeCastInParameter) : e5[t3] = this.typeCastToParameter(r4);
            }
        }
        return super.toAssignableList(...arguments);
      }
      typeCastToParameter(e5) {
        return e5.expression.typeAnnotation = e5.typeAnnotation, this.resetEndLocation(e5.expression, e5.typeAnnotation.end, e5.typeAnnotation.loc.end), e5.expression;
      }
      shouldParseArrow() {
        return this.match(oa.colon) || super.shouldParseArrow();
      }
      shouldParseAsyncArrow() {
        return this.match(oa.colon) || super.shouldParseAsyncArrow();
      }
      canHaveLeadingDecorator() {
        return super.canHaveLeadingDecorator() || this.isAbstractClass();
      }
      jsxParseOpeningElementAfterName(e5) {
        if (this.isRelational("<")) {
          const t3 = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());
          t3 && (e5.typeParameters = t3);
        }
        return super.jsxParseOpeningElementAfterName(e5);
      }
      getGetterSetterExpectedParamCount(e5) {
        const t3 = super.getGetterSetterExpectedParamCount(e5), r4 = this.getObjectOrClassMethodParams(e5)[0];
        return r4 && this.isThisParam(r4) ? t3 + 1 : t3;
      }
      parseCatchClauseParam() {
        const e5 = super.parseCatchClauseParam(), t3 = this.tsTryParseTypeAnnotation();
        return t3 && (e5.typeAnnotation = t3, this.resetEndLocation(e5)), e5;
      }
      tsInAmbientContext(e5) {
        const t3 = this.state.isAmbientContext;
        this.state.isAmbientContext = true;
        try {
          return e5();
        } finally {
          this.state.isAmbientContext = t3;
        }
      }
      parseClass(e5) {
        const t3 = this.state.inAbstractClass;
        this.state.inAbstractClass = !!e5.abstract;
        try {
          for (var r4 = arguments.length, s4 = new Array(r4 > 1 ? r4 - 1 : 0), i4 = 1; i4 < r4; i4++)
            s4[i4 - 1] = arguments[i4];
          return super.parseClass(e5, ...s4);
        } finally {
          this.state.inAbstractClass = t3;
        }
      }
      tsParseAbstractDeclaration(e5) {
        if (this.match(oa._class))
          return e5.abstract = true, this.parseClass(e5, true, false);
        if (this.isContextual("interface")) {
          if (!this.hasFollowingLineBreak())
            return e5.abstract = true, this.raise(e5.start, ml.NonClassMethodPropertyHasAbstractModifer), this.next(), this.tsParseInterfaceDeclaration(e5);
        } else
          this.unexpected(null, oa._class);
      }
      parseMethod() {
        const e5 = super.parseMethod(...arguments);
        if (e5.abstract && (this.hasPlugin("estree") ? e5.value.body : e5.body)) {
          const {key: t3} = e5;
          this.raise(e5.start, ml.AbstractMethodHasImplementation, t3.type === "Identifier" ? t3.name : `[${this.input.slice(t3.start, t3.end)}]`);
        }
        return e5;
      }
      shouldParseAsAmbientContext() {
        return !!this.getPluginOption("typescript", "dts");
      }
      parse() {
        return this.shouldParseAsAmbientContext() && (this.state.isAmbientContext = true), super.parse();
      }
      getExpression() {
        return this.shouldParseAsAmbientContext() && (this.state.isAmbientContext = true), super.getExpression();
      }
    };
    oa.placeholder = new sa("%%", {startsExpr: true});
    const bl = Sa({ClassNameIsRequired: "A class name is required."}, ba.SyntaxError);
    function El(e4, t3) {
      return e4.some((e5) => Array.isArray(e5) ? e5[0] === t3 : e5 === t3);
    }
    function vl(e4, t3, r4) {
      const s4 = e4.find((e5) => Array.isArray(e5) ? e5[0] === t3 : e5 === t3);
      return s4 && Array.isArray(s4) ? s4[1][r4] : null;
    }
    const Sl = ["minimal", "smart", "fsharp"], Al = ["hash", "bar"];
    function Tl(e4) {
      if (El(e4, "decorators")) {
        if (El(e4, "decorators-legacy"))
          throw new Error("Cannot use the decorators and decorators-legacy plugin together");
        const t3 = vl(e4, "decorators", "decoratorsBeforeExport");
        if (t3 == null)
          throw new Error("The 'decorators' plugin requires a 'decoratorsBeforeExport' option, whose value must be a boolean. If you are migrating from Babylon/Babel 6 or want to use the old decorators proposal, you should use the 'decorators-legacy' plugin instead of 'decorators'.");
        if (typeof t3 != "boolean")
          throw new Error("'decoratorsBeforeExport' must be a boolean.");
      }
      if (El(e4, "flow") && El(e4, "typescript"))
        throw new Error("Cannot combine flow and typescript plugins.");
      if (El(e4, "placeholders") && El(e4, "v8intrinsic"))
        throw new Error("Cannot combine placeholders and v8intrinsic plugins.");
      if (El(e4, "pipelineOperator") && !Sl.includes(vl(e4, "pipelineOperator", "proposal")))
        throw new Error("'pipelineOperator' requires 'proposal' option whose value should be one of: " + Sl.map((e5) => `'${e5}'`).join(", "));
      if (El(e4, "moduleAttributes")) {
        if (El(e4, "importAssertions"))
          throw new Error("Cannot combine importAssertions and moduleAttributes plugins.");
        if (vl(e4, "moduleAttributes", "version") !== "may-2020")
          throw new Error("The 'moduleAttributes' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is 'may-2020'.");
      }
      if (El(e4, "recordAndTuple") && !Al.includes(vl(e4, "recordAndTuple", "syntaxType")))
        throw new Error("'recordAndTuple' requires 'syntaxType' option whose value should be one of: " + Al.map((e5) => `'${e5}'`).join(", "));
      if (El(e4, "asyncDoExpressions") && !El(e4, "doExpressions")) {
        const e5 = new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");
        throw e5.missingPlugins = "doExpressions", e5;
      }
    }
    const wl = {estree: Ta, jsx: sl, flow: $o, typescript: xl2, v8intrinsic: (e4) => class extends e4 {
      parseV8Intrinsic() {
        if (this.match(oa.modulo)) {
          const e5 = this.state.start, t3 = this.startNode();
          if (this.eat(oa.modulo), this.match(oa.name)) {
            const e6 = this.parseIdentifierName(this.state.start), r4 = this.createIdentifier(t3, e6);
            if (r4.type = "V8IntrinsicIdentifier", this.match(oa.parenL))
              return r4;
          }
          this.unexpected(e5);
        }
      }
      parseExprAtom() {
        return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);
      }
    }, placeholders: (e4) => class extends e4 {
      parsePlaceholder(e5) {
        if (this.match(oa.placeholder)) {
          const t3 = this.startNode();
          return this.next(), this.assertNoSpace("Unexpected space in placeholder."), t3.name = super.parseIdentifier(true), this.assertNoSpace("Unexpected space in placeholder."), this.expect(oa.placeholder), this.finishPlaceholder(t3, e5);
        }
      }
      finishPlaceholder(e5, t3) {
        const r4 = !(!e5.expectedNode || e5.type !== "Placeholder");
        return e5.expectedNode = t3, r4 ? e5 : this.finishNode(e5, "Placeholder");
      }
      getTokenFromCode(e5) {
        return e5 === 37 && this.input.charCodeAt(this.state.pos + 1) === 37 ? this.finishOp(oa.placeholder, 2) : super.getTokenFromCode(...arguments);
      }
      parseExprAtom() {
        return this.parsePlaceholder("Expression") || super.parseExprAtom(...arguments);
      }
      parseIdentifier() {
        return this.parsePlaceholder("Identifier") || super.parseIdentifier(...arguments);
      }
      checkReservedWord(e5) {
        e5 !== void 0 && super.checkReservedWord(...arguments);
      }
      parseBindingAtom() {
        return this.parsePlaceholder("Pattern") || super.parseBindingAtom(...arguments);
      }
      checkLVal(e5) {
        e5.type !== "Placeholder" && super.checkLVal(...arguments);
      }
      toAssignable(e5) {
        return e5 && e5.type === "Placeholder" && e5.expectedNode === "Expression" ? (e5.expectedNode = "Pattern", e5) : super.toAssignable(...arguments);
      }
      isLet(e5) {
        return !!super.isLet(e5) || !!this.isContextual("let") && !e5 && this.lookahead().type === oa.placeholder;
      }
      verifyBreakContinue(e5) {
        e5.label && e5.label.type === "Placeholder" || super.verifyBreakContinue(...arguments);
      }
      parseExpressionStatement(e5, t3) {
        if (t3.type !== "Placeholder" || t3.extra && t3.extra.parenthesized)
          return super.parseExpressionStatement(...arguments);
        if (this.match(oa.colon)) {
          const r4 = e5;
          return r4.label = this.finishPlaceholder(t3, "Identifier"), this.next(), r4.body = this.parseStatement("label"), this.finishNode(r4, "LabeledStatement");
        }
        return this.semicolon(), e5.name = t3.name, this.finishPlaceholder(e5, "Statement");
      }
      parseBlock() {
        return this.parsePlaceholder("BlockStatement") || super.parseBlock(...arguments);
      }
      parseFunctionId() {
        return this.parsePlaceholder("Identifier") || super.parseFunctionId(...arguments);
      }
      parseClass(e5, t3, r4) {
        const s4 = t3 ? "ClassDeclaration" : "ClassExpression";
        this.next(), this.takeDecorators(e5);
        const i4 = this.state.strict, n4 = this.parsePlaceholder("Identifier");
        if (n4)
          if (this.match(oa._extends) || this.match(oa.placeholder) || this.match(oa.braceL))
            e5.id = n4;
          else {
            if (r4 || !t3)
              return e5.id = null, e5.body = this.finishPlaceholder(n4, "ClassBody"), this.finishNode(e5, s4);
            this.unexpected(null, bl.ClassNameIsRequired);
          }
        else
          this.parseClassId(e5, t3, r4);
        return this.parseClassSuper(e5), e5.body = this.parsePlaceholder("ClassBody") || this.parseClassBody(!!e5.superClass, i4), this.finishNode(e5, s4);
      }
      parseExport(e5) {
        const t3 = this.parsePlaceholder("Identifier");
        if (!t3)
          return super.parseExport(...arguments);
        if (!this.isContextual("from") && !this.match(oa.comma))
          return e5.specifiers = [], e5.source = null, e5.declaration = this.finishPlaceholder(t3, "Declaration"), this.finishNode(e5, "ExportNamedDeclaration");
        this.expectPlugin("exportDefaultFrom");
        const r4 = this.startNode();
        return r4.exported = t3, e5.specifiers = [this.finishNode(r4, "ExportDefaultSpecifier")], super.parseExport(e5);
      }
      isExportDefaultSpecifier() {
        if (this.match(oa._default)) {
          const e5 = this.nextTokenStart();
          if (this.isUnparsedContextual(e5, "from") && this.input.startsWith(oa.placeholder.label, this.nextTokenStartSince(e5 + 4)))
            return true;
        }
        return super.isExportDefaultSpecifier();
      }
      maybeParseExportDefaultSpecifier(e5) {
        return !!(e5.specifiers && e5.specifiers.length > 0) || super.maybeParseExportDefaultSpecifier(...arguments);
      }
      checkExport(e5) {
        const {specifiers: t3} = e5;
        t3 != null && t3.length && (e5.specifiers = t3.filter((e6) => e6.exported.type === "Placeholder")), super.checkExport(e5), e5.specifiers = t3;
      }
      parseImport(e5) {
        const t3 = this.parsePlaceholder("Identifier");
        if (!t3)
          return super.parseImport(...arguments);
        if (e5.specifiers = [], !this.isContextual("from") && !this.match(oa.comma))
          return e5.source = this.finishPlaceholder(t3, "StringLiteral"), this.semicolon(), this.finishNode(e5, "ImportDeclaration");
        const r4 = this.startNodeAtNode(t3);
        return r4.local = t3, this.finishNode(r4, "ImportDefaultSpecifier"), e5.specifiers.push(r4), this.eat(oa.comma) && (this.maybeParseStarImportSpecifier(e5) || this.parseNamedImportSpecifiers(e5)), this.expectContextual("from"), e5.source = this.parseImportSource(), this.semicolon(), this.finishNode(e5, "ImportDeclaration");
      }
      parseImportSource() {
        return this.parsePlaceholder("StringLiteral") || super.parseImportSource(...arguments);
      }
    }}, Cl = Object.keys(wl), Pl = {sourceType: "script", sourceFilename: void 0, startLine: 1, allowAwaitOutsideFunction: false, allowReturnOutsideFunction: false, allowImportExportEverywhere: false, allowSuperOutsideMethod: false, allowUndeclaredExports: false, plugins: [], strictMode: null, ranges: false, tokens: false, createParenthesizedExpressions: false, errorRecovery: false};
    function Dl(e4) {
      const t3 = {};
      for (const r4 of Object.keys(Pl))
        t3[r4] = e4 && e4[r4] != null ? e4[r4] : Pl[r4];
      return t3;
    }
    class kl {
      constructor() {
        this.strict = void 0, this.curLine = void 0, this.startLoc = void 0, this.endLoc = void 0, this.errors = [], this.potentialArrowAt = -1, this.noArrowAt = [], this.noArrowParamsConversionAt = [], this.maybeInArrowParameters = false, this.inPipeline = false, this.inType = false, this.noAnonFunctionType = false, this.inPropertyName = false, this.hasFlowComment = false, this.isIterator = false, this.isAmbientContext = false, this.inAbstractClass = false, this.topicContext = {maxNumOfResolvableTopics: 0, maxTopicIndex: null}, this.soloAwait = false, this.inFSharpPipelineDirectBody = false, this.labels = [], this.decoratorStack = [[]], this.comments = [], this.trailingComments = [], this.leadingComments = [], this.commentStack = [], this.commentPreviousNode = null, this.pos = 0, this.lineStart = 0, this.type = oa.eof, this.value = null, this.start = 0, this.end = 0, this.lastTokEndLoc = null, this.lastTokStartLoc = null, this.lastTokStart = 0, this.lastTokEnd = 0, this.context = [Ca.braceStatement], this.exprAllowed = true, this.containsEsc = false, this.strictErrors = new Map(), this.exportedIdentifiers = [], this.tokensLength = 0;
      }
      init(e4) {
        this.strict = e4.strictMode !== false && e4.sourceType === "module", this.curLine = e4.startLine, this.startLoc = this.endLoc = this.curPosition();
      }
      curPosition() {
        return new da(this.curLine, this.pos - this.lineStart);
      }
      clone(e4) {
        const t3 = new kl(), r4 = Object.keys(this);
        for (let s4 = 0, i4 = r4.length; s4 < i4; s4++) {
          const i5 = r4[s4];
          let n4 = this[i5];
          !e4 && Array.isArray(n4) && (n4 = n4.slice()), t3[i5] = n4;
        }
        return t3;
      }
    }
    var Nl = function(e4) {
      return e4 >= 48 && e4 <= 57;
    };
    const Il = new Set(["g", "m", "s", "i", "y", "u"]), Fl = {decBinOct: [46, 66, 69, 79, 95, 98, 101, 111], hex: [46, 88, 95, 120]}, Ml = {bin: [48, 49]};
    Ml.oct = [...Ml.bin, 50, 51, 52, 53, 54, 55], Ml.dec = [...Ml.oct, 56, 57], Ml.hex = [...Ml.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];
    class Ll {
      constructor(e4) {
        this.type = e4.type, this.value = e4.value, this.start = e4.start, this.end = e4.end, this.loc = new fa(e4.startLoc, e4.endLoc);
      }
    }
    class Ol extends Aa {
      constructor(e4, t3) {
        super(), this.isLookahead = void 0, this.tokens = [], this.state = new kl(), this.state.init(e4), this.input = t3, this.length = t3.length, this.isLookahead = false;
      }
      pushToken(e4) {
        this.tokens.length = this.state.tokensLength, this.tokens.push(e4), ++this.state.tokensLength;
      }
      next() {
        this.isLookahead || (this.checkKeywordEscapes(), this.options.tokens && this.pushToken(new Ll(this.state))), this.state.lastTokEnd = this.state.end, this.state.lastTokStart = this.state.start, this.state.lastTokEndLoc = this.state.endLoc, this.state.lastTokStartLoc = this.state.startLoc, this.nextToken();
      }
      eat(e4) {
        return !!this.match(e4) && (this.next(), true);
      }
      match(e4) {
        return this.state.type === e4;
      }
      lookahead() {
        const e4 = this.state;
        this.state = e4.clone(true), this.isLookahead = true, this.next(), this.isLookahead = false;
        const t3 = this.state;
        return this.state = e4, t3;
      }
      nextTokenStart() {
        return this.nextTokenStartSince(this.state.pos);
      }
      nextTokenStartSince(e4) {
        return ha.lastIndex = e4, e4 + ha.exec(this.input)[0].length;
      }
      lookaheadCharCode() {
        return this.input.charCodeAt(this.nextTokenStart());
      }
      setStrict(e4) {
        this.state.strict = e4, e4 && (this.state.strictErrors.forEach((e5, t3) => this.raise(t3, e5)), this.state.strictErrors.clear());
      }
      curContext() {
        return this.state.context[this.state.context.length - 1];
      }
      nextToken() {
        const e4 = this.curContext();
        if (e4 != null && e4.preserveSpace || this.skipSpace(), this.state.start = this.state.pos, this.state.startLoc = this.state.curPosition(), this.state.pos >= this.length)
          return void this.finishToken(oa.eof);
        const t3 = e4 == null ? void 0 : e4.override;
        t3 ? t3(this) : this.getTokenFromCode(this.input.codePointAt(this.state.pos));
      }
      pushComment(e4, t3, r4, s4, i4, n4) {
        const a4 = {type: e4 ? "CommentBlock" : "CommentLine", value: t3, start: r4, end: s4, loc: new fa(i4, n4)};
        this.options.tokens && this.pushToken(a4), this.state.comments.push(a4), this.addComment(a4);
      }
      skipBlockComment() {
        const e4 = this.state.curPosition(), t3 = this.state.pos, r4 = this.input.indexOf("*/", this.state.pos + 2);
        if (r4 === -1)
          throw this.raise(t3, Ea.UnterminatedComment);
        let s4;
        for (this.state.pos = r4 + 2, ca.lastIndex = t3; (s4 = ca.exec(this.input)) && s4.index < this.state.pos; )
          ++this.state.curLine, this.state.lineStart = s4.index + s4[0].length;
        this.isLookahead || this.pushComment(true, this.input.slice(t3 + 2, r4), t3, this.state.pos, e4, this.state.curPosition());
      }
      skipLineComment(e4) {
        const t3 = this.state.pos, r4 = this.state.curPosition();
        let s4 = this.input.charCodeAt(this.state.pos += e4);
        if (this.state.pos < this.length)
          for (; !ua(s4) && ++this.state.pos < this.length; )
            s4 = this.input.charCodeAt(this.state.pos);
        this.isLookahead || this.pushComment(false, this.input.slice(t3 + e4, this.state.pos), t3, this.state.pos, r4, this.state.curPosition());
      }
      skipSpace() {
        e:
          for (; this.state.pos < this.length; ) {
            const e4 = this.input.charCodeAt(this.state.pos);
            switch (e4) {
              case 32:
              case 160:
              case 9:
                ++this.state.pos;
                break;
              case 13:
                this.input.charCodeAt(this.state.pos + 1) === 10 && ++this.state.pos;
              case 10:
              case 8232:
              case 8233:
                ++this.state.pos, ++this.state.curLine, this.state.lineStart = this.state.pos;
                break;
              case 47:
                switch (this.input.charCodeAt(this.state.pos + 1)) {
                  case 42:
                    this.skipBlockComment();
                    break;
                  case 47:
                    this.skipLineComment(2);
                    break;
                  default:
                    break e;
                }
                break;
              default:
                if (!pa(e4))
                  break e;
                ++this.state.pos;
            }
          }
      }
      finishToken(e4, t3) {
        this.state.end = this.state.pos, this.state.endLoc = this.state.curPosition();
        const r4 = this.state.type;
        this.state.type = e4, this.state.value = t3, this.isLookahead || this.updateContext(r4);
      }
      readToken_numberSign() {
        if (this.state.pos === 0 && this.readToken_interpreter())
          return;
        const e4 = this.state.pos + 1, t3 = this.input.charCodeAt(e4);
        if (t3 >= 48 && t3 <= 57)
          throw this.raise(this.state.pos, Ea.UnexpectedDigitAfterHash);
        if (t3 === 123 || t3 === 91 && this.hasPlugin("recordAndTuple")) {
          if (this.expectPlugin("recordAndTuple"), this.getPluginOption("recordAndTuple", "syntaxType") !== "hash")
            throw this.raise(this.state.pos, t3 === 123 ? Ea.RecordExpressionHashIncorrectStartSyntaxType : Ea.TupleExpressionHashIncorrectStartSyntaxType);
          t3 === 123 ? this.finishToken(oa.braceHashL) : this.finishToken(oa.bracketHashL), this.state.pos += 2;
        } else
          this.finishOp(oa.hash, 1);
      }
      readToken_dot() {
        const e4 = this.input.charCodeAt(this.state.pos + 1);
        e4 >= 48 && e4 <= 57 ? this.readNumber(true) : e4 === 46 && this.input.charCodeAt(this.state.pos + 2) === 46 ? (this.state.pos += 3, this.finishToken(oa.ellipsis)) : (++this.state.pos, this.finishToken(oa.dot));
      }
      readToken_slash() {
        if (this.state.exprAllowed && !this.state.inType)
          return ++this.state.pos, void this.readRegexp();
        this.input.charCodeAt(this.state.pos + 1) === 61 ? this.finishOp(oa.assign, 2) : this.finishOp(oa.slash, 1);
      }
      readToken_interpreter() {
        if (this.state.pos !== 0 || this.length < 2)
          return false;
        let e4 = this.input.charCodeAt(this.state.pos + 1);
        if (e4 !== 33)
          return false;
        const t3 = this.state.pos;
        for (this.state.pos += 1; !ua(e4) && ++this.state.pos < this.length; )
          e4 = this.input.charCodeAt(this.state.pos);
        const r4 = this.input.slice(t3 + 2, this.state.pos);
        return this.finishToken(oa.interpreterDirective, r4), true;
      }
      readToken_mult_modulo(e4) {
        let t3 = e4 === 42 ? oa.star : oa.modulo, r4 = 1, s4 = this.input.charCodeAt(this.state.pos + 1);
        const i4 = this.state.exprAllowed;
        e4 === 42 && s4 === 42 && (r4++, s4 = this.input.charCodeAt(this.state.pos + 2), t3 = oa.exponent), s4 !== 61 || i4 || (r4++, t3 = oa.assign), this.finishOp(t3, r4);
      }
      readToken_pipe_amp(e4) {
        const t3 = this.input.charCodeAt(this.state.pos + 1);
        if (t3 !== e4) {
          if (e4 === 124) {
            if (t3 === 62)
              return void this.finishOp(oa.pipeline, 2);
            if (this.hasPlugin("recordAndTuple") && t3 === 125) {
              if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar")
                throw this.raise(this.state.pos, Ea.RecordExpressionBarIncorrectEndSyntaxType);
              return void this.finishOp(oa.braceBarR, 2);
            }
            if (this.hasPlugin("recordAndTuple") && t3 === 93) {
              if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar")
                throw this.raise(this.state.pos, Ea.TupleExpressionBarIncorrectEndSyntaxType);
              return void this.finishOp(oa.bracketBarR, 2);
            }
          }
          t3 !== 61 ? this.finishOp(e4 === 124 ? oa.bitwiseOR : oa.bitwiseAND, 1) : this.finishOp(oa.assign, 2);
        } else
          this.input.charCodeAt(this.state.pos + 2) === 61 ? this.finishOp(oa.assign, 3) : this.finishOp(e4 === 124 ? oa.logicalOR : oa.logicalAND, 2);
      }
      readToken_caret() {
        this.input.charCodeAt(this.state.pos + 1) === 61 ? this.finishOp(oa.assign, 2) : this.finishOp(oa.bitwiseXOR, 1);
      }
      readToken_plus_min(e4) {
        const t3 = this.input.charCodeAt(this.state.pos + 1);
        if (t3 === e4)
          return t3 !== 45 || this.inModule || this.input.charCodeAt(this.state.pos + 2) !== 62 || this.state.lastTokEnd !== 0 && !this.hasPrecedingLineBreak() ? void this.finishOp(oa.incDec, 2) : (this.skipLineComment(3), this.skipSpace(), void this.nextToken());
        t3 === 61 ? this.finishOp(oa.assign, 2) : this.finishOp(oa.plusMin, 1);
      }
      readToken_lt_gt(e4) {
        const t3 = this.input.charCodeAt(this.state.pos + 1);
        let r4 = 1;
        return t3 === e4 ? (r4 = e4 === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2, this.input.charCodeAt(this.state.pos + r4) === 61 ? void this.finishOp(oa.assign, r4 + 1) : void this.finishOp(oa.bitShift, r4)) : t3 !== 33 || e4 !== 60 || this.inModule || this.input.charCodeAt(this.state.pos + 2) !== 45 || this.input.charCodeAt(this.state.pos + 3) !== 45 ? (t3 === 61 && (r4 = 2), void this.finishOp(oa.relational, r4)) : (this.skipLineComment(4), this.skipSpace(), void this.nextToken());
      }
      readToken_eq_excl(e4) {
        const t3 = this.input.charCodeAt(this.state.pos + 1);
        if (t3 !== 61)
          return e4 === 61 && t3 === 62 ? (this.state.pos += 2, void this.finishToken(oa.arrow)) : void this.finishOp(e4 === 61 ? oa.eq : oa.bang, 1);
        this.finishOp(oa.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
      }
      readToken_question() {
        const e4 = this.input.charCodeAt(this.state.pos + 1), t3 = this.input.charCodeAt(this.state.pos + 2);
        e4 === 63 ? t3 === 61 ? this.finishOp(oa.assign, 3) : this.finishOp(oa.nullishCoalescing, 2) : e4 !== 46 || t3 >= 48 && t3 <= 57 ? (++this.state.pos, this.finishToken(oa.question)) : (this.state.pos += 2, this.finishToken(oa.questionDot));
      }
      getTokenFromCode(e4) {
        switch (e4) {
          case 46:
            return void this.readToken_dot();
          case 40:
            return ++this.state.pos, void this.finishToken(oa.parenL);
          case 41:
            return ++this.state.pos, void this.finishToken(oa.parenR);
          case 59:
            return ++this.state.pos, void this.finishToken(oa.semi);
          case 44:
            return ++this.state.pos, void this.finishToken(oa.comma);
          case 91:
            if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
              if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar")
                throw this.raise(this.state.pos, Ea.TupleExpressionBarIncorrectStartSyntaxType);
              this.finishToken(oa.bracketBarL), this.state.pos += 2;
            } else
              ++this.state.pos, this.finishToken(oa.bracketL);
            return;
          case 93:
            return ++this.state.pos, void this.finishToken(oa.bracketR);
          case 123:
            if (this.hasPlugin("recordAndTuple") && this.input.charCodeAt(this.state.pos + 1) === 124) {
              if (this.getPluginOption("recordAndTuple", "syntaxType") !== "bar")
                throw this.raise(this.state.pos, Ea.RecordExpressionBarIncorrectStartSyntaxType);
              this.finishToken(oa.braceBarL), this.state.pos += 2;
            } else
              ++this.state.pos, this.finishToken(oa.braceL);
            return;
          case 125:
            return ++this.state.pos, void this.finishToken(oa.braceR);
          case 58:
            return void (this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58 ? this.finishOp(oa.doubleColon, 2) : (++this.state.pos, this.finishToken(oa.colon)));
          case 63:
            return void this.readToken_question();
          case 96:
            return ++this.state.pos, void this.finishToken(oa.backQuote);
          case 48: {
            const e5 = this.input.charCodeAt(this.state.pos + 1);
            if (e5 === 120 || e5 === 88)
              return void this.readRadixNumber(16);
            if (e5 === 111 || e5 === 79)
              return void this.readRadixNumber(8);
            if (e5 === 98 || e5 === 66)
              return void this.readRadixNumber(2);
          }
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
            return void this.readNumber(false);
          case 34:
          case 39:
            return void this.readString(e4);
          case 47:
            return void this.readToken_slash();
          case 37:
          case 42:
            return void this.readToken_mult_modulo(e4);
          case 124:
          case 38:
            return void this.readToken_pipe_amp(e4);
          case 94:
            return void this.readToken_caret();
          case 43:
          case 45:
            return void this.readToken_plus_min(e4);
          case 60:
          case 62:
            return void this.readToken_lt_gt(e4);
          case 61:
          case 33:
            return void this.readToken_eq_excl(e4);
          case 126:
            return void this.finishOp(oa.tilde, 1);
          case 64:
            return ++this.state.pos, void this.finishToken(oa.at);
          case 35:
            return void this.readToken_numberSign();
          case 92:
            return void this.readWord();
          default:
            if (La(e4))
              return void this.readWord();
        }
        throw this.raise(this.state.pos, Ea.InvalidOrUnexpectedToken, String.fromCodePoint(e4));
      }
      finishOp(e4, t3) {
        const r4 = this.input.slice(this.state.pos, this.state.pos + t3);
        this.state.pos += t3, this.finishToken(e4, r4);
      }
      readRegexp() {
        const e4 = this.state.pos;
        let t3, r4;
        for (; ; ) {
          if (this.state.pos >= this.length)
            throw this.raise(e4, Ea.UnterminatedRegExp);
          const s5 = this.input.charAt(this.state.pos);
          if (la.test(s5))
            throw this.raise(e4, Ea.UnterminatedRegExp);
          if (t3)
            t3 = false;
          else {
            if (s5 === "[")
              r4 = true;
            else if (s5 === "]" && r4)
              r4 = false;
            else if (s5 === "/" && !r4)
              break;
            t3 = s5 === "\\";
          }
          ++this.state.pos;
        }
        const s4 = this.input.slice(e4, this.state.pos);
        ++this.state.pos;
        let i4 = "";
        for (; this.state.pos < this.length; ) {
          const e5 = this.input[this.state.pos], t4 = this.input.codePointAt(this.state.pos);
          if (Il.has(e5))
            i4.indexOf(e5) > -1 && this.raise(this.state.pos + 1, Ea.DuplicateRegExpFlags);
          else {
            if (!Oa(t4) && t4 !== 92)
              break;
            this.raise(this.state.pos + 1, Ea.MalformedRegExpFlags);
          }
          ++this.state.pos, i4 += e5;
        }
        this.finishToken(oa.regexp, {pattern: s4, flags: i4});
      }
      readInt(e4, t3, r4, s4) {
        s4 === void 0 && (s4 = true);
        const i4 = this.state.pos, n4 = e4 === 16 ? Fl.hex : Fl.decBinOct, a4 = e4 === 16 ? Ml.hex : e4 === 10 ? Ml.dec : e4 === 8 ? Ml.oct : Ml.bin;
        let o4 = false, l3 = 0;
        for (let c4 = 0, u3 = t3 == null ? 1 / 0 : t3; c4 < u3; ++c4) {
          const t4 = this.input.charCodeAt(this.state.pos);
          let i5;
          if (t4 !== 95) {
            if (i5 = t4 >= 97 ? t4 - 97 + 10 : t4 >= 65 ? t4 - 65 + 10 : Nl(t4) ? t4 - 48 : 1 / 0, i5 >= e4)
              if (this.options.errorRecovery && i5 <= 9)
                i5 = 0, this.raise(this.state.start + c4 + 2, Ea.InvalidDigit, e4);
              else {
                if (!r4)
                  break;
                i5 = 0, o4 = true;
              }
            ++this.state.pos, l3 = l3 * e4 + i5;
          } else {
            const e5 = this.input.charCodeAt(this.state.pos - 1), t5 = this.input.charCodeAt(this.state.pos + 1);
            (a4.indexOf(t5) === -1 || n4.indexOf(e5) > -1 || n4.indexOf(t5) > -1 || Number.isNaN(t5)) && this.raise(this.state.pos, Ea.UnexpectedNumericSeparator), s4 || this.raise(this.state.pos, Ea.NumericSeparatorInEscapeSequence), ++this.state.pos;
          }
        }
        return this.state.pos === i4 || t3 != null && this.state.pos - i4 !== t3 || o4 ? null : l3;
      }
      readRadixNumber(e4) {
        const t3 = this.state.pos;
        let r4 = false;
        this.state.pos += 2;
        const s4 = this.readInt(e4);
        s4 == null && this.raise(this.state.start + 2, Ea.InvalidDigit, e4);
        const i4 = this.input.charCodeAt(this.state.pos);
        if (i4 === 110)
          ++this.state.pos, r4 = true;
        else if (i4 === 109)
          throw this.raise(t3, Ea.InvalidDecimal);
        if (La(this.input.codePointAt(this.state.pos)))
          throw this.raise(this.state.pos, Ea.NumberIdentifier);
        if (r4) {
          const e5 = this.input.slice(t3, this.state.pos).replace(/[_n]/g, "");
          this.finishToken(oa.bigint, e5);
        } else
          this.finishToken(oa.num, s4);
      }
      readNumber(e4) {
        const t3 = this.state.pos;
        let r4 = false, s4 = false, i4 = false, n4 = false, a4 = false;
        e4 || this.readInt(10) !== null || this.raise(t3, Ea.InvalidNumber);
        const o4 = this.state.pos - t3 >= 2 && this.input.charCodeAt(t3) === 48;
        if (o4) {
          const e5 = this.input.slice(t3, this.state.pos);
          if (this.recordStrictModeErrors(t3, Ea.StrictOctalLiteral), !this.state.strict) {
            const r5 = e5.indexOf("_");
            r5 > 0 && this.raise(r5 + t3, Ea.ZeroDigitNumericSeparator);
          }
          a4 = o4 && !/[89]/.test(e5);
        }
        let l3 = this.input.charCodeAt(this.state.pos);
        if (l3 !== 46 || a4 || (++this.state.pos, this.readInt(10), r4 = true, l3 = this.input.charCodeAt(this.state.pos)), l3 !== 69 && l3 !== 101 || a4 || (l3 = this.input.charCodeAt(++this.state.pos), l3 !== 43 && l3 !== 45 || ++this.state.pos, this.readInt(10) === null && this.raise(t3, Ea.InvalidOrMissingExponent), r4 = true, n4 = true, l3 = this.input.charCodeAt(this.state.pos)), l3 === 110 && ((r4 || o4) && this.raise(t3, Ea.InvalidBigIntLiteral), ++this.state.pos, s4 = true), l3 === 109 && (this.expectPlugin("decimal", this.state.pos), (n4 || o4) && this.raise(t3, Ea.InvalidDecimal), ++this.state.pos, i4 = true), La(this.input.codePointAt(this.state.pos)))
          throw this.raise(this.state.pos, Ea.NumberIdentifier);
        const c4 = this.input.slice(t3, this.state.pos).replace(/[_mn]/g, "");
        if (s4)
          return void this.finishToken(oa.bigint, c4);
        if (i4)
          return void this.finishToken(oa.decimal, c4);
        const u3 = a4 ? parseInt(c4, 8) : parseFloat(c4);
        this.finishToken(oa.num, u3);
      }
      readCodePoint(e4) {
        let t3;
        if (this.input.charCodeAt(this.state.pos) === 123) {
          const r4 = ++this.state.pos;
          if (t3 = this.readHexChar(this.input.indexOf("}", this.state.pos) - this.state.pos, true, e4), ++this.state.pos, t3 !== null && t3 > 1114111) {
            if (!e4)
              return null;
            this.raise(r4, Ea.InvalidCodePoint);
          }
        } else
          t3 = this.readHexChar(4, false, e4);
        return t3;
      }
      readString(e4) {
        let t3 = "", r4 = ++this.state.pos;
        for (; ; ) {
          if (this.state.pos >= this.length)
            throw this.raise(this.state.start, Ea.UnterminatedString);
          const s4 = this.input.charCodeAt(this.state.pos);
          if (s4 === e4)
            break;
          if (s4 === 92)
            t3 += this.input.slice(r4, this.state.pos), t3 += this.readEscapedChar(false), r4 = this.state.pos;
          else if (s4 === 8232 || s4 === 8233)
            ++this.state.pos, ++this.state.curLine, this.state.lineStart = this.state.pos;
          else {
            if (ua(s4))
              throw this.raise(this.state.start, Ea.UnterminatedString);
            ++this.state.pos;
          }
        }
        t3 += this.input.slice(r4, this.state.pos++), this.finishToken(oa.string, t3);
      }
      readTmplToken() {
        let e4 = "", t3 = this.state.pos, r4 = false;
        for (; ; ) {
          if (this.state.pos >= this.length)
            throw this.raise(this.state.start, Ea.UnterminatedTemplate);
          const s4 = this.input.charCodeAt(this.state.pos);
          if (s4 === 96 || s4 === 36 && this.input.charCodeAt(this.state.pos + 1) === 123)
            return this.state.pos === this.state.start && this.match(oa.template) ? s4 === 36 ? (this.state.pos += 2, void this.finishToken(oa.dollarBraceL)) : (++this.state.pos, void this.finishToken(oa.backQuote)) : (e4 += this.input.slice(t3, this.state.pos), void this.finishToken(oa.template, r4 ? null : e4));
          if (s4 === 92) {
            e4 += this.input.slice(t3, this.state.pos);
            const s5 = this.readEscapedChar(true);
            s5 === null ? r4 = true : e4 += s5, t3 = this.state.pos;
          } else if (ua(s4)) {
            switch (e4 += this.input.slice(t3, this.state.pos), ++this.state.pos, s4) {
              case 13:
                this.input.charCodeAt(this.state.pos) === 10 && ++this.state.pos;
              case 10:
                e4 += "\n";
                break;
              default:
                e4 += String.fromCharCode(s4);
            }
            ++this.state.curLine, this.state.lineStart = this.state.pos, t3 = this.state.pos;
          } else
            ++this.state.pos;
        }
      }
      recordStrictModeErrors(e4, t3) {
        this.state.strict && !this.state.strictErrors.has(e4) ? this.raise(e4, t3) : this.state.strictErrors.set(e4, t3);
      }
      readEscapedChar(e4) {
        const t3 = !e4, r4 = this.input.charCodeAt(++this.state.pos);
        switch (++this.state.pos, r4) {
          case 110:
            return "\n";
          case 114:
            return "\r";
          case 120: {
            const e5 = this.readHexChar(2, false, t3);
            return e5 === null ? null : String.fromCharCode(e5);
          }
          case 117: {
            const e5 = this.readCodePoint(t3);
            return e5 === null ? null : String.fromCodePoint(e5);
          }
          case 116:
            return "	";
          case 98:
            return "\b";
          case 118:
            return "\v";
          case 102:
            return "\f";
          case 13:
            this.input.charCodeAt(this.state.pos) === 10 && ++this.state.pos;
          case 10:
            this.state.lineStart = this.state.pos, ++this.state.curLine;
          case 8232:
          case 8233:
            return "";
          case 56:
          case 57:
            if (e4)
              return null;
            this.recordStrictModeErrors(this.state.pos - 1, Ea.StrictNumericEscape);
          default:
            if (r4 >= 48 && r4 <= 55) {
              const t4 = this.state.pos - 1;
              let r5 = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/)[0], s4 = parseInt(r5, 8);
              s4 > 255 && (r5 = r5.slice(0, -1), s4 = parseInt(r5, 8)), this.state.pos += r5.length - 1;
              const i4 = this.input.charCodeAt(this.state.pos);
              if (r5 !== "0" || i4 === 56 || i4 === 57) {
                if (e4)
                  return null;
                this.recordStrictModeErrors(t4, Ea.StrictNumericEscape);
              }
              return String.fromCharCode(s4);
            }
            return String.fromCharCode(r4);
        }
      }
      readHexChar(e4, t3, r4) {
        const s4 = this.state.pos, i4 = this.readInt(16, e4, t3, false);
        return i4 === null && (r4 ? this.raise(s4, Ea.InvalidEscapeSequence) : this.state.pos = s4 - 1), i4;
      }
      readWord1() {
        let e4 = "";
        this.state.containsEsc = false;
        const t3 = this.state.pos;
        let r4 = this.state.pos;
        for (; this.state.pos < this.length; ) {
          const s4 = this.input.codePointAt(this.state.pos);
          if (Oa(s4))
            this.state.pos += s4 <= 65535 ? 1 : 2;
          else if (this.state.isIterator && s4 === 64)
            ++this.state.pos;
          else {
            if (s4 !== 92)
              break;
            {
              this.state.containsEsc = true, e4 += this.input.slice(r4, this.state.pos);
              const s5 = this.state.pos, i4 = this.state.pos === t3 ? La : Oa;
              if (this.input.charCodeAt(++this.state.pos) !== 117) {
                this.raise(this.state.pos, Ea.MissingUnicodeEscape);
                continue;
              }
              ++this.state.pos;
              const n4 = this.readCodePoint(true);
              n4 !== null && (i4(n4) || this.raise(s5, Ea.EscapedCharNotAnIdentifier), e4 += String.fromCodePoint(n4)), r4 = this.state.pos;
            }
          }
        }
        return e4 + this.input.slice(r4, this.state.pos);
      }
      isIterator(e4) {
        return e4 === "@@iterator" || e4 === "@@asyncIterator";
      }
      readWord() {
        const e4 = this.readWord1(), t3 = ia.get(e4) || oa.name;
        !this.state.isIterator || this.isIterator(e4) && this.state.inType || this.raise(this.state.pos, Ea.InvalidIdentifier, e4), this.finishToken(t3, e4);
      }
      checkKeywordEscapes() {
        const e4 = this.state.type.keyword;
        e4 && this.state.containsEsc && this.raise(this.state.start, Ea.InvalidEscapedReservedWord, e4);
      }
      braceIsBlock(e4) {
        const t3 = this.curContext();
        return t3 === Ca.functionExpression || t3 === Ca.functionStatement || (e4 !== oa.colon || t3 !== Ca.braceStatement && t3 !== Ca.braceExpression ? e4 === oa._return || e4 === oa.name && this.state.exprAllowed ? this.hasPrecedingLineBreak() : e4 === oa._else || e4 === oa.semi || e4 === oa.eof || e4 === oa.parenR || e4 === oa.arrow || (e4 === oa.braceL ? t3 === Ca.braceStatement : e4 !== oa._var && e4 !== oa._const && e4 !== oa.name && (e4 === oa.relational || !this.state.exprAllowed)) : !t3.isExpr);
      }
      updateContext(e4) {
        const t3 = this.state.type;
        let r4;
        !t3.keyword || e4 !== oa.dot && e4 !== oa.questionDot ? (r4 = t3.updateContext) ? r4.call(this, e4) : this.state.exprAllowed = t3.beforeExpr : this.state.exprAllowed = false;
      }
    }
    class _l {
      constructor() {
        this.privateNames = new Set(), this.loneAccessors = new Map(), this.undefinedPrivateNames = new Map();
      }
    }
    class Bl {
      constructor(e4) {
        this.stack = [], this.undefinedPrivateNames = new Map(), this.raise = e4;
      }
      current() {
        return this.stack[this.stack.length - 1];
      }
      enter() {
        this.stack.push(new _l());
      }
      exit() {
        const e4 = this.stack.pop(), t3 = this.current();
        for (const [r4, s4] of Array.from(e4.undefinedPrivateNames))
          t3 ? t3.undefinedPrivateNames.has(r4) || t3.undefinedPrivateNames.set(r4, s4) : this.raise(s4, Ea.InvalidPrivateFieldResolution, r4);
      }
      declarePrivateName(e4, t3, r4) {
        const s4 = this.current();
        let i4 = s4.privateNames.has(e4);
        if (t3 & Fo) {
          const r5 = i4 && s4.loneAccessors.get(e4);
          if (r5) {
            const n4 = r5 & ko, a4 = t3 & ko;
            i4 = (r5 & Fo) == (t3 & Fo) || n4 !== a4, i4 || s4.loneAccessors.delete(e4);
          } else
            i4 || s4.loneAccessors.set(e4, t3);
        }
        i4 && this.raise(r4, Ea.PrivateNameRedeclaration, e4), s4.privateNames.add(e4), s4.undefinedPrivateNames.delete(e4);
      }
      usePrivateName(e4, t3) {
        let r4;
        for (r4 of this.stack)
          if (r4.privateNames.has(e4))
            return;
        r4 ? r4.undefinedPrivateNames.set(e4, t3) : this.raise(t3, Ea.InvalidPrivateFieldResolution, e4);
      }
    }
    const Rl = 0, jl = 1, Ul = 2, ql = 3;
    class zl {
      constructor(e4) {
        e4 === void 0 && (e4 = Rl), this.type = void 0, this.type = e4;
      }
      canBeArrowParameterDeclaration() {
        return this.type === Ul || this.type === jl;
      }
      isCertainlyParameterDeclaration() {
        return this.type === ql;
      }
    }
    class Vl extends zl {
      constructor(e4) {
        super(e4), this.errors = new Map();
      }
      recordDeclarationError(e4, t3) {
        this.errors.set(e4, t3);
      }
      clearDeclarationError(e4) {
        this.errors.delete(e4);
      }
      iterateErrors(e4) {
        this.errors.forEach(e4);
      }
    }
    class Jl {
      constructor(e4) {
        this.stack = [new zl()], this.raise = e4;
      }
      enter(e4) {
        this.stack.push(e4);
      }
      exit() {
        this.stack.pop();
      }
      recordParameterInitializerError(e4, t3) {
        const {stack: r4} = this;
        let s4 = r4.length - 1, i4 = r4[s4];
        for (; !i4.isCertainlyParameterDeclaration(); ) {
          if (!i4.canBeArrowParameterDeclaration())
            return;
          i4.recordDeclarationError(e4, t3), i4 = r4[--s4];
        }
        this.raise(e4, t3);
      }
      recordParenthesizedIdentifierError(e4, t3) {
        const {stack: r4} = this, s4 = r4[r4.length - 1];
        if (s4.isCertainlyParameterDeclaration())
          this.raise(e4, t3);
        else {
          if (!s4.canBeArrowParameterDeclaration())
            return;
          s4.recordDeclarationError(e4, t3);
        }
      }
      recordAsyncArrowParametersError(e4, t3) {
        const {stack: r4} = this;
        let s4 = r4.length - 1, i4 = r4[s4];
        for (; i4.canBeArrowParameterDeclaration(); )
          i4.type === Ul && i4.recordDeclarationError(e4, t3), i4 = r4[--s4];
      }
      validateAsPattern() {
        const {stack: e4} = this, t3 = e4[e4.length - 1];
        t3.canBeArrowParameterDeclaration() && t3.iterateErrors((t4, r4) => {
          this.raise(r4, t4);
          let s4 = e4.length - 2, i4 = e4[s4];
          for (; i4.canBeArrowParameterDeclaration(); )
            i4.clearDeclarationError(r4), i4 = e4[--s4];
        });
      }
    }
    function Xl() {
      return new zl(ql);
    }
    function Gl() {
      return new Vl(jl);
    }
    function Hl() {
      return new Vl(Ul);
    }
    function Wl() {
      return new zl();
    }
    class Kl extends Ol {
      addExtra(e4, t3, r4) {
        e4 && ((e4.extra = e4.extra || {})[t3] = r4);
      }
      isRelational(e4) {
        return this.match(oa.relational) && this.state.value === e4;
      }
      expectRelational(e4) {
        this.isRelational(e4) ? this.next() : this.unexpected(null, oa.relational);
      }
      isContextual(e4) {
        return this.match(oa.name) && this.state.value === e4 && !this.state.containsEsc;
      }
      isUnparsedContextual(e4, t3) {
        const r4 = e4 + t3.length;
        return this.input.slice(e4, r4) === t3 && (r4 === this.input.length || !Oa(this.input.charCodeAt(r4)));
      }
      isLookaheadContextual(e4) {
        const t3 = this.nextTokenStart();
        return this.isUnparsedContextual(t3, e4);
      }
      eatContextual(e4) {
        return this.isContextual(e4) && this.eat(oa.name);
      }
      expectContextual(e4, t3) {
        this.eatContextual(e4) || this.unexpected(null, t3);
      }
      canInsertSemicolon() {
        return this.match(oa.eof) || this.match(oa.braceR) || this.hasPrecedingLineBreak();
      }
      hasPrecedingLineBreak() {
        return la.test(this.input.slice(this.state.lastTokEnd, this.state.start));
      }
      hasFollowingLineBreak() {
        return la.test(this.input.slice(this.state.end, this.nextTokenStart()));
      }
      isLineTerminator() {
        return this.eat(oa.semi) || this.canInsertSemicolon();
      }
      semicolon(e4) {
        e4 === void 0 && (e4 = true), (e4 ? this.isLineTerminator() : this.eat(oa.semi)) || this.raise(this.state.lastTokEnd, Ea.MissingSemicolon);
      }
      expect(e4, t3) {
        this.eat(e4) || this.unexpected(t3, e4);
      }
      assertNoSpace(e4) {
        e4 === void 0 && (e4 = "Unexpected space."), this.state.start > this.state.lastTokEnd && this.raise(this.state.lastTokEnd, {code: ba.SyntaxError, reasonCode: "UnexpectedSpace", template: e4});
      }
      unexpected(e4, t3) {
        throw t3 === void 0 && (t3 = {code: ba.SyntaxError, reasonCode: "UnexpectedToken", template: "Unexpected token"}), t3 instanceof sa && (t3 = {code: ba.SyntaxError, reasonCode: "UnexpectedToken", template: `Unexpected token, expected "${t3.label}"`}), this.raise(e4 != null ? e4 : this.state.start, t3);
      }
      expectPlugin(e4, t3) {
        if (!this.hasPlugin(e4))
          throw this.raiseWithData(t3 != null ? t3 : this.state.start, {missingPlugin: [e4]}, `This experimental syntax requires enabling the parser plugin: '${e4}'`);
        return true;
      }
      expectOnePlugin(e4, t3) {
        if (!e4.some((e5) => this.hasPlugin(e5)))
          throw this.raiseWithData(t3 != null ? t3 : this.state.start, {missingPlugin: e4}, `This experimental syntax requires enabling one of the following parser plugin(s): '${e4.join(", ")}'`);
      }
      tryParse(e4, t3) {
        t3 === void 0 && (t3 = this.state.clone());
        const r4 = {node: null};
        try {
          const s4 = e4(function(e5) {
            throw e5 === void 0 && (e5 = null), r4.node = e5, r4;
          });
          if (this.state.errors.length > t3.errors.length) {
            const e5 = this.state;
            return this.state = t3, {node: s4, error: e5.errors[t3.errors.length], thrown: false, aborted: false, failState: e5};
          }
          return {node: s4, error: null, thrown: false, aborted: false, failState: null};
        } catch (s4) {
          const e5 = this.state;
          if (this.state = t3, s4 instanceof SyntaxError)
            return {node: null, error: s4, thrown: true, aborted: false, failState: e5};
          if (s4 === r4)
            return {node: r4.node, error: null, thrown: false, aborted: true, failState: e5};
          throw s4;
        }
      }
      checkExpressionErrors(e4, t3) {
        if (!e4)
          return false;
        const {shorthandAssign: r4, doubleProto: s4} = e4;
        if (!t3)
          return r4 >= 0 || s4 >= 0;
        r4 >= 0 && this.unexpected(r4), s4 >= 0 && this.raise(s4, Ea.DuplicateProto);
      }
      isLiteralPropertyName() {
        return this.match(oa.name) || !!this.state.type.keyword || this.match(oa.string) || this.match(oa.num) || this.match(oa.bigint) || this.match(oa.decimal);
      }
      isPrivateName(e4) {
        return e4.type === "PrivateName";
      }
      getPrivateNameSV(e4) {
        return e4.id.name;
      }
      hasPropertyAsPrivateName(e4) {
        return (e4.type === "MemberExpression" || e4.type === "OptionalMemberExpression") && this.isPrivateName(e4.property);
      }
      isOptionalChain(e4) {
        return e4.type === "OptionalMemberExpression" || e4.type === "OptionalCallExpression";
      }
      isObjectProperty(e4) {
        return e4.type === "ObjectProperty";
      }
      isObjectMethod(e4) {
        return e4.type === "ObjectMethod";
      }
      initializeScopes(e4) {
        e4 === void 0 && (e4 = this.options.sourceType === "module");
        const t3 = this.state.labels;
        this.state.labels = [];
        const r4 = this.state.exportedIdentifiers;
        this.state.exportedIdentifiers = [];
        const s4 = this.inModule;
        this.inModule = e4;
        const i4 = this.scope, n4 = this.getScopeHandler();
        this.scope = new n4(this.raise.bind(this), this.inModule);
        const a4 = this.prodParam;
        this.prodParam = new hl();
        const o4 = this.classScope;
        this.classScope = new Bl(this.raise.bind(this));
        const l3 = this.expressionScope;
        return this.expressionScope = new Jl(this.raise.bind(this)), () => {
          this.state.labels = t3, this.state.exportedIdentifiers = r4, this.inModule = s4, this.scope = i4, this.prodParam = a4, this.classScope = o4, this.expressionScope = l3;
        };
      }
      enterInitialScopes() {
        let e4 = al;
        this.hasPlugin("topLevelAwait") && this.inModule && (e4 |= ll), this.scope.enter(Wa), this.prodParam.enter(e4);
      }
    }
    class $l {
      constructor() {
        this.shorthandAssign = -1, this.doubleProto = -1;
      }
    }
    class Yl {
      constructor(e4, t3, r4) {
        this.type = void 0, this.start = void 0, this.end = void 0, this.loc = void 0, this.range = void 0, this.leadingComments = void 0, this.trailingComments = void 0, this.innerComments = void 0, this.extra = void 0, this.type = "", this.start = t3, this.end = 0, this.loc = new fa(r4), e4 != null && e4.options.ranges && (this.range = [t3, 0]), e4 != null && e4.filename && (this.loc.filename = e4.filename);
      }
      __clone() {
        const e4 = new Yl(), t3 = Object.keys(this);
        for (let r4 = 0, s4 = t3.length; r4 < s4; r4++) {
          const s5 = t3[r4];
          s5 !== "leadingComments" && s5 !== "trailingComments" && s5 !== "innerComments" && (e4[s5] = this[s5]);
        }
        return e4;
      }
    }
    class Ql extends Kl {
      startNode() {
        return new Yl(this, this.state.start, this.state.startLoc);
      }
      startNodeAt(e4, t3) {
        return new Yl(this, e4, t3);
      }
      startNodeAtNode(e4) {
        return this.startNodeAt(e4.start, e4.loc.start);
      }
      finishNode(e4, t3) {
        return this.finishNodeAt(e4, t3, this.state.lastTokEnd, this.state.lastTokEndLoc);
      }
      finishNodeAt(e4, t3, r4, s4) {
        return e4.type = t3, e4.end = r4, e4.loc.end = s4, this.options.ranges && (e4.range[1] = r4), this.processComment(e4), e4;
      }
      resetStartLocation(e4, t3, r4) {
        e4.start = t3, e4.loc.start = r4, this.options.ranges && (e4.range[0] = t3);
      }
      resetEndLocation(e4, t3, r4) {
        t3 === void 0 && (t3 = this.state.lastTokEnd), r4 === void 0 && (r4 = this.state.lastTokEndLoc), e4.end = t3, e4.loc.end = r4, this.options.ranges && (e4.range[1] = t3);
      }
      resetStartLocationFromNode(e4, t3) {
        this.resetStartLocation(e4, t3.start, t3.loc.start);
      }
    }
    const Zl = (e4) => e4.type === "ParenthesizedExpression" ? Zl(e4.expression) : e4;
    class ec extends Ql {
      toAssignable(e4, t3) {
        var r4, s4;
        let i4;
        switch (t3 === void 0 && (t3 = false), (e4.type === "ParenthesizedExpression" || (r4 = e4.extra) != null && r4.parenthesized) && (i4 = Zl(e4), t3 ? i4.type === "Identifier" ? this.expressionScope.recordParenthesizedIdentifierError(e4.start, Ea.InvalidParenthesizedAssignment) : i4.type !== "MemberExpression" && this.raise(e4.start, Ea.InvalidParenthesizedAssignment) : this.raise(e4.start, Ea.InvalidParenthesizedAssignment)), e4.type) {
          case "Identifier":
          case "ObjectPattern":
          case "ArrayPattern":
          case "AssignmentPattern":
            break;
          case "ObjectExpression":
            e4.type = "ObjectPattern";
            for (let r5 = 0, s5 = e4.properties.length, i5 = s5 - 1; r5 < s5; r5++) {
              var n4;
              const s6 = e4.properties[r5], a4 = r5 === i5;
              this.toAssignableObjectExpressionProp(s6, a4, t3), a4 && s6.type === "RestElement" && (n4 = e4.extra) != null && n4.trailingComma && this.raiseRestNotLast(e4.extra.trailingComma);
            }
            break;
          case "ObjectProperty":
            this.toAssignable(e4.value, t3);
            break;
          case "SpreadElement": {
            this.checkToRestConversion(e4), e4.type = "RestElement";
            const r5 = e4.argument;
            this.toAssignable(r5, t3);
            break;
          }
          case "ArrayExpression":
            e4.type = "ArrayPattern", this.toAssignableList(e4.elements, (s4 = e4.extra) == null ? void 0 : s4.trailingComma, t3);
            break;
          case "AssignmentExpression":
            e4.operator !== "=" && this.raise(e4.left.end, Ea.MissingEqInAssignment), e4.type = "AssignmentPattern", delete e4.operator, this.toAssignable(e4.left, t3);
            break;
          case "ParenthesizedExpression":
            this.toAssignable(i4, t3);
        }
        return e4;
      }
      toAssignableObjectExpressionProp(e4, t3, r4) {
        if (e4.type === "ObjectMethod") {
          const t4 = e4.kind === "get" || e4.kind === "set" ? Ea.PatternHasAccessor : Ea.PatternHasMethod;
          this.raise(e4.key.start, t4);
        } else
          e4.type !== "SpreadElement" || t3 ? this.toAssignable(e4, r4) : this.raiseRestNotLast(e4.start);
      }
      toAssignableList(e4, t3, r4) {
        let s4 = e4.length;
        if (s4) {
          const i4 = e4[s4 - 1];
          if ((i4 == null ? void 0 : i4.type) === "RestElement")
            --s4;
          else if ((i4 == null ? void 0 : i4.type) === "SpreadElement") {
            i4.type = "RestElement";
            let e5 = i4.argument;
            this.toAssignable(e5, r4), e5 = Zl(e5), e5.type !== "Identifier" && e5.type !== "MemberExpression" && e5.type !== "ArrayPattern" && e5.type !== "ObjectPattern" && this.unexpected(e5.start), t3 && this.raiseTrailingCommaAfterRest(t3), --s4;
          }
        }
        for (let i4 = 0; i4 < s4; i4++) {
          const t4 = e4[i4];
          t4 && (this.toAssignable(t4, r4), t4.type === "RestElement" && this.raiseRestNotLast(t4.start));
        }
        return e4;
      }
      toReferencedList(e4, t3) {
        return e4;
      }
      toReferencedListDeep(e4, t3) {
        this.toReferencedList(e4, t3);
        for (const r4 of e4)
          (r4 == null ? void 0 : r4.type) === "ArrayExpression" && this.toReferencedListDeep(r4.elements);
      }
      parseSpread(e4, t3) {
        const r4 = this.startNode();
        return this.next(), r4.argument = this.parseMaybeAssignAllowIn(e4, void 0, t3), this.finishNode(r4, "SpreadElement");
      }
      parseRestBinding() {
        const e4 = this.startNode();
        return this.next(), e4.argument = this.parseBindingAtom(), this.finishNode(e4, "RestElement");
      }
      parseBindingAtom() {
        switch (this.state.type) {
          case oa.bracketL: {
            const e4 = this.startNode();
            return this.next(), e4.elements = this.parseBindingList(oa.bracketR, 93, true), this.finishNode(e4, "ArrayPattern");
          }
          case oa.braceL:
            return this.parseObjectLike(oa.braceR, true);
        }
        return this.parseIdentifier();
      }
      parseBindingList(e4, t3, r4, s4) {
        const i4 = [];
        let n4 = true;
        for (; !this.eat(e4); )
          if (n4 ? n4 = false : this.expect(oa.comma), r4 && this.match(oa.comma))
            i4.push(null);
          else {
            if (this.eat(e4))
              break;
            if (this.match(oa.ellipsis)) {
              i4.push(this.parseAssignableListItemTypes(this.parseRestBinding())), this.checkCommaAfterRest(t3), this.expect(e4);
              break;
            }
            {
              const e5 = [];
              for (this.match(oa.at) && this.hasPlugin("decorators") && this.raise(this.state.start, Ea.UnsupportedParameterDecorator); this.match(oa.at); )
                e5.push(this.parseDecorator());
              i4.push(this.parseAssignableListItem(s4, e5));
            }
          }
        return i4;
      }
      parseAssignableListItem(e4, t3) {
        const r4 = this.parseMaybeDefault();
        this.parseAssignableListItemTypes(r4);
        const s4 = this.parseMaybeDefault(r4.start, r4.loc.start, r4);
        return t3.length && (r4.decorators = t3), s4;
      }
      parseAssignableListItemTypes(e4) {
        return e4;
      }
      parseMaybeDefault(e4, t3, r4) {
        var s4, i4, n4;
        if (t3 = (s4 = t3) != null ? s4 : this.state.startLoc, e4 = (i4 = e4) != null ? i4 : this.state.start, r4 = (n4 = r4) != null ? n4 : this.parseBindingAtom(), !this.eat(oa.eq))
          return r4;
        const a4 = this.startNodeAt(e4, t3);
        return a4.left = r4, a4.right = this.parseMaybeAssignAllowIn(), this.finishNode(a4, "AssignmentPattern");
      }
      checkLVal(e4, t3, r4, s4, i4, n4) {
        switch (r4 === void 0 && (r4 = To), n4 === void 0 && (n4 = false), e4.type) {
          case "Identifier": {
            const {name: t4} = e4;
            this.state.strict && (n4 ? Va(t4, this.inModule) : za(t4)) && this.raise(e4.start, r4 === To ? Ea.StrictEvalArguments : Ea.StrictEvalArgumentsBinding, t4), s4 && (s4.has(t4) ? this.raise(e4.start, Ea.ParamDupe) : s4.add(t4)), i4 && t4 === "let" && this.raise(e4.start, Ea.LetInLexicalBinding), r4 & To || this.scope.declareName(t4, r4, e4.start);
            break;
          }
          case "MemberExpression":
            r4 !== To && this.raise(e4.start, Ea.InvalidPropertyBindingPattern);
            break;
          case "ObjectPattern":
            for (let t4 of e4.properties) {
              if (this.isObjectProperty(t4))
                t4 = t4.value;
              else if (this.isObjectMethod(t4))
                continue;
              this.checkLVal(t4, "object destructuring pattern", r4, s4, i4);
            }
            break;
          case "ArrayPattern":
            for (const t4 of e4.elements)
              t4 && this.checkLVal(t4, "array destructuring pattern", r4, s4, i4);
            break;
          case "AssignmentPattern":
            this.checkLVal(e4.left, "assignment pattern", r4, s4);
            break;
          case "RestElement":
            this.checkLVal(e4.argument, "rest element", r4, s4);
            break;
          case "ParenthesizedExpression":
            this.checkLVal(e4.expression, "parenthesized expression", r4, s4);
            break;
          default:
            this.raise(e4.start, r4 === To ? Ea.InvalidLhs : Ea.InvalidLhsBinding, t3);
        }
      }
      checkToRestConversion(e4) {
        e4.argument.type !== "Identifier" && e4.argument.type !== "MemberExpression" && this.raise(e4.argument.start, Ea.InvalidRestAssignmentPattern);
      }
      checkCommaAfterRest(e4) {
        this.match(oa.comma) && (this.lookaheadCharCode() === e4 ? this.raiseTrailingCommaAfterRest(this.state.start) : this.raiseRestNotLast(this.state.start));
      }
      raiseRestNotLast(e4) {
        throw this.raise(e4, Ea.ElementAfterRest);
      }
      raiseTrailingCommaAfterRest(e4) {
        this.raise(e4, Ea.RestTrailingComma);
      }
    }
    class tc extends ec {
      checkProto(e4, t3, r4, s4) {
        if (e4.type === "SpreadElement" || this.isObjectMethod(e4) || e4.computed || e4.shorthand)
          return;
        const i4 = e4.key;
        if ((i4.type === "Identifier" ? i4.name : i4.value) === "__proto__") {
          if (t3)
            return void this.raise(i4.start, Ea.RecordNoProto);
          r4.used && (s4 ? s4.doubleProto === -1 && (s4.doubleProto = i4.start) : this.raise(i4.start, Ea.DuplicateProto)), r4.used = true;
        }
      }
      shouldExitDescending(e4, t3) {
        return e4.type === "ArrowFunctionExpression" && e4.start === t3;
      }
      getExpression() {
        let e4 = al;
        this.hasPlugin("topLevelAwait") && this.inModule && (e4 |= ll), this.scope.enter(Wa), this.prodParam.enter(e4), this.nextToken();
        const t3 = this.parseExpression();
        return this.match(oa.eof) || this.unexpected(), t3.comments = this.state.comments, t3.errors = this.state.errors, this.options.tokens && (t3.tokens = this.tokens), t3;
      }
      parseExpression(e4, t3) {
        return e4 ? this.disallowInAnd(() => this.parseExpressionBase(t3)) : this.allowInAnd(() => this.parseExpressionBase(t3));
      }
      parseExpressionBase(e4) {
        const t3 = this.state.start, r4 = this.state.startLoc, s4 = this.parseMaybeAssign(e4);
        if (this.match(oa.comma)) {
          const i4 = this.startNodeAt(t3, r4);
          for (i4.expressions = [s4]; this.eat(oa.comma); )
            i4.expressions.push(this.parseMaybeAssign(e4));
          return this.toReferencedList(i4.expressions), this.finishNode(i4, "SequenceExpression");
        }
        return s4;
      }
      parseMaybeAssignDisallowIn(e4, t3, r4) {
        return this.disallowInAnd(() => this.parseMaybeAssign(e4, t3, r4));
      }
      parseMaybeAssignAllowIn(e4, t3, r4) {
        return this.allowInAnd(() => this.parseMaybeAssign(e4, t3, r4));
      }
      parseMaybeAssign(e4, t3, r4) {
        const s4 = this.state.start, i4 = this.state.startLoc;
        if (this.isContextual("yield") && this.prodParam.hasYield) {
          this.state.exprAllowed = true;
          let e5 = this.parseYield();
          return t3 && (e5 = t3.call(this, e5, s4, i4)), e5;
        }
        let n4;
        e4 ? n4 = false : (e4 = new $l(), n4 = true), (this.match(oa.parenL) || this.match(oa.name)) && (this.state.potentialArrowAt = this.state.start);
        let a4 = this.parseMaybeConditional(e4, r4);
        if (t3 && (a4 = t3.call(this, a4, s4, i4)), this.state.type.isAssign) {
          const t4 = this.startNodeAt(s4, i4), r5 = this.state.value;
          return t4.operator = r5, this.match(oa.eq) ? (t4.left = this.toAssignable(a4, true), e4.doubleProto = -1) : t4.left = a4, e4.shorthandAssign >= t4.left.start && (e4.shorthandAssign = -1), this.checkLVal(a4, "assignment expression"), this.next(), t4.right = this.parseMaybeAssign(), this.finishNode(t4, "AssignmentExpression");
        }
        return n4 && this.checkExpressionErrors(e4, true), a4;
      }
      parseMaybeConditional(e4, t3) {
        const r4 = this.state.start, s4 = this.state.startLoc, i4 = this.state.potentialArrowAt, n4 = this.parseExprOps(e4);
        return this.shouldExitDescending(n4, i4) ? n4 : this.parseConditional(n4, r4, s4, t3);
      }
      parseConditional(e4, t3, r4, s4) {
        if (this.eat(oa.question)) {
          const s5 = this.startNodeAt(t3, r4);
          return s5.test = e4, s5.consequent = this.parseMaybeAssignAllowIn(), this.expect(oa.colon), s5.alternate = this.parseMaybeAssign(), this.finishNode(s5, "ConditionalExpression");
        }
        return e4;
      }
      parseExprOps(e4) {
        const t3 = this.state.start, r4 = this.state.startLoc, s4 = this.state.potentialArrowAt, i4 = this.parseMaybeUnary(e4);
        return this.shouldExitDescending(i4, s4) ? i4 : this.parseExprOp(i4, t3, r4, -1);
      }
      parseExprOp(e4, t3, r4, s4) {
        let i4 = this.state.type.binop;
        if (i4 != null && (this.prodParam.hasIn || !this.match(oa._in)) && i4 > s4) {
          const n4 = this.state.type;
          if (n4 === oa.pipeline) {
            if (this.expectPlugin("pipelineOperator"), this.state.inFSharpPipelineDirectBody)
              return e4;
            this.state.inPipeline = true, this.checkPipelineAtInfixOperator(e4, t3);
          }
          const a4 = this.startNodeAt(t3, r4);
          a4.left = e4, a4.operator = this.state.value;
          const o4 = n4 === oa.logicalOR || n4 === oa.logicalAND, l3 = n4 === oa.nullishCoalescing;
          if (l3 && (i4 = oa.logicalAND.binop), this.next(), n4 === oa.pipeline && this.getPluginOption("pipelineOperator", "proposal") === "minimal" && this.match(oa.name) && this.state.value === "await" && this.prodParam.hasAwait)
            throw this.raise(this.state.start, Ea.UnexpectedAwaitAfterPipelineBody);
          a4.right = this.parseExprOpRightExpr(n4, i4), this.finishNode(a4, o4 || l3 ? "LogicalExpression" : "BinaryExpression");
          const c4 = this.state.type;
          if (l3 && (c4 === oa.logicalOR || c4 === oa.logicalAND) || o4 && c4 === oa.nullishCoalescing)
            throw this.raise(this.state.start, Ea.MixingCoalesceWithLogical);
          return this.parseExprOp(a4, t3, r4, s4);
        }
        return e4;
      }
      parseExprOpRightExpr(e4, t3) {
        const r4 = this.state.start, s4 = this.state.startLoc;
        switch (e4) {
          case oa.pipeline:
            switch (this.getPluginOption("pipelineOperator", "proposal")) {
              case "smart":
                return this.withTopicPermittingContext(() => this.parseSmartPipelineBody(this.parseExprOpBaseRightExpr(e4, t3), r4, s4));
              case "fsharp":
                return this.withSoloAwaitPermittingContext(() => this.parseFSharpPipelineBody(t3));
            }
          default:
            return this.parseExprOpBaseRightExpr(e4, t3);
        }
      }
      parseExprOpBaseRightExpr(e4, t3) {
        const r4 = this.state.start, s4 = this.state.startLoc;
        return this.parseExprOp(this.parseMaybeUnary(), r4, s4, e4.rightAssociative ? t3 - 1 : t3);
      }
      checkExponentialAfterUnary(e4) {
        this.match(oa.exponent) && this.raise(e4.argument.start, Ea.UnexpectedTokenUnaryExponentiation);
      }
      parseMaybeUnary(e4, t3) {
        const r4 = this.state.start, s4 = this.state.startLoc, i4 = this.isContextual("await");
        if (i4 && this.isAwaitAllowed()) {
          this.next();
          const e5 = this.parseAwait(r4, s4);
          return t3 || this.checkExponentialAfterUnary(e5), e5;
        }
        if (this.isContextual("module") && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak())
          return this.parseModuleExpression();
        const n4 = this.match(oa.incDec), a4 = this.startNode();
        if (this.state.type.prefix) {
          a4.operator = this.state.value, a4.prefix = true, this.match(oa._throw) && this.expectPlugin("throwExpressions");
          const r5 = this.match(oa._delete);
          if (this.next(), a4.argument = this.parseMaybeUnary(null, true), this.checkExpressionErrors(e4, true), this.state.strict && r5) {
            const e5 = a4.argument;
            e5.type === "Identifier" ? this.raise(a4.start, Ea.StrictDelete) : this.hasPropertyAsPrivateName(e5) && this.raise(a4.start, Ea.DeletePrivateField);
          }
          if (!n4)
            return t3 || this.checkExponentialAfterUnary(a4), this.finishNode(a4, "UnaryExpression");
        }
        const o4 = this.parseUpdate(a4, n4, e4);
        return i4 && (this.hasPlugin("v8intrinsic") ? this.state.type.startsExpr : this.state.type.startsExpr && !this.match(oa.modulo)) && !this.isAmbiguousAwait() ? (this.raiseOverwrite(r4, this.hasPlugin("topLevelAwait") ? Ea.AwaitNotInAsyncContext : Ea.AwaitNotInAsyncFunction), this.parseAwait(r4, s4)) : o4;
      }
      parseUpdate(e4, t3, r4) {
        if (t3)
          return this.checkLVal(e4.argument, "prefix operation"), this.finishNode(e4, "UpdateExpression");
        const s4 = this.state.start, i4 = this.state.startLoc;
        let n4 = this.parseExprSubscripts(r4);
        if (this.checkExpressionErrors(r4, false))
          return n4;
        for (; this.state.type.postfix && !this.canInsertSemicolon(); ) {
          const e5 = this.startNodeAt(s4, i4);
          e5.operator = this.state.value, e5.prefix = false, e5.argument = n4, this.checkLVal(n4, "postfix operation"), this.next(), n4 = this.finishNode(e5, "UpdateExpression");
        }
        return n4;
      }
      parseExprSubscripts(e4) {
        const t3 = this.state.start, r4 = this.state.startLoc, s4 = this.state.potentialArrowAt, i4 = this.parseExprAtom(e4);
        return this.shouldExitDescending(i4, s4) ? i4 : this.parseSubscripts(i4, t3, r4);
      }
      parseSubscripts(e4, t3, r4, s4) {
        const i4 = {optionalChainMember: false, maybeAsyncArrow: this.atPossibleAsyncArrow(e4), stop: false};
        do {
          e4 = this.parseSubscript(e4, t3, r4, s4, i4), i4.maybeAsyncArrow = false;
        } while (!i4.stop);
        return e4;
      }
      parseSubscript(e4, t3, r4, s4, i4) {
        if (!s4 && this.eat(oa.doubleColon))
          return this.parseBind(e4, t3, r4, s4, i4);
        if (this.match(oa.backQuote))
          return this.parseTaggedTemplateExpression(e4, t3, r4, i4);
        let n4 = false;
        if (this.match(oa.questionDot)) {
          if (s4 && this.lookaheadCharCode() === 40)
            return i4.stop = true, e4;
          i4.optionalChainMember = n4 = true, this.next();
        }
        return !s4 && this.match(oa.parenL) ? this.parseCoverCallAndAsyncArrowHead(e4, t3, r4, i4, n4) : n4 || this.match(oa.bracketL) || this.eat(oa.dot) ? this.parseMember(e4, t3, r4, i4, n4) : (i4.stop = true, e4);
      }
      parseMember(e4, t3, r4, s4, i4) {
        const n4 = this.startNodeAt(t3, r4), a4 = this.eat(oa.bracketL);
        n4.object = e4, n4.computed = a4;
        const o4 = a4 ? this.parseExpression() : this.parseMaybePrivateName(true);
        return this.isPrivateName(o4) && (n4.object.type === "Super" && this.raise(t3, Ea.SuperPrivateField), this.classScope.usePrivateName(this.getPrivateNameSV(o4), o4.start)), n4.property = o4, a4 && this.expect(oa.bracketR), s4.optionalChainMember ? (n4.optional = i4, this.finishNode(n4, "OptionalMemberExpression")) : this.finishNode(n4, "MemberExpression");
      }
      parseBind(e4, t3, r4, s4, i4) {
        const n4 = this.startNodeAt(t3, r4);
        return n4.object = e4, n4.callee = this.parseNoCallExpr(), i4.stop = true, this.parseSubscripts(this.finishNode(n4, "BindExpression"), t3, r4, s4);
      }
      parseCoverCallAndAsyncArrowHead(e4, t3, r4, s4, i4) {
        const n4 = this.state.maybeInArrowParameters;
        this.state.maybeInArrowParameters = true, this.next();
        let a4 = this.startNodeAt(t3, r4);
        return a4.callee = e4, s4.maybeAsyncArrow && this.expressionScope.enter(Hl()), s4.optionalChainMember && (a4.optional = i4), a4.arguments = i4 ? this.parseCallExpressionArguments(oa.parenR, false) : this.parseCallExpressionArguments(oa.parenR, s4.maybeAsyncArrow, e4.type === "Import", e4.type !== "Super", a4), this.finishCallExpression(a4, s4.optionalChainMember), s4.maybeAsyncArrow && this.shouldParseAsyncArrow() && !i4 ? (s4.stop = true, this.expressionScope.validateAsPattern(), this.expressionScope.exit(), a4 = this.parseAsyncArrowFromCallExpression(this.startNodeAt(t3, r4), a4)) : (s4.maybeAsyncArrow && this.expressionScope.exit(), this.toReferencedArguments(a4)), this.state.maybeInArrowParameters = n4, a4;
      }
      toReferencedArguments(e4, t3) {
        this.toReferencedListDeep(e4.arguments, t3);
      }
      parseTaggedTemplateExpression(e4, t3, r4, s4) {
        const i4 = this.startNodeAt(t3, r4);
        return i4.tag = e4, i4.quasi = this.parseTemplate(true), s4.optionalChainMember && this.raise(t3, Ea.OptionalChainingNoTemplate), this.finishNode(i4, "TaggedTemplateExpression");
      }
      atPossibleAsyncArrow(e4) {
        return e4.type === "Identifier" && e4.name === "async" && this.state.lastTokEnd === e4.end && !this.canInsertSemicolon() && e4.end - e4.start == 5 && e4.start === this.state.potentialArrowAt;
      }
      finishCallExpression(e4, t3) {
        if (e4.callee.type === "Import")
          if (e4.arguments.length === 2 && (this.hasPlugin("moduleAttributes") || this.expectPlugin("importAssertions")), e4.arguments.length === 0 || e4.arguments.length > 2)
            this.raise(e4.start, Ea.ImportCallArity, this.hasPlugin("importAssertions") || this.hasPlugin("moduleAttributes") ? "one or two arguments" : "one argument");
          else
            for (const r4 of e4.arguments)
              r4.type === "SpreadElement" && this.raise(r4.start, Ea.ImportCallSpreadArgument);
        return this.finishNode(e4, t3 ? "OptionalCallExpression" : "CallExpression");
      }
      parseCallExpressionArguments(e4, t3, r4, s4, i4) {
        const n4 = [];
        let a4 = true;
        const o4 = this.state.inFSharpPipelineDirectBody;
        for (this.state.inFSharpPipelineDirectBody = false; !this.eat(e4); ) {
          if (a4)
            a4 = false;
          else if (this.expect(oa.comma), this.match(e4)) {
            !r4 || this.hasPlugin("importAssertions") || this.hasPlugin("moduleAttributes") || this.raise(this.state.lastTokStart, Ea.ImportCallArgumentTrailingComma), i4 && this.addExtra(i4, "trailingComma", this.state.lastTokStart), this.next();
            break;
          }
          n4.push(this.parseExprListItem(false, t3 ? new $l() : void 0, t3 ? {start: 0} : void 0, s4));
        }
        return this.state.inFSharpPipelineDirectBody = o4, n4;
      }
      shouldParseAsyncArrow() {
        return this.match(oa.arrow) && !this.canInsertSemicolon();
      }
      parseAsyncArrowFromCallExpression(e4, t3) {
        var r4;
        return this.expect(oa.arrow), this.parseArrowExpression(e4, t3.arguments, true, (r4 = t3.extra) == null ? void 0 : r4.trailingComma), e4;
      }
      parseNoCallExpr() {
        const e4 = this.state.start, t3 = this.state.startLoc;
        return this.parseSubscripts(this.parseExprAtom(), e4, t3, true);
      }
      parseExprAtom(e4) {
        this.state.type === oa.slash && this.readRegexp();
        const t3 = this.state.potentialArrowAt === this.state.start;
        let r4;
        switch (this.state.type) {
          case oa._super:
            return this.parseSuper();
          case oa._import:
            return r4 = this.startNode(), this.next(), this.match(oa.dot) ? this.parseImportMetaProperty(r4) : (this.match(oa.parenL) || this.raise(this.state.lastTokStart, Ea.UnsupportedImport), this.finishNode(r4, "Import"));
          case oa._this:
            return r4 = this.startNode(), this.next(), this.finishNode(r4, "ThisExpression");
          case oa.name: {
            const e5 = this.state.containsEsc, r5 = this.parseIdentifier();
            if (!e5 && r5.name === "async" && !this.canInsertSemicolon()) {
              if (this.match(oa._function)) {
                const e6 = this.state.context.length - 1;
                if (this.state.context[e6] !== Ca.functionStatement)
                  throw new Error("Internal error");
                return this.state.context[e6] = Ca.functionExpression, this.next(), this.parseFunction(this.startNodeAtNode(r5), void 0, true);
              }
              if (this.match(oa.name))
                return this.lookaheadCharCode() === 61 ? this.parseAsyncArrowUnaryFunction(r5) : r5;
              if (this.match(oa._do))
                return this.parseDo(true);
            }
            return t3 && this.match(oa.arrow) && !this.canInsertSemicolon() ? (this.next(), this.parseArrowExpression(this.startNodeAtNode(r5), [r5], false)) : r5;
          }
          case oa._do:
            return this.parseDo(false);
          case oa.regexp: {
            const e5 = this.state.value;
            return r4 = this.parseLiteral(e5.value, "RegExpLiteral"), r4.pattern = e5.pattern, r4.flags = e5.flags, r4;
          }
          case oa.num:
            return this.parseLiteral(this.state.value, "NumericLiteral");
          case oa.bigint:
            return this.parseLiteral(this.state.value, "BigIntLiteral");
          case oa.decimal:
            return this.parseLiteral(this.state.value, "DecimalLiteral");
          case oa.string:
            return this.parseLiteral(this.state.value, "StringLiteral");
          case oa._null:
            return r4 = this.startNode(), this.next(), this.finishNode(r4, "NullLiteral");
          case oa._true:
          case oa._false:
            return this.parseBooleanLiteral();
          case oa.parenL:
            return this.parseParenAndDistinguishExpression(t3);
          case oa.bracketBarL:
          case oa.bracketHashL:
            return this.parseArrayLike(this.state.type === oa.bracketBarL ? oa.bracketBarR : oa.bracketR, false, true, e4);
          case oa.bracketL:
            return this.parseArrayLike(oa.bracketR, true, false, e4);
          case oa.braceBarL:
          case oa.braceHashL:
            return this.parseObjectLike(this.state.type === oa.braceBarL ? oa.braceBarR : oa.braceR, false, true, e4);
          case oa.braceL:
            return this.parseObjectLike(oa.braceR, false, false, e4);
          case oa._function:
            return this.parseFunctionOrFunctionSent();
          case oa.at:
            this.parseDecorators();
          case oa._class:
            return r4 = this.startNode(), this.takeDecorators(r4), this.parseClass(r4, false);
          case oa._new:
            return this.parseNewOrNewTarget();
          case oa.backQuote:
            return this.parseTemplate(false);
          case oa.doubleColon: {
            r4 = this.startNode(), this.next(), r4.object = null;
            const e5 = r4.callee = this.parseNoCallExpr();
            if (e5.type === "MemberExpression")
              return this.finishNode(r4, "BindExpression");
            throw this.raise(e5.start, Ea.UnsupportedBind);
          }
          case oa.hash: {
            if (this.state.inPipeline)
              return r4 = this.startNode(), this.getPluginOption("pipelineOperator", "proposal") !== "smart" && this.raise(r4.start, Ea.PrimaryTopicRequiresSmartPipeline), this.next(), this.primaryTopicReferenceIsAllowedInCurrentTopicContext() || this.raise(r4.start, Ea.PrimaryTopicNotAllowed), this.registerTopicReference(), this.finishNode(r4, "PipelinePrimaryTopicReference");
            const e5 = this.input.codePointAt(this.state.end);
            if (La(e5) || e5 === 92) {
              const e6 = this.state.start;
              if (r4 = this.parseMaybePrivateName(true), this.match(oa._in))
                this.expectPlugin("privateIn"), this.classScope.usePrivateName(this.getPrivateNameSV(r4), r4.start);
              else {
                if (!this.hasPlugin("privateIn"))
                  throw this.unexpected(e6);
                this.raise(this.state.start, Ea.PrivateInExpectedIn, this.getPrivateNameSV(r4));
              }
              return r4;
            }
          }
          case oa.relational:
            if (this.state.value === "<") {
              const e5 = this.input.codePointAt(this.nextTokenStart());
              (La(e5) || e5 === 62) && this.expectOnePlugin(["jsx", "flow", "typescript"]);
            }
          default:
            throw this.unexpected();
        }
      }
      parseAsyncArrowUnaryFunction(e4) {
        const t3 = this.startNodeAtNode(e4);
        this.prodParam.enter(pl(true, this.prodParam.hasYield));
        const r4 = [this.parseIdentifier()];
        return this.prodParam.exit(), this.hasPrecedingLineBreak() && this.raise(this.state.pos, Ea.LineTerminatorBeforeArrow), this.expect(oa.arrow), this.parseArrowExpression(t3, r4, true), t3;
      }
      parseDo(e4) {
        this.expectPlugin("doExpressions"), e4 && this.expectPlugin("asyncDoExpressions");
        const t3 = this.startNode();
        t3.async = e4, this.next();
        const r4 = this.state.labels;
        return this.state.labels = [], e4 ? (this.prodParam.enter(ll), t3.body = this.parseBlock(), this.prodParam.exit()) : t3.body = this.parseBlock(), this.state.labels = r4, this.finishNode(t3, "DoExpression");
      }
      parseSuper() {
        const e4 = this.startNode();
        return this.next(), !this.match(oa.parenL) || this.scope.allowDirectSuper || this.options.allowSuperOutsideMethod ? this.scope.allowSuper || this.options.allowSuperOutsideMethod || this.raise(e4.start, Ea.UnexpectedSuper) : this.raise(e4.start, Ea.SuperNotAllowed), this.match(oa.parenL) || this.match(oa.bracketL) || this.match(oa.dot) || this.raise(e4.start, Ea.UnsupportedSuper), this.finishNode(e4, "Super");
      }
      parseBooleanLiteral() {
        const e4 = this.startNode();
        return e4.value = this.match(oa._true), this.next(), this.finishNode(e4, "BooleanLiteral");
      }
      parseMaybePrivateName(e4) {
        if (this.match(oa.hash)) {
          e4 || this.raise(this.state.pos, Ea.UnexpectedPrivateField);
          const t3 = this.startNode();
          return this.next(), this.assertNoSpace("Unexpected space between # and identifier"), t3.id = this.parseIdentifier(true), this.finishNode(t3, "PrivateName");
        }
        return this.parseIdentifier(true);
      }
      parseFunctionOrFunctionSent() {
        const e4 = this.startNode();
        if (this.next(), this.prodParam.hasYield && this.match(oa.dot)) {
          const t3 = this.createIdentifier(this.startNodeAtNode(e4), "function");
          return this.next(), this.parseMetaProperty(e4, t3, "sent");
        }
        return this.parseFunction(e4);
      }
      parseMetaProperty(e4, t3, r4) {
        e4.meta = t3, t3.name === "function" && r4 === "sent" && (this.isContextual(r4) ? this.expectPlugin("functionSent") : this.hasPlugin("functionSent") || this.unexpected());
        const s4 = this.state.containsEsc;
        return e4.property = this.parseIdentifier(true), (e4.property.name !== r4 || s4) && this.raise(e4.property.start, Ea.UnsupportedMetaProperty, t3.name, r4), this.finishNode(e4, "MetaProperty");
      }
      parseImportMetaProperty(e4) {
        const t3 = this.createIdentifier(this.startNodeAtNode(e4), "import");
        return this.next(), this.isContextual("meta") && (this.inModule || this.raise(t3.start, va.ImportMetaOutsideModule), this.sawUnambiguousESM = true), this.parseMetaProperty(e4, t3, "meta");
      }
      parseLiteral(e4, t3, r4, s4) {
        r4 = r4 || this.state.start, s4 = s4 || this.state.startLoc;
        const i4 = this.startNodeAt(r4, s4);
        return this.addExtra(i4, "rawValue", e4), this.addExtra(i4, "raw", this.input.slice(r4, this.state.end)), i4.value = e4, this.next(), this.finishNode(i4, t3);
      }
      parseParenAndDistinguishExpression(e4) {
        const t3 = this.state.start, r4 = this.state.startLoc;
        let s4;
        this.next(), this.expressionScope.enter(Gl());
        const i4 = this.state.maybeInArrowParameters, n4 = this.state.inFSharpPipelineDirectBody;
        this.state.maybeInArrowParameters = true, this.state.inFSharpPipelineDirectBody = false;
        const a4 = this.state.start, o4 = this.state.startLoc, l3 = [], c4 = new $l(), u3 = {start: 0};
        let h4, p4, d4 = true;
        for (; !this.match(oa.parenR); ) {
          if (d4)
            d4 = false;
          else if (this.expect(oa.comma, u3.start || null), this.match(oa.parenR)) {
            p4 = this.state.start;
            break;
          }
          if (this.match(oa.ellipsis)) {
            const e5 = this.state.start, t4 = this.state.startLoc;
            h4 = this.state.start, l3.push(this.parseParenItem(this.parseRestBinding(), e5, t4)), this.checkCommaAfterRest(41);
            break;
          }
          l3.push(this.parseMaybeAssignAllowIn(c4, this.parseParenItem, u3));
        }
        const f4 = this.state.lastTokEnd, m4 = this.state.lastTokEndLoc;
        this.expect(oa.parenR), this.state.maybeInArrowParameters = i4, this.state.inFSharpPipelineDirectBody = n4;
        let y4 = this.startNodeAt(t3, r4);
        if (e4 && this.shouldParseArrow() && (y4 = this.parseArrow(y4)))
          return this.expressionScope.validateAsPattern(), this.expressionScope.exit(), this.parseArrowExpression(y4, l3, false), y4;
        if (this.expressionScope.exit(), l3.length || this.unexpected(this.state.lastTokStart), p4 && this.unexpected(p4), h4 && this.unexpected(h4), this.checkExpressionErrors(c4, true), u3.start && this.unexpected(u3.start), this.toReferencedListDeep(l3, true), l3.length > 1 ? (s4 = this.startNodeAt(a4, o4), s4.expressions = l3, this.finishNodeAt(s4, "SequenceExpression", f4, m4)) : s4 = l3[0], !this.options.createParenthesizedExpressions)
          return this.addExtra(s4, "parenthesized", true), this.addExtra(s4, "parenStart", t3), s4;
        const g4 = this.startNodeAt(t3, r4);
        return g4.expression = s4, this.finishNode(g4, "ParenthesizedExpression"), g4;
      }
      shouldParseArrow() {
        return !this.canInsertSemicolon();
      }
      parseArrow(e4) {
        if (this.eat(oa.arrow))
          return e4;
      }
      parseParenItem(e4, t3, r4) {
        return e4;
      }
      parseNewOrNewTarget() {
        const e4 = this.startNode();
        if (this.next(), this.match(oa.dot)) {
          const t3 = this.createIdentifier(this.startNodeAtNode(e4), "new");
          this.next();
          const r4 = this.parseMetaProperty(e4, t3, "target");
          return this.scope.inNonArrowFunction || this.scope.inClass || this.raise(r4.start, Ea.UnexpectedNewTarget), r4;
        }
        return this.parseNew(e4);
      }
      parseNew(e4) {
        return e4.callee = this.parseNoCallExpr(), e4.callee.type === "Import" ? this.raise(e4.callee.start, Ea.ImportCallNotNewExpression) : this.isOptionalChain(e4.callee) ? this.raise(this.state.lastTokEnd, Ea.OptionalChainingNoNew) : this.eat(oa.questionDot) && this.raise(this.state.start, Ea.OptionalChainingNoNew), this.parseNewArguments(e4), this.finishNode(e4, "NewExpression");
      }
      parseNewArguments(e4) {
        if (this.eat(oa.parenL)) {
          const t3 = this.parseExprList(oa.parenR);
          this.toReferencedList(t3), e4.arguments = t3;
        } else
          e4.arguments = [];
      }
      parseTemplateElement(e4) {
        const t3 = this.startNode();
        return this.state.value === null && (e4 || this.raise(this.state.start + 1, Ea.InvalidEscapeSequenceTemplate)), t3.value = {raw: this.input.slice(this.state.start, this.state.end).replace(/\r\n?/g, "\n"), cooked: this.state.value}, this.next(), t3.tail = this.match(oa.backQuote), this.finishNode(t3, "TemplateElement");
      }
      parseTemplate(e4) {
        const t3 = this.startNode();
        this.next(), t3.expressions = [];
        let r4 = this.parseTemplateElement(e4);
        for (t3.quasis = [r4]; !r4.tail; )
          this.expect(oa.dollarBraceL), t3.expressions.push(this.parseTemplateSubstitution()), this.expect(oa.braceR), t3.quasis.push(r4 = this.parseTemplateElement(e4));
        return this.next(), this.finishNode(t3, "TemplateLiteral");
      }
      parseTemplateSubstitution() {
        return this.parseExpression();
      }
      parseObjectLike(e4, t3, r4, s4) {
        r4 && this.expectPlugin("recordAndTuple");
        const i4 = this.state.inFSharpPipelineDirectBody;
        this.state.inFSharpPipelineDirectBody = false;
        const n4 = Object.create(null);
        let a4 = true;
        const o4 = this.startNode();
        for (o4.properties = [], this.next(); !this.match(e4); ) {
          if (a4)
            a4 = false;
          else if (this.expect(oa.comma), this.match(e4)) {
            this.addExtra(o4, "trailingComma", this.state.lastTokStart);
            break;
          }
          const i5 = this.parsePropertyDefinition(t3, s4);
          t3 || this.checkProto(i5, r4, n4, s4), r4 && !this.isObjectProperty(i5) && i5.type !== "SpreadElement" && this.raise(i5.start, Ea.InvalidRecordProperty), i5.shorthand && this.addExtra(i5, "shorthand", true), o4.properties.push(i5);
        }
        this.state.exprAllowed = false, this.next(), this.state.inFSharpPipelineDirectBody = i4;
        let l3 = "ObjectExpression";
        return t3 ? l3 = "ObjectPattern" : r4 && (l3 = "RecordExpression"), this.finishNode(o4, l3);
      }
      maybeAsyncOrAccessorProp(e4) {
        return !e4.computed && e4.key.type === "Identifier" && (this.isLiteralPropertyName() || this.match(oa.bracketL) || this.match(oa.star));
      }
      parsePropertyDefinition(e4, t3) {
        let r4 = [];
        if (this.match(oa.at))
          for (this.hasPlugin("decorators") && this.raise(this.state.start, Ea.UnsupportedPropertyDecorator); this.match(oa.at); )
            r4.push(this.parseDecorator());
        const s4 = this.startNode();
        let i4, n4, a4 = false, o4 = false, l3 = false;
        if (this.match(oa.ellipsis))
          return r4.length && this.unexpected(), e4 ? (this.next(), s4.argument = this.parseIdentifier(), this.checkCommaAfterRest(125), this.finishNode(s4, "RestElement")) : this.parseSpread();
        r4.length && (s4.decorators = r4, r4 = []), s4.method = false, (e4 || t3) && (i4 = this.state.start, n4 = this.state.startLoc), e4 || (a4 = this.eat(oa.star));
        const c4 = this.state.containsEsc, u3 = this.parsePropertyName(s4, false);
        if (!e4 && !a4 && !c4 && this.maybeAsyncOrAccessorProp(s4)) {
          const e5 = u3.name;
          e5 !== "async" || this.hasPrecedingLineBreak() || (o4 = true, a4 = this.eat(oa.star), this.parsePropertyName(s4, false)), e5 !== "get" && e5 !== "set" || (l3 = true, s4.kind = e5, this.match(oa.star) && (a4 = true, this.raise(this.state.pos, Ea.AccessorIsGenerator, e5), this.next()), this.parsePropertyName(s4, false));
        }
        return this.parseObjPropValue(s4, i4, n4, a4, o4, e4, l3, t3), s4;
      }
      getGetterSetterExpectedParamCount(e4) {
        return e4.kind === "get" ? 0 : 1;
      }
      getObjectOrClassMethodParams(e4) {
        return e4.params;
      }
      checkGetterSetterParams(e4) {
        var t3;
        const r4 = this.getGetterSetterExpectedParamCount(e4), s4 = this.getObjectOrClassMethodParams(e4), i4 = e4.start;
        s4.length !== r4 && (e4.kind === "get" ? this.raise(i4, Ea.BadGetterArity) : this.raise(i4, Ea.BadSetterArity)), e4.kind === "set" && ((t3 = s4[s4.length - 1]) == null ? void 0 : t3.type) === "RestElement" && this.raise(i4, Ea.BadSetterRestParameter);
      }
      parseObjectMethod(e4, t3, r4, s4, i4) {
        return i4 ? (this.parseMethod(e4, t3, false, false, false, "ObjectMethod"), this.checkGetterSetterParams(e4), e4) : r4 || t3 || this.match(oa.parenL) ? (s4 && this.unexpected(), e4.kind = "method", e4.method = true, this.parseMethod(e4, t3, r4, false, false, "ObjectMethod")) : void 0;
      }
      parseObjectProperty(e4, t3, r4, s4, i4) {
        return e4.shorthand = false, this.eat(oa.colon) ? (e4.value = s4 ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(i4), this.finishNode(e4, "ObjectProperty")) : e4.computed || e4.key.type !== "Identifier" ? void 0 : (this.checkReservedWord(e4.key.name, e4.key.start, true, false), s4 ? e4.value = this.parseMaybeDefault(t3, r4, e4.key.__clone()) : this.match(oa.eq) && i4 ? (i4.shorthandAssign === -1 && (i4.shorthandAssign = this.state.start), e4.value = this.parseMaybeDefault(t3, r4, e4.key.__clone())) : e4.value = e4.key.__clone(), e4.shorthand = true, this.finishNode(e4, "ObjectProperty"));
      }
      parseObjPropValue(e4, t3, r4, s4, i4, n4, a4, o4) {
        const l3 = this.parseObjectMethod(e4, s4, i4, n4, a4) || this.parseObjectProperty(e4, t3, r4, n4, o4);
        return l3 || this.unexpected(), l3;
      }
      parsePropertyName(e4, t3) {
        if (this.eat(oa.bracketL))
          e4.computed = true, e4.key = this.parseMaybeAssignAllowIn(), this.expect(oa.bracketR);
        else {
          const r4 = this.state.inPropertyName;
          this.state.inPropertyName = true, e4.key = this.match(oa.num) || this.match(oa.string) || this.match(oa.bigint) || this.match(oa.decimal) ? this.parseExprAtom() : this.parseMaybePrivateName(t3), this.isPrivateName(e4.key) || (e4.computed = false), this.state.inPropertyName = r4;
        }
        return e4.key;
      }
      initFunction(e4, t3) {
        e4.id = null, e4.generator = false, e4.async = !!t3;
      }
      parseMethod(e4, t3, r4, s4, i4, n4, a4) {
        a4 === void 0 && (a4 = false), this.initFunction(e4, r4), e4.generator = !!t3;
        const o4 = s4;
        return this.scope.enter(Ka | Qa | (a4 ? eo : 0) | (i4 ? Za : 0)), this.prodParam.enter(pl(r4, e4.generator)), this.parseFunctionParams(e4, o4), this.parseFunctionBodyAndFinish(e4, n4, true), this.prodParam.exit(), this.scope.exit(), e4;
      }
      parseArrayLike(e4, t3, r4, s4) {
        r4 && this.expectPlugin("recordAndTuple");
        const i4 = this.state.inFSharpPipelineDirectBody;
        this.state.inFSharpPipelineDirectBody = false;
        const n4 = this.startNode();
        return this.next(), n4.elements = this.parseExprList(e4, !r4, s4, n4), this.state.inFSharpPipelineDirectBody = i4, this.finishNode(n4, r4 ? "TupleExpression" : "ArrayExpression");
      }
      parseArrowExpression(e4, t3, r4, s4) {
        this.scope.enter(Ka | $a);
        let i4 = pl(r4, false);
        !this.match(oa.bracketL) && this.prodParam.hasIn && (i4 |= ul), this.prodParam.enter(i4), this.initFunction(e4, r4);
        const n4 = this.state.maybeInArrowParameters;
        return t3 && (this.state.maybeInArrowParameters = true, this.setArrowFunctionParameters(e4, t3, s4)), this.state.maybeInArrowParameters = false, this.parseFunctionBody(e4, true), this.prodParam.exit(), this.scope.exit(), this.state.maybeInArrowParameters = n4, this.finishNode(e4, "ArrowFunctionExpression");
      }
      setArrowFunctionParameters(e4, t3, r4) {
        e4.params = this.toAssignableList(t3, r4, false);
      }
      parseFunctionBodyAndFinish(e4, t3, r4) {
        r4 === void 0 && (r4 = false), this.parseFunctionBody(e4, false, r4), this.finishNode(e4, t3);
      }
      parseFunctionBody(e4, t3, r4) {
        r4 === void 0 && (r4 = false);
        const s4 = t3 && !this.match(oa.braceL);
        if (this.expressionScope.enter(Wl()), s4)
          e4.body = this.parseMaybeAssign(), this.checkParams(e4, false, t3, false);
        else {
          const s5 = this.state.strict, i4 = this.state.labels;
          this.state.labels = [], this.prodParam.enter(this.prodParam.currentFlags() | cl), e4.body = this.parseBlock(true, false, (i5) => {
            const n4 = !this.isSimpleParamList(e4.params);
            if (i5 && n4) {
              const t4 = e4.kind !== "method" && e4.kind !== "constructor" || !e4.key ? e4.start : e4.key.end;
              this.raise(t4, Ea.IllegalLanguageModeDirective);
            }
            const a4 = !s5 && this.state.strict;
            this.checkParams(e4, !(this.state.strict || t3 || r4 || n4), t3, a4), this.state.strict && e4.id && this.checkLVal(e4.id, "function name", wo, void 0, void 0, a4);
          }), this.prodParam.exit(), this.expressionScope.exit(), this.state.labels = i4;
        }
      }
      isSimpleParamList(e4) {
        for (let t3 = 0, r4 = e4.length; t3 < r4; t3++)
          if (e4[t3].type !== "Identifier")
            return false;
        return true;
      }
      checkParams(e4, t3, r4, s4) {
        s4 === void 0 && (s4 = true);
        const i4 = new Set();
        for (const n4 of e4.params)
          this.checkLVal(n4, "function parameter list", xo, t3 ? null : i4, void 0, s4);
      }
      parseExprList(e4, t3, r4, s4) {
        const i4 = [];
        let n4 = true;
        for (; !this.eat(e4); ) {
          if (n4)
            n4 = false;
          else if (this.expect(oa.comma), this.match(e4)) {
            s4 && this.addExtra(s4, "trailingComma", this.state.lastTokStart), this.next();
            break;
          }
          i4.push(this.parseExprListItem(t3, r4));
        }
        return i4;
      }
      parseExprListItem(e4, t3, r4, s4) {
        let i4;
        if (this.match(oa.comma))
          e4 || this.raise(this.state.pos, Ea.UnexpectedToken, ","), i4 = null;
        else if (this.match(oa.ellipsis)) {
          const e5 = this.state.start, s5 = this.state.startLoc;
          i4 = this.parseParenItem(this.parseSpread(t3, r4), e5, s5);
        } else if (this.match(oa.question)) {
          this.expectPlugin("partialApplication"), s4 || this.raise(this.state.start, Ea.UnexpectedArgumentPlaceholder);
          const e5 = this.startNode();
          this.next(), i4 = this.finishNode(e5, "ArgumentPlaceholder");
        } else
          i4 = this.parseMaybeAssignAllowIn(t3, this.parseParenItem, r4);
        return i4;
      }
      parseIdentifier(e4) {
        const t3 = this.startNode(), r4 = this.parseIdentifierName(t3.start, e4);
        return this.createIdentifier(t3, r4);
      }
      createIdentifier(e4, t3) {
        return e4.name = t3, e4.loc.identifierName = t3, this.finishNode(e4, "Identifier");
      }
      parseIdentifierName(e4, t3) {
        let r4;
        const {start: s4, type: i4} = this.state;
        if (i4 === oa.name)
          r4 = this.state.value;
        else {
          if (!i4.keyword)
            throw this.unexpected();
          {
            r4 = i4.keyword;
            const e5 = this.curContext();
            i4 !== oa._class && i4 !== oa._function || e5 !== Ca.functionStatement && e5 !== Ca.functionExpression || this.state.context.pop();
          }
        }
        return t3 ? this.state.type = oa.name : this.checkReservedWord(r4, s4, !!i4.keyword, false), this.next(), r4;
      }
      checkReservedWord(e4, t3, r4, s4) {
        if (this.prodParam.hasYield && e4 === "yield")
          this.raise(t3, Ea.YieldBindingIdentifier);
        else {
          if (e4 === "await") {
            if (this.prodParam.hasAwait)
              return void this.raise(t3, Ea.AwaitBindingIdentifier);
            if (this.scope.inStaticBlock && !this.scope.inNonArrowFunction)
              return void this.raise(t3, Ea.AwaitBindingIdentifierInStaticBlock);
            this.expressionScope.recordAsyncArrowParametersError(t3, Ea.AwaitBindingIdentifier);
          }
          !this.scope.inClass || this.scope.inNonArrowFunction || e4 !== "arguments" ? r4 && Ja(e4) ? this.raise(t3, Ea.UnexpectedKeyword, e4) : (this.state.strict ? s4 ? Va : qa : Ua)(e4, this.inModule) && this.raise(t3, Ea.UnexpectedReservedWord, e4) : this.raise(t3, Ea.ArgumentsInClass);
        }
      }
      isAwaitAllowed() {
        return !!this.prodParam.hasAwait || !(!this.options.allowAwaitOutsideFunction || this.scope.inFunction);
      }
      parseAwait(e4, t3) {
        const r4 = this.startNodeAt(e4, t3);
        return this.expressionScope.recordParameterInitializerError(r4.start, Ea.AwaitExpressionFormalParameter), this.eat(oa.star) && this.raise(r4.start, Ea.ObsoleteAwaitStar), this.scope.inFunction || this.options.allowAwaitOutsideFunction || (this.isAmbiguousAwait() ? this.ambiguousScriptDifferentAst = true : this.sawUnambiguousESM = true), this.state.soloAwait || (r4.argument = this.parseMaybeUnary(null, true)), this.finishNode(r4, "AwaitExpression");
      }
      isAmbiguousAwait() {
        return this.hasPrecedingLineBreak() || this.match(oa.plusMin) || this.match(oa.parenL) || this.match(oa.bracketL) || this.match(oa.backQuote) || this.match(oa.regexp) || this.match(oa.slash) || this.hasPlugin("v8intrinsic") && this.match(oa.modulo);
      }
      parseYield() {
        const e4 = this.startNode();
        return this.expressionScope.recordParameterInitializerError(e4.start, Ea.YieldInParameter), this.next(), this.match(oa.semi) || !this.match(oa.star) && !this.state.type.startsExpr || this.hasPrecedingLineBreak() ? (e4.delegate = false, e4.argument = null) : (e4.delegate = this.eat(oa.star), e4.argument = this.parseMaybeAssign()), this.finishNode(e4, "YieldExpression");
      }
      checkPipelineAtInfixOperator(e4, t3) {
        this.getPluginOption("pipelineOperator", "proposal") === "smart" && e4.type === "SequenceExpression" && this.raise(t3, Ea.PipelineHeadSequenceExpression);
      }
      parseSmartPipelineBody(e4, t3, r4) {
        return this.checkSmartPipelineBodyEarlyErrors(e4, t3), this.parseSmartPipelineBodyInStyle(e4, t3, r4);
      }
      checkSmartPipelineBodyEarlyErrors(e4, t3) {
        if (this.match(oa.arrow))
          throw this.raise(this.state.start, Ea.PipelineBodyNoArrow);
        e4.type === "SequenceExpression" && this.raise(t3, Ea.PipelineBodySequenceExpression);
      }
      parseSmartPipelineBodyInStyle(e4, t3, r4) {
        const s4 = this.startNodeAt(t3, r4), i4 = this.isSimpleReference(e4);
        return i4 ? s4.callee = e4 : (this.topicReferenceWasUsedInCurrentTopicContext() || this.raise(t3, Ea.PipelineTopicUnused), s4.expression = e4), this.finishNode(s4, i4 ? "PipelineBareFunction" : "PipelineTopicExpression");
      }
      isSimpleReference(e4) {
        switch (e4.type) {
          case "MemberExpression":
            return !e4.computed && this.isSimpleReference(e4.object);
          case "Identifier":
            return true;
          default:
            return false;
        }
      }
      withTopicPermittingContext(e4) {
        const t3 = this.state.topicContext;
        this.state.topicContext = {maxNumOfResolvableTopics: 1, maxTopicIndex: null};
        try {
          return e4();
        } finally {
          this.state.topicContext = t3;
        }
      }
      withTopicForbiddingContext(e4) {
        const t3 = this.state.topicContext;
        this.state.topicContext = {maxNumOfResolvableTopics: 0, maxTopicIndex: null};
        try {
          return e4();
        } finally {
          this.state.topicContext = t3;
        }
      }
      withSoloAwaitPermittingContext(e4) {
        const t3 = this.state.soloAwait;
        this.state.soloAwait = true;
        try {
          return e4();
        } finally {
          this.state.soloAwait = t3;
        }
      }
      allowInAnd(e4) {
        const t3 = this.prodParam.currentFlags();
        if (ul & ~t3) {
          this.prodParam.enter(t3 | ul);
          try {
            return e4();
          } finally {
            this.prodParam.exit();
          }
        }
        return e4();
      }
      disallowInAnd(e4) {
        const t3 = this.prodParam.currentFlags();
        if (ul & t3) {
          this.prodParam.enter(t3 & ~ul);
          try {
            return e4();
          } finally {
            this.prodParam.exit();
          }
        }
        return e4();
      }
      registerTopicReference() {
        this.state.topicContext.maxTopicIndex = 0;
      }
      primaryTopicReferenceIsAllowedInCurrentTopicContext() {
        return this.state.topicContext.maxNumOfResolvableTopics >= 1;
      }
      topicReferenceWasUsedInCurrentTopicContext() {
        return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;
      }
      parseFSharpPipelineBody(e4) {
        const t3 = this.state.start, r4 = this.state.startLoc;
        this.state.potentialArrowAt = this.state.start;
        const s4 = this.state.inFSharpPipelineDirectBody;
        this.state.inFSharpPipelineDirectBody = true;
        const i4 = this.parseExprOp(this.parseMaybeUnary(), t3, r4, e4);
        return this.state.inFSharpPipelineDirectBody = s4, i4;
      }
      parseModuleExpression() {
        this.expectPlugin("moduleBlocks");
        const e4 = this.startNode();
        this.next(), this.eat(oa.braceL);
        const t3 = this.initializeScopes(true);
        this.enterInitialScopes();
        const r4 = this.startNode();
        try {
          e4.body = this.parseProgram(r4, oa.braceR, "module");
        } finally {
          t3();
        }
        return this.eat(oa.braceR), this.finishNode(e4, "ModuleExpression");
      }
    }
    const rc = {kind: "loop"}, sc = {kind: "switch"}, ic = 0, nc = 1, ac = 2, oc = 4, lc = /[\uD800-\uDFFF]/u;
    class cc extends tc {
      parseTopLevel(e4, t3) {
        return e4.program = this.parseProgram(t3), e4.comments = this.state.comments, this.options.tokens && (e4.tokens = this.tokens), this.finishNode(e4, "File");
      }
      parseProgram(e4, t3, r4) {
        if (t3 === void 0 && (t3 = oa.eof), r4 === void 0 && (r4 = this.options.sourceType), e4.sourceType = r4, e4.interpreter = this.parseInterpreterDirective(), this.parseBlockBody(e4, true, true, t3), this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0)
          for (const [s4] of Array.from(this.scope.undefinedExports)) {
            const e5 = this.scope.undefinedExports.get(s4);
            this.raise(e5, Ea.ModuleExportUndefined, s4);
          }
        return this.finishNode(e4, "Program");
      }
      stmtToDirective(e4) {
        const t3 = e4.expression, r4 = this.startNodeAt(t3.start, t3.loc.start), s4 = this.startNodeAt(e4.start, e4.loc.start), i4 = this.input.slice(t3.start, t3.end), n4 = r4.value = i4.slice(1, -1);
        return this.addExtra(r4, "raw", i4), this.addExtra(r4, "rawValue", n4), s4.value = this.finishNodeAt(r4, "DirectiveLiteral", t3.end, t3.loc.end), this.finishNodeAt(s4, "Directive", e4.end, e4.loc.end);
      }
      parseInterpreterDirective() {
        if (!this.match(oa.interpreterDirective))
          return null;
        const e4 = this.startNode();
        return e4.value = this.state.value, this.next(), this.finishNode(e4, "InterpreterDirective");
      }
      isLet(e4) {
        return !!this.isContextual("let") && this.isLetKeyword(e4);
      }
      isLetKeyword(e4) {
        const t3 = this.nextTokenStart(), r4 = this.input.charCodeAt(t3);
        if (r4 === 91)
          return true;
        if (e4)
          return false;
        if (r4 === 123)
          return true;
        if (La(r4)) {
          let e5 = t3 + 1;
          for (; Oa(this.input.charCodeAt(e5)); )
            ++e5;
          const r5 = this.input.slice(t3, e5);
          if (!Xa.test(r5))
            return true;
        }
        return false;
      }
      parseStatement(e4, t3) {
        return this.match(oa.at) && this.parseDecorators(true), this.parseStatementContent(e4, t3);
      }
      parseStatementContent(e4, t3) {
        let r4 = this.state.type;
        const s4 = this.startNode();
        let i4;
        switch (this.isLet(e4) && (r4 = oa._var, i4 = "let"), r4) {
          case oa._break:
          case oa._continue:
            return this.parseBreakContinueStatement(s4, r4.keyword);
          case oa._debugger:
            return this.parseDebuggerStatement(s4);
          case oa._do:
            return this.parseDoStatement(s4);
          case oa._for:
            return this.parseForStatement(s4);
          case oa._function:
            if (this.lookaheadCharCode() === 46)
              break;
            return e4 && (this.state.strict ? this.raise(this.state.start, Ea.StrictFunction) : e4 !== "if" && e4 !== "label" && this.raise(this.state.start, Ea.SloppyFunction)), this.parseFunctionStatement(s4, false, !e4);
          case oa._class:
            return e4 && this.unexpected(), this.parseClass(s4, true);
          case oa._if:
            return this.parseIfStatement(s4);
          case oa._return:
            return this.parseReturnStatement(s4);
          case oa._switch:
            return this.parseSwitchStatement(s4);
          case oa._throw:
            return this.parseThrowStatement(s4);
          case oa._try:
            return this.parseTryStatement(s4);
          case oa._const:
          case oa._var:
            return i4 = i4 || this.state.value, e4 && i4 !== "var" && this.raise(this.state.start, Ea.UnexpectedLexicalDeclaration), this.parseVarStatement(s4, i4);
          case oa._while:
            return this.parseWhileStatement(s4);
          case oa._with:
            return this.parseWithStatement(s4);
          case oa.braceL:
            return this.parseBlock();
          case oa.semi:
            return this.parseEmptyStatement(s4);
          case oa._import: {
            const e5 = this.lookaheadCharCode();
            if (e5 === 40 || e5 === 46)
              break;
          }
          case oa._export: {
            let e5;
            return this.options.allowImportExportEverywhere || t3 || this.raise(this.state.start, Ea.UnexpectedImportExport), this.next(), r4 === oa._import ? (e5 = this.parseImport(s4), e5.type !== "ImportDeclaration" || e5.importKind && e5.importKind !== "value" || (this.sawUnambiguousESM = true)) : (e5 = this.parseExport(s4), (e5.type !== "ExportNamedDeclaration" || e5.exportKind && e5.exportKind !== "value") && (e5.type !== "ExportAllDeclaration" || e5.exportKind && e5.exportKind !== "value") && e5.type !== "ExportDefaultDeclaration" || (this.sawUnambiguousESM = true)), this.assertModuleNodeAllowed(s4), e5;
          }
          default:
            if (this.isAsyncFunction())
              return e4 && this.raise(this.state.start, Ea.AsyncFunctionInSingleStatementContext), this.next(), this.parseFunctionStatement(s4, true, !e4);
        }
        const n4 = this.state.value, a4 = this.parseExpression();
        return r4 === oa.name && a4.type === "Identifier" && this.eat(oa.colon) ? this.parseLabeledStatement(s4, n4, a4, e4) : this.parseExpressionStatement(s4, a4);
      }
      assertModuleNodeAllowed(e4) {
        this.options.allowImportExportEverywhere || this.inModule || this.raise(e4.start, va.ImportOutsideModule);
      }
      takeDecorators(e4) {
        const t3 = this.state.decoratorStack[this.state.decoratorStack.length - 1];
        t3.length && (e4.decorators = t3, this.resetStartLocationFromNode(e4, t3[0]), this.state.decoratorStack[this.state.decoratorStack.length - 1] = []);
      }
      canHaveLeadingDecorator() {
        return this.match(oa._class);
      }
      parseDecorators(e4) {
        const t3 = this.state.decoratorStack[this.state.decoratorStack.length - 1];
        for (; this.match(oa.at); ) {
          const e5 = this.parseDecorator();
          t3.push(e5);
        }
        if (this.match(oa._export))
          e4 || this.unexpected(), this.hasPlugin("decorators") && !this.getPluginOption("decorators", "decoratorsBeforeExport") && this.raise(this.state.start, Ea.DecoratorExportClass);
        else if (!this.canHaveLeadingDecorator())
          throw this.raise(this.state.start, Ea.UnexpectedLeadingDecorator);
      }
      parseDecorator() {
        this.expectOnePlugin(["decorators-legacy", "decorators"]);
        const e4 = this.startNode();
        if (this.next(), this.hasPlugin("decorators")) {
          this.state.decoratorStack.push([]);
          const t3 = this.state.start, r4 = this.state.startLoc;
          let s4;
          if (this.eat(oa.parenL))
            s4 = this.parseExpression(), this.expect(oa.parenR);
          else
            for (s4 = this.parseIdentifier(false); this.eat(oa.dot); ) {
              const e5 = this.startNodeAt(t3, r4);
              e5.object = s4, e5.property = this.parseIdentifier(true), e5.computed = false, s4 = this.finishNode(e5, "MemberExpression");
            }
          e4.expression = this.parseMaybeDecoratorArguments(s4), this.state.decoratorStack.pop();
        } else
          e4.expression = this.parseExprSubscripts();
        return this.finishNode(e4, "Decorator");
      }
      parseMaybeDecoratorArguments(e4) {
        if (this.eat(oa.parenL)) {
          const t3 = this.startNodeAtNode(e4);
          return t3.callee = e4, t3.arguments = this.parseCallExpressionArguments(oa.parenR, false), this.toReferencedList(t3.arguments), this.finishNode(t3, "CallExpression");
        }
        return e4;
      }
      parseBreakContinueStatement(e4, t3) {
        const r4 = t3 === "break";
        return this.next(), this.isLineTerminator() ? e4.label = null : (e4.label = this.parseIdentifier(), this.semicolon()), this.verifyBreakContinue(e4, t3), this.finishNode(e4, r4 ? "BreakStatement" : "ContinueStatement");
      }
      verifyBreakContinue(e4, t3) {
        const r4 = t3 === "break";
        let s4;
        for (s4 = 0; s4 < this.state.labels.length; ++s4) {
          const t4 = this.state.labels[s4];
          if (e4.label == null || t4.name === e4.label.name) {
            if (t4.kind != null && (r4 || t4.kind === "loop"))
              break;
            if (e4.label && r4)
              break;
          }
        }
        s4 === this.state.labels.length && this.raise(e4.start, Ea.IllegalBreakContinue, t3);
      }
      parseDebuggerStatement(e4) {
        return this.next(), this.semicolon(), this.finishNode(e4, "DebuggerStatement");
      }
      parseHeaderExpression() {
        this.expect(oa.parenL);
        const e4 = this.parseExpression();
        return this.expect(oa.parenR), e4;
      }
      parseDoStatement(e4) {
        return this.next(), this.state.labels.push(rc), e4.body = this.withTopicForbiddingContext(() => this.parseStatement("do")), this.state.labels.pop(), this.expect(oa._while), e4.test = this.parseHeaderExpression(), this.eat(oa.semi), this.finishNode(e4, "DoWhileStatement");
      }
      parseForStatement(e4) {
        this.next(), this.state.labels.push(rc);
        let t3 = -1;
        if (this.isAwaitAllowed() && this.eatContextual("await") && (t3 = this.state.lastTokStart), this.scope.enter(Ha), this.expect(oa.parenL), this.match(oa.semi))
          return t3 > -1 && this.unexpected(t3), this.parseFor(e4, null);
        const r4 = this.isContextual("let"), s4 = r4 && this.isLetKeyword();
        if (this.match(oa._var) || this.match(oa._const) || s4) {
          const r5 = this.startNode(), i5 = s4 ? "let" : this.state.value;
          return this.next(), this.parseVar(r5, true, i5), this.finishNode(r5, "VariableDeclaration"), (this.match(oa._in) || this.isContextual("of")) && r5.declarations.length === 1 ? this.parseForIn(e4, r5, t3) : (t3 > -1 && this.unexpected(t3), this.parseFor(e4, r5));
        }
        const i4 = this.match(oa.name) && !this.state.containsEsc, n4 = new $l(), a4 = this.parseExpression(true, n4), o4 = this.isContextual("of");
        if (o4 && (r4 ? this.raise(a4.start, Ea.ForOfLet) : t3 === -1 && i4 && a4.type === "Identifier" && a4.name === "async" && this.raise(a4.start, Ea.ForOfAsync)), o4 || this.match(oa._in)) {
          this.toAssignable(a4, true);
          const r5 = o4 ? "for-of statement" : "for-in statement";
          return this.checkLVal(a4, r5), this.parseForIn(e4, a4, t3);
        }
        return this.checkExpressionErrors(n4, true), t3 > -1 && this.unexpected(t3), this.parseFor(e4, a4);
      }
      parseFunctionStatement(e4, t3, r4) {
        return this.next(), this.parseFunction(e4, nc | (r4 ? 0 : ac), t3);
      }
      parseIfStatement(e4) {
        return this.next(), e4.test = this.parseHeaderExpression(), e4.consequent = this.parseStatement("if"), e4.alternate = this.eat(oa._else) ? this.parseStatement("if") : null, this.finishNode(e4, "IfStatement");
      }
      parseReturnStatement(e4) {
        return this.prodParam.hasReturn || this.options.allowReturnOutsideFunction || this.raise(this.state.start, Ea.IllegalReturn), this.next(), this.isLineTerminator() ? e4.argument = null : (e4.argument = this.parseExpression(), this.semicolon()), this.finishNode(e4, "ReturnStatement");
      }
      parseSwitchStatement(e4) {
        this.next(), e4.discriminant = this.parseHeaderExpression();
        const t3 = e4.cases = [];
        let r4, s4;
        for (this.expect(oa.braceL), this.state.labels.push(sc), this.scope.enter(Ha); !this.match(oa.braceR); )
          if (this.match(oa._case) || this.match(oa._default)) {
            const e5 = this.match(oa._case);
            r4 && this.finishNode(r4, "SwitchCase"), t3.push(r4 = this.startNode()), r4.consequent = [], this.next(), e5 ? r4.test = this.parseExpression() : (s4 && this.raise(this.state.lastTokStart, Ea.MultipleDefaultsInSwitch), s4 = true, r4.test = null), this.expect(oa.colon);
          } else
            r4 ? r4.consequent.push(this.parseStatement(null)) : this.unexpected();
        return this.scope.exit(), r4 && this.finishNode(r4, "SwitchCase"), this.next(), this.state.labels.pop(), this.finishNode(e4, "SwitchStatement");
      }
      parseThrowStatement(e4) {
        return this.next(), this.hasPrecedingLineBreak() && this.raise(this.state.lastTokEnd, Ea.NewlineAfterThrow), e4.argument = this.parseExpression(), this.semicolon(), this.finishNode(e4, "ThrowStatement");
      }
      parseCatchClauseParam() {
        const e4 = this.parseBindingAtom(), t3 = e4.type === "Identifier";
        return this.scope.enter(t3 ? Ya : 0), this.checkLVal(e4, "catch clause", go2), e4;
      }
      parseTryStatement(e4) {
        if (this.next(), e4.block = this.parseBlock(), e4.handler = null, this.match(oa._catch)) {
          const t3 = this.startNode();
          this.next(), this.match(oa.parenL) ? (this.expect(oa.parenL), t3.param = this.parseCatchClauseParam(), this.expect(oa.parenR)) : (t3.param = null, this.scope.enter(Ha)), t3.body = this.withTopicForbiddingContext(() => this.parseBlock(false, false)), this.scope.exit(), e4.handler = this.finishNode(t3, "CatchClause");
        }
        return e4.finalizer = this.eat(oa._finally) ? this.parseBlock() : null, e4.handler || e4.finalizer || this.raise(e4.start, Ea.NoCatchOrFinally), this.finishNode(e4, "TryStatement");
      }
      parseVarStatement(e4, t3) {
        return this.next(), this.parseVar(e4, false, t3), this.semicolon(), this.finishNode(e4, "VariableDeclaration");
      }
      parseWhileStatement(e4) {
        return this.next(), e4.test = this.parseHeaderExpression(), this.state.labels.push(rc), e4.body = this.withTopicForbiddingContext(() => this.parseStatement("while")), this.state.labels.pop(), this.finishNode(e4, "WhileStatement");
      }
      parseWithStatement(e4) {
        return this.state.strict && this.raise(this.state.start, Ea.StrictWith), this.next(), e4.object = this.parseHeaderExpression(), e4.body = this.withTopicForbiddingContext(() => this.parseStatement("with")), this.finishNode(e4, "WithStatement");
      }
      parseEmptyStatement(e4) {
        return this.next(), this.finishNode(e4, "EmptyStatement");
      }
      parseLabeledStatement(e4, t3, r4, s4) {
        for (const n4 of this.state.labels)
          n4.name === t3 && this.raise(r4.start, Ea.LabelRedeclaration, t3);
        const i4 = this.state.type.isLoop ? "loop" : this.match(oa._switch) ? "switch" : null;
        for (let n4 = this.state.labels.length - 1; n4 >= 0; n4--) {
          const t4 = this.state.labels[n4];
          if (t4.statementStart !== e4.start)
            break;
          t4.statementStart = this.state.start, t4.kind = i4;
        }
        return this.state.labels.push({name: t3, kind: i4, statementStart: this.state.start}), e4.body = this.parseStatement(s4 ? s4.indexOf("label") === -1 ? s4 + "label" : s4 : "label"), this.state.labels.pop(), e4.label = r4, this.finishNode(e4, "LabeledStatement");
      }
      parseExpressionStatement(e4, t3) {
        return e4.expression = t3, this.semicolon(), this.finishNode(e4, "ExpressionStatement");
      }
      parseBlock(e4, t3, r4) {
        e4 === void 0 && (e4 = false), t3 === void 0 && (t3 = true);
        const s4 = this.startNode();
        return e4 && this.state.strictErrors.clear(), this.expect(oa.braceL), t3 && this.scope.enter(Ha), this.parseBlockBody(s4, e4, false, oa.braceR, r4), t3 && this.scope.exit(), this.finishNode(s4, "BlockStatement");
      }
      isValidDirective(e4) {
        return e4.type === "ExpressionStatement" && e4.expression.type === "StringLiteral" && !e4.expression.extra.parenthesized;
      }
      parseBlockBody(e4, t3, r4, s4, i4) {
        const n4 = e4.body = [], a4 = e4.directives = [];
        this.parseBlockOrModuleBlockBody(n4, t3 ? a4 : void 0, r4, s4, i4);
      }
      parseBlockOrModuleBlockBody(e4, t3, r4, s4, i4) {
        const n4 = this.state.strict;
        let a4 = false, o4 = false;
        for (; !this.match(s4); ) {
          const s5 = this.parseStatement(null, r4);
          if (t3 && !o4) {
            if (this.isValidDirective(s5)) {
              const e5 = this.stmtToDirective(s5);
              t3.push(e5), a4 || e5.value.value !== "use strict" || (a4 = true, this.setStrict(true));
              continue;
            }
            o4 = true, this.state.strictErrors.clear();
          }
          e4.push(s5);
        }
        i4 && i4.call(this, a4), n4 || this.setStrict(false), this.next();
      }
      parseFor(e4, t3) {
        return e4.init = t3, this.semicolon(false), e4.test = this.match(oa.semi) ? null : this.parseExpression(), this.semicolon(false), e4.update = this.match(oa.parenR) ? null : this.parseExpression(), this.expect(oa.parenR), e4.body = this.withTopicForbiddingContext(() => this.parseStatement("for")), this.scope.exit(), this.state.labels.pop(), this.finishNode(e4, "ForStatement");
      }
      parseForIn(e4, t3, r4) {
        const s4 = this.match(oa._in);
        return this.next(), s4 ? r4 > -1 && this.unexpected(r4) : e4.await = r4 > -1, t3.type !== "VariableDeclaration" || t3.declarations[0].init == null || s4 && !this.state.strict && t3.kind === "var" && t3.declarations[0].id.type === "Identifier" ? t3.type === "AssignmentPattern" && this.raise(t3.start, Ea.InvalidLhs, "for-loop") : this.raise(t3.start, Ea.ForInOfLoopInitializer, s4 ? "for-in" : "for-of"), e4.left = t3, e4.right = s4 ? this.parseExpression() : this.parseMaybeAssignAllowIn(), this.expect(oa.parenR), e4.body = this.withTopicForbiddingContext(() => this.parseStatement("for")), this.scope.exit(), this.state.labels.pop(), this.finishNode(e4, s4 ? "ForInStatement" : "ForOfStatement");
      }
      parseVar(e4, t3, r4) {
        const s4 = e4.declarations = [], i4 = this.hasPlugin("typescript");
        for (e4.kind = r4; ; ) {
          const e5 = this.startNode();
          if (this.parseVarId(e5, r4), this.eat(oa.eq) ? e5.init = t3 ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn() : (r4 !== "const" || this.match(oa._in) || this.isContextual("of") ? e5.id.type === "Identifier" || t3 && (this.match(oa._in) || this.isContextual("of")) || this.raise(this.state.lastTokEnd, Ea.DeclarationMissingInitializer, "Complex binding patterns") : i4 || this.raise(this.state.lastTokEnd, Ea.DeclarationMissingInitializer, "Const declarations"), e5.init = null), s4.push(this.finishNode(e5, "VariableDeclarator")), !this.eat(oa.comma))
            break;
        }
        return e4;
      }
      parseVarId(e4, t3) {
        e4.id = this.parseBindingAtom(), this.checkLVal(e4.id, "variable declaration", t3 === "var" ? xo : go2, void 0, t3 !== "var");
      }
      parseFunction(e4, t3, r4) {
        t3 === void 0 && (t3 = ic), r4 === void 0 && (r4 = false);
        const s4 = t3 & nc, i4 = t3 & ac, n4 = !(!s4 || t3 & oc);
        this.initFunction(e4, r4), this.match(oa.star) && i4 && this.raise(this.state.start, Ea.GeneratorInSingleStatementContext), e4.generator = this.eat(oa.star), s4 && (e4.id = this.parseFunctionId(n4));
        const a4 = this.state.maybeInArrowParameters;
        return this.state.maybeInArrowParameters = false, this.scope.enter(Ka), this.prodParam.enter(pl(r4, e4.generator)), s4 || (e4.id = this.parseFunctionId()), this.parseFunctionParams(e4, false), this.withTopicForbiddingContext(() => {
          this.parseFunctionBodyAndFinish(e4, s4 ? "FunctionDeclaration" : "FunctionExpression");
        }), this.prodParam.exit(), this.scope.exit(), s4 && !i4 && this.registerFunctionStatementId(e4), this.state.maybeInArrowParameters = a4, e4;
      }
      parseFunctionId(e4) {
        return e4 || this.match(oa.name) ? this.parseIdentifier() : null;
      }
      parseFunctionParams(e4, t3) {
        this.expect(oa.parenL), this.expressionScope.enter(Xl()), e4.params = this.parseBindingList(oa.parenR, 41, false, t3), this.expressionScope.exit();
      }
      registerFunctionStatementId(e4) {
        e4.id && this.scope.declareName(e4.id.name, this.state.strict || e4.generator || e4.async ? this.scope.treatFunctionsAsVar ? xo : go2 : bo, e4.id.start);
      }
      parseClass(e4, t3, r4) {
        this.next(), this.takeDecorators(e4);
        const s4 = this.state.strict;
        return this.state.strict = true, this.parseClassId(e4, t3, r4), this.parseClassSuper(e4), e4.body = this.parseClassBody(!!e4.superClass, s4), this.finishNode(e4, t3 ? "ClassDeclaration" : "ClassExpression");
      }
      isClassProperty() {
        return this.match(oa.eq) || this.match(oa.semi) || this.match(oa.braceR);
      }
      isClassMethod() {
        return this.match(oa.parenL);
      }
      isNonstaticConstructor(e4) {
        return !(e4.computed || e4.static || e4.key.name !== "constructor" && e4.key.value !== "constructor");
      }
      parseClassBody(e4, t3) {
        this.classScope.enter();
        const r4 = {hadConstructor: false, hadSuperClass: e4};
        let s4 = [];
        const i4 = this.startNode();
        if (i4.body = [], this.expect(oa.braceL), this.withTopicForbiddingContext(() => {
          for (; !this.match(oa.braceR); ) {
            if (this.eat(oa.semi)) {
              if (s4.length > 0)
                throw this.raise(this.state.lastTokEnd, Ea.DecoratorSemicolon);
              continue;
            }
            if (this.match(oa.at)) {
              s4.push(this.parseDecorator());
              continue;
            }
            const e5 = this.startNode();
            s4.length && (e5.decorators = s4, this.resetStartLocationFromNode(e5, s4[0]), s4 = []), this.parseClassMember(i4, e5, r4), e5.kind === "constructor" && e5.decorators && e5.decorators.length > 0 && this.raise(e5.start, Ea.DecoratorConstructor);
          }
        }), this.state.strict = t3, this.next(), s4.length)
          throw this.raise(this.state.start, Ea.TrailingDecorator);
        return this.classScope.exit(), this.finishNode(i4, "ClassBody");
      }
      parseClassMemberFromModifier(e4, t3) {
        const r4 = this.parseIdentifier(true);
        if (this.isClassMethod()) {
          const s4 = t3;
          return s4.kind = "method", s4.computed = false, s4.key = r4, s4.static = false, this.pushClassMethod(e4, s4, false, false, false, false), true;
        }
        if (this.isClassProperty()) {
          const s4 = t3;
          return s4.computed = false, s4.key = r4, s4.static = false, e4.body.push(this.parseClassProperty(s4)), true;
        }
        return false;
      }
      parseClassMember(e4, t3, r4) {
        const s4 = this.isContextual("static");
        if (s4) {
          if (this.parseClassMemberFromModifier(e4, t3))
            return;
          if (this.eat(oa.braceL))
            return void this.parseClassStaticBlock(e4, t3);
        }
        this.parseClassMemberWithIsStatic(e4, t3, r4, s4);
      }
      parseClassMemberWithIsStatic(e4, t3, r4, s4) {
        const i4 = t3, n4 = t3, a4 = t3, o4 = t3, l3 = i4, c4 = i4;
        if (t3.static = s4, this.eat(oa.star))
          return l3.kind = "method", this.parseClassElementName(l3), this.isPrivateName(l3.key) ? void this.pushClassPrivateMethod(e4, n4, true, false) : (this.isNonstaticConstructor(i4) && this.raise(i4.key.start, Ea.ConstructorIsGenerator), void this.pushClassMethod(e4, i4, true, false, false, false));
        const u3 = this.state.containsEsc, h4 = this.parseClassElementName(t3), p4 = this.isPrivateName(h4), d4 = h4.type === "Identifier", f4 = this.state.start;
        if (this.parsePostMemberNameModifiers(c4), this.isClassMethod()) {
          if (l3.kind = "method", p4)
            return void this.pushClassPrivateMethod(e4, n4, false, false);
          const s5 = this.isNonstaticConstructor(i4);
          let a5 = false;
          s5 && (i4.kind = "constructor", r4.hadConstructor && !this.hasPlugin("typescript") && this.raise(h4.start, Ea.DuplicateConstructor), s5 && this.hasPlugin("typescript") && t3.override && this.raise(h4.start, Ea.OverrideOnConstructor), r4.hadConstructor = true, a5 = r4.hadSuperClass), this.pushClassMethod(e4, i4, false, false, s5, a5);
        } else if (this.isClassProperty())
          p4 ? this.pushClassPrivateProperty(e4, o4) : this.pushClassProperty(e4, a4);
        else if (!d4 || h4.name !== "async" || u3 || this.isLineTerminator())
          !d4 || h4.name !== "get" && h4.name !== "set" || u3 || this.match(oa.star) && this.isLineTerminator() ? this.isLineTerminator() ? p4 ? this.pushClassPrivateProperty(e4, o4) : this.pushClassProperty(e4, a4) : this.unexpected() : (l3.kind = h4.name, this.parseClassElementName(i4), this.isPrivateName(l3.key) ? this.pushClassPrivateMethod(e4, n4, false, false) : (this.isNonstaticConstructor(i4) && this.raise(i4.key.start, Ea.ConstructorIsAccessor), this.pushClassMethod(e4, i4, false, false, false, false)), this.checkGetterSetterParams(i4));
        else {
          const t4 = this.eat(oa.star);
          c4.optional && this.unexpected(f4), l3.kind = "method", this.parseClassElementName(l3), this.parsePostMemberNameModifiers(c4), this.isPrivateName(l3.key) ? this.pushClassPrivateMethod(e4, n4, t4, true) : (this.isNonstaticConstructor(i4) && this.raise(i4.key.start, Ea.ConstructorIsAsync), this.pushClassMethod(e4, i4, t4, true, false, false));
        }
      }
      parseClassElementName(e4) {
        const t3 = this.parsePropertyName(e4, true);
        return e4.computed || !e4.static || t3.name !== "prototype" && t3.value !== "prototype" || this.raise(t3.start, Ea.StaticPrototype), this.isPrivateName(t3) && this.getPrivateNameSV(t3) === "constructor" && this.raise(t3.start, Ea.ConstructorClassPrivateField), t3;
      }
      parseClassStaticBlock(e4, t3) {
        var r4;
        this.expectPlugin("classStaticBlock", t3.start), this.scope.enter(eo | to | Qa);
        const s4 = this.state.labels;
        this.state.labels = [], this.prodParam.enter(al);
        const i4 = t3.body = [];
        this.parseBlockOrModuleBlockBody(i4, void 0, false, oa.braceR), this.prodParam.exit(), this.scope.exit(), this.state.labels = s4, e4.body.push(this.finishNode(t3, "StaticBlock")), (r4 = t3.decorators) != null && r4.length && this.raise(t3.start, Ea.DecoratorStaticBlock);
      }
      pushClassProperty(e4, t3) {
        t3.computed || t3.key.name !== "constructor" && t3.key.value !== "constructor" || this.raise(t3.key.start, Ea.ConstructorClassField), e4.body.push(this.parseClassProperty(t3));
      }
      pushClassPrivateProperty(e4, t3) {
        const r4 = this.parseClassPrivateProperty(t3);
        e4.body.push(r4), this.classScope.declarePrivateName(this.getPrivateNameSV(r4.key), Bo, r4.key.start);
      }
      pushClassMethod(e4, t3, r4, s4, i4, n4) {
        e4.body.push(this.parseMethod(t3, r4, s4, i4, n4, "ClassMethod", true));
      }
      pushClassPrivateMethod(e4, t3, r4, s4) {
        const i4 = this.parseMethod(t3, r4, s4, false, false, "ClassPrivateMethod", true);
        e4.body.push(i4);
        const n4 = i4.kind === "get" ? i4.static ? Mo : Oo : i4.kind === "set" ? i4.static ? Lo : _o : Bo;
        this.classScope.declarePrivateName(this.getPrivateNameSV(i4.key), n4, i4.key.start);
      }
      parsePostMemberNameModifiers(e4) {
      }
      parseClassPrivateProperty(e4) {
        return this.parseInitializer(e4), this.semicolon(), this.finishNode(e4, "ClassPrivateProperty");
      }
      parseClassProperty(e4) {
        return this.parseInitializer(e4), this.semicolon(), this.finishNode(e4, "ClassProperty");
      }
      parseInitializer(e4) {
        this.scope.enter(eo | Qa), this.expressionScope.enter(Wl()), this.prodParam.enter(al), e4.value = this.eat(oa.eq) ? this.parseMaybeAssignAllowIn() : null, this.expressionScope.exit(), this.prodParam.exit(), this.scope.exit();
      }
      parseClassId(e4, t3, r4, s4) {
        s4 === void 0 && (s4 = yo), this.match(oa.name) ? (e4.id = this.parseIdentifier(), t3 && this.checkLVal(e4.id, "class name", s4)) : r4 || !t3 ? e4.id = null : this.unexpected(null, Ea.MissingClassName);
      }
      parseClassSuper(e4) {
        e4.superClass = this.eat(oa._extends) ? this.parseExprSubscripts() : null;
      }
      parseExport(e4) {
        const t3 = this.maybeParseExportDefaultSpecifier(e4), r4 = !t3 || this.eat(oa.comma), s4 = r4 && this.eatExportStar(e4), i4 = s4 && this.maybeParseExportNamespaceSpecifier(e4), n4 = r4 && (!i4 || this.eat(oa.comma)), a4 = t3 || s4;
        if (s4 && !i4)
          return t3 && this.unexpected(), this.parseExportFrom(e4, true), this.finishNode(e4, "ExportAllDeclaration");
        const o4 = this.maybeParseExportNamedSpecifiers(e4);
        if (t3 && r4 && !s4 && !o4 || i4 && n4 && !o4)
          throw this.unexpected(null, oa.braceL);
        let l3;
        if (a4 || o4 ? (l3 = false, this.parseExportFrom(e4, a4)) : l3 = this.maybeParseExportDeclaration(e4), a4 || o4 || l3)
          return this.checkExport(e4, true, false, !!e4.source), this.finishNode(e4, "ExportNamedDeclaration");
        if (this.eat(oa._default))
          return e4.declaration = this.parseExportDefaultExpression(), this.checkExport(e4, true, true), this.finishNode(e4, "ExportDefaultDeclaration");
        throw this.unexpected(null, oa.braceL);
      }
      eatExportStar(e4) {
        return this.eat(oa.star);
      }
      maybeParseExportDefaultSpecifier(e4) {
        if (this.isExportDefaultSpecifier()) {
          this.expectPlugin("exportDefaultFrom");
          const t3 = this.startNode();
          return t3.exported = this.parseIdentifier(true), e4.specifiers = [this.finishNode(t3, "ExportDefaultSpecifier")], true;
        }
        return false;
      }
      maybeParseExportNamespaceSpecifier(e4) {
        if (this.isContextual("as")) {
          e4.specifiers || (e4.specifiers = []);
          const t3 = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);
          return this.next(), t3.exported = this.parseModuleExportName(), e4.specifiers.push(this.finishNode(t3, "ExportNamespaceSpecifier")), true;
        }
        return false;
      }
      maybeParseExportNamedSpecifiers(e4) {
        return !!this.match(oa.braceL) && (e4.specifiers || (e4.specifiers = []), e4.specifiers.push(...this.parseExportSpecifiers()), e4.source = null, e4.declaration = null, true);
      }
      maybeParseExportDeclaration(e4) {
        return !!this.shouldParseExportDeclaration() && (e4.specifiers = [], e4.source = null, e4.declaration = this.parseExportDeclaration(e4), true);
      }
      isAsyncFunction() {
        if (!this.isContextual("async"))
          return false;
        const e4 = this.nextTokenStart();
        return !la.test(this.input.slice(this.state.pos, e4)) && this.isUnparsedContextual(e4, "function");
      }
      parseExportDefaultExpression() {
        const e4 = this.startNode(), t3 = this.isAsyncFunction();
        if (this.match(oa._function) || t3)
          return this.next(), t3 && this.next(), this.parseFunction(e4, nc | oc, t3);
        if (this.match(oa._class))
          return this.parseClass(e4, true, true);
        if (this.match(oa.at))
          return this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") && this.raise(this.state.start, Ea.DecoratorBeforeExport), this.parseDecorators(false), this.parseClass(e4, true, true);
        if (this.match(oa._const) || this.match(oa._var) || this.isLet())
          throw this.raise(this.state.start, Ea.UnsupportedDefaultExport);
        {
          const e5 = this.parseMaybeAssignAllowIn();
          return this.semicolon(), e5;
        }
      }
      parseExportDeclaration(e4) {
        return this.parseStatement(null);
      }
      isExportDefaultSpecifier() {
        if (this.match(oa.name)) {
          const e5 = this.state.value;
          if (e5 === "async" && !this.state.containsEsc || e5 === "let")
            return false;
          if ((e5 === "type" || e5 === "interface") && !this.state.containsEsc) {
            const e6 = this.lookahead();
            if (e6.type === oa.name && e6.value !== "from" || e6.type === oa.braceL)
              return this.expectOnePlugin(["flow", "typescript"]), false;
          }
        } else if (!this.match(oa._default))
          return false;
        const e4 = this.nextTokenStart(), t3 = this.isUnparsedContextual(e4, "from");
        if (this.input.charCodeAt(e4) === 44 || this.match(oa.name) && t3)
          return true;
        if (this.match(oa._default) && t3) {
          const t4 = this.input.charCodeAt(this.nextTokenStartSince(e4 + 4));
          return t4 === 34 || t4 === 39;
        }
        return false;
      }
      parseExportFrom(e4, t3) {
        if (this.eatContextual("from")) {
          e4.source = this.parseImportSource(), this.checkExport(e4);
          const t4 = this.maybeParseImportAssertions();
          t4 && (e4.assertions = t4);
        } else
          t3 ? this.unexpected() : e4.source = null;
        this.semicolon();
      }
      shouldParseExportDeclaration() {
        if (this.match(oa.at) && (this.expectOnePlugin(["decorators", "decorators-legacy"]), this.hasPlugin("decorators"))) {
          if (!this.getPluginOption("decorators", "decoratorsBeforeExport"))
            return true;
          this.unexpected(this.state.start, Ea.DecoratorBeforeExport);
        }
        return this.state.type.keyword === "var" || this.state.type.keyword === "const" || this.state.type.keyword === "function" || this.state.type.keyword === "class" || this.isLet() || this.isAsyncFunction();
      }
      checkExport(e4, t3, r4, s4) {
        if (t3) {
          if (r4) {
            if (this.checkDuplicateExports(e4, "default"), this.hasPlugin("exportDefaultFrom")) {
              var i4;
              const t4 = e4.declaration;
              t4.type !== "Identifier" || t4.name !== "from" || t4.end - t4.start != 4 || (i4 = t4.extra) != null && i4.parenthesized || this.raise(t4.start, Ea.ExportDefaultFromAsIdentifier);
            }
          } else if (e4.specifiers && e4.specifiers.length)
            for (const n4 of e4.specifiers) {
              const {exported: e5} = n4, t4 = e5.type === "Identifier" ? e5.name : e5.value;
              if (this.checkDuplicateExports(n4, t4), !s4 && n4.local) {
                const {local: e6} = n4;
                e6.type === "StringLiteral" ? this.raise(n4.start, Ea.ExportBindingIsString, e6.value, t4) : (this.checkReservedWord(e6.name, e6.start, true, false), this.scope.checkLocalExport(e6));
              }
            }
          else if (e4.declaration) {
            if (e4.declaration.type === "FunctionDeclaration" || e4.declaration.type === "ClassDeclaration") {
              const t4 = e4.declaration.id;
              if (!t4)
                throw new Error("Assertion failure");
              this.checkDuplicateExports(e4, t4.name);
            } else if (e4.declaration.type === "VariableDeclaration")
              for (const n4 of e4.declaration.declarations)
                this.checkDeclaration(n4.id);
          }
        }
        if (this.state.decoratorStack[this.state.decoratorStack.length - 1].length)
          throw this.raise(e4.start, Ea.UnsupportedDecoratorExport);
      }
      checkDeclaration(e4) {
        if (e4.type === "Identifier")
          this.checkDuplicateExports(e4, e4.name);
        else if (e4.type === "ObjectPattern")
          for (const t3 of e4.properties)
            this.checkDeclaration(t3);
        else if (e4.type === "ArrayPattern")
          for (const t3 of e4.elements)
            t3 && this.checkDeclaration(t3);
        else
          e4.type === "ObjectProperty" ? this.checkDeclaration(e4.value) : e4.type === "RestElement" ? this.checkDeclaration(e4.argument) : e4.type === "AssignmentPattern" && this.checkDeclaration(e4.left);
      }
      checkDuplicateExports(e4, t3) {
        this.state.exportedIdentifiers.indexOf(t3) > -1 && this.raise(e4.start, t3 === "default" ? Ea.DuplicateDefaultExport : Ea.DuplicateExport, t3), this.state.exportedIdentifiers.push(t3);
      }
      parseExportSpecifiers() {
        const e4 = [];
        let t3 = true;
        for (this.expect(oa.braceL); !this.eat(oa.braceR); ) {
          if (t3)
            t3 = false;
          else if (this.expect(oa.comma), this.eat(oa.braceR))
            break;
          const r4 = this.startNode();
          r4.local = this.parseModuleExportName(), r4.exported = this.eatContextual("as") ? this.parseModuleExportName() : r4.local.__clone(), e4.push(this.finishNode(r4, "ExportSpecifier"));
        }
        return e4;
      }
      parseModuleExportName() {
        if (this.match(oa.string)) {
          const e4 = this.parseLiteral(this.state.value, "StringLiteral"), t3 = e4.value.match(lc);
          return t3 && this.raise(e4.start, Ea.ModuleExportNameHasLoneSurrogate, t3[0].charCodeAt(0).toString(16)), e4;
        }
        return this.parseIdentifier(true);
      }
      parseImport(e4) {
        if (e4.specifiers = [], !this.match(oa.string)) {
          const t4 = !this.maybeParseDefaultImportSpecifier(e4) || this.eat(oa.comma), r4 = t4 && this.maybeParseStarImportSpecifier(e4);
          t4 && !r4 && this.parseNamedImportSpecifiers(e4), this.expectContextual("from");
        }
        e4.source = this.parseImportSource();
        const t3 = this.maybeParseImportAssertions();
        if (t3)
          e4.assertions = t3;
        else {
          const t4 = this.maybeParseModuleAttributes();
          t4 && (e4.attributes = t4);
        }
        return this.semicolon(), this.finishNode(e4, "ImportDeclaration");
      }
      parseImportSource() {
        return this.match(oa.string) || this.unexpected(), this.parseExprAtom();
      }
      shouldParseDefaultImport(e4) {
        return this.match(oa.name);
      }
      parseImportSpecifierLocal(e4, t3, r4, s4) {
        t3.local = this.parseIdentifier(), this.checkLVal(t3.local, s4, go2), e4.specifiers.push(this.finishNode(t3, r4));
      }
      parseAssertEntries() {
        const e4 = [], t3 = new Set();
        do {
          if (this.match(oa.braceR))
            break;
          const r4 = this.startNode(), s4 = this.state.value;
          if (this.match(oa.string) ? r4.key = this.parseLiteral(s4, "StringLiteral") : r4.key = this.parseIdentifier(true), this.expect(oa.colon), s4 !== "type" && this.raise(r4.key.start, Ea.ModuleAttributeDifferentFromType, s4), t3.has(s4) && this.raise(r4.key.start, Ea.ModuleAttributesWithDuplicateKeys, s4), t3.add(s4), !this.match(oa.string))
            throw this.unexpected(this.state.start, Ea.ModuleAttributeInvalidValue);
          r4.value = this.parseLiteral(this.state.value, "StringLiteral"), this.finishNode(r4, "ImportAttribute"), e4.push(r4);
        } while (this.eat(oa.comma));
        return e4;
      }
      maybeParseModuleAttributes() {
        if (!this.match(oa._with) || this.hasPrecedingLineBreak())
          return this.hasPlugin("moduleAttributes") ? [] : null;
        this.expectPlugin("moduleAttributes"), this.next();
        const e4 = [], t3 = new Set();
        do {
          const r4 = this.startNode();
          if (r4.key = this.parseIdentifier(true), r4.key.name !== "type" && this.raise(r4.key.start, Ea.ModuleAttributeDifferentFromType, r4.key.name), t3.has(r4.key.name) && this.raise(r4.key.start, Ea.ModuleAttributesWithDuplicateKeys, r4.key.name), t3.add(r4.key.name), this.expect(oa.colon), !this.match(oa.string))
            throw this.unexpected(this.state.start, Ea.ModuleAttributeInvalidValue);
          r4.value = this.parseLiteral(this.state.value, "StringLiteral"), this.finishNode(r4, "ImportAttribute"), e4.push(r4);
        } while (this.eat(oa.comma));
        return e4;
      }
      maybeParseImportAssertions() {
        if (!this.isContextual("assert") || this.hasPrecedingLineBreak())
          return this.hasPlugin("importAssertions") ? [] : null;
        this.expectPlugin("importAssertions"), this.next(), this.eat(oa.braceL);
        const e4 = this.parseAssertEntries();
        return this.eat(oa.braceR), e4;
      }
      maybeParseDefaultImportSpecifier(e4) {
        return !!this.shouldParseDefaultImport(e4) && (this.parseImportSpecifierLocal(e4, this.startNode(), "ImportDefaultSpecifier", "default import specifier"), true);
      }
      maybeParseStarImportSpecifier(e4) {
        if (this.match(oa.star)) {
          const t3 = this.startNode();
          return this.next(), this.expectContextual("as"), this.parseImportSpecifierLocal(e4, t3, "ImportNamespaceSpecifier", "import namespace specifier"), true;
        }
        return false;
      }
      parseNamedImportSpecifiers(e4) {
        let t3 = true;
        for (this.expect(oa.braceL); !this.eat(oa.braceR); ) {
          if (t3)
            t3 = false;
          else {
            if (this.eat(oa.colon))
              throw this.raise(this.state.start, Ea.DestructureNamedImport);
            if (this.expect(oa.comma), this.eat(oa.braceR))
              break;
          }
          this.parseImportSpecifier(e4);
        }
      }
      parseImportSpecifier(e4) {
        const t3 = this.startNode();
        if (t3.imported = this.parseModuleExportName(), this.eatContextual("as"))
          t3.local = this.parseIdentifier();
        else {
          const {imported: e5} = t3;
          if (e5.type === "StringLiteral")
            throw this.raise(t3.start, Ea.ImportBindingIsString, e5.value);
          this.checkReservedWord(e5.name, t3.start, true, true), t3.local = e5.__clone();
        }
        this.checkLVal(t3.local, "import specifier", go2), e4.specifiers.push(this.finishNode(t3, "ImportSpecifier"));
      }
      isThisParam(e4) {
        return e4.type === "Identifier" && e4.name === "this";
      }
    }
    class uc extends cc {
      constructor(e4, t3) {
        super(e4 = Dl(e4), t3), this.options = e4, this.initializeScopes(), this.plugins = hc(this.options.plugins), this.filename = e4.sourceFilename;
      }
      getScopeHandler() {
        return jo;
      }
      parse() {
        this.enterInitialScopes();
        const e4 = this.startNode(), t3 = this.startNode();
        return this.nextToken(), e4.errors = null, this.parseTopLevel(e4, t3), e4.errors = this.state.errors, e4;
      }
    }
    function hc(e4) {
      const t3 = new Map();
      for (const r4 of e4) {
        const [e5, s4] = Array.isArray(r4) ? r4 : [r4, {}];
        t3.has(e5) || t3.set(e5, s4 || {});
      }
      return t3;
    }
    function pc(e4, t3) {
      var r4;
      if (((r4 = t3) == null ? void 0 : r4.sourceType) !== "unambiguous")
        return fc(t3, e4).parse();
      t3 = Object.assign({}, t3);
      try {
        t3.sourceType = "module";
        const r5 = fc(t3, e4), i4 = r5.parse();
        if (r5.sawUnambiguousESM)
          return i4;
        if (r5.ambiguousScriptDifferentAst)
          try {
            return t3.sourceType = "script", fc(t3, e4).parse();
          } catch (s4) {
          }
        else
          i4.program.sourceType = "script";
        return i4;
      } catch (i4) {
        try {
          return t3.sourceType = "script", fc(t3, e4).parse();
        } catch (n4) {
        }
        throw i4;
      }
    }
    function dc(e4, t3) {
      const r4 = fc(t3, e4);
      return r4.options.strictMode && (r4.state.strict = true), r4.getExpression();
    }
    function fc(e4, t3) {
      let r4 = uc;
      return e4 != null && e4.plugins && (Tl(e4.plugins), r4 = yc(e4.plugins)), new r4(e4, t3);
    }
    const mc = {};
    function yc(e4) {
      const t3 = Cl.filter((t4) => El(e4, t4)), r4 = t3.join("/");
      let s4 = mc[r4];
      if (!s4) {
        s4 = uc;
        for (const e5 of t3)
          s4 = wl[e5](s4);
        mc[r4] = s4;
      }
      return s4;
    }
    var gc = pc, xc = dc, bc = oa, Ec = Object.defineProperty({parse: gc, parseExpression: xc, tokTypes: bc}, "__esModule", {value: true}), vc = f3(function(e4, t3) {
      Object.defineProperty(t3, "__esModule", {value: true}), t3.parse = t3.parser = void 0;
      var r4 = U2.__importDefault($n);
      function s4(e5, s5) {
        var i4 = r4.default(s5);
        return i4.plugins.push("jsx", "flow"), t3.parser.parse(e5, i4);
      }
      t3.parser = function() {
        try {
          return Ec;
        } catch (e5) {
          return l2.default;
        }
      }(), t3.parse = s4;
    });
    function Sc(e4, t3) {
      return mi.parse(e4, Object.assign({parser: {parse: vc.parse}}, t3));
    }
    function Ac(e4) {
      return e4.find(Rn);
    }
    function Tc(e4) {
      return e4.filter(Un);
    }
    function wc(e4) {
      return e4.filter((e5) => !Un(e5));
    }
    function Cc(e4) {
      return gi.exportDefaultDeclaration(gi.functionDeclaration(gi.identifier(c3), [], gi.blockStatement([...wc(e4), gi.returnStatement(gi.thisExpression())])));
    }
    function Pc(e4) {
      return e4.filter((e5) => !Rn(e5) && !On(e5));
    }
    function Dc(e4) {
      return e4.body || e4.program.body;
    }
    function kc(e4, t3) {
      return yi.visit(e4, {visitProperty(e5) {
        if (e5.value.key.value === c3)
          return e5.value.value = t3.declaration, false;
        this.traverse(e5);
      }}), e4;
    }
    function Nc(e4, t3, r4, s4) {
      const i4 = fn2(e4), n4 = Hn(e4.text.text, t3, e4), {options: a4} = r4, o4 = yn("javascript", i4, r4, Object.assign({}, e4, {text: n4})), l3 = vi(o4.map), c4 = Dc(Sc(o4.code, {sourceFileName: a4.file, inputSourceMap: Pn(l3) ? null : l3})), u3 = Ac(c4), h4 = Ai(u3), p4 = Dc(s4);
      if (u3 && c4.some(On))
        throw new Error('You can	 use "export default {}" and root this statements in the same component');
      return p4.unshift(...h4 ? Tc(c4) : Pc(c4)), h4 && kc(s4, Cc(c4)), u3 && kc(s4, u3), s4;
    }
    const Ic = "javascript", Fc = "css", Mc = "template", Lc = "script", Oc = "style", _c = "textarea", Bc = "isRaw", Rc = "isSelfClosing", jc = "isVoid", Uc = "isBoolean", qc = "isCustom", zc = "isSpread";
    var Vc = Object.freeze({__proto__: null, JAVASCRIPT_OUTPUT_NAME: Ic, CSS_OUTPUT_NAME: Fc, TEMPLATE_OUTPUT_NAME: Mc, JAVASCRIPT_TAG: Lc, STYLE_TAG: Oc, TEXTAREA_TAG: _c, IS_RAW: Bc, IS_SELF_CLOSING: Rc, IS_VOID: jc, IS_BOOLEAN: Uc, IS_CUSTOM: qc, IS_SPREAD: zc});
    const Jc = 1, Xc = 2, Gc = 3, Hc = 4, Wc = 8, Kc = 9, $c = 10, Yc = 11;
    var Qc = Object.freeze({__proto__: null, TAG: Jc, ATTR: Xc, TEXT: Gc, CDATA: Hc, COMMENT: Wc, DOCUMENT: Kc, DOCTYPE: $c, DOCUMENT_FRAGMENT: Yc});
    const Zc = "Root tag not found.", eu = "Unclosed ES6 template literal.", tu = "Unexpected end of file.", ru = "Unclosed comment.", su = 'Unclosed "%1" block.', iu = 'Multiple inline "<%1>" tags are not supported.', nu = "Unexpected character %1.", au = "Unclosed expression.", ou = /^(?:\/[a-zA-Z]|[a-zA-Z][^\s>/]?)/, lu = /(\/?[^\s>/]+)\s*(>)?/g, cu = /(\S[^>/=\s]*)(?:\s*=\s*([^>/])?)?/g, uu = /\.\.\./, hu = {script: /<\/script\s*>/gi, style: /<\/style\s*>/gi, textarea: /<\/textarea\s*>/gi}, pu = /^\/?(?:pre|textarea)$/;
    function du(e4, t3) {
      return e4 === void 0 && (e4 = []), e4.push(t3), e4;
    }
    function fu(e4, t3, r4) {
      return e4.lastIndex = t3, e4.exec(r4);
    }
    var mu = (e4) => e4.replace(/(?=[-[\](){^*+?.$|\\])/g, "\\");
    function yu(e4, t3, r4) {
      r4 || (r4 = e4.length);
      const s4 = (e4.slice(0, r4).match(/\r\n?|\n/g) || "").length + 1;
      let i4 = 0;
      for (; --r4 >= 0 && !/[\r\n]/.test(e4[r4]); )
        ++i4;
      return `[${s4},${i4}]: ${t3}`;
    }
    const gu = "`";
    function xu(e4, t3, r4) {
      const s4 = /[`$\\]/g;
      let i4;
      for (; s4.lastIndex = t3, s4.exec(e4); ) {
        if (i4 = e4[(t3 = s4.lastIndex) - 1], i4 === "`")
          return t3;
        if (i4 === "$" && e4[t3++] === "{")
          return r4.push(gu, "}"), t3;
      }
      throw yu(e4, eu, t3);
    }
    function bu(e4, t3, r4) {
      const s4 = yu(e4, t3, r4);
      throw new Error(s4);
    }
    const Eu = "[{(,;:?=|&!^~>%*/", vu = `${Eu}+-`, Su = ["case", "default", "do", "else", "in", "instanceof", "prefix", "return", "typeof", "void", "yield"], Au = Su.reduce((e4, t3) => e4 + t3.slice(-1), ""), Tu = /^\/(?=[^*>/])[^[/\\]*(?:(?:\\.|\[(?:\\.|[^\]\\]*)*\])[^[\\/]*)*?\/[gimuy]*/, wu = /[$\w]/, Cu = /.*/g;
    function Pu(e4, t3) {
      for (; --t3 >= 0 && /\s/.test(e4[t3]); )
        ;
      return t3;
    }
    function Du(e4, t3) {
      let r4 = Cu.lastIndex = t3++;
      const s4 = (Cu.exec(e4) || " ")[0].match(Tu);
      if (s4) {
        const i4 = r4 + s4[0].length;
        r4 = Pu(e4, r4);
        let n4 = e4[r4];
        if (r4 < 0 || Eu.includes(n4))
          return i4;
        if (n4 === ".")
          e4[r4 - 1] === "." && (t3 = i4);
        else {
          if ((n4 === "+" || n4 === "-") && (e4[--r4] !== n4 || (r4 = Pu(e4, r4)) < 0 || vu.includes(n4 = e4[r4])))
            return i4;
          if (Au.includes(n4)) {
            const s5 = r4 + 1;
            for (; --r4 >= 0 && wu.test(e4[r4]); )
              ;
            Su.includes(e4.slice(r4 + 1, s5)) && (t3 = i4);
          }
        }
      }
      return t3;
    }
    const ku = /'[^'\n\r\\]*(?:\\(?:\r\n?|[\S\s])[^'\n\r\\]*)*'/.source, Nu = `${ku}|${ku.replace(/'/g, '"')}`, Iu = {};
    function Fu(e4) {
      let t3 = Iu[e4];
      if (!t3) {
        let r4 = mu(e4);
        r4 = e4.length > 1 ? `${r4}|[` : /[{}[\]()]/.test(e4) ? "[" : `[${r4}`, Iu[e4] = t3 = new RegExp(`${Nu}|${r4}\`/\\{}[\\]()]`, "g");
      }
      return t3;
    }
    function Mu(e4, t3, r4, s4) {
      let i4 = 0;
      switch (t3) {
        case "[":
        case "(":
        case "{":
          e4.push(t3 === "[" ? "]" : t3 === "(" ? ")" : "}");
          break;
        case ")":
        case "]":
        case "}":
          t3 !== e4.pop() && bu(s4, nu.replace("%1", t3), i4), t3 === "}" && e4[e4.length - 1] === gu && (t3 = e4.pop()), i4 = r4 + 1;
          break;
        case "/":
          i4 = Du(s4, r4);
      }
      return {char: t3, index: i4};
    }
    function Lu(e4, t3, r4) {
      const [s4, i4] = r4, n4 = t3 + s4.length, a4 = [], o4 = Fu(i4);
      let l3, c4;
      for (o4.lastIndex = n4; c4 = o4.exec(e4); ) {
        const r5 = c4.index, s5 = c4[0];
        if (l3 = o4.lastIndex, s5 === i4 && !a4.length)
          return {text: e4.slice(n4, r5), start: t3, end: l3};
        const {char: u3, index: h4} = Mu(a4, s5[0], r5, e4);
        l3 = h4 || l3, o4.lastIndex = u3 === gu ? xu(e4, l3, a4) : l3;
      }
      a4.length && bu(e4, au, l3);
    }
    function Ou(e4) {
      const t3 = e4.last;
      e4.last = null, t3 && e4.root && e4.builder.push(t3);
    }
    function _u(e4, t3, r4) {
      return e4.slice(t3, r4);
    }
    function Bu(e4, t3, r4, s4) {
      s4 === void 0 && (s4 = {});
      const i4 = _u(e4.data, t3, r4), n4 = s4.expressions, a4 = s4.unescape;
      let o4 = e4.last;
      return e4.pos = r4, o4 && o4.type === Gc ? (o4.text += i4, o4.end = r4) : (Ou(e4), e4.last = o4 = {type: Gc, text: i4, start: t3, end: r4}), n4 && n4.length && (o4.expressions = (o4.expressions || []).concat(n4)), a4 && (o4.unescape = a4), Gc;
    }
    function Ru(e4, t3, r4, s4) {
      const i4 = Uu(e4, r4);
      i4.lastIndex = s4;
      const {unescape: n4, expressions: a4, end: o4} = ju(e4, i4);
      return t3 ? (n4 && (t3.unescape = n4), a4.length && (t3.expressions = a4)) : Bu(e4, s4, o4, {expressions: a4, unescape: n4}), o4;
    }
    function ju(e4, t3) {
      const {data: r4, options: s4} = e4, {brackets: i4} = s4, n4 = [];
      let a4, o4, l3;
      for (; (l3 = t3.exec(r4)) && !l3[1]; )
        if (o4 = l3.index, r4[o4 - 1] === "\\")
          a4 = l3[0];
        else {
          const e5 = Lu(r4, o4, i4);
          e5 && (n4.push(e5), t3.lastIndex = e5.end);
        }
      return l3 || bu(r4, tu, o4), {unescape: a4, expressions: n4, end: l3.index};
    }
    function Uu(e4, t3) {
      const {brackets: r4} = e4.options, s4 = e4.regexCache[t3];
      if (s4)
        return s4;
      const i4 = mu(r4[0]);
      return Object.assign(e4.regexCache, {[t3]: new RegExp(`(${t3})|${i4}`, "g")}), e4.regexCache[t3];
    }
    const qu = (e4) => e4.filter((e5, t3, r4) => r4.indexOf(e5) === t3), zu = ["circle", "ellipse", "line", "path", "polygon", "polyline", "rect", "stop", "use"], Vu = ["button", "data", "input", "select", "li", "meter", "option", "output", "progress", "textarea", "param"], Ju = qu(["a", "altGlyph", "altGlyphDef", "altGlyphItem", "animate", "animateColor", "animateMotion", "animateTransform", "animation", "audio", "canvas", "clipPath", "color-profile", "cursor", "defs", "desc", "discard", "feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feDropShadow", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence", "filter", "font", "font-face", "font-face-format", "font-face-name", "font-face-src", "font-face-uri", "foreignObject", "g", "glyph", "glyphRef", "handler", "hatch", "hatchpath", "hkern", "iframe", "image", "linearGradient", "listener", "marker", "mask", "mesh", "meshgradient", "meshpatch", "meshrow", "metadata", "missing-glyph", "mpath", "pattern", "prefetch", "radialGradient", "script", "set", "solidColor", "solidcolor", "style", "svg", "switch", "symbol", "tbreak", "text", "textArea", "textPath", "title", "tref", "tspan", "unknown", "video", "view", "vkern"].concat(zu)).sort(), Xu = ["area", "base", "br", "col", "embed", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"], Gu = ["disabled", "visible", "checked", "readonly", "required", "allowfullscreen", "autofocus", "autoplay", "compact", "controls", "default", "formnovalidate", "hidden", "ismap", "itemscope", "loop", "multiple", "muted", "noresize", "noshade", "novalidate", "nowrap", "open", "reversed", "seamless", "selected", "sortable", "truespeed", "typemustmatch"];
    function Hu(e4) {
      return e4.join("|");
    }
    function Wu() {
      for (var e4 = arguments.length, t3 = new Array(e4), r4 = 0; r4 < e4; r4++)
        t3[r4] = arguments[r4];
      return new RegExp(`^/?(?:${Hu(t3.map(Hu))})$`, "i");
    }
    const Ku = Wu(qu(["a", "abbr", "address", "article", "aside", "audio", "b", "bdi", "bdo", "blockquote", "body", "canvas", "caption", "cite", "code", "colgroup", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "html", "i", "iframe", "ins", "kbd", "label", "legend", "main", "map", "mark", "math", "menu", "nav", "noscript", "object", "ol", "optgroup", "p", "picture", "pre", "q", "rb", "rp", "rt", "rtc", "ruby", "s", "samp", "script", "section", "select", "slot", "small", "span", "strong", "style", "sub", "summary", "sup", "svg", "table", "tbody", "td", "template", "tfoot", "th", "thead", "time", "title", "tr", "u", "ul", "var", "video"].concat(Xu).concat(Vu)).sort()), $u = Wu(Ju), Yu = Wu(Xu), Qu = Wu(zu), Zu = Wu(Vu), eh = Wu(Gu);
    function th(e4) {
      return [Yu, Qu].some((t3) => t3.test(e4));
    }
    function rh(e4) {
      return [Ku, $u].every((t3) => !t3.test(e4));
    }
    function sh(e4) {
      return Zu.test(e4);
    }
    function ih(e4) {
      return eh.test(e4);
    }
    function nh(e4) {
      const t3 = new WeakMap();
      return function() {
        if (t3.has(arguments.length <= 0 ? void 0 : arguments[0]))
          return t3.get(arguments.length <= 0 ? void 0 : arguments[0]);
        const r4 = e4(...arguments);
        return t3.set(arguments.length <= 0 ? void 0 : arguments[0], r4), r4;
      };
    }
    const ah = nh((e4) => RegExp(`(${e4[0]}[^${e4[1]}]*?${e4[1]})`, "g")), oh = (e4) => uu.test(e4), lh = (e4, t3) => e4[0] === t3[0], ch = (e4, t3) => Ru(e4, t3, "[>/\\s]", t3.start);
    function uh(e4) {
      const {data: t3, last: r4, pos: s4, root: i4} = e4, n4 = r4, a4 = /\S/g, o4 = fu(a4, s4, t3);
      switch (true) {
        case !o4:
          e4.pos = t3.length;
          break;
        case o4[0] === ">":
          return e4.pos = n4.end = a4.lastIndex, n4[Rc] && (e4.scryle = null, i4 && i4.name === n4.name && e4.count--), Gc;
        case o4[0] === "/":
          e4.pos = a4.lastIndex, n4[Rc] = true;
          break;
        default:
          delete n4[Rc], hh(e4, o4.index, n4);
      }
      return Xc;
    }
    function hh(e4, t3, r4) {
      const {data: s4} = e4, i4 = ah(e4.options.brackets), n4 = cu, a4 = n4.lastIndex = i4.lastIndex = t3, o4 = n4.exec(s4), l3 = lh(o4[1], e4.options.brackets), c4 = l3 ? [null, i4.exec(s4)[1], null] : o4;
      if (c4) {
        const t4 = mh(e4, c4, a4, n4.lastIndex, l3);
        e4.pos = r4.end = t4.end, r4.attributes = du(r4.attributes, t4);
      }
    }
    function ph(e4, t3, r4) {
      const {data: s4} = e4;
      let {end: i4} = t3;
      if (ih(t3.name) && (t3[Uc] = true), r4) {
        let n4 = i4;
        return r4 !== '"' && r4 !== "'" && (r4 = "", n4--), i4 = Ru(e4, t3, r4 || "[>/\\s]", n4), Object.assign(t3, {value: _u(s4, n4, i4), valueStart: n4, end: r4 ? ++i4 : i4});
      }
      return t3;
    }
    function dh(e4, t3) {
      const r4 = ch(e4, t3);
      return {[zc]: true, start: t3.start, expressions: t3.expressions.map((e5) => Object.assign(e5, {text: e5.text.replace(uu, "").trim()})), end: r4};
    }
    function fh(e4, t3) {
      const r4 = ch(e4, t3);
      return {start: t3.start, name: t3.expressions[0].text.trim(), expressions: t3.expressions, end: r4};
    }
    function mh(e4, t3, r4, s4, i4) {
      const n4 = {name: t3[1], value: "", start: r4, end: s4}, a4 = t3[2];
      switch (true) {
        case oh(n4.name):
          return dh(e4, n4);
        case i4 === true:
          return fh(e4, n4);
        default:
          return ph(e4, n4, a4);
      }
    }
    function yh(e4, t3, r4) {
      const s4 = r4 + 2, i4 = t3.substr(s4, 2) === "--" ? "-->" : ">", n4 = t3.indexOf(i4, s4);
      return n4 < 0 && bu(t3, ru, r4), gh(e4, r4, n4 + i4.length, t3.substring(r4, n4 + i4.length)), Gc;
    }
    function gh(e4, t3, r4, s4) {
      e4.pos = r4, e4.options.comments === true && (Ou(e4), e4.last = {type: Wc, start: t3, end: r4, text: s4});
    }
    function xh(e4, t3, r4, s4) {
      const i4 = e4.root, n4 = {type: Jc, name: t3, start: r4, end: s4};
      rh(t3) && (n4[qc] = true), th(t3) && (n4[jc] = true), e4.pos = s4, i4 ? (t3 === i4.name ? e4.count++ : t3 === i4.close && e4.count--, Ou(e4)) : (e4.root = {name: n4.name, close: `/${t3}`}, e4.count = 1), e4.last = n4;
    }
    function bh(e4) {
      const {pos: t3, data: r4} = e4, s4 = t3 - 1, i4 = r4.substr(t3, 2);
      switch (true) {
        case i4[0] === "!":
          return yh(e4, r4, s4);
        case ou.test(i4):
          return Eh(e4, s4);
        default:
          return Bu(e4, s4, t3);
      }
    }
    function Eh(e4, t3) {
      const {data: r4, pos: s4} = e4, i4 = lu, n4 = fu(i4, s4, r4), a4 = i4.lastIndex, o4 = n4[1].toLowerCase();
      return o4 in hu && (e4.scryle = o4), xh(e4, o4, t3, a4), n4[2] ? Gc : Xc;
    }
    function vh(e4) {
      const {pos: t3, data: r4, scryle: s4} = e4;
      switch (true) {
        case typeof s4 == "string": {
          const i4 = s4, n4 = hu[i4], a4 = fu(n4, t3, r4);
          a4 || bu(r4, su.replace("%1", i4), t3 - 1);
          const o4 = a4.index, l3 = n4.lastIndex;
          e4.scryle = null, o4 > t3 && Sh(e4, i4, a4), xh(e4, `/${i4}`, o4, l3);
          break;
        }
        case r4[t3] === "<":
          return e4.pos++, Jc;
        default:
          Ru(e4, null, "<", t3);
      }
      return Gc;
    }
    function Sh(e4, t3, r4) {
      const {pos: s4} = e4, i4 = r4.index;
      t3 === _c ? Ru(e4, null, r4[0], s4) : Bu(e4, s4, i4);
    }
    function Ah(e4) {
      return e4.replace(/\r/g, "\\r").replace(/\n/g, "\\n");
    }
    const Th = (e4) => (e4.attributes || []).some((e5) => e5.name === "src");
    function wh(e4) {
      return e4.replace(/\\/g, "\\\\");
    }
    function Ch(e4) {
      return e4.replace(/\s+/g, " ");
    }
    const Ph = Object.seal({get() {
      const e4 = this.store;
      return {[Mc]: e4.root.nodes[0], [Fc]: e4[Oc], [Ic]: e4[Lc]};
    }, push(e4) {
      const t3 = this.store;
      switch (e4.type) {
        case Wc:
          this.pushComment(t3, e4);
          break;
        case Gc:
          this.pushText(t3, e4);
          break;
        case Jc: {
          const r4 = e4.name, s4 = "/", [i4] = r4;
          i4 !== s4 || e4.isVoid ? i4 !== s4 && this.openTag(t3, e4) : this.closeTag(t3, e4, r4);
          break;
        }
      }
    }, pushComment(e4, t3) {
      e4.last.nodes.push(t3);
    }, closeTag(e4, t3) {
      (e4.scryle || e4.last).end = t3.end, e4.root.nodes[0] && (e4.root.nodes[0].end = t3.end), e4.scryle ? e4.scryle = null : e4.last = e4.stack.pop();
    }, openTag(e4, t3) {
      const r4 = t3.name, s4 = t3.attributes;
      if (Lc === r4 && !Th(t3) || r4 === Oc)
        e4[r4] && bu(this.store.data, iu.replace("%1", r4), t3.start), e4[r4] = t3, e4.scryle = e4[r4];
      else {
        const s5 = e4.last, i4 = t3;
        s5.nodes.push(i4), (s5[Bc] || pu.test(r4)) && (t3[Bc] = true), t3[Rc] || t3[jc] || (e4.stack.push(s5), i4.nodes = [], e4.last = i4);
      }
      s4 && this.attrs(s4);
    }, attrs(e4) {
      e4.forEach((e5) => {
        e5.value && this.split(e5, e5.value, e5.valueStart, true);
      });
    }, pushText(e4, t3) {
      const r4 = t3.text, s4 = !/\S/.test(r4), i4 = e4.scryle;
      if (i4)
        s4 || (i4.text = t3);
      else {
        const i5 = e4.last, n4 = this.compact && !i5[Bc];
        if (n4 && s4)
          return;
        this.split(t3, r4, t3.start, n4), i5.nodes.push(t3);
      }
    }, split(e4, t3, r4, s4) {
      const i4 = e4.expressions, n4 = [];
      if (i4) {
        let a4 = 0;
        i4.forEach((i5) => {
          const o4 = t3.slice(a4, i5.start - r4), l3 = i5.text;
          n4.push(this.sanitise(e4, o4, s4), Ah(wh(l3).trim())), a4 = i5.end - r4;
        }), a4 < e4.end && n4.push(this.sanitise(e4, t3.slice(a4), s4));
      } else
        n4[0] = this.sanitise(e4, t3, s4);
      e4.parts = n4.filter((e5) => e5);
    }, sanitise(e4, t3, r4) {
      let s4 = e4.unescape;
      if (s4) {
        let e5 = 0;
        for (s4 = `\\${s4}`; (e5 = t3.indexOf(s4, e5)) !== -1; )
          t3 = t3.substr(0, e5) + t3.substr(e5 + 1), e5++;
      }
      return t3 = wh(t3), r4 ? Ch(t3) : Ah(t3);
    }});
    function Dh(e4, t3) {
      const r4 = {type: Jc, name: "", start: 0, end: 0, nodes: []};
      return Object.assign(Object.create(Ph), {compact: t3.compact !== false, store: {last: r4, stack: [], scryle: null, root: r4, style: null, script: null, data: e4}});
    }
    function kh(e4, t3) {
      const r4 = Tn(Nh)(e4, t3 || Dh);
      return {parse: (e5) => Ih(r4(e5))};
    }
    function Nh(e4, t3, r4) {
      const s4 = Object.assign({brackets: ["{", "}"]}, e4);
      return {options: s4, regexCache: {}, pos: 0, count: -1, root: null, last: null, scryle: null, builder: t3(r4, s4), data: r4};
    }
    function Ih(e4) {
      const {data: t3} = e4;
      return Fh(e4), Ou(e4), e4.count && bu(t3, e4.count > 0 ? tu : Zc, e4.pos), {data: t3, output: e4.builder.get()};
    }
    function Fh(e4, t3) {
      const {data: r4} = e4, s4 = r4.length;
      e4.pos < s4 && e4.count && Fh(e4, Mh(e4, t3));
    }
    function Mh(e4, t3) {
      switch (t3) {
        case Jc:
          return bh(e4);
        case Xc:
          return uh(e4);
        default:
          return vh(e4);
      }
    }
    const Lh = Vc, Oh = Qc, _h = "bindingTypes", Bh = "EACH", Rh = "IF", jh = "TAG", Uh = "SLOT", qh = "expressionTypes", zh = "ATTRIBUTE", Vh = "VALUE", Jh = "TEXT", Xh = "EVENT", Gh = "template", Hh = "scope", Wh = "getComponent", Kh = "selector", $h = "getComponent", Yh = "template", Qh = "type", Zh = "redundantAttribute", ep = "condition", tp2 = "itemName", rp = "getKey", sp = "indexName", ip = "evaluate", np = "name", ap = "slots", op = "expressions", lp = "childNodeIndex", cp = "bindings", up = "id", hp = "html", pp = "attributes", dp = "if", fp = "each", mp = "key", yp = "slot", gp = "name", xp = "is", bp = "default", Ep = " ", vp = "expr", Sp = "slot", Ap = "progress", Tp = "template";
    Lh.IS_RAW;
    const wp = Lh.IS_VOID, Cp = Lh.IS_CUSTOM, Pp = Lh.IS_BOOLEAN, Dp = Lh.IS_SPREAD;
    function kp(e4) {
      return [Xp, Qp, Yp, Mp, Lp].every((t3) => !t3(e4));
    }
    function Np(e4) {
      return zp(e4) && !Ai($p(yp, e4)) && !Wp(e4) && !Hp(e4);
    }
    function Ip(e4) {
      let {scope: t3, node: r4} = e4;
      return r4.object ? Ip({node: r4.object, scope: t3}) : Boolean(Vn(r4) || zn(r4) || qn(r4) || _n(r4) || Fp(t3, r4));
    }
    function Fp(e4, t3) {
      return r4 === void 0 && (r4 = false), yi.visit(t3, {visitIdentifier(t4) {
        e4.lookup(Af(t4.node)) && (r4 = true), this.abort();
      }}), r4;
      var r4;
    }
    function Mp(e4) {
      return !(!e4[Cp] && !Kp(e4));
    }
    function Lp(e4) {
      return e4.name === Sp;
    }
    function Op(e4) {
      return !!e4[wp];
    }
    function _p(e4) {
      return e4.type === Oh.TAG;
    }
    function Bp(e4) {
      return e4.type === Oh.TEXT;
    }
    function Rp(e4) {
      return e4.isRoot;
    }
    function jp(e4) {
      return e4[Dp];
    }
    function Up(e4) {
      return e4.name === "value";
    }
    function qp(e4) {
      return e4.name === Ap;
    }
    function zp(e4) {
      return e4.name === Tp;
    }
    const Vp = (() => {
      const e4 = /^on/;
      return (t3) => e4.test(t3.name);
    })();
    function Jp(e4) {
      return e4.trim().indexOf("<!") === 0;
    }
    function Xp(e4) {
      return !!(e4.expressions || Kf(e4).some((e5) => Xp(e5)) || e4.nodes && e4.nodes.some((e5) => Bp(e5) && Xp(e5)));
    }
    function Gp(e4) {
      return [Qp, Yp, Mp].some((t3) => t3(e4));
    }
    const Hp = nn(Boolean, Yp), Wp = nn(Boolean, Qp), Kp = nn(Boolean, ed);
    function $p(e4, t3) {
      return t3.attributes && t3.attributes.find((t4) => Af(t4) === e4);
    }
    function Yp(e4) {
      return $p(dp, e4);
    }
    function Qp(e4) {
      return $p(fp, e4);
    }
    function Zp(e4) {
      return $p(mp, e4);
    }
    function ed(e4) {
      return $p(xp, e4);
    }
    function td(e4) {
      return Kf(e4).filter((e5) => !Xp(e5));
    }
    function rd(e4) {
      return Kf(e4).filter(Xp);
    }
    function sd(e4, t3, r4) {
      return gi.objectExpression([Ei(Qh, gi.memberExpression(gi.identifier(qh), gi.identifier(zh), false)), Ei(np, jp(e4) ? bi() : gi.literal(e4.name)), Ei(ip, am(e4, t3, r4))]);
    }
    function id2(e4, t3, r4) {
      return gi.objectExpression([Ei(Qh, gi.memberExpression(gi.identifier(qh), gi.identifier(Xh), false)), Ei(np, gi.literal(e4.name)), Ei(ip, am(e4, t3, r4))]);
    }
    nn(Boolean, Zp);
    var nd = '"', ad = "&", od = "'", ld = "<", cd = ">", ud = "\xA0", hd = "\xA1", pd = "\xA2", dd = "\xA3", fd = "\xA4", md = "\xA5", yd = "\xA6", gd = "\xA7", xd = "\xA8", bd = "\xA9", Ed = "\xAA", vd = "\xAB", Sd = "\xAC", Ad = "\xAD", Td = "\xAE", wd = "\xAF", Cd = "\xB0", Pd = "\xB1", Dd = "\xB2", kd = "\xB3", Nd = "\xB4", Id = "\xB5", Fd = "\xB6", Md = "\xB7", Ld = "\xB8", Od = "\xB9", _d = "\xBA", Bd = "\xBB", Rd = "\xBC", jd = "\xBD", Ud = "\xBE", qd = "\xBF", zd = "\xC0", Vd = "\xC1", Jd = "\xC2", Xd = "\xC3", Gd = "\xC4", Hd = "\xC5", Wd = "\xC6", Kd = "\xC7", $d = "\xC8", Yd = "\xC9", Qd = "\xCA", Zd = "\xCB", ef = "\xCC", tf = "\xCD", rf = "\xCE", sf = "\xCF", nf = "\xD0", af = {quot: nd, amp: ad, apos: od, lt: ld, gt: cd, nbsp: ud, iexcl: hd, cent: pd, pound: dd, curren: fd, yen: md, brvbar: yd, sect: gd, uml: xd, copy: bd, ordf: Ed, laquo: vd, not: Sd, shy: Ad, reg: Td, macr: wd, deg: Cd, plusmn: Pd, sup2: Dd, sup3: kd, acute: Nd, micro: Id, para: Fd, middot: Md, cedil: Ld, sup1: Od, ordm: _d, raquo: Bd, frac14: Rd, frac12: jd, frac34: Ud, iquest: qd, Agrave: zd, Aacute: Vd, Acirc: Jd, Atilde: Xd, Auml: Gd, Aring: Hd, AElig: Wd, Ccedil: Kd, Egrave: $d, Eacute: Yd, Ecirc: Qd, Euml: Zd, Igrave: ef, Iacute: tf, Icirc: rf, Iuml: sf, ETH: nf, Ntilde: "\xD1", Ograve: "\xD2", Oacute: "\xD3", Ocirc: "\xD4", Otilde: "\xD5", Ouml: "\xD6", times: "\xD7", Oslash: "\xD8", Ugrave: "\xD9", Uacute: "\xDA", Ucirc: "\xDB", Uuml: "\xDC", Yacute: "\xDD", THORN: "\xDE", szlig: "\xDF", agrave: "\xE0", aacute: "\xE1", acirc: "\xE2", atilde: "\xE3", auml: "\xE4", aring: "\xE5", aelig: "\xE6", ccedil: "\xE7", egrave: "\xE8", eacute: "\xE9", ecirc: "\xEA", euml: "\xEB", igrave: "\xEC", iacute: "\xED", icirc: "\xEE", iuml: "\xEF", eth: "\xF0", ntilde: "\xF1", ograve: "\xF2", oacute: "\xF3", ocirc: "\xF4", otilde: "\xF5", ouml: "\xF6", divide: "\xF7", oslash: "\xF8", ugrave: "\xF9", uacute: "\xFA", ucirc: "\xFB", uuml: "\xFC", yacute: "\xFD", thorn: "\xFE", yuml: "\xFF", OElig: "\u0152", oelig: "\u0153", Scaron: "\u0160", scaron: "\u0161", Yuml: "\u0178", fnof: "\u0192", circ: "\u02C6", tilde: "\u02DC", Alpha: "\u0391", Beta: "\u0392", Gamma: "\u0393", Delta: "\u0394", Epsilon: "\u0395", Zeta: "\u0396", Eta: "\u0397", Theta: "\u0398", Iota: "\u0399", Kappa: "\u039A", Lambda: "\u039B", Mu: "\u039C", Nu: "\u039D", Xi: "\u039E", Omicron: "\u039F", Pi: "\u03A0", Rho: "\u03A1", Sigma: "\u03A3", Tau: "\u03A4", Upsilon: "\u03A5", Phi: "\u03A6", Chi: "\u03A7", Psi: "\u03A8", Omega: "\u03A9", alpha: "\u03B1", beta: "\u03B2", gamma: "\u03B3", delta: "\u03B4", epsilon: "\u03B5", zeta: "\u03B6", eta: "\u03B7", theta: "\u03B8", iota: "\u03B9", kappa: "\u03BA", lambda: "\u03BB", mu: "\u03BC", nu: "\u03BD", xi: "\u03BE", omicron: "\u03BF", pi: "\u03C0", rho: "\u03C1", sigmaf: "\u03C2", sigma: "\u03C3", tau: "\u03C4", upsilon: "\u03C5", phi: "\u03C6", chi: "\u03C7", psi: "\u03C8", omega: "\u03C9", thetasym: "\u03D1", upsih: "\u03D2", piv: "\u03D6", ensp: "\u2002", emsp: "\u2003", thinsp: "\u2009", zwnj: "\u200C", zwj: "\u200D", lrm: "\u200E", rlm: "\u200F", ndash: "\u2013", mdash: "\u2014", lsquo: "\u2018", rsquo: "\u2019", sbquo: "\u201A", ldquo: "\u201C", rdquo: "\u201D", bdquo: "\u201E", dagger: "\u2020", Dagger: "\u2021", bull: "\u2022", hellip: "\u2026", permil: "\u2030", prime: "\u2032", Prime: "\u2033", lsaquo: "\u2039", rsaquo: "\u203A", oline: "\u203E", frasl: "\u2044", euro: "\u20AC", image: "\u2111", weierp: "\u2118", real: "\u211C", trade: "\u2122", alefsym: "\u2135", larr: "\u2190", uarr: "\u2191", rarr: "\u2192", darr: "\u2193", harr: "\u2194", crarr: "\u21B5", lArr: "\u21D0", uArr: "\u21D1", rArr: "\u21D2", dArr: "\u21D3", hArr: "\u21D4", forall: "\u2200", part: "\u2202", exist: "\u2203", empty: "\u2205", nabla: "\u2207", isin: "\u2208", notin: "\u2209", ni: "\u220B", prod: "\u220F", sum: "\u2211", minus: "\u2212", lowast: "\u2217", radic: "\u221A", prop: "\u221D", infin: "\u221E", ang: "\u2220", and: "\u2227", or: "\u2228", cap: "\u2229", cup: "\u222A", int: "\u222B", there4: "\u2234", sim: "\u223C", cong: "\u2245", asymp: "\u2248", ne: "\u2260", equiv: "\u2261", le: "\u2264", ge: "\u2265", sub: "\u2282", sup: "\u2283", nsub: "\u2284", sube: "\u2286", supe: "\u2287", oplus: "\u2295", otimes: "\u2297", perp: "\u22A5", sdot: "\u22C5", lceil: "\u2308", rceil: "\u2309", lfloor: "\u230A", rfloor: "\u230B", lang: "\u2329", rang: "\u232A", loz: "\u25CA", spades: "\u2660", clubs: "\u2663", hearts: "\u2665", diams: "\u2666"};
    const of = /&(\S+);/g, lf = /^[\da-fA-F]+$/, cf = /^\d+$/;
    function uf(e4) {
      const t3 = e4.substr(2);
      return lf.test(t3) ? String.fromCodePoint(parseInt(t3, 16)) : e4;
    }
    function hf(e4) {
      const t3 = e4.substr(1);
      return cf.test(t3) ? String.fromCodePoint(parseInt(t3, 10)) : e4;
    }
    function pf2(e4) {
      return e4.replace(of, (e5, t3) => {
        const [r4, s4] = t3;
        return r4 === "#" ? s4 === "x" ? uf(t3) : hf(t3) : af[t3] || t3;
      });
    }
    function df(e4) {
      return (e4.trimEnd || e4.trimRight).apply(e4);
    }
    function ff(e4) {
      return (e4.trimStart || e4.trimLeft).apply(e4);
    }
    function mf(e4, t3) {
      return e4.replace(RegExp(`\\\\${t3}`, "gm"), t3);
    }
    function yf(e4, t3) {
      return e4.expressions.reduce((r4, s4, i4) => {
        const n4 = i4 ? e4.expressions[i4 - 1].end : e4.start, a4 = pf2(t3.substring(n4, s4.start));
        return r4.push(i4 === 0 ? ff(a4) : a4), i4 === e4.expressions.length - 1 && r4.push(pf2(df(t3.substring(s4.end, e4.end)))), r4;
      }, []).filter((e5) => !Jp(e5)).map((t4) => e4.unescape ? mf(t4, e4.unescape) : t4);
    }
    function gf(e4, t3, r4) {
      return e4.parts.length === 1 ? _f(e4.expressions[0], t3, r4) : tm(yf(e4, r4).reduce((s4, i4, n4) => {
        const a4 = e4.expressions[n4];
        return [...s4, gi.literal(i4), a4 ? _f(a4, t3, r4) : bi()];
      }, []).filter((e5) => !Fn(e5) || e5.value));
    }
    function xf(e4, t3, r4, s4) {
      return gi.objectExpression([Ei(Qh, gi.memberExpression(gi.identifier(qh), gi.identifier(Jh), false)), Ei(lp, gi.literal(s4)), Ei(ip, Lf(gf(e4, t3, r4)))]);
    }
    function bf(e4, t3, r4) {
      return gi.objectExpression([Ei(Qh, gi.memberExpression(gi.identifier(qh), gi.identifier(Vh), false)), Ei(ip, am(e4, t3, r4))]);
    }
    function Ef(e4, t3, r4, s4, i4) {
      switch (true) {
        case Bp(e4):
          return xf(e4, t3, r4, s4);
        case (Up(e4) && sh(i4.name) && !qp(i4)):
          return bf(e4, t3, r4);
        case Vp(e4):
          return id2(e4, t3, r4);
        default:
          return sd(e4, t3, r4);
      }
    }
    function vf(e4, t3, r4) {
      return rd(e4).map((s4) => Ef(s4, t3, r4, 0, e4));
    }
    const Sf = gi.identifier(Hh), Af = (e4) => e4 && e4.name ? e4.name : e4;
    function Tf(e4, t3) {
      e4.replace(gi.memberExpression(Sf, t3, false));
    }
    function wf(e4) {
      if (!Ip(e4))
        return Tf(e4, e4.node), false;
      this.traverse(e4);
    }
    function Cf(e4) {
      const t3 = () => this.traverse(e4.get("object")), r4 = e4.node.object;
      switch (true) {
        case Ip(e4):
          r4.arguments && r4.arguments.length && t3();
          break;
        case (!e4.value.computed && In(r4)):
          Tf(e4, e4.node);
          break;
        default:
          this.traverse(e4);
      }
      return false;
    }
    function Pf(e4) {
      const t3 = e4.node.value, r4 = e4.node.shorthand;
      return In(t3) || jn(t3) || r4 ? (r4 && (e4.node.shorthand = false), wf.call(this, e4.get("value"))) : this.traverse(e4.get("value")), false;
    }
    function Df(e4) {
      e4.replace(Sf), this.traverse(e4);
    }
    function kf(e4) {
      const t3 = e4.parent.value;
      return jn(t3) && !t3.computed || wf.call(this, e4), false;
    }
    function Nf(e4) {
      const t3 = () => false;
      return yi.visit(e4, {visitIdentifier: kf, visitMemberExpression: Cf, visitObjectProperty: Pf, visitThisExpression: Df, visitClassExpression: t3}), e4;
    }
    function If(e4, t3, r4) {
      return Sc(`(${t3 ? Hn(e4.text, r4, e4) : e4.text})`, {sourceFileName: t3});
    }
    function Ff(e4) {
      return Ei(Yh, e4 ? Rf(...e4) : bi());
    }
    function Mf(e4) {
      return e4.expressions ? e4.expressions[0] : Object.assign({}, e4, {text: e4.value});
    }
    function Lf(e4) {
      return gi.functionExpression(null, [Sf], gi.blockStatement([gi.returnStatement(e4)]));
    }
    function Of(e4, t3, r4) {
      return nn(Lf, _f)(e4, t3, r4);
    }
    function _f(e4, t3, r4) {
      return nn(Bf, Nf, If)(e4, t3, r4);
    }
    function Bf(e4) {
      const t3 = e4.program.body;
      return t3[0] ? t3[0].expression : t3;
    }
    function Rf(e4, t3) {
      return gi.callExpression(gi.identifier(Gh), [e4 ? gi.literal(e4) : bi(), t3 ? gi.arrayExpression(t3) : bi()]);
    }
    const jf = (e4) => `[${e4}]`;
    function Uf(e4) {
      return e4 ? [Ei(Zh, gi.literal(e4)), Ei(Kh, nn(gi.literal, jf)(e4))] : [];
    }
    function qf(e4, t3) {
      return Object.assign({}, e4, {attributes: zf(Kf(e4), t3)});
    }
    function zf(e4, t3) {
      return t3 ? e4.filter((e5) => e5.name !== t3) : e4;
    }
    function Vf(e4) {
      return Kf(e4).filter((e5) => ![dp, fp, mp, yp, xp].includes(e5.name));
    }
    function Jf(e4) {
      return {nodes: Wf(e4), isRoot: true};
    }
    function Xf(e4) {
      return Object.assign({}, Jf(e4), {attributes: nn(Hf, Vf)(e4)});
    }
    function Gf(e4) {
      return Object.assign({}, Jf(e4), {attributes: Vf(e4)});
    }
    function Hf(e4) {
      return e4.map((e5) => e5.expressions ? e5 : Object.assign({}, e5, {expressions: [{start: e5.valueStart, end: e5.end, text: `'${e5.value || e5.name}'`}]}));
    }
    function Wf(e4) {
      return e4 && e4.nodes ? e4.nodes : [];
    }
    function Kf(e4) {
      return e4.attributes ? e4.attributes : [];
    }
    function $f(e4) {
      const t3 = ed(e4), r4 = (e5) => `'${e5}'`;
      return t3 ? t3.expressions ? t3.expressions[0] : Object.assign({}, t3, {text: r4(t3.value)}) : Object.assign({}, e4, {text: r4(Af(e4))});
    }
    function Yf(e4) {
      return td(e4).map((e5) => e5[Pp] || !e5.value ? e5.name : `${e5.name}="${Qf(e5, "value").value}"`).join(" ");
    }
    function Qf(e4, t3) {
      return e4.unescape ? Object.assign({}, e4, {[t3]: mf(e4[t3], e4.unescape)}) : e4;
    }
    function Zf(e4) {
      const t3 = Yf(e4);
      switch (true) {
        case _p(e4):
          return `<${e4.name}${t3 ? ` ${t3}` : ""}${Op(e4) ? "/" : ""}>`;
        case Bp(e4):
          return Xp(e4) ? Ep : Qf(e4, "text").text;
        default:
          return e4.text || "";
      }
    }
    function em(e4) {
      return e4.name ? `</${e4.name}>` : "";
    }
    function tm(e4) {
      return gi.callExpression(gi.memberExpression(gi.arrayExpression(e4), gi.identifier("join"), false), [gi.literal("")]);
    }
    function rm(e4, t3, r4) {
      return e4.parts && e4.parts.length !== 1 ? tm([...e4.parts.reduce((s4, i4) => {
        const n4 = e4.expressions.find((e5) => e5.text.trim() === i4);
        return [...s4, n4 ? _f(n4, t3, r4) : gi.literal(pf2(i4))];
      }, [])].filter((e5) => !Fn(e5) || e5.value)) : _f(e4.expressions[0], t3, r4);
    }
    const sm = (im === void 0 && (im = 0), () => `${vp}${im++}`);
    var im;
    function nm(e4, t3, r4, s4) {
      return gi.arrayExpression([...nn((t4) => t4.map((t5) => Ef(t5, r4, s4, 0, e4)), (e5) => e5.filter(Xp), (e5) => zf(e5, t3), Vf)(e4)]);
    }
    function am(e4, t3, r4) {
      return Xp(e4) ? Lf(rm(e4, t3, r4)) : gi.functionExpression(null, [], gi.blockStatement([gi.returnStatement(gi.literal(e4.value || true))]));
    }
    function om(e4) {
      return JSON.parse(JSON.stringify(e4));
    }
    const lm = (e4) => Bn(e4.left) ? e4.left.expressions[0] : e4.left, cm = (e4) => Bn(e4.left) ? e4.left.expressions[1] : null, um = (e4) => e4.right, hm = nn(gi.literal, Af), pm = (e4) => Ei(tp2, nn(hm, lm)(e4)), dm = (e4) => Ei(sp, nn(hm, cm)(e4)), fm = (e4, t3, r4, s4) => Ei(ip, nn((e5) => Of(e5, r4, s4), (e5) => Object.assign({}, t3, {text: wn(e5).code}), um)(e4));
    function mm(e4, t3, r4) {
      const s4 = If(e4, t3, r4).program.body[0];
      Mn(s4) || Ki(`The each directives supported should be of type "ExpressionStatement",you have provided a "${s4.type}"`);
      const {expression: i4} = s4;
      return [pm(i4), dm(i4), fm(i4, e4, t3, r4)];
    }
    function ym(e4, t3, r4, s4) {
      const [i4, n4, a4] = [Yp, Qp, Zp].map((t4) => t4(e4)), o4 = (e5) => e5 ? Of(Mf(e5), r4, s4) : bi();
      return gi.objectExpression([Ei(Qh, gi.memberExpression(gi.identifier(_h), gi.identifier(Bh), false)), Ei(rp, o4(a4)), Ei(ep, o4(i4)), Ff(Im(e4, r4, s4, t3)), ...Uf(t3), ...nn(mm, Mf)(n4)]);
    }
    function gm(e4, t3, r4, s4) {
      const i4 = Yp(e4);
      return gi.objectExpression([Ei(Qh, gi.memberExpression(gi.identifier(_h), gi.identifier(Rh), false)), Ei(ip, Of(i4.expressions[0], r4, s4)), ...Uf(t3), Ff(Im(e4, r4, s4, t3))]);
    }
    function xm(e4, t3, r4) {
      const s4 = Wf(e4);
      return s4.filter(Bp).filter(Xp).map((i4) => Ef(i4, t3, r4, s4.indexOf(i4), e4));
    }
    function bm(e4, t3, r4, s4) {
      return gi.objectExpression([...Np(e4) || Rp(e4) ? [] : Uf(t3), Ei(op, gi.arrayExpression([...xm(e4, r4, s4), ...vf(e4, r4, s4)]))]);
    }
    function Em(e4, t3, r4, s4) {
      const i4 = $p(gp, e4), n4 = i4 ? i4.value : bp;
      return gi.objectExpression([Ei(Qh, gi.memberExpression(gi.identifier(_h), gi.identifier(Uh), false)), Ei(pp, nm(Object.assign({}, e4, {attributes: Kf(e4).filter((e5) => Af(e5) !== gp)}), t3, r4, s4)), Ei(np, gi.literal(n4)), ...Uf(t3)]);
    }
    function vm(e4) {
      return Wf(e4).reduce((e5, t3) => {
        const r4 = Tm(t3);
        return r4 ? e5[r4.value] = t3 : e5.default = Gf({nodes: [...Wf(e5.default), t3]}), e5;
      }, {default: null});
    }
    function Sm(e4, t3, r4, s4) {
      const i4 = Object.assign({}, t3, {attributes: Kf(t3)}), [n4, a4] = Fm(i4, r4, s4);
      return gi.objectExpression([Ei(up, gi.literal(e4)), Ei(hp, gi.literal(n4)), Ei(cp, gi.arrayExpression(a4))]);
    }
    function Am(e4, t3, r4) {
      return gi.arrayExpression([...nn((e5) => e5.map((e6) => {
        let [s4, i4] = e6;
        return Sm(s4, i4, t3, r4);
      }), (e5) => e5.filter((e6) => {
        let [, t4] = e6;
        return t4;
      }), Object.entries, vm)(e4)]);
    }
    function Tm(e4) {
      return Kf(e4).find((e5) => e5.name === yp);
    }
    function wm(e4, t3, r4, s4) {
      return gi.objectExpression([Ei(Qh, gi.memberExpression(gi.identifier(_h), gi.identifier(jh), false)), Ei($h, gi.identifier(Wh)), Ei(ip, Of($f(e4), r4, s4)), Ei(ap, Am(e4, r4, s4)), Ei(pp, nm(e4, t3, r4, s4)), ...Uf(t3)]);
    }
    const Cm = Object.freeze({html: [], bindings: [], parent: null});
    function Pm(e4, t3) {
      return t3 ? Object.assign({}, e4, {attributes: [{name: t3, value: t3}, ...Kf(e4)]}) : e4;
    }
    function Dm(e4, t3, r4, s4) {
      switch (true) {
        case Bp(e4):
          return [Zf(e4), []];
        default:
          return km(e4, t3, r4);
      }
    }
    function km(e4, t3, r4) {
      const s4 = Rp(e4) ? null : sm(), i4 = Pm(e4, s4), n4 = Zf(i4);
      switch (true) {
        case Wp(i4):
          return [n4, [ym(i4, s4, t3, r4)]];
        case Hp(i4):
          return [n4, [gm(i4, s4, t3, r4)]];
        case Mp(i4):
          return [n4, [wm(i4, s4, t3, r4)]];
        case Lp(i4):
          return [n4, [Em(i4, s4)]];
        default:
          return [n4, [bm(i4, s4, t3, r4)]];
      }
    }
    function Nm(e4, t3, r4, s4) {
      return kp(e4) ? [Zf(e4), []] : Dm(e4, t3, r4);
    }
    function Im(e4, t3, r4, s4) {
      const i4 = Mp(e4), n4 = qf(e4, s4);
      return i4 ? [null, [wm(n4, null, t3, r4)]] : Fm(Gf(n4), t3, r4);
    }
    function Fm(e4, t3, r4, s4) {
      e4 || Ki("Something went wrong with your tag DOM parsing, your tag template can't be created");
      const [i4, n4] = Nm(e4, t3, r4), a4 = Wf(e4), o4 = Np(e4) === false, l3 = Object.assign({}, om(Cm), s4);
      return o4 && l3.html.push(...i4), l3.bindings.push(...n4), a4.length && !Gp(e4) && a4.forEach((s5) => Fm(s5, t3, r4, Object.assign({parent: e4}, l3))), o4 && _p(e4) && !Op(e4) && l3.html.push(em(e4)), [l3.html.join(""), l3.bindings];
    }
    const Mm = [Gh, qh, _h, Wh].map(gi.identifier);
    function Lm(e4, t3, r4) {
      return gi.blockStatement([gi.returnStatement(Rf(...Fm(Xf(e4), t3, r4)))]);
    }
    function Om(e4, t3, r4, s4) {
      return yi.visit(e4, {visitProperty(e5) {
        if (e5.value.key.value === h3)
          return e5.value.value = gi.functionExpression(null, Mm, Lm(s4, t3, r4)), false;
        this.traverse(e5);
      }}), e4;
    }
    function _m(e4, t3, r4, s4) {
      const {options: i4} = r4;
      return Om(s4, i4.file, t3, e4);
    }
    const Bm = {template: "default", file: "[unknown-source-file]", scopedCss: true};
    function Rm(e4) {
      let {tagName: t3} = e4;
      return gi.program([gi.exportDefaultDeclaration(gi.objectExpression([Ei(u2, bi()), Ei(c3, bi()), Ei(h3, bi()), Ei(p3, gi.literal(t3))]))]);
    }
    function jm(e4) {
      const t3 = vi(e4);
      return Pn(t3) ? null : t3;
    }
    function Um(e4, t3) {
      return Object.assign({}, e4, {sourcesContent: [t3]});
    }
    function qm(e4, t3) {
      return {tagName: null, fragments: null, options: Object.assign({}, Bm, t3), source: e4};
    }
    function zm(e4, t3) {
      t3 === void 0 && (t3 = {});
      const r4 = qm(e4, t3), {options: s4} = r4, {code: i4, map: n4} = sn("template", s4.template, r4, e4), {parse: a4} = kh(s4), {template: o4, css: l3, javascript: c4} = a4(i4).output;
      if (Cn(o4 || l3 || c4, i4, a4))
        throw new Error("Multiple HTML root nodes are not supported");
      return Object.assign(r4, {tagName: o4.name, fragments: {template: o4, css: l3, javascript: c4}}), nn((e5) => Object.assign({}, e5, {meta: r4}), (e5) => Qi(e5, r4), (t4) => Object.assign({}, t4, {map: Um(t4.map, e4)}), (e5) => r4.ast = e5 && wn(e5, {sourceMapName: `${s4.file}.map`, inputSourceMap: jm(n4)}), Vm(_m, o4, i4, r4), Vm(Nc, c4, i4, r4), Vm(An, l3, i4, r4))(Rm(r4));
    }
    function Vm(e4, t3, r4, s4) {
      return !t3 || t3.nodes && !t3.nodes.length || !t3.nodes && !t3.text ? (e5) => e5 : Tn(e4)(t3, r4, s4);
    }
    const Jm = rn, Xm = Yi;
    e3.compile = zm, e3.createInitialInput = Rm, e3.registerPostprocessor = Xm, e3.registerPreprocessor = Jm, Object.defineProperty(e3, "__esModule", {value: true});
  });
  var mr = cr(hr.exports);
  const yr = "__riot_registry__";
  function gr(e3, t2) {
    const r3 = document.createElement("script"), s3 = document.documentElement;
    t2 && (r3.text = `${e3}
//# sourceURL=${t2}.js`), s3.appendChild(r3), s3.removeChild(r3);
  }
  function xr(e3) {
    return `(function (global){${e3}})(this)`.replace("export default", "return");
  }
  function br(e3, t2, r3) {
    gr(`window.${yr}['${t2}'] = ${xr(e3)}`, r3), Qt(t2, window[yr][t2]);
  }
  function Er(e3, t2) {
    return mr.compile(e3, t2);
  }
  async function vr(e3, t2) {
    const r3 = await fetch(e3), s3 = await r3.text();
    return mr.compile(s3, Object.assign({file: e3}, t2));
  }
  async function Sr(e3) {
    const t2 = gt('script[type="riot"]').map((e4) => vt(e4, "src") || vt(e4, "data-src"));
    (await Promise.all(t2.map((t3) => vr(t3, e3)))).forEach((e4, r3) => {
      let {code: s3, meta: i3} = e4;
      const n3 = t2[r3], {tagName: a3} = i3;
      br(s3, a3, n3);
    });
  }
  return window[yr] = {}, Object.assign({}, lr, {compile: Sr, inject: br, compileFromUrl: vr, compileFromString: Er, compiler: mr});
}());
class m extends SInterface {
}
m.definition = {source: {type: "String"}};
const y = {css: 's-handlebars,[is="s-handlebars"]{ }', exports: {$source: void 0, tagName: `riot-${n()}`, state: {}, async onBeforeMount() {
  this.component = new SComponentUtils(this.root, this.props, {interface: m}), this.component.props.source && (this.$source = document.querySelector(this.component.props.source));
  let e2, t = {};
  if (this.$source) {
    if (!this.$source.getData)
      throw new Error('<red>[s-handlebars]</red> Sorry but the spcified data source provider does not provide an "<yellow>getData</yellow>" api method');
    t = await this.$source.getData();
  }
  this.$template = this.root.querySelector("template"), this._template = this.$template.innerHTML, this._template.match(/<script(.*)?>/) ? this._template.match(/onBeforeMount\(\)\s?\{/) ? this._template = this._template.replace(/onBeforeMount\(\)\s?\{/, "onBeforeMount() { this.root.update = this.update.bind(this); ") : this._template = this._template.replace(/export default\s?\{/, "export default {\n              onBeforeMount() { this.root.update = this.update.bind(this); }, ") : this._template = `
              ${this._template}
              <script>
                  export default {
                      onBeforeMount() {
                          this.root.update = this.update.bind(this);
                      }
                  };
              </script>
          `, e2 = `
          <${this.tagName}>
              ${this._template}
          </${this.tagName}>
      `;
  const {code: r2} = f.compileFromString(e2);
  f.inject(r2, this.tagName, "index.html");
  const i2 = document.createElement(this.tagName);
  this.$template.parentNode.insertBefore(i2, this.$template.nextSibling), f.mount(this.tagName), i2.update({data: t}), this.root.setData = this.setData.bind(this);
}, onMounted() {
  console.log("COCO");
}, setData(e2) {
  console.log("data", e2);
}}, template: null, name: "s-handlebars"};
register("s-handlebars", y), function(e2, t = null, s2 = {}) {
  const i2 = `${e2} - ${n()}`;
  s2 = Object.assign({}, {rootNode: document, once: true}, s2), o[e2] ? o[e2].push({id: i2, selector: e2, cb: t, settings: s2}) : o[e2] = [{id: i2, selector: e2, cb: t, settings: s2}], new SPromise(({resolve: t2, reject: r2, emit: i3}) => {
    function n2(e3, t3) {
      const r3 = o[t3];
      r3 && r3.forEach((t4) => {
        if (t4.settings.once) {
          if (e3._querySelectorLive || (e3._querySelectorLive = {}), e3._querySelectorLive[t4.id])
            return;
          e3._querySelectorLive[t4.id] = true;
        }
        i3("node", e3), t4.cb && t4.cb(e3, () => {
          delete o[t4.selector];
        });
      });
    }
    a$1 || (a$1 = new MutationObserver((e3) => {
      e3.forEach((e4) => {
        e4.addedNodes && [].forEach.call(e4.addedNodes, (e5) => {
          const t3 = Object.keys(o);
          t3.forEach((t4) => {
            (function(e6, t5) {
              if (e6.nodeName == "#comment" || e6.nodeName == "#text")
                return false;
              const r3 = Element.prototype;
              return (r3.matches || r3.webkitMatchesSelector || r3.mozMatchesSelector || r3.msMatchesSelector || function(e7) {
                return [].indexOf.call(document.querySelectorAll(e7), this) !== -1;
              }).call(e6, t5);
            })(e5, t4) && n2(e5, t4);
          }), e5.querySelectorAll && t3.forEach((t4) => {
            const r3 = e5.querySelectorAll(t4);
            [].forEach.call(r3, (e6) => {
              n2(e6, t4);
            });
          });
        });
      });
    }), a$1.observe(s2.rootNode, {childList: true, subtree: true})), [].forEach.call(s2.rootNode.querySelectorAll(e2), (t3) => {
      n2(t3, e2);
    });
  });
}("s-handlebars", (t) => {
  const r2 = t.id || "s-handlebars-" + n();
  t.setAttribute("id", r2), mount("#" + r2);
}), y.mount = () => {
  mount("s-handlebars");
}, window.env || (window.env = {SUGAR: {}}), window.env.SUGAR = JSON.parse('{"ENVIRONMENT":"development"}');
function matches(el, selector) {
  if (el.nodeName == "#comment" || el.nodeName == "#text") {
    return false;
  }
  const p2 = Element.prototype;
  const f2 = p2.matches || p2.webkitMatchesSelector || p2.mozMatchesSelector || p2.msMatchesSelector || function(s2) {
    return [].indexOf.call(document.querySelectorAll(s2), this) !== -1;
  };
  return f2.call(el, selector);
}
let _observer;
const _selectors = {};
function querySelectorLive(selector, cb = null, settings = {}) {
  const id2 = `${selector} - ${uniqid$1()}`;
  settings = Object.assign({}, {
    rootNode: document,
    once: true
  }, settings);
  if (!_selectors[selector]) {
    _selectors[selector] = [
      {
        id: id2,
        selector,
        cb,
        lastMutationId: null,
        settings
      }
    ];
  } else {
    _selectors[selector].push({
      id: id2,
      selector,
      cb,
      lastMutationId: null,
      settings
    });
  }
  return new SPromise(({resolve: resolve2, reject, emit}) => {
    function pushNewNode(node, sel, mutationId) {
      const objs = _selectors[sel];
      if (!objs)
        return;
      objs.forEach((obj) => {
        if (obj.lastMutationId && obj.lastMutationId === mutationId)
          return;
        if (obj.settings.once) {
          if (!node._querySelectorLive) {
            node._querySelectorLive = {};
          }
          if (node._querySelectorLive[obj.id])
            return;
          node._querySelectorLive[obj.id] = true;
        }
        emit("node", node);
        obj.cb && obj.cb(node, () => {
          delete _selectors[obj.selector];
        });
      });
    }
    if (!_observer) {
      _observer = new MutationObserver((mutations) => {
        const mutationId = `mutation-${uniqid$1()}`;
        mutations.forEach((mutation) => {
          if (mutation.addedNodes && mutation.addedNodes.length) {
            [].forEach.call(mutation.addedNodes, (node) => {
              const selectors = Object.keys(_selectors);
              selectors.forEach((sel) => {
                if (matches(node, sel)) {
                  pushNewNode(node, sel, mutationId);
                }
              });
              if (!node.querySelectorAll)
                return;
              selectors.forEach((sel) => {
                const nestedNodes = node.querySelectorAll(sel);
                [].forEach.call(nestedNodes, (nestedNode) => {
                  pushNewNode(nestedNode, sel, mutationId);
                });
              });
            });
          } else if (mutation.attributeName) {
            const selectors = Object.keys(_selectors);
            selectors.forEach((sel) => {
              if (matches(mutation.target, sel)) {
                pushNewNode(mutation.target, sel, mutationId);
              }
            });
          }
        });
      });
      _observer.observe(settings.rootNode, {
        childList: true,
        subtree: true,
        attributes: true,
        attributeFilter: ["class", "id"]
      });
    }
    [].forEach.call(settings.rootNode.querySelectorAll(selector), (node) => {
      pushNewNode(node, selector, "init");
    });
  });
}
function expandPleasantCssClassname(classesStr) {
  const classesArray = [];
  const classNames = classesStr.split(/\s+/);
  let currentMedia = "";
  classNames.forEach((className) => {
    if (className.slice(0, 1) == "@") {
      currentMedia = className.replace("@", "___");
      return;
    }
    const parts = className.split(":");
    if (parts.length === 1) {
      let name2 = className;
      if (currentMedia !== "")
        name2 = className + currentMedia;
      classesArray.push(name2);
    } else {
      const firstClass = parts[0];
      let name2 = firstClass;
      if (currentMedia !== "")
        name2 = firstClass + currentMedia;
      classesArray.push(name2);
      parts.forEach((part, i2) => {
        if (i2 > 0) {
          name2 = firstClass + "--" + part;
          if (currentMedia !== "")
            name2 = name2 + currentMedia;
          classesArray.push(name2);
        }
      });
    }
  });
  return classesArray.join(" ");
}
function expandPleasantCssClassnamesLive() {
  querySelectorLive('[class*=":"],[class*="@"]', ($elm) => {
    const classesStr = $elm.getAttribute("class");
    const newClassesStr = expandPleasantCssClassname(classesStr);
    $elm.setAttribute("class", newClassesStr);
  }, {
    once: false
  });
}
function sameItems(...args) {
  var _a2, _b, _c;
  const arrays = args.filter((arg) => Array.isArray(arg));
  const settings = Object.assign({references: true, hash: true}, (_a2 = args.filter((arg) => plainObject$1(arg))[0]) !== null && _a2 !== void 0 ? _a2 : {});
  if (arrays.length > 2) {
    let newArray = arrays[0];
    arrays.forEach((currentArray) => {
      newArray = sameItems(newArray, currentArray, settings);
    });
    return unique$1(newArray);
  } else {
    const array1 = (_b = arrays[0]) !== null && _b !== void 0 ? _b : [], array2 = (_c = arrays[1]) !== null && _c !== void 0 ? _c : [];
    const sameArray = [];
    array1.forEach((array1Item) => {
      let array1ItemHash = array1Item;
      if (typeof array1Item !== "string" && settings.hash) {
        array1ItemHash = __md5$1.encrypt(array1Item);
      }
      array2.forEach((array2Item) => {
        let array2ItemHash = array2Item;
        if (typeof array2Item !== "string" && settings.hash) {
          array2ItemHash = __md5$1.encrypt(array2Item);
          if (array1ItemHash === array2ItemHash) {
            sameArray.push(array1Item);
            return;
          }
        } else if (array1Item === array2Item) {
          sameArray.push(array1Item);
          return;
        }
      });
    });
    return unique$1(sameArray);
  }
}
function onScrollEnd($elm, callback, settings) {
  const finalSettings = Object.assign({offset: 20, once: false, times: -1}, settings !== null && settings !== void 0 ? settings : {});
  let isBody = false;
  let $scrollListenedElm = $elm;
  let $scrollHeightElm = $elm;
  if ($elm === window.document.body) {
    isBody = true;
    $scrollListenedElm = document;
    $scrollHeightElm = window.document.body;
  } else if ($elm === window.document) {
    isBody = true;
    $elm = window.document.body;
    $scrollHeightElm = window.document.body;
  }
  let active = true, count = 0;
  const internalCallback = (e2) => {
    let fullHeight, viewportHeight, scrollTop2;
    if (isBody) {
      viewportHeight = window.innerHeight;
      scrollTop2 = $scrollHeightElm.scrollTop;
      fullHeight = Math.max(window.document.body.scrollHeight, window.document.documentElement.scrollHeight, window.document.body.offsetHeight, window.document.documentElement.offsetHeight, window.document.body.clientHeight, window.document.documentElement.clientHeight);
    } else {
      viewportHeight = $scrollHeightElm.scrollHeight;
      scrollTop2 = $scrollHeightElm.scrollTop;
      fullHeight = $scrollHeightElm.scrollHeight;
    }
    if (active && scrollTop2 + viewportHeight >= fullHeight - finalSettings.offset) {
      callback();
      count++;
      if (finalSettings.once) {
        $scrollListenedElm.removeEventListener("scroll", internalCallback);
        active = false;
      } else if (finalSettings.times > 0 && count >= finalSettings.times) {
        $scrollListenedElm.removeEventListener("scroll", internalCallback);
        active = false;
      }
    } else if ($scrollHeightElm.offsetHeight + $scrollHeightElm.scrollTop < $scrollHeightElm.scrollHeight - finalSettings.offset) {
      active = true;
    }
  };
  $scrollListenedElm.addEventListener("scroll", internalCallback);
}
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t[p2] = s2[p2];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __values(o2) {
  var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o2[s2], i2 = 0;
  if (m2)
    return m2.call(o2);
  if (o2 && typeof o2.length === "number")
    return {
      next: function() {
        if (o2 && i2 >= o2.length)
          o2 = void 0;
        return {value: o2 && o2[i2++], done: !o2};
      }
    };
  throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o2, n2) {
  var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
  if (!m2)
    return o2;
  var i2 = m2.call(o2), r2, ar = [], e2;
  try {
    while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
      ar.push(r2.value);
  } catch (error2) {
    e2 = {error: error2};
  } finally {
    try {
      if (r2 && !r2.done && (m2 = i2["return"]))
        m2.call(i2);
    } finally {
      if (e2)
        throw e2.error;
    }
  }
  return ar;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i2 = 0, l2 = from.length, ar; i2 < l2; i2++) {
      if (ar || !(i2 in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i2);
        ar[i2] = from[i2];
      }
    }
  return to.concat(ar || from);
}
var ENTRIES = "ENTRIES";
var KEYS = "KEYS";
var VALUES = "VALUES";
var LEAF = "";
var TreeIterator = function() {
  function TreeIterator2(set2, type) {
    var node = set2._tree;
    var keys = Object.keys(node);
    this.set = set2;
    this._type = type;
    this._path = keys.length > 0 ? [{node, keys}] : [];
  }
  TreeIterator2.prototype.next = function() {
    var value = this.dive();
    this.backtrack();
    return value;
  };
  TreeIterator2.prototype.dive = function() {
    if (this._path.length === 0) {
      return {done: true, value: void 0};
    }
    var _a2 = last$1(this._path), node = _a2.node, keys = _a2.keys;
    if (last$1(keys) === LEAF) {
      return {done: false, value: this.result()};
    }
    this._path.push({node: node[last$1(keys)], keys: Object.keys(node[last$1(keys)])});
    return this.dive();
  };
  TreeIterator2.prototype.backtrack = function() {
    if (this._path.length === 0) {
      return;
    }
    last$1(this._path).keys.pop();
    if (last$1(this._path).keys.length > 0) {
      return;
    }
    this._path.pop();
    this.backtrack();
  };
  TreeIterator2.prototype.key = function() {
    return this.set._prefix + this._path.map(function(_a2) {
      var keys = _a2.keys;
      return last$1(keys);
    }).filter(function(key) {
      return key !== LEAF;
    }).join("");
  };
  TreeIterator2.prototype.value = function() {
    return last$1(this._path).node[LEAF];
  };
  TreeIterator2.prototype.result = function() {
    if (this._type === VALUES) {
      return this.value();
    }
    if (this._type === KEYS) {
      return this.key();
    }
    return [this.key(), this.value()];
  };
  TreeIterator2.prototype[Symbol.iterator] = function() {
    return this;
  };
  return TreeIterator2;
}();
var last$1 = function(array) {
  return array[array.length - 1];
};
var NONE = 0;
var CHANGE = 1;
var ADD = 2;
var DELETE = 3;
var fuzzySearch = function(node, query, maxDistance) {
  var stack = [{distance: 0, i: 0, key: "", node}];
  var results = {};
  var innerStack = [];
  var _loop_1 = function() {
    var _a2 = stack.pop(), node_1 = _a2.node, distance = _a2.distance, key = _a2.key, i2 = _a2.i, edit = _a2.edit;
    Object.keys(node_1).forEach(function(k2) {
      if (k2 === LEAF) {
        var totDistance = distance + (query.length - i2);
        var _a3 = __read(results[key] || [null, Infinity], 2), d2 = _a3[1];
        if (totDistance <= maxDistance && totDistance < d2) {
          results[key] = [node_1[k2], totDistance];
        }
      } else {
        withinDistance(query, k2, maxDistance - distance, i2, edit, innerStack).forEach(function(_a4) {
          var d3 = _a4.distance, i3 = _a4.i, edit2 = _a4.edit;
          stack.push({node: node_1[k2], distance: distance + d3, key: key + k2, i: i3, edit: edit2});
        });
      }
    });
  };
  while (stack.length > 0) {
    _loop_1();
  }
  return results;
};
var withinDistance = function(a2, b, maxDistance, i2, edit, stack) {
  stack.push({distance: 0, ia: i2, ib: 0, edit});
  var results = [];
  while (stack.length > 0) {
    var _a2 = stack.pop(), distance = _a2.distance, ia = _a2.ia, ib = _a2.ib, edit_1 = _a2.edit;
    if (ib === b.length) {
      results.push({distance, i: ia, edit: edit_1});
      continue;
    }
    if (a2[ia] === b[ib]) {
      stack.push({distance, ia: ia + 1, ib: ib + 1, edit: NONE});
    } else {
      if (distance >= maxDistance) {
        continue;
      }
      if (edit_1 !== ADD) {
        stack.push({distance: distance + 1, ia, ib: ib + 1, edit: DELETE});
      }
      if (ia < a2.length) {
        if (edit_1 !== DELETE) {
          stack.push({distance: distance + 1, ia: ia + 1, ib, edit: ADD});
        }
        if (edit_1 !== DELETE && edit_1 !== ADD) {
          stack.push({distance: distance + 1, ia: ia + 1, ib: ib + 1, edit: CHANGE});
        }
      }
    }
  }
  return results;
};
var SearchableMap = function() {
  function SearchableMap2(tree, prefix) {
    if (tree === void 0) {
      tree = {};
    }
    if (prefix === void 0) {
      prefix = "";
    }
    this._tree = tree;
    this._prefix = prefix;
  }
  SearchableMap2.prototype.atPrefix = function(prefix) {
    var _a2;
    if (!prefix.startsWith(this._prefix)) {
      throw new Error("Mismatched prefix");
    }
    var _b = __read(trackDown(this._tree, prefix.slice(this._prefix.length)), 2), node = _b[0], path2 = _b[1];
    if (node === void 0) {
      var _c = __read(last(path2), 2), parentNode = _c[0], key_1 = _c[1];
      var nodeKey = Object.keys(parentNode).find(function(k2) {
        return k2 !== LEAF && k2.startsWith(key_1);
      });
      if (nodeKey !== void 0) {
        return new SearchableMap2((_a2 = {}, _a2[nodeKey.slice(key_1.length)] = parentNode[nodeKey], _a2), prefix);
      }
    }
    return new SearchableMap2(node || {}, prefix);
  };
  SearchableMap2.prototype.clear = function() {
    delete this._size;
    this._tree = {};
  };
  SearchableMap2.prototype.delete = function(key) {
    delete this._size;
    return remove(this._tree, key);
  };
  SearchableMap2.prototype.entries = function() {
    return new TreeIterator(this, ENTRIES);
  };
  SearchableMap2.prototype.forEach = function(fn2) {
    var e_1, _a2;
    try {
      for (var _b = __values(this), _c = _b.next(); !_c.done; _c = _b.next()) {
        var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
        fn2(key, value, this);
      }
    } catch (e_1_1) {
      e_1 = {error: e_1_1};
    } finally {
      try {
        if (_c && !_c.done && (_a2 = _b.return))
          _a2.call(_b);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
  };
  SearchableMap2.prototype.fuzzyGet = function(key, maxEditDistance) {
    return fuzzySearch(this._tree, key, maxEditDistance);
  };
  SearchableMap2.prototype.get = function(key) {
    var node = lookup(this._tree, key);
    return node !== void 0 ? node[LEAF] : void 0;
  };
  SearchableMap2.prototype.has = function(key) {
    var node = lookup(this._tree, key);
    return node !== void 0 && node.hasOwnProperty(LEAF);
  };
  SearchableMap2.prototype.keys = function() {
    return new TreeIterator(this, KEYS);
  };
  SearchableMap2.prototype.set = function(key, value) {
    if (typeof key !== "string") {
      throw new Error("key must be a string");
    }
    delete this._size;
    var node = createPath(this._tree, key);
    node[LEAF] = value;
    return this;
  };
  Object.defineProperty(SearchableMap2.prototype, "size", {
    get: function() {
      var _this = this;
      if (this._size) {
        return this._size;
      }
      this._size = 0;
      this.forEach(function() {
        _this._size += 1;
      });
      return this._size;
    },
    enumerable: false,
    configurable: true
  });
  SearchableMap2.prototype.update = function(key, fn2) {
    if (typeof key !== "string") {
      throw new Error("key must be a string");
    }
    delete this._size;
    var node = createPath(this._tree, key);
    node[LEAF] = fn2(node[LEAF]);
    return this;
  };
  SearchableMap2.prototype.values = function() {
    return new TreeIterator(this, VALUES);
  };
  SearchableMap2.prototype[Symbol.iterator] = function() {
    return this.entries();
  };
  SearchableMap2.from = function(entries) {
    var e_2, _a2;
    var tree = new SearchableMap2();
    try {
      for (var entries_1 = __values(entries), entries_1_1 = entries_1.next(); !entries_1_1.done; entries_1_1 = entries_1.next()) {
        var _b = __read(entries_1_1.value, 2), key = _b[0], value = _b[1];
        tree.set(key, value);
      }
    } catch (e_2_1) {
      e_2 = {error: e_2_1};
    } finally {
      try {
        if (entries_1_1 && !entries_1_1.done && (_a2 = entries_1.return))
          _a2.call(entries_1);
      } finally {
        if (e_2)
          throw e_2.error;
      }
    }
    return tree;
  };
  SearchableMap2.fromObject = function(object) {
    return SearchableMap2.from(Object.entries(object));
  };
  return SearchableMap2;
}();
var trackDown = function(tree, key, path2) {
  if (path2 === void 0) {
    path2 = [];
  }
  if (key.length === 0 || tree == null) {
    return [tree, path2];
  }
  var nodeKey = Object.keys(tree).find(function(k2) {
    return k2 !== LEAF && key.startsWith(k2);
  });
  if (nodeKey === void 0) {
    path2.push([tree, key]);
    return trackDown(void 0, "", path2);
  }
  path2.push([tree, nodeKey]);
  return trackDown(tree[nodeKey], key.slice(nodeKey.length), path2);
};
var lookup = function(tree, key) {
  if (key.length === 0 || tree == null) {
    return tree;
  }
  var nodeKey = Object.keys(tree).find(function(k2) {
    return k2 !== LEAF && key.startsWith(k2);
  });
  if (nodeKey === void 0) {
    return void 0;
  }
  return lookup(tree[nodeKey], key.slice(nodeKey.length));
};
var createPath = function(tree, key) {
  var _a2;
  if (key.length === 0 || tree == null) {
    return tree;
  }
  var nodeKey = Object.keys(tree).find(function(k2) {
    return k2 !== LEAF && key.startsWith(k2);
  });
  if (nodeKey === void 0) {
    var toSplit = Object.keys(tree).find(function(k2) {
      return k2 !== LEAF && k2.startsWith(key[0]);
    });
    if (toSplit === void 0) {
      tree[key] = {};
    } else {
      var prefix = commonPrefix(key, toSplit);
      tree[prefix] = (_a2 = {}, _a2[toSplit.slice(prefix.length)] = tree[toSplit], _a2);
      delete tree[toSplit];
      return createPath(tree[prefix], key.slice(prefix.length));
    }
    return tree[key];
  }
  return createPath(tree[nodeKey], key.slice(nodeKey.length));
};
var commonPrefix = function(a2, b, i2, length, prefix) {
  if (i2 === void 0) {
    i2 = 0;
  }
  if (length === void 0) {
    length = Math.min(a2.length, b.length);
  }
  if (prefix === void 0) {
    prefix = "";
  }
  if (i2 >= length) {
    return prefix;
  }
  if (a2[i2] !== b[i2]) {
    return prefix;
  }
  return commonPrefix(a2, b, i2 + 1, length, prefix + a2[i2]);
};
var remove = function(tree, key) {
  var _a2 = __read(trackDown(tree, key), 2), node = _a2[0], path2 = _a2[1];
  if (node === void 0) {
    return;
  }
  delete node[LEAF];
  var keys = Object.keys(node);
  if (keys.length === 0) {
    cleanup(path2);
  }
  if (keys.length === 1) {
    merge(path2, keys[0], node[keys[0]]);
  }
};
var cleanup = function(path2) {
  if (path2.length === 0) {
    return;
  }
  var _a2 = __read(last(path2), 2), node = _a2[0], key = _a2[1];
  delete node[key];
  var keys = Object.keys(node);
  if (keys.length === 0) {
    cleanup(path2.slice(0, -1));
  }
  if (keys.length === 1 && keys[0] !== LEAF) {
    merge(path2.slice(0, -1), keys[0], node[keys[0]]);
  }
};
var merge = function(path2, key, value) {
  if (path2.length === 0) {
    return;
  }
  var _a2 = __read(last(path2), 2), node = _a2[0], nodeKey = _a2[1];
  node[nodeKey + key] = value;
  delete node[nodeKey];
};
var last = function(array) {
  return array[array.length - 1];
};
var _a;
var OR = "or";
var AND = "and";
var MiniSearch = function() {
  function MiniSearch2(options) {
    if ((options === null || options === void 0 ? void 0 : options.fields) == null) {
      throw new Error('MiniSearch: option "fields" must be provided');
    }
    this._options = __assign(__assign(__assign({}, defaultOptions), options), {searchOptions: __assign(__assign({}, defaultSearchOptions), options.searchOptions || {})});
    this._index = new SearchableMap();
    this._documentCount = 0;
    this._documentIds = {};
    this._fieldIds = {};
    this._fieldLength = {};
    this._averageFieldLength = {};
    this._nextId = 0;
    this._storedFields = {};
    this.addFields(this._options.fields);
  }
  MiniSearch2.prototype.add = function(document2) {
    var _this = this;
    var _a2 = this._options, extractField = _a2.extractField, tokenize = _a2.tokenize, processTerm = _a2.processTerm, fields = _a2.fields, idField = _a2.idField;
    var id2 = extractField(document2, idField);
    if (id2 == null) {
      throw new Error('MiniSearch: document does not have ID field "' + idField + '"');
    }
    var shortDocumentId = this.addDocumentId(id2);
    this.saveStoredFields(shortDocumentId, document2);
    fields.forEach(function(field) {
      var fieldValue = extractField(document2, field);
      if (fieldValue == null) {
        return;
      }
      var tokens = tokenize(fieldValue.toString(), field);
      _this.addFieldLength(shortDocumentId, _this._fieldIds[field], _this.documentCount - 1, tokens.length);
      tokens.forEach(function(term) {
        var processedTerm = processTerm(term, field);
        if (processedTerm) {
          _this.addTerm(_this._fieldIds[field], shortDocumentId, processedTerm);
        }
      });
    });
  };
  MiniSearch2.prototype.addAll = function(documents) {
    var _this = this;
    documents.forEach(function(document2) {
      return _this.add(document2);
    });
  };
  MiniSearch2.prototype.addAllAsync = function(documents, options) {
    var _this = this;
    if (options === void 0) {
      options = {};
    }
    var _a2 = options.chunkSize, chunkSize = _a2 === void 0 ? 10 : _a2;
    var acc = {chunk: [], promise: Promise.resolve()};
    var _b = documents.reduce(function(_a3, document2, i2) {
      var chunk2 = _a3.chunk, promise2 = _a3.promise;
      chunk2.push(document2);
      if ((i2 + 1) % chunkSize === 0) {
        return {
          chunk: [],
          promise: promise2.then(function() {
            return new Promise(function(resolve2) {
              return setTimeout(resolve2, 0);
            });
          }).then(function() {
            return _this.addAll(chunk2);
          })
        };
      } else {
        return {chunk: chunk2, promise: promise2};
      }
    }, acc), chunk = _b.chunk, promise = _b.promise;
    return promise.then(function() {
      return _this.addAll(chunk);
    });
  };
  MiniSearch2.prototype.remove = function(document2) {
    var _this = this;
    var _a2 = this._options, tokenize = _a2.tokenize, processTerm = _a2.processTerm, extractField = _a2.extractField, fields = _a2.fields, idField = _a2.idField;
    var id2 = extractField(document2, idField);
    if (id2 == null) {
      throw new Error('MiniSearch: document does not have ID field "' + idField + '"');
    }
    var _b = __read(Object.entries(this._documentIds).find(function(_a3) {
      var _b2 = __read(_a3, 2);
      _b2[0];
      var longId = _b2[1];
      return id2 === longId;
    }) || [], 1), shortDocumentId = _b[0];
    if (shortDocumentId == null) {
      throw new Error("MiniSearch: cannot remove document with ID " + id2 + ": it is not in the index");
    }
    fields.forEach(function(field) {
      var fieldValue = extractField(document2, field);
      if (fieldValue == null) {
        return;
      }
      var tokens = tokenize(fieldValue.toString(), field);
      tokens.forEach(function(term) {
        var processedTerm = processTerm(term, field);
        if (processedTerm) {
          _this.removeTerm(_this._fieldIds[field], shortDocumentId, processedTerm);
        }
      });
      _this.removeFieldLength(shortDocumentId, _this._fieldIds[field], _this.documentCount, tokens.length);
    });
    delete this._storedFields[shortDocumentId];
    delete this._documentIds[shortDocumentId];
    delete this._fieldLength[shortDocumentId];
    this._documentCount -= 1;
  };
  MiniSearch2.prototype.removeAll = function(documents) {
    var _this = this;
    if (documents) {
      documents.forEach(function(document2) {
        return _this.remove(document2);
      });
    } else if (arguments.length > 0) {
      throw new Error("Expected documents to be present. Omit the argument to remove all documents.");
    } else {
      this._index = new SearchableMap();
      this._documentCount = 0;
      this._documentIds = {};
      this._fieldLength = {};
      this._averageFieldLength = {};
      this._storedFields = {};
      this._nextId = 0;
    }
  };
  MiniSearch2.prototype.search = function(queryString, searchOptions) {
    var _this = this;
    if (searchOptions === void 0) {
      searchOptions = {};
    }
    var _a2 = this._options, tokenize = _a2.tokenize, processTerm = _a2.processTerm, globalSearchOptions = _a2.searchOptions;
    var options = __assign(__assign({tokenize, processTerm}, globalSearchOptions), searchOptions);
    var searchTokenize = options.tokenize, searchProcessTerm = options.processTerm;
    var terms = searchTokenize(queryString).map(function(term) {
      return searchProcessTerm(term);
    }).filter(function(term) {
      return !!term;
    });
    var queries = terms.map(termToQuery(options));
    var results = queries.map(function(query) {
      return _this.executeQuery(query, options);
    });
    var combinedResults = this.combineResults(results, options.combineWith);
    return Object.entries(combinedResults).reduce(function(results2, _a3) {
      var _b = __read(_a3, 2), docId = _b[0], _c = _b[1], score2 = _c.score, match2 = _c.match, terms2 = _c.terms;
      var result = {
        id: _this._documentIds[docId],
        terms: uniq(terms2),
        score: score2,
        match: match2
      };
      Object.assign(result, _this._storedFields[docId]);
      if (options.filter == null || options.filter(result)) {
        results2.push(result);
      }
      return results2;
    }, []).sort(function(_a3, _b) {
      var a2 = _a3.score;
      var b = _b.score;
      return a2 < b ? 1 : -1;
    });
  };
  MiniSearch2.prototype.autoSuggest = function(queryString, options) {
    if (options === void 0) {
      options = {};
    }
    options = __assign(__assign({}, defaultAutoSuggestOptions), options);
    var suggestions = this.search(queryString, options).reduce(function(suggestions2, _a2) {
      var score2 = _a2.score, terms = _a2.terms;
      var phrase = terms.join(" ");
      if (suggestions2[phrase] == null) {
        suggestions2[phrase] = {score: score2, terms, count: 1};
      } else {
        suggestions2[phrase].score += score2;
        suggestions2[phrase].count += 1;
      }
      return suggestions2;
    }, {});
    return Object.entries(suggestions).map(function(_a2) {
      var _b = __read(_a2, 2), suggestion = _b[0], _c = _b[1], score2 = _c.score, terms = _c.terms, count = _c.count;
      return {suggestion, terms, score: score2 / count};
    }).sort(function(_a2, _b) {
      var a2 = _a2.score;
      var b = _b.score;
      return a2 < b ? 1 : -1;
    });
  };
  Object.defineProperty(MiniSearch2.prototype, "documentCount", {
    get: function() {
      return this._documentCount;
    },
    enumerable: false,
    configurable: true
  });
  MiniSearch2.loadJSON = function(json2, options) {
    if (options == null) {
      throw new Error("MiniSearch: loadJSON should be given the same options used when serializing the index");
    }
    return MiniSearch2.loadJS(JSON.parse(json2), options);
  };
  MiniSearch2.getDefault = function(optionName) {
    if (defaultOptions.hasOwnProperty(optionName)) {
      return getOwnProperty(defaultOptions, optionName);
    } else {
      throw new Error('MiniSearch: unknown option "' + optionName + '"');
    }
  };
  MiniSearch2.loadJS = function(js, options) {
    var index = js.index, documentCount = js.documentCount, nextId = js.nextId, documentIds = js.documentIds, fieldIds = js.fieldIds, fieldLength = js.fieldLength, averageFieldLength = js.averageFieldLength, storedFields = js.storedFields;
    var miniSearch = new MiniSearch2(options);
    miniSearch._index = new SearchableMap(index._tree, index._prefix);
    miniSearch._documentCount = documentCount;
    miniSearch._nextId = nextId;
    miniSearch._documentIds = documentIds;
    miniSearch._fieldIds = fieldIds;
    miniSearch._fieldLength = fieldLength;
    miniSearch._averageFieldLength = averageFieldLength;
    miniSearch._fieldIds = fieldIds;
    miniSearch._storedFields = storedFields || {};
    return miniSearch;
  };
  MiniSearch2.prototype.executeQuery = function(query, searchOptions) {
    var _this = this;
    var options = __assign(__assign({}, this._options.searchOptions), searchOptions);
    var boosts = (options.fields || this._options.fields).reduce(function(boosts2, field) {
      var _a3;
      return __assign(__assign({}, boosts2), (_a3 = {}, _a3[field] = getOwnProperty(boosts2, field) || 1, _a3));
    }, options.boost || {});
    var boostDocument = options.boostDocument, weights = options.weights;
    var _a2 = __assign(__assign({}, defaultSearchOptions.weights), weights), fuzzyWeight = _a2.fuzzy, prefixWeight = _a2.prefix;
    var exactMatch = this.termResults(query.term, boosts, boostDocument, this._index.get(query.term));
    if (!query.fuzzy && !query.prefix) {
      return exactMatch;
    }
    var results = [exactMatch];
    if (query.prefix) {
      this._index.atPrefix(query.term).forEach(function(term, data) {
        var weightedDistance = 0.3 * (term.length - query.term.length) / term.length;
        results.push(_this.termResults(term, boosts, boostDocument, data, prefixWeight, weightedDistance));
      });
    }
    if (query.fuzzy) {
      var fuzzy = query.fuzzy === true ? 0.2 : query.fuzzy;
      var maxDistance = fuzzy < 1 ? Math.round(query.term.length * fuzzy) : fuzzy;
      Object.entries(this._index.fuzzyGet(query.term, maxDistance)).forEach(function(_a3) {
        var _b = __read(_a3, 2), term = _b[0], _c = __read(_b[1], 2), data = _c[0], distance = _c[1];
        var weightedDistance = distance / term.length;
        results.push(_this.termResults(term, boosts, boostDocument, data, fuzzyWeight, weightedDistance));
      });
    }
    return results.reduce(combinators[OR], {});
  };
  MiniSearch2.prototype.combineResults = function(results, combineWith) {
    if (combineWith === void 0) {
      combineWith = OR;
    }
    if (results.length === 0) {
      return {};
    }
    var operator2 = combineWith.toLowerCase();
    return results.reduce(combinators[operator2], null) || {};
  };
  MiniSearch2.prototype.toJSON = function() {
    return {
      index: this._index,
      documentCount: this._documentCount,
      nextId: this._nextId,
      documentIds: this._documentIds,
      fieldIds: this._fieldIds,
      fieldLength: this._fieldLength,
      averageFieldLength: this._averageFieldLength,
      storedFields: this._storedFields
    };
  };
  MiniSearch2.prototype.termResults = function(term, boosts, boostDocument, indexData, weight, editDistance) {
    var _this = this;
    if (editDistance === void 0) {
      editDistance = 0;
    }
    if (indexData == null) {
      return {};
    }
    return Object.entries(boosts).reduce(function(results, _a2) {
      var _b = __read(_a2, 2), field = _b[0], boost = _b[1];
      var fieldId = _this._fieldIds[field];
      var _c = indexData[fieldId] || {ds: {}}, df = _c.df, ds = _c.ds;
      Object.entries(ds).forEach(function(_a3) {
        var _b2 = __read(_a3, 2), documentId = _b2[0], tf = _b2[1];
        var docBoost = boostDocument ? boostDocument(_this._documentIds[documentId], term) : 1;
        if (!docBoost) {
          return;
        }
        var normalizedLength = _this._fieldLength[documentId][fieldId] / _this._averageFieldLength[fieldId];
        results[documentId] = results[documentId] || {score: 0, match: {}, terms: []};
        results[documentId].terms.push(term);
        results[documentId].match[term] = getOwnProperty(results[documentId].match, term) || [];
        results[documentId].score += docBoost * score(tf, df, _this._documentCount, normalizedLength, boost, editDistance);
        results[documentId].match[term].push(field);
      });
      return results;
    }, {});
  };
  MiniSearch2.prototype.addTerm = function(fieldId, documentId, term) {
    this._index.update(term, function(indexData) {
      var _a2;
      indexData = indexData || {};
      var fieldIndex = indexData[fieldId] || {df: 0, ds: {}};
      if (fieldIndex.ds[documentId] == null) {
        fieldIndex.df += 1;
      }
      fieldIndex.ds[documentId] = (fieldIndex.ds[documentId] || 0) + 1;
      return __assign(__assign({}, indexData), (_a2 = {}, _a2[fieldId] = fieldIndex, _a2));
    });
  };
  MiniSearch2.prototype.removeTerm = function(fieldId, documentId, term) {
    var _this = this;
    if (!this._index.has(term)) {
      this.warnDocumentChanged(documentId, fieldId, term);
      return;
    }
    this._index.update(term, function(indexData) {
      var _a2;
      var fieldIndex = indexData[fieldId];
      if (fieldIndex == null || fieldIndex.ds[documentId] == null) {
        _this.warnDocumentChanged(documentId, fieldId, term);
        return indexData;
      }
      if (fieldIndex.ds[documentId] <= 1) {
        if (fieldIndex.df <= 1) {
          delete indexData[fieldId];
          return indexData;
        }
        fieldIndex.df -= 1;
      }
      if (fieldIndex.ds[documentId] <= 1) {
        delete fieldIndex.ds[documentId];
        return indexData;
      }
      fieldIndex.ds[documentId] -= 1;
      return __assign(__assign({}, indexData), (_a2 = {}, _a2[fieldId] = fieldIndex, _a2));
    });
    if (Object.keys(this._index.get(term)).length === 0) {
      this._index.delete(term);
    }
  };
  MiniSearch2.prototype.warnDocumentChanged = function(shortDocumentId, fieldId, term) {
    if (console == null || console.warn == null) {
      return;
    }
    var fieldName = Object.entries(this._fieldIds).find(function(_a2) {
      var _b = __read(_a2, 2);
      _b[0];
      var id2 = _b[1];
      return id2 === fieldId;
    })[0];
    console.warn("MiniSearch: document with ID " + this._documentIds[shortDocumentId] + ' has changed before removal: term "' + term + '" was not present in field "' + fieldName + '". Removing a document after it has changed can corrupt the index!');
  };
  MiniSearch2.prototype.addDocumentId = function(documentId) {
    var shortDocumentId = this._nextId.toString(36);
    this._documentIds[shortDocumentId] = documentId;
    this._documentCount += 1;
    this._nextId += 1;
    return shortDocumentId;
  };
  MiniSearch2.prototype.addFields = function(fields) {
    var _this = this;
    fields.forEach(function(field, i2) {
      _this._fieldIds[field] = i2;
    });
  };
  MiniSearch2.prototype.addFieldLength = function(documentId, fieldId, count, length) {
    this._averageFieldLength[fieldId] = this._averageFieldLength[fieldId] || 0;
    var totalLength = this._averageFieldLength[fieldId] * count + length;
    this._fieldLength[documentId] = this._fieldLength[documentId] || {};
    this._fieldLength[documentId][fieldId] = length;
    this._averageFieldLength[fieldId] = totalLength / (count + 1);
  };
  MiniSearch2.prototype.removeFieldLength = function(documentId, fieldId, count, length) {
    var totalLength = this._averageFieldLength[fieldId] * count - length;
    this._averageFieldLength[fieldId] = totalLength / (count - 1);
  };
  MiniSearch2.prototype.saveStoredFields = function(documentId, doc) {
    var _this = this;
    var _a2 = this._options, storeFields = _a2.storeFields, extractField = _a2.extractField;
    if (storeFields == null || storeFields.length === 0) {
      return;
    }
    this._storedFields[documentId] = this._storedFields[documentId] || {};
    storeFields.forEach(function(fieldName) {
      var fieldValue = extractField(doc, fieldName);
      if (fieldValue === void 0) {
        return;
      }
      _this._storedFields[documentId][fieldName] = fieldValue;
    });
  };
  return MiniSearch2;
}();
var getOwnProperty = function(object, property) {
  return Object.prototype.hasOwnProperty.call(object, property) ? object[property] : void 0;
};
var combinators = (_a = {}, _a[OR] = function(a2, b) {
  return Object.entries(b).reduce(function(combined, _a2) {
    var _b;
    var _c = __read(_a2, 2), documentId = _c[0], _d = _c[1], score2 = _d.score, match2 = _d.match, terms = _d.terms;
    if (combined[documentId] == null) {
      combined[documentId] = {score: score2, match: match2, terms};
    } else {
      combined[documentId].score += score2;
      combined[documentId].score *= 1.5;
      (_b = combined[documentId].terms).push.apply(_b, __spreadArray([], __read(terms)));
      Object.assign(combined[documentId].match, match2);
    }
    return combined;
  }, a2 || {});
}, _a[AND] = function(a2, b) {
  if (a2 == null) {
    return b;
  }
  return Object.entries(b).reduce(function(combined, _a2) {
    var _b = __read(_a2, 2), documentId = _b[0], _c = _b[1], score2 = _c.score, match2 = _c.match, terms = _c.terms;
    if (a2[documentId] === void 0) {
      return combined;
    }
    combined[documentId] = combined[documentId] || {};
    combined[documentId].score = a2[documentId].score + score2;
    combined[documentId].match = __assign(__assign({}, a2[documentId].match), match2);
    combined[documentId].terms = __spreadArray(__spreadArray([], __read(a2[documentId].terms)), __read(terms));
    return combined;
  }, {});
}, _a);
var tfIdf = function(tf, df, n2) {
  return tf * Math.log(n2 / df);
};
var score = function(termFrequency, documentFrequency, documentCount, normalizedLength, boost, editDistance) {
  var weight = boost / (1 + 0.333 * boost * editDistance);
  return weight * tfIdf(termFrequency, documentFrequency, documentCount) / normalizedLength;
};
var termToQuery = function(options) {
  return function(term, i2, terms) {
    var fuzzy = typeof options.fuzzy === "function" ? options.fuzzy(term, i2, terms) : options.fuzzy || false;
    var prefix = typeof options.prefix === "function" ? options.prefix(term, i2, terms) : options.prefix === true;
    return {term, fuzzy, prefix};
  };
};
var uniq = function(array) {
  return array.filter(function(element, i2, array2) {
    return array2.indexOf(element) === i2;
  });
};
var defaultOptions = {
  idField: "id",
  extractField: function(document2, fieldName) {
    return document2[fieldName];
  },
  tokenize: function(text, fieldName) {
    return text.split(SPACE_OR_PUNCTUATION);
  },
  processTerm: function(term, fieldName) {
    return term.toLowerCase();
  },
  fields: void 0,
  searchOptions: void 0,
  storeFields: []
};
var defaultSearchOptions = {
  combineWith: OR,
  prefix: false,
  fuzzy: false,
  boost: {},
  weights: {fuzzy: 0.9, prefix: 0.75}
};
var defaultAutoSuggestOptions = {
  prefix: function(term, i2, terms) {
    return i2 === terms.length - 1;
  }
};
var SPACE_OR_PUNCTUATION = /[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u;
function ltrim(string, needle, trimResult = true) {
  if (string.substr(0, needle.length) === needle) {
    return trimResult ? string.substr(needle.length).trim() : string.substr(needle.length);
  }
  return string;
}
function queryStringToObject(str) {
  str = ltrim(str, "?");
  str = decodeURIComponent(str);
  let chunks = str.split("&");
  const obj = {};
  chunks = chunks.filter((ch) => {
    return ch !== "";
  });
  for (let c2 = 0; c2 < chunks.length; c2++) {
    const split = chunks[c2].split("=", 2);
    obj[split[0]] = split[1];
  }
  return obj;
}
class SDocNavComponentInterface extends SInterface {
}
__publicField(SDocNavComponentInterface, "definition", {});
const Component = {
  "css": null,
  "exports": {
    maxItems: 10,
    state: {
      maxItemsToDisplay: 10,
      filteredItems: {},
      docmap: {},
      saved: {
        search: void 0,
        platforms: [],
        types: [],
        statuses: []
      }
    },
    _striptags: striptags,
    async onBeforeMount() {
      this.component = new SComponentUtils(this.root, this.props, {
        interface: SDocNavComponentInterface
      });
      const request2 = new SRequest({
        url: "/api/docmap",
        method: "GET"
      });
      const docmapJson = (await request2.send()).data;
      this.update({
        docmap: docmapJson
      });
      this._restoreState();
      const queryStringObj = queryStringToObject(document.location.search);
      if (queryStringObj.search) {
        this.state.saved.search = queryStringObj.search;
      }
      this._filterItems();
      onScrollEnd(document.body, () => {
        this.update({
          maxItemsToDisplay: this.state.maxItemsToDisplay + this.maxItems
        });
      });
    },
    get availablePlatforms() {
      if (!this.state.docmap.map)
        return [];
      const availablePlatforms = [];
      Object.keys(this.state.docmap.map).forEach((namespace) => {
        const docmapObj = this.state.docmap.map[namespace];
        if (!docmapObj.platform)
          return;
        docmapObj.platform.forEach((platform) => {
          if (availablePlatforms.indexOf(platform.name) === -1)
            availablePlatforms.push(platform.name);
        });
      });
      return availablePlatforms;
    },
    get availableTypes() {
      if (!this.state.docmap.map)
        return [];
      const availableTypes = [];
      Object.keys(this.state.docmap.map).forEach((namespace) => {
        const docmapObj = this.state.docmap.map[namespace];
        if (!docmapObj.type)
          return;
        if (availableTypes.indexOf(docmapObj.type) === -1)
          availableTypes.push(docmapObj.type);
      });
      return availableTypes;
    },
    get availableStatuses() {
      if (!this.state.docmap.map)
        return [];
      const availableStatus = [];
      Object.keys(this.state.docmap.map).forEach((namespace) => {
        const docmapObj = this.state.docmap.map[namespace];
        if (!docmapObj.status)
          return;
        if (availableStatus.indexOf(docmapObj.status) === -1)
          availableStatus.push(docmapObj.status);
      });
      return availableStatus;
    },
    _filterItems() {
      let items = Object.values(this.state.docmap.map).map((i2) => {
        i2.id = i2.name;
        return i2;
      });
      if (this.state.saved.search) {
        let miniSearch = new MiniSearch({
          fields: ["name", "namespace", "description", "since", "type", "status"],
          storeFields: Object.keys(items[0])
        });
        miniSearch.addAll(items);
        items = miniSearch.search(this.state.saved.search);
      }
      items = items.filter((docmapObj) => {
        if (this.state.saved.platforms.length) {
          if (!docmapObj.platform)
            return false;
          const samePlatforms = sameItems(docmapObj.platform.map((l2) => l2.name), this.state.saved.platforms);
          if (!samePlatforms.length)
            return false;
        }
        if (this.state.saved.types.length) {
          if (this.state.saved.types.indexOf(docmapObj.type) === -1)
            return false;
        }
        if (this.state.saved.statuses.length) {
          if (this.state.saved.statuses.indexOf(docmapObj.status) === -1)
            return false;
        }
        return true;
      });
      this.update({
        maxItemsToDisplay: this.maxItems,
        filteredItems: items
      });
    },
    _searchTimeout: 0,
    _search(e2) {
      clearTimeout(this._searchTimeout);
      this._searchTimeout = setTimeout(() => {
        this.update({
          saved: __spreadProps(__spreadValues({}, this.state.saved), {
            search: e2.target.value
          })
        });
        this._filterItems();
        this._saveState();
      }, 300);
    },
    _togglePlatform(platform) {
      const idx = this.state.saved.platforms.indexOf(platform);
      if (idx !== -1) {
        this.state.saved.platforms.splice(idx, 1);
        this.update({
          saved: __spreadProps(__spreadValues({}, this.state.saved), {
            platforms: this.state.saved.platforms
          })
        });
      } else {
        this.update({
          saved: __spreadProps(__spreadValues({}, this.state.saved), {
            platforms: [...this.state.saved.platforms, platform]
          })
        });
      }
      this._filterItems();
      this._saveState();
    },
    _toggleType(type) {
      const idx = this.state.saved.types.indexOf(type);
      if (idx !== -1) {
        this.state.saved.types.splice(idx, 1);
        this.update({
          saved: __spreadProps(__spreadValues({}, this.state.saved), {
            types: this.state.saved.types
          })
        });
      } else {
        this.update({
          saved: __spreadProps(__spreadValues({}, this.state.saved), {
            types: [...this.state.saved.types, type]
          })
        });
      }
      this._filterItems();
      this._saveState();
    },
    _toggleStatus(status) {
      const idx = this.state.saved.statuses.indexOf(status);
      if (idx !== -1) {
        this.state.saved.statuses.splice(idx, 1);
        this.update({
          saved: __spreadProps(__spreadValues({}, this.state.saved), {
            statuses: this.state.saved.statuses
          })
        });
      } else {
        this.update({
          saved: __spreadProps(__spreadValues({}, this.state.saved), {
            statuses: [...this.state.saved.statuses, status]
          })
        });
      }
      this._filterItems();
      this._saveState();
    },
    _saveState() {
      window.localStorage.setItem("docState", JSON.stringify(this.state.saved));
    },
    _restoreState() {
      var _a2;
      const savedState = JSON.parse((_a2 = window.localStorage.getItem("docState")) != null ? _a2 : "{}");
      this.update({
        saved: savedState
      });
    }
  },
  "template": function(template2, expressionTypes2, bindingTypes2, getComponent) {
    return template2('<div class="s-grid:12222"><nav class="__nav"><form name="doc"><fieldset class="__nav-search s-mb:30 s-pr:20 s-pt:20"><input expr23="expr23" type="text" class="s-input s-width:100" name="search" placeholder="Search doc"/></fieldset><fieldset class="__nav-platform s-mb:30"><legend class="s-typo:h6 s-mb:10">\n                        Platform\n                    </legend><dl class="s-list s-bg:even"><dt expr24="expr24" class="s-flex s-font:40 s-pd:10 s-bg:ui-surface"></dt></dl></fieldset><fieldset class="__nav-type s-mb:30"><legend class="s-typo:h6 s-mb:10">\n                        Type\n                    </legend><dl class="s-list s-bg:even"><dt expr28="expr28" class="s-flex s-font:40 s-pd:10 s-bg:ui-surface"></dt></dl></fieldset><fieldset class="__nav-status s-mb:30"><legend class="s-typo:h6 s-mb:10">\n                        Status\n                    </legend><dl class="s-list s-bg:even"><dt expr32="expr32" class="s-flex s-font:40 s-pd:10 s-bg:ui-surface"></dt></dl></fieldset></form></nav><section class="__list"><div expr36="expr36" class="__list-item"></div></section></div>', [
      {
        "redundantAttribute": "expr23",
        "selector": "[expr23]",
        "expressions": [
          {
            "type": expressionTypes2.VALUE,
            "evaluate": function(scope) {
              return scope.state.saved.search;
            }
          },
          {
            "type": expressionTypes2.EVENT,
            "name": "onkeyup",
            "evaluate": function(scope) {
              return scope._search;
            }
          }
        ]
      },
      {
        "type": bindingTypes2.EACH,
        "getKey": null,
        "condition": null,
        "template": template2('<label expr25="expr25" class="s-flex-item:grow"> </label><label expr26="expr26" class="s-switch:accent"><input expr27="expr27" type="checkbox"/><div class="s-switch-handler"></div></label>', [
          {
            "redundantAttribute": "expr25",
            "selector": "[expr25]",
            "expressions": [
              {
                "type": expressionTypes2.TEXT,
                "childNodeIndex": 0,
                "evaluate": function(scope) {
                  return [
                    scope.platform
                  ].join("");
                }
              },
              {
                "type": expressionTypes2.ATTRIBUTE,
                "name": "for",
                "evaluate": function(scope) {
                  return [
                    "platform-",
                    scope.platform
                  ].join("");
                }
              }
            ]
          },
          {
            "redundantAttribute": "expr26",
            "selector": "[expr26]",
            "expressions": [
              {
                "type": expressionTypes2.ATTRIBUTE,
                "name": "for",
                "evaluate": function(scope) {
                  return [
                    "platform-",
                    scope.platform
                  ].join("");
                }
              }
            ]
          },
          {
            "redundantAttribute": "expr27",
            "selector": "[expr27]",
            "expressions": [
              {
                "type": expressionTypes2.ATTRIBUTE,
                "name": "name",
                "evaluate": function(scope) {
                  return [
                    "platform-",
                    scope.platform
                  ].join("");
                }
              },
              {
                "type": expressionTypes2.ATTRIBUTE,
                "name": "id",
                "evaluate": function(scope) {
                  return [
                    "platform-",
                    scope.platform
                  ].join("");
                }
              },
              {
                "type": expressionTypes2.EVENT,
                "name": "onchange",
                "evaluate": function(scope) {
                  return () => scope._togglePlatform(scope.platform);
                }
              },
              {
                "type": expressionTypes2.ATTRIBUTE,
                "name": "checked",
                "evaluate": function(scope) {
                  return scope.state.saved.platforms.indexOf(scope.platform) !== -1;
                }
              }
            ]
          }
        ]),
        "redundantAttribute": "expr24",
        "selector": "[expr24]",
        "itemName": "platform",
        "indexName": "idx",
        "evaluate": function(scope) {
          return scope.availablePlatforms;
        }
      },
      {
        "type": bindingTypes2.EACH,
        "getKey": null,
        "condition": null,
        "template": template2('<label expr29="expr29" class="s-flex-item:grow"> </label><label expr30="expr30" class="s-switch:accent"><input expr31="expr31" type="checkbox"/><div class="s-switch-handler"></div></label>', [
          {
            "redundantAttribute": "expr29",
            "selector": "[expr29]",
            "expressions": [
              {
                "type": expressionTypes2.TEXT,
                "childNodeIndex": 0,
                "evaluate": function(scope) {
                  return [
                    scope.type
                  ].join("");
                }
              },
              {
                "type": expressionTypes2.ATTRIBUTE,
                "name": "for",
                "evaluate": function(scope) {
                  return [
                    "type-",
                    scope.type
                  ].join("");
                }
              }
            ]
          },
          {
            "redundantAttribute": "expr30",
            "selector": "[expr30]",
            "expressions": [
              {
                "type": expressionTypes2.ATTRIBUTE,
                "name": "for",
                "evaluate": function(scope) {
                  return [
                    "type-",
                    scope.type
                  ].join("");
                }
              }
            ]
          },
          {
            "redundantAttribute": "expr31",
            "selector": "[expr31]",
            "expressions": [
              {
                "type": expressionTypes2.ATTRIBUTE,
                "name": "name",
                "evaluate": function(scope) {
                  return [
                    "type-",
                    scope.type
                  ].join("");
                }
              },
              {
                "type": expressionTypes2.ATTRIBUTE,
                "name": "id",
                "evaluate": function(scope) {
                  return [
                    "type-",
                    scope.type
                  ].join("");
                }
              },
              {
                "type": expressionTypes2.EVENT,
                "name": "onchange",
                "evaluate": function(scope) {
                  return () => scope._toggleType(scope.type);
                }
              },
              {
                "type": expressionTypes2.ATTRIBUTE,
                "name": "checked",
                "evaluate": function(scope) {
                  return scope.state.saved.types.indexOf(scope.type) !== -1;
                }
              }
            ]
          }
        ]),
        "redundantAttribute": "expr28",
        "selector": "[expr28]",
        "itemName": "type",
        "indexName": "idx",
        "evaluate": function(scope) {
          return scope.availableTypes;
        }
      },
      {
        "type": bindingTypes2.EACH,
        "getKey": null,
        "condition": null,
        "template": template2('<label expr33="expr33" class="s-flex-item:grow"> </label><label expr34="expr34" class="s-switch:accent"><input expr35="expr35" type="checkbox"/><div class="s-switch-handler"></div></label>', [
          {
            "redundantAttribute": "expr33",
            "selector": "[expr33]",
            "expressions": [
              {
                "type": expressionTypes2.TEXT,
                "childNodeIndex": 0,
                "evaluate": function(scope) {
                  return [
                    scope.status
                  ].join("");
                }
              },
              {
                "type": expressionTypes2.ATTRIBUTE,
                "name": "for",
                "evaluate": function(scope) {
                  return [
                    "status-",
                    scope.status
                  ].join("");
                }
              }
            ]
          },
          {
            "redundantAttribute": "expr34",
            "selector": "[expr34]",
            "expressions": [
              {
                "type": expressionTypes2.ATTRIBUTE,
                "name": "for",
                "evaluate": function(scope) {
                  return [
                    "status-",
                    scope.status
                  ].join("");
                }
              }
            ]
          },
          {
            "redundantAttribute": "expr35",
            "selector": "[expr35]",
            "expressions": [
              {
                "type": expressionTypes2.ATTRIBUTE,
                "name": "name",
                "evaluate": function(scope) {
                  return [
                    "status-",
                    scope.status
                  ].join("");
                }
              },
              {
                "type": expressionTypes2.ATTRIBUTE,
                "name": "id",
                "evaluate": function(scope) {
                  return [
                    "status-",
                    scope.status
                  ].join("");
                }
              },
              {
                "type": expressionTypes2.EVENT,
                "name": "onchange",
                "evaluate": function(scope) {
                  return () => scope._toggleStatus(scope.status);
                }
              },
              {
                "type": expressionTypes2.ATTRIBUTE,
                "name": "checked",
                "evaluate": function(scope) {
                  return scope.state.saved.statuses.indexOf(scope.status) !== -1;
                }
              }
            ]
          }
        ]),
        "redundantAttribute": "expr32",
        "selector": "[expr32]",
        "itemName": "status",
        "indexName": "idx",
        "evaluate": function(scope) {
          return scope.availableStatuses;
        }
      },
      {
        "type": bindingTypes2.EACH,
        "getKey": null,
        "condition": function(scope) {
          return scope.idx <= scope.state.maxItemsToDisplay;
        },
        "template": template2('<div class="s-pd:50"><div class><div class="s-flex"><h4 class="s-font:title s-font:60 s-color:accent s-mb:10 s-flex-item:grow"><a expr37="expr37"> </a></h4><div><div class="s-font:40"><span class="s-font:30">Since <span expr38="expr38" class="s-color:complementary"> </span></span>\n                                    &nbsp;\n                                    <i expr39="expr39"></i>\n                                    &nbsp;\n                                    <span expr40="expr40"> </span></div></div></div><h5 expr41="expr41" class="s-color:complementary s-font:40 s-mb:30"> </h5><p expr42="expr42" class="s-typo:p s-mb:30"> </p></div><div expr43="expr43" class="__code"></div></div>', [
          {
            "redundantAttribute": "expr37",
            "selector": "[expr37]",
            "expressions": [
              {
                "type": expressionTypes2.TEXT,
                "childNodeIndex": 0,
                "evaluate": function(scope) {
                  return [
                    scope.item.name
                  ].join("");
                }
              },
              {
                "type": expressionTypes2.ATTRIBUTE,
                "name": "href",
                "evaluate": function(scope) {
                  return [
                    "/doc/api/",
                    scope._striptags(scope.item.namespace),
                    ".",
                    scope._striptags(scope.item.name)
                  ].join("");
                }
              }
            ]
          },
          {
            "redundantAttribute": "expr38",
            "selector": "[expr38]",
            "expressions": [
              {
                "type": expressionTypes2.TEXT,
                "childNodeIndex": 0,
                "evaluate": function(scope) {
                  return scope.item.since;
                }
              }
            ]
          },
          {
            "type": bindingTypes2.EACH,
            "getKey": null,
            "condition": null,
            "template": template2(null, [
              {
                "expressions": [
                  {
                    "type": expressionTypes2.ATTRIBUTE,
                    "name": "class",
                    "evaluate": function(scope) {
                      return [
                        "s-platform:",
                        scope.platform.name,
                        " s-font:50"
                      ].join("");
                    }
                  }
                ]
              }
            ]),
            "redundantAttribute": "expr39",
            "selector": "[expr39]",
            "itemName": "platform",
            "indexName": null,
            "evaluate": function(scope) {
              return scope.item.platform;
            }
          },
          {
            "redundantAttribute": "expr40",
            "selector": "[expr40]",
            "expressions": [
              {
                "type": expressionTypes2.TEXT,
                "childNodeIndex": 0,
                "evaluate": function(scope) {
                  return scope.item.status;
                }
              },
              {
                "type": expressionTypes2.ATTRIBUTE,
                "name": "class",
                "evaluate": function(scope) {
                  return [
                    "s-badge:pill:",
                    scope.item.status
                  ].join("");
                }
              }
            ]
          },
          {
            "redundantAttribute": "expr41",
            "selector": "[expr41]",
            "expressions": [
              {
                "type": expressionTypes2.TEXT,
                "childNodeIndex": 0,
                "evaluate": function(scope) {
                  return scope.item.namespace;
                }
              }
            ]
          },
          {
            "redundantAttribute": "expr42",
            "selector": "[expr42]",
            "expressions": [
              {
                "type": expressionTypes2.TEXT,
                "childNodeIndex": 0,
                "evaluate": function(scope) {
                  return scope.item.description;
                }
              }
            ]
          },
          {
            "type": bindingTypes2.IF,
            "evaluate": function(scope) {
              return scope.item.example && scope.item.example.length;
            },
            "redundantAttribute": "expr43",
            "selector": "[expr43]",
            "template": template2('<s-code-example expr44="expr44" default-style style="max-width:100%;" class="s-depth:50 s-flex-item:grow:shrink"></s-code-example>', [
              {
                "type": bindingTypes2.TAG,
                "getComponent": getComponent,
                "evaluate": function(scope) {
                  return "s-code-example";
                },
                "slots": [
                  {
                    "id": "default",
                    "html": '<textarea expr45="expr45"> </textarea>',
                    "bindings": [
                      {
                        "redundantAttribute": "expr45",
                        "selector": "[expr45]",
                        "expressions": [
                          {
                            "type": expressionTypes2.TEXT,
                            "childNodeIndex": 0,
                            "evaluate": function(scope) {
                              return [
                                scope.item.example[0].code
                              ].join("");
                            }
                          },
                          {
                            "type": expressionTypes2.ATTRIBUTE,
                            "name": "lang",
                            "evaluate": function(scope) {
                              return scope.item.example[0].language;
                            }
                          }
                        ]
                      }
                    ]
                  }
                ],
                "attributes": [],
                "redundantAttribute": "expr44",
                "selector": "[expr44]"
              }
            ])
          }
        ]),
        "redundantAttribute": "expr36",
        "selector": "[expr36]",
        "itemName": "item",
        "indexName": "idx",
        "evaluate": function(scope) {
          return Object.values(scope.state.filteredItems);
        }
      }
    ]);
  },
  "name": "doc-nav"
};
register("doc-nav", Component);
querySelectorLive("doc-nav:not([s-mounted])", ($elm) => {
  const id2 = $elm.id || "doc-nav-" + uniqid$1();
  $elm.setAttribute("id", id2);
  mount("#" + id2);
});
Component.mount = () => {
  mount("doc-nav");
};
/*!
* hotkeys-js v3.8.5
* A simple micro-library for defining and dispatching keyboard shortcuts. It has no dependencies.
* 
* Copyright (c) 2021 kenny wong <wowohoo@qq.com>
* http://jaywcjlove.github.io/hotkeys
* 
* Licensed under the MIT license.
*/
var isff = typeof navigator !== "undefined" ? navigator.userAgent.toLowerCase().indexOf("firefox") > 0 : false;
function addEvent(object, event, method) {
  if (object.addEventListener) {
    object.addEventListener(event, method, false);
  } else if (object.attachEvent) {
    object.attachEvent("on".concat(event), function() {
      method(window.event);
    });
  }
}
function getMods(modifier, key) {
  var mods = key.slice(0, key.length - 1);
  for (var i2 = 0; i2 < mods.length; i2++) {
    mods[i2] = modifier[mods[i2].toLowerCase()];
  }
  return mods;
}
function getKeys(key) {
  if (typeof key !== "string")
    key = "";
  key = key.replace(/\s/g, "");
  var keys = key.split(",");
  var index = keys.lastIndexOf("");
  for (; index >= 0; ) {
    keys[index - 1] += ",";
    keys.splice(index, 1);
    index = keys.lastIndexOf("");
  }
  return keys;
}
function compareArray(a1, a2) {
  var arr1 = a1.length >= a2.length ? a1 : a2;
  var arr2 = a1.length >= a2.length ? a2 : a1;
  var isIndex = true;
  for (var i2 = 0; i2 < arr1.length; i2++) {
    if (arr2.indexOf(arr1[i2]) === -1)
      isIndex = false;
  }
  return isIndex;
}
var _keyMap = {
  backspace: 8,
  tab: 9,
  clear: 12,
  enter: 13,
  return: 13,
  esc: 27,
  escape: 27,
  space: 32,
  left: 37,
  up: 38,
  right: 39,
  down: 40,
  del: 46,
  delete: 46,
  ins: 45,
  insert: 45,
  home: 36,
  end: 35,
  pageup: 33,
  pagedown: 34,
  capslock: 20,
  num_0: 96,
  num_1: 97,
  num_2: 98,
  num_3: 99,
  num_4: 100,
  num_5: 101,
  num_6: 102,
  num_7: 103,
  num_8: 104,
  num_9: 105,
  num_multiply: 106,
  num_add: 107,
  num_enter: 108,
  num_subtract: 109,
  num_decimal: 110,
  num_divide: 111,
  "\u21EA": 20,
  ",": 188,
  ".": 190,
  "/": 191,
  "`": 192,
  "-": isff ? 173 : 189,
  "=": isff ? 61 : 187,
  ";": isff ? 59 : 186,
  "'": 222,
  "[": 219,
  "]": 221,
  "\\": 220
};
var _modifier = {
  "\u21E7": 16,
  shift: 16,
  "\u2325": 18,
  alt: 18,
  option: 18,
  "\u2303": 17,
  ctrl: 17,
  control: 17,
  "\u2318": 91,
  cmd: 91,
  command: 91
};
var modifierMap = {
  16: "shiftKey",
  18: "altKey",
  17: "ctrlKey",
  91: "metaKey",
  shiftKey: 16,
  ctrlKey: 17,
  altKey: 18,
  metaKey: 91
};
var _mods = {
  16: false,
  18: false,
  17: false,
  91: false
};
var _handlers = {};
for (var k = 1; k < 20; k++) {
  _keyMap["f".concat(k)] = 111 + k;
}
var _downKeys = [];
var _scope = "all";
var elementHasBindEvent = [];
var code = function code2(x2) {
  return _keyMap[x2.toLowerCase()] || _modifier[x2.toLowerCase()] || x2.toUpperCase().charCodeAt(0);
};
function setScope(scope) {
  _scope = scope || "all";
}
function getScope() {
  return _scope || "all";
}
function getPressedKeyCodes() {
  return _downKeys.slice(0);
}
function filter(event) {
  var target = event.target || event.srcElement;
  var tagName = target.tagName;
  var flag = true;
  if (target.isContentEditable || (tagName === "INPUT" || tagName === "TEXTAREA" || tagName === "SELECT") && !target.readOnly) {
    flag = false;
  }
  return flag;
}
function isPressed(keyCode) {
  if (typeof keyCode === "string") {
    keyCode = code(keyCode);
  }
  return _downKeys.indexOf(keyCode) !== -1;
}
function deleteScope(scope, newScope) {
  var handlers;
  var i2;
  if (!scope)
    scope = getScope();
  for (var key in _handlers) {
    if (Object.prototype.hasOwnProperty.call(_handlers, key)) {
      handlers = _handlers[key];
      for (i2 = 0; i2 < handlers.length; ) {
        if (handlers[i2].scope === scope)
          handlers.splice(i2, 1);
        else
          i2++;
      }
    }
  }
  if (getScope() === scope)
    setScope(newScope || "all");
}
function clearModifier(event) {
  var key = event.keyCode || event.which || event.charCode;
  var i2 = _downKeys.indexOf(key);
  if (i2 >= 0) {
    _downKeys.splice(i2, 1);
  }
  if (event.key && event.key.toLowerCase() === "meta") {
    _downKeys.splice(0, _downKeys.length);
  }
  if (key === 93 || key === 224)
    key = 91;
  if (key in _mods) {
    _mods[key] = false;
    for (var k2 in _modifier) {
      if (_modifier[k2] === key)
        hotkeys[k2] = false;
    }
  }
}
function unbind(keysInfo) {
  if (!keysInfo) {
    Object.keys(_handlers).forEach(function(key) {
      return delete _handlers[key];
    });
  } else if (Array.isArray(keysInfo)) {
    keysInfo.forEach(function(info) {
      if (info.key)
        eachUnbind(info);
    });
  } else if (typeof keysInfo === "object") {
    if (keysInfo.key)
      eachUnbind(keysInfo);
  } else if (typeof keysInfo === "string") {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    var scope = args[0], method = args[1];
    if (typeof scope === "function") {
      method = scope;
      scope = "";
    }
    eachUnbind({
      key: keysInfo,
      scope,
      method,
      splitKey: "+"
    });
  }
}
var eachUnbind = function eachUnbind2(_ref) {
  var key = _ref.key, scope = _ref.scope, method = _ref.method, _ref$splitKey = _ref.splitKey, splitKey = _ref$splitKey === void 0 ? "+" : _ref$splitKey;
  var multipleKeys = getKeys(key);
  multipleKeys.forEach(function(originKey) {
    var unbindKeys = originKey.split(splitKey);
    var len = unbindKeys.length;
    var lastKey = unbindKeys[len - 1];
    var keyCode = lastKey === "*" ? "*" : code(lastKey);
    if (!_handlers[keyCode])
      return;
    if (!scope)
      scope = getScope();
    var mods = len > 1 ? getMods(_modifier, unbindKeys) : [];
    _handlers[keyCode] = _handlers[keyCode].map(function(record) {
      var isMatchingMethod = method ? record.method === method : true;
      if (isMatchingMethod && record.scope === scope && compareArray(record.mods, mods)) {
        return {};
      }
      return record;
    });
  });
};
function eventHandler(event, handler, scope) {
  var modifiersMatch;
  if (handler.scope === scope || handler.scope === "all") {
    modifiersMatch = handler.mods.length > 0;
    for (var y2 in _mods) {
      if (Object.prototype.hasOwnProperty.call(_mods, y2)) {
        if (!_mods[y2] && handler.mods.indexOf(+y2) > -1 || _mods[y2] && handler.mods.indexOf(+y2) === -1) {
          modifiersMatch = false;
        }
      }
    }
    if (handler.mods.length === 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91] || modifiersMatch || handler.shortcut === "*") {
      if (handler.method(event, handler) === false) {
        if (event.preventDefault)
          event.preventDefault();
        else
          event.returnValue = false;
        if (event.stopPropagation)
          event.stopPropagation();
        if (event.cancelBubble)
          event.cancelBubble = true;
      }
    }
  }
}
function dispatch(event) {
  var asterisk = _handlers["*"];
  var key = event.keyCode || event.which || event.charCode;
  if (!hotkeys.filter.call(this, event))
    return;
  if (key === 93 || key === 224)
    key = 91;
  if (_downKeys.indexOf(key) === -1 && key !== 229)
    _downKeys.push(key);
  ["ctrlKey", "altKey", "shiftKey", "metaKey"].forEach(function(keyName) {
    var keyNum = modifierMap[keyName];
    if (event[keyName] && _downKeys.indexOf(keyNum) === -1) {
      _downKeys.push(keyNum);
    } else if (!event[keyName] && _downKeys.indexOf(keyNum) > -1) {
      _downKeys.splice(_downKeys.indexOf(keyNum), 1);
    } else if (keyName === "metaKey" && event[keyName] && _downKeys.length === 3) {
      if (!(event.ctrlKey || event.shiftKey || event.altKey)) {
        _downKeys = _downKeys.slice(_downKeys.indexOf(keyNum));
      }
    }
  });
  if (key in _mods) {
    _mods[key] = true;
    for (var k2 in _modifier) {
      if (_modifier[k2] === key)
        hotkeys[k2] = true;
    }
    if (!asterisk)
      return;
  }
  for (var e2 in _mods) {
    if (Object.prototype.hasOwnProperty.call(_mods, e2)) {
      _mods[e2] = event[modifierMap[e2]];
    }
  }
  if (event.getModifierState && !(event.altKey && !event.ctrlKey) && event.getModifierState("AltGraph")) {
    if (_downKeys.indexOf(17) === -1) {
      _downKeys.push(17);
    }
    if (_downKeys.indexOf(18) === -1) {
      _downKeys.push(18);
    }
    _mods[17] = true;
    _mods[18] = true;
  }
  var scope = getScope();
  if (asterisk) {
    for (var i2 = 0; i2 < asterisk.length; i2++) {
      if (asterisk[i2].scope === scope && (event.type === "keydown" && asterisk[i2].keydown || event.type === "keyup" && asterisk[i2].keyup)) {
        eventHandler(event, asterisk[i2], scope);
      }
    }
  }
  if (!(key in _handlers))
    return;
  for (var _i = 0; _i < _handlers[key].length; _i++) {
    if (event.type === "keydown" && _handlers[key][_i].keydown || event.type === "keyup" && _handlers[key][_i].keyup) {
      if (_handlers[key][_i].key) {
        var record = _handlers[key][_i];
        var splitKey = record.splitKey;
        var keyShortcut = record.key.split(splitKey);
        var _downKeysCurrent = [];
        for (var a2 = 0; a2 < keyShortcut.length; a2++) {
          _downKeysCurrent.push(code(keyShortcut[a2]));
        }
        if (_downKeysCurrent.sort().join("") === _downKeys.sort().join("")) {
          eventHandler(event, record, scope);
        }
      }
    }
  }
}
function isElementBind(element) {
  return elementHasBindEvent.indexOf(element) > -1;
}
function hotkeys(key, option, method) {
  _downKeys = [];
  var keys = getKeys(key);
  var mods = [];
  var scope = "all";
  var element = document;
  var i2 = 0;
  var keyup = false;
  var keydown = true;
  var splitKey = "+";
  if (method === void 0 && typeof option === "function") {
    method = option;
  }
  if (Object.prototype.toString.call(option) === "[object Object]") {
    if (option.scope)
      scope = option.scope;
    if (option.element)
      element = option.element;
    if (option.keyup)
      keyup = option.keyup;
    if (option.keydown !== void 0)
      keydown = option.keydown;
    if (typeof option.splitKey === "string")
      splitKey = option.splitKey;
  }
  if (typeof option === "string")
    scope = option;
  for (; i2 < keys.length; i2++) {
    key = keys[i2].split(splitKey);
    mods = [];
    if (key.length > 1)
      mods = getMods(_modifier, key);
    key = key[key.length - 1];
    key = key === "*" ? "*" : code(key);
    if (!(key in _handlers))
      _handlers[key] = [];
    _handlers[key].push({
      keyup,
      keydown,
      scope,
      mods,
      shortcut: keys[i2],
      method,
      key: keys[i2],
      splitKey
    });
  }
  if (typeof element !== "undefined" && !isElementBind(element) && window) {
    elementHasBindEvent.push(element);
    addEvent(element, "keydown", function(e2) {
      dispatch(e2);
    });
    addEvent(window, "focus", function() {
      _downKeys = [];
    });
    addEvent(element, "keyup", function(e2) {
      dispatch(e2);
      clearModifier(e2);
    });
  }
}
var _api = {
  setScope,
  getScope,
  deleteScope,
  getPressedKeyCodes,
  isPressed,
  filter,
  unbind
};
for (var a in _api) {
  if (Object.prototype.hasOwnProperty.call(_api, a)) {
    hotkeys[a] = _api[a];
  }
}
if (typeof window !== "undefined") {
  var _hotkeys = window.hotkeys;
  hotkeys.noConflict = function(deep) {
    if (deep && window.hotkeys === hotkeys) {
      window.hotkeys = _hotkeys;
    }
    return hotkeys;
  };
  window.hotkeys = hotkeys;
}
var hotkeys_common = hotkeys;
hotkeys_common.filter = function() {
  return true;
};
function hotkey(hotkey2, settings = {}) {
  return new SPromise(({resolve: resolve2, reject, emit, cancel}) => {
    settings = Object.assign({element: null, keyup: false, keydown: true, once: false, splitKey: "+"}, settings);
    hotkeys_common(hotkey2, settings, (e2, h2) => {
      emit("press", e2);
      if (settings.once)
        cancel();
    });
  }, {
    id: "hotkey"
  }).on("finally", () => {
    hotkeys_common.unbind(hotkey2);
  });
}
hotkey("cmd+p").on("press", (e2) => {
  e2.cancelBubble = true;
  e2.preventDefault();
  e2.stopImmediatePropagation();
  document.querySelector("#search-input > input").focus();
});
var requiresPort = function required2(port, protocol) {
  protocol = protocol.split(":")[0];
  port = +port;
  if (!port)
    return false;
  switch (protocol) {
    case "http":
    case "ws":
      return port !== 80;
    case "https":
    case "wss":
      return port !== 443;
    case "ftp":
      return port !== 21;
    case "gopher":
      return port !== 70;
    case "file":
      return false;
  }
  return port !== 0;
};
var querystringify$1 = {};
var has = Object.prototype.hasOwnProperty, undef;
function decode(input) {
  try {
    return decodeURIComponent(input.replace(/\+/g, " "));
  } catch (e2) {
    return null;
  }
}
function encode(input) {
  try {
    return encodeURIComponent(input);
  } catch (e2) {
    return null;
  }
}
function querystring(query) {
  var parser2 = /([^=?#&]+)=?([^&]*)/g, result = {}, part;
  while (part = parser2.exec(query)) {
    var key = decode(part[1]), value = decode(part[2]);
    if (key === null || value === null || key in result)
      continue;
    result[key] = value;
  }
  return result;
}
function querystringify(obj, prefix) {
  prefix = prefix || "";
  var pairs = [], value, key;
  if (typeof prefix !== "string")
    prefix = "?";
  for (key in obj) {
    if (has.call(obj, key)) {
      value = obj[key];
      if (!value && (value === null || value === undef || isNaN(value))) {
        value = "";
      }
      key = encode(key);
      value = encode(value);
      if (key === null || value === null)
        continue;
      pairs.push(key + "=" + value);
    }
  }
  return pairs.length ? prefix + pairs.join("&") : "";
}
querystringify$1.stringify = querystringify;
querystringify$1.parse = querystring;
var required = requiresPort, qs = querystringify$1, slashes = /^[A-Za-z][A-Za-z0-9+-.]*:[\\/]+/, protocolre = /^([a-z][a-z0-9.+-]*:)?([\\/]{1,})?([\S\s]*)/i, whitespace = "[\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF]", left = new RegExp("^" + whitespace + "+");
function trimLeft(str) {
  return (str ? str : "").toString().replace(left, "");
}
var rules = [
  ["#", "hash"],
  ["?", "query"],
  function sanitize(address) {
    return address.replace("\\", "/");
  },
  ["/", "pathname"],
  ["@", "auth", 1],
  [NaN, "host", void 0, 1, 1],
  [/:(\d+)$/, "port", void 0, 1],
  [NaN, "hostname", void 0, 1, 1]
];
var ignore = {hash: 1, query: 1};
function lolcation(loc) {
  var globalVar;
  if (typeof window !== "undefined")
    globalVar = window;
  else if (typeof commonjsGlobal !== "undefined")
    globalVar = commonjsGlobal;
  else if (typeof self !== "undefined")
    globalVar = self;
  else
    globalVar = {};
  var location = globalVar.location || {};
  loc = loc || location;
  var finaldestination = {}, type = typeof loc, key;
  if (loc.protocol === "blob:") {
    finaldestination = new Url(unescape(loc.pathname), {});
  } else if (type === "string") {
    finaldestination = new Url(loc, {});
    for (key in ignore)
      delete finaldestination[key];
  } else if (type === "object") {
    for (key in loc) {
      if (key in ignore)
        continue;
      finaldestination[key] = loc[key];
    }
    if (finaldestination.slashes === void 0) {
      finaldestination.slashes = slashes.test(loc.href);
    }
  }
  return finaldestination;
}
function extractProtocol(address) {
  address = trimLeft(address);
  var match2 = protocolre.exec(address), protocol = match2[1] ? match2[1].toLowerCase() : "", slashes2 = !!(match2[2] && match2[2].length >= 2), rest = match2[2] && match2[2].length === 1 ? "/" + match2[3] : match2[3];
  return {
    protocol,
    slashes: slashes2,
    rest
  };
}
function resolve(relative, base2) {
  if (relative === "")
    return base2;
  var path2 = (base2 || "/").split("/").slice(0, -1).concat(relative.split("/")), i2 = path2.length, last2 = path2[i2 - 1], unshift = false, up = 0;
  while (i2--) {
    if (path2[i2] === ".") {
      path2.splice(i2, 1);
    } else if (path2[i2] === "..") {
      path2.splice(i2, 1);
      up++;
    } else if (up) {
      if (i2 === 0)
        unshift = true;
      path2.splice(i2, 1);
      up--;
    }
  }
  if (unshift)
    path2.unshift("");
  if (last2 === "." || last2 === "..")
    path2.push("");
  return path2.join("/");
}
function Url(address, location, parser2) {
  address = trimLeft(address);
  if (!(this instanceof Url)) {
    return new Url(address, location, parser2);
  }
  var relative, extracted, parse5, instruction, index, key, instructions = rules.slice(), type = typeof location, url = this, i2 = 0;
  if (type !== "object" && type !== "string") {
    parser2 = location;
    location = null;
  }
  if (parser2 && typeof parser2 !== "function")
    parser2 = qs.parse;
  location = lolcation(location);
  extracted = extractProtocol(address || "");
  relative = !extracted.protocol && !extracted.slashes;
  url.slashes = extracted.slashes || relative && location.slashes;
  url.protocol = extracted.protocol || location.protocol || "";
  address = extracted.rest;
  if (!extracted.slashes)
    instructions[3] = [/(.*)/, "pathname"];
  for (; i2 < instructions.length; i2++) {
    instruction = instructions[i2];
    if (typeof instruction === "function") {
      address = instruction(address);
      continue;
    }
    parse5 = instruction[0];
    key = instruction[1];
    if (parse5 !== parse5) {
      url[key] = address;
    } else if (typeof parse5 === "string") {
      if (~(index = address.indexOf(parse5))) {
        if (typeof instruction[2] === "number") {
          url[key] = address.slice(0, index);
          address = address.slice(index + instruction[2]);
        } else {
          url[key] = address.slice(index);
          address = address.slice(0, index);
        }
      }
    } else if (index = parse5.exec(address)) {
      url[key] = index[1];
      address = address.slice(0, index.index);
    }
    url[key] = url[key] || (relative && instruction[3] ? location[key] || "" : "");
    if (instruction[4])
      url[key] = url[key].toLowerCase();
  }
  if (parser2)
    url.query = parser2(url.query);
  if (relative && location.slashes && url.pathname.charAt(0) !== "/" && (url.pathname !== "" || location.pathname !== "")) {
    url.pathname = resolve(url.pathname, location.pathname);
  }
  if (url.pathname.charAt(0) !== "/" && url.hostname) {
    url.pathname = "/" + url.pathname;
  }
  if (!required(url.port, url.protocol)) {
    url.host = url.hostname;
    url.port = "";
  }
  url.username = url.password = "";
  if (url.auth) {
    instruction = url.auth.split(":");
    url.username = instruction[0] || "";
    url.password = instruction[1] || "";
  }
  url.origin = url.protocol && url.host && url.protocol !== "file:" ? url.protocol + "//" + url.host : "null";
  url.href = url.toString();
}
function set(part, value, fn2) {
  var url = this;
  switch (part) {
    case "query":
      if (typeof value === "string" && value.length) {
        value = (fn2 || qs.parse)(value);
      }
      url[part] = value;
      break;
    case "port":
      url[part] = value;
      if (!required(value, url.protocol)) {
        url.host = url.hostname;
        url[part] = "";
      } else if (value) {
        url.host = url.hostname + ":" + value;
      }
      break;
    case "hostname":
      url[part] = value;
      if (url.port)
        value += ":" + url.port;
      url.host = value;
      break;
    case "host":
      url[part] = value;
      if (/:\d+$/.test(value)) {
        value = value.split(":");
        url.port = value.pop();
        url.hostname = value.join(":");
      } else {
        url.hostname = value;
        url.port = "";
      }
      break;
    case "protocol":
      url.protocol = value.toLowerCase();
      url.slashes = !fn2;
      break;
    case "pathname":
    case "hash":
      if (value) {
        var char = part === "pathname" ? "/" : "#";
        url[part] = value.charAt(0) !== char ? char + value : value;
      } else {
        url[part] = value;
      }
      break;
    default:
      url[part] = value;
  }
  for (var i2 = 0; i2 < rules.length; i2++) {
    var ins = rules[i2];
    if (ins[4])
      url[ins[1]] = url[ins[1]].toLowerCase();
  }
  url.origin = url.protocol && url.host && url.protocol !== "file:" ? url.protocol + "//" + url.host : "null";
  url.href = url.toString();
  return url;
}
function toString(stringify2) {
  if (!stringify2 || typeof stringify2 !== "function")
    stringify2 = qs.stringify;
  var query, url = this, protocol = url.protocol;
  if (protocol && protocol.charAt(protocol.length - 1) !== ":")
    protocol += ":";
  var result = protocol + (url.slashes ? "//" : "");
  if (url.username) {
    result += url.username;
    if (url.password)
      result += ":" + url.password;
    result += "@";
  }
  result += url.host + url.pathname;
  query = typeof url.query === "object" ? stringify2(url.query) : url.query;
  if (query)
    result += query.charAt(0) !== "?" ? "?" + query : query;
  if (url.hash)
    result += url.hash;
  return result;
}
Url.prototype = {set, toString};
Url.extractProtocol = extractProtocol;
Url.location = lolcation;
Url.trimLeft = trimLeft;
Url.qs = qs;
var urlParse = Url;
function ease(t) {
  return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
}
var requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;
let isUserScrolling = false;
let userScrollingTimeout;
let isScrollingHappening = false;
document.addEventListener("mousewheel", (e2) => {
  if (!isScrollingHappening)
    return;
  isUserScrolling = true;
  clearTimeout(userScrollingTimeout);
  userScrollingTimeout = setTimeout(() => {
    isUserScrolling = false;
  }, 200);
});
function scrollTo(target, settings = {}) {
  return new Promise((resolve2, reject) => {
    settings = Object.assign({duration: 500, easing: ease, offset: 0, align: "top", onFinish: null}, settings);
    const docElem = document.documentElement;
    const windowHeight = window.innerHeight;
    const maxScroll = docElem.scrollHeight - windowHeight;
    const currentY = window.pageYOffset;
    isScrollingHappening = true;
    let targetY = currentY;
    const elementBounds = isNaN(target) ? target.getBoundingClientRect() : 0;
    if (settings.align === "center") {
      targetY += elementBounds.top + elementBounds.height / 2;
      targetY -= windowHeight / 2;
      targetY -= settings.offset;
    } else if (settings.align === "bottom") {
      targetY += elementBounds.bottom;
      targetY -= windowHeight;
      targetY += settings.offset;
    } else {
      targetY += elementBounds.top;
      targetY -= settings.offset;
    }
    targetY = Math.max(Math.min(maxScroll, targetY), 0);
    const deltaY = targetY - currentY;
    const obj = {
      targetY,
      deltaY,
      duration: settings.duration,
      easing: settings.easing,
      onFinish() {
        settings.onFinish && settings.onFinish();
        resolve2();
      },
      startTime: Date.now(),
      lastY: currentY,
      step: scrollTo.step
    };
    requestAnimationFrame(obj.step.bind(obj));
  });
}
scrollTo.step = function() {
  if (this.lastY !== window.pageYOffset && this.onFinish) {
    isScrollingHappening = false;
    this.onFinish();
    return;
  }
  const t = Math.min((Date.now() - this.startTime) / this.duration, 1);
  const y2 = this.targetY - (1 - this.easing(t)) * this.deltaY;
  window.scrollTo(window.scrollX, y2);
  if (t !== 1 && !isUserScrolling) {
    this.lastY = window.pageYOffset;
    requestAnimationFrame(this.step.bind(this));
  } else {
    isScrollingHappening = false;
    if (this.onFinish)
      this.onFinish();
  }
};
function smoothScrollOnAnchorLinks(settings = {}) {
  settings = deepMerge$1({
    scroll: {},
    checkPathNames: true
  }, settings);
  querySelectorLive('a:not([is])[href*="#"]', ($link) => {
    $link.addEventListener("click", (e2) => {
      const linkUrl = urlParse($link.getAttribute("href"));
      const currentUrl = urlParse();
      if (!linkUrl.hash || linkUrl.hash === "#")
        return;
      if (settings.checkPathNames && currentUrl.pathname !== linkUrl.pathname)
        return;
      const $target = document.querySelector(linkUrl.hash);
      if (!$target)
        return;
      e2.preventDefault();
      history.pushState({}, null, linkUrl.hash);
      scrollTo($target, settings.scroll);
    });
  });
}
function scrollToLocationHash(settings = {}) {
  settings = deepMerge$1({
    scroll: {}
  }, settings);
  const hash = document.location.hash;
  if (!hash)
    return;
  const targetElm = document.querySelector(hash);
  if (!targetElm)
    return;
  if ("scrollRestoration" in history) {
    history.scrollRestoration = "manual";
  }
  return scrollTo(targetElm, settings.scroll);
}
function smoothScrollOnPageLoad(settings = {}) {
  settings = deepMerge$1({
    scroll: {}
  }, settings);
  scrollToLocationHash(settings);
}
function smoothScrollOnHashChange(settings = {}) {
  settings = deepMerge$1({
    scroll: {}
  }, settings);
  window.addEventListener("hashchange", (e2) => {
    scrollToLocationHash(settings);
  });
}
function smoothScroll(settings = {}) {
  settings = deepMerge$1({
    scroll: {}
  }, settings);
  smoothScrollOnPageLoad(settings);
  smoothScrollOnAnchorLinks(settings);
  smoothScrollOnHashChange(settings);
}
smoothScroll({
  scroll: {
    offset: 188
  }
});
document.addEventListener("scroll", (e2) => {
  if (document.body.scrollTop >= 10) {
    document.body.classList.add("scrolled");
  } else {
    document.body.classList.remove("scrolled");
  }
});
SComponentUtils.setDefaultProps("s-code-example", {
  toolbarPosition: "nav",
  defaultStyle: true,
  defaultStyleClasses: {
    main: "s-tabs"
  }
});
expandPleasantCssClassnamesLive();

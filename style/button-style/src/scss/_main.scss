@use '@coffeekraken/sugar/index' as sugar;

%s-button-bare {
  display: inline-block;
  display: inline-flex;
  align-items: center;
  border-style: solid;
  border-width: 1px;
  border-color: rgba(0, 0, 0, 0);
  cursor: pointer;
  outline-width: 0;
  -webkit-appearance: none;
  line-height: 0;
  text-decoration: none;
  font-size: 1em;
  user-select: none;

  &:not(button):not(input) {
    line-height: 0.9;
  }
  // > * {
  // 	vertical-align: middle;
  // }
}
button {
  line-height: 1;
}

/**
 * @name      button
 * @namespace       button-webcomponent
 * @type      Mixin
 *
 * Apply the button css
 *
 * @param 		{Number} 		[$modifiers=null] 			The modifiers that represent the button you want. Available : {color} outline link
 * @param 		{Integer}		[$state=null] 				The state of the button you want like. Available : disabled
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
@mixin button($modifiers: null, $state: null) {
  @include button-bare($modifiers, $state);
  @include button-style($modifiers, $state);
}

/**
 * @name      button-bare
 * @namespace       button-webcomponent
 * @type        Mixin
 *
 * Apply the button bare css
 *
 * @param 		{Number} 		[$modifiers=null] 			The modifiers that represent the button you want. Available : {color} outline link
 * @param 		{Integer}		[$state=null] 				The state of the button you want like. Available : disabled
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
@mixin button-bare($modifiers: null, $state: null) {
  @extend %s-button-bare;
  border-radius: sugar.lnf(border-radius);
  padding: sugar.lnf(padding-horizontal) sugar.lnf(padding-vertical);
  height: 1em + sugar.lnf(padding-horizontal) * 2;

  // if is a button, set the line height
  $splt: sugar.str-split(#{&}, ' ');
  $sel: sugar.list-last-nth($splt);
  @if str-index($sel, 'button') == 1 {
    line-height: 1 !important;
  }

  @if index($modifiers, 'block') {
    display: block;
    display: flex;
    width: 100%;
  }
}

/**
 * @name      button-style
 * @namespace       button-webcomponent
 * @type        Mixin
 *
 * Apply the button style css
 *
 * @param 		{Number} 		[$modifiers=null] 			The modifiers that represent the button you want. Available : {color} outline link
 * @param 		{Integer}		[$state=null] 				The state of the button you want like. Available : disabled
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com>
 */
@mixin button-style($modifiers: null, $state: null) {
  $color: sugar.color-modifier($modifiers, 'default');
  @if index($modifiers, 'outline') {
    color: sugar.color($color);
    background-color: transparent;
    border-color: sugar.color($color);

    &:active,
    &:hover,
    &.active,
    :checked + & {
      &:not(:disabled) {
        background-color: sugar.color($color);
        border-color: sugar.color($color);
        @if lightness(sugar.color($color)) > 70 {
          color: sugar.color($color, -darken 30%);
        } @else {
          color: white;
        }
      }
    }
  } @else if index($modifiers, 'link') {
    background-color: transparent !important;
    color: sugar.color($color) !important;
    border-color: rgba(0, 0, 0, 0) !important;
    position: relative;

    &:after {
      content: '';
      position: absolute;
      display: block;
      bottom: sugar.lnf(padding-horizontal) * 0.4;
      left: 50%;
      height: 0.2em;
      width: 0;
      @include sugar.translate(-50%);
      @include sugar.transition(fast);
      background: sugar.color($color);
    }

    &[active],
    &.active,
    &:active,
    &:hover {
      &:not(:disabled) {
        &:after {
          width: unquote('calc(100% - #{sugar.lnf(padding-vertical) * 2})');
        }
      }
    }
  } @else {
    background-color: sugar.color($color);
    border-color: sugar.color($color);
    @if lightness(sugar.color($color)) > 70 {
      color: sugar.color($color, -darken 30%);
    } @else {
      color: white;
    }
    &[active],
    &.active,
    &:active,
    &:hover {
      &:not(:disabled) {
        background-color: sugar.color($color, -darken 15%);
        border-color: sugar.color($color, -darken 15%);
      }
    }
  }
  @if index($state, 'disabled') {
    opacity: sugar.lnf(disabled-opacity);
    cursor: not-allowed !important;
    pointer-events: none;
  }
}

{"version":3,"sources":["SComponent.js"],"names":["__blessed","require","__deepMerge","__color","__hotkey","__tkill","__isChildProcess","__activeScreen","module","exports","settings","screen","smartCSR","cursor","artificial","shape","bg","toString","ch","blink","container","height","top","left","right","bottom","padding","style","_screen","global","_isDisplayed","on","setTimeout","update","_settings","SComponent","_renderInterval","setRenderInterval","box","append","once","_destroyed","detach","appendToScreen","parent","interval","clearInterval","setInterval","isDisplayed","render","to","isDestroyed"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,SAAD,CAAzB;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,qBAAD,CAA3B;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,gBAAD,CAAvB;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,oBAAD,CAAxB;;AACA,MAAMI,OAAO,GAAGJ,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAMK,gBAAgB,GAAGL,OAAO,CAAC,oBAAD,CAAhC;;AAEA,IAAIM,cAAc,GAAG,IAArB;AAEA;;;;;;;;;;;;;;;;;;;AAoBA;AACA;AACA;AACA;AACA;AACA;;AACAC,MAAM,CAACC,OAAP;AAAA;;AAAA;;AACE;;;;;;;;;;AAWA;;;;;;;;;;;;AAaA;;;;;;;;;AASA,sBAAYC,QAAZ,EAA2B;AAAA;;AAAA,QAAfA,QAAe;AAAfA,MAAAA,QAAe,GAAJ,EAAI;AAAA;;AAAA;;AACzB;AACA,QAAI,CAACH,cAAD,IAAmBG,QAAQ,CAACC,MAAT,KAAoB,KAA3C,EAAkD;AAChDJ,MAAAA,cAAc,GAAGP,SAAS,CAACW,MAAV,CAAiB;AAChCC,QAAAA,QAAQ,EAAE,IADsB;AAEhCC,QAAAA,MAAM,EAAE;AACNC,UAAAA,UAAU,EAAE,IADN;AAENC,UAAAA,KAAK,EAAE;AACLC,YAAAA,EAAE,EAAEb,OAAO,CAAC,kBAAD,CAAP,CAA4Bc,QAA5B,EADC;AAELC,YAAAA,EAAE,EAAE,GAFC,CAGL;;AAHK,WAFD;AAONC,UAAAA,KAAK,EAAE;AAPD,SAFwB;AAWhCC,QAAAA,SAAS,EAAE;AACT;AACAC,UAAAA,MAAM,EAAE,MAFC;AAGTC,UAAAA,GAAG,EAAE,CAHI;AAITC,UAAAA,IAAI,EAAE,CAJG;AAKTC,UAAAA,KAAK,EAAE,CALE;AAMTC,UAAAA,MAAM,EAAE,CANC;AAOTC,UAAAA,OAAO,EAAE;AACPJ,YAAAA,GAAG,EAAE,CADE;AAEPC,YAAAA,IAAI,EAAE,CAFC;AAGPC,YAAAA,KAAK,EAAE,CAHA;AAIPC,YAAAA,MAAM,EAAE;AAJD,WAPA;AAaTE,UAAAA,KAAK,EAAE;AAbE;AAXqB,OAAjB,CAAjB;AA2BD,KA9BwB,CAgCzB;;;AACAjB,IAAAA,QAAQ,GAAGR,WAAW,CAAC,EAAD,EAAKQ,QAAL,CAAtB,CAjCyB,CAkCzB;;AACA,8BAAMA,QAAN;;AAnCyB,gEAxBf,EAwBe;;AAqCzB,UAAKkB,OAAL,GAAerB,cAAf;AACAsB,IAAAA,MAAM,CAAClB,MAAP,GAAgBJ,cAAhB,CAtCyB,CAwCzB;;AACA,UAAKuB,YAAL,GAAoB,KAApB;;AACA,UAAKC,EAAL,CAAQ,QAAR,EAAkB,MAAM;AACtB,YAAKD,YAAL,GAAoB,IAApB;AACAE,MAAAA,UAAU,CAAC,MAAM;AACf,cAAKC,MAAL;AACD,OAFS,EAEP,IAFO,CAAV;AAGD,KALD;;AAMA,UAAKF,EAAL,CAAQ,QAAR,EAAkB,MAAM;AACtB,YAAKD,YAAL,GAAoB,KAApB;AACD,KAFD,EAhDyB,CAoDzB;;;AACA,UAAKI,SAAL,GAAiBxB,QAAjB,CArDyB,CAuDzB;;AACA,QAAI,CAACyB,UAAU,CAACC,eAAhB,EAAiC;AAC/B,YAAKC,iBAAL,CAAuB,GAAvB;AACD;;AAED,QAAIjB,SAAJ;;AACA,QAAIV,QAAQ,CAACU,SAAb,EAAwB;AACtBA,MAAAA,SAAS,GAAGpB,SAAS,CAACsC,GAAV,CAAc5B,QAAQ,CAACU,SAAvB,CAAZ;AACAb,MAAAA,cAAc,CAACa,SAAf,GAA2BA,SAA3B;;AACAb,MAAAA,cAAc,CAACgC,MAAf,CAAsBnB,SAAtB;AACD;;AAEDhB,IAAAA,QAAQ,CAAC,QAAD,EAAW;AACjBoC,MAAAA,IAAI,EAAE;AADW,KAAX,CAAR,CAEGT,EAFH,CAEM,OAFN,EAEe,YAAY;AACzB,YAAKU,UAAL,GAAkB,IAAlB;;AACA,YAAKC,MAAL;AACD,KALD;;AAOA,QAAI,MAAKR,SAAL,CAAeS,cAAnB,EAAmC;AACjC,OAACpC,cAAc,CAACa,SAAf,IAA4Bb,cAA7B,EAA6CgC,MAA7C;AACD;;AAED,QAAI,CAAC,MAAKL,SAAL,CAAeS,cAApB,EAAoC;AAClC,UAAI,MAAKC,MAAT,EAAiB;AACf,cAAKX,MAAL;AACD,OAFD,MAEO;AACL,cAAKF,EAAL,CAAQ,QAAR,EAAkB,MAAM;AACtBC,UAAAA,UAAU,CAAC,MAAM;AACf,kBAAKC,MAAL;AACD,WAFS,CAAV;AAGD,SAJD;AAKD;AACF;;AAxFwB;AAyF1B;AAED;;;;;;;;;;;;;;AA7HF;AAAA;AAAA,sCAyIoBY,QAzIpB,EAyI8B;AAC1BC,MAAAA,aAAa,CAACX,UAAU,CAACC,eAAZ,CAAb;AACAD,MAAAA,UAAU,CAACC,eAAX,GAA6BW,WAAW,CAAC,MAAM;AAC7C,YAAI,CAAC,KAAKC,WAAL,EAAL,EAAyB;AACzB,SAACnB,MAAM,CAAClB,MAAP,IAAiB,KAAKA,MAAvB,EAA+BsC,MAA/B;AACD,OAHuC,EAGrCJ,QAHqC,CAAxC;AAID;AAED;;;;;;;;;AAjJF;AAAA;AAAA,2BAyJSK,EAzJT,EAyJoB;AAAA,UAAXA,EAAW;AAAXA,QAAAA,EAAW,GAAN,IAAM;AAAA;;AAChB,UAAI5C,gBAAgB,EAApB,EAAwB;;AACxB,UAAI4C,EAAJ,EAAQ;AACNA,QAAAA,EAAE,CAACX,MAAH,CAAU,IAAV;AACA;AACD;;AACD,OAACV,MAAM,CAAClB,MAAP,CAAcS,SAAd,IAA2BS,MAAM,CAAClB,MAAnC,EAA2C4B,MAA3C,CAAkD,IAAlD;AACD;AAED;;;;;;;;;AAlKF;AAAA;AAAA,6BA0KW;AACP,UAAI,KAAKY,WAAL,EAAJ,EAAwB;AACxB,UAAI,KAAKvB,OAAT,EAAkB,KAAKA,OAAL,CAAaqB,MAAb;AACnB;AAED;;;;;;;;;;;;AA/KF;AAAA;AAAA,kCA0LgB;AACZ,aAAO,KAAKnB,YAAZ;AACD;AAED;;;;;;;;;;AA9LF;AAAA;AAAA,kCAuMgB;AACZ,aAAO,KAAKW,UAAL,KAAoB,IAA3B;AACD;AAzMH;;AAAA;AAAA,EAA0CzC,SAAS,CAACsC,GAApD,8CAuB2B,IAvB3B","sourcesContent":["const __blessed = require('blessed');\nconst __deepMerge = require('../object/deepMerge');\nconst __color = require('../color/color');\nconst __hotkey = require('../keyboard/hotkey');\nconst __tkill = require('tree-kill');\nconst __isChildProcess = require('../is/childProcess');\n\nlet __activeScreen = null;\n\n/**\n * @name                  SComponent\n * @namespace           node.blessed\n * @type                  Class\n *\n * This class is the base one for all the sugar blessed components like input, panel, etc...\n *\n * @param        {Object}         [settings = {}]         A settings object to configure your list. Here's the available settings:\n *\n * @example       js\n * const SComponent = require('@coffeekraken/sugar/node/blessed/SComponent');\n * class MyCoolComponent extends SComponent {\n *    constructor(settings = {}) {\n *      super(settings);\n *    }\n * }\n *\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\n\n// __hotkey('ctrl+c', {\n//   once: true\n// }).on('press', () => {\n//   if (!global.screen) return;\n//   global.screen.destroy();\n// });\nmodule.exports = class SComponent extends __blessed.box {\n  /**\n   * @name                  _settings\n   * @type                  Object\n   * @private\n   *\n   * Store the component settings\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _settings = {};\n\n  /**\n   * @name                  _renderInterval\n   * @type                  Function\n   * @private\n   * @static\n   *\n   * Store the setInterval that render the screen\n   *\n   * @since         2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  static _renderInterval = null;\n\n  /**\n   * @name                  constructor\n   * @type                  Function\n   * @constructor\n   *\n   * Constructor\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(settings = {}) {\n    // check if need to create a screen\n    if (!__activeScreen && settings.screen !== false) {\n      __activeScreen = __blessed.screen({\n        smartCSR: true,\n        cursor: {\n          artificial: true,\n          shape: {\n            bg: __color('terminal.primary').toString(),\n            ch: '|'\n            // ch: 'â–ˆ'\n          },\n          blink: true\n        },\n        container: {\n          // width: '100%',\n          height: '100%',\n          top: 1,\n          left: 2,\n          right: 2,\n          bottom: 1,\n          padding: {\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0\n          },\n          style: {}\n        }\n      });\n    }\n\n    // store the settings\n    settings = __deepMerge({}, settings);\n    // extends parent\n    super(settings);\n\n    this._screen = __activeScreen;\n    global.screen = __activeScreen;\n\n    // keep track of the component status\n    this._isDisplayed = false;\n    this.on('attach', () => {\n      this._isDisplayed = true;\n      setTimeout(() => {\n        this.update();\n      }, 1000);\n    });\n    this.on('detach', () => {\n      this._isDisplayed = false;\n    });\n\n    // save the settings\n    this._settings = settings;\n\n    // set render interval if not set already\n    if (!SComponent._renderInterval) {\n      this.setRenderInterval(100);\n    }\n\n    let container;\n    if (settings.container) {\n      container = __blessed.box(settings.container);\n      __activeScreen.container = container;\n      __activeScreen.append(container);\n    }\n\n    __hotkey('ctrl+c', {\n      once: true\n    }).on('press', async () => {\n      this._destroyed = true;\n      this.detach();\n    });\n\n    if (this._settings.appendToScreen) {\n      (__activeScreen.container || __activeScreen).append(this);\n    }\n\n    if (!this._settings.appendToScreen) {\n      if (this.parent) {\n        this.update();\n      } else {\n        this.on('attach', () => {\n          setTimeout(() => {\n            this.update();\n          });\n        });\n      }\n    }\n  }\n\n  /**\n   * @name                  setRenderInterval\n   * @type                  Function\n   *\n   * This method allows you to simply change the interval timeout between the screen renders process.\n   * Note that calling this will change the GLOBAL render screen interval so use with caution...\n   *\n   * @param       {Number}          interval          The interval between screen rendering processes in ms\n   *\n   * @since           2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  setRenderInterval(interval) {\n    clearInterval(SComponent._renderInterval);\n    SComponent._renderInterval = setInterval(() => {\n      if (!this.isDisplayed()) return;\n      (global.screen || this.screen).render();\n    }, interval);\n  }\n\n  /**\n   * @name                  attach\n   * @type                  Function\n   *\n   * This method simply append the component to the generated screen\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  attach(to = null) {\n    if (__isChildProcess()) return;\n    if (to) {\n      to.append(this);\n      return;\n    }\n    (global.screen.container || global.screen).append(this);\n  }\n\n  /**\n   * @name                  update\n   * @type                  Function\n   *\n   * This method simply update the screen if the component is a child of one\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  update() {\n    if (this.isDestroyed()) return;\n    if (this._screen) this._screen.render();\n  }\n\n  /**\n   * @name                isDisplayed\n   * @type                Function\n   *\n   * Check if the component is in the display list of the screen\n   *\n   * @return      {Boolean}             true if is displayed, false if not\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  isDisplayed() {\n    return this._isDisplayed;\n  }\n\n  /**\n   * @name                  isDestroyed\n   * @type                  Function\n   *\n   * Check if the component (screen) has been destroyed\n   *\n   * @since         2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  isDestroyed() {\n    return this._destroyed === true;\n  }\n};\n"]}
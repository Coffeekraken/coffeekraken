{"version":3,"sources":["SOutput.js"],"names":["__deepMerge","require","__blessed","__color","__SComponent","__parseMarkdown","__isChildProcess","__parse","__toString","__stripAnsi","__trimLines","__extractValues","__SOutputProcessInterface","__SOutputLogInterface","module","exports","process","settings","apply","_settings","filter","maxItemsByGroup","_process","_subscribeToProcess","_createLogBox","on","data","log","console","clear","clearTimeout","_clearTimeout","setTimeout","_allowClear","_content","_lastY","_logBoxChilds","forEach","child","i","destroy","update","content","trim","logsArray","args","splitedLogs","split","replace","parsedLog","value","applyAndComplete","push","includes","parseAndComplete","complete","logsObjArray","_parseLog","logObj","temp","$box","height","res","slice","length","toString","type","_createHeaderBox","group","actualGroupObjArray","item","groupObj","indexOf","maxItems","itemsCount","newContent","allowRender","isDisplayed","contentArray","logsString","join","setContent","title","$line","top","mt","getScrollHeight","mb","_simpleTextBox","_logBox","append","_groupBox","setScrollPerc","text","box","width","padding","left","right","style","fg","scrollable","bottom","textsArray","color","toLowerCase","bg","_headerBox","mouse","keys","scrollbar","ch","inverse","border"],"mappings":"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","sourcesContent":["const __deepMerge = require('../object/deepMerge');\nconst __blessed = require('blessed');\nconst __color = require('../color/color');\nconst __SComponent = require('./SComponent');\nconst __parseMarkdown = require('../terminal/parseMarkdown');\nconst __isChildProcess = require('../is/childProcess');\nconst __parse = require('../string/parse');\nconst __toString = require('../string/toString');\nconst __stripAnsi = require('strip-ansi');\nconst __trimLines = require('../string/trimLines');\nconst __extractValues = require('../object/extractValues');\nconst __SOutputProcessInterface = require('./interface/SOutputProcessInterface');\nconst __SOutputLogInterface = require('./interface/SOutputLogInterface');\n\n/**\n * @name                  SOutput\n * @namespace           node.blessed\n * @type                  Class\n *\n * This class is a simple SPanel extended one that accesp an SOutput instance\n * to log the data's from and display an simple UI depending on the SOutput configured keys\n *\n * @param         {SOutput}            process           The SOutput instance you want to attach\n * @param         {Object}              [settings={}]     The settings object to configure your SOutput\n * - filter (null) {Function}: Specify a function that will filter the logs to display. This function will receive two parameters. The data object to log and the metas object of the SPromise instance. If you return true, the log will pass the filter. If you return false, the log will not being displayed. And if you return an updated data object, the log will be the one you returned...\n * - maxItemsByGroup (1) {Number}: Specify the number of logs to display by group\n * - clearOnStart (true) {Boolean}: Specify if you want your output to be cleared when received any events matching this pattern: \"*.start\"\n *\n * @todo        Support the \"maxItems\" setting\n * @todo        Listen for errors and display them correctly\n *\n * @example         js\n * const SOutput = require('@coffeekraken/sugar/node/terminal/SOutput');\n * const myPanel = new SOutput(myProcess, {\n *    screen: true\n * });\n *\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = class SOutput extends __SComponent {\n  /**\n   * @name          _process\n   * @type          SOutput\n   * @private\n   *\n   * Store the SOutput instance\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _process = null;\n\n  /**\n   * @name          _content\n   * @type          Array\n   * @private\n   *\n   * Store the content depending on his formatting style like groups, etc...\n   *\n   * @since         2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _content = [];\n\n  /**\n   * @name          _logBox\n   * @type          blessed.Box\n   * @private\n   *\n   * Store the actual box where the logs will be pushed\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _logBox = null;\n\n  /**\n   * @name           _headerBox\n   * @type          blessed.box\n   * @private\n   *\n   * Store the header content if a log object has the property \"type\" to \"header\"\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _headerBox = null;\n\n  /**\n   * @name          constructor\n   * @type          Function\n   * @constructor\n   *\n   * Constructor\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(process, settings = {}) {\n    // apply some interfaces\n    __SOutputProcessInterface.apply(process);\n\n    const _settings = __deepMerge(\n      {\n        filter: null,\n        // maxItems: -1,\n        maxItemsByGroup: 1\n      },\n      settings\n    );\n    // extends SPanel\n    super(_settings);\n    // save the process\n    this._process = process;\n    // subscribe to the process\n    this._subscribeToProcess();\n    // generate keys UI\n    this._createLogBox();\n  }\n\n  /**\n   * @name          _subscribeToProcess\n   * @type          Function\n   * @private\n   *\n   * This method simply listen to the process and log the values getted\n   * from it into the panel\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _subscribeToProcess() {\n    // subscribe to data\n    this._process\n      .on('close', (data) => {\n        // this.log(\n        //   `Closing process with code <red>${data.code}</red> and signal <red>${data.signal}</red>...`\n        // );\n        // this.update();\n      })\n      .on('*.start', () => {\n        // if (this._settings.clearOnStart) {\n        //   this.clear();\n        // }\n      })\n      .on('log', (...data) => {\n        this.log(...data);\n      });\n    // .on('error', (data) => {\n    //   if (data.error) {\n    //     if (typeof data.error === 'string') {\n    //       this.log(`<red>${data.error}</red>`);\n    //     } else if (data.error.message) {\n    //       this.log(`<red>${data.error.message}</red>`);\n    //     }\n    //     if (data.error.stack) this.log(data.error.stack);\n    //     if (data.error.trace) this.log(data.error.trace);\n    //   } else {\n    //     this.log(\n    //       data.value && data.value.value\n    //         ? data.value.value\n    //         : data.value\n    //         ? data.value\n    //         : data\n    //     );\n    //   }\n    //   this.update();\n    // })\n  }\n\n  /**\n   *\n   * @name          clear\n   * @type          Function\n   *\n   * This method simply clear the output\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _clearTimeout = null;\n  _allowClear = true;\n  clear() {\n    if (__isChildProcess()) {\n      console.log(\n        __toString({\n          clear: true\n        })\n      );\n    } else {\n      clearTimeout(this._clearTimeout);\n      this._clearTimeout = setTimeout(() => {\n        this._allowClear = true;\n      }, 200);\n\n      if (this._allowClear) {\n        this._allowClear = false;\n        this._content = [];\n        this._lastY = 1;\n        this._logBoxChilds.forEach((child, i) => {\n          child.destroy();\n        });\n        this._logBoxChilds = [];\n        this.update();\n      }\n    }\n  }\n\n  _processMarkdown(content) {\n    content = content.trim();\n    content = __parseMarkdown(content);\n    return content;\n  }\n\n  /**\n   * @name          _parseLog\n   * @type          Function\n   * @private\n   *\n   * This method take a simple string or a complexe data object and parse them to\n   * generate a nicely formated log object to pass to the ```log``` method.\n   *\n   * @param       {String|Object}           data           The log data to parse\n   * @return      {Array<Object>}                           An array of nicely formated log object\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _parseLog(...args) {\n    let logsArray = [];\n\n    args.forEach((data) => {\n      if (typeof data === 'string') {\n        const splitedLogs = data.split(/⠀/);\n        splitedLogs.forEach((log) => {\n          if (log.trim() === '') return;\n          log = log.replace(/⠀{0,9999999}/g, '').trim();\n          const parsedLog = __parse(log);\n          if (\n            typeof parsedLog === 'object' &&\n            parsedLog.value &&\n            typeof parsedLog.value === 'string'\n          ) {\n            parsedLog = __SOutputLogInterface.applyAndComplete(parsedLog);\n            logsArray.push(parsedLog);\n          } else if (typeof parsedLog === 'string') {\n            if (parsedLog.includes(' -v ') || parsedLog.includes(' --value ')) {\n              const args = __SOutputLogInterface.parseAndComplete(parsedLog);\n              logsArray.push(args);\n            } else {\n              const args = __SOutputLogInterface.complete({\n                value: parsedLog\n              });\n              logsArray.push(args);\n            }\n          }\n        });\n      } else if (\n        typeof data === 'object' &&\n        data.value &&\n        typeof data.value === 'string'\n      ) {\n        // apply the interface\n        data = __SOutputLogInterface.applyAndComplete(data);\n\n        const splitedLogs = data.value.split(/⠀/);\n        splitedLogs.forEach((log) => {\n          if (log.trim() === '') return;\n          log = log.replace(/⠀{0,9999999}/g, '').trim();\n          const parsedLog = __parse(log);\n          if (\n            typeof parsedLog === 'object' &&\n            parsedLog.value &&\n            typeof parsedLog.value === 'string'\n          ) {\n            __SOutputLogInterface.apply(parsedLog);\n            logsArray.push({\n              ...data,\n              ...parsedLog\n            });\n          } else if (typeof parsedLog === 'string') {\n            if (parsedLog.includes(' -v ') || parsedLog.includes(' --value ')) {\n              const args = __SOutputLogInterface.parseAndComplete(parsedLog);\n              logsArray.push({\n                ...data,\n                ...args\n              });\n            } else {\n              logsArray.push({\n                ...data,\n                value: parsedLog\n              });\n            }\n          }\n        });\n      }\n    });\n\n    return logsArray;\n  }\n\n  /**\n   * @name          log\n   * @type          Function\n   *\n   * This method simply log the passed arguments\n   *\n   * @param       {Mixed}         ...args         The arguments you want to log\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  log(...args) {\n    let logsObjArray = this._parseLog(...args);\n\n    // filter the content to remove the \"temp\" logs\n    this._content = this._content.filter((logObj) => {\n      if (logObj.temp) {\n        this._lastY -= logObj.$box.height;\n        if (logObj.$box) logObj.$box.destroy();\n        return false;\n      }\n      return true;\n    });\n\n    logsObjArray.forEach((logObj) => {\n      if (\n        this._settings.filter &&\n        typeof this._settings.filter === 'function'\n      ) {\n        const res = this._settings.filter(logObj);\n        if (res === false) return;\n        if (res !== true) logObj = res;\n      }\n\n      if (__isChildProcess()) {\n        console.log(__toString(logObj));\n        return;\n      }\n\n      if (logObj.value.includes('[?1049h')) {\n        logObj.value = logObj.value.slice(40);\n      } // ugly hack that need to be checked...\n      if (__stripAnsi(logObj.value).trim().length === 0) return;\n\n      if (typeof logObj.value !== 'string')\n        logObj.value = logObj.value.toString();\n\n      if (logObj.type && logObj.type === 'header') {\n        // generate the header box\n        this._createHeaderBox(logObj);\n      } else if (logObj.group && typeof logObj.group === 'string') {\n        const actualGroupObjArray = this._content.filter((item) => {\n          if (typeof item !== 'object') return false;\n          if (item.group === logObj.group) return true;\n          return false;\n        });\n        let groupObj = {\n          group: logObj.group,\n          content: []\n        };\n        if (actualGroupObjArray.length) {\n          groupObj = actualGroupObjArray[0];\n        } else {\n          if (this._content.indexOf(groupObj) === -1)\n            this._content.push(groupObj);\n        }\n        // if (groupObj.content.indexOf(processedLog) === -1)\n        groupObj.content.push(logObj);\n      } else {\n        // if (this._content.indexOf(processedLog) === -1)\n        this._content.push(logObj);\n      }\n    });\n\n    // handle the maxItems setting\n    if (this._settings.maxItems !== -1) {\n      let itemsCount = 0;\n      let newContent = [];\n      for (let i = this._content.length - 1; i >= 0; i--) {\n        const item = this._content[i];\n        newContent = [item, ...newContent];\n        itemsCount++;\n        // stop if we reach the maxItems count\n        if (itemsCount >= this._settings.maxItems) {\n          break;\n        }\n      }\n      // save the new content\n      this._content = newContent;\n    }\n\n    // update display\n    this.update();\n  }\n\n  /**\n   * @name            update\n   * @type            Function\n   *\n   * This method take the content of the this._content property and display it correctly on the screen\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _lastY = 1;\n  _logBoxChilds = [];\n  update() {\n    if (__isChildProcess()) return;\n    if (!this.allowRender()) return;\n    if (!this.isDisplayed()) return;\n\n    this._lastY = 1;\n\n    if (!this._content.length) {\n      super.update();\n      return;\n    }\n\n    this._content.forEach((item) => {\n      if (item.$box) {\n        if (item.group) {\n          let contentArray;\n          if (this._settings.maxItemsByGroup) {\n            contentArray = item.content.slice(\n              this._settings.maxItemsByGroup * -1\n            );\n          } else {\n            contentArray = item.content;\n          }\n          const logsString = __extractValues(contentArray, 'value').join('\\n');\n          item.$box.setContent(\n            __trimLines(`${item.$box.title}\n               ${__parseMarkdown(logsString)}`)\n          );\n          item.$box.height = logsString.split('\\n').length + 1;\n          item.$box.$line.height = logsString.split('\\n').length + 1;\n        } else {\n        }\n\n        item.$box.top = this._lastY + (item.mt || 0);\n        this._lastY +=\n          item.$box.getScrollHeight() + (item.mt || 0) + (item.mb || 1);\n      } else if (item.value && typeof item.value === 'string') {\n        const $box = this._simpleTextBox(item.value);\n        $box.top = this._lastY + item.mt;\n        this._logBoxChilds.push($box);\n        this._logBox.append($box);\n        item.$box = $box;\n        this._lastY += $box.getScrollHeight() + item.mt + item.mb;\n      } else if (typeof item === 'object' && item.group) {\n        const $box = this._groupBox(item.group, item.content);\n        $box.top = this._lastY;\n        this._logBoxChilds.push($box);\n        item.$box = $box;\n        this._logBox.append($box);\n        this._lastY += $box.getScrollHeight() + 1;\n      }\n    });\n    this._logBox.setScrollPerc(100);\n    super.update();\n  }\n\n  /**\n   * @name          _simpleTextBox\n   * @type          Function\n   * @private\n   *\n   * This method take a text as input and return a blessed box\n   * representing this text to display\n   *\n   * @param       {String}        text        The text to display\n   * @return      {Blessed.box}               A blessed box instance\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _simpleTextBox(text) {\n    const $box = __blessed.box({\n      width:\n        this._logBox.width -\n        this._logBox.padding.left -\n        this._logBox.padding.right,\n      height: 'shrink',\n      style: {\n        fg: 'white'\n      },\n      scrollable: true,\n      padding: {\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0\n      },\n      content: __parseMarkdown(text)\n    });\n    // const $line = __blessed.box({\n    //   width: 1,\n    //   height: 1,\n    //   top: 0,\n    //   left: $box.padding.left * -1,\n    //   bottom: 0,\n    //   style: {\n    //     bg: __color('terminal.secondary').toString()\n    //   }\n    // });\n    $box.on('attach', () => {\n      setTimeout(() => {\n        $box.height = $box.getScrollHeight();\n        // $box.append($line);\n      });\n    });\n    return $box;\n  }\n\n  /**\n   * @name          _simpleTextBox\n   * @type          Function\n   * @private\n   *\n   * This method take a text as input and return a blessed box\n   * representing this text to display\n   *\n   * @param       {String}        text        The text to display\n   * @return      {Blessed.box}               A blessed box instance\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _groupBox(group, textsArray) {\n    const $box = __blessed.box({\n      width:\n        this._logBox.width -\n        this._logBox.padding.left -\n        this._logBox.padding.right,\n      height: 'shrink',\n      style: {\n        fg: 'white'\n      },\n      scrollable: true,\n      padding: {\n        top: 0,\n        left: 2,\n        right: 0,\n        bottom: 0\n      }\n    });\n\n    const color = group.toLowerCase().includes('error') ? 'red' : 'yellow';\n\n    const title = __parseMarkdown(\n      group.toLowerCase().includes('error')\n        ? `<red>${group}</red>`\n        : `<yellow>${group}</yellow>`\n    );\n\n    $box.title = title;\n\n    // if (this._settings.maxItemsByGroup === -1) {\n    //   const logsString = __extractValues(textsArray, 'value').join('\\n');\n    //   $box.setContent(\n    //     __trimLines(`${title}\n    //   ${__parseMarkdown(logsString)}`)\n    //   );\n    // } else {\n    //   const contents = textsArray.slice(this._settings.maxItemsByGroup * -1);\n    //   const logsString = __extractValues(contents, 'value').join('\\n');\n    //   $box.setContent(\n    //     __trimLines(`${title}\n    //   ${__parseMarkdown(logsString)}`)\n    //   );\n    // }\n\n    const $line = __blessed.box({\n      width: 1,\n      height: 1,\n      top: 0,\n      left: $box.padding.left * -1,\n      bottom: 0,\n      style: {\n        bg: 'yellow'\n      }\n    });\n\n    if (color === 'red') {\n      $line.style.bg = 'red';\n    }\n\n    $box.$line = $line;\n\n    $box.on('attach', () => {\n      setTimeout(() => {\n        $box.height = $box.getScrollHeight();\n        $line.height = $box.getScrollHeight();\n        $box.append($line);\n      });\n    });\n    return $box;\n  }\n\n  /**\n   * @name          _createHeaderBox\n   * @type          Function\n   * @private\n   *\n   * This emthod take a logObj that has the property \"type\" to \"header\" and generate a\n   * header box based on the blessed.box function.\n   *\n   * @param       {Object}      logObj          The logObj to use to generate the header box\n   * @return      {blessed.box}                 Return the blessed.box instance also saved in the \"_headerBox\" instance property\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _createHeaderBox(logObj) {\n    this._headerBox = __blessed.box({\n      width: '100%',\n      height: 1,\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      style: {},\n      mouse: true,\n      keys: true,\n      scrollable: true,\n      scrollbar: {\n        ch: ' ',\n        inverse: true\n      },\n      border: {\n        type: 'line'\n      },\n      style: {\n        border: {\n          fg: __color('terminal.primary').toString()\n        },\n        scrollbar: {\n          bg: __color('terminal.primary').toString()\n        }\n      },\n      content: __parseMarkdown(logObj.value),\n      padding: {\n        top: 1,\n        left: 1,\n        right: 1,\n        bottom: 1\n      }\n    });\n\n    this.append(this._headerBox);\n    this._headerBox.height = this._headerBox.getScrollHeight() + 4;\n\n    this._logBox.top = this._headerBox.height;\n\n    return this._headerBox;\n  }\n\n  /**\n   * @name          _createLogBox\n   * @type          Function\n   * @private\n   *\n   * This method take the registered keys in the process and generate a nice and clean UI for it\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _createLogBox() {\n    // if (this._logBox) {\n    //   this._logBox.destroy();\n    //   this._logBox = null;\n    // }\n\n    this._logBox = __blessed.box({\n      width: '100%',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      style: {},\n      mouse: true,\n      keys: true,\n      scrollable: true,\n      scrollbar: {\n        ch: ' ',\n        inverse: true\n      },\n      style: {\n        scrollbar: {\n          bg: __color('terminal.primary').toString()\n        }\n      },\n      padding: {\n        top: 0,\n        left: 1,\n        right: 1,\n        bottom: 1\n      }\n    });\n\n    this.append(this._logBox);\n  }\n};\n"]}
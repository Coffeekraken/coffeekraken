{"version":3,"sources":["SApp.js"],"names":["__blessed","require","__deepMerge","__color","__SComponent","__SHeader","__SFooter","__activeSpace","__SUrl","__sugarConfig","__get","__fs","__filter","module","exports","settings","id","name","appendToScreen","header","title","footer","global","SAppInstance","Error","config","Object","keys","length","_initCommands","_settings","_headerBox","style","bg","toString","fg","append","_footerBox","commands","_commandsStack","commandInstance","statusBar","_contentBox","box","padding","top","left","right","bottom","goTo","dotedPath","url","history","urlsKeys","i","sUrl","schema","match","_goTo","_historyArray","splice","pageObj","existsSync","page","path","replace","pageClass","push","activeSpaceString","href","split","filter","join","set","currentPageInstance","_pagesStack","argsObj","params","forEach","paramName","argValue","value","defaultArgs","setArgs","previousUrlObj","previousPageInstance","detach","persistent","destroy","parent","commandsObj","commandName","indexOf","commandObj","commandClass","rawUrl","parsedSchema","command","process","component","ui","update","position","height"],"mappings":"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","sourcesContent":["const __blessed = require('blessed');\nconst __deepMerge = require('../../object/deepMerge');\nconst __color = require('../../color/color');\nconst __SComponent = require('../SComponent');\nconst __SHeader = require('../SHeader');\nconst __SFooter = require('../SFooter');\nconst __activeSpace = require('../../core/activeSpace');\nconst __SUrl = require('../../url/SUrl');\nconst __sugarConfig = require('../../config/sugar');\nconst __get = require('../../object/get');\nconst __fs = require('fs');\nconst __filter = require('../../object/filter');\n\n/**\n * @name                  SApp\n * @namespace           node.blessed.app\n * @type                  Class\n *\n * This class is the main one when you want to create a Sugar terminal based application.\n *\n * @param        {Object}         [settings = {}]         A settings object to configure your list. Here's the available settings:\n *\n * @example       js\n * const SApp = require('@coffeekraken/sugar/node/blessed/app/SApp');\n * class MyApp extends SApp {\n *    constructor(settings = {}) {\n *      super(settings);\n *    }\n * }\n *\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = class SApp extends __SComponent {\n  /**\n   * @name                  _historyArray\n   * @type                  Array\n   * @private\n   *\n   * Store the urls object history\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _historyArray = [];\n\n  /**\n   * @name                  _pagesStack\n   * @type                  Object\n   * @private\n   *\n   * Store the pages instances to reuse them instead of recreate them every\n   * page change...\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _pagesStack = {};\n\n  /**\n   * @name          _commandsStack\n   * @type          Object\n   * @private\n   *\n   * Store the instanciated commands specified in the config\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _commandsStack = {};\n\n  /**\n   * @name                  constructor\n   * @type                  Function\n   * @constructor\n   *\n   * Constructor\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(settings = {}) {\n    // store the settings\n    settings = __deepMerge(\n      {\n        id: 'sugarapp',\n        name: 'Sugar',\n        appendToScreen: true,\n        header: {\n          title: 'Coffeekraken Sugar based application'\n        },\n        footer: {}\n      },\n      __sugarConfig(settings.id || 'sugarapp'),\n      settings\n    );\n\n    // extends parent\n    super(settings);\n\n    // save the application instance globally\n    if (global.SAppInstance)\n      throw new Error(\n        `Only 1 instance of the SApp class can be instanciated at the same time...`\n      );\n    global.SAppInstance = this;\n\n    // check if their some \"commands\" specified in the config\n    if (\n      this.config('commands') &&\n      Object.keys(this.config('commands')).length\n    ) {\n      this._initCommands();\n    }\n\n    if (this._settings.header) {\n      this._headerBox = new __SHeader({\n        style: {\n          bg: __color('terminal.primary').toString(),\n          fg: __color('terminal.black').toString()\n        },\n        ...this._settings.header\n      });\n      this.append(this._headerBox, true);\n    }\n\n    if (this._settings.footer) {\n      this._footerBox = new __SFooter({\n        style: {\n          bg: __color('terminal.primary').toString(),\n          fg: __color('terminal.black').toString()\n        },\n        commands: __filter(this._commandsStack, (commandInstance) => {\n          return commandInstance._settings.statusBar === true;\n        }),\n        ...this._settings.footer\n      });\n      this.append(this._footerBox, true);\n    }\n\n    this._contentBox = __blessed.box({\n      padding: {\n        top: 1,\n        left: 2,\n        right: 2,\n        bottom: 1\n      }\n    });\n    this.append(this._contentBox, true);\n\n    // go to default page\n    if (this.config('pages.default')) {\n      this.goTo(this.config('pages.default'));\n    }\n  }\n\n  /**\n   * @name            currentUrlObj\n   * @type            Object\n   * @get\n   *\n   * Access the current url object.\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get currentUrlObj() {\n    if (!this._historyArray.length) return null;\n    return this._historyArray[this._historyArray.length - 1];\n  }\n\n  /**\n   * @name            previousUrlObj\n   * @type            Object\n   * @get\n   *\n   * Access the previous url object.\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get previousUrlObj() {\n    if (this._historyArray.length < 2) return null;\n    return this._historyArray[this._historyArray.length - 2];\n  }\n\n  /**\n   * @name            config\n   * @type            Function\n   *\n   * This methods allows you to get some configuration through the setted SConfig instance\n   *\n   * @param         {String}          dotedPath         The doted path to the config you want to get\n   * @return        {Mixed}                             The config getted\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  config(dotedPath) {\n    return __get(this._settings, dotedPath);\n  }\n\n  /**\n   * @name            goTo\n   * @type            Function\n   *\n   * This methods allows you to specify the \"url\" you want to go to\n   *\n   * @param         {String}            url               The url you want to go to\n   *\n   * @example       js\n   * myCoolApp.goTo('/something/cool');\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  goTo(url, history = true) {\n    // loop on the pages urls available in the config\n    const urlsKeys = Object.keys(this.config('pages.urls'));\n    for (let i = 0; i < urlsKeys.length; i++) {\n      const sUrl = new __SUrl(url, {\n        schema: urlsKeys[i]\n      });\n      if (sUrl.schema.match) {\n        this._goTo(sUrl, history);\n        break;\n      }\n    }\n  }\n\n  /**\n   * @name          back\n   * @type          Function\n   *\n   * This method simply go back 1 url in the history\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  back() {\n    if (this._historyArray.length <= 1) return;\n    this._historyArray.splice(-1, 1);\n    this._goTo(this._historyArray[this._historyArray.length - 1], false);\n  }\n\n  /**\n   * @name          _goTo\n   * @type          Function\n   * @private\n   *\n   * This is the internal version of the goTo method. It will take care of actualy change the page etc...\n   *\n   * @param       {SUrl}        sUrl        An SUrl instance to work with\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _goTo(sUrl, history = true) {\n    const pageObj = this.config(`pages.urls.${sUrl.schema.schema}`);\n    if (!__fs.existsSync(pageObj.page.path.replace('.js', '') + '.js'))\n      throw new Error(\n        `SApp: You try to load a page class using the path \"${pageObj.page.path}\" but no file exists at this location...`\n      );\n    const pageClass = require(`${pageObj.page.path}`);\n\n    // check if the pageObj exist\n    if (!pageObj && this.config('pages.url.404')) {\n      // go to 404 page\n      this.goTo('/404');\n      return;\n    } else if (!pageObj) {\n      throw new Error(\n        `The requested page \"${url}\" does not exists and you don't have any 404 page defined in your @config.pages configuration...`\n      );\n    }\n\n    // append the new url to the history\n    if (history) this._historyArray.push(sUrl);\n\n    // generate active space string depending on the url.\n    const activeSpaceString = sUrl.href\n      .split('/')\n      .filter((i) => i !== '')\n      .join('.');\n\n    // set the activeSpace\n    __activeSpace.set(activeSpaceString);\n\n    // check if we have already the page instance\n    let currentPageInstance = this._pagesStack[sUrl.schema.schema];\n    if (!currentPageInstance) {\n      currentPageInstance = new pageClass(\n        pageObj.page.id,\n        pageObj.page.title,\n        pageObj.page.settings\n      );\n      this._pagesStack[sUrl.schema.schema] = currentPageInstance;\n    }\n\n    // set args on the page\n    const argsObj = {};\n    if (sUrl.schema.params) {\n      Object.keys(sUrl.schema.params).forEach((paramName) => {\n        let argValue = sUrl.schema.params[paramName].value;\n        if (argValue === null) argValue = pageObj.defaultArgs[paramName];\n        argsObj[paramName] = argValue;\n      });\n    }\n    currentPageInstance.setArgs(argsObj);\n\n    // get the previous page and check if we need to destroy it\n    if (this.previousUrlObj) {\n      const previousPageInstance = this._pagesStack[\n        this.previousUrlObj.schema.schema\n      ];\n      if (previousPageInstance !== currentPageInstance) {\n        if (previousPageInstance) previousPageInstance.detach();\n        if (!previousPageInstance.persistent) {\n          previousPageInstance.destroy();\n          delete this._pagesStack[this.previousUrlObj.schema.schema];\n        }\n      }\n    }\n\n    // append the page\n    if (!currentPageInstance.parent) this.append(currentPageInstance);\n  }\n\n  /**\n   * @name          _initCommands\n   * @type          Function\n   * @private\n   *\n   * This methods takes the commands classes specified in the configuration\n   * and instanciate them to be available through the app\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _initCommands() {\n    const commandsObj = this.config('commands');\n    Object.keys(commandsObj).forEach((commandName) => {\n      // filter commands using the features.commands config\n      if (this.config('features.commands').indexOf(commandName) === -1) return;\n\n      const commandObj = commandsObj[commandName];\n      if (!__fs.existsSync(commandObj.path.replace('.js', '') + '.js'))\n        throw new Error(\n          `SApp: You try to load a command class using the path \"${commandObj.path}\" but no file exists at this location...`\n        );\n      const commandClass = require(`${commandObj.path}`);\n      this._commandsStack[commandName] = new commandClass(\n        commandObj.argsObj,\n        commandObj.settings\n      );\n    });\n  }\n\n  /**\n   * @name          _getProcessInstance\n   * @type          Function\n   * @private\n   *\n   * This method take care of retreiving the SProcess instance linked to a certain page/url.\n   *\n   * @param         {String}          url             The url where the user want to go\n   * @param         {String}          rawUrl          The raw url used in the config. This is the url that may content some params like \"{what}\", etc...\n   * @param         {Object}          parsedSchema    The parsed url schema\n   * @return        {SProcess}                        The SProcess instance for the passed page/url\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _getProcessInstance(url, rawUrl, parsedSchema) {}\n\n  /**\n   * @name              exec\n   * @type              Function\n   *\n   * This method takes one or more SCommand instances and execute them.\n   * You can also pass as parameter a simple text command like \"ls -la\" or whatever\n   *\n   * @param         {String|SCommand|Array}         command         The command(s) to execute\n   * @return        {SPromise}                                      An SPromise instance that will be resolved once all the commands are finished\n   *\n   * @example       js\n   * myCoolApp.exec('ls -la');\n   *\n   * @TODO      Better example\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  exec(command) {\n    // if (!Array.isArray(command)) command = [command];\n    // const process = new __SProcess(command, {});\n    // const processPanel = new __SProcessPanel(process, {});\n    // this.append(processPanel);\n  }\n\n  /**\n   * @name              process\n   * @type              Function\n   *\n   * This method take as parameter an SProcess instance and display it properly\n   *\n   * @param         {SProcess}         process            The SProcess to display\n   *\n   * @example       js\n   * myCoolApp.process(myCoolProcess);\n   *\n   * @TODO      Better example\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  process(process) {\n    // const processPanel = new __SProcessPanel(process, {});\n    // this.append(processPanel);\n  }\n\n  /**\n   * @name          append\n   * @type          Function\n   * @override\n   *\n   * This method simply append some content inside the contentBox\n   *\n   * @param       {SComponent}        component       The component to add\n   * @param       {Boolean}           [ui=false]      Specify if you want to append this component to the ui or in the content box\n   * @return      {SApp}                              The SApp instance to maintain chainability\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  append(component, ui = false) {\n    if (ui) {\n      super.append(component);\n    } else {\n      this._contentBox.append(component);\n    }\n    this.update();\n    return this;\n  }\n\n  /**\n   * @name          update\n   * @type          Function\n   * @override\n   *\n   * This method simply draw the UI on the screen\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  update() {\n    if (this._headerBox) {\n      this._headerBox.position.top = 0;\n      this._headerBox.position.left = 0;\n      if (this._contentBox) {\n        this._contentBox.position.top = this._headerBox.height;\n      }\n    }\n    if (this._footerBox) {\n      this._footerBox.position.bottom = 0;\n      this._footerBox.position.left = 0;\n\n      if (this._contentBox) {\n        this._contentBox.position.bottom = this._footerBox.height;\n      }\n    }\n\n    super.update();\n  }\n};\n"]}
{"version":3,"sources":["SAppPage.js"],"names":["__SPromise","require","__SComponent","__deepMerge","module","exports","id","title","settings","persistent","_id","_title","_promise","on","bind","argsObj","updatedArgsObj","Object","keys","forEach","argName","_argsObj","undefined","trigger","newValue","oldValue","name","global","SAppInstance","_settings"],"mappings":"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","sourcesContent":["const __SPromise = require('../../promise/SPromise');\nconst __SComponent = require('../SComponent');\nconst __deepMerge = require('../../object/deepMerge');\n\n/**\n * @name                    SAppPage\n * @namespace           node.blessed.app\n * @type                    Class\n * @extends                 SComponent\n *\n * This represent the base class that all the pages of an SApp based application\n * MUST extends.\n *\n * @param       {String}        id          An id for this particular page that can be used to retreive this instance using the static method \"SAppPage.getPageById(id)\"\n * @param       {String}        title          A title for this particular page that can be used to retreive this instance using the static method \"SAppPage.getPageByTitle(title)\"\n * @param       {Object}        [settings={}]     A settings object that will be passed to the SComponent class constructor\n * - persistent (false) {Boolean}: Specify if you want your page to be destroyed when the user go to another one or not...\n *\n * @example       js\n * const SAppPage = require('@coffeekraken/sugar/node/blessed/app/SAppPage');\n * const myPage = new SAppPage('my.cool.page', 'My cool page', {});\n *\n * TODO: Documentation\n *\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = class SAppPage extends __SComponent {\n  /**\n   * @name          _id\n   * @type          String\n   * @private\n   *\n   * Store the page id\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _id = null;\n\n  /**\n   * @name        _title\n   * @type        String\n   * @private\n   *\n   * Store the page title\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _title = null;\n\n  /**\n   * @name          _promise\n   * @type          SPromise\n   * @private\n   *\n   * Store an SPromise instance\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _promise = null;\n\n  /**\n   * @name          _argsObj\n   * @type          Object\n   * @private\n   *\n   * Store the arguments object\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _argsObj = {};\n\n  /**\n   * @name          constructor\n   * @type          Function\n   * @constructor\n   *\n   * Constructor\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(id, title, settings = {}) {\n    super(\n      __deepMerge(\n        {\n          persistent: false\n        },\n        settings\n      )\n    );\n    // save id and title\n    this._id = id;\n    this._title = title;\n    // init a new SPromise instance\n    this._promise = new __SPromise(() => {});\n    // map some SPromise instance methods on this class instance\n    this.on = this._promise.on.bind(this._promise);\n  }\n\n  /**\n   * @name        app\n   * @type        SApp\n   * @get\n   *\n   * Access the application instance on which you will have access to configs, etc...\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get app() {\n    return global.SAppInstance;\n  }\n\n  /**\n   * @name        id\n   * @type        String\n   * @get\n   *\n   * Access the page id setted in the constructor\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get id() {\n    return this._id;\n  }\n\n  /**\n   * @name        title\n   * @type        String\n   * @get\n   *\n   * Access the page title setted in the constructor\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get title() {\n    return this._title;\n  }\n\n  /**\n   * @name        persistent\n   * @type        Boolean\n   * @get\n   *\n   * Access the value of the settings.persistent property\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get persistent() {\n    return this._settings.persistent;\n  }\n\n  /**\n   * @name        setArgs\n   * @type        Function\n   *\n   * This method allows you to set some page arguments by passing an object.\n   * Calling this will trigger an \"args\" and an \"arg\" SPromise \"event\".\n   *\n   * @param         {Object}        argsObj         An object of arguments to set\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  setArgs(argsObj) {\n    // build an object that take all updated arguments values\n    const updatedArgsObj = {};\n    // loop on each new arguments\n    Object.keys(argsObj).forEach((argName) => {\n      // check if it has changed\n      if (\n        this._argsObj[argName] !== undefined &&\n        argsObj[argName] === this._argsObj[argName]\n      ) {\n      } else {\n        // trigger an \"arg\" event through the _promise property\n        this._promise.trigger(`arg.${argName}`, {\n          newValue: argsObj[argName],\n          oldValue: this._argsObj[argName]\n        });\n        this._promise.trigger('arg', {\n          name: argName,\n          newValue: argsObj[argName],\n          oldValue: this._argsObj[argName]\n        });\n        updatedArgsObj[argName] = {\n          newValue: argsObj[argName],\n          oldValue: this._argsObj[argName]\n        };\n      }\n      // trigger an \"args\" event through the _promise property\n      this._promise.trigger('args', updatedArgsObj);\n      // set the new arg value\n      this._argsObj[argName] = argsObj[argName];\n    });\n  }\n\n  /**\n   * @name          destroy\n   * @type          Function\n   *\n   * This method serve to destroy the page when a user change to another one and that the\n   * value of settings.persistent is to false\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  destroy() {}\n};\n"]}
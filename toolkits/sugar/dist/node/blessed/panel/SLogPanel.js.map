{"version":3,"sources":["SLogPanel.js"],"names":["__deepMerge","require","__blessed","__parseHtml","__splitEvery","__countLine","__uniqid","__sugarConfig","print","stringify","__SPromise","__color","__hotkey","__clone","__SComponent","module","exports","settings","name","beforeLog","beforeEachLine","padBeforeLog","mouse","keys","scrollable","scrollbar","ch","inverse","style","bg","toString","padding","top","bottom","left","right","test","_settings","Error","_name","screen","title","message","Array","isArray","logSettings","lines","forEach","m","repeat","parseInt","formatedBeforeEachLine","formatedBeforeLog","formatedMessage","split","map","line","i","width","l","j","pushLine","join","update","setScrollPerc"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAMA,WAAW,GAAGC,OAAO,CAAC,wBAAD,CAA3B;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,SAAD,CAAzB;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,0BAAD,CAA3B;;AACA,MAAMG,YAAY,GAAGH,OAAO,CAAC,yBAAD,CAA5B;;AACA,MAAMI,WAAW,GAAGJ,OAAO,CAAC,wBAAD,CAA3B;;AACA,MAAMK,QAAQ,GAAGL,OAAO,CAAC,qBAAD,CAAxB;;AACA,MAAMM,aAAa,GAAGN,OAAO,CAAC,oBAAD,CAA7B;;AACA,MAAM;AAAEO,EAAAA,KAAF;AAASC,EAAAA;AAAT,IAAuBR,OAAO,CAAC,KAAD,CAApC;;AACA,MAAMS,UAAU,GAAGT,OAAO,CAAC,wBAAD,CAA1B;;AACA,MAAMU,OAAO,GAAGV,OAAO,CAAC,mBAAD,CAAvB;;AACA,MAAMW,QAAQ,GAAGX,OAAO,CAAC,uBAAD,CAAxB;;AACA,MAAMY,OAAO,GAAGZ,OAAO,CAAC,oBAAD,CAAvB;;AAEA,MAAMa,YAAY,GAAGb,OAAO,CAAC,eAAD,CAA5B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAuBAc,MAAM,CAACC,OAAP;AAAA;;AAAA;;AACE;;;;;;;;;;AAWA;;;;;;;;;AASA,qBAAYC,QAAZ,EAA2B;AAAA;;AAAA,QAAfA,QAAe;AAAfA,MAAAA,QAAe,GAAJ,EAAI;AAAA;;AAAA;;AACzB;AACA,8BACEjB,WAAW,CACT;AACEkB,MAAAA,IAAI,EAAEZ,QAAQ,EADhB;AAEEa,MAAAA,SAAS,EAAE,EAFb;AAGEC,MAAAA,cAAc,EAAE,EAHlB;AAIEC,MAAAA,YAAY,EAAE,IAJhB;AAKE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,MAAAA,KAAK,EAAE,IA1BT;AA2BEC,MAAAA,IAAI,EAAE,IA3BR;AA4BE;AACAC,MAAAA,UAAU,EAAE,IA7Bd;AA8BE;AACAC,MAAAA,SAAS,EAAE;AACTC,QAAAA,EAAE,EAAE,GADK;AAETC,QAAAA,OAAO,EAAE;AAFA,OA/Bb;AAmCEC,MAAAA,KAAK,EAAE;AACLC,QAAAA,EAAE,EAAElB,OAAO,CAAC,gBAAD,CAAP,CAA0BmB,QAA1B,EADC;AAELL,QAAAA,SAAS,EAAE;AACTI,UAAAA,EAAE,EAAElB,OAAO,CAAC,kBAAD,CAAP,CAA4BmB,QAA5B;AADK;AAFN,OAnCT;AAyCEC,MAAAA,OAAO,EAAE;AACPC,QAAAA,GAAG,EAAE,CADE;AAEPC,QAAAA,MAAM,EAAE,CAFD;AAGPC,QAAAA,IAAI,EAAE,CAHC;AAIPC,QAAAA,KAAK,EAAE;AAJA;AAzCX,KADS,EAiDTlB,QAjDS,CADb,EAFyB,CAwDzB;;AAxDyB,4DAXnB,IAWmB;;AAyDzB,QAAI,CAAC,uBAAuBmB,IAAvB,CAA4B,MAAKC,SAAL,CAAenB,IAA3C,CAAL,EAAuD;AACrD,YAAM,IAAIoB,KAAJ,CACH,+EADG,CAAN;AAGD;;AACD,UAAKC,KAAL,GAAa,MAAKF,SAAL,CAAenB,IAA5B,CA9DyB,CAgEzB;;AACA,QAAI,MAAKsB,MAAT,EAAiB;AACf,YAAKA,MAAL,CAAYC,KAAZ,GAAoB,MAAKF,KAAzB;AACD;;AAnEwB;AAoE1B,GAzFH,CA2FE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;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","sourcesContent":["const __deepMerge = require('../../object/deepMerge');\nconst __blessed = require('blessed');\nconst __parseHtml = require('../../terminal/parseHtml');\nconst __splitEvery = require('../../string/splitEvery');\nconst __countLine = require('../../string/countLine');\nconst __uniqid = require('../../string/uniqid');\nconst __sugarConfig = require('../../config/sugar');\nconst { print, stringify } = require('q-i');\nconst __SPromise = require('../../promise/SPromise');\nconst __color = require('../../color/color');\nconst __hotkey = require('../../keyboard/hotkey');\nconst __clone = require('../../object/clone');\n\nconst __SComponent = require('../SComponent');\n\n/**\n * @name                    SLogPanel\n * @namespace           node.blessed\n * @type                    Class\n *\n * This class define a \"panel\" in the terminal that you can easily configure to have the look and feel that you want\n * through simple settings described bellow.\n *\n * @param           {String}          name            Specify a name for this panel. The name has to stick to this characters only ```[a-zA-Z0-9_-]```\n * @param           {Object}          [settings={}]   An object of settings described bellow:\n * - screen (true) {Boolean}: Specify if you want your panel wrapped inside an \"blessed\"(https://www.npmjs.com/package/blessed) screen object. Useful when you just want to render your panel in the terminal. If you have your own screen object\n *\n * @example         js\n * const SLogPanel = require('@coffeekraken/sugar/node/terminal/SLogPanel');\n * const panel = new SLogPanel('my-cool-pannel', {\n * });\n * panel.log('Hello world');\n *\n * @see       https://www.npmjs.com/package/q-i\n * @see       https://www.npmjs.com/package/blessed\n * @since       2.0.0\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = class SLogPanel extends __SComponent {\n  /**\n   * @name              _name\n   * @type              String\n   * @private\n   *\n   * Store the panel name\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _name = null;\n\n  /**\n   * @name              constructor\n   * @type              Function\n   * @constructor\n   *\n   * Constructor\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(settings = {}) {\n    // save the settings\n    super(\n      __deepMerge(\n        {\n          name: __uniqid(),\n          beforeLog: '',\n          beforeEachLine: '',\n          padBeforeLog: true,\n          // input: {\n          //   width: 3,\n          //   height: 1,\n          //   placeholder: null,\n          //   bottom: 0,\n          //   left: 0,\n          //   focus: true,\n          //   keys: true,\n          //   mouse: true,\n          //   inputOnFocus: true,\n          //   style: {\n          //     fg: __color('terminal.black').toString(),\n          //     bg: __color('terminal.yellow').toString()\n          //   },\n          //   padding: {\n          //     top: 0,\n          //     left: 1,\n          //     right: 1,\n          //     bottom: 0\n          //   }\n          // },\n          mouse: true,\n          keys: true,\n          // vi: true,\n          scrollable: true,\n          // alwaysScroll: true,\n          scrollbar: {\n            ch: ' ',\n            inverse: true\n          },\n          style: {\n            bg: __color('terminal.black').toString(),\n            scrollbar: {\n              bg: __color('terminal.primary').toString()\n            }\n          },\n          padding: {\n            top: 1,\n            bottom: 0,\n            left: 1,\n            right: 1\n          }\n        },\n        settings\n      )\n    );\n\n    // save the name\n    if (!/^[a-zA-Z0-9\\._-\\s]+$/.test(this._settings.name)) {\n      throw new Error(\n        `The name of an SLog instance can contain only letters like [a-zA-Z0-9_-. ]...`\n      );\n    }\n    this._name = this._settings.name;\n\n    // render the screen\n    if (this.screen) {\n      this.screen.title = this._name;\n    }\n  }\n\n  // /**\n  //  * @name                  _input\n  //  * @type                  Function\n  //  * @private\n  //  *\n  //  * This method return a pre-configured textbox\n  //  *\n  //  * @param       {Object}      [settings={}]       A blessed textbox settings object with some additional settings:\n  //  * - focus (true) {Boolean}: Specify if you want the input to have focus directly\n  //  * - placeholder (null) {String}: Specify a placeholder to set in the input\n  //  * @return      {Textbox}             A blessed textbox\n  //  *\n  //  * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n  //  */\n  // _input(settings = {}) {\n  //   settings = __deepMerge(\n  //     {\n  //       focus: true,\n  //       placeholder: null\n  //     },\n  //     __clone(this._settings.input, true),\n  //     settings\n  //   );\n\n  //   const input = __blessed.textbox(settings);\n  //   input.promise = new __SPromise((resolve, reject, trigger, cancel) => {});\n\n  //   input.on('attach', () => {\n  //     setTimeout(() => {\n  //       if (settings.focus) input.focus();\n\n  //       let placeholderPressed = false;\n  //       if (settings.placeholder) {\n  //         const placeholder = settings.placeholder.toString();\n  //         input.setValue(placeholder);\n  //         input.width =\n  //           placeholder.length + input.padding.left + input.padding.right;\n  //       }\n\n  //       let isBackspace = false;\n  //       input.onceKey('backspace', () => {\n  //         isBackspace = true;\n  //       });\n\n  //       input.on('keypress', (value) => {\n  //         setTimeout(() => {\n  //           if (settings.placeholder && !placeholderPressed) {\n  //             if (!isBackspace) {\n  //               input.setValue(value);\n  //             }\n  //             placeholderPressed = true;\n  //           }\n  //           input.width =\n  //             input.getValue().length +\n  //             input.padding.left +\n  //             input.padding.right +\n  //             2;\n  //           this.update();\n  //         });\n  //       });\n  //       input.on('submit', (value) => {\n  //         input.promise.resolve(value);\n  //         input.style.bg = __color('terminal.green').toString();\n  //         input.width =\n  //           input.getValue().length + input.padding.left + input.padding.right;\n  //         this.update();\n  //       });\n  //       input.on('cancel', () => {\n  //         input.promise.cancel();\n  //         input.style.bg = __color('terminal.red').toString();\n  //         input.width =\n  //           input.getValue().length + input.padding.left + input.padding.right;\n  //         this.update();\n  //       });\n  //       this.update();\n  //     });\n  //   });\n  //   return input;\n  // }\n\n  // /**\n  //  * @name                   input\n  //  * @type                  Function\n  //  *\n  //  * Allow to display an input to ask something to the user\n  //  *\n  //  * @param       {Object}      [settings = {}]       A settings object to configure your input. Here's the available settings:\n  //  * - width (100%) {String|Number}: Specify the width of your input\n  //  * - height (1) {String|Number}: Specify the height of your input\n  //  * - placeholder (null) {String}: Specify a placeholder to display before the user starts to write something\n  //  *\n  //  * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n  //  */\n  // input(settings = {}) {\n  //   settings = __deepMerge(\n  //     this._settings.input,\n  //     {\n  //       top: this._settings.logBox.content.split('\\n').length,\n  //       left:\n  //         __countLine(__parseHtml(this._settings.beforeLog)) +\n  //         __countLine(__parseHtml(this._settings.beforeEachLine))\n  //     },\n  //     settings\n  //   );\n\n  //   const input = this._input(settings);\n\n  //   setTimeout(() => {\n  //     const _beforeLog =\n  //       __parseHtml(this._settings.beforeLog) +\n  //       __parseHtml(this._settings.beforeEachLine);\n  //     const beforeBox = __blessed.box({\n  //       top: this._settings.logBox.content.split('\\n').length,\n  //       left: 0,\n  //       width: __countLine(_beforeLog),\n  //       height: 1,\n  //       content: _beforeLog\n  //     });\n\n  //     this.log(' ');\n  //     this._settings.logBox.append(beforeBox);\n  //     this._settings.logBox.append(input);\n  //   });\n\n  //   this._settings.logBox.setScrollPerc(100);\n\n  //   return input;\n  // }\n\n  // /**\n  //  * @name                  summary\n  //  * @type                  Function\n  //  *\n  //  * Allow to display some editable informations in a list format.\n  //  * This is usefull when you want to propose to the user some default informations that he can update if wanted\n  //  * then send back to the command process\n  //  *\n  //  * @param      {Object}             settings = {}               A settings object to configure your summary input\n  //  *\n  //  * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n  //  */\n  // summary(settings = {}) {}\n\n  /**\n   * @name                  log\n   * @type                  Function\n   *\n   * Allow to log some content in the panel\n   *\n   * @param       {String}        message         The message to log\n   * @param       {Object}        [settings={}]   Some settings to override for this particular log\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  log(message, settings = {}) {\n    if (!Array.isArray(message)) message = [message];\n\n    const logSettings = __deepMerge(this._settings, settings);\n\n    let lines = [];\n\n    message.forEach((m) => {\n      // check message type\n      switch (typeof m) {\n        case 'object':\n          m = stringify(m);\n          break;\n      }\n      if (Array.isArray(m)) m = stringify(m);\n\n      m = __parseHtml(m || '');\n\n      let beforeLog = logSettings.beforeLog;\n      if (beforeLog) {\n        if (typeof beforeLog === 'function') {\n          beforeLog = beforeLog(m);\n        }\n        if (typeof beforeLog === 'number') {\n          beforeLog = ' '.repeat(parseInt(beforeLog));\n        }\n      } else {\n        beforeLog = '';\n      }\n\n      let beforeEachLine = logSettings.beforeEachLine;\n      if (beforeEachLine) {\n        if (typeof beforeEachLine === 'function') {\n          beforeEachLine = beforeEachLine(m);\n        }\n        if (typeof beforeEachLine === 'number') {\n          beforeEachLine = ' '.repeat(parseInt(beforeEachLine));\n        }\n      } else {\n        beforeEachLine = '';\n      }\n\n      let formatedBeforeEachLine = __parseHtml(beforeEachLine);\n      let formatedBeforeLog = __parseHtml(beforeLog);\n      let formatedMessage = m;\n\n      // split lines\n      formatedMessage = formatedMessage.split('\\n');\n\n      formatedMessage.map((line, i) => {\n        line = __splitEvery(\n          line,\n          this.width -\n            logSettings.padding.left -\n            logSettings.padding.right -\n            __countLine(formatedBeforeLog) -\n            __countLine(formatedBeforeEachLine)\n        );\n        line = line.map((l, j) => {\n          if (i === 0 && j === 0) {\n            return formatedBeforeLog + formatedBeforeEachLine + l;\n          } else {\n            return (\n              ' '.repeat(__countLine(formatedBeforeLog)) +\n              formatedBeforeEachLine +\n              l\n            );\n          }\n        });\n\n        lines = [...lines, ...line];\n      });\n\n      // append the content to the panel\n      this.pushLine(lines.join('\\n'));\n    });\n\n    this.update();\n\n    this.setScrollPerc(100);\n\n    // return the lines\n    return lines;\n  }\n};\n"]}
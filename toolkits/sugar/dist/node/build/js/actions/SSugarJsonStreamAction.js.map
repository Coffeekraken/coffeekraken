{"version":3,"sources":["SSugarJsonStreamAction.js"],"names":["__SActionsStreamAction","require","__globby","__path","__deepMerge","module","exports","settings","id","streamObj","resolve","reject","dirs","sugarJsonDirs","Array","isArray","files","dir","sync","forEach","filePath","sugarJson","sugarJsonPath","dirname","js","main","data","type","required"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,sBAAsB,GAAGC,OAAO,CAAC,sCAAD,CAAtC;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,QAAD,CAAxB;;AACA,IAAME,MAAM,GAAGF,OAAO,CAAC,MAAD,CAAtB;;AACA,IAAMG,WAAW,GAAGH,OAAO,CAAC,2BAAD,CAA3B;AAEA;;;;;;;;;;;;;;;;AAcAI,MAAM,CAACC,OAAP;AAAA;;AAAA;;AACE;;;;;;;;;;AAgBA;;;;;;;;;AASA,kCAAYC,QAAZ,EAA2B;AAAA,QAAfA,QAAe;AAAfA,MAAAA,QAAe,GAAJ,EAAI;AAAA;;AAAA;;AAAA,6BAEvBH,WAAW,CACT;AACEI,MAAAA,EAAE,EAAE;AADN,KADS,EAITD,QAJS,CAFY;AAS1B;AAED;;;;;;;;;;;AArCF;AAAA;AAAA,wBA8CME,SA9CN,EA8CiBF,QA9CjB,EA8C2B;AACvB,sFAAUE,SAAV;AAAA,qCAAqB,WAAOC,OAAP,EAAgBC,MAAhB,EAA2B;AAC9C;AACA,cAAIC,IAAI,GAAGH,SAAS,CAACI,aAArB;AACA,cAAI,CAACC,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAL,EAA0BA,IAAI,GAAG,CAACA,IAAD,CAAP;AAC1B,cAAII,KAAK,GAAG,EAAZ;;AACA,eAAK,IAAIC,GAAT,IAAgBL,IAAhB,EAAsB;AACpBI,YAAAA,KAAK,GAAG,CACN,GAAGA,KADG,EAEN,GAAGd,QAAQ,CAACgB,IAAT,CAAc,WACZD,GADY,4BAEZA,GAFY,2CAGZA,GAHY,kCAAd,CAFG,CAAR;AAQD,WAd6C,CAgB9C;;;AACAD,UAAAA,KAAK,CAACG,OAAN,CAAeC,QAAD,IAAc;AAC1B,gBAAMC,SAAS,GAAGpB,OAAO,CAACmB,QAAD,CAAzB;;AACA,gBAAME,aAAa,GAAGnB,MAAM,CAACoB,OAAP,CAAeH,QAAf,CAAtB;;AACA,gBAAIC,SAAS,CAACG,EAAV,IAAgBH,SAAS,CAACG,EAAV,CAAaC,IAAjC,EAAuC;AACrChB,cAAAA,SAAS,CAACiB,IAAV,oCACYJ,aADZ,cAC6BD,SAAS,CAACG,EAAV,CAAaC,IAD1C,8BAEIhB,SAAS,CAACiB,IAFd;AAID;AACF,WATD;AAWAhB,UAAAA,OAAO,CAACD,SAAD,CAAP;AACD,SA7BD;;AAAA;AAAA;AAAA;AAAA;AA8BD;AA7EH;;AAAA;AAAA,EAAsDT,sBAAtD,4CAUyB;AACrBa,EAAAA,aAAa,EAAE;AACbc,IAAAA,IAAI,EAAE,sBADO;AAEbC,IAAAA,QAAQ,EAAE;AAFG;AADM,CAVzB","sourcesContent":["const __SActionsStreamAction = require('../../../stream/SActionsStreamAction');\nconst __globby = require('globby');\nconst __path = require('path');\nconst __deepMerge = require('../../../object/deepMerge');\n\n/**\n * @name                SSugarJsonStreamAction\n * @namespace           node.build.js.actions\n * @type                Class\n * @extends             SActionsStreamAction\n *\n * This action is responsible of searching for packages with a ```sugar.json``` root file\n * and impoirting the main js files before compilation\n *\n * @param       {Object}Â        streamObj          The streamObj object with the properties described bellow:\n * @return      {Promise}                         A simple promise that will be resolved when the process is finished\n *\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = class SSugarJsonStreamAction extends __SActionsStreamAction {\n  /**\n   * @name            definitionObj\n   * @type             Object\n   * @static\n   *\n   * Store the definition object that specify the streamObj required properties, types, etc...\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  static definitionObj = {\n    sugarJsonDirs: {\n      type: 'String|Array<String>',\n      required: true\n    }\n  };\n\n  /**\n   * @name            constructor\n   * @type            Function\n   * @constructor\n   *\n   * Constructor\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(settings = {}) {\n    super(\n      __deepMerge(\n        {\n          id: 'actionStream.action.js.sugarJs'\n        },\n        settings\n      )\n    );\n  }\n\n  /**\n   * @name          run\n   * @type          Function\n   * @async\n   *\n   * Override the base class run method\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  run(streamObj, settings) {\n    super.run(streamObj, async (resolve, reject) => {\n      // search for sugar.json files\n      let dirs = streamObj.sugarJsonDirs;\n      if (!Array.isArray(dirs)) dirs = [dirs];\n      let files = [];\n      for (let dir of dirs) {\n        files = [\n          ...files,\n          ...__globby.sync([\n            `${dir}/sugar.json`,\n            `${dir}/node_modules/*/sugar.json`,\n            `${dir}/node_modules/*/*/sugar.json`\n          ])\n        ];\n      }\n\n      // read each sugar files\n      files.forEach((filePath) => {\n        const sugarJson = require(filePath);\n        const sugarJsonPath = __path.dirname(filePath);\n        if (sugarJson.js && sugarJson.js.main) {\n          streamObj.data = `\n            import \"${sugarJsonPath}/${sugarJson.js.main}\";\n            ${streamObj.data};\n          `;\n        }\n      });\n\n      resolve(streamObj);\n    });\n  }\n};\n"]}
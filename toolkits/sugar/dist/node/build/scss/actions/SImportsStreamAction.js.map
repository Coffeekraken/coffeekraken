{"version":3,"sources":["SImportsStreamAction.js"],"names":["__SActionsStreamAction","require","__Bundler","Bundler","__getFilename","__sugarConfig","__getScssImportsStrings","__deepMerge","module","exports","settings","name","id","streamObj","resolve","reject","importsStrings","imports","data","prepend","append","importsString","atUseReg","atUseMatches","match","forEach","atUseLine","replace","join","type","required"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,sBAAsB,GAAGC,OAAO,CAAC,sCAAD,CAAtC;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAP,CAAuBE,OAAzC;;AACA,IAAMC,aAAa,GAAGH,OAAO,CAAC,sBAAD,CAA7B;;AACA,IAAMI,aAAa,GAAGJ,OAAO,CAAC,uBAAD,CAA7B;;AACA,IAAMK,uBAAuB,GAAGL,OAAO,CAAC,0BAAD,CAAvC;;AACA,IAAMM,WAAW,GAAGN,OAAO,CAAC,2BAAD,CAA3B;AAEA;;;;;;;;;;;;;;;AAaAO,MAAM,CAACC,OAAP;AAAA;;AAAA;;AACE;;;;;;;;;;AAgBA;;;;;;;;;AASA,gCAAYC,QAAZ,EAA2B;AAAA,QAAfA,QAAe;AAAfA,MAAAA,QAAe,GAAJ,EAAI;AAAA;;AAAA;;AAAA,6BAEvBH,WAAW,CACT;AACEI,MAAAA,IAAI,EAAE,SADR;AAEEC,MAAAA,EAAE,EAAE;AAFN,KADS,EAKTF,QALS,CAFY;AAU1B;AAED;;;;;;;;;;;AAtCF;AAAA;AAAA,wBA+CMG,SA/CN,EA+CiBH,QA/CjB,EA+C2B;AACvB,2FAAiBG,SAAjB;AAAA,qCAA4B,WAAOC,OAAP,EAAgBC,MAAhB,EAA2B;AACrD,cAAMC,cAAc,GAAGV,uBAAuB,CAACO,SAAS,CAACI,OAAX,CAA9C;;AAEAJ,UAAAA,SAAS,CAACK,IAAV,GAAiBL,SAAS,CAACK,IAAV,uBAEbF,cAAc,CAACG,OAFF,uBAGbN,SAAS,CAACK,IAHG,uBAIbF,cAAc,CAACI,MAJF,gBAMbC,aAAa,CAACF,OAAd,GAAwBH,cAAc,CAACI,MAN3C;AAQA,cAAME,QAAQ,GAAG,aAAjB;AACA,cAAMC,YAAY,GAAGV,SAAS,CAACK,IAAV,CAAeM,KAAf,CAAqBF,QAArB,CAArB;;AAEA,cAAIC,YAAJ,EAAkB;AAChB;AACAA,YAAAA,YAAY,CAACE,OAAb,CAAsBC,SAAD,IAAe;AAClCb,cAAAA,SAAS,CAACK,IAAV,GAAiBL,SAAS,CAACK,IAAV,CAAeS,OAAf,CAAuBD,SAAvB,EAAkC,EAAlC,CAAjB;AACD,aAFD,EAFgB,CAKhB;;AACAb,YAAAA,SAAS,CAACK,IAAV,yBACIK,YAAY,CAACK,IAAb,CAAkB,IAAlB,CADJ,yBAEIf,SAAS,CAACK,IAFd;AAID,WAxBoD,CA0BrD;;;AACAJ,UAAAA,OAAO,CAACD,SAAD,CAAP;AACD,SA5BD;;AAAA;AAAA;AAAA;AAAA;AA6BD;AA7EH;;AAAA;AAAA,EAAoDb,sBAApD,4CAUyB;AACrBiB,EAAAA,OAAO,EAAE;AACPY,IAAAA,IAAI,EAAE,eADC;AAEPC,IAAAA,QAAQ,EAAE;AAFH;AADY,CAVzB","sourcesContent":["const __SActionsStreamAction = require('../../../stream/SActionsStreamAction');\nconst __Bundler = require('scss-bundle').Bundler;\nconst __getFilename = require('../../../fs/filename');\nconst __sugarConfig = require('../../../config/sugar');\nconst __getScssImportsStrings = require('../getScssImportsStrings');\nconst __deepMerge = require('../../../object/deepMerge');\n\n/**\n * @name                SImportsStreamAction\n * @namespace           node.build.scss.actions\n * @type                Class\n * @extends             SActionsStreamAction\n *\n * This function is responsible of importing some packages directly on top of the scss files\n *\n * @param       {Object}Â        streamObj          The streamObj object with the properties described bellow:\n * @return      {Promise}                         A simple promise that will be resolved when the process is finished\n *\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = class SImportsStreamAction extends __SActionsStreamAction {\n  /**\n   * @name            definitionObj\n   * @type             Object\n   * @static\n   *\n   * Store the definition object that specify the streamObj required properties, types, etc...\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  static definitionObj = {\n    imports: {\n      type: 'Array<Object>',\n      required: false\n    }\n  };\n\n  /**\n   * @name            constructor\n   * @type            Function\n   * @constructor\n   *\n   * Constructor\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(settings = {}) {\n    super(\n      __deepMerge(\n        {\n          name: 'Imports',\n          id: 'actionStream.action.scss.imports'\n        },\n        settings\n      )\n    );\n  }\n\n  /**\n   * @name          run\n   * @type          Function\n   * @async\n   *\n   * Override the base class run method\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  run(streamObj, settings) {\n    return super.run(streamObj, async (resolve, reject) => {\n      const importsStrings = __getScssImportsStrings(streamObj.imports);\n\n      streamObj.data = streamObj.data\n        ? `\n        ${importsStrings.prepend}\n        ${streamObj.data}\n        ${importsStrings.append}\n      `\n        : importsString.prepend + importsStrings.append;\n\n      const atUseReg = /\\s?@use.+/gm;\n      const atUseMatches = streamObj.data.match(atUseReg);\n\n      if (atUseMatches) {\n        // remove all the lines from the string\n        atUseMatches.forEach((atUseLine) => {\n          streamObj.data = streamObj.data.replace(atUseLine, '');\n        });\n        // prepend all the @use statements\n        streamObj.data = `\n          ${atUseMatches.join('\\n')}\n          ${streamObj.data}\n        `;\n      }\n\n      // resolve the action\n      resolve(streamObj);\n    });\n  }\n};\n"]}
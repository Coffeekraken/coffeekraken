{"version":3,"sources":["jsObjectToScssMap.js"],"names":["__jsonSass","require","__deepMerge","module","exports","jsObjectToScssMap","object","settings","settingsVariable","quoteKeys","jsObject","scssConfigString","convertJs","split","forEach","line","trim","isComma","substr","slice","prop","value","join","arrayReg","arrayMatches","match","res","map","val","replace","indexOf"],"mappings":";;AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,gBAAD,CAA1B;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,wBAAD,CAA3B;;AAEAE,MAAM,CAACC,OAAP,GAAiB,SAASC,iBAAT,CAA2BC,MAA3B,EAAmCC,QAAnC,EAAkD;AAAA,MAAfA,QAAe;AAAfA,IAAAA,QAAe,GAAJ,EAAI;AAAA;;AACjEA,EAAAA,QAAQ,GAAGL,WAAW,CACpB;AACEM,IAAAA,gBAAgB,EAAE,oBADpB;AAEEC,IAAAA,SAAS,EAAE,CAAC,KAAD,EAAQ,QAAR,EAAkB,aAAlB,EAAiC,eAAjC;AAFb,GADoB,EAKpBF,QALoB,CAAtB;AAQA,QAAMG,QAAQ,GAAGJ,MAAjB;;AAEA,MAAIK,gBAAgB,GAAGX,UAAU,CAACY,SAAX,CAAqBF,QAArB,CAAvB;;AAEAC,EAAAA,gBAAgB,GAAI,GAAEJ,QAAQ,CAACC,gBAAiB,KAAIG,gBAAiB,GAArE;AAEAA,EAAAA,gBAAgB,CAACE,KAAjB,CAAuB,IAAvB,EAA6BC,OAA7B,CAAsCC,IAAD,IAAU;AAC7CA,IAAAA,IAAI,GAAGA,IAAI,CAACC,IAAL,EAAP;AACA,UAAMC,OAAO,GAAGF,IAAI,CAACG,MAAL,CAAY,CAAC,CAAb,MAAoB,GAApC;;AACA,QAAID,OAAJ,EAAa;AACXF,MAAAA,IAAI,GAAGA,IAAI,CAACI,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAP;AACD;;AACD,UAAMC,IAAI,GAAGL,IAAI,CAACF,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAb;AACA,QAAIQ,KAAK,GAAGN,IAAI,CAACF,KAAL,CAAW,GAAX,EAAgBM,KAAhB,CAAsB,CAAtB,EAAyBG,IAAzB,CAA8B,GAA9B,EAAmCN,IAAnC,EAAZ;AAEA,QAAII,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,GAA1B,IAAiCC,KAAK,KAAK,GAA/C,EAAoD,OATP,CAW7C;;AACA,UAAME,QAAQ,GAAG,aAAjB;AACA,UAAMC,YAAY,GAAGH,KAAK,CAACI,KAAN,CAAYF,QAAZ,CAArB;;AACA,QAAIC,YAAJ,EAAkB;AAChB,YAAME,GAAG,GAAGF,YAAY,CAAC,CAAD,CAAZ,CACTX,KADS,CACH,GADG,EAETc,GAFS,CAEJC,GAAD,IAAS;AACZ,eAAQ,IAAGA,GAAG,CAACZ,IAAJ,EAAW,GAAtB;AACD,OAJS,EAKTM,IALS,CAKJ,IALI,CAAZ;AAMAD,MAAAA,KAAK,GAAGA,KAAK,CAACQ,OAAN,CAAcL,YAAY,CAAC,CAAD,CAA1B,EAA+BE,GAA/B,CAAR;AACAf,MAAAA,gBAAgB,GAAGA,gBAAgB,CAACkB,OAAjB,CAAyBd,IAAzB,EAAgC,GAAEK,IAAK,KAAIC,KAAM,EAAjD,CAAnB;AACA;AACD;;AACD,QAAId,QAAQ,CAACE,SAAT,CAAmBqB,OAAnB,CAA2BV,IAA3B,MAAqC,CAAC,CAA1C,EAA6C;AAC7CT,IAAAA,gBAAgB,GAAGA,gBAAgB,CAACkB,OAAjB,CAAyBd,IAAzB,EAAgC,GAAEK,IAAK,MAAKC,KAAM,GAAlD,CAAnB;AACD,GA3BD,EAfiE,CA4CjE;;AACA,SAAOV,gBAAP;AACD,CA9CD","sourcesContent":["const __jsonSass = require('json-sass-vars');\nconst __deepMerge = require('../../object/deepMerge');\n\nmodule.exports = function jsObjectToScssMap(object, settings = {}) {\n  settings = __deepMerge(\n    {\n      settingsVariable: '$sugarUserSettings',\n      quoteKeys: ['src', 'import', 'font-family', 'defaultAction']\n    },\n    settings\n  );\n\n  const jsObject = object;\n\n  let scssConfigString = __jsonSass.convertJs(jsObject);\n\n  scssConfigString = `${settings.settingsVariable}: ${scssConfigString};`;\n\n  scssConfigString.split('\\n').forEach((line) => {\n    line = line.trim();\n    const isComma = line.substr(-1) === ',';\n    if (isComma) {\n      line = line.slice(0, -1);\n    }\n    const prop = line.split(':')[0];\n    let value = line.split(':').slice(1).join(':').trim();\n\n    if (prop === '),' || prop === ')' || value === '(') return;\n\n    // process arrays\n    const arrayReg = /^\\((.*)\\),?/;\n    const arrayMatches = value.match(arrayReg);\n    if (arrayMatches) {\n      const res = arrayMatches[1]\n        .split(',')\n        .map((val) => {\n          return `'${val.trim()}'`;\n        })\n        .join(', ');\n      value = value.replace(arrayMatches[1], res);\n      scssConfigString = scssConfigString.replace(line, `${prop}: ${value}`);\n      return;\n    }\n    if (settings.quoteKeys.indexOf(prop) === -1) return;\n    scssConfigString = scssConfigString.replace(line, `${prop}: \"${value}\"`);\n  });\n\n  // set or append in the \"data\" property\n  return scssConfigString;\n};\n"]}
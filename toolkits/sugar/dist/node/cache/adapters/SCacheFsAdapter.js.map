{"version":3,"sources":["SCacheFsAdapter.js"],"names":["__deepMerge","require","__tmpDir","__fs","__ensureDirSync","__removeSync","__SCacheAdapter","module","exports","settings","path","name","value","fsName","replace","_settings","split","slice","join","writeFileSync","existsSync","readFileSync","unlinkSync","cacheName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,MAAMA,WAAW,GAAGC,OAAO,CAAC,wBAAD,CAA3B;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,iBAAD,CAAxB;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,IAAD,CAApB;;AACA,MAAMG,eAAe,GAAGH,OAAO,CAAC,wBAAD,CAA/B;;AACA,MAAMI,YAAY,GAAGJ,OAAO,CAAC,qBAAD,CAA5B;;AAEA,MAAMK,eAAe,GAAGL,OAAO,CAAC,6CAAD,CAA/B;AAEA;;;;;;;;;;;;;;;;;;;AAiBAM,MAAM,CAACC,OAAP;AAAA;;AAAA;;AACE;;;;;;;;;;AAUA,2BAAYC,QAAZ,EAA2B;AAAA,QAAfA,QAAe;AAAfA,MAAAA,QAAe,GAAJ,EAAI;AAAA;;AAAA;;AAAA,6BAEvBT,WAAW,CACT;AACEU,MAAAA,IAAI,EAAG,GAAER,QAAQ,EAAG;AADtB,KADS,EAITO,QAJS,CAFY;AAS1B;AAED;;;;;;;;;;;;;;;;;;;;AAtBF;AAAA;AAAA,8BAwCYE,IAxCZ,EAwCkBC,KAxClB,EAwCyB;AACrB;AACA,YAAMC,MAAM,GAAI,GAAEF,IAAI,CAACG,OAAL,CAAa,GAAb,EAAkB,GAAlB,CAAuB,OAAzC,CAFqB,CAGrB;;AACAV,MAAAA,eAAe,CACZ,GAAE,KAAKW,SAAL,CAAeL,IAAK,IAAGG,MAAM,CAACG,KAAP,CAAa,GAAb,EAAkBC,KAAlB,CAAwB,CAAxB,EAA2B,CAAC,CAA5B,EAA+BC,IAA/B,CAAoC,GAApC,CAAyC,EADtD,CAAf,CAJqB,CAOrB;;;AACAf,MAAAA,IAAI,CAACgB,aAAL,CAAoB,GAAE,KAAKJ,SAAL,CAAeL,IAAK,IAAGG,MAAO,EAApD,EAAuDD,KAAvD,EARqB,CASrB;;;AACA,aAAO,IAAP;AACD;AAED;;;;;;;;;;;;;;;AArDF;AAAA;AAAA,8BAmEYD,IAnEZ,EAmEkB;AACd;AACA,YAAME,MAAM,GAAI,GAAEF,IAAI,CAACG,OAAL,CAAa,GAAb,EAAkB,GAAlB,CAAuB,OAAzC,CAFc,CAGd;;AACA,UAAI,CAACX,IAAI,CAACiB,UAAL,CAAiB,GAAE,KAAKL,SAAL,CAAeL,IAAK,IAAGG,MAAO,EAAjD,CAAL,EAA0D,OAAO,IAAP,CAJ5C,CAKd;;AACA,aAAOV,IAAI,CAACkB,YAAL,CAAmB,GAAE,KAAKN,SAAL,CAAeL,IAAK,IAAGG,MAAO,EAAnD,EAAsD,MAAtD,CAAP;AACD;AAED;;;;;;;;;;;;;;;AA5EF;AAAA;AAAA,kCA0FeF,IA1Ff,EA0FqB;AACjB;AACA,YAAME,MAAM,GAAI,GAAEF,IAAI,CAACG,OAAL,CAAa,GAAb,EAAkB,GAAlB,CAAuB,OAAzC,CAFiB,CAGjB;;AACA,aAAOX,IAAI,CAACmB,UAAL,CAAiB,GAAE,KAAKP,SAAL,CAAeL,IAAK,IAAGG,MAAO,EAAjD,CAAP;AACD;AAED;;;;;;;;;;;;;;;AAjGF;AAAA;AAAA,gCA+GcU,SA/Gd,EA+GyB;AACrB;AACA,aAAOlB,YAAY,CAAE,GAAE,KAAKU,SAAL,CAAeL,IAAK,IAAGa,SAAU,EAArC,CAAnB;AACD;AAlHH;;AAAA;AAAA,EAA+CjB,eAA/C","sourcesContent":["const __deepMerge = require('../../object/deepMerge');\nconst __tmpDir = require('../../fs/tmpDir');\nconst __fs = require('fs');\nconst __ensureDirSync = require('../../fs/ensureDirSync');\nconst __removeSync = require('../../fs/removeSync');\n\nconst __SCacheAdapter = require('../../../../js/cache/adapters/SCacheAdapter');\n\n/**\n * @name                                SCacheFsAdapter\n * @namespace           node.fs.cacheAdapters\n * @type                                Class\n *\n * A filesystem SCache adapter that allows you to store your cache items on the user system\n *\n * @example             js\n * const cache = new SCache({\n *    ttl: 100,\n *    adapter: new SCacheFsAdapter({\n *      path: '/my/cool/folder\n *    })\n * });\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = class SCacheFsAdapter extends __SCacheAdapter {\n  /**\n   * @name                              constructor\n   * @type                              Function\n   *\n   * Construct the SCacheFsAdapter instance with the settings passed in object format. See description bellow.\n   *\n   * @param         {Object}          [settings={}]             An object to configure the SCacheFsAdapter instance. This is specific to each adapters.settings.settings...\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(settings = {}) {\n    super(\n      __deepMerge(\n        {\n          path: `${__tmpDir()}/SCache`\n        },\n        settings\n      )\n    );\n  }\n\n  /**\n   * @name                          set\n   * @type                          Function\n   *\n   * Set a cache item on the filesystem\n   *\n   * @param             {String}              name              The item name\n   * @param             {Mixed}               value             The value to save\n   * @param             {Object}              [settings={}]     A settings object to override the default ones defined on the SCache instance\n   * @return            {Object|Boolean}                        Return the objectToSave generated by the \"this.processItem\" method, or false if something goes wrong...\n   *\n   * @example           js\n   * await myCache.set('myCoolItem', { hello: 'world' }, {\n   *    ttl: 40000\n   * });\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  async set(name, value) {\n    // generate the item fs name\n    const fsName = `${name.replace('.', '/')}.json`;\n    // ensure we have the folder\n    __ensureDirSync(\n      `${this._settings.path}/${fsName.split('/').slice(0, -1).join('/')}`\n    );\n    // write the json file\n    __fs.writeFileSync(`${this._settings.path}/${fsName}`, value);\n    // write has been done correctly\n    return true;\n  }\n\n  /**\n   * @name                          get\n   * @type                          Function\n   *\n   * Get a cache item on the filesystem\n   *\n   * @param             {String}              name              The item name\n   * @return            {Object|Boolean}                        Return the objectToSave generated by the \"this.processItem\" method, or false if something goes wrong...\n   *\n   * @example           js\n   * await myCache.get('myCoolItem');\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  async get(name) {\n    // generate the item fs name\n    const fsName = `${name.replace('.', '/')}.json`;\n    // check that the file exists\n    if (!__fs.existsSync(`${this._settings.path}/${fsName}`)) return null;\n    // read the json file\n    return __fs.readFileSync(`${this._settings.path}/${fsName}`, 'utf8');\n  }\n\n  /**\n   * @name                          delete\n   * @type                          Function\n   *\n   * Delete a cache item on the filesystem\n   *\n   * @param             {String}              name              The item name\n   * @return            {Boolean}                               true if all of, false if not...\n   *\n   * @example           js\n   * await myCache.delete('myCoolItem');\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  async delete(name) {\n    // generate the item fs name\n    const fsName = `${name.replace('.', '/')}.json`;\n    // read the json file\n    return __fs.unlinkSync(`${this._settings.path}/${fsName}`);\n  }\n\n  /**\n   * @name                          clear\n   * @type                          Function\n   *\n   * Clear all the items in the current cache\n   *\n   * @param             {String}              cacheName              The current cache name to delete\n   * @return            {Boolean}                               true if all of, false if not...\n   *\n   * @example           js\n   * await myCache.clear;\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  async clear(cacheName) {\n    // read the json file\n    return __removeSync(`${this._settings.path}/${cacheName}`);\n  }\n};\n"]}
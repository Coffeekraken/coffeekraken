{"version":3,"sources":["SCli.js"],"names":["__typeof","require","__buildCommandLine","__validateCliDefinitionObject","__SChildProcess","__deepMerge","__parseHtml","__argsToObject","__isChildProcess","__output","__parseArgs","__toString","module","exports","settings","_settings","id","constructor","name","includeAllParams","output","defaultParamsObj","_checkCliIntegrity","command","Error","definitionObj","_run","definitionObjCheck","paramsObj","_runningProcess","outputSettings","on","data","time","Date","now","value","childProcess","commandString","run","trigger","temp","_runningParamsObj","cancel","Object","assign","cliString"],"mappings":"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","sourcesContent":["const __typeof = require('../value/typeof');\nconst __buildCommandLine = require('./buildCommandLine');\nconst __validateCliDefinitionObject = require('../validation/cli/validateCliDefinitionObject');\nconst __SChildProcess = require('../process/SChildProcess');\nconst __deepMerge = require('../object/deepMerge');\nconst __parseHtml = require('../terminal/parseHtml');\nconst __argsToObject = require('../cli/argsToObject');\nconst __isChildProcess = require('../is/childProcess');\nconst __output = require('../process/output');\nconst __parseArgs = require('../cli/parseArgs');\nconst __toString = require('../string/toString');\n\n/**\n * @name                SCli\n * @namespace           node.cli\n * @type                Class\n *\n * This class represent a basic CLI command with his definition object, his command string, etc...\n *\n * @param       {String}        commandString         The command string that contains arguments tokens and the \"%arguments\" token where you want the parsed arguments to be placed\n * @param       {Object}Â        definitionObj         The definition object that represent all the available arguments, their types, etc... Here's the definitionObj format:\n * - argName:\n *    - type (null) {String}: The argument type like \"String\", \"Boolean\", \"Array\", \"Number\" or \"Object\"\n *    - alias (null) {String}: A 1 letter alias for the argument to be used like \"-a\", \"-g\", etc...\n *    - description (null) {String}: A small and efficient argument description\n *    - default (null) {Mixed}: The default argument value if nothing is specified\n *    - level (1) {Number}: This represent the \"importance\" of the argument. An argument with level 1 is an argument often used that will be displayed in the summary command list. An argument of level 2 if less important and can be skipped.\n *\n * @example         js\n * const SCli = require('@coffeekraken/sugar/js/cli/SCli');\n * class MyCli extends SCli {\n *    static command = 'php %hostname:%port %rootDir %arguments';\n *    static definitionObj = {\n *      hostname: {\n *        type: 'String',\n *        description: 'Server hostname',\n *        default: 'localhost'\n *      },\n *      port: {\n *        type: 'Number',\n *        description: 'Server port',\n *        default: 8080\n *      },\n *      // etc...\n *    }:\n *    constructor(settings = {}) {\n *      super(settings);\n *    }\n * }\n * const myCli = new MyCli();\n * myCli.getCommandLine({\n *    port: 8888\n * }); // => php localhost:8888 .\n *\n * @since       2.0.0\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = class SCli {\n  /**\n   * @name          _runningProcess\n   * @type          SPromise\n   * @private\n   *\n   * Store the spawned child process\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _runningProcess = null;\n\n  /**\n   * @name        _runningParamsObj\n   * @type        Object\n   * @private\n   *\n   * Store the currently running process arguments object\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _runningParamsObj = {};\n\n  /**\n   * @name        _settings\n   * @type        Object\n   * @private\n   *\n   * Store the instance settings\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _settings = {};\n\n  /**\n   * @name        constructor\n   * @type        Function\n   * @constructor\n   *\n   * Constructor\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(settings = {}) {\n    // save the settings\n    this._settings = __deepMerge(\n      {\n        id: this.constructor.name,\n        name: null,\n        includeAllParams: true,\n        output: false,\n        defaultParamsObj: {}\n      },\n      settings\n    );\n    // check integrity\n    this._checkCliIntegrity();\n  }\n\n  /**\n   * @name        parseArgs\n   * @type        Function\n   * @static\n   *\n   * This static method take a simple cli configuration string and returns you\n   * an object representing each values passed.\n   * This methods uses the static definition object of the class to do his job.\n   *\n   * @param     {String}          cliString         The cli string you want to parse\n   * @return    {Object}                            The object of configuration values\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  static parseArgs(cliString) {\n    return __parseArgs(cliString, this.definitionObj);\n  }\n\n  /**\n   * @name        commandString\n   * @type        String\n   * @get\n   *\n   * Access the command string\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get commandString() {\n    return this.constructor.command;\n  }\n\n  /**\n   * @name        definitionObj\n   * @type        String\n   * @get\n   *\n   * Access the definition object\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get definitionObj() {\n    return Object.assign({}, this.constructor.definitionObj);\n  }\n\n  /**\n   * @name        runningParamsObj\n   * @type        Object\n   * @get\n   *\n   * Get the current process lauched with \"run\" or \"runWithOutput\" methods arguments\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get runningParamsObj() {\n    return this._runningParamsObj || {};\n  }\n\n  /**\n   * @name        _checkCliIntegrity\n   * @type        Function\n   * @private\n   *\n   * This method simply check that the extended SCli instance has the needed overrided methods, etc...\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _checkCliIntegrity() {\n    // const prototypeArray = Object.getOwnPropertyNames(\n    //   Object.getPrototypeOf(this)\n    // );\n    // check static properties\n    if (\n      !this.constructor.command ||\n      typeof this.constructor.command !== 'string'\n    ) {\n      throw new Error(\n        __parseHtml(\n          `An <green>SCli</green> based class like your \"<yellow>${this.constructor.name}</yellow>\" MUST have a \"<cyan>command</cyan>\" static string property...`\n        )\n      );\n    }\n    if (\n      !this.constructor.definitionObj ||\n      typeof this.constructor.definitionObj !== 'object'\n    ) {\n      throw new Error(\n        __parseHtml(\n          `An <green>SCli</green> based class like your \"<yellow>${this.constructor.name}</yellow>\" MUST have a \"<cyan>definitionObj</cyan>\" static object property...`\n        )\n      );\n    }\n\n    // existence of the ```_run``` method\n    if (!this._run || typeof this._run !== 'function') {\n      throw new Error(\n        __parseHtml(\n          `An <green>SCli</green> based class like your \"<yellow>${this.constructor.name}</yellow>\" MUST has a \"<cyan>_run</cyan>\" method that has to be responsible of executing your process when calling the \"run\" method...`\n        )\n      );\n    }\n\n    // check definition object\n    const definitionObjCheck = __validateCliDefinitionObject(\n      this.definitionObj\n    );\n    if (definitionObjCheck !== true) throw new Error(definitionObjCheck);\n  }\n\n  /**\n   * @name          run\n   * @type          Function\n   * @async\n   *\n   * This method run a new child process with the provided arguments and the definition object.\n   * The returned object MUST be an SPromise instance that emit these \"events\":\n   * - start: Triggered when the command start a process\n   * - close: Triggered when the process is closed\n   * - kill: Triggered when the process has been killed\n   * - success: Triggered when the process has finished without any error\n   * - error: Triggered when the process has had an error\n   * - log: Triggered when some data are pushed in the stdout channel\n   *\n   * You can use the \"spawn\" function available under the namespace \"sugar.node.childProcess\" in order to\n   * spawn the process with already all these events setted...\n   *\n   * @param       {Object}        [paramsObj=settings.defaultParamsObj]      An argument object to override the default values of the definition object\n   * @param       {Boolean}     [includeAllParams=settings.includeAllParams]       Specify if you want all the arguments in the definition object in your command line string, or if you just want the one passed in your paramsObj argument\n   * @return      {SPromise}                        An SPromise instance on which you can subscribe for \"events\" described above\n   *\n   * @example       js\n   * myCli.run({\n   *    port: 8888\n   * }).on('start', data => {\n   *    // do something...\n   * });\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  run(paramsObj = {}, settings = {}) {\n    if (this._runningProcess) {\n      throw new Error(\n        `You cannot spawn multiple \"${this.constructor.name}\" process at the same time. Please kill the currently running one using the \"kill\" method...`\n      );\n    }\n\n    settings = __deepMerge(this._settings, settings);\n    // make sure we have an object as args\n    paramsObj = __argsToObject(paramsObj, this.definitionObj);\n    paramsObj = __deepMerge(this._settings.defaultParamsObj, paramsObj);\n\n    if (__isChildProcess()) {\n      // run the process\n      this._runningProcess = this._run(paramsObj, settings);\n\n      if (settings.output) {\n        const outputSettings =\n          typeof settings.output === 'object' ? settings.output : {};\n        __output(this._runningProcess, outputSettings);\n      }\n\n      this._runningProcess.on('resolve', (data) => {\n        data = {\n          time: Date.now(),\n          value: data\n        };\n        return data;\n      });\n\n      return this._runningProcess;\n    } else {\n      const childProcess = new __SChildProcess(this.commandString, {\n        id: settings.id,\n        definitionObj: this.definitionObj,\n        defaultParamsObj: settings.defaultParamsObj\n      });\n\n      this._runningProcess = childProcess.run(paramsObj);\n\n      if (settings.output) {\n        const outputSettings =\n          typeof settings.output === 'object' ? settings.output : {};\n        __output(this._runningProcess, outputSettings);\n      }\n    }\n\n    this._runningProcess.trigger('log', {\n      temp: true,\n      value: `Launching the SCli \"<primary>${\n        this._settings.name || this._settings.id\n      }</primary>\" process...`\n    });\n\n    // save running process params\n    this._runningParamsObj = paramsObj;\n\n    // listen for some events on the process\n    this._runningProcess.on('cancel,finally', () => {\n      this._runningProcess = null;\n      this._runningParamsObj = null;\n    });\n\n    return this._runningProcess;\n  }\n\n  /**\n   * @name          toString\n   * @type          Function\n   *\n   * This method allows you to pass an arguments object and return the builded command line string depending on the definition object.\n   *\n   * @param       {Object}      paramsObj         An argument object to use for the command line string generation\n   * @param       {Boolean}     [includeAllParams=settings.includeAllParams]       Specify if you want all the arguments in the definition object in your command line string, or if you just want the one passed in your paramsObj argument\n   * @return      {String}                        The generated command line string\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  toString(paramsObj = {}, includeAllParams = this._settings.includeAllParams) {\n    return __buildCommandLine(\n      this.commandString,\n      this.definitionObj,\n      paramsObj,\n      includeAllParams\n    );\n  }\n\n  /**\n   * @name        isRunning\n   * @type        Function\n   *\n   * This method simply return true or false if the child process is running or not\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  isRunning() {\n    return this._runningProcess !== null;\n  }\n\n  /**\n   * @name          kill\n   * @type          Function\n   * @async\n   *\n   * This method simply kill the running child process if their's one, otherwise it will do nothing.\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  kill() {\n    if (!this._runningProcess) return;\n    return this._runningProcess.cancel();\n  }\n};\n"]}
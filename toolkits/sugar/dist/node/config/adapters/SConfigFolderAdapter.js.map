{"version":3,"sources":["SConfigFolderAdapter.js"],"names":["__fs","require","__deepMerge","__writeFileSync","__diff","__SConfigAdapter","module","exports","settings","foldername","replace","name","defaultConfigPath","appConfigPath","userConfigPath","_defaultConfig","_appConfig","_userConfig","process","env","existsSync","readdirSync","forEach","file","includes","filename","undefined","JSON","stringify","parse","n","newConfig","Error","baseConfig","Object","keys","configToSave","newConfigString"],"mappings":"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","sourcesContent":["const __fs = require('fs');\nconst __deepMerge = require('../../object/deepMerge');\nconst __writeFileSync = require('../../fs/writeFileSync');\nconst __diff = require('../../object/diff');\n\nconst __SConfigAdapter = require('./SConfigAdapter');\n\n/**\n * @name                  SConfigFolderAdapter\n * @namespace           node.config.adapters\n * @type                  Class\n *\n * This adapter let you specify a folder in which to put all the config files and access it normaly as you would with the SConfig system.\n * Each file in the folder will be the first level of the final config object like for example the file \"colors.config.js\" will be stored\n * in the final object under ```{ colors: ... }```.\n *\n * @param                   {Object}                    [settings={}]         The adapter settings that let you work with the good data storage solution...\n * - name (null) {String}: This specify the config name that you want to use.\n * - filename ('[name].config.js') {String}: Specify the filename to use for the file that will store the configs\n * - defaultConfigPath (null) {String}: This specify the path to the \"default\" config file.\n * - appConfigPath (${process.cwd()}/[filename]) {String}: This specify the path to the \"app\" config file\n * - userConfigPath (${__tmpDir()}/[filename]) {String}: This specify the path to the \"user\" config file\n * @return                  {Promise}                                         A promise that will be resolved once the data has been getted/saved...\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = class SConfigFolderAdapter extends __SConfigAdapter {\n  constructor(settings = {}) {\n    super(settings);\n    this.settings.foldername = this.settings.foldername.replace(\n      '[name]',\n      this.name\n    );\n    if (this.settings.defaultConfigPath)\n      this.settings.defaultConfigPath = this.settings.defaultConfigPath.replace(\n        '[foldername]',\n        this.settings.foldername\n      );\n    if (this.settings.appConfigPath)\n      this.settings.appConfigPath = this.settings.appConfigPath.replace(\n        '[foldername]',\n        this.settings.foldername\n      );\n    if (this.settings.userConfigPath)\n      this.settings.userConfigPath = this.settings.userConfigPath.replace(\n        '[foldername]',\n        this.settings.foldername\n      );\n  }\n\n  load() {\n    this._defaultConfig = {};\n    this._appConfig = {};\n    this._userConfig = {};\n\n    // load the default config if exists\n    if (\n      !process.env[`SConfigFolderAdapter-${this.settings.defaultConfigPath}`] &&\n      this.settings.defaultConfigPath &&\n      __fs.existsSync(this.settings.defaultConfigPath)\n    ) {\n      process.env[\n        `SConfigFolderAdapter-${this.settings.defaultConfigPath}`\n      ] = true;\n      __fs.readdirSync(this.settings.defaultConfigPath).forEach((file) => {\n        if (!file.includes(this.settings.filename.replace('[name]', '')))\n          return;\n        if (this._defaultConfig[file.replace('.config.js', '')] !== undefined)\n          return;\n        this._defaultConfig[\n          file.replace('.config.js', '')\n        ] = require(`${this.settings.defaultConfigPath}/${file}`);\n        // this._defaultConfig[file.replace('.config.js', '')] = require(this\n        //   .settings.defaultConfigPath +\n        //   '/' +\n        //   file);\n      });\n      process.env[\n        `SConfigFolderAdapter-${this.settings.defaultConfigPath}`\n      ] = JSON.stringify(this._defaultConfig);\n    } else if (\n      process.env[`SConfigFolderAdapter-${this.settings.defaultConfigPath}`]\n    ) {\n      this._defaultConfig = JSON.parse(\n        process.env[`SConfigFolderAdapter-${this.settings.defaultConfigPath}`]\n      );\n    }\n\n    // load the app config if exists\n    if (\n      !process.env[`SConfigFolderAdapter-${this.settings.appConfigPath}`] &&\n      this.settings.defaultConfigPath !== this.settings.appConfigPath &&\n      this.settings.appConfigPath &&\n      __fs.existsSync(this.settings.appConfigPath)\n    ) {\n      process.env[`SConfigFolderAdapter-${this.settings.appConfigPath}`] = true; // intermediate value\n      __fs.readdirSync(this.settings.appConfigPath).forEach((file) => {\n        if (!file.includes(this.settings.filename.replace('[name]', '')))\n          return;\n        this._defaultConfig[\n          file.replace('.config.js', '')\n        ] = require(`${this.settings.appConfigPath}/${file}`);\n        // this._appConfig[file.replace('.config.js', '')] = require(this.settings\n        //   .appConfigPath +\n        //   '/' +\n        //   file);\n      });\n      process.env[\n        `SConfigFolderAdapter-${this.settings.appConfigPath}`\n      ] = JSON.stringify(this._appConfig);\n    } else if (\n      process.env[`SConfigFolderAdapter-${this.settings.appConfigPath}`]\n    ) {\n      this._appConfig = JSON.parse(\n        process.env[`SConfigFolderAdapter-${this.settings.appConfigPath}`]\n      );\n    }\n\n    // load the user config\n    if (\n      !process.env[`SConfigFolderAdapter-${this.settings.userConfigPath}`] &&\n      this.settings.defaultConfigPath !== this.settings.userConfigPath &&\n      this.settings.appConfigPath !== this.settings.userConfigPath &&\n      this.settings.userConfigPath &&\n      __fs.existsSync(this.settings.userConfigPath)\n    ) {\n      process.env[\n        `SConfigFolderAdapter-${this.settings.userConfigPath}`\n      ] = true; // intermediate value\n      __fs.readdirSync(this.settings.userConfigPath).forEach((file) => {\n        if (!file.includes(this.settings.filename.replace('[name]', '')))\n          return;\n        this._defaultConfig[\n          file.replace('.config.js', '')\n        ] = require(`${this.settings.userConfigPath}/${file}`);\n        // this._userConfig[file.replace('.config.js', '')] = require(this.settings\n        //   .userConfigPath +\n        //   '/' +\n        //   file);\n      });\n      process.env[\n        `SConfigFolderAdapter-${this.settings.userConfigPath}`\n      ] = JSON.stringify(this._userConfig);\n    } else if (\n      process.env[`SConfigFolderAdapter-${this.settings.userConfigPath}`]\n    ) {\n      this._userConfig = JSON.parse(\n        process.env[`SConfigFolderAdapter-${this.settings.userConfigPath}`]\n      );\n    }\n\n    // mix the configs and save them in the instance\n    const n = __deepMerge(\n      this._defaultConfig,\n      this._appConfig,\n      this._userConfig\n    );\n\n    return n;\n  }\n\n  save(newConfig = {}) {\n    if (!this.settings.userConfigPath) {\n      throw new Error(\n        `You try to save the config \"${this.name}\" but the \"settings.userConfigPath\" is not set...`\n      );\n    }\n\n    const baseConfig = __deepMerge(this._defaultConfig, this._appConfig);\n\n    Object.keys(baseConfig).forEach((name) => {\n      const configToSave = __diff(baseConfig[name], newConfig[name] || {});\n\n      let newConfigString = `\n      module.exports = ${JSON.stringify(configToSave)};\n    `;\n\n      // write the new config file\n      __writeFileSync(\n        this.settings.userConfigPath +\n          '/' +\n          this.settings.filename.replace('[name]', name),\n        newConfigString\n      );\n    });\n\n    return true;\n  }\n};\n"]}
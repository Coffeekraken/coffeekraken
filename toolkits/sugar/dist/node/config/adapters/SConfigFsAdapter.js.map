{"version":3,"sources":["SConfigFsAdapter.js"],"names":["__fs","require","__deepMerge","__tmpDir","__writeFileSync","__diff","__SConfigAdapter","module","exports","settings","name","filename","defaultConfigPath","appConfigPath","process","cwd","userConfigPath","replace","_defaultConfig","_appConfig","_userConfig","existsSync","newConfig","Error","baseConfig","newConfigString","JSON","stringify"],"mappings":"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","sourcesContent":["const __fs = require('fs');\nconst __deepMerge = require('../../object/deepMerge');\nconst __tmpDir = require('../../fs/tmpDir');\nconst __writeFileSync = require('../../fs/writeFileSync');\nconst __diff = require('../../object/diff');\n\nconst __SConfigAdapter = require('./SConfigAdapter');\n\n/**\n * @name                  SConfigFsAdapter\n * @namespace           node.config.adapters\n * @type                  Class\n *\n * The JSON data adapter for the SConfig class that let you define a filename where you want to save your configs, how you want to encrypt/decrypt it\n * and then you just have to use the SConfig class and that's it...\n *\n * @param                   {Object}                    [settings={}]         The adapter settings that let you work with the good data storage solution...\n * - name (null) {String}: This specify the config name that you want to use.\n * - filename ('[name].config.js') {String}: Specify the filename to use for the file that will store the configs\n * - defaultConfigPath (null) {String}: This specify the path to the \"default\" config file.\n * - appConfigPath (${process.cwd()}/[filename]) {String}: This specify the path to the \"app\" config file\n * - userConfigPath (${__tmpDir()}/[filename]) {String}: This specify the path to the \"user\" config file\n * @return                  {Promise}                                         A promise that will be resolved once the data has been getted/saved...\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\n\nmodule.exports = class SConfigFsAdapter extends __SConfigAdapter {\n  constructor(settings = {}) {\n    settings = __deepMerge(\n      {\n        name: null,\n        filename: '[name].config.js',\n        defaultConfigPath: null,\n        appConfigPath: `${process.cwd()}/[filename]`,\n        userConfigPath: `${__tmpDir()}/[filename]`\n      },\n      settings\n    );\n    super(settings);\n\n    this.settings.filename = this.settings.filename.replace(\n      '[name]',\n      this.name\n    );\n    if (this.settings.defaultConfigPath)\n      this.settings.defaultConfigPath = this.settings.defaultConfigPath.replace(\n        '[filename]',\n        this.settings.filename\n      );\n    if (this.settings.appConfigPath)\n      this.settings.appConfigPath = this.settings.appConfigPath.replace(\n        '[filename]',\n        this.settings.filename\n      );\n    if (this.settings.userConfigPath)\n      this.settings.userConfigPath = this.settings.userConfigPath.replace(\n        '[filename]',\n        this.settings.filename\n      );\n  }\n\n  load() {\n    this._defaultConfig = {};\n    this._appConfig = {};\n    this._userConfig = {};\n\n    // load the default config if exists\n    if (\n      this.settings.defaultConfigPath &&\n      __fs.existsSync(this.settings.defaultConfigPath)\n    ) {\n      this._defaultConfig = require(`${this.settings.defaultConfigPath}`);\n    }\n\n    // load the app config if exists\n    if (\n      this.settings.appConfigPath &&\n      __fs.existsSync(this.settings.appConfigPath)\n    ) {\n      this._appConfig = require(`${this.settings.appConfigPath}`);\n    }\n\n    // load the user config\n    if (\n      this.settings.userConfigPath &&\n      __fs.existsSync(this.settings.userConfigPath)\n    ) {\n      this._userConfig = require(`${this.settings.userConfigPath}`);\n    }\n\n    // mix the configs and save them in the instance\n    return __deepMerge(this._defaultConfig, this._appConfig, this._userConfig);\n  }\n\n  save(newConfig = {}) {\n    if (!this.settings.userConfigPath) {\n      throw new Error(\n        `You try to save the config \"${this.name}\" but the \"settings.userConfigPath\" is not set...`\n      );\n    }\n\n    const baseConfig = __deepMerge(this._defaultConfig, this._appConfig);\n\n    newConfig = __diff(baseConfig, newConfig);\n\n    let newConfigString = `\n      module.exports = ${JSON.stringify(newConfig)};\n    `;\n\n    // write the new config file\n    __writeFileSync(this.settings.userConfigPath, newConfigString);\n\n    return true;\n  }\n};\n"]}
{"version":3,"sources":["sugar.js"],"names":["__SConfig","require","__SConfigFolderAdapter","__path","__packageRoot","__resolveTokens","sugarConfigInstance","module","exports","sugar","dotPath","adapters","name","foldername","filename","defaultConfigPath","resolve","__dirname","appConfigPath","process","cwd","userConfigPath","get","undefined","throwErrorOnUndefinedConfig"],"mappings":";;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAMC,sBAAsB,GAAGD,OAAO,CAAC,iCAAD,CAAtC;;AACA,IAAME,MAAM,GAAGF,OAAO,CAAC,MAAD,CAAtB;;AACA,IAAMG,aAAa,GAAGH,OAAO,CAAC,qBAAD,CAA7B;;AACA,IAAMI,eAAe,GAAGJ,OAAO,CAAC,yBAAD,CAA/B;AAEA;;;;;;;;;;;;;;;;;;;;AAkBA,IAAIK,mBAAJ;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,KAAT,CAAeC,OAAf,EAAwB;AACvC,MAAI,CAACJ,mBAAL,EAA0B;AACxBA,IAAAA,mBAAmB,GAAG,IAAIN,SAAJ,CAAc,OAAd,EAAuB;AAC3CW,MAAAA,QAAQ,EAAE,CACR,IAAIT,sBAAJ,CAA2B;AACzBU,QAAAA,IAAI,EAAE,OADmB;AAEzBC,QAAAA,UAAU,EAAE,QAFa;AAGzBC,QAAAA,QAAQ,EAAE,kBAHe;AAIzBC,QAAAA,iBAAiB,EAAEZ,MAAM,CAACa,OAAP,CAAeC,SAAf,EAA0B,uBAA1B,CAJM;AAKzBC,QAAAA,aAAa,YAAKd,aAAa,CAACe,OAAO,CAACC,GAAR,EAAD,CAAlB,kBALY;AAMzBC,QAAAA,cAAc,EAAE;AANS,OAA3B,CADQ;AADiC,KAAvB,CAAtB;AAYD,GAdsC,CAevC;;;AACA,SAAOf,mBAAmB,CAACgB,GAApB,CAAwBZ,OAAxB,EAAiCa,SAAjC,EAA4C;AACjDC,IAAAA,2BAA2B,EAAE;AADoB,GAA5C,CAAP;AAGD,CAnBD","sourcesContent":["const __SConfig = require('./SConfig');\nconst __SConfigFolderAdapter = require('./adapters/SConfigFolderAdapter');\nconst __path = require('path');\nconst __packageRoot = require('../path/packageRoot');\nconst __resolveTokens = require('../object/resolveTokens');\n\n/**\n * @name                  sugar\n * @namespace           node.config\n * @type                  Function\n *\n * This function allows you to access easily the configurations stored in the ```sugar.config.js```.\n * The returned configuration is the result of the default sugar config stored in the toolkit and the\n * app defined config stored in current application root folder\n *\n * @param         {String}        dotPath         The dot path to the config wanted\n * @return        {Mixed}                         Return the value if exists, undefined if not\n *\n * @example             js\n * const sugar = require('@coffeekraken/sugar/node/config/sugar');\n * sugar('scss.unit'); // => rem\n *\n * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nlet sugarConfigInstance;\nmodule.exports = function sugar(dotPath) {\n  if (!sugarConfigInstance) {\n    sugarConfigInstance = new __SConfig('sugar', {\n      adapters: [\n        new __SConfigFolderAdapter({\n          name: 'sugar',\n          foldername: '.sugar',\n          filename: '[name].config.js',\n          defaultConfigPath: __path.resolve(__dirname, '../../../[foldername]'),\n          appConfigPath: `${__packageRoot(process.cwd())}/[foldername]`,\n          userConfigPath: null\n        })\n      ]\n    });\n  }\n  // get the config\n  return sugarConfigInstance.get(dotPath, undefined, {\n    throwErrorOnUndefinedConfig: false\n  });\n};\n"]}
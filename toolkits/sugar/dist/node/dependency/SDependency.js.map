{"version":3,"sources":["SDependency.js"],"names":["__deepMerge","require","__SPromise","__isPath","__semver","__os","__childProcess","__awaitSpawn","module","exports","name","depFilepath","settings","_name","Error","_depFilepath","_settings","_loadDepFile","depJson","platform","Object","keys","join","_depJson","version","resolve","reject","trigger","cancel","versionsArray","versionToInstall","indexOf","length","installCommands","install","_execCommands","commands","i","child","shell","catch","e","stdout","on","value","stderr","error","stacks","start"],"mappings":";;;;;;;;;;;;AAAA,MAAMA,WAAW,GAAGC,OAAO,CAAC,qBAAD,CAA3B;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,qBAAD,CAA1B;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,YAAD,CAAxB;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,QAAD,CAAxB;;AACA,MAAMI,IAAI,GAAGJ,OAAO,CAAC,IAAD,CAApB;;AACA,MAAMK,cAAc,GAAGL,OAAO,CAAC,eAAD,CAA9B;;AACA,MAAMM,YAAY,GAAGN,OAAO,CAAC,aAAD,CAA5B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAsBAO,MAAM,CAACC,OAAP;AACE;;;;;;;;;;AAWA;;;;;;;;;;AAWA;;;;;;;;;;AAWA;;;;;;;;;;AAWA;;;;;;;;;AASA,uBAAYC,IAAZ,EAAkBC,WAAlB,EAA+BC,QAA/B,EAA8C;AAAA,QAAfA,QAAe;AAAfA,MAAAA,QAAe,GAAJ,EAAI;AAAA;;AAAA;;AAAA,uCA5ClC,EA4CkC;;AAAA,mCAjCtC,EAiCsC;;AAAA,0CAtB/B,IAsB+B;;AAAA,sCAXnC,IAWmC;;AAC5C;AACA,SAAKC,KAAL,GAAaH,IAAb,CAF4C,CAG5C;;AACA,QAAI,CAACP,QAAQ,CAACQ,WAAD,EAAc,IAAd,CAAb,EAAkC;AAChC,YAAM,IAAIG,KAAJ,CACH,8CAA6CH,WAAY,qBADtD,CAAN;AAGD,KAR2C,CAS5C;;;AACA,SAAKI,YAAL,GAAoBJ,WAApB,CAV4C,CAW5C;;AACA,SAAKK,SAAL,GAAiBhB,WAAW,CAAC,EAAD,EAAKY,QAAL,CAA5B,CAZ4C,CAa5C;;AACA,SAAKK,YAAL;AACD;AAED;;;;;;;;;;;AAvEF;AAAA;AAAA,mCAgFiB;AACb,YAAMC,OAAO,GAAGjB,OAAO,CAAC,KAAKc,YAAN,CAAvB;;AACA,UAAI,CAACG,OAAO,CAACb,IAAI,CAACc,QAAN,CAAZ,EAA6B;AAC3B,cAAM,IAAIL,KAAJ,CACH,kBAAiB,KAAKD,KAAM,0CAC3BR,IAAI,CAACc,QACN,oDAAmDC,MAAM,CAACC,IAAP,CAClDH,OADkD,EAElDI,IAFkD,CAE7C,MAF6C,CAErC,EALX,CAAN;AAOD;;AACD,WAAKC,QAAL,GAAgBL,OAAO,CAACb,IAAI,CAACc,QAAN,CAAvB;AACD;AAED;;;;;;;;;;;;AA9FF;AAAA;AAAA,4BAyGUK,OAzGV,EAyG0B;AAAA,UAAhBA,OAAgB;AAAhBA,QAAAA,OAAgB,GAAN,IAAM;AAAA;;AACtB,aAAO,IAAItB,UAAJ,CAAe,CAACuB,OAAD,EAAUC,MAAV,EAAkBC,OAAlB,EAA2BC,MAA3B,KAAsC;AAC1D;AACA,cAAMC,aAAa,GAAGT,MAAM,CAACC,IAAP,CAAY,KAAKE,QAAjB,CAAtB,CAF0D,CAI1D;;AACA,YAAIO,gBAAgB,GAAG,IAAvB,CAL0D,CAO1D;;AACA,YAAIN,OAAJ,EAAa;AACX,cAAIK,aAAa,CAACE,OAAd,CAAsBP,OAAtB,MAAmC,CAAC,CAAxC,EAA2C;AACzC,kBAAM,IAAIV,KAAJ,CACH,2CACC,KAAKD,KACN,aAAYW,OAAQ,+FAA8FK,aAAa,CAACP,IAAd,CACjH,MADiH,CAEjH,EALE,CAAN;AAOD;;AACDQ,UAAAA,gBAAgB,GAAGN,OAAnB;AACD,SAXD,MAWO;AACLM,UAAAA,gBAAgB,GAAGD,aAAa,CAACA,aAAa,CAACG,MAAd,GAAuB,CAAxB,CAAhC;AACD,SArByD,CAuB1D;;;AACA,cAAMC,eAAe,GAAG,CAAC,GAAG,KAAKV,QAAL,CAAcO,gBAAd,EAAgCI,OAApC,CAAxB,CAxB0D,CA0B1D;;AACA,aAAKC,aAAL,CAAmBF,eAAnB;AACD,OA5BM,CAAP;AA6BD;AAED;;;;;;;;;;;;;;;;;AAzIF;AAAA;AAAA,kCAyJgBG,QAzJhB,EAyJ0B;AACtB,aAAO,IAAIlC,UAAJ,CACL,OAAOuB,OAAP,EAAgBC,MAAhB,EAAwBC,OAAxB,EAAiCC,MAAjC,KAA4C;AAC1CQ,QAAAA,QAAQ,GAAG,CAAC,GAAGA,QAAJ,CAAX;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,QAAQ,CAACJ,MAA7B,EAAqCK,CAAC,EAAtC,EAA0C;AACxC,gBAAMC,KAAK,GAAG/B,YAAY,CAAC6B,QAAQ,CAACC,CAAD,CAAT,EAAc;AACtCE,YAAAA,KAAK,EAAE;AAD+B,WAAd,CAA1B;;AAGAD,UAAAA,KAAK,CAACE,KAAN,CAAaC,CAAD,IAAO;AACjBd,YAAAA,OAAO,CAAC,OAAD,EAAUc,CAAV,CAAP;AACD,WAFD;AAGAH,UAAAA,KAAK,CAACA,KAAN,CAAYI,MAAZ,CAAmBC,EAAnB,CAAsB,MAAtB,EAA+BC,KAAD,IAAW;AACvCjB,YAAAA,OAAO,CAAC,MAAD,EAASiB,KAAT,CAAP;AACD,WAFD;AAGAN,UAAAA,KAAK,CAACA,KAAN,CAAYO,MAAZ,CAAmBF,EAAnB,CAAsB,MAAtB,EAA+BG,KAAD,IAAW;AACvCnB,YAAAA,OAAO,CAAC,OAAD,EAAUmB,KAAV,CAAP;AACD,WAFD;AAGA,gBAAMR,KAAN;AACD;AACF,OAlBI,EAmBL;AACES,QAAAA,MAAM,EAAE;AADV,OAnBK,EAsBLC,KAtBK,EAAP;AAuBD;AAjLH;;AAAA;AAAA","sourcesContent":["const __deepMerge = require('../object/deepMerge');\nconst __SPromise = require('../promise/SPromise');\nconst __isPath = require('../is/path');\nconst __semver = require('semver');\nconst __os = require('os');\nconst __childProcess = require('child_process');\nconst __awaitSpawn = require('await-spawn');\n\n/**\n * @name                    SDependency\n * @namespace           node.dependency\n * @type                    Class\n *\n * This class is the base one for dependencys like PHP, Node, etc... It allows you to check if you have already the dependency installed,\n * if you can update it, etc...\n *\n * @param           {String}          name            The dependency name like \"php\", \"node\", etc...\n * @param           {Object}          [settings={}]   An object of settings described bellow:\n *\n * @example         js\n * const SDependency = require('@coffeekraken/sugar/node/dependency/SDependency');\n * class MyDependency extends SDependency {\n *    constructor() {\n *      super('myDependency');\n *    }\n * }\n *\n * @since       2.0.0\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = class SDependency {\n  /**\n   * @name              _settings\n   * @type              Object\n   * @private\n   *\n   * Store the process settings\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _settings = {};\n\n  /**\n   * @name              _name\n   * @type              String\n   * @private\n   *\n   * Store the dependency name\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _name = {};\n\n  /**\n   * @name              _depFilepath\n   * @type              String\n   * @private\n   *\n   * Store the dependency file path\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _depFilepath = null;\n\n  /**\n   * @name              _depJson\n   * @type              Object\n   * @private\n   *\n   * Store the dependency object description\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _depJson = null;\n\n  /**\n   * @name              constructor\n   * @type              Function\n   * @constructor\n   *\n   * Constructor\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(name, depFilepath, settings = {}) {\n    // save the name\n    this._name = name;\n    // check that the dep file path is a valid file\n    if (!__isPath(depFilepath, true)) {\n      throw new Error(\n        `Sorry but the passed dependency file path \"${depFilepath}\" does not exist...`\n      );\n    }\n    // save the dependency filepath\n    this._depFilepath = depFilepath;\n    // save the settings\n    this._settings = __deepMerge({}, settings);\n    // load the dep file\n    this._loadDepFile();\n  }\n\n  /**\n   * @name                      _loadDepFile\n   * @type                      Function\n   * @private\n   *\n   * Load the dep file path content\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _loadDepFile() {\n    const depJson = require(this._depFilepath);\n    if (!depJson[__os.platform]) {\n      throw new Error(\n        `Sorry but this ${this._name} dependency is not supported for your \"${\n          __os.platform\n        }\" platform... Here's the platforms supported:\\n- ${Object.keys(\n          depJson\n        ).join('\\n- ')}`\n      );\n    }\n    this._depJson = depJson[__os.platform];\n  }\n\n  /**\n   * @name                      install\n   * @type                      Function\n   *\n   * This method process to the installation of the dependency\n   *\n   * @param       {String}        [version=null]        The version you want to install\n   * @return      {SPromise}                            A promise that will be resolved once the dependency has been installed\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  install(version = null) {\n    return new __SPromise((resolve, reject, trigger, cancel) => {\n      // get the available versions to install\n      const versionsArray = Object.keys(this._depJson);\n\n      // set the version to install\n      let versionToInstall = null;\n\n      // if a version is passed, check if it is supported by the dependency json\n      if (version) {\n        if (versionsArray.indexOf(version) === -1) {\n          throw new Error(\n            `Sorry but you have asked to install the ${\n              this._name\n            } version \"${version}\" but this version is not available. Here's the available versions that you can install:\\n- ${versionsArray.join(\n              '\\n- '\n            )}`\n          );\n        }\n        versionToInstall = version;\n      } else {\n        versionToInstall = versionsArray[versionsArray.length - 1];\n      }\n\n      // get the install script for this version\n      const installCommands = [...this._depJson[versionToInstall].install];\n\n      // execute the commands for the installation\n      this._execCommands(installCommands);\n    });\n  }\n\n  /**\n   * @name                  _execCommands\n   * @type                  Function\n   * @private\n   *\n   * This method take care of executing one or more commands and send back an SPromise on which you can subscribe for:\n   * - data: Triggered when a log happens in the child process\n   * - then: Triggered when one command is finished and another starts\n   * - finally: Triggered when all the commands have finished successfully\n   * - error: Triggered when something goes wrong inside a command\n   *\n   * @param       {Array|String}          commands            The commands you want to execute\n   * @return      {SPromise}                                  An SPromise instance that will be resolved when all the commands have finished successfully\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _execCommands(commands) {\n    return new __SPromise(\n      async (resolve, reject, trigger, cancel) => {\n        commands = [...commands];\n        for (let i = 0; i < commands.length; i++) {\n          const child = __awaitSpawn(commands[i], {\n            shell: true\n          });\n          child.catch((e) => {\n            trigger('error', e);\n          });\n          child.child.stdout.on('data', (value) => {\n            trigger('data', value);\n          });\n          child.child.stderr.on('data', (error) => {\n            trigger('error', error);\n          });\n          await child;\n        }\n      },\n      {\n        stacks: 'data,error'\n      }\n    ).start();\n  }\n};\n"]}
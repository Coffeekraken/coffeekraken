{"version":3,"sources":["SDocMapItem.js"],"names":["__deepMerge","require","__isPath","__fs","__SDocblock","__path","__packageRoot","__stripTags","__getFilename","__namespace","module","exports","source","settings","_settings","path","output","split","slice","join","_path","relative","_source","readFileSync","exec","_buildFromDocblock","_buildFromSimpleSource","docblock","blocks","firstBlock","_namespace","object","namespace","_name","name","nameReg","nameMatches","match","replace","trim","namespaceReg","namespaceMatches","titlesMatches"],"mappings":"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","sourcesContent":["const __deepMerge = require('../object/deepMerge');\nconst __isPath = require('../is/path');\nconst __fs = require('fs');\nconst __SDocblock = require('../docblock/SDocblock');\nconst __path = require('path');\nconst __packageRoot = require('../path/packageRoot');\nconst __stripTags = require('../html/striptags');\nconst __getFilename = require('../fs/filename');\nconst __namespace = require('../package/namespace');\n\n/**\n * @name              SDocMapItem\n * @namespace           node.doc\n * @type              Class\n *\n * This class represent a docMap item object\n *\n * @param      {String}       source      The source to generate the docMap item. Can be a simple string or a file path\n * @param      {Object}Â       [settings={}]     A settings object with these properties availble:\n *\n * @example       js\n * const SDocMapItem = require('@coffeekraken/sugar/node/doc/SDocMapItem');\n * const myDocMapItem = new SDocMapItem('something/cool.js');\n *\n * @since       2.0.0\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = class SDocMapItem {\n  /**\n   * @name        _settings\n   * @type        Object\n   * @private\n   *\n   * Store the settings of the instance\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _settings = {};\n\n  /**\n   * @name        _source\n   * @type        String\n   * @private\n   *\n   * Store the source string on which to work\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _source = null;\n\n  /**\n   * @name        _namespace\n   * @type        String\n   * @private\n   *\n   * Store the doc namespace\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _namespace = null;\n\n  /**\n   * @name        _name\n   * @type        String\n   * @private\n   *\n   * Store the doc name\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _name = null;\n\n  /**\n   * @name        _path\n   * @type        String\n   * @private\n   *\n   * Store the doc path if is a file\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _path = null;\n\n  /**\n   * @name      constructor\n   * @type      Function\n   * @constructor\n   *\n   * Constructor\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(source, settings = {}) {\n    // save settings\n    this._settings = __deepMerge({}, settings);\n\n    // check if the passed source is a file or not\n    if (__isPath(source, true)) {\n      let path = __packageRoot();\n      if (settings.output && typeof settings.output === 'string')\n        path = settings.output.split('/').slice(0, -1).join('/');\n      this._path = __path.relative(path, source);\n      this._source = __fs.readFileSync(source, 'utf8');\n    } else {\n      this._source = source;\n    }\n\n    // check if we have a docblock that contain a namespace\n    if (/\\s?\\*\\s+?@namespace\\s+[a-zA-Z0-9_\\-.]+/gm.exec(this._source)) {\n      this._buildFromDocblock();\n    } else {\n      // build the DocMapItem from some less specific info\n      this._buildFromSimpleSource();\n    }\n  }\n\n  /**\n   * @name        name\n   * @type        String\n   * @get\n   *\n   * Access the name property\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get name() {\n    return this._name;\n  }\n\n  /**\n   * @name        namespace\n   * @type        String\n   * @get\n   *\n   * Access the namespace property\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get namespace() {\n    return this._namespace;\n  }\n\n  /**\n   * @name        path\n   * @type        String\n   * @get\n   *\n   * Access the path property\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get path() {\n    return this._path;\n  }\n\n  /**\n   * @name        _buildFromDocblock\n   * @type        Function\n   * @private\n   *\n   * This method will parse and extract the docMapItem informations from the docblock\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _buildFromDocblock() {\n    const docblock = new __SDocblock(this._source);\n    if (!docblock.blocks[0]) return;\n    const firstBlock = docblock.blocks[0];\n\n    // extract the infos\n    this._namespace = __namespace(firstBlock.object.namespace || '');\n    this._name = firstBlock.object.name;\n  }\n\n  /**\n   * @name            toJson\n   * @type            Function\n   *\n   * This method return a JSON version of the docMap item\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  toJson() {\n    return {\n      name: this.name,\n      namespace: this.namespace,\n      path: this.path\n    };\n  }\n\n  /**\n   * @name            _buildFromSimpleSource\n   * @type            Function\n   * @private\n   *\n   * This method will try to extract the basic informations from a source that contains other things that docblock\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _buildFromSimpleSource() {\n    // trying to get the namespace and name from comments\n    const nameReg = /(<!--|\\/\\/)\\s@name\\s+(.+)\\s?(-->)?/gm;\n    const nameMatches = this._source.match(nameReg);\n    if (nameMatches) {\n      const name = nameMatches[0]\n        .replace('//', '')\n        .replace('<!--', '')\n        .replace('-->', '')\n        .replace('@name', '')\n        .trim();\n      this._name = name;\n    }\n    const namespaceReg = /(<!--|\\/\\/)\\s@namespace\\s+(.+)\\s?(-->)?/gm;\n    const namespaceMatches = this._source.match(namespaceReg);\n    if (namespaceMatches) {\n      const namespace = namespaceMatches[0]\n        .replace('//', '')\n        .replace('<!--', '')\n        .replace('-->', '')\n        .replace('@namespace', '')\n        .trim();\n      this._namespace = __namespace(namespace);\n    }\n\n    if (this._name && this._namespace) return;\n\n    // make sure we have a namespace\n    if (!this._namespace && this._path) {\n      this._namespace = __namespace(this._path);\n    }\n\n    // check if its a markdown format\n    if (/^#{1,6}\\s?.*/gm.exec(this._source)) {\n      // extracting the titles\n      const titlesMatches = this._source.match(/^#{1,6}\\s?.*/gm);\n      if (titlesMatches) {\n        this._name = __stripTags(titlesMatches[0])\n          .replace(/#{1,6}/, '')\n          .trim();\n      }\n    }\n  }\n};\n"]}
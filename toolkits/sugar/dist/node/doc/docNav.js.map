{"version":3,"sources":["docNav.js"],"names":["__fs","require","__SNav","__SNavItem","__isJson","__isPath","__ensureExists","__get","__set","__paramCase","__deepMerge","__sugarConfig","module","exports","docNav","docMap","settings","url","id","text","finalNavObj","json","JSON","parse","readFileSync","navObj","Object","keys","flat","forEach","path","item","namespace","name","deep","currentNavInstance","dotPath","navItem","docMapItem","sNavItem","title","replace","addItem","navKey","newDotKey","split","filter","i","join","navInstance"],"mappings":"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","sourcesContent":["const __fs = require('fs');\nconst __SNav = require('../nav/SNav');\nconst __SNavItem = require('../nav/SNavItem');\nconst __isJson = require('../is/json');\nconst __isPath = require('../is/path');\nconst __ensureExists = require('../object/ensureExists');\nconst __get = require('../object/get');\nconst __set = require('../object/set');\nconst __paramCase = require('../string/paramCase');\nconst __deepMerge = require('../object/deepMerge');\nconst __sugarConfig = require('../config/sugar');\n\n/**\n * @name              docNav\n * @namespace           node.doc\n * @type              Function\n *\n * This function take as parameter a docMap JSON data structure and convert it to an\n * SNav instance that you can convert then into markdown, html, etc...\n *\n * @param       {Object}          [docMap=`${__sugarConfig('doc.rootDir')}/docMap.json`]             Either directly a docMap JSON or a docMap.json path\n * @param       {Object}Â          [settings={}]     A settings object that will be passed to the SNav constructor\n * - url ([path]) {String}: Specify the url you want in each SNavItem. The token \"[path]\" will be replaced by the actual doc file path\n * - id (doc) {String}: Specify the id passed to the SNav instance\n * - text (Documentation) {String}: Specify the text passed to the SNav instance\n * @return      {SNav}                              An SNav instance representing the document navigation\n *\n * @example       js\n * const docNav = require('@coffeekraken/sugar/node/doc/docNav');\n * docNav('something/docMap.json');\n *\n * @since       2.0.0\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = function docNav(\n  docMap = `${__sugarConfig('doc.rootDir')}/docMap.json`,\n  settings = {}\n) {\n  settings = __deepMerge(\n    {\n      url: '[path]',\n      id: 'doc',\n      text: 'Documentation'\n    },\n    settings\n  );\n\n  let finalNavObj = new __SNav(settings.id, settings.text, []);\n\n  if (!__isJson(docMap) && !__isPath(docMap, true)) {\n    // throw new Error(\n    //   `You try to generate a docNav by passing \"${docMap}\" as parameter but this parameter MUST be either a valid docMap JSON or a valid docMap.json file path...`\n    // );\n    return finalNavObj;\n  }\n\n  let json = docMap;\n  if (__isPath(`${docMap}/docMap.json`, true)) {\n    json = JSON.parse(__fs.readFileSync(`${docMap}/docMap.json`, 'utf8'));\n  } else if (__isPath(docMap, true)) {\n    json = JSON.parse(__fs.readFileSync(docMap, 'utf8'));\n  }\n\n  const navObj = {};\n\n  Object.keys(json.flat).forEach((path) => {\n    const item = json.flat[path];\n    __ensureExists(navObj, `${item.namespace}.${item.name}`, null);\n  });\n\n  function deep(currentNavInstance, dotPath = '') {\n    // get nav items in the navObj\n    const navItem = __get(navObj, dotPath);\n    if (navItem === null) {\n      const docMapItem = json.flat[dotPath];\n      const sNavItem = new __SNavItem(\n        __paramCase(dotPath),\n        docMapItem.title,\n        settings.url.replace('[path]', docMapItem.path)\n      );\n      currentNavInstance.addItem(sNavItem);\n    } else if (typeof navItem === 'object') {\n      Object.keys(navItem).forEach((navKey) => {\n        let newDotKey = dotPath.split('.').filter((i) => i !== '');\n        newDotKey = [...newDotKey, navKey].join('.');\n        const navInstance = new __SNav(__paramCase(newDotKey), newDotKey, []);\n        currentNavInstance.addItem(navInstance);\n        deep(navInstance, newDotKey);\n      });\n    }\n  }\n  deep(finalNavObj, '');\n\n  // console.log(finalNavObj.toHtml());\n\n  return finalNavObj;\n};\n"]}
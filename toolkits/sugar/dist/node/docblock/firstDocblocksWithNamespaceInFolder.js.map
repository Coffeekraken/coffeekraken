{"version":3,"sources":["firstDocblocksWithNamespaceInFolder.js"],"names":["__deepMerge","require","__findInFiles","__minimatch","__fs","__path","__getFilename","__extension","__SDocblock","module","exports","firstDocblockWithNamespaceInFolder","directory","settings","exclude","existsSync","founded","find","namespaceObj","Object","keys","forEach","path","relativePath","relative","content","readFileSync","docblocks","docblock","blocks","object","raw","name","replace","namespace"],"mappings":";;AAAA,MAAMA,WAAW,GAAGC,OAAO,CAAC,qBAAD,CAA3B;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,eAAD,CAA7B;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,WAAD,CAA3B;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAC,IAAD,CAApB;;AACA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,MAAD,CAAtB;;AACA,MAAMK,aAAa,GAAGL,OAAO,CAAC,gBAAD,CAA7B;;AACA,MAAMM,WAAW,GAAGN,OAAO,CAAC,iBAAD,CAA3B;;AACA,MAAMO,WAAW,GAAGP,OAAO,CAAC,aAAD,CAA3B;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAqBAQ,MAAM,CAACC,OAAP,GAAiB,eAAeC,kCAAf,CACfC,SADe,EAEfC,QAFe,EAGf;AAAA,MADAA,QACA;AADAA,IAAAA,QACA,GADW,EACX;AAAA;;AACAA,EAAAA,QAAQ,GAAGb,WAAW,CACpB;AACEc,IAAAA,OAAO,EAAE;AADX,GADoB,EAIpBD,QAJoB,CAAtB;AAOA,MAAI,CAACT,IAAI,CAACW,UAAL,CAAgBH,SAAhB,CAAL,EAAiC,OAAO,EAAP;AAEjC,MAAII,OAAO,GAAG,MAAMd,aAAa,CAACe,IAAd,CAAoB,YAApB,EAAiCL,SAAjC,CAApB;AAEA,QAAMM,YAAY,GAAG,EAArB;AAEAC,EAAAA,MAAM,CAACC,IAAP,CAAYJ,OAAZ,EAAqBK,OAArB,CAA8BC,IAAD,IAAU;AACrC,UAAMC,YAAY,GAAGlB,MAAM,CAACmB,QAAP,CAAgBZ,SAAhB,EAA2BU,IAA3B,CAArB;;AACA,QAAInB,WAAW,CAACoB,YAAD,EAAeV,QAAQ,CAACC,OAAxB,CAAf,EAAiD;;AAEjD,UAAMW,OAAO,GAAGrB,IAAI,CAACsB,YAAL,CAAkBJ,IAAlB,EAAwB,MAAxB,CAAhB,CAJqC,CAMrC;;;AAEA,UAAMK,SAAS,GAAG,IAAInB,WAAJ,CAAgBiB,OAAhB,CAAlB;AACA,UAAMG,QAAQ,GAAGD,SAAS,CAACE,MAAV,CAAiB,CAAjB,IAAsBF,SAAS,CAACE,MAAV,CAAiB,CAAjB,CAAtB,GAA4C,IAA7D;AAEA,QAAI,CAACD,QAAL,EAAe;AACf,WAAOA,QAAQ,CAACE,MAAT,CAAgBC,GAAvB;;AAEA,UAAMC,IAAI,GACRJ,QAAQ,CAACE,MAAT,CAAgBE,IAAhB,IACA1B,aAAa,CAACgB,IAAD,CAAb,CAAoBW,OAApB,CAA6B,IAAG1B,WAAW,CAACe,IAAD,CAAO,EAAlD,EAAqD,EAArD,CAFF;;AAIAJ,IAAAA,YAAY,CAACU,QAAQ,CAACE,MAAT,CAAgBI,SAAhB,GAA4B,GAA5B,GAAkCF,IAAnC,CAAZ,GAAuD,EACrD,GAAGJ,QAAQ,CAACE,MADyC;AAErDR,MAAAA,IAAI,EAAEC;AAF+C,KAAvD;AAID,GAtBD;AAwBA,SAAOL,YAAP;AACD,CA1CD","sourcesContent":["const __deepMerge = require('../object/deepMerge');\nconst __findInFiles = require('find-in-files');\nconst __minimatch = require('minimatch');\nconst __fs = require('fs');\nconst __path = require('path');\nconst __getFilename = require('../fs/filename');\nconst __extension = require('../fs/extension');\nconst __SDocblock = require('./SDocblock');\n\n/**\n * @name                  firstDocblockWithNamespaceInFolder\n * @namespace           node.docblock\n * @type                  Function\n * @async\n *\n * This function search in the passed folder for files containing a \"@namespace\" tag (and an \"@name\" optional one)\n * and generate a SNav instance with all these founded files as sources...\n *\n * @param         {String}Â          directory               The directory in which to search for files with the namespace tag\n * @param         {Object}          [settings={}]           A settings object to configure your navigation generation:\n * - exclude ('**\\/+(__tests__ | __wip__)\\/**') {String}: Specify a glob pattern representing the files to exclude from the generation\n * @return        {Object}                                    An object containing the docblocks holded in each namespaces as properties\n *\n * @example       js\n * const firstDocblockWithNamespaceInFolder = require('@coffeekraken/sugar/node/nav/firstDocblockWithNamespaceInFolder);\n * firstDocblockWithNamespaceInFolder('my/cool/folder');\n *\n * @since       2.0.0\n * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = async function firstDocblockWithNamespaceInFolder(\n  directory,\n  settings = {}\n) {\n  settings = __deepMerge(\n    {\n      exclude: '**/+(__tests__|__wip__)/**'\n    },\n    settings\n  );\n\n  if (!__fs.existsSync(directory)) return {};\n\n  let founded = await __findInFiles.find(`@namespace`, directory);\n\n  const namespaceObj = {};\n\n  Object.keys(founded).forEach((path) => {\n    const relativePath = __path.relative(directory, path);\n    if (__minimatch(relativePath, settings.exclude)) return;\n\n    const content = __fs.readFileSync(path, 'utf8');\n\n    // console.log(content);\n\n    const docblocks = new __SDocblock(content);\n    const docblock = docblocks.blocks[0] ? docblocks.blocks[0] : null;\n\n    if (!docblock) return;\n    delete docblock.object.raw;\n\n    const name =\n      docblock.object.name ||\n      __getFilename(path).replace(`.${__extension(path)}`, '');\n\n    namespaceObj[docblock.object.namespace + '.' + name] = {\n      ...docblock.object,\n      path: relativePath\n    };\n  });\n\n  return namespaceObj;\n};\n"]}
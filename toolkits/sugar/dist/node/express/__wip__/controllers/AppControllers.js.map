{"version":3,"sources":["AppControllers.js"],"names":["module","exports","config","req","res","value","params","Squid","send","meta","js","squidCommon","__fs","readFileSync","__dirname","projectCommon","process","cwd","resultingScript"],"mappings":";;;;;;AAAAA,MAAM,CAACC,OAAP,GAAiB;AACf;;;;;;;;;;;;AAYAC,EAAAA,MAAM;AAAA,oCAAE,WAAOC,GAAP,EAAYC,GAAZ,EAAoB;AAC1B,UAAIC,KAAJ;;AAEA,UAAIF,GAAG,CAACG,MAAJ,CAAW,CAAX,CAAJ,EAAmB;AACjBD,QAAAA,KAAK,SAASE,KAAK,CAACL,MAAN,CAAaC,GAAG,CAACG,MAAJ,CAAW,CAAX,CAAb,CAAd;AACD,OAFD,MAEO;AACLD,QAAAA,KAAK,SAASE,KAAK,CAACL,MAAN,EAAd;AACD;;AAEDE,MAAAA,GAAG,CAACI,IAAJ,CAASH,KAAT;AACD,KAVK;;AAAA;AAAA;AAAA;;AAAA;AAAA,KAbS;;AAyBf;;;;;;;;;;;;AAYAI,EAAAA,IAAI,EAAE,CAACN,GAAD,EAAMC,GAAN,KAAc;AAClB,QAAIC,KAAJ;;AAEA,QAAIF,GAAG,CAACG,MAAJ,CAAW,CAAX,CAAJ,EAAmB;AACjBD,MAAAA,KAAK,GAAGE,KAAK,CAACE,IAAN,CAAWN,GAAG,CAACG,MAAJ,CAAW,CAAX,CAAX,CAAR;AACD,KAFD,MAEO;AACLD,MAAAA,KAAK,GAAGE,KAAK,CAACE,IAAN,EAAR;AACD;;AAEDL,IAAAA,GAAG,CAACI,IAAJ,CAASH,KAAT;AACD,GA/Cc;;AAiDf;;;;;;;;;;;;AAYAK,EAAAA,EAAE;AAAA,gCAAE,WAAOP,GAAP,EAAYC,GAAZ,EAAoB;AACtB;AACA,UAAMO,WAAW,GAAGC,IAAI,CAACC,YAAL,WACfC,SADe,gCACgBP,KAAK,CAACL,MAAN,CAChC,sBADgC,CADhB,uBAApB,CAFsB,CAOtB;;;AACA,UAAMa,aAAa,GAAGH,IAAI,CAACC,YAAL,WACjBG,OAAO,CAACC,GAAR,EADiB,oBACMV,KAAK,CAACL,MAAN,CACxB,sBADwB,CADN,uBAAtB;;AAMA,UAAIgB,eAAe,aAAMP,WAAN,SAAoBI,aAApB,CAAnB,CAdsB,CAetB;AACA;AACA;AACA;AACA;AAEA;;AACAX,MAAAA,GAAG,CAACI,IAAJ,CAASU,eAAT;AACD,KAvBC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AA7Da,CAAjB","sourcesContent":["module.exports = {\n  /**\n   * @name                          config\n   * @namespace           node.express.controllers.AppControllers\n   * @type                          Function\n   *\n   * Return the whole configuration object or the specified value requested using the dot formated object key.\n   *\n   * @param                     {Object}                      req                     The express \"req\" object\n   * @param                     {Object}                      res                     The express \"res\" object\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com\n   */\n  config: async (req, res) => {\n    let value;\n\n    if (req.params[0]) {\n      value = await Squid.config(req.params[0]);\n    } else {\n      value = await Squid.config();\n    }\n\n    res.send(value);\n  },\n\n  /**\n   * @name                          meta\n   * @namespace           node.express.controllers.AppControllers\n   * @type                          Function\n   *\n   * Return the application meta data\n   *\n   * @param                     {Object}                      req                     The express \"req\" object\n   * @param                     {Object}                      res                     The express \"res\" object\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com\n   */\n  meta: (req, res) => {\n    let value;\n\n    if (req.params[0]) {\n      value = Squid.meta(req.params[0]);\n    } else {\n      value = Squid.meta();\n    }\n\n    res.send(value);\n  },\n\n  /**\n   * @name                js\n   * @namespace           node.express.controllers.AppControllers\n   * @type                Function\n   *\n   * Handle the base javascript route that serve the global and common files\n   *\n   * @param         {Object}        req           The req express object\n   * @param         {Object}        res            The res express object\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com\n   */\n  js: async (req, res) => {\n    // read the common squid framework file\n    const squidCommon = __fs.readFileSync(\n      `${__dirname}/../../../../${await Squid.config(\n        'dist.js.outputFolder'\n      )}/common.bundle.js`\n    );\n    // read the common project file\n    const projectCommon = __fs.readFileSync(\n      `${process.cwd()}/${await Squid.config(\n        'dist.js.outputFolder'\n      )}/common.bundle.js`\n    );\n\n    let resultingScript = `${squidCommon}${projectCommon}`;\n    // resultingScript += `\n    //   window.__squid = {\n    //     config: '${__base64.encrypt(JSON.stringify(Squid.config))}',\n    //     meta: '${__base64.encrypt(JSON.stringify(require(process.cwd() + '/package.json')))}'\n    //   };`;\n\n    // send gziped javascript files Content\n    res.send(resultingScript);\n  }\n};\n"]}
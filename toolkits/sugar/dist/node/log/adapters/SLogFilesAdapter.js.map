{"version":3,"sources":["SLogFilesAdapter.js"],"names":["__deepMerge","require","__prependFile","__makeDir","__filesPreset","SLogFilesAdapter","settings","_settings","path","process","cwd","message","level","Promise","resolve","reject","sync","newLog","Date","toISOString"],"mappings":";;;;;;;;;;;;;;;AAAA,MAAMA,WAAW,GAAGC,OAAO,CAAC,wBAAD,CAA3B;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,cAAD,CAA7B;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,UAAD,CAAzB;;AACA,MAAMG,aAAa,GAAGH,OAAO,CAAC,sBAAD,CAA7B;AAEA;;;;;;;;;;;;;;;;;;;;;IAmBqBI,gB;AACnB;;;;;;;;;;;AAYA;;;;;;;;;;;AAWA,4BAAYC,QAAZ,EAA2B;AAAA,QAAfA,QAAe;AAAfA,MAAAA,QAAe,GAAJ,EAAI;AAAA;;AAAA;;AAAA,uCAbf,EAae;;AACzB;AACA,SAAKC,SAAL,GAAiBP,WAAW,CAC1B;AACEQ,MAAAA,IAAI,EAAEC,OAAO,CAACC,GAAR,KAAgB;AADxB,KAD0B,EAI1BJ,QAJ0B,CAA5B;AAMD;AAED;;;;;;;;;;;;;;;;;;;;8BAgBUK,O,EAASC,K,EAAO;AACxB,aAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC;AACAZ,QAAAA,SAAS,CAACa,IAAV,CAAe,KAAKT,SAAL,CAAeC,IAA9B,EAFsC,CAItC;;;AACA,cAAMS,MAAM,GAAI,KAAI,IAAIC,IAAJ,GAAWC,WAAX,EAAyB,OAAMf,aAAa,CAC9DO,OAD8D,CAE9D,MAFF;;AAGAT,QAAAA,aAAa,CAACc,IAAd,CAAoB,GAAE,KAAKT,SAAL,CAAeC,IAAK,IAAGI,KAAM,MAAnD,EAA0DK,MAA1D,EARsC,CAUtC;;;AACAH,QAAAA,OAAO;AACR,OAZM,CAAP;AAaD","sourcesContent":["const __deepMerge = require('../../object/deepMerge');\nconst __prependFile = require('prepend-file');\nconst __makeDir = require('make-dir');\nconst __filesPreset = require('../htmlPresets/files');\n\n/**\n * @name                    SLogFilesAdapter\n * @namespace           js.log\n * @type                    Class\n *\n * This class allows you to log your messages, errors, etc... easily and store them in some files where you want on your file system.\n *\n * @example               js\n * conse SLog = require('@coffeekraken/sugar/js/log/SLog');\n * const SLogFilesAdapter = require('@coffeekraken/sugar/node/log/adapters/SLogFilesAdapter');\n * const logger = new SLog({\n *    adapters: [\n *      new SLogFilesAdapter()\n *    ]\n * });\n * logger.log('Something cool happend...');\n *\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default class SLogFilesAdapter {\n  /**\n   * @name          _settings\n   * @type          Object\n   * @private\n   *\n   * Store this instance settings. Here's the list of available settings\n   * - path (process.cwd() + '/.logs') {String}: Where you want to store the logs. This must be a path to a writable folder\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _settings = {};\n\n  /**\n   * @name          constructor\n   * @type          Function\n   *\n   * Constructor\n   *\n   * @param         {Object}        [settings={}]           The settings object to configure your SLogFilesAdapter instance. Here's the settings available:\n   * - path (process.cwd() + '/.logs') {String}: Where you want to store the logs. This must be a path to a writable folder\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(settings = {}) {\n    // extend settings\n    this._settings = __deepMerge(\n      {\n        path: process.cwd() + '/.logs'\n      },\n      settings\n    );\n  }\n\n  /**\n   * @name            log\n   * @type            Function\n   * @async\n   *\n   * This is the main method of the logger. It actually log the message passed as parameter to the confilesole\n   *\n   * @param         {Mixed}          message            The message to log\n   * @param         {String}         level              The log level. Can be \"log\", \"info\", \"error\", \"debug\" or \"warn\"\n   * @return        {Promise}                           A promise that will be resolved once the message has been logged correctly\n   *\n   * @example         js\n   * await consoleAdapter.log('hello world');\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  async log(message, level) {\n    return new Promise((resolve, reject) => {\n      // ensure the log directory exist\n      __makeDir.sync(this._settings.path);\n\n      // prepend the new log\n      const newLog = `# ${new Date().toISOString()}\\n# ${__filesPreset(\n        message\n      )}\\n\\n`;\n      __prependFile.sync(`${this._settings.path}/${level}.log`, newLog);\n\n      // resolving the file logging\n      resolve();\n    });\n  }\n}\n"]}
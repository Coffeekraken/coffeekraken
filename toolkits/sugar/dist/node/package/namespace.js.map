{"version":3,"sources":["namespace.js"],"names":["__json","require","__deepMerge","__getFilename","__sugarConfig","module","exports","namespace","path","settings","json","context","process","cwd","packageName","packageVersion","name","replace","split","join","trim","version","sanitizedPath","filename","length","resultNamespace","pattern"],"mappings":";;AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,qBAAD,CAA3B;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAC,gBAAD,CAA7B;;AACA,MAAMG,aAAa,GAAGH,OAAO,CAAC,iBAAD,CAA7B;AAEA;;;;;;;;;;;;;;;;;;;;;AAmBAI,MAAM,CAACC,OAAP,GAAiB,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,QAAzB,EAAwC;AAAA,MAAfA,QAAe;AAAfA,IAAAA,QAAe,GAAJ,EAAI;AAAA;;AACvDA,EAAAA,QAAQ,GAAGP,WAAW,CAACE,aAAa,CAAC,gBAAD,CAAb,IAAmC,EAApC,EAAwCK,QAAxC,CAAtB,CADuD,CAEvD;;AACA,QAAMC,IAAI,GAAGV,MAAM,CAACS,QAAQ,CAACE,OAAT,IAAoBC,OAAO,CAACC,GAAR,EAArB,CAAnB;;AACA,MAAIC,WAAW,GAAG,EAAlB;AAAA,MACEC,cAAc,GAAG,EADnB;AAEA,MAAIL,IAAI,IAAIA,IAAI,CAACM,IAAjB,EACEF,WAAW,GAAGJ,IAAI,CAACM,IAAL,CAAUC,OAAV,CAAkB,GAAlB,EAAuB,EAAvB,EAA2BC,KAA3B,CAAiC,GAAjC,EAAsCC,IAAtC,CAA2C,GAA3C,EAAgDC,IAAhD,EAAd;AACF,MAAIV,IAAI,IAAIA,IAAI,CAACW,OAAjB,EAA0BN,cAAc,GAAGL,IAAI,CAACW,OAAL,CAAaH,KAAb,CAAmB,GAAnB,EAAwBC,IAAxB,CAA6B,GAA7B,CAAjB,CAR6B,CAUvD;;AACA,MAAIG,aAAa,GAAGd,IAApB;;AACA,QAAMe,QAAQ,GAAGpB,aAAa,CAACK,IAAD,CAA9B;;AACA,MAAIe,QAAQ,IAAID,aAAa,CAACJ,KAAd,CAAoB,GAApB,EAAyBM,MAAzB,GAAkC,CAAlD,EAAqD;AACnDF,IAAAA,aAAa,GAAGA,aAAa,CAC1BL,OADa,CACL,MAAMM,QADD,EACW,EADX,EAEbN,OAFa,CAELM,QAFK,EAEK,EAFL,CAAhB;AAGD;;AACDD,EAAAA,aAAa,GAAGA,aAAa,CAACJ,KAAd,CAAoB,GAApB,EAAyBC,IAAzB,CAA8B,EAA9B,EAAkCD,KAAlC,CAAwC,GAAxC,EAA6CC,IAA7C,CAAkD,GAAlD,CAAhB;AAEA,MAAIM,eAAe,GAAGhB,QAAQ,CAACiB,OAAT,CACnBT,OADmB,CACX,gBADW,EACOH,WADP,EAEnBG,OAFmB,CAEX,mBAFW,EAEUF,cAFV,EAGnBE,OAHmB,CAGX,QAHW,EAGDK,aAHC,EAInBF,IAJmB,EAAtB;AAKAK,EAAAA,eAAe,GAAGA,eAAe,CAC9BP,KADe,CACT,KADS,EAEfC,IAFe,CAEV,GAFU,EAGfD,KAHe,CAGT,IAHS,EAIfC,IAJe,CAIV,GAJU,CAAlB;AAKA,SAAOM,eAAP;AACD,CA/BD","sourcesContent":["const __json = require('./json');\nconst __deepMerge = require('../object/deepMerge');\nconst __getFilename = require('../fs/filename');\nconst __sugarConfig = require('../config/sugar');\n\n/**\n * @name          namespace\n * @namespace     node.package\n * @type          Function\n *\n * This function take a string as parameter like a path, or a doted string like \"something.cool\" and return you\n * a proper namespace build using the package name, your passed string sanitized, etc...\n *\n * @param       {String}        path        The string path to convert into a proper namespace\n * @param       {Object}        [settings={}]     An object of settings to configure your namespace generation\n * @return      {String}                    The generated namespace\n *\n * @example     js\n * const namespace = require('@coffeekraken/sugar/node/package/namespace');\n * namespace('something.cool'); => // coffeekraken.sugar.something.cool\n *\n * @since       2.0.0\n * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n */\nmodule.exports = function namespace(path, settings = {}) {\n  settings = __deepMerge(__sugarConfig('core.namespace') || {}, settings);\n  // get the package json content\n  const json = __json(settings.context || process.cwd());\n  let packageName = '',\n    packageVersion = '';\n  if (json && json.name)\n    packageName = json.name.replace('@', '').split('/').join('.').trim();\n  if (json && json.version) packageVersion = json.version.split('.').join('-');\n\n  // sanitize the passed path\n  let sanitizedPath = path;\n  const filename = __getFilename(path);\n  if (filename && sanitizedPath.split('/').length > 1) {\n    sanitizedPath = sanitizedPath\n      .replace('/' + filename, '')\n      .replace(filename, '');\n  }\n  sanitizedPath = sanitizedPath.split(' ').join('').split('/').join('.');\n\n  let resultNamespace = settings.pattern\n    .replace('{package.name}', packageName)\n    .replace('{package.version}', packageVersion)\n    .replace('{path}', sanitizedPath)\n    .trim();\n  resultNamespace = resultNamespace\n    .split('...')\n    .join('.')\n    .split('..')\n    .join('.');\n  return resultNamespace;\n};\n"]}
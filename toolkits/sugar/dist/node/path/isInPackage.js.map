{"version":3,"sources":["isInPackage.js"],"names":["__packageRoot","require","__fs","module","exports","isInPackage","name","from","highest","process","cwd","packageRoot","existsSync","pkg","names","split","map","f","trim","i","length","newPath","slice","join"],"mappings":";;AAAA,MAAMA,aAAa,GAAGC,OAAO,CAAC,eAAD,CAA7B;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,IAAD,CAApB;AAEA;;;;;;;;;;;;;;;;;;;;;AAmBAE,MAAM,CAACC,OAAP,GAAiB,SAASC,WAAT,CACfC,IADe,EAEfC,IAFe,EAGfC,OAHe,EAIf;AAAA,MAFAD,IAEA;AAFAA,IAAAA,IAEA,GAFOE,OAAO,CAACC,GAAR,EAEP;AAAA;;AAAA,MADAF,OACA;AADAA,IAAAA,OACA,GADU,KACV;AAAA;;AACA,QAAMG,WAAW,GAAGX,aAAa,CAACO,IAAD,CAAjC;;AACA,MAAI,CAACI,WAAL,EAAkB,OAAO,KAAP;AAElB,MAAI,CAACT,IAAI,CAACU,UAAL,CAAiB,GAAED,WAAY,eAA/B,CAAL,EAAqD,OAAO,KAAP;;AACrD,QAAME,GAAG,GAAGZ,OAAO,CAAE,GAAEU,WAAY,eAAhB,CAAnB;;AAEA,MAAIG,KAAK,GAAGR,IAAZ;AACA,MAAI,OAAOQ,KAAP,KAAiB,QAArB,EAA+BA,KAAK,GAAGA,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAsBC,CAAD,IAAOA,CAAC,CAACC,IAAF,EAA5B,CAAR;;AAC/B,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACM,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAIL,KAAK,CAACK,CAAD,CAAL,KAAaN,GAAG,CAACP,IAArB,EAA2B;AACzB,aAAO,IAAP;AACD;AACF;;AAED,MAAIe,OAAO,GAAGV,WAAW,CACtBI,KADW,CACL,GADK,EAEXO,KAFW,CAEL,CAFK,EAEF,CAAC,CAFC,EAGZ;AAHY,GAIXC,IAJW,CAIN,GAJM,CAAd,CAfA,CAqBA;;AACA,MAAIf,OAAJ,EAAa;AACX,WAAOH,WAAW,CAACC,IAAD,EAAOe,OAAP,EAAgBb,OAAhB,CAAlB;AACD;;AAED,SAAO,KAAP;AACD,CA/BD","sourcesContent":["const __packageRoot = require('./packageRoot');\nconst __fs = require('fs');\n\n/**\n * @name                    isInPackage\n * @namespace           node.path\n * @type                    Function\n *\n * Return the path to either the first finded package root going up the folders, or the highest package root finded\n *\n * @param           {String|Array}              name             The package name to check or a string comma separated like \"myPackage,another\"\n * @param           {String}              [from=process.cwd()]    Specify from where the research has to be done\n * @param           {Boolean}             [highest=false]         Specify if you want the highest package root or the first finded\n * @return          {String}Â                                      The finded package path or false if not finded\n *\n * @example         js\n * const isInPackage = require('@coffeekraken/sugar/node/path/isInPackage');\n * const root = isInPackage();\n *\n * @see       https://www.npmjs.com/package/find-package-json\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = function isInPackage(\n  name,\n  from = process.cwd(),\n  highest = false\n) {\n  const packageRoot = __packageRoot(from);\n  if (!packageRoot) return false;\n\n  if (!__fs.existsSync(`${packageRoot}/package.json`)) return false;\n  const pkg = require(`${packageRoot}/package.json`);\n\n  let names = name;\n  if (typeof names === 'string') names = names.split(',').map((f) => f.trim());\n  for (let i = 0; i < names.length; i++) {\n    if (names[i] === pkg.name) {\n      return true;\n    }\n  }\n\n  let newPath = packageRoot\n    .split('/')\n    .slice(0, -1)\n    // .filter((i) => i !== '')\n    .join('/');\n\n  // no package found... check if we need to check higher\n  if (highest) {\n    return isInPackage(name, newPath, highest);\n  }\n\n  return false;\n};\n"]}
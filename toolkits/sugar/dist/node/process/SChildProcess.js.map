{"version":3,"sources":["SChildProcess.js"],"names":["__SPromise","require","__deepMerge","__childProcess","__hotkey","__registerProcess","__uniqid","__buildCommandLine","__isPath","__output","module","exports","commandOrPath","settings","start","_commandOrPath","_settings","id","definitionObj","defaultParamsObj","method","before","after","shell","env","process","CHILD_PROCESS_LEVEL","IS_CHILD_PROCESS","params","promise","resolve","reject","trigger","cancel","runningProcessId","paramsToRun","commandToRun","runningProcess","instanceId","Object","assign","Date","now","end","duration","stdout","stderr","rawCommand","command","state","_processesStack","push","SChildProcess","Error","time","run","spawnSettings","forEach","key","childProcess","once","on","kill","finished","resolveOrReject","what","extendObj","code","signal","error","join","log","toString","resultReg","match","value","__parse","replace","logs","length"],"mappings":"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","sourcesContent":["const __SPromise = require('../promise/SPromise');\nconst __deepMerge = require('../object/deepMerge');\nconst __childProcess = require('child_process');\nconst __hotkey = require('../keyboard/hotkey');\nconst __registerProcess = require('./registerProcess');\nconst __uniqid = require('../string/uniqid');\nconst __buildCommandLine = require('../cli/buildCommandLine');\nconst __isPath = require('../is/path');\nconst __output = require('./output');\n\n/**\n * @name              SChildProcess\n * @namespace         node.process\n * @type              Class\n *\n * This class allows you to spawn/fork some child process and having back an SPromise based instance on\n * which you can track the child process status using the ```on``` method to register to some\n * events like \"start\", \"success\", \"error\", etc...\n *\n * @todo            doc\n * @todo            tests\n *\n * @since       2.0.0\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = class SChildProcess extends __SPromise {\n  /**\n   * @name          _settings\n   * @type          Object\n   * @private\n   *\n   * Store the passed settings\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _settings = {};\n\n  /**\n   * @name          _commandOrPath\n   * @type          String\n   * @private\n   *\n   * Store the command of path to an executable file\n   *\n   * @since         2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _commandOrPath = null;\n\n  /**\n   * @name          _runningProcess\n   * @type          Object\n   * @private\n   *\n   * Store the current running process\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _runningProcess = null;\n\n  /**\n   * @param         _processesStack\n   * @type          Array<Object>\n   * @private\n   *\n   * Store all the runned processes ojects\n   *\n   * @since         2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _processesStack = [];\n\n  /**\n   * @name          constructor\n   * @type          Function\n   * @constructor\n   *\n   * Constructor\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(commandOrPath, settings = {}) {\n    super(() => {}).start();\n    this._commandOrPath = commandOrPath;\n    this._settings = __deepMerge(\n      {\n        id: __uniqid(),\n        definitionObj: {},\n        defaultParamsObj: {},\n        method: __isPath(commandOrPath, true) ? 'fork' : 'spawn',\n        before: null,\n        after: null,\n        shell: true,\n        env: {\n          ...process.env,\n          CHILD_PROCESS_LEVEL: process.env.CHILD_PROCESS_LEVEL\n            ? process.env.CHILD_PROCESS_LEVEL + 1\n            : 1,\n          IS_CHILD_PROCESS: true\n        }\n      },\n      settings\n    );\n  }\n\n  /**\n   * @name            runningProcess\n   * @type            Object\n   * @get\n   *\n   * Get the running process object\n   *\n   * @since           2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get runningProcess() {\n    return this._processesStack.length\n      ? this._processesStack[this._processesStack.length - 1]\n      : null;\n  }\n\n  /**\n   * @name          run\n   * @type          Function\n   *\n   * This method simply run a new process\n   * and return a SPromise instance on which you can listen for the\n   * exact same events that you can on the global SChildProcess isntance\n   * but scoped to this running process.\n   *\n   * @param       {Object}         [params={}]          An object of parameters\n   * @param       {Object}        [settings={}]       THe same settings object that you can pass to the SChildProcess instance constructor but only for this particular process\n   * @return      (SPromise}                        An SPromise instance on which you can listen for events scoped to this particular process\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  run(params = {}, settings = {}) {\n    const promise = new __SPromise(\n      async (resolve, reject, trigger, cancel) => {}\n    ).start();\n\n    (async () => {\n      let runningProcessId = settings.id || __uniqid();\n      settings = __deepMerge(this._settings, settings);\n\n      // build the command to run depending on the passed command in the constructor and the params\n      const paramsToRun = __deepMerge(settings.defaultParamsObj, params);\n      // console.log(paramsToRun, this._commandOrPath, settings.definitionObj);\n      const commandToRun = __buildCommandLine(\n        this._commandOrPath,\n        settings.definitionObj,\n        paramsToRun\n      );\n\n      // initialize the runningProcess object\n      const runningProcess = {\n        instanceId: this._settings.id,\n        id: runningProcessId,\n        promise: promise,\n        settings: Object.assign({}, settings),\n        start: Date.now(),\n        end: null,\n        duration: null,\n        stdout: [],\n        stderr: [],\n        rawCommand: this._commandOrPath,\n        params: paramsToRun,\n        command: commandToRun,\n        state: 'running',\n        before: null,\n        after: null\n      };\n\n      // adding the runningProcess in the stack\n      this._processesStack.push(runningProcess);\n\n      // execute the \"before\" SChildProcess instance if setted\n      if (settings.before) {\n        if (!settings.before instanceof SChildProcess) {\n          throw new Error(\n            `The passed \"<cyan>settings.before</cyan>\" setting has to be an instance of the \"<primary>SChildProcess</primary>\" class...`\n          );\n        }\n\n        // trigger a \"before\" event\n        promise.trigger('before', {\n          time: Date.now(),\n          process: Object.assign({}, runningProcess)\n        });\n        this.trigger(`${runningProcessId}.before`, {\n          time: Date.now(),\n          process: Object.assign({}, runningProcess)\n        });\n\n        // running the before child process\n        runningProcess.before = await settings.before.run();\n      }\n\n      // extracting the spawn settings from the global settings object\n      const spawnSettings = Object.assign({}, settings);\n      [\n        'id',\n        'definitionObj',\n        'defaultParamsObj',\n        'method',\n        'before',\n        'after'\n      ].forEach((key) => {\n        delete spawnSettings[key];\n      });\n\n      // trigger a \"start\" event\n      promise.trigger('start', {\n        time: Date.now(),\n        process: Object.assign({}, runningProcess)\n      });\n      this.trigger(`${runningProcessId}.start`, {\n        time: Date.now(),\n        process: Object.assign({}, runningProcess)\n      });\n\n      // executing the actual command through the spawn node function\n      const childProcess = __childProcess[settings.method || 'spawn'](\n        commandToRun,\n        [],\n        spawnSettings\n      );\n\n      // listen for ctrl+c to kill the child process\n      __hotkey('ctrl+c', {\n        once: true\n      }).on('press', () => {\n        // console.log('THIEHIU');\n        childProcess.kill();\n      });\n\n      // register this child process globally\n      __registerProcess(childProcess, runningProcess.id);\n\n      // close\n      let finished = false;\n      const resolveOrReject = async (what, extendObj = {}, code, signal) => {\n        if (finished) return;\n        finished = true;\n\n        runningProcess.end = Date.now();\n        runningProcess.duration = runningProcess.end - runningProcess.start;\n\n        if (settings.after) {\n          if (!settings.after instanceof SChildProcess) {\n            throw new Error(\n              `The passed \"<cyan>settings.after</cyan>\" setting has to be an instance of the \"<primary>SChildProcess</primary>\" class...`\n            );\n          }\n\n          // trigger a \"after\" event\n          promise.trigger('after', {\n            time: Date.now(),\n            process: Object.assign({}, runningProcess)\n          });\n          this.trigger(`${runningProcessId}.after`, {\n            time: Date.now(),\n            process: Object.assign({}, runningProcess)\n          });\n\n          // running the after child process\n          runningProcess.after = await settings.after.run();\n        }\n\n        promise[what]({\n          ...runningProcess,\n          ...extendObj,\n          code,\n          signal\n        });\n      };\n      childProcess.on('close', (code, signal) => {\n        if (!code && signal) {\n          runningProcess.state = 'killed';\n          resolveOrReject('reject', {}, code, signal);\n        } else if (code === 0 && !signal) {\n          runningProcess.state = 'success';\n          resolveOrReject('resolve', {}, code, signal);\n        } else {\n          runningProcess.state = 'error';\n          resolveOrReject(\n            'reject',\n            {\n              error: runningProcess.stderr.join('\\n')\n            },\n            code,\n            signal\n          );\n        }\n      });\n\n      // error\n      childProcess.on('error', (error) => {\n        runningProcess.state = 'error';\n        resolveOrReject(\n          'reject',\n          {\n            error\n          },\n          1,\n          null\n        );\n      });\n\n      // stdout data\n      if (childProcess.stdout) {\n        childProcess.stdout.on('data', (log) => {\n          log = log.toString();\n          const resultReg = /^#result\\s(.*)$/gm;\n          if (log.match(resultReg)) {\n            runningProcess.state = 'success';\n            resolveOrReject(\n              'resolve',\n              {\n                value: __parse(log.replace('#result ', ''))\n              },\n              0,\n              null\n            );\n            return;\n          }\n\n          runningProcess.stdout.push(log.toString());\n          promise.trigger('log', {\n            value: log.toString()\n          });\n          this.trigger(`${runningProcessId}.'log`, {\n            value: log.toString()\n          });\n        });\n      }\n\n      // stderr data\n      if (childProcess.stderr) {\n        childProcess.stderr.on('data', (error) => {\n          runningProcess.stderr.push(error.toString());\n          promise.trigger('error', {\n            error: error.toString(),\n            value: error.toString()\n          });\n          this.trigger(`${runningProcessId}.error`, {\n            error: error.toString(),\n            value: error.toString()\n          });\n        });\n      }\n    })();\n\n    return promise;\n  }\n\n  runWithOutput(params = {}, settings = {}) {\n    __output(this.run(params, settings));\n  }\n\n  /**\n   * @name            hasAfterCommand\n   * @type            Function\n   *\n   * Return true is the \"settings.after\" property is setted\n   *\n   * @since         2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  hasAfterCommand() {\n    return this.runningProcess\n      ? this.runningProcess.settings.after !== null\n      : this._settings.after !== null;\n  }\n\n  /**\n   * @name            hasBeforeCommand\n   * @type            Function\n   *\n   * Return true is the \"settings.before\" property is setted\n   *\n   * @since         2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  hasBeforeCommand() {\n    return this.runningProcess\n      ? this.runningProcess.settings.before !== null\n      : this._settings.before !== null;\n  }\n\n  /**\n   * @name          isClosed\n   * @type          Function\n   *\n   * Return true if the last process is closed, false if not...\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  isClosed() {\n    return this.runningProcess\n      ? this.runningProcess.state === 'killed' ||\n          this.runningProcess.state === 'success' ||\n          this.runningProcess.state === 'error'\n      : false;\n  }\n\n  /**\n   * @name        log\n   * @type        Function\n   *\n   * This method simply log one or muliple message through the running process\n   *\n   * @param         {String}        ...logs         The message(s) you want to log\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  log(...logs) {\n    if (!this.runningProcess) return;\n    logs.forEach((log) => {\n      this.runningProcess.stdout.push(log.toString());\n      this.runningProcess.promise.trigger('log', {\n        value: log.toString()\n      });\n      this.trigger(`${this.runningProcess.id}.log`, {\n        value: log.toString()\n      });\n    });\n  }\n};\n"]}
{"version":3,"sources":["spawn.js"],"names":["__childProcess","require","__deepMerge","__SPromise","__uniqid","__parse","__hotkey","__tkill","__registerProcess","__getRegisteredProcesses","__wait","__clone","module","exports","spawn","command","argsOrSettings","settings","childProcess","runningProcess","id","start","Date","now","end","duration","stdout","stderr","state","args","Array","isArray","argsArray","defaultSettings","lazy","before","after","shell","env","process","CHILD_PROCESS_LEVEL","IS_CHILD_PROCESS","promise","resolve","reject","trigger","cancel","run","runBeforeAfterCommand","when","spawnSettings","pro","result","time","log","on","value","res","once","kill","finished","resolveOrReject","what","extendObj","code","signal","error","join","triggerBuffer","logsArray","toString","split","filter","l","resultReg","match","replace","push","hasAfterCommand","isClosed","forEach","arg","_promiseCancel","bind","pid","e"],"mappings":"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","sourcesContent":["const __childProcess = require('child_process');\nconst __deepMerge = require('../object/deepMerge');\nconst __SPromise = require('../promise/SPromise');\nconst __uniqid = require('../string/uniqid');\nconst __parse = require('../string/parse');\nconst __hotkey = require('../keyboard/hotkey');\nconst __tkill = require('tree-kill');\nconst __registerProcess = require('./registerProcess');\nconst __getRegisteredProcesses = require('./getRegisteredProcesses');\nconst __wait = require('../time/wait');\nconst __clone = require('../object/clone');\n\n/**\n * @name                                spawn\n * @namespace           node.process\n * @type                                Function\n *\n * This function is a wrapper for the native \"spawn\" one that add the Promise support\n *\n * @param       {String}        command           The command to execute\n * @param       {Array|Object}    [argsOrSettings=null]     Either an Array of args, or an object of settings\n * @param       {Object}        [settings=null]               An object of settings for your spawn command. This is the same as the settings of the native spawn\n *\n * @TODO        settings documentation\n * @TODO        API documentation (isClosed, etc...)\n *\n * @example       js\n * const spawn = require('@coffeekraken/sugar/node/process/spawn');\n *\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = function spawn(\n  command,\n  argsOrSettings = null,\n  settings = null\n) {\n  let childProcess;\n\n  const runningProcess = {\n    id: __uniqid(),\n    start: Date.now(),\n    end: null,\n    duration: null,\n    stdout: [],\n    stderr: [],\n    command,\n    state: 'idle',\n    args: Array.isArray(argsOrSettings) ? argsOrSettings : []\n  };\n\n  let argsArray = [];\n  const defaultSettings = {\n    lazy: false,\n    before: null,\n    after: null,\n    shell: true,\n    env: {\n      ...process.env,\n      CHILD_PROCESS_LEVEL: process.env.CHILD_PROCESS_LEVEL\n        ? process.env.CHILD_PROCESS_LEVEL + 1\n        : 1,\n      IS_CHILD_PROCESS: true\n    }\n  };\n  if (typeof argsOrSettings === 'object') {\n    settings = __deepMerge(defaultSettings, argsOrSettings);\n  } else if (Array.isArray(argsOrSettings)) {\n    argsArray = argsOrSettings;\n  }\n  if (typeof settings === 'object') {\n    settings = __deepMerge(defaultSettings, settings);\n  }\n\n  if (settings.id) runningProcess.id = settings.id;\n\n  const promise = new __SPromise(\n    (resolve, reject, trigger, cancel) => {\n      // check if not lazy\n      if (settings.lazy === false) run();\n    },\n    {\n      id: runningProcess.id\n    }\n  );\n\n  function runBeforeAfterCommand(\n    when,\n    command,\n    argsArray = [],\n    spawnSettings = {}\n  ) {\n    const pro = new __SPromise(async (resolve, reject) => {\n      let result = true;\n      promise.trigger(`${when}.start`, {\n        time: Date.now()\n      });\n\n      promise.log(`Cleaning the <cyan>${runningProcess.id}</cyan>...`);\n\n      if (typeof settings[when] === 'function') {\n        result = await settings[when](command, argsArray, spawnSettings);\n      } else if (typeof settings[when] === 'string') {\n        const pro = spawn(settings[when], [], {\n          id: settings.id + '.' + when,\n          ...spawnSettings\n        }).start();\n        pro.on('log,error', (value) => {\n          if (!value) return;\n          value.value = `  - ${value.value}`;\n          promise.trigger('log', value);\n        });\n        // __SPromise.pipe(pro, promise, {\n        //   stacks: 'log,error'\n        // });\n        result = await pro;\n      }\n\n      await __wait(1500);\n      promise.trigger(`${when}.end`, {\n        time: Date.now()\n      });\n\n      resolve(result);\n    });\n    return pro;\n  }\n\n  async function run() {\n    const spawnSettings = __clone(settings);\n    delete spawnSettings.lazy;\n    delete spawnSettings.before;\n    delete spawnSettings.after;\n    delete spawnSettings.id;\n\n    if (settings.before) {\n      const res = await runBeforeAfterCommand(\n        'before',\n        command,\n        [],\n        spawnSettings\n      );\n    }\n\n    childProcess = __childProcess.spawn(command, argsArray, spawnSettings);\n    promise.childProcess = childProcess;\n    // runningProcess.childProcess = childProcess;\n    __hotkey('ctrl+c', {\n      once: true\n    }).on('press', () => {\n      childProcess.kill();\n    });\n\n    // save the process\n    __registerProcess(promise);\n\n    // before start\n    promise.trigger('beforeStart', {\n      time: Date.now(),\n      process: runningProcess\n    });\n\n    // start\n    runningProcess.state = 'running';\n    promise.trigger('start', {\n      time: Date.now(),\n      process: runningProcess\n    });\n\n    let finished = false;\n    const resolveOrReject = async (what, extendObj = {}, code, signal) => {\n      if (finished) return;\n      finished = true;\n\n      runningProcess.end = Date.now();\n      runningProcess.duration = runningProcess.end - runningProcess.start;\n\n      if (settings.after) {\n        await runBeforeAfterCommand('after', command, [], spawnSettings);\n      }\n      promise[what]({\n        ...extendObj,\n        code,\n        signal,\n        time: Date.now(),\n        process: runningProcess\n      });\n    };\n\n    // close\n    childProcess.on('close', (code, signal) => {\n      if (!code && signal) {\n        runningProcess.state = 'killed';\n        resolveOrReject('reject', {}, code, signal);\n      } else if (code === 0 && !signal) {\n        // console.log('CC');\n        runningProcess.state = 'success';\n        resolveOrReject('resolve', {}, code, signal);\n      } else {\n        runningProcess.state = 'error';\n        resolveOrReject(\n          'reject',\n          {\n            error: runningProcess.stderr.join('\\n')\n          },\n          code,\n          signal\n        );\n      }\n    });\n\n    // error\n    childProcess.on('error', (error) => {\n      runningProcess.state = 'error';\n      resolveOrReject(\n        'reject',\n        {\n          error\n        },\n        1,\n        null\n      );\n    });\n\n    // stdout data\n    let triggerBuffer = 0;\n    childProcess.stdout.on('data', async (value) => {\n      const logsArray = value\n        .toString()\n        .split('⠀')\n        .filter((l) => l !== '');\n\n      // logsArray.forEach(async (log) => {\n      for (let log of logsArray) {\n        const resultReg = /^#result\\s(.*)$/gm;\n        if (log.match(resultReg)) {\n          runningProcess.state = 'success';\n          resolveOrReject(\n            'resolve',\n            {\n              value: __parse(log.replace('#result ', ''))\n            },\n            0,\n            null\n          );\n          return;\n        }\n\n        runningProcess.stdout.push(log);\n        await promise.trigger('log', {\n          process: runningProcess,\n          time: Date.now(),\n          value: log\n        });\n      }\n    });\n\n    // stderr data\n    childProcess.stderr.on('data', (error) => {\n      // console.log(error.toString());\n      runningProcess.stderr.push(error.toString());\n      promise.trigger('error', {\n        process: runningProcess,\n        time: Date.now(),\n        error: error.toString(),\n        value: error.toString()\n      });\n    });\n\n    // return the promise\n    return promise;\n  }\n\n  promise.run = run;\n\n  promise.hasAfterCommand = () => settings.after !== null;\n\n  promise.isClosed = () => {\n    return (\n      runningProcess.state === 'killed' ||\n      runningProcess.state === 'success' ||\n      runningProcess.state === 'error'\n    );\n  };\n  promise.process = runningProcess;\n\n  promise.log = (...args) => {\n    args.forEach((arg) => {\n      runningProcess.stdout.push(arg.toString());\n      promise.trigger('log', {\n        value: arg.toString()\n      });\n    });\n  };\n\n  const _promiseCancel = promise.cancel.bind(promise);\n  promise.cancel = () => {\n    return new __SPromise((resolve, reject) => {\n      const pid = childProcess.pid;\n      // childProcess && childProcess.kill('SIGTERM');\n      // if (pid) console.log(`kill -9 ${pid}`);\n      // __childProcess.spawn(`kill -9 ${pid}`);\n      if (pid) {\n        __tkill(pid, 'SIGTERM', (e) => {\n          if (e) {\n            reject(e);\n          } else {\n            resolve();\n          }\n          _promiseCancel(e);\n        });\n      }\n    });\n  };\n\n  return promise;\n};\n"]}
{"version":3,"sources":["docMap.js"],"names":["__deepMerge","require","__packageRoot","__fs","__Fuse","__SSearchResultItem","__searchQueryParser","__SUrlAction","module","exports","search","searchString","settings","filePath","action","url","queryObj","parse","trim","keywords","offsets","exclude","Object","keys","length","namespace","Promise","resolve","reject","existsSync","Error","docMap","fuse","includeScore","includeMatches","minMatchCharLength","shouldSort","operators","forEach","key","push","pathsArray","results","$and","map","item","filter","indexOf","path","replace","target","name"],"mappings":"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","sourcesContent":["const __deepMerge = require('../../object/deepMerge');\nconst __packageRoot = require('../../path/packageRoot');\nconst __fs = require('fs');\nconst __Fuse = require('fuse.js');\nconst __SSearchResultItem = require('../SSearchResultItem');\nconst __searchQueryParser = require('search-query-parser');\nconst __SUrlAction = require('../../action/browser/SUrlAction');\n\n/**\n * @name                search\n * @namespace           node.search.handlers\n * @type                Function\n *\n * This function is responsible of handling the docMap search\n * by filtering the docMap and send back the serch result json.\n *\n * @param         {String}        searchString        The searching string\n * @param         {Object}        [settings={}]       A settings object to configure your search process. Here's the available settings:\n * @return        {Promise}                         A promise that will be resolved with an array of SSearchResultItem object either as full instances, or in JSON format depending on the settings.format property\n *\n * @since       2.0.0\n * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = function search(searchString, settings = {}) {\n  settings = __deepMerge(\n    {\n      filePath: __packageRoot() + '/docMap.json',\n      action: {\n        url: '/doc[path]'\n      }\n    },\n    settings\n  );\n\n  let queryObj = __searchQueryParser.parse(searchString.trim(), {\n    keywords: ['name', 'namespace', 'path']\n  });\n  delete queryObj.offsets;\n  delete queryObj.exclude;\n  if (typeof queryObj !== 'object' || !Object.keys(queryObj).length) {\n    queryObj = {};\n    queryObj.namespace = searchString;\n  }\n\n  return new Promise((resolve, reject) => {\n    // load the docmap\n    if (!__fs.existsSync(settings.filePath)) {\n      throw new Error(\n        `You try to make a research using the <primary>docMap</primary> search handler but it seems that your configuration point to a file that does not exists \"<cyan>${settings.filePath}</cyan>\"...`\n      );\n    }\n    const docMap = require(settings.filePath);\n\n    const fuse = new __Fuse(docMap, {\n      includeScore: true,\n      includeMatches: true,\n      minMatchCharLength: 2,\n      shouldSort: true,\n      keys: Object.keys(queryObj)\n    });\n\n    const operators = [];\n    Object.keys(queryObj).forEach((key) => {\n      operators.push({\n        [key]: queryObj[key]\n      });\n    });\n\n    const pathsArray = [];\n    const results = fuse\n      .search({\n        $and: operators\n      })\n      .map((item) => {\n        return {\n          ...item.item\n        };\n      })\n      .filter((item) => {\n        if (pathsArray.indexOf(item.path) === -1) {\n          pathsArray.push(item.path);\n          return true;\n        }\n        return false;\n      })\n      .map((item) => {\n        let action;\n        if (typeof settings.action === 'function') {\n          action = settings.action(item);\n        } else if (typeof settings.action === 'object') {\n          action = new __SUrlAction({\n            url: settings.action.url.replace('[path]', item.path),\n            target: '_self'\n          });\n        }\n        return new __SSearchResultItem(item.name, item.namespace, action, {});\n      });\n\n    // resolving the handler with the results array\n    resolve(results);\n  });\n};\n"]}
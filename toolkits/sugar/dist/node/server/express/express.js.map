{"version":3,"sources":["express.js"],"names":["__sugarConfig","require","__deepMerge","__express","__uncamelize","__request","__packageRoot","__SPromise","module","exports","args","settings","server","promise","resolve","reject","trigger","cancel","use","staticDir","replace","process","cwd","static","Object","keys","forEach","name","set","toLowerCase","listen","port","hostname","start"],"mappings":";;AAAA,MAAMA,aAAa,GAAGC,OAAO,CAAC,oBAAD,CAA7B;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,wBAAD,CAA3B;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,SAAD,CAAzB;;AACA,MAAMG,YAAY,GAAGH,OAAO,CAAC,yBAAD,CAA5B;;AACA,MAAMI,SAAS,GAAGJ,OAAO,CAAC,oBAAD,CAAzB;;AACA,MAAMK,aAAa,GAAGL,OAAO,CAAC,wBAAD,CAA7B;;AACA,MAAMM,UAAU,GAAGN,OAAO,CAAC,wBAAD,CAA1B;AAEA;;;;;;;;;;;;;;;;;;;AAiBAO,MAAM,CAACC,OAAP,GAAiB,UAACC,IAAD,EAAe;AAAA,MAAdA,IAAc;AAAdA,IAAAA,IAAc,GAAP,EAAO;AAAA;;AAC9B,QAAMC,QAAQ,GAAGT,WAAW,CAACF,aAAa,CAAC,SAAD,CAAd,EAA2BU,IAA3B,CAA5B;;AACA,QAAME,MAAM,GAAGT,SAAS,EAAxB;;AAEA,QAAMU,OAAO,GAAG,IAAIN,UAAJ,CAAe,CAACO,OAAD,EAAUC,MAAV,EAAkBC,OAAlB,EAA2BC,MAA3B,KAAsC;AACnEL,IAAAA,MAAM,CAACM,GAAP,CACEP,QAAQ,CAACQ,SAAT,CAAmBC,OAAnB,CAA2Bd,aAAa,CAACe,OAAO,CAACC,GAAR,EAAD,CAAxC,EAAyD,EAAzD,CADF,EAEEnB,SAAS,CAACoB,MAAV,CAAiBZ,QAAQ,CAACQ,SAA1B,CAFF;AAKAK,IAAAA,MAAM,CAACC,IAAP,CAAYd,QAAZ,EAAsBe,OAAtB,CAA+BC,IAAD,IAAU;AACtCf,MAAAA,MAAM,CAACgB,GAAP,CAAWxB,YAAY,CAACuB,IAAD,EAAO,GAAP,CAAZ,CAAwBE,WAAxB,EAAX,EAAkDlB,QAAQ,CAACgB,IAAD,CAA1D;AACD,KAFD,EANmE,CAUnE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAf,IAAAA,MAAM,CAACkB,MAAP,CAAcnB,QAAQ,CAACoB,IAAvB,EAA6BpB,QAAQ,CAACqB,QAAtC,EAlBmE,CAmBnE;AACD,GApBe,EAoBbC,KApBa,EAAhB;AAsBApB,EAAAA,OAAO,CAACD,MAAR,GAAiBA,MAAjB;AACA,SAAOC,OAAP;AACD,CA5BD","sourcesContent":["const __sugarConfig = require('../../config/sugar');\nconst __deepMerge = require('../../object/deepMerge');\nconst __express = require('express');\nconst __uncamelize = require('../../string/uncamelize');\nconst __request = require('../../http/request');\nconst __packageRoot = require('../../path/packageRoot');\nconst __SPromise = require('../../promise/SPromise');\n\n/**\n * @name                express\n * @namespace           node.server.express\n * @type                Function\n *\n * This function take care of starting an express server\n *\n * @param         {Object}          [args={}]         The args object to configure the build process. Check the PhpSCli class definition object for available arguments\n * @return        {express}                       The server instance started\n *\n * @example       js\n * const expressServer = require('@coffeekraken/sugar/node/server/express');\n * expressServer({});\n *\n * @since           2.0.0\n * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n */\nmodule.exports = (args = {}) => {\n  const settings = __deepMerge(__sugarConfig('express'), args);\n  const server = __express();\n\n  const promise = new __SPromise((resolve, reject, trigger, cancel) => {\n    server.use(\n      settings.staticDir.replace(__packageRoot(process.cwd()), ''),\n      __express.static(settings.staticDir)\n    );\n\n    Object.keys(settings).forEach((name) => {\n      server.set(__uncamelize(name, ' ').toLowerCase(), settings[name]);\n    });\n\n    // Object.keys(files).forEach((path) => {\n    //   const fileObj = files[path];\n    //   const namespace = fileObj.line[0].replace('@namespace', '').trim();\n    //   server.get(`/${namespace.split('.').join('/')}`, function (req, res) {\n    //     res.render(path, { title: 'Hey', message: 'Hello there!' });\n    //   });\n    // });\n\n    server.listen(settings.port, settings.hostname);\n    // return server;\n  }).start();\n\n  promise.server = server;\n  return promise;\n};\n"]}
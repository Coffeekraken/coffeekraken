{"version":3,"sources":["SFrontendServerCli.js"],"names":["__SExpressServerCli","require","__frontendServer","__SPromise","module","exports","settings","id","name","argsObj","resolve","reject","trigger","cancel","serverPromise","pipe","res","start","definitionObj"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAMA,mBAAmB,GAAGC,OAAO,CAAC,8BAAD,CAAnC;;AACA,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,sBAAD,CAAhC;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,wBAAD,CAA1B;AAEA;;;;;;;;;;;;;AAWAG,MAAM,CAACC,OAAP;AAAA;;AAAA;;AACE;;;;;;;;;;AAWA;;;;;;;;;;AAaA;;;;;;;;;AASA,8BAAYC,QAAZ,EAA2B;AAAA,QAAfA,QAAe;AAAfA,MAAAA,QAAe,GAAJ,EAAI;AAAA;;AAAA;;AAAA,6BACnB;AACJC,MAAAA,EAAE,EAAE,iBADA;AAEJC,MAAAA,IAAI,EAAE,iBAFF;AAGJ,SAAGF;AAHC,KADmB;AAM1B;AAED;;;;;;;;;;;;;;;;;;;;AA1CF;AAAA;AAAA,yBA4DOG,OA5DP,EA4DgBH,QA5DhB,EA4D+B;AAAA,UAAfA,QAAe;AAAfA,QAAAA,QAAe,GAAJ,EAAI;AAAA;;AAC3B,aAAO,IAAIH,UAAJ,CACL,gBAAgBO,OAAhB,EAAyBC,MAAzB,EAAiCC,OAAjC,EAA0CC,MAA1C,EAAkD;AAChD,cAAMC,aAAa,GAAGZ,gBAAgB,CAACO,OAAD,CAAtC;;AACAN,QAAAA,UAAU,CAACY,IAAX,CAAgBD,aAAhB,EAA+B,IAA/B;;AACA,cAAME,GAAG,GAAG,MAAMF,aAAlB;AACAJ,QAAAA,OAAO,CAACM,GAAD,CAAP;AACD,OANI,EAOL;AACET,QAAAA,EAAE,EAAE;AADN,OAPK,EAULU,KAVK,EAAP;AAWD;AAxEH;;AAAA;AAAA,EAAkDjB,mBAAlD,sCAUmB,kCAVnB,4CAqByB,EACrB,GAAGA,mBAAmB,CAACkB;AADF,CArBzB","sourcesContent":["const __SExpressServerCli = require('../express/SExpressServerCli');\nconst __frontendServer = require('../frontend/frontend');\nconst __SPromise = require('../../promise/SPromise');\n\n/**\n * @name            SFrontendServerCli\n * @namespace           node.server.frontend\n * @type            Class\n * @extends         SExpressServerCli\n *\n * This class represent the frontend server Cli based on the express server one\n *\n * @since       2.0.0\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = class SFrontendServerCli extends __SExpressServerCli {\n  /**\n   * @name          command\n   * @type          String\n   * @static\n   *\n   * Store the command string\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  static command = 'sugar server.frontend %arguments';\n\n  /**\n   * @name          definitionObj\n   * @type          Object\n   * @static\n   *\n   * Store the definition object\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  static definitionObj = {\n    ...__SExpressServerCli.definitionObj\n  };\n\n  /**\n   * @name          constructor\n   * @type          Function\n   * @constructor\n   *\n   * Constructor\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(settings = {}) {\n    super({\n      id: 'server.frontend',\n      name: 'Frontend Server',\n      ...settings\n    });\n  }\n\n  /**\n   * @name            _run\n   * @type            Function\n   * @private\n   *\n   * This method is the one that will be called once you call ```run```.\n   * The params passed are processed by the ```run``` parent method so you can\n   * confidently trust them.\n   * You MUST return an SPromise instance so that the spawned process can be\n   * managed automatically in the parent ```run``` method.\n   *\n   * @param       {Object}        argsObj         The object of passed arguments\n   * @param       {Object}        [settings={}]     The passed settings object\n   * @return      {SPromise}                      An SPromise instance through which the parent method can register for events like \"success\", \"log\", etc...\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _run(argsObj, settings = {}) {\n    return new __SPromise(\n      async function (resolve, reject, trigger, cancel) {\n        const serverPromise = __frontendServer(argsObj);\n        __SPromise.pipe(serverPromise, this);\n        const res = await serverPromise;\n        resolve(res);\n      },\n      {\n        id: 'cli.server.frontend'\n      }\n    ).start();\n  }\n};\n"]}
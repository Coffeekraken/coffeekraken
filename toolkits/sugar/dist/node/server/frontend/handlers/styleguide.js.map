{"version":3,"sources":["styleguide.js"],"names":["__fs","require","__packageRoot","__sugarConfig","__render","__standardizeJson","__SPromise","__SDocblock","__SBuildScssCli","__trimLines","module","exports","styleguide","req","server","resolve","reject","trigger","viewPath","params","split","join","resultObj","view","data","currentPackageJson","pr","packagePath","existsSync","sugarJson","views","scss","buildScssCli","styleguidePromise","run","input","sugarJsonDirs","pipe","styleguideRes","docblock","value","css","blocks","toObject","id","start"],"mappings":"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","sourcesContent":["const __fs = require('fs');\nconst __packageRoot = require('../../../path/packageRoot');\nconst __sugarConfig = require('../../../config/sugar');\nconst __render = require('../../../template/render');\nconst __standardizeJson = require('../../../npm/standardizeJson');\nconst __SPromise = require('../../../promise/SPromise');\nconst __SDocblock = require('../../../docblock/SDocblock');\nconst __SBuildScssCli = require('../../../build/scss/SBuildScssCli');\nconst __trimLines = require('../../../string/trimLines');\n\n/**\n * @name                styleguide\n * @namespace           node.server.frontend.handlers\n * @type                Function\n *\n * This function is responsible of responding to express requests made on the \"styleguide\" section\n *\n * @param         {Object}          req             The express request object\n * @param         {Object}          server          The express server instance\n * @return        {Promise}                         A promise that will be resolved with the response to send to the client\n *\n * @event       server.frontend.handler.styleguide.start\n *\n * @since       2.0.0\n * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = function styleguide(req, server) {\n  return new __SPromise(\n    async function (resolve, reject, trigger) {\n      let viewPath = req.params[0].split('/').join('.');\n\n      trigger('server.frontend.handler.styleguide.start', null);\n\n      let resultObj = {\n        view: null,\n        data: {}\n      };\n\n      let currentPackageJson;\n\n      // check if the passed request point to a valid coffeekraken sugar ready package\n      const pr = __packageRoot();\n      const packagePath = `${pr}/node_modules/${req.params[0]}`;\n      if (__fs.existsSync(`${packagePath}/sugar.json`)) {\n        currentPackageJson = require(`${packagePath}/package.json`);\n        const sugarJson = require(`${packagePath}/sugar.json`);\n        if (sugarJson.views && sugarJson.views.styleguide) {\n          viewPath = `${packagePath}/${sugarJson.views.styleguide}`;\n        }\n\n        resultObj.view = viewPath;\n        resultObj.data.currentPackageJson = __standardizeJson(\n          currentPackageJson\n        );\n\n        // check if we have a styleguide scss file to load\n        if (sugarJson.scss && sugarJson.scss.styleguide) {\n          const buildScssCli = new __SBuildScssCli({});\n          const styleguidePromise = buildScssCli.run({\n            input: `${packagePath}/${sugarJson.scss.styleguide}`,\n            sugarJsonDirs: packagePath\n          });\n          __SPromise.pipe(styleguidePromise, this);\n          const styleguideRes = await styleguidePromise;\n\n          // parsing the docblock\n          const docblock = new __SDocblock(styleguideRes.value);\n          // set the blocks\n          resultObj.data.css = styleguideRes.value;\n          resultObj.data.blocks = docblock.toObject();\n        }\n      }\n\n      resolve(resultObj);\n    },\n    {\n      id: 'server.handler.styleguide'\n    }\n  ).start();\n};\n"]}
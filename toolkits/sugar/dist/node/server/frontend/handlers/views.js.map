{"version":3,"sources":["views.js"],"names":["__sugarConfig","require","__request","module","exports","views","req","server","Promise","resolve","reject","viewEngine","get","bladeSettings","viewsSettings","renderedView","url","hostname","port","path","substr","rootDir","cacheDir","method","catch","e","console","log","data"],"mappings":";;AAAA,MAAMA,aAAa,GAAGC,OAAO,CAAC,uBAAD,CAA7B;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,uBAAD,CAAzB;AAEA;;;;;;;;;;;;;;;;AAcAE,MAAM,CAACC,OAAP,GAAiB,SAASC,KAAT,CAAeC,GAAf,EAAoBC,MAApB,EAA4B;AAC3C,SAAO,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC5C,UAAMC,UAAU,GAAGJ,MAAM,CAACK,GAAP,CAAW,aAAX,CAAnB;;AAEA,QAAID,UAAU,KAAK,UAAnB,EAA+B;AAC7B,YAAME,aAAa,GAAGb,aAAa,CAAC,OAAD,CAAnC;;AACA,YAAMc,aAAa,GAAGd,aAAa,CAAC,OAAD,CAAnC;;AAEA,YAAMe,YAAY,GAAG,MAAMb,SAAS,CAAC;AACnCc,QAAAA,GAAG,EAAG,UAASH,aAAa,CAACN,MAAd,CAAqBU,QAAS,IAC3CJ,aAAa,CAACN,MAAd,CAAqBW,IACtB,GAAEZ,GAAG,CAACa,IAAJ,CAASC,MAAT,CAAgB,CAAhB,CAAmB,YAAWN,aAAa,CAACO,OAAQ,aACrDP,aAAa,CAACQ,QACf,EALkC;AAMnCC,QAAAA,MAAM,EAAE;AAN2B,OAAD,CAAT,CAOxBC,KAPwB,CAOjBC,CAAD,IAAO;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD,OAT0B,CAA3B;AAUAhB,MAAAA,OAAO,CAACM,YAAY,CAACa,IAAd,CAAP;AACD,KAlB2C,CAoB5C;;AACD,GArBM,CAAP;AAsBD,CAvBD","sourcesContent":["const __sugarConfig = require('../../../config/sugar');\nconst __request = require('../../../http/request');\n\n/**\n * @name                views\n * @namespace           node.server.frontend.handlers\n * @type                Function\n *\n * This function is responsible of responding to express requests made on the \"views\" section\n *\n * @param         {Object}          req             The express request object\n * @param         {Object}          server          The express server instance\n * @return        {Promise}                         A promise that will be resolved with the response to send to the client\n *\n * @since       2.0.0\n * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = function views(req, server) {\n  return new Promise(async (resolve, reject) => {\n    const viewEngine = server.get('view engine');\n\n    if (viewEngine === 'bladePhp') {\n      const bladeSettings = __sugarConfig('blade');\n      const viewsSettings = __sugarConfig('views');\n\n      const renderedView = await __request({\n        url: `http://${bladeSettings.server.hostname}:${\n          bladeSettings.server.port\n        }${req.path.substr(6)}?rootDir=${viewsSettings.rootDir}&cacheDir=${\n          viewsSettings.cacheDir\n        }`,\n        method: 'POST'\n      }).catch((e) => {\n        console.log(e);\n      });\n      resolve(renderedView.data);\n    }\n\n    // resolve(path);\n  });\n};\n"]}
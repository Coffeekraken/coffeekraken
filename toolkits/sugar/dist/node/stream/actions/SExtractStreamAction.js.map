{"version":3,"sources":["SExtractStreamAction.js"],"names":["__SActionsStreamAction","require","__packageRoot","__fs","__ensureDirSync","__deepMerge","__md5","__writeJsonSync","module","exports","settings","id","sourceProp","constructor","definitionObj","_settings","type","required","streamObj","resolve","reject","reg","source","myArray","exec","prop","string"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,sBAAsB,GAAGC,OAAO,CAAC,yBAAD,CAAtC;;AACA,IAAMC,aAAa,GAAGD,OAAO,CAAC,wBAAD,CAA7B;;AACA,IAAME,IAAI,GAAGF,OAAO,CAAC,IAAD,CAApB;;AACA,IAAMG,eAAe,GAAGH,OAAO,CAAC,wBAAD,CAA/B;;AACA,IAAMI,WAAW,GAAGJ,OAAO,CAAC,wBAAD,CAA3B;;AACA,IAAMK,KAAK,GAAGL,OAAO,CAAC,iBAAD,CAArB;;AACA,IAAMM,eAAe,GAAGN,OAAO,CAAC,wBAAD,CAA/B;AAEA;;;;;;;;;;;;;;;;;AAeAO,MAAM,CAACC,OAAP;AAAA;;AAAA;;AACE;;;;;;;;;;AAWA;;;;;;;;;AASA,gCAAYC,QAAZ,EAA2B;AAAA;;AAAA,QAAfA,QAAe;AAAfA,MAAAA,QAAe,GAAJ,EAAI;AAAA;;AAAA;;AACzB,8BACEL,WAAW,CACT;AACEM,MAAAA,EAAE,EAAE,6BADN;AAEEC,MAAAA,UAAU,EAAE;AAFd,KADS,EAKTF,QALS,CADb;AASA,UAAKG,WAAL,CAAiBC,aAAjB,GAAiC;AAC/B,OAAC,MAAKC,SAAL,CAAeH,UAAhB,GAA6B;AAC3BI,QAAAA,IAAI,EAAE,QADqB;AAE3BC,QAAAA,QAAQ,EAAE;AAFiB;AADE,KAAjC;AAVyB;AAgB1B;AAED;;;;;;;;;;;AAvCF;AAAA;AAAA,wBAgDMC,SAhDN,EAgDiBR,QAhDjB,EAgD2B;AACvB,2FAAiBQ,SAAjB;AAAA,qCAA4B,WAAOC,OAAP,EAAgBC,MAAhB,EAA2B;AACrD,cAAMC,GAAG,GAAG,kGAAZ;AACA,cAAMC,MAAM,GAAGJ,SAAS,CAACR,QAAQ,CAACE,UAAV,CAAxB;AACA,cAAIW,OAAJ;;AACA,iBAAO,CAACA,OAAO,GAAGF,GAAG,CAACG,IAAJ,CAASF,MAAT,CAAX,MAAiC,IAAxC,EAA8C;AAC5C,gBAAMG,IAAI,GAAGF,OAAO,CAAC,CAAD,CAApB;AACA,gBAAMG,MAAM,GAAGH,OAAO,CAAC,CAAD,CAAtB;AACAL,YAAAA,SAAS,CAACO,IAAD,CAAT,GAAkBC,MAAlB;AACD;;AACDP,UAAAA,OAAO,CAACD,SAAD,CAAP;AACD,SAVD;;AAAA;AAAA;AAAA;AAAA;AAWD;AA5DH;;AAAA;AAAA,EAAoDlB,sBAApD,4CAUyB,EAVzB","sourcesContent":["const __SActionsStreamAction = require('../SActionsStreamAction');\nconst __packageRoot = require('../../path/packageRoot');\nconst __fs = require('fs');\nconst __ensureDirSync = require('../../fs/ensureDirSync');\nconst __deepMerge = require('../../object/deepMerge');\nconst __md5 = require('../../crypt/md5');\nconst __writeJsonSync = require('../../fs/writeJsonSync');\n\n/**\n * @name            SExtractStreamAction\n * @namespace           node.stream.actions\n * @type            Class\n * @extends         SActionsStreamAction\n *\n * This actions allows you to extract some data from the specified streamObj property using custom comments syntax like \"/* extract:propName *\\/ ... /* extract *\\/\".\n * This \"propName\" specify in which streamObj property you want to save the extracted content.\n *\n * @param       {Object}Â        [settings={}]          A settings object to configure your action\n * - sourceProp ('data') {String}: Specify the source property you want to extract data from\n * @return      {Promise}                         A simple promise that will be resolved when the process is finished\n *\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = class SExtractStreamAction extends __SActionsStreamAction {\n  /**\n   * @name            definitionObj\n   * @type             Object\n   * @static\n   *\n   * Store the definition object that specify the streamObj required properties, types, etc...\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  static definitionObj = {};\n\n  /**\n   * @name            constructor\n   * @type            Function\n   * @constructor\n   *\n   * Constructor\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(settings = {}) {\n    super(\n      __deepMerge(\n        {\n          id: 'actionStream.action.extract',\n          sourceProp: 'data'\n        },\n        settings\n      )\n    );\n    this.constructor.definitionObj = {\n      [this._settings.sourceProp]: {\n        type: 'String',\n        required: true\n      }\n    };\n  }\n\n  /**\n   * @name          run\n   * @type          Function\n   * @async\n   *\n   * Override the base class run method\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  run(streamObj, settings) {\n    return super.run(streamObj, async (resolve, reject) => {\n      const reg = /\\/\\*\\s?extract:([a-zA-Z0-9-_]+)\\s?\\*\\/(((?!\\/\\*\\s?extract\\s?\\*\\/)(.|\\n))*)\\/\\*\\s?extract\\s?\\*\\//g;\n      const source = streamObj[settings.sourceProp];\n      let myArray;\n      while ((myArray = reg.exec(source)) !== null) {\n        const prop = myArray[1];\n        const string = myArray[2];\n        streamObj[prop] = string;\n      }\n      resolve(streamObj);\n    });\n  }\n};\n"]}
{"version":3,"sources":["SFsFilesResolverStreamAction.js"],"names":["__SActionsStreamAction","require","__glob","__deepMerge","__fs","__isDirectory","__isSymlink","__isGlob","__isPath","__SPromise","module","exports","settings","name","id","ignoreFolders","streamObj","_settings","resolve","reject","filesPathes","streamObjArray","inputs","Array","isArray","input","forEach","inputSplits","split","searchPath","searchPattern","push","warn","path","sync","ignore","map","f","reg","RegExp","p","filesPathArray","filePath","content","readFileSync","matches","match","length","Error","out","Object","assign","property","type","required"],"mappings":"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","sourcesContent":["const __SActionsStreamAction = require('../SActionsStreamAction');\nconst __glob = require('glob');\nconst __deepMerge = require('../../object/deepMerge');\nconst __fs = require('fs');\nconst __isDirectory = require('../../is/directory');\nconst __isSymlink = require('../../is/symlink');\nconst __isGlob = require('is-glob');\nconst __isPath = require('../../is/path');\nconst __SPromise = require('../../promise/SPromise');\n/**\n * @name            SFindInFileStreamAction\n * @namespace       node.stream.actions\n * @type            Class\n * @extends         SActionsStreamAction\n *\n * This class is a stream action that allows you search inside files for a certain string/pattern\n * And get back the list of founded files.\n *\n * @param       {Object}Â        streamObj          The streamObj object with the properties described bellow:\n * @return      {Promise}                         A simple promise that will be resolved when the process is finished\n *\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = class SFindInFileStreamAction extends __SActionsStreamAction {\n  /**\n   * @name            definitionObj\n   * @type             Object\n   * @static\n   *\n   * Store the definition object that specify the streamObj required properties, types, etc...\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  static definitionObj = {\n    input: {\n      type: 'String|Array<String>',\n      required: true\n    }\n  };\n\n  /**\n   * @name            constructor\n   * @type            Function\n   * @constructor\n   *\n   * Constructor\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(settings = {}) {\n    super(\n      __deepMerge(\n        {\n          name: 'File resolver',\n          id: 'actionStream.action.fs.filesResolver',\n          ignoreFolders: []\n        },\n        settings\n      )\n    );\n  }\n\n  /**\n   * @name          run\n   * @type          Function\n   * @async\n   *\n   * Override the base class run method\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  run(streamObj, settings = {}) {\n    settings = __deepMerge(this._settings, settings);\n    return super.run(streamObj, async (resolve, reject) => {\n      const filesPathes = [];\n      const streamObjArray = [];\n\n      const inputs = Array.isArray(streamObj.input)\n        ? streamObj.input\n        : [streamObj.input];\n\n      inputs.forEach((input) => {\n        // extract the pattern to search\n        const inputSplits = input.split(':');\n        const searchPath = inputSplits[0];\n        const searchPattern = inputSplits[1] ? inputSplits[1] : null;\n\n        // check if the input path is a path or a glob\n        if (!__isGlob(searchPath) && !__isPath(searchPath, true)) {\n          filesPathes.push(searchPath);\n          this.warn(\n            `One of the passed inputs is either not a valid glob pattern, either not a valid file path and will be treated as a simple String...`\n          );\n          return;\n        }\n\n        const path = __glob.sync(searchPath, {\n          ignore: settings.ignoreFolders.map((f) => {\n            return `**/${f}/**`;\n          })\n        });\n\n        const reg = new RegExp(`\\s?${searchPattern}\\s?`, 'gm');\n        path.forEach((p) => {\n          if (__isDirectory(p)) {\n            const filesPathArray = __glob.sync(`${p}/*.*`);\n            filesPathArray.forEach((filePath) => {\n              if (searchPattern) {\n                const content = __fs.readFileSync(filePath, 'utf8');\n                const matches = content.match(reg);\n                if (matches) {\n                  filesPathes.push(filePath);\n                }\n              } else {\n                filesPathes.push(filePath);\n              }\n            });\n          } else if (!__isSymlink(p)) {\n            if (searchPattern) {\n              const content = __fs.readFileSync(p, 'utf8');\n              const matches = content.match(reg);\n              if (matches) {\n                filesPathes.push(p);\n              }\n            } else {\n              filesPathes.push(p);\n            }\n          }\n        });\n      });\n\n      if (!filesPathes.length) {\n        reject(\n          new Error(\n            `Sorry but your <primary>input</primary> streamObj property setted to \"<cyan>${streamObj.input}</cyan>\" does not resolve to any files...`\n          )\n        );\n      }\n\n      if (settings.out === 'array') {\n        filesPathes.forEach((path) => {\n          streamObjArray.push(\n            Object.assign(\n              {},\n              {\n                ...streamObj,\n                input: path\n              }\n            )\n          );\n        });\n        resolve(streamObjArray);\n      } else {\n        streamObj[settings.property || 'files'] = filesPathes;\n        resolve(streamObj);\n      }\n    });\n  }\n};\n"]}
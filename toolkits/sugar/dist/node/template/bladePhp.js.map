{"version":3,"sources":["bladePhp.js"],"names":["__execPhp","require","__deepMerge","__sugarConfig","__fs","__path","module","exports","view","data","settings","rootDir","cacheDir","sugarViewsDir","resolve","__dirname","existsSync","mkdirSync","Promise","reject","error","php","outprint","Error","compile","replace","split","join","result","output","printed","ret"],"mappings":";;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAC,UAAD,CAAzB;;AACA,IAAMC,WAAW,GAAGD,OAAO,CAAC,qBAAD,CAA3B;;AACA,IAAME,aAAa,GAAGF,OAAO,CAAC,iBAAD,CAA7B;;AACA,IAAMG,IAAI,GAAGH,OAAO,CAAC,IAAD,CAApB;;AACA,IAAMI,MAAM,GAAGJ,OAAO,CAAC,MAAD,CAAtB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBAK,MAAM,CAACC,OAAP,GAAiB,UAACC,IAAD,EAAOC,IAAP,EAAkBC,QAAlB,EAAoC;AAAA,MAA7BD,IAA6B;AAA7BA,IAAAA,IAA6B,GAAtB,EAAsB;AAAA;;AAAA,MAAlBC,QAAkB;AAAlBA,IAAAA,QAAkB,GAAP,EAAO;AAAA;;AACnDA,EAAAA,QAAQ,GAAGR,WAAW,CACpB;AACES,IAAAA,OAAO,EAAER,aAAa,CAAC,eAAD,CADxB;AAEES,IAAAA,QAAQ,EAAET,aAAa,CAAC,gBAAD;AAFzB,GADoB,EAKpBO,QALoB,CAAtB;;AAQA,MAAMG,aAAa,GAAGR,MAAM,CAACS,OAAP,WAAkBC,SAAlB,sBAAtB,CATmD,CAWnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAI,CAACX,IAAI,CAACY,UAAL,CAAgBN,QAAQ,CAACE,QAAzB,CAAL,EAAyCR,IAAI,CAACa,SAAL,CAAeP,QAAQ,CAACE,QAAxB;AAEzC,SAAO,IAAIM,OAAJ,CAAY,CAACJ,OAAD,EAAUK,MAAV,KAAqB;AACtC;AACAnB,IAAAA,SAAS,CACPe,SAAS,GAAG,uBADL,EAEPA,SAAS,GAAG,gBAFL,EAGP,CAACK,KAAD,EAAQC,GAAR,EAAaC,QAAb,KAA0B;AACxB,UAAIF,KAAJ,EAAW;AACT,cAAM,IAAIG,KAAJ,CAAUH,KAAV,CAAN;AACD,OAHuB,CAIxB;;;AACAC,MAAAA,GAAG,CAACG,OAAJ,CACE,CAACd,QAAQ,CAACC,OAAV,EAAmBE,aAAnB,EAAkC,GAAlC,CADF,EAEEL,IAAI,CAACiB,OAAL,CAAa,YAAb,EAA2B,EAA3B,EAA+BC,KAA/B,CAAqC,GAArC,EAA0CC,IAA1C,CAA+C,GAA/C,CAFF,EAGElB,IAHF,EAIEC,QAAQ,CAACE,QAJX,EAKE,CAACQ,KAAD,EAAQQ,MAAR,EAAgBC,MAAhB,EAAwBC,OAAxB,KAAoC;AAClC;AACA,YAAMC,GAAG,GAAGH,MAAM,IAAIE,OAAV,IAAqBD,MAArB,IAA+BT,KAA3C,CAFkC,CAGlC;;AACAN,QAAAA,OAAO,CAACiB,GAAD,CAAP;AACD,OAVH;AAYD,KApBM,CAAT;AAsBD,GAxBM,CAAP;AAyBD,CAxDD","sourcesContent":["const __execPhp = require('exec-php');\nconst __deepMerge = require('../object/deepMerge');\nconst __sugarConfig = require('../config/sugar');\nconst __fs = require('fs');\nconst __path = require('path');\n\n/**\n * @name                      bladePhp\n * @namespace                 node.template\n * @type                      Function\n *\n * Compile a blade php view and return a promise with the\n * resulting template\n *\n * @param    {String}               view                            relative path to the view to render\n * @param    {Object}               [data={}]                        The data to pass to the view\n * @param     {Object}Â              [settings={}]                     A settings object to configure your blade compilation\n * - rootDir (__sugarConfig('views.rootDir')) {String}: Specify the root views folder\n * - cacheDir (__sugarConfig('views.cacheDir')) {String}: Specify the root views cache folder\n * @return    {Promise}                                                A promise with the template result passed in\n *\n * @example    js\n * const bladePhp = require('@coffeekraken/sugar/template/bladePhp');\n * bladePhp('my-cool-view', {\n *   hello: 'World'\n * }).then((result) => {\n *   // do something with the result\n * });\n *\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = (view, data = {}, settings = {}) => {\n  settings = __deepMerge(\n    {\n      rootDir: __sugarConfig('views.rootDir'),\n      cacheDir: __sugarConfig('views.cacheDir')\n    },\n    settings\n  );\n\n  const sugarViewsDir = __path.resolve(`${__dirname}/../../php/views`);\n\n  // const viewPath = `${settings.rootDir}/${view\n  //   .replace('.blade.php', '')\n  //   .split('.')\n  //   .join('/')}.blade.php`;\n  // const sugarViewPath = `${sugarViewsDir}/${view\n  //   .replace('.blade.php', '')\n  //   .split('.')\n  //   .join('/')}.blade.php`;\n\n  // if (!__fs.existsSync(viewPath)) {\n  //   if (!__fs.existsSync(sugarViewPath)) {\n  //     throw new Error(\n  //       `It seems thats the view \"<primary>${view}</primary>\" does not exists either in your project views folder \"<cyan>${settings.rootDir}</cyan>\", nor in the Sugar package folder \"<magenta>${sugarViewsDir}</magenta>\"...`\n  //     );\n  //   }\n  //   settings.rootDir = sugarViewsDir;\n  // }\n\n  if (!__fs.existsSync(settings.cacheDir)) __fs.mkdirSync(settings.cacheDir);\n\n  return new Promise((resolve, reject) => {\n    // preparing the php execution\n    __execPhp(\n      __dirname + '/bladePhp/compile.php',\n      __dirname + '/../../bin/php',\n      (error, php, outprint) => {\n        if (error) {\n          throw new Error(error);\n        }\n        // execute the php engine and get back the result\n        php.compile(\n          [settings.rootDir, sugarViewsDir, '/'],\n          view.replace('.blade.php', '').split('/').join('.'),\n          data,\n          settings.cacheDir,\n          (error, result, output, printed) => {\n            // get the best result possible\n            const ret = result || printed || output || error;\n            // resolve the promise with the best result possible\n            resolve(ret);\n          }\n        );\n      }\n    );\n  });\n};\n"]}
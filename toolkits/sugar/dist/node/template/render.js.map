{"version":3,"sources":["render.js"],"names":["__sugarConfig","require","__getFilename","__fs","__path","__getExt","module","exports","render","viewPath","data","settings","engines","rootDir","viewDir","Object","keys","forEach","ext","replace","split","join","viewName","trim","folderPath","viewToCompile","readdirSync","resolve","filter","file","filename","slice","viewToCompileExt","viewToCompileWithoutExt","jsFilePath","jsonFilePath","existsSync","engineFn","toLowerCase","Error","result"],"mappings":"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","sourcesContent":["const __sugarConfig = require('../config/sugar');\nconst __getFilename = require('../fs/filename');\nconst __fs = require('fs');\nconst __path = require('path');\nconst __getExt = require('../fs/extension');\n\n/**\n * @name              render\n * @namespace         node.template\n * @type              Function\n * @async\n *\n * This function take a view path, a data object and optionaly a settings object to compile\n * the view and return a simple Promise that will be resolved or rejected depending on the\n * process status.\n *\n * @param       {String}        viewPath        The view path to compile. This has to be a dotted path like \"my.cool.view\" relative to the @config.views.rootDir directory\n * @param       {Object}        [data={}]       An object of data to use to compile the view correctly\n * @param       {Object}        [settings={}]   An object of settings to configure your rendering process. Here's the list of available settings:\n * - No settings for now...\n *\n * @example       js\n * const render = require('@coffeekraken/sugar/node/template/render');\n * const result = await render('my.cool.template, {\n *    hello: 'world'\n * });\n *\n * @since     2.0.0\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = async function render(viewPath, data = null, settings = {}) {\n  const engines = {\n    'blade.php': require('./bladePhp')\n  };\n\n  // listing the files available in the passed view folder\n  const rootDir = __sugarConfig('views.rootDir');\n  let viewDir = viewPath;\n  Object.keys(engines).forEach((ext) => {\n    viewDir = viewDir.replace(`.${ext}`, '');\n  });\n  viewDir = viewDir.split('.').join('/');\n  const viewName = __getFilename(viewDir).trim();\n  const folderPath = viewDir.replace(viewName, '').trim();\n\n  // list all the files in the folder\n  const viewToCompile = `${folderPath}${\n    __fs.readdirSync(__path.resolve(rootDir, folderPath)).filter((file) => {\n      // get the filename\n      const filename = __getFilename(file);\n      const ext = filename.split('.').slice(1).join('.');\n      if (viewName === filename.replace(`.${ext}`, '')) {\n        return true;\n      }\n      return false;\n    })[0]\n  }`;\n\n  const viewToCompileExt = viewToCompile.split('.').slice(1).join('.');\n  const viewToCompileWithoutExt = viewToCompile.replace(\n    `.${viewToCompileExt}`,\n    ''\n  );\n\n  // check if we don't have data passed to check if we can\n  // grab them from a json or js file\n  if (!data) {\n    const jsFilePath = __path.resolve(rootDir, viewToCompileWithoutExt) + '.js';\n    const jsonFilePath =\n      __path.resolve(rootDir, viewToCompileWithoutExt) + '.json';\n    if (__fs.existsSync(jsFilePath)) {\n      data = require(jsFilePath);\n    } else if (__fs.existsSync(jsonFilePath)) {\n      data = require(jsonFilePath);\n    }\n  }\n\n  // get the engine to compile the view\n  const engineFn = engines[viewToCompileExt.toLowerCase()];\n  if (!engineFn) {\n    throw new Error(\n      `You try to render the view \"<primary>${viewToCompile}</primary>\" but these kind of views are not supported yet. Please use one of these views formats: \"<cyan>${Object.keys(\n        engines\n      ).join(', ')}</cyan>\"...`\n    );\n  }\n\n  // process to the rendering\n  const result = await engineFn(viewToCompile, data, settings);\n\n  // return the result\n  return result;\n};\n"]}
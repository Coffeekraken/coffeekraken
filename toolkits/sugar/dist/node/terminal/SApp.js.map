{"version":3,"sources":["SApp.js"],"names":["__childProcess","require","__deepMerge","__blessed","__parseHtml","__splitEvery","__countLine","__parseSchema","__sugarConfig","__SPanel","__packageRoot","module","exports","name","settings","_settings","blessed","screen","smartCSR","_name","key","ch","destroy","e","nextMenu","previousMenu","setTimeout","goTo","homeRoute","url","i","Object","keys","routes","length","parsedSchema","match","params","menuUrls","menu","currentMenuItemIndex","indexOf","_currentUrl","nextMenuItemUrl","previousMenuItemUrl","routeObj","_getRouteObj","_renderLayout","contentPanel","contentProcess","_currentPanes","beforeLog","content","spawn","env","process","IS_CHILD_PROCESS","detached","cwd","shell","stdout","on","data","log","toString","split","filter","m","stderr","panel","layout","append","render"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAMA,cAAc,GAAGC,OAAO,CAAC,eAAD,CAA9B;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,qBAAD,CAA3B;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,SAAD,CAAzB;;AACA,MAAMG,WAAW,GAAGH,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAMI,YAAY,GAAGJ,OAAO,CAAC,sBAAD,CAA5B;;AACA,MAAMK,WAAW,GAAGL,OAAO,CAAC,qBAAD,CAA3B;;AACA,MAAMM,aAAa,GAAGN,OAAO,CAAC,oBAAD,CAA7B;;AACA,MAAMO,aAAa,GAAGP,OAAO,CAAC,iBAAD,CAA7B;;AACA,MAAMQ,QAAQ,GAAGR,OAAO,CAAC,oBAAD,CAAxB;;AACA,MAAMS,aAAa,GAAGT,OAAO,CAAC,qBAAD,CAA7B;AAEA;;;;;;;;;;;;;;;;;;;;;AAmBAU,MAAM,CAACC,OAAP;AAAA;;AAAA;;AACE;;;;;;;;;;AAWA;;;;;;;;;;AAWA;;;;;;;;;;AAWA;;;;;;;;;AASA,gBAAYC,IAAZ,EAAkBC,QAAlB,EAAiC;AAAA;;AAAA,QAAfA,QAAe;AAAfA,MAAAA,QAAe,GAAJ,EAAI;AAAA;;AAAA;;AAC/B;AACA,UAAMC,SAAS,GAAGb,WAAW,CAC3B;AACEc,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE;AACNC,UAAAA,QAAQ,EAAE;AADJ;AADD;AADX,KAD2B,EAQ3BJ,QAR2B,CAA7B,CAF+B,CAY/B;;;AACA,8BAAMC,SAAS,CAACC,OAAV,CAAkBC,MAAxB,EAb+B,CAc/B;;AAd+B,4DAjCzB,IAiCyB;;AAAA,gEAtBrB,EAsBqB;;AAAA,oEAXjB,EAWiB;;AAe/B,UAAKF,SAAL,GAAiBA,SAAjB,CAf+B,CAiB/B;;AACA,UAAKI,KAAL,GAAaN,IAAb;;AAEA,UAAKO,GAAL,CAAS,KAAT,EAAgB,CAACC,EAAD,EAAKD,GAAL,KAAa;AAC3B,YAAKE,OAAL;AACD,KAFD;;AAIA,UAAKF,GAAL,CAAS,OAAT,EAAmBG,CAAD,IAAO;AACvB,YAAKC,QAAL;AACD,KAFD;;AAGA,UAAKJ,GAAL,CAAS,MAAT,EAAkBG,CAAD,IAAO;AACtB,YAAKE,YAAL;AACD,KAFD,EA3B+B,CA+B/B;;;AACAC,IAAAA,UAAU,CAAC,MAAM;AACf,YAAKC,IAAL,CAAU,MAAKZ,SAAL,CAAea,SAAzB;AACD,KAFS,CAAV;AAhC+B;AAmChC;AAED;;;;;;;;;;;;;;AAhFF;AAAA;AAAA,iCA4FeC,GA5Ff,EA4FoB;AAChB;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,MAAM,CAACC,IAAP,CAAY,KAAKjB,SAAL,CAAekB,MAA3B,EAAmCC,MAAvD,EAA+DJ,CAAC,EAAhE,EAAoE;AAClE;AACA,cAAMK,YAAY,GAAG5B,aAAa,CAChCsB,GADgC,EAEhCE,MAAM,CAACC,IAAP,CAAY,KAAKjB,SAAL,CAAekB,MAA3B,EAAmCH,CAAnC,CAFgC,CAAlC;;AAIA,YAAIK,YAAY,CAACC,KAAjB,EAAwB;AACtB,iBAAO,EACL,GAAG,KAAKrB,SAAL,CAAekB,MAAf,CAAsBF,MAAM,CAACC,IAAP,CAAY,KAAKjB,SAAL,CAAekB,MAA3B,EAAmCH,CAAnC,CAAtB,CADE;AAELD,YAAAA,GAFK;AAGLQ,YAAAA,MAAM,EAAEF,YAAY,CAACE;AAHhB,WAAP;AAKD;AACF,OAfe,CAgBhB;;;AACA,aAAO,KAAP;AACD;AAED;;;;;;;;;AAhHF;AAAA;AAAA,+BAwHa;AACT;AACA,YAAMC,QAAQ,GAAGP,MAAM,CAACC,IAAP,CAAY,KAAKjB,SAAL,CAAewB,IAA3B,CAAjB;AACA,YAAMC,oBAAoB,GAAGF,QAAQ,CAACG,OAAT,CAAiB,KAAKC,WAAtB,CAA7B;AACA,UACEF,oBAAoB,KAAK,CAAC,CAA1B,IACAA,oBAAoB,KAAKF,QAAQ,CAACJ,MAAT,GAAkB,CAF7C,EAIE;AACF,YAAMS,eAAe,GAAGL,QAAQ,CAACE,oBAAoB,GAAG,CAAxB,CAAhC,CATS,CAUT;;AACA,WAAKb,IAAL,CAAUgB,eAAV;AACD;AAED;;;;;;;;;AAtIF;AAAA;AAAA,mCA8IiB;AACb;AACA,YAAML,QAAQ,GAAGP,MAAM,CAACC,IAAP,CAAY,KAAKjB,SAAL,CAAewB,IAA3B,CAAjB;AACA,YAAMC,oBAAoB,GAAGF,QAAQ,CAACG,OAAT,CAAiB,KAAKC,WAAtB,CAA7B;AACA,UAAIF,oBAAoB,KAAK,CAAC,CAA1B,IAA+BA,oBAAoB,KAAK,CAA5D,EAA+D;AAC/D,YAAMI,mBAAmB,GAAGN,QAAQ,CAACE,oBAAoB,GAAG,CAAxB,CAApC,CALa,CAMb;;AACA,WAAKb,IAAL,CAAUiB,mBAAV;AACD;AAED;;;;;;;;;;;;AAxJF;AAAA;AAAA,yBAmKOf,GAnKP,EAmKY;AACR;AACA,YAAMgB,QAAQ,GAAG,KAAKC,YAAL,CAAkBjB,GAAlB,CAAjB,CAFQ,CAIR;;;AACA,UAAI,CAACgB,QAAL,EAAe,OAAO,KAAP,CALP,CAOR;;AACA,WAAKH,WAAL,GAAmBb,GAAnB,CARQ,CAUR;;AACA,WAAKkB,aAAL,CAAmBF,QAAnB;AACD;AAED;;;;;;;;;;;;AAjLF;AAAA;AAAA,6BA4LWhB,GA5LX,EA4LgB;AACZ,aAAO,KAAKa,WAAL,KAAqBb,GAA5B;AACD;AAED;;;;;;;;;;;;AAhMF;AAAA;AAAA,wCA2MsBgB,QA3MtB,EA2MgC;AAC5B,UAAIG,YAAJ,EAAkBC,cAAlB;;AAEA,UAAI,CAAC,KAAKC,aAAL,CAAmBL,QAAQ,CAAChB,GAA5B,CAAL,EAAuC;AACrC,aAAKqB,aAAL,CAAmBL,QAAQ,CAAChB,GAA5B,IAAmC,EAAnC,CADqC,CAGrC;;AACAmB,QAAAA,YAAY,GAAG,IAAIvC,QAAJ,CAAa;AAC1B0C,UAAAA,SAAS,EAAE,MAAM;AACf,mBAAO,uBAAP;AACD;AAHyB,SAAb,CAAf,CAJqC,CAUrC;AACA;;AACA,cAAMC,OAAO,GAAG,MAAMP,QAAQ,CAACO,OAAT,CAAiBP,QAAQ,CAACR,MAA1B,CAAtB;;AACA,YAAI,OAAOe,OAAP,KAAmB,QAAvB,EAAiC;AAC/BH,UAAAA,cAAc,GAAGjD,cAAc,CAACqD,KAAf,CAAqBD,OAArB,EAA8B,EAA9B,EAAkC;AACjDE,YAAAA,GAAG,EAAE,EACH,GAAGC,OAAO,CAACD,GADR;AAEHE,cAAAA,gBAAgB,EAAE;AAFf,aAD4C;AAKjDC,YAAAA,QAAQ,EAAE,IALuC;AAMjDC,YAAAA,GAAG,EAAEhD,aAAa,CAAC6C,OAAO,CAACG,GAAR,EAAD,CAN+B;AAOjDC,YAAAA,KAAK,EAAE;AAP0C,WAAlC,CAAjB;AASAV,UAAAA,cAAc,CAACW,MAAf,CAAsBC,EAAtB,CAAyB,MAAzB,EAAkCC,IAAD,IAAU;AACzCd,YAAAA,YAAY,CAACe,GAAb,CACED,IAAI,CACDE,QADH,GAEGC,KAFH,CAES,GAFT,EAGGC,MAHH,CAGWC,CAAD,IAAOA,CAAC,KAAK,EAHvB,CADF;AAMD,WAPD;AAQAlB,UAAAA,cAAc,CAACmB,MAAf,CAAsBP,EAAtB,CAAyB,MAAzB,EAAkCC,IAAD,IAAU;AACzCd,YAAAA,YAAY,CAACe,GAAb,CACED,IAAI,CACDE,QADH,GAEGC,KAFH,CAES,GAFT,EAGGC,MAHH,CAGWC,CAAD,IAAOA,CAAC,KAAK,EAHvB,CADF;AAMD,WAPD;AAQD,SAvCoC,CAyCrC;;;AACA,aAAKjB,aAAL,CAAmBL,QAAQ,CAAChB,GAA5B,EAAiC0B,OAAjC,GAA2CN,cAA3C;AACA,aAAKC,aAAL,CAAmBL,QAAQ,CAAChB,GAA5B,EAAiCwC,KAAjC,GAAyCrB,YAAzC;AACD,OA5CD,MA4CO;AACL;AACAA,QAAAA,YAAY,GAAG,KAAKE,aAAL,CAAmBL,QAAQ,CAAChB,GAA5B,EAAiCwC,KAAhD;AACApB,QAAAA,cAAc,GAAG,KAAKC,aAAL,CAAmBL,QAAQ,CAAChB,GAA5B,EAAiC0B,OAAlD;AACD,OAnD2B,CAqD5B;;;AACA,YAAMe,MAAM,GAAG,MAAM,KAAKvD,SAAL,CAAeuD,MAAf,CAAsBtB,YAAtB,CAArB,CAtD4B,CAuD5B;;AACA,WAAKuB,MAAL,CAAYD,MAAZ,EAxD4B,CAyD5B;;AACA,WAAKE,MAAL;AACD;AAtQH;;AAAA;AAAA,EAAoCrE,SAAS,CAACc,MAA9C","sourcesContent":["const __childProcess = require('child_process');\nconst __deepMerge = require('../object/deepMerge');\nconst __blessed = require('blessed');\nconst __parseHtml = require('./parseHtml');\nconst __splitEvery = require('../string/splitEvery');\nconst __countLine = require('../string/countLine');\nconst __parseSchema = require('../url/parseSchema');\nconst __sugarConfig = require('../config/sugar');\nconst __SPanel = require('../terminal/SPanel');\nconst __packageRoot = require('../path/packageRoot');\n\n/**\n * @name                    SApp\n * @namespace           node.terminal\n * @type                    Class\n *\n * This class define an application in the terminal that you can easily configure to have the look and feel that you want\n * through simple settings described bellow.\n *\n * @param           {String}          name            Specify a name for this application\n * @param           {Object}          [settings={}]   An object of settings described bellow:\n *\n * @example         js\n * const SApp = require('@coffeekraken/sugar/node/terminal/SApp');\n * const app = new SApp('My Cool Application', {\n * });\n *\n * @since       2.0.0\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = class SApp extends __blessed.screen {\n  /**\n   * @name              _name\n   * @type              String\n   * @private\n   *\n   * Store the application name\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _name = null;\n\n  /**\n   * @name              _settings\n   * @type              Object\n   * @private\n   *\n   * Store the application settings\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _settings = {};\n\n  /**\n   * @name              _currentPanes\n   * @type              Object\n   * @private\n   *\n   * Store the current panes contents depending on the current url\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _currentPanes = {};\n\n  /**\n   * @name              constructor\n   * @type              Function\n   * @constructor\n   *\n   * Constructor\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(name, settings = {}) {\n    // save the settings\n    const _settings = __deepMerge(\n      {\n        blessed: {\n          screen: {\n            smartCSR: true\n          }\n        }\n      },\n      settings\n    );\n    // extend from blessed.box\n    super(_settings.blessed.screen);\n    // save settings\n    this._settings = _settings;\n\n    // save the name\n    this._name = name;\n\n    this.key('C-c', (ch, key) => {\n      this.destroy();\n    });\n\n    this.key('right', (e) => {\n      this.nextMenu();\n    });\n    this.key('left', (e) => {\n      this.previousMenu();\n    });\n\n    // render the layout with the current url passed\n    setTimeout(() => {\n      this.goTo(this._settings.homeRoute);\n    });\n  }\n\n  /**\n   * @name                      _getRouteObj\n   * @type                      Function\n   * @private\n   *\n   * Get the route configuration object depending on the current url\n   *\n   * @param         {String}            url             The current url\n   * @return        {Object}                            The corresponding route object\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _getRouteObj(url) {\n    // loop on each routes\n    for (let i = 0; i < Object.keys(this._settings.routes).length; i++) {\n      // copmpare the url to the route\n      const parsedSchema = __parseSchema(\n        url,\n        Object.keys(this._settings.routes)[i]\n      );\n      if (parsedSchema.match) {\n        return {\n          ...this._settings.routes[Object.keys(this._settings.routes)[i]],\n          url,\n          params: parsedSchema.params\n        };\n      }\n    }\n    // by default, return false\n    return false;\n  }\n\n  /**\n   * @name                    nextMenu\n   * @type                    Function\n   *\n   * This method allows you to pass to the next menu item\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  nextMenu() {\n    // get the actual menu item index\n    const menuUrls = Object.keys(this._settings.menu);\n    const currentMenuItemIndex = menuUrls.indexOf(this._currentUrl);\n    if (\n      currentMenuItemIndex === -1 ||\n      currentMenuItemIndex === menuUrls.length - 1\n    )\n      return;\n    const nextMenuItemUrl = menuUrls[currentMenuItemIndex + 1];\n    // go to the next menu item\n    this.goTo(nextMenuItemUrl);\n  }\n\n  /**\n   * @name                    previousMenu\n   * @type                    Function\n   *\n   * This method allows you to pass to the next menu item\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  previousMenu() {\n    // get the actual menu item index\n    const menuUrls = Object.keys(this._settings.menu);\n    const currentMenuItemIndex = menuUrls.indexOf(this._currentUrl);\n    if (currentMenuItemIndex === -1 || currentMenuItemIndex === 0) return;\n    const previousMenuItemUrl = menuUrls[currentMenuItemIndex - 1];\n    // go to the next menu item\n    this.goTo(previousMenuItemUrl);\n  }\n\n  /**\n   * @name                    goTo\n   * @type                    Function\n   *\n   * This method allows you to change the \"page\" by passing a simple url like 'build/scss' depending on the registered routes in your app.\n   *\n   * @param         {String}          url           The url to go to\n   * @return        {Boolean}                       true if ok, false if something goes wrong like the page does not exist, etc...\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  goTo(url) {\n    // get the current route object\n    const routeObj = this._getRouteObj(url);\n\n    // if something goes wrong\n    if (!routeObj) return false;\n\n    // save the current url\n    this._currentUrl = url;\n\n    // render the layout with the current url passed\n    this._renderLayout(routeObj);\n  }\n\n  /**\n   * @name                    isActive\n   * @type                    Function\n   *\n   * This method allows you to check if the passed url is the active one\n   *\n   * @param       {String}        url            The url to check\n   * @return      {Boolean}                       true if is the active one, false if not\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  isActive(url) {\n    return this._currentUrl === url;\n  }\n\n  /**\n   * @name                    _renderLayout\n   * @type                    Function\n   * @private\n   *\n   * Render the layout with the current content defined by the current route object passed\n   *\n   * @param           {Object}          routeObj            The current route object to render with the layout\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  async _renderLayout(routeObj) {\n    let contentPanel, contentProcess;\n\n    if (!this._currentPanes[routeObj.url]) {\n      this._currentPanes[routeObj.url] = {};\n\n      // creating the panel to host the logs\n      contentPanel = new __SPanel({\n        beforeLog: () => {\n          return '<blue><time/></blue> ';\n        }\n      });\n\n      // switch between the content types that can be:\n      // - string: Launch a new child process with the specified command\n      const content = await routeObj.content(routeObj.params);\n      if (typeof content === 'string') {\n        contentProcess = __childProcess.spawn(content, [], {\n          env: {\n            ...process.env,\n            IS_CHILD_PROCESS: true\n          },\n          detached: true,\n          cwd: __packageRoot(process.cwd()),\n          shell: true\n        });\n        contentProcess.stdout.on('data', (data) => {\n          contentPanel.log(\n            data\n              .toString()\n              .split('~')\n              .filter((m) => m !== '')\n          );\n        });\n        contentProcess.stderr.on('data', (data) => {\n          contentPanel.log(\n            data\n              .toString()\n              .split('~')\n              .filter((m) => m !== '')\n          );\n        });\n      }\n\n      // store the content panel and process for later\n      this._currentPanes[routeObj.url].process = contentProcess;\n      this._currentPanes[routeObj.url].panel = contentPanel;\n    } else {\n      // restore the content panel and process\n      contentPanel = this._currentPanes[routeObj.url].panel;\n      contentProcess = this._currentPanes[routeObj.url].process;\n    }\n\n    // getting the overall layout\n    const layout = await this._settings.layout(contentPanel);\n    // rendering the layout to the terminal\n    this.append(layout);\n    // render the screen\n    this.render();\n  }\n};\n"]}
{"version":3,"sources":["SCommand.js"],"names":["__childProcess","require","__deepMerge","__SPromise","__hotkey","__uniqid","__argsToString","__watchCli","__minimatch","__SCli","__spawn","__replaceTokens","__notifier","__packageRoot","__path","module","exports","name","returnCommandsArray","SCommand","_commandsStack","forEach","instance","push","namespace","toLowerCase","command","settings","Error","resolve","reject","trigger","cancel","_name","_command","_id","_initKey","run","argsObj","concurrent","color","before","after","title","notification","successIconPath","join","__dirname","errorIconPath","runIconPath","summary","watch","key","log","activeSpace","onKeyPress","start","setTimeout","_settings","bind","lastProcessObj","state","on","keyObj","isRunning","kill","definitionObj","items","Object","keys","argName","argDefinitionObj","argValue","undefined","default","level","id","text","description","_isWatching","_watchProcess","stdout","value","length","commandLine","pattern","definition","spawn","shell","env","process","IS_CHILD_PROCESS","watchTimeout","data","action","toString","split","path","msg","clearTimeout","mapToProperty","watchPath","args","code","signal","_currentProcess","childProcessPromise","_destroyed","instanceIdx","indexOf","splice","unwatch","skipAsk","promise","result","_currentProcessSuccessTimeout","answer","_ask","type","_buildSummaryItems","Array","isArray","item","notify","message","icon","sound","wait","_runSCli","_processesStack","stack","console","pipe","processor","stacks","question","_this","commandInstance","cancelDefaultReturn","_processObjWhenNoLastOne","stderr"],"mappings":"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","sourcesContent":["const __childProcess = require('child_process');\nconst __deepMerge = require('../object/deepMerge');\nconst __SPromise = require('../promise/SPromise');\nconst __hotkey = require('../keyboard/hotkey');\nconst __uniqid = require('../string/uniqid');\nconst __argsToString = require('../cli/argsToString');\nconst __watchCli = require('../../cli/fs/watch.cli');\nconst __minimatch = require('minimatch');\nconst __SCli = require('../cli/SCli');\nconst __spawn = require('../process/spawn');\nconst __replaceTokens = require('../string/replaceTokens');\nconst __notifier = require('node-notifier');\nconst __packageRoot = require('../path/packageRoot');\nconst __path = require('path');\n\n/**\n * @name            SCommand\n * @namespace           node.terminal\n * @type            Class\n * @extends         SPromise\n *\n * This class define a command that you can launch, subscribe for data, etc...\n *\n * // TODO: settings documentation\n *\n * @param         {String}        name            Specify a simple name for this command\n * @param        {String}         command         The command that this instance has to represent. Can contain some \"tokens\" like \"[port]\" that will be replaced with the asked question results\n * @param         {Object}        [settings={}]     Some settings to configure your command\n * - ask (null) {Object|Array}: Specify one or more (Array) questions to ask before running the command. Here's the possible object properties for a question:\n *    - type (summary) {String}: Specify the question type. For now it support:\n *        - summary: This display a list of default values for some properties with the ability to edit each of them.\n *          - items ([]) {Array}: An array of properties object to display.\n *            - id (null) {String}: The id of the property like \"port\"\n *            - text (null) {String}: The text to display before the property value like \"Server port\"\n *            - default (null) {Mixed}: The default value for this property\n *    - question (null) {String}: Specify the question to ask to the user\n *\n * @example       js\n * const SCommand = require('@coffeekraken/sugar/node/terminal/SCommand');\n * const myCommand = new SCommand('ls -la', {});\n * myCommand.run();\n *\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = class SCommand extends __SPromise {\n  /**\n   * @name          _id\n   * @type          String\n   * @private\n   *\n   * Store the command generated uniquid\n   *\n   * @since     2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _id = null;\n\n  /**\n   * @name          _name\n   * @type          String\n   * @private\n   *\n   * Store the command name\n   *\n   * @since     2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _name = null;\n\n  /**\n   * @name          _command\n   * @type          String\n   * @private\n   *\n   * Store the command\n   *\n   * @since     2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _command = null;\n\n  /**\n   * @name          _id\n   * @type          String\n   * @private\n   *\n   * Store a unique id that identify the command instance\n   *\n   * @since     2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _id = null;\n\n  /**\n   * @name          _destroyed\n   * @type          String\n   * @default       false\n   * @private\n   *\n   * Store the \"destroy\" state of this command\n   *\n   * @since     2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _destroyed = false;\n\n  /**\n   * @name          _currentProcess\n   * @type          Object\n   * @private\n   *\n   * This store the current process object\n   *\n   * @since     2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _currentProcess = null;\n\n  /**\n   * @name          _watchProcess\n   * @type          childProcess\n   * @private\n   *\n   * This store the watch child process instance\n   *\n   * @since     2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _watchProcess = null;\n\n  /**\n   * @name          _processesStack\n   * @type          Array\n   * @private\n   *\n   * This store all the runned processes\n   *\n   * @since     2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _processesStack = [];\n\n  /**\n   * @name          _isWatching\n   * @type          Boolean\n   * @private\n   *\n   * Store the watching status\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _isWatching = false;\n\n  /**\n   * @name          _commandsStack\n   * @type          Array\n   * @static\n   *\n   * This static property store all the commands instances that have been instanciated\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  static _commandsStack = [];\n\n  /**\n   * @name          getCommandsByName\n   * @type          Function\n   * @static\n   *\n   * This static methods allows you to get back all the commands instances depending on the passed namespace glob pattern.\n   * Each commands can have as setting a \"namespace\" property that will be used to get the commands back using this method.\n   * Note that a command that does not have any namespace cannot be retreived using this command.\n   *\n   * @param       {String}        name        TThe command name that you want to get back\n   * @return      {Array}                                 An array containing all the commands instances that match the namespace pattern passed\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  static getCommandsByName(name) {\n    let returnCommandsArray = [];\n    SCommand._commandsStack.forEach((instance) => {\n      if (instance.name === name) returnCommandsArray.push(instance);\n    });\n    // return the commands\n    return returnCommandsArray;\n  }\n\n  /**\n   * @name          getCommandsByNamespace\n   * @type          Function\n   * @static\n   *\n   * This static methods allows you to get back all the commands instances depending on the passed namespace glob pattern.\n   * Each commands can have as setting a \"namespace\" property that will be used to get the commands back using this method.\n   * Note that a command that does not have any namespace cannot be retreived using this command.\n   *\n   * @param       {String}        namespace        TThe command glob namespace pattern that you want to get back\n   * @return      {Array}                                 An array containing all the commands instances that match the namespace pattern passed\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  static getCommandsByNamespace(namespace) {\n    let returnCommandsArray = [];\n    if (!namespace) return SCommand._commandsStack;\n    SCommand._commandsStack.forEach((instance) => {\n      if (!instance.namespace) return;\n      if (__minimatch(instance.namespace, namespace.toLowerCase()))\n        returnCommandsArray.push(instance);\n    });\n    // return the commands\n    return returnCommandsArray;\n  }\n\n  /**\n   * @name          constructor\n   * @type          Function\n   * @constructor\n   *\n   * Constructor\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(name, command, settings = {}) {\n    // make sure the arguments are valid\n    if (typeof command === 'string') {\n    } else if (command instanceof __SCli) {\n    } else {\n      throw new Error(\n        `The \"command\" argument of the \"SCommand\" class constructor has to be one of these types: String,SCli...`\n      );\n    }\n\n    // init subclass\n    super(\n      (resolve, reject, trigger, cancel) => {\n        // save this command into the static commands stack\n        SCommand._commandsStack.push(this);\n        // save the parameters\n        this._name = name;\n        this._command = command;\n        this._id = __uniqid();\n        // init key\n        this._initKey();\n      },\n      __deepMerge(\n        {\n          // TODO: documentation settings\n          run: false,\n          argsObj: {},\n          concurrent: false,\n          color: 'white',\n          before: null,\n          after: null,\n          title: null,\n          notification: {\n            successIconPath: __path.join(\n              __packageRoot(__dirname),\n              'src/data/notifications/success.jpg'\n            ),\n            errorIconPath: __path.join(\n              __packageRoot(__dirname),\n              'src/data/notifications/error.jpg'\n            ),\n            runIconPath: __path.join(\n              __packageRoot(__dirname),\n              'src/data/notifications/run.jpg'\n            )\n          },\n          summary: true,\n          watch: null,\n          key: null,\n          log: false,\n          namespace: null,\n          activeSpace: null,\n          onKeyPress: null\n        },\n        settings\n      )\n    ).start();\n\n    setTimeout(() => {\n      if (this._settings.watch && !this._settings.run) this.watch();\n      if (this._settings.run) setTimeout(this.run.bind(this));\n    });\n  }\n\n  /**\n   * @name                   name\n   * @type                    String\n   * @get\n   *\n   * Get the command name\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get name() {\n    return this._name;\n  }\n\n  /**\n   * @name                   title\n   * @type                    String\n   * @get\n   *\n   * Get the command title if specified in the settings\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get title() {\n    return this._settings.title;\n  }\n\n  /**\n   * @name                   key\n   * @type                    String\n   * @get\n   *\n   * Get the command key\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get key() {\n    return this._settings.key;\n  }\n\n  /**\n   * @name                   namespace\n   * @type                    String\n   * @get\n   *\n   * Get the command namespace\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get namespace() {\n    return this._settings.namespace.toLowerCase();\n  }\n\n  /**\n   * @name                   color\n   * @type                    String\n   * @get\n   *\n   * Get the command color\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get color() {\n    return this._settings.color;\n  }\n\n  /**\n   * @name                    isRunning\n   * @type                    Function\n   *\n   * This method return true if the command is currently running, false if not\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  isRunning() {\n    return this.lastProcessObj && this.lastProcessObj.state === 'running';\n  }\n\n  /**\n   * @name                    state\n   * @type                    String\n   * @get\n   *\n   * Get the state of the last process runned.\n   * Can be:\n   * - idle\n   * - running\n   * - killed\n   * - success\n   * - error\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get state() {\n    return this.lastProcessObj ? this.lastProcessObj.state : 'idle';\n  }\n\n  /**\n   * @name                    concurrent\n   * @type                    Function\n   * @get\n   *\n   * This method return true if the command can be concurrent, false if not\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get concurrent() {\n    return this._settings.concurrent;\n  }\n\n  /**\n   * @name                   command\n   * @type                    String\n   * @get\n   *\n   * Get the command command\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get command() {\n    return this._command;\n  }\n\n  /**\n   * @name                  lastProcessObj\n   * @type                  Object\n   * @get\n   *\n   * Get the last process. It can be the running one as well as a finished one\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get lastProcessObj() {\n    if (!this._processesStack.length) {\n      if (!this._processObjWhenNoLastOne)\n        this._processObjWhenNoLastOne = { stdout: [], stderr: [] };\n      return this._processObjWhenNoLastOne;\n    }\n    return this._processesStack[this._processesStack.length - 1];\n  }\n\n  /**\n   * @name                  runningProcessObj\n   * @type                  Object\n   * @get\n   *\n   * Get the running process.\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get runningProcessObj() {\n    if (this.isRunning()) return this._currentProcess;\n    return null;\n  }\n\n  /**\n   * @name                  processesStack\n   * @type                  Array\n   * @get\n   *\n   * Get all the runned/ing processes objects\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get processesStack() {\n    return this._processesStack;\n  }\n\n  /**\n   * @name                  _initKey\n   * @type                  Function\n   * @private\n   *\n   * This method init the key listening if a settings.key is defined\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _initKey() {\n    __hotkey(`shift+${this._settings.key}`, {\n      activeSpace: this._settings.activeSpace || null\n    }).on('press', (keyObj) => {\n      if (this.isRunning() && !this._settings.concurrent) {\n        this.kill();\n      } else if (!this.isRunning()) {\n        this.run();\n      }\n    });\n  }\n\n  _buildSummaryItems(argsObj = this._settings.argsObj, definitionObj) {\n    if (!definitionObj) return false;\n    const items = [];\n    Object.keys(definitionObj).forEach((argName) => {\n      const argDefinitionObj = definitionObj[argName];\n      const argValue =\n        argsObj[argName] !== undefined\n          ? argsObj[argName]\n          : argDefinitionObj.default;\n      if (argDefinitionObj.level !== 1) return;\n      items.push({\n        id: argName,\n        text: argDefinitionObj.description,\n        default: argValue\n      });\n    });\n    return items;\n  }\n\n  /**\n   * @name              isWatching\n   * @type              Function\n   *\n   * Get if this command is currently watching or not\n   *\n   * @return      {Boolean}             true if watching, false if not\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  isWatching() {\n    return this._isWatching;\n  }\n\n  /**\n   * @name              unwatch\n   * @type              Function\n   *\n   * This methid allows you to stop the watch process if one has been launched\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  unwatch() {\n    if (!this._watchProcess) return;\n    this._watchProcess.kill();\n  }\n\n  /**\n   * @name                  watch\n   * @type                  Function\n   * @private\n   *\n   * This method init the watch process passed in the settings.watch object\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  watch() {\n    if (!this._settings.watch) {\n      throw new Error(\n        `You try to launch the \"watch\" process on the command named \"${this.name}\" but you don't have specified the \"settings.watch\" configuration object...`\n      );\n    }\n\n    this._isWatching = true;\n    this.lastProcessObj.stdout.push(\n      `Starting the watch process for the command \"<yellow>${this.name}</yellow>\"...`\n    );\n    this.trigger('log', {\n      value: this.lastProcessObj.stdout[this.lastProcessObj.stdout.length - 1],\n      name: this.name,\n      ...this.lastProcessObj\n    });\n\n    const commandLine = __argsToString(\n      {\n        pattern:\n          typeof this._settings.watch === 'object'\n            ? this._settings.watch.pattern\n            : this._settings.watch\n      },\n      __watchCli.definition\n    );\n    this._watchProcess = __childProcess.spawn(`sugar fs.watch ${commandLine}`, {\n      shell: true,\n      env: {\n        ...process.env,\n        IS_CHILD_PROCESS: true\n      }\n    });\n    let watchTimeout;\n    this._watchProcess.stdout.on('data', (data) => {\n      // split the logged value\n\n      if (Object.keys(data).length === 6) return; // @TODO weird protection... to check\n\n      const action = data.toString().split(':')[0];\n      const path = data.toString().split(':')[1];\n\n      if (action === 'new') {\n        const msg = `A file has been <green>created</green>: <cyan>${path}</cyan>`;\n        this.lastProcessObj.stdout.push(msg);\n        this.trigger('log', {\n          value: msg,\n          name: this.name,\n          ...this.lastProcessObj,\n          path\n        });\n      } else if (action === 'update') {\n        const msg = `A file has been <yellow>updated</yellow>: <cyan>${path}</cyan>`;\n        this.lastProcessObj.stdout.push(msg);\n        this.trigger('log', {\n          value: msg,\n          name: this.name,\n          ...this.lastProcessObj,\n          path\n        });\n      } else if (action === 'delete') {\n        const msg = `A file has been <red>deleted</red>: <cyan>${path}</cyan>`;\n        this.lastProcessObj.stdout.push(msg);\n        this.trigger('log', {\n          value: msg,\n          name: this.name,\n          ...this.lastProcessObj,\n          path\n        });\n      }\n      if (!this.isRunning()) {\n        // check if is already running\n        clearTimeout(watchTimeout);\n        watchTimeout = setTimeout(() => {\n          // build the proper \"argsObj\"\n          const argsObj = {};\n          if (\n            typeof this._settings.watch &&\n            this._settings.watch.mapToProperty\n          ) {\n            argsObj[this._settings.watch.mapToProperty] = path;\n          } else {\n            argsObj.watchPath = path;\n          }\n          // run the command\n          this.run(argsObj);\n        }, 200);\n      }\n    });\n    this._watchProcess.on('error', (...args) => {\n      throw args;\n    });\n    this._watchProcess.on('close', (code, signal) => {\n      this._isWatching = false;\n      this.trigger('log', {\n        name: this.name,\n        value: `The watch process has been stopped`\n      });\n    });\n  }\n\n  /**\n   * @name                  kill\n   * @type                  Function\n   *\n   * This method can be used to kill the current running process\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  kill() {\n    if (!this.isRunning()) return;\n    if (!this._currentProcess) return;\n    if (!this._currentProcess.childProcessPromise) return;\n    this._currentProcess.childProcessPromise.cancel();\n    this._currentProcess = null;\n  }\n\n  /**\n   * @name          destroy\n   * @type          Function\n   *\n   * This method is used to destroy this instance.\n   * This mean that you can not run it anymore, you cannot retreive it by using\n   * the static \"getCommands\" method, etc...\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  destroy() {\n    // update the destroy state\n    this._destroyed = true;\n    // remove this command from the static commands stack\n    const instanceIdx = SCommand._commandsStack.indexOf(this);\n    if (instanceIdx !== -1) {\n      SCommand._commandsStack.splice(instanceIdx, 1);\n    }\n    // kill current process if is running\n    this.kill();\n    // stop the watch process if is running\n    this.unwatch();\n  }\n\n  /**\n   * @name                  run\n   * @type                  Function\n   * @async\n   *\n   * This method is used to run the command\n   *\n   * @param         {Object}        [args=settings.argsObj]         An optional arguments object for this particular process instance. If not specified, will take the default one passed in the constructor settings\n   * @param         {Boolean}       [skipAsk=true]             Specify if you want to skip the \"ask\" process\n   * @return        {SPromise}                          An SPromise instance on which you can subscribe to all the \"spawn\" function \"events\" which are:\n   * - start: Triggered when the command start a process\n   * - close: Triggered when the process is closed\n   * - kill: Triggered when the process has been killed\n   * - success: Triggered when the process has finished without any error\n   * - error: Triggered when the process has had an error\n   * - log: Triggered when some data are pushed in the stdout channel\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  run(argsObj = this._settings.argsObj, skipAsk = true) {\n    if (this._destroyed) {\n      throw new Error(\n        `Sorry but this command named \"${this.name}\" has been destroyed...`\n      );\n    }\n    if (this.isRunning() && !this.concurrent) {\n      throw new Error(\n        `Sorry but the command named \"${this.name}\" is already running...`\n      );\n    }\n\n    const promise = new __SPromise(async (resolve, reject, trigger, cancel) => {\n      if (this._settings.watch) this.unwatch();\n\n      // check if we have a before function to launch\n      if (\n        this._settings.before &&\n        typeof this._settings.before === 'function'\n      ) {\n        const result = await this._settings.before(this);\n        if (result !== true) {\n          throw new Error(result);\n        }\n      }\n\n      clearTimeout(this._currentProcessSuccessTimeout);\n      this._currentProcess = {};\n\n      if (!skipAsk) {\n        if (this._command instanceof __SCli) {\n          const answer = await this._ask({\n            type: 'summary',\n            items: this._buildSummaryItems(argsObj, this._command.definitionObj)\n          });\n          if (!Array.isArray(answer)) return;\n          answer.forEach((item) => {\n            argsObj[item.id] = item.value;\n          });\n        }\n      }\n\n      // notification\n      if (this._settings.notification) {\n        __notifier.notify({\n          title: this.name,\n          message: `Starting the command \"${this.name}\"`,\n          icon: this._settings.notification.runIconPath || false, // Absolute path (doesn't work on balloons)\n          sound: false, // Only Notification Center or Windows Toasters\n          wait: false // Wait with callback, until user action is taken against notification, does not apply to Windows Toasters as they always wait or notify-send as it does not support the wait option\n        });\n      }\n\n      if (this._command instanceof __SCli) {\n        this._currentProcess.childProcessPromise = this._runSCli(argsObj);\n      } else if (typeof this._command === 'string') {\n        this._currentProcess.childProcessPromise = __spawn(\n          __replaceTokens(this._command, argsObj)\n        );\n      }\n\n      this._processesStack.push(this._currentProcess);\n\n      if (this._settings.log) {\n        __SPromise.log(\n          this._currentProcess.childProcessPromise,\n          this._settings.log === true ? {} : this._settings.log\n        );\n      }\n\n      // init the child process\n      this._currentProcess.childProcessPromise.on('*', (data, stack) => {\n        this._processesStack[this._processesStack.length - 1] = {\n          ...this._processesStack[this._processesStack.length - 1],\n          ...(data && data.process ? data.process : data || {})\n        };\n      });\n      this._currentProcess.childProcessPromise.on('close', (data) => {\n        this._currentProcess = null;\n        console.log(`#success sss ${data.code} - ${data.signal}`);\n        // if (data.code === 0 && !data.signal) return;\n        if (this._settings.notification) {\n          __notifier.notify({\n            title: this.name,\n            message: `Command closed with code \"${data.code}\" and signal ${data.signal}`,\n            icon: this._settings.notification.errorIconPath || false, // Absolute path (doesn't work on balloons)\n            sound: false, // Only Notification Center or Windows Toasters\n            wait: false // Wait with callback, until user action is taken against notification, does not apply to Windows Toasters as they always wait or notify-send as it does not support the wait option\n          });\n        }\n      });\n      this._currentProcess.childProcessPromise.on('success', () => {\n        if (this._settings.notification) {\n          __notifier.notify({\n            title: this.name,\n            message: `Command finished successfully!`,\n            icon: this._settings.notification.successIconPath || false, // Absolute path (doesn't work on balloons)\n            sound: false, // Only Notification Center or Windows Toasters\n            wait: false // Wait with callback, until user action is taken against notification, does not apply to Windows Toasters as they always wait or notify-send as it does not support the wait option\n          });\n        }\n        this._currentProcessSuccessTimeout = setTimeout(() => {\n          if (this._settings.watch) this.watch();\n        }, 2000);\n      });\n      this._currentProcess.childProcessPromise.on('error', () => {\n        if (this._settings.notification) {\n          __notifier.notify({\n            title: this.name,\n            message: `Error!`,\n            icon: this._settings.notification.errorIconPath || false, // Absolute path (doesn't work on balloons)\n            sound: false, // Only Notification Center or Windows Toasters\n            wait: false // Wait with callback, until user action is taken against notification, does not apply to Windows Toasters as they always wait or notify-send as it does not support the wait option\n          });\n        }\n      });\n\n      // check if we have an after function to launch\n      if (this._settings.after && typeof this._settings.after === 'function') {\n        const result = await this._settings.after(this);\n        if (result !== true) {\n          throw new Error(result);\n        }\n      }\n\n      const result = await this._currentProcess.childProcessPromise;\n\n      resolve(result);\n    }).start();\n\n    __SPromise.pipe(this._currentProcess.childProcessPromise, promise, {\n      processor: (value, stacks) => {\n        value.name = this.name;\n        return value;\n      }\n    });\n    __SPromise.pipe(this._currentProcess.childProcessPromise, this, {\n      processor: (value, stacks) => {\n        value.name = this.name;\n        return value;\n      }\n    });\n\n    // return the promise\n    return promise;\n  }\n\n  /**\n   * @name                _runSCli\n   * @type                Function\n   * @async\n   *\n   * This method run a SCli based command\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _runSCli(argsObj = {}) {\n    return this._command.run(argsObj);\n  }\n\n  /**\n   * @name                  _ask\n   * @type                  Function\n   * @async\n   *\n   * This method take care of asking something to the user ans return back the user answer.\n   *\n   * @param         {Object}        question      The question object that describe what to ask. Here's the list of properties available:\n   * - question (null) {String}: Specify the question to ask\n   * - type (yesOrNo) {String}: Specify the type of question to ask. Can be only \"yesOrNo\" for now but more to come...\n   * @return        {SPromise}                An SPromise instance that will be resolved once the question has been answered\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _ask(question) {\n    const _this = this;\n    return new __SPromise(\n      (resolve, reject, trigger, cancel) => {\n        switch (question.type) {\n          case 'summary':\n            this.trigger('ask', {\n              name: this.name,\n              get commandInstance() {\n                return _this;\n              },\n              resolve,\n              reject,\n              items: question.items,\n              question:\n                question.question ||\n                `Are that command details ok for you? (y/n)`,\n              type: 'summary'\n            });\n            break;\n        }\n      },\n      {\n        cancelDefaultReturn: '__canceled__'\n      }\n    ).start();\n  }\n\n  /**\n   * @name                 _check\n   * @type                Function\n   * @private\n   *\n   * This methood takes a command as parameter and return true if it is executable or throw an error if not\n   *\n   * @return        {Boolean}                           true if is executable, throw an error if not\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  // _check() {\n  //   let extension, executable;\n  //   if (__isPath(this._command, true)) {\n  //     // get the file extension\n  //     extension = __extension(this._command);\n  //     executable = this._getExecutableFromExtension(extension);\n  //   } else if (typeof this._command === 'string') {\n  //     // treat this as a command\n  //     executable = this._command.split(' ').slice(0, 1);\n  //   } else {\n  //     // the passed process value is not something usable...\n  //     throw new Error(\n  //       `The passed command \"<primary>${this._command}</primary>\" is not something usable...`\n  //     );\n  //   }\n  //   // check if the command needed to launch this script is available\n  //   if (!__commandExists.sync(executable)) {\n  //     throw new Error(\n  //       `Sorry but the executable \"${executable}\" needed to launch the command named \"${this._name}\" is not installed on your machine...`\n  //     );\n  //   }\n  //   return true;\n  // }\n};\n"]}
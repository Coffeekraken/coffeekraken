{"version":3,"sources":["SProcess.js"],"names":["__deepMerge","require","__SPromise","__SCommand","__sugarConfig","module","exports","commands","settings","_settings","_promise","resolve","reject","trigger","cancel","bind","start","on","Array","isArray","newCommandsObj","forEach","command","i","color","Object","keys","run","name","_biggestCommandName","commandName","length","commandObj","_commands","commandSettings","assign","_pipeCommandsPromises","pipe","Error","join","biggestCommandName","biggestName"],"mappings":"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","sourcesContent":["const __deepMerge = require('../object/deepMerge');\nconst __SPromise = require('../promise/SPromise');\nconst __SCommand = require('./SCommand');\nconst __sugarConfig = require('../config/sugar');\n\n/**\n * @name                    SProcess\n * @namespace           node.terminal\n * @type                    Class\n *\n * TODO: documentation\n *\n * @param           {String}Â          commands         The commands that you want to be available in this process. The format is { name: command }\n * @param           {Object}          [settings={}]   An object of settings described bellow:\n * - type (default) {String}: This specify the type of process you want. It can be:\n *    - default: Simple process that does not launch anything by default\n *    - steps: This describe a step by step process that will automatically launch the first command and run the next after next ones\n * - keys ({}) {Object}: This describe the keyboard hotkeys associated with this process. Each hotkey has to be described with these properties:\n *    - key: Specify the key to listen for\n *    - type: Can be either \"toggle\", \"run\" or \"action\"\n *        - toggle: Simply toggle the \"value\" property in the key object to true/false\n *        - run: Simply launch the associated command by specifying the property \"command\" with the command name wanted\n          - action: Does nothing by default. Simply specify the action name you want in the \"action\" property and you'll get access to that by listening \"key.action\" on the promise\n      - menu: Specify the text wanted in the menu when using this class with an SProcessPanel instance\n      - action: Specify an action name when the type is \"action\"\n      - command: Specify a command name to run when the type is \"run\"\n *\n * @example         js\n * const SProcess = require('@coffeekraken/sugar/node/terminal/SProcess');\n * const app = new SProcess({\n *    install: {\n *      command: 'npm install something'\n *    }\n * }, {\n *    // some settings here...\n * });\n *\n * @since       2.0.0\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = class SProcess {\n  /**\n   * @name              _settings\n   * @type              Object\n   * @private\n   *\n   * Store the process settings\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _settings = {};\n\n  /**\n   * @name              _commands\n   * @type              Object\n   * @private\n   *\n   * This is an object that store the available commands in this process\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _commands = {};\n\n  /**\n   * @name              constructor\n   * @type              Function\n   * @constructor\n   *\n   * Constructor\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(commands, settings = {}) {\n    // save the settings\n    const _settings = __deepMerge({}, settings);\n\n    // init the SPromise class\n    this._promise = new __SPromise((resolve, reject, trigger, cancel) => {\n      this.resolve = resolve.bind(this);\n      this.reject = reject.bind(this);\n      this.trigger = trigger.bind(this);\n      this.cancel = cancel.bind(this);\n    }, {}).start();\n    this.on = this._promise.on.bind(this._promise);\n\n    // make sure the passed commands are valid\n    if (!Array.isArray(commands)) {\n      commands = [commands];\n    }\n    let newCommandsObj = {};\n    commands.forEach((command, i) => {\n      if (typeof command === 'string') {\n        newCommandsObj[`command${i + 1}`] = {\n          command,\n          color:\n            Object.keys(__sugarConfig('terminal.colors'))[i + 1].color ||\n            'yellow',\n          run: true\n        };\n      } else if (\n        typeof command === 'object' &&\n        command.command &&\n        command.name\n      ) {\n        newCommandsObj[command.name] = command;\n      } else if (typeof command === 'object') {\n        newCommandsObj = {\n          ...newCommandsObj,\n          ...command\n        };\n      }\n    });\n    commands = newCommandsObj;\n\n    // save commands\n    this._biggestCommandName = Object.keys(commands)[0];\n    Object.keys(commands).forEach((commandName) => {\n      if (commandName.length > this._biggestCommandName.length)\n        this._biggestCommandName = commandName;\n      const commandObj = commands[commandName];\n      if (commandObj instanceof __SCommand) {\n        this._commands[commandName] = commandObj;\n      } else {\n        if (typeof commandObj === 'string') {\n          this._commands[commandName] = new __SCommand(\n            commandName,\n            commandObj,\n            {}\n          );\n        } else if (typeof commandObj === 'object' && commandObj.command) {\n          const commandSettings = Object.assign({}, commandObj);\n          delete commandSettings.command;\n          this._commands[commandName] = new __SCommand(\n            commandName,\n            commandObj.command,\n            commandSettings || {}\n          );\n        }\n      }\n    });\n\n    // pipe the commands promises to this process promise\n    this._pipeCommandsPromises();\n\n    // save settings\n    this._settings = _settings;\n  }\n\n  /**\n   * @name                _pipeCommandsPromises\n   * @type                Function\n   * @private\n   *\n   * This methods pipe all the SCommand promises to this process promise\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _pipeCommandsPromises() {\n    // loop on each commands\n    Object.keys(this._commands).forEach((name) => {\n      const command = this._commands[name];\n      __SPromise.pipe(command, this);\n    });\n  }\n\n  /**\n   * @name                biggestCommandName\n   * @type                String\n   * @get\n   *\n   * Get the biggest command name passed in constructor\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get biggestCommandName() {\n    let biggestCommandName = Object.keys(this.commands) || '';\n    const biggestName = Object.keys(this.commands).forEach((name) => {\n      if (name.length > biggestCommandName.length) biggestCommandName = name;\n    });\n    return biggestCommandName;\n  }\n\n  /**\n   * @name                commands\n   * @type                Object\n   * @get\n   *\n   * Access the commands object\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get commands() {\n    return this._commands;\n  }\n\n  /**\n   * @name                  run\n   * @type                  Function\n   * @async\n   *\n   * This method is used to run the command\n   *\n   * @param         {SCommand|String}      command             The SCommand instance to run or the name under which it is stored in the commands object\n   * @return        {SPromise}                          An SPromise instance on which you can subscribe for some events listed bellow and that will be resolved once the command is successfully finished\n   * - data: Triggered when some data are logged in the child process\n   * - error: Triggered when something goes wrong in the child process\n   * - exit: Triggered when the child process has been exited\n   * - close: Triggered when the child process has been closed\n   * - success: Triggered when the child process has finished with success\n   * - kill: Triggered when the child process has been killed\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  run(command) {\n    if (typeof command === 'string') {\n      if (!this._commands[command]) {\n        throw new Error(\n          `You try to launch the command named \"${command}\" but it does not exists in this SProcess instance. Here's the available commands:\\n${Object.keys(\n            this._commands\n          ).join('\\n- ')}`\n        );\n      }\n      command = this._commands[command];\n    } else if (!command.run) {\n      throw new Error(\n        `You try to launch a command but it seems that the passed one is not an instance of the SCommand class...`\n      );\n    }\n\n    // return the promise\n    return command.run();\n  }\n};\n"]}
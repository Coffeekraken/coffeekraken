{"version":3,"sources":["columns.js"],"names":["__splitLineEvery","require","__countLine","__deepMerge","module","exports","columns","content","settings","width","process","env","STDOUT_COLUMNS","stdout","padding","STDOUT_PADDING","maxWidth","maxColumnWidth","Math","round","length","lines","splitedContent","forEach","c","i","columnsPadding","biggestColumnHeight","Object","keys","columnName","currentLine","j","hasColumnLeftAndRightPadding","paddingSide","currentColumn","columnLinesArray","repeat","columnContentString","restOfLineCount","push","join"],"mappings":"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","sourcesContent":["const __splitLineEvery = require('./__wip__/splitLineEvery');\nconst __countLine = require('../string/countLine');\nconst __deepMerge = require('../object/deepMerge');\n\n/**\n * @name                                          columns\n * @namespace           node.terminal\n * @type                                          Function\n *\n * Display your content using columns. The number of columns is defined by the number of items in the content array\n *\n * @param                 {Array}                       content                     The columns content stored in an Array\n * @param                 {Object}                      [settings={}]               An object of settings descripbed above\n * - width (process.env.STDOUT_COLUMNS ||Â process.stdout.columns) {Number}: The base width on which to calculate the columns\n * - padding (process.env.STDOUT_PADDING || 3) {Number}: The padding to apply on the sides\n * @return                {String}                                                  The string to log in the terminal\n *\n * @example               js\n * const columns = require('@coffeekraken/sugar/node/terminal/columns');\n * columns([\n *  'Hello world',\n *  'How are you?'\n * ]);\n *\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = function columns(content, settings = {}) {\n  settings = __deepMerge(\n    {\n      width: process.env.STDOUT_COLUMNS || process.stdout.columns,\n      padding: process.env.STDOUT_PADDING || 3\n    },\n    settings\n  );\n\n  const maxWidth = settings.width - settings.padding * 2;\n\n  const maxColumnWidth = Math.round(maxWidth / content.length);\n\n  const lines = [];\n  const splitedContent = {};\n\n  content.forEach((c, i) => {\n    const columnsPadding =\n      i === 0\n        ? settings.padding\n        : i === content.length - 1\n        ? settings.padding\n        : settings.padding * 2;\n\n    let lines = __splitLineEvery(c, maxColumnWidth - columnsPadding);\n\n    splitedContent['column_' + i] = {\n      lines: lines,\n      padding: columnsPadding\n    };\n  });\n\n  let biggestColumnHeight = 0;\n  Object.keys(splitedContent).forEach((columnName) => {\n    if (splitedContent[columnName].lines.length > biggestColumnHeight) {\n      biggestColumnHeight = splitedContent[columnName].lines.length;\n    }\n  });\n\n  for (let i = 0; i < biggestColumnHeight; i++) {\n    let currentLine = '';\n\n    Object.keys(splitedContent).forEach((columnName, j) => {\n      const hasColumnLeftAndRightPadding =\n        j === 0 ? false : j === content.length - 1 ? false : true;\n      const paddingSide =\n        j === 0 ? 'right' : j === content.length - 1 ? 'left' : null;\n      const currentColumn = splitedContent[columnName];\n      const columnLinesArray = currentColumn.lines;\n      if (i > columnLinesArray.length - 1) {\n        currentLine += ' '.repeat(maxColumnWidth);\n      } else {\n        const columnContentString = columnLinesArray[i];\n\n        let restOfLineCount =\n          maxColumnWidth -\n          __countLine(columnContentString || '') -\n          (hasColumnLeftAndRightPadding\n            ? settings.padding * 2\n            : settings.padding);\n\n        if (hasColumnLeftAndRightPadding) {\n          currentLine +=\n            ' '.repeat(settings.padding) +\n            columnContentString +\n            ' '.repeat(restOfLineCount) +\n            ' '.repeat(settings.padding);\n        } else {\n          if (paddingSide === 'left') {\n            currentLine +=\n              ' '.repeat(settings.padding) +\n              columnContentString +\n              ' '.repeat(restOfLineCount);\n          } else if (paddingSide === 'right') {\n            currentLine +=\n              columnContentString +\n              ' '.repeat(restOfLineCount) +\n              ' '.repeat(settings.padding);\n          }\n        }\n      }\n    });\n\n    lines.push(currentLine);\n    currentLine = '';\n  }\n\n  return lines.join('\\n');\n};\n"]}
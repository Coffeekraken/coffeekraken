{"version":3,"sources":["escapeStack.js"],"names":["__SPromise","require","__hotkey","escapeStackStack","hotkeyInitiated","module","exports","escapeStack","callback","promise","resolve","reject","trigger","cancel","disableWhenEditingForm","on","key","length","lastPromise","splice","push","indexOf"],"mappings":";;AAAA,IAAMA,UAAU,GAAGC,OAAO,CAAC,qBAAD,CAA1B;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,oBAAD,CAAxB;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAqBA,IAAME,gBAAgB,GAAG,EAAzB;AACA,IAAIC,eAAe,GAAG,KAAtB;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,WAAT,CAAqBC,QAArB,EAAsC;AAAA,MAAjBA,QAAiB;AAAjBA,IAAAA,QAAiB,GAAN,IAAM;AAAA;;AACrD,MAAMC,OAAO,GAAG,IAAIT,UAAJ,CAAe,CAACU,OAAD,EAAUC,MAAV,EAAkBC,OAAlB,EAA2BC,MAA3B,KAAsC,CAAE,CAAvD,CAAhB;;AAEA,MAAI,CAACT,eAAL,EAAsB;AACpBA,IAAAA,eAAe,GAAG,IAAlB;;AACAF,IAAAA,QAAQ,CAAC,QAAD,EAAW;AACjBY,MAAAA,sBAAsB,EAAE;AADP,KAAX,CAAR,CAEGC,EAFH,CAEM,OAFN,EAEgBC,GAAD,IAAS;AACtB,UAAIb,gBAAgB,CAACc,MAAjB,KAA4B,CAAhC,EAAmC;AACnC,UAAMC,WAAW,GAAGf,gBAAgB,CAACA,gBAAgB,CAACc,MAAjB,GAA0B,CAA3B,CAApC;AACAC,MAAAA,WAAW,CAACR,OAAZ;AACAP,MAAAA,gBAAgB,CAACgB,MAAjB,CAAwB,CAAC,CAAzB,EAA4B,CAA5B;AACD,KAPD;AAQD;;AAED,MAAIX,QAAJ,EAAc;AACZC,IAAAA,OAAO,CAACM,EAAR,CAAW,SAAX,EAAsBP,QAAtB;AACD,GAjBoD,CAmBrD;;;AACAL,EAAAA,gBAAgB,CAACiB,IAAjB,CAAsBX,OAAtB,EApBqD,CAsBrD;;AACAA,EAAAA,OAAO,CAACM,EAAR,CAAW,gBAAX,EAA6B,MAAM;AACjCZ,IAAAA,gBAAgB,CAACgB,MAAjB,CAAwBhB,gBAAgB,CAACkB,OAAjB,CAAyBZ,OAAzB,CAAxB,EAA2D,CAA3D;AACD,GAFD,EAvBqD,CA2BrD;;AACA,SAAOA,OAAP,CA5BqD,CA8BrD;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACD,CAxDD","sourcesContent":["const __SPromise = require('../promise/SPromise');\nconst __hotkey = require('../keyboard/hotkey');\n\n/**\n * @name                          escapeStack\n * @namespace           node.blessed\n * @type                          Function\n *\n * This function allows you to register a callback to know when it's time to \"close\" or do whatever you want on escape click.\n * The principle is that when you register a callback, the system will save the \"index\" at which you have registered this callback\n * and increase this \"index\" for the next callback registration. When you press escape key, the \"index\" will decrease and the callback(s)\n * registered at the new index will be called.\n *\n * @param         {Function}          callback        The function you want to call on escape click\n * @param         {Number}Â            [index=null]    Optionally the index under which you want to register your callback. If not specified, will be automatically setted\n *\n * @example       js\n * const escapeStack = require('@coffeekraken/sugar/node/terminal/escapeStack');\n * escapeStack(() => {\n *    // do something\n * });\n *\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nconst escapeStackStack = [];\nlet hotkeyInitiated = false;\nmodule.exports = function escapeStack(callback = null) {\n  const promise = new __SPromise((resolve, reject, trigger, cancel) => {});\n\n  if (!hotkeyInitiated) {\n    hotkeyInitiated = true;\n    __hotkey('escape', {\n      disableWhenEditingForm: false\n    }).on('press', (key) => {\n      if (escapeStackStack.length === 0) return;\n      const lastPromise = escapeStackStack[escapeStackStack.length - 1];\n      lastPromise.resolve();\n      escapeStackStack.splice(-1, 1);\n    });\n  }\n\n  if (callback) {\n    promise.on('resolve', callback);\n  }\n\n  // append the promise in the stack\n  escapeStackStack.push(promise);\n\n  // handle cancel\n  promise.on('cancel,finally', () => {\n    escapeStackStack.splice(escapeStackStack.indexOf(promise), 1);\n  });\n\n  // return the promise\n  return promise;\n\n  // if (!escapeStackCallbacks[escapeStackCurrentIndex.toString()]) {\n  //   escapeStackCallbacks[escapeStackCurrentIndex.toString()] = [];\n  // }\n  // escapeStackCallbacks[escapeStackCurrentIndex.toString()].push(callback);\n  // escapeStackCurrentIndex++;\n\n  // if (!hotkeyInitiated) {\n  //   hotkeyInitiated = true;\n\n  //   __hotkey('escape').on('press', (key) => {\n  //     if (escapeStackCurrentIndex <= 0) {\n  //       return;\n  //     }\n  //     escapeStackCurrentIndex--;\n  //     if (escapeStackCallbacks[escapeStackCurrentIndex.toString()]) {\n  //       escapeStackCallbacks[escapeStackCurrentIndex.toString()].forEach(\n  //         (callback) => {\n  //           callback(escapeStackCurrentIndex);\n  //         }\n  //       );\n  //       escapeStackCallbacks[escapeStackCurrentIndex.toString()] = [];\n  //     }\n  //   });\n  // }\n\n  return;\n};\n"]}
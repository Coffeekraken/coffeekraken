{"version":3,"sources":["parseHtml.js"],"names":["__replaceTags","require","__sugarConfig","__upperFirst","__chalk","__tagsMap","tagsMap","level","module","exports","parseHtml","message","isArray","Array","Object","assign","sugarColors","keys","filter","c","terminalColors","colorsObj","forEach","name","map","m","cValue","tag","content","hex","bgHex"],"mappings":";;AAAA,MAAMA,aAAa,GAAGC,OAAO,CAAC,qBAAD,CAA7B;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,iBAAD,CAA7B;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,sBAAD,CAA5B;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,OAAD,CAAvB;;AACA,MAAMI,SAAS,GAAGJ,OAAO,CAAC,+BAAD,CAAP,CAAyCK,OAA3D;;AACAF,OAAO,CAACG,KAAR,GAAgB,CAAhB,C,CAEA;;AAEA;;;;;;;;;;;;;AAaAC,MAAM,CAACC,OAAP,GAAiB,SAASC,SAAT,CAAmBC,OAAnB,EAA4B;AAC3C,MAAIC,OAAO,GAAG,KAAd;;AACA,MAAIC,KAAK,CAACD,OAAN,CAAcD,OAAd,CAAJ,EAA4B;AAC1BC,IAAAA,OAAO,GAAG,IAAV;AACD,GAFD,MAEO;AACLD,IAAAA,OAAO,GAAG,CAACA,OAAD,CAAV;AACD;;AAED,QAAML,OAAO,GAAGQ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,SAAlB,CAAhB;AAEA,QAAMW,WAAW,GAAGF,MAAM,CAACG,IAAP,CAAYf,aAAa,CAAC,QAAD,CAAzB,EAAqCgB,MAArC,CACjBC,CAAD,IAAOA,CAAC,KAAK,UADK,CAApB;AAGA,QAAMC,cAAc,GAAGN,MAAM,CAACG,IAAP,CAAYf,aAAa,CAAC,iBAAD,CAAzB,CAAvB;AACA,QAAMmB,SAAS,GAAG,EAAlB;AACAL,EAAAA,WAAW,CAACM,OAAZ,CAAqBC,IAAD,IAAU;AAC5BF,IAAAA,SAAS,CAACE,IAAD,CAAT,GAAkBrB,aAAa,CAAE,UAASqB,IAAK,QAAhB,CAA/B;AACD,GAFD;AAGAH,EAAAA,cAAc,CAACE,OAAf,CAAwBC,IAAD,IAAU;AAC/BF,IAAAA,SAAS,CAACE,IAAD,CAAT,GAAkBrB,aAAa,CAAE,mBAAkBqB,IAAK,QAAzB,CAA/B;AACD,GAFD;AAIAZ,EAAAA,OAAO,GAAGA,OAAO,CAACa,GAAR,CAAaC,CAAD,IAAO;AAC3BX,IAAAA,MAAM,CAACG,IAAP,CAAYI,SAAZ,EAAuBC,OAAvB,CAAgCH,CAAD,IAAO;AACpC,YAAMO,MAAM,GAAGL,SAAS,CAACF,CAAD,CAAxB;;AACAb,MAAAA,OAAO,CAACa,CAAD,CAAP,GAAa,CAACQ,GAAD,EAAMC,OAAN,KAAkBxB,OAAO,CAACyB,GAAR,CAAYH,MAAZ,EAAoBE,OAApB,CAA/B;;AACAtB,MAAAA,OAAO,CAAE,KAAIH,YAAY,CAACgB,CAAD,CAAI,EAAtB,CAAP,GAAkC,CAACQ,GAAD,EAAMC,OAAN,KAChCxB,OAAO,CAAC0B,KAAR,CAAcJ,MAAd,EAAsBE,OAAtB,CADF;AAED,KALD;AAOA,WAAO5B,aAAa,CAACyB,CAAD,EAAInB,OAAJ,CAApB;AACD,GATS,CAAV;AAWA,MAAIM,OAAJ,EAAa,OAAOD,OAAP;AACb,SAAOA,OAAO,CAAC,CAAD,CAAd;AACD,CAnCD","sourcesContent":["const __replaceTags = require('../html/replaceTags');\nconst __sugarConfig = require('../config/sugar');\nconst __upperFirst = require('../string/upperFirst');\nconst __chalk = require('chalk');\nconst __tagsMap = require('../../../js/console/parseHtml').tagsMap;\n__chalk.level = 3;\n\n// TODO tests\n\n/**\n * @name                                parseHtml\n * @namespace           node.terminal\n * @type                                Function\n *\n * Parse the simple html tags to format the terminal message\n *\n * @param           {String|Array}Â                  message                 The message to format of an array of messages to format\n * @return          {String}                                          The formated message\n *\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\n\nmodule.exports = function parseHtml(message) {\n  let isArray = false;\n  if (Array.isArray(message)) {\n    isArray = true;\n  } else {\n    message = [message];\n  }\n\n  const tagsMap = Object.assign({}, __tagsMap);\n\n  const sugarColors = Object.keys(__sugarConfig('colors')).filter(\n    (c) => c !== 'terminal'\n  );\n  const terminalColors = Object.keys(__sugarConfig('terminal.colors'));\n  const colorsObj = {};\n  sugarColors.forEach((name) => {\n    colorsObj[name] = __sugarConfig(`colors.${name}.color`);\n  });\n  terminalColors.forEach((name) => {\n    colorsObj[name] = __sugarConfig(`terminal.colors.${name}.color`);\n  });\n\n  message = message.map((m) => {\n    Object.keys(colorsObj).forEach((c) => {\n      const cValue = colorsObj[c];\n      tagsMap[c] = (tag, content) => __chalk.hex(cValue)(content);\n      tagsMap[`bg${__upperFirst(c)}`] = (tag, content) =>\n        __chalk.bgHex(cValue)(content);\n    });\n\n    return __replaceTags(m, tagsMap);\n  });\n\n  if (isArray) return message;\n  return message[0];\n};\n"]}
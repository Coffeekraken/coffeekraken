{"version":3,"sources":["parseMarkdown.js"],"names":["__parseHtml","require","module","exports","parseMarkdown","message","isArray","Array","map","m","h1Reg","h1Matches","match","replace","trim","h2Reg","h2Matches"],"mappings":";;AAAA,IAAMA,WAAW,GAAGC,OAAO,CAAC,aAAD,CAA3B,C,CAEA;;AAEA;;;;;;;;;;;;;;AAYAC,MAAM,CAACC,OAAP,GAAiB,SAASC,aAAT,CAAuBC,OAAvB,EAAgC;AAC/C,MAAIC,OAAO,GAAG,KAAd;;AACA,MAAIC,KAAK,CAACD,OAAN,CAAcD,OAAd,CAAJ,EAA4B;AAC1BC,IAAAA,OAAO,GAAG,IAAV;AACD,GAFD,MAEO;AACLD,IAAAA,OAAO,GAAG,CAACA,OAAD,CAAV;AACD;;AAEDA,EAAAA,OAAO,GAAGA,OAAO,CAACG,GAAR,CAAaC,CAAD,IAAO;AAC3B,QAAMC,KAAK,GAAG,aAAd;AACA,QAAMC,SAAS,GAAGF,CAAC,CAACG,KAAF,CAAQF,KAAR,CAAlB;;AACA,QAAIC,SAAJ,EAAe;AACbF,MAAAA,CAAC,GAAGA,CAAC,CAACI,OAAF,CACFF,SAAS,CAAC,CAAD,CADP,gBAEKA,SAAS,CAAC,CAAD,CAAT,CAAaE,OAAb,CAAqB,MAArB,EAA6B,EAA7B,EAAiCC,IAAjC,EAFL,WAAJ;AAID;;AACD,QAAMC,KAAK,GAAG,cAAd;AACA,QAAMC,SAAS,GAAGP,CAAC,CAACG,KAAF,CAAQG,KAAR,CAAlB;;AACA,QAAIC,SAAJ,EAAe;AACbP,MAAAA,CAAC,GAAGA,CAAC,CAACI,OAAF,CACFG,SAAS,CAAC,CAAD,CADP,gBAEKA,SAAS,CAAC,CAAD,CAAT,CAAaH,OAAb,CAAqB,OAArB,EAA8B,EAA9B,EAAkCC,IAAlC,EAFL,WAAJ;AAID;;AAED,QAAIL,CAAC,CAACG,KAAF,CAAQ,aAAR,CAAJ,EAA4B;AAC1BH,MAAAA,CAAC,uBAAgBA,CAAC,CAACI,OAAF,CAAU,aAAV,EAAyB,EAAzB,CAAhB,CAAD;AACD;;AACD,QAAIJ,CAAC,CAACG,KAAF,CAAQ,WAAR,CAAJ,EAA0B;AACxBH,MAAAA,CAAC,uBAAgBA,CAAC,CAACI,OAAF,CAAU,WAAV,EAAuB,EAAvB,CAAhB,CAAD;AACD;;AACD,QAAIJ,CAAC,CAACG,KAAF,CAAQ,WAAR,CAAJ,EAA0B;AACxBH,MAAAA,CAAC,uBAAgBA,CAAC,CAACI,OAAF,CAAU,WAAV,EAAuB,EAAvB,CAAhB,CAAD;AACD;;AACD,QAAIJ,CAAC,CAACG,KAAF,CAAQ,aAAR,CAAJ,EAA4B;AAC1BH,MAAAA,CAAC,sBAAeA,CAAC,CAACI,OAAF,CAAU,aAAV,EAAyB,EAAzB,CAAf,CAAD;AACD;;AACD,QAAIJ,CAAC,CAACG,KAAF,CAAQ,UAAR,CAAJ,EAAyB;AACvBH,MAAAA,CAAC,sBAAeA,CAAC,CAACI,OAAF,CAAU,UAAV,EAAsB,EAAtB,CAAf,CAAD;AACD;;AAED,WAAOb,WAAW,CAACS,CAAC,CAACK,IAAF,EAAD,CAAlB;AACD,GAnCS,CAAV;AAqCA,MAAIR,OAAJ,EAAa,OAAOD,OAAP;AACb,SAAOA,OAAO,CAAC,CAAD,CAAd;AACD,CA/CD","sourcesContent":["const __parseHtml = require('./parseHtml');\n\n// TODO tests\n\n/**\n * @name                                parseMarkdown\n * @namespace           node.terminal\n * @type                                Function\n *\n * Parse the simple markdown tags to format the terminal message\n *\n * @param           {String|Array}Â                  message                 The message to format of an array of messages to format\n * @return          {String}                                          The formated message\n *\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = function parseMarkdown(message) {\n  let isArray = false;\n  if (Array.isArray(message)) {\n    isArray = true;\n  } else {\n    message = [message];\n  }\n\n  message = message.map((m) => {\n    const h1Reg = /#\\s(.*\\n?)/g;\n    const h1Matches = m.match(h1Reg);\n    if (h1Matches) {\n      m = m.replace(\n        h1Matches[0],\n        `<h1>${h1Matches[0].replace(/^#\\s/, '').trim()}</h1>`\n      );\n    }\n    const h2Reg = /##\\s(.*\\n?)/g;\n    const h2Matches = m.match(h2Reg);\n    if (h2Matches) {\n      m = m.replace(\n        h2Matches[0],\n        `<h2>${h2Matches[0].replace(/^##\\s/, '').trim()}</h2>`\n      );\n    }\n\n    if (m.match(/^#success\\s/)) {\n      m = `<iCheck/> ${m.replace(/^#success\\s/, '')}`;\n    }\n    if (m.match(/^#start\\s/)) {\n      m = `<iStart/> ${m.replace(/^#start\\s/, '')}`;\n    }\n    if (m.match(/^#error\\s/)) {\n      m = `<iCross/> ${m.replace(/^#error\\s/, '')}`;\n    }\n    if (m.match(/^#warning\\s/)) {\n      m = `<iWarn/> ${m.replace(/^#warning\\s/, '')}`;\n    }\n    if (m.match(/^#warn\\s/)) {\n      m = `<iWarn/> ${m.replace(/^#warn\\s/, '')}`;\n    }\n\n    return __parseHtml(m.trim());\n  });\n\n  if (isArray) return message;\n  return message[0];\n};\n"]}
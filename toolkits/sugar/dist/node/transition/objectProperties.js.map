{"version":3,"sources":["objectProperties.js"],"names":["__deepMerge","require","__convert","__STimer","__availableEasingsArray","__SPromise","module","exports","objectProperties","startObj","targetObj","settings","resolve","reject","trigger","cancel","duration","stepsCount","stepsInterval","easing","round","availableEasingsArray","indexOf","Error","join","easingFn","Math","startTransitionObj","targetTransitionObj","Object","keys","forEach","prop","currentTransitionObj","timer","tickCount","on","returnedTransitionObj","startValue","currentValue","targetValue","valueDifference","easingValue","percentage","currentEasedValue","newValue","stop","destroy","start"],"mappings":"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","sourcesContent":["const __deepMerge = require('../object/deepMerge');\nconst __convert = require('../time/convert');\nconst __STimer = require('../time/STimer');\nconst __availableEasingsArray = require('../easing/availableEasingsArray');\nconst __SPromise = require('../promise/SPromise');\n\n// TODO: tests\n\n/**\n * @name              objectProperties\n * @namespace           node.transition\n * @type              Function\n *\n * This function take a start object and a target object and proceed to the transition of all properties\n * depending on the passed settings object that is documented bellow.\n *\n * @param       {Object}        startObj          The start object\n * @param       {Object}        targetObj         The target object\n * @param       {Object}        [settings={}]     An object of settings to configure your transition:\n * - duration (1s) {Number|String}: Specify the transition duration. Can be a number which will be treated as miliseconds, or a string like \"1s\", \"10ms\", \"1m\", etc...\n * - easing (easeInOutQuint) {String}: Specify the easing that you want to apply to your transition\n * - stepsCount (null) {Number}: Specify the number of steps that you want during your transition\n * - stepsInterval (null) {Number}: Specify the interval that you want between each steps in miliseconds\n * - round (true) {Boolean}: Specify if you want the returned transition object values to be rounded or not\n *\n * @since       2.0.0\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = function objectProperties(startObj, targetObj, settings = {}) {\n  return new __SPromise((resolve, reject, trigger, cancel) => {\n    settings = __deepMerge(\n      {\n        duration: '1s',\n        stepsCount: null,\n        stepsInterval: null,\n        easing: 'easeInOutQuint',\n        round: true\n      },\n      settings\n    );\n\n    const availableEasingsArray = __availableEasingsArray();\n    const duration = __convert(settings.duration, 'ms');\n    let stepsCount = settings.stepsCount;\n    let stepsInterval = settings.stepsInterval;\n\n    // check the easing wanted\n    if (availableEasingsArray.indexOf(settings.easing) === -1) {\n      throw new Error(\n        `You have specified \"${\n          settings.easing\n        }\" as easing for your transition object properties call but the available easings are \"${availableEasingsArray.join(\n          ','\n        )}\"...`\n      );\n    }\n\n    // require the easing function\n    const easingFn = require(`../easing/${settings.easing}`);\n\n    // check if we have a steps passed, or calculate automatically\n    if (!stepsCount && !stepsInterval) {\n      stepsCount = Math.round(duration / 10); // step every 10ms\n    } else if (!stepsCount && stepsInterval) {\n      stepsCount = Math.round(duration / stepsInterval);\n    }\n\n    // build the start and target object that we will \"transition\"\n    const startTransitionObj = {},\n      targetTransitionObj = {};\n    Object.keys(startObj).forEach((prop) => {\n      if (\n        typeof startObj[prop] === 'number' &&\n        typeof targetObj[prop] === 'number'\n      ) {\n        startTransitionObj[prop] = startObj[prop];\n        targetTransitionObj[prop] = targetObj[prop];\n      }\n    });\n\n    const currentTransitionObj = {};\n    const timer = new __STimer(settings.duration, {\n      tickCount: stepsCount\n    })\n      .on('tick', () => {\n        const returnedTransitionObj = {};\n        // loop on each object properties\n        Object.keys(startTransitionObj).forEach((prop) => {\n          if (!currentTransitionObj[prop]) {\n            currentTransitionObj[prop] = {\n              startValue: startTransitionObj[prop],\n              currentValue: startTransitionObj[prop],\n              targetValue: targetTransitionObj[prop],\n              valueDifference:\n                targetTransitionObj[prop] - startTransitionObj[prop]\n            };\n          }\n          const easingValue = easingFn((1 / 100) * timer.percentage);\n          const currentEasedValue =\n            currentTransitionObj[prop].valueDifference * easingValue;\n          // const currentEasedValue =\n          //   (currentTransitionObj[prop].valueDifference / 100) *\n          //   timer.percentage *\n          //   easingValue;\n          let newValue =\n            currentTransitionObj[prop].startValue + currentEasedValue;\n          if (settings.round) newValue = Math.round(newValue);\n          // save the current value\n          currentTransitionObj[prop].currentValue = newValue;\n          // set the property in the returned transition object\n          returnedTransitionObj[prop] = newValue;\n        });\n        // trigger the \"step\" stack\n        trigger('step', returnedTransitionObj);\n      })\n      .on('complete', () => {\n        // resolve the transition\n        resolve();\n      })\n      .on('cancel,finally', () => {\n        // stop the timer\n        timer.stop();\n        // destroy the timer\n        timer.destroy();\n      })\n      .start();\n  }).start();\n};\n"]}
{
    "version": 3,
    "sources": [
        "SAction.js"
    ],
    "names": [
        "SAction",
        "event",
        "callback",
        "_promise",
        "on",
        "off",
        "descriptorObj",
        "settings",
        "resolve",
        "reject",
        "trigger",
        "cancel",
        "_settings",
        "_descriptorObj",
        "promise",
        "__SPromise",
        "constructor",
        "name",
        "complete",
        "types",
        "__typeMap",
        "type",
        "key",
        "replace",
        "Error"
    ],
    "mappings": ";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;IAqBqBA,O;;;;;;;;AACnB;;;;;;;;;;;AAYA;;;;;;;;;;;AAYA;;;;;;;;;;;;AAaA;;;;;;;;;;;;;uBAaUC,K,EAAOC,Q,EAAU;AACzBF,MAAAA,OAAO,CAACG,QAAR,CAAiBC,EAAjB,CAAoBH,KAApB,EAA2BC,QAA3B;;AACA,aAAO,MAAM;AACXF,QAAAA,OAAO,CAACG,QAAR,CAAiBE,GAAjB,CAAqBJ,KAArB,EAA4BC,QAA5B;AACD,OAFD;AAGD;AAED;;;;;;;;;;;;;;AAWA,mBAAYI,aAAZ,EAA2BC,QAA3B,EAA0C;AAAA;;AAAA,QAAfA,QAAe;AAAfA,MAAAA,QAAe,GAAJ,EAAI;AAAA;;AAAA;;AACxC,8BAAM,CAACC,OAAD,EAAUC,MAAV,EAAkBC,OAAlB,EAA2BC,MAA3B,KAAsC,CAAE,CAA9C;;AADwC,gEA1D9B,EA0D8B;;AAAA,qEA9CzB,EA8CyB;;AAExC,UAAKC,SAAL,GAAiB,wBAAY,EAAZ,EAAgBL,QAAhB,CAAjB;AACA,UAAKM,cAAL,GAAsBP,aAAtB;AAHwC;AAIzC;AAED;;;;;;;;;;;;;;;;;0BAaM;AACJ,UAAMQ,OAAO,GAAG,IAAIC,kBAAJ,CAAe,CAACP,OAAD,EAAUC,MAAV,EAAkBC,OAAlB,EAA2BC,MAA3B,KAAsC;AACnEX,QAAAA,OAAO,CAACG,QAAR,CAAiBO,OAAjB,WAA4B,KAAKM,WAAL,CAAiBC,IAA7C,WAAyD,IAAzD;;AACAP,QAAAA,OAAO,QAAQ,IAAR,CAAP;AACA,aAAKA,OAAL,QAAoB,IAApB;AACD,OAJe,CAAhB;;AAKAI,MAAAA,OAAO,CAACI,QAAR,GAAmB,MAAM;AACvBlB,QAAAA,OAAO,CAACG,QAAR,CAAiBO,OAAjB,WAA4B,KAAKM,WAAL,CAAiBC,IAA7C,gBAA8D,IAA9D;;AACAH,QAAAA,OAAO,CAACJ,OAAR,CAAgB,UAAhB,EAA4B,IAA5B;AACA,aAAKA,OAAL,aAAyB,IAAzB;AACD,OAJD;;AAKA,aAAOI,OAAP;AACD;AAED;;;;;;;;;;;;;;6BAWS;AACP,UAAMK,KAAK,GAAG,sBAAUC,gBAAV,CAAd;AACA,UAAIC,IAAI,GAAG,IAAX;;AACA,WAAK,IAAMC,GAAX,IAAkBH,KAAlB,EAAyB;AACvB,YAAIA,KAAK,CAACG,GAAD,CAAL,KAAe,KAAKN,WAAxB,EAAqC;AACnCK,UAAAA,IAAI,GAAGC,GAAG,CAACC,OAAJ,CAAY,UAAZ,EAAwB,EAAxB,CAAP;AACA;AACD;AACF;;AAED,UAAI,CAACF,IAAL,EACE,MAAM,IAAIG,KAAJ,8CACiC,KAAKR,WAAL,CAAiBC,IADlD,uKAAN;AAIF,aAAO;AACLI,QAAAA,IAAI,EAAEA,IADD;AAELf,QAAAA,aAAa,EAAE,KAAKO,cAFf;AAGLN,QAAAA,QAAQ,EAAE,KAAKK;AAHV,OAAP;AAKD;;;;EArIkCG,kB;;;;gBAAhBf,O,cAoCD,IAAIe,kBAAJ,CAAe,MAAM,CAAE,CAAvB,C",
    "sourcesContent": [
        "import __autoCast from '../string/autoCast';\nimport __deepMerge from '../object/deepMerge';\nimport __SPromise from '../promise/SPromise';\nimport __get from '../object/get';\nimport __flatten from '../object/flatten';\nimport SPromise from '../../node/promise/SPromise';\nimport __serialize from 'fast-safe-stringify';\nimport __typeMap from './typeMap';\n\n/**\n * @name \t\t                    SAction\n * @namespace           sugar.js.action\n * @type                        Class\n *\n * This class represent an action. An action is something that happened depending on\n * settings. It can be an \"url\" action that will change the user page, a \"login\" action\n * that will allow the user to log in his favorite services like \"google\", etc...\n * All this is wrapped into a nicely formated system that use the SPromise class\n * to let you know the state of the action, etc...\n *\n * @example \tjs\n * import SAction from '@coffeekraken/sugar/js/action/SAction';\n * class MyCoolAction extends SAction {\n *    constructor(descriptorObj, settings = {}) {\n *      super(descriptorObj, settings);\n *    }\n * }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default class SAction extends __SPromise {\n  /**\n   * @name            _settings\n   * @type            Object\n   * @private\n   *\n   * Store this action instance settings\n   *\n   * @since       2.0.0\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _settings = {};\n\n  /**\n   * @name            _descriptorObj\n   * @type            Object\n   * @private\n   *\n   * Store this action instance settings\n   *\n   * @since       2.0.0\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _descriptorObj = {};\n\n  /**\n   * @name              _promise\n   * @type              SPromise\n   * @static\n   * @private\n   *\n   * Store the global SPromise instance used to dispatch global events\n   *\n   * @since         2.0.0\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  static _promise = new __SPromise(() => {});\n\n  /**\n   * @name              on\n   * @type              Function\n   * @static\n   *\n   * This function allows you to subscribe to general SAction actions events by\n   * prefixing it with the action class name like \"SUrlAction.{event}\", etc...\n   *\n   * @return      {Function}          A function that you can call to unregister to the event\n   *\n   * @since         2.0.0\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  static on(event, callback) {\n    SAction._promise.on(event, callback);\n    return () => {\n      SAction._promise.off(event, callback);\n    };\n  }\n\n  /**\n   * @name                              constructor\n   * @type                              Function\n   *\n   * Constructor\n   *\n   * @param           \t{SActionConfig|Object} \t\t            request \t            \tThe request object used to make ajax call\n   *\n   * @since       2.0.0\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(descriptorObj, settings = {}) {\n    super((resolve, reject, trigger, cancel) => {});\n    this._settings = __deepMerge({}, settings);\n    this._descriptorObj = descriptorObj;\n  }\n\n  /**\n   * @name            run\n   * @type            Function\n   *\n   * This method is meant to be overrided by your custom actions classes.\n   * You still need to call it using the ```super.run()``` statement in order\n   * to keep all the features like promises events, etc...\n   *\n   * @return      {SPromise}Â      An SPromise instance only for this particular run process. You can subscribe to the same \"events\" has on the class itself but these events are happening only for this run process.\n   *\n   * @since       2.0.0\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  run() {\n    const promise = new __SPromise((resolve, reject, trigger, cancel) => {\n      SAction._promise.trigger(`${this.constructor.name}.run`, this);\n      trigger(`run`, this);\n      this.trigger(`run`, this);\n    });\n    promise.complete = () => {\n      SAction._promise.trigger(`${this.constructor.name}.complete`, this);\n      promise.trigger('complete', this);\n      this.trigger(`complete`, this);\n    };\n    return promise;\n  }\n\n  /**\n   * @name          toJson\n   * @type          Function\n   *\n   * This method is usefull to turn your action instance into a\n   * proper JSON object to you can pass it through http request, etc...\n   * You can then instanciate back your action by using the ```\n   *\n   * @since         2.0.0\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  toJson() {\n    const types = __flatten(__typeMap);\n    let type = null;\n    for (const key in types) {\n      if (types[key] === this.constructor) {\n        type = key.replace('.default', '');\n        break;\n      }\n    }\n\n    if (!type)\n      throw new Error(\n        `You try to convert your \"<primary>${this.constructor.name}</primary>\" instance to JSON but this Class is not registered into the \"<cyan>js.action.typeMap</cyan>\" mapping object. Please add it to it before continue...`\n      );\n\n    return {\n      type: type,\n      descriptorObj: this._descriptorObj,\n      settings: this._settings\n    };\n  }\n}\n"
    ]
}
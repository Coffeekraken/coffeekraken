{
    "version": 3,
    "sources": [
        "SApp.js"
    ],
    "names": [
        "__decryptedConfig",
        "__decryptedMeta",
        "SApp",
        "settings",
        "__settings",
        "name",
        "window",
        "path",
        "config",
        "__base64",
        "decrypt",
        "meta",
        "message",
        "type",
        "transports",
        "Promise",
        "resolve",
        "reject",
        "_this",
        "all",
        "then",
        "modules",
        "__log",
        "__isTransportRegistered",
        "__getRegisteredTransports",
        "__registerTransport",
        "configTransports",
        "split",
        "transp",
        "sugarTransports",
        "require",
        "context",
        "transportsImportPromises",
        "forEach",
        "t",
        "keys",
        "indexOf",
        "push",
        "m",
        "default"
    ],
    "mappings": "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",
    "sourcesContent": [
        "import __get from '../object/get';\nimport __isBase64 from '../is/base64';\nimport __base64 from '../crypt/base64';\n\nlet __decryptedConfig, __decryptedMeta;\n\n/**\n * @name                                            SApp\n * @namespace           sugar.js.class\n * @type                                            Class\n *\n * This class represent an application route class. This mean that you can create an application class that extend this one\n * and your instance will have access to a whole package of data like the application name taken from the package.json file, the version,\n * the description, the author(s), the contributor(s), etc...\n *\n * @example             js\n * import SApp = from ''@coffeekraken/sugar/js/class/SApp';\n * class MyCoolApp extends SApp {\n *    // your app class here...\n * }\n * const myApp = new MyCoolApp();\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default class SApp {\n  /**\n   * @name                __settings\n   * @type                Object\n   * @private\n   */\n  __settings = {};\n\n  /**\n   * @name              __meta\n   * @type              Object\n   * @private\n   */\n  __meta = {};\n\n  /**\n   * @name              __config\n   * @type              Object\n   * @private\n   */\n  __config = {};\n\n  /**\n   * @name                __data\n   * @type                Object\n   * @private\n   */\n  __data = {};\n\n  /**\n   * @name                __log\n   * @type                Object\n   * @private\n   */\n  __log = {};\n\n  /**\n   * @constructor\n   * @param                {Object}                [settings={}]         The application settings\n   * @return              {SApp}                                           An SApp instance pn which you will have access to all the application data\n   *\n   * @setting            {String}                  [name='SApp']         The application name that you want. This will gives you access to your app instance through window.{settings.name}\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(settings = {}) {\n    // store the settings\n    this.__settings = {\n      name: 'SApp',\n      ...settings\n    };\n\n    // expose this instance in the \"window\" scope\n    window[this.__settings.name] = this;\n  }\n\n  /**\n   * @name                            config\n   * @namespace           sugar.js.class.SApp\n   * @type                            Function\n   *\n   * Get a configuration value from the backend using an ajax call\n   *\n   * @param               {String}              [path=null]                           The configuration object dotted path to get like log.frontend.mail.host\n   * @return              {Mixed}                                                     The configuration value getted\n   *\n   * @example           js\n   * const host = await myApp.config('log.frontend.mail.host');\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  config(path = null) {\n    let config = window['_' + this.__settings.name + 'Data'].config || {};\n    if (__isBase64(config) && !__decryptedConfig) {\n      __decryptedConfig = __base64.decrypt(config);\n    }\n    return __get(__decryptedConfig, path);\n  }\n\n  /**\n   * @name                            meta\n   * @namespace           sugar.js.class.SApp\n   * @type                            Function\n   *\n   * Usefull function that give you back an application meta taken depending on your passed dotted object path\n   *\n   * @param               {String}              [path=null]                           The meta object dotted path to get like \"name\"\n   * @return              {Mixed}                                                     The meta value getted\n   *\n   * @example           js\n   * const name = await myApp.meta('name');\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  meta(path = null) {\n    let meta = window['_' + this.__settings.name + 'Data'].meta || {};\n    if (__isBase64(meta) && !__decryptedMeta) {\n      __decryptedMeta = __base64.decrypt(meta);\n    }\n    return __get(__decryptedMeta, path);\n  }\n\n  /**\n   * @name                                  log\n   * @namespace                             squid.js.log\n   * @type                                  Function\n   *\n   * Log a message using the transports log system.\n   *\n   * @param           {String}              message                   The message to log\n   * @param           {String}Â              [type=\"info\"]             The type of log. Can be \"error\", \"warn\", \"info\", \"http\", \"verbose\", \"debug\", \"silly\"\n   * @param           {Array}               [transports=null]         The transports that you want to use for this log process. If null, use all the transports configured in the squid config for the type of log passed\n   * @return          {Promise}                                       A promise resolved once the log process is finished\n   *\n   * @example           js\n   * Squid.log('Hello world', 'error').then(() => {\n   *    // do something if needed...\n   * });\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  log(message, type = 'info', transports = null) {\n    return new Promise((resolve, reject) => {\n      const _this = this;\n\n      // __ensureExist('window.Squid._log');\n\n      Promise.all([\n        import(\n          /* webpackChunkName: \"log\" */ /* webpackMode: \"lazy\" */ '../log/log'\n        ),\n        import(\n          /* webpackChunkName: \"isTransportRegistered\" */ /* webpackMode: \"lazy\" */ '../log/isTransportRegistered'\n        ),\n        import(\n          /* webpackChunkName: \"getRegisteredTransports\" */ /* webpackMode: \"lazy\" */ '../log/getRegisteredTransports'\n        ),\n        import(\n          /* webpackChunkName: \"registerTransport\" */ /* webpackMode: \"lazy\" */ '../log/registerTransport'\n        )\n      ]).then((modules) => {\n        const __log = modules[0],\n          __isTransportRegistered = modules[1],\n          __getRegisteredTransports = modules[2],\n          __registerTransport = modules[3];\n\n        // get the transports needed for this type\n        const configTransports = this.config('log.frontend.transportsByType')[\n          type\n        ]\n          ? this.config('log.frontend.transportsByType')[type].split(' ')\n          : [];\n        let transp = transports ? transports : configTransports;\n\n        if (!this.__log.sugarTransports) {\n          this.__log.sugarTransports = require.context(\n            `@coffeekraken/sugar/js/log/transports`,\n            true,\n            /\\.js$/,\n            'lazy'\n          );\n        }\n\n        const transportsImportPromises = [];\n        transp.forEach((t) => {\n          if (this.__log.sugarTransports.keys().indexOf(`./${t}.js`) !== -1) {\n            transportsImportPromises.push(\n              this.__log.sugarTransports(`./${t}.js`).then((m) => {\n                if (!__isTransportRegistered.default(t))\n                  __registerTransport.default(t, m.default || m);\n              })\n            );\n          }\n        });\n\n        Promise.all(transportsImportPromises).then(() => {\n          __log.default(message, type, transp).then(() => {\n            resolve();\n          });\n        });\n      });\n    });\n  }\n}\n"
    ]
}
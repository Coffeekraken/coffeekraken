{
    "version": 3,
    "sources": [
        "SAuth.js"
    ],
    "names": [
        "__machineIdSync",
        "require",
        "machineIdSync",
        "__deepMerge",
        "__fs",
        "__SAuthTerminalAdapter",
        "__SCache",
        "__cryptObject",
        "module",
        "exports",
        "name",
        "settings",
        "test",
        "Error",
        "_name",
        "_settings",
        "type",
        "title",
        "info",
        "adapter",
        "cache",
        "validator",
        "_adapter",
        "existsSync",
        "__dirname",
        "error",
        "_authInfo",
        "cachedInfos",
        "get",
        "decryptedValue",
        "decrypt",
        "authInfo",
        "ask",
        "injector",
        "requestConfig",
        "finalRequestConfig",
        "Object",
        "assign",
        "token",
        "supportedAuthTypes",
        "indexOf",
        "rawInfos",
        "formatedInfos",
        "_validation",
        "validationResult",
        "askSettings",
        "_success",
        "cryptedInfos",
        "encrypt",
        "set"
    ],
    "mappings": "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",
    "sourcesContent": [
        "const __machineIdSync = require('node-machine-id').machineIdSync;\n\nconst __deepMerge = require('../object/deepMerge');\nconst __fs = require('fs');\n\nconst __SAuthTerminalAdapter = require('./adapters/SAuthTerminalAdapter');\nconst __SCache = require('../cache/SCache');\nconst __cryptObject = require('../crypt/object');\n\n/**\n * @name                            SAuth\n * @namespace           node.auth\n * @type                            Class\n *\n * Base class that gives you the ability to set/ask for some authentification informations like auth token, username-password, etc...\n *\n * @example           js\n * const apiAuth = new SAuth('bitbucket');\n * const token = await apiAuth.ask('token');\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = class SAuth {\n  /**\n   * @name                          _name\n   * @type                          String\n   * @private\n   *\n   * Store the instance name\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _name = null;\n\n  /**\n   * @name                          _adapter\n   * @type                          SAuthAdapter\n   * @private\n   *\n   * Store the instance adapter\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _adapter = null;\n\n  /**\n   * @name                          _settings\n   * @type                          Object\n   * @private\n   *\n   * Store the instance settings\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _settings = null;\n\n  /**\n   * @name                          constructor\n   * @type                          Function\n   *\n   * Construct the SAuth instance\n   *\n   * @param           {String}                name                  The name of this SAuth instance\n   * @param           {Object}                [settings={}]\n   * An object of settings to configure this SAuth instance. Here's the list of available settings:\n   * - type (basic) {String}: Specify the auth type wanted. Can be 'basic', 'bearer', 'oauth2', etc...\n   * - title (null) {String}: Specify the title to display on top of the form\n   * - info (null) {String}: Specify some info to display on top of the form\n   * - adapter (SAuthTerminalAdapter) {SAuthAdapter}: The adapter instance you want to use to get the auth informations\n   * - cache (null) {SCache}: An SCache instance to use to save the auth infos in. If null, a default filesystem cache instance will be created\n   * - validator (null) {Function}: An async function that take as parameters the auth type like \"basic\" and the auth object to check if the authentification is correct. Has to return a promise that need to be resolved with true if all is ok, and false if not. Can be also an error message to display to the user\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(name, settings = {}) {\n    // store the name\n    if (!/^[a-zA-Z0-9_-]+$/.test(name)) {\n      throw new Error(\n        `The name of an SAuth instance can contain only letters like [a-zA-Z0-9_-]...`\n      );\n    }\n    this._name = name;\n\n    // handle settings\n    this._settings = __deepMerge(\n      {\n        type: 'basic',\n        title: null,\n        info: null,\n        adapter: new __SAuthTerminalAdapter(),\n        cache: new __SCache(`SAuth-${name}`, {}),\n        validator: null\n      },\n      settings\n    );\n\n    // save the adapter\n    this._adapter = this._settings.adapter;\n\n    // process validator\n    if (\n      this._settings.validator &&\n      typeof this._settings.validator === 'string'\n    ) {\n      if (\n        __fs.existsSync(\n          `${__dirname}/validators/${this._settings.validator}Validator.js`\n        )\n      ) {\n        this._settings.validator = require(`${__dirname}/validators/${this._settings.validator}Validator.js`);\n      }\n    }\n  }\n\n  /**\n   * @name                          type\n   * @type                          String\n   *\n   * Access the auth type like \"basic\", \"bearer\", \"oauth2\", etc...\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get type() {\n    return this._settings.type;\n  }\n\n  /**\n   * @name                          authInfo\n   * @type                          Object\n   *\n   * Get the authInfo object if already saved in memory or ask the user for this\n   *\n   * @param           {Object}            [settings={}]       An object of settings. Here's the options available:\n   * - title (null) {String}: The title to display on top of the form\n   * - type (settings.type) {String}: Specify the auth type that you want to ask to the user\n   * - error (null) {String}: An error message to display to the user. Can be something like \"Your credentials have been declined. Please try again...\"\n   * - info (null) {String}: An info message to display to the user\n   * @return          {Promise}                               A promise resolved with the authInfo object\n   *\n   * @example         js\n   * const authInfo = await myAuth.authInfo();\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  async authInfo(settings = {}) {\n    settings = __deepMerge(\n      {\n        type: this.type,\n        title: this._settings.title,\n        info: this._settings.info,\n        error: null\n      },\n      settings\n    );\n\n    // return the cached info in memory\n    if (this._authInfo) return this._authInfo;\n\n    // check if we have already the infos in cache\n    const cachedInfos = await this._settings.cache.get(settings.type);\n    if (cachedInfos) {\n      const decryptedValue = __cryptObject.decrypt(\n        cachedInfos,\n        __machineIdSync()\n      );\n      return decryptedValue;\n    }\n\n    // ask the user for his credentials\n    const authInfo = await this.ask(settings);\n\n    // return the getted infos\n    return authInfo;\n  }\n\n  /**\n   * @name                          inject\n   * @type                          Function\n   *\n   * This method take the passed requestConfig object and inject the auth parameters depending on the \"injector\" wanted that can be one of the described bellow\n   *\n   * @param           {String|Function}            injector              The injector wanted that can be one of these:\n   * - axios: Inject the auth infos into an axio request config object\n   * - Function: A function that take as parameters the requestConfig object and the authInfo object and has to return the updated requestConfig\n   * @param           {Object}            requestConfig         The request config object into which inject the auth info\n   * @param           {Object}            [authInfo=this.authInfo]      The authInfo object to use\n   * @return          {Object}                                  The hooked requestConfig\n   *\n   * @example         js\n   * myAuth.inject('axios', requestConfig);\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  inject(injector, requestConfig, authInfo = this._authInfo) {\n    // if we don't have any auth info, return the request object untouched\n    if (!authInfo) return requestConfig;\n\n    // init the final request config variable that will be hooked\n    let finalRequestConfig = {};\n\n    // check if the injector is a string\n    if (typeof injector === 'string') {\n      if (!__fs.existsSync(`${__dirname}/injectors/${injector}Injector.js`)) {\n        throw new Error(\n          `You try to inject the auth info using the injector \"${injector}\" but it does not exists...`\n        );\n      }\n      finalRequestConfig = require(`${__dirname}/injectors/${injector}Injector.js`)(\n        Object.assign(requestConfig),\n        authInfo\n      );\n    } else if (typeof injector === 'function') {\n      finalRequestConfig = injector(Object.assign(requestConfig), authInfo);\n    }\n\n    // process a little bit the final request config object\n    delete finalRequestConfig.name;\n    delete finalRequestConfig.token;\n    delete finalRequestConfig.type;\n\n    // return the requestConfig untouched as fallback\n    return finalRequestConfig;\n  }\n\n  /**\n   * @name                          ask\n   * @type                          Function\n   * @async\n   *\n   * Allows you to request for some auth informations to the user.\n   *\n   * @param           {Object}            [settings={}]       An object of settings. Here's the options available:\n   * - title (null) {String}: The title to display on top of the form\n   * - type (settings.type) {String}: Specify the auth type that you want to ask to the user\n   * - error (null) {String}: An error message to display to the user. Can be something like \"Your credentials have been declined. Please try again...\"\n   * - info (null) {String}: An info message to display to the user\n   * @return          {Promise}                         A promise that will be resolved once the user (or the api) has answer with the correct infos\n   *\n   * @example           js\n   * const authInfos = await myAuthInstance.ask();\n   * // {\n   * //   type: 'basic',\n   * //   name: 'maAuth.basic',\n   * //   token: 'QWxhZGRpbjpvcGVuIHNlc2FtZQ==',\n   * //   headers: {\n   * //     Authorization: 'Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ=='\n   * //   }\n   * // }\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  async ask(settings = {}) {\n    settings = __deepMerge(\n      {\n        type: this.type,\n        title: this._settings.title,\n        info: this._settings.info,\n        error: null\n      },\n      settings\n    );\n\n    // check that the requested auth type is handled by the adapter\n    if (this._adapter.supportedAuthTypes.indexOf(settings.type) === -1) {\n      throw new Error(\n        `You try to ask the auth informations of type \"${settings.type}\" through the \"${this._name}\" SAuth instance but the setted adapter does not handle this auth type...`\n      );\n    }\n\n    // ask the adapter for the auth infos\n    const rawInfos = await this._adapter.ask(settings);\n\n    // format the auth infos using the corresponsing formater\n    let formatedInfos = rawInfos;\n    if (__fs.existsSync(`${__dirname}/formaters/${settings.type}Formater.js`)) {\n      formatedInfos = require(`${__dirname}/formaters/${settings.type}Formater.js`)(\n        rawInfos\n      );\n    }\n\n    // add the common formated auth object info\n    formatedInfos = __deepMerge(\n      {\n        type: settings.type,\n        name: `${this._name}.${settings.type}`\n      },\n      formatedInfos\n    );\n\n    // validate the getted infos if possible\n    if (this._settings.validator) {\n      // display validation message\n      if (this._adapter._validation) {\n        this._adapter._validation();\n      }\n\n      const validationResult = await this._settings.validator(formatedInfos);\n      if (validationResult !== true) {\n        const askSettings = Object.assign(settings);\n        askSettings.error =\n          typeof validationResult === 'string'\n            ? validationResult\n            : 'Your credentials have been declined. Please try again...';\n        return this.ask(askSettings);\n      }\n    }\n\n    // display validation message\n    if (this._adapter._success) {\n      await this._adapter._success();\n    }\n\n    // crypt the infos before saving them into cache\n    const cryptedInfos = __cryptObject.encrypt(\n      formatedInfos,\n      __machineIdSync()\n    );\n\n    // the infos are ok so we save them in cache\n    await this._settings.cache.set(settings.type, cryptedInfos, {});\n\n    // save the auth info into memory\n    this._authInfo = formatedInfos;\n\n    // return the getted infos\n    return formatedInfos;\n  }\n};\n"
    ]
}
{
    "version": 3,
    "sources": [
        "SAuthAdapter.js"
    ],
    "names": [
        "module",
        "exports",
        "authTypes",
        "_supportedAuthTypes",
        "settings",
        "type",
        "Error",
        "infos"
    ],
    "mappings": ";;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;AAiBAA,MAAM,CAACC,OAAP;AACE;;;;;;;;;;AAWA;;;;;;;;AAQA,wBAAYC,SAAZ,EAAuB;AAAA;;AAAA,iDAVD,EAUC;;AACrB;AACA,SAAKC,mBAAL,GAA2BD,SAA3B;AACD;AAED;;;;;;;;;;AAzBF;AAAA;;AAqCE;;;;;;;;;;;;;;;;;;;;AArCF;AAAA,8CAyDYE,QAzDZ,EAyD2B;AAAA,YAAfA,QAAe;AAAfA,UAAAA,QAAe,GAAJ,EAAI;AAAA;;AACvB;AACA,YAAI,CAAC,gBAASA,QAAQ,CAACC,IAAlB,EAAL,EAAgC;AAC9B,gBAAM,IAAIC,KAAJ,yCAC4BF,QAAQ,CAACC,IADrC,wFAAN;AAGD,SANsB,CAQvB;;;AACA,YAAME,KAAK,SAAS,gBAASH,QAAQ,CAACC,IAAlB,GAA0BD,QAA1B,CAApB;AACA,eAAOG,KAAP;AACD,OApEH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBAiC2B;AACvB,aAAO,KAAKJ,mBAAZ;AACD;AAnCH;;AAAA;AAAA",
    "sourcesContent": [
        "/**\n * @name                            SAuthAdapter\n * @namespace           node.auth.adapters\n * @type                            Class\n *\n * Base SAuth adapter class that has to be the base of each SAuthAdapters\n *\n * @example         js\n * const SAuthAdapter = require('@coffeekraken/sugar/node/auth/adapters/SAuthAdapter');\n * class MyCoolAdapter extends SAuthAdapter {\n *    construct() {\n *      super();\n *    }\n * }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = class SAuthAdapter {\n  /**\n   * @name                          _supportedAuthTypes\n   * @type                          Array\n   * @private\n   *\n   * Store the supported auth types by the current auth adapter\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _supportedAuthTypes = [];\n\n  /**\n   * @name                          constructor\n   * @type                          Function\n   *\n   * Construct the SAuthAdapter instance\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(authTypes) {\n    // store the supported auth types\n    this._supportedAuthTypes = authTypes;\n  }\n\n  /**\n   * @name                          supportedAuthTypes\n   * @type                          Array\n   *\n   * Access the supported auth types for this adapter\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get supportedAuthTypes() {\n    return this._supportedAuthTypes;\n  }\n\n  /**\n   * @name                            ask\n   * @type                            Function\n   * @async\n   *\n   * Ask form some auth informations depending on the auth type you want and the supported auth types of the selected adapter\n   *\n   * @param         {Object}Â              [settings={}]\n   * - type (settings.type) {String}: Specify the auth type you want to ask like \"basic\", \"bearer\", \"oauth2\", etc...\n   * - title (null) {String}: Specify the title to display on top of the form\n   * - error (null) {String}: An error message to display to the user. Can be something like \"Your credentials have been declined. Please try again...\"\n   * - info (null) {String}: An info message to display to the user\n   *\n   * @example           js\n   * const authInfos = await myAuth.ask({\n   *    type: 'basic'\n   * });\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  async ask(settings = {}) {\n    // make sure the adapter support the auth type requested\n    if (!this[`_${settings.type}`]) {\n      throw new Error(\n        `You try to ask the user for \"${settings.type}\" auth informations but this auth type is not supported by the current adapter...`\n      );\n    }\n\n    // get the auth info using the adapter\n    const infos = await this[`_${settings.type}`](settings);\n    return infos;\n  }\n};\n"
    ]
}
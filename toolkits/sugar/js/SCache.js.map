{
    "version": 3,
    "sources": [
        "SCache.js"
    ],
    "names": [
        "SCache",
        "name",
        "settings",
        "ls",
        "fs",
        "Error",
        "test",
        "_name",
        "_settings",
        "ttl",
        "deleteOnExpire",
        "adapter",
        "parse",
        "JSON",
        "stringify",
        "_adapter",
        "_defaultAdaptersPaths",
        "adptr",
        "default",
        "__SCacheAdapter",
        "valueOnly",
        "getAdapter",
        "rawValue",
        "get",
        "value",
        "_parse",
        "deleteAt",
        "Date",
        "getTime",
        "delete",
        "existingValue",
        "finalSettings",
        "valueToSave",
        "created",
        "updated",
        "stringifiedValueToSave",
        "_stringify",
        "set",
        "clear",
        "object"
    ],
    "mappings": "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",
    "sourcesContent": [
        "import __deepMerge from '../object/deepMerge';\nimport __SCacheAdapter from './adapters/SCacheAdapter';\nimport __convert from '../time/convert';\nimport __isNode from '../is/node';\n\n/**\n * @name                                SCache\n * @namespace           sugar.js.cache\n * @type                                Class\n *\n * Gives you the ability to manage cache through some defaults available adapters or using yours.\n * This cache class take care of these features:\n * - Standard and custom TTL by cache item\n * - Delete cache items on expires or not\n *\n * @example             js\n * import SCache from '@coffeekraken/sugar/js/cache/SCache';\n * const cache = new SCache({\n *  ttl: '10s' // 10 seconds\n * });\n * cache.set('myCoolCacheItem', someData);\n *\n * @since     2.0.0\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default class SCache {\n  /**\n   * @name                              _name\n   * @type                              String\n   * @private\n   *\n   * Store the cache name\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _name = null;\n\n  /**\n   * @name                              _settings\n   * @type                              Object\n   * @private\n   *\n   * Store the default settings of the SCache instance\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _settings = {};\n\n  /**\n   * @name                              _defaultAdaptersPaths\n   * @type                              Object\n   * @private\n   *\n   * List all the default adapters and their path\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _defaultAdaptersPaths = {\n    ls: '@coffeekraken/sugar/js/cache/adapters/SCacheLsAdapter',\n    fs: `@coffeekraken/sugar/node/cache/adapters/SCacheFsAdapter`\n  };\n\n  /**\n   * @name                              _adapter\n   * @type                              SCacheAdapter\n   * @private\n   *\n   * Store this current instance adapter\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _adapter = null;\n\n  /**\n   * @name                              constructor\n   * @type                              Function\n   *\n   * Construct the SCache instance with the settings passed in object format. See description bellow.\n   *\n   * @param         {String}        name                  A name for your cache instance. Can have only these characters: [a-zA-Z0-9_-]\n   * @param         {Object}          [settings={}]         The settings for the SCache instance\n   * - ttl (-1) {Number|String}: Time to live for each cache items in seconds or in String like '10s', '20h', '300ms', etc...\n   * - deleteOnExpire (true) {Boolean}: Specify if you want that the items are deleted on expire\n   * - adapter (fs) {String|SCacheAdapter}: Specify the adapter to use as default one. Can be a simple string like \"fs\" (filesystem) or an instance of an SCacheAdapter class. Here's the available ones:\n   *    - 'fs': File system that store the items in the \"temp\" folder of your system\n   *    - SCacheFsAdapter: An instance of the SCacheFsAdapter class that you can configure as you want\n   * - parse (JSON.parse) {Function}: Specify the function used to parse the items once theirs get back from theirs save place\n   * - stringify (JSON.stringify) {Function}: Specify the function used to stringify the item object before saving it\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(name, settings = {}) {\n    // make sure we have a name\n    if (!name) {\n      throw new Error(\n        `The SCache instance need a name. To set it, pass the \"name\" as the first argument of the constructor...`\n      );\n    }\n    // store the name\n    if (!/^[a-zA-Z0-9-_\\.]+$/.test(name)) {\n      throw new Error(\n        `The name of an SCache instance can contain only letters like <green>[a-zA-Z0-9_-.]</green> but you've passed \"<red>${name}</red>\"...`\n      );\n    }\n    this._name = name;\n\n    this._settings = __deepMerge(\n      {\n        name,\n        ttl: -1,\n        deleteOnExpire: true,\n        adapter: __isNode() ? 'fs' : 'ls',\n        parse: JSON.parse,\n        stringify: JSON.stringify\n      },\n      settings\n    );\n  }\n\n  /**\n   * @name                            adapter\n   * @type                            SCacheAdapter\n   *\n   * Access this cache instance adapter\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  async getAdapter() {\n    // check if we have already an adapter setted for this instance\n    if (this._adapter) return this._adapter;\n    // get the adapter specified in the settings\n    let adapter = this._settings.adapter;\n    // check the type\n    if (typeof adapter === 'string' && this._defaultAdaptersPaths[adapter]) {\n      let adptr = await import(\n        /* webpackChunkName: \"SCacheAdapter\" */ this._defaultAdaptersPaths[\n          adapter\n        ]\n      );\n      if (adptr.default) adptr = adptr.default;\n      this._adapter = new adptr(this._settings);\n    } else if (adapter instanceof __SCacheAdapter) {\n      this._adapter = adapter;\n    }\n    // return the adapter\n    return this._adapter;\n  }\n\n  /**\n   * @name                            get\n   * @type                            Function\n   * @async\n   *\n   * Get a value back from the cache using the specified adapter in the settings\n   *\n   * @param               {String}              name              The name of the item to get back from the cache\n   * @param               {Boolean}             [valueOnly=true]  Specify if you want the value only or the all cache object\n   * @return              {Promise}                               A promise that will be resolved once the item has been getted\n   *\n   * @example             js\n   * const myValue = myCache.get('coolValue');\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  async get(name, valueOnly = true) {\n    // get the adapter\n    const adapter = await this.getAdapter();\n    // using the specified adapter to get the value back\n    const rawValue = await adapter.get(`${this._name}.${name}`);\n\n    // check that we have a value back\n    if (!rawValue || typeof rawValue !== 'string') return null;\n    // parse the raw value back to an object\n    const value = adapter.parse\n      ? adapter.parse(rawValue)\n      : this._parse(rawValue);\n    // check if the item is too old...\n    if (value.deleteAt !== -1 && value.deleteAt < new Date().getTime()) {\n      // this item has to be deleted\n      if (value.deleteOnExpire) await adapter.delete(name);\n      // return null cause the item is too old\n      return null;\n    }\n    // otherwise, this is good so return the item\n    // either the value only, or the full cache object\n    if (valueOnly) return value.value;\n    return value;\n  }\n\n  /**\n   * @name                            set\n   * @type                            Function\n   * @async\n   *\n   * Set a value to the cache system using the specified adapter with some settings like described bellow\n   *\n   * @param               {String}              name              The name of the item to set in the cache system\n   * @param               {Mixed}               value             The value to set.\n   * @param               {Object}              [settings={}]\n   * The settings for this particular item:\n   * - ttl (-1) {Number}: Time to live in seconds\n   * - deleteOnExpire (true) {Boolean}: Specify if this item has to be deleted on expire on not\n   * @return              {Promise}                               A promise that will be resolved once the item has been saved\n   *\n   * @example             js\n   * const myValue = myCache.set('coolValue', { hello: 'world' }, {\n   *    ttl: 1000\n   * });\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  async set(name, value, settings = {}) {\n    // test name\n    if (!/^[a-zA-Z0-9_\\-\\+\\.]+$/.test(name)) {\n      throw new Error(\n        `You try to set an item named \"<yellow>${name}</yellow>\" in the \"${this._name}\" SCache instance but an item name can contain only these characters <green>[a-zA-Z0-9_-.]</green> but you've passed \"<red>${name}</red>\"...`\n      );\n    }\n\n    // get the adapter\n    const adapter = await this.getAdapter();\n\n    // try to get the value to update it\n    const existingValue = await this.get(name, false);\n\n    // merge the default and the item settings\n    const finalSettings = __deepMerge(\n      {\n        ttl: this._settings.ttl,\n        deleteOnExpire: this._settings.deleteOnExpire\n      },\n      settings\n    );\n\n    // initial the object that will be saved in the cache\n    const deleteAt =\n      finalSettings.ttl === -1\n        ? -1\n        : new Date().getTime() +\n          __convert(\n            typeof finalSettings.ttl === 'number'\n              ? `${finalSettings.ttl}s`\n              : finalSettings.ttl,\n            'ms'\n          );\n    const valueToSave = {\n      name,\n      value,\n      created: existingValue ? existingValue.created : new Date().getTime(),\n      updated: new Date().getTime(),\n      deleteAt,\n      settings: finalSettings\n    };\n\n    // stringify the value to save\n    const stringifiedValueToSave = adapter.stringify\n      ? adapter.stringify(valueToSave)\n      : this._stringify(valueToSave);\n\n    // use the adapter to save the value\n    return adapter.set(`${this._name}.${name}`, stringifiedValueToSave);\n  }\n\n  /**\n   * @name                                exists\n   * @type                                Function\n   * @async\n   *\n   * Check if the passed cache item id exists\n   *\n   * @param                 {String}               name               The name of the item to check\n   * @return                {Boolean}                             true if exists, false if not\n   *\n   * @example           js\n   * await myCache.exists('coco'); // => true\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  async exists(name) {\n    // check\n    const value = await this.get(name);\n    // return the status\n    if (value) return true;\n    return false;\n  }\n\n  /**\n   * @name                                delete\n   * @type                                Function\n   *\n   * Delete an item in the cache by his name\n   *\n   * @param                 {String}               name               The name of the item to delete\n   * @return                {Promise}                                  A promise that will return true if correctly deleted, false if not\n   *\n   * @example           js\n   * await myCache.delete('coco');\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  async delete(name) {\n    // get the adapter\n    const adapter = await this.getAdapter();\n    // delete the item\n    return adapter.delete(`${this._name}.${name}`);\n  }\n\n  /**\n   * @name                                clear\n   * @type                                Function\n   *\n   * Delete all the items in the current cache instance\n   *\n   * @return                {Promise}                                  A promise that will return true if correctly deleted, false if not\n   *\n   * @example           js\n   * await myCache.clear();\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  async clear() {\n    // get the adapter\n    const adapter = await this.getAdapter();\n    // clear the cache\n    return adapter.clear(this._name);\n  }\n\n  /**\n   * @name                                _parse\n   * @type                                Function\n   * @private\n   *\n   * Take the raw value getted from the cache system and parse it to his actual object format\n   * You can hook how this method will act by specify the \"settings.parse\" property to a different function\n   *\n   * @param               {String}                      rawValue                    The raw value to transform into an object\n   * @return              {Object}                                                  The object format of the value getted back from the cache system\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _parse(rawValue) {\n    return this._settings.parse(rawValue);\n  }\n\n  /**\n   * @name                                _stringify\n   * @type                                Function\n   * @private\n   *\n   * Transform the passed object to a simple string in order to save it in the cache system using the specified adapter.\n   * You can hook how this method will act by specify the \"settings.stringify\" property to a different function\n   *\n   * @param               {Object}                      object                       The object to save to the cache system that have to transformed in string before...\n   * @return              {String}                                                  The string format of the item to save to cache\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _stringify(object) {\n    return this._settings.stringify(object);\n  }\n}\n"
    ]
}
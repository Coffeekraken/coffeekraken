{
    "version": 3,
    "sources": [
        "SCacheLsAdapter.js"
    ],
    "names": [
        "SCacheLsAdapter",
        "settings",
        "name",
        "value",
        "window",
        "localStorage",
        "setItem",
        "_settings",
        "getItem",
        "removeItem",
        "cacheName",
        "keys",
        "Object",
        "keysToDelete",
        "filter",
        "key",
        "startsWith",
        "forEach",
        "k",
        "cacheKeys",
        "__SCacheAdapter"
    ],
    "mappings": ";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;IAiBqBA,e;;;;;AACnB;;;;;;;;;;AAUA,2BAAYC,QAAZ,EAA2B;AAAA,QAAfA,QAAe;AAAfA,MAAAA,QAAe,GAAJ,EAAI;AAAA;;AAAA;;AAAA,6BACnB,wBAAY,EAAZ,EAAgBA,QAAhB,CADmB;AAE1B;AAED;;;;;;;;;;;;;;;;;;;;;;;8CAkBUC,I,EAAMC,K,EAAO;AACrB;AACAC,QAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,WAA+B,KAAKC,SAAL,CAAeL,IAA9C,cAAsDA,IAAtD,GAA8DC,KAA9D,EAFqB,CAGrB;;AACA,eAAO,IAAP;AACD,O;;;;;;;;AAED;;;;;;;;;;;;;;;;;;8CAcUD,I,EAAM;AACd,eAAOE,MAAM,CAACC,YAAP,CAAoBG,OAApB,WAA+B,KAAKD,SAAL,CAAeL,IAA9C,cAAsDA,IAAtD,EAAP;AACD,O;;;;;;;;AAED;;;;;;;;;;;;;;;;;;kDAcaA,I,EAAM;AACjB;AACAE,QAAAA,MAAM,CAACC,YAAP,CAAoBI,UAApB,WAAkC,KAAKF,SAAL,CAAeL,IAAjD,cAAyDA,IAAzD,GAFiB,CAIjB;;AACA,eAAO,IAAP;AACD,O;;;;;;;;AAED;;;;;;;;;;;;;;;;;;gDAcYQ,S,EAAW;AACrB;AACA,YAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYP,MAAM,CAACC,YAAnB,CAAb,CAFqB,CAIrB;;AACA,YAAMQ,YAAY,GAAGF,IAAI,CAACG,MAAL,CAAaC,GAAD,IAAS;AACxC,iBAAOA,GAAG,CAACC,UAAJ,WAAkBN,SAAlB,OAAP;AACD,SAFoB,CAArB,CALqB,CASrB;;AACAG,QAAAA,YAAY,CAACI,OAAb,CAAsBC,CAAD,IAAO;AAC1Bd,UAAAA,MAAM,CAACC,YAAP,CAAoBI,UAApB,CAA+BS,CAA/B;AACD,SAFD,EAVqB,CAcrB;;AACA,eAAO,IAAP;AACD,O;;;;;;;;AAED;;;;;;;;;;;;;;;;;;;+CAeWR,S,EAAW;AACpB;AACA,YAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYP,MAAM,CAACC,YAAnB,CAAb,CAFoB,CAIpB;;AACA,YAAMc,SAAS,GAAGR,IAAI,CAACG,MAAL,CAAaC,GAAD,IAAS;AACrC,iBAAOA,GAAG,CAACC,UAAJ,WAAkBN,SAAlB,OAAP;AACD,SAFiB,CAAlB,CALoB,CASpB;;AACA,eAAOS,SAAP;AACD,O;;;;;;;;;;;EA1I0CC,uB",
    "sourcesContent": [
        "import __deepMerge from '../../object/deepMerge';\nimport __SCacheAdapter from './SCacheAdapter';\n\n/**\n * @name                                SCacheFsAdapter\n * @namespace           sugar.js.cache.adapters\n * @type                                Class\n *\n * A filesystem SCache adapter that allows you to store your cache items on the user system\n *\n * @example             js\n * const cache = new SCache({\n *    ttl: 100,\n *    adapter: new SCacheLsAdapter({\n *    })\n * });\n *\n * @since     2.0.0\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default class SCacheLsAdapter extends __SCacheAdapter {\n  /**\n   * @name                              constructor\n   * @type                              Function\n   *\n   * Construct the SCacheFsAdapter instance with the settings passed in object format. See description bellow.\n   *\n   * @param         {Object}          [settings={}]             An object to configure the SCacheFsAdapter instance. This is specific to each adapters.settings.settings...\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(settings = {}) {\n    super(__deepMerge({}, settings));\n  }\n\n  /**\n   * @name                          set\n   * @type                          Function\n   *\n   * Set a cache item in the localstorage\n   *\n   * @param             {String}              name              The item name\n   * @param             {Mixed}               value             The value to save\n   * @param             {Object}              [settings={}]     A settings object to override the default ones defined on the SCache instance\n   * @return            {Object|Boolean}                        Return the objectToSave generated by the \"this.processItem\" method, or false if something goes wrong...\n   *\n   * @example           js\n   * await myCache.set('myCoolItem', { hello: 'world' }, {\n   *    ttl: 40000\n   * });\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  async set(name, value) {\n    // store data into localStorage\n    window.localStorage.setItem(`${this._settings.name}.${name}`, value);\n    // write has been done correctly\n    return true;\n  }\n\n  /**\n   * @name                          get\n   * @type                          Function\n   *\n   * Get a cache item in the localstorage\n   *\n   * @param             {String}              name              The item name\n   * @return            {Object|Boolean}                        Return the objectToSave generated by the \"this.processItem\" method, or false if something goes wrong...\n   *\n   * @example           js\n   * await myCache.get('myCoolItem');\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  async get(name) {\n    return window.localStorage.getItem(`${this._settings.name}.${name}`);\n  }\n\n  /**\n   * @name                          delete\n   * @type                          Function\n   *\n   * Delete a cache item on the filesystem\n   *\n   * @param             {String}              name              The item name\n   * @return            {Boolean}                               true if all of, false if not...\n   *\n   * @example           js\n   * await myCache.delete('myCoolItem');\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  async delete(name) {\n    // delete the item from the localStorage\n    window.localStorage.removeItem(`${this._settings.name}.${name}`);\n\n    // return true cause all went well\n    return true;\n  }\n\n  /**\n   * @name                          clear\n   * @type                          Function\n   *\n   * Clear all the items in the current cache\n   *\n   * @param             {String}              cacheName              The current cache name to delete\n   * @return            {Boolean}                               true if all of, false if not...\n   *\n   * @example           js\n   * await myCache.clear;\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  async clear(cacheName) {\n    // get all the localStorage keys to filter them\n    const keys = Object.keys(window.localStorage);\n\n    // filter the keys to delete\n    const keysToDelete = keys.filter((key) => {\n      return key.startsWith(`${cacheName}.`);\n    });\n\n    // loop on each keys to delete\n    keysToDelete.forEach((k) => {\n      window.localStorage.removeItem(k);\n    });\n\n    // return true cause all went well\n    return true;\n  }\n\n  /**\n   * @name                      keys\n   * @type                      Function\n   * @async\n   *\n   * Return an array of all the items keys saved in this cache instance\n   *\n   * @param             {String}              cacheName              The current cache name to get keys from\n   * @return        {Promise}                     A promise resolved with the array of keys\n   *\n   * @example         js\n   * const keys = await myCache.keys(); // => ['item1','item2']\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  async keys(cacheName) {\n    // get all the localStorage keys to filter them\n    const keys = Object.keys(window.localStorage);\n\n    // filter the keys to get only the ones that bellongs to this cache instance\n    const cacheKeys = keys.filter((key) => {\n      return key.startsWith(`${cacheName}.`);\n    });\n\n    // return the cache keys\n    return cacheKeys;\n  }\n}\n"
    ]
}
{
    "version": 3,
    "sources": [
        "SConfigLsAdapter.js"
    ],
    "names": [
        "module",
        "exports",
        "settings",
        "config",
        "localStorage",
        "getItem",
        "_settings",
        "name",
        "default",
        "app",
        "user",
        "newConfig",
        "baseConfig",
        "defaultConfig",
        "appConfig",
        "setItem",
        "__SConfigAdapter"
    ],
    "mappings": ";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;AAkBAA,MAAM,CAACC,OAAP;AAAA;;AAAA;;AACE,4BAAYC,QAAZ,EAA2B;AAAA,QAAfA,QAAe;AAAfA,MAAAA,QAAe,GAAJ,EAAI;AAAA;;AAAA;;AAAA,6BACnBA,QADmB;AAE1B;;AAHH;AAAA;AAAA,2BAKS;AACL;AACA,UAAMC,MAAM,GAAG,oBAAQC,YAAY,CAACC,OAAb,CAAqB,KAAKC,SAAL,CAAeC,IAApC,CAAR,KAAsD,EAArE,CAFK,CAIL;;AACA,aAAO,wBACLJ,MAAM,CAACK,OAAP,IAAkB,EADb,EAELL,MAAM,CAACM,GAAP,IAAc,EAFT,EAGLN,MAAM,CAACO,IAAP,IAAe,EAHV,CAAP;AAKD;AAfH;AAAA;AAAA,yBAiBOC,SAjBP,EAiBuB;AAAA,UAAhBA,SAAgB;AAAhBA,QAAAA,SAAgB,GAAJ,EAAI;AAAA;;AACnB,UAAMC,UAAU,GAAG,wBACjB,KAAKN,SAAL,CAAeO,aADE,EAEjB,KAAKP,SAAL,CAAeQ,SAFE,CAAnB;AAIAV,MAAAA,YAAY,CAACW,OAAb,CACE,KAAKT,SAAL,CAAeC,IADjB,EAEE,uBAAW;AACTC,QAAAA,OAAO,EAAE,KAAKF,SAAL,CAAeO,aADf;AAETJ,QAAAA,GAAG,EAAE,KAAKH,SAAL,CAAeQ,SAFX;AAGTJ,QAAAA,IAAI,EAAE,mBAAOE,UAAP,EAAmBD,SAAnB;AAHG,OAAX,CAFF;AAQA,aAAO,IAAP;AACD;AA/BH;;AAAA;AAAA,EAAgDK,wBAAhD",
    "sourcesContent": [
        "import __set from '../../object/set';\nimport __get from '../../object/get';\nimport __toString from '../../string/toString';\nimport __parse from '../../string/parse';\nimport __stringifyObject from 'stringify-object';\nimport __deepMerge from '../../object/deepMerge';\nimport __SConfigAdapter from './SConfigAdapter';\nimport __diff from '../../object/diff';\n\n/**\n * @name                  SConfigLsAdapter\n * @namespace           sugar.js.config.adapters\n * @type                  Class\n *\n * This Local Storage adapter for the SConfig class let you define a name for your config and then you can just\n * let the SConfig class do the work for you...\n *\n * @param                   {Object}                    [settings={}]         The adapter settings that let you work with the good data storage solution...\n * - name (null) {String}: This specify the config name that you want to use.\n * - defaultConfig ({}) {Object}: This specify the \"default\" config that you want.\n * - appConfig ({}) {Object}: This specify the \"application\" level config that you want.\n * - userConfig ({}) {Object}: This specify the \"user\" level config that you want. It's usually this config that is updated\n * @return                  {Promise}                                         A promise that will be resolved once the data has been getted/saved...\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\n\nmodule.exports = class SConfigLsAdapter extends __SConfigAdapter {\n  constructor(settings = {}) {\n    super(settings);\n  }\n\n  load() {\n    // try to get the config from the localstorage\n    const config = __parse(localStorage.getItem(this._settings.name)) || {};\n\n    // mix the configs and save them in the instance\n    return __deepMerge(\n      config.default || {},\n      config.app || {},\n      config.user || {}\n    );\n  }\n\n  save(newConfig = {}) {\n    const baseConfig = __deepMerge(\n      this._settings.defaultConfig,\n      this._settings.appConfig\n    );\n    localStorage.setItem(\n      this._settings.name,\n      __toString({\n        default: this._settings.defaultConfig,\n        app: this._settings.appConfig,\n        user: __diff(baseConfig, newConfig)\n      })\n    );\n    return true;\n  }\n};\n"
    ]
}
{
    "version": 3,
    "sources": [
        "SInterface.js"
    ],
    "names": [
        "SInterface",
        "instance",
        "settings",
        "name",
        "constructor",
        "instanceType",
        "customClass",
        "__SError",
        "issueObj",
        "$issues",
        "implementationValidationResult",
        "extendsStack",
        "__interfaces",
        "Array",
        "isArray",
        "indexOf",
        "extendsArray",
        "forEach",
        "cls",
        "setTimeout",
        "implementsArray",
        "implements",
        "definitionObj",
        "throw",
        "interface",
        "array",
        "length",
        "Object",
        "defineProperty",
        "enumerable",
        "writable",
        "value",
        "push",
        "outputString",
        "return",
        "toLowerCase",
        "apply",
        "bind",
        "object",
        "duplicate",
        "completedObject",
        "complete",
        "applyAndThrow",
        "interfaces",
        "SInterfaceImplementsMiddleClass",
        "args",
        "Interface",
        "data",
        "argsObj",
        "assign",
        "keys",
        "argString",
        "argDefinitionObj",
        "undefined",
        "default",
        "resultObj",
        "headerString",
        "_outputHeaderString",
        "string",
        "console",
        "log",
        "title",
        "description",
        "join",
        "extendsObj",
        "ExtendedInterface"
    ],
    "mappings": "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",
    "sourcesContent": [
        "import __getExtendsStack from '../class/getExtendsStack';\nimport __argsToObject from '../cli/argsToObject';\nimport __SError from '../error/SError';\nimport __isClass from '../is/class';\nimport __deepize from '../object/deepize';\nimport __deepMerge from '../object/deepMerge';\nimport __trimLines from '../string/trimLines';\nimport __validateObject from '../validation/object/validateObject';\nimport __validateObjectOutputString from '../validation/object/validateObjectOutputString';\nimport __typeof from '../value/typeof';\nimport __toString from '../string/toString';\nimport __set from '../object/set';\n\n/**\n * @name              SInterface\n * @namespace           sugar.js.class\n * @type              Function\n *\n * This class allows you to define an interface that you can later apply to an object instance\n * to make sure this particular instance has all the features, methods and properties you want.\n *\n * @example         js\n * import SInterface from '@coffeekraken/sugar/js/class/SInterface';\n * class MyCoolInterface extends SInterface {\n *    static definitionObj = {\n *      title: {\n *        type: 'String',\n *        required: true\n *      },\n *      doSomething: {\n *        type: 'Function',\n *        required: true\n *      }\n *    }\n * }\n *\n * class MyClass {\n *    constructor() {\n *      MyCoolInterface.apply(this);\n *    }\n * }\n *\n * const myObject = new MyClass();\n *\n * @since       2.0.0\n * @author    Olivier Bossel <olivier.bossel@gmail.com>\n */\nexport default class SInterface {\n  /**\n   * @name              settings\n   * @type              Object\n   * @static\n   *\n   * Store the default settings that will be passed to the ```apply``` function\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  static settings = {\n    throw: true,\n    return: 'String'\n  };\n\n  /**\n   * @name              apply\n   * @type              Function\n   * @static\n   *\n   * This static method allows you to apply the interface on an object instance.\n   * By default, if something is wrong in your class implementation, an error with the\n   * description of what's wrong will be thrown. You can change that behavior if you prefer having\n   * true returned when all is ok, or a string describing the current issue by specify the \"settings.throw\" property to false.\n   *\n   * @param       {Object}                instance              The instance to apply the interface on\n   * @param       {Object}               [settings={}]         An object of settings to configure your apply process\n   * - throw (false) {Boolean}: Specify if you want that an error is throwned if the test does not pass\n   * - return (String) {String}: Specify in which return you want the result back. Can be \"String\" of \"Object\".\n   * @return      {Boolean|String}                              true if all is ok, a string describing the issue if not...\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  static apply(instance, settings = {}) {\n    settings = __deepMerge(this.settings, settings);\n\n    // name\n    if (!settings.name) {\n      settings.name = instance.constructor.name || instance.name;\n    }\n\n    const instanceType = __typeof(instance, {\n      customClass: false\n    });\n    if (instanceType !== 'Object' && instanceType !== 'Class') {\n      throw new __SError(\n        `Sorry but the \"<yellow>instance</yellow>\" argument of the \"<cyan>SInterface.apply</cyan>\" static method have to be an <green>Object</green> and you've passed an <red>${__typeof(\n          instance\n        )}</red>...`\n      );\n    }\n\n    let issueObj = {\n      $issues: []\n    };\n    let implementationValidationResult;\n\n    const extendsStack = __getExtendsStack(instance);\n\n    // check if the passed instance base class already implements this insterface\n    if (\n      instance.constructor.__interfaces &&\n      Array.isArray(instance.constructor.__interfaces)\n    ) {\n      if (instance.constructor.__interfaces.indexOf(this) !== -1) return true;\n    } else if (instance.__interfaces && Array.isArray(instance.__interfaces)) {\n      if (instance.__interfaces.indexOf(this) !== -1) return true;\n    }\n\n    // extends array\n    if (this.extendsArray && Array.isArray(this.extendsArray)) {\n      this.extendsArray.forEach((cls) => {\n        if (extendsStack.indexOf(cls) === -1) {\n          setTimeout(() => {\n            throw new __SError(\n              `Your class|instance \"<yellow>${\n                instance.name || instance.constructor.name\n              }</yellow>\" that implements the \"<cyan>${\n                this.name\n              }</cyan>\" interface has to extend the \"<green>${cls}</green>\" class...`\n            );\n          });\n        }\n      });\n    }\n\n    // implements array\n    if (this.implementsArray && Array.isArray(this.implementsArray)) {\n      this.implements(instance, this.implementsArray, settings);\n    }\n\n    // definition object\n    if (this.definitionObj) {\n      implementationValidationResult = __validateObject(\n        instance,\n        this.definitionObj,\n        {\n          throw: false,\n          name: settings.name,\n          interface: settings.interface\n        }\n      );\n      if (implementationValidationResult !== true) {\n        issueObj = __deepMerge(issueObj, implementationValidationResult, {\n          array: true\n        });\n      }\n    }\n\n    if (!issueObj.$issues.length) {\n      // save on the instance and the constructor that we implements this interface correctly\n      if (!instance.__interfaces) {\n        Object.defineProperty(instance, '__interfaces', {\n          enumerable: false,\n          writable: true,\n          value: [this]\n        });\n      } else if (Array.isArray(instance.__interfaces)) {\n        instance.__interfaces.push(this);\n      }\n      if (!instance.constructor.__interfaces) {\n        Object.defineProperty(instance.constructor, '__interfaces', {\n          enumerable: false,\n          writable: true,\n          value: [this]\n        });\n      } else if (Array.isArray(instance.constructor.__interfaces)) {\n        instance.constructor.__interfaces.push(this);\n      }\n\n      return true;\n    }\n\n    if (settings.throw) {\n      throw new __SError(this.outputString(issueObj, settings));\n    }\n\n    switch (settings.return.toLowerCase()) {\n      case 'object':\n        return issueObj;\n      case 'string':\n      default:\n        return SInterface.outputString(issueObj, settings);\n    }\n  }\n\n  /**\n   * @name          applyAndThrow\n   * @type          Function\n   * @static\n   *\n   * This static method do the exact same as the ```apply``` one but will throw an error if something is wrong...\n   *\n   * @param       {Object}                instance              The instance to apply the interface on\n   * @return      {Boolean}                                     Return true is all is ok. Throw an error otherwise\n   *\n   * @since       2.0.0\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  static applyAndThrow(instance, settings = {}) {\n    const apply = SInterface.apply.bind(this);\n    return apply(instance, {\n      ...settings,\n      throw: true\n    });\n  }\n\n  /**\n   * @name          applyAndComplete\n   * @type          Function\n   * @static\n   *\n   * This static method allows you to complete the passed data object and apply the interface\n   * directly. If something goes wrong, it will throw an error, otherwise, return the\n   * completed object\n   *\n   * @param       {Object}      object        The object on which to apply the interface and to complete\n   * @param       {Object}      [settings={}]     An object of settings to configure your process\n   * - duplicate (false) {Boolean}: Specify if you want to get back a new object or the passed one completed\n   *\n   * @since       2.0.0\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  static applyAndComplete(object, settings = {}) {\n    settings = __deepMerge(\n      {\n        duplicate: false\n      },\n      settings\n    );\n    const completedObject = this.complete(object, settings);\n    this.applyAndThrow(completedObject, settings);\n    return completedObject;\n  }\n\n  /**\n   * @name          implements\n   * @type          Function\n   * @static\n   *\n   * This static method allows you to tell that a particular instance of a class implements\n   * one or more interfaces. This allows you after to specify the property \"implements\" with an array\n   * of SInterface classes that you want your property to implements\n   *\n   * @param         {SInterface}          ...interfaces           The interfaces you want to implements\n   *\n   * @since         2.0.0\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  static implements(instance, interfaces = null, settings = {}) {\n    if (interfaces === null) interfaces = [this];\n    if (!Array.isArray(interfaces)) interfaces = [interfaces];\n\n    if (__isClass(instance)) {\n      // return instance;\n      class SInterfaceImplementsMiddleClass extends instance {\n        constructor(...args) {\n          super(...args);\n          SInterface.implements(this, interfaces, settings);\n        }\n      }\n      Object.defineProperty(SInterfaceImplementsMiddleClass, 'name', {\n        value: instance.name\n      });\n\n      // if (settings.applyOnStatic) {\n      //   const staticFns = Object.getOwnPropertyNames(instance).filter(\n      //     (prop) => typeof instance[prop] === 'function'\n      //   );\n      //   staticFns.forEach((fnName) => {\n      //     SInterfaceImplementsMiddleClass[fnName] = function (...args) {\n      //       interfaces.forEach((Interface) => {\n      //         Interface.apply(SInterfaceImplementsMiddleClass, {\n      //           ...settings,\n      //           interface: Interface.name\n      //         });\n      //       });\n\n      //       return instance[fnName](...args);\n      //     };\n      //   });\n      // }\n\n      return SInterfaceImplementsMiddleClass;\n    }\n\n    // make sure the instance has all the interfaces requirements\n    interfaces.forEach((Interface) => {\n      Interface.apply(instance, {\n        ...settings,\n        interface: Interface.name\n      });\n    });\n  }\n\n  /**\n   * @name          complete\n   * @type          Function\n   * @static\n   *\n   * This static method allows you to pass an object to complete with the \"default\" values\n   * of the definition object if needed\n   *\n   * @param         {Object}            data              The data object to complete\n   * @return        {Object}                              The completed data object\n   *\n   * @since         2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  static complete(data, settings = {}) {\n    settings = __deepMerge(\n      {\n        duplicate: false\n      },\n      settings\n    );\n\n    let argsObj = data;\n    if (settings.duplicate) {\n      argsObj = Object.assign({}, data);\n    }\n\n    // loop on all the arguments\n    Object.keys(this.definitionObj).forEach((argString) => {\n      const argDefinitionObj = this.definitionObj[argString];\n\n      // check if we have an argument passed in the properties\n      if (\n        argsObj[argString] === undefined &&\n        argDefinitionObj.default !== undefined\n      ) {\n        __set(argsObj, argString, argDefinitionObj.default);\n      }\n    });\n\n    return argsObj;\n  }\n\n  /**\n   * @name          outputString\n   * @type          Function\n   * @static\n   *\n   * This static method allows you to get the ```apply``` result\n   * in a readable way.\n   *\n   * @param         {Object}               resultObj               The resulting object coming from the ```apply``` method\n   * @return        {String}                                    The string version of the result\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  static outputString(resultObj, settings = {}) {\n    const headerString = this._outputHeaderString(settings);\n    const string = __validateObjectOutputString(resultObj, settings);\n    return __trimLines(`${headerString}${string}`);\n  }\n\n  /**\n   * @name          output\n   * @type          Function\n   * @static\n   *\n   * This static method allows you to console.log the ```apply``` result\n   * in a readable way.\n   *\n   * @param         {Object}               resultObj               The resulting object coming from the ```apply``` method\n   * @return        {String}                                    The string version of the result\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  static output(resultObj, settings = {}) {\n    const string = this.outputString(resultObj, settings);\n    console.log(string);\n  }\n\n  /**\n   * @name                _outputHeaderString\n   * @type                Function\n   * @private\n   *\n   * This method simply generate the output header depending on the passed settings like:\n   * - title: The title you want to display\n   * - description: A description to explain a little bit more the issue\n   *\n   * @since           2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  static _outputHeaderString(settings = {}) {\n    let array = [];\n    if (settings.title) {\n      array.push(`<red><underline>${settings.title}</underline></red>`);\n      array.push(' ');\n    }\n    if (settings.description) {\n      array.push(`${settings.description}`);\n      array.push(' ');\n    }\n\n    return array.join('\\n');\n  }\n\n  /**\n   * @name                parse\n   * @type                Function\n   * @static\n   *\n   * This method take a string like \"-v 'something' --temp\" and convert it into an object of arguments\n   * depending on the definition object of this interface\n   *\n   * @param       {String}            string            The string to parse\n   * @return      {Object}                              The object of arguments values\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  static parse(string) {\n    const args = __argsToObject(string, this.definitionObj);\n    return args;\n  }\n\n  /**\n   * @name                parseAndComplete\n   * @type                Function\n   * @static\n   *\n   * This method take a string like \"-v 'something' --temp\" and convert it into an object of arguments\n   * depending on the definition object of this interface.\n   * It will also complete the data object obtained with the \"default\" values if needed\n   *\n   * @param       {String}            string            The string to parse\n   * @return      {Object}                              The object of arguments values\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  static parseAndComplete(string) {\n    let args = __argsToObject(string, this.definitionObj);\n    args = this.complete(args);\n    return args;\n  }\n\n  /**\n   * @name          extends\n   * @type          Function\n   * @static\n   *\n   * This static method allows you to start from this particular interface and to extends it\n   * by passing an object containing these properties:\n   * - definitionObj ({}) {Object}: An object to extends the static definitionObj one\n   * - settings ({}) {Object}: An object of settings to extends the static settings one\n   * @param     {Object}      extendsObj      An object to extends the static ones of the duplicated interface\n   * @return    {SInterface}                  A new SInterface class based on the extended one\n   *\n   * @since     2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  static extends(extendsObj) {\n    class ExtendedInterface extends this {}\n    ExtendedInterface.definitionObj = __deepMerge(\n      ExtendedInterface.definitionObj,\n      extendsObj.definitionObj || {}\n    );\n    ExtendedInterface.settings = __deepMerge(\n      ExtendedInterface.settings,\n      extendsObj.settings || {}\n    );\n    return ExtendedInterface;\n  }\n}\n"
    ]
}
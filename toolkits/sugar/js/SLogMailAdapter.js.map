{
    "version": 3,
    "sources": [
        "SLogMailAdapter.js"
    ],
    "names": [
        "SLogMailAdapter",
        "settings",
        "_settings",
        "subject",
        "body",
        "metas",
        "message",
        "level",
        "Promise",
        "resolve",
        "reject",
        "imageData",
        "__isNode",
        "canvas",
        "html2canvas",
        "document",
        "toDataURL",
        "list",
        "Object",
        "keys",
        "forEach",
        "metaName",
        "push",
        "replace",
        "join",
        "newobj",
        "key",
        "indexOf",
        "toLowerCase",
        "charAt",
        "toUpperCase",
        "slice",
        "_set",
        "Body",
        "Subject",
        "name",
        "data",
        "Email",
        "send",
        "then",
        "console",
        "log",
        "catch",
        "error",
        "e"
    ],
    "mappings": "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",
    "sourcesContent": [
        "import __deepMerge from '../../object/deepMerge';\nimport __isNode from '../../is/node';\nimport Email from './vendors/smtp.js';\nimport __mailHtmlPreset from '../htmlPresets/mail';\n\n// TODO finish the dev and make tests...\n\n/**\n * @name                    SLogMailAdapter\n * @namespace           sugar.js.log\n * @type                    Class\n *\n * This class allows you to log your messages, errors, etc... easily through some adapters that cover some targets like \"console\" of course,\n * \"mail\", \"slack\", etc...\n *\n * @example               js\n * import SLog from '@coffeekraken/sugar/js/log/SLog';\n * import SLogMailAdapter from '@coffeekraken/sugar/js/log/adapters/SLogMailAdapter';\n * const logger = new SLog({\n *    adapters: {\n *      mail: new SLogMailAdapter()\n *    }\n * });\n * logger.log('Something cool happend...');\n *\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default class SLogMailAdapter {\n  /**\n   * @name          _settings\n   * @type          Object\n   * @private\n   *\n   * Store this instance settings\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _settings = {};\n\n  /**\n   * @name          constructor\n   * @type          Function\n   *\n   * Constructor\n   *\n   * @param         {Object}        [settings={}]           The settings object to configure your SLogMailAdapter instance. Here's the settings available:\n   * - host (null) {String}: Your smtp server hostname\n   * - username (null) {String}: Your smtp username if needed\n   * - password (null) {String}: Your smtp password if needed\n   * - secureToken (null) {String}: An SmtpJS secure token to avoid delivering your password online\n   * - to (null) {String}: The email address where you want to send the logs\n   * - from (null) {String}: The email address from which you want to send the logs\n   * - subject ('[level] sugar.js.log') {String}: The mail title. You can use the [level] placeholder to be replaced with the actual log level\n   * - body ('[content]') {String}: The mail body. You can use the [content] placeholder to be replaced with the actual log\n   * - metas ({}) {Object}: An object that will be transformed into a list and place inside the mail [content]\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(settings = {}) {\n    // extend settings\n    this._settings = __deepMerge(\n      {\n        subject: '[level] sugar.js.log',\n        body: '[content]',\n        metas: {}\n      },\n      settings\n    );\n  }\n\n  /**\n   * @name            log\n   * @type            Function\n   * @async\n   *\n   * This is the main method of the logger. It actually log the message passed as parameter to the console\n   *\n   * @param         {Mixed}          message            The message to log\n   * @param         {String}         level              The log level. Can be \"log\", \"info\", \"error\", \"debug\" or \"warn\"\n   * @return        {Promise}                           A promise that will be resolved once the message has been logged correctly\n   *\n   * @example         js\n   * await consoleAdapter.log('hello world');\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  async log(message, level) {\n    return new Promise(async (resolve, reject) => {\n      let imageData = null;\n      if (!__isNode) {\n        const canvas = await html2canvas(document.body);\n        imageData = canvas.toDataURL('image/jpeg');\n      }\n\n      let list = [];\n      Object.keys(this._settings.metas).forEach((metaName) => {\n        list.push(\n          `<li><strong>${metaName}</strong>: ${this._settings.metas[metaName]}</li>`\n        );\n      });\n\n      const body = __mailHtmlPreset(\n        this._settings.body.replace(\n          '[content]',\n          `\n        ${message}\n        <br /><br />\n        ${list.join('<br />')}\n      `\n        )\n      );\n      const subject = this._settings.subject.replace('[level]', level);\n\n      let keys = Object.keys(this._settings);\n      let newobj = {};\n      keys.forEach((key) => {\n        if (\n          ['host', 'username', 'password', 'to', 'from', 'securetoken'].indexOf(\n            key.toLowerCase()\n          ) === -1\n        )\n          return;\n        newobj[key.charAt(0).toUpperCase() + key.slice(1)] = this._settings[\n          key\n        ];\n      });\n\n      try {\n        const _set = {\n          Body: body,\n          Subject: subject,\n          ...newobj\n        };\n        if (imageData) {\n          _set['Attachments'] = [\n            {\n              name: `screenshot.jpg`,\n              data: imageData\n            }\n          ];\n        }\n        delete _set.metas;\n\n        Email.send(_set)\n          .then((message) => {\n            console.log('ME', message);\n            resolve(message);\n          })\n          .catch((error) => {\n            console.log('ERROR', error);\n            reject(error);\n          });\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n}\n"
    ]
}
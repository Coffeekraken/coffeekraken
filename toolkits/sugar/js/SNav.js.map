{
    "version": 3,
    "sources": [
        "SNav.js"
    ],
    "names": [
        "SNav",
        "id",
        "text",
        "itemsArray",
        "settings",
        "_settings",
        "markdown",
        "indent",
        "html",
        "ol",
        "class",
        "ul",
        "child_link",
        "child",
        "_id",
        "_text",
        "_promise",
        "__SPromise",
        "forEach",
        "item",
        "addItem",
        "i",
        "getItem",
        "_itemsArray",
        "indexOf",
        "from",
        "__SNavItem",
        "itemArray",
        "filter",
        "items",
        "_sNav",
        "trigger",
        "idx",
        "splice",
        "sNavItem",
        "length",
        "push",
        "repeat",
        "toMarkdown",
        "join",
        "ordered",
        "toHtml"
    ],
    "mappings": "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",
    "sourcesContent": [
        "import __deepMerge from '../object/deepMerge';\nimport __SNavItem from './SNavItem';\nimport __pretty from 'pretty';\nimport __SPromise from '../promise/SPromise';\n\n/**\n * @name              SNav\n * @namespace           sugar.js.nav\n * @type              Class\n *\n * This class represent a navigation tree that you can manage, add items, and display in multiple formats like html, markdown, and more to come\n *\n * @param       {Array<SNav|SNavItem>}          itemsArray            An array of SNav or SNavItem instance representing a navigation item\n * @param       {Object}Â                [settings={}]       A settings object to configure your nav tree\n *\n * @example         js\n * import SNav from '@coffeekraken/sugar/js/nav/SNav';\n * import SNavItem from '@coffeekraken/sugar/js/SNavItem';\n * const myNav = new SNav([\n *    new SNavItem('myCoolItem', 'Something cool', '#anchorLink')\n * ]);\n *\n * @since         2.0.0\n * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default class SNav {\n  /**\n   * @name          _settings\n   * @type          Object\n   * @private\n   *\n   * Store the settings object\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _settings = {};\n\n  /**\n   * @name          _id\n   * @type          String\n   * @private\n   *\n   * Store the uniqid of this navigation\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _id = {};\n\n  /**\n   * @name          _text\n   * @type          String\n   * @private\n   *\n   * Store the navigation text that can be displayed or not\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _text = {};\n\n  /**\n   * @name          _itemsArray\n   * @type          Array\n   * @private\n   *\n   * Store the array of SNavItems instances that will compose the navigation\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _itemsArray = [];\n\n  /**\n   * @name        constructor\n   * @type        Function\n   * @constructor\n   *\n   * Constructor\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(id, text, itemsArray, settings = {}) {\n    this._settings = __deepMerge(\n      {\n        markdown: {\n          indent: 0\n        },\n        html: {\n          indent: 1,\n          ol: {\n            class: 's-nav s-nav--ordered'\n          },\n          ul: {\n            class: 's-nav s-nav--unordered'\n          },\n          child_link: {\n            class: 's-nav__child-link'\n          },\n          child: {\n            class: 's-nav__child'\n          }\n        }\n      },\n      settings\n    );\n    this._id = id;\n    this._text = text;\n\n    // setup the promise\n    this._promise = new __SPromise();\n\n    // add the items\n    itemsArray.forEach((item) => {\n      this.addItem(item);\n    });\n  }\n\n  /**\n   * @name        promise\n   * @type        SPromise\n   * @get\n   *\n   * Access the SPromise instance on which you can subscribe for these events:\n   * - item.add: Triggered when an item has been added. The item is passed with the event\n   * - item.remove: Triggered when an item has been removed. The item is passed with the event\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get promise() {\n    return this._promise;\n  }\n\n  /**\n   * @name        id\n   * @type        String\n   * @get\n   *\n   * Access the navigation id\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get id() {\n    return this._id;\n  }\n\n  /**\n   * @name        text\n   * @type        String\n   * @get\n   *\n   * Access the navigation text\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get text() {\n    return this._text;\n  }\n\n  /**\n   * @name        items\n   * @type        Array<SNavItem>\n   * @get\n   *\n   * Access the registered nav items\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get items() {\n    return this._itemsArray;\n  }\n\n  /**\n   * @name        getItemIndex\n   * @type        Function\n   *\n   * This method allows you to get the passed item instance index in the navigation\n   *\n   * @param       {SNavItem}          item          The item instance you want the index for\n   * @return      {Number}Â                          The current index of the item in the navigation\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  getItemIndex(item) {\n    const i = this.getItem(item);\n    return this._itemsArray.indexOf(i) + 1;\n  }\n\n  /**\n   * @name        getItem\n   * @type        Function\n   *\n   * This method allows you to get an item using either an index like \"0\", \"1\", etc... or a uniqid String\n   *\n   * @param       {String|Number}           from            The parameter you want to get an index with\n   * @return      {SNavItem}                                The found nav item, or false if not found\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  getItem(from) {\n    if (from instanceof __SNavItem) return from;\n    if (typeof from === 'string') {\n      const itemArray = this._itemsArray.filter((item) => {\n        return item.id === from;\n      });\n      return itemArray[0] || false;\n    } else if (typeof from === 'number') {\n      return this._itemsArray[from] || false;\n    }\n    return false;\n  }\n\n  /**\n   * @name        addItem\n   * @type        Function\n   *\n   * This method is used to add an SNavItem instance to the navigation\n   *\n   * @param       {SNavItem}        ...items          One or more items to add\n   * @return      {SNav}                              The nav instance to maintain chainability\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  addItem(...items) {\n    items.forEach((item) => {\n      item._sNav = this;\n      this._promise.trigger('item.add', item);\n    });\n    this._itemsArray = [...this._itemsArray, ...items];\n    return this;\n  }\n\n  /**\n   * @name        removeItem\n   * @type        Function\n   *\n   * THis method is used to remove an item either by specifying his uniqid, his index in the nav items array or directly the SNavItem instance to remove\n   *\n   * @param       {String|Number|SNavItem}        ...items          The items identifier to remove. Can be the item uniqid, the index in the nav or the SNavItem instance directly\n   * @return      {SNav}                                            The nav instance to maintain chainability\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  removeItem(...items) {\n    items.forEach((item) => {\n      if (item instanceof __SNavItem) {\n        const idx = this._itemsArray.indexOf(item);\n        if (idx === -1) return;\n        this._promise.trigger('item.remove', item);\n        item._sNav = null;\n        this._itemsArray.splice(idx, 1);\n      } else if (typeof item === 'string') {\n        const itemArray = this._itemsArray.filter((sNavItem) => {\n          return sNavItem.id === item;\n        });\n        if (!itemArray || !itemArray.length) return;\n        this._promise.trigger('item.remove', itemArray[0]);\n        itemArray[0]._sNav = null;\n        this._itemsArray.splice(this._itemsArray.indexOf(itemArray[0]), 1);\n      } else if (typeof item === 'number') {\n        if (item > this._itemsArray.length - 1) return;\n        this._promise.trigger('item.remove', this._itemsArray[item]);\n        this._itemsArray[item]._sNav = null;\n        this._itemsArray.splice(item, 1);\n      }\n    });\n    return this;\n  }\n\n  /**\n   * @name          toMarkdown\n   * @type          Function\n   *\n   * This method allows you to get a markdown version of the navigation\n   *\n   * @param       {Object}Â        [settings=settings.markdown]        A settings object to configure your markdown conversion:\n   * // TODO: list options\n   * @return      {String}Â                            The string version of the navigation\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  toMarkdown(settings = {}) {\n    settings = __deepMerge(this._settings.markdown, settings);\n\n    const itemsArray = [];\n    this._itemsArray.forEach((sNavItem) => {\n      if (sNavItem instanceof __SNavItem) {\n        itemsArray.push(\n          '\\t'.repeat(settings.indent) + sNavItem.toMarkdown(settings)\n        );\n      } else if (sNavItem instanceof SNav) {\n        itemsArray.push(\n          sNavItem.toMarkdown({\n            ...settings,\n            indent: settings.indent + 1\n          })\n        );\n      }\n    });\n\n    return itemsArray.join('\\n');\n  }\n\n  /**\n   * @name          toHtml\n   * @type          Function\n   *\n   * This method allows you to get an HTML version of the navigation\n   *\n   * @param       {Object}Â        [settings=settings.html]        A settings object to configure your html conversion:\n   * // TODO: list options\n   * @return      {String}Â                            The string version of the navigation\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  toHtml(settings = {}) {\n    settings = __deepMerge(this._settings.html, settings);\n\n    const itemsArray = [\n      settings.ordered\n        ? `<ol id=\"${this.id}\" class=\"${settings.ol.class}\">`\n        : `<ul id=\"${this.id}\" class=\"${settings.ul.class}\">`\n    ];\n    this._itemsArray.forEach((sNavItem) => {\n      if (sNavItem instanceof __SNavItem) {\n        itemsArray.push(\n          '\\t'.repeat(settings.indent) + sNavItem.toHtml(settings)\n        );\n      } else if (sNavItem instanceof SNav) {\n        itemsArray.push(\n          `${'\\t'.repeat(settings.indent)}<li class=\"${settings.child.class}\">\n            <a href=\"#${sNavItem.id}\" class=\"${settings.child_link.class}\">${\n            sNavItem.text\n          }</a>\n${sNavItem.toHtml({\n  ...settings,\n  indent: settings.indent + 1\n})}\n${'\\t'.repeat(settings.indent)}</li>`\n        );\n      }\n    });\n\n    itemsArray.push(settings.ordered ? `</ol>` : `</ul>`);\n\n    return __pretty(itemsArray.join('\\n'));\n  }\n}\n"
    ]
}
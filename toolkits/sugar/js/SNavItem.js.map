{
    "version": 3,
    "sources": [
        "SNavItem.js"
    ],
    "names": [
        "SNavItem",
        "id",
        "text",
        "action",
        "settings",
        "_settings",
        "markdown",
        "ordered",
        "html",
        "li",
        "class",
        "a",
        "_id",
        "_text",
        "_action",
        "index",
        "Error",
        "bullet",
        "target",
        "_sNav",
        "getItemIndex"
    ],
    "mappings": "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",
    "sourcesContent": [
        "import __SNav from './SNav';\nimport __deepMerge from '../object/deepMerge';\n\n/**\n * @name              SNavItem\n * @namespace           sugar.js.nav\n * @type              Class\n *\n * This class represent a navigation item with some properties like the actions, the id, the text, etc...\n *\n * @param       {String}                id                  A uniqid for this nav item\n * @param       {String}                text                The text of the item\n * @param       {String}                action              THe action to do on click. Can be a one of these options:\n * - A standard link like \"http://...\"\n * - A mailto link like \"mailto:olivier.bossel@gmail.com\"\n * - A scroll link like \"scroll:#something\"\n * - Others options coming...\n * @param       {Object}                [settings={}]       A settings object to configure your nav tree\n *\n * @example         js\n * import SNavItem from '@coffeekraken/sugar/js/nav/SNavItem';\n * import SNavItem from '@coffeekraken/sugar/js/SNavItem';\n * const myNav = new SNav([\n *    new SNavItem('myCoolItem', 'Something cool', '#anchorLink')\n * ]);\n *\n * @since         2.0.0\n * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default class SNavItem {\n  /**\n   * @name          _settings\n   * @type          Object\n   * @private\n   *\n   * Store the settings object\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _settings = {};\n\n  /**\n   * @name          _id\n   * @type          String\n   * @private\n   *\n   * Store the id of the nav item\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _id = null;\n\n  /**\n   * @name          _text\n   * @type          String\n   * @private\n   *\n   * Store the text of the nav item\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _text = {};\n\n  /**\n   * @name          _action\n   * @type          String\n   * @private\n   *\n   * Store the action of the nav item\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _action = {};\n\n  /**\n   * @name          _sNav\n   * @type          SNav\n   * @private\n   *\n   * Store the SNav instance in which has been added this nav item\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _sNav = null;\n\n  /**\n   * @name        constructor\n   * @type        Function\n   * @constructor\n   *\n   * Constructor\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(id, text, action, settings = {}) {\n    this._settings = __deepMerge(\n      {\n        markdown: {\n          ordered: false\n        },\n        html: {\n          li: {\n            class: 's-nav__item'\n          },\n          a: {\n            class: 's-nav__item-link'\n          }\n        }\n      },\n      settings\n    );\n    this._id = id;\n    this._text = text;\n    this._action = action;\n  }\n\n  /**\n   * @name          id\n   * @type          String\n   * @get\n   *\n   * Access the navigation item id\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get id() {\n    return this._id;\n  }\n\n  /**\n   * @name          index\n   * @type          String\n   * @get\n   *\n   * Access the navigation item index in the navigation.\n   * Return -1 if not in a navigation\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get index() {\n    if (!this._sNav) return -1;\n    return this._sNav.getItemIndex(this);\n  }\n\n  /**\n   * @name          text\n   * @type          String\n   * @get\n   *\n   * Access the navigation item text\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get text() {\n    return this._text;\n  }\n\n  /**\n   * @name          action\n   * @type          String\n   * @get\n   *\n   * Access the navigation item action\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get action() {\n    return this._action;\n  }\n\n  /**\n   * @name          target\n   * @type          String\n   * @get\n   *\n   * Access the navigation item target\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get target() {\n    return this._settings.target;\n  }\n\n  /**\n   * @name          toMarkdown\n   * @type          Function\n   *\n   * This method transform the navigation item to a markdown string\n   *\n   * @param         {Object}        [settings=settings.markdown]        An object of settings to use for the conversion. Here's are the available settings:\n   * - ordered (false) {Boolean}: Specify if you want an ordered list\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  toMarkdown(settings = {}) {\n    settings = __deepMerge(this._settings.markdown, settings);\n\n    if (settings.ordered && this.index === -1) {\n      throw new Error(\n        `You want an ordered SNavItem markdown list but this SNavItem \"${this.id}\" does not belong to any SNav instance...`\n      );\n    }\n\n    const bullet = settings.ordered ? this.index : '-';\n\n    let text = '';\n    if (this.action) {\n      text = `[${this.action}](${this.text || '...'})`;\n    } else {\n      text = this.text || '...';\n    }\n\n    return `${bullet} ${text}`;\n  }\n\n  /**\n   * @name          toHtml\n   * @type          Function\n   *\n   * This method transform the navigation item to an HTML string\n   *\n   * @param         {Object}        [settings=settings.html]        An object of settings to use for the conversion. Here's are the available settings:\n   * - ordered (false) {Boolean}: Specify if you want an ordered list\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  toHtml(settings = {}) {\n    settings = __deepMerge(this._settings.html, settings);\n\n    if (settings.ordered && this.index === -1) {\n      throw new Error(\n        `You want an ordered SNavItem HTML list but this SNavItem \"${this.id}\" does not belong to any SNav instance...`\n      );\n    }\n\n    let text = '';\n    if (this.action) {\n      text = `<li id=\"${this.id}\" class=\"${settings.li.class}\"><a href=\"${\n        this.action\n      }\" class=\"${settings.a.class}\" target=\"${this.target || '__self'}\">${\n        this.text || '...'\n      }</a></li>`;\n    } else {\n      text = `<li id=\"${this.id}\" class=\"${settings.li.class}\">${\n        this.text || '...'\n      }</li>`;\n    }\n\n    return `${text}`;\n  }\n}\n"
    ]
}
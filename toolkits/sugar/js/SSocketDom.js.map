{
    "version": 3,
    "sources": [
        "SSocketDom.js"
    ],
    "names": [
        "SSocketDom",
        "serverUrl",
        "settings",
        "node",
        "document",
        "body",
        "action",
        "events",
        "_serverUrl",
        "_settings",
        "_initSocketIo",
        "then",
        "registerEvent",
        "_eventInnerHtml",
        "_eventBody",
        "_eventContent",
        "_this",
        "_socket",
        "window",
        "io",
        "connect",
        "data",
        "$node",
        "querySelector",
        "innerHtml",
        "$content",
        "getElementById",
        "event",
        "emit",
        "handlerFn",
        "on",
        "d"
    ],
    "mappings": "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",
    "sourcesContent": [
        "import __appendScriptTag from '../dom/appendScriptTag';\nimport __innerHtml from '../dom/innerHtml';\n\n/**\n * @name            syncDom\n * @namespace           sugar.js.socket\n * @type            Function\n *\n * Simply connect to a backend socket.io server and listen for specifics messages from it to refresh automatically the DOM.\n * The messages that are listened are:\n * - 'SSocketDom.html': Used to send some html to \"inject/replace\" in the current page HTML\n * - 'SSocketDom.script': Used to add a script tag to the page\n * - 'SSocketDom.style': Used to add a style tag to the page\n */\nclass SSocketDom {\n  /**\n   * Server URL\n   * @type      String\n   */\n  _serverUrl = 'http://localhost:80';\n\n  /**\n   * Settings\n   * @type    Object\n   */\n  _settings = {\n    /**\n     * @name      settings.node\n     * @namespace           sugar.js.class\n     * @type        HTMLElement\n     *\n     * The root node where the html contents will be injected if no node is passed with the event\n     *\n     * @setting\n     * @default       document.body\n     */\n    node: document.body,\n\n    /**\n     * @name        settings.action\n     * @namespace           js class\n     * @type        String\n     *\n     * Specify which action will be executed if no one is passed with the event.\n     * It can be one of these:\n     * - 'append': Will append the HTML content to the existing one\n     * - 'replace': Will replace the HTML content with the new one\n     * - 'prepend': Will inject the HTML content before the existing one\n     *\n     * @setting\n     * @default     'replace'\n     */\n    action: 'replace',\n\n    /**\n     * @name          settings.events\n     * @namespace           sugar.js.class\n     * @type          Object\n     *\n     * Save the events scoped settings objects\n     *\n     * @setting\n     * @default     {}\n     */\n    events: {}\n  };\n\n  /**\n   * @constructor\n   * @param       {String}        serverUrl           The url to connect to the socket.io server\n   * @param       {Object}        [settings={}]       The settings to configure your SSocketDom instance\n   *\n   * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n   */\n  constructor(serverUrl, settings = {}) {\n    // save some params:\n    this._serverUrl = serverUrl;\n    this._settings = {\n      ...this._settings,\n      ...settings\n    };\n  }\n\n  /**\n   * Init the Socket connection\n   *\n   * @return      {Promise}               A promise that will be resolved when the connection is inited\n   *\n   * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n   */\n  init() {\n    // init the socket.io connection\n    return this._initSocketIo().then(() => {\n      // register the default events\n      this.registerEvent('innerHtml', this._eventInnerHtml);\n      // register the 'body' event\n      this.registerEvent('body', this._eventBody);\n      // register the 'content' event\n      this.registerEvent('content', this._eventContent);\n    });\n  }\n\n  /**\n   * Init socket.io\n   */\n  _initSocketIo() {\n    const _this = this;\n    // append the socket IO script:\n    return __appendScriptTag('/socket.io/socket.io.js').then(() => {\n      // init the socket.io connection\n      _this._socket = window.io.connect(this._serverUrl);\n    });\n  }\n\n  /**\n   * Handle the html event\n   *\n   * @param         {String}        data        The data passed with the event\n   * @param         {Object}        settings    The settings passed with the event\n   *\n   * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n   */\n  _eventInnerHtml(data, settings) {\n    // try to get the node inside the document\n    let $node = settings.node;\n    if (typeof $node === 'string') $node = document.querySelector($node);\n    // switch on the action to execute\n    switch (settings.action) {\n      case 'append':\n        __innerHtml($node, data, {\n          ...(settings.innerHtml || {}),\n          action: 'append'\n        });\n        break;\n      case 'replace':\n        __innerHtml($node, data, settings.innerHtml);\n        break;\n      case 'prepend':\n        __innerHtml($node, data, {\n          ...(settings.innerHtml || {}),\n          action: 'prepend'\n        });\n        break;\n    }\n  }\n\n  /**\n   * Handle the 'body' event\n   *\n   * @param         {String}          data        The data passed with the event\n   * @param         {Object}          settings    Tge settubgs passed with the event\n   *\n   * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n   */\n  _eventBody(data, settings) {\n    __innerHtml(document.body, data, settings.innerHtml || {});\n  }\n\n  /**\n   * Handle the 'content' event\n   *\n   * @param         {String}          data        The data passed with the event\n   * @param         {Object}          settings    Tge settubgs passed with the event\n   *\n   * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n   */\n  _eventContent(data, settings) {\n    let $content =\n      document.getElementById('content') || document.querySelector('[content]');\n    if (!$content) return;\n    __innerHtml($content, data, settings.innerHtml || {});\n  }\n\n  /**\n   * @name          emit\n   * @namespace           sugar.js.class\n   * @type          Function\n   *\n   * Emit an event with an object containing some values to pass to the server\n   *\n   * @param         {String}        event         The event name that you want to emit to the server. It will be prefixed by 'SSocketDom.'\n   * @param         {Object}        [data={}]      The data that you want to pass to the server with the event\n   * @return        {SSocketDom}                  The SSocketDom instance to maintain chainability\n   *\n   * @example       js\n   * myCoolSocketDomInstance.emit('coco', { hello: 'world' });\n   *\n   * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n   */\n  emit(event, data = {}) {\n    this._socket.emit(`SSocketDom.${event}`, data);\n    return this;\n  }\n\n  /**\n   * @name          registerEvent\n   * @namespace           sugar.js.class\n   * @type          Function\n   *\n   * Register a new event with an handler function that will handle the event content\n   *\n   * @param         {String}        event         The event name that you want to listen from the server\n   * @param          {Function}     handlerFn      The function that will handle the event content.\n   * @return         {SSocketDom}                  The SSocketDom instance to maintain chainability\n   *\n   * @example     js\n   * myCoolSocketDomInstance.registerEvent('hello', (data, settings) => {\n   *    // do something with the event content and the settings\n   * });\n   *\n   * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n   */\n  registerEvent(event, handlerFn, settings = {}) {\n    // save the event scoped settings in the global settings:\n    this._settings.events[event] = settings;\n    // listen for the event from the server:\n    this._socket.on(`SSocketDom.${event}`, (data = {}) => {\n      // grab the data from the event\n      const d = data.data;\n      // delete the data from the event\n      delete data.data;\n      // call the handler function with the data from the server and the settings\n      handlerFn(d, {\n        ...this._settings,\n        ...this._settings.events[event],\n        ...(data || {})\n      });\n    });\n    // maintain chainability\n    return this;\n  }\n}\n\nexport default SSocketDom;\n"
    ]
}
{
    "version": 3,
    "sources": [
        "STimer.js"
    ],
    "names": [
        "STimer",
        "duration",
        "settings",
        "resolve",
        "reject",
        "trigger",
        "cancel",
        "_settings",
        "tickCount",
        "_tickCount",
        "_tickInterval",
        "_duration",
        "tickInterval",
        "loop",
        "_tickTime",
        "Date",
        "_remaining",
        "remaining",
        "stop",
        "start",
        "clearTimeout",
        "_tickSetTimeout",
        "setTimeout",
        "_tick",
        "isStarted",
        "_pauseTime",
        "_startTime",
        "elapsed",
        "getTime",
        "reset",
        "_completesCallbacks",
        "_ticksCallbacks",
        "now",
        "__SPromise"
    ],
    "mappings": "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",
    "sourcesContent": [
        "import __convert from './convert';\nimport __SPromise from '../promise/SPromise';\nimport __deepMerge from '../object/deepMerge';\n\n/**\n * @name \t\t            STimer\n * @namespace           sugar.js.time\n * @type                  Class\n * @extends               SPromise\n *\n * Class that let you create and handle timer with ease.\n * With this class you can set some callback function that will be\n * called each x ms or tell that you want your callbacks to be called\n * a certain number of time during the timer time.\n * This class extends the SPromise one, meaning that you can subscribe to differents \"events\" triggered by the timer instance. Here's the list:\n * - complete: Triggered when the timer is completed\n * - tick: Triggered at each ticks depending on your settings\n * - duration: Triggered when the duration has been changed\n * - tickCount: Triggered when the tickCount has been changed\n * - reset: Triggered when the timer has been reseted\n * - start: Triggered when the timer starts\n * - pause: Triggered when the timer has been paused\n * - stop: Triggered when the timer has been stoped\n * - destroy: Triggered when the timer has been destroyed\n *\n * @param     {Number|String}     duration      The duration of the timer. Can be a Number that will be treated as miliseconds, or a string like \"1s\", \"2m\", etc...\n * @param     {Object}            [settings={}]     A settings object to configure your timer more deeply:\n * - tickInterval (1000) {Number}: Specify the interval wanted between each ticks in miliseconds\n * - tickCount (null) {Number}: Specify how many ticks you want during the timer process\n * - loop (false) {Boolean}: Specify if you want the timer to loop or not.\n *\n * @example \tjs\n * const STimer = require('@coffeekraken/sugar/js/time/STimer');\n * const myTimer = new STimer(2000, {\n * \t\ttickCount : 5\n * })\n * myTimer.on('tick', myTimer => {\n * \t\t// do something here...\n * })\n * myTimer.start()\n *\n * @since     2.0.0\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default class STimer extends __SPromise {\n  /**\n   * @name          _duration\n   * @type          Number\n   * @private\n   *\n   * Store the timer duration wanted\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _duration = 0;\n\n  /**\n   * @name        _remaining\n   * @type        Number\n   * @private\n   *\n   * Store the remaining time\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _remaining = 0;\n\n  /**\n   * @name            _tickCount\n   * @type            Number\n   * @private\n   *\n   * How many ticks wanted during the timeout\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _tickCount = null;\n\n  /**\n   * @name          _tickInterval\n   * @type          Number\n   * @private\n   *\n   * Computed value depending on the settings\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _tickInterval = 1000;\n\n  /**\n   * @name          _tickSetTimeout\n   * @type          Numbee\n   * @private\n   *\n   * Store the setInterval instance\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _tickSetTimeout = null;\n\n  /**\n   * @name            _startTime\n   * @type            Date\n   * @private\n   *\n   * Store the time when the timer is started\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _startTime = null;\n\n  /**\n   * @name          _tickTime\n   * @type          Date\n   * @private\n   *\n   * Store the last tick time\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _tickTime = null;\n\n  /**\n   * @name          _pauseTime\n   * @type          Date\n   * @private\n   *\n   * Store the pause time\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _pauseTime = null;\n\n  /**\n   * @name          constructor\n   * @type          Function\n   *\n   * Constructor\n   *\n   * @param \t{number} \t[duration=1000] \t\tThe duration of the timer. Can be a number of milliseconds of a string time like '1s', '2m', etc...\n   * @param \t{Object} \tsettings \t\tThe settings for the timer\n   *\n   * @example         js\n   * import STimer from '@coffeekraken/sugar/js/time/STimer';\n   * const timer = new STimer('2m');\n   * timer.onTick(() => {\n   *    // do something...\n   * });\n   * timer.start();\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(duration, settings = {}) {\n    super(\n      (resolve, reject, trigger, cancel) => {\n        this.duration = duration;\n\n        // calculate the tickInterval\n        if (this._settings.tickCount) {\n          this._tickCount = this._settings.tickCount;\n          this._tickInterval = this._duration / this._tickCount; // remove 1 cause the first tick is always the start time\n        } else {\n          this._tickInterval = __convert(this._settings.tickInterval, 'ms');\n        }\n      },\n      __deepMerge(\n        {\n          tickInterval: 1000,\n          tickCount: null,\n          loop: false\n        },\n        settings\n      )\n    );\n  }\n\n  /**\n   * @name          _tick\n   * @type          Function\n   * @private\n   *\n   * Internal tick function\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _tick() {\n    // save the remaining timeout\n    this._tickTime = new Date();\n\n    // update remaing\n    this._remaining -= this._tickInterval;\n\n    // if we are at the end of the timer\n    if (this.remaining <= 0) {\n      // stop the timer\n      this.stop();\n      // check if need to loop\n      if (this._settings.loop) {\n        this.start();\n      }\n      // loop on each completes functions\n      this.trigger('complete', this);\n    } else {\n      // launch another tick\n      clearTimeout(this._tickSetTimeout);\n      this._tickSetTimeout = setTimeout(() => {\n        this._tick();\n      }, this._tickInterval);\n    }\n\n    // loop on each ticks functions\n    if (this.isStarted()) this.trigger('tick', this);\n  }\n\n  /**\n   * @name            remaing\n   * @type            Number\n   * @get\n   *\n   * Get the remaining time in ms\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get remaining() {\n    if (!this._startTime) return 0;\n    return this._startTime.getTime() + this._duration - Date.now();\n  }\n\n  /**\n   * @name              duration\n   * @type              Number\n   * @get\n   * @set\n   *\n   * Set or get the duration. Can be a number in milliseconds, or a time string like '1m', '2s', etc...\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  set duration(duration) {\n    duration = __convert(duration, 'ms');\n    this._duration = duration;\n    if (this._tickCount) {\n      this._tickInterval = this._duration / this._tickCount; // remove 1 cause the first tick is always the start time\n    }\n    // loop on each change duration functions\n    this.trigger('duration', this);\n  }\n  get duration() {\n    return this._duration;\n  }\n\n  /**\n   * @name          tickCount\n   * @type          Number\n   * @get\n   * @set\n   *\n   * Set of get the tickCount\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  set tickCount(tickCount) {\n    this._tickCount = tickCount;\n    this._tickInterval = this._duration / this._tickCount;\n\n    // loop on each change tick count functions\n    this.trigger('tickCount', this);\n  }\n  get tickCount() {\n    return this._tickCount;\n  }\n\n  /**\n   * @name              percentage\n   * @type              Number\n   * @get\n   *\n   * Get the current timer advancement percentage\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get percentage() {\n    if (!this.isStarted()) return 0;\n    return (100 / this.duration) * (this.duration - this.remaining);\n  }\n\n  /**\n   * @name              reset\n   * @type              Function\n   *\n   * Reset the timer\n   *\n   * @param \t{Boolean} \tstart \tIf the timer has to start after reseting or not\n   * @return \t{STimer}            The STimer instance\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  reset(start = false) {\n    // stop the timeout\n    clearTimeout(this._tickSetTimeout);\n\n    // reset the different timer elements\n    this._pauseTime = null;\n    this._startTime = null;\n    this._remaining = this._duration;\n\n    // check if need to start again\n    if (start) this.start();\n\n    // loop on each resets functions\n    this.trigger('reset', this);\n\n    // maintain chainability\n    return this;\n  }\n\n  /**\n   * @name            start\n   * @type            Function\n   *\n   * Start the timer\n   *\n   * @param         {Number}          [duration=null]           An optional duration for the timer session\n   * @return \t{STimer}      The STimer instance\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  start(duration = null) {\n    // clear the timeout to be sure\n    clearTimeout(this._tickSetTimeout);\n\n    // set the duration\n    if (duration) this.duration = duration;\n\n    // if no tick time\n    if (!this._tickTime) {\n      this._tickTime = new Date();\n    }\n\n    // if is a pausetime\n    // mean that we resume the timer\n    if (this._pauseTime) {\n      // calculate time before new tick\n      const elapsed = this._pauseTime.getTime() - this._tickTime.getTime();\n      const remaining = this._tickInterval - elapsed;\n      clearTimeout(this._tickSetTimeout);\n      this._tickSetTimeout = setTimeout(() => {\n        this._tick();\n      }, remaining);\n\n      // set the start time\n      this._startTime = new Date();\n\n      // reset pauseTime\n      this._pauseTime = null;\n    } else {\n      // save the start time\n      this._startTime = new Date();\n      this._remaining = this._duration;\n\n      // first time tick\n      clearTimeout(this._tickSetTimeout);\n      this._tickSetTimeout = setTimeout(() => {\n        this._tick();\n      }, this._tickInterval);\n    }\n\n    // loop on each start functions\n    this.trigger('start', this);\n\n    // maintain chainability\n    return this;\n  }\n\n  /**\n   * @name            pause\n   * @type            Function\n   *\n   * Pause the timer\n   *\n   * @return \t{STimer}        The STimer instance\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  pause() {\n    // set the pauseTime\n    this._pauseTime = new Date();\n\n    // clean the interval\n    clearTimeout(this._tickSetTimeout);\n\n    // loop on each pause functions\n    this.trigger('pause', this);\n\n    // maintain chainability\n    return this;\n  }\n\n  /**\n   * @name              stop\n   * @type              Function\n   *\n   * Stop the timer\n   *\n   * @return \t{STimer}      The STimer instance\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  stop() {\n    // reset\n    this.reset();\n\n    // loop on each stop functions\n    this.trigger('stop', this);\n\n    // maintain chainability\n    return this;\n  }\n\n  /**\n   * @name            destroy\n   * @type            Function\n   *\n   * Destroy the timer\n   *\n   * @return        {STimer}            The STimer instance\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  destroy() {\n    this.stop();\n    this._completesCallbacks = [];\n    this._ticksCallbacks = [];\n\n    // loop on each destroy functions\n    this.trigger('destroy', this);\n\n    // maintain chainability\n    return this;\n  }\n\n  /**\n   * @name              isStarted\n   * @type              Function\n   *\n   * Check if the timer is started\n   *\n   * @return          {Boolean}         true if started, false if not\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  isStarted() {\n    return this._startTime && !this._pauseTime;\n  }\n}\n"
    ]
}
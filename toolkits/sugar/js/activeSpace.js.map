{
    "version": 3,
    "sources": [
        "activeSpace.js"
    ],
    "names": [
        "_activeSpaceCallbacksStack",
        "_activeSpaceStack",
        "_activeSpaceCurrent",
        "activeSpaceApi",
        "get",
        "set",
        "activeSpace",
        "history",
        "silent",
        "Error",
        "push",
        "_callCallbacks",
        "append",
        "currentActiveSpace",
        "currentActiveSpaceArray",
        "split",
        "activeSpaceArray",
        "join",
        "remove",
        "toRemove",
        "newActiveSpace",
        "replace",
        "substr",
        "slice",
        "previous",
        "length",
        "splice",
        "is",
        "activeSpaceToCheck",
        "on",
        "callback",
        "settings",
        "once",
        "count",
        "called",
        "Object",
        "keys",
        "forEach",
        "activeSpaceCallbackObj",
        "delete",
        "filter",
        "obj"
    ],
    "mappings": ";;;;;;;AAAA;;AACA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,IAAMA,0BAA0B,GAAG,EAAnC;AACA,IAAMC,iBAAiB,GAAG,EAA1B;AACA,IAAIC,mBAAmB,GAAG,IAA1B;AACA,IAAMC,cAAc,GAAG;AACrB;;;;;;;;;;;AAWAC,EAAAA,GAAG,EAAE,MAAM;AACT,WAAOF,mBAAP;AACD,GAdoB;;AAgBrB;;;;;;;;;;;;;;AAcAG,EAAAA,GAAG,EAAE,aAACC,WAAD,EAAcC,OAAd,EAA8BC,MAA9B,EAAiD;AAAA,QAAnCD,OAAmC;AAAnCA,MAAAA,OAAmC,GAAzB,IAAyB;AAAA;;AAAA,QAAnBC,MAAmB;AAAnBA,MAAAA,MAAmB,GAAV,KAAU;AAAA;;AACpD,QAAI,CAACA,MAAD,IAAW,qBAASF,WAAT,CAAf,EAAsC;AACpC,YAAM,IAAIG,KAAJ,uDAC0CH,WAD1C,2GAAN;AAGD,KALmD,CAOpD;;;AACA,QAAIJ,mBAAmB,KAAKI,WAAxB,IAAuCC,OAA3C,EAAoD;AAClDN,MAAAA,iBAAiB,CAACS,IAAlB,CAAuBJ,WAAvB;AACD,KAVmD,CAYpD;;;AACAJ,IAAAA,mBAAmB,GAAGI,WAAtB,CAboD,CAepD;;AACAH,IAAAA,cAAc,CAACQ,cAAf;;AAEA,WAAOR,cAAc,CAACC,GAAf,EAAP;AACD,GAjDoB;;AAmDrB;;;;;;;;;;;;;AAaAQ,EAAAA,MAAM,EAAE,gBAACN,WAAD,EAAcC,OAAd,EAAiC;AAAA,QAAnBA,OAAmB;AAAnBA,MAAAA,OAAmB,GAAT,IAAS;AAAA;;AACvC;AACA,QAAMM,kBAAkB,GAAGV,cAAc,CAACC,GAAf,MAAwB,EAAnD;AAEA,QACES,kBAAkB,KAAK,EAAvB,IACA,wBAAYA,kBAAZ,eAAsCP,WAAtC,EAFF,EAIE,OAAOH,cAAc,CAACC,GAAf,EAAP;AAEF,QAAMU,uBAAuB,GAAGD,kBAAkB,CAACE,KAAnB,CAAyB,GAAzB,CAAhC;AACA,QAAMC,gBAAgB,GAAGV,WAAW,CAACS,KAAZ,CAAkB,GAAlB,CAAzB;AACAZ,IAAAA,cAAc,CAACE,GAAf,CACE,CAAC,GAAGS,uBAAJ,EAA6B,GAAGE,gBAAhC,EAAkDC,IAAlD,CAAuD,GAAvD,CADF,EAEEV,OAFF;AAIA,WAAOJ,cAAc,CAACC,GAAf,EAAP;AACD,GAjFoB;;AAmFrB;;;;;;;;;;;;;AAaAc,EAAAA,MAAM,EAAE,gBAACC,QAAD,EAAWZ,OAAX,EAA8B;AAAA,QAAnBA,OAAmB;AAAnBA,MAAAA,OAAmB,GAAT,IAAS;AAAA;;AACpC;AACA,QAAMM,kBAAkB,GAAGV,cAAc,CAACC,GAAf,EAA3B,CAFoC,CAGpC;;AACA,QAAIgB,cAAc,GAAGP,kBAAkB,CAACQ,OAAnB,CAA2BF,QAA3B,EAAqC,EAArC,CAArB,CAJoC,CAKpC;;AACA,QAAIC,cAAc,CAACE,MAAf,CAAsB,CAAC,CAAvB,MAA8B,GAAlC,EACEF,cAAc,GAAGA,cAAc,CAACG,KAAf,CAAqB,CAArB,EAAwB,CAAC,CAAzB,CAAjB;AACF,QAAIH,cAAc,CAACE,MAAf,CAAsB,CAAtB,EAAyB,CAAzB,MAAgC,GAApC,EACEF,cAAc,GAAGA,cAAc,CAACE,MAAf,CAAsB,CAAtB,CAAjB,CATkC,CAUpC;;AACAnB,IAAAA,cAAc,CAACE,GAAf,CAAmBe,cAAnB,EAAmCb,OAAnC,EAXoC,CAYpC;;AACA,WAAOJ,cAAc,CAACC,GAAf,EAAP;AACD,GA9GoB;;AAgHrB;;;;;;;;;;AAUAoB,EAAAA,QAAQ,EAAE,MAAM;AACd,QAAIvB,iBAAiB,CAACwB,MAAlB,IAA4B,CAAhC,EAAmC;;AACnCxB,IAAAA,iBAAiB,CAACyB,MAAlB,CAAyB,CAAC,CAA1B,EAA6B,CAA7B;;AACAvB,IAAAA,cAAc,CAACE,GAAf,CAAmBJ,iBAAiB,CAACA,iBAAiB,CAACwB,MAAlB,GAA2B,CAA5B,CAApC,EAAoE,KAApE;AACA,WAAOtB,cAAc,CAACC,GAAf,EAAP;AACD,GA/HoB;;AAiIrB;;;;;;;;;;;;;;AAcAuB,EAAAA,EAAE,EAAE,YAACC,kBAAD,EAAqBf,kBAArB,EAAmE;AAAA,QAA9CA,kBAA8C;AAA9CA,MAAAA,kBAA8C,GAAzBV,cAAc,CAACC,GAAf,EAAyB;AAAA;;AACrE,QAAI,CAACS,kBAAL,EAAyB,OAAO,KAAP;AACzB,WAAO,wBAAYA,kBAAZ,EAAgCe,kBAAhC,CAAP;AACD,GAlJoB;;AAoJrB;;;;;;;;;;;;;;;;AAgBAC,EAAAA,EAAE,EAAE,YAACD,kBAAD,EAAqBE,QAArB,EAA+BC,QAA/B,EAAiD;AAAA,QAAlBA,QAAkB;AAAlBA,MAAAA,QAAkB,GAAP,EAAO;AAAA;;AACnDA,IAAAA,QAAQ,GAAG,wBACT;AACEC,MAAAA,IAAI,EAAE,KADR;AAEEC,MAAAA,KAAK,EAAE,CAAC;AAFV,KADS,EAKTF,QALS,CAAX,CADmD,CAQnD;;AACA,QAAI,CAAC/B,0BAA0B,CAAC4B,kBAAD,CAA/B,EACE5B,0BAA0B,CAAC4B,kBAAD,CAA1B,GAAiD,EAAjD,CAViD,CAWnD;;AACA,QAAIG,QAAQ,CAACC,IAAb,EAAmBD,QAAQ,CAACE,KAAT,GAAiB,CAAjB,CAZgC,CAanD;;AACAjC,IAAAA,0BAA0B,CAAC4B,kBAAD,CAA1B,CAA+ClB,IAA/C,CAAoD;AAClDkB,MAAAA,kBADkD;AAElDE,MAAAA,QAFkD;AAGlDC,MAAAA,QAHkD;AAIlDG,MAAAA,MAAM,EAAE;AAJ0C,KAApD;AAMD,GAxLoB;;AA0LrB;;;;;;;;;AASAvB,EAAAA,cAAc,EAAE,MAAM;AACpB;AACAwB,IAAAA,MAAM,CAACC,IAAP,CAAYpC,0BAAZ,EAAwCqC,OAAxC,CAAiDT,kBAAD,IAAwB;AACtE;AACA,UAAI,CAACzB,cAAc,CAACwB,EAAf,CAAkBC,kBAAlB,CAAL,EAA4C,OAF0B,CAGtE;;AACA5B,MAAAA,0BAA0B,CAAC4B,kBAAD,CAA1B,CAA+CS,OAA/C,CACGC,sBAAD,IAA4B;AAC1B;AACAA,QAAAA,sBAAsB,CAACR,QAAvB,GAF0B,CAG1B;;AACAQ,QAAAA,sBAAsB,CAACJ,MAAvB,GAJ0B,CAK1B;;AACA,YAAII,sBAAsB,CAACP,QAAvB,CAAgCE,KAAhC,KAA0C,CAAC,CAA/C,EAAkD;;AAClD,YACEK,sBAAsB,CAACJ,MAAvB,IACAI,sBAAsB,CAACP,QAAvB,CAAgCE,KAFlC,EAGE;AACAK,UAAAA,sBAAsB,CAACC,MAAvB,GAAgC,IAAhC;AACD,SAZyB,CAa1B;;;AACAvC,QAAAA,0BAA0B,CACxB4B,kBADwB,CAA1B,GAEI5B,0BAA0B,CAAC4B,kBAAD,CAA1B,CAA+CY,MAA/C,CAAuDC,GAAD,IAAS;AACjE,iBAAOA,GAAG,CAACF,MAAJ,KAAe,IAAtB;AACD,SAFG,CAFJ;AAKD,OApBH;AAsBD,KA1BD;AA2BD;AAhOoB,CAAvB;eAmOepC,c",
    "sourcesContent": [
        "import __deepMerge from '../object/deepMerge';\nimport __minimatch from 'minimatch';\nimport __isGlob from 'is-glob';\n\n/**\n * @name                    activeSpace\n * @namespace           sugar.js.core\n * @type                    Object\n *\n * This object expose some functions that are usefull to manage the \"active\" space of your application.\n * An active space is represented by a string formated like so \"something.cool.hello\". This mean that your app is\n * in the \"something.cool.hello\" space and depending on that, you can enable or disable some features like for example\n * keypress that have to be active only in certain \"space\" of your application.\n * The exposed functions are these ones:\n * - set: This allows you to set the active space\n * - get: This allows you to get the current active space\n * - is: This allows you to check if the passed active space string is in the current active space\n * - previous: This allows you to go back 1 activeSpace in the stack\n * - on: This allows you to register callbacks attached to an activeSpace\n * - append: This allows you to append an activeSpace string to the current one\n *\n * @example           js\n * const activeSpace = require('@coffeekraken/sugar/core/activeSpace');\n * activeSpace.set('hello.world');\n * activeSpace.get(); // => hello.world\n * activeSpace.is('hello'); // => false\n * activeSpace.is('hello.world.coco'); // => false\n * activeSpace.is('hello.**'); // => true\n *\n * @since       2.0.0\n * @see       https://www.npmjs.com/package/minimatch\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nconst _activeSpaceCallbacksStack = {};\nconst _activeSpaceStack = [];\nlet _activeSpaceCurrent = null;\nconst activeSpaceApi = {\n  /**\n   * @name                get\n   * @type                Function\n   *\n   * This function allows you to get the current active space\n   *\n   * @return      {String}                  The current active space\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get: () => {\n    return _activeSpaceCurrent;\n  },\n\n  /**\n   * @name                set\n   * @type                Function\n   *\n   * This function allows you to set the current active space\n   *\n   * @param       {String}      activeSpace       The active space to set\n   * @param       {Boolean}       [history=true]    Specify if you want that this action make en new entry in history or not\n   * @param       {Boolean}     [silent=false]    Specify if you want to have errors throwed or not\n   * @return      {String}                  The current active space\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  set: (activeSpace, history = true, silent = false) => {\n    if (!silent && __isGlob(activeSpace)) {\n      throw new Error(\n        `You try to set as activeSpace this string \"${activeSpace}\". It seems that this string is a glob pattern and activeSpace does not have to be a glob pattern...`\n      );\n    }\n\n    // check if the passed activeSpace is the same as the last one\n    if (_activeSpaceCurrent !== activeSpace && history) {\n      _activeSpaceStack.push(activeSpace);\n    }\n\n    // set the active space\n    _activeSpaceCurrent = activeSpace;\n\n    // call the callbacks\n    activeSpaceApi._callCallbacks();\n\n    return activeSpaceApi.get();\n  },\n\n  /**\n   * @name              append\n   * @type              Function\n   *\n   * This function take the current activeSpace string and add the passed one to set the new activeSpace string\n   *\n   * @param       {String}      activeSpace         The activeSpace to append\n   * @param       {Boolean}       [history=true]    Specify if you want that this action make en new entry in history or not\n   * @return      {String}                          Return the current active space\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  append: (activeSpace, history = true) => {\n    // get the current one\n    const currentActiveSpace = activeSpaceApi.get() || '';\n\n    if (\n      currentActiveSpace !== '' &&\n      __minimatch(currentActiveSpace, `**.${activeSpace}`)\n    )\n      return activeSpaceApi.get();\n\n    const currentActiveSpaceArray = currentActiveSpace.split('.');\n    const activeSpaceArray = activeSpace.split('.');\n    activeSpaceApi.set(\n      [...currentActiveSpaceArray, ...activeSpaceArray].join('.'),\n      history\n    );\n    return activeSpaceApi.get();\n  },\n\n  /**\n   * @name                remove\n   * @type                Function\n   *\n   * This function simply remove the passed string from the activeSpace stack\n   *\n   * @param       {String}        toRemove          The string to remove\n   * @param       {Boolean}       [history=true]    Specify if you want that this action make en new entry in history or not\n   * @return      {String}                          Return the current active space\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  remove: (toRemove, history = true) => {\n    // get the current\n    const currentActiveSpace = activeSpaceApi.get();\n    // generate new active space\n    let newActiveSpace = currentActiveSpace.replace(toRemove, '');\n    // clean the new active space\n    if (newActiveSpace.substr(-1) === '.')\n      newActiveSpace = newActiveSpace.slice(0, -1);\n    if (newActiveSpace.substr(0, 1) === '.')\n      newActiveSpace = newActiveSpace.substr(1);\n    // check if we need to append in the history\n    activeSpaceApi.set(newActiveSpace, history);\n    // return the current active space\n    return activeSpaceApi.get();\n  },\n\n  /**\n   * @name                previous\n   * @type                Function\n   *\n   * This function simply go back by 1 in the activeSpace stack\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   * @return      {String}                          Return the current active space\n   */\n  previous: () => {\n    if (_activeSpaceStack.length <= 1) return;\n    _activeSpaceStack.splice(-1, 1);\n    activeSpaceApi.set(_activeSpaceStack[_activeSpaceStack.length - 1], false);\n    return activeSpaceApi.get();\n  },\n\n  /**\n   * @name                is\n   * @type                Function\n   *\n   * This function allows you to check if the active space string that you pass match with the current active space or not.\n   * The checking process is done using the \"minimatch\" package that let you use cool features like \"*\", \"**\", etc...\n   *\n   * @param       {String}        activeSpaceToCheck          The active space string that you want to check\n   * @param       {String}        [currentActiveSpace=activeSpaceApi.get()]       The current active space to check against the passed one\n   * @return      {Boolean}                                   true if the passed active space string match the current one, false if not\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  is: (activeSpaceToCheck, currentActiveSpace = activeSpaceApi.get()) => {\n    if (!currentActiveSpace) return false;\n    return __minimatch(currentActiveSpace, activeSpaceToCheck);\n  },\n\n  /**\n   * @name            on\n   * @type            Function\n   *\n   * This function allows you to register a callback linked with an activeSpace string\n   * that will be called once the activeSpace is matched\n   *\n   * @param         {String}        activeSpaceToCheck        The active space to check\n   * @param         {Function}      callback                  The callback function to call when the activeSpace is matched\n   * @param         {Object}        [settings={}]             A settings object to configure your activeSpace callback behavior:\n   * - once (false) {Boolean}: Specify if you want the callback to be called only once. This will just set the \"count\" setting to 1\n   * - count (-1) {Number}: Specify how many times you want the callback to be called. -1 mean unlimited.\n   *\n   * @since       2.0.0\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  on: (activeSpaceToCheck, callback, settings = {}) => {\n    settings = __deepMerge(\n      {\n        once: false,\n        count: -1\n      },\n      settings\n    );\n    // check if this activeSpace is already eixisting\n    if (!_activeSpaceCallbacksStack[activeSpaceToCheck])\n      _activeSpaceCallbacksStack[activeSpaceToCheck] = [];\n    // check if the once setting is true\n    if (settings.once) settings.count = 1;\n    // add the callback object to the stack\n    _activeSpaceCallbacksStack[activeSpaceToCheck].push({\n      activeSpaceToCheck,\n      callback,\n      settings,\n      called: 0\n    });\n  },\n\n  /**\n   * @name          _callCallbacks\n   * @type          Function\n   * @private\n   *\n   * Call the callbacks when an activeSpace has been setted\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _callCallbacks: () => {\n    // call the registered callbacks that match this activeSpace\n    Object.keys(_activeSpaceCallbacksStack).forEach((activeSpaceToCheck) => {\n      // check if the active space match or not\n      if (!activeSpaceApi.is(activeSpaceToCheck)) return;\n      // loop on every callbacks registered\n      _activeSpaceCallbacksStack[activeSpaceToCheck].forEach(\n        (activeSpaceCallbackObj) => {\n          // call the callback\n          activeSpaceCallbackObj.callback();\n          // increase the called property\n          activeSpaceCallbackObj.called++;\n          // check if we have reached call count\n          if (activeSpaceCallbackObj.settings.count === -1) return;\n          if (\n            activeSpaceCallbackObj.called >=\n            activeSpaceCallbackObj.settings.count\n          ) {\n            activeSpaceCallbackObj.delete = true;\n          }\n          // filter activeSpaceCallbackObj to remove the \"delete\" once\n          _activeSpaceCallbacksStack[\n            activeSpaceToCheck\n          ] = _activeSpaceCallbacksStack[activeSpaceToCheck].filter((obj) => {\n            return obj.delete !== true;\n          });\n        }\n      );\n    });\n  }\n};\n\nexport default activeSpaceApi;\n"
    ]
}
{
    "version": 3,
    "sources": [
        "asyncForEach.js"
    ],
    "names": [
        "asyncForEach",
        "array",
        "asyncFn",
        "Promise",
        "resolve",
        "reject",
        "index",
        "length"
    ],
    "mappings": ";;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;SAwB8BA,Y;;;;;oCAAf,WAA4BC,KAA5B,EAAmCC,OAAnC,EAA4C;AACzD,WAAO,IAAIC,OAAJ;AAAA,mCAAY,WAAOC,OAAP,EAAgBC,MAAhB,EAA2B;AAC5C,aAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGL,KAAK,CAACM,MAAlC,EAA0CD,KAAK,EAA/C,EAAmD;AACjD,gBAAMJ,OAAO,CAACD,KAAK,CAACK,KAAD,CAAN,EAAeA,KAAf,EAAsBL,KAAtB,CAAb;AACD;;AACDG,QAAAA,OAAO;AACR,OALM;;AAAA;AAAA;AAAA;AAAA,QAAP;AAMD,G",
    "sourcesContent": [
        "/**\n * @name                              asyncForEach\n * @namespace           sugar.js.array\n * @type                              Function\n *\n * Allow to make some async foreach on your arrays\n *\n * @param         {Array}             array             The array to loop on\n * @param         {Function}          asyncFn           The async function to call on each items\n *\n * @example         js\n * import asyncForEach from '@coffeekraken/sugar/js/array/asyncForEach';\n * const waitFor = (ms) => new Promise(r => setTimeout(r, ms));\n * asyncForEach([0,1,2,3], async (item) => {\n *    await waitWor(50);\n *    console.log(item);\n * });\n * // 0\n * // 1\n * // 2\n * // 3\n *\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default async function asyncForEach(array, asyncFn) {\n  return new Promise(async (resolve, reject) => {\n    for (let index = 0; index < array.length; index++) {\n      await asyncFn(array[index], index, array);\n    }\n    resolve();\n  });\n}\n"
    ]
}
{
    "version": 3,
    "sources": [
        "proxy.js"
    ],
    "names": [
        "proxy",
        "array",
        "__$proxied",
        "watchStack",
        "Object",
        "defineProperty",
        "value",
        "enumerable",
        "writable",
        "_proxyMethod",
        "name",
        "args",
        "handlersStack",
        "keys",
        "forEach",
        "watchId",
        "watch",
        "methods",
        "indexOf",
        "push",
        "handlerFn",
        "watchObj",
        "oldValue",
        "action",
        "fullAction",
        "returnValue",
        "Array",
        "prototype",
        "call",
        "handlerObj",
        "returnedValue",
        "getOwnPropertyNames",
        "methodName",
        "unProxyMethods",
        "configurable"
    ],
    "mappings": "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",
    "sourcesContent": [
        "import __uniqid from '../string/uniqid';\n\n/**\n * @name                  proxy\n * @namespace           sugar.js.array\n * @type                  Function\n *\n * This function override the passed array prototype to intercept changes made through\n *\n * @param         {Array}           array           The array to proxy\n * @return        {Array}                           The same array with his prototype proxied\n *\n * @example       js\n * import proxy from '@coffeekraken/sugar/js/array/proxy';\n * const myArray = proxy([1,2,3]);\n * myArray.watch(['push','pop'], (watchObj) => {\n *    // check the watchObj action\n *    switch (watchObj.action) {\n *      case 'push':\n *        // do something...\n *      break;\n *    }\n * });\n *\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function proxy(array) {\n  if (array.__$proxied) return array;\n\n  const watchStack = {};\n\n  // mark that this array has already been proxied\n  Object.defineProperty(array, '__$proxied', {\n    value: true,\n    enumerable: false,\n    writable: false\n  });\n\n  function _proxyMethod(name, ...args) {\n    const handlersStack = [];\n    Object.keys(watchStack).forEach((watchId) => {\n      const watch = watchStack[watchId];\n      if (watch.methods.indexOf(name) === -1) return;\n      handlersStack.push({\n        handlerFn: watch.handlerFn,\n        watchObj: {\n          oldValue: [...array],\n          action: `${name}`,\n          fullAction: `Array.${name}`,\n          args\n        }\n      });\n    });\n\n    const returnValue = Array.prototype[name].call(array, ...args);\n\n    handlersStack.forEach((handlerObj) => {\n      handlerObj.watchObj = {\n        ...handlerObj.watchObj,\n        value: array,\n        returnedValue: returnValue\n      };\n      handlerObj.handlerFn(handlerObj.watchObj);\n    });\n\n    return returnValue;\n  }\n\n  // console.log(Object.getOwnPropertyNames(Array.prototype));\n\n  Object.getOwnPropertyNames(Array.prototype).forEach((methodName) => {\n    const unProxyMethods = ['length', 'constructor'];\n    if (unProxyMethods.indexOf(methodName) !== -1) return;\n    Object.defineProperty(array, methodName, {\n      writable: false,\n      configurable: false,\n      enumerable: false,\n      value: (...args) => {\n        return _proxyMethod(methodName, ...args);\n      }\n    });\n  });\n\n  /**\n   * @name                    watch\n   * @type                    Function\n   *\n   * This method allows you to specify which Array methods you want to watch by passing an array of methods names like ['push','pop'].\n   * You can also specify the handler function that will be called on each array updates, etc...\n   *\n   * @param         {Array|String}          methods               The methods you want to watch\n   * @param         {Function}              handler               The function that will be called on each updates. This function will be called with an object as parameters. Here's the list of properties available:\n   * - method (null) {String}: The method name that causes the watch trigger\n   * - args ([]) {Array}: An array of all the arguments passed to the method call\n   * - oldValue (null) {Array}: The array just before the method call\n   * - value (null) {Array}: The array after the method call\n   * - returnedValue (null) {Mixed}: This is the value that the method call has returned\n   * @return        {String}                                    Return a uniq watchid that you can use to unwatch this process\n   *\n   * @example         js\n   * const watchId = myProxiedArray.watch(['push', 'pop'], (watchObj) => {\n   *    // do something...\n   * });\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  Object.defineProperty(array, 'watch', {\n    writable: false,\n    configurable: false,\n    enumerable: false,\n    value: (methods, handlerFn) => {\n      // create a watch id that we send back to the caller\n      const watchId = __uniqid();\n      // append this watch process\n      watchStack[watchId] = {\n        methods,\n        handlerFn\n      };\n      // return the watchId to be able to unwatcn this watch process\n      return watchId;\n    }\n  });\n\n  /**\n   * @name                  unwatch\n   * @type                  Function\n   *\n   * This methods allows you to unwatch a process started with the \"watch\" method.\n   * You have to pass as parameter the watchId that the \"watch\" method has returned you.\n   *\n   * @param       {String}          watchId         The watchId returned by the \"watch\" method\n   *\n   * @example       js\n   * const watchId = myArray.watch('push', (obj) => //...);\n   * myArray.unwatch(watchId);\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  Object.defineProperty(array, 'unwatch', {\n    writable: false,\n    configurable: false,\n    enumerable: false,\n    value: (watchId) => {\n      // delete the watch process\n      delete watchStack[watchId];\n    }\n  });\n\n  // return the processed array\n  return array;\n}\n"
    ]
}
{
    "version": 3,
    "sources": [
        "checkArgs.js"
    ],
    "names": [
        "__getArgsNames",
        "require",
        "__check",
        "__parseArgs",
        "__upperFirst",
        "checkArgs",
        "func",
        "args",
        "descriptor",
        "throwError",
        "argumentsNames",
        "availableTypes",
        "resultObj",
        "forEach",
        "argName",
        "i",
        "descriptionObj",
        "types",
        "values",
        "of",
        "greater",
        "lower",
        "allowUndefined",
        "allowNull",
        "default",
        "map",
        "toString",
        "argValue",
        "value",
        "undefined",
        "Error",
        "name",
        "allowedTypes",
        "Array",
        "isArray",
        "argType",
        "isValid",
        "type",
        "argValueToDisplay",
        "join",
        "isTypeValid",
        "invalidType",
        "invalidValue",
        "v",
        "indexOf",
        "argValueToCheck"
    ],
    "mappings": "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",
    "sourcesContent": [
        "const __getArgsNames = require('./getArgsNames');\nconst __check = require('check-types');\nconst __parseArgs = require('../string/parseArgs');\nconst __upperFirst = require('../string/upperFirst');\n\n// TODO Make tests and prettify the code if possible\n// TODO Check for environment variable to desactivate the checking on production\n// TODO Update doc\n\n/**\n * @name                        checkArgs\n * @namespace           js.dev\n * @type                        Function\n *\n * Check the arguments of a function by checking his type, his values, etc...\n * Throw an error if something is not good with the details of why...\n *\n * @param             {Object}                  args                  The arguments object description\n * @param             {Boolean}                 [throwError=true]     Specify if you want that the function throw an error if needed or not\n * @return            {Object}                                        Return an object of the arguments and values\n *\n * @example           js\n * import checkArgs from '@coffeekraken/sugar/js/dev/checkArgs';\n * function(argument1, plop, hello) {\n *    checkArgs({\n *      arguments1: {\n *        type: 'String',\n *        value: ['hello','world']\n *      },\n *      plop: {\n *        type: 'Array'\n *      },\n *      hello: {\n *        value: [true, false, null]\n *      }\n *    });\n *    // your function source code...\n * }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function checkArgs(func, args, descriptor, throwError = true) {\n  // get the function arguments names\n  const argumentsNames = __getArgsNames(func);\n\n  const availableTypes = [\n    'number',\n    'bigint',\n    'string',\n    'boolean',\n    'null',\n    'undefined',\n    'object',\n    'symbol',\n    'function',\n    'object',\n    'array'\n  ];\n\n  // init the resulting object\n  const resultObj = {};\n\n  // loop on the arguments names\n  argumentsNames.forEach((argName, i) => {\n    // get the argument description object\n    const descriptionObj = __parseArgs(descriptor[argName], {\n      types: '[\"String\",\"Array\"] -t --types',\n      values: 'Array -v --values',\n      of:\n        'Array -o --of /[a-zA-Z]+,?/ \"Number,BigInt,String,Boolean,Null,Undefined,Object,Symbol,Function,Array\"',\n      greater: 'Number -g --greater /^\\\\d$/',\n      lower: 'Number -l --lower /^\\\\d$/',\n      allowUndefined: 'Boolean -u --allow-undefined \"false\"',\n      allowNull: 'Boolean -n --allow-null \"false\"',\n      default: `[${availableTypes\n        .map((i) => `\"${__upperFirst(i)}\"`)\n        .toString()}] -d --default /\\\"[\\\\s\\\\S]+\\\"/`\n    });\n\n    if (!descriptor[argName]) return;\n\n    const argValue = args[i];\n\n    // construct the resultObj\n    resultObj[argName] = args[i];\n\n    // check allow undefined\n    if (!descriptionObj.allowUndefined.value && argValue === undefined) {\n      throw new Error(\n        `The argument <yellow><bold>\"${argName}\"</bold></yellow> of the function <cyan><bold>\"${func.name}\"</bold></cyan> cannot be undefined...`\n      );\n    }\n\n    // check allow null\n    if (!descriptionObj.allowNull.value && argValue === null) {\n      throw new Error(\n        `The argument <yellow><bold>\"${argName}\"</bold></yellow> of the function <cyan><bold>\"${func.name}\"</bold></cyan>cannot be null...`\n      );\n    }\n\n    // check type\n    const allowedTypes = typeof descriptionObj.types.value\n      ? [descriptionObj.types.value]\n      : descriptionObj.types.value;\n    if (Array.isArray(allowedTypes)) {\n      const argType = Array.isArray(argValue)\n        ? 'Array'\n        : __upperFirst(typeof argValue);\n      let isValid =\n        argValue === undefined && descriptionObj.allowUndefined.value\n          ? true\n          : false;\n      isValid =\n        argValue === null && descriptionObj.allowNull.value ? true : isValid;\n      allowedTypes.forEach((type) => {\n        if (__upperFirst(type) === argType) {\n          isValid = true;\n        }\n      });\n      if (!isValid) {\n        let argValueToDisplay =\n          typeof argValue === 'function' ? argValue.name : argValue;\n        if (argValueToDisplay === '' && typeof argValue === 'function')\n          argValueToDisplay = 'Anonymous function';\n        throw new Error(\n          `The argument <yellow><bold>\"${argName}\"<bold></yellow> of the function <cyan><bold>\"${\n            func.name\n          }\"</bold></cyan> has to be of type <red>\"${allowedTypes.join(\n            ','\n          )}\"</red> but the passed value <red>\"${argValueToDisplay}\"</red> is a \"${argType}\"...`\n        );\n      }\n    }\n\n    // check \"of\"\n    if (descriptionObj.of.value && Array.isArray(argValue)) {\n      let isTypeValid = false;\n      let invalidType = null;\n      let invalidValue = null;\n      argValue.forEach((v) => {\n        if (isTypeValid) return;\n        const type = Array.isArray(v) ? 'Array' : __upperFirst(typeof v);\n        if (descriptionObj.of.value.indexOf(type) !== -1) {\n          isTypeValid = true;\n        } else {\n          invalidType = type;\n          invalidValue = v;\n        }\n      });\n      if (!isTypeValid) {\n        throw new Error(\n          `The value <red>\"${invalidValue}\"</red> in the argument Array <yellow><bold>\"${argName}\"</bold></yellow> of the function <cyan><bold>\"${\n            func.name\n          }\"</bold></cyan> has to be of type <cyan><bold>\"${descriptionObj.of.value.join(\n            ','\n          )}\"</bold></cyan> but is a <cyan><bold>\"${invalidType}\"</bold></cyan>...`\n        );\n      }\n    }\n\n    // check possible values\n    if (\n      descriptionObj.values.value &&\n      Array.isArray(descriptionObj.values.value)\n    ) {\n      const argValueToCheck = Array.isArray(argValue) ? argValue : [argValue];\n\n      argValueToCheck.forEach((v) => {\n        if (descriptionObj.values.value.indexOf(v) === -1) {\n          throw new Error(\n            `The argument <yellow><bold>\"${argName}\"</bold></yellow> of the function <cyan><bold>\"${\n              func.name\n            }\"</bold></cyan> has to be one of these values <red><bold>\"${descriptionObj.values.value.join(\n              ','\n            )}\"</bold></red> but is <red><bold>\"${v}\"</bold></red>...`\n          );\n        }\n      });\n    }\n\n    // check greater\n    if (\n      typeof descriptionObj.greater.value === 'number' &&\n      typeof argValue === 'number'\n    ) {\n      const argValueToCheck = Array.isArray(argValue) ? argValue : [argValue];\n\n      argValueToCheck.forEach((v) => {\n        if (v <= descriptionObj.greater.value) {\n          throw new Error(\n            `The argument <yellow><bold>\"${argName}\"</bold></yellow> of the function <cyan><bold>\"${func.name}\"</bold></cyan> has to be greater than <red><bold>\"${descriptionObj.greater.value}\"</bold></red> but is <red><bold>\"${v}\"</bold></red>...`\n          );\n        }\n      });\n    }\n\n    // check lower\n    if (\n      typeof descriptionObj.lower.value === 'number' &&\n      typeof argValue === 'number'\n    ) {\n      const argValueToCheck = Array.isArray(argValue) ? argValue : [argValue];\n\n      argValueToCheck.forEach((v) => {\n        if (v >= descriptionObj.lower.value) {\n          throw new Error(\n            `The argument <yellow><bold>\"${argName}\"</bold></yellow> of the function <cyan><bold>\"${func.name}\"</bold></cyan> has to be lower than <red><bold>\"${descriptionObj.lower.value}\"</bold></red> but is <red><bold>\"${v}\"</bold></red>...`\n          );\n        }\n      });\n    }\n  });\n\n  // return the result object\n  return resultObj;\n}\n"
    ]
}
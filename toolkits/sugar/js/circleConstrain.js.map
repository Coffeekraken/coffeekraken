{
    "version": 3,
    "sources": [
        "circleConstrain.js"
    ],
    "names": [
        "circleConstrain",
        "center",
        "radius",
        "point",
        "dist",
        "x",
        "y",
        "radians",
        "Math",
        "atan2",
        "cos",
        "sin"
    ],
    "mappings": ";;;;;;;AAAA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBe,SAASA,eAAT,CAAyBC,MAAzB,EAAiCC,MAAjC,EAAyCC,KAAzC,EAAgD;AAC7D,MAAIC,IAAI,GAAG,8BAAgBH,MAAhB,EAAwBE,KAAxB,CAAX;;AACA,MAAIC,IAAI,IAAIF,MAAZ,EAAoB;AAClB,WAAOC,KAAP;AACD,GAFD,MAEO;AACL,QAAME,CAAC,GAAGF,KAAK,CAACE,CAAN,GAAUJ,MAAM,CAACI,CAA3B;AACA,QAAMC,CAAC,GAAGH,KAAK,CAACG,CAAN,GAAUL,MAAM,CAACK,CAA3B;AACA,QAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,CAAX,EAAcD,CAAd,CAAd;AACA,WAAO;AACLA,MAAAA,CAAC,EAAEG,IAAI,CAACE,GAAL,CAASH,OAAT,IAAoBL,MAApB,GAA6BD,MAAM,CAACI,CADlC;AAELC,MAAAA,CAAC,EAAEE,IAAI,CAACG,GAAL,CAASJ,OAAT,IAAoBL,MAApB,GAA6BD,MAAM,CAACK;AAFlC,KAAP;AAID;AACF",
    "sourcesContent": [
        "import distanceBetween from './distanceBetween';\n\n/**\n * @name \t\tcircleConstrain\n * @namespace           sugar.js.geom.2d\n * @type      Function\n *\n * Take as parameter a central point, a radius and a points to constrain inside the circle defined by the radius\n *\n * @param    {Vector2}    center    The center point of the circle\n * @param    {Number}    radius    The radius to constrain the point in\n * @param    {Vector2}    point    The point to constrain\n * @return    {Vector2}    The new constrained value for the point\n *\n * @example    js\n * import circleConstrain from '@coffeekraken/sugar/js/geom/2d/circleConstrain'\n * circleConstrain({\n * \tx: 10, y: 10\n * }, 10, {\n * \tx: 10, y: 5\n * })\n *\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n * @see    https://stackoverflow.com/questions/8515900/how-to-constrain-movement-within-the-area-of-a-circle\n */\nexport default function circleConstrain(center, radius, point) {\n  var dist = distanceBetween(center, point);\n  if (dist <= radius) {\n    return point;\n  } else {\n    const x = point.x - center.x;\n    const y = point.y - center.y;\n    var radians = Math.atan2(y, x);\n    return {\n      x: Math.cos(radians) * radius + center.x,\n      y: Math.sin(radians) * radius + center.y\n    };\n  }\n}\n"
    ]
}
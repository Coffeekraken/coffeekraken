{
    "version": 3,
    "sources": [
        "getMethods.js"
    ],
    "names": [
        "getMethods",
        "toCheck",
        "props",
        "obj",
        "_props",
        "Object",
        "getOwnPropertyNames",
        "indexOf",
        "concat",
        "getPrototypeOf",
        "sort",
        "filter",
        "e",
        "i",
        "arr"
    ],
    "mappings": ";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAsBe,SAASA,UAAT,CAAoBC,OAApB,EAA6B;AAC1C,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,GAAG,GAAGF,OAAV;;AACA,KAAG;AACD,QAAMG,MAAM,GAAGC,MAAM,CAACC,mBAAP,CAA2BH,GAA3B,CAAf;;AACA,QAAIC,MAAM,CAACG,OAAP,CAAe,kBAAf,MAAuC,CAAC,CAA5C,EAA+C;AAC/CL,IAAAA,KAAK,GAAGA,KAAK,CAACM,MAAN,CAAaJ,MAAb,CAAR;AACD,GAJD,QAIUD,GAAG,GAAGE,MAAM,CAACI,cAAP,CAAsBN,GAAtB,CAJhB;;AAMA,SAAOD,KAAK,CAACQ,IAAN,GAAaC,MAAb,CAAoB,UAAUC,CAAV,EAAaC,CAAb,EAAgBC,GAAhB,EAAqB;AAC9C,QAAIF,CAAC,IAAIE,GAAG,CAACD,CAAC,GAAG,CAAL,CAAR,IAAmB,OAAOZ,OAAO,CAACW,CAAD,CAAd,IAAqB,UAA5C,EAAwD,OAAO,IAAP;AACzD,GAFM,CAAP;AAGD",
    "sourcesContent": [
        "/**\n * @name              getMethods\n * @namespace           sugar.js.class\n * @type              Function\n *\n * This function take an instance as parameter and return all the methods in array format\n *\n * @param         {Object}        instance        The instance of the object to get the methods names of\n * @return        {Array}                         A simple array of all the methods names\n *\n * @example         js\n * import getMethods from '@coffeekraken/sugar/js/class/getMethods';\n * myClass {\n *  constructor() {}\n *  hello() {}\n *  world() {}\n * }\n * const myInstance = new myClass();\n * getMethods(myInstance); // => ['hello','world']\n *\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function getMethods(toCheck) {\n  var props = [];\n  var obj = toCheck;\n  do {\n    const _props = Object.getOwnPropertyNames(obj);\n    if (_props.indexOf('__defineGetter__') !== -1) continue;\n    props = props.concat(_props);\n  } while ((obj = Object.getPrototypeOf(obj)));\n\n  return props.sort().filter(function (e, i, arr) {\n    if (e != arr[i + 1] && typeof toCheck[e] == 'function') return true;\n  });\n}\n"
    ]
}
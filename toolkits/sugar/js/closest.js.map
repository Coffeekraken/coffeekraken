{
    "version": 3,
    "sources": [
        "closest.js"
    ],
    "names": [
        "closest",
        "$elm",
        "selector",
        "originalElm",
        "parentNode",
        "ownerDocument"
    ],
    "mappings": ";;;;;;;AAAA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAwBe,SAASA,OAAT,CAAiBC,IAAjB,EAAuBC,QAAvB,EAAiC;AAC9C,MAAMC,WAAW,GAAGF,IAApB;AACAA,EAAAA,IAAI,GAAGA,IAAI,CAACG,UAAZ;;AACA,SAAOH,IAAI,IAAIA,IAAI,IAAIE,WAAW,CAACE,aAAnC,EAAkD;AAChD,QAAI,OAAOH,QAAP,KAAoB,UAAxB,EAAoC;AAClC,UAAIA,QAAQ,CAACD,IAAD,CAAZ,EAAoB,OAAOA,IAAP;AACrB,KAFD,MAEO,IAAI,OAAOC,QAAP,KAAoB,QAApB,IAAgC,sBAAUD,IAAV,EAAgBC,QAAhB,CAApC,EAA+D;AACpE,aAAOD,IAAP;AACD;;AACDA,IAAAA,IAAI,GAAGA,IAAI,CAACG,UAAZ;AACD;;AACD,SAAO,IAAP;AACD",
    "sourcesContent": [
        "import __matches from './matches';\n\n/**\n * @name        closest\n * @namespace           sugar.js.dom\n * @type      Function\n *\n * Go up the dom three to find the first element that matches the passed selector\n *\n * @param \t\t{HTMLElement} \t\t\t\t\t$elm  \t\tThe element to start on\n * @param \t\t{String|Function} \t\t\t\tselector \tA css selector to search for or a check function that will be used\n * @return \t\t{HTMLElement} \t\t\t\t\t\t\t\tThe element found or null\n *\n * @example  \tjs\n * import closest from '@coffeekraken/sugar/js/dom/closest'\n * const closestElm = closest(myCoolElement, '.my-cool-class');\n * if (closestElm) {\n * \t\t// we have found en element that matches the selector\n * }\n * // the selector param can be a function that need to return either true or false like so:\n * closest(myCoolElement, (elm) => {\n *   return elm.hasAttribute('my-cool-attribute')\n * })\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function closest($elm, selector) {\n  const originalElm = $elm;\n  $elm = $elm.parentNode;\n  while ($elm && $elm != originalElm.ownerDocument) {\n    if (typeof selector === 'function') {\n      if (selector($elm)) return $elm;\n    } else if (typeof selector === 'string' && __matches($elm, selector)) {\n      return $elm;\n    }\n    $elm = $elm.parentNode;\n  }\n  return null;\n}\n"
    ]
}
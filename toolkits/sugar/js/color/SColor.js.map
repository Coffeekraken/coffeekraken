{
    "version": 3,
    "sources": [
        "SColor.js"
    ],
    "names": [
        "SColor",
        "color",
        "settings",
        "_settings",
        "returnNewInstance",
        "defaultFormat",
        "getColor",
        "_originalSColor",
        "_parse",
        "colors",
        "toLowerCase",
        "r",
        "g",
        "b",
        "a",
        "format",
        "_convert2",
        "amount",
        "parseInt",
        "n",
        "toHex",
        "s",
        "hue",
        "h",
        "newHue",
        "parseFloat",
        "alpha",
        "opacity",
        "l",
        "_r",
        "_g",
        "_b",
        "_a",
        "hsl",
        "hsv",
        "v",
        "toHexString",
        "toHslString",
        "toHsvString",
        "toRgbaString",
        "value",
        "rgba",
        "aliceblue",
        "antiquewhite",
        "aqua",
        "aquamarine",
        "azure",
        "beige",
        "bisque",
        "black",
        "blanchedalmond",
        "blue",
        "blueviolet",
        "brown",
        "burlywood",
        "cadetblue",
        "chartreuse",
        "chocolate",
        "coral",
        "cornflowerblue",
        "cornsilk",
        "crimson",
        "cyan",
        "darkblue",
        "darkcyan",
        "darkgoldenrod",
        "darkgray",
        "darkgreen",
        "darkkhaki",
        "darkmagenta",
        "darkolivegreen",
        "darkorange",
        "darkorchid",
        "darkred",
        "darksalmon",
        "darkseagreen",
        "darkslateblue",
        "darkslategray",
        "darkturquoise",
        "darkviolet",
        "deeppink",
        "deepskyblue",
        "dimgray",
        "dodgerblue",
        "firebrick",
        "floralwhite",
        "forestgreen",
        "fuchsia",
        "gainsboro",
        "ghostwhite",
        "gold",
        "goldenrod",
        "gray",
        "green",
        "greenyellow",
        "honeydew",
        "hotpink",
        "indigo",
        "ivory",
        "khaki",
        "lavender",
        "lavenderblush",
        "lawngreen",
        "lemonchiffon",
        "lightblue",
        "lightcoral",
        "lightcyan",
        "lightgoldenrodyellow",
        "lightgrey",
        "lightgreen",
        "lightpink",
        "lightsalmon",
        "lightseagreen",
        "lightskyblue",
        "lightslategray",
        "lightsteelblue",
        "lightyellow",
        "lime",
        "limegreen",
        "linen",
        "magenta",
        "maroon",
        "mediumaquamarine",
        "mediumblue",
        "mediumorchid",
        "mediumpurple",
        "mediumseagreen",
        "mediumslateblue",
        "mediumspringgreen",
        "mediumturquoise",
        "mediumvioletred",
        "midnightblue",
        "mintcream",
        "mistyrose",
        "moccasin",
        "navajowhite",
        "navy",
        "oldlace",
        "olive",
        "olivedrab",
        "orange",
        "orangered",
        "orchid",
        "palegoldenrod",
        "palegreen",
        "paleturquoise",
        "palevioletred",
        "papayawhip",
        "peachpuff",
        "peru",
        "pink",
        "plum",
        "powderblue",
        "purple",
        "red",
        "rosybrown",
        "royalblue",
        "saddlebrown",
        "salmon",
        "sandybrown",
        "seagreen",
        "seashell",
        "sienna",
        "silver",
        "skyblue",
        "slateblue",
        "slategray",
        "snow",
        "springgreen",
        "steelblue",
        "tan",
        "teal",
        "thistle",
        "tomato",
        "turquoise",
        "violet",
        "wheat",
        "white",
        "whitesmoke",
        "yellow",
        "yellowgreen"
    ],
    "mappings": "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",
    "sourcesContent": [
        "import __deepMerge from '../object/deepMerge';\nimport __parseRgba from './parseRgba';\nimport __parseHsl from './parseHsl';\nimport __parseHsv from './parseHsv';\nimport __rgba2hex from './rgba2hex';\nimport __hex2rgba from './hex2rgba';\nimport __hsv2rgba from './hsv2rgba';\nimport __hsl2rgba from './hsl2rgba';\nimport __rgba2hsv from './rgba2hsv';\nimport __rgba2hsl from './rgba2hsl';\nimport __parse from './parse';\nimport __convert from './convert';\n\n/**\n * @name \t\tSColor\n * @namespace           sugar.js.color\n * @type    Class\n *\n * Class that provide complete and simple to use color manupilation capabilities like:\n * - Modifiers\n * \t- opacity\n * \t- darken\n * \t- lighten\n * \t- desaturate\n * \t- saturate\n * \t- spin (change hue)\n * \t- transparentize\n * \t- alpha\n * \t- grayscale\n * - Conversions\n * \t- rgba\n * \t- hsl\n * \t- hsv\n * \t- hex\n * - Print out formats\n * \t- toRgbaString\n * \t- toHslString\n * \t- toHsvString\n * \t- toHexString\n * \t- toString(format = null)\n *\n * @example \tjs\n * import SColor from '@coffeekraken/sugar/js/classes/SColor'\n * let myColor = new SColor(#ff0000);\n * // get a lighter color\n * let ligtherColor = myColor.lighten(20);\n * // print the color to rgba\n * console.log(lighterColor.toRgbaString());\n *\n * @since     2.0.0\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\n\nclass SColor {\n  /**\n   * @name                colors\n   * @type                Object\n   * @protected\n   * @static\n   *\n   * Static color names map\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  static colors = {\n    aliceblue: '#f0f8ff',\n    antiquewhite: '#faebd7',\n    aqua: '#00ffff',\n    aquamarine: '#7fffd4',\n    azure: '#f0ffff',\n    beige: '#f5f5dc',\n    bisque: '#ffe4c4',\n    black: '#000000',\n    blanchedalmond: '#ffebcd',\n    blue: '#0000ff',\n    blueviolet: '#8a2be2',\n    brown: '#a52a2a',\n    burlywood: '#deb887',\n    cadetblue: '#5f9ea0',\n    chartreuse: '#7fff00',\n    chocolate: '#d2691e',\n    coral: '#ff7f50',\n    cornflowerblue: '#6495ed',\n    cornsilk: '#fff8dc',\n    crimson: '#dc143c',\n    cyan: '#00ffff',\n    darkblue: '#00008b',\n    darkcyan: '#008b8b',\n    darkgoldenrod: '#b8860b',\n    darkgray: '#a9a9a9',\n    darkgreen: '#006400',\n    darkkhaki: '#bdb76b',\n    darkmagenta: '#8b008b',\n    darkolivegreen: '#556b2f',\n    darkorange: '#ff8c00',\n    darkorchid: '#9932cc',\n    darkred: '#8b0000',\n    darksalmon: '#e9967a',\n    darkseagreen: '#8fbc8f',\n    darkslateblue: '#483d8b',\n    darkslategray: '#2f4f4f',\n    darkturquoise: '#00ced1',\n    darkviolet: '#9400d3',\n    deeppink: '#ff1493',\n    deepskyblue: '#00bfff',\n    dimgray: '#696969',\n    dodgerblue: '#1e90ff',\n    firebrick: '#b22222',\n    floralwhite: '#fffaf0',\n    forestgreen: '#228b22',\n    fuchsia: '#ff00ff',\n    gainsboro: '#dcdcdc',\n    ghostwhite: '#f8f8ff',\n    gold: '#ffd700',\n    goldenrod: '#daa520',\n    gray: '#808080',\n    green: '#008000',\n    greenyellow: '#adff2f',\n    honeydew: '#f0fff0',\n    hotpink: '#ff69b4',\n    'indianred ': '#cd5c5c',\n    indigo: '#4b0082',\n    ivory: '#fffff0',\n    khaki: '#f0e68c',\n    lavender: '#e6e6fa',\n    lavenderblush: '#fff0f5',\n    lawngreen: '#7cfc00',\n    lemonchiffon: '#fffacd',\n    lightblue: '#add8e6',\n    lightcoral: '#f08080',\n    lightcyan: '#e0ffff',\n    lightgoldenrodyellow: '#fafad2',\n    lightgrey: '#d3d3d3',\n    lightgreen: '#90ee90',\n    lightpink: '#ffb6c1',\n    lightsalmon: '#ffa07a',\n    lightseagreen: '#20b2aa',\n    lightskyblue: '#87cefa',\n    lightslategray: '#778899',\n    lightsteelblue: '#b0c4de',\n    lightyellow: '#ffffe0',\n    lime: '#00ff00',\n    limegreen: '#32cd32',\n    linen: '#faf0e6',\n    magenta: '#ff00ff',\n    maroon: '#800000',\n    mediumaquamarine: '#66cdaa',\n    mediumblue: '#0000cd',\n    mediumorchid: '#ba55d3',\n    mediumpurple: '#9370d8',\n    mediumseagreen: '#3cb371',\n    mediumslateblue: '#7b68ee',\n    mediumspringgreen: '#00fa9a',\n    mediumturquoise: '#48d1cc',\n    mediumvioletred: '#c71585',\n    midnightblue: '#191970',\n    mintcream: '#f5fffa',\n    mistyrose: '#ffe4e1',\n    moccasin: '#ffe4b5',\n    navajowhite: '#ffdead',\n    navy: '#000080',\n    oldlace: '#fdf5e6',\n    olive: '#808000',\n    olivedrab: '#6b8e23',\n    orange: '#ffa500',\n    orangered: '#ff4500',\n    orchid: '#da70d6',\n    palegoldenrod: '#eee8aa',\n    palegreen: '#98fb98',\n    paleturquoise: '#afeeee',\n    palevioletred: '#d87093',\n    papayawhip: '#ffefd5',\n    peachpuff: '#ffdab9',\n    peru: '#cd853f',\n    pink: '#ffc0cb',\n    plum: '#dda0dd',\n    powderblue: '#b0e0e6',\n    purple: '#800080',\n    red: '#ff0000',\n    rosybrown: '#bc8f8f',\n    royalblue: '#4169e1',\n    saddlebrown: '#8b4513',\n    salmon: '#fa8072',\n    sandybrown: '#f4a460',\n    seagreen: '#2e8b57',\n    seashell: '#fff5ee',\n    sienna: '#a0522d',\n    silver: '#c0c0c0',\n    skyblue: '#87ceeb',\n    slateblue: '#6a5acd',\n    slategray: '#708090',\n    snow: '#fffafa',\n    springgreen: '#00ff7f',\n    steelblue: '#4682b4',\n    tan: '#d2b48c',\n    teal: '#008080',\n    thistle: '#d8bfd8',\n    tomato: '#ff6347',\n    turquoise: '#40e0d0',\n    violet: '#ee82ee',\n    wheat: '#f5deb3',\n    white: '#ffffff',\n    whitesmoke: '#f5f5f5',\n    yellow: '#ffff00',\n    yellowgreen: '#9acd32'\n  };\n\n  /**\n   * @name                _originalSColor\n   * @type                Object\n   * @private\n   *\n   * Original color value\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _originalSColor = null;\n\n  /**\n   * @name            _r\n   * @type            Number\n   * @private\n   *\n   * Internal red value\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _r = null;\n\n  /**\n   * @name                _g\n   * @type                Number\n   * @private\n   *\n   * Internal green value\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _g = null;\n\n  /**\n   * @name                  _b\n   * @type                  Number\n   * @private\n   *\n   * Internal blue value\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _b = null;\n\n  /**\n   * @name              _a\n   * @type              Number\n   * @private\n   *\n   * Internal alpha value\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _a = 1;\n\n  /**\n   * @name                  _settings\n   * @type                  Object\n   * @private\n   *\n   * Store the settings passed to the constructor. Here's the list of available settings:\n   * - returnNewInstance (false) {Boolean}: Specify if you want by default a new instance back when calling methods like \"saturate\", \"desaturate\", etc...\n   * - defaultFormat (hex) {String}: Specify the default format for this instance. This is used in the \"toString\" method for example...\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _settings = {};\n\n  /**\n   * @name                  constructor\n   * @type                  Function\n   *\n   * Constructor\n   *\n   * @param   {object}    color     The color description like (#ff0000 | rgba(...) | hsl(...) | hsv(...) | {r:255,r:140,b:23,a:40})\n   * @param       {Object}        [settings={}]         The settings to configure the SColor instance. Here's the available settings:\n   * - returnNewInstance (false) {Boolean}: Specify if you want by default a new instance back when calling methods like \"saturate\", \"desaturate\", etc...\n   * - defaultFormat (hex) {String}: Specify the default format for this instance. This is used in the \"toString\" method for example...\n   * @return    {object}            The color instance\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(color, settings = {}) {\n    // save the instance settings\n    this._settings = __deepMerge(\n      {\n        returnNewInstance: false,\n        defaultFormat: 'hex'\n      },\n      settings\n    );\n\n    // get the actual real color\n    color = this.getColor(color);\n\n    // save the original color\n    this._originalSColor = color;\n\n    // parse the input color to\n    // split into rgba values\n    this._parse(color);\n  }\n\n  /**\n   * @name            getColor\n   * @type            Function\n   *\n   * This method take as parameter the passed color to the constructor and has to return the\n   * actual real color like color from the static colors listed in the SColor class or maybe\n   * from the Sugar configured colors\n   */\n  getColor(color) {\n    // try to get the color from the map\n    if (typeof color == 'string' && SColor.colors[color.toLowerCase()]) {\n      return SColor.colors[color.toLowerCase()];\n    }\n    // return the passed color\n    return color;\n  }\n\n  /**\n   * @name            _parse\n   * @type            Function\n   * @private\n   *\n   * Parse\n   *\n   * @param       {object}      color       The color to parse like (#ff0000 | rgba(...) | hsl(...) | hsv(...) | {r:255,r:140,b:23,a:40})\n   * @return      {object}                  The rgba representation of the passed color\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _parse(color) {\n    // parse the color\n    color = __convert(color, 'rgba');\n    // assign new color values\n    this.r = color.r;\n    this.g = color.g;\n    this.b = color.b;\n    this.a = color.a;\n    // return the parsed color\n    return color;\n  }\n\n  /**\n   * @name              convert2\n   * @type              Function\n   * @private\n   *\n   * Concert color\n   *\n   * @param       \t{string}      \tformat \t      \tThe format wanted as output like (rgba,hsl,hsv and hex)\n   * @values        rgba, hsl, hsv, hex\n   * @return      \t{object} \t                \t\t\tThe color in wanted object format\n   *\n   * @example           js\n   * myColor._convert2('rgba');\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _convert2(format) {\n    switch (format) {\n      case 'rgba':\n        return {\n          r: this.r,\n          g: this.g,\n          b: this.b,\n          a: this.a\n        };\n        break;\n      case 'hsl':\n        return __rgba2hsl(this.r, this.g, this.b, this.a);\n        break;\n      case 'hsv':\n        return __rgba2hsv(this.r, this.g, this.b, this.a);\n        break;\n      case 'hex':\n        return __rgba2hex(this.r, this.g, this.b, this.a);\n        break;\n    }\n  }\n\n  /**\n   * @name                toHex\n   * @type                Function\n   *\n   * To hex\n   *\n   * @return \t{string} \t\tThe hex string representation\n   *\n   * @example           js\n   * myColor.toHex();\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  toHex() {\n    return this._convert2('hex');\n  }\n\n  /**\n   * @name            toHsl\n   * @type            Function\n   *\n   * To hsl\n   *\n   * @return \t{object} \t\tThe hsl object representation\n   *\n   * @example       js\n   * myColor.toHsl();\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  toHsl() {\n    return this._convert2('hsl');\n  }\n\n  /**\n   * @name              toHsv\n   * @type              Function\n   *\n   * To hsv\n   *\n   * @return \t{object} \t\tThe hsv object representation\n   *\n   * @example         js\n   * myColor.toHsv();\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  toHsv() {\n    return this._convert2('hsv');\n  }\n\n  /**\n   * @name            toRgba\n   * @type            Function\n   *\n   * To rgba\n   *\n   * @return \t{object} \t\tThe rgba object representation\n   *\n   * @example         js\n   * myColor.toRgba();\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  toRgba() {\n    return this._convert2('rgba');\n  }\n\n  /**\n   * @name            r\n   * @type            Number\n   *\n   * Get/set the red value\n   *\n   * @example         js\n   * myColor.r;\n   * myColor.r = 128;\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get r() {\n    return this._r;\n  }\n  set r(value) {\n    value = parseInt(value);\n    value = value > 255 ? 255 : value;\n    this._r = value;\n  }\n\n  /**\n   * @name              g\n   * @type              Number\n   *\n   * Get/set the green value\n   *\n   * @example         js\n   * myColor.g;\n   * myColor.g = 20;\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get g() {\n    return this._g;\n  }\n  set g(value) {\n    value = parseInt(value);\n    value = value > 255 ? 255 : value;\n    this._g = value;\n  }\n\n  /**\n   * @name              b\n   * @type              Number\n   *\n   * Get/set the blue value\n   *\n   * @example           js\n   * myColor.b;\n   * myColor.b = 30;\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get b() {\n    return this._b;\n  }\n  set b(value) {\n    value = parseInt(value);\n    value = value > 255 ? 255 : value;\n    this._b = value;\n  }\n\n  /**\n   * @name              a\n   * @type              Number\n   *\n   * Get/set the alpha value\n   *\n   * @example       js\n   * myColor.a;\n   * myColor.a = 20;\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get a() {\n    return this._a;\n  }\n  set a(value) {\n    value = parseFloat(value);\n    value = value > 1 ? (1 / 100) * value : value;\n    value = value > 1 ? 1 : value;\n    this._a = value;\n  }\n\n  /**\n   * @name              l\n   * @type              Number\n   *\n   * The luminence value\n   *\n   * @example             js\n   * myColor.l;\n   * myColor.l = 10;\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get l() {\n    return this._convert2('hsl').l;\n  }\n  set l(value) {\n    let hsl = this._convert2('hsl');\n    value = parseInt(value);\n    value = value > 100 ? 100 : value;\n    hsl.l = value;\n    let rgba = __hsl2rgba(hsl.h, hsl.s, hsl.l);\n    this.r = rgba.r;\n    this.g = rgba.g;\n    this.b = rgba.b;\n  }\n\n  /**\n   * @name              s\n   * @type              Number\n   *\n   * The saturation value\n   *\n   * @example         js\n   * myColor.s;\n   * myColor.s = 20;\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get s() {\n    return this._convert2('hsl').s;\n  }\n  set s(value) {\n    let hsl = this._convert2('hsl');\n    value = parseInt(value);\n    value = value > 100 ? 100 : value;\n    hsl.s = value;\n    let rgba = __hsl2rgba(hsl.h, hsl.s, hsl.l);\n    this.r = rgba.r;\n    this.g = rgba.g;\n    this.b = rgba.b;\n  }\n\n  /**\n   * @name                  v\n   * @type                  Number\n   *\n   * The value of the HSV format\n   *\n   * @example         js\n   * myColor.v;\n   * myColor.v = 20;\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get v() {\n    return this._convert2('hsv').v;\n  }\n  set v(value) {\n    let hsv = this._convert2('hsv');\n    value = parseInt(value);\n    value = value > 100 ? 100 : value;\n    hsv.v = value;\n    let rgba = __hsv2rgba(hsv.h, hsv.s, hsv.v);\n    this.r = rgba.r;\n    this.g = rgba.g;\n    this.b = rgba.b;\n  }\n\n  /**\n   * @name              h\n   * @type              Number\n   *\n   * Get/set the hue\n   *\n   * @example         js\n   * myColor.h;\n   * myColor.h = 30;\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get h() {\n    return this._convert2('hsl').h;\n  }\n  set h(value) {\n    let hsl = this._convert2('hsl');\n    value = parseInt(value);\n    value = value > 360 ? 360 : value;\n    hsl.h = value;\n    let rgba = __hsl2rgba(hsl.h, hsl.s, hsl.l);\n    this.r = rgba.r;\n    this.g = rgba.g;\n    this.b = rgba.b;\n  }\n\n  /**\n   * @name          reset\n   * @type          Function\n   *\n   * Reset to the original color\n   *\n   * @example         js\n   * myColor.reset();\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  reset() {\n    // parse again the color\n    this._parse(this._originalSColor);\n  }\n\n  /**\n   * @name                desaturate\n   * @type                Function\n   *\n   * Desaturate\n   *\n   * @param         \t{Number} \t          amount \t        \tThe amount of desaturation wanted between 0-100\n   * @param           {Boolean}           [returnNewInstance=this._settings.returnNewInstance]        Specify if you want back a new SColor instance of the actual one\n   * @return \t        {SColor} \t\t\t                      \tA new SColor instance or the actual one\n   *\n   * @example           js\n   * myColor.desaturate(20);\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  desaturate(amount, returnNewInstance = this._settings.returnNewInstance) {\n    amount = parseInt(amount);\n    if (returnNewInstance) {\n      const n = new SColor(this.toHex());\n      n.s -= amount;\n      return n;\n    }\n    this.s -= amount;\n    return this;\n  }\n\n  /**\n   * @name                saturate\n   * @type                Function\n   *\n   * Saturate\n   *\n   * @param         \t{Number}        \tamount \t            \tThe amount of saturation wanted between 0-100\n   * @param           {Boolean}           [returnNewInstance=this._settings.returnNewInstance]        Specify if you want back a new SColor instance of the actual one\n   * @return \t        {SColor} \t\t\t                         \tA new SColor instance or the actual one\n   *\n   * @example         js\n   * myColor.saturate(20);\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  saturate(amount, returnNewInstance = this._settings.returnNewInstance) {\n    amount = parseInt(amount);\n    if (returnNewInstance) {\n      const n = new SColor(this.toHex());\n      n.s += amount;\n      return n;\n    }\n    this.s += amount;\n    return this;\n  }\n\n  /**\n   * @name                      grayscale\n   * @type                      Function\n   *\n   * Return a new SColor instance of the color to grayscale\n   *\n   * @param           {Boolean}           [returnNewInstance=this._settings.returnNewInstance]        Specify if you want back a new SColor instance of the actual one\n   * @return \t{SColor} \t\t\tA new SColor instance or the actual one\n   *\n   * @example           js\n   * myColor.grayscale();\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  grayscale(returnNewInstance = this._settings.returnNewInstance) {\n    if (returnNewInstance) {\n      const n = new SColor(this.toHex());\n      n.s = 0;\n      return n;\n    }\n    this.s = 0;\n    return this;\n  }\n\n  /**\n   * @name              spin\n   * @type              Function\n   *\n   * Spin the hue on the passed value (max 360)\n   *\n   * @param             \t{Number}            \tamount \t\t          \tThe amount of hue spin wanted between 0-360\n   * @param           {Boolean}           [returnNewInstance=this._settings.returnNewInstance]        Specify if you want back a new SColor instance of the actual one\n   * @return \t            {SColor} \t\t\t\t                          \tA new SColor instance or the actual one\n   *\n   * @example           js\n   * myColor.spin(230);\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  spin(amount, returnNewInstance = this._settings.returnNewInstance) {\n    amount = parseInt(amount);\n    let hue = this.h;\n    let newHue = hue + amount;\n    if (newHue > 360) {\n      newHue -= 360;\n    }\n    if (returnNewInstance) {\n      const n = new SColor(this.toHex());\n      n.h = newHue;\n      return n;\n    }\n    this.h = newHue;\n    return this;\n  }\n\n  /**\n   * @name              transparentize\n   * @type              Function\n   *\n   * Transparentize\n   *\n   * @param             \t{Number} \t          \tamount \t\t          \tThe amount of transparence to apply between 0-100|0-1\n   * @param           {Boolean}           [returnNewInstance=this._settings.returnNewInstance]        Specify if you want back a new SColor instance of the actual one\n   * @return            \t{SColor} \t\t\t\t\t                        \tA new SColor instance or the actual one\n   *\n   * @example           js\n   * myColor.transparenize(30);\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  transparentize(amount, returnNewInstance = this._settings.returnNewInstance) {\n    amount = parseFloat(amount);\n    if (returnNewInstance) {\n      const n = new SColor(this.toHex());\n      n.a -= amount;\n      return n;\n    }\n    this.a -= amount;\n    return this;\n  }\n\n  /**\n   * @name                alpha\n   * @type                Function\n   *\n   * Set the alpha\n   *\n   * @param           \t{Number} \t            alpha \t\t            \tThe new alpha value to apply between 0-100|0-1\n   * @param           {Boolean}           [returnNewInstance=this._settings.returnNewInstance]        Specify if you want back a new SColor instance of the actual one\n   * @return          \t{SColor} \t\t\t\t\t                            A new SColor instance or the actual one\n   *\n   * @example           js\n   * myColor.alpha(10);\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  alpha(alpha, returnNewInstance = this._settings.returnNewInstance) {\n    alpha = parseFloat(alpha);\n    if (returnNewInstance) {\n      const n = new SColor(this.toHex());\n      n.a = alpha;\n      return n;\n    }\n    this.a = alpha;\n    return this;\n  }\n\n  /**\n   * @name                  opacity\n   * @type                  Function\n   *\n   * Set the opacity (alias for alpha)\n   *\n   * @param \t                {Number}          \topacity \t              \tThe new opacity value to apply between 0-100|0-1\n   * @param           {Boolean}           [returnNewInstance=this._settings.returnNewInstance]        Specify if you want back a new SColor instance of the actual one\n   * @return                \t{SColor} \t\t\t                            \t\tA new SColor instance or the actual one\n   *\n   * @example               js\n   * myColor.opacity(20);\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  opacity(opacity, returnNewInstance = this._settings.returnNewInstance) {\n    return this.alpha(opacity, returnNewInstance);\n  }\n\n  /**\n   * @name                  opacify\n   * @type                  Function\n   *\n   * Opacify\n   *\n   * @param \t          {Number} \t            amount \t\t              The amount of transparence to remove between 0-100|0-1\n   * @param           {Boolean}           [returnNewInstance=this._settings.returnNewInstance]        Specify if you want back a new SColor instance of the actual one\n   * @return          \t{SColor} \t\t\t                              \tA new SColor instance or the actual one\n   *\n   * @example           js\n   * myColor.opacify(18);\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  opacify(amount, returnNewInstance = this._settings.returnNewInstance) {\n    amount = parseFloat(amount);\n    if (returnNewInstance) {\n      const n = new SColor(this.toHex());\n      n.a += amount;\n      return n;\n    }\n    this.a += amount;\n    return this;\n  }\n\n  /**\n   * @name                  darken\n   * @type                  Function\n   *\n   * Darken\n   *\n   * @param                 \t{Number} \t                amount \t                \tThe amount of darkness (of the nightmare of the shadow) to apply between 0-100\n   * @param           {Boolean}           [returnNewInstance=this._settings.returnNewInstance]        Specify if you want back a new SColor instance of the actual one\n   * @return                \t{SColor} \t\t\t\t                                    A new SColor instance or the actual one\n   *\n   * @example             js\n   * myColor.darken(20);\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  darken(amount, returnNewInstance = this._settings.returnNewInstance) {\n    amount = parseInt(amount);\n    if (returnNewInstance) {\n      const n = new SColor(this.toHex());\n      n.l -= amount;\n      return n;\n    }\n    this.l -= amount;\n    return this;\n  }\n\n  /**\n   * @name                      lighten\n   * @type                      Function\n   *\n   * Lighten\n   *\n   * @param \t              {Number} \t              amount \t                \tThe amount of lightness (of the sky of the angels) to apply between 0-100\n   * @param           {Boolean}           [returnNewInstance=this._settings.returnNewInstance]        Specify if you want back a new SColor instance of the actual one\n   * @return                \t{SColor} \t\t\t                                  \tA new SColor instance or the actual one\n   *\n   * @example             js\n   * myColor.lighten(20);\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  lighten(amount, returnNewInstance = this._settings.returnNewInstance) {\n    amount = parseInt(amount);\n    if (returnNewInstance) {\n      const n = new SColor(this.toHex());\n      n.l += amount;\n      return n;\n    }\n    this.l += amount;\n    return this;\n  }\n\n  /**\n   * @name                  toHexString\n   * @type                  Function\n   *\n   * To hex string\n   *\n   * @return \t            {string} \t              \tThe hex string representation of the color\n   *\n   * @example           js\n   * myColor.toHexString();\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  toHexString() {\n    return this._convert2('hex');\n  }\n\n  /**\n   * @name                  toRgbaString\n   * @type                  Function\n   *\n   * To rgba string\n   *\n   * @return \t              {string} \t              \tThe rgba string representation of the color\n   *\n   * @example           js\n   * myColor.toRgbaString();\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  toRgbaString() {\n    return `rgba(${this._r},${this._g},${this._b},${this._a})`;\n  }\n\n  /**\n   * @name                    toHslString\n   * @type                    Function\n   *\n   * To hsl string\n   *\n   * @return \t              {string} \t              \tThe hsl string representation of the color\n   *\n   * @example             js\n   * myColor.toHslString();\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  toHslString() {\n    const hsl = this._convert2('hsl');\n    return `hsl(${hsl.h},${hsl.s},${hsl.l})`;\n  }\n\n  /**\n   * @name                      toHsvString\n   * @type                      Function\n   *\n   * To hsv string\n   *\n   * @return              \t{string} \t              \tThe hsv string representation of the color\n   *\n   * @example           js\n   * myColor.toHsvString();\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  toHsvString() {\n    const hsv = this._convert2('hsv');\n    return `hsv(${hsv.h},${hsv.s},${hsv.v})`;\n  }\n\n  /**\n   * @name                toString\n   * @type                Function\n   *\n   * To string\n   *\n   * @param       {String}              [format=this._settings.defaultFormat]                The format you want back\n   * @values        hex,hsl,hsv,rgba\n   * @return \t      {string} \t\t                                                      The rgba string representation of the color\n   *\n   * @example         js\n   * myColor.toString();\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  toString(format = this._settings.defaultFormat) {\n    switch (format) {\n      case 'hex':\n        return this.toHexString();\n        break;\n      case 'hsl':\n        return this.toHslString();\n        break;\n      case 'hsv':\n        return this.toHsvString();\n        break;\n      case 'rgba':\n      default:\n        return this.toRgbaString();\n        break;\n    }\n  }\n}\n\n// // inject sugar css colors into class\n// __domReady(() => {\n//   // get settings\n//   if (!__settings || !__settings.colors) return;\n\n//   // loop on each colors\n//   for (let colorName in __settings.colors) {\n//     const color = __settings.colors[colorName];\n//     if (!color) return;\n\n//     if (color.color) {\n//       SColor.colors[colorName] = color.color;\n//     }\n//     // modifiers\n//     if (color.modifiers) {\n//       // loop on modifiers\n//       for (let modifierName in color.modifiers) {\n//         const modifierColor = color.modifiers[modifierName];\n//         SColor.colors[`${colorName}--${modifierName}`] = modifierColor;\n//       }\n//     }\n//   }\n// });\n\n// export class\nexport default SColor;\n"
    ]
}
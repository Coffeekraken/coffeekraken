{
    "version": 3,
    "sources": [
        "parse.js"
    ],
    "names": [
        "parse",
        "color",
        "format",
        "replace",
        "indexOf",
        "h",
        "s",
        "v",
        "l",
        "substring"
    ],
    "mappings": ";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;AAkBe,SAASA,KAAT,CAAeC,KAAf,EAAsBC,MAAtB,EAAuC;AAAA,MAAjBA,MAAiB;AAAjBA,IAAAA,MAAiB,GAAR,MAAQ;AAAA;;AACpDD,EAAAA,KAAK,GAAGA,KAAK,CAACE,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAR;;AACA,MAAIF,KAAK,CAACG,OAAN,CAAc,KAAd,KAAwB,CAAC,CAA7B,EAAgC;AAC9BH,IAAAA,KAAK,GAAG,wBAAYA,KAAZ,CAAR;AACD,GAFD,MAEO,IAAIA,KAAK,CAACG,OAAN,CAAc,KAAd,KAAwB,CAAC,CAA7B,EAAgC;AACrCH,IAAAA,KAAK,GAAG,uBAAWA,KAAX,CAAR;AACAA,IAAAA,KAAK,GAAG,uBAAWA,KAAK,CAACI,CAAjB,EAAoBJ,KAAK,CAACK,CAA1B,EAA6BL,KAAK,CAACM,CAAnC,CAAR;AACD,GAHM,MAGA,IAAIN,KAAK,CAACG,OAAN,CAAc,KAAd,KAAwB,CAAC,CAA7B,EAAgC;AACrCH,IAAAA,KAAK,GAAG,uBAAWA,KAAX,CAAR;AACAA,IAAAA,KAAK,GAAG,uBAAWA,KAAK,CAACI,CAAjB,EAAoBJ,KAAK,CAACK,CAA1B,EAA6BL,KAAK,CAACO,CAAnC,CAAR;AACD,GAHM,MAGA,IAAIP,KAAK,CAACQ,SAAN,CAAgB,CAAhB,EAAmB,CAAnB,KAAyB,GAA7B,EAAkC;AACvCR,IAAAA,KAAK,GAAG,uBAAWA,KAAX,CAAR;AACD;;AAED,UAAQC,MAAR;AACE,SAAK,KAAL;AACE,aAAO,uBAAWD,KAAX,CAAP;AACA;;AACF,SAAK,KAAL;AACE,aAAO,uBAAWA,KAAX,CAAP;AACA;;AACF,SAAK,MAAL;AACA;AACE,aAAOA,KAAP;AACA;AAVJ;AAYD",
    "sourcesContent": [
        "import __parseRgba from './parseRgba';\nimport __parseHsv from './parseHsv';\nimport __hsv2rgba from './hsv2rgba';\nimport __parseHsl from './parseHsl';\nimport __hsl2rgba from './hsl2rgba';\nimport __hex2rgba from './hex2rgba';\nimport __rgba2hsl from './rgba2hsl';\nimport __rgba2hsv from './rgba2hsv';\n\n/**\n * @name            parse\n * @namespace           sugar.js.color\n * @type            Function\n * @private\n *\n * Parse a string and return you the wanted object format like \"rgba\", \"hsl\" or \"hsv\".\n *\n * @param       {Object}      color       The color to parse like (#ff0000 | rgba(...) | hsl(...) | hsv(...))\n * @param       {String}      [format='rgba']       The object format wanted. Can be \"rgba\", \"hsl\" or \"hsv\"\n * @return      {Object}                  The rgba representation of the passed color\n *\n * @example         js\n * import parse from '@coffeekraken/sugar/js/color/parse';\n * parse('rgba(10,20,30,100)'); // => { r: 10, b: 20, b: 30, a: 100 }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function parse(color, format = 'rgba') {\n  color = color.replace(/\\s/g, '');\n  if (color.indexOf('rgb') != -1) {\n    color = __parseRgba(color);\n  } else if (color.indexOf('hsv') != -1) {\n    color = __parseHsv(color);\n    color = __hsv2rgba(color.h, color.s, color.v);\n  } else if (color.indexOf('hsl') != -1) {\n    color = __parseHsl(color);\n    color = __hsl2rgba(color.h, color.s, color.l);\n  } else if (color.substring(0, 1) == '#') {\n    color = __hex2rgba(color);\n  }\n\n  switch (format) {\n    case 'hsl':\n      return __rgba2hsl(color);\n      break;\n    case 'hsv':\n      return __rgba2hsv(color);\n      break;\n    case 'rgba':\n    default:\n      return color;\n      break;\n  }\n}\n"
    ]
}
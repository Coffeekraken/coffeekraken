{
    "version": 3,
    "sources": [
        "SConfig.js"
    ],
    "names": [
        "_SConfigLoadingByAdapter",
        "SConfig",
        "name",
        "settings",
        "test",
        "Error",
        "_name",
        "_settings",
        "adapters",
        "defaultAdapter",
        "allowSave",
        "allowSet",
        "allowReset",
        "allowNew",
        "autoLoad",
        "autoSave",
        "throwErrorOnUndefinedConfig",
        "forEach",
        "adapter",
        "__SConfigAdapter",
        "constructor",
        "_adapters",
        "instance",
        "config",
        "Object",
        "keys",
        "load",
        "length",
        "Promise",
        "resolve",
        "then",
        "c",
        "undefined",
        "i",
        "save",
        "path",
        "value",
        "val",
        "prop",
        "fullPath",
        "substr",
        "get",
        "replace",
        "reg",
        "matches",
        "match"
    ],
    "mappings": "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",
    "sourcesContent": [
        "import __deepMerge from '../object/deepMerge';\nimport __get from '../object/get';\nimport __set from '../object/set';\nimport __resolveTokens from '../object/resolveTokens';\n\nimport __isPlainObject from '../is/plainObject';\nimport __deepMap from '../object/deepMap';\nimport __SConfigAdapter from './adapters/SConfigAdapter';\n\n// TODO: Add a \"catch\" method that allows to get the saving errors, etc...\n\n/**\n * @name                                            config\n * @namespace           sugar.js.config\n * @type                                            Class\n *\n * This class allows you to quickly access/update some configuration depending on the data adapters specified.\n * The base available data adapters are:\n * - For node:\n *  - File system adapter: @coffeekraken/sugar/node/config/adapters/SConfigFsAdapter\n * - For js:\n *  - Localstorage adapter: @coffeekraken/sugar/js/config/adapters/SConfigLsAdapter\n *\n * @example             js\n * import SConfig from '@coffeekraken/sugar/js/config/SConfig';\n * import SConfigLsAdapter from '@coffeekraken/sugar/js/config/adapters/SConfigLsAdapter';\n * const config = new SConfig({\n *   adapters: [\n *    new SConfigLsAdapter()\n *   ]\n * });\n * await config.get('log.frontend.mail.host'); // => gmail.google.com\n * await config.set('log.frontend.mail.host', 'mailchimp.com');\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nconst _SConfigLoadingByAdapter = {};\nexport default class SConfig {\n  /**\n   * @name              _name\n   * @type              {String}\n   * @private\n   *\n   * The name of the config\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _name = null;\n\n  /**\n   * @name            _adapters\n   * @type            {Object}\n   * @private\n   *\n   * Save the registered adapters instances\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _adapters = {};\n\n  /**\n   * @name             _settings\n   * @type              {Object}\n   * @private\n   *\n   * Store the actual settings object\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _settings = {};\n\n  /**\n   * @name                  constructor\n   * @type                  Function\n   *\n   * Init the config instance by passing a name and a settings object to configure your instance\n   *\n   * @param                 {String}Â                    name                  The name of the config\n   * @param                {Object}                    [settings={}]\n   * An object to configure your SConfig instance. See the list above\n   * The available settings are:\n   * - adapters ([]) {Array}: An array of adapters instances to use for this SConfig instance\n   * - defaultAdapter (null) {String}: This specify which adapter you want to use as default one. If not set, take the first adapter in the adapters list\n   * - allowSave (true) {Boolean}: Specify if this instance can save the updated configs\n   * - allowSet (true) {Boolean}: Specify if you can change the configs during the process or not\n   * - allowReset (true) {Boolean}: Specify if you can rest the configs during the process or not\n   * - allowNew (false) {Boolean}: Specify you can create new configs with this instance or not\n   * - autoLoad (true) {Boolean}: Specify if you want the config to be loaded automatically at instanciation\n   * - autoSave (true) {Boolean}: Specify if you want the setting to be saved through the adapters directly on \"set\" action\n   * - throwErrorOnUndefinedConfig (true) {Boolean}: Specify if you want the class to throw some errors when get undefined configs\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(name, settings = {}) {\n    // store the name\n    if (!/^[a-zA-Z0-9_-]+$/.test(name)) {\n      throw new Error(\n        `The name of an SConfig instance can contain only letters like [a-zA-Z0-9_-]...`\n      );\n    }\n\n    // save the settings name\n    this._name = name;\n\n    // save the settings\n    this._settings = {\n      adapters: [],\n      defaultAdapter: null,\n      allowSave: true,\n      allowSet: true,\n      allowReset: true,\n      allowNew: false,\n      autoLoad: true,\n      autoSave: true,\n      throwErrorOnUndefinedConfig: true,\n      ...settings\n    };\n\n    // init all the adapters if needed\n    this._settings.adapters.forEach((adapter) => {\n      if (!adapter instanceof __SConfigAdapter) {\n        throw new Error(\n          `You have specified the adapter \"${\n            adapter.name || 'unknown'\n          }\" as adapter for your \"${\n            this._name\n          }\" SConfig instance but this adapter does not extends the SConfigAdapter class...`\n        );\n      }\n\n      // make sure we have a name for this adapter\n      if (!adapter.name) {\n        adapter.name = this._name + ':' + adapter.constructor.name;\n      } else {\n        adapter.name = this._name + ':' + adapter.name;\n      }\n\n      this._adapters[adapter.name] = {\n        instance: adapter,\n        config: {}\n      };\n    });\n\n    // set the default get adapter if it has not been specified in the settings\n    if (!this._settings.defaultAdapter) {\n      this._settings.defaultAdapter = Object.keys(this._adapters)[0];\n    }\n\n    // load the config from the default adapter if the setting \"autoLoad\" is true\n    if (this._settings.autoLoad) {\n      this.load();\n    }\n  }\n\n  /**\n   * @name                                load\n   * @type                                Function\n   *\n   * Load the config from the default adapter or from the passed adapter\n   *\n   * @param           {String}            [adapter=this._settings.defaultAdapter]         The adapter to use to load the config\n   * @return          {Promise}                                                           A promise that will be resolved with the loaded config\n   *\n   * @example           js\n   * const config = await config.load();\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  load(adapter = this._settings.defaultAdapter) {\n    // make sure we load only once the config\n    // if (_SConfigLoadingByAdapter[adapter]) {\n    //   return null;\n    // }\n    // _SConfigLoadingByAdapter[adapter] = true;\n\n    if (!this._adapters[adapter]) {\n      throw new Error(\n        `You try to load the config from the adapter \"${adapter}\" but this adapter does not exists...`\n      );\n    }\n\n    if (Object.keys(this._adapters[adapter].config).length !== 0) {\n      return this._adapters[adapter].config;\n    }\n\n    let config = this._adapters[adapter].instance.load();\n    if (config instanceof Promise) {\n      return new Promise((resolve) => {\n        config.then((c) => {\n          if (Object.keys(this._adapters[adapter].config).length === 0 && c) {\n            this._adapters[adapter].config = c;\n            return resolve(c);\n          }\n          return resolve(this._adapters[adapter].config);\n        });\n      });\n    } else if (__isPlainObject(config)) {\n      this._adapters[adapter].config = config;\n      return config;\n    } else if (config !== null && config !== undefined) {\n      throw new Error(\n        `SConfig: Your \"load\" method of the \"${adapter}\" adapter has to return either a plain object, or a Promise resolved with a plain object. The returned value is \"${config}\" which is of type \"${typeof config}\"...`\n      );\n    }\n  }\n\n  /**\n   * @name                          save\n   * @type                          Function\n   *\n   * Save the config through all the registered adapters or just the one specify in params\n   *\n   * @param           {String|Array}          [adapters=Object.keys(this._adapters)]        The adapters to save the config through\n   * @return          {Promise}Â                                                              A promise once all the adapters have correctly saved the config\n   *\n   * @example           js\n   * await config.save();\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  save(adapters = Object.keys(this._adapters)) {\n    if (!this._settings.allowSave) {\n      throw new Error(\n        `You try to save the config on the \"${this._name}\" SConfig instance but this instance does not allow to save configs... Set the \"settings.allowSave\" property to allow this action...`\n      );\n    }\n\n    for (let i = 0; i < adapters.length; i++) {\n      const adapter = adapters[i];\n\n      if (adapter && !this._adapters[adapter]) {\n        throw new Error(\n          `You try to save the config on the \"${this._name}\" SConfig instance using the adapter \"${adapter}\" but this adapter does not exists...`\n        );\n      }\n\n      this._adapters[adapter].instance.save(this._adapters[adapter].config);\n    }\n\n    // all saved correctly\n    return true;\n  }\n\n  /**\n   * @name                                get\n   * @type                                Function\n   *\n   * Get a config depending on the dotted object path passed and either using the first registered adapter found, or the passed one\n   *\n   * @param                 {String}Â                      path                 The dotted object path for the value wanted\n   * @param                 {String}                      [adapter=null]       The data adapter that you want to use to retreive this value\n   * @param                 {Object}                      [settings={}]         The same object settings that you can pass in the constructor but just for this get process\n   * @return                {Mixed}                                            The value getted\n   *\n   * @example               js\n   * await config.get('log.frontend.mail.host'); // => gmail.google.com\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get(path, adapter = this._settings.defaultAdapter, settings = {}) {\n    settings = __deepMerge(this._settings, settings);\n\n    if (adapter && !this._adapters[adapter]) {\n      throw new Error(\n        `You try to get the config value \"${path}\" using the adapter \"${adapter}\" but this adapter does not exists...`\n      );\n    }\n\n    if (Object.keys(this._adapters[adapter].config).length === 0) {\n      this.load();\n    }\n\n    let value = __get(this._adapters[adapter].config, path);\n\n    // if (typeof value === 'function') {\n    //   console.log('COCOC');\n    //   const _get = this.get.bind(this);\n    //   value = value(_get);\n    // }\n\n    if (__isPlainObject(value)) {\n      value = __deepMap(value, (val, prop, fullPath) => {\n        // check if we get some things to use as variable\n        if (typeof val === 'string') {\n          if (val.substr(0, 7) === '@config') {\n            val = this.get(val.replace('@config.', ''), adapter);\n            return val;\n          }\n\n          const reg = /\\[config.[a-zA-Z0-9.]+\\]/gm;\n          const matches = val.match(reg);\n          if (matches && matches.length) {\n            if (matches.length === 1 && val === matches[0]) {\n              val = this.get(\n                matches[0].replace('[config.', '').replace(']', ''),\n                adapter\n              );\n              return val;\n            } else {\n              matches.forEach((match) => {\n                val = val.replace(\n                  match,\n                  this.get(\n                    match.replace('[config.', '').replace(']', ''),\n                    adapter\n                  )\n                );\n              });\n            }\n            return val;\n          }\n        }\n\n        return val;\n      });\n    } else if (typeof value === 'string' && value.substr(0, 7) === '@config') {\n      value = this.get(value.replace('@config.', ''), adapter);\n    }\n\n    if (settings.throwErrorOnUndefinedConfig && value === undefined) {\n      throw new Error(\n        `You try to get the config \"${path}\" on the \"${this._name}\" SConfig instance but this config does not exists...`\n      );\n    }\n\n    return value;\n  }\n\n  /**\n   * @name                                set\n   * @namespace           node.config.SConfig\n   * @type                                Function\n   *\n   * Get a config depending on the dotted object path passed and either using the first registered adapter found, or the passed one\n   *\n   * @param                 {String}Â                      path                 The dotted object path for the value wanted\n   * @param                 {Mixed}Â                       value                 The value to set\n   * @param                 {String|Array}                      [adapters=Object.keys(this._adapters)]       The adapter you want to use or an array of adapters\n   * @return                {Promise}Â                                           A promise resolved once the setting has been correctly set (and save depending on your instance config)\n   *\n   * @example               js\n   * config.set('log.frontend.mail.host', 'coffeekraken.io');\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  set(path, value, adapters = Object.keys(this._adapters)) {\n    if (!this._settings.allowSet) {\n      throw new Error(\n        `You try to set a config value on the \"${this._name}\" SConfig instance but this instance does not allow to set values... Set the \"settings.allowSet\" property to allow this action...`\n      );\n    }\n\n    // check if we allow new config or not\n    if (\n      !this._settings.allowNew &&\n      __get(this._adapters[this._settings.defaultAdapter].config, path) ===\n        undefined\n    ) {\n      throw new Error(\n        `You try to set the config \"${path}\" on the \"${this._name}\" SConfig instance but this config does not exists and this instance does not allow for new config creation...`\n      );\n    }\n\n    adapters.forEach((adapter) => {\n      if (adapter && !this._adapters[adapter]) {\n        throw new Error(\n          `You try to set the config value \"${path}\" using the adapter \"${adapter}\" but this adapter does not exists...`\n        );\n      }\n\n      __set(this._adapters[adapter].config, path, value);\n    });\n\n    // check if need to autoSave or not\n    if (this._settings.autoSave) {\n      return this.save(adapters);\n    }\n\n    // return true\n    return true;\n  }\n}\n"
    ]
}
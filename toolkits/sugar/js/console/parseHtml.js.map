{
    "version": 3,
    "sources": [
        "parseHtml.js"
    ],
    "names": [
        "__chalk",
        "level",
        "tagsMap",
        "black",
        "tag",
        "content",
        "red",
        "green",
        "yellow",
        "blue",
        "magenta",
        "cyan",
        "white",
        "bgBlack",
        "bgRed",
        "bgGreen",
        "bgYellow",
        "bgBlue",
        "bgMagenta",
        "bgCyan",
        "bgWhite",
        "bold",
        "dim",
        "italic",
        "underline",
        "strike",
        "h1",
        "h2",
        "iWarn",
        "parseHtml",
        "iCheck",
        "iCross",
        "iClose",
        "iStart",
        "date",
        "Date",
        "getDate",
        "toString",
        "padStart",
        "getMonth",
        "getFullYear",
        "time",
        "getHours",
        "getMinutes",
        "day",
        "days",
        "month",
        "months",
        "year",
        "years",
        "hour",
        "hours",
        "minute",
        "minutes",
        "second",
        "getSeconds",
        "seconds",
        "br",
        "message",
        "isArray",
        "Array",
        "map",
        "m"
    ],
    "mappings": "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",
    "sourcesContent": [
        "import __replaceTags from '../html/replaceTags';\nimport __chalk from 'chalk';\n__chalk.level = 3;\n\n/**\n * @name                                parseHtml\n * @namespace          sugar.js.console\n * @type                                Function\n *\n * Parse the simple html tags to format the console message\n *\n * @param           {String|Array}                  message                 The message to format of an array of messages to format\n * @return          {String}                                          The formated message\n *\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport const tagsMap = {\n  black: (tag, content) => __chalk.black(content),\n  red: (tag, content) => __chalk.red(content),\n  green: (tag, content) => __chalk.green(content),\n  yellow: (tag, content) => __chalk.yellow(content),\n  blue: (tag, content) => __chalk.blue(content),\n  magenta: (tag, content) => __chalk.magenta(content),\n  cyan: (tag, content) => __chalk.cyan(content),\n  white: (tag, content) => __chalk.white(content),\n\n  bgBlack: (tag, content) => __chalk.bgBlack(content),\n  bgRed: (tag, content) => __chalk.bgRed(content),\n  bgGreen: (tag, content) => __chalk.bgGreen(content),\n  bgYellow: (tag, content) => __chalk.bgYellow(content),\n  bgBlue: (tag, content) => __chalk.bgBlue(content),\n  bgMagenta: (tag, content) => __chalk.bgMagenta(content),\n  bgCyan: (tag, content) => __chalk.bgCyan(content),\n  bgWhite: (tag, content) => __chalk.bgWhite(content),\n\n  bold: (tag, content) => __chalk.bold(content),\n  dim: (tag, content) => __chalk.dim(content),\n  italic: (tag, content) => __chalk.italic(content),\n  underline: (tag, content) => __chalk.underline(content),\n  strike: (tag, content) => __chalk.strike(content),\n\n  h1: (tag, content) => {\n    return __chalk.underline(__chalk.bold(content)) + '\\n\\n';\n  },\n\n  h2: (tag, content) => {\n    return __chalk.bold(content) + '\\n';\n  },\n\n  iWarn: (tag, content) => parseHtml('<yellow>⚠</yellow> '),\n  iCheck: (tag, content) => parseHtml(`<green>✓</green> `),\n  iCross: (tag, content) => parseHtml(`<red>✖</red> `),\n  iClose: (tag, content) => `✖`,\n  iStart: (tag, content) => parseHtml(`<green>‣</green> `),\n\n  date: (tag, content) =>\n    new Date().getDate().toString().padStart('0', 2) +\n    '-' +\n    (new Date().getMonth() + 1).toString().padStart('0', 2) +\n    '-' +\n    new Date().getFullYear().toString().padStart('0', 2),\n  time: (tag, content) =>\n    new Date().getHours().toString().padStart('0', 2) +\n    ':' +\n    new Date().getMinutes().toString().padStart('0', 2) +\n    ':' +\n    new Date().getMinutes().toString().padStart('0', 2),\n  day: (tag, content) => new Date().getDate().toString().padStart('0', 2),\n  days: (tag, content) => new Date().getDate().toString().padStart('0', 2),\n  month: (tag, content) => new Date().getMonth().toString().padStart('0', 2),\n  months: (tag, content) => new Date().getMonth().toString().padStart('0', 2),\n  year: (tag, content) => new Date().getFullYear().toString().padStart('0', 2),\n  years: (tag, content) => new Date().getFullYear().toString().padStart('0', 2),\n  hour: (tag, content) => new Date().getHours().toString().padStart('0', 2),\n  hours: (tag, content) => new Date().getHours().toString().padStart('0', 2),\n  minute: (tag, content) => new Date().getMinutes().toString().padStart('0', 2),\n  minutes: (tag, content) =>\n    new Date().getMinutes().toString().padStart('0', 2),\n  second: (tag, content) => new Date().getSeconds().toString().padStart('0', 2),\n  seconds: (tag, content) =>\n    new Date().getSeconds().toString().padStart('0', 2),\n\n  br: (tag, content) => '\\n'\n};\n\nexport default function parseHtml(message) {\n  let isArray = false;\n  if (Array.isArray(message)) {\n    isArray = true;\n  } else {\n    message = [message];\n  }\n\n  message = message.map((m) => {\n    return __replaceTags(m, tagsMap);\n  });\n\n  if (isArray) return message;\n  return message[0];\n}\n"
    ]
}
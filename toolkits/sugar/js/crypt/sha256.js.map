{
    "version": 3,
    "sources": [
        "sha256.js"
    ],
    "names": [
        "__encryptedMessages",
        "encrypt",
        "message",
        "string",
        "toString",
        "decrypt",
        "console",
        "warn"
    ],
    "mappings": ";;;;;;;AAAA;;AACA;;AACA;;;;AAEA,IAAMA,mBAAmB,GAAG,EAA5B;AAEA;;;;;;;;;;eASe;AACb;;;;;;;;;;;AAWAC,EAAAA,OAAO,EAAE,iBAAUC,OAAV,EAAmB;AAC1B,QAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiCA,OAAO,GAAG,uBAASA,OAAT,CAAV;AACjC,QAAMC,MAAM,GAAG,kBAAOD,OAAP,EAAgBE,QAAhB,EAAf;AACAJ,IAAAA,mBAAmB,CAACG,MAAD,CAAnB,GAA8BD,OAA9B;AACA,WAAOC,MAAP;AACD,GAjBY;;AAmBb;;;;;;;;;;;AAWAE,EAAAA,OAAO,EAAE,iBAAUH,OAAV,EAAmB;AAC1B,QAAI,CAACF,mBAAmB,CAACE,OAAD,CAAxB,EAAmC;AACjCI,MAAAA,OAAO,CAACC,IAAR,yBAA6BL,OAA7B;AACA;AACD;;AACD,QAAMC,MAAM,GAAGH,mBAAmB,CAACE,OAAD,CAAlC;AACA,WAAOF,mBAAmB,CAACE,OAAD,CAA1B;AACA,WAAO,oBAAMC,MAAN,CAAP;AACD;AAtCY,C",
    "sourcesContent": [
        "import sha256 from 'crypto-js/sha256';\nimport toString from '../string/toString';\nimport parse from '../string/parse';\n\nconst __encryptedMessages = {};\n\n/**\n * @name            sha256\n * @namespace           sugar.js.crypt\n * @type            Object\n *\n * Expose two function named \"encrypt\" and \"decrypt\" that you can use to process your content using the sha256 algorithm\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default {\n  /**\n   * @name        encrypt\n   * @type          Function\n   *\n   * Encrypt\n   *\n   * @param       {String}      message         The message to encrypt\n   * @return      {String}                      The encrypted string\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  encrypt: function (message) {\n    if (typeof message !== 'string') message = toString(message);\n    const string = sha256(message).toString();\n    __encryptedMessages[string] = message;\n    return string;\n  },\n\n  /**\n   * @name        decrypt\n   * @type        Function\n   *\n   * Decrypt\n   *\n   * @param       {String}        message         The message to decrypt\n   * @return      {String}                        The decrypted message\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  decrypt: function (message) {\n    if (!__encryptedMessages[message]) {\n      console.warn(`The message \"${message}\" cannot be decrypted...`);\n      return;\n    }\n    const string = __encryptedMessages[message];\n    delete __encryptedMessages[message];\n    return parse(string);\n  }\n};\n"
    ]
}
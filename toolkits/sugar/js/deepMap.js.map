{
    "version": 3,
    "sources": [
        "deepMap.js"
    ],
    "names": [
        "deepMap",
        "object",
        "processor",
        "settings",
        "_path",
        "deepFirst",
        "processObjects",
        "handleArray",
        "Object",
        "keys",
        "forEach",
        "prop",
        "descriptor",
        "getOwnPropertyDescriptor",
        "get",
        "set",
        "Array",
        "isArray",
        "res",
        "join"
    ],
    "mappings": ";;;;;;;AAAA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAwBe,SAASA,OAAT,CAAiBC,MAAjB,EAAyBC,SAAzB,EAAoCC,QAApC,EAAmDC,KAAnD,EAA+D;AAAA,MAA3BD,QAA2B;AAA3BA,IAAAA,QAA2B,GAAhB,EAAgB;AAAA;;AAAA,MAAZC,KAAY;AAAZA,IAAAA,KAAY,GAAJ,EAAI;AAAA;;AAC5ED,EAAAA,QAAQ,GAAG,wBACT;AACEE,IAAAA,SAAS,EAAE,KADb;AAEEC,IAAAA,cAAc,EAAE,KAFlB;AAGEC,IAAAA,WAAW,EAAE;AAHf,GADS,EAMTJ,QANS,CAAX;AAQAK,EAAAA,MAAM,CAACC,IAAP,CAAYR,MAAZ,EAAoBS,OAApB,CAA6BC,IAAD,IAAU;AACpC,QAAMC,UAAU,GAAGJ,MAAM,CAACK,wBAAP,CAAgCZ,MAAhC,EAAwCU,IAAxC,CAAnB;;AAEA,QACEC,UAAU,CAACE,GAAX,IACA,OAAOF,UAAU,CAACE,GAAlB,KAA0B,UAD1B,IAEA,CAACF,UAAU,CAACG,GAHd,EAIE;AACA;AACD;;AAED,QAAI,CAACZ,QAAQ,CAACE,SAAd,EAAyB;AACvB,UACE,0BAAgBJ,MAAM,CAACU,IAAD,CAAtB,KACCK,KAAK,CAACC,OAAN,CAAchB,MAAM,CAACU,IAAD,CAApB,KAA+BR,QAAQ,CAACI,WAF3C,EAGE;AACAN,QAAAA,MAAM,CAACU,IAAD,CAAN,GAAeX,OAAO,CAACC,MAAM,CAACU,IAAD,CAAP,EAAeT,SAAf,EAA0BC,QAA1B,EAAoC,CACxD,GAAGC,KADqD,EAExDO,IAFwD,CAApC,CAAtB;AAIA,YAAI,CAACR,QAAQ,CAACG,cAAd,EAA8B;AAC/B;;AACD,UAAMY,GAAG,GAAGhB,SAAS,CAACD,MAAM,CAACU,IAAD,CAAP,EAAeA,IAAf,EAAqB,CAAC,GAAGP,KAAJ,EAAWO,IAAX,EAAiBQ,IAAjB,CAAsB,GAAtB,CAArB,CAArB;AACA,UAAID,GAAG,KAAK,CAAC,CAAb,EAAgB,OAAOjB,MAAM,CAACU,IAAD,CAAb,CAAhB,KACKV,MAAM,CAACU,IAAD,CAAN,GAAeO,GAAf;AACN,KAdD,MAcO;AACL,UAAMA,IAAG,GAAGhB,SAAS,CAACD,MAAM,CAACU,IAAD,CAAP,EAAeA,IAAf,EAAqB,CAAC,GAAGP,KAAJ,EAAWO,IAAX,EAAiBQ,IAAjB,CAAsB,GAAtB,CAArB,CAArB;;AACA,UAAID,IAAG,KAAK,CAAC,CAAb,EAAgB,OAAOjB,MAAM,CAACU,IAAD,CAAb,CAAhB,KACKV,MAAM,CAACU,IAAD,CAAN,GAAeO,IAAf;;AAEL,UACE,0BAAgBjB,MAAM,CAACU,IAAD,CAAtB,KACCK,KAAK,CAACC,OAAN,CAAchB,MAAM,CAACU,IAAD,CAApB,KAA+BR,QAAQ,CAACI,WAF3C,EAGE;AACAN,QAAAA,MAAM,CAACU,IAAD,CAAN,GAAeX,OAAO,CAACC,MAAM,CAACU,IAAD,CAAP,EAAeT,SAAf,EAA0BC,QAA1B,EAAoC,CACxD,GAAGC,KADqD,EAExDO,IAFwD,CAApC,CAAtB;AAIA,YAAI,CAACR,QAAQ,CAACG,cAAd,EAA8B;AAC/B;AACF;AACF,GAzCD;AA0CA,SAAOL,MAAP;AACD",
    "sourcesContent": [
        "import __isPlainObject from '../is/plainObject';\nimport __deepMerge from '../object/deepMerge';\n\n/**\n * @name            deepMap\n * @namespace           sugar.js.object\n * @type            Function\n *\n * This function is the same as the \"map\" one. The only difference is that this one goes deep into the object\n *\n * @param         {Object}        object          The object you want to map through\n * @param         {Function}      processor       The processor function that take as parameter the actual property value, the current property name and the full dotted path to the current property\n * @param         {Object}Â        [settings={}]     An object of settings to configure your deepMap process:\n * - processObjects (false) {Boolean}: Specify if you want the objects to be processed the same as other values\n * - deepFirst (true) {Boolean}: Specify if you want to process deep values first\n * - handleArray (true) {Boolean}: Specify if we have to treat array like simple value to process of treat them as an object and continue our map down\n *\n * @example       js\n * import deepMap from '@coffeekraken/sugar/js/object/deepMap';\n * deepMap({\n *    hello: 'world'\n * }, (value, prop, fullPath) => {\n *    return '~ ' + value;\n * });\n *\n * @author  Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function deepMap(object, processor, settings = {}, _path = []) {\n  settings = __deepMerge(\n    {\n      deepFirst: false,\n      processObjects: false,\n      handleArray: true\n    },\n    settings\n  );\n  Object.keys(object).forEach((prop) => {\n    const descriptor = Object.getOwnPropertyDescriptor(object, prop);\n\n    if (\n      descriptor.get &&\n      typeof descriptor.get === 'function' &&\n      !descriptor.set\n    ) {\n      return;\n    }\n\n    if (!settings.deepFirst) {\n      if (\n        __isPlainObject(object[prop]) ||\n        (Array.isArray(object[prop]) && settings.handleArray)\n      ) {\n        object[prop] = deepMap(object[prop], processor, settings, [\n          ..._path,\n          prop\n        ]);\n        if (!settings.processObjects) return;\n      }\n      const res = processor(object[prop], prop, [..._path, prop].join('.'));\n      if (res === -1) delete object[prop];\n      else object[prop] = res;\n    } else {\n      const res = processor(object[prop], prop, [..._path, prop].join('.'));\n      if (res === -1) delete object[prop];\n      else object[prop] = res;\n\n      if (\n        __isPlainObject(object[prop]) ||\n        (Array.isArray(object[prop]) && settings.handleArray)\n      ) {\n        object[prop] = deepMap(object[prop], processor, settings, [\n          ..._path,\n          prop\n        ]);\n        if (!settings.processObjects) return;\n      }\n    }\n  });\n  return object;\n}\n"
    ]
}
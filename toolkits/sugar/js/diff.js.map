{
    "version": 3,
    "sources": [
        "diff.js"
    ],
    "names": [
        "diff",
        "object1",
        "object2",
        "settings",
        "deep",
        "added",
        "deleted",
        "equals",
        "emptyObject",
        "updated",
        "finalObj",
        "keys",
        "Array",
        "from",
        "Set",
        "Object",
        "i",
        "length",
        "_prop",
        "undefined"
    ],
    "mappings": "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",
    "sourcesContent": [
        "import __isPlainObject from '../is/plainObject';\nimport __isEqual from 'is-equal';\n\n/**\n * @name                      diff\n * @namespace           sugar.js.object\n * @type                      Function\n *\n * This function take two objects and return an object that contains only what has been changed between the two.\n * This function is a simple wrapper around the nice object-diff package from Thomas Jensen that you can find here: https://www.npmjs.com/package/object-diff\n *\n * @param         {Object}          object1            The first object used for the diff process\n * @param         {Object}          object2            The second object used for the diff process\n * @param         {Object}Â          [settings={}]      An object of settings to configure the diff process:\n * - deep (true) {Boolean}: Specify if you want a deep diff or a simple one level diff\n * - added (true) {Boolean}: Specify if you want to include the props that does not exist on the object1 but exists on the object2\n * - deleted (false) {Boolean}: Specify if you want to include the props that exists on the object1 but no more on the object2\n * - equals (false) {Boolean}: Specify if you want to include the props that are equals from the object1 to the object2\n * - emptyObject (false) {Boolean}: Specify if you want to keep the empty objects in the resulting one\n * - updated (true) {Boolean}: Specify if you want to include the updated values\n * @return        {Object}                             The object that contains only the differences between the two\n *\n * @example         js\n * import diff from '@coffeekraken/sugar/js/object/diff';\n * const myObject1 = {\n *    hello: 'world',\n *    plop: 'yop'\n * };\n * const myObject2 = {\n *    coco: 'plop',\n *    hello: 'hey!',\n *    plop: 'yop'\n * };\n * diff(myObject1, myObject2);\n * {\n *    coco: 'plop',\n *    hello: 'hey!'\n * }\n *\n * @author  Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function diff(object1, object2, settings = {}) {\n  settings = {\n    deep: true,\n    added: true,\n    deleted: false,\n    equals: false,\n    emptyObject: false,\n    updated: true,\n    ...settings\n  };\n\n  const finalObj = {};\n\n  const keys = Array.from(\n    new Set([...Object.keys(object1), ...Object.keys(object2)])\n  );\n\n  for (let i = 0; i < keys.length; i++) {\n    const _prop = keys[i];\n\n    if (settings.deep) {\n      if (__isPlainObject(object1[_prop]) && __isPlainObject(object2[_prop])) {\n        finalObj[_prop] = diff(object1[_prop], object2[_prop], settings);\n        if (Object.keys(finalObj[_prop]).length === 0) delete finalObj[_prop];\n        continue;\n      }\n    }\n\n    if (settings.added) {\n      if (object1[_prop] === undefined && object2[_prop] !== undefined) {\n        finalObj[_prop] = object2[_prop];\n        continue;\n      }\n    }\n\n    if (settings.deleted) {\n      if (object1[_prop] !== undefined && object2[_prop] === undefined) {\n        // delete object1[_prop];\n        finalObj[_prop] = object1[_prop];\n        continue;\n      }\n    }\n\n    if (settings.equals) {\n      if (__isEqual(object1[_prop], object2[_prop])) {\n        finalObj[_prop] = object2[_prop];\n        continue;\n      }\n    }\n\n    if (settings.emptyObject) {\n      if (\n        __isPlainObject(object1[_prop]) &&\n        Object.keys(object1[_prop]).length === 0\n      ) {\n        finalObj[_prop] = {};\n        continue;\n      }\n    }\n\n    if (settings.updated) {\n      if (object1[_prop] === undefined || object2[_prop] === undefined) {\n        continue;\n      }\n      if (!__isEqual(object1[_prop], object2[_prop])) {\n        finalObj[_prop] = object2[_prop];\n        continue;\n      }\n    }\n  }\n\n  return finalObj;\n}\n"
    ]
}
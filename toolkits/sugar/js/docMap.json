{
    "node.auth.adapters.SAuthAdapter": {
        "name": "SAuthAdapter",
        "namespace": "node.auth.adapters",
        "filename": "SAuthAdapter.js",
        "extension": "js",
        "path": "../src/js/__wip__/auth/adapters/SAuthAdapter.js",
        "directory": "../src/js/__wip__/auth/adapters",
        "type": "Class",
        "description": "Base SAuth adapter class that has to be the base of each SAuthAdapters"
    },
    "node.auth.adapters.STerminalAuthAdapter": {
        "name": "STerminalAuthAdapter",
        "namespace": "node.auth.adapters",
        "filename": "SAuthTerminalAdapter.js",
        "extension": "js",
        "path": "../src/js/__wip__/auth/adapters/SAuthTerminalAdapter.js",
        "directory": "../src/js/__wip__/auth/adapters",
        "type": "Class",
        "description": "Terminal SAuth adapter that allows you to ask the auth informations through the terminal"
    },
    "node.auth.formaters.basicFormater": {
        "name": "basicFormater",
        "namespace": "node.auth.formaters",
        "filename": "basicFormater.js",
        "extension": "js",
        "path": "../src/js/__wip__/auth/formaters/basicFormater.js",
        "directory": "../src/js/__wip__/auth/formaters",
        "type": "Function",
        "description": "This function simply take the basic auth infos (username, password) and return the formated auth object with the headers, etc..."
    },
    "node.auth.formaters.bearerFormater": {
        "name": "bearerFormater",
        "namespace": "node.auth.formaters",
        "filename": "bearerFormater.js",
        "extension": "js",
        "path": "../src/js/__wip__/auth/formaters/bearerFormater.js",
        "directory": "../src/js/__wip__/auth/formaters",
        "type": "Function",
        "description": "This function simply take the bearer auth infos (token) and return the formated auth object with the headers, etc..."
    },
    "node.auth.injectors.axiosInjector": {
        "name": "axiosInjector",
        "namespace": "node.auth.injectors",
        "filename": "axiosInjector.js",
        "extension": "js",
        "path": "../src/js/__wip__/auth/injectors/axiosInjector.js",
        "directory": "../src/js/__wip__/auth/injectors",
        "type": "Function",
        "description": "This function take the axios config object and inject the auth headers, etc into it"
    },
    "node.auth.SAuth": {
        "name": "SAuth",
        "namespace": "node.auth",
        "filename": "SAuth.js",
        "extension": "js",
        "path": "../src/js/__wip__/auth/SAuth.js",
        "directory": "../src/js/__wip__/auth",
        "type": "Class",
        "description": "Base class that gives you the ability to set/ask for some authentification informations like auth token, username-password, etc..."
    },
    "node.auth.bitbucketApiValidator": {
        "name": "bitbucketApiValidator",
        "namespace": "node.auth",
        "filename": "bitbucketApiValidator.js",
        "extension": "js",
        "path": "../src/js/__wip__/auth/validators/bitbucketApiValidator.js",
        "directory": "../src/js/__wip__/auth/validators",
        "type": "Function",
        "description": "Make sure the bitbucket api authentification has been made correctly"
    },
    "sugar.js.action.browser.SUrlAction": {
        "name": "SUrlAction",
        "namespace": "sugar.js.action.browser",
        "filename": "SUrlAction.js",
        "extension": "js",
        "path": "../src/js/action/browser/SUrlAction.js",
        "directory": "../src/js/action/browser",
        "type": "Class",
        "description": "This class represent an URL action that let you change the user page\nwith multiple settings like if you want the url to be opened in a popup,\nafter a timeout, etc...",
        "since": "2.0.0"
    },
    "sugar.js.action.instanciate": {
        "name": "instanciate",
        "namespace": "sugar.js.action",
        "filename": "instanciate.js",
        "extension": "js",
        "path": "../src/js/action/instanciate.js",
        "directory": "../src/js/action",
        "type": "Function",
        "description": "This static method simply take an action descriptor object, instanciate\nan action object from the corresponding class and return this instance.",
        "static": true,
        "since": "2.0.0"
    },
    "sugar.js.action.SAction": {
        "name": "SAction",
        "namespace": "sugar.js.action",
        "filename": "SAction.js",
        "extension": "js",
        "path": "../src/js/action/SAction.js",
        "directory": "../src/js/action",
        "type": "Class",
        "description": "This class represent an action. An action is something that happened depending on\nsettings. It can be an \"url\" action that will change the user page, a \"login\" action\nthat will allow the user to log in his favorite services like \"google\", etc...\nAll this is wrapped into a nicely formated system that use the SPromise class\nto let you know the state of the action, etc..."
    },
    "sugar.js.action.typeMap": {
        "name": "typeMap",
        "namespace": "sugar.js.action",
        "filename": "typeMap.js",
        "extension": "js",
        "path": "../src/js/action/typeMap.js",
        "directory": "../src/js/action",
        "type": "Object",
        "description": "Object that map a string \"type\" like \"url\", \"login\", etc... to his proper SAction class",
        "since": "2.0.0"
    },
    "sugar.js.array.asyncForEach": {
        "name": "asyncForEach",
        "namespace": "sugar.js.array",
        "filename": "asyncForEach.js",
        "extension": "js",
        "path": "../src/js/array/asyncForEach.js",
        "directory": "../src/js/array",
        "type": "Function",
        "description": "Allow to make some async foreach on your arrays"
    },
    "sugar.js.array.keysFirst": {
        "name": "keysFirst",
        "namespace": "sugar.js.array",
        "filename": "keysFirst.js",
        "extension": "js",
        "path": "../src/js/array/keysFirst.js",
        "directory": "../src/js/array",
        "type": "Function",
        "description": "Make sure the passed array start with the passed keys"
    },
    "sugar.js.array.keysLast": {
        "name": "keysLast",
        "namespace": "sugar.js.array",
        "filename": "keysLast.js",
        "extension": "js",
        "path": "../src/js/array/keysLast.js",
        "directory": "../src/js/array",
        "type": "Function",
        "description": "Make sure the passed array ends with the passed keys"
    },
    "sugar.js.array.proxy": {
        "name": "proxy",
        "namespace": "sugar.js.array",
        "filename": "proxy.js",
        "extension": "js",
        "path": "../src/js/array/proxy.js",
        "directory": "../src/js/array",
        "type": "Function",
        "description": "This function override the passed array prototype to intercept changes made through"
    },
    "sugar.js.array.splitEvery": {
        "name": "splitEvery",
        "namespace": "sugar.js.array",
        "filename": "splitEvery.js",
        "extension": "js",
        "path": "../src/js/array/splitEvery.js",
        "directory": "../src/js/array",
        "type": "Function",
        "description": "Split an array every N items"
    },
    "sugar.js.array.unique": {
        "name": "unique",
        "namespace": "sugar.js.array",
        "filename": "unique.js",
        "extension": "js",
        "path": "../src/js/array/unique.js",
        "directory": "../src/js/array",
        "type": "Function",
        "description": "This function simply take an array as parameter and return a new one\nwith all the duplicates values removed.",
        "since": "2.0.0"
    },
    "sugar.js.ascii.sugarHeading": {
        "name": "sugarHeading",
        "namespace": "sugar.js.ascii",
        "filename": "sugarHeading.js",
        "extension": "js",
        "path": "../src/js/ascii/sugarHeading.js",
        "directory": "../src/js/ascii",
        "type": "Function",
        "description": "This function returns an ascii version of the sugar logo",
        "since": "2.0.0"
    },
    "sugar.js.cache.cacheAdapters.SCacheAdapter": {
        "name": "SCacheAdapter",
        "namespace": "sugar.js.cache.cacheAdapters",
        "filename": "SCacheAdapter.js",
        "extension": "js",
        "path": "../src/js/cache/adapters/SCacheAdapter.js",
        "directory": "../src/js/cache/adapters",
        "type": "Class",
        "description": "Base class for SCache adapters",
        "since": "2.0.0"
    },
    "sugar.js.cache.adapters.SCacheFsAdapter": {
        "name": "SCacheFsAdapter",
        "namespace": "sugar.js.cache.adapters",
        "filename": "SCacheLsAdapter.js",
        "extension": "js",
        "path": "../src/js/cache/adapters/SCacheLsAdapter.js",
        "directory": "../src/js/cache/adapters",
        "type": "Class",
        "description": "A filesystem SCache adapter that allows you to store your cache items on the user system",
        "since": "2.0.0"
    },
    "sugar.js.cache.SCache": {
        "name": "SCache",
        "namespace": "sugar.js.cache",
        "filename": "SCache.js",
        "extension": "js",
        "path": "../src/js/cache/SCache.js",
        "directory": "../src/js/cache",
        "type": "Class",
        "description": "Gives you the ability to manage cache through some defaults available adapters or using yours.\nThis cache class take care of these features:\n- Standard and custom TTL by cache item\n- Delete cache items on expires or not",
        "since": "2.0.0"
    },
    "sugar.js.cache.SHashCache": {
        "name": "SHashCache",
        "namespace": "sugar.js.cache",
        "filename": "SHashCache.js",
        "extension": "js",
        "path": "../src/js/cache/SHashCache.js",
        "directory": "../src/js/cache",
        "type": "Class",
        "description": "Gives you the ability to manage cache through some defaults available adapters or using yours.\nThis cache class take care of these features:\n- Standard and custom TTL by cache item\n- Delete cache items on expires or not",
        "extends": "SCache",
        "since": "2.0.0"
    },
    "sugar.js.class.functionToClass": {
        "name": "functionToClass",
        "namespace": "sugar.js.class",
        "filename": "functionToClass.js",
        "extension": "js",
        "path": "../src/js/class/functionToClass.js",
        "directory": "../src/js/class",
        "type": "Function",
        "description": "Transform ES5 Functions to ES6 Classes",
        "since": "2.0.0"
    },
    "sugar.js.class.getExtendsStack": {
        "name": "getExtendsStack",
        "namespace": "sugar.js.class",
        "filename": "getExtendsStack.js",
        "extension": "js",
        "path": "../src/js/class/getExtendsStack.js",
        "directory": "../src/js/class",
        "type": "Function",
        "description": "This function take a class as parameter and return an array of all the class names used to extends this one...",
        "since": "2.0.0"
    },
    "sugar.js.class.getMethods": {
        "name": "getMethods",
        "namespace": "sugar.js.class",
        "filename": "getMethods.js",
        "extension": "js",
        "path": "../src/js/class/getMethods.js",
        "directory": "../src/js/class",
        "type": "Function",
        "description": "This function take an instance as parameter and return all the methods in array format"
    },
    "sugar.js.class.methodExists": {
        "name": "methodExists",
        "namespace": "sugar.js.class",
        "filename": "methodExists.js",
        "extension": "js",
        "path": "../src/js/class/methodExists.js",
        "directory": "../src/js/class",
        "type": "Function",
        "description": "Check if one or more methods exists on a class instance"
    },
    "sugar.js.class.multipleExtends": {
        "name": "multipleExtends",
        "namespace": "sugar.js.class",
        "filename": "multipleExtends.js",
        "extension": "js",
        "path": "../src/js/class/multipleExtends.js",
        "directory": "../src/js/class",
        "type": "Function",
        "description": "This function allows you to extends your class with multiple other ones."
    },
    "sugar.js.class.SInterface": {
        "name": "SInterface",
        "namespace": "sugar.js.class",
        "filename": "SInterface.js",
        "extension": "js",
        "path": "../src/js/class/SInterface.js",
        "directory": "../src/js/class",
        "type": "Function",
        "description": "This class allows you to define an interface that you can later apply to an object instance\nto make sure this particular instance has all the features, methods and properties you want.",
        "since": "2.0.0"
    },
    "sugar.js.class.toPlainObject": {
        "name": "toPlainObject",
        "namespace": "sugar.js.class",
        "filename": "toPlainObject.js",
        "extension": "js",
        "path": "../src/js/class/toPlainObject.js",
        "directory": "../src/js/class",
        "type": "Function",
        "description": "This function take a instance as parameter and return a plain object of it"
    },
    "sugar.js.cli.argsToObject": {
        "name": "argsToObject",
        "namespace": "sugar.js.cli",
        "filename": "argsToObject.js",
        "extension": "js",
        "path": "../src/js/cli/argsToObject.js",
        "directory": "../src/js/cli",
        "type": "Function",
        "description": "This function take a simple object, a definitionObj object and return you the string version that you can pass\ndirectly to the command line interface",
        "since": "2.0.0"
    },
    "sugar.js.cli.argsToString": {
        "name": "argsToString",
        "namespace": "sugar.js.cli",
        "filename": "argsToString.js",
        "extension": "js",
        "path": "../src/js/cli/argsToString.js",
        "directory": "../src/js/cli",
        "type": "Function",
        "description": "This function take a simple object, a definitionObj object and return you the string version that you can pass\ndirectly to the command line interface",
        "since": "2.0.0"
    },
    "sugar.js.cli.buildCommandLine": {
        "name": "buildCommandLine",
        "namespace": "sugar.js.cli",
        "filename": "buildCommandLine.js",
        "extension": "js",
        "path": "../src/js/cli/buildCommandLine.js",
        "directory": "../src/js/cli",
        "type": "Function",
        "description": "This function takes as parameters a command line (with tokens), an arguments object and a definition object to\ngenerate the final command line string to launch.\nA token is simply a string that begin with \"[\" and end with \"]\" like so: \"[mytoken]\".\nEach arguments of the definition object can be a token. If you have an argument called \"hostname\", the corresponding token will be \"[hostname]\".\nA special token called \"[arguments]\" is needed if you want the passed arguments to be integrated to the builded command line.",
        "since": "2.0.0"
    },
    "sugar.js.cli.completeArgsObject": {
        "name": "completeArgsObject",
        "namespace": "sugar.js.cli",
        "filename": "completeArgsObject.js",
        "extension": "js",
        "path": "../src/js/cli/completeArgsObject.js",
        "directory": "../src/js/cli",
        "type": "Function",
        "description": "",
        "since": "2.0.0"
    },
    "sugar.js.cli.parseArgs": {
        "name": "parseArgs",
        "namespace": "sugar.js.cli",
        "filename": "parseArgs.js",
        "extension": "js",
        "path": "../src/js/cli/parseArgs.js",
        "directory": "../src/js/cli",
        "type": "Function",
        "description": "Parse a string to find the provided arguments into the list and return a corresponding object."
    },
    "sugar.js.color.color": {
        "name": "color",
        "namespace": "sugar.js.color",
        "filename": "color.js",
        "extension": "js",
        "path": "../src/js/color/color.js",
        "directory": "../src/js/color",
        "type": "Function",
        "description": "Simple wrapper to create an SColor instance quickly"
    },
    "sugar.js.color.convert": {
        "name": "convert",
        "namespace": "sugar.js.color",
        "filename": "convert.js",
        "extension": "js",
        "path": "../src/js/color/convert.js",
        "directory": "../src/js/color",
        "type": "Function",
        "description": "This function take as input any color format like rgba Object, hsl Object, hsv Object, hex String, rgba String, hsl String or hsv String\nand convert it into the wanted format like \"rgba\", \"hsl\", \"hsv\", \"hex\", \"rgbaString\", \"hslString\" or \"hsvString\""
    },
    "sugar.js.color.hex2rgba": {
        "name": "hex2rgba",
        "namespace": "sugar.js.color",
        "filename": "hex2rgba.js",
        "extension": "js",
        "path": "../src/js/color/hex2rgba.js",
        "directory": "../src/js/color",
        "type": "Function",
        "description": "Hex to RGBA"
    },
    "sugar.js.color.hsl2rgba": {
        "name": "hsl2rgba",
        "namespace": "sugar.js.color",
        "filename": "hsl2rgba.js",
        "extension": "js",
        "path": "../src/js/color/hsl2rgba.js",
        "directory": "../src/js/color",
        "type": "Function",
        "description": "HSL to RGBA"
    },
    "sugar.js.color.hsv2rgba": {
        "name": "hsv2rgba",
        "namespace": "sugar.js.color",
        "filename": "hsv2rgba.js",
        "extension": "js",
        "path": "../src/js/color/hsv2rgba.js",
        "directory": "../src/js/color",
        "type": "Function",
        "description": "HSV to RGBA"
    },
    "sugar.js.color.parse": {
        "name": "parse",
        "namespace": "sugar.js.color",
        "filename": "parse.js",
        "extension": "js",
        "path": "../src/js/color/parse.js",
        "directory": "../src/js/color",
        "type": "Function",
        "description": "Parse a string and return you the wanted object format like \"rgba\", \"hsl\" or \"hsv\"."
    },
    "sugar.js.color.parseHsl": {
        "name": "parseHsl",
        "namespace": "sugar.js.color",
        "filename": "parseHsl.js",
        "extension": "js",
        "path": "../src/js/color/parseHsl.js",
        "directory": "../src/js/color",
        "type": "Function",
        "description": "Parse HSL"
    },
    "sugar.js.color.parseHsv": {
        "name": "parseHsv",
        "namespace": "sugar.js.color",
        "filename": "parseHsv.js",
        "extension": "js",
        "path": "../src/js/color/parseHsv.js",
        "directory": "../src/js/color",
        "type": "Function",
        "description": "Parse HSV"
    },
    "sugar.js.color.parseRgba": {
        "name": "parseRgba",
        "namespace": "sugar.js.color",
        "filename": "parseRgba.js",
        "extension": "js",
        "path": "../src/js/color/parseRgba.js",
        "directory": "../src/js/color",
        "type": "Function",
        "description": "Parse RGBA string and return an object"
    },
    "sugar.js.color.rgba2hex": {
        "name": "rgba2hex",
        "namespace": "sugar.js.color",
        "filename": "rgba2hex.js",
        "extension": "js",
        "path": "../src/js/color/rgba2hex.js",
        "directory": "../src/js/color",
        "type": "Function",
        "description": "RGBA to HEX"
    },
    "sugar.js.color.rgba2hsl": {
        "name": "rgba2hsl",
        "namespace": "sugar.js.color",
        "filename": "rgba2hsl.js",
        "extension": "js",
        "path": "../src/js/color/rgba2hsl.js",
        "directory": "../src/js/color",
        "type": "Function",
        "description": "RGBA to HSL"
    },
    "sugar.js.color.rgba2hsv": {
        "name": "rgba2hsv",
        "namespace": "sugar.js.color",
        "filename": "rgba2hsv.js",
        "extension": "js",
        "path": "../src/js/color/rgba2hsv.js",
        "directory": "../src/js/color",
        "type": "Function",
        "description": "RGBA to HSV"
    },
    "sugar.js.color.SColor": {
        "name": "SColor",
        "namespace": "sugar.js.color",
        "filename": "SColor.js",
        "extension": "js",
        "path": "../src/js/color/SColor.js",
        "directory": "../src/js/color",
        "type": "Class",
        "description": "Class that provide complete and simple to use color manupilation capabilities like:\n- Modifiers\n- opacity\n- darken\n- lighten\n- desaturate\n- saturate\n- spin (change hue)\n- transparentize\n- alpha\n- grayscale\n- Conversions\n- rgba\n- hsl\n- hsv\n- hex\n- Print out formats\n- toRgbaString\n- toHslString\n- toHsvString\n- toHexString\n- toString(format = null)",
        "since": "2.0.0"
    },
    "sugar.js.config.adapters.SConfigAdapter": {
        "name": "SConfigAdapter",
        "namespace": "sugar.js.config.adapters",
        "filename": "SConfigAdapter.js",
        "extension": "js",
        "path": "../src/js/config/adapters/SConfigAdapter.js",
        "directory": "../src/js/config/adapters",
        "type": "Class",
        "description": "Base class for SCache adapters"
    },
    "sugar.js.config.adapters.SConfigLsAdapter": {
        "name": "SConfigLsAdapter",
        "namespace": "sugar.js.config.adapters",
        "filename": "SConfigLsAdapter.js",
        "extension": "js",
        "path": "../src/js/config/adapters/SConfigLsAdapter.js",
        "directory": "../src/js/config/adapters",
        "type": "Class",
        "description": "This Local Storage adapter for the SConfig class let you define a name for your config and then you can just\nlet the SConfig class do the work for you..."
    },
    "sugar.js.config.config": {
        "name": "config",
        "namespace": "sugar.js.config",
        "filename": "SConfig.js",
        "extension": "js",
        "path": "../src/js/config/SConfig.js",
        "directory": "../src/js/config",
        "type": "Class",
        "description": "This class allows you to quickly access/update some configuration depending on the data adapters specified.\nThe base available data adapters are:\n- For node:\n- File system adapter: @coffeekraken/sugar/node/config/adapters/SConfigFsAdapter\n- For js:\n- Localstorage adapter: @coffeekraken/sugar/js/config/adapters/SConfigLsAdapter"
    },
    "node.config.SConfig.set": {
        "name": "set",
        "namespace": "node.config.SConfig",
        "filename": "SConfig.js",
        "extension": "js",
        "path": "../src/js/config/SConfig.js",
        "directory": "../src/js/config",
        "type": "Function",
        "description": "Get a config depending on the dotted object path passed and either using the first registered adapter found, or the passed one"
    },
    "sugar.js.console.parseHtml": {
        "name": "parseHtml",
        "namespace": "sugar.js.console",
        "filename": "parseHtml.js",
        "extension": "js",
        "path": "../src/js/console/parseHtml.js",
        "directory": "../src/js/console",
        "type": "Function",
        "description": "Parse the simple html tags to format the console message"
    },
    "js.docblock.DockblockParser": {
        "name": "DockblockParser",
        "namespace": "js.docblock",
        "filename": "SDocblock.js",
        "extension": "js",
        "path": "../src/js/docblock/__tests__/SDocblock.js",
        "directory": "../src/js/docblock/__tests__",
        "type": "Class",
        "description": "This is the main class that expose the methods like \"parse\", etc...\nYou have to instanciate it by passing a settings object. Here's the available options:",
        "since": "2.0.0"
    },
    "js.function.debounce": {
        "name": "debounce",
        "namespace": "js.function",
        "filename": "SDocblock.js",
        "extension": "js",
        "path": "../src/js/docblock/__tests__/SDocblock.js",
        "directory": "../src/js/docblock/__tests__",
        "type": "Function",
        "description": "This utils function allows you to make sure that a function that will normally be called\nseveral times, for example during a scroll event, to be called only once after\nthe delay passed"
    },
    "js.string.includes": {
        "name": "includes",
        "namespace": "js.string",
        "filename": "SDocblock.js",
        "extension": "js",
        "path": "../src/js/docblock/__tests__/SDocblock.js",
        "directory": "../src/js/docblock/__tests__",
        "type": "Function",
        "description": "Same as the native String.includes function but accept either an array of items\nor a simple comma separated string like \"something,cool,hello,world\""
    },
    "sugar.js.convert.undefined": {
        "namespace": "sugar.js.convert",
        "filename": "htmlFromDocblocks.js",
        "extension": "js",
        "path": "../src/js/convert/html/htmlFromDocblocks.js",
        "directory": "../src/js/convert/html",
        "type": "Function",
        "description": "Take a markdown string as input and convert it to HTML.",
        "since": "2.0.0"
    },
    "sugar.js.convert.htmlFromMarkdown": {
        "name": "htmlFromMarkdown",
        "namespace": "sugar.js.convert",
        "filename": "htmlFromMarkdown.js",
        "extension": "js",
        "path": "../src/js/convert/html/htmlFromMarkdown.js",
        "directory": "../src/js/convert/html",
        "type": "Function",
        "description": "Take a markdown string as input and convert it to HTML.",
        "since": "2.0.0"
    },
    "sugar.js.convert.toHtml": {
        "name": "toHtml",
        "namespace": "sugar.js.convert",
        "filename": "toHtml.js",
        "extension": "js",
        "path": "../src/js/convert/toHtml.js",
        "directory": "../src/js/convert",
        "type": "Function",
        "description": "Take a string as input and convert it to HTML.",
        "since": "2.0.0"
    },
    "js.core.settings": {
        "name": "settings",
        "namespace": "js.core",
        "filename": "settings.js",
        "extension": "js",
        "path": "../src/js/core/__wip__/settings.js",
        "directory": "../src/js/core/__wip__",
        "type": "{Object}",
        "description": "Store all the sugar settings grabed from your scss settings"
    },
    "sugar.js.core.activeSpace": {
        "name": "activeSpace",
        "namespace": "sugar.js.core",
        "filename": "activeSpace.js",
        "extension": "js",
        "path": "../src/js/core/activeSpace.js",
        "directory": "../src/js/core",
        "type": "Object",
        "description": "This object expose some functions that are usefull to manage the \"active\" space of your application.\nAn active space is represented by a string formated like so \"something.cool.hello\". This mean that your app is\nin the \"something.cool.hello\" space and depending on that, you can enable or disable some features like for example\nkeypress that have to be active only in certain \"space\" of your application.\nThe exposed functions are these ones:\n- set: This allows you to set the active space\n- get: This allows you to get the current active space\n- is: This allows you to check if the passed active space string is in the current active space\n- previous: This allows you to go back 1 activeSpace in the stack\n- on: This allows you to register callbacks attached to an activeSpace\n- append: This allows you to append an activeSpace string to the current one",
        "since": "2.0.0"
    },
    "sugar.js.core.env": {
        "name": "env",
        "namespace": "sugar.js.core",
        "filename": "env.js",
        "extension": "js",
        "path": "../src/js/core/env.js",
        "directory": "../src/js/core",
        "type": "Function",
        "description": "This function allows you to access environment variables through the same method in node and javascript"
    },
    "sugar.js.crypt.aes": {
        "name": "aes",
        "namespace": "sugar.js.crypt",
        "filename": "aes.js",
        "extension": "js",
        "path": "../src/js/crypt/aes.js",
        "directory": "../src/js/crypt",
        "type": "Object",
        "description": "Expose two function named \"encrypt\" and \"decrypt\" that you can use to process your content using the aes algorithm"
    },
    "sugar.js.crypt.base64": {
        "name": "base64",
        "namespace": "sugar.js.crypt",
        "filename": "base64.js",
        "extension": "js",
        "path": "../src/js/crypt/base64.js",
        "directory": "../src/js/crypt",
        "type": "Object",
        "description": "Expose two function named \"encrypt\" and \"decrypt\" that you can use to process your content using the base64 algorithm"
    },
    "sugar.js.crypt.md5": {
        "name": "md5",
        "namespace": "sugar.js.crypt",
        "filename": "md5.js",
        "extension": "js",
        "path": "../src/js/crypt/md5.js",
        "directory": "../src/js/crypt",
        "type": "Object",
        "description": "Expose two function named \"encrypt\" and \"decrypt\" that you can use to process your content using the md5 algorithm"
    },
    "sugar.js.crypt.object": {
        "name": "object",
        "namespace": "sugar.js.crypt",
        "filename": "object.js",
        "extension": "js",
        "path": "../src/js/crypt/object.js",
        "directory": "../src/js/crypt",
        "type": "Object",
        "description": "Expose two function named \"encrypt\" and \"decrypt\" that you can use to process your content using the object algorithm"
    },
    "sugar.js.crypt.sha256": {
        "name": "sha256",
        "namespace": "sugar.js.crypt",
        "filename": "sha256.js",
        "extension": "js",
        "path": "../src/js/crypt/sha256.js",
        "directory": "../src/js/crypt",
        "type": "Object",
        "description": "Expose two function named \"encrypt\" and \"decrypt\" that you can use to process your content using the sha256 algorithm"
    },
    "sugar.js.crypt.sha512": {
        "name": "sha512",
        "namespace": "sugar.js.crypt",
        "filename": "sha512.js",
        "extension": "js",
        "path": "../src/js/crypt/sha512.js",
        "directory": "../src/js/crypt",
        "type": "Object",
        "description": "Expose two function named \"encrypt\" and \"decrypt\" that you can use to process your content using the sha512 algorithm"
    },
    "js.css.autoPrefix": {
        "name": "autoPrefix",
        "namespace": "js.css",
        "filename": "autoPrefix.js",
        "extension": "js",
        "path": "../src/js/css/__wip__/autoPrefix.js",
        "directory": "../src/js/css/__wip__",
        "type": "Function",
        "description": "Prefix your passed css style"
    },
    "sugar.js.css.injectStyle": {
        "name": "injectStyle",
        "namespace": "sugar.js.css",
        "filename": "injectStyle.js",
        "extension": "js",
        "path": "../src/js/css/injectStyle.js",
        "directory": "../src/js/css",
        "type": "Function",
        "description": "Inject a passed style string in the DOM"
    },
    "js.dev.checkArgs": {
        "name": "checkArgs",
        "namespace": "js.dev",
        "filename": "checkArgs.js",
        "extension": "js",
        "path": "../src/js/dev/__wip__/checkArgs.js",
        "directory": "../src/js/dev/__wip__",
        "type": "Function",
        "description": "Check the arguments of a function by checking his type, his values, etc...\nThrow an error if something is not good with the details of why..."
    },
    "sugar.js.dev.dataTypesArray": {
        "name": "dataTypesArray",
        "namespace": "sugar.js.dev",
        "filename": "dataTypesArray.js",
        "extension": "js",
        "path": "../src/js/dev/dataTypesArray.js",
        "directory": "../src/js/dev",
        "type": "Array",
        "description": "This is just a list of data types available in the\ncurrent language (node/js)"
    },
    "sugar.js.dev.getArgsNames": {
        "name": "getArgsNames",
        "namespace": "sugar.js.dev",
        "filename": "getArgsNames.js",
        "extension": "js",
        "path": "../src/js/dev/getArgsNames.js",
        "directory": "../src/js/dev",
        "type": "Function",
        "description": "Get the arguments names of the passed function. Return an array of the arguments names"
    },
    "js.docblock.SDocblockBlock": {
        "name": "SDocblockBlock",
        "namespace": "js.docblock",
        "filename": "SDocblockBlock.js",
        "extension": "js",
        "path": "../src/js/docblock/__tests__/SDocblockBlock.js",
        "directory": "../src/js/docblock/__tests__",
        "type": "Class",
        "description": "This is the main class that expose the methods like \"parse\", etc...\nYou have to instanciate it by passing a settings object. Here's the available options:",
        "since": "2.0.0"
    },
    "sugar.js.docblock.Dockblock": {
        "name": "Dockblock",
        "namespace": "sugar.js.docblock",
        "filename": "SDocblock.js",
        "extension": "js",
        "path": "../src/js/docblock/SDocblock.js",
        "directory": "../src/js/docblock",
        "type": "Class",
        "description": "This is the main class that expose the methods like \"parse\", etc...\nYou have to instanciate it by passing a settings object. Here's the available options:",
        "since": "2.0.0"
    },
    "sugar.js.docblock.SDocblockBlock": {
        "name": "SDocblockBlock",
        "namespace": "sugar.js.docblock",
        "filename": "SDocblockBlock.js",
        "extension": "js",
        "path": "../src/js/docblock/SDocblockBlock.js",
        "directory": "../src/js/docblock",
        "type": "Class",
        "description": "This class represent a docblock object that contains all the \"tags\" values and some features like:\n- Converting the block to markdown\n- More to come...",
        "since": "2.0.0"
    },
    "sugar.js.docblock.tags.author": {
        "name": "author",
        "namespace": "sugar.js.docblock.tags",
        "filename": "author.js",
        "extension": "js",
        "path": "../src/js/docblock/tags/author.js",
        "directory": "../src/js/docblock/tags",
        "type": "Function",
        "description": "Parse the author tag",
        "since": "2.0.0"
    },
    "sugar.js.docblock.tags.description": {
        "name": "description",
        "namespace": "sugar.js.docblock.tags",
        "filename": "description.js",
        "extension": "js",
        "path": "../src/js/docblock/tags/description.js",
        "directory": "../src/js/docblock/tags",
        "type": "Function",
        "description": "Parse the description tag",
        "since": "2.0.0"
    },
    "sugar.js.docblock.tags.example": {
        "name": "example",
        "namespace": "sugar.js.docblock.tags",
        "filename": "example.js",
        "extension": "js",
        "path": "../src/js/docblock/tags/example.js",
        "directory": "../src/js/docblock/tags",
        "type": "Function",
        "description": "Parse the example tag",
        "since": "2.0.0"
    },
    "sugar.js.docblock.tags.param": {
        "name": "param",
        "namespace": "sugar.js.docblock.tags",
        "filename": "param.js",
        "extension": "js",
        "path": "../src/js/docblock/tags/param.js",
        "directory": "../src/js/docblock/tags",
        "type": "Function",
        "description": "Parse the param tag",
        "since": "2.0.0"
    },
    "sugar.js.docblock.tags.return": {
        "name": "return",
        "namespace": "sugar.js.docblock.tags",
        "filename": "return.js",
        "extension": "js",
        "path": "../src/js/docblock/tags/return.js",
        "directory": "../src/js/docblock/tags",
        "type": "Function",
        "description": "Parse the return tag",
        "since": "2.0.0"
    },
    "sugar.js.docblock.tags.simpleValue": {
        "name": "simpleValue",
        "namespace": "sugar.js.docblock.tags",
        "filename": "simpleValue.js",
        "extension": "js",
        "path": "../src/js/docblock/tags/simpleValue.js",
        "directory": "../src/js/docblock/tags",
        "type": "Function",
        "description": "Parse the simpleValue tag",
        "since": "2.0.0"
    },
    "sugar.js.docblock.tags.snippet": {
        "name": "snippet",
        "namespace": "sugar.js.docblock.tags",
        "filename": "snippet.js",
        "extension": "js",
        "path": "../src/js/docblock/tags/snippet.js",
        "directory": "../src/js/docblock/tags",
        "type": "Function",
        "description": "Parse the snippet tag",
        "since": "2.0.0"
    },
    "sugar.js.dom.addAnimationClass": {
        "name": "addAnimationClass",
        "namespace": "sugar.js.dom",
        "filename": "addAnimationClass.js",
        "extension": "js",
        "path": "../src/js/dom/addAnimationClass.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Add a class that trigger an animation and remove it at the end"
    },
    "sugar.js.dom.addEventListener": {
        "name": "addEventListener",
        "namespace": "sugar.js.dom",
        "filename": "addEventListener.js",
        "extension": "js",
        "path": "../src/js/dom/addEventListener.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Add an event listener on an element and return the function to remove the event listener"
    },
    "sugar.js.dom.addEventListenerOnce": {
        "name": "addEventListenerOnce",
        "namespace": "sugar.js.dom",
        "filename": "addEventListenerOnce.js",
        "extension": "js",
        "path": "../src/js/dom/addEventListenerOnce.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Add an event listener that will be trigerred only once"
    },
    "sugar.js.dom.appendScriptTag": {
        "name": "appendScriptTag",
        "namespace": "sugar.js.dom",
        "filename": "appendScriptTag.js",
        "extension": "js",
        "path": "../src/js/dom/appendScriptTag.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Append a script tag either to the head or the body"
    },
    "sugar.js.dom.appendStylesheetLink": {
        "name": "appendStylesheetLink",
        "namespace": "sugar.js.dom",
        "filename": "appendStylesheetLink.js",
        "extension": "js",
        "path": "../src/js/dom/appendStylesheetLink.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Append a stylesheet link to the page head"
    },
    "sugar.js.dom.backgroundImageLoaded": {
        "name": "backgroundImageLoaded",
        "namespace": "sugar.js.dom",
        "filename": "backgroundImageLoaded.js",
        "extension": "js",
        "path": "../src/js/dom/backgroundImageLoaded.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Detect when a background image has been loaded on an HTMLElement"
    },
    "sugar.js.dom.closest": {
        "name": "closest",
        "namespace": "sugar.js.dom",
        "filename": "closest.js",
        "extension": "js",
        "path": "../src/js/dom/closest.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Go up the dom three to find the first element that matches the passed selector"
    },
    "sugar.js.dom.closestNotVisible": {
        "name": "closestNotVisible",
        "namespace": "sugar.js.dom",
        "filename": "closestNotVisible.js",
        "extension": "js",
        "path": "../src/js/dom/closestNotVisible.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Go up the dom three to find the first element that is not visible.\nNot visible mean that has either an opacity to 0, a visibility to hidden or a display to none"
    },
    "sugar.js.dom.dataset": {
        "name": "dataset",
        "namespace": "sugar.js.dom",
        "filename": "dataset.js",
        "extension": "js",
        "path": "../src/js/dom/dataset.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Get or set a value on the passed element with the passed name"
    },
    "sugar.js.dom.detectInOutDirection": {
        "name": "detectInOutDirection",
        "namespace": "sugar.js.dom",
        "filename": "detectInOutDirection.js",
        "extension": "js",
        "path": "../src/js/dom/detectInOutDirection.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Detect the mouse direction when entered on the passed element. The direction can be up, down, left or right and will be passed to the two callbacks available.\nThe first one is the `onIn` callback, and the second one is the `onOut`."
    },
    "sugar.js.dom.dispatchEvent": {
        "name": "dispatchEvent",
        "namespace": "sugar.js.dom",
        "filename": "dispatchEvent.js",
        "extension": "js",
        "path": "../src/js/dom/dispatchEvent.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Helper to quickly display an event with some optional data attached to it"
    },
    "sugar.js.dom.domReady": {
        "name": "domReady",
        "namespace": "sugar.js.dom",
        "filename": "domReady.js",
        "extension": "js",
        "path": "../src/js/dom/domReady.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Wait that the dom is ready before resolving the promise"
    },
    "sugar.js.dom.emptyNode": {
        "name": "emptyNode",
        "namespace": "sugar.js.dom",
        "filename": "emptyNode.js",
        "extension": "js",
        "path": "../src/js/dom/emptyNode.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Empty a node by removing each childs one after the other"
    },
    "sugar.js.dom.exitFullscreen": {
        "name": "exitFullscreen",
        "namespace": "sugar.js.dom",
        "filename": "exitFullscreen.js",
        "extension": "js",
        "path": "../src/js/dom/exitFullscreen.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Exit the fullscreen mode"
    },
    "sugar.js.dom.forceRedraw": {
        "name": "forceRedraw",
        "namespace": "sugar.js.dom",
        "filename": "forceRedraw.js",
        "extension": "js",
        "path": "../src/js/dom/forceRedraw.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Force the element to be painted again in case of visual issues"
    },
    "sugar.js.dom.getAnimationProperties": {
        "name": "getAnimationProperties",
        "namespace": "sugar.js.dom",
        "filename": "getAnimationProperties.js",
        "extension": "js",
        "path": "../src/js/dom/getAnimationProperties.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Get the css animation properties from an HTMLElement in an object format"
    },
    "sugar.js.dom.getStyleProperty": {
        "name": "getStyleProperty",
        "namespace": "sugar.js.dom",
        "filename": "getStyleProperty.js",
        "extension": "js",
        "path": "../src/js/dom/getStyleProperty.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Get a style property on the passed element through the computed style.\nThis function try to store the actual style to not trigger more that 1 redraw\neach js execution loop."
    },
    "sugar.js.dom.getTransitionProperties": {
        "name": "getTransitionProperties",
        "namespace": "sugar.js.dom",
        "filename": "getTransitionProperties.js",
        "extension": "js",
        "path": "../src/js/dom/getTransitionProperties.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Get the css transition properties from an HTMLElement in an object format"
    },
    "sugar.js.dom.getTranslateProperties": {
        "name": "getTranslateProperties",
        "namespace": "sugar.js.dom",
        "filename": "getTranslateProperties.js",
        "extension": "js",
        "path": "../src/js/dom/getTranslateProperties.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Get a translate properties of an HTMLElement"
    },
    "sugar.js.dom.imageLoaded": {
        "name": "imageLoaded",
        "namespace": "sugar.js.dom",
        "filename": "imageLoaded.js",
        "extension": "js",
        "path": "../src/js/dom/imageLoaded.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Wait until the passed image is fully loaded"
    },
    "sugar.js.dom.imagesLoaded": {
        "name": "imagesLoaded",
        "namespace": "sugar.js.dom",
        "filename": "imagesLoaded.js",
        "extension": "js",
        "path": "../src/js/dom/imagesLoaded.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Detect when some images are loaded. This function take advantage of the SPromise class\nand trigger an event called \"img.loaded\" that will be triggered on each loaded images and another called \"loaded\" once all the images are loaded.\nSee in the example bellow."
    },
    "sugar.js.dom.innerHtml": {
        "name": "innerHtml",
        "namespace": "sugar.js.dom",
        "filename": "innerHtml.js",
        "extension": "js",
        "path": "../src/js/dom/innerHtml.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Change the content of a Node with the possibility to animate the change using one of these animations:\n- fade\n- fadeUp\n- fadeDown\n- fadeLeft\n- fadeRight\nYou can also choose between 3 actions which are: replace, append and prepend"
    },
    "sugar.js.dom.insertAfter": {
        "name": "insertAfter",
        "namespace": "sugar.js.dom",
        "filename": "insertAfter.js",
        "extension": "js",
        "path": "../src/js/dom/insertAfter.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Insert an HTMLElement after another HTMLElement"
    },
    "sugar.js.dom.inViewportPercentage": {
        "name": "inViewportPercentage",
        "namespace": "sugar.js.dom",
        "filename": "inViewportPercentage.js",
        "extension": "js",
        "path": "../src/js/dom/inViewportPercentage.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Return how many percent the passed element is visible in the viewport"
    },
    "sugar.js.dom.inViewportStatusChange": {
        "name": "inViewportStatusChange",
        "namespace": "sugar.js.dom",
        "filename": "inViewportStatusChange.js",
        "extension": "js",
        "path": "../src/js/dom/inViewportStatusChange.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Monitor when the passed element enter or exit the viewport"
    },
    "sugar.js.dom.isHover": {
        "name": "isHover",
        "namespace": "sugar.js.dom",
        "filename": "isHover.js",
        "extension": "js",
        "path": "../src/js/dom/isHover.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Check if the mouse is hover the passed HTMLElement"
    },
    "sugar.js.dom.isInIframe": {
        "name": "isInIframe",
        "namespace": "sugar.js.dom",
        "filename": "isInIframe.js",
        "extension": "js",
        "path": "../src/js/dom/isInIframe.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Check if the page is loaded inside an iframe"
    },
    "sugar.js.dom.isInViewport": {
        "name": "isInViewport",
        "namespace": "sugar.js.dom",
        "filename": "isInViewport.js",
        "extension": "js",
        "path": "../src/js/dom/isInViewport.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Check if the passed HTMLElement is in the viewport or not"
    },
    "sugar.js.dom.isVisible": {
        "name": "isVisible",
        "namespace": "sugar.js.dom",
        "filename": "isVisible.js",
        "extension": "js",
        "path": "../src/js/dom/isVisible.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Check if the passed HTMLElement is visible or not.\nVisible mean that it has not an opacity of 0, not a visibility of hidden and not a display of none"
    },
    "sugar.js.dom.linkLoaded": {
        "name": "linkLoaded",
        "namespace": "sugar.js.dom",
        "filename": "linkLoaded.js",
        "extension": "js",
        "path": "../src/js/dom/linkLoaded.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Wait until the passed HTMLLinkElement is fully loaded"
    },
    "sugar.js.dom.matches": {
        "name": "matches",
        "namespace": "sugar.js.dom",
        "filename": "matches.js",
        "extension": "js",
        "path": "../src/js/dom/matches.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Polyfill for the Element.matches function"
    },
    "sugar.js.dom.next": {
        "name": "next",
        "namespace": "sugar.js.dom",
        "filename": "next.js",
        "extension": "js",
        "path": "../src/js/dom/next.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Browse the passed element next siblings to find the first element that matches the passed selector"
    },
    "sugar.js.dom.nodeIndex": {
        "name": "nodeIndex",
        "namespace": "sugar.js.dom",
        "filename": "nodeIndex.js",
        "extension": "js",
        "path": "../src/js/dom/nodeIndex.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Return the inde of the passed node inside the html"
    },
    "sugar.js.dom.observeAttributes": {
        "name": "observeAttributes",
        "namespace": "sugar.js.dom",
        "filename": "observeAttributes.js",
        "extension": "js",
        "path": "../src/js/dom/observeAttributes.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Observe attributes on an HTMLElement and get mutations through the SPromise instance"
    },
    "sugar.js.dom.observeMutations": {
        "name": "observeMutations",
        "namespace": "sugar.js.dom",
        "filename": "observeMutations.js",
        "extension": "js",
        "path": "../src/js/dom/observeMutations.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Observe mutations on an HTMLElement and get them through the observable subscription.\nYou can pass the mutation observer settings through the second argument. By default, here's his values:\n- attributes: true,\n- childList: false,\n- subtree: false"
    },
    "sugar.js.dom.offset": {
        "name": "offset",
        "namespace": "sugar.js.dom",
        "filename": "offset.js",
        "extension": "js",
        "path": "../src/js/dom/offset.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Get the offset top and left of the passed element from the document top left point"
    },
    "sugar.js.dom.offsetParent": {
        "name": "offsetParent",
        "namespace": "sugar.js.dom",
        "filename": "offsetParent.js",
        "extension": "js",
        "path": "../src/js/dom/offsetParent.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Get the offset top and left of the passed element from his parent top left point"
    },
    "sugar.js.dom.onSwipe": {
        "name": "onSwipe",
        "namespace": "sugar.js.dom",
        "filename": "onSwipe.js",
        "extension": "js",
        "path": "../src/js/dom/onSwipe.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Detect swipes gestures on touch devices."
    },
    "sugar.js.dom.prependChild": {
        "name": "prependChild",
        "namespace": "sugar.js.dom",
        "filename": "prependChild.js",
        "extension": "js",
        "path": "../src/js/dom/prependChild.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Prepend an HTMLElement into another HTMLElement"
    },
    "sugar.js.dom.previous": {
        "name": "previous",
        "namespace": "sugar.js.dom",
        "filename": "previous.js",
        "extension": "js",
        "path": "../src/js/dom/previous.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Browse the passed element previous siblings to find the first element that matches the passed selector"
    },
    "sugar.js.dom.querySelector": {
        "name": "querySelector",
        "namespace": "sugar.js.dom",
        "filename": "querySelector.js",
        "extension": "js",
        "path": "../src/js/dom/querySelector.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Enhanced proxy of the Element.querySelector function that let you specify\nif you want an element that is visible, or even that is in the viewport"
    },
    "sugar.js.dom.querySelectorAll": {
        "name": "querySelectorAll",
        "namespace": "sugar.js.dom",
        "filename": "querySelectorAll.js",
        "extension": "js",
        "path": "../src/js/dom/querySelectorAll.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Enhanced proxy of the Element.querySelectorAll function that let you specify\nif you want elements that are visible, or even that are in the viewport"
    },
    "sugar.js.dom.querySelectorAllWithStyle": {
        "name": "querySelectorAllWithStyle",
        "namespace": "sugar.js.dom",
        "filename": "querySelectorAllWithStyle.js",
        "extension": "js",
        "path": "../src/js/dom/querySelectorAllWithStyle.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Select all node that match the style object passed as parameter"
    },
    "sugar.js.dom.querySelectorLive": {
        "name": "querySelectorLive",
        "namespace": "sugar.js.dom",
        "filename": "querySelectorLive.js",
        "extension": "js",
        "path": "../src/js/dom/querySelectorLive.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Observe the dom to get all the elements that matches a passed css selector at any point in time.\nBe warned that this use the mutation observer API and will monitor all the document for new nodes. Make sure to use it\nwhen you don't have the chance to use the custom elements API instead"
    },
    "sugar.js.dom.realHeight": {
        "name": "realHeight",
        "namespace": "sugar.js.dom",
        "filename": "realHeight.js",
        "extension": "js",
        "path": "../src/js/dom/realHeight.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Return the full height of an element that has maybe a max-height, etc..."
    },
    "sugar.js.dom.removeClassOnAnimationEnd": {
        "name": "removeClassOnAnimationEnd",
        "namespace": "sugar.js.dom",
        "filename": "removeClassOnAnimationEnd.js",
        "extension": "js",
        "path": "../src/js/dom/removeClassOnAnimationEnd.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Remove some class on animation end"
    },
    "sugar.js.dom.requestAnimationFrame": {
        "name": "requestAnimationFrame",
        "namespace": "sugar.js.dom",
        "filename": "requestAnimationFrame.js",
        "extension": "js",
        "path": "../src/js/dom/requestAnimationFrame.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Proxy for the window.requestAnimationFrame function"
    },
    "sugar.js.dom.requestFullscreen": {
        "name": "requestFullscreen",
        "namespace": "sugar.js.dom",
        "filename": "requestFullscreen.js",
        "extension": "js",
        "path": "../src/js/dom/requestFullscreen.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Request fullscreen on the passed DOM element"
    },
    "sugar.js.dom.scriptLoaded": {
        "name": "scriptLoaded",
        "namespace": "sugar.js.dom",
        "filename": "scriptLoaded.js",
        "extension": "js",
        "path": "../src/js/dom/scriptLoaded.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Detect when a script has been fully loaded"
    },
    "sugar.js.dom.scrollLeft": {
        "name": "scrollLeft",
        "namespace": "sugar.js.dom",
        "filename": "scrollLeft.js",
        "extension": "js",
        "path": "../src/js/dom/scrollLeft.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Get the amount of scroll left"
    },
    "sugar.js.dom.scrollTo": {
        "name": "scrollTo",
        "namespace": "sugar.js.dom",
        "filename": "scrollTo.js",
        "extension": "js",
        "path": "../src/js/dom/scrollTo.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Function that let you make a smooth page scroll to a specific element in the page"
    },
    "sugar.js.dom.scrollToLocationHash": {
        "name": "scrollToLocationHash",
        "namespace": "sugar.js.dom",
        "filename": "scrollToLocationHash.js",
        "extension": "js",
        "path": "../src/js/dom/scrollToLocationHash.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Scroll to the location hash if an hash is present.\nThis function will try to get the target element from the hash and scroll to it"
    },
    "sugar.js.dom.scrollTop": {
        "name": "scrollTop",
        "namespace": "sugar.js.dom",
        "filename": "scrollTop.js",
        "extension": "js",
        "path": "../src/js/dom/scrollTop.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Return the amount of scroll top that the user as made in the page"
    },
    "sugar.js.dom.sendForm": {
        "name": "sendForm",
        "namespace": "sugar.js.dom",
        "filename": "sendForm.js",
        "extension": "js",
        "path": "../src/js/dom/sendForm.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Send a form through an ajax call and return back a promise resolved with the server response"
    },
    "sugar.js.dom.splitLetters": {
        "name": "splitLetters",
        "namespace": "sugar.js.dom",
        "filename": "splitLetters.js",
        "extension": "js",
        "path": "../src/js/dom/splitLetters.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Split each letters inside an HTMLElement by scoping them inside multiple tags.\nHere's an result sample for : Hello World\n```html\n<span style=\"white-space:nowrap\">\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">H</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">e</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">l</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">l</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">o</span>\n</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">&nbsp;</span>\n</span>\n<span style=\"white-space:nowrap\">\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">W</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">o</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">r</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">l</span>\n</span>\n<span class=\"split-letters\">\n<span class=\"split-letters__letter\">d</span>\n</span>\n</span>\n```"
    },
    "sugar.js.dom.splitLines": {
        "name": "splitLines",
        "namespace": "sugar.js.dom",
        "filename": "splitLines.js",
        "extension": "js",
        "path": "../src/js/dom/splitLines.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Split each lines inside an HTMLElement by scoping them inside some tags.\nHere's an result sample for :\nHello\nWorld\n\n```html\n<p class=\"s-split-lines\">Hello</p>\n<p class=\"s-split-lines\">World</p>\n```"
    },
    "sugar.js.dom.splitWords": {
        "name": "splitWords",
        "namespace": "sugar.js.dom",
        "filename": "splitWords.js",
        "extension": "js",
        "path": "../src/js/dom/splitWords.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Split each words inside an HTMLElement by scoping them inside some tags.\nHere's an result sample for :\nHello World\n\n```html\n<span class=\"s-split-words\">Hello</span>\n<span class=\"s-split-words\">World</span>\n```"
    },
    "sugar.js.dom.stripTags": {
        "name": "stripTags",
        "namespace": "sugar.js.dom",
        "filename": "stripTags.js",
        "extension": "js",
        "path": "../src/js/dom/stripTags.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Strip the tags of the passed text"
    },
    "sugar.js.dom.style": {
        "name": "style",
        "namespace": "sugar.js.dom",
        "filename": "style.js",
        "extension": "js",
        "path": "../src/js/dom/style.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Set or remove a css style property on an HTMLElement"
    },
    "sugar.js.dom.styleObject2String": {
        "name": "styleObject2String",
        "namespace": "sugar.js.dom",
        "filename": "styleObject2String.js",
        "extension": "js",
        "path": "../src/js/dom/styleObject2String.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Transform a style object to inline string separated by ;"
    },
    "sugar.js.dom.stylesheetsReady": {
        "name": "stylesheetsReady",
        "namespace": "sugar.js.dom",
        "filename": "stylesheetsReady.js",
        "extension": "js",
        "path": "../src/js/dom/stylesheetsReady.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Wait until all the HTMLLinkElement's are properly loaded"
    },
    "sugar.js.dom.styleString2Object": {
        "name": "styleString2Object",
        "namespace": "sugar.js.dom",
        "filename": "styleString2Object.js",
        "extension": "js",
        "path": "../src/js/dom/styleString2Object.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Transform a style string to an object representation"
    },
    "sugar.js.dom.textWidth": {
        "name": "textWidth",
        "namespace": "sugar.js.dom",
        "filename": "textWidth.js",
        "extension": "js",
        "path": "../src/js/dom/textWidth.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Get the text width in px of a passed string or the passed HTMLElement"
    },
    "sugar.js.dom.toDomNodes": {
        "name": "toDomNodes",
        "namespace": "sugar.js.dom",
        "filename": "toDomNodes.js",
        "extension": "js",
        "path": "../src/js/dom/toDomNodes.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Return a usable nodeTree from a variable source like selector, an html string, an html template tag or a node that will be cloned."
    },
    "sugar.js.dom.toggleFullscreen": {
        "name": "toggleFullscreen",
        "namespace": "sugar.js.dom",
        "filename": "toggleFullscreen.js",
        "extension": "js",
        "path": "../src/js/dom/toggleFullscreen.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Toggle the fullscreen mode"
    },
    "sugar.js.dom.when": {
        "name": "when",
        "namespace": "sugar.js.dom",
        "filename": "when.js",
        "extension": "js",
        "path": "../src/js/dom/when.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Return a promise that will be resolved when the wanted status has been applied on the passed HTMLElement.\nThe status that can be requested are:\n- attribute : Detect when a special attribute has been applied on the element\n--- settings.attribute : Specify the attribute to check\n--- settings.checkFn : An optional function to check the attribute. The promise is resolved when this function return true\n\n- inViewport : Detect when the element enter in the viewport\n--- settings.offset : Specify an offset to detect the in viewport state\n\n- outOfViewport : Detect when the element exit the viewport\n--- settings.offset : Specify an offset to detect the out viewport state\n\n- transitionEnd : Detect when the css transition is finished on the element\n--- settings.callback : An optional callback function if you prefer instead of the promise\n\n- visible : Detect when the element become visible\n--- settings.callback : An optional callback function if you prefer instead of the promise"
    },
    "sugar.js.dom.whenAttribute": {
        "name": "whenAttribute",
        "namespace": "sugar.js.dom",
        "filename": "whenAttribute.js",
        "extension": "js",
        "path": "../src/js/dom/whenAttribute.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Resolve a promise when the wanted attribute on the passed HTMLElement exist or pass the check function provided"
    },
    "sugar.js.dom.whenInViewport": {
        "name": "whenInViewport",
        "namespace": "sugar.js.dom",
        "filename": "whenInViewport.js",
        "extension": "js",
        "path": "../src/js/dom/whenInViewport.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Monitor an HTMLElement to be notified when it is in the viewport"
    },
    "sugar.js.dom.whenOutOfViewport": {
        "name": "whenOutOfViewport",
        "namespace": "sugar.js.dom",
        "filename": "whenOutOfViewport.js",
        "extension": "js",
        "path": "../src/js/dom/whenOutOfViewport.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Monitor an HTMLElement to be notified when it exit the viewport"
    },
    "sugar.js.dom.whenTransitionEnd": {
        "name": "whenTransitionEnd",
        "namespace": "sugar.js.dom",
        "filename": "whenTransitionEnd.js",
        "extension": "js",
        "path": "../src/js/dom/whenTransitionEnd.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Monitor an HTMLElement to be notified when his transition has ended"
    },
    "sugar.js.dom.whenVisible": {
        "name": "whenVisible",
        "namespace": "sugar.js.dom",
        "filename": "whenVisible.js",
        "extension": "js",
        "path": "../src/js/dom/whenVisible.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Monitor an HTMLElement to be notified when it is visible"
    },
    "sugar.js.dom.wrap": {
        "name": "wrap",
        "namespace": "sugar.js.dom",
        "filename": "wrap.js",
        "extension": "js",
        "path": "../src/js/dom/wrap.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Wrap an HTMLElement inside another `$wrapper` one"
    },
    "sugar.js.dom.wrapInner": {
        "name": "wrapInner",
        "namespace": "sugar.js.dom",
        "filename": "wrapInner.js",
        "extension": "js",
        "path": "../src/js/dom/wrapInner.js",
        "directory": "../src/js/dom",
        "type": "Function",
        "description": "Wrap the content of the passed `$parent` inside a the passed HTMLElement `$wrapper`"
    },
    "sugar.js.easing.availableEasingsArray": {
        "name": "availableEasingsArray",
        "namespace": "sugar.js.easing",
        "filename": "availableEasingsArray.js",
        "extension": "js",
        "path": "../src/js/easing/availableEasingsArray.js",
        "directory": "../src/js/easing",
        "type": "Function",
        "description": "This function simply return back an array of all the available easings function in the sugar toolkit",
        "since": "2.0.0"
    },
    "sugar.js.easing.easeInCubic": {
        "name": "easeInCubic",
        "namespace": "sugar.js.easing",
        "filename": "easeInCubic.js",
        "extension": "js",
        "path": "../src/js/easing/easeInCubic.js",
        "directory": "../src/js/easing",
        "type": "Function",
        "description": "Ease in cubic function"
    },
    "sugar.js.easing.easeInOutCubic": {
        "name": "easeInOutCubic",
        "namespace": "sugar.js.easing",
        "filename": "easeInOutCubic.js",
        "extension": "js",
        "path": "../src/js/easing/easeInOutCubic.js",
        "directory": "../src/js/easing",
        "type": "Function"
    },
    "sugar.js.easing.easeInOutQuad": {
        "name": "easeInOutQuad",
        "namespace": "sugar.js.easing",
        "filename": "easeInOutQuad.js",
        "extension": "js",
        "path": "../src/js/easing/easeInOutQuad.js",
        "directory": "../src/js/easing",
        "type": "Function",
        "description": "Ease in out quad function"
    },
    "sugar.js.easing.easeInOutQuart": {
        "name": "easeInOutQuart",
        "namespace": "sugar.js.easing",
        "filename": "easeInOutQuart.js",
        "extension": "js",
        "path": "../src/js/easing/easeInOutQuart.js",
        "directory": "../src/js/easing",
        "type": "Function",
        "description": "Ease in out quart function"
    },
    "sugar.js.easing.easeInOutQuint": {
        "name": "easeInOutQuint",
        "namespace": "sugar.js.easing",
        "filename": "easeInOutQuint.js",
        "extension": "js",
        "path": "../src/js/easing/easeInOutQuint.js",
        "directory": "../src/js/easing",
        "type": "Function"
    },
    "sugar.js.easing.easeInQuad": {
        "name": "easeInQuad",
        "namespace": "sugar.js.easing",
        "filename": "easeInQuad.js",
        "extension": "js",
        "path": "../src/js/easing/easeInQuad.js",
        "directory": "../src/js/easing",
        "type": "Function",
        "description": "Ease in quad function"
    },
    "sugar.js.easing.easeInQuart": {
        "name": "easeInQuart",
        "namespace": "sugar.js.easing",
        "filename": "easeInQuart.js",
        "extension": "js",
        "path": "../src/js/easing/easeInQuart.js",
        "directory": "../src/js/easing",
        "type": "Function",
        "description": "Ease in quart function"
    },
    "sugar.js.easing.easeInQuint": {
        "name": "easeInQuint",
        "namespace": "sugar.js.easing",
        "filename": "easeInQuint.js",
        "extension": "js",
        "path": "../src/js/easing/easeInQuint.js",
        "directory": "../src/js/easing",
        "type": "Function",
        "description": "Ease in quint function"
    },
    "sugar.js.easing.easeOutCubic": {
        "name": "easeOutCubic",
        "namespace": "sugar.js.easing",
        "filename": "easeOutCubic.js",
        "extension": "js",
        "path": "../src/js/easing/easeOutCubic.js",
        "directory": "../src/js/easing",
        "type": "Function",
        "description": "Ease out cubic function"
    },
    "sugar.js.easing.easeOutQuad": {
        "name": "easeOutQuad",
        "namespace": "sugar.js.easing",
        "filename": "easeOutQuad.js",
        "extension": "js",
        "path": "../src/js/easing/easeOutQuad.js",
        "directory": "../src/js/easing",
        "type": "Function",
        "description": "Ease out quad function"
    },
    "sugar.js.easing.easeOutQuart": {
        "name": "easeOutQuart",
        "namespace": "sugar.js.easing",
        "filename": "easeOutQuart.js",
        "extension": "js",
        "path": "../src/js/easing/easeOutQuart.js",
        "directory": "../src/js/easing",
        "type": "Function",
        "description": "Ease out quart function"
    },
    "sugar.js.easing.easeOutQuint": {
        "name": "easeOutQuint",
        "namespace": "sugar.js.easing",
        "filename": "easeOutQuint.js",
        "extension": "js",
        "path": "../src/js/easing/easeOutQuint.js",
        "directory": "../src/js/easing",
        "type": "Function",
        "description": "Ease out quint function"
    },
    "sugar.js.easing.linear": {
        "name": "linear",
        "namespace": "sugar.js.easing",
        "filename": "linear.js",
        "extension": "js",
        "path": "../src/js/easing/linear.js",
        "directory": "../src/js/easing",
        "type": "Function",
        "description": "Ease linear function"
    },
    "sugar.js.encoding.base64": {
        "name": "base64",
        "namespace": "sugar.js.encoding",
        "filename": "base64.js",
        "extension": "js",
        "path": "../src/js/encoding/base64.js",
        "directory": "../src/js/encoding",
        "type": "Object",
        "description": "This return an object containing the \"encode\" and \"decode\" function that you can use\nto encode/decode base64 Strings."
    },
    "sugar.js.event.trigger": {
        "name": "trigger",
        "namespace": "sugar.js.event",
        "filename": "dispatch.js",
        "extension": "js",
        "path": "../src/js/event/dispatch.js",
        "directory": "../src/js/event",
        "type": "Function",
        "description": "This function can ben used to trigger an event globally.\nYou can subscribe to these events using the \"sugar.js.event.subscribe\" function",
        "since": "2.0.0"
    },
    "sugar.js.event.on": {
        "name": "on",
        "namespace": "sugar.js.event",
        "filename": "on.js",
        "extension": "js",
        "path": "../src/js/event/on.js",
        "directory": "../src/js/event",
        "type": "Function",
        "description": "This function allows you to subscribe to global events triggered by the \"sugar.js.event.dispatch\" function\nIt use under the hood an SPromise instance",
        "since": "2.0.0"
    },
    "sugar.js.event.SEvent": {
        "name": "SEvent",
        "namespace": "sugar.js.event",
        "filename": "SEvent.js",
        "extension": "js",
        "path": "../src/js/event/SEvent.js",
        "directory": "../src/js/event",
        "type": "Class",
        "description": "Proxy class to create custom events that can be dispatched\nthrough the standard dispatch method on any HTMLElement"
    },
    "sugar.js.feature.dispatchEventAttribute": {
        "name": "dispatchEventAttribute",
        "namespace": "sugar.js.feature",
        "filename": "dispatchEventAttribute.js",
        "extension": "js",
        "path": "../src/js/feature/__wip__/dispatchEventAttribute.js",
        "directory": "../src/js/feature/__wip__",
        "type": "Feature",
        "description": "Add the possibility to dispatch an event named as you want\nwhen the native event is listened. By default the feature listen for\nthe click event unless you specify another one by using the format \"{event}:{eventNameToDispach}\""
    },
    "sugar.js.dom.autoScrollAnchorLinks": {
        "name": "autoScrollAnchorLinks",
        "namespace": "sugar.js.dom",
        "filename": "autoScrollAnchorLinks.js",
        "extension": "js",
        "path": "../src/js/feature/autoScrollAnchorLinks.js",
        "directory": "../src/js/feature",
        "type": "Function",
        "description": "Listen for links contains an hash to init them for scroll to target on click"
    },
    "sugar.js.feature.imagesLazySrcAttribute": {
        "name": "imagesLazySrcAttribute",
        "namespace": "sugar.js.feature",
        "filename": "imagesLazySrcAttribute.js",
        "extension": "js",
        "path": "../src/js/feature/imagesLazySrcAttribute.js",
        "directory": "../src/js/feature",
        "type": "Feature",
        "description": "Add support for the `lazy-src` attribute on `img` elements.\nThe video `src` attribute will be populated when the `img` element enter the viewport"
    },
    "sugar.js.feature.imagesLoadedAttribute": {
        "name": "imagesLoadedAttribute",
        "namespace": "sugar.js.feature",
        "filename": "imagesLoadedAttribute.js",
        "extension": "js",
        "path": "../src/js/feature/imagesLoadedAttribute.js",
        "directory": "../src/js/feature",
        "type": "Feature",
        "description": "Add on every images the attribute \"loaded\" when it has been fully loaded. This is useful\nfor styling purposes and for others thinks as well."
    },
    "sugar.js.feature.handleInputAttributes": {
        "name": "handleInputAttributes",
        "namespace": "sugar.js.feature",
        "filename": "inputAdditionalEvents.js",
        "extension": "js",
        "path": "../src/js/feature/inputAdditionalEvents.js",
        "directory": "../src/js/feature",
        "type": "Feature",
        "description": "Add some events on some DOM Elements. Here's the list:\n*input/textarea**: `onenter`, `onescape`"
    },
    "sugar.js.feature.linksScrollHrefAttribute": {
        "name": "linksScrollHrefAttribute",
        "namespace": "sugar.js.feature",
        "filename": "linksScrollHrefAttribute.js",
        "extension": "js",
        "path": "../src/js/feature/linksScrollHrefAttribute.js",
        "directory": "../src/js/feature",
        "type": "Feature",
        "description": "Add the ability to set links href attribute with \"scroll:#target\" in order to animate the scroll to this target element"
    },
    "sugar.js.feature.videoLazySrcAttribute": {
        "name": "videoLazySrcAttribute",
        "namespace": "sugar.js.feature",
        "filename": "videosLazySrcAttribute.js",
        "extension": "js",
        "path": "../src/js/feature/videosLazySrcAttribute.js",
        "directory": "../src/js/feature",
        "type": "Feature",
        "description": "Add support for the `lazy-src` attribute on `video` elements.\nThe video `src` attribute will be populated when the `video` element enter the viewport"
    },
    "sugar.js.file.extension": {
        "name": "extension",
        "namespace": "sugar.js.file",
        "filename": "extension.js",
        "extension": "js",
        "path": "../src/js/file/extension.js",
        "directory": "../src/js/file",
        "type": "Function",
        "description": "Return the passed file path extension"
    },
    "sugar.js.filter.SGooeySvgFilter": {
        "name": "SGooeySvgFilter",
        "namespace": "sugar.js.filter",
        "filename": "SSvgFilter.js",
        "extension": "js",
        "path": "../src/js/filter/SSvgFilter.js",
        "directory": "../src/js/filter",
        "type": "Class",
        "description": "This class allows you to create with ease some complexe SVG filters and to apply it on any HTMLElement that you want\nby extending this class like so"
    },
    "sugar.js.filter.SGradientSvgFilter": {
        "name": "SGradientSvgFilter",
        "namespace": "sugar.js.filter",
        "filename": "SGradientSvgFilter.js",
        "extension": "js",
        "path": "../src/js/filter/SGradientSvgFilter.js",
        "directory": "../src/js/filter",
        "type": "Class",
        "description": "This SVG filter class apply either a linear or a radial gradient of your choice\non an HTMLElement.\nThis is useful cause the gradient will only be applied on part of the elements that is really visible and will respect the opacity\nof each parts",
        "extends": "SSvgFilter"
    },
    "sugar.js.filter.SMotionblurSvgFilter": {
        "name": "SMotionblurSvgFilter",
        "namespace": "sugar.js.filter",
        "filename": "SMotionblurSvgFilter.js",
        "extension": "js",
        "path": "../src/js/filter/SMotionblurSvgFilter.js",
        "directory": "../src/js/filter",
        "type": "Class",
        "description": "This class represent a motion blur svg filter that will blur your\nelement depending on his movements, direction and speed"
    },
    "sugar.js.filter.SOutlineSvgFilter": {
        "name": "SOutlineSvgFilter",
        "namespace": "sugar.js.filter",
        "filename": "SOutlineSvgFilter.js",
        "extension": "js",
        "path": "../src/js/filter/SOutlineSvgFilter.js",
        "directory": "../src/js/filter",
        "type": "Class",
        "description": "This class represent an outline filter that can be applied on any HTMLElement.",
        "extends": "SSvgFilter"
    },
    "sugar.js.function.debounce": {
        "name": "debounce",
        "namespace": "sugar.js.function",
        "filename": "debounce.js",
        "extension": "js",
        "path": "../src/js/function/debounce.js",
        "directory": "../src/js/function",
        "type": "Function",
        "description": "This utils function allows you to make sure that a function that will normally be called\nseveral times, for example during a scroll event, to be called only once after\nthe delay passed"
    },
    "sugar.js.function.setRecursiveTimeout": {
        "name": "setRecursiveTimeout",
        "namespace": "sugar.js.function",
        "filename": "setRecursiveTimeout.js",
        "extension": "js",
        "path": "../src/js/function/setRecursiveTimeout.js",
        "directory": "../src/js/function",
        "type": "Function",
        "description": "This utils function allows you to call a passed function each x time during a certain duration"
    },
    "sugar.js.function.sleep": {
        "name": "sleep",
        "namespace": "sugar.js.function",
        "filename": "sleep.js",
        "extension": "js",
        "path": "../src/js/function/sleep.js",
        "directory": "../src/js/function",
        "type": "Function",
        "description": "Simple sleep function that can be used using \"await\" syntax in an \"async\" function"
    },
    "sugar.js.function.throttle": {
        "name": "throttle",
        "namespace": "sugar.js.function",
        "filename": "throttle.js",
        "extension": "js",
        "path": "../src/js/function/throttle.js",
        "directory": "../src/js/function",
        "type": "Function",
        "description": "This utils function allows you to make sure that a function that will normally be called\nseveral times, for example during a scroll event, to be called once each threshhold time"
    },
    "sugar.js.geom.2d.circleConstrain": {
        "name": "circleConstrain",
        "namespace": "sugar.js.geom.2d",
        "filename": "circleConstrain.js",
        "extension": "js",
        "path": "../src/js/geom/circleConstrain.js",
        "directory": "../src/js/geom",
        "type": "Function",
        "description": "Take as parameter a central point, a radius and a points to constrain inside the circle defined by the radius"
    },
    "sugar.js.geom.2d.distanceBetween": {
        "name": "distanceBetween",
        "namespace": "sugar.js.geom.2d",
        "filename": "distanceBetween.js",
        "extension": "js",
        "path": "../src/js/geom/distanceBetween.js",
        "directory": "../src/js/geom",
        "type": "Function",
        "description": "Get the distance between two points"
    },
    "sugar.js.google.SGoogleCustomSearch": {
        "name": "SGoogleCustomSearch",
        "namespace": "sugar.js.google",
        "filename": "SGoogleCustomSearch.js",
        "extension": "js",
        "path": "../src/js/google/SGoogleCustomSearch.js",
        "directory": "../src/js/google",
        "type": "Class",
        "description": "This class let you make with ease search requests to the google custom search service\nwith useful features like:\n- Simple pagination system\n- Promise support"
    },
    "sugar.js.class.SApp": {
        "name": "SApp",
        "namespace": "sugar.js.class",
        "filename": "SApp.js",
        "extension": "js",
        "path": "../src/js/html/__wip__/SApp.js",
        "directory": "../src/js/html/__wip__",
        "type": "Class",
        "description": "This class represent an application route class. This mean that you can create an application class that extend this one\nand your instance will have access to a whole package of data like the application name taken from the package.json file, the version,\nthe description, the author(s), the contributor(s), etc..."
    },
    "sugar.js.class.SApp.config": {
        "name": "config",
        "namespace": "sugar.js.class.SApp",
        "filename": "SApp.js",
        "extension": "js",
        "path": "../src/js/html/__wip__/SApp.js",
        "directory": "../src/js/html/__wip__",
        "type": "Function",
        "description": "Get a configuration value from the backend using an ajax call"
    },
    "sugar.js.class.SApp.meta": {
        "name": "meta",
        "namespace": "sugar.js.class.SApp",
        "filename": "SApp.js",
        "extension": "js",
        "path": "../src/js/html/__wip__/SApp.js",
        "directory": "../src/js/html/__wip__",
        "type": "Function",
        "description": "Usefull function that give you back an application meta taken depending on your passed dotted object path"
    },
    "squid.js.log.log": {
        "name": "log",
        "namespace": "squid.js.log",
        "filename": "SApp.js",
        "extension": "js",
        "path": "../src/js/html/__wip__/SApp.js",
        "directory": "../src/js/html/__wip__",
        "type": "Function",
        "description": "Log a message using the transports log system."
    },
    "sugar.js.class.SBind": {
        "name": "SBind",
        "namespace": "sugar.js.class",
        "filename": "SBind.js",
        "extension": "js",
        "path": "../src/js/html/__wip__/SBind.js",
        "directory": "../src/js/html/__wip__",
        "type": "Class",
        "description": "This class allows to bind properties between objects, object to HTMLElement attribute and vice versa."
    },
    "sugar.js.class.SLocalStorageFonts": {
        "name": "SLocalStorageFonts",
        "namespace": "sugar.js.class",
        "filename": "SLocalStorageFonts.js",
        "extension": "js",
        "path": "../src/js/html/__wip__/SLocalStorageFonts.js",
        "directory": "../src/js/html/__wip__",
        "type": "Class",
        "description": "This class allows to easily store and load custom fonts from the localStorage"
    },
    "sugar.js.socket.syncDom": {
        "name": "syncDom",
        "namespace": "sugar.js.socket",
        "filename": "SSocketDom.js",
        "extension": "js",
        "path": "../src/js/html/__wip__/SSocketDom.js",
        "directory": "../src/js/html/__wip__",
        "type": "Function",
        "description": "Simply connect to a backend socket.io server and listen for specifics messages from it to refresh automatically the DOM.\nThe messages that are listened are:\n- 'SSocketDom.html': Used to send some html to \"inject/replace\" in the current page HTML\n- 'SSocketDom.script': Used to add a script tag to the page\n- 'SSocketDom.style': Used to add a style tag to the page"
    },
    "sugar.js.class.settings.node": {
        "name": "settings.node",
        "namespace": "sugar.js.class",
        "filename": "SSocketDom.js",
        "extension": "js",
        "path": "../src/js/html/__wip__/SSocketDom.js",
        "directory": "../src/js/html/__wip__",
        "type": "HTMLElement",
        "description": "The root node where the html contents will be injected if no node is passed with the event"
    },
    "js class.settings.action": {
        "name": "settings.action",
        "namespace": "js class",
        "filename": "SSocketDom.js",
        "extension": "js",
        "path": "../src/js/html/__wip__/SSocketDom.js",
        "directory": "../src/js/html/__wip__",
        "type": "String",
        "description": "Specify which action will be executed if no one is passed with the event.\nIt can be one of these:\n- 'append': Will append the HTML content to the existing one\n- 'replace': Will replace the HTML content with the new one\n- 'prepend': Will inject the HTML content before the existing one"
    },
    "sugar.js.class.settings.events": {
        "name": "settings.events",
        "namespace": "sugar.js.class",
        "filename": "SSocketDom.js",
        "extension": "js",
        "path": "../src/js/html/__wip__/SSocketDom.js",
        "directory": "../src/js/html/__wip__",
        "type": "Object",
        "description": "Save the events scoped settings objects"
    },
    "sugar.js.class.emit": {
        "name": "emit",
        "namespace": "sugar.js.class",
        "filename": "SSocketDom.js",
        "extension": "js",
        "path": "../src/js/html/__wip__/SSocketDom.js",
        "directory": "../src/js/html/__wip__",
        "type": "Function",
        "description": "Emit an event with an object containing some values to pass to the server"
    },
    "sugar.js.class.registerEvent": {
        "name": "registerEvent",
        "namespace": "sugar.js.class",
        "filename": "SSocketDom.js",
        "extension": "js",
        "path": "../src/js/html/__wip__/SSocketDom.js",
        "directory": "../src/js/html/__wip__",
        "type": "Function",
        "description": "Register a new event with an handler function that will handle the event content"
    },
    "sugar.js.string.decodeHtmlEntities": {
        "name": "decodeHtmlEntities",
        "namespace": "sugar.js.string",
        "filename": "decodeHtmlEntities.js",
        "extension": "js",
        "path": "../src/js/html/decodeHtmlEntities.js",
        "directory": "../src/js/html",
        "type": "Function",
        "description": "Decode an htmlentities encoded string"
    },
    "sugar.js.html.getHtmlClassFromTagName": {
        "name": "getHtmlClassFromTagName",
        "namespace": "sugar.js.html",
        "filename": "getHtmlClassFromTagName.js",
        "extension": "js",
        "path": "../src/js/html/getHtmlClassFromTagName.js",
        "directory": "../src/js/html",
        "type": "Function",
        "description": "This function simply return the HTML{name}Element class depending on the passed\ntag name like \"p\", \"input\", \"textarea\", etc...",
        "since": "2.0.0"
    },
    "sugar.js.html.getHtmlhtmlClassFromHtmlClass": {
        "name": "getHtmlhtmlClassFromHtmlClass",
        "namespace": "sugar.js.html",
        "filename": "getTagNameFromHtmlClass.js",
        "extension": "js",
        "path": "../src/js/html/getTagNameFromHtmlClass.js",
        "directory": "../src/js/html",
        "type": "Function",
        "description": "This function simply return the tagname depending on the passed HTML class\nlike HTMLAnchorElement, HTMLLinkElement, etc...",
        "since": "2.0.0"
    },
    "sugar.js.html.HtmlTagToHtmlClassMap": {
        "name": "HtmlTagToHtmlClassMap",
        "namespace": "sugar.js.html",
        "filename": "htmlTagToHtmlClassMap.js",
        "extension": "js",
        "path": "../src/js/html/htmlTagToHtmlClassMap.js",
        "directory": "../src/js/html",
        "type": "Object",
        "description": "This export an object mapping the HTML tag name to his corresponding HTML class (object not css class)",
        "since": "2.0.0"
    },
    "sugar.js.html.replaceTags": {
        "name": "replaceTags",
        "namespace": "sugar.js.html",
        "filename": "replaceTags.js",
        "extension": "js",
        "path": "../src/js/html/replaceTags.js",
        "directory": "../src/js/html",
        "type": "Function",
        "description": "Replace all the html tags that you specify by something else that you can fully choose"
    },
    "sugar.js.html.striptags": {
        "name": "striptags",
        "namespace": "sugar.js.html",
        "filename": "striptags.js",
        "extension": "js",
        "path": "../src/js/html/striptags.js",
        "directory": "../src/js/html",
        "type": "Function",
        "description": "Strip tags of an html string.\nThis is a simple wrapper of the nice \"striptags\" package that you can find here: https://www.npmjs.com/package/striptags"
    },
    "sugar.js.html.strToHtml": {
        "name": "strToHtml",
        "namespace": "sugar.js.html",
        "filename": "strToHtml.js",
        "extension": "js",
        "path": "../src/js/html/strToHtml.js",
        "directory": "../src/js/html",
        "type": "Function",
        "description": "Return the html (dom) version of a string"
    },
    "sugar.js.html.toString": {
        "name": "toString",
        "namespace": "sugar.js.html",
        "filename": "toString.js",
        "extension": "js",
        "path": "../src/js/html/toString.js",
        "directory": "../src/js/html",
        "type": "Function",
        "description": "Return the string version of a dom node or the dom node and his children"
    },
    "sugar.js.http.request": {
        "name": "request",
        "namespace": "sugar.js.http",
        "filename": "request.js",
        "extension": "js",
        "path": "../src/js/http/request.js",
        "directory": "../src/js/http",
        "type": "Function",
        "description": "Easily create and send an http request. This will return an instance of the SAjax class."
    },
    "sugar.js.http.SRequest": {
        "name": "SRequest",
        "namespace": "sugar.js.http",
        "filename": "SRequest.js",
        "extension": "js",
        "path": "../src/js/http/SRequest.js",
        "directory": "../src/js/http",
        "type": "Class",
        "description": "Class that allows to simply handle ajax requests with ease.\nThis class give some useful features like :\n- Promise support\n- Recursive requests"
    },
    "sugar.js.http.SRequestConfig": {
        "name": "SRequestConfig",
        "namespace": "sugar.js.http",
        "filename": "SRequestConfig.js",
        "extension": "js",
        "path": "../src/js/http/SRequestConfig.js",
        "directory": "../src/js/http",
        "type": "Class",
        "description": "Class that represent an ajax request that will be passed to an SRequest instance.\nAll the axios settings are supported by this class"
    },
    "sugar.js.is.isArray": {
        "name": "isArray",
        "namespace": "sugar.js.is",
        "filename": "array.js",
        "extension": "js",
        "path": "../src/js/is/array.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Check if the passed value is a js Array"
    },
    "sugar.js.is.isBase64": {
        "name": "isBase64",
        "namespace": "sugar.js.is",
        "filename": "base64.js",
        "extension": "js",
        "path": "../src/js/is/base64.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Check if the passed value is a base 64 string"
    },
    "sugar.js.is.isBoolean": {
        "name": "isBoolean",
        "namespace": "sugar.js.is",
        "filename": "boolean.js",
        "extension": "js",
        "path": "../src/js/is/boolean.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Check if the passed value is a js Boolean"
    },
    "sugar.js.is.isBrowser": {
        "name": "isBrowser",
        "namespace": "sugar.js.is",
        "filename": "browser.js",
        "extension": "js",
        "path": "../src/js/is/browser.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Check if the script is running inside a browser or not"
    },
    "sugar.js.is.childProcess": {
        "name": "childProcess",
        "namespace": "sugar.js.is",
        "filename": "childProcess.js",
        "extension": "js",
        "path": "../src/js/is/childProcess.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Check if the current script is running as a child process or not by checking if the ```process.send``` exists, or is the environment variable ```IS_CHILD_PROCESS``` is true."
    },
    "sugar.js.is.isChrome": {
        "name": "isChrome",
        "namespace": "sugar.js.is",
        "filename": "chrome.js",
        "extension": "js",
        "path": "../src/js/is/chrome.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Detect if is chrome"
    },
    "sugar.js.is.class": {
        "name": "class",
        "namespace": "sugar.js.is",
        "filename": "class.js",
        "extension": "js",
        "path": "../src/js/is/class.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Check if the passed variable (or array of variables) is/are plain variable(s)"
    },
    "sugar.js.is.isColor": {
        "name": "isColor",
        "namespace": "sugar.js.is",
        "filename": "color.js",
        "extension": "js",
        "path": "../src/js/is/color.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Check if the passed value is a color"
    },
    "sugar.js.is.isDdmmyyyyDate": {
        "name": "isDdmmyyyyDate",
        "namespace": "sugar.js.is",
        "filename": "ddmmyyyyDate.js",
        "extension": "js",
        "path": "../src/js/is/ddmmyyyyDate.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Check if is a valid dd.mm.yyyy date\nThis will match : dd.mm.yyyy | dd/mm/yyyy | dd-mm-yyyy | dd mm yyyy"
    },
    "sugar.js.is.isEdge": {
        "name": "isEdge",
        "namespace": "sugar.js.is",
        "filename": "edge.js",
        "extension": "js",
        "path": "../src/js/is/edge.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Detect if is edge"
    },
    "sugar.js.is.isEmail": {
        "name": "isEmail",
        "namespace": "sugar.js.is",
        "filename": "email.js",
        "extension": "js",
        "path": "../src/js/is/email.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Check if the passed value is a valid email address"
    },
    "sugar.js.is.isEven": {
        "name": "isEven",
        "namespace": "sugar.js.is",
        "filename": "even.js",
        "extension": "js",
        "path": "../src/js/is/even.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Check if a number is even or not"
    },
    "sugar.js.is.isFirefox": {
        "name": "isFirefox",
        "namespace": "sugar.js.is",
        "filename": "firefox.js",
        "extension": "js",
        "path": "../src/js/is/firefox.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Detect if is firefox"
    },
    "sugar.js.is.isFunction": {
        "name": "isFunction",
        "namespace": "sugar.js.is",
        "filename": "function.js",
        "extension": "js",
        "path": "../src/js/is/function.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Check if the passed value is a js function"
    },
    "sugar.js.is.isGlob": {
        "name": "isGlob",
        "namespace": "sugar.js.is",
        "filename": "glob.js",
        "extension": "js",
        "path": "../src/js/is/glob.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Check if the passed string is a valid glob pattern or not",
        "since": "2.0.0"
    },
    "sugar.js.is.isIe": {
        "name": "isIe",
        "namespace": "sugar.js.is",
        "filename": "ie.js",
        "extension": "js",
        "path": "../src/js/is/ie.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Detect if is ie (internet explorer)"
    },
    "sugar.js.is.isInteger": {
        "name": "isInteger",
        "namespace": "sugar.js.is",
        "filename": "integer.js",
        "extension": "js",
        "path": "../src/js/is/integer.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Check if the passed value is an integer"
    },
    "sugar.js.is.isJs": {
        "name": "isJs",
        "namespace": "sugar.js.is",
        "filename": "js.js",
        "extension": "js",
        "path": "../src/js/is/js.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Check if the current script is running under javascript runtime or not..."
    },
    "sugar.js.is.isJson": {
        "name": "isJson",
        "namespace": "sugar.js.is",
        "filename": "json.js",
        "extension": "js",
        "path": "../src/js/is/json.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Check if the passed value is a valid json"
    },
    "sugar.js.is.linux": {
        "name": "linux",
        "namespace": "sugar.js.is",
        "filename": "linux.js",
        "extension": "js",
        "path": "../src/js/is/linux.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Check if the app run on linux"
    },
    "sugar.js.is.isMmddyyyyDate": {
        "name": "isMmddyyyyDate",
        "namespace": "sugar.js.is",
        "filename": "mmddyyyyDate.js",
        "extension": "js",
        "path": "../src/js/is/mmddyyyyDate.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Check if is a valid mm.dd.yyyy date\nThis will match : mm.dd.yyyy | mm/dd/yyyy | mm-dd-yyyy | mm dd yyyy"
    },
    "sugar.js.is.isMobile": {
        "name": "isMobile",
        "namespace": "sugar.js.is",
        "filename": "mobile.js",
        "extension": "js",
        "path": "../src/js/is/mobile.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Detect if is a mobile device (phone or tablet)"
    },
    "sugar.js.is.isNode": {
        "name": "isNode",
        "namespace": "sugar.js.is",
        "filename": "node.js",
        "extension": "js",
        "path": "../src/js/is/node.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Check if the current script is running under node runtime or not..."
    },
    "sugar.js.is.isNoisyProcess": {
        "name": "isNoisyProcess",
        "namespace": "sugar.js.is",
        "filename": "noisyProcess.js",
        "extension": "js",
        "path": "../src/js/is/noisyProcess.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "This function simply return true or false depending is the process is a noisy one or not.\nA noisy process is a process that has the environment variable \"NOISY_PROCESS\" setted to true.\nThis tells the process features like the SPromise class for example to console.log his actions\nso the main process (cause normally a noisy process is a child process as well) can catch these\nprinted \"object\" and pipe them in the main process automatically",
        "since": "2.0.0"
    },
    "sugar.js.is.isNumber": {
        "name": "isNumber",
        "namespace": "sugar.js.is",
        "filename": "number.js",
        "extension": "js",
        "path": "../src/js/is/number.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Check if the passed value is a number"
    },
    "sugar.js.is.isObject": {
        "name": "isObject",
        "namespace": "sugar.js.is",
        "filename": "object.js",
        "extension": "js",
        "path": "../src/js/is/object.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Check if the passed value is a js object"
    },
    "sugar.js.is.isOdd": {
        "name": "isOdd",
        "namespace": "sugar.js.is",
        "filename": "odd.js",
        "extension": "js",
        "path": "../src/js/is/odd.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Check if a number is odd or not"
    },
    "sugar.js.is.ofType": {
        "name": "ofType",
        "namespace": "sugar.js.is",
        "filename": "ofType.js",
        "extension": "js",
        "path": "../src/js/is/ofType.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "This function take the value to check and an argument type definition string like \"String\", \"Array<String>\", etc... and return true or false depending\nif the value pass the test or not...",
        "since": "2.0.0"
    },
    "sugar.js.is.isOpera": {
        "name": "isOpera",
        "namespace": "sugar.js.is",
        "filename": "opera.js",
        "extension": "js",
        "path": "../src/js/is/opera.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Detect if is opera"
    },
    "sugar.js.is.osx": {
        "name": "osx",
        "namespace": "sugar.js.is",
        "filename": "osx.js",
        "extension": "js",
        "path": "../src/js/is/osx.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Check if the app run on mac OS X or not"
    },
    "node.is.path": {
        "name": "path",
        "namespace": "node.is",
        "filename": "path.js",
        "extension": "js",
        "path": "../src/js/is/path.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Check if the passed string is a valid path or not"
    },
    "sugar.js.is.isPhone": {
        "name": "isPhone",
        "namespace": "sugar.js.is",
        "filename": "phone.js",
        "extension": "js",
        "path": "../src/js/is/phone.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Detect if is a phone device"
    },
    "sugar.js.is.plainObject": {
        "name": "plainObject",
        "namespace": "sugar.js.is",
        "filename": "plainObject.js",
        "extension": "js",
        "path": "../src/js/is/plainObject.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Check if the passed object (or array of objects) is/are plain object(s)"
    },
    "sugar.js.is.isRegexp": {
        "name": "isRegexp",
        "namespace": "sugar.js.is",
        "filename": "regexp.js",
        "extension": "js",
        "path": "../src/js/is/regexp.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Check if the passed value is a js Regexp"
    },
    "sugar.js.is.isSafari": {
        "name": "isSafari",
        "namespace": "sugar.js.is",
        "filename": "safari.js",
        "extension": "js",
        "path": "../src/js/is/safari.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Detect if is safari"
    },
    "sugar.js.is.isSamsumgBrowser": {
        "name": "isSamsumgBrowser",
        "namespace": "sugar.js.is",
        "filename": "samsungBrowser.js",
        "extension": "js",
        "path": "../src/js/is/samsungBrowser.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Detect if is the samsung stock browser that is running the page"
    },
    "sugar.js.is.isString": {
        "name": "isString",
        "namespace": "sugar.js.is",
        "filename": "string.js",
        "extension": "js",
        "path": "../src/js/is/string.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Check if the passed value is a js String"
    },
    "sugar.js.is.isTablet": {
        "name": "isTablet",
        "namespace": "sugar.js.is",
        "filename": "tablet.js",
        "extension": "js",
        "path": "../src/js/is/tablet.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Detect if is a tablet device"
    },
    "sugar.js.is.testEnv": {
        "name": "testEnv",
        "namespace": "sugar.js.is",
        "filename": "testEnv.js",
        "extension": "js",
        "path": "../src/js/is/testEnv.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Check if the current environment is in a test process or not",
        "since": "2.0.0"
    },
    "sugar.js.is.isUcBrowser": {
        "name": "isUcBrowser",
        "namespace": "sugar.js.is",
        "filename": "ucBrowser.js",
        "extension": "js",
        "path": "../src/js/is/ucBrowser.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Detect if is the UC stock browser that is running the page"
    },
    "sugar.js.is.isUrl": {
        "name": "isUrl",
        "namespace": "sugar.js.is",
        "filename": "url.js",
        "extension": "js",
        "path": "../src/js/is/url.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Check if the passed value is a valid url"
    },
    "sugar.js.is.windows": {
        "name": "windows",
        "namespace": "sugar.js.is",
        "filename": "windows.js",
        "extension": "js",
        "path": "../src/js/is/windows.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Check if the app run on mac OS X or not"
    },
    "sugar.js.is.isYyyymmddDate": {
        "name": "isYyyymmddDate",
        "namespace": "sugar.js.is",
        "filename": "yyyymmddDate.js",
        "extension": "js",
        "path": "../src/js/is/yyyymmddDate.js",
        "directory": "../src/js/is",
        "type": "Function",
        "description": "Check if is a valid yyyy.mm.dd date\nThis will match : yyyy.mm.dd | yyyy/mm/dd | yyyy-mm-dd | yyyy mm dd"
    },
    "sugar.js.json.stringify": {
        "name": "stringify",
        "namespace": "sugar.js.json",
        "filename": "stringify.js",
        "extension": "js",
        "path": "../src/js/json/stringify.js",
        "directory": "../src/js/json",
        "type": "Function",
        "description": "This function do the same as the ```JSON.stringify``` one but add some features.",
        "since": "2.0.0"
    },
    "sugar.js.keyboard.hotkey": {
        "name": "hotkey",
        "namespace": "sugar.js.keyboard",
        "filename": "hotkey.js",
        "extension": "js",
        "path": "../src/js/keyboard/hotkey.js",
        "directory": "../src/js/keyboard",
        "type": "Function",
        "description": "Simple function to add a hotkey like \"ctrl+a\" and an handler function that will be called when the hotkey has been pressed\nThe following keys are supported:\n- shift, option, alt, ctrl, control, command\n- backspace, tab, clear, enter, return, esc, escape, space, up, down, left, right, home, end, pageup, pagedown, del, delete\n- from f1 to f19\n- all the letters keys\n\nYou can pass an option object to your hotkey function call."
    },
    "sugar.js.log.SLogConsoleAdapter": {
        "name": "SLogConsoleAdapter",
        "namespace": "sugar.js.log",
        "filename": "SLogConsoleAdapter.js",
        "extension": "js",
        "path": "../src/js/log/adapters/SLogConsoleAdapter.js",
        "directory": "../src/js/log/adapters",
        "type": "Class",
        "description": "This class allows you to log your messages, errors, etc... easily through some adapters that cover some targets like \"console\" of course,\n\"mail\", \"slack\", etc..."
    },
    "sugar.js.log.SLogMailAdapter": {
        "name": "SLogMailAdapter",
        "namespace": "sugar.js.log",
        "filename": "SLogMailAdapter.js",
        "extension": "js",
        "path": "../src/js/log/adapters/SLogMailAdapter.js",
        "directory": "../src/js/log/adapters",
        "type": "Class",
        "description": "This class allows you to log your messages, errors, etc... easily through some adapters that cover some targets like \"console\" of course,\n\"mail\", \"slack\", etc..."
    },
    "sugar.js.debug.debug": {
        "name": "debug",
        "namespace": "sugar.js.debug",
        "filename": "debug.js",
        "extension": "js",
        "path": "../src/js/log/debug.js",
        "directory": "../src/js/log",
        "type": "Function",
        "description": "This function is a simple wrapper around the SLog class that let you use the debug features quickly"
    },
    "sugar.js.error.error": {
        "name": "error",
        "namespace": "sugar.js.error",
        "filename": "error.js",
        "extension": "js",
        "path": "../src/js/log/error.js",
        "directory": "../src/js/log",
        "type": "Function",
        "description": "This function is a simple wrapper around the SLog class that let you use the error features quickly"
    },
    "sugar.js.log.htmlPresets.console": {
        "name": "console",
        "namespace": "sugar.js.log.htmlPresets",
        "filename": "console.js",
        "extension": "js",
        "path": "../src/js/log/htmlPresets/console.js",
        "directory": "../src/js/log/htmlPresets",
        "type": "Function",
        "description": "Replace all the \"log\" html tags like \"<red>\", \"<bold>\", etc... with the corresponding syntax for the terminal"
    },
    "sugar.js.log.htmlPresets.files": {
        "name": "files",
        "namespace": "sugar.js.log.htmlPresets",
        "filename": "files.js",
        "extension": "js",
        "path": "../src/js/log/htmlPresets/files.js",
        "directory": "../src/js/log/htmlPresets",
        "type": "Function",
        "description": "Replace all the \"log\" html tags like \"<red>\", \"<bold>\", etc... with the corresponding syntax for the files"
    },
    "sugar.js.log.htmlPresets.mail": {
        "name": "mail",
        "namespace": "sugar.js.log.htmlPresets",
        "filename": "mail.js",
        "extension": "js",
        "path": "../src/js/log/htmlPresets/mail.js",
        "directory": "../src/js/log/htmlPresets",
        "type": "Function",
        "description": "Replace all the \"log\" html tags like \"<red>\", \"<bold>\", etc... with the corresponding syntax for mail formating"
    },
    "sugar.js.info.info": {
        "name": "info",
        "namespace": "sugar.js.info",
        "filename": "info.js",
        "extension": "js",
        "path": "../src/js/log/info.js",
        "directory": "../src/js/log",
        "type": "Function",
        "description": "This function is a simple wrapper around the SLog class that let you use the info features quickly"
    },
    "sugar.js.log.log": {
        "name": "log",
        "namespace": "sugar.js.log",
        "filename": "log.js",
        "extension": "js",
        "path": "../src/js/log/log.js",
        "directory": "../src/js/log",
        "type": "Function",
        "description": "This function is a simple wrapper around the SLog class that let you use the log features quickly"
    },
    "sugar.js.log.SLog": {
        "name": "SLog",
        "namespace": "sugar.js.log",
        "filename": "SLog.js",
        "extension": "js",
        "path": "../src/js/log/SLog.js",
        "directory": "../src/js/log",
        "type": "Class",
        "description": "This class allows you to log your messages, errors, etc... easily through some adapters that cover some targets like \"console\" of course,\n\"mail\", \"slack\", etc..."
    },
    "sugar.js.warn.warn": {
        "name": "warn",
        "namespace": "sugar.js.warn",
        "filename": "warn.js",
        "extension": "js",
        "path": "../src/js/log/warn.js",
        "directory": "../src/js/log",
        "type": "Function",
        "description": "This function is a simple wrapper around the SLog class that let you use the warn features quickly"
    },
    "sugar.js.nav.SNav": {
        "name": "SNav",
        "namespace": "sugar.js.nav",
        "filename": "SNav.js",
        "extension": "js",
        "path": "../src/js/nav/SNav.js",
        "directory": "../src/js/nav",
        "type": "Class",
        "description": "This class represent a navigation tree that you can manage, add items, and display in multiple formats like html, markdown, and more to come",
        "since": "2.0.0"
    },
    "sugar.js.nav.SNavItem": {
        "name": "SNavItem",
        "namespace": "sugar.js.nav",
        "filename": "SNavItem.js",
        "extension": "js",
        "path": "../src/js/nav/SNavItem.js",
        "directory": "../src/js/nav",
        "type": "Class",
        "description": "This class represent a navigation item with some properties like the actions, the id, the text, etc...",
        "since": "2.0.0"
    },
    "sugar.js.npm.parseAuthorString": {
        "name": "parseAuthorString",
        "namespace": "sugar.js.npm",
        "filename": "parseAuthorString.js",
        "extension": "js",
        "path": "../src/js/npm/parseAuthorString.js",
        "directory": "../src/js/npm",
        "type": "Function",
        "description": "This function simply take an author string like \"Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\" and\ntransform it into a plain object with these properties: name, email and url",
        "since": "2.0.0"
    },
    "sugar.js.npm.standardizeJson": {
        "name": "standardizeJson",
        "namespace": "sugar.js.npm",
        "filename": "standardizeJson.js",
        "extension": "js",
        "path": "../src/js/npm/standardizeJson.js",
        "directory": "../src/js/npm",
        "type": "Function",
        "description": "This function simply take a package.json JSON formatted object and standardize\nsome fields like the \"author\" one to be sure it is an object at the end,\nthe \"contributors\" array the same way as the \"author\" one, etc... Here's the list\nof processed actions:\n1. Transform the string version of the \"author\" field into an object with the properties \"name\", \"email\" and \"url\"\n2. Transform the string version of the \"contributors\" field into an object with the properties \"name\", \"email\" and \"url\"",
        "since": "2.0.0"
    },
    "sugar.js.number.constrain": {
        "name": "constrain",
        "namespace": "sugar.js.number",
        "filename": "constrain.js",
        "extension": "js",
        "path": "../src/js/number/constrain.js",
        "directory": "../src/js/number",
        "type": "Function",
        "description": "Constrain a value between a min and a max value"
    },
    "sugar.js.number.pad": {
        "name": "pad",
        "namespace": "sugar.js.number",
        "filename": "pad.js",
        "extension": "js",
        "path": "../src/js/number/pad.js",
        "directory": "../src/js/number",
        "type": "Function",
        "description": "Pad a number n of x 0 or another passed character"
    },
    "node.object.deepDiff": {
        "name": "deepDiff",
        "namespace": "node.object",
        "filename": "deepDiff.js",
        "extension": "js",
        "path": "../src/js/object/__wip__/deepDiff.js",
        "directory": "../src/js/object/__wip__",
        "type": "Function",
        "description": "Take two objects and return an object that contains only the differences between them"
    },
    "sugar.js.object.constructorName": {
        "name": "constructorName",
        "namespace": "sugar.js.object",
        "filename": "constructorName.js",
        "extension": "js",
        "path": "../src/js/object/constructorName.js",
        "directory": "../src/js/object",
        "type": "Function",
        "description": "Return the constructor name of the passed object"
    },
    "sugar.js.object.deepize": {
        "name": "deepize",
        "namespace": "sugar.js.object",
        "filename": "deepize.js",
        "extension": "js",
        "path": "../src/js/object/deepize.js",
        "directory": "../src/js/object",
        "type": "Function",
        "description": "This function simply take an object like this one:\n{\n'something.cool': 'hello'\n}\nand convert it to something like this:\n{\nsomething: {\ncool: 'hello'\n}\n}",
        "since": "2.0.0"
    },
    "sugar.js.object.deepMap": {
        "name": "deepMap",
        "namespace": "sugar.js.object",
        "filename": "deepMap.js",
        "extension": "js",
        "path": "../src/js/object/deepMap.js",
        "directory": "../src/js/object",
        "type": "Function",
        "description": "This function is the same as the \"map\" one. The only difference is that this one goes deep into the object"
    },
    "sugar.js.object.deepMerge": {
        "name": "deepMerge",
        "namespace": "sugar.js.object",
        "filename": "deepMerge.js",
        "extension": "js",
        "path": "../src/js/object/deepMerge.js",
        "directory": "../src/js/object",
        "type": "Function",
        "description": "Deep merge one object with another and return the merged object result. This merging implementation support:\n- Merging object with getters/setters\n- n numbers of objects as arguments"
    },
    "sugar.js.object.deepProxy": {
        "name": "deepProxy",
        "namespace": "sugar.js.object",
        "filename": "deepProxy.js",
        "extension": "js",
        "path": "../src/js/object/deepProxy.js",
        "directory": "../src/js/object",
        "type": "Function",
        "description": "This function allows you to add Proxy to an object in deep fashion.\nNormally the Proxy process only the level on which it has been added. Here we add Proxy to all the\nobject levels and to new properties as well.\n\nOn the returned proxied object, you will have access to the ```revoke``` method that you can call to revoke the proxy applied.\nThis method will return you a shallow version of the proxied object that you can use as you want"
    },
    "sugar.js.object.delete": {
        "name": "delete",
        "namespace": "sugar.js.object",
        "filename": "delete.js",
        "extension": "js",
        "path": "../src/js/object/delete.js",
        "directory": "../src/js/object",
        "type": "Function",
        "description": "Delete an object property using a dotPath like \"something.else\""
    },
    "sugar.js.object.diff": {
        "name": "diff",
        "namespace": "sugar.js.object",
        "filename": "diff.js",
        "extension": "js",
        "path": "../src/js/object/diff.js",
        "directory": "../src/js/object",
        "type": "Function",
        "description": "This function take two objects and return an object that contains only what has been changed between the two.\nThis function is a simple wrapper around the nice object-diff package from Thomas Jensen that you can find here: https://www.npmjs.com/package/object-diff"
    },
    "sugar.js.object.ensureExists": {
        "name": "ensureExists",
        "namespace": "sugar.js.object",
        "filename": "ensureExists.js",
        "extension": "js",
        "path": "../src/js/object/ensureExists.js",
        "directory": "../src/js/object",
        "type": "Function",
        "description": "Pass a string like \"my.cool.object\" and the value it has to be and this function will ensure that this deep object exist"
    },
    "sugar.js.object.extractValues": {
        "name": "extractValues",
        "namespace": "sugar.js.object",
        "filename": "extractValues.js",
        "extension": "js",
        "path": "../src/js/object/extractValues.js",
        "directory": "../src/js/object",
        "type": "Function",
        "description": "This function take an array of objects and a key name as parameters and return an array containing\nonly the specified object key value.",
        "since": "2.0.0"
    },
    "sugar.js.object.filter": {
        "name": "filter",
        "namespace": "sugar.js.object",
        "filename": "filter.js",
        "extension": "js",
        "path": "../src/js/object/filter.js",
        "directory": "../src/js/object",
        "type": "Function",
        "description": "Allow to filter an object using a function. It works the same as the filter method on the Array object type.\nThe passed filter function will have as parameter each object properties and must return true or false depending if you want the\npassed property in the filtered object"
    },
    "sugar.js.object.flatten": {
        "name": "flatten",
        "namespace": "sugar.js.object",
        "filename": "flatten.js",
        "extension": "js",
        "path": "../src/js/object/flatten.js",
        "directory": "../src/js/object",
        "type": "Function",
        "description": "Transform the passed multiple level object into a single level one"
    },
    "sugar.js.object.get": {
        "name": "get",
        "namespace": "sugar.js.object",
        "filename": "get.js",
        "extension": "js",
        "path": "../src/js/object/get.js",
        "directory": "../src/js/object",
        "type": "Function",
        "description": "Retreive an object value using a dotted path like \"myObject.myProperty.myValue\""
    },
    "sugar.js.object.getKeyByValue": {
        "name": "getKeyByValue",
        "namespace": "sugar.js.object",
        "filename": "getKeyByValue.js",
        "extension": "js",
        "path": "../src/js/object/getKeyByValue.js",
        "directory": "../src/js/object",
        "type": "Function",
        "description": "Return the key that correspond to the passed value in the passed object"
    },
    "sugar.js.object.map": {
        "name": "map",
        "namespace": "sugar.js.object",
        "filename": "map.js",
        "extension": "js",
        "path": "../src/js/object/map.js",
        "directory": "../src/js/object",
        "type": "Function",
        "description": "This is the same function as the \"Array.map\" but for objects. It will iterate over all the properties\nof the passed object and pass the value to your process function. It will then save the property\nwith your processed value"
    },
    "sugar.js.object.propertyProxy": {
        "name": "propertyProxy",
        "namespace": "sugar.js.object",
        "filename": "propertyProxy.js",
        "extension": "js",
        "path": "../src/js/object/propertyProxy.js",
        "directory": "../src/js/object",
        "type": "Function",
        "description": "Create a proxy for and object property.\nThis gives you the possibility to process the data of the property\nwhen it is getted or setted."
    },
    "sugar.js.object.resolveTokens": {
        "name": "resolveTokens",
        "namespace": "sugar.js.object",
        "filename": "resolveTokens.js",
        "extension": "js",
        "path": "../src/js/object/resolveTokens.js",
        "directory": "../src/js/object",
        "type": "Function",
        "description": "This function take an object and propare it to accept tokens like:\n- '{this.something.else}'\n- etc..."
    },
    "sugar.js.object.set": {
        "name": "set",
        "namespace": "sugar.js.object",
        "filename": "set.js",
        "extension": "js",
        "path": "../src/js/object/set.js",
        "directory": "../src/js/object",
        "type": "Function",
        "description": "Set an object value using a dotted object path like \"myObject.myProperty.myValue\" to set his position"
    },
    "sugar.js.object.sort": {
        "name": "sort",
        "namespace": "sugar.js.object",
        "filename": "sort.js",
        "extension": "js",
        "path": "../src/js/object/sort.js",
        "directory": "../src/js/object",
        "type": "Function",
        "description": "Sort an object properties the same way as the Array.sort do it"
    },
    "sugar.js.object.SWatch": {
        "name": "SWatch",
        "namespace": "sugar.js.object",
        "filename": "SWatch.js",
        "extension": "js",
        "path": "../src/js/object/SWatch.js",
        "directory": "../src/js/object",
        "type": "Class",
        "description": "This class allows you to easily monitor some object properties and get the new and old value of it"
    },
    "sugar.js.object.toQueryString": {
        "name": "toQueryString",
        "namespace": "sugar.js.object",
        "filename": "toQueryString.js",
        "extension": "js",
        "path": "../src/js/object/toQueryString.js",
        "directory": "../src/js/object",
        "type": "Function",
        "description": "Transform an object (key => pairs) to a query string like \"?var1=value1&var2\""
    },
    "node.object.uid": {
        "name": "uid",
        "namespace": "node.object",
        "filename": "uid.js",
        "extension": "js",
        "path": "../src/js/object/uid.js",
        "directory": "../src/js/object",
        "type": "Function",
        "description": "This function allows you to generate a uniqid based on the objects you pass as parameters.\nThe uid is hashed into a SHA256 32bits string but you can specify it using the \"format\" parameter described above"
    },
    "sugar.js.object.watch": {
        "name": "watch",
        "namespace": "sugar.js.object",
        "filename": "watch.js",
        "extension": "js",
        "path": "../src/js/object/watch.js",
        "directory": "../src/js/object",
        "type": "Function",
        "description": "This method is a simple wrapper around the SWatch class that allows you to watch some action on object and arrays"
    },
    "sugar.js.path.packageRoot": {
        "name": "packageRoot",
        "namespace": "sugar.js.path",
        "filename": "packageRoot.js",
        "extension": "js",
        "path": "../src/js/path/packageRoot.js",
        "directory": "../src/js/path",
        "type": "Function",
        "description": "This function return the path where stands the package in the filesystem.\n!!! This function works only in development mode cause it will be dangerous to\nexpose this kind on information on a website...\nIf the environment is not the good one, this function will simply return an empty string",
        "since": "2.0.0"
    },
    "sugar.js.polyfill.queryselector-scope": {
        "name": "queryselector-scope",
        "namespace": "sugar.js.polyfill",
        "filename": "queryselector-scope.js",
        "extension": "js",
        "path": "../src/js/polyfill/queryselector-scope.js",
        "directory": "../src/js/polyfill",
        "type": "Polyfill",
        "description": "Polyfill for the :scope value in the querySelector and querySelectorAll functions\nTo use it, just require this file in your codebase"
    },
    "sugar.js.promise.SPromise": {
        "name": "SPromise",
        "namespace": "sugar.js.promise",
        "filename": "SPromise.js",
        "extension": "js",
        "path": "../src/js/promise/SPromise.js",
        "directory": "../src/js/promise",
        "type": "Class",
        "description": "This class works the same as the default Promise one. The difference is that you have more control on this one like\nthe possibility to resolve it multiple times. Here's a list of the \"differences\" and the \"features\" that this class provide:\n\n- Pass the normal \"resolve\" and \"reject\" function to the passed executor\n- Pass a new function to the passed executor called \"trigger\" that let you launch your registered callbacks like \"then\", \"catch\", etc... but without resolving the master promise. Here's some examples:\n- new SPromise((resolve, reject, trigger, cancel) => { trigger('then', 'myCoolValue'); }).then(value => { ... });\n- new SPromise((resolve, reject, trigger, cancel) => { trigger('then,catch', 'myCoolValue') }).then(value => { ... });\n- Pass a new function to the passed executor called \"cancel\" that let you stop/cancel the promise execution without triggering your registered callbacks unless the \"cancel\" once...\n- Expose the normal \"then\" and \"catch\" methods to register your callbacks\n- Expose some new callbacks registration functions described here:\n- Expose a method called \"resolved\" that let you register callbacks called only when the \"resolve\" function has been called\n- Expose a method called \"rejected\" that let you register callbacks called only when the \"reject\" function has been called\n- Expose a method called \"finally\" that let you register callbacks called when the \"resolve\" or \"reject\" function has been called\n- Expose a method called \"canceled\" that let you register callbacks called only when the \"cancel\" function has been called\n- Every callbacks registration methods accept as first argument the number of time that your callback will be called at max. Here's some examples:\n- new SPromise((...)).then(value => { // do something... }).catch(error => { // do something... });\n- new SPromise((...)).then(1, value => { // do something... }).catch(3, error => { // do something... });\n- Expose a method called \"on\" that can be used to register callbacks the same as the \"then\", \"catch\", etc... methods but you can register a same callback function to multiple callbacks type at once:\n- new SPromise((...)).on('then', value => { ... }).on('then,catch', value => { ... });\n- Specify the max number of time to call your callback function like so: new SPromise((...)).on('then:2', value => { ... }).on('then:1,catch', value => { ... });\n- A new method called \"start\" is exposed. This method is useful when you absolutely need that your executor function is launched right after the callbacks registrations.\n- If you don't call the \"start\" method, the executor function passed to the SPromise constructor will be called on the next javascript execution loop\n- Support the Promises chaining through the callbacks like to:\n```js\nconst result = await new SPromise((resolve, reject, trigger, cancel) => {\nresolve('hello');\n}).then(value => {\nreturn new Promise((resolve) => {\nsetTimeout(() => {\nresolve(value + 'World');\n}, 1000);\n});\n}).then(value => {\nreturn value + 'Promise';\n});\nconsole.log(result); // => helloWorldPromise\n```"
    },
    "sugar.js.stream.SActionStream": {
        "name": "SActionStream",
        "namespace": "sugar.js.stream",
        "filename": "SActionsStream.js",
        "extension": "js",
        "path": "../src/js/stream/SActionsStream.js",
        "directory": "../src/js/stream",
        "type": "Class",
        "description": "This class represent the base of a actions stream.\nAn action stream if simply some functions that are called one after the other\nand that pass to each other some value(s) on which to work.\nHere's all the \"events\" that you can subscribe on the SActionStream instance, or on the returned SPromise when calling the \"start\" method:\n- start: Triggered when the overall actions stream starts\n- {actionName}.start: Triggered when the specified action starts\n- {actionName}.reject: Triggered when the specified action has been rejected\n- {actionName}.complete: Triggered when the specified action has been completed\n- complete: Triggered when the overall actions stream has been completed\n- resolve: Trigerred when the overall actions stream has been completed\n- log: Triggered when a log message has been set\n- cancel: Triggered when the stream has been canceled using the \"cancel\" method of the returned SPromise when calling the \"start\" method",
        "extends": "SPromise",
        "since": "2.0.0"
    },
    "sugar.js.stream.SActionStreamAction": {
        "name": "SActionStreamAction",
        "namespace": "sugar.js.stream",
        "filename": "SActionsStreamAction.js",
        "extension": "js",
        "path": "../src/js/stream/SActionsStreamAction.js",
        "directory": "../src/js/stream",
        "type": "Class",
        "description": "This class represent the base of a actions stream action.\nAn action stream action represent an action that you can register in the SActionsStream instance and\nprodive you some usefull features like \"trigger\" some events, set/get data from the streamObj, defining some required streamObj properties\nto work with, etc...",
        "extends": "SPromise",
        "since": "2.0.0"
    },
    "sugar.js.string.autoCast": {
        "name": "autoCast",
        "namespace": "sugar.js.string",
        "filename": "autoCast.js",
        "extension": "js",
        "path": "../src/js/string/autoCast.js",
        "directory": "../src/js/string",
        "type": "Function",
        "description": "Auto cast the string into the correct variable type"
    },
    "sugar.js.string.camelize": {
        "name": "camelize",
        "namespace": "sugar.js.string",
        "filename": "camelize.js",
        "extension": "js",
        "path": "../src/js/string/camelize.js",
        "directory": "../src/js/string",
        "type": "Function",
        "description": "Camelize a string"
    },
    "sugar.js.string.countLine": {
        "name": "countLine",
        "namespace": "sugar.js.string",
        "filename": "countLine.js",
        "extension": "js",
        "path": "../src/js/string/countLine.js",
        "directory": "../src/js/string",
        "type": "Function",
        "description": "Count how many characters their is in the passed line.\nThis function will exclude the characters like the html tags like <red>, etc..."
    },
    "sugar.js.string.crop": {
        "name": "crop",
        "namespace": "sugar.js.string",
        "filename": "crop.js",
        "extension": "js",
        "path": "../src/js/string/crop.js",
        "directory": "../src/js/string",
        "type": "Function",
        "description": "Allows you to crop a string at a certain length (this length take care of the croping characters like \"...\")"
    },
    "sugar.js.string.extractSame": {
        "name": "extractSame",
        "namespace": "sugar.js.string",
        "filename": "extractSame.js",
        "extension": "js",
        "path": "../src/js/string/extractSame.js",
        "directory": "../src/js/string",
        "type": "Function",
        "description": "This function return you what has been find the same in the two passed string.\nIt will return you either an array of same string parts or a simple string\nrepresenting the first same part found.",
        "since": "2.0.0"
    },
    "sugar.js.string.includes": {
        "name": "includes",
        "namespace": "sugar.js.string",
        "filename": "includes.js",
        "extension": "js",
        "path": "../src/js/string/includes.js",
        "directory": "../src/js/string",
        "type": "Function",
        "description": "Same as the native String.includes function but accept either an array of items\nor a simple comma separated string like \"something,cool,hello,world\""
    },
    "sugar.js.string.lowerFirst": {
        "name": "lowerFirst",
        "namespace": "sugar.js.string",
        "filename": "lowerFirst.js",
        "extension": "js",
        "path": "../src/js/string/lowerFirst.js",
        "directory": "../src/js/string",
        "type": "Function",
        "description": "Lower first letter"
    },
    "sugar.js.string.ltrim": {
        "name": "ltrim",
        "namespace": "sugar.js.string",
        "filename": "ltrim.js",
        "extension": "js",
        "path": "../src/js/string/ltrim.js",
        "directory": "../src/js/string",
        "type": "Function",
        "description": "Trim left a specified string"
    },
    "sugar.js.string.paramCase": {
        "name": "paramCase",
        "namespace": "sugar.js.string",
        "filename": "paramCase.js",
        "extension": "js",
        "path": "../src/js/string/paramCase.js",
        "directory": "../src/js/string",
        "type": "Function",
        "description": "This function transform a string into a param case one like so \"something-cool\"",
        "since": "2.0.0"
    },
    "sugar.js.string.parse": {
        "name": "parse",
        "namespace": "sugar.js.string",
        "filename": "parse.js",
        "extension": "js",
        "path": "../src/js/string/parse.js",
        "directory": "../src/js/string",
        "type": "Function",
        "description": "Parse a string and convert it into his native data type like date, number, boolean, etc..."
    },
    "sugar.js.string.printf": {
        "name": "printf",
        "namespace": "sugar.js.string",
        "filename": "printf.js",
        "extension": "js",
        "path": "../src/js/string/printf.js",
        "directory": "../src/js/string",
        "type": "Function",
        "description": "printf php equavalent"
    },
    "sugar.js.string.replaceTokens": {
        "name": "replaceTokens",
        "namespace": "sugar.js.string",
        "filename": "replaceTokens.js",
        "extension": "js",
        "path": "../src/js/string/replaceTokens.js",
        "directory": "../src/js/string",
        "type": "Function",
        "description": "This function takes as parameter a tokened string like \"something [cool]\", an object\nof arguments/values and return the processed string with the tokens replaced by the arguments values.",
        "since": "2.0.0"
    },
    "sugar.js.string.rtrim": {
        "name": "rtrim",
        "namespace": "sugar.js.string",
        "filename": "rtrim.js",
        "extension": "js",
        "path": "../src/js/string/rtrim.js",
        "directory": "../src/js/string",
        "type": "Function",
        "description": "Trim right a specified string"
    },
    "sugar.js.string.simply": {
        "name": "simply",
        "namespace": "sugar.js.string",
        "filename": "simplify.js",
        "extension": "js",
        "path": "../src/js/string/simplify.js",
        "directory": "../src/js/string",
        "type": "Function",
        "description": "This function take a string with accents, etc and convert it to a more simply\nversion like \"éàddö\" to \"eaddo\"",
        "since": "2.0.0"
    },
    "sugar.js.string.splitEvery": {
        "name": "splitEvery",
        "namespace": "sugar.js.string",
        "filename": "splitEvery.js",
        "extension": "js",
        "path": "../src/js/string/splitEvery.js",
        "directory": "../src/js/string",
        "type": "Function",
        "description": "Split a string every n chars either by taking care of not spliting the words, or by simply spliting without any attention to that..."
    },
    "sugar.js.string.sprintf": {
        "name": "sprintf",
        "namespace": "sugar.js.string",
        "filename": "sprintf.js",
        "extension": "js",
        "path": "../src/js/string/sprintf.js",
        "directory": "../src/js/string",
        "type": "Function",
        "description": "Javascript implementation of the sprintf php function.\n>For more infos, check [this github repository](https://github.com/alexei/sprintf.js)"
    },
    "sugar.js.string.toString": {
        "name": "toString",
        "namespace": "sugar.js.string",
        "filename": "toString.js",
        "extension": "js",
        "path": "../src/js/string/toString.js",
        "directory": "../src/js/string",
        "type": "Function",
        "description": "Convert passed value to a string"
    },
    "sugar.js.string.trimLines": {
        "name": "trimLines",
        "namespace": "sugar.js.string",
        "filename": "trimLines.js",
        "extension": "js",
        "path": "../src/js/string/trimLines.js",
        "directory": "../src/js/string",
        "type": "Function",
        "description": "This function take a string and trim each lines",
        "since": "2.0.0"
    },
    "sugar.js.string.uncamelize": {
        "name": "uncamelize",
        "namespace": "sugar.js.string",
        "filename": "uncamelize.js",
        "extension": "js",
        "path": "../src/js/string/uncamelize.js",
        "directory": "../src/js/string",
        "type": "Function",
        "description": "Uncamelize a string"
    },
    "sugar.js.string.uniqid": {
        "name": "uniqid",
        "namespace": "sugar.js.string",
        "filename": "uniqid.js",
        "extension": "js",
        "path": "../src/js/string/uniqid.js",
        "directory": "../src/js/string",
        "type": "Function",
        "description": "Generate a uniqid string of 8 bytes. Work using the [uniqid](https://www.npmjs.com/package/uniqid) npm package under the hood."
    },
    "sugar.js.string.unquote": {
        "name": "unquote",
        "namespace": "sugar.js.string",
        "filename": "unquote.js",
        "extension": "js",
        "path": "../src/js/string/unquote.js",
        "directory": "../src/js/string",
        "type": "Function",
        "description": "Remove the quotes of a string\nTypes of quotes removed :\n- `\"`, `'`, `”`, '`'"
    },
    "sugar.js.string.upperFirst": {
        "name": "upperFirst",
        "namespace": "sugar.js.string",
        "filename": "upperFirst.js",
        "extension": "js",
        "path": "../src/js/string/upperFirst.js",
        "directory": "../src/js/string",
        "type": "Function",
        "description": "Upper first"
    },
    "sugar.js.time.convert": {
        "name": "convert",
        "namespace": "sugar.js.time",
        "filename": "convert.js",
        "extension": "js",
        "path": "../src/js/time/convert.js",
        "directory": "../src/js/time",
        "type": "Function",
        "description": "This function allows you to convert time like seconds, ms, hours, minutes, etc... from one format to another"
    },
    "sugar.js.time.STimer": {
        "name": "STimer",
        "namespace": "sugar.js.time",
        "filename": "STimer.js",
        "extension": "js",
        "path": "../src/js/time/STimer.js",
        "directory": "../src/js/time",
        "type": "Class",
        "description": "Class that let you create and handle timer with ease.\nWith this class you can set some callback function that will be\ncalled each x ms or tell that you want your callbacks to be called\na certain number of time during the timer time.\nThis class extends the SPromise one, meaning that you can subscribe to differents \"events\" triggered by the timer instance. Here's the list:\n- complete: Triggered when the timer is completed\n- tick: Triggered at each ticks depending on your settings\n- duration: Triggered when the duration has been changed\n- tickCount: Triggered when the tickCount has been changed\n- reset: Triggered when the timer has been reseted\n- start: Triggered when the timer starts\n- pause: Triggered when the timer has been paused\n- stop: Triggered when the timer has been stoped\n- destroy: Triggered when the timer has been destroyed",
        "extends": "SPromise",
        "since": "2.0.0"
    },
    "sugar.js.time.wait": {
        "name": "wait",
        "namespace": "sugar.js.time",
        "filename": "wait.js",
        "extension": "js",
        "path": "../src/js/time/wait.js",
        "directory": "../src/js/time",
        "type": "Function",
        "description": "This function is a simple \"setTimeout\" wrapper inside a promise."
    },
    "sugar.js.unit.convert": {
        "name": "convert",
        "namespace": "sugar.js.unit",
        "filename": "convert.js",
        "extension": "js",
        "path": "../src/js/unit/convert.js",
        "directory": "../src/js/unit",
        "type": "Function",
        "description": "Convert a passed unit to the wanted one. If the passed unit is a number and not a string like \"10rem\", the unit is take as pixels"
    },
    "sugar.js.unit.em2px": {
        "name": "em2px",
        "namespace": "sugar.js.unit",
        "filename": "em2px.js",
        "extension": "js",
        "path": "../src/js/unit/em2px.js",
        "directory": "../src/js/unit",
        "type": "Function",
        "description": "Convert rem value to a px one"
    },
    "sugar.js.unit.px2em": {
        "name": "px2em",
        "namespace": "sugar.js.unit",
        "filename": "px2em.js",
        "extension": "js",
        "path": "../src/js/unit/px2em.js",
        "directory": "../src/js/unit",
        "type": "Function",
        "description": "Convert rem value to a px one"
    },
    "sugar.js.unit.px2rem": {
        "name": "px2rem",
        "namespace": "sugar.js.unit",
        "filename": "px2rem.js",
        "extension": "js",
        "path": "../src/js/unit/px2rem.js",
        "directory": "../src/js/unit",
        "type": "Function",
        "description": "Convert rem value to a px one"
    },
    "sugar.js.unit.rem2px": {
        "name": "rem2px",
        "namespace": "sugar.js.unit",
        "filename": "rem2px.js",
        "extension": "js",
        "path": "../src/js/unit/rem2px.js",
        "directory": "../src/js/unit",
        "type": "Function",
        "description": "Convert rem value to a px one"
    },
    "sugar.js.url.gravatarUrl": {
        "name": "gravatarUrl",
        "namespace": "sugar.js.url",
        "filename": "gravatarUrl.js",
        "extension": "js",
        "path": "../src/js/url/gravatarUrl.js",
        "directory": "../src/js/url",
        "type": "Function",
        "description": "Return a gravatar url depending on the passed user email and size"
    },
    "sugar.js.url.parseSchema": {
        "name": "parseSchema",
        "namespace": "sugar.js.url",
        "filename": "parseSchema.js",
        "extension": "js",
        "path": "../src/js/url/parseSchema.js",
        "directory": "../src/js/url",
        "type": "Function",
        "description": "This function take two arguments. The first one is the url to parse and the second is a schema to scan the url with.\nThe schema describe the pathname of an url and tell's how to analyze it.\nHere's a little description with some example of schemas:\n- \"{param1}/{param2}/{param3}\": This schema describe that your Url must have 3 \"values\" named param1, param2 and param3\n- If my Url is \"something.com/hello/world/plop\", my schema is respected and I can have access to the values through the \"schema.params.param1\", \"schema.params.param2\", etc...\n- \"{hello:string}/{world:number}/{?idx:number}\": This schema describe that the Url can have 3 \"values\" but the last one is optional\n- If my Url is \"something.com/plop/3/1\", my schema is respected\n- If my Url is \"something.com/plop/2\", my schema is respected\n- If my Url is \"something.com/plop/hello/2\", my schema is not respected due to the fact that the param named \"world\" has to be a number"
    },
    "sugar.js.url.queryStringToObject": {
        "name": "queryStringToObject",
        "namespace": "sugar.js.url",
        "filename": "queryStringToObject.js",
        "extension": "js",
        "path": "../src/js/url/queryStringToObject.js",
        "directory": "../src/js/url",
        "type": "Function",
        "description": "Transform a query string into his object (key => pairs) representation"
    },
    "sugar.js.url.SUrl": {
        "name": "SUrl",
        "namespace": "sugar.js.url",
        "filename": "SUrl.js",
        "extension": "js",
        "path": "../src/js/url/SUrl.js",
        "directory": "../src/js/url",
        "type": "Class",
        "description": "Simple class that is useful to parse a URL (or the current browser URL) and gives you back\nan instance that has all these values availables as well as functions to modify the instancied URL:\n- protocol: The protocol scheme of the URL (e.g. http:).\n- slashes: A boolean which indicates whether the protocol is followed by two forward slashes (//).\n- auth: Authentication information portion (e.g. username:password).\n- username: Username of basic authentication.\n- password: Password of basic authentication.\n- host: Host name with port number.\n- hostname: Host name without port number.\n- port: Optional port number.\n- pathname: URL path.\n- query: Parsed object containing query string\n- queryString: Origin query string from the URL\n- hash: The \"fragment\" portion of the URL including the pound-sign (#).\n- href: The full URL.\n- origin: The origin of the URL.\n- schema: The schema property gives you access to an object containing these properties (only if you have provided the settings.schema setting):\n- match (true) {Boolean}: Tells you if your current url match the passed schema\n- errors (null) {Object}: Gives you access to which param(s) is/are in error\n- params (null) {Object}: Gives you access to each params specified in the schema with their values, etc...\n\nThis class use internally the `url-parse` npm module that you can find here: https://www.npmjs.com/package/url-parse"
    },
    "sugar.js.validation.object.interface.SDefinitionObjectInterface": {
        "name": "SDefinitionObjectInterface",
        "namespace": "sugar.js.validation.object.interface",
        "filename": "SDefinitionObjectInterface.js",
        "extension": "js",
        "path": "../src/js/validation/interface/SDefinitionObjectInterface.js",
        "directory": "../src/js/validation/interface",
        "type": "Class",
        "description": "This class represent the interface that describe the requirements for\nan item of the definitionObject",
        "extends": "SInterface",
        "since": "2.0.0"
    },
    "sugar.js.validation.interface.SValidationInterface": {
        "name": "SValidationInterface",
        "namespace": "sugar.js.validation.interface",
        "filename": "SValidationInterface.js",
        "extension": "js",
        "path": "../src/js/validation/interface/SValidationInterface.js",
        "directory": "../src/js/validation/interface",
        "type": "Class",
        "description": "This class represent the interface that describe the minimum requirements\nfor a validation class that extends the SValueValidation one",
        "extends": "SInterface",
        "since": "2.0.0"
    },
    "sugar.js.validation.object.validateDefinitionObject": {
        "name": "validateDefinitionObject",
        "namespace": "sugar.js.validation.object",
        "filename": "validateDefinitionObject.js",
        "extension": "js",
        "path": "../src/js/validation/object/validateDefinitionObject.js",
        "directory": "../src/js/validation/object",
        "type": "Function",
        "description": "This function simply take a definition object and validate it",
        "since": "2.0.0"
    },
    "sugar.js.validation.object.validateObject": {
        "name": "validateObject",
        "namespace": "sugar.js.validation.object",
        "filename": "validateObject.js",
        "extension": "js",
        "path": "../src/js/validation/object/validateObject.js",
        "directory": "../src/js/validation/object",
        "type": "Function",
        "description": "This function take an object, a definition object and validate this one depending on the definition...\nA definition object is a plain object that specify for each properties, some requirerments like the type, if it is required or not, etc...\nFor more documentation about the definition objects, check the \"validateDefinitionObject\" function doc.",
        "since": "2.0.0"
    },
    "sugar.js.validation.object.validateObjectOutputString": {
        "name": "validateObjectOutputString",
        "namespace": "sugar.js.validation.object",
        "filename": "validateObjectOutputString.js",
        "extension": "js",
        "path": "../src/js/validation/object/validateObjectOutputString.js",
        "directory": "../src/js/validation/object",
        "type": "Function",
        "description": "This function take the resulting object of the ```validateObject``` one and transform it into\na nice human readable string.",
        "since": "2.0.0"
    },
    "sugar.js.validation.value.validation.SStaticValidation": {
        "name": "SStaticValidation",
        "namespace": "sugar.js.validation.value.validation",
        "filename": "SStaticValidation.js",
        "extension": "js",
        "path": "../src/js/validation/object/validation/SStaticValidation.js",
        "directory": "../src/js/validation/object/validation",
        "type": "Class",
        "description": "This class represent the \"static\" validation",
        "since": "2.0.0"
    },
    "sugar.js.validation.value.validation.SValidation": {
        "name": "SValidation",
        "namespace": "sugar.js.validation.value.validation",
        "filename": "SValidation.js",
        "extension": "js",
        "path": "../src/js/validation/SValidation.js",
        "directory": "../src/js/validation",
        "type": "Class",
        "description": "This class represent the base validation class\nthat can be extended to create some validations like the \"required\" one, etc...",
        "since": "2.0.0"
    },
    "sugar.js.validation.utils.parseTypeDefinitionString": {
        "name": "parseTypeDefinitionString",
        "namespace": "sugar.js.validation.utils",
        "filename": "parseTypeDefinitionString.js",
        "extension": "js",
        "path": "../src/js/validation/utils/parseTypeDefinitionString.js",
        "directory": "../src/js/validation/utils",
        "type": "Function",
        "description": "Thia function take an argument type definition string like \"String\", \"Array<String>\", \"Array|String\", etc... and return an object that represent this.",
        "since": "2.0.0"
    },
    "sugar.js.validation.value.validateValue": {
        "name": "validateValue",
        "namespace": "sugar.js.validation.value",
        "filename": "validateValue.js",
        "extension": "js",
        "path": "../src/js/validation/value/validateValue.js",
        "directory": "../src/js/validation/value",
        "type": "Function",
        "description": "This function take a value and check if it correspond to the passed definition object.\nIf the value pass the test, the function will return true, otherwise it will return\na string that describe the issue.",
        "since": "2.0.0"
    },
    "sugar.js.validation.value.validateValueOutputString": {
        "name": "validateValueOutputString",
        "namespace": "sugar.js.validation.value",
        "filename": "validateValueOutputString.js",
        "extension": "js",
        "path": "../src/js/validation/value/validateValueOutputString.js",
        "directory": "../src/js/validation/value",
        "type": "Function",
        "description": "This function take the resulting object of the ```validateValue``` one and transform it into\na nice human readable string.",
        "since": "2.0.0"
    },
    "sugar.js.validation.value.validation.SPathValidation": {
        "name": "SPathValidation",
        "namespace": "sugar.js.validation.value.validation",
        "filename": "SPathValidation.js",
        "extension": "js",
        "path": "../src/js/validation/value/validation/SPathValidation.js",
        "directory": "../src/js/validation/value/validation",
        "type": "Class",
        "description": "This class represent the \"required\" validation",
        "since": "2.0.0"
    },
    "sugar.js.validation.value.validation.SRequiredValidation": {
        "name": "SRequiredValidation",
        "namespace": "sugar.js.validation.value.validation",
        "filename": "SRequiredValidation.js",
        "extension": "js",
        "path": "../src/js/validation/value/validation/SRequiredValidation.js",
        "directory": "../src/js/validation/value/validation",
        "type": "Class",
        "description": "This class represent the \"required\" validation",
        "since": "2.0.0"
    },
    "sugar.js.validation.value.validation.STypeValidation": {
        "name": "STypeValidation",
        "namespace": "sugar.js.validation.value.validation",
        "filename": "STypeValidation.js",
        "extension": "js",
        "path": "../src/js/validation/value/validation/STypeValidation.js",
        "directory": "../src/js/validation/value/validation",
        "type": "Class",
        "description": "This class represent the \"type\" validation",
        "since": "2.0.0"
    },
    "sugar.js.validation.value.validation.SValuesValidation": {
        "name": "SValuesValidation",
        "namespace": "sugar.js.validation.value.validation",
        "filename": "SValuesValidation.js",
        "extension": "js",
        "path": "../src/js/validation/value/validation/SValuesValidation.js",
        "directory": "../src/js/validation/value/validation",
        "type": "Class",
        "description": "This class represent the \"values\" validation",
        "since": "2.0.0"
    },
    "sugar.js.value.typeDefinitionArrayObjectToString": {
        "name": "typeDefinitionArrayObjectToString",
        "namespace": "sugar.js.value",
        "filename": "typeDefinitionArrayObjectToString.js",
        "extension": "js",
        "path": "../src/js/value/typeDefinitionArrayObjectToString.js",
        "directory": "../src/js/value",
        "type": "Function",
        "description": "This function take as parameter a type definition object like this one:\n{\ntype: [{\ntype: 'Array',\nof: [{\ntype: 'Boolean'\n}]\n}]\n}\nan transform it to a string like so \"Array<Boolean>\"",
        "since": "2.0.0"
    },
    "sugar.js.value.typeof": {
        "name": "typeof",
        "namespace": "sugar.js.value",
        "filename": "typeof.js",
        "extension": "js",
        "path": "../src/js/value/typeof.js",
        "directory": "../src/js/value",
        "type": "Function",
        "description": "This function return the correct type of the passed value.\nIt support the recognition of arrays and return 'Array' as property type.\nYou can olso ask the function to gives you the \"of\" types of the passed value. This mean that if you\npass an Array like so \"[10,'Hello',true]\" and that you ask for \"of\" types, it will returns you\n\"Array<Integer|String|Boolean>\".\nAnother feature is to ask the result as an object like so:\n{\ntype: 'Array',\nof: ['Integer','String','Boolean']\n}\nYou can ask also the typeof function to returns you the actual class name if the passed value is an instance\nof an custom class.",
        "since": "2.0.0"
    },
    "sugar.js.webcomponent.SLitHtmlWebComponent": {
        "name": "SLitHtmlWebComponent",
        "namespace": "sugar.js.webcomponent",
        "filename": "SLitHtmlWebComponent.js",
        "extension": "js",
        "path": "../src/js/webcomponent/SLitHtmlWebComponent.js",
        "directory": "../src/js/webcomponent",
        "type": "Class",
        "description": "// TODO: example\n\nBase class that you can extends to create some SWebComponent with Lit Html rendering capabilities",
        "extends": "SWebComponent",
        "since": "2.0.0"
    },
    "sugar.js.webcomponent.SWebComponent": {
        "name": "SWebComponent",
        "namespace": "sugar.js.webcomponent",
        "filename": "SWebComponent.js",
        "extension": "js",
        "path": "../src/js/webcomponent/SWebComponent.js",
        "directory": "../src/js/webcomponent",
        "type": "Class",
        "description": "// TODO: example\n\nBase class that allows you to create easily new webcomponents and handle things like attributes updates,\nbase css (scss) importing, etc... Here's a list a features that this class covers:\n- Listen for attributes changes\n- Mount the component at a certain point in time (inViewport, visible, etc...)\n- *Automatically cast the attributes** to their proper js variable types (Array, Object, String, etc...)\n- *Physical props** : Specify some props that will ALWAYS be present as attribute on the component for styling purpose\n- Define some *default CSS** that will be injected in the head automatically\n- Specify some *required props**\n- *Full lifecycle management** through \"events\":\n- attach: Dispatched when the component is attached to the DOM\n- detach: Dispatched when the component is detached from the DOM\n- mounting: Dispatched when the component starts to mount itself (before mountWhen and mountDependencies execution)\n- mounted: Dispatched when the component has be mounted properly\n- prop|prop.{name}: Dispatched when a property has been updated, removed or added\n- The object format sended with the event is this one:\n- { prop: 'propName', action: 'update|remove|add', value: 'Something', previousValue: 'Other' }\n- *Mount dependencies** : This will allows you to set some promises that have to be resolved before mounting the component",
        "extends": "HTMLElement",
        "since": "2.0.0"
    }
}
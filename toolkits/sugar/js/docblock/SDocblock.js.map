{
    "version": 3,
    "sources": [
        "SDocblock.js"
    ],
    "names": [
        "SDocblock",
        "source",
        "settings",
        "_settings",
        "sortFunction",
        "a",
        "b",
        "res",
        "object",
        "namespace",
        "type",
        "toLowerCase",
        "constructor",
        "private",
        "name",
        "length",
        "filepath",
        "to",
        "markdown",
        "__markdown",
        "_source",
        "parse",
        "_blocks",
        "sort",
        "string",
        "reg",
        "blocksArray",
        "match",
        "Array",
        "isArray",
        "map",
        "t",
        "trim",
        "block",
        "__SDocblockBlock",
        "blocks",
        "toObject",
        "toMarkdown",
        "format",
        "includedTypes",
        "__handlebars",
        "registerHelper",
        "filter",
        "indexOf",
        "push",
        "join",
        "firstBlock",
        "template",
        "templates",
        "default",
        "Error",
        "Object",
        "keys",
        "_to",
        "compiledTemplateFn",
        "compile",
        "noEscape",
        "renderedTemplate"
    ],
    "mappings": "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",
    "sourcesContent": [
        "import __deepMerge from '../object/deepMerge';\nimport __SDocblockBlock from './SDocblockBlock';\nimport __handlebars from 'handlebars';\nimport __markdown from './markdown/index';\nimport __markdownToHtml from '../convert/html/htmlFromMarkdown';\n\n/**\n * @name                  Dockblock\n * @namespace           sugar.js.docblock\n * @type                  Class\n *\n * This is the main class that expose the methods like \"parse\", etc...\n * You have to instanciate it by passing a settings object. Here's the available options:\n *\n * @param       {String|Object}     source        The docblock source. Can be either a string, a filepath or an array of docblock objects\n * @param       {Object}      [settings={}]       An object of settings to configure the SDocblock instance:\n * - tags ({}) {Object}: An object representing the functions used to parse each tags. The object format is ```{ tagName: parseFn }```\n *\n * @todo        tests\n *\n * @example         js\n * import SDocblock from '@coffeekraken/sugar/js/docblock/SSDocblock';\n * new SDocblock(source, {\n *    // override some settings here...\n * });\n *\n * @since     2.0.0\n * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n */\nexport default class SDocblock {\n  /**\n   * @name              _settings\n   * @type              Object\n   * @private\n   *\n   * Store this instance settings\n   *\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n   */\n  _settings = {};\n\n  /**\n   * @name            _source\n   * @type            String|Array<Object>\n   * @private\n   *\n   * Store the passed source\n   *\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n   */\n  _source = null;\n\n  /**\n   * @name            _blocks\n   * @type            Array<Object>\n   * @private\n   *\n   * Store the parsed array of docblock objects\n   *\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n   */\n  _blocks = null;\n\n  /**\n   * @name          _to\n   * @type          String\n   * @private\n   *\n   * Store the format in which the docblocks have to be converted\n   *\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n   */\n  _to = null;\n\n  /**\n   * @name            constructor\n   * @type            Function\n   *\n   * Constructor\n   *\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n   */\n  constructor(source, settings = {}) {\n    this._settings = __deepMerge(\n      {\n        sortFunction: (a, b) => {\n          let res = 0;\n          // if (.object.namespace && !a.object.namespace) res -= 1;\n          if (b.object.namespace) res += 1;\n          if (b.object.type && b.object.type.toLowerCase() === 'class')\n            res += 1;\n          if (b.object.constructor) res += 1;\n          if (b.object.private) res += 1;\n          if (b.object.type && b.object.type.toLowerCase() === 'function')\n            res += 1;\n          if (\n            a.object.name &&\n            b.object.name &&\n            b.object.name.length > a.object.name.length\n          )\n            res += 1;\n          return res;\n        },\n        filepath: null,\n        to: {\n          markdown: __markdown\n        }\n      },\n      settings\n    );\n    this._source = source;\n    // parsing the source\n    this.parse();\n  }\n\n  /**\n   * @name        sort\n   * @type        Function\n   *\n   * This method allows you to set the order in which you want to get the\n   * blocks back when using the methods like get blocks, etc...\n   *\n   * @param       {Function}      [sortFunction=null]       Specify a custom sort function you want to use. If not set, use the ```sortFunction``` setting.\n   * @return      {SDocblock}Â                                   The class instance itself to maintain chainability\n   *\n   * @since       2.0.0\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n   */\n  sort(sortFunction = null) {\n    if (!sortFunction) sortFunction = this._settings.sortFunction;\n    this._blocks = this._blocks.sort(sortFunction);\n    return this;\n  }\n\n  /**\n   * @name        blocks\n   * @type        Array\n   *\n   * Access the parsed blocks array\n   *\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n   */\n  get blocks() {\n    if (!this._blocks) this.parse();\n    return this._blocks;\n  }\n\n  /**\n   * @name          parse\n   * @type          Function\n   *\n   * This method is the principal one. Use it to parse a string\n   * and get back the object version of it\n   *\n   * @param       {String}        [string=this._source]        The string to parse\n   * @return      {SDocblock}Â                     The class instance itself to maintain chainability\n   *\n   * @since       2.0.0\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  parse(string = this._source) {\n    // extract each docblocks\n    const reg = /(<!--|\\/\\*{2})([\\s\\S]+?)(\\*\\/|-->)/g;\n    // extracting blocks\n    let blocksArray = string.match(reg);\n\n    if (!Array.isArray(blocksArray)) {\n      blocksArray = [];\n    } else if (Array.isArray(blocksArray) && blocksArray.length) {\n      blocksArray = blocksArray.map((t) => t.trim());\n      if (!blocksArray || !blocksArray.length) return [];\n      blocksArray = blocksArray.map((block) => {\n        return new __SDocblockBlock(block || ' ', {\n          filepath: this._settings.filepath || ''\n        });\n      });\n    }\n    // save the blocks\n    this._blocks = blocksArray;\n\n    // sort the blocks\n    this.sort();\n\n    // return the class instance itself\n    return this;\n  }\n\n  /**\n   * @name          toObject\n   * @type          Function\n   *\n   * This method convert the parsed docblocks to a simple object\n   *\n   * @since       2.0.0\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  toObject() {\n    return this.blocks.map((block) => {\n      return block.toObject();\n    });\n  }\n\n  /**\n   * @name          toMarkdown\n   * @type          Function\n   *\n   * This method convert the parsed docblocks to a markdown string\n   *\n   * @since       2.0.0\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n   */\n  toMarkdown() {\n    return this.to('markdown');\n  }\n\n  /**\n   * @name          toHtml\n   * @type          Function\n   *\n   * This method convert the parsed docblocks to an HTML string\n   *\n   * @since       2.0.0\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n   */\n  toHtml(settings = {}) {\n    const markdown = this.toMarkdown();\n    return __markdownToHtml(markdown, settings);\n  }\n\n  /**\n   * @name              to\n   * @type              Function\n   *\n   * This method allows you to convert the parsed docblocks to a format like \"markdown\" and more to come...\n   *\n   * @param       {String}Â          format          The format in which you want to convert your docblocks.\n   * @return      {String}Â                          The converted docblocks\n   *\n   * @since       2.0.0\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n   */\n  to(format) {\n    const includedTypes = [];\n    __handlebars.registerHelper('include', (type) => {\n      if (!this.blocks || !this.blocks.length) return '';\n      // filter blocks\n      const blocks = this.blocks\n        .filter((block) => {\n          if (!block.object.type) return false;\n          return (\n            (type === '...' &&\n              includedTypes.indexOf(block.object.type.toLowerCase()) === -1) ||\n            (block.object.type.toLowerCase() === type &&\n              includedTypes.indexOf(block.object.type.toLowerCase()) === -1)\n          );\n        })\n        .map((block) => {\n          return block.to(format);\n        });\n      // save this included type\n      includedTypes.push(type);\n\n      return blocks.join('\\n\\n');\n    });\n\n    // get the blocks\n    const blocksArray = this.blocks;\n\n    if (!blocksArray || !blocksArray.length) return '';\n\n    // check the first docblock\n    const firstBlock = blocksArray[0];\n    // get the block type\n    const type = firstBlock.object.type\n      ? firstBlock.object.type.toLowerCase()\n      : 'default';\n    // render the good template depending on the first block type\n    const template =\n      this._settings.to[format].templates[type] ||\n      this._settings.to[format].templates.default;\n    if (!template)\n      throw new Error(\n        `You try to convert your docblocks into \"${format}\" format but the needed \"${type}\" template is not available for this particular format. Here's the available templates: ${Object.keys(\n          this._settings.to[format].templates\n        ).join(',')}...`\n      );\n    // save the format in which converting the docblocks\n    this._to = format;\n    // render the template\n    const compiledTemplateFn = __handlebars.compile(template, {\n      noEscape: true\n    });\n    const renderedTemplate = compiledTemplateFn();\n    // return the rendered template\n    return renderedTemplate;\n  }\n}\n"
    ]
}
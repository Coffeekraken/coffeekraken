{
    "version": 3,
    "sources": [
        "SDocblock.js"
    ],
    "names": [
        "SDocblock",
        "source",
        "settings",
        "_settings",
        "sortFunction",
        "a",
        "b",
        "res",
        "aObj",
        "toObject",
        "bObj",
        "namespace",
        "type",
        "toLowerCase",
        "constructor",
        "private",
        "name",
        "length",
        "filepath",
        "to",
        "markdown",
        "__markdown",
        "__SError",
        "__fs",
        "require",
        "existsSync",
        "_source",
        "readFileSync",
        "parse",
        "_blocks",
        "sort",
        "string",
        "reg",
        "blocksArray",
        "match",
        "Array",
        "isArray",
        "map",
        "t",
        "trim",
        "block",
        "__SDocblockBlock",
        "blocks"
    ],
    "mappings": "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",
    "sourcesContent": [
        "import __SError from '../error/SError';\nimport __deepMerge from '../object/deepMerge';\nimport __SDocblockBlock from './SDocblockBlock';\nimport __handlebars from 'handlebars';\nimport __markdown from './markdown/index';\nimport __markdownToHtml from '../convert/html/htmlFromMarkdown';\nimport __isNode from '../is/node';\nimport __isPath from '../is/path';\n\n/**\n * @name                  Dockblock\n * @namespace           sugar.js.docblock\n * @type                  Class\n *\n * This is the main class that expose the methods like \"parse\", etc...\n * You have to instanciate it by passing a settings object. Here's the available options:\n *\n * @param       {String|Object}     source        The docblock source. Can be either a string to parse or a filepath\n * @param       {Object}      [settings={}]       An object of settings to configure the SDocblock instance:\n * - tags ({}) {Object}: An object representing the functions used to parse each tags. The object format is ```{ tagName: parseFn }```\n *\n * @todo        tests\n *\n * @example         js\n * import SDocblock from '@coffeekraken/sugar/js/docblock/SSDocblock';\n * new SDocblock(source, {\n *    // override some settings here...\n * });\n *\n * @since     2.0.0\n * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n */\nexport default class SDocblock {\n  /**\n   * @name              _settings\n   * @type              Object\n   * @private\n   *\n   * Store this instance settings\n   *\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n   */\n  _settings = {};\n\n  /**\n   * @name            _source\n   * @type            String|Array<Object>\n   * @private\n   *\n   * Store the passed source\n   *\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n   */\n  _source = null;\n\n  /**\n   * @name            _blocks\n   * @type            Array<Object>\n   * @private\n   *\n   * Store the parsed array of docblock objects\n   *\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n   */\n  _blocks = null;\n\n  /**\n   * @name          _to\n   * @type          String\n   * @private\n   *\n   * Store the format in which the docblocks have to be converted\n   *\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n   */\n  _to = null;\n\n  /**\n   * @name            constructor\n   * @type            Function\n   *\n   * Constructor\n   *\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n   */\n  constructor(source, settings = {}) {\n    this._settings = __deepMerge(\n      {\n        sortFunction: (a, b) => {\n          let res = 0;\n\n          if (!b || !a) return res;\n\n          const aObj = a.toObject(),\n            bObj = b.toObject();\n\n          // if (.object.namespace && !aObj.namespace) res -= 1;\n          if (bObj.namespace) res += 1;\n          if (bObj.type && bObj.type.toLowerCase() === 'class') res += 1;\n          if (bObj.constructor) res += 1;\n          if (bObj.private) res += 1;\n          if (bObj.type && bObj.type.toLowerCase() === 'function') res += 1;\n          if (aObj.name && bObj.name && bObj.name.length > aObj.name.length)\n            res += 1;\n          return res;\n        },\n        filepath: null,\n        to: {\n          markdown: __markdown\n        }\n      },\n      settings\n    );\n\n    // check if the source is path\n    if (__isPath(source)) {\n      if (!__isNode())\n        throw new __SError(\n          `Sorry but in a none node environement the SDocblock class can take only a String to parse and not a file path like \"<yellow>${source}</yellow>\"...`\n        );\n      const __fs = require('fs');\n      if (!__fs.existsSync(source))\n        throw new __SError(\n          `Sorry but the passed source path \"<yellow>${source}</yellow>\" does not exists on the filesystem...`\n        );\n      this._source = __fs.readFileSync(source, 'utf8');\n    } else {\n      this._source = source;\n    }\n\n    // parsing the source\n    this.parse();\n  }\n\n  /**\n   * @name        sort\n   * @type        Function\n   *\n   * This method allows you to set the order in which you want to get the\n   * blocks back when using the methods like get blocks, etc...\n   *\n   * @param       {Function}      [sortFunction=null]       Specify a custom sort function you want to use. If not set, use the ```sortFunction``` setting.\n   * @return      {SDocblock}                                   The class instance itself to maintain chainability\n   *\n   * @since       2.0.0\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n   */\n  sort(sortFunction = null) {\n    if (!sortFunction) sortFunction = this._settings.sortFunction;\n    this._blocks = this._blocks.sort(sortFunction);\n    return this;\n  }\n\n  /**\n   * @name        blocks\n   * @type        Array\n   *\n   * Access the parsed blocks array\n   *\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n   */\n  get blocks() {\n    if (!this._blocks) this.parse();\n    return this._blocks;\n  }\n\n  /**\n   * @name          parse\n   * @type          Function\n   *\n   * This method is the principal one. Use it to parse a string\n   * and get back the object version of it\n   *\n   * @param       {String}        [string=this._source]        The string to parse\n   * @return      {SDocblock}                     The class instance itself to maintain chainability\n   *\n   * @since       2.0.0\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  parse(string = this._source) {\n    // extract each docblocks\n    const reg = /(<!--|\\/\\*{2})([\\s\\S]+?)(\\*\\/|-->)/g;\n    // extracting blocks\n    let blocksArray = string.match(reg);\n\n    if (!Array.isArray(blocksArray)) {\n      blocksArray = [];\n    } else if (Array.isArray(blocksArray) && blocksArray.length) {\n      blocksArray = blocksArray.map((t) => t.trim());\n      if (!blocksArray || !blocksArray.length) return [];\n      blocksArray = blocksArray.map((block) => {\n        return new __SDocblockBlock(block || ' ', {\n          filepath: this._settings.filepath || ''\n        });\n      });\n    }\n    // save the blocks\n    this._blocks = blocksArray;\n\n    // sort the blocks\n    this.sort();\n\n    // return the class instance itself\n    return this;\n  }\n\n  /**\n   * @name          toObject\n   * @type          Function\n   *\n   * This method convert the parsed docblocks to a simple object\n   *\n   * @since       2.0.0\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  toObject() {\n    return this.blocks.map((block) => {\n      return block.toObject();\n    });\n  }\n}\n"
    ]
}
{
    "version": 3,
    "sources": [
        "SDocblockBlock.js"
    ],
    "names": [
        "SDocblockBlock",
        "source",
        "settings",
        "_source",
        "trim",
        "_settings",
        "filepath",
        "to",
        "markdown",
        "blocks",
        "__markdownBlocks",
        "template",
        "__markdownTemplate",
        "parse",
        "tags",
        "tagsMap",
        "_blockObj",
        "toMarkdown",
        "format",
        "convertionSettings",
        "Error",
        "Object",
        "keys",
        "join",
        "blockTemplate",
        "object",
        "type",
        "toLowerCase",
        "compiledTemplate",
        "__handlebars",
        "compile",
        "noEscape",
        "currentTag",
        "currentContent",
        "currentObj",
        "docblockObj",
        "previousWasEmptyLine",
        "add",
        "length",
        "content",
        "hasOwnProperty",
        "Array",
        "isArray",
        "currentValue",
        "value",
        "push",
        "lines",
        "split",
        "map",
        "l",
        "forEach",
        "line",
        "tagNameReg",
        "tagNameMatch",
        "match",
        "replace",
        "prop",
        "slice",
        "__fs",
        "require",
        "__path",
        "absoluteFilepath",
        "resolve",
        "srcValue",
        "readFileSync",
        "srcDocblockInstance",
        "__SDocblock",
        "srcBlocks",
        "raw",
        "toString",
        "toObject",
        "author",
        "__authorTag",
        "abstract",
        "__simpleValueTag",
        "final",
        "async",
        "generator",
        "global",
        "constructor",
        "hideconstructor",
        "ignore",
        "inheritdoc",
        "inner",
        "instance",
        "mixin",
        "override",
        "access",
        "category",
        "copyright",
        "deprecated",
        "alias",
        "augments",
        "callback",
        "class",
        "classdesc",
        "constant",
        "constructs",
        "default",
        "exports",
        "external",
        "host",
        "file",
        "function",
        "func",
        "method",
        "implements",
        "interface",
        "kind",
        "lends",
        "license",
        "memberof",
        "mixes",
        "module",
        "name",
        "namespace",
        "package",
        "private",
        "protected",
        "public",
        "readonly",
        "requires",
        "see",
        "since",
        "static",
        "summary",
        "this",
        "todo",
        "tutorial",
        "variation",
        "version",
        "enum",
        "src",
        "description",
        "__descriptionTag",
        "desc",
        "return",
        "__returnTag",
        "param",
        "__paramTag",
        "property",
        "snippet",
        "__snippetTag",
        "example",
        "__exampleTag"
    ],
    "mappings": "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",
    "sourcesContent": [
        "import __deepMege from '../object/deepMerge';\nimport __map from '../object/map';\nimport __handlebars from 'handlebars';\nimport __isNode from '../is/node';\n\nimport __authorTag from './tags/author';\nimport __simpleValueTag from './tags/simpleValue';\nimport __descriptionTag from './tags/description';\nimport __returnTag from './tags/return';\nimport __exampleTag from './tags/example';\nimport __paramTag from './tags/param';\nimport __snippetTag from './tags/snippet';\n\nimport __markdownTemplate from './markdown/templates';\nimport __markdownBlocks from './markdown/blocks';\n\nimport __markdownToHtml from '../convert/html/htmlFromMarkdown';\nimport __SDocblock from './SDocblock';\n\n/**\n * @name          SDocblockBlock\n * @namespace           sugar.js.docblock\n * @type          Class\n *\n * This class represent a docblock object that contains all the \"tags\" values and some features like:\n * - Converting the block to markdown\n * - More to come...\n *\n * @param         {String}       source      The docblock source.  Has to be a parsable docblock string\n * @param         {Object}      [settings={}]       A settings object to configure your instance\n *\n * @todo        tests\n * @todo        Support \"feature\" tag\n * @todo        Check the supported tags\n *\n * @example         js\n * import SDocblockBlock from '@coffeekraken/sugar/js/docblock/SDocblockBlock';\n * const myBlock = new SDocblockBlock(myDocblockString);\n * const myBlock.toMarkdown();\n *\n * @since     2.0.0\n * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n */\nexport default class SDocblockBlock {\n  /**\n   * @name            tagsMap\n   * @type            Object\n   * @static\n   *\n   * Store the default tags mapping to their parsing functions\n   *\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com>\n   */\n  static tagsMap = {\n    author: __authorTag,\n\n    abstract: __simpleValueTag,\n    final: __simpleValueTag,\n    async: __simpleValueTag,\n    generator: __simpleValueTag,\n    global: __simpleValueTag,\n    constructor: __simpleValueTag,\n    hideconstructor: __simpleValueTag,\n    ignore: __simpleValueTag,\n    inheritdoc: __simpleValueTag,\n    inner: __simpleValueTag,\n    instance: __simpleValueTag,\n    mixin: __simpleValueTag,\n    override: __simpleValueTag,\n    access: __simpleValueTag,\n    category: __simpleValueTag,\n    copyright: __simpleValueTag,\n    deprecated: __simpleValueTag,\n    alias: __simpleValueTag,\n    augments: __simpleValueTag,\n    callback: __simpleValueTag,\n    class: __simpleValueTag,\n    classdesc: __simpleValueTag,\n    constant: __simpleValueTag,\n    constructs: __simpleValueTag,\n    copyright: __simpleValueTag,\n    default: __simpleValueTag,\n    deprecated: __simpleValueTag,\n    exports: __simpleValueTag,\n    external: __simpleValueTag,\n    host: __simpleValueTag,\n    file: __simpleValueTag,\n    function: __simpleValueTag,\n    func: __simpleValueTag,\n    method: __simpleValueTag,\n    implements: __simpleValueTag,\n    interface: __simpleValueTag,\n    kind: __simpleValueTag,\n    lends: __simpleValueTag,\n    license: __simpleValueTag,\n    memberof: __simpleValueTag,\n    'memberof!': __simpleValueTag,\n    mixes: __simpleValueTag,\n    module: __simpleValueTag,\n    name: __simpleValueTag,\n    namespace: __simpleValueTag,\n    package: __simpleValueTag,\n    private: __simpleValueTag,\n    protected: __simpleValueTag,\n    public: __simpleValueTag,\n    readonly: __simpleValueTag,\n    requires: __simpleValueTag,\n    see: __simpleValueTag,\n    since: __simpleValueTag,\n    static: __simpleValueTag,\n    summary: __simpleValueTag,\n    this: __simpleValueTag,\n    todo: __simpleValueTag,\n    tutorial: __simpleValueTag,\n    type: __simpleValueTag,\n    variation: __simpleValueTag,\n    version: __simpleValueTag,\n    enum: __simpleValueTag,\n    src: __simpleValueTag,\n\n    description: __descriptionTag,\n    desc: __descriptionTag,\n\n    // yields: __yieldsTag,\n\n    // typedef: __typedefTag,\n\n    // throws: __throwsTag,\n\n    return: __returnTag,\n\n    param: __paramTag,\n    property: __paramTag,\n    prop: __paramTag,\n\n    // listens: __listensTag,\n\n    // member: __memberTag,\n    // var: __memberTag,\n\n    // event: __eventTag,\n\n    // borrows: __borrowsTag,\n\n    snippet: __snippetTag,\n    example: __exampleTag\n  };\n\n  /**\n   * @name          templates\n   * @type          Object\n   * @static\n   *\n   * Store the available templates like \"js\", \"node\", \"scss\", etc...\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com\n   */\n  static templates = {};\n\n  /**\n   * @name          _source\n   * @type          String\n   * @private\n   *\n   * Store the passed source\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com\n   */\n  _source = null;\n\n  /**\n   * @name          _settings\n   * @type          Object\n   * @private\n   *\n   * Store this instance settings\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com\n   */\n  _settings = {};\n\n  /**\n   * @name        _blockObj\n   * @type        {Object}\n   * @private\n   *\n   * Store the parsed docblock object\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com\n   */\n  _blockObj = {};\n\n  /**\n   * @name          constructor\n   * @type          Function\n   * @contructor\n   *\n   * Constructor\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(source, settings = {}) {\n    this._source = source.trim();\n    this._settings = __deepMege(\n      {\n        filepath: null,\n        to: {\n          markdown: {\n            blocks: __markdownBlocks,\n            template: __markdownTemplate\n          }\n        },\n        parse: {\n          tags: SDocblockBlock.tagsMap\n        }\n      },\n      settings\n    );\n    // parse the docblock string\n    this._blockObj = this.parse();\n  }\n\n  /**\n   * @name          object\n   * @type          Object\n   * @get\n   *\n   * Access the parsed block object\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get object() {\n    return this.toObject();\n  }\n\n  /**\n   * @name          string\n   * @type          String\n   * @get\n   *\n   * Access docblock string version\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  get string() {\n    return this.toString();\n  }\n\n  /**\n   * @name          toString\n   * @type          Function\n   *\n   * This method return the passed source string\n   *\n   * @return      {String}              The passed docblock string\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  toString() {\n    return this._source.trim();\n  }\n\n  /**\n   * @name          toObject\n   * @type          Function\n   *\n   * This method return the parsed docblock object\n   *\n   * @return      {Object}              The parsed dobclock object\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  toObject() {\n    return this._blockObj;\n  }\n\n  /**\n   * @name          toMarkdown\n   * @type          Function\n   *\n   * This method can be used to convert the docblock object to a markdown string\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  toMarkdown() {\n    return this.to('markdown');\n  }\n\n  /**\n   * @name          toHtml\n   * @type          Function\n   *\n   * This method can be used to convert the docblock object to an HTML string\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  toHtml(settings = {}) {\n    const markdown = this.toMarkdown();\n    return __markdownToHtml(markdown, settings);\n  }\n\n  /**\n   * @name          to\n   * @type          Function\n   *\n   * This method can be used to convert the docblock to one of the supported output\n   * format like \"markdown\" and more to come...\n   *\n   * @param         {String}          format        The format wanted as output. Can be actually \"markdown\" and more to come...\n   * @return        {String}                        The converted docblocks\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  to(format) {\n    // try to get the needed settings for the conversion\n    const convertionSettings = this._settings.to[format];\n\n    if (!convertionSettings)\n      throw new Error(\n        `You try to convert the docblock literals to \"${format}\" format but this format is not available. Here's the list of available format: ${Object.keys(\n          this._settings.to\n        ).join(',')}...`\n      );\n\n    const blockTemplate =\n      this._settings.to[format].blocks[this.object.type.toLowerCase()] ||\n      this._settings.to[format].blocks['default'];\n    if (!blockTemplate) {\n      throw new Error(\n        `You try to convert a docblock of type \"${\n          this.object.type\n        }\" into \"${format}\" format but this block type is not supported. Here's the list of blocks supported in \"${format}\" format: ${Object.keys(\n          convertionSettings.blocks\n        ).join(',')}...`\n      );\n    }\n    const compiledTemplate = __handlebars.compile(blockTemplate, {\n      noEscape: true\n    });\n    return compiledTemplate(this.object);\n  }\n\n  /**\n   * @name          parse\n   * @type          Function\n   * @private\n   *\n   * This method take a docblick string and parse it to a javascript object\n   *\n   * @return      {Object}          The object version of the source string\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  parse() {\n    // some variables\n    let currentTag = null;\n    let currentContent = [];\n    let currentObj = {};\n    let docblockObj = {};\n    let previousWasEmptyLine = false;\n\n    function add() {\n      if (currentContent.length) currentObj.content = currentContent;\n      if (\n        docblockObj.hasOwnProperty(currentTag) &&\n        !Array.isArray(docblockObj[currentTag])\n      ) {\n        const currentValue = docblockObj[currentTag];\n        docblockObj[currentTag] = [currentValue];\n      }\n      if (!currentObj.value) currentObj.value = true;\n      if (Array.isArray(docblockObj[currentTag])) {\n        docblockObj[currentTag].push(currentObj);\n      } else {\n        docblockObj[currentTag] = currentObj;\n      }\n      currentObj = {};\n      currentContent = [];\n      currentTag = null;\n    }\n\n    // split the block by tags\n    let lines = this._source.trim().split('\\n');\n    if (!lines || !lines.length) return null;\n    lines = lines.map((l) => l.trim());\n\n    lines.forEach((line) => {\n      // get the tag name\n      const tagNameReg = /\\*[\\s]?@([a-zA-Z0-9]+)/;\n      const tagNameMatch = line.match(tagNameReg);\n\n      if (line.replace('*', '').trim() === '') {\n        if (currentContent.length > 0) {\n          currentContent.push('');\n        } else {\n          if (currentTag && currentObj.value) {\n            add();\n          }\n          previousWasEmptyLine = true;\n        }\n      } else if (tagNameMatch) {\n        if (currentTag) {\n          add();\n        }\n        currentTag = tagNameMatch[1];\n        line = line.replace(tagNameMatch[0], '').trim();\n        if (line.length > 0) {\n          currentObj.value = line;\n        } else {\n          currentObj.value = true;\n        }\n        previousWasEmptyLine = false;\n      } else if (previousWasEmptyLine) {\n        currentTag = 'description';\n        currentContent = [line.replace('*', '')];\n        currentObj = {};\n        previousWasEmptyLine = false;\n      } else {\n        line = line.replace('/**', '');\n        line = line.replace('*/', '');\n        line = line.replace('* ', '');\n        line = line.replace('*', '');\n        if (line.trim().length) {\n          currentContent.push(line);\n        }\n      }\n    });\n\n    add();\n\n    docblockObj = __map(docblockObj, (value, prop) => {\n      if (!prop || prop.length <= 1 || prop.slice(0, 1) === '_') return value;\n      if (this._settings.parse.tags[prop] && prop !== 'src')\n        return this._settings.parse.tags[prop](value);\n      return __simpleValueTag(value);\n    });\n\n    if (docblockObj['src'] && __isNode() && this._settings.filepath) {\n      const __fs = require('fs');\n      const __path = require('path');\n\n      const absoluteFilepath = __path.resolve(\n        this._settings.filepath,\n        docblockObj['src']\n      );\n\n      const srcValue = __fs.readFileSync(absoluteFilepath, 'utf8');\n      const srcDocblockInstance = new __SDocblock(srcValue);\n      const srcBlocks = srcDocblockInstance.parse();\n      if (srcBlocks.length) {\n        const tags = srcBlocks[0].parse();\n        docblockObj = __deepMege(docblockObj, tags);\n      }\n    }\n\n    // save the raw string\n    docblockObj.raw = this._source.toString();\n\n    // return the parsed docblock object\n    return docblockObj;\n  }\n}\n"
    ]
}
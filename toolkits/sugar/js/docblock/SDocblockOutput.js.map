{
    "version": 3,
    "sources": [
        "SDocblockOutput.js"
    ],
    "names": [
        "module",
        "exports",
        "docblockInstance",
        "settings",
        "_settings",
        "templates",
        "blocks",
        "partials",
        "_docblockInstance",
        "_registerHandlerbarsHelpers",
        "_cache",
        "__SCache",
        "_handlebars",
        "__handlebars",
        "promise",
        "Promise",
        "registerHelper",
        "type",
        "resolve",
        "reject",
        "length",
        "filter",
        "block",
        "toObject",
        "rendered",
        "_rendered",
        "renderedBlocks",
        "i",
        "result",
        "renderBlock",
        "push",
        "join",
        "blockObj",
        "toLowerCase",
        "template",
        "default",
        "compiledTemplateFn",
        "templateObj",
        "getTemplateObj",
        "cacheObj",
        "partialsTemplateObj",
        "_partialsTemplateObj",
        "data",
        "cachedValue",
        "get",
        "compile",
        "content",
        "noEscape",
        "renderedTemplate",
        "set",
        "Object",
        "keys",
        "forEach",
        "partialName",
        "partialPath",
        "unregisterPartial",
        "registerPartial",
        "__packageRoot",
        "require",
        "__packageJson",
        "__fs",
        "json",
        "stats",
        "templatePath",
        "existsSync",
        "__SError",
        "statSync",
        "cache",
        "path",
        "mtime",
        "getPartialsTemplateObj",
        "__SPromise",
        "trigger",
        "cancel",
        "blocksArray",
        "firstBlock",
        "id"
    ],
    "mappings": "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",
    "sourcesContent": [
        "import __SError from '../error/SError';\nimport __deepMerge from '../object/deepMerge';\nimport __SPromise from '../promise/SPromise';\nimport __handlebars from 'handlebars';\nimport __SCache from '../cache/SCache';\nimport __isNode from '../is/node';\nimport __promisedHandlebars from 'promised-handlebars';\n\n/**\n * @name            SDocblockOutput\n * @namespace       sugar.js.docblock\n * @type            Class\n *\n * This class represent an SDocblock output like \"markdown\", \"html\", etc...\n *\n * @param       {SDocblock}         docblockInstance        The docblock instance you want to output using this class\n * @param       {Object}            [settings={}]           Some settings to configure your output class:\n * - ...\n *\n * @todo      Javascript support\n *\n * @example         js\n * import SDocblock from '@coffeekraken/sugar/js/docblock/SDocblock';\n * import SDocblockOutput from '@coffeekraken/sugar/js/docblock/SDocblockOutput';\n * class MyCoolOutput extends SDocblockOutput {\n *    constructor(docblockInstance, settings = {}) {\n *      super(docblockInstance, settings);\n *    }\n * }\n *\n * @since       2.0.0\n * @author \tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nmodule.exports = class SDocblockOutput {\n  /**\n   * @name      _settings\n   * @type      Object\n   * @private\n   *\n   * Store the settings\n   *\n   * @since     2.0.0\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _settings = {};\n\n  /**\n   * @name      _docblockInstance\n   * @type      SDocblock\n   * @private\n   *\n   * Store the SDocblock instance to render\n   *\n   * @since     2.0.0\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _docblockInstance = null;\n\n  /**\n   * @name        constructor\n   * @type        Function\n   * @constructor\n   *\n   * Constructor\n   *\n   * @since     2.0.0\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(docblockInstance, settings = {}) {\n    // save the settings\n    this._settings = __deepMerge(\n      {\n        templates: {},\n        blocks: {},\n        partials: {}\n      },\n      settings\n    );\n    // save the docblock instance\n    this._docblockInstance = docblockInstance;\n    // init the handlebars helpers\n    this._registerHandlerbarsHelpers();\n\n    this._cache = new __SCache('SDocblockOutput');\n  }\n\n  /**\n   * @name          _registerHandlerbarsHelpers\n   * @type          Function\n   * @private\n   *\n   * This method init the handlebar instance that will be used during the rendering process\n   *\n   * @since       2.0.0\n   *\n   */\n  _registerHandlerbarsHelpers() {\n    this._handlebars = __promisedHandlebars(__handlebars, {\n      promise: Promise\n    });\n\n    this._handlebars.registerHelper('include', (type) => {\n      return new Promise(async (resolve, reject) => {\n        if (\n          !this._docblockInstance.blocks ||\n          !this._docblockInstance.blocks.length\n        )\n          return '';\n\n        // filter blocks\n        const blocks = this._docblockInstance.blocks.filter((block) => {\n          if (!block.toObject().type) return false;\n          const rendered = block._rendered;\n          block._rendered = true;\n          return rendered !== true;\n        });\n\n        const renderedBlocks = [];\n        for (let i = 0; i < blocks.length; i++) {\n          const block = blocks[i];\n          const result = await this.renderBlock(block.toObject());\n          renderedBlocks.push(result);\n        }\n\n        resolve(renderedBlocks.join('\\n\\n'));\n      });\n    });\n  }\n\n  /**\n   * @name          renderBlock\n   * @type          Function\n   * @async\n   *\n   * This method is the one take will render a block using the correct block template\n   * and the passed block object data\n   *\n   * @param       {Object}          blockObj          The object representing the block to render\n   * @param       {Object}        [settings={}]       An object of settings to override the one passed in the constructor\n   * @return      {String}                            The rendered block\n   *\n   * @since       2.0.0\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  async renderBlock(blockObj, settings = {}) {\n    if (blockObj.toObject && typeof blockObj.toObject === 'function')\n      blockObj = blockObj.toObject();\n    let type =\n      typeof blockObj.type === 'string'\n        ? blockObj.type.toLowerCase()\n        : 'default';\n\n    const template =\n      this._settings.blocks[type] || this._settings.blocks.default;\n    let compiledTemplateFn;\n\n    let templateObj = {};\n    if (__isNode()) {\n      // get template object\n      templateObj = this.getTemplateObj(template);\n\n      const cacheObj = {\n        partialsTemplateObj: this._partialsTemplateObj,\n        template: templateObj,\n        data: blockObj\n      };\n\n      // check the cache\n      const cachedValue = await this._cache.get(cacheObj);\n      // console.log('SE', Object.keys(cachedValue));\n      if (!cachedValue) {\n        compiledTemplateFn = this._handlebars.compile(templateObj.content, {\n          noEscape: true\n        });\n        const renderedTemplate = await compiledTemplateFn(blockObj);\n        // save in chache\n        this._cache.set(cacheObj, renderedTemplate);\n        // return the rendered template\n        return renderedTemplate;\n      } else {\n        return cachedValue;\n      }\n    } else {\n      // return rendered template\n      return 'Support for javascript is not available yet...';\n    }\n  }\n\n  /**\n   * @name          getPartialsTemplateObj\n   * @type        Function\n   * @async\n   *\n   * This method loop on all the partials and read them with their stats if we are in node context\n   *\n   * @return      {Object}          The template object of all the partials\n   *\n   * @since       2.0.0\n   *  @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com>   (https://olivierbossel.com)\n   */\n  getPartialsTemplateObj() {\n    const partialsTemplateObj = {};\n    Object.keys(this._settings.partials).forEach((partialName) => {\n      const partialPath = this._settings.partials[partialName];\n      partialsTemplateObj[partialName] = this.getTemplateObj(partialPath);\n      // register partials\n      this._handlebars.unregisterPartial(partialName);\n      this._handlebars.registerPartial(\n        partialName,\n        partialsTemplateObj[partialName].content\n      );\n    });\n    return partialsTemplateObj;\n  }\n\n  /**\n   * @name          getTemplateObj\n   * @type          Function\n   * @async\n   *\n   * This method take the template url setted in the settings object and\n   * resolve it to get back a full template object with the path and the stats is we are in node context\n   *\n   * @param         {String}        template        The template path to get\n   * @return      {Object}                          The template object with the path and the stats if we are in node context\n   *\n   * @since       2.0.0\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com>   (https://olivierbossel.com)\n   */\n  getTemplateObj(template) {\n    let templateObj = {};\n    if (__isNode()) {\n      const __packageRoot = require('../../node/path/packageRoot');\n      const __packageJson = require('../../node/package/json');\n      const __fs = require('fs');\n      const json = __packageJson();\n      let stats, templatePath;\n      if (__fs.existsSync(template)) {\n        templatePath = template;\n      } else if (\n        __fs.existsSync(`${__packageRoot()}/node_modules/${template}`)\n      ) {\n        templatePath = `${__packageRoot()}/node_modules/${template}`;\n      } else {\n        throw new __SError(\n          `Sorry but the passed template url \"<yellow>${template}</yellow>\" does not exists...`\n        );\n      }\n      stats = __fs.statSync(templatePath);\n      delete require.cache[require.resolve(templatePath)];\n\n      const content = require(templatePath);\n      templateObj = {\n        path: templatePath,\n        content: content,\n        mtime: stats.mtime\n      };\n    }\n    return templateObj;\n  }\n\n  /**\n   * @name          render\n   * @type          Function\n   * @async\n   *\n   * This method is the main one that will take each blocks in the docblock instance\n   * and render them by passing each tags to the ```renderTag``` method.\n   *\n   * @param       {Object}        [settings={}]       An object of settings to override the one passed in the constructor\n   * @return      {SPromise}                          An SPromise instance that will be resolved with the rendered string once it has been fully rendered\n   *\n   * @since       2.0.0\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  render(settings = {}) {\n    this._partialsTemplateObj = this.getPartialsTemplateObj();\n\n    return new __SPromise(\n      async (resolve, reject, trigger, cancel) => {\n        // get the block in object format\n        const blocksArray = this._docblockInstance.toObject();\n        // reset all blocks rendered state\n        blocksArray.forEach((block) => {\n          block._rendered = false;\n        });\n        // get the first block\n        const firstBlock = blocksArray[0];\n        // get the template to render\n        let type =\n          typeof firstBlock.type === 'string'\n            ? firstBlock.type.toLowerCase()\n            : 'default';\n        const template =\n          this._settings.templates[type] || this._settings.templates.default;\n\n        const templateObj = this.getTemplateObj(template);\n\n        // render the template\n        let compiledTemplateFn;\n        compiledTemplateFn = this._handlebars.compile(templateObj.content, {\n          noEscape: true\n        });\n        const renderedTemplate = await compiledTemplateFn();\n        // resolve the rendering process with the rendered stack\n        resolve(renderedTemplate);\n      },\n      {\n        id: 'SDocblockOutputRender'\n      }\n    );\n  }\n};\n"
    ]
}
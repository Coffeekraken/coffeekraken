{
    "version": 3,
    "sources": [
        "canHaveChildren.js"
    ],
    "names": [
        "canHaveChildren",
        "element",
        "document",
        "createElement",
        "HTMLElement",
        "canHaveHTML",
        "tagName",
        "closeTag",
        "toLowerCase",
        "outerHTML",
        "slice",
        "length"
    ],
    "mappings": ";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;AAqBe,SAASA,eAAT,CAAyBC,OAAzB,EAAkC;AAC/C,MAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC/BA,IAAAA,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuBF,OAAvB,CAAV;AACD,GAFD,MAEO,IAAI,EAAEA,OAAO,YAAYG,WAArB,CAAJ,EAAuC;AAC5C,qHAAyG,OAAOH,OAAhH;AACD;;AACD,MAAI,iBAAiBA,OAArB,EAA8B,OAAOA,OAAO,CAACI,WAAf;AAC9B,MAAMC,OAAO,GAAGL,OAAO,CAACK,OAAxB;AACA,MAAMC,QAAQ,GAAG,YAAKD,OAAL,OAAgBE,WAAhB,EAAjB;AACA,MAAIP,OAAO,CAACQ,SAAR,CAAkBC,KAAlB,CAAwB,CAACJ,OAAO,CAACK,MAAR,GAAiB,CAAlB,IAAuB,CAAC,CAAhD,MAAuDJ,QAA3D,EACE,OAAO,IAAP;AACF,SAAO,KAAP;AACD",
    "sourcesContent": [
        "/**\n * @name          canHaveChildren\n * @namespace     sugar.js.dom\n * @type          Function\n *\n * This function take as input either a tagName String like \"img\", \"div\", etc... or an HTMLElement node\n * and return true or false depending if this element is supposed to have children or not.\n *\n * @TODO      tests\n *\n * @param       {String|HTMLElement}          element       The element to check. A tagName like \"img\", or directly a HTMLElement node reference\n * @return      {Boolean}                                   true if the element is supposed to have children, false if not\n *\n * @example       js\n * import canHaveChildren from '@coffeekraken/sugar/js/dom/canHaveChildren';\n * canHaveChildren('img'); // => false\n * canHaveChildren('div'); // => true\n *\n * @since         2.0.0\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function canHaveChildren(element) {\n  if (typeof element === 'string') {\n    element = document.createElement(element);\n  } else if (!(element instanceof HTMLElement)) {\n    throw `The element parameter can be either a string or an HTMLElement node reference... You've passed \"${typeof element}\"`;\n  }\n  if ('canHaveHTML' in element) return element.canHaveHTML;\n  const tagName = element.tagName;\n  const closeTag = `</${tagName}>`.toLowerCase();\n  if (element.outerHTML.slice((tagName.length + 3) * -1) === closeTag)\n    return true;\n  return false;\n}\n"
    ]
}
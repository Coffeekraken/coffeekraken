{
    "version": 3,
    "sources": [
        "getAnimationProperties.js"
    ],
    "names": [
        "splitIfNeeded",
        "what",
        "separator",
        "indexOf",
        "split",
        "map",
        "item",
        "trim",
        "getAnimationProperties",
        "elm",
        "name",
        "duration",
        "timingFunction",
        "delay",
        "iterationCount",
        "direction",
        "props",
        "value",
        "totalDuration",
        "i",
        "delays",
        "concat",
        "forEach",
        "val"
    ],
    "mappings": ";;;;;;;AAAA;;AACA;;;;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,SAASA,aAAT,CAAuBC,IAAvB,EAA6BC,SAA7B,EAAwC;AACtC,MAAID,IAAI,CAACE,OAAL,CAAaD,SAAb,MAA4B,CAAC,CAAjC,EAAoC;AAClC,WAAOD,IAAI,CAACG,KAAL,CAAWF,SAAX,EAAsBG,GAAtB,CAA2BC,IAAD,IAAUA,IAAI,CAACC,IAAL,EAApC,CAAP;AACD;;AACD,SAAON,IAAP;AACD;;AACc,SAASO,sBAAT,CAAgCC,GAAhC,EAAqC;AAClD;AACA,MAAMC,IAAI,GAAG,+BAAmBD,GAAnB,EAAwB,gBAAxB,KAA6C,EAA1D;AACA,MAAME,QAAQ,GAAG,+BAAmBF,GAAnB,EAAwB,oBAAxB,KAAiD,IAAlE;AACA,MAAMG,cAAc,GAClB,+BAAmBH,GAAnB,EAAwB,2BAAxB,KAAwD,QAD1D;AAEA,MAAMI,KAAK,GAAG,+BAAmBJ,GAAnB,EAAwB,iBAAxB,KAA8C,IAA5D;AACA,MAAMK,cAAc,GAClB,+BAAmBL,GAAnB,EAAwB,2BAAxB,KAAwD,CAD1D;AAEA,MAAMM,SAAS,GAAG,+BAAmBN,GAAnB,EAAwB,qBAAxB,KAAkD,QAApE,CATkD,CAWlD;;AACA,MAAMO,KAAK,GAAG;AACZN,IAAAA,IAAI,EAAEA,IAAI,CAACN,KAAL,CAAW,GAAX,CADM;AAEZO,IAAAA,QAAQ,EAAEA,QAAQ,CAACP,KAAT,CAAe,GAAf,EAAoBC,GAApB,CAAyBY,KAAD,IAAW,sBAAUA,KAAV,EAAiB,IAAjB,CAAnC,CAFE;AAGZJ,IAAAA,KAAK,EAAE,UAAGA,KAAH,EAAWT,KAAX,CAAiB,GAAjB,EAAsBC,GAAtB,CAA2BY,KAAD,IAAW,sBAAUA,KAAV,EAAiB,IAAjB,CAArC,CAHK;AAIZL,IAAAA,cAAc,EAAEA,cAAc,CAACR,KAAf,CAAqB,GAArB,CAJJ;AAKZU,IAAAA,cAAc,EAAE,UAAGA,cAAH,EAAoBV,KAApB,CAA0B,GAA1B,CALJ;AAMZW,IAAAA,SAAS,EAAEA,SAAS,CAACX,KAAV,CAAgB,GAAhB;AANC,GAAd;AAQA,MAAIc,aAAa,GAAG,CAApB;AACA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAMC,MAAM,GAAG,CAAC,CAAD,EAAIC,MAAJ,CAAWL,KAAK,CAACH,KAAjB,CAAf;AACA,GAAC,CAAD,EAAIQ,MAAJ,CAAWL,KAAK,CAACL,QAAjB,EAA2BW,OAA3B,CAAoCC,GAAD,IAAS;AAC1C,QAAIA,GAAG,GAAGH,MAAM,CAACD,CAAD,CAAZ,GAAkBD,aAAtB,EAAqC;AACnCA,MAAAA,aAAa,GAAGK,GAAG,GAAGH,MAAM,CAACD,CAAD,CAA5B;AACD;AACF,GAJD;AAKAH,EAAAA,KAAK,CAACE,aAAN,GAAsBA,aAAtB;AACA,SAAOF,KAAP;AACD",
    "sourcesContent": [
        "import __getStyleProperty from './getStyleProperty';\nimport __convert from '../time/convert';\n\n// TODO tests\n\n/**\n * @name      getAnimationProperties\n * @namespace           sugar.js.dom\n * @type      Function\n *\n * Get the css animation properties from an HTMLElement in an object format\n *\n * @param \t\t{HTMLElement} \t\t\t\t\telm  \t\tThe element to get the properties from\n * @return \t\t{Object} \t\t\t\t\t\t\t\t\tThe animation properties\n *\n * @example  \tjs\n * import getAnimationProperties from '@coffeekraken/sugar/js/dom/getAnimationProperties'\n * const props = getAnimationProperties(myCoolHTMLElement);\n * // output format\n * // {\n * // \tname : ['animation1'],\n * // \tduration : [200],\n * // \tdelay : [0],\n * // \ttimingFunction : ['linear'],\n * // \titerationCount : [1],\n * // \tdirection : ['forward'],\n * // \ttotalDuration : 200\n * // }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\n\nfunction splitIfNeeded(what, separator) {\n  if (what.indexOf(separator) !== -1) {\n    return what.split(separator).map((item) => item.trim());\n  }\n  return what;\n}\nexport default function getAnimationProperties(elm) {\n  // get the animation properties\n  const name = __getStyleProperty(elm, 'animation-name') || '';\n  const duration = __getStyleProperty(elm, 'animation-duration') || '0s';\n  const timingFunction =\n    __getStyleProperty(elm, 'animation-timing-function') || 'linear';\n  const delay = __getStyleProperty(elm, 'animation-delay') || '0s';\n  const iterationCount =\n    __getStyleProperty(elm, 'animation-iteration-count') || 1;\n  const direction = __getStyleProperty(elm, 'animation-direction') || 'normal';\n\n  // return the animation object\n  const props = {\n    name: name.split(','),\n    duration: duration.split(',').map((value) => __convert(value, 'ms')),\n    delay: `${delay}`.split(',').map((value) => __convert(value, 'ms')),\n    timingFunction: timingFunction.split(','),\n    iterationCount: `${iterationCount}`.split(','),\n    direction: direction.split(',')\n  };\n  let totalDuration = 0;\n  let i = 0;\n  const delays = [0].concat(props.delay);\n  [0].concat(props.duration).forEach((val) => {\n    if (val + delays[i] > totalDuration) {\n      totalDuration = val + delays[i];\n    }\n  });\n  props.totalDuration = totalDuration;\n  return props;\n}\n"
    ]
}
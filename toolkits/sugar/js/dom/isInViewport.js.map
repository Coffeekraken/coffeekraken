{
    "version": 3,
    "sources": [
        "isInViewport.js"
    ],
    "names": [
        "isInViewport",
        "elm",
        "offset",
        "offsetTop",
        "offsetRight",
        "offsetBottom",
        "offsetLeft",
        "top",
        "right",
        "bottom",
        "left",
        "containerHeight",
        "window",
        "innerHeight",
        "document",
        "documentElement",
        "clientHeight",
        "containerWidth",
        "innerWidth",
        "clientWidth",
        "rect",
        "getBoundingClientRect",
        "isTopIn",
        "isBottomIn",
        "isLeftIn",
        "isRightIn"
    ],
    "mappings": ";;;;;;;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;AAmBe,SAASA,YAAT,CAAsBC,GAAtB,EAA2BC,MAA3B,EAAwC;AAAA,MAAbA,MAAa;AAAbA,IAAAA,MAAa,GAAJ,EAAI;AAAA;;AACrD;AACA,MAAIC,SAAS,GAAGD,MAAhB;AACA,MAAIE,WAAW,GAAGF,MAAlB;AACA,MAAIG,YAAY,GAAGH,MAAnB;AACA,MAAII,UAAU,GAAGJ,MAAjB;;AACA,MAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9BC,IAAAA,SAAS,GAAGD,MAAM,CAACK,GAAP,IAAc,CAA1B;AACAH,IAAAA,WAAW,GAAGF,MAAM,CAACM,KAAP,IAAgB,CAA9B;AACAH,IAAAA,YAAY,GAAGH,MAAM,CAACO,MAAP,IAAiB,CAAhC;AACAH,IAAAA,UAAU,GAAGJ,MAAM,CAACQ,IAAP,IAAe,CAA5B;AACD;;AACD,MAAMC,eAAe,GACnBC,MAAM,CAACC,WAAP,IAAsBC,QAAQ,CAACC,eAAT,CAAyBC,YADjD;AAEA,MAAMC,cAAc,GAClBL,MAAM,CAACM,UAAP,IAAqBJ,QAAQ,CAACC,eAAT,CAAyBI,WADhD;AAEA,MAAMC,IAAI,GAAGnB,GAAG,CAACoB,qBAAJ,EAAb;AACA,MAAMC,OAAO,GAAGF,IAAI,CAACb,GAAL,GAAWI,eAAX,GAA6BN,YAA7B,IAA6C,CAA7D;AACA,MAAMkB,UAAU,GAAGH,IAAI,CAACX,MAAL,GAAcN,SAAd,IAA2B,CAA9C;AACA,MAAMqB,QAAQ,GAAGJ,IAAI,CAACV,IAAL,GAAYO,cAAZ,GAA6Bb,WAA7B,IAA4C,CAA7D;AACA,MAAMqB,SAAS,GAAGL,IAAI,CAACZ,KAAL,GAAaF,UAAb,IAA2B,CAA7C;AACA,SAAOgB,OAAO,IAAIC,UAAX,IAAyBC,QAAzB,IAAqCC,SAA5C;AACD",
    "sourcesContent": [
        "// TODO tests\n\n/**\n * @name      isInViewport\n * @namespace           sugar.js.dom\n * @type      Function\n *\n * Check if the passed HTMLElement is in the viewport or not\n *\n * @param \t\t{HTMLElement} \t\t\t\telm  \t\t\tThe element to insert\n * @param \t\t{Object} \t\t\t\t\t[offset=50] \tAn object of top, right, bottom and left offset used to detect the status or an object with top, right, bottom and left offsets\n * @return \t\t{Boolean}\t\t\t\t\t\t\t\t\tIf the element is in the viewport or not\n *\n * @example  \tjs\n * import isInViewport from '@coffeekraken/sugar/js/dom/isInViewport'\n * if (isInViewport(myCoolHTMLElement) {\n * \t\t// i'm in the viewport\n * }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function isInViewport(elm, offset = 50) {\n  // handle offset\n  let offsetTop = offset;\n  let offsetRight = offset;\n  let offsetBottom = offset;\n  let offsetLeft = offset;\n  if (typeof offset === 'object') {\n    offsetTop = offset.top || 0;\n    offsetRight = offset.right || 0;\n    offsetBottom = offset.bottom || 0;\n    offsetLeft = offset.left || 0;\n  }\n  const containerHeight =\n    window.innerHeight || document.documentElement.clientHeight;\n  const containerWidth =\n    window.innerWidth || document.documentElement.clientWidth;\n  const rect = elm.getBoundingClientRect();\n  const isTopIn = rect.top - containerHeight - offsetBottom <= 0;\n  const isBottomIn = rect.bottom - offsetTop >= 0;\n  const isLeftIn = rect.left - containerWidth - offsetRight <= 0;\n  const isRightIn = rect.right - offsetLeft >= 0;\n  return isTopIn && isBottomIn && isLeftIn && isRightIn;\n}\n"
    ]
}
{
    "version": 3,
    "sources": [
        "linkLoaded.js"
    ],
    "names": [
        "alreadyLoaded",
        "link",
        "href",
        "result",
        "i",
        "document",
        "styleSheets",
        "length",
        "match",
        "linkLoaded",
        "callback",
        "Promise",
        "resolve",
        "reject",
        "img",
        "createElement",
        "addEventListener",
        "e",
        "src"
    ],
    "mappings": ";;;;;;;AAAA;;AAEA;;;;;;;;;;;;;;;;;;;AAmBA,SAASA,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,MAAMC,IAAI,GAAGD,IAAI,CAACC,IAAlB;AACA,MAAIC,MAAM,GAAG,KAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,QAAQ,CAACC,WAAT,CAAqBC,MAAzC,EAAiDH,CAAC,EAAlD,EAAsD;AACpD,QACEC,QAAQ,CAACC,WAAT,CAAqBF,CAArB,EAAwBF,IAAxB,IACAG,QAAQ,CAACC,WAAT,CAAqBF,CAArB,EAAwBF,IAAxB,CAA6BM,KAA7B,CAAmCN,IAAnC,CAFF,EAGE;AACA;AACAC,MAAAA,MAAM,GAAG,IAAT;AACD,KAND,MAMO,IAAIC,CAAC,IAAIC,QAAQ,CAACC,WAAT,CAAqBC,MAArB,GAA8B,CAAvC,EAA0C,CAC/C;AACD;AACF;;AACD,SAAOJ,MAAP;AACD;;AAEc,SAASM,UAAT,CAAoBR,IAApB,EAA0BS,QAA1B,EAA2C;AAAA,MAAjBA,QAAiB;AAAjBA,IAAAA,QAAiB,GAAN,IAAM;AAAA;;AACxD,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC;AACA,QAAIb,aAAa,CAACC,IAAD,CAAjB,EAAyB;AACvB;AACAW,MAAAA,OAAO,CAACX,IAAD,CAAP,CAFuB,CAGvB;;AACAS,MAAAA,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,CAACT,IAAD,CAA5B;AACD,KALD,MAKO;AACL,UAAMa,GAAG,GAAGT,QAAQ,CAACU,aAAT,CAAuB,KAAvB,CAAZ,CADK,CAGL;AACA;AACA;AACA;AACA;;AACAD,MAAAA,GAAG,CAACE,gBAAJ,CAAqB,OAArB,EAA+BC,CAAD,IAAO;AACnC;AACA;AACAL,QAAAA,OAAO,CAACX,IAAD,CAAP,CAHmC,CAInC;;AACAS,QAAAA,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,CAACT,IAAD,CAA5B;AACD,OAND,EARK,CAeL;AACA;AACA;AACA;AACA;AACA;AAEA;;AACAa,MAAAA,GAAG,CAACI,GAAJ,GAAUjB,IAAI,CAACC,IAAf,CAvBK,CAwBL;AACD;AACF,GAjCM,CAAP;AAkCD",
    "sourcesContent": [
        "// TODO tests\n\n/**\n * @name      linkLoaded\n * @namespace           sugar.js.dom\n * @type      Function\n *\n * Wait until the passed HTMLLinkElement is fully loaded\n *\n * @param \t\t{HTMLLinkElement} \t\t\tlink  \t\tThe link tag to check the loading state\n * @param \t\t{Function}\t\t\t\t\t[cb=null] \tAn optional callback to call\n * @return \t\t{Promise} \t\t\t\t\t\t\t\tThe promise that will be resolved\n *\n * @example  \tjs\n * import linkLoaded from '@coffeekraken/sugar/js/dom/linkLoaded'\n * linkLoaded(myCoolHTMLLinlElement).then((link) => {\n * \t\t// do something when the link is loaded\n * });\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nfunction alreadyLoaded(link) {\n  const href = link.href;\n  let result = false;\n  for (var i = 0; i < document.styleSheets.length; i++) {\n    if (\n      document.styleSheets[i].href &&\n      document.styleSheets[i].href.match(href)\n    ) {\n      // the css is already loaded\n      result = true;\n    } else if (i == document.styleSheets.length - 1) {\n      // Fallback. There is no request for the css file.\n    }\n  }\n  return result;\n}\n\nexport default function linkLoaded(link, callback = null) {\n  return new Promise((resolve, reject) => {\n    // check if image is already loaded\n    if (alreadyLoaded(link)) {\n      // resolve promise\n      resolve(link);\n      // call the callback if exist\n      callback != null && callback(link);\n    } else {\n      const img = document.createElement('img');\n\n      // wait until loaded\n      // console.log('CHECK LOADING', link.href);\n      // we load the css into an image\n      // when the image is in error more\n      // that mean that the css is loaded\n      img.addEventListener('error', (e) => {\n        // console.log('LOADED', e);\n        // resolve the promise\n        resolve(link);\n        // callback if exist\n        callback != null && callback(link);\n      });\n      // listen for error\n      // img.addEventListener('error', (e) => {\n      // \tconsole.error('ERROR', e);\n      // \t// reject\n      // \treject(e);\n      // }, false);\n\n      // set url\n      img.src = link.href;\n      // document.body.appendChild(img);\n    }\n  });\n}\n"
    ]
}
{
    "version": 3,
    "sources": [
        "observeMutations.js"
    ],
    "names": [
        "observeMutations",
        "$target",
        "settings",
        "attributes",
        "childList",
        "subtree",
        "mutationObserver",
        "__SPromise",
        "resolve",
        "reject",
        "trigger",
        "cancel",
        "MutationObserver",
        "mutations",
        "forEach",
        "mutation",
        "observe",
        "on",
        "disconnect"
    ],
    "mappings": ";;;;;;;AAAA;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBe,SAASA,gBAAT,CAA0BC,OAA1B,EAAmCC,QAAnC,EAAkD;AAAA,MAAfA,QAAe;AAAfA,IAAAA,QAAe,GAAJ,EAAI;AAAA;;AAC/DA,EAAAA,QAAQ;AACNC,IAAAA,UAAU,EAAE,IADN;AAENC,IAAAA,SAAS,EAAE,KAFL;AAGNC,IAAAA,OAAO,EAAE;AAHH,KAIHH,QAJG,CAAR;AAOA,MAAII,gBAAJ;AAEA,SAAO,IAAIC,iBAAJ,CAAe,CAACC,OAAD,EAAUC,MAAV,EAAkBC,OAAlB,EAA2BC,MAA3B,KAAsC;AAC1D;AACAL,IAAAA,gBAAgB,GAAG,IAAIM,gBAAJ,CAAsBC,SAAD,IAAe;AACrD;AACAA,MAAAA,SAAS,CAACC,OAAV,CAAmBC,QAAD,IAAc;AAC9B;AACAL,QAAAA,OAAO,CAAC,MAAD,EAASK,QAAT,CAAP;AACD,OAHD;AAID,KANkB,CAAnB;AAOAT,IAAAA,gBAAgB,CAACU,OAAjB,CAAyBf,OAAzB,EAAkCC,QAAlC;AACD,GAVM,EAUJe,EAVI,CAUD,SAVC,EAUU,MAAM;AACrBX,IAAAA,gBAAgB,IAAIA,gBAAgB,CAACY,UAAjB,EAApB;AACD,GAZM,CAAP;AAaD",
    "sourcesContent": [
        "import __SPromise from '../promise/SPromise';\n\n/**\n * @name      observeMutations\n * @namespace           sugar.js.dom\n * @type      Function\n *\n * Observe mutations on an HTMLElement and get them through the observable subscription.\n * You can pass the mutation observer settings through the second argument. By default, here's his values:\n * - attributes: true,\n * - childList: false,\n * - subtree: false\n *\n * @param \t\t{HTMLElement} \t\t\t\t\t$target \t\t          The element to observe\n * @param \t\t{MutationObserverInit} \t\t\t[settings={}] \tThe mutation observer settings\n * @return \t\t{SPromise} \t\t\t\t\t\t\t\t                The SPromise instance on which you can register your callbacks, etc...\n *\n * @example  \tjs\n * import observeMutations from '@coffeekraken/sugar/js/dom/observeMutations'\n * const promise = observeMutations(myElement).then(mutation => {\n *    // do something with the mutation\n * });\n * // stop listening for mutations\n * promise.cancel();\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function observeMutations($target, settings = {}) {\n  settings = {\n    attributes: true,\n    childList: false,\n    subtree: false,\n    ...settings\n  };\n\n  let mutationObserver;\n\n  return new __SPromise((resolve, reject, trigger, cancel) => {\n    // create a new observer\n    mutationObserver = new MutationObserver((mutations) => {\n      // loop on mutations\n      mutations.forEach((mutation) => {\n        // trigger the then stack\n        trigger('then', mutation);\n      });\n    });\n    mutationObserver.observe($target, settings);\n  }).on('finally', () => {\n    mutationObserver && mutationObserver.disconnect();\n  });\n}\n"
    ]
}
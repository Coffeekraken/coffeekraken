{
    "version": 3,
    "sources": [
        "scriptLoaded.js"
    ],
    "names": [
        "loadScript",
        "$script",
        "__SPromise",
        "resolve",
        "reject",
        "trigger",
        "cancel",
        "done",
        "onload",
        "handleLoad",
        "onreadystatechange",
        "handleReadyStateChange",
        "onerror",
        "handleError",
        "state",
        "readyState",
        "e",
        "Error",
        "on"
    ],
    "mappings": ";;;;;;;AAAA;;;;AAEA;;;;;;;;;;;;;;;;;;AAkBe,SAASA,UAAT,CAAoBC,OAApB,EAA6B;AAC1C,SAAO,IAAIC,iBAAJ,CAAe,CAACC,OAAD,EAAUC,MAAV,EAAkBC,OAAlB,EAA2BC,MAA3B,KAAsC;AAC1D,QAAIC,IAAI,GAAG,KAAX;AAEAN,IAAAA,OAAO,CAACO,MAAR,GAAiBC,UAAjB;AACAR,IAAAA,OAAO,CAACS,kBAAR,GAA6BC,sBAA7B;AACAV,IAAAA,OAAO,CAACW,OAAR,GAAkBC,WAAlB;;AAEA,aAASJ,UAAT,GAAsB;AACpB,UAAI,CAACF,IAAL,EAAW;AACTA,QAAAA,IAAI,GAAG,IAAP;AACAJ,QAAAA,OAAO,CAACF,OAAD,CAAP;AACD;AACF;;AAED,aAASU,sBAAT,GAAkC;AAChC,UAAIG,KAAJ;;AACA,UAAI,CAACP,IAAL,EAAW;AACTO,QAAAA,KAAK,GAAGb,OAAO,CAACc,UAAhB;;AACA,YAAID,KAAK,KAAK,UAAd,EAA0B;AACxBL,UAAAA,UAAU;AACX;AACF;AACF;;AACD,aAASI,WAAT,CAAqBG,CAArB,EAAwB;AACtB,UAAI,CAACT,IAAL,EAAW;AACTA,QAAAA,IAAI,GAAG,IAAP;AACAH,QAAAA,MAAM,CAAC,IAAIa,KAAJ,CAAUD,CAAV,CAAD,CAAN;AACD;AACF;AACF,GA7BM,EA6BJE,EA7BI,CA6BD,SA7BC,EA6BU,MAAM;AACrBjB,IAAAA,OAAO,CAACO,MAAR,GAAiB,IAAjB;AACAP,IAAAA,OAAO,CAACS,kBAAR,GAA6B,IAA7B;AACAT,IAAAA,OAAO,CAACW,OAAR,GAAkB,IAAlB;AACD,GAjCM,CAAP;AAkCD",
    "sourcesContent": [
        "import __SPromise from '../promise/SPromise';\n\n/**\n * @name      scriptLoaded\n * @namespace           sugar.js.dom\n * @type      Function\n *\n * Detect when a script has been fully loaded\n *\n * @param    {HTMLScriptElement}    $script    The script element to detect the loading state\n * @return    {Promise}    The promise that will be resolved when the script is fully loaded\n *\n * @example    js\n * import scriptLoaded from '@coffeekraken/sugar/js/dom/scriptLoaded'\n * scriptLoaded($script).then(($script) => {\n *   // do something here\n * })\n *\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function loadScript($script) {\n  return new __SPromise((resolve, reject, trigger, cancel) => {\n    let done = false;\n\n    $script.onload = handleLoad;\n    $script.onreadystatechange = handleReadyStateChange;\n    $script.onerror = handleError;\n\n    function handleLoad() {\n      if (!done) {\n        done = true;\n        resolve($script);\n      }\n    }\n\n    function handleReadyStateChange() {\n      var state;\n      if (!done) {\n        state = $script.readyState;\n        if (state === 'complete') {\n          handleLoad();\n        }\n      }\n    }\n    function handleError(e) {\n      if (!done) {\n        done = true;\n        reject(new Error(e));\n      }\n    }\n  }).on('finally', () => {\n    $script.onload = null;\n    $script.onreadystatechange = null;\n    $script.onerror = null;\n  });\n}\n"
    ]
}
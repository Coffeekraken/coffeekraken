{
    "version": 3,
    "sources": [
        "toDomNodes.js"
    ],
    "names": [
        "processString",
        "string",
        "replace",
        "processNodeElm",
        "elm",
        "tagName",
        "toLowerCase",
        "innerHTML",
        "document",
        "importNode",
        "content",
        "toDomNodes",
        "source",
        "trim",
        "substr",
        "tpl",
        "querySelector"
    ],
    "mappings": ";;;;;;;AAAA;;;;AAEA,SAASA,aAAT,CAAuBC,MAAvB,EAA+B;AAC7B,SAAOA,MAAM,CACVC,OADI,CACI,OADJ,EACa,GADb,EAEJA,OAFI,CAEI,OAFJ,EAEa,GAFb,EAGJA,OAHI,CAGI,SAHJ,EAGe,GAHf,CAAP;AAID;;AAED,SAASC,cAAT,CAAwBC,GAAxB,EAA6B;AAC3B;AACA,UAAQA,GAAG,CAACC,OAAJ,CAAYC,WAAZ,EAAR;AACE,SAAK,QAAL;AACE;AACA,aAAO,wBAAYF,GAAG,CAACG,SAAhB,CAAP;AACA;;AACF,SAAK,UAAL;AACE;AACA,aAAOC,QAAQ,CAACC,UAAT,CAAoBL,GAAG,CAACM,OAAxB,EAAiC,IAAjC,CAAP;AACA;;AACF;AACE,aAAON,GAAP;AACA;AAXJ;AAaD;AAED;;;;;;;;;;;;;;;;;;AAgBe,SAASO,UAAT,CAAoBC,MAApB,EAA4B;AACzC;AACA,MAAIA,MAAM,CAACP,OAAX,EAAoB;AAClB,WAAOF,cAAc,CAACS,MAAD,CAArB;AACD;;AAED,MAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgCA,MAAM,GAAGA,MAAM,CAACC,IAAP,EAAT,CANS,CAQzC;;AACA,MACE,OAAOD,MAAP,KAAkB,QAAlB,IACAA,MAAM,CAACE,MAAP,CAAc,CAAd,EAAiB,CAAjB,MAAwB,GADxB,IAEAF,MAAM,CAACE,MAAP,CAAc,CAAC,CAAf,MAAsB,GAHxB,EAIE;AACA;AACA,WAAO,wBAAYF,MAAZ,CAAP;AACD,GAhBwC,CAkBzC;;;AACA,MAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9B;AACA,QAAMG,GAAG,GAAGP,QAAQ,CAACQ,aAAT,CAAuBJ,MAAvB,CAAZ,CAF8B,CAG9B;;AACA,QAAI,CAACG,GAAL,EAAU,OAJoB,CAK9B;;AACA,WAAOZ,cAAc,CAACY,GAAD,CAArB;AACD;AACF",
    "sourcesContent": [
        "import __strToHtml from '../string/strToHtml';\n\nfunction processString(string) {\n  return string\n    .replace(/&gt;/g, '>')\n    .replace(/&lt;/g, '<')\n    .replace(/&nbsp;/g, ' ');\n}\n\nfunction processNodeElm(elm) {\n  // check tpl type\n  switch (elm.tagName.toLowerCase()) {\n    case 'script':\n      // grab the script content and convert it to html if needed\n      return __strToHtml(elm.innerHTML);\n      break;\n    case 'template':\n      // get the template content\n      return document.importNode(elm.content, true);\n      break;\n    default:\n      return elm;\n      break;\n  }\n}\n\n/**\n * @name      toDomNodes\n * @namespace           sugar.js.dom\n * @type      Function\n *\n * Return a usable nodeTree from a variable source like selector, an html string, an html template tag or a node that will be cloned.\n *\n * @param \t\t\t{String|HTMLElement} \t\t\tsource \t\t\tThe source of the template (html string, selector, node element)\n * @return \t\t\t{HTMLElement} \t\t\t\t\t\t\t\t\tAn HTMLElement node tree that represent the template\n *\n * @example     js\n * import toDomNodes from '@coffeekraken/sugar/js/dom/toDomNodes';\n * toDomNodes('<span>Hello World</span>');\n *\n * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function toDomNodes(source) {\n  // if the source is an HTMLElement\n  if (source.tagName) {\n    return processNodeElm(source);\n  }\n\n  if (typeof source === 'string') source = source.trim();\n\n  // check source type\n  if (\n    typeof source === 'string' &&\n    source.substr(0, 1) === '<' &&\n    source.substr(-1) === '>'\n  ) {\n    // The source is an html string source\n    return __strToHtml(source);\n  }\n\n  // string selector\n  if (typeof source === 'string') {\n    // Try to get the template from the document\n    const tpl = document.querySelector(source);\n    // if don't found anything\n    if (!tpl) return;\n    // process the node\n    return processNodeElm(tpl);\n  }\n}\n"
    ]
}
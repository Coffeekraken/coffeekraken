{
    "version": 3,
    "sources": [
        "when.js"
    ],
    "names": [
        "when",
        "$node",
        "state",
        "settings",
        "Promise",
        "resolve",
        "reject",
        "importPromise",
        "args",
        "attribute",
        "checkFn",
        "offset",
        "callback",
        "module",
        "default",
        "apply",
        "then"
    ],
    "mappings": ";;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCe,SAASA,IAAT,CAAcC,KAAd,EAAqBC,KAArB,EAA4BC,QAA5B,EAA2C;AAAA,MAAfA,QAAe;AAAfA,IAAAA,QAAe,GAAJ,EAAI;AAAA;;AACxD,SAAO,IAAIC,OAAJ;AAAA,iCAAY,WAAOC,OAAP,EAAgBC,MAAhB,EAA2B;AAC5C;AACA,UAAIC,aAAJ,EAAmBC,IAAnB;;AACA,cAAQN,KAAR;AACE,aAAK,WAAL;AACEK,UAAAA,aAAa,gEACuD,iBADvD,GAAb;AAGAC,UAAAA,IAAI,GAAG,CAACP,KAAD,EAAQE,QAAQ,CAACM,SAAjB,EAA4BN,QAAQ,CAACO,OAArC,CAAP;AACA;;AACF,aAAK,YAAL;AACEH,UAAAA,aAAa,gEACwD,kBADxD,GAAb;AAGAC,UAAAA,IAAI,GAAG,CAACP,KAAD,EAAQE,QAAQ,CAACQ,MAAjB,CAAP;AACA;;AACF,aAAK,eAAL;AACEJ,UAAAA,aAAa,gEAC2D,qBAD3D,GAAb;AAGAC,UAAAA,IAAI,GAAG,CAACP,KAAD,EAAQE,QAAQ,CAACQ,MAAjB,CAAP;AACA;;AACF,aAAK,eAAL;AACEJ,UAAAA,aAAa,gEAC2D,qBAD3D,GAAb;AAGAC,UAAAA,IAAI,GAAG,CAACP,KAAD,EAAQE,QAAQ,CAACS,QAAjB,CAAP;AACA;;AACF,aAAK,SAAL;AACEL,UAAAA,aAAa,gEACqD,eADrD,GAAb;AAGAC,UAAAA,IAAI,GAAG,CAACP,KAAD,EAAQE,QAAQ,CAACS,QAAjB,CAAP;AACA;;AACF;AACEP,UAAAA,OAAO,CAACJ,KAAD,CAAP;AACA;AACA;AAlCJ,OAH4C,CAwC5C;;;AACA,UAAMY,MAAM,SAASN,aAArB,CAzC4C,CA2C5C;;AACAM,MAAAA,MAAM,CAACC,OAAP,CAAeC,KAAf,CAAqB,IAArB,EAA2BP,IAA3B,EAAiCQ,IAAjC,CAAsC,MAAM;AAC1C;AACAX,QAAAA,OAAO,CAACJ,KAAD,CAAP;AACD,OAHD;AAID,KAhDM;;AAAA;AAAA;AAAA;AAAA,MAAP;AAiDD",
    "sourcesContent": [
        "/**\n * @name                              when\n * @namespace           sugar.js.dom\n * @type                              Function\n *\n * Return a promise that will be resolved when the wanted status has been applied on the passed HTMLElement.\n * The status that can be requested are:\n * - attribute : Detect when a special attribute has been applied on the element\n * --- settings.attribute : Specify the attribute to check\n * --- settings.checkFn : An optional function to check the attribute. The promise is resolved when this function return true\n *\n * - inViewport : Detect when the element enter in the viewport\n * --- settings.offset : Specify an offset to detect the in viewport state\n *\n * - outOfViewport : Detect when the element exit the viewport\n * --- settings.offset : Specify an offset to detect the out viewport state\n *\n * - transitionEnd : Detect when the css transition is finished on the element\n * --- settings.callback : An optional callback function if you prefer instead of the promise\n *\n * - visible : Detect when the element become visible\n * --- settings.callback : An optional callback function if you prefer instead of the promise\n *\n * @param               {HTMLElement}                 $node               The HTMLElement to check\n * @param               {String}                      state               The state to check on the HTMLElement\n * @param               {Object}                      [settings={}]       The settings to configure the check process\n * @return              {Promise}                                         A promise that will be resolved when the state is detected\n *\n * @example             js\n * import when from '@coffeekraken/sugar/js/dom/when';\n * when(myCoolNode, 'inViewport').then(() => {\n *    // do something...\n * });\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function when($node, state, settings = {}) {\n  return new Promise(async (resolve, reject) => {\n    // check the state to detect\n    let importPromise, args;\n    switch (state) {\n      case 'attribute':\n        importPromise = import(\n          /* webpackChunkName: \"whenAttribute\" */ /* webpackMode: \"lazy\" */ './whenAttribute'\n        );\n        args = [$node, settings.attribute, settings.checkFn];\n        break;\n      case 'inViewport':\n        importPromise = import(\n          /* webpackChunkName: \"whenInViewport\" */ /* webpackMode: \"lazy\" */ './whenInViewport'\n        );\n        args = [$node, settings.offset];\n        break;\n      case 'outOfViewport':\n        importPromise = import(\n          /* webpackChunkName: \"whenOutOfViewport\" */ /* webpackMode: \"lazy\" */ './whenOutOfViewport'\n        );\n        args = [$node, settings.offset];\n        break;\n      case 'transitionEnd':\n        importPromise = import(\n          /* webpackChunkName: \"whenTransitionEnd\" */ /* webpackMode: \"lazy\" */ './whenTransitionEnd'\n        );\n        args = [$node, settings.callback];\n        break;\n      case 'visible':\n        importPromise = import(\n          /* webpackChunkName: \"whenVisible\" */ /* webpackMode: \"lazy\" */ './whenVisible'\n        );\n        args = [$node, settings.callback];\n        break;\n      default:\n        resolve($node);\n        return;\n        break;\n    }\n\n    // wait until the module is loaded\n    const module = await importPromise;\n\n    // call the when... function\n    module.default.apply(null, args).then(() => {\n      // resolve the promise\n      resolve($node);\n    });\n  });\n}\n"
    ]
}
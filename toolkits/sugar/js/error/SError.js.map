{
    "version": 3,
    "sources": [
        "SError.js"
    ],
    "names": [
        "SError",
        "message",
        "Array",
        "isArray",
        "join",
        "split",
        "filter",
        "line",
        "trim",
        "slice",
        "Error",
        "captureStackTrace",
        "constructor",
        "stack",
        "packageRoot",
        "stackArray",
        "l",
        "forEach",
        "push",
        "replace",
        "name",
        "displayed",
        "Object",
        "defineProperty",
        "get",
        "set",
        "value",
        "_stack"
    ],
    "mappings": ";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;IAIqBA,M;;;;;AACnB,kBAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACnB,QAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,UAAIC,KAAK,CAACC,OAAN,CAAcF,OAAd,CAAJ,EAA4B;AAC1BA,QAAAA,OAAO,GAAGA,OAAO,CAACG,IAAR,CAAa,IAAb,CAAV;AACD,OAFD,MAEO;AACLH,QAAAA,OAAO,GAAG,uBAAWA,OAAX,CAAV;AACD;AACF,KAPkB,CASnB;;;AACAA,IAAAA,OAAO,GAAGA,OAAO,CACdI,KADO,CACD,IADC,EAEPC,MAFO,CAECC,IAAD,IAAU;AAChB,UAAIA,IAAI,CAACC,IAAL,GAAYC,KAAZ,CAAkB,CAAlB,EAAqB,EAArB,MAA6B,YAAjC,EAA+C,OAAO,KAAP;AAC/C,UAAIF,IAAI,CAACC,IAAL,GAAYC,KAAZ,CAAkB,CAAlB,EAAqB,CAArB,MAA4B,KAAhC,EAAuC,OAAO,KAAP;AACvC,aAAO,IAAP;AACD,KANO,EAOPL,IAPO,CAOF,IAPE,CAAV;AASA,8BAAMH,OAAN;AACAS,IAAAA,KAAK,CAACC,iBAAN,gCAA8B,MAAKC,WAAnC;AAEA,QAAMC,KAAK,GAAG,EAAd;AACA,QAAMC,WAAW,GAAG,2BAApB;AACA,QAAIC,UAAU,GAAG,EAAjB;;AACA,QAAI,MAAKF,KAAT,EAAgB;AACdE,MAAAA,UAAU,GAAG,MAAKF,KAAL,CAAWR,KAAX,CAAiB,MAAjB,EAAyBI,KAAzB,CAA+B,CAA/B,CAAb;AACAM,MAAAA,UAAU,CACPT,MADH,CACWU,CAAD,IAAO;AACb,YAAIA,CAAC,CAACR,IAAF,OAAa,OAAjB,EAA0B,OAAO,KAAP;AAC1B,YAAIQ,CAAC,CAACR,IAAF,OAAa,EAAjB,EAAqB,OAAO,KAAP;AACrB,eAAO,IAAP;AACD,OALH,EAMGS,OANH,CAMYD,CAAD,IAAO;AACd,YAAIA,CAAC,CAACR,IAAF,OAAa,EAAjB,EAAqB;AACrBK,QAAAA,KAAK,CAACK,IAAN,wCAC6BF,CAAC,CAACG,OAAF,CAAUL,WAAV,EAAuB,EAAvB,CAD7B;AAGD,OAXH;AAYD;;AAED,UAAKM,IAAL,GAAY,MAAKR,WAAL,CAAiBQ,IAA7B;AACA,UAAKnB,OAAL,GAAe,wBACb,0DACkB,MAAKmB,IAAL,IAAa,MAAKR,WAAL,CAAiBQ,IADhD,yCAGEnB,OAHF,uBAKEY,KAAK,CAACT,IAAN,CAAW,EAAX,CALF,YADa,CAAf;AAUA,QAAIiB,SAAS,GAAG,KAAhB;AACAC,IAAAA,MAAM,CAACC,cAAP,gCAA4B,OAA5B,EAAqC;AACnCC,MAAAA,GAAG,EAAE,eAAY;AACf,YAAIH,SAAJ,EAAe,OAAO,EAAP;AACfA,QAAAA,SAAS,GAAG,IAAZ;AACA,eAAO,KAAKpB,OAAZ;AACD,OALkC;AAMnCwB,MAAAA,GAAG,EAAE,aAAUC,KAAV,EAAiB;AACpB,aAAKC,MAAL,GAAcD,KAAd;AACD;AARkC,KAArC;AAUA,UAAKb,KAAL,GAAa,wBAAY,wBAAYA,KAAK,CAACT,IAAN,CAAW,EAAX,CAAZ,CAAZ,CAAb;AA/DmB;AAgEpB;;;iCAjEiCM,K",
    "sourcesContent": [
        "import __parseHtml from '../console/parseHtml';\nimport __trimLines from '../string/trimLines.js';\nimport __packageRoot from '../path/packageRoot';\nimport __toString from '../string/toString';\n\n/**\n * @todo    Doc\n */\n\nexport default class SError extends Error {\n  constructor(message) {\n    if (typeof message !== 'string') {\n      if (Array.isArray(message)) {\n        message = message.join('\\n');\n      } else {\n        message = __toString(message);\n      }\n    }\n\n    // filter message for integrated stack\n    message = message\n      .split('\\n')\n      .filter((line) => {\n        if (line.trim().slice(0, 10) === 'Thrown at:') return false;\n        if (line.trim().slice(0, 3) === 'at ') return false;\n        return true;\n      })\n      .join('\\n');\n\n    super(message);\n    Error.captureStackTrace(this, this.constructor);\n\n    const stack = [];\n    const packageRoot = __packageRoot();\n    let stackArray = [];\n    if (this.stack) {\n      stackArray = this.stack.split(' at ').slice(1);\n      stackArray\n        .filter((l) => {\n          if (l.trim() === 'Error') return false;\n          if (l.trim() === '') return false;\n          return true;\n        })\n        .forEach((l) => {\n          if (l.trim() === '') return;\n          stack.push(\n            `<cyan>â”‚</cyan> at <cyan>${l.replace(packageRoot, '')}</cyan>`\n          );\n        });\n    }\n\n    this.name = this.constructor.name;\n    this.message = __trimLines(\n      __parseHtml(`\n      <red><underline>${this.name || this.constructor.name}</underline></red>\n\n      ${message}\n\n      ${stack.join('')}\n    `)\n    );\n\n    let displayed = false;\n    Object.defineProperty(this, 'stack', {\n      get: function () {\n        if (displayed) return '';\n        displayed = true;\n        return this.message;\n      },\n      set: function (value) {\n        this._stack = value;\n      }\n    });\n    this.stack = __trimLines(__parseHtml(stack.join('')));\n  }\n}\n"
    ]
}
{
    "version": 3,
    "sources": [
        "SMotionblurSvgFilter.js"
    ],
    "names": [
        "SMotionblurSvgFilter",
        "amount",
        "parseFloat",
        "_animationFrame",
        "_blur",
        "filter",
        "querySelector",
        "elm",
        "_onMotionStartFn",
        "_onMotionStart",
        "bind",
        "_onMotionStopFn",
        "_onMotionStop",
        "addEventListener",
        "_lastPos",
        "elms",
        "removeEventListener",
        "e",
        "target",
        "clearTimeout",
        "_startMoveTimeout",
        "setTimeout",
        "_isMoving",
        "_handleFilter",
        "fastdom",
        "mutate",
        "setAttribute",
        "diff",
        "_setMotionBlur",
        "requestAnimationFrame",
        "_currentPos",
        "xDiff",
        "Math",
        "abs",
        "left",
        "yDiff",
        "top",
        "x",
        "y",
        "cancelAnimationFrame",
        "SSvgFilter"
    ],
    "mappings": "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",
    "sourcesContent": [
        "import __offset from '../dom/offset';\nimport SSvgFilter from './SSvgFilter';\nimport fastdom from 'fastdom';\nimport forceRedraw from '../dom/forceRedraw';\n\n// TODO tests\n\n/**\n * @name \t\tSMotionblurSvgFilter\n * @namespace           sugar.js.filter\n * @type      Class\n *\n * This class represent a motion blur svg filter that will blur your\n * element depending on his movements, direction and speed\n *\n * @example \t\tjs\n * const filter = new SMotionblurSvgFilter();\n * filter.applyTo(myCoolHTMLElement);\n * // now when your element will move, it will be blured accordingly\n *\n * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default class SMotionblurSvgFilter extends SSvgFilter {\n  /**\n   * @name        amount\n   * @type        Number\n   * @default     0.5\n   *\n   * Store the amount of motion blur to apply\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  amount = 0.5;\n\n  /**\n   * @name        _isMoving\n   * @type        Boolean\n   *\n   * Store the status of the animation\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _isMoving = false;\n\n  /**\n   * @name        _startMoveTimeout\n   * @type        Number\n   *\n   * Store the starting moment when the element move\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _startMoveTimeout = null;\n\n  /**\n   * @name          constructor\n   * @type          Function\n   *\n   * Constructor\n   *\n   * @param \t\t{Number} \t\t[amount=0.5] \t\t\tThe motion blur amount\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(amount = 0.5) {\n    super(`\n\t\t\t<feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"0,0\" />\n\t\t`);\n\n    // settings\n    this.amount = parseFloat(amount);\n\n    // variables\n    this._animationFrame = null;\n\n    // filter elements\n    this._blur = this.filter.querySelector('feGaussianBlur');\n  }\n\n  /**\n   * @name      applyTo\n   * @type      Function\n   * @override\n   *\n   * Apply the filter to element\n   *\n   * @param \t\t{HTMLElement} \t\telm \t\tThe element on which to apply the filter\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  applyTo(elm) {\n    // call parent method\n    super.applyTo(elm);\n    // listen to animation, transitionstart and move event\n    this._onMotionStartFn = this._onMotionStart.bind(this);\n    this._onMotionStopFn = this._onMotionStop.bind(this);\n    elm.addEventListener('transitionstart', this._onMotionStartFn);\n    elm.addEventListener('animationstart', this._onMotionStartFn);\n    elm.addEventListener('dragstart', this._onMotionStartFn);\n    elm.addEventListener('transitionend', this._onMotionStopFn);\n    elm.addEventListener('animationend', this._onMotionStopFn);\n    elm.addEventListener('dragend', this._onMotionStopFn);\n    this._lastPos = __offset(this.elms[0]);\n  }\n\n  /**\n   * @name            unapplyFrom\n   * @type            Function\n   * @override\n   *\n   * Remove the filter from element\n   *\n   * @param \t{HTMLElement} \telm \tThe element to unapply the filter from\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  unapplyFrom(elm) {\n    // remove event listeners\n    elm.removeEventListener('animationStart', this._onMotionStartFn);\n    elm.removeEventListener('transitionstart', this._onMotionStartFn);\n    elm.removeEventListener('dragstart', this._onMotionStartFn);\n    elm.removeEventListener('transitionend', this._onMotionStopFn);\n    elm.removeEventListener('animationend', this._onMotionStopFn);\n    elm.removeEventListener('dragend', this._onMotionStopFn);\n    // call parent\n    super.unapplyFrom(elm);\n  }\n\n  /**\n   * @name          _onMotionStart\n   * @type          Function\n   * @private\n   *\n   * When the animation, transition or draging start\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _onMotionStart(e) {\n    if (e.target !== this.elms[0]) return;\n    clearTimeout(this._startMoveTimeout);\n    this._startMoveTimeout = setTimeout(() => {\n      this._isMoving = true;\n      // handle filter\n      this._handleFilter();\n    });\n  }\n\n  /**\n   * @name          _onMotionStop\n   * @type          Function\n   * @private\n   *\n   * Transition / animation end\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _onMotionStop(e) {\n    if (e.target !== this.elms[0]) return;\n    if (!this._isMoving) return;\n    // update is moving status\n    this._isMoving = false;\n    fastdom.mutate(() => {\n      // set the blur\n      this._blur.setAttribute('stdDeviation', 0 + ',' + 0);\n      // redraw the element to ensure proper display\n      forceRedraw(this.elms[0]);\n    });\n  }\n\n  /**\n   * @name          _handleFilter\n   * @type          Function\n   * @private\n   *\n   * Handle filter\n   *\n   * @param \t\t{Boolean} \t\trecusrive \t\t\tIf the function need to be called again at the end of it's execution\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _handleFilter() {\n    // animation or move is finished\n    if (!this._isMoving) return;\n\n    // set the motion blur and get the moving difference\n    let diff = this._setMotionBlur();\n\n    // recusrive call to apply the blur with requestAnimationFrame for performances\n    this._animationFrame = requestAnimationFrame(() => {\n      this._handleFilter();\n    });\n  }\n\n  /**\n   * @name            _setMotionBlur\n   * @type            Function\n   * @private\n   *\n   * Set motion blur\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _setMotionBlur() {\n    this._currentPos = __offset(this.elms[0]);\n    let xDiff =\n      Math.abs(this._currentPos.left - this._lastPos.left) * this.amount;\n    let yDiff =\n      Math.abs(this._currentPos.top - this._lastPos.top) * this.amount;\n\n    // set the blur\n    this._blur.setAttribute('stdDeviation', xDiff + ',' + yDiff);\n\n    // update lastPos\n    this._lastPos = __offset(this.elms[0]);\n\n    // return the diff\n    return {\n      x: xDiff,\n      y: yDiff\n    };\n  }\n\n  /**\n   * @name        destroy\n   * @type        Function\n   * @override\n   *\n   * Destroy the filter\n   *\n   * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  destroy() {\n    cancelAnimationFrame(this._animationFrame);\n    super.destroy();\n  }\n}\n"
    ]
}
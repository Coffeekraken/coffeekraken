{
    "version": 3,
    "sources": [
        "debounce.js"
    ],
    "names": [
        "debounce",
        "fn",
        "delay",
        "timer",
        "context",
        "args",
        "arguments",
        "clearTimeout",
        "setTimeout",
        "apply"
    ],
    "mappings": ";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;AAuBe,SAASA,QAAT,CAAkBC,EAAlB,EAAsBC,KAAtB,EAA6B;AAC1C,MAAIC,KAAK,GAAG,IAAZ;AACA,SAAO,YAAY;AACjB,QAAIC,OAAO,GAAG,IAAd;AAAA,QACEC,IAAI,GAAGC,SADT;AAEAC,IAAAA,YAAY,CAACJ,KAAD,CAAZ;AACAA,IAAAA,KAAK,GAAGK,UAAU,CAAC,YAAY;AAC7BP,MAAAA,EAAE,CAACQ,KAAH,CAASL,OAAT,EAAkBC,IAAlB;AACD,KAFiB,EAEfH,KAFe,CAAlB;AAGD,GAPD;AAQD",
    "sourcesContent": [
        "/**\n * @name        debounce\n * @namespace           sugar.js.function\n * @type      Function\n *\n * This utils function allows you to make sure that a function that will normally be called\n * several times, for example during a scroll event, to be called only once after\n * the delay passed\n *\n * @example \t\tjs\n * import debounce from '@coffeekraken/sugar/js/function/debounce';\n * const myDebouncedFn = debounce(() => {\n * \t\t// my function content that will be\n * \t\t// executed only once after the 1 second delay\n * }, 1000);\n *\n * document.addEventListener('scroll', (e) => {\n * \t\t// call my debounced function\n * \t\tmyDebouncedFn();\n * });\n *\n * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function debounce(fn, delay) {\n  var timer = null;\n  return function () {\n    var context = this,\n      args = arguments;\n    clearTimeout(timer);\n    timer = setTimeout(function () {\n      fn.apply(context, args);\n    }, delay);\n  };\n}\n"
    ]
}
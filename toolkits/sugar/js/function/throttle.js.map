{
    "version": 3,
    "sources": [
        "throttle.js"
    ],
    "names": [
        "throttle",
        "fn",
        "threshhold",
        "last",
        "context",
        "now",
        "Date",
        "args",
        "arguments",
        "apply"
    ],
    "mappings": ";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAsBe,SAASA,QAAT,CAAkBC,EAAlB,EAAsBC,UAAtB,EAAkC;AAC/CA,EAAAA,UAAU,KAAKA,UAAU,GAAG,GAAlB,CAAV;AACA,MAAIC,IAAJ;AACA,SAAO,YAAY;AACjB,QAAIC,OAAO,GAAG,IAAd;AACA,QAAIC,GAAG,GAAG,IAAIC,IAAJ,EAAV;AAAA,QACEC,IAAI,GAAGC,SADT;;AAEA,QAAI,CAACL,IAAD,IAASA,IAAI,IAAIE,GAAG,GAAGH,UAA3B,EAAuC;AACrCC,MAAAA,IAAI,GAAGE,GAAP;AACAJ,MAAAA,EAAE,CAACQ,KAAH,CAASL,OAAT,EAAkBG,IAAlB;AACD;AACF,GARD;AASD",
    "sourcesContent": [
        "/**\n * @name        throttle\n * @namespace           sugar.js.function\n * @type      Function\n *\n * This utils function allows you to make sure that a function that will normally be called\n * several times, for example during a scroll event, to be called once each threshhold time\n *\n * @example \t\tjs\n * import throttle from '@coffeekraken/sugar/js/function/throttle';\n * const myThrottledFn = throttle(() => {\n * \t\t// my function content that will be\n * \t\t// executed only once each second\n * }, 1000);\n *\n * document.addEventListener('scroll', (e) => {\n * \t\t// call my throttled function\n * \t\tmyThrottledFn();\n * });\n *\n * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function throttle(fn, threshhold) {\n  threshhold || (threshhold = 250);\n  var last;\n  return function () {\n    var context = this;\n    var now = new Date(),\n      args = arguments;\n    if (!last || last <= now - threshhold) {\n      last = now;\n      fn.apply(context, args);\n    }\n  };\n}\n"
    ]
}
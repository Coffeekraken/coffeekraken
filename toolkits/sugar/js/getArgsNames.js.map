{
    "version": 3,
    "sources": [
        "getArgsNames.js"
    ],
    "names": [
        "getArgsNames",
        "func",
        "str",
        "toString",
        "replace",
        "trim",
        "start",
        "indexOf",
        "end",
        "length",
        "result",
        "substring",
        "split",
        "params",
        "forEach",
        "element",
        "push"
    ],
    "mappings": ";;;;;;;AAAA;;;;;;;;;;;;;;;;;AAiBe,SAASA,YAAT,CAAsBC,IAAtB,EAA4B;AACzC;AACA,MAAIC,GAAG,GAAGD,IAAI,CAACE,QAAL,EAAV,CAFyC,CAGzC;AACA;AACA;AACA;;AACAD,EAAAA,GAAG,GAAGA,GAAG,CACNE,OADG,CACK,mBADL,EAC0B,EAD1B,EAEHA,OAFG,CAEK,WAFL,EAEkB,EAFlB,EAGHA,OAHG,CAGK,WAHL,EAGkB,EAHlB,EAIHA,OAJG,CAIK,KAJL,EAIY,EAJZ,EAKHC,IALG,EAAN,CAPyC,CAczC;;AACA,MAAIC,KAAK,GAAGJ,GAAG,CAACK,OAAJ,CAAY,GAAZ,IAAmB,CAA/B,CAfyC,CAiBzC;;AACA,MAAIC,GAAG,GAAGN,GAAG,CAACO,MAAJ,GAAa,CAAvB;AAEA,MAAIC,MAAM,GAAGR,GAAG,CAACS,SAAJ,CAAcL,KAAd,EAAqBE,GAArB,EAA0BI,KAA1B,CAAgC,IAAhC,CAAb;AAEA,MAAIC,MAAM,GAAG,EAAb;AAEAH,EAAAA,MAAM,CAACI,OAAP,CAAgBC,OAAD,IAAa;AAC1B;AACAA,IAAAA,OAAO,GAAGA,OAAO,CAACX,OAAR,CAAgB,WAAhB,EAA6B,EAA7B,EAAiCC,IAAjC,EAAV;AAEA,QAAIU,OAAO,CAACN,MAAR,GAAiB,CAArB,EAAwBI,MAAM,CAACG,IAAP,CAAYD,OAAZ;AACzB,GALD;AAOA,SAAOF,MAAP;AACD",
    "sourcesContent": [
        "/**\n * @name                            getArgsNames\n * @namespace           sugar.js.dev\n * @type                            Function\n *\n * Get the arguments names of the passed function. Return an array of the arguments names\n *\n * @param             {Function}              func                  The function reference of which get the arguments names\n * @return            {Array}                                       An array of arguments names\n *\n * @example         js\n * import getArgsNames from '@coffeekraken/sugar/js/dev/getArgsNames';\n * function hello(world, coco, plop) { }\n * getArgsNames(hello); // => ['world', 'coco', 'plop']\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function getArgsNames(func) {\n  // String representaation of the function code\n  var str = func.toString();\n  // Remove comments of the form /* ... */\n  // Removing comments of the form //\n  // Remove body of the function { ... }\n  // removing '=>' if func is arrow function\n  str = str\n    .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '')\n    .replace(/\\/\\/(.)*/g, '')\n    .replace(/{[\\s\\S]*}/, '')\n    .replace(/=>/g, '')\n    .trim();\n\n  // Start parameter names after first '('\n  var start = str.indexOf('(') + 1;\n\n  // End parameter names is just before last ')'\n  var end = str.length - 1;\n\n  var result = str.substring(start, end).split(', ');\n\n  var params = [];\n\n  result.forEach((element) => {\n    // Removing any default value\n    element = element.replace(/=[\\s\\S]*/g, '').trim();\n\n    if (element.length > 0) params.push(element);\n  });\n\n  return params;\n}\n"
    ]
}
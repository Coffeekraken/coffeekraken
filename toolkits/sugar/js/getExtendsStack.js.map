{
    "version": 3,
    "sources": [
        "getExtendsStack.js"
    ],
    "names": [
        "getExtendsStack",
        "cls",
        "stack",
        "constructor",
        "baseClass",
        "newBaseClass",
        "Object",
        "getPrototypeOf",
        "name",
        "push"
    ],
    "mappings": ";;;;;;;AAAA;;;;AAEA;;;;;;;;;;;;;;;;;;;AAmBe,SAASA,eAAT,CAAyBC,GAAzB,EAA8B;AAC3C,MAAMC,KAAK,GAAG,EAAd;;AAEA,MAAI,CAAC,oBAAUD,GAAV,CAAL,EAAqB;AACnBA,IAAAA,GAAG,GAAGA,GAAG,CAACE,WAAV;AACD,GAL0C,CAO3C;;;AACA,MAAIC,SAAS,GAAGH,GAAhB;;AAEA,SAAOG,SAAP,EAAkB;AAChB,QAAMC,YAAY,GAAGC,MAAM,CAACC,cAAP,CAAsBH,SAAtB,CAArB;;AAEA,QAAIC,YAAY,IAAIA,YAAY,KAAKC,MAAjC,IAA2CD,YAAY,CAACG,IAA5D,EAAkE;AAChEN,MAAAA,KAAK,CAACO,IAAN,CAAWJ,YAAY,CAACG,IAAxB;AACAJ,MAAAA,SAAS,GAAGC,YAAZ;AACD,KAHD,MAGO;AACL;AACD;AACF;;AAED,SAAOH,KAAP;AACD",
    "sourcesContent": [
        "import __isClass from '../is/class';\n\n/**\n * @name            getExtendsStack\n * @namespace       sugar.js.class\n * @type            Function\n *\n * This function take a class as parameter and return an array of all the class names used to extends this one...\n *\n * @param       {Class}         cls         The class to get the stack of\n * @return      {Array}                     An array of all the parent classes names\n *\n * @example         js\n * import getExtendsStack from '@coffeekraken/sugar/js/class/getExtendsStack';\n * class Coco extends Error {}\n * class Plop extends Coco {}\n * getExtendsStack(Plop); // => ['Coco','Error'];\n *\n * @since       2.0.0\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function getExtendsStack(cls) {\n  const stack = [];\n\n  if (!__isClass(cls)) {\n    cls = cls.constructor;\n  }\n\n  // if (cls instanceof Function) {\n  let baseClass = cls;\n\n  while (baseClass) {\n    const newBaseClass = Object.getPrototypeOf(baseClass);\n\n    if (newBaseClass && newBaseClass !== Object && newBaseClass.name) {\n      stack.push(newBaseClass.name);\n      baseClass = newBaseClass;\n    } else {\n      break;\n    }\n  }\n\n  return stack;\n}\n"
    ]
}
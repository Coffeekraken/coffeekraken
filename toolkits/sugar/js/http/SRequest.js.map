{
    "version": 3,
    "sources": [
        "SRequest.js"
    ],
    "names": [
        "SRequest",
        "request",
        "__SRequestConfig",
        "_defaultRequestSettings",
        "response",
        "finalResponse",
        "data",
        "contentType",
        "headers",
        "hash",
        "_currentRequestSettings",
        "url",
        "indexOf",
        "split",
        "document",
        "undefined",
        "querySelector",
        "$html",
        "id",
        "$part",
        "JSON",
        "parse",
        "config",
        "_responsesArray",
        "push",
        "everyResponse",
        "Object",
        "assign",
        "_requestsCount",
        "sendCount",
        "_resolve",
        "length",
        "_send",
        "error",
        "_reject",
        "requestSettings",
        "beforeSend",
        "then",
        "_onSuccess",
        "bind",
        "catch",
        "_onError",
        "send",
        "Promise",
        "resolve",
        "reject"
    ],
    "mappings": "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",
    "sourcesContent": [
        "import __axios from 'axios';\nimport __strToHtml from '../html/strToHtml';\nimport __htmlToString from '../html/toString';\nimport __SRequestConfig from './SRequestConfig';\nimport __autoCast from '../string/autoCast';\nimport __convert from '../time/convert';\nimport __deepMerge from '../object/deepMerge';\n\n/**\n * @name \t\t                    SRequest\n * @namespace           sugar.js.http\n * @type                        Class\n *\n * Class that allows to simply handle ajax requests with ease.\n * This class give some useful features like :\n * - Promise support\n * - Recursive requests\n *\n * @example \tjs\n * const request = new SRequest({\n * \t\turl : 'api/...',\n * \t\tmethod : 'GET',\n * \t\tdata : {\n * \t\t\tmyVar : 'myVal'\n * \t\t}\n * });\n *\n * // send and listen for data\n * request.send().then((response) => {\n * \t\t// do something with response here...\n * }).catch((error) => {\n * \t\t// something went wrong...\n * });\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default class SRequest {\n  /**\n   * @name                      _defaultRequestSettings\n   * @type                      {SRequestConfig}\n   * @private\n   *\n   * Store the request settings to use\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _defaultRequestSettings = {};\n\n  /**\n   * @name                      _currentRequestSettings\n   * @type                      {SRequestConfig}\n   * @private\n   *\n   * Store the request settings to use\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _currentRequestSettings = {};\n\n  /**\n   * @name                      _requestsCount\n   * @type                      Integer\n   * @private\n   *\n   * Store how many requests have been sent\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _requestsCount = 0;\n\n  /**\n   * @name                              constructor\n   * @type                              Function\n   *\n   * Constructor\n   *\n   * @param           \t{SRequestConfig|Object} \t\t            request \t            \tThe request object used to make ajax call\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(request) {\n    // if the request is not an SRequestConfig, create it\n    if (!(request instanceof __SRequestConfig)) {\n      this._defaultRequestSettings = new __SRequestConfig(request);\n    } else {\n      this._defaultRequestSettings = request;\n    }\n  }\n\n  /**\n   * @name                      _onSuccess\n   * @type                      Function\n   * @private\n   *\n   * Callback when the request has been a success\n   *\n   * @param           {Object}              response                  The axios response object\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _onSuccess(response) {\n    // init the final response\n    let finalResponse = response.data;\n\n    // get the response content-type header\n    const contentType = response.headers['content-type'] || 'text/plain';\n\n    // try to get an hash in the settings url\n    const hash =\n      this._currentRequestSettings.url.indexOf('#') !== -1\n        ? this._currentRequestSettings.url.split('#')[1]\n        : false;\n\n    // if a hash exist, check that we are in the browser to have access to the document and querySelector method\n    if (\n      contentType === 'text/html' &&\n      hash !== false &&\n      document !== undefined &&\n      document.querySelector !== undefined\n    ) {\n      const $html = __strToHtml(response.data);\n      if ($html.id === hash) {\n        finalResponse = __htmlToString($html);\n      } else {\n        const $part = $html.querySelector(`#${hash}`);\n        if ($part) {\n          finalResponse = __htmlToString($part);\n        }\n      }\n    } else if (contentType === 'application/json') {\n      finalResponse = JSON.parse(response.data);\n    }\n\n    // save the processed data in the response object\n    response.data = finalResponse;\n\n    // remove some useless response properties\n    delete response.config;\n    delete response.request;\n\n    // append the new response inside the responsesArray\n    this._responsesArray.push(response);\n\n    // check if an \"everyResponse\" setting has been set\n    if (this._currentRequestSettings.everyResponse) {\n      // call the callback function\n      this._currentRequestSettings.everyResponse(\n        Object.assign({}, response),\n        this._requestsCount\n      );\n    }\n\n    // check if it was the last request or not\n    if (this._requestsCount >= this._currentRequestSettings.sendCount) {\n      // resolve the request session\n      this._resolve(\n        this._responsesArray.length <= 1\n          ? this._responsesArray[0]\n          : this._responsesArray\n      );\n    } else {\n      // send a new request\n      this._send();\n    }\n  }\n\n  /**\n   * @name                      _onError\n   * @type                      Function\n   * @private\n   *\n   * Callback when the request return an error\n   *\n   * @param           {Object}              error                  The axios error object\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _onError(error) {\n    // something has gone wrong with the request(s) so reject the session\n    this._reject(error);\n  }\n\n  /**\n   * @name                          _send\n   * @type                          Function\n   * @private\n   *\n   * Send the actual request using axios\n   *\n   * @param         {Object}                [requestSettings={}]            The request settings for this particular request\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _send(requestSettings = {}) {\n    // update request count\n    this._requestsCount++;\n\n    // process request settings\n    requestSettings = __deepMerge(\n      this._defaultRequestSettings,\n      requestSettings\n    );\n    if (requestSettings.beforeSend) {\n      requestSettings = requestSettings.beforeSend(\n        requestSettings,\n        this._requestsCount\n      );\n    }\n\n    // save the current request settings\n    this._currentRequestSettings = Object.assign(requestSettings);\n\n    // create the new axios ajax instance\n    __axios(requestSettings)\n      .then(this._onSuccess.bind(this))\n      .catch(this._onError.bind(this));\n  }\n\n  /**\n   * @name                retry\n   * @type                Function\n   *\n   * Reset the request settings variables and relaunch the request\n   *\n   * @example           js\n   * myAjax.retry().then(response => {\n   *    // do something...\n   * });\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  retry() {\n    return this.send();\n  }\n\n  /**\n   * @name              send\n   * @type              Function\n   *\n   * Send the request and return a promise that will be resolved once all the requests\n   * have been made or rejected if one of the requests has returned an error...\n   *\n   * @return \t      {Promise} \t          The promise through which you will be notified when data are here\n   *\n   * @example         js\n   * myAjax.send().then(response => {\n   *    // do something...\n   * }).catch(error => {\n   *    // do something...\n   * });\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  send(requestSettings = {}) {\n    // return a promise\n    return new Promise((resolve, reject) => {\n      // // check if a cache exist and if we have the content\n      // if (this._settings.cache) {\n      //   const response = this._settings.cache.get(this._defaultRequestSettings.url);\n      //   if (response) {\n      //     resolve(response);\n      //     return;\n      //   }\n      // }\n\n      // reset the variables\n      this._requestsCount = 0;\n\n      // init the data array holder\n      this._responsesArray = [];\n\n      // set the resolve and reject callback in the instance\n      this._resolve = resolve;\n      this._reject = reject;\n\n      // start requests\n      this._send(requestSettings);\n    });\n  }\n}\n"
    ]
}
{
    "version": 3,
    "sources": [
        "SRequestConfig.js"
    ],
    "names": [
        "SRequestConfig",
        "params",
        "timeout",
        "sendInterval",
        "Object",
        "assign"
    ],
    "mappings": ";;;;;;;AAAA;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;IAoBqBA,c;AACnB;;;;;;;;;;AAWA;;;;;;;;;;;AAYA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;AAcA;;;;;;;;;;;AAYA;;;;;;;;;;;;AAaA;;;;;;;;;;;AAYA;;;;;;;;AAQA,wBAAYC,MAAZ,EAAoB;AAAA;;AAAA,+BAnJd,IAmJc;;AAAA,mCAvIV,IAuIU;;AAAA,kCA3HX,KA2HW;;AAAA,mCA3GV,EA2GU;;AAAA,kCA1FX,EA0FW;;AAAA,gCAzEb,EAyEa;;AAAA,mCA7DV,CA6DU;;AAAA,wCA/CL,IA+CK;;AAAA,qCAnCR,CAmCQ;;AAAA,yCAtBJ,IAsBI;;AAAA,wCAVL,MAUK;;AAClB;AACA,MAAIA,MAAM,CAACC,OAAP,IAAkB,OAAOD,MAAM,CAACC,OAAd,KAA0B,QAAhD,EACED,MAAM,CAACC,OAAP,GAAiB,sBAAUD,MAAM,CAACC,OAAjB,EAA0B,IAA1B,CAAjB;AACF,MAAID,MAAM,CAACE,YAAP,IAAuB,OAAOF,MAAM,CAACE,YAAd,KAA+B,QAA1D,EACEF,MAAM,CAACE,YAAP,GAAsB,sBAAUF,MAAM,CAACE,YAAjB,EAA+B,IAA/B,CAAtB,CALgB,CAOlB;;AACAC,EAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBJ,MAApB;AACD,C",
    "sourcesContent": [
        "import __convert from '../time/convert';\n\n/**\n * @name \t              \tSRequestConfig\n * @namespace           sugar.js.http\n * @type                  Class\n *\n * Class that represent an ajax request that will be passed to an SRequest instance.\n * All the axios settings are supported by this class\n *\n * @example \tjs\n * const request = new SRequestConfig({\n *  \turl : '/api/...',\n *  \tmethod : 'GET',\n *  \tdata : {\n *  \t\tmyVar : 'myVal'\n *  \t}\n * });\n *\n * @see       https://github.com/axios/axios\n * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n */\nexport default class SRequestConfig {\n  /**\n   * @name                    url\n   * @type                    String\n   * @default                 null\n   *\n   * The url to call\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  url = null;\n\n  /**\n   * @name                      baseURL\n   * @type                      String\n   * @default                   null\n   *\n   * Specify the base url to call like \"https://api.github.com/2.0\" for example.\n   * If the \"url\" setting is absolute, this setting will don't have any impact on your request...\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  baseURL = null;\n\n  /**\n   * @name                      method\n   * @type                      String\n   * @values                    GET,DELETE,HEAD,OPTIONS,POST,PUT,PATCH\n   * @default                   GET\n   *\n   * The request method to use like GET, POST, DELETE or PUT\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  method = 'GET';\n\n  /**\n   * @name                      headers\n   * @type                      Object\n   * @default                   {}\n   *\n   * Specify some headers to add to the request\n   *\n   * @example             js\n   * {\n   *    'X-Requested-With': 'XMLHttpRequest'\n   * }\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  headers = {};\n\n  /**\n   * @name                  params\n   * @type                  Object\n   * @default               {}\n   *\n   * Specify some params to be sent through the URL.\n   * Must be a plain object or a URLSearchParams object\n   *\n   * @example             js\n   * {\n   *    myCoolData: 'Hello world'\n   * }\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  params = {};\n\n  /**\n   * @name                      data\n   * @type                      String|Object|ArrayBuffer|ArrayBufferView|URLSearchParams|FormData|File|Blob|Stream|Buffer\n   * @default                   {}\n   *\n   * Specify some data you want to send with the request.\n   * This setting is available only for 'PUT', 'POST', and 'PATCH' requests...\n   *\n   * @example                 js\n   * {\n   *    firstName: 'Fred'\n   * }\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  data = {};\n\n  /**\n   * @name                  timeout\n   * @type                  Number\n   * @default               0 (no timeout)\n   *\n   * Specify time to wait before aborting the actual request. If setted in number format, this will mean milliseconds.\n   * You can also specify this settings using string format like so: '2s', '1h', '4m', etc...\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  timeout = 0;\n\n  /**\n   * @name                      sendInterval\n   * @type                      Number\n   * @setting\n   * @default                   1000\n   *\n   * Set the interval time between each requests if the sendCount setting is specified.\n   * If setted in number format, this is taken as millisenconds. You can also set the interval\n   * in string format like '34s', '1h', '10ms', '2d', etc...\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  sendInterval = 1000;\n\n  /**\n   * @name                        sendCount\n   * @type                        Number\n   * @setting\n   * @default                     1\n   *\n   * Set how many times the request has to be sent\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  sendCount = 1;\n\n  /**\n   * @name                   everyResponse\n   * @type                    Function\n   * @default                 null\n   *\n   * Specify a function to call on every response. The parameters passed to the function are:\n   * - response {Object}: The actual request response\n   * - requestIdx {Number}: The request index\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  everyResponse = null;\n\n  /**\n   * @name                  responseType\n   * @type                  String\n   * @values                arraybuffer, document, json, text, stream, blob (browser only)\n   * @default               json\n   *\n   * Indicates the type of data that the server will respond with\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  responseType = 'json';\n\n  /**\n   * @name                        constructor\n   * @type                        Function\n   *\n   * Constructor\n   *\n   * @param \t      {Object} \t          params \t\t              The request params in object format\n   */\n  constructor(params) {\n    // process params that need something\n    if (params.timeout && typeof params.timeout === 'string')\n      params.timeout = __convert(params.timeout, 'ms');\n    if (params.sendInterval && typeof params.sendInterval === 'string')\n      params.sendInterval = __convert(params.sendInterval, 'ms');\n\n    // set the parameters\n    Object.assign(this, params);\n  }\n}\n"
    ]
}
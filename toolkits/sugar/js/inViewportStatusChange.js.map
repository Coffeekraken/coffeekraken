{
    "version": 3,
    "sources": [
        "inViewportStatusChange.js"
    ],
    "names": [
        "inViewportStatusChange",
        "$elm",
        "isFinished",
        "__SPromise",
        "resolve",
        "reject",
        "trigger",
        "cancel",
        "_whenIn",
        "then",
        "_whenOut",
        "stacks",
        "on"
    ],
    "mappings": ";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;;AAoBe,SAASA,sBAAT,CAAgCC,IAAhC,EAAsC;AACnD,MAAIC,UAAU,GAAG,KAAjB;AAEA,SAAO,IAAIC,iBAAJ,CACL,CAACC,OAAD,EAAUC,MAAV,EAAkBC,OAAlB,EAA2BC,MAA3B,KAAsC;AACpC,aAASC,OAAT,GAAmB;AACjB,mCAAiBP,IAAjB,EAAuBQ,IAAvB,CAA4B,MAAM;AAChC,YAAIP,UAAJ,EAAgB;AAChBI,QAAAA,OAAO,CAAC,OAAD,EAAUL,IAAV,CAAP;;AACAS,QAAAA,QAAQ;AACT,OAJD;AAKD;;AACD,aAASA,QAAT,GAAoB;AAClB,sCAAoBT,IAApB,EAA0BQ,IAA1B,CAA+B,MAAM;AACnC,YAAIP,UAAJ,EAAgB;AAChBI,QAAAA,OAAO,CAAC,MAAD,EAASL,IAAT,CAAP;;AACAO,QAAAA,OAAO;AACR,OAJD;AAKD,KAdmC,CAgBpC;;;AACA,QAAI,CAAC,2BAAeP,IAAf,CAAL,EAA2B;AACzBS,MAAAA,QAAQ;AACT,KAFD,MAEO;AACLF,MAAAA,OAAO;AACR;AACF,GAvBI,EAwBL;AACEG,IAAAA,MAAM,EAAE,CAAC,OAAD,EAAU,MAAV;AADV,GAxBK,EA2BLC,EA3BK,CA2BF,SA3BE,EA2BS,MAAM;AACpBV,IAAAA,UAAU,GAAG,IAAb;AACD,GA7BM,CAAP;AA8BD",
    "sourcesContent": [
        "import __SPromise from '../promise/SPromise';\nimport __isInViewport from './isInViewport';\nimport __whenInViewport from './whenInViewport';\nimport __whenOutOfViewport from './whenOutOfViewport';\n\n// TODO tests\n\n/**\n * @name      inViewportStatusChange\n * @namespace           sugar.js.dom\n * @type      Function\n *\n * Monitor when the passed element enter or exit the viewport\n *\n * @param \t\t{HTMLElement} \t\t\t\t\t\telm  \t\tThe element to monitor\n * @return \t\t{SPromise} \t\t                    The SPromise on wich you can register your callbacks. Available callbacks registration function are \"enter\" and \"exit\"\n *\n * @example  \tjs\n * import inViewportStatusChange from '@coffeekraken/sugar/js/dom/inViewportStatusChange';\n * inViewportStatusChange(myElm).enter($elm => {\n *    // do something...\n * }).exit($elm => {\n *    // do something...\n * });\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function inViewportStatusChange($elm) {\n  let isFinished = false;\n\n  return new __SPromise(\n    (resolve, reject, trigger, cancel) => {\n      function _whenIn() {\n        __whenInViewport($elm).then(() => {\n          if (isFinished) return;\n          trigger('enter', $elm);\n          _whenOut();\n        });\n      }\n      function _whenOut() {\n        __whenOutOfViewport($elm).then(() => {\n          if (isFinished) return;\n          trigger('exit', $elm);\n          _whenIn();\n        });\n      }\n\n      // if not in viewport at start\n      if (!__isInViewport($elm)) {\n        _whenOut();\n      } else {\n        _whenIn();\n      }\n    },\n    {\n      stacks: ['enter', 'exit']\n    }\n  ).on('finally', () => {\n    isFinished = true;\n  });\n}\n"
    ]
}
{
    "version": 3,
    "sources": [
        "hotkey.js"
    ],
    "names": [
        "hotkeys",
        "filter",
        "event",
        "hotkey",
        "settings",
        "__SPromise",
        "resolve",
        "reject",
        "trigger",
        "cancel",
        "element",
        "keyup",
        "keydown",
        "once",
        "splitKey",
        "e",
        "h",
        "on",
        "unbind"
    ],
    "mappings": ";;;;;;;AAAA;;AACA;;;;;;;;;;AACAA,mBAAQC,MAAR,GAAiB,UAAUC,KAAV,EAAiB;AAChC,SAAO,IAAP;AACD,CAFD,C,CAIA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCe,kBAAUC,MAAV,EAAkBC,QAAlB,EAAiC;AAAA,MAAfA,QAAe;AAAfA,IAAAA,QAAe,GAAJ,EAAI;AAAA;;AAC9C,SAAO,IAAIC,iBAAJ,CAAe,CAACC,OAAD,EAAUC,MAAV,EAAkBC,OAAlB,EAA2BC,MAA3B,KAAsC;AAC1D;AACAL,IAAAA,QAAQ;AACNM,MAAAA,OAAO,EAAE,IADH;AAENC,MAAAA,KAAK,EAAE,KAFD;AAGNC,MAAAA,OAAO,EAAE,IAHH;AAINC,MAAAA,IAAI,EAAE,KAJA;AAKNC,MAAAA,QAAQ,EAAE;AALJ,OAMHV,QANG,CAAR,CAF0D,CAU1D;;AACA,4BAAQD,MAAR,EAAgBC,QAAhB,EAA0B,CAACW,CAAD,EAAIC,CAAJ,KAAU;AAClC;AACAR,MAAAA,OAAO,CAAC,KAAD,EAAQO,CAAR,CAAP,CAFkC,CAGlC;;AACA,UAAIX,QAAQ,CAACS,IAAb,EAAmBJ,MAAM;AAC1B,KALD;AAMD,GAjBM,EAiBJQ,EAjBI,CAiBD,SAjBC,EAiBU,MAAM;AACrBjB,uBAAQkB,MAAR,CAAef,MAAf;AACD,GAnBM,CAAP;AAoBD",
    "sourcesContent": [
        "import hotkeys from 'hotkeys-js';\nimport __SPromise from '../promise/SPromise';\nhotkeys.filter = function (event) {\n  return true;\n};\n\n// TODO tests\n\n/**\n * @name \t\thotkey\n * @namespace           sugar.js.keyboard\n * @type      Function\n *\n * Simple function to add a hotkey like \"ctrl+a\" and an handler function that will be called when the hotkey has been pressed\n * The following keys are supported:\n * - shift, option, alt, ctrl, control, command\n * - backspace, tab, clear, enter, return, esc, escape, space, up, down, left, right, home, end, pageup, pagedown, del, delete\n * - from f1 to f19\n * - all the letters keys\n *\n * You can pass an option object to your hotkey function call.\n *\n * @param        {String}       hotkey          The hotkey to detect\n * @param         {Object}      [settings={}]    An option object to configure your hotkey. Here's the list of available settings:\n * - element (null) {HTMLElement}: Specify an HTMLElement to detect keyboard events from\n * - keyup (false) {Boolean}: Detect on keyup\n * - keydown (true) {Boolean}: Detect on keydown\n * - once (false) {Boolean}: Specify if you want to detect the keyboard event just once\n * - splitKey (*) {String}: Specify the split key to use in the sequences like \"ctrl+a\"\n * @return      {SPromise}                       An SPromise instance on which you can register for \"key\" stack event\n *\n * @example    js\n * import hotkey from '@coffeekraken/sugar/js/keyboard/hotkey'\n * const promise = hotkey('ctrl+a');\n * promise.on('ctrl+a', (e) => {\n *    // do something...\n * });\n * promise.cancel();\n *\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function (hotkey, settings = {}) {\n  return new __SPromise((resolve, reject, trigger, cancel) => {\n    // merge default settings with passed ones:\n    settings = {\n      element: null,\n      keyup: false,\n      keydown: true,\n      once: false,\n      splitKey: '+',\n      ...settings\n    };\n    // init the hotkey\n    hotkeys(hotkey, settings, (e, h) => {\n      // call the handler function\n      trigger('key', e);\n      // unsubscribe if once is truc\n      if (settings.once) cancel();\n    });\n  }).on('finally', () => {\n    hotkeys.unbind(hotkey);\n  });\n}\n"
    ]
}
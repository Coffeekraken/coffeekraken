{
    "version": 3,
    "sources": [
        "SLog.js"
    ],
    "names": [
        "SLog",
        "settings",
        "adapters",
        "adaptersByLevel",
        "overrideNativeConsole",
        "_settings",
        "console",
        "__SLogConsoleAdapter",
        "log",
        "info",
        "warn",
        "debug",
        "error",
        "trace",
        "adaptersByEnvironment",
        "test",
        "development",
        "production",
        "Object",
        "keys",
        "forEach",
        "adapterName",
        "cls",
        "require",
        "_overrideNativeConsole",
        "_this",
        "newConsole",
        "oldCons",
        "global",
        "window",
        "nativeConsole",
        "assign",
        "level",
        "messages",
        "args",
        "v",
        "indexOf",
        "push",
        "filter",
        "m",
        "trim",
        "split",
        "map",
        "a",
        "env",
        "undefined",
        "Array",
        "isArray",
        "adaptersLogStack",
        "message",
        "Promise",
        "all",
        "_log"
    ],
    "mappings": "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",
    "sourcesContent": [
        "import __deepMerge from '../object/deepMerge';\nimport __SLogConsoleAdapter from './adapters/SLogConsoleAdapter';\nimport __env from '../core/env';\nimport __isPlainObject from '../is/plainObject';\n\n/**\n * @name                    SLog\n * @namespace           sugar.js.log\n * @type                    Class\n *\n * This class allows you to log your messages, errors, etc... easily through some adapters that cover some targets like \"console\" of course,\n * \"mail\", \"slack\", etc...\n *\n * @example               js\n * import SLog from '@coffeekraken/sugar/js/log/SLog';\n * import SLogConsoleAdapter from '@coffeekraken/sugar/js/log/adapters/SLogConsoleAdapter';\n * const logger = new SLog({\n *    adapters: {\n *      console: new SLogConsoleAdapter()\n *    }\n * });\n * logger.log('Something cool happend...');\n *\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default class SLog {\n  /**\n   * @name          _settings\n   * @type          Object\n   * @private\n   *\n   * Store this instance settings\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _settings = {\n    adapters: {},\n    adaptersByLevel: {},\n    overrideNativeConsole: false\n  };\n\n  /**\n   * @name          constructor\n   * @type          Function\n   *\n   * Constructor\n   *\n   * @param         {Object}Â        [settings={}]           The settings object to configure your SLog instance. Here's the settings available:\n   * - adapters ({}) {Object}: An object of adapters that you want to use in this SLog instance. The format is { adapterName: adapterInstance, etc... }\n   * - overrideNativeConsole (false) {Boolean}: This will override the console.log, warn, etc... methods\n   * - adaptersByLevel ({}) (Object): Specify which adapter you want to use by level. Can be an Array like ['console','mail'] or a comma separated string like \"console,mail\". The object format is { adapterName: adaptersList }\n   * - adaptersByEnvironment ({}) {Object}: Same as the \"adaptersByLevel\" but for the environments like \"test\", \"development\" or \"production\". The environment value is taken using the \"sugar.js.core.env\" function using the key \"ENV\" or \"NODE_ENV\"\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(settings = {}) {\n    // extend settings\n    this._settings = __deepMerge(\n      {\n        adapters: {\n          console: new __SLogConsoleAdapter()\n        },\n        adaptersByLevel: {\n          log: null,\n          info: null,\n          warn: null,\n          debug: null,\n          error: null,\n          trace: null\n        },\n        adaptersByEnvironment: {\n          test: null,\n          development: null,\n          production: null\n        },\n        overrideNativeConsole: false\n      },\n      settings\n    );\n\n    // ensure every adapters are a class instance\n    Object.keys(this._settings.adapters).forEach((adapterName) => {\n      if (typeof this._settings.adapters[adapterName] === 'string') {\n        const cls = require(this._settings.adapters[adapterName]);\n        this._settings.adapters[adapterName] = new cls();\n      }\n    });\n\n    // if needed, override the native console\n    if (this._settings.overrideNativeConsole) {\n      this._overrideNativeConsole();\n    }\n  }\n\n  /**\n   * @name            _overrideNativeConsole\n   * @type            Function\n   * @private\n   *\n   * Override the native console object to call the SLog methods instead of the normal once.\n   * Store the native console inside the global/window variable called \"nativeConsole\"\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _overrideNativeConsole() {\n    // check if need to override the native console methods\n    const _this = this;\n    const newConsole = (function (oldCons) {\n      (global || window).nativeConsole = Object.assign({}, oldCons);\n      return {\n        log: function (...args) {\n          _this.log(...args);\n        },\n        info: function (...args) {\n          _this.info(...args);\n        },\n        warn: function (...args) {\n          _this.warn(...args);\n        },\n        debug: function (...args) {\n          _this.debug(...args);\n        },\n        error: function (...args) {\n          _this.error(...args);\n        },\n        trace: function (...args) {\n          _this.trace(...args);\n        }\n      };\n    })((global || window).console);\n    (global || window).console = newConsole;\n  }\n\n  /**\n   * @name            _log\n   * @type            Function\n   * @private\n   *\n   * Internal log method that make the actual call to all the adapters, etc...\n   *\n   * @param         {Mixed}         ...args         The actual message(s) to log or the level wanted like \"log\", \"warn\", \"info\", \"debug\" or \"error\"\n   * @return        {Promise}Â                             A promise that will be resolved once all the adapters have correctly log the message\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  async _log(...args) {\n    let adapters = null,\n      level = 'log',\n      messages = [];\n    args.forEach((v) => {\n      if (typeof v === 'string') {\n        if (\n          ['log', 'warn', 'info', 'error', 'debug', 'trace'].indexOf(v) !== -1\n        ) {\n          level = v;\n          return;\n        }\n      }\n      messages.push(v);\n    });\n\n    messages = messages.filter((m) => {\n      if (m === null || m === '') return false;\n      if (typeof m === 'string' && m.trim() === '') return false;\n      return true;\n    });\n\n    // process the adapters argument\n    if (adapters === null) adapters = this._settings.adaptersByLevel[level];\n    if (adapters === null) adapters = Object.keys(this._settings.adapters);\n    else if (typeof adapters === 'string')\n      adapters = adapters.split(',').map((a) => a.trim());\n\n    const env = __env('env') || __env('node_env') || 'production';\n    if (env) {\n      let adaptersByEnvironment = this._settings.adaptersByEnvironment[env];\n      if (\n        adaptersByEnvironment !== null &&\n        adaptersByEnvironment !== undefined\n      ) {\n        if (typeof adaptersByEnvironment === 'string')\n          adaptersByEnvironment = adaptersByEnvironment\n            .split(',')\n            .map((a) => a.trim());\n        adapters = adapters.filter((a) => {\n          return adaptersByEnvironment.indexOf(a) !== -1;\n        });\n      }\n    }\n\n    if (!Array.isArray(adapters)) return;\n\n    // init the promises stack\n    const adaptersLogStack = [];\n\n    // loop on all the adapters to log the message\n    adapters.forEach((adapterName) => {\n      // check if the adapter exists\n      if (!this._settings.adapters[adapterName]) return;\n\n      // loop on all messages to log\n      messages.forEach((message) => {\n        // make the actual log call to this adapter and add it's result to the\n        // adaptersLogStack array\n        adaptersLogStack.push(\n          this._settings.adapters[adapterName].log(message, level)\n        );\n      });\n    });\n\n    // return the result of all the adapters promises\n    return Promise.all(adaptersLogStack);\n  }\n\n  /**\n   * @name            log\n   * @type            Function\n   * @async\n   *\n   * The main log method that log a normal message\n   *\n   * @param           {Mixed}Â           ...args             The message(s) to log\n   * @return          {Promise}                             A promise that will be resolved once the message has been correctly logged through all adapters\n   *\n   * @example         js\n   * await logger.log('Something cool');\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  async log(...args) {\n    // call the internal _log method and return his result\n    return this._log(...args);\n  }\n\n  /**\n   * @name            info\n   * @type            Function\n   * @async\n   *\n   * The info method that log a message with the \"info\" level\n   *\n   * @param           {Mixed}Â           ...args             The message(s) to log\n   * @return          {Promise}                             A promise that will be resolved once the message has been correctly logged through all adapters\n   *\n   * @example         js\n   * await logger.info('Something cool');\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  async info(...args) {\n    // call the internal _log method and return his result\n    return this._log(...args, 'info');\n  }\n\n  /**\n   * @name            warn\n   * @type            Function\n   * @async\n   *\n   * The warn method that log a message with the \"warn\" level\n   *\n   * @param           {Mixed}Â           ...args             The message(s) to log\n   * @return          {Promise}                             A promise that will be resolved once the message has been correctly logged through all adapters\n   *\n   * @example         js\n   * await logger.warn('Something cool');\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  async warn(...args) {\n    // call the internal _log method and return his result\n    return this._log(...args, 'warn');\n  }\n\n  /**\n   * @name            debug\n   * @type            Function\n   * @async\n   *\n   * The debug method that log a message with the \"debug\" level\n   *\n   * @param           {Mixed}Â           ...args             The message(s) to log\n   * @return          {Promise}                             A promise that will be resolved once the message has been correctly logged through all adapters\n   *\n   * @example         js\n   * await logger.debug('Something cool');\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  async debug(...args) {\n    // call the internal _log method and return his result\n    return this._log(...args, 'debug');\n  }\n\n  /**\n   * @name            error\n   * @type            Function\n   * @async\n   *\n   * The error method that log a message with the \"error\" level\n   *\n   * @param           {Mixed}Â           ...args             The message(s) to log\n   * @return          {Promise}                             A promise that will be resolved once the message has been correctly logged through all adapters\n   *\n   * @example         js\n   * await logger.error('Something cool');\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  async error(...args) {\n    // call the internal _log method and return his result\n    return this._log(...args, 'error');\n  }\n\n  /**\n   * @name            trace\n   * @type            Function\n   * @async\n   *\n   * The trace method that log a message with the \"trace\" level\n   *\n   * @param           {Mixed}Â           ...args             The message(s) to log\n   * @return          {Promise}                             A promise that will be resolved once the message has been correctly logged through all adapters\n   *\n   * @example         js\n   * await logger.trace('Something cool');\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  async trace(...args) {\n    // call the internal _log method and return his result\n    return this._log(...args, 'trace');\n  }\n}\n"
    ]
}
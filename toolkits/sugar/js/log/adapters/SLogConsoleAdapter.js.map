{
    "version": 3,
    "sources": [
        "SLogConsoleAdapter.js"
    ],
    "names": [
        "SLogConsoleAdapter",
        "settings",
        "_settings",
        "enableChildProcessLogs",
        "logMethods",
        "log",
        "console",
        "info",
        "warn",
        "debug",
        "error",
        "trace",
        "message",
        "level",
        "Promise",
        "resolve",
        "reject",
        "consoleMethod",
        "global",
        "window",
        "nativeConsole"
    ],
    "mappings": ";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;;;;IAoBqBA,kB;AACnB;;;;;;;;;;;AAYA;;;;;;;;;;;AAWA,8BAAYC,QAAZ,EAA2B;AAAA,QAAfA,QAAe;AAAfA,MAAAA,QAAe,GAAJ,EAAI;AAAA;;AAAA;;AAAA,uCAbf,EAae;;AACzB;AACA,SAAKC,SAAL,GAAiB,wBACf;AACEC,MAAAA,sBAAsB,EAAE,IAD1B;AAEEC,MAAAA,UAAU,EAAE;AACVC,QAAAA,GAAG,EAAEC,OAAO,CAACD,GADH;AAEVE,QAAAA,IAAI,EAAED,OAAO,CAACC,IAFJ;AAGVC,QAAAA,IAAI,EAAEF,OAAO,CAACE,IAHJ;AAIVC,QAAAA,KAAK,EAAEH,OAAO,CAACG,KAJL;AAKVC,QAAAA,KAAK,EAAEJ,OAAO,CAACI,KALL;AAMVC,QAAAA,KAAK,EAAEL,OAAO,CAACK;AANL;AAFd,KADe,EAYfV,QAZe,CAAjB;AAcD;AAED;;;;;;;;;;;;;;;;;;;;;8CAgBUW,O,EAASC,K,EAAO;AACxB,eAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC;AACA,cAAIC,aAAa,GAAG,KAApB,CAFsC,CAItC;;AACA,kBAAQJ,KAAR;AACE,iBAAK,OAAL;AACEI,cAAAA,aAAa,GAAG,OAAhB;AACA;;AACF,iBAAK,OAAL;AACEA,cAAAA,aAAa,GAAG,OAAhB;AACA;;AACF,iBAAK,MAAL;AACEA,cAAAA,aAAa,GAAG,MAAhB;AACA;;AACF,iBAAK,MAAL;AACEA,cAAAA,aAAa,GAAG,MAAhB;AACA;;AACF,iBAAK,OAAL;AACEA,cAAAA,aAAa,GAAG,OAAhB;AACA;AAfJ,WALsC,CAuBtC;;;AACA,cAAI,OAAOL,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,aAAC,CAACM,MAAM,IAAIC,MAAX,EAAmBC,aAAnB,IAAoCd,OAArC,EAA8CW,aAA9C,EACEL,OAAO,GAAG,GADZ;AAGD,WAJD,MAIO,IAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AACtC,aAAC,CAACM,MAAM,IAAIC,MAAX,EAAmBC,aAAnB,IAAoCd,OAArC,EAA8CW,aAA9C,EACE,qBAAeL,OAAf,IAA0B,GAD5B;AAGD,WAJM,MAIA;AACL,aAAC,CAACM,MAAM,IAAIC,MAAX,EAAmBC,aAAnB,IAAoCd,OAArC,EAA8CW,aAA9C,EACEL,OAAO,GAAG,GADZ;AAGD,WApCqC,CAsCtC;;;AACAG,UAAAA,OAAO;AACR,SAxCM,CAAP;AAyCD,O",
    "sourcesContent": [
        "import __deepMerge from '../../object/deepMerge';\nimport __consoleHtmlPreset from '../htmlPresets/console';\nimport __isChildProcess from '../../is/childProcess';\nimport __toString from '../../string/toString';\nimport __formatObject from 'fmt-obj';\n\n/**\n * @name                    SLogConsoleAdapter\n * @namespace           sugar.js.log\n * @type                    Class\n *\n * This class allows you to log your messages, errors, etc... easily through some adapters that cover some targets like \"console\" of course,\n * \"mail\", \"slack\", etc...\n *\n * @example               js\n * import SLog from '@coffeekraken/sugar/js/log/SLog';\n * import SLogConsoleAdapter from '@coffeekraken/sugar/js/log/adapters/SLogConsoleAdapter';\n * const logger = new SLog({\n *    adapters: [\n *      new SLogConsoleAdapter()\n *    ]\n * });\n * logger.log('Something cool happend...');\n *\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default class SLogConsoleAdapter {\n  /**\n   * @name          _settings\n   * @type          Object\n   * @private\n   *\n   * Store this instance settings. Here's the list of available settings\n   * - logMethods ({}) {Object}: Store all the console methods like \"log\", \"info\", \"warn\", \"debug\" and \"error\". You can override each methods with your own method if you want. The Object format is { methodName: overrideFunction }\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _settings = {};\n\n  /**\n   * @name          constructor\n   * @type          Function\n   *\n   * Constructor\n   *\n   * @param         {Object}        [settings={}]           The settings object to configure your SLogConsoleAdapter instance. Here's the settings available:\n   * - logMethods ({}) {Object}: Store all the console methods like \"log\", \"info\", \"warn\", \"debug\" and \"error\". You can override each methods with your own method if you want. The Object format is { methodName: overrideFunction }\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(settings = {}) {\n    // extend settings\n    this._settings = __deepMerge(\n      {\n        enableChildProcessLogs: true,\n        logMethods: {\n          log: console.log,\n          info: console.info,\n          warn: console.warn,\n          debug: console.debug,\n          error: console.error,\n          trace: console.trace\n        }\n      },\n      settings\n    );\n  }\n\n  /**\n   * @name            log\n   * @type            Function\n   * @async\n   *\n   * This is the main method of the logger. It actually log the message passed as parameter to the console\n   *\n   * @param         {Mixed}          message            The message to log\n   * @param         {String}         level              The log level. Can be \"log\", \"info\", \"error\", \"debug\" or \"warn\"\n   * @return        {Promise}                           A promise that will be resolved once the message has been logged correctly\n   *\n   * @example         js\n   * await consoleAdapter.log('hello world');\n   *\n   * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  async log(message, level) {\n    return new Promise((resolve, reject) => {\n      // init the console method to use\n      let consoleMethod = 'log';\n\n      // adapting the console method to use depending on the type\n      switch (level) {\n        case 'trace':\n          consoleMethod = 'trace';\n          break;\n        case 'error':\n          consoleMethod = 'error';\n          break;\n        case 'warn':\n          consoleMethod = 'warn';\n          break;\n        case 'info':\n          consoleMethod = 'info';\n          break;\n        case 'debug':\n          consoleMethod = 'debug';\n          break;\n      }\n\n      // log the message\n      if (typeof message === 'string') {\n        ((global || window).nativeConsole || console)[consoleMethod](\n          message + '⠀'\n        );\n      } else if (typeof message === 'object') {\n        ((global || window).nativeConsole || console)[consoleMethod](\n          __formatObject(message) + '⠀'\n        );\n      } else {\n        ((global || window).nativeConsole || console)[consoleMethod](\n          message + '⠀'\n        );\n      }\n\n      // resolve the promise\n      resolve();\n    });\n  }\n}\n"
    ]
}
{
    "version": 3,
    "sources": [
        "map.js"
    ],
    "names": [
        "map",
        "object",
        "processor",
        "Object",
        "keys",
        "forEach",
        "prop",
        "res"
    ],
    "mappings": ";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6Be,SAASA,GAAT,CAAaC,MAAb,EAAqBC,SAArB,EAAgC;AAC7CC,EAAAA,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoBI,OAApB,CAA6BC,IAAD,IAAU;AACpC,QAAMC,GAAG,GAAGL,SAAS,CAACD,MAAM,CAACK,IAAD,CAAP,EAAeA,IAAf,CAArB;AACA,QAAIC,GAAG,KAAK,CAAC,CAAb,EAAgB,OAAON,MAAM,CAACK,IAAD,CAAb,CAAhB,KACKL,MAAM,CAACK,IAAD,CAAN,GAAeC,GAAf;AACN,GAJD;AAKA,SAAON,MAAP;AACD",
    "sourcesContent": [
        "/**\n * @name                map\n * @namespace           sugar.js.object\n * @type                Function\n *\n * This is the same function as the \"Array.map\" but for objects. It will iterate over all the properties\n * of the passed object and pass the value to your process function. It will then save the property\n * with your processed value\n *\n * @param           {Object}            object          The object to process\n * @param           {Function}          processor       The processor function that will take as parameters the current property value and the property name\n * @return          {Object}Â                            The processed object\n *\n * @example         js\n * import map from '@coffeekraken/sugar/js/object/map';\n * const myObject = {\n *    hello: 'world',\n *    cat: 'Nelson'\n * };\n * map(myObject, (value, prop) => {\n *    return prop === 'hello' ? 'universe' : value;\n * });\n * {\n *    hello: 'universe',\n *    cat: 'Nelson'\n * }\n *\n * @author  Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function map(object, processor) {\n  Object.keys(object).forEach((prop) => {\n    const res = processor(object[prop], prop);\n    if (res === -1) delete object[prop];\n    else object[prop] = res;\n  });\n  return object;\n}\n"
    ]
}
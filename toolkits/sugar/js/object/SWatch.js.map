{
    "version": 3,
    "sources": [
        "SWatch.js"
    ],
    "names": [
        "SWatch",
        "object",
        "settings",
        "__$SWatch",
        "_settings",
        "deep",
        "_promise",
        "__SPromise",
        "id",
        "_proxiedObject",
        "obj",
        "path",
        "value",
        "oldValue",
        "slice",
        "watchResult",
        "action",
        "setTimeout",
        "trigger",
        "onPropertyObj",
        "writable",
        "configurable",
        "enumerable",
        "on",
        "bind",
        "undefined",
        "Object",
        "defineProperties",
        "$on",
        "unwatchPropertyObj",
        "unwatch",
        "$unwatch",
        "defineProperty",
        "cancel",
        "revoke"
    ],
    "mappings": "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",
    "sourcesContent": [
        "import __constructorName from './constructorName';\nimport __get from './get';\nimport __set from './set';\nimport __deepProxy from './deepProxy';\nimport __deepMerge from '../object/deepMerge';\nimport __parseString from '../string/parse';\nimport __uniqid from '../string/uniqid';\nimport __micromatch from 'micromatch';\nimport __SPromise from '../promise/SPromise';\nimport __clone from '../object/clone';\n\n/**\n * @name \t\t            SWatch\n * @namespace           sugar.js.object\n * @type                Class\n *\n * This class allows you to easily monitor some object properties and get the new and old value of it\n *\n * @param       {Object}      object        The object to watch\n * @param       {Object}      [settings={}]       An object of settings to configure your watch process\n * - deep (true) {Boolean}: Specify if you want to watch the object deeply or just the first level\n *\n * @example \tjs\n * // create the watcher instance\n * const watchedObj = new SWatch({\n * \t\ttitle : 'Hello World'\n * });\n *\n * // watch the object\n * watchedObj.on('title:set', watchResult => {\n *  \t// do something when the title changes\n * });\n *\n * // update the title\n * watchedObj.title = 'Hello Universe';\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default class SWatch {\n  /**\n   * @name                    _watchStack\n   * @type                    Object\n   * @private\n   *\n   * Watch stack\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _watchStack = {};\n\n  /**\n   * @name            _settings\n   * @type            Object\n   * @private\n   *\n   * Store the settings object to configure your watch instance\n   *\n   * @since         2.0.0\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _settings = {};\n\n  /**\n   * @name                      constructor\n   * @type                      Function\n   *\n   * Constructor\n   *\n   * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(object, settings = {}) {\n    // check if the passed object is already an SWatch instance\n    if (object.__$SWatch) return object;\n\n    this._settings = __deepMerge(\n      {\n        deep: true\n      },\n      settings\n    );\n\n    this._promise = new __SPromise({\n      id: 'SWatch'\n    });\n\n    this._proxiedObject = __deepProxy(\n      object,\n      (obj) => {\n        let path = obj.path;\n        let value = obj.value;\n        let oldValue = obj.oldValue;\n        if (path.slice(0, 1) === '.') path = path.slice(1);\n        // build the object to pass to the handler\n        const watchResult = {\n          object: this._proxiedObject,\n          path,\n          action: obj.action,\n          oldValue,\n          value\n        };\n\n        if (\n          watchResult.action === 'get' &&\n          (path === 'on' || path === 'unwatch')\n        )\n          return;\n\n        // trigger event through promise\n        setTimeout(() => {\n          // this._promise.trigger(`${path}`, watchResult);\n          this._promise.trigger(`${path}:${watchResult.action}`, watchResult);\n        });\n      },\n      {\n        deep: this._settings.deep\n      }\n    );\n\n    const onPropertyObj = {\n      writable: true,\n      configurable: false,\n      enumerable: false,\n      value: this._promise.on.bind(this._promise)\n    };\n    if (this._proxiedObject.on !== undefined) {\n      Object.defineProperties(this._proxiedObject, {\n        $on: onPropertyObj\n      });\n    } else {\n      Object.defineProperties(this._proxiedObject, {\n        on: onPropertyObj\n      });\n    }\n    const unwatchPropertyObj = {\n      writable: true,\n      configurable: false,\n      enumerable: false,\n      value: this.unwatch.bind(this)\n    };\n    if (this._proxiedObject.unwatch !== undefined) {\n      Object.defineProperties(this._proxiedObject, {\n        $unwatch: unwatchPropertyObj\n      });\n    } else {\n      Object.defineProperties(this._proxiedObject, {\n        unwatch: unwatchPropertyObj\n      });\n    }\n\n    // set a property that is usefull to check if the object\n    // is a SWatch watched one...\n    Object.defineProperty(this._proxiedObject, '__$SWatch', {\n      writable: false,\n      configurable: false,\n      enumerable: false,\n      value: true\n    });\n\n    return this._proxiedObject;\n  }\n\n  unwatch() {\n    // cancel the promise\n    this._promise.cancel();\n    // revoke proxy on the proxied object\n    return this._proxiedObject.revoke();\n  }\n}\n"
    ]
}
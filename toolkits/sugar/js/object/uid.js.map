{
    "version": 3,
    "sources": [
        "uid.js"
    ],
    "names": [
        "uid",
        "format",
        "key",
        "args",
        "Object",
        "assign",
        "arguments",
        "item",
        "indexOf",
        "keys",
        "forEach",
        "idx",
        "__encryptObject",
        "encrypt",
        "toLowerCase",
        "hash",
        "__crypto",
        "createHash",
        "update",
        "digest",
        "toString"
    ],
    "mappings": ";;;;;;;AAAA;;AACA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBe,SAASA,GAAT,GAAe;AAC5B;AACA,MAAIA,GAAG,GAAG,EAAV;AAEA,MAAIC,MAAM,GAAG,QAAb;AACA,MAAIC,GAAG,GAAG,qBAAV;AACA,MAAMC,IAAI,GAAG,qBAASC,MAAM,CAACC,MAAP,CAAcC,SAAd,CAAT,EAAoCC,IAAD,IAAU;AACxD,QAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,UAAI,CAAC,QAAD,EAAW,MAAX,EAAmBC,OAAnB,CAA2BD,IAA3B,MAAqC,CAAC,CAA1C,EAA6C;AAC3CN,QAAAA,MAAM,GAAGM,IAAT;AACD,OAFD,MAEO;AACLL,QAAAA,GAAG,GAAGK,IAAN;AACD;;AACD,aAAO,KAAP;AACD;;AACD,WAAO,IAAP;AACD,GAVY,CAAb,CAN4B,CAkB5B;;AACAH,EAAAA,MAAM,CAACK,IAAP,CAAYN,IAAZ,EAAkBO,OAAlB,CAA2BC,GAAD,IAAS;AACjCX,IAAAA,GAAG,IAAIY,gBAAgBC,OAAhB,CAAwBV,IAAI,CAACQ,GAAD,CAA5B,EAAmCT,GAAnC,CAAP;AACD,GAFD;;AAIA,UAAQD,MAAM,CAACa,WAAP,EAAR;AACE,SAAK,MAAL;AACE;AACA,aAAOd,GAAP;AACA;;AACF,SAAK,QAAL;AACA;AACE,UAAIe,IAAI,GAAGC,gBACRC,UADQ,CACG,QADH,EAERC,MAFQ,CAEDlB,GAFC,EAGRmB,MAHQ,CAGD,KAHC,EAIRC,QAJQ,EAAX;;AAKA,aAAOL,IAAP;AACA;AAbJ;AAeD",
    "sourcesContent": [
        "import __encryptObject from '../crypt/object';\nimport __filter from '../object/filter';\nimport __crypto from 'crypto';\n\n/**\n * @name                            uid\n * @namespace           node.object\n * @type                            Function\n *\n * This function allows you to generate a uniqid based on the objects you pass as parameters.\n * The uid is hashed into a SHA256 32bits string but you can specify it using the \"format\" parameter described above\n *\n * @param       {Object}            objects...          The objects you want use to generate the uniqid\n * @param       {String}            [format='sha256']    The uid format that you want. Here's the available values:\n * - sha256: return a SHA256 64 characters formated string\n * - full: return the full length uid. The length can vary depending on the objects passed\n * @param       {String}            [key='sugar.js.object.uid']     The key used to encrypt the object\n * @return      {String}                                The uniqid generate based on the objects passed\n *\n * @example       js\n * const uid = require('@coffeekraken/sugar/node/object/uid');\n * uid({ hello: 'world' }, { plop: 'coco' }); // => ijfw89uf98jhw9ef8whef87hw7e8q87wegfh78wgf87gw8fgw8e7fzghwz8efgw8fwzuheihgbweuzf\n *\n * @author  Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function uid() {\n  // init the uid\n  let uid = '';\n\n  let format = 'sha256';\n  let key = 'sugar.js.object.uid';\n  const args = __filter(Object.assign(arguments), (item) => {\n    if (typeof item === 'string') {\n      if (['sha256', 'full'].indexOf(item) !== -1) {\n        format = item;\n      } else {\n        key = item;\n      }\n      return false;\n    }\n    return true;\n  });\n\n  // loop on each arguments\n  Object.keys(args).forEach((idx) => {\n    uid += __encryptObject.encrypt(args[idx], key);\n  });\n\n  switch (format.toLowerCase()) {\n    case 'full':\n      // return the uid\n      return uid;\n      break;\n    case 'sha256':\n    default:\n      let hash = __crypto\n        .createHash('sha256')\n        .update(uid)\n        .digest('hex')\n        .toString();\n      return hash;\n      break;\n  }\n}\n"
    ]
}
{
    "version": 3,
    "sources": [
        "watch.js"
    ],
    "names": [
        "watch",
        "target",
        "settings",
        "watchedObj",
        "__SWatch"
    ],
    "mappings": ";;;;;;;AAAA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBe,SAASA,KAAT,CAAeC,MAAf,EAAuBC,QAAvB,EAAsC;AAAA,MAAfA,QAAe;AAAfA,IAAAA,QAAe,GAAJ,EAAI;AAAA;;AACnD,MAAMC,UAAU,GAAG,IAAIC,eAAJ,CAAaH,MAAb,EAAqBC,QAArB,CAAnB;AACA,SAAOC,UAAP;AACD",
    "sourcesContent": [
        "import __SWatch from './SWatch';\nimport __uniqid from '../string/uniqid';\n\n/**\n * @name                      watch\n * @namespace           sugar.js.object\n * @type                      Function\n *\n * This method is a simple wrapper around the SWatch class that allows you to watch some action on object and arrays\n *\n * @param       {Object|Array}        target          The array or object to watch\n * @param       {Object}Â          [settings={}]       A settings object to configure your watch process. Check the SWatch class documentation for more.\n * @return      {Object}                              Return the proxied object on which you can make all the updates that you want\n *\n * @example       js\n * import watch from '@coffeekraken/sugar/js/object/watch';\n * let myObj = watch({\n *    hello: 'world'\n * }).on('*', watchResult => {\n *    // do something...\n * });\n * myObj.hello = 'plop';\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function watch(target, settings = {}) {\n  const watchedObj = new __SWatch(target, settings);\n  return watchedObj;\n}\n"
    ]
}
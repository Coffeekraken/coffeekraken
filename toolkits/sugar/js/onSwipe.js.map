{
    "version": 3,
    "sources": [
        "onSwipe.js"
    ],
    "names": [
        "onSwipe",
        "elm",
        "cb",
        "threshold",
        "touchstartX",
        "touchstartY",
        "touchendX",
        "touchendY",
        "gesuredZone",
        "addEventListener",
        "event",
        "changedTouches",
        "screenX",
        "screenY",
        "handleGesure",
        "swipeNfo",
        "distanceX",
        "Math",
        "abs",
        "distanceY",
        "left",
        "right",
        "up",
        "down"
    ],
    "mappings": ";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2Be,SAASA,OAAT,CAAiBC,GAAjB,EAAsBC,EAAtB,EAA0BC,SAA1B,EAA2C;AAAA,MAAjBA,SAAiB;AAAjBA,IAAAA,SAAiB,GAAL,GAAK;AAAA;;AACxD,MAAIC,WAAW,GAAG,CAAlB;AACA,MAAIC,WAAW,GAAG,CAAlB;AACA,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,WAAW,GAAGP,GAAlB;AACAO,EAAAA,WAAW,CAACC,gBAAZ,CACE,YADF,EAEE,UAAUC,KAAV,EAAiB;AACfN,IAAAA,WAAW,GAAGM,KAAK,CAACC,cAAN,CAAqB,CAArB,EAAwBC,OAAtC;AACAP,IAAAA,WAAW,GAAGK,KAAK,CAACC,cAAN,CAAqB,CAArB,EAAwBE,OAAtC;AACD,GALH,EAME,KANF;AASAL,EAAAA,WAAW,CAACC,gBAAZ,CACE,UADF,EAEE,UAAUC,KAAV,EAAiB;AACfJ,IAAAA,SAAS,GAAGI,KAAK,CAACC,cAAN,CAAqB,CAArB,EAAwBC,OAApC;AACAL,IAAAA,SAAS,GAAGG,KAAK,CAACC,cAAN,CAAqB,CAArB,EAAwBE,OAApC;AACAC,IAAAA,YAAY;AACb,GANH,EAOE,KAPF;;AAUA,WAASA,YAAT,GAAwB;AACtB,QAAMC,QAAQ,GAAG;AACfC,MAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL,CAASZ,SAAS,GAAGF,WAArB,CADI;AAEfe,MAAAA,SAAS,EAAEF,IAAI,CAACC,GAAL,CAASX,SAAS,GAAGF,WAArB;AAFI,KAAjB;;AAIA,QAAIC,SAAS,GAAGH,SAAZ,GAAwBC,WAA5B,EAAyC;AACvCW,MAAAA,QAAQ,CAACK,IAAT,GAAgB,IAAhB;AACD;;AACD,QAAId,SAAS,GAAGH,SAAZ,GAAwBC,WAA5B,EAAyC;AACvCW,MAAAA,QAAQ,CAACM,KAAT,GAAiB,IAAjB;AACD;;AACD,QAAId,SAAS,GAAGJ,SAAZ,GAAwBE,WAA5B,EAAyC;AACvCU,MAAAA,QAAQ,CAACO,EAAT,GAAc,IAAd;AACD;;AACD,QAAIf,SAAS,GAAGJ,SAAZ,GAAwBE,WAA5B,EAAyC;AACvCU,MAAAA,QAAQ,CAACQ,IAAT,GAAgB,IAAhB;AACD;;AACD,QAAIR,QAAQ,CAACK,IAAT,IAAiBL,QAAQ,CAACM,KAA1B,IAAmCN,QAAQ,CAACQ,IAA5C,IAAoDR,QAAQ,CAACO,EAAjE,EAAqE;AACnEpB,MAAAA,EAAE,CAACa,QAAD,CAAF;AACD;AACF;AACF",
    "sourcesContent": [
        "/**\n * @name      onSwipe\n * @namespace           sugar.js.dom\n * @type      Function\n *\n * Detect swipes gestures on touch devices.\n *\n * @param       {HTMLElement}         elm         The HTMLElement on which to detect the swipe\n * @param       {Function}            cb          The function to call on swipe. The callback function has as parameter an object that containthe swipe direction like left, right, up and down\n * @param       {Number}              [threshold=100]       The swipe threshold\n *\n * @example \tjs\n * import onSwipe from '@coffeekraken/sugar/js/dom/onSwipe'\n * onSwipe(myCoolElm, (swipe) => {\n * \t// check the swipe direction\n * \tif (swipe.left) {\n * \t\t// do something...\n * \t}\n * \t// support : left, right, up, down\n * \t// etc...\n * }, {\n * \tthreshold : 50\n * });\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n * @see \t\thttps://gist.github.com/SleepWalker/da5636b1abcbaff48c4d \tBased on\n */\nexport default function onSwipe(elm, cb, threshold = 100) {\n  var touchstartX = 0;\n  var touchstartY = 0;\n  var touchendX = 0;\n  var touchendY = 0;\n  var gesuredZone = elm;\n  gesuredZone.addEventListener(\n    'touchstart',\n    function (event) {\n      touchstartX = event.changedTouches[0].screenX;\n      touchstartY = event.changedTouches[0].screenY;\n    },\n    false\n  );\n\n  gesuredZone.addEventListener(\n    'touchend',\n    function (event) {\n      touchendX = event.changedTouches[0].screenX;\n      touchendY = event.changedTouches[0].screenY;\n      handleGesure();\n    },\n    false\n  );\n\n  function handleGesure() {\n    const swipeNfo = {\n      distanceX: Math.abs(touchendX - touchstartX),\n      distanceY: Math.abs(touchendY - touchstartY)\n    };\n    if (touchendX + threshold < touchstartX) {\n      swipeNfo.left = true;\n    }\n    if (touchendX - threshold > touchstartX) {\n      swipeNfo.right = true;\n    }\n    if (touchendY + threshold < touchstartY) {\n      swipeNfo.up = true;\n    }\n    if (touchendY - threshold > touchstartY) {\n      swipeNfo.down = true;\n    }\n    if (swipeNfo.left || swipeNfo.right || swipeNfo.down || swipeNfo.up) {\n      cb(swipeNfo);\n    }\n  }\n}\n"
    ]
}
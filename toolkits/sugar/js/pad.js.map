{
    "version": 3,
    "sources": [
        "pad.js"
    ],
    "names": [
        "pad",
        "number",
        "width",
        "character",
        "length",
        "Array",
        "join"
    ],
    "mappings": ";;;;;;;AAAA;;;;;;;;;;;;;;;;;AAiBe,SAASA,GAAT,CAAaC,MAAb,EAAqBC,KAArB,EAA4BC,SAA5B,EAA6C;AAAA,MAAjBA,SAAiB;AAAjBA,IAAAA,SAAiB,GAAL,GAAK;AAAA;;AAC1DF,EAAAA,MAAM,GAAGA,MAAM,GAAG,EAAlB;AACA,SAAOA,MAAM,CAACG,MAAP,IAAiBF,KAAjB,GACHD,MADG,GAEH,IAAII,KAAJ,CAAUH,KAAK,GAAGD,MAAM,CAACG,MAAf,GAAwB,CAAlC,EAAqCE,IAArC,CAA0CH,SAA1C,IAAuDF,MAF3D;AAGD",
    "sourcesContent": [
        "/**\n * @name        pad\n * @namespace           sugar.js.number\n * @type      Function\n *\n * Pad a number n of x 0 or another passed character\n *\n * @param    {Number}    number    The number to pad\n * @param    {Integer}    width    The width of pad to apply\n * @param    {String}    [character=\"0\"]    The character to use\n *\n * @example    js\n * import pad from '@coffeekraken/sugar/js/numbers/pad'\n * pad(123, 4) // 0123\n *\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function pad(number, width, character = '0') {\n  number = number + '';\n  return number.length >= width\n    ? number\n    : new Array(width - number.length + 1).join(character) + number;\n}\n"
    ]
}
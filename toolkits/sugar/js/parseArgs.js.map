{
    "version": 3,
    "sources": [
        "parseArgs.js"
    ],
    "names": [
        "parseArgsString",
        "string",
        "definitionObj",
        "settings",
        "defaultObj",
        "argsObj",
        "stringArray",
        "match",
        "map",
        "item",
        "currentArgName",
        "currentArgType",
        "currentArgDefinition",
        "filter",
        "part",
        "currentArg",
        "replace",
        "slice",
        "realArgName",
        "getArgNameByAlias",
        "Error",
        "Object",
        "keys",
        "argName",
        "argDefinition",
        "alias",
        "description",
        "join",
        "type",
        "lastArgObjKey",
        "length",
        "key",
        "obj",
        "value",
        "validator",
        "toLowerCase",
        "Array",
        "isArray",
        "of",
        "push",
        "finalObj",
        "undefined",
        "argNames",
        "i"
    ],
    "mappings": "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",
    "sourcesContent": [
        "import __deepMerge from '../object/deepMerge';\nimport __parse from '../string/parse';\nimport __set from '../object/set';\nimport __get from '../object/get';\nimport __delete from '../object/delete';\nimport __parseHtml from '../console/parseHtml';\nimport __isPlainObject from '../is/plainObject';\nimport __deepMap from '../object/deepMap';\nimport __completeArgsObject from './completeArgsObject';\nimport __unquote from '../string/unquote';\nimport __parseTypeDefinitionString from '../validation/utils/parseTypeDefinitionString';\nimport __ofType from '../is/ofType';\n\n/**\n * @name                        parseArgs\n * @namespace           sugar.js.cli\n * @type                        Function\n *\n * Parse a string to find the provided arguments into the list and return a corresponding object.\n *\n * @param             {String}                    string                      The string to parse\n * @param             {Object}                    definitionObj                   The arguments object description\n * @param             {Object}                    [settings={}]               A settings object that configure how the string will be parsed. Here's the settings options:\n * @return            {Object}                                                The object of funded arguments and their values\n *\n * @todo            update example\n *\n * @example         js\n * import parseArgs from '@coffeekraken/sugar/js/string/parseArgs';\n * parseArgs('hello -w 10 yop \"hello world\" -b --hello.world Nelson --help \"coco yep\" #blop', {\n *    param1: { type: 'String', alias: 'p' },\n *    world: { type: 'Array', alias: 'w', validator: value => {\n *      return Array.isArray(value);\n *    }},\n *    bool: { type: 'Boolean', alias: 'b', default: false, required: true },\n *    'hello.world': { type: 'String' },\n *    help: { type: 'String', alias: 'h' },\n *    id: { type: 'String', alias: 'i', regexp: /^#([\\S]+)$/ }\n * }, {\n *    treatDotsAsObject: true,\n *    handleOrphanOptions: true\n * });\n * {\n *    param1: 'hello',\n *    world: [10, 'yop', 'hello world'],\n *    bool: true,\n *    hello: {\n *      world: 'Nelson'\n *    },\n *    help: 'coco yep',\n *    id: '#blop'\n * }\n *\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function parseArgsString(\n  string,\n  definitionObj = {},\n  settings = {}\n) {\n  settings = __deepMerge(\n    {\n      defaultObj: {}\n    },\n    settings\n  );\n\n  const argsObj = {};\n\n  // process the passed string\n  let stringArray = string.match(/(?:[^\\s\"]+|\"[^\"]*\")+/gm) || [];\n  stringArray = stringArray.map((item) => {\n    return __unquote(item);\n  });\n\n  let currentArgName = null;\n  let currentArgType = null;\n  let currentArgDefinition = null;\n\n  stringArray = stringArray.filter((part) => {\n    const currentArg = part.replace(/^[-]{1,2}/, '');\n    if (part.slice(0, 2) === '--' || part.slice(0, 1) === '-') {\n      const realArgName =\n        getArgNameByAlias(currentArg, definitionObj) || currentArg;\n      currentArgName = realArgName;\n\n      if (!definitionObj[realArgName]) {\n        throw new Error(\n          `You try to pass an argument \"<yellow>${realArgName}</yellow>\" that is not supported. Here's the supported arguments:\\n${Object.keys(\n            definitionObj\n          )\n            .map((argName) => {\n              const argDefinition = definitionObj[argName];\n              let string = `<cyan>>${argName}</cyan>: --${argName}`;\n              if (argDefinition.alias) string += ` (-${argDefinition.alias})`;\n              if (argDefinition.description)\n                string += `: ${argDefinition.description}`;\n              return string;\n            })\n            .join('\\n')}`\n        );\n      }\n\n      currentArgDefinition = definitionObj[realArgName];\n\n      currentArgType = __parseTypeDefinitionString(currentArgDefinition.type);\n\n      argsObj[realArgName] = true;\n\n      return false;\n    }\n\n    const lastArgObjKey = Object.keys(argsObj)[Object.keys(argsObj).length - 1];\n\n    if (!lastArgObjKey) {\n      for (const key in definitionObj) {\n        const obj = definitionObj[key];\n\n        const value = __parse(part);\n\n        if (__ofType(value, obj.type)) {\n          if (obj.validator && !obj.validator(value)) {\n            continue;\n          }\n          argsObj[key] = value;\n          break;\n        }\n      }\n    } else if (lastArgObjKey) {\n      const value = __parse(part);\n\n      if (currentArgType[0].type.toLowerCase() === 'array') {\n        if (Array.isArray(value)) argsObj[lastArgObjKey] = value;\n        else if (!Array.isArray(argsObj[lastArgObjKey]))\n          argsObj[lastArgObjKey] = [];\n        if (currentArgType[0].of) {\n          if (__ofType(value, currentArgType[0].of)) {\n            if (\n              currentArgDefinition.validator &&\n              !currentArgDefinition.validator(value)\n            ) {\n              return true;\n            }\n            if (argsObj[lastArgObjKey] === value) {\n            } else argsObj[lastArgObjKey].push(value);\n          }\n        } else {\n          // argsObj[lastArgObjKey].push(value);\n        }\n      } else {\n        argsObj[lastArgObjKey] = value;\n        // __set(argsObj, lastArgObjKey, value);\n      }\n    }\n    return true;\n  });\n\n  const finalObj = {};\n  for (let key in definitionObj) {\n    const value = argsObj[key];\n    if (value === undefined && settings.defaultObj[key] !== undefined) {\n      finalObj[key] = settings.defaultObj[key];\n      continue;\n    } else if (argsObj[key] !== undefined) {\n      finalObj[key] = argsObj[key];\n    }\n  }\n\n  return __completeArgsObject(finalObj, definitionObj, settings);\n}\n\nfunction getArgNameByAlias(alias, definitionObj) {\n  const argNames = Object.keys(definitionObj);\n  for (let i = 0; i < argNames.length; i++) {\n    const argDefinition = definitionObj[argNames[i]];\n    if (argDefinition.alias && argDefinition.alias === alias)\n      return argNames[i];\n  }\n  return null;\n}\n"
    ]
}
{
    "version": 3,
    "sources": [
        "resolveTokens.js"
    ],
    "names": [
        "resolveTokens",
        "object",
        "proxiedObject",
        "getObj",
        "rawValue",
        "target",
        "key",
        "reg",
        "tokens",
        "match",
        "finalValue",
        "forEach",
        "token",
        "replace",
        "handleGet"
    ],
    "mappings": ";;;;;;;AAAA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBe,SAASA,aAAT,CAAuBC,MAAvB,EAA+B;AAC5C;AACA,MAAMC,aAAa,GAAG,wBACpBD,MADoB,EAEnBE,MAAD,IAAY;AACV;AACA,QAAMC,QAAQ,GAAG,kBAAMD,MAAM,CAACE,MAAb,EAAqBF,MAAM,CAACG,GAA5B,CAAjB,CAFU,CAGV;;AACA,QAAI,OAAOF,QAAP,KAAoB,QAAxB,EAAkC,OAAOA,QAAP,CAJxB,CAKV;;AACA,QAAMG,GAAG,GAAG,yBAAZ;AACA,QAAMC,MAAM,GAAGJ,QAAQ,CAACK,KAAT,CAAeF,GAAf,CAAf;AACA,QAAIG,UAAU,GAAGN,QAAjB;AAEA,QAAI,CAACI,MAAL,EAAa,OAAOJ,QAAP,CAVH,CAYV;;AACAI,IAAAA,MAAM,CAACG,OAAP,CAAgBC,KAAD,IAAW;AACxBF,MAAAA,UAAU,GAAGA,UAAU,CAACG,OAAX,CACXD,KADW,EAEX,kBACEX,MADF,EAEEW,KAAK,CAACC,OAAN,CAAc,GAAd,EAAmB,EAAnB,EAAuBA,OAAvB,CAA+B,GAA/B,EAAoC,EAApC,EAAwCA,OAAxC,CAAgD,OAAhD,EAAyD,EAAzD,CAFF,CAFW,CAAb;AAOD,KARD;AAUA,WAAOH,UAAP;AACD,GA1BmB,EA2BpB;AACEI,IAAAA,SAAS,EAAE;AADb,GA3BoB,CAAtB,CAF4C,CAiC5C;;AACA,SAAOZ,aAAP;AACD",
    "sourcesContent": [
        "import __deepProxy from './deepProxy';\nimport __get from './get';\n\n/**\n * @name                      resolveTokens\n * @namespace           sugar.js.object\n * @type                      Function\n *\n * This function take an object and propare it to accept tokens like:\n * - '{this.something.else}'\n * - etc...\n *\n * @param         {Object}            object        The object to process\n * @return        {Object}                          The proxied object that you can use\n *\n * @example       js\n * import resolveTokens from '@coffeekraken/sugar/js/object/resolveTokens';\n * const myObj = resolveTokens({\n *    hello: 'world',\n *    plop: '{this.hello}\n * });\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function resolveTokens(object) {\n  // proxy the object\n  const proxiedObject = __deepProxy(\n    object,\n    (getObj) => {\n      // get the raw value\n      const rawValue = __get(getObj.target, getObj.key);\n      // check if it's a string\n      if (typeof rawValue !== 'string') return rawValue;\n      // check if we have some tokens\n      const reg = /\\{([a-zA-Z0-9\\.-_]+)\\}/g;\n      const tokens = rawValue.match(reg);\n      let finalValue = rawValue;\n\n      if (!tokens) return rawValue;\n\n      // console.log(tokens);\n      tokens.forEach((token) => {\n        finalValue = finalValue.replace(\n          token,\n          __get(\n            object,\n            token.replace('{', '').replace('}', '').replace('this.', '')\n          )\n        );\n      });\n\n      return finalValue;\n    },\n    {\n      handleGet: true\n    }\n  );\n  // return the proxied object\n  return proxiedObject;\n}\n"
    ]
}
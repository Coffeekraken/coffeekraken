{
    "version": 3,
    "sources": [
        "SMediaQuery.js"
    ],
    "names": [
        "SMediaQuery",
        "_activeMedia",
        "document",
        "addEventListener",
        "e",
        "mediaName",
        "animationName",
        "replace",
        "previousActiveMedia",
        "Object",
        "keys",
        "_promisesStack",
        "forEach",
        "name",
        "nameArray",
        "split",
        "indexOf",
        "promises",
        "promise",
        "trigger",
        "allPromises",
        "allPromise",
        "settings",
        "Array",
        "isArray",
        "join",
        "id",
        "constructor",
        "push",
        "__SPromise",
        "startListener"
    ],
    "mappings": "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",
    "sourcesContent": [
        "import __SPromise from '../promise/SPromise';\n\n/**\n * @name                SMediaQuery\n * @namespace           sugar.js.responsive\n * @type                Class\n * @extends             SPromise\n *\n * This class expose some nice and easy methods to get the active media query defined in the config.media.queries configuration\n * stack, as well as register to some events list \"match\" or \"unmatch\".\n *\n * @param           {String}            mediaName           The media name you want to track. Can be an array of names or simple \"*\" to track every media queries\n * @param           {Object}            [settings={}]       An object of settings to configure your media query instance\n *\n * @example             js\n * import SMediaQuery from '@coffeekraken/sugar/js/responsive/SMediaQuery';\n * const mediaQuery = new SMediaQuery('mobile');\n * mediaQuery.on('match', media => {\n *      // do something\n * });\n * SMediaQuery.getActiveMedia(); // => mobile\n *\n * @since           2.0.0\n * @author\t\t\t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nclass SMediaQuery extends __SPromise {\n  /**\n   * @name                this._activeMedia\n   * @type                String\n   * @static\n   *\n   * Store the active media name\n   *\n   * @since           2.0.0\n   * @author\t\t\t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  static _activeMedia = 'desktop';\n\n  /**\n   * @name                _promisesStack\n   * @type                Object\n   * @static\n   *\n   * Store all the promises for each media\n   *\n   * @since           2.0.0\n   * @author\t\t\t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  static _promisesStack = {};\n\n  /**\n   * @name              startListener\n   * @type              Function\n   * @static\n   *\n   * Add the global listener based on the \"initBodyMediaQueries\" scss mixin\n   *\n   * @since             2.0.0\n   * @author\t\t\t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  static getActiveMedia() {\n    return this._activeMedia;\n  }\n\n  /**\n   * @name              startListener\n   * @type              Function\n   * @static\n   *\n   * Add the global listener based on the \"initBodyMediaQueries\" scss mixin\n   *\n   * @since             2.0.0\n   * @author\t\t\t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  static startListener() {\n    document.addEventListener('animationend', (e) => {\n      const mediaName = e.animationName.replace(/^mq-/, '');\n      const previousActiveMedia = this._activeMedia;\n\n      // keep track of the active media\n      this._activeMedia = mediaName;\n\n      Object.keys(this._promisesStack).forEach((name) => {\n        const nameArray = name.split(' ');\n        if (previousActiveMedia) {\n          if (nameArray.indexOf(previousActiveMedia) !== -1) {\n            const promises = this._promisesStack[name];\n            promises.forEach((promise) => {\n              promise.trigger('unmatch', {\n                name: previousActiveMedia\n              });\n            });\n          }\n        }\n        if (nameArray.indexOf(mediaName) !== -1) {\n          const promise = this._promisesStack[name];\n          const promises = this._promisesStack[name];\n          promises.forEach((promise) => {\n            promise.trigger('match', {\n              name: mediaName\n            });\n          });\n        }\n      });\n\n      if (this._promisesStack['*']) {\n        const allPromises = this._promisesStack['*'];\n        allPromises.forEach((allPromise) => {\n          if (previousActiveMedia) {\n            allPromise.trigger('unmatch', {\n              name: previousActiveMedia\n            });\n          }\n          allPromise.trigger('match', {\n            name: mediaName\n          });\n        });\n      }\n    });\n  }\n\n  /**\n   * @name                constructor\n   * @type                Function\n   * @constructor\n   *\n   * Constructor\n   *\n   * @since           2.0.0\n   * @author\t\t\t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(mediaName, settings = {}) {\n    if (!Array.isArray(mediaName)) mediaName = [mediaName];\n\n    const name = mediaName.join(' ');\n\n    super(settings, {\n      id: `SMediaQuery.${name.split(' ').join('-')}`\n    });\n\n    if (!this.constructor._promisesStack[name])\n      this.constructor._promisesStack[name] = [];\n    this.constructor._promisesStack[name].push(this);\n  }\n}\n\n// start listener\nSMediaQuery.startListener();\n\nexport default SMediaQuery;\n"
    ]
}
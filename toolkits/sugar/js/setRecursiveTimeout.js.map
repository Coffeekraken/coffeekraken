{
    "version": 3,
    "sources": [
        "setRecursiveTimeout.js"
    ],
    "names": [
        "setRecursiveTimeout",
        "fn",
        "timeout",
        "duration",
        "spread",
        "idx",
        "currentDuration",
        "timeoutFn",
        "tick",
        "spreadValue",
        "Math",
        "round",
        "random",
        "setTimeout",
        "clearTimeout"
    ],
    "mappings": ";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;AAqBe,SAASA,mBAAT,CAA6BC,EAA7B,EAAiCC,OAAjC,EAA0CC,QAA1C,EAAoDC,MAApD,EAAgE;AAAA,MAAZA,MAAY;AAAZA,IAAAA,MAAY,GAAH,CAAG;AAAA;;AAC7E,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,eAAe,GAAG,CAAtB;AACA,MAAIC,SAAS,GAAG,IAAhB;;AAEA,GAAC,SAASC,IAAT,GAAgB;AACf;AACAP,IAAAA,EAAE,CAACI,GAAD,CAAF,CAFe,CAIf;;AACAC,IAAAA,eAAe,IAAIJ,OAAnB;AACAG,IAAAA,GAAG,GANY,CAQf;;AACA,QAAI,CAACF,QAAD,IAAaA,QAAQ,KAAK,CAAC,CAA3B,IAAgCG,eAAe,GAAGH,QAAtD,EAAgE;AAC9D,UAAMM,WAAW,GAAG,CAACL,MAAD,GAAUM,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,CAAYR,MAAM,GAAG,CAArB,CAAX,CAA9B;AACAG,MAAAA,SAAS,GAAGM,UAAU,CAACL,IAAD,EAAON,OAAO,GAAGO,WAAjB,CAAtB;AACD;AACF,GAbD,IAL6E,CAoB7E;;;AACA,SAAO,YAAY;AACjB;AACAK,IAAAA,YAAY,CAACP,SAAD,CAAZ;AACD,GAHD;AAID",
    "sourcesContent": [
        "/**\n * @name        setRecursiveTimeout\n * @namespace           sugar.js.function\n * @type      Function\n *\n * This utils function allows you to call a passed function each x time during a certain duration\n *\n * @param \t\t{Function} \t\tfn \t\t\t\tThe function to execute\n * @param \t\t{Number} \t\ttimeout \t\tThe time between each execution\n * @param \t\t{Number} \t\tduration \t\tThe duration of the timeout\n * @param \t\t{Number}\t\t[spread=0] \t\tAn optional spread time that will be used to randomize the function executions times\n * @return \t\t{Function} \t\t       \t\tA function that you can use to clear the timeout before it ends by itself\n *\n * @example \t\tjs\n * import setRecursiveTimeout from '@coffeekraken/sugar/js/function/setRecursiveTimeout';\n * setRecursiveTimeout(() => {\n * \t\t// I will be executed 10 times\n * }, 1000, 10000);\n *\n * @author \t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function setRecursiveTimeout(fn, timeout, duration, spread = 0) {\n  let idx = 0;\n  let currentDuration = 0;\n  let timeoutFn = null;\n\n  (function tick() {\n    // call the function\n    fn(idx);\n\n    // update current duration\n    currentDuration += timeout;\n    idx++;\n\n    // recursive call until end\n    if (!duration || duration === -1 || currentDuration < duration) {\n      const spreadValue = -spread + Math.round(Math.random(spread * 2));\n      timeoutFn = setTimeout(tick, timeout + spreadValue);\n    }\n  })();\n\n  // return the clear function to be able to stop the timeout\n  return function () {\n    // clear the timeout\n    clearTimeout(timeoutFn);\n  };\n}\n"
    ]
}
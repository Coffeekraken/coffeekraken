{
    "version": 3,
    "sources": [
        "standardizeJson.js"
    ],
    "names": [
        "standardizeJson",
        "json",
        "author",
        "Array",
        "isArray",
        "map",
        "string",
        "contributors",
        "__parsecontributorsString"
    ],
    "mappings": ";;;;;;;AAAA;;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8Be,SAASA,eAAT,CAAyBC,IAAzB,EAA+B;AAC5C;AACA,MAAIA,IAAI,CAACC,MAAL,IAAe,OAAOD,IAAI,CAACC,MAAZ,KAAuB,QAA1C,EAAoD;AAClDD,IAAAA,IAAI,CAACC,MAAL,GAAc,gCAAoBD,IAAI,CAACC,MAAzB,CAAd;AACD,GAFD,MAEO,IAAID,IAAI,CAACC,MAAL,IAAeC,KAAK,CAACC,OAAN,CAAcH,IAAI,CAACC,MAAnB,CAAnB,EAA+C;AACpDD,IAAAA,IAAI,CAACC,MAAL,GAAcD,IAAI,CAACC,MAAL,CAAYG,GAAZ,CAAiBC,MAAD,IAAY;AACxC,UAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,eAAO,gCAAoBA,MAApB,CAAP;AACD;;AACD,aAAOA,MAAP;AACD,KALa,CAAd;AAMD,GAX2C,CAa5C;;;AACA,MAAIL,IAAI,CAACM,YAAL,IAAqB,OAAON,IAAI,CAACM,YAAZ,KAA6B,QAAtD,EAAgE;AAC9DN,IAAAA,IAAI,CAACM,YAAL,GAAoBC,yBAAyB,CAACP,IAAI,CAACM,YAAN,CAA7C;AACD,GAFD,MAEO,IAAIN,IAAI,CAACM,YAAL,IAAqBJ,KAAK,CAACC,OAAN,CAAcH,IAAI,CAACM,YAAnB,CAAzB,EAA2D;AAChEN,IAAAA,IAAI,CAACM,YAAL,GAAoBN,IAAI,CAACM,YAAL,CAAkBF,GAAlB,CAAuBC,MAAD,IAAY;AACpD,UAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,eAAO,gCAAoBA,MAApB,CAAP;AACD;;AACD,aAAOA,MAAP;AACD,KALmB,CAApB;AAMD;;AAED,SAAOL,IAAP;AACD",
    "sourcesContent": [
        "import __parseAuthorString from './parseAuthorString';\n\n/**\n * @name            standardizeJson\n * @namespace       sugar.js.npm\n * @type            Function\n *\n * This function simply take a package.json JSON formatted object and standardize\n * some fields like the \"author\" one to be sure it is an object at the end,\n * the \"contributors\" array the same way as the \"author\" one, etc... Here's the list\n * of processed actions:\n * 1. Transform the string version of the \"author\" field into an object with the properties \"name\", \"email\" and \"url\"\n * 2. Transform the string version of the \"contributors\" field into an object with the properties \"name\", \"email\" and \"url\"\n *\n * @param       {Object}        json        The json to process\n * @return      {Object}                    The standardized json\n *\n * @example       js\n * import standardizeJson from '@coffeekraken/sugar/js/npm/standardizeJson';\n * standardizeJson({\n *    \"author\": \"Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\"\n * }); // => {\n *    \"author\": {\n *      \"name\": \"Olivier Bossel\",\n *      \"email\": \"olivier.bossel@gmail.com\",\n *      \"url\": \"https://olivierbossel.com\"\n *    }\n * }\n *\n * @since       2.0.0\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function standardizeJson(json) {\n  // author\n  if (json.author && typeof json.author === 'string') {\n    json.author = __parseAuthorString(json.author);\n  } else if (json.author && Array.isArray(json.author)) {\n    json.author = json.author.map((string) => {\n      if (typeof string === 'string') {\n        return __parseAuthorString(string);\n      }\n      return string;\n    });\n  }\n\n  // contributors\n  if (json.contributors && typeof json.contributors === 'string') {\n    json.contributors = __parsecontributorsString(json.contributors);\n  } else if (json.contributors && Array.isArray(json.contributors)) {\n    json.contributors = json.contributors.map((string) => {\n      if (typeof string === 'string') {\n        return __parseAuthorString(string);\n      }\n      return string;\n    });\n  }\n\n  return json;\n}\n"
    ]
}
{
    "version": 3,
    "sources": [
        "SActionsStream.js"
    ],
    "names": [
        "SActionStream",
        "actions",
        "settings",
        "id",
        "cache",
        "name",
        "order",
        "before",
        "after",
        "beforeActions",
        "afterActions",
        "Object",
        "keys",
        "forEach",
        "actionName",
        "actionInstance",
        "constructor",
        "__SActionsStreamAction",
        "__SError",
        "_settings",
        "_sCache",
        "__SCache",
        "_actionsObject",
        "_currentStream",
        "stats",
        "stderr",
        "length",
        "streamObjOrArray",
        "processFn",
        "processFnArgs",
        "type",
        "resultProcessor",
        "logActionStatus",
        "logString",
        "Array",
        "isArray",
        "streamObjArray",
        "currentActionObj",
        "processed",
        "fromCache",
        "log",
        "temp",
        "group",
        "value",
        "processFnArray",
        "streamObjArrayIdx",
        "streamObj",
        "$action",
        "actionHash",
        "__sha256",
        "encrypt",
        "instance",
        "cachedStreamObj",
        "get",
        "$fromCache",
        "processFnArrayIdx",
        "processFnResult",
        "bind",
        "Promise",
        "match",
        "_saveInCache",
        "e",
        "push",
        "stack",
        "j",
        "currentStreamObj",
        "_applyFnOnStreamObj",
        "args",
        "resolve",
        "res",
        "run",
        "fnResult",
        "__SPromise",
        "pipe",
        "promise",
        "_skipNextActions",
        "skipNextActions",
        "_registeredCallbacks",
        "callbackObj",
        "action",
        "when",
        "callback",
        "canceled",
        "hasCurrentStreamErrors",
        "flat",
        "filter",
        "undefined",
        "hash",
        "set",
        "assign",
        "sourcesCount",
        "stdout",
        "startTime",
        "Date",
        "now",
        "endTime",
        "reject",
        "trigger",
        "cancel",
        "startString",
        "actionsOrderedNames",
        "join",
        "i",
        "actionSettings",
        "skipMessage",
        "skipAction",
        "indexOf",
        "prototype",
        "on",
        "_handleStreamObjArray",
        "interface",
        "issuesString",
        "apply",
        "return",
        "throw",
        "duration",
        "errorString",
        "successString",
        "error",
        "completeString",
        "arg"
    ],
    "mappings": "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",
    "sourcesContent": [
        "import __clone from '../object/clone';\nimport __parseHtml from '../console/parseHtml';\nimport __SError from '../error/SError';\nimport __isClass from '../is/class';\nimport __deepMerge from '../object/deepMerge';\nimport __SPromise from '../promise/SPromise';\nimport __toString from '../string/toString';\nimport __trimLines from '../string/trimLines';\nimport __uniqid from '../string/uniqid';\nimport __convert from '../time/convert';\nimport __wait from '../time/wait';\nimport __SActionsStreamAction from './SActionsStreamAction';\nimport __SCache from '../cache/SCache';\nimport __sha256 from '../crypt/sha256';\n\n/**\n * @name          SActionStream\n * @namespace           sugar.js.stream\n * @type          Class\n * @extends       SPromise\n *\n * This class represent the base of a actions stream.\n * An action stream if simply some functions that are called one after the other\n * and that pass to each other some value(s) on which to work.\n * Here's all the \"events\" that you can subscribe on the SActionStream instance, or on the returned SPromise when calling the \"start\" method:\n * - start: Triggered when the overall actions stream starts\n * - {actionName}.start: Triggered when the specified action starts\n * - {actionName}.reject: Triggered when the specified action has been rejected\n * - {actionName}.complete: Triggered when the specified action has been completed\n * - complete: Triggered when the overall actions stream has been completed\n * - resolve: Trigerred when the overall actions stream has been completed\n * - log: Triggered when a log message has been set\n * - cancel: Triggered when the stream has been canceled using the \"cancel\" method of the returned SPromise when calling the \"start\" method\n *\n * @param       {Object}        actions         An object of actions to execute one after the other. The object has to be formatted like ```{ actionName: actionFunction }```\n * @param       {Object}        [settings={}]   A settings object to configure your instance:\n * - name (null) {String}: A simple name for your stream that will be used in the logs\n * - order (null) {Array}: An array of action names that specify the order you want to execute them. If not specified, take the actions object properties order.\n * - actions ({}) {Object}: An object formated like ```{ actionName: settings }``` that contain specific settings for each actions and that will be passed as a second parameter to each actions.\n *\n * @since     2.0.0\n * @author \tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default class SActionStream extends __SPromise {\n  /**\n   * @name            _actionsObj\n   * @type            Object\n   * @private\n   *\n   * Store the actions object\n   *\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _actionsObject = {};\n\n  /**\n   * @name            _currentStream\n   * @type            SPromise\n   * @private\n   *\n   * Store the current running stream. Here's the object structure:\n   * {\n   *    promise: Store the SPromise instance for the stream\n   *    currentActionObj: {\n   *       name: Store the name of the current action executing in the stream\n   *       promise: Store the promise returned from the ```run``` action instance method\n   *    }\n   * }\n   *\n   * @since         2.0.0\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _currentStream = null;\n\n  /**\n   * @name            constructor\n   * @type            Function\n   * @constructor\n   *\n   * Constructor\n   *\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(actions, settings = {}) {\n    // init SPromise\n    super(\n      __deepMerge(\n        {\n          id: __uniqid(),\n          cache: false,\n          name: null,\n          order: null,\n          before: [],\n          after: [],\n          beforeActions: {},\n          afterActions: {},\n          actions: {}\n        },\n        settings\n      )\n    );\n\n    // check the actions\n    Object.keys(actions).forEach((actionName) => {\n      const actionInstance = actions[actionName];\n      if (\n        typeof actionInstance === 'function' ||\n        (__isClass(actionInstance) &&\n          actionInstance.constructor.name === 'SActionsStreamAction') ||\n        actionInstance instanceof __SActionsStreamAction\n      ) {\n      } else {\n        throw new __SError(\n          __parseHtml(\n            `The value passed for the \"<yellow>${actionName}</yellow>\" action has to be either a simple function or an \"<green>SActionsStreamAction</green>\" instance. You have passed a \"<red>${typeof actionInstance}</red>\"...`\n          )\n        );\n      }\n    });\n\n    // init a SCache instance if needed\n    if (this._settings.cache) {\n      this._sCache = new __SCache(\n        settings.id,\n        settings.cache === true ? {} : settings.cache\n      );\n    }\n\n    // save the actions\n    this._actionsObject = actions;\n  }\n\n  /**\n   * @name          hasCurrentStreamErrors\n   * @type          Function\n   *\n   * This method return true or false depending if the current stream has some errors or not\n   *\n   * @return      {Boolean}           true if not errors, false if not\n   *\n   * @since       2.0.0\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  hasCurrentStreamErrors() {\n    return this._currentStream && this._currentStream.stats.stderr.length;\n  }\n\n  async _applyFnOnStreamObj(streamObjOrArray, processFn, settings = {}) {\n    settings = __deepMerge(\n      {\n        processFnArgs: [],\n        type: 'main',\n        resultProcessor: null\n      },\n      settings\n    );\n\n    const logActionStatus = () => {\n      let logString = `Processing <cyan>${\n        Array.isArray(this._currentStream.streamObjArray)\n          ? this._currentStream.streamObjArray.length\n          : 1\n      }</cyan> source${\n        Array.isArray(this._currentStream.streamObjArray)\n          ? this._currentStream.streamObjArray.length > 1\n            ? 's'\n            : ''\n          : ''\n      } | Processed <green>${\n        this._currentStream.currentActionObj.processed\n      }</green>`;\n      if (this._settings.cache) {\n        logString += ` | From cache: <yellow>${this._currentStream.currentActionObj.fromCache}</yellow>`;\n      }\n      this.log({\n        temp: true,\n        group: this._currentStream.currentActionObj.name,\n        value: logString\n      });\n    };\n\n    try {\n      let processFnArray = !Array.isArray(processFn) ? [processFn] : processFn;\n      const isArray = Array.isArray(streamObjOrArray);\n      let streamObjArray = streamObjOrArray;\n      if (!isArray) streamObjArray = [streamObjArray];\n      for (let streamObjArrayIdx in streamObjArray) {\n        let streamObj = streamObjArray[streamObjArrayIdx];\n        // if (streamObj.$fromCache) return;\n\n        // set the current action in the streamObj\n        streamObj.$action = settings.type;\n\n        // calculate the hash of this particular action\n        const actionHash = __sha256.encrypt(\n          __toString({\n            ...__clone(streamObj),\n            settings: this._settings\n          })\n        );\n\n        // get the value from the cache if available\n        if (\n          (this._currentStream.currentActionObj.instance &&\n            this._currentStream.currentActionObj.instance.settings.cache &&\n            this._sCache) ||\n          (this._sCache && !this._currentStream.currentActionObj.instance)\n        ) {\n          const cachedStreamObj = await this._sCache.get(actionHash);\n          if (cachedStreamObj) {\n            streamObj = cachedStreamObj;\n            streamObj.$fromCache = true;\n            streamObjArray[streamObjArrayIdx] = streamObj;\n            this._currentStream.currentActionObj.fromCache++;\n            logActionStatus();\n            return;\n          }\n        }\n\n        const processFnArgs = [streamObj, ...settings.processFnArgs];\n\n        for (let processFnArrayIdx in processFnArray) {\n          const processFn = processFnArray[processFnArrayIdx];\n          let processFnResult = processFn(...processFnArgs);\n          if (settings.resultProcessor)\n            processFnResult = settings.resultProcessor.bind(this)(\n              processFnResult\n            );\n          if (processFnResult instanceof Promise) {\n            streamObj = await processFnResult;\n          } else {\n            streamObj = processFnResult;\n          }\n        }\n\n        streamObjArray[streamObjArrayIdx] = streamObj;\n\n        if (settings.type.match(/.*\\.main$/)) {\n          this._currentStream.currentActionObj.processed++;\n          logActionStatus();\n        }\n\n        // save in cache\n        if (this._settings.cache)\n          await this._saveInCache(actionHash, streamObj);\n      }\n\n      if (isArray) return streamObjArray;\n      return streamObjArray[0];\n    } catch (e) {\n      if (typeof e === 'object') {\n        this._currentStream.currentActionObj.stats.stderr.push(__toString(e));\n        this._currentStream.stats.stderr.push(__toString(e));\n      } else if (typeof e === 'string') {\n        this._currentStream.currentActionObj.stats.stderr.push(e);\n        this._currentStream.stats.stderr.push(e);\n      }\n    }\n  }\n\n  async _handleStreamObjArray() {\n    let stack = this._currentStream.streamObjArray;\n\n    for (let j = 0; j < stack.length; j++) {\n      let currentStreamObj = stack[j];\n      if (currentStreamObj.$fromCache) {\n        logActionStatus();\n        continue;\n      }\n\n      if (\n        this._currentStream.settings.beforeActions &&\n        this._currentStream.settings.beforeActions[\n          this._currentStream.currentActionObj.name\n        ]\n      ) {\n        currentStreamObj = await this._applyFnOnStreamObj(\n          currentStreamObj,\n          this._currentStream.settings.beforeActions[\n            this._currentStream.currentActionObj.name\n          ],\n          {\n            type: `${this._currentStream.currentActionObj.name}.before`\n          }\n        );\n      }\n\n      // call the action and pass it the current stream object\n      currentStreamObj = await this._applyFnOnStreamObj(\n        currentStreamObj,\n        (...args) => {\n          return new Promise(async (resolve) => {\n            const res = await this._currentStream.currentActionObj.instance.run(\n              ...args\n            );\n            return resolve(res);\n          });\n        },\n        {\n          type: `${this._currentStream.currentActionObj.name}.main`,\n          processFnArgs: [\n            this._currentStream.currentActionObj.instance.settings\n          ],\n          resultProcessor: (fnResult) => {\n            if (fnResult instanceof Promise) {\n              __SPromise.pipe(fnResult, this._currentStream.promise);\n              __SPromise.pipe(fnResult, this);\n              this._currentStream.currentActionObj.promise = fnResult;\n            }\n            return fnResult;\n          }\n        }\n      );\n\n      if (\n        this._currentStream.currentActionObj.instance &&\n        this._currentStream.currentActionObj.instance._skipNextActions\n      ) {\n        this._currentStream.stats.skipNextActions = this._currentStream.currentActionObj.instance._skipNextActions;\n      }\n\n      // check if an \"afterCallback\" callback has been passed in the streamObj\n      if (\n        this._currentStream.currentActionObj.instance &&\n        this._currentStream.currentActionObj.instance._registeredCallbacks &&\n        this._currentStream.currentActionObj.instance._registeredCallbacks\n          .length\n      ) {\n        this._currentStream.currentActionObj.instance._registeredCallbacks.forEach(\n          (callbackObj) => {\n            if (!callbackObj.action) {\n              if (callbackObj.when === 'after') {\n                this._currentStream.settings.after = [\n                  ...this._currentStream.settings.after,\n                  callbackObj.callback\n                ];\n              } else {\n                this._currentStream.settings.before = [\n                  ...this._currentStream.settings.before,\n                  callbackObj.callback\n                ];\n              }\n            } else {\n              if (callbackObj.when === 'before') {\n                if (\n                  !this._currentStream.settings.beforeActions[\n                    callbackObj.action\n                  ]\n                )\n                  this._currentStream.settings.beforeActions[\n                    callbackObj.action\n                  ] = [];\n                else if (\n                  !Array.isArray(\n                    this._currentStream.settings.beforeActions[\n                      callbackObj.action\n                    ]\n                  )\n                )\n                  this._currentStream.settings.beforeActions[\n                    callbackObj.action\n                  ] = [\n                    this._currentStream.settings.beforeActions[\n                      callbackObj.action\n                    ]\n                  ];\n                this._currentStream.settings.beforeActions[\n                  callbackObj.action\n                ].push(callbackObj.callback);\n              } else {\n                if (\n                  !this._currentStream.settings.afterActions[callbackObj.action]\n                )\n                  this._currentStream.settings.afterActions[\n                    callbackObj.action\n                  ] = [];\n                else if (\n                  !Array.isArray(\n                    this._currentStream.settings.afterActions[\n                      callbackObj.action\n                    ]\n                  )\n                )\n                  this._currentStream.settings.afterActions[\n                    callbackObj.action\n                  ] = [\n                    this._currentStream.settings.afterActions[\n                      callbackObj.action\n                    ]\n                  ];\n                this._currentStream.settings.afterActions[\n                  callbackObj.action\n                ].push(callbackObj.callback);\n              }\n            }\n          }\n        );\n      }\n\n      if (\n        this._currentStream.settings.afterActions &&\n        this._currentStream.settings.afterActions[\n          this._currentStream.currentActionObj.name\n        ]\n      ) {\n        currentStreamObj = await this._applyFnOnStreamObj(\n          currentStreamObj,\n          this._currentStream.settings.afterActions[\n            this._currentStream.currentActionObj.name\n          ],\n          {\n            type: `${this._currentStream.currentActionObj.name}.after`\n          }\n        );\n      }\n\n      // replace the streamObj with the new one in the stack\n      stack[j] = currentStreamObj;\n\n      if (this._currentStream.stats.canceled || this.hasCurrentStreamErrors()) {\n        this._currentStream.streamObjArray = stack;\n        return this._currentStream.streamObjArray;\n      }\n    }\n\n    // flatten the stack\n    stack = stack.flat(1);\n\n    // filter the streamObjects that comes from the cache\n    stack = stack.filter((streamObj) => {\n      return streamObj.$fromCache === undefined;\n    });\n\n    this._currentStream.streamObjArray = stack;\n    return this._currentStream.streamObjArray;\n  }\n\n  /**\n   * @name            _saveInCache\n   * @type            Function\n   * @private\n   *\n   * This method simmply take the stream object and save it into the cache\n   *\n   * @param       {Object}        streamObj         The stream object to save into cache\n   * @return      {Promise}                         A promise resolved when the streamObj has been saved\n   *\n   * @since       2.0.0\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  async _saveInCache(hash, streamObj) {\n    // save in cache\n    if (\n      (this._currentStream.currentActionObj.instance &&\n        this._currentStream.currentActionObj.instance.settings.cache &&\n        this._sCache) ||\n      (this._sCache && !this._currentStream.currentActionObj.instance)\n    ) {\n      await this._sCache.set(hash, streamObj);\n    }\n    return true;\n  }\n\n  /**\n   * @name          start\n   * @type          Function\n   * @async\n   *\n   * This method launch the action stream and return an SPromise instance for this particular stream \"process\"\n   *\n   * @param       {Object}          [streamObj={}]           An object that will be passed along all the actions and that can be updated at every steps. Make sure that your current action return what the next one need to work correctly...\n   * @param       {Object}          [settings={}]           An object of settings to override the instance level one if wanted\n   * @return      {SPromise}                                An SPromise instance for this particular stream \"process\" on which you can subscribe to the same \"events\" that on the SActionsStrean instance.\n   *\n   * @example         js\n   * const streamPromise = myStream.start();\n   * streamPromise.on('step', (streamObj) => {\n   *    // do something\n   * }).on('resolve', (resultObj) => {\n   *    // do something\n   * });\n   *\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  start(streamObj = {}, settings = {}) {\n    settings = __deepMerge(Object.assign({}, this._settings), settings);\n\n    let currentStreamObj = streamObj;\n\n    this._currentStream = {\n      promise: null,\n      streamObjArray: Array.isArray(currentStreamObj)\n        ? currentStreamObj\n        : [currentStreamObj],\n      currentActionObj: {\n        name: null,\n        promise: null,\n        instance: null,\n        sourcesCount: 0,\n        fromCache: 0,\n        processed: 0,\n        stats: {\n          stderr: [],\n          stdout: []\n        }\n      },\n      settings,\n      stats: {\n        startTime: Date.now(),\n        endTime: null,\n        stderr: [],\n        stdout: [],\n        skipNextActions: false,\n        canceled: false,\n        actions: {}\n      }\n    };\n\n    // make sure the before, after, beforeAction and afterAction stacks are Arrays\n    if (settings.before && !Array.isArray(settings.before))\n      settings.before = [settings.before];\n    if (settings.after && !Array.isArray(settings.after))\n      settings.after = [settings.after];\n\n    this._currentStream.promise = new __SPromise(\n      async (resolve, reject, trigger, cancel) => {\n        await __wait(100); // ugly hack to check when have time...\n\n        // starting log\n        let startString = `#start Starting the stream \"<cyan>${\n          settings.name || 'unnamed'\n        }</cyan>\"`;\n        this.log({\n          value: startString\n        });\n        this.trigger('start', {});\n        trigger('start', {});\n\n        currentStreamObj = await this._applyFnOnStreamObj(\n          currentStreamObj,\n          this._settings.before,\n          {\n            type: 'before'\n          }\n        );\n\n        if (!this.hasCurrentStreamErrors()) {\n          // take the actions order array\n          const actionsOrderedNames = Array.isArray(settings.order)\n            ? settings.order\n            : Object.keys(this._actionsObject);\n          // check the order\n          actionsOrderedNames.forEach((actionName) => {\n            if (!this._actionsObject[actionName]) {\n              this._currentStream.stats.stderr.push(\n                __parseHtml(\n                  `You have specified the action \"<yellow>${actionName}</yellow>\" in your SActionsStream instance but it is not available. Here's the available actions: <green>${Object.keys(\n                    this._actionsObject\n                  ).join(',')}</green>`\n                )\n              );\n            }\n          });\n\n          for (let i = 0; i < actionsOrderedNames.length; i++) {\n            if (this._currentStream.canceled || this.hasCurrentStreamErrors()) {\n              // this.log('stop');\n              break;\n            }\n\n            const actionName = actionsOrderedNames[i];\n            let actionInstance;\n            let actionSettings = settings.actions\n              ? settings.actions[actionName] || {}\n              : {};\n\n            // make sure we have a \"name\" property in the actionSettings object\n            if (!actionSettings.name) {\n              actionSettings.name = actionName;\n            }\n\n            let skipMessage = null,\n              skipAction = 'break';\n            if (this._currentStream.stats.skipNextActions === true) {\n              skipMessage = `#warning Skipping all the next actions after the \"<cyan>${\n                actionsOrderedNames[i - 1]\n              }</cyan>\" one...`;\n              skipAction = 'break';\n            } else if (\n              Array.isArray(this._currentStream.stats.skipNextActions) &&\n              this._currentStream.stats.skipNextActions.indexOf(actionName) !==\n                -1\n            ) {\n              skipMessage = `#warning Skipping the \"<yellow>${actionName}</yellow>\" action...`;\n              skipAction = 'continue';\n            } else if (\n              typeof this._currentStream.stats.skipNextActions === 'number' &&\n              this._currentStream.stats.skipNextActions > 0\n            ) {\n              this._currentStream.stats.skipNextActions--;\n              skipMessage = `#warning Skipping the \"<yellow>${actionName}</yellow>\" action. Reamaining action(s) to skip: <cyan>${this._currentStream.stats.skipNextActions}</cyan>...`;\n              skipAction = 'continue';\n            }\n\n            if (skipMessage) {\n              this.log({\n                value: skipMessage\n              });\n              if (skipAction === 'continue') continue;\n              else break;\n            }\n\n            // handle passed action that can be either a simple function, a extended SActionsStreamAction class or an instance of the SActionsStreamAction class\n            if (\n              __isClass(this._actionsObject[actionName]) &&\n              this._actionsObject[actionName].prototype instanceof\n                __SActionsStreamAction\n            ) {\n              actionInstance = new this._actionsObject[actionName](\n                actionSettings\n              );\n            } else {\n              this._currentStream.stats.stderr.push(\n                `Your action \"<yellow>${actionName}</yellow>\" has to be a class extending the <cyan>SActionsStreamAction</cyan> one...`\n              );\n              break;\n            }\n\n            this._currentStream.currentActionObj = {\n              name: actionName,\n              sourcesCount: this._currentStream.streamObjArray.length,\n              processed: 0,\n              fromCache: 0,\n              instance: actionInstance,\n              stats: {\n                action: actionName,\n                startTime: Date.now(),\n                stderr: [],\n                stdout: []\n              }\n            };\n\n            if (this._currentStream.currentActionObj.instance) {\n              this._currentStream.currentActionObj.instance.on(\n                'reject',\n                (value) => {\n                  this.trigger(\n                    `${this._currentStream.currentActionObj.name}.reject`,\n                    value\n                  );\n                  trigger(\n                    `${this._currentStream.currentActionObj.name}.reject`,\n                    value\n                  );\n                  cancel(value);\n                }\n              );\n              actionSettings = __deepMerge(\n                this._currentStream.currentActionObj.instance._settings,\n                actionSettings\n              );\n            }\n\n            // trigger some \"start\" events\n            this.trigger(\n              `${this._currentStream.currentActionObj.name}.start`,\n              Object.assign({}, this._currentStream.currentActionObj)\n            );\n            trigger(\n              `${this._currentStream.currentActionObj.name}.start`,\n              Object.assign({}, this._currentStream.currentActionObj)\n            );\n            const startString = `#start Starting the action \"<yellow>${this._currentStream.currentActionObj.name}</yellow>\" on <magenta>${this._currentStream.currentActionObj.sourcesCount}</magenta> sources`;\n            this.log({\n              group: this._currentStream.currentActionObj.name,\n              value: startString\n            });\n\n            await this._handleStreamObjArray();\n\n            if (this.hasCurrentStreamErrors()) {\n              break;\n            }\n\n            if (this.constructor.interface) {\n              const issuesString = this.constructor.interface.apply(\n                this._currentStream.streamObjArray[0],\n                { return: 'string', throw: false }\n              );\n              if (issuesString !== true) {\n                this._currentStream.stats.stderr.push(issuesString);\n                this._currentStream.currentActionObj.stats.stderr.push(\n                  issuesString\n                );\n              }\n            }\n\n            // complete the actionObj\n            this._currentStream.currentActionObj.stats = {\n              ...this._currentStream.currentActionObj.stats,\n              endTime: Date.now(),\n              duration:\n                Date.now() -\n                this._currentStream.currentActionObj.stats.startTime\n            };\n\n            // save the result into the overall actions stats object\n            this._currentStream.stats.actions[\n              this._currentStream.currentActionObj.name\n            ] = Object.assign({}, this._currentStream.currentActionObj);\n\n            // trigger an \"event\"\n            this.trigger(\n              `${this._currentStream.currentActionObj.name}.complete`,\n              Object.assign({}, this._currentStream.currentActionObj)\n            );\n            trigger(\n              `${this._currentStream.currentActionObj.name}.complete`,\n              Object.assign({}, this._currentStream.currentActionObj)\n            );\n\n            if (this._currentStream.currentActionObj.stats.stderr.length) {\n              const errorString = `#error <red>Something went wrong during the </red>\"<yellow>${this._currentStream.currentActionObj.name}</yellow>\"<red> action...</red>`;\n              this._currentStream.currentActionObj.stats.stderr.push(\n                errorString\n              );\n              this._currentStream.stats.stderr.push(errorString);\n              break;\n            } else {\n              const successString = `#success The action \"<yellow>${\n                this._currentStream.currentActionObj.name\n              }</yellow>\" has finished <green>successfully</green> on <magenta>${\n                this._currentStream.currentActionObj.sourcesCount\n              }</magenta> sources in <yellow>${__convert(\n                this._currentStream.currentActionObj.stats.duration,\n                's'\n              )}s</yellow>`;\n              this._currentStream.currentActionObj.stats.stdout.push(\n                successString\n              );\n              this.log({\n                group: this._currentStream.currentActionObj.name,\n                value: successString\n              });\n            }\n          }\n        }\n\n        currentStreamObj = await this._applyFnOnStreamObj(\n          currentStreamObj,\n          this._settings.after,\n          {\n            type: 'after'\n          }\n        );\n\n        if (this.constructor.interface) {\n          const issuesString = this.constructor.interface.apply(\n            this._currentStream.streamObjArray[0],\n            { return: 'string', throw: false }\n          );\n          if (issuesString !== true) {\n            this._currentStream.stats.stderr.push(issuesString);\n          }\n        }\n\n        // complete the overall stats\n        this._currentStream.stats = {\n          ...this._currentStream.stats,\n          streamObj: this._currentStream.streamObjArray,\n          endTime: Date.now(),\n          duration: Date.now() - this._currentStream.stats.startTime\n        };\n\n        if (\n          this.hasCurrentStreamErrors() ||\n          this._currentStream.stats.canceled\n        ) {\n          const errorString = `The stream \"<cyan>${\n            settings.name || 'unnamed'\n          }</cyan>\" has had some issues...`;\n          this._currentStream.stats.stdout.push(errorString);\n          this.log({\n            error: true,\n            value: errorString\n          });\n          this.log({\n            error: true,\n            value: __trimLines(this._currentStream.stats.stderr.join('\\n'))\n          });\n\n          this.trigger('reject', this._currentStream.stats);\n          trigger('reject', this._currentStream.stats);\n        } else {\n          const completeString = `#success The stream \"<cyan>${\n            this._currentStream.settings.name || 'unnamed'\n          }</cyan>\" has finished <green>successfully</green> in <yellow>${__convert(\n            this._currentStream.stats.duration,\n            's'\n          )}s</yellow>`;\n          this._currentStream.stats.stdout.push(completeString);\n\n          this.log({\n            value: completeString\n          });\n\n          // resolve this stream process\n          this.trigger('success', {});\n          trigger('success', {});\n          resolve(this._currentStream.stats);\n        }\n      },\n      {\n        id: this._settings.id\n      }\n    );\n\n    return this._currentStream.promise;\n  }\n\n  /**\n   * @name                  log\n   * @type                  Function\n   *\n   * THis method allows you to log something that will be passed upward through the SPromise events \"stdout\".\n   *\n   * @param       {String}          ...args             The messages to log\n   *\n   * @since         2.0.0\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  log(...args) {\n    args.forEach((arg) => {\n      if (this._currentStream && this._currentStream.promise) {\n        this._currentStream.promise.trigger('log', arg);\n      }\n      this.trigger('log', arg);\n    });\n  }\n}\n"
    ]
}
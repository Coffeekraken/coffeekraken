{
    "version": 3,
    "sources": [
        "SActionsStreamAction.js"
    ],
    "names": [
        "SActionStreamAction",
        "settings",
        "name",
        "id",
        "cache",
        "_settings",
        "constructor",
        "toLowerCase",
        "interface",
        "setTimeout",
        "definitionObj",
        "streamObj",
        "applyAndComplete",
        "what",
        "_skipNextActions",
        "callback",
        "when",
        "action",
        "_registeredCallbacks",
        "push",
        "promiseFn",
        "checkStreamObject",
        "_currentPromise",
        "__SPromise",
        "message",
        "trigger",
        "value",
        "obj"
    ],
    "mappings": "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",
    "sourcesContent": [
        "import __deepMerge from '../object/deepMerge';\nimport __SPromise from '../promise/SPromise';\nimport __uniqid from '../string/uniqid';\nimport __validateObject from '../validation/object/validateObject';\nimport __validateDefinitionObject from '../validation/object/validateDefinitionObject';\n\n/**\n * @name          SActionStreamAction\n * @namespace           sugar.js.stream\n * @type          Class\n * @extends       SPromise\n *\n * This class represent the base of a actions stream action.\n * An action stream action represent an action that you can register in the SActionsStream instance and\n * prodive you some usefull features like \"trigger\" some events, set/get data from the streamObj, defining some required streamObj properties\n * to work with, etc...\n *\n * @param       {Object}        actions         An object of actions to execute one after the other. The object has to be formatted like ```{ actionName: actionFunction }```\n * @param       {Object}        [settings={}]   A settings object to configure your instance:\n * - name (null) {String}: A simple name for your stream that will be used in the logs\n * - order (null) {Array}: An array of action names that specify the order you want to execute them. If not specified, take the actions object properties order.\n * - actions ({}) {Object}: An object formated like ```{ actionName: settings }``` that contain specific settings for each actions and that will be passed as a second parameter to each actions.\n * - cache (true) {Boolean}: Specify if this action is aware of the cache or not\n *\n * @since     2.0.0\n * @author \tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default class SActionStreamAction extends __SPromise {\n  /**\n   * @name            _skipNextActions\n   * @type            Number|Array<String>\n   * @private\n   *\n   * Store the next actions you want to skip\n   *\n   * @since           2.0.0\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _skipNextActions = null;\n\n  /**\n   * @name            _currentPromise\n   * @type            SPromise\n   * @private\n   *\n   * Store the current SPromise instance of the current running action instance\n   *\n   * @since         2.0.0\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _currentPromise = null;\n\n  /**\n   * @name            _registeredCallbacks\n   * @type            Array<Object>\n   * @private\n   *\n   * Store the registered callbaks\n   *\n   * @since           2.0.0\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  _registeredCallbacks = [];\n\n  /**\n   * @name            constructor\n   * @type            Function\n   * @constructor\n   *\n   * Constructor\n   *\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  constructor(settings = {}) {\n    // init SPromise\n    super(\n      __deepMerge(\n        {\n          name: null,\n          id: __uniqid(),\n          cache: true\n        },\n        settings\n      )\n    );\n    if (!this._settings.id)\n      this._settings.id = this.constructor.name.toLowerCase();\n\n    // check the definition object\n    if (this.constructor.interface) {\n      setTimeout(() => {\n        __validateDefinitionObject(this.constructor.interface.definitionObj, {\n          name: `${this.constructor.name}.definitionObj`\n        });\n      });\n    }\n  }\n\n  get settings() {\n    return this._settings;\n  }\n\n  /**\n   * @name          checkStreamObject\n   * @type          Function\n   * @async\n   *\n   * This method take the streamObj object passed to the \"run\" method and check it depending on the definitionObj\n   * specified in the static definitionObj property.\n   *\n   * @param       {Object}        streamObj         The streamObj to check\n   *\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  checkStreamObject(streamObj) {\n    if (!this.constructor.interface) return true;\n\n    // validate the streamObj depending on the static definitionObj property\n    if (this.constructor.interface) {\n      streamObj = this.constructor.interface.applyAndComplete(streamObj);\n    }\n  }\n\n  /**\n   * @name          skipNextActions\n   * @type          Function\n   *\n   * This method allows you to tell the SActionStream class that you want to skip\n   * the next actions. If you don't specify anything, it means that you want to skip\n   * ALL the next actions. You can pass a number that mean that you want to skip x next action(s),\n   * or an array with the actions names that you want to skip.\n   *\n   * @param       {Number|Array<String>|Boolean}        [what=true]        Specify what you want to skip. Can be a number or an array of actions names to skip\n   *\n   * @since       2.0.0\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  skipNextActions(what = true) {\n    this._skipNextActions = what;\n  }\n\n  /**\n   * @name          registerCallback\n   * @type          Function\n   *\n   * This method allows you to register some callbacks during the stream action process.\n   * You can specify when you want to register this callback like \"before\" or \"after\", and specify if\n   * it's before/after the entire stream process or a particular action.\n   *\n   * @param       {Function}        callback          The callback function to call\n   * @param       {String}          [when='after']    When you want to call this callback. Can be \"before\" or \"after\"\n   * @param       {String}          [action=null]     Specify the reference action. If not set, that's mean that the entire stream process is the reference\n   *\n   * @since       2.0.0\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  registerCallback(callback, when = 'after', action = null) {\n    this._registeredCallbacks.push({\n      callback,\n      when,\n      action\n    });\n  }\n\n  /**\n   * @name          run\n   * @type          Function\n   * @async\n   *\n   * This method is the one that has to be overrided.\n   * It will be called to run the actions on want on the streamObj passed as parameter\n   * and MUST return a Promise instance that you need to resolve at the end of your processed\n   * and pass it the updated streamObject.\n   *\n   * @param       {Object}        streamObj         The streamObj to work with\n   * @param       {Object}        [settings=this._settings]     A settings object specific to this action. It will be equal to the passed instance settings and deeply merged with the settings object you have setted in the \"actions.{actionName}\" oject of the SActionsStream instance\n   * @return      {Promise}                         A simple promise that you have to resolve at the end of your process with the updates streamObj\n   *\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  run(streamObj, promiseFn) {\n    this.checkStreamObject(streamObj);\n    this._currentPromise = new __SPromise(promiseFn, {\n      id: this._settings.id\n    });\n    return this._currentPromise;\n  }\n\n  /**\n   * @name          error\n   * @type          Function\n   *\n   * This method allows you to error a message that will be catched by the parent manager class\n   *\n   * @param       {String}        message           The message you want to error\n   *\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  error(message) {\n    // this.trigger('error', {\n    //   value: `<red>✚</red> ${message}`\n    // });\n    // if (!this._currentPromise) return;\n    // this._currentPromise.trigger('log', {\n    //   value: `<red>✚</red> ${message}`\n    // });\n  }\n\n  /**\n   * @name          warn\n   * @type          Function\n   *\n   * This method allows you to warn a message that will be catched by the parent manager class\n   *\n   * @param       {String}        message           The message you want to warn\n   *\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  warn(message) {\n    this.trigger('log', {\n      value: `<yellow>⚠</yellow> ${message}`\n    });\n    if (!this._currentPromise) return;\n    this._currentPromise.trigger('log', {\n      value: `<yellow>⚠</yellow> ${message}`\n    });\n  }\n\n  /**\n   * @name          log\n   * @type          Function\n   *\n   * This method allows you to log a message that will be catched by the parent manager class\n   *\n   * @param       {String}        message           The message you want to log\n   *\n   * @author \tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n   */\n  log(obj) {\n    setTimeout(() => {\n      if (typeof obj === 'string') {\n        this.trigger('log', {\n          value: obj\n        });\n        if (!this._currentPromise) return;\n        this._currentPromise.trigger('log', {\n          value: obj\n        });\n      } else {\n        this.trigger('log', obj);\n        if (!this._currentPromise) return;\n        this._currentPromise.trigger('log', obj);\n      }\n    });\n  }\n}\n"
    ]
}
{
    "version": 3,
    "sources": [
        "extractSame.js"
    ],
    "names": [
        "extractSame",
        "string1",
        "string2",
        "multiple",
        "extractedArray",
        "chars",
        "split",
        "chars2",
        "i",
        "length",
        "char",
        "char2",
        "push"
    ],
    "mappings": ";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;AAoBe,SAASA,WAAT,CAAqBC,OAArB,EAA8BC,OAA9B,EAAuCC,QAAvC,EAAyD;AAAA,MAAlBA,QAAkB;AAAlBA,IAAAA,QAAkB,GAAP,KAAO;AAAA;;AACtE;AACA,MAAMC,cAAc,GAAG,CAAC,EAAD,CAAvB;AACA,MAAMC,KAAK,GAAGJ,OAAO,CAACK,KAAR,CAAc,EAAd,CAAd;AACA,MAAMC,MAAM,GAAGL,OAAO,CAACI,KAAR,CAAc,EAAd,CAAf;;AACA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAME,IAAI,GAAGL,KAAK,CAACG,CAAD,CAAlB;AACA,QAAMG,KAAK,GAAGJ,MAAM,CAACC,CAAD,CAApB;AACA,QAAIA,CAAC,GAAGD,MAAM,CAACE,MAAP,GAAgB,CAAxB,EAA2B;;AAC3B,QAAIC,IAAI,KAAKC,KAAb,EAAoB;AAClBP,MAAAA,cAAc,CAACA,cAAc,CAACK,MAAf,GAAwB,CAAzB,CAAd,IAA6CC,IAA7C;AACD,KAFD,MAEO,IAAIP,QAAJ,EAAc;AACnB,UAAIC,cAAc,CAACA,cAAc,CAACK,MAAf,GAAwB,CAAzB,CAAd,KAA8C,EAAlD,EACEL,cAAc,CAACQ,IAAf,CAAoB,EAApB;AACH,KAHM,MAGA;AACL;AACD;AACF;;AACD,SAAOT,QAAQ,GAAGC,cAAH,GAAoBA,cAAc,CAAC,CAAD,CAAjD;AACD",
    "sourcesContent": [
        "/**\n * @name              extractSame\n * @namespace           sugar.js.string\n * @type              Function\n *\n * This function return you what has been find the same in the two passed string.\n * It will return you either an array of same string parts or a simple string\n * representing the first same part found.\n *\n * @param         {String}            string1         The string 1 to compare\n * @param         {String}            string2         The string 2 to compare\n * @param         {Boolean}           [multiple=false]      Specify if you want to get back multiple same string if exists as an array\n *\n * @example       js\n * import extractSame from '@coffeekraken/sugar/js/string/extractSame';\n * extractSame('Hello world', 'Hello plop'); // => 'Hello '\n *\n * @since       2.0.0\n * @author \tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function extractSame(string1, string2, multiple = false) {\n  // compare letter by letter\n  const extractedArray = [''];\n  const chars = string1.split('');\n  const chars2 = string2.split('');\n  for (let i = 0; i < chars.length; i++) {\n    const char = chars[i];\n    const char2 = chars2[i];\n    if (i > chars2.length - 1) break;\n    if (char === char2) {\n      extractedArray[extractedArray.length - 1] += char;\n    } else if (multiple) {\n      if (extractedArray[extractedArray.length - 1] !== '')\n        extractedArray.push('');\n    } else {\n      break;\n    }\n  }\n  return multiple ? extractedArray : extractedArray[0];\n}\n"
    ]
}
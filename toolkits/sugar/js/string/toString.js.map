{
    "version": 3,
    "sources": [
        "toString.js"
    ],
    "names": [
        "toString",
        "value",
        "settings",
        "beautify",
        "__SError",
        "Error",
        "name",
        "message",
        "stack",
        "Date",
        "JSON",
        "stringify",
        "undefined",
        "returnVal",
        "e"
    ],
    "mappings": ";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;AAoBe,SAASA,QAAT,CAAkBC,KAAlB,EAAyBC,QAAzB,EAAwC;AAAA,MAAfA,QAAe;AAAfA,IAAAA,QAAe,GAAJ,EAAI;AAAA;;AACrDA,EAAAA,QAAQ,GAAG,wBACT;AACEC,IAAAA,QAAQ,EAAE;AADZ,GADS,EAITD,QAJS,CAAX;;AAOA,MAAI,qBAASD,KAAT,CAAJ,EAAqB;AACnB,WAAOA,KAAP;AACD,GAFD,MAEO,IAAI,qBAASA,KAAT,CAAJ,EAAqB;AAC1B,WAAOA,KAAK,CAACD,QAAN,EAAP;AACD,GAFM,MAEA,IAAIC,KAAK,KAAK,IAAd,EAAoB;AACzB,WAAO,MAAP;AACD,GAFM,MAEA,IAAIA,KAAK,YAAYG,eAArB,EAA+B;AACpC,WAAOH,KAAK,CAACD,QAAN,EAAP;AACD,GAFM,MAEA,IAAIC,KAAK,YAAYI,KAArB,EAA4B;AACjC,QAAI,OAAOJ,KAAK,CAACD,QAAb,KAA0B,UAA9B,EAA0C;AACxC,aAAOC,KAAK,CAACD,QAAN,EAAP;AACD;;AACD,qBAAUC,KAAK,CAACK,IAAhB,wBAEIL,KAAK,CAACM,OAFV,uBAIIN,KAAK,CAACO,KAJV;AAMD,GAVM,MAUA,IACL,OAAOP,KAAP,KAAiB,QAAjB,IACA,OAAOA,KAAP,KAAiB,YADjB,IAEAA,KAAK,YAAYQ,IAFjB,IAGA,OAAOR,KAAP,KAAiB,OAJZ,EAKL;AACA,WAAOA,KAAK,CAACD,QAAN,EAAP;AACD,GAPM,MAOA,IAAI,qBAASC,KAAT,KAAmB,oBAAQA,KAAR,CAAnB,IAAqC,mBAAOA,KAAP,CAAzC,EAAwD;AAC7D,WAAOS,IAAI,CAACC,SAAL,CAAeV,KAAf,EAAsB,IAAtB,EAA4BC,QAAQ,CAACC,QAAT,GAAoB,CAApB,GAAwB,CAApD,CAAP;AACD,GAFM,MAEA,IAAI,sBAAUF,KAAV,CAAJ,EAAsB;AAC3B,QAAIA,KAAJ,EAAW,OAAO,MAAP,CAAX,KACK,OAAO,OAAP;AACN,GAHM,MAGA,IAAI,uBAAWA,KAAX,CAAJ,EAAuB;AAC5B,WAAO,KAAKA,KAAZ;AACD,GAFM,MAEA,IAAI,qBAASA,KAAT,CAAJ,EAAqB;AAC1B,WAAOA,KAAK,CAACD,QAAN,EAAP;AACD,GAFM,MAEA,IAAIC,KAAK,KAAKW,SAAd,EAAyB;AAC9B,WAAO,WAAP;AACD,GAFM,MAEA;AACL,QAAIC,SAAJ;;AACA,QAAI;AACFA,MAAAA,SAAS,GAAGH,IAAI,CAACC,SAAL,CAAeV,KAAf,EAAsB,IAAtB,EAA4BC,QAAQ,CAACC,QAAT,GAAoB,CAApB,GAAwB,CAApD,CAAZ;AACD,KAFD,CAEE,OAAOW,CAAP,EAAU;AACV,UAAI;AACFD,QAAAA,SAAS,GAAGZ,KAAK,CAACD,QAAN,EAAZ;AACD,OAFD,CAEE,OAAOc,CAAP,EAAU;AACV,eAAOb,KAAP;AACD;AACF;;AACD,WAAOY,SAAP;AACD;AACF",
    "sourcesContent": [
        "import isArray from '../is/array';\nimport isBoolean from '../is/boolean';\nimport isFunction from '../is/function';\nimport isJson from '../is/json';\nimport isNumber from '../is/number';\nimport isObject from '../is/object';\nimport isRegexp from '../is/regexp';\nimport isString from '../is/string';\nimport __deepMerge from '../object/deepMerge';\nimport __SError from '../error/SError';\nimport __stringify from '../json/stringify';\n\n/**\n * @name        toString\n * @namespace           sugar.js.string\n * @type      Function\n *\n * Convert passed value to a string\n *\n * @param    {Mixed}    value    The value to convert to string\n * @param     {Object}      [settings={}]             An object of settings to configure your toString process:\n * - beautify (false) {Boolean}: Specify if you want to beautify the output like objects, arrays, etc...\n * @return    {String}    The resulting string\n *\n * @example    js\n * import toString from '@coffeekraken/sugar/js/string/toString'\n * toString({\n * \tid:'hello'\n * }) // '{\"id\":\"hello\"}'\n *\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function toString(value, settings = {}) {\n  settings = __deepMerge(\n    {\n      beautify: false\n    },\n    settings\n  );\n\n  if (isString(value)) {\n    return value;\n  } else if (isNumber(value)) {\n    return value.toString();\n  } else if (value === null) {\n    return 'null';\n  } else if (value instanceof __SError) {\n    return value.toString();\n  } else if (value instanceof Error) {\n    if (typeof value.toString === 'function') {\n      return value.toString();\n    }\n    return `${value.name}:\n\n      ${value.message}\n\n      ${value.stack}\n    `;\n  } else if (\n    typeof value === 'symbol' ||\n    typeof value === 'typedArray' ||\n    value instanceof Date ||\n    typeof value === 'color'\n  ) {\n    return value.toString();\n  } else if (isObject(value) || isArray(value) || isJson(value)) {\n    return JSON.stringify(value, null, settings.beautify ? 4 : 0);\n  } else if (isBoolean(value)) {\n    if (value) return 'true';\n    else return 'false';\n  } else if (isFunction(value)) {\n    return '' + value;\n  } else if (isRegexp(value)) {\n    return value.toString();\n  } else if (value === undefined) {\n    return 'undefined';\n  } else {\n    let returnVal;\n    try {\n      returnVal = JSON.stringify(value, null, settings.beautify ? 4 : 0);\n    } catch (e) {\n      try {\n        returnVal = value.toString();\n      } catch (e) {\n        return value;\n      }\n    }\n    return returnVal;\n  }\n}\n"
    ]
}
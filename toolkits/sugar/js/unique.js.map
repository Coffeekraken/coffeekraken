{
    "version": 3,
    "sources": [
        "unique.js"
    ],
    "names": [
        "unique",
        "array",
        "a",
        "concat",
        "i",
        "length",
        "j",
        "splice"
    ],
    "mappings": ";;;;;;;AAAA;;;;;;;;;;;;;;;;;;AAkBe,SAASA,MAAT,CAAgBC,KAAhB,EAAuB;AACpC,MAAIC,CAAC,GAAGD,KAAK,CAACE,MAAN,EAAR;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,CAAC,CAACG,MAAtB,EAA8B,EAAED,CAAhC,EAAmC;AACjC,SAAK,IAAIE,CAAC,GAAGF,CAAC,GAAG,CAAjB,EAAoBE,CAAC,GAAGJ,CAAC,CAACG,MAA1B,EAAkC,EAAEC,CAApC,EAAuC;AACrC,UAAIJ,CAAC,CAACE,CAAD,CAAD,KAASF,CAAC,CAACI,CAAD,CAAd,EAAmBJ,CAAC,CAACK,MAAF,CAASD,CAAC,EAAV,EAAc,CAAd;AACpB;AACF;;AACD,SAAOJ,CAAP;AACD",
    "sourcesContent": [
        "/**\n * @name              unique\n * @namespace           sugar.js.array\n * @type                  Function\n *\n * This function simply take an array as parameter and return a new one\n * with all the duplicates values removed.\n *\n * @param         {Array}         array               The array to deduplicates\n * @return        {Array}                             The deduplicated array\n *\n * @example         js\n * import unique from '@coffeekraken/sugar/js/array/unique';\n * unique(['hello','world','hello','world']); // => ['hello','world']\n *\n * @since       2.0.0\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function unique(array) {\n  let a = array.concat();\n  for (let i = 0; i < a.length; ++i) {\n    for (let j = i + 1; j < a.length; ++j) {\n      if (a[i] === a[j]) a.splice(j--, 1);\n    }\n  }\n  return a;\n}\n"
    ]
}
{
    "version": 3,
    "sources": [
        "SUrl.js"
    ],
    "names": [
        "SUrl",
        "url",
        "settings",
        "window",
        "document",
        "location",
        "href",
        "errors",
        "params",
        "match",
        "_originUrl",
        "_settings",
        "schema",
        "_parsedUrl",
        "_parsedUrlString",
        "_parseSchema",
        "_parsedSchema",
        "toString",
        "value",
        "set",
        "protocol",
        "slashes",
        "auth",
        "username",
        "password",
        "host",
        "hostname",
        "parseInt",
        "port",
        "pathname",
        "join",
        "split",
        "query",
        "hash",
        "origin"
    ],
    "mappings": "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",
    "sourcesContent": [
        "import __urlParse from 'url-parse';\nimport __deepMerge from '../object/deepMerge';\nimport __parseString from '../string/parse';\nimport __parseSchema from './parseSchema';\n\n/**\n * @name            SUrl\n * @namespace           sugar.js.url\n * @type            Class\n *\n * Simple class that is useful to parse a URL (or the current browser URL) and gives you back\n * an instance that has all these values availables as well as functions to modify the instancied URL:\n * - protocol: The protocol scheme of the URL (e.g. http:).\n * - slashes: A boolean which indicates whether the protocol is followed by two forward slashes (//).\n * - auth: Authentication information portion (e.g. username:password).\n * - username: Username of basic authentication.\n * - password: Password of basic authentication.\n * - host: Host name with port number.\n * - hostname: Host name without port number.\n * - port: Optional port number.\n * - pathname: URL path.\n * - query: Parsed object containing query string\n * - queryString: Origin query string from the URL\n * - hash: The \"fragment\" portion of the URL including the pound-sign (#).\n * - href: The full URL.\n * - origin: The origin of the URL.\n * - schema: The schema property gives you access to an object containing these properties (only if you have provided the settings.schema setting):\n *    - match (true) {Boolean}: Tells you if your current url match the passed schema\n *    - errors (null) {Object}: Gives you access to which param(s) is/are in error\n *    - params (null) {Object}: Gives you access to each params specified in the schema with their values, etc...\n *\n * This class use internally the `url-parse` npm module that you can find here: https://www.npmjs.com/package/url-parse\n *\n * @example     js\n * import SUrl from '@coffeekraken/js/url/SUrl';\n * const url = new SUrl('https://github.com/foo/bar');\n * console.log(url.hostname); // => github.com\n * url.hostname = 'youtube.com';\n *\n * const urlWithSchema = new SUrl('https://github.com/hello/world/2', {\n *    schema: '{param1:string}/{param2}/{?param3:number}'\n * });\n * console.log(urlWithSchema.schema);\n * // {\n * //    match: true,\n * //    errors: {},\n * // }\n *\n *\n * @see        https://www.npmjs.com/package/url-parse\n * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n */\nexport default class SUrl {\n  /**\n   * @name                _settings\n   * @type                Object\n   * @private\n   *\n   * Store the settings mixed from the default ones and the passed ones\n   *\n   * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n   */\n  _settings = {};\n\n  /**\n   * @name              _originUrl\n   * @type              String\n   * @private\n   *\n   * The origin URL\n   *\n   * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n   */\n  _originUrl = null;\n\n  /**\n   * @name                   _parsedSchema\n   * @type                   Object\n   * @private\n   *\n   * Store the parsed schema if a settings.schema has been provided.\n   * This object contain these properties:\n   * - params (null) {Object}: Store the path params found like /{client}/{name}\n   * - errors (null) {Object}: Store the parsing errors if has some\n   * - match (true) {Boolean}: Store if the current url match with the provided schema\n   *\n   * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n   */\n  _parsedSchema = {\n    errors: null,\n    params: null,\n    match: true\n  };\n\n  /**\n   * @name                    constructor\n   * @type                    Function\n   *\n   * Constructor\n   *\n   * @param       {String}        [url=window.document.location.href]           The url to parse. If not passed, would take the current browser url as source\n   * @param       {Object}        [settings={}]                                 On object of settings to configure your SUrl instance. Here's are the available settings:\n   * - schema (null) {String}: Specify a schema to analyze the url and get some info like params back. FOr more info on schema, see the \"_parseSchema\" method doc...\n   *\n   * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n   */\n  constructor(url = window.document.location.href, settings = {}) {\n    // save the url\n    this._originUrl = url;\n    // save the settings\n    this._settings = __deepMerge(\n      {\n        schema: null\n      },\n      settings\n    );\n    // parse the passed url using the url-parse npm module\n    this._parsedUrl = __urlParse(url, true);\n    this._parsedUrlString = __urlParse(url, false);\n    // parse the schema if needed\n    this._parseSchema();\n  }\n\n  /**\n   * @name                          _parseSchema\n   * @type                          Function\n   * @private\n   *\n   * Parse the url using the schema passed in the settings. A schema is a simple string that describe the pathname structure that the Url can have.\n   * Here's some examples:\n   * - \"{param1}/{param2}/{param3}\": This schema describe that your Url must have 3 \"values\" named param1, param2 and param3\n   *    - If my Url is \"something.com/hello/world/plop\", my schema is respected and I can have access to the values through the \"schema.params.param1\", \"schema.params.param2\", etc...\n   * - \"{hello:string}/{world:number}/{?idx:number}\": This schema describe that the Url can have 3 \"values\" but the last one is optional\n   *    - If my Url is \"something.com/plop/3/1\", my schema is respected\n   *    - If my Url is \"something.com/plop/2\", my schema is respected\n   *    - If my Url is \"something.com/plop/hello/2\", my schema is not respected due to the fact that the param named \"world\" has to be a number\n   *\n   * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n   */\n  _parseSchema() {\n    if (this._settings.schema) {\n      this._parsedSchema = __parseSchema(this.href, this._settings.schema);\n    }\n  }\n\n  /**\n   * @name                            schema\n   * @type                            Object\n   *\n   * Access the schema parsing result if the settings.schema has been provided.\n   * This object contain these properties:\n   * - params ({}) {Object}: Store the path params found like /{client}/{name}\n   * - errors ({}) {Object}: Store the parsing errors if has some\n   * - match (true) {Boolean}: Store if the current url match with the provided schema\n   *\n   * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n   */\n  get schema() {\n    return this._parsedSchema;\n  }\n\n  /**\n   * @name                          protocol\n   * @type                          String\n   *\n   * Get/set the protocol\n   *\n   * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n   */\n  set protocol(value) {\n    this._parsedUrl.set('protocol', value);\n  }\n  get protocol() {\n    return this._parsedUrl.protocol;\n  }\n\n  /**\n   * @name           slashes\n   * @type           Boolean\n   *\n   * A boolean which indicates whether the protocol is followed by two forward slashes (//).\n   *\n   * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n   */\n  set slashes(value) {\n    this._parsedUrl.set('slashes', value);\n  }\n  get slashes() {\n    return this._parsedUrl.slashes;\n  }\n\n  /**\n   * @name                 auth\n   * @type                 String\n   *\n   * Authentication information portion (e.g. username:password).\n   *\n   * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n   */\n  set auth(value) {\n    this._parsedUrl.set('auth', value);\n  }\n  get auth() {\n    return this._parsedUrl.auth;\n  }\n\n  /**\n   * @name              username\n   * @type              String\n   *\n   * Get/set username of basic authentication\n   *\n   * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n   */\n  set username(value) {\n    this._parsedUrl.set('username', value);\n  }\n  get username() {\n    return this._parsedUrl.username;\n  }\n\n  /**\n   * @name              password\n   * @type              String\n   *\n   * Get/set password of basic authentication\n   *\n   * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n   */\n  set password(value) {\n    this._parsedUrl.set('password', value);\n  }\n  get password() {\n    return this._parsedUrl.password;\n  }\n\n  /**\n   * @name        host\n   * @type        String\n   *\n   * Get/set Host name with port number\n   *\n   * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n   */\n  set host(value) {\n    this._parsedUrl.set('host', value);\n  }\n  get host() {\n    return this._parsedUrl.host;\n  }\n\n  /**\n   * @name        hostname\n   * @type        String\n   *\n   * Get/set host name without port number\n   *\n   * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n   */\n  set hostname(value) {\n    this._parsedUrl.set('hostname', value);\n  }\n  get hostname() {\n    return this._parsedUrl.hostname;\n  }\n\n  /**\n   * @name           port\n   * @type           Number\n   *\n   * Optional port number\n   *\n   * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n   */\n  set port(value) {\n    this._parsedUrl.set('port', value);\n  }\n  get port() {\n    return parseInt(this._parsedUrl.port);\n  }\n\n  /**\n   * @name        pathname\n   * @type        String\n   *\n   * URL path\n   *\n   * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n   */\n  set pathname(value) {\n    this._parsedUrl.set('pathname', value);\n    this._parseSchema();\n  }\n  get pathname() {\n    return this._parsedUrl.pathname;\n  }\n\n  /**\n   * @name        pathnameArray\n   * @type        Array\n   *\n   * URL path in array format\n   *\n   * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n   */\n  set pathnameArray(value) {\n    this._parsedUrl.set('pathname', value.join('/'));\n    this._parseSchema();\n  }\n  get pathnameArray() {\n    return this._parsedUrl.pathname.split('/');\n  }\n\n  /**\n   * @name           query\n   * @type           String\n   *\n   * Parsed object containing query string\n   *\n   * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n   */\n  set query(value) {\n    this._parsedUrl.set('query', value);\n  }\n  get query() {\n    return this._parsedUrl.query;\n  }\n\n  /**\n   * @name           queryString\n   * @type           String\n   *\n   * Origin query string from the URL\n   *\n   * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n   */\n  set queryString(value) {\n    this._parsedUrlString.set('query', value);\n  }\n  get queryString() {\n    return this._parsedUrlString.query;\n  }\n\n  /**\n   * @name        hash\n   * @type        String\n   *\n   * The \"fragment\" portion of the URL including the pound-sign (#)\n   *\n   * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n   */\n  set hash(value) {\n    this._parsedUrl.set('hash', value);\n  }\n  get hash() {\n    return this._parsedUrl.hash;\n  }\n\n  /**\n   * @name           href\n   * @type           String\n   *\n   * The full URL\n   *\n   * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n   */\n  set href(value) {\n    this._parsedUrl.set('href', value);\n    this._parseSchema();\n  }\n  get href() {\n    return this._parsedUrl.href;\n  }\n\n  /**\n   * @name        origin\n   * @type        String\n   *\n   * The origin of the URL\n   *\n   * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n   */\n  set origin(value) {\n    this._parsedUrl.set('origin', value);\n  }\n  get origin() {\n    return this._parsedUrl.origin;\n  }\n\n  /**\n   * @name      toString\n   * @type        Function\n   *\n   * Return the full URL in string format\n   *\n   * @return         {String}                   The full string url\n   *\n   * @example       js\n   * console.log(myUrl.toString()); // => https://google.com\n   *\n   * @author \t\tOlivier Bossel<olivier.bossel@gmail.com>\n   */\n  toString() {\n    return this._parsedUrl.toString();\n  }\n}\n"
    ]
}
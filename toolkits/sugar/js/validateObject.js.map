{
    "version": 3,
    "sources": [
        "validateObject.js"
    ],
    "names": [
        "_validationsObj",
        "static",
        "class",
        "__SStaticValidation",
        "args",
        "validateObject",
        "objectToCheck",
        "definitionObj",
        "settings",
        "_argPath",
        "throw",
        "name",
        "interface",
        "validationsObj",
        "issuesObj",
        "$name",
        "constructor",
        "$interface",
        "$issues",
        "$messages",
        "i",
        "argName",
        "Object",
        "keys",
        "argDefinition",
        "value",
        "undefined",
        "required",
        "$received",
        "type",
        "$expected",
        "validationRes",
        "array",
        "forEach",
        "validationName",
        "push",
        "hasOwnProperty",
        "validationObj",
        "assign",
        "map",
        "arg",
        "slice",
        "replace",
        "validationResult",
        "apply",
        "lazy",
        "__validateObjectObservedProperties",
        "defineProperty",
        "writable",
        "enumerable",
        "indexOf",
        "descriptor",
        "getOwnPropertyDescriptor",
        "getPrototypeOf",
        "set",
        "get",
        "extendsFn",
        "item",
        "key",
        "Array",
        "isArray",
        "length",
        "childrenValidation",
        "issue",
        "issueObj",
        "__SObjectValidationError"
    ],
    "mappings": "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",
    "sourcesContent": [
        "// TODO: tests\nimport __toString from '../../string/toString';\nimport __SObjectValidationError from '../../error/SObjectValidationError';\nimport __isClass from '../../is/class';\nimport __isPlainObject from '../../is/plainObject';\nimport __deepMerge from '../../object/deepMerge';\nimport __filter from '../../object/filter';\nimport __get from '../../object/get';\nimport __typeof from '../../value/typeof';\nimport __validateValue from '../value/validateValue';\nimport __SObjectDefinitionInterface from '../interface/SDefinitionObjectInterface';\n\nimport __SStaticValidation from './validation/SStaticValidation';\n\nconst _validationsObj = {\n  static: {\n    class: __SStaticValidation,\n    args: ['%object', '%property']\n  }\n};\n\n/**\n * @name            validateObject\n * @namespace           sugar.js.validation.object\n * @type            Function\n *\n * This function take an object, a definition object and validate this one depending on the definition...\n * A definition object is a plain object that specify for each properties, some requirerments like the type, if it is required or not, etc...\n * For more documentation about the definition objects, check the \"validateDefinitionObject\" function doc.\n *\n * @param       {Object}        objectToCheck       The object to check using the definition one\n * @param       {Object}        definitionObj       The definition object to use\n * @param       {String}        [name='unnamed']    Specify a name for your object. This will be useful during the validation process\n * @param       {Object}        [settings={}]         An object of settings to configure your validation process:\n * - throw (true) {Boolean}: Specify if you want to throw an error when something goes wrong\n * - extendsFn (null) {Function}: Specify a function that will be called for each properties with the arguments \"argName\", \"argDefinition\" and \"value\" to let you the possibility to extend this validation function\n * @return      {Boolean|Array<String>}                    Return true if all is ok, and an Array of string that describe the issue if it's not\n *\n * @todo        tests and documentation refactoring\n *\n * @example         js\n * import validateObject from '@coffeekraken/sugar/js/validation/object/validateObject';\n * validateObject({\n *    arg1: 'hello',\n *    arg2: false\n * }, {\n *    arg1: {\n *      type: 'String',\n *      required: true\n *    },\n *    arg2: {\n *      type: 'Boolean',\n *      required: true\n *    }\n * }); // => true\n *\n * @since     2.0.0\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function validateObject(\n  objectToCheck,\n  definitionObj,\n  settings = {},\n  _argPath = []\n) {\n  settings = __deepMerge(\n    {\n      throw: true,\n      name: null,\n      interface: null,\n      validationsObj: _validationsObj\n    },\n    settings\n  );\n\n  let issuesObj = {\n    $name:\n      settings.name ||\n      objectToCheck.constructor.name ||\n      objectToCheck.name ||\n      'Unnamed',\n    $interface: settings.interface,\n    $issues: [],\n    $messages: {}\n  };\n\n  // loop on the definition object properties\n  for (let i = 0; i < Object.keys(definitionObj).length; i++) {\n    const argName = Object.keys(definitionObj)[i];\n    const argDefinition = definitionObj[argName];\n\n    // __SObjectDefinitionInterface.apply(argDefinition);\n\n    let value = __get(objectToCheck, argName);\n\n    if (value === undefined || value === null) {\n      if (\n        objectToCheck.constructor &&\n        objectToCheck.constructor[argName] !== undefined\n      ) {\n        value = objectToCheck.constructor[argName];\n      }\n    }\n\n    if (!argDefinition.required && (value === undefined || value === null)) {\n      // the value is not required so we pass the checks...\n      break;\n    }\n\n    issuesObj[argName] = {\n      $name: argName,\n      $received: {\n        type: __typeof(value),\n        value\n      },\n      $expected: argDefinition,\n      $issues: [],\n      $messages: {}\n    };\n\n    const validationRes = __validateValue(value, argDefinition, {\n      name: argName,\n      throw: settings.throw\n    });\n    if (validationRes !== true) {\n      issuesObj[argName] = __deepMerge(\n        issuesObj[argName],\n        validationRes || {},\n        {\n          array: true\n        }\n      );\n    } else {\n    }\n\n    Object.keys(settings.validationsObj).forEach((validationName) => {\n      if (!_validationsObj[validationName]) {\n        issuesObj.$issues.push(`definitionObj.${validationName}.unknown`);\n        issuesObj.$messages[\n          `definitionObj.${validationName}.unknown`\n        ] = `The specified \"<yellow>${validationName}</yellow>\" validation is <red>not supported</red>`;\n      }\n\n      if (\n        validationName === 'static' &&\n        definitionObj.static &&\n        definitionObj.static !== true\n      )\n        return;\n      if (!definitionObj.hasOwnProperty(validationName)) return;\n      if (!definitionObj[validationName]) return;\n\n      const validationObj = Object.assign(\n        {},\n        settings.validationsObj[validationName]\n      );\n\n      validationObj.args = validationObj.args.map((arg) => {\n        if (typeof arg === 'string' && arg.slice(0, 15) === '%definitionObj.') {\n          arg = __get(definitionObj, arg.replace('%definitionObj.', ''));\n        }\n        if (typeof arg === 'string' && arg === '%object') {\n          arg = objectToCheck;\n        }\n        if (typeof arg === 'string' && arg === '%property') {\n          arg = argName;\n        }\n        return arg;\n      });\n\n      const validationResult = validationObj.class.apply(\n        value,\n        ...validationObj.args\n      );\n      if (validationResult !== true) {\n        issuesObj[argName].$issues.push(validationName);\n        issuesObj[argName].$messages[validationName] = validationResult;\n      }\n    });\n\n    // handle \"lazy\" properties\n    if (\n      (argDefinition.lazy && objectToCheck[argName] === null) ||\n      objectToCheck[argName] === undefined\n    ) {\n      if (!objectToCheck.__validateObjectObservedProperties) {\n        Object.defineProperty(\n          objectToCheck,\n          '__validateObjectObservedProperties',\n          {\n            value: [],\n            writable: true,\n            enumerable: false\n          }\n        );\n      }\n      if (\n        objectToCheck.__validateObjectObservedProperties.indexOf(argName) !== -1\n      ) {\n      } else {\n        const descriptor = Object.getOwnPropertyDescriptor(\n          Object.getPrototypeOf(objectToCheck),\n          argName\n        );\n        objectToCheck.__validateObjectObservedProperties.push(argName);\n        Object.defineProperty(objectToCheck, argName, {\n          set: (value) => {\n            // validate the passed value\n            const validationResult = __validateValue(value, argDefinition, {\n              ...settings,\n              throw: true,\n              name: `${settings.name}.${argName}`\n            });\n\n            if (descriptor && descriptor.set) return descriptor.set(value);\n            objectToCheck[`__${argName}`] = value;\n            return value;\n          },\n          get: () => {\n            if (descriptor && descriptor.get) descriptor.get();\n            return objectToCheck[`__${argName}`];\n          }\n        });\n      }\n    }\n\n    // check if is an extendsFn\n    if (settings.extendsFn) {\n      if (!issuesObj[argName]) {\n        issuesObj[argName] = {\n          $issues: []\n        };\n      }\n      issuesObj[argName] = settings.extendsFn(\n        argName,\n        argDefinition,\n        value,\n        issuesObj[argName]\n      );\n    }\n\n    // filter args that have no issues\n    issuesObj = __filter(issuesObj, (item, key) => {\n      if (Array.isArray(item)) return true;\n      if (__isPlainObject(item) && item.$issues) {\n        if (!item.$issues.length) return false;\n        if (issuesObj.$issues.indexOf(key) === -1) issuesObj.$issues.push(key);\n      }\n      return true;\n    });\n\n    // TODO implement the \"children\" support\n    // check if we have some \"children\" properties\n    if (\n      argDefinition.definitionObj &&\n      (argDefinition.required ||\n        (objectToCheck !== null && objectToCheck !== undefined))\n    ) {\n      const childrenValidation = validateObject(\n        objectToCheck || {},\n        argDefinition.definitionObj,\n        {\n          ...settings,\n          throw: false\n        },\n        [..._argPath, argName]\n      );\n      // console.log('CC', childrenValidation);\n      if (childrenValidation !== true && childrenValidation.$issues) {\n        childrenValidation.$issues.forEach((issue) => {\n          const issueObj = childrenValidation[issue];\n          issueObj.$name = `${argName}.${issueObj.name}`;\n          issuesObj.$issues.push(`${argName}.${issue}`);\n          issuesObj[`${argName}.${issue}`] = issueObj;\n        });\n      }\n    }\n  }\n\n  if (!issuesObj.$issues.length) return true;\n\n  if (settings.throw) {\n    throw new __SObjectValidationError(issuesObj);\n  }\n\n  return issuesObj;\n}\n"
    ]
}
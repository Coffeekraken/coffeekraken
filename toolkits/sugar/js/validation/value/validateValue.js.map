{
    "version": 3,
    "sources": [
        "validateValue.js"
    ],
    "names": [
        "_validationsObj",
        "required",
        "class",
        "__SRequiredValidation",
        "args",
        "path",
        "__SPathValidation",
        "type",
        "__STypeValidation",
        "values",
        "__SValuesValidation",
        "validateValue",
        "value",
        "definitionObj",
        "settings",
        "name",
        "throw",
        "extendFn",
        "validationsObj",
        "undefined",
        "default",
        "issueObj",
        "$expected",
        "$received",
        "$name",
        "$issues",
        "$messages",
        "Object",
        "keys",
        "forEach",
        "validationName",
        "i",
        "push",
        "validationObj",
        "assign",
        "map",
        "arg",
        "slice",
        "replace",
        "validationResult",
        "apply",
        "additionalIssues",
        "length",
        "__SValueValidationError"
    ],
    "mappings": ";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,eAAe,GAAG;AACtBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAEC,4BADC;AAERC,IAAAA,IAAI,EAAE;AAFE,GADY;AAKtBC,EAAAA,IAAI,EAAE;AACJH,IAAAA,KAAK,EAAEI,wBADH;AAEJF,IAAAA,IAAI,EAAE,CAAC,4BAAD;AAFF,GALgB;AAStBG,EAAAA,IAAI,EAAE;AACJL,IAAAA,KAAK,EAAEM,wBADH;AAEJJ,IAAAA,IAAI,EAAE,CAAC,qBAAD;AAFF,GATgB;AAatBK,EAAAA,MAAM,EAAE;AACNP,IAAAA,KAAK,EAAEQ,0BADD;AAENN,IAAAA,IAAI,EAAE,CAAC,uBAAD;AAFA;AAbc,CAAxB;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+Be,SAASO,aAAT,CAAuBC,KAAvB,EAA8BC,aAA9B,EAA6CC,QAA7C,EAA4D;AAAA,MAAfA,QAAe;AAAfA,IAAAA,QAAe,GAAJ,EAAI;AAAA;;AACzEA,EAAAA,QAAQ,GAAG,wBACT;AACEC,IAAAA,IAAI,EAAE,SADR;AAEEC,IAAAA,KAAK,EAAE,IAFT;AAGEC,IAAAA,QAAQ,EAAE,IAHZ;AAIEC,IAAAA,cAAc,EAAElB;AAJlB,GADS,EAOTc,QAPS,CAAX;;AAUA,MACE,CAACF,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKO,SAA7B,KACAN,aAAa,CAACO,OAAd,KAA0BD,SAF5B,EAGE;AACAP,IAAAA,KAAK,GAAGC,aAAa,CAACO,OAAtB;AACD;;AAED,MAAIC,QAAQ,GAAG;AACbC,IAAAA,SAAS,EAAET,aADE;AAEbU,IAAAA,SAAS,EAAE;AACThB,MAAAA,IAAI,EAAE,qBAASK,KAAT,CADG;AAETA,MAAAA;AAFS,KAFE;AAMbY,IAAAA,KAAK,EAAEV,QAAQ,CAACC,IANH;AAObU,IAAAA,OAAO,EAAE,EAPI;AAQbC,IAAAA,SAAS,EAAE;AARE,GAAf;AAWAC,EAAAA,MAAM,CAACC,IAAP,CAAYd,QAAQ,CAACI,cAArB,EAAqCW,OAArC,CAA6C,CAACC,cAAD,EAAiBC,CAAjB,KAAuB;AAClE,QAAI,CAAC/B,eAAe,CAAC8B,cAAD,CAApB,EAAsC;AACpCT,MAAAA,QAAQ,CAACI,OAAT,CAAiBO,IAAjB,yBAAuCF,cAAvC;AACAT,MAAAA,QAAQ,CAACK,SAAT,yBACmBI,cADnB,mDAE8BA,cAF9B;AAGD;;AACD,QAAI,CAACjB,aAAa,CAACiB,cAAD,CAAlB,EAAoC;AAEpC,QAAMG,aAAa,GAAGN,MAAM,CAACO,MAAP,CACpB,EADoB,EAEpBpB,QAAQ,CAACI,cAAT,CAAwBY,cAAxB,CAFoB,CAAtB;AAKAG,IAAAA,aAAa,CAAC7B,IAAd,GAAqB6B,aAAa,CAAC7B,IAAd,CAAmB+B,GAAnB,CAAwBC,GAAD,IAAS;AACnD,UAAI,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,CAACC,KAAJ,CAAU,CAAV,EAAa,EAAb,MAAqB,iBAApD,EAAuE;AACrED,QAAAA,GAAG,GAAGvB,aAAa,CAACuB,GAAG,CAACE,OAAJ,CAAY,iBAAZ,EAA+B,EAA/B,CAAD,CAAnB;AACD;;AACD,aAAOF,GAAP;AACD,KALoB,CAArB;AAOA,QAAMG,gBAAgB,GAAGN,aAAa,CAAC/B,KAAd,CAAoBsC,KAApB,CACvB5B,KADuB,EAEvB,GAAGqB,aAAa,CAAC7B,IAFM,CAAzB;;AAIA,QAAImC,gBAAgB,KAAK,IAAzB,EAA+B;AAC7BlB,MAAAA,QAAQ,CAACI,OAAT,CAAiBO,IAAjB,CAAsBF,cAAtB;AACAT,MAAAA,QAAQ,CAACK,SAAT,CAAmBI,cAAnB,IAAqCS,gBAArC;AACD;AACF,GA7BD;;AA+BA,MAAIzB,QAAQ,CAACG,QAAT,IAAqB,OAAOH,QAAQ,CAACG,QAAhB,KAA6B,UAAtD,EAAkE;AAChE,QAAMwB,gBAAgB,GACpB3B,QAAQ,CAACG,QAAT,CAAkBL,KAAlB,EAAyBC,aAAzB,EAAwCC,QAAxC,KAAqD,EADvD;AAEAO,IAAAA,QAAQ,CAACI,OAAT,GAAmB,CACjB,GAAGJ,QAAQ,CAACI,OADK,EAEjB,IAAIgB,gBAAgB,CAAChB,OAAjB,IAA4B,EAAhC,CAFiB,CAAnB;AAIAJ,IAAAA,QAAQ,CAACK,SAAT,GAAqB,CACnB,GAAGL,QAAQ,CAACK,SADO,EAEnB,IAAIe,gBAAgB,CAACf,SAAjB,IAA8B,EAAlC,CAFmB,CAArB;AAID;;AAED,MAAI,CAACL,QAAQ,CAACI,OAAT,CAAiBiB,MAAtB,EAA8B,OAAO,IAAP;;AAC9B,MAAI5B,QAAQ,CAACE,KAAb,EAAoB;AAClB,UAAM,IAAI2B,8BAAJ,CAA4BtB,QAA5B,CAAN;AACD;;AACD,SAAOA,QAAP;AACD",
    "sourcesContent": [
        "import __get from '../../object/get';\nimport __SValueValidationError from '../../error/SValueValidationError';\nimport __isOfType from '../../is/ofType';\nimport __deepMerge from '../../object/deepMerge';\nimport __typeof from '../../value/typeof';\nimport __isNode from '../../is/node';\nimport __isPath from '../../is/path';\nimport __toString from '../../string/toString';\n\nimport __SRequiredValidation from './validation/SRequiredValidation';\nimport __SPathValidation from './validation/SPathValidation';\nimport __STypeValidation from './validation/STypeValidation';\nimport __SValuesValidation from './validation/SValuesValidation';\n\nconst _validationsObj = {\n  required: {\n    class: __SRequiredValidation,\n    args: []\n  },\n  path: {\n    class: __SPathValidation,\n    args: ['%definitionObj.path.exists']\n  },\n  type: {\n    class: __STypeValidation,\n    args: ['%definitionObj.type']\n  },\n  values: {\n    class: __SValuesValidation,\n    args: ['%definitionObj.values']\n  }\n};\n\n/**\n * @name          validateValue\n * @namespace     sugar.js.validation.value\n * @type          Function\n *\n * This function take a value and check if it correspond to the passed definition object.\n * If the value pass the test, the function will return true, otherwise it will return\n * a string that describe the issue.\n *\n * @param         {Mixed}       value       The value to check\n * @param         {Object}Â      definitionObj     THe definition object\n * @param       {Object}        [settings={}]         An object of settings to configure your validation process:\n * - throw (true) {Boolean}: Specify if you want to throw an error when something goes wrong\n * - name ('unnamed') {String}: Specify a name. Useful for debugging\n * - extendFn (null) {Function}: Specify a function that will be called after the default validations checks and before the return or throw statements. It will have as arguments the \"value\" to check, the \"definitionObj\" and the \"settings\" object. You then can make your checks and return an array of \"issues\" like [\"path\",\"other\"], etc...\n * @return         {Boolean|Object}           true if the check is passed, an Array of String describing the issue if not\n *\n * @todo        tests\n *\n * @example       js\n * import validateValue from '@coffeekraken/sugar/js/validation/value/validateValue';\n * validateValue(true, {\n *    type: 'Boolean|String',\n *    required: true\n * }); // => true\n *\n * @todo      tests\n *\n * @since     2.0.0\n * @author \tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function validateValue(value, definitionObj, settings = {}) {\n  settings = __deepMerge(\n    {\n      name: 'unnamed',\n      throw: true,\n      extendFn: null,\n      validationsObj: _validationsObj\n    },\n    settings\n  );\n\n  if (\n    (value === null || value === undefined) &&\n    definitionObj.default !== undefined\n  ) {\n    value = definitionObj.default;\n  }\n\n  let issueObj = {\n    $expected: definitionObj,\n    $received: {\n      type: __typeof(value),\n      value\n    },\n    $name: settings.name,\n    $issues: [],\n    $messages: {}\n  };\n\n  Object.keys(settings.validationsObj).forEach((validationName, i) => {\n    if (!_validationsObj[validationName]) {\n      issueObj.$issues.push(`definitionObj.${validationName}.unknown`);\n      issueObj.$messages[\n        `definitionObj.${validationName}.unknown`\n      ] = `The specified \"<yellow>${validationName}</yellow>\" validation is <red>not supported</red>`;\n    }\n    if (!definitionObj[validationName]) return;\n\n    const validationObj = Object.assign(\n      {},\n      settings.validationsObj[validationName]\n    );\n\n    validationObj.args = validationObj.args.map((arg) => {\n      if (typeof arg === 'string' && arg.slice(0, 15) === '%definitionObj.') {\n        arg = definitionObj[arg.replace('%definitionObj.', '')];\n      }\n      return arg;\n    });\n\n    const validationResult = validationObj.class.apply(\n      value,\n      ...validationObj.args\n    );\n    if (validationResult !== true) {\n      issueObj.$issues.push(validationName);\n      issueObj.$messages[validationName] = validationResult;\n    }\n  });\n\n  if (settings.extendFn && typeof settings.extendFn === 'function') {\n    const additionalIssues =\n      settings.extendFn(value, definitionObj, settings) || [];\n    issueObj.$issues = [\n      ...issueObj.$issues,\n      ...(additionalIssues.$issues || [])\n    ];\n    issueObj.$messages = [\n      ...issueObj.$messages,\n      ...(additionalIssues.$messages || [])\n    ];\n  }\n\n  if (!issueObj.$issues.length) return true;\n  if (settings.throw) {\n    throw new __SValueValidationError(issueObj);\n  }\n  return issueObj;\n}\n"
    ]
}
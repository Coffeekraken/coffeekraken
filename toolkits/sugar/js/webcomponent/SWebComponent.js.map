{
    "version": 3,
    "sources": [
        "SWebComponent.js"
    ],
    "names": [
        "_sWebComponentPromise",
        "__SPromise",
        "id",
        "_sWebComponentStack",
        "SWebComponentGenerator",
        "extendsSettings",
        "extends",
        "HTMLElement",
        "name",
        "settings",
        "componentName",
        "replace",
        "uncamelizedName",
        "customElements",
        "get",
        "dashName",
        "class",
        "defineSettings",
        "window",
        "define",
        "e",
        "document",
        "registerElement",
        "prototype",
        "Object",
        "keys",
        "props",
        "map",
        "constructor",
        "_metas",
        "getComponentMetas",
        "_settings",
        "getAttribute",
        "_promise",
        "on",
        "lit",
        "_refreshIdReferences",
        "dispatch",
        "_initProps",
        "_mediaQuery",
        "__SMediaQuery",
        "media",
        "forEach",
        "prop",
        "_props",
        "responsive",
        "responsiveValues",
        "undefined",
        "hasAttribute",
        "value",
        "setProp",
        "currentClassName",
        "setAttribute",
        "selector",
        "_mount",
        "path",
        "tries",
        "i",
        "length",
        "$tryRes",
        "$root",
        "querySelector",
        "querySelectorAll",
        "__SError",
        "_triggerPropsEvents",
        "cls",
        "$elm",
        "clsArray",
        "split",
        "className",
        "sel",
        "classList",
        "add",
        "remove",
        "$refs",
        "Array",
        "from",
        "$item",
        "attr",
        "update",
        "_handlePhysicalProps",
        "handleProp",
        "originalProp",
        "defineProperty",
        "enumerable",
        "writable",
        "configurable",
        "previousValue",
        "default",
        "getActiveMedia",
        "set",
        "getOwnPropertyDescriptor",
        "call",
        "watch",
        "deep",
        "propObj",
        "Promise",
        "resolve",
        "reject",
        "_mountDependencies",
        "_checkPropsDefinition",
        "_isMounted",
        "event",
        "callback",
        "off",
        "trigger",
        "metas",
        "target",
        "setTimeout",
        "promises",
        "mountWhen",
        "push",
        "mountDependencies",
        "depsFns",
        "fn",
        "all",
        "then",
        "attrName",
        "oldVal",
        "newVal",
        "_settedAttributesStack",
        "newValue",
        "finalSelectorArray",
        "part",
        "hasDot",
        "match",
        "hasHash",
        "finalClsPart",
        "cssName",
        "baseCls",
        "includes",
        "finalBaseCls",
        "join",
        "eventObj",
        "action",
        "physical",
        "removeAttribute",
        "currentAttributeValue",
        "currentValueStringified",
        "validationResult",
        "throw",
        "Error",
        "instance",
        "$node"
    ],
    "mappings": "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",
    "sourcesContent": [
        "import __SError from '../error/SError';\nimport __isClass from '../is/class';\nimport __deepMerge from '../object/deepMerge';\nimport __SPromise from '../promise/SPromise';\nimport __parse from '../string/parse';\nimport __toString from '../string/toString';\nimport __when from '../dom/when';\nimport __camelize from '../string/camelize';\nimport __paramCase from '../string/paramCase';\nimport __validateValue from '../validation/value/validateValue';\nimport __watch from '../object/watch';\nimport __uniqid from '../string/uniqid';\nimport __dispatch from '../event/dispatch';\nimport __on from '../event/on';\nimport __SLitHtmlWebComponent from './SLitHtmlWebComponent';\nimport __htmlTagToHtmlClassMap from '../html/htmlTagToHtmlClassMap';\nimport __uncamelize from '../string/uncamelize';\nimport __getHtmlClassFromTagName from '../html/getHtmlClassFromTagName';\nimport __domReady from '../dom/domReady';\nimport __getTagNameFromHtmlClass from '../html/getTagNameFromHtmlClass';\nimport __mediaQuery from '../responsive/mediaQuery';\nimport __SMediaQuery from '../responsive/SMediaQuery';\n\n/**\n * @name              SWebComponent\n * @namespace           sugar.js.webcomponent\n * @type              Class\n * @extends           HTMLElement\n *\n * // TODO: example\n *\n * Base class that allows you to create easily new webcomponents and handle things like attributes updates,\n * base css (scss) importing, etc... Here's a list a features that this class covers:\n * - Listen for attributes changes\n * - Mount the component at a certain point in time (inViewport, visible, etc...)\n * - **Automatically cast the attributes** to their proper js variable types (Array, Object, String, etc...)\n * - **Physical props** : Specify some props that will ALWAYS be present as attribute on the component for styling purpose\n * - Define some **default CSS** that will be injected in the head automatically\n * - Specify some **required props**\n * - **Full lifecycle management** through \"events\":\n * \t  - attach: Dispatched when the component is attached to the DOM\n *    - detach: Dispatched when the component is detached from the DOM\n *    - mounting: Dispatched when the component starts to mount itself (before mountWhen and mountDependencies execution)\n *    - mounted: Dispatched when the component has be mounted properly\n *    - prop|prop.{name}: Dispatched when a property has been updated, removed or added\n *      - The object format sended with the event is this one:\n *        - { prop: 'propName', action: 'update|remove|add', value: 'Something', previousValue: 'Other' }\n * - **Mount dependencies** : This will allows you to set some promises that have to be resolved before mounting the component\n *\n * @param       {Object}        [settings={}]         A setting object to configure your webcomponent instance:\n * - defaultProps ({}) {Object}: Specify the default properties values\n * - physicalProps ([]) {Array<String>}: List all the properties that need to be ALWAYS on the html element (for styling purpose for example...)\n * - requiredProps ([]) {Array<String>}: List all the properties that MUST be passed to the component\n *\n * @example         js\n * import SWebComponent from '@coffeekraken/sugar/js/webcomponent/SWebComponent';\n * class MyCoolComponent extends SWebComponent {\n *\n *    constructor() {\n *      super();\n *    }\n *\n * }\n *\n * @since       2.0.0\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\n\nconst _sWebComponentPromise = new __SPromise({\n  id: 'SWebComponentPromise'\n});\nconst _sWebComponentStack = {};\n\nfunction SWebComponentGenerator(extendsSettings = {}) {\n  extendsSettings = __deepMerge(\n    {\n      extends: HTMLElement,\n      name: null\n    },\n    extendsSettings\n  );\n\n  return class SWebComponent extends extendsSettings.extends {\n    _settedAttributesStack = {};\n\n    /**\n     * @name          _promise\n     * @type          SPromise\n     * @private\n     *\n     * Store the SPromise instance used to \"dispatch\" some events\n     * that you can subscribe using the \"on\" exposed method\n     *\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    _promise = null;\n\n    /**\n     * @name          _props\n     * @type          Object\n     * @private\n     *\n     * Store all the properties (attributes)\n     *\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    _props = {};\n    props = {};\n\n    /**\n     * @name          _settings\n     * @type          Object\n     * @private\n     *\n     * Store all the webcomponent settings like \"physicalProps\", \"requiredProps\", etc...\n     *\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    _settings = {};\n\n    /**\n     * @name          _metas\n     * @type          Object\n     * @private\n     *\n     * Store the component metas:\n     * - name: The camelcase component name\n     * - dashName: The component name in dash case\n     * - class: The component class\n     * - extends: The HTML class that the component extends\n     * - settings: An object of settings\n     * - instance: The component instance (this),\n     * - $node: The html element (this)\n     *\n     * @since         2.0.0\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    _metas = {};\n\n    /**\n     * @name        observedAttributes\n     * @type        Function\n     * @get\n     * @static\n     *\n     * This medhod simply return the list of props that will be\n     * observed by the customElements under the hood system.\n     *\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    static get observedAttributes() {\n      return Object.keys(this.props).map((name) => __uncamelize(name));\n    }\n\n    /**\n     * @name\t\t\t\t\tcomponentName\n     * @type \t\t\t\t\tString\n     * @static\n     *\n     * Store the name of the component in camelcase\n     *\n     * @since \t\t\t\t\t2.0.0\n     * @author\t\t\t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    static componentName = undefined;\n\n    /**\n     * @name\t\t\t\t\tgetComponentMetas\n     * @type \t\t\t\t\tFunction\n     * @static\n     *\n     * This static method return the component metas information like:\n     * - name: The camelcase component name\n     * - dashName: The component name in dash case\n     * - class: The component class\n     * - extends: The HTML class that the component extends\n     * - settings: An object of settings\n     *\n     * @param     {String}      name      The component name you want to get the metas of\n     *\n     * @since \t\t\t\t\t2.0.0\n     * @author\t\t\t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    static getComponentMetas(name) {\n      return _sWebComponentStack[__uncamelize(name)] || {};\n    }\n\n    /**\n     * @name\t\t\t\t\tdefine\n     * @type \t\t\t\t\tFunction\n     * @static\n     *\n     * This method allows you to define your component as a webcomponent recognized by the browser\n     *\n     * @param       {Object}        [settings={}]                 An object of settings to configure your component\n     *\n     * @setting     {String}        [name=null]                   Specify the component name in CamelCase. MyCoolComponent => <my-cool-component />\n     *\n     * @since \t\t\t\t\t2.0.0\n     * @author\t\t\t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    static define(settings = {}) {\n      const name = (settings.name || this.componentName || this.name).replace(\n        'WebComponent',\n        ''\n      );\n\n      const uncamelizedName = __uncamelize(name);\n\n      // avoid multi define of the same component\n      if (customElements.get(uncamelizedName)) return;\n\n      this.componentName = name;\n\n      if (_sWebComponentStack[uncamelizedName]) return;\n\n      _sWebComponentStack[uncamelizedName] = {\n        name,\n        dashName: uncamelizedName,\n        class: this,\n        extends: extendsSettings.extends,\n        settings\n      };\n\n      const defineSettings = {};\n      if (extendsSettings.extends !== HTMLElement)\n        defineSettings.extends = __getTagNameFromHtmlClass(\n          extendsSettings.extends\n        );\n\n      if (window.customElements) {\n        try {\n          window.customElements.define(uncamelizedName, this, defineSettings);\n        } catch (e) {\n          // @TODO      find why the component is registeres twice...\n          // console.log(e);\n        }\n      } else if (document.registerElement) {\n        try {\n          defineSettings.prototype = this.prototype;\n          document.registerElement(uncamelizedName, defineSettings);\n        } catch (e) {\n          // @TODO      find why the component is registeres twice...\n          // console.log(e);\n        }\n      } else {\n        throw `Your browser does not support either document.registerElement or window.customElements.define webcomponents specification...`;\n      }\n    }\n\n    /**\n     * @name          constructor\n     * @type          Function\n     * @constructor\n     *\n     * Constructor\n     *\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    constructor(settings = {}) {\n      // init base html element\n      super();\n\n      // make sure the component has a componentName static prop\n      if (!this.constructor.componentName)\n        throw `Your MUST define a static \"componentName\" camelcase property like \"SFiltrableInput\" for your component to work properly...`;\n      // get component metas\n      this._metas = this.constructor.getComponentMetas(\n        this.constructor.componentName\n      );\n      // save the settings\n      this._settings = __deepMerge(\n        {\n          id: this.getAttribute('id') || __uniqid(),\n          props: this.constructor.props || {}\n        },\n        this._metas.settings || {},\n        settings\n      );\n\n      // create the SPromise instance\n      this._promise = new __SPromise({\n        id: this._settings.id\n      });\n\n      this.on('mounted:1', () => {\n        // dispatch a ready event\n        if (!this.lit) {\n          // refresh references\n          this._refreshIdReferences();\n          // the Lit HTML class dispatch the ready event after having rendering the template the first time\n          this.dispatch('ready', this);\n        }\n      });\n\n      __domReady(() => {\n        // get the inital content\n        // this._$initialContent =\n\n        // handle props\n        this._initProps();\n\n        this._mediaQuery = new __SMediaQuery('*');\n        this._mediaQuery.on('match', (media) => {\n          Object.keys(this.constructor.props).forEach((prop) => {\n            if (\n              !this._props[prop].responsive ||\n              this._props[prop].responsiveValues[media.name] !== undefined\n            )\n              return;\n\n            if (this.hasAttribute(`${__uncamelize(prop)}-${media.name}`)) {\n              const value = __parse(\n                this.getAttribute(`${__uncamelize(prop)}-${media.name}`)\n              );\n              this.setProp(prop, value, media.name);\n            }\n          });\n        });\n\n        // apply the $node class\n        const currentClassName = this.getAttribute('class') || '';\n        this.setAttribute(\n          'class',\n          `${currentClassName} ${this.selector(`node`)}`\n        );\n\n        // launch the mounting process\n        this._mount();\n      });\n    }\n\n    /**\n     * @name          props\n     * @type          Function\n     * @get\n     *\n     * Get the properties values object\n     *\n     * @since         2.0.0\n     * @author\t\t\t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    get props() {\n      this.props;\n    }\n\n    /**\n     * @name          $root\n     * @type          Function\n     * @get\n     *\n     * Access the root element of the webcomponent from which the requests like ```$``` and ```$$``` will be executed\n     *\n     * @since         2.0.0\n     * @author\t\t\t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    get $root() {\n      return this;\n    }\n\n    /**\n     * @name\t\t\t\t\t$\n     * @type \t\t\t\t\tFunction\n     *\n     * This method is a shortcut to the ```querySelector``` function\n     *\n     * @param         {String}        path      The selector path\n     * @return        {HTMLElement}             The html element getted\n     *\n     * @since \t\t\t\t\t2.0.0\n     * @author\t\t\t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    $(path) {\n      const tries = [this.selector(path), path];\n      for (let i = 0; i < tries.length; i++) {\n        const $tryRes = this.$root.querySelector(tries[i]);\n        if ($tryRes) return $tryRes;\n      }\n      return null;\n    }\n\n    /**\n     * @name\t\t\t\t\t$$\n     * @type \t\t\t\t\tFunction\n     *\n     * This method is a shortcut to the ```querySelectorAll``` function\n     *\n     * @param         {String}        path      The selector path\n     * @return        {HTMLElement}             The html element(s) getted\n     *\n     * @since \t\t\t\t\t2.0.0\n     * @author\t\t\t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    $$(path) {\n      const tries = [this.selector(path), path];\n      for (let i = 0; i < tries.length; i++) {\n        const $tryRes = this.$root.querySelectorAll(tries[i]);\n        if ($tryRes) return $tryRes;\n      }\n      return null;\n    }\n\n    /**\n     * @name          setProp\n     * @type          Function\n     *\n     * This method allows you to set a prop and specify the \"media\" for which you want to set this value\n     * The media parameter can be one of the media queries defined in the configuration config.media.queries\n     *\n     * @param       {String}      prop        The property name you want to set in camelcase\n     * @param       {Mixed}       value       The value to set\n     * @param       {String}    [media=null]    The media for which you want to set the property. Work only on \"responsive\" defined props\n     *\n     * @since       2.0.0\n     * @author\t\t\t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    setProp(prop, value, media = null) {\n      if (!media) return (this.props[prop] = value);\n      if (!this._props[prop].responsive) {\n        throw new __SError(\n          `You try to set the responsive property \"${prop}\" for the media \"${media}\" but this property is not defined as \"responsive\"...`\n        );\n      }\n      this._props[prop].responsiveValues[media] = value;\n      // trigger a \"prop\" event\n      this._triggerPropsEvents(prop);\n    }\n\n    /**\n     * @name          getProp\n     * @type          Function\n     *\n     * This method allows you to get a prop and specify the \"media\" for which you want to get this value\n     * The media parameter can be one of the media queries defined in the configuration config.media.queries\n     *\n     * @param       {String}      prop        The property name you want to set in camelcase\n     * @param       {String}    [media=null]    The media for which you want to set the property. Work only on \"responsive\" defined props\n     *\n     * @since       2.0.0\n     * @author\t\t\t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    getProp(prop, media = null) {\n      if (!media) return this._props[prop].value;\n      if (!this._props[prop].responsive) {\n        throw new __SError(\n          `You try to get the responsive property \"${prop}\" for the media \"${media}\" but this property is not defined as \"responsive\"...`\n        );\n      }\n      return this._props[prop].responsiveValues[media];\n    }\n\n    /**\n     * @name          addClass\n     * @type          Function\n     *\n     * This method can be used to add class(es) to an element in the component.\n     * This will take care of adding the pcomponent name prefix as well as the ```cssName```prefix\n     * if needed\n     *\n     * @param       {String}      cls       The class(es) to add.\n     * @param       {HTMLElement|String}     [$elm=this]       The item on which you want to add the class. Can be a string which will be passed to the ```$``` method to get the HTMLElement itself\n     * @return      {SWebComponent}               Return the component itself to maintain chainability\n     *\n     * @since       2.0.0\n     * @author\t\t\t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    addClass(cls, $elm = this) {\n      // split the cls\n      const clsArray = cls.split(' ');\n      clsArray.forEach((className) => {\n        // build the selector\n        const selector = this.selector(className);\n        // split the selector\n        selector.split(' ').forEach((sel) => {\n          // add the class to the element\n          $elm.classList.add(sel);\n        });\n      });\n      // maintain chainability\n      return this;\n    }\n\n    /**\n     * @name          removeClass\n     * @type          Function\n     *\n     * This method can be used to remove class(es) to an element in the component.\n     * This will take care of adding the component name prefix as well as the ```cssName```prefix\n     * if needed\n     *\n     * @param       {String}      cls       The class(es) to add.\n     * @param       {HTMLElement|String}     [$elm=this]       The item on which you want to add the class. Can be a string which will be passed to the ```$``` method to get the HTMLElement itself\n     * @return      {SWebComponent}               Return the component itself to maintain chainability\n     *\n     * @since       2.0.0\n     * @author\t\t\t\t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    removeClass(cls, $elm = this) {\n      // split the cls\n      const clsArray = cls.split(' ');\n      clsArray.forEach((className) => {\n        // build the selector\n        const selector = this.selector(className);\n        // split the selector\n        selector.split(' ').forEach((sel) => {\n          // add the class to the element\n          $elm.classList.remove(sel);\n        });\n      });\n      // maintain chainability\n      return this;\n    }\n\n    /**\n     * @name          metas\n     * @type          Object\n     * @get\n     *\n     * This property store all the component metas informations like the name,\n     * the type, what it is extending, etc...\n     *\n     * @since       2.0.0\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    get metas() {\n      return {\n        instance: this,\n        $node: this,\n        ...this._metas\n      };\n    }\n\n    _refreshIdReferences() {\n      const $refs = this.$root.querySelectorAll('[id]');\n      Array.from($refs).forEach(($item) => {\n        if (this[`$${$item.id}`] === $item) return;\n        this[`$${$item.id}`] = $item;\n      });\n    }\n\n    _initProps() {\n      // handle props\n\n      for (const prop in this._settings.props) {\n        let attr = this.getAttribute(__uncamelize(prop));\n        if (!attr && this.hasAttribute(__uncamelize(prop))) {\n          attr = true;\n        }\n\n        this.on(`prop.${prop}.*`, (update) => {\n          this._handlePhysicalProps(prop);\n          this.handleProp(prop, update);\n        });\n\n        let originalProp;\n        if (this[prop] !== undefined) originalProp = this[prop];\n        Object.defineProperty(this._props, prop, {\n          enumerable: false,\n          writable: true,\n          configurable: false,\n          value: {\n            ...this._settings.props[prop],\n            previousValue: undefined,\n            value: attr ? __parse(attr) : this._settings.props[prop].default,\n            responsiveValues: {}\n          }\n        });\n        Object.defineProperty(this.props, prop, {\n          enumerable: true,\n          configurable: false,\n          get: () => {\n            if (\n              this._props[prop].responsive &&\n              this._props[prop].responsiveValues\n            ) {\n              if (\n                this._props[prop].responsiveValues[\n                  __SMediaQuery.getActiveMedia()\n                ] !== undefined\n              ) {\n                return this._props[prop].responsiveValues[\n                  __SMediaQuery.getActiveMedia()\n                ];\n              }\n            }\n            return this._props[prop].value;\n          },\n          set: (value) => {\n            this._props[prop].previousValue = this._props[prop].value;\n            this._props[prop].value = value;\n            if (originalProp) {\n              Object.getOwnPropertyDescriptor(this.prototype, prop).set.call(\n                this,\n                value\n              );\n            }\n            // trigger a \"prop\" event\n            this._triggerPropsEvents(prop);\n          }\n        });\n      }\n\n      // handle props\n      for (const prop in this._settings.props) {\n        // if need to be watches deeply\n        if (this._props[prop].watch) {\n          this._props[prop] = __watch(this._props[prop], {\n            deep: this._props[prop].watch === 'deep'\n          });\n        }\n      }\n    }\n\n    /**\n     * @name          handleProp\n     * @type          Function\n     * @async\n     *\n     * This method is supposed to be overrided by your component integration\n     * to handle the props updates and delete actions.\n     * The passed description object has this format:\n     * ```js\n     * {\n     *    action: 'set|delete',\n     *    prop: 'cool',\n     *    previousValue: '...',\n     *    value: '...'\n     * }\n     * ```\n     *\n     * @param     {String}      prop      The property name that has been updated or deleted\n     * @param     {Object}      descriptionObj      The description object that describe the update or delete action\n     * @return    {Promise}                A promise that has to be resolved once the update has been handled correctly. You have to pass the prop variable to the resolve function\n     *\n     * @since     2.0.0\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    handleProp(prop, propObj) {\n      return new Promise((resolve, reject) => {\n        resolve(prop);\n      });\n    }\n\n    /**\n     * @name          _mount\n     * @type          Function\n     * @private\n     * @async\n     *\n     * This method handle the mounting of the component\n     *\n     * @since       2.0.0\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    async _mount() {\n      // dispatch mounting event\n      this.dispatch('mounting', this);\n\n      // wait until the component match the mountDependencies and mountWhen status\n      await this._mountDependencies();\n\n      // check props definition\n      this._checkPropsDefinition();\n\n      // handle physical props\n      this._handlePhysicalProps();\n\n      // dispatch mounted event\n      this._isMounted = true;\n      this.dispatch('mounted', this);\n    }\n\n    /**\n     * @name          on\n     * @type          Function\n     *\n     * Method used to subscribe to the \"events\" dispatched\n     * during the lifecycle of the component. Here's the list of events:\n     * - attach: Dispatched when the component is attached to the DOM\n     * - detach: Dispatched when the component is detached from the DOM\n     * - mounting: Dispatched when the component starts to mount itself (before mountWhen and mountDependencies execution)\n     * - mounted: Dispatched when the component has be mounted properly\n     * - prop|prop.{name}: Dispatched when a property has been updated, removed or added\n     *    - The object format sended with the event is this one:\n     *      - { prop: 'propName', action: 'update|remove|add', value: 'Something', previousValue: 'Other' }\n     *\n     * @param       {String}        event         The event you want to subscribe to\n     * @param       {Function}      callback      The callback function that has to be called\n     * @return      {SPromise}                    The SPromise used in this instance\n     *\n     * @since       2.0.0\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    on(event, callback) {\n      return this._promise.on(event, callback);\n    }\n\n    /**\n     * @name          off\n     * @type          Function\n     *\n     * Method used to unsubscribe to a previously subscribed event\n     *\n     * @param       {String}        event         The event you want to unsubscribe for\n     * @param       {Function}      callback      The callback function that has to be called\n     * @return      {SPromise}                    The SPromise used in this instance\n     *\n     * @since       2.0.0\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    off(event, callback) {\n      return this._promise.off(event, callback);\n    }\n\n    /**\n     * @name          dispatch\n     * @type          Function\n     * @private\n     *\n     * This method is used to dispatch events simultaneously through the SPromise internal instance on which you can subscribe using the \"on\" method,\n     * and through the global \"sugar.js.event.dispatch\" function on which you can subscribe using the function \"sugar.js.event.on\"\n     *\n     * @param       {String}        name          The event name to dispatch\n     * @param       {Mixed}         value         The value to attach to the event\n     *\n     * @since       2.0.0\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    dispatch(name, value) {\n      // dispatch event through the SPromise internal instance\n      this._promise.trigger(name, value || this);\n      // dispatch a general event\n      __dispatch(`${this.metas.dashName}.${name}`, {\n        target: this,\n        value\n      });\n      __dispatch(`${this.metas.dashName}#${this._settings.id}.${name}`, {\n        target: this,\n        value\n      });\n      setTimeout(() => {\n        // dispatch an SWebComponent level event\n        _sWebComponentPromise.trigger(`${this.metas.dashName}.${name}`, {\n          target: this,\n          value\n        });\n        _sWebComponentPromise.trigger(\n          `${this.metas.dashName}#${this._settings.id}.${name}`,\n          {\n            target: this,\n            value\n          }\n        );\n      });\n    }\n\n    /**\n     * @name          _mountDependencies\n     * @type          Function\n     * @private\n     * @async\n     *\n     * This method simply delay the mounting process of the component\n     * based on different settings \"properties\":\n     * - mountWhen (null) {String}: Specify when you want the component to be mounted. Can be:\n     *    - inViewport: Mount the component only when it appears in the viewport\n     *    - visible: Mount the component when the component became visible (like display:none; to display:block; for example)\n     *    - domReady: Mount the component when the DOM is ready\n     *    - transitionEnd. Mount the component when the transition is ended\n     * - mountDependencies (null) {Function|Array<Function>}: Specify one/some function(s) that returns a Promise and that need to be all resolved before mounting the component\n     *\n     * @return      {Promise}               Return a promise that will be resolved once every \"dependencies\" are satisfied\n     *\n     * @since       2.0.0\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    _mountDependencies() {\n      return new Promise((resolve, reject) => {\n        let promises = [];\n\n        // check if we have a \"mountWhen\" setting specified\n        if (this._settings.mountWhen) {\n          promises.push(__when(this._settings.mountWhen));\n        }\n\n        // check if we have one/some \"mountDependencies\" setting specified\n        if (this._settings.mountDependencies) {\n          const depsFns = [...this._settings.mountDependencies];\n          depsFns.forEach((fn) => {\n            promises.push(fn());\n          });\n        }\n\n        // wait until all promises are resolved\n        Promise.all(promises).then(() => {\n          resolve();\n        });\n      });\n    }\n\n    /**\n     * @name          connectedCallback\n     * @type          Function\n     *\n     * Called when the component is attached to the dom\n     *\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    connectedCallback() {\n      // dispatch \"event\"\n      setTimeout(() => {\n        this.dispatch('attach', this);\n      });\n    }\n\n    /**\n     * @name          disconnectedCallback\n     * @type          Function\n     *\n     * Called when the component is detached from the dom\n     *\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    disconnectedCallback() {\n      // dispatch \"event\"\n      this.dispatch('detach', this);\n    }\n\n    /**\n     * @name            attributeChangedCallback\n     * @type            Function\n     *\n     * Called when an attribute is removed, added or updated\n     *\n     * @param     {String}      attrName      The attribute name\n     * @param     {Mixed}       oldVal        The old attribute value\n     * @param     {Mixed}       newVal        The new attribute value\n     *\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    attributeChangedCallback(attrName, oldVal, newVal) {\n      if (!this._isMounted) return;\n      if (this._settedAttributesStack[attrName]) return;\n\n      // const previousValue = __parse(oldVal);\n      const newValue = __parse(newVal) || false;\n\n      // set the value into the props\n      this[attrName] = newValue;\n    }\n\n    /**\n     * @name            selector\n     * @type            Function\n     *\n     * This method return you a selector generated depending on the\n     * webcomponent name\n     *\n     * @param       {String}      cls         The class name to use\n     * @return      {String}                  The generated class name\n     *\n     * @since       2.0.0\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    selector(cls = '') {\n      const split = cls.split(' ');\n      const finalSelectorArray = [];\n\n      split.forEach((part) => {\n        const hasDot = part.match(/^\\./),\n          hasHash = part.match(/^\\#/);\n        part = part.replace('.', '').replace('#', '');\n\n        let finalClsPart;\n        if (part.match(/^(--)/)) finalClsPart = `${this.metas.dashName}${part}`;\n        else if (part !== '') finalClsPart = `${this.metas.dashName}__${part}`;\n        else finalClsPart = this.metas.dashName;\n        if (hasDot) finalClsPart = `.${finalClsPart}`;\n        if (hasHash) finalClsPart = `#${finalClsPart}`;\n\n        // add the base class if needed\n        if (this.constructor.cssName) {\n          let baseCls = __uncamelize(this.constructor.cssName).replace(\n            '-web-component',\n            ''\n          );\n          if (!finalClsPart.includes(baseCls)) {\n            let finalBaseCls = '';\n            if (part.match(/^(--)/)) finalBaseCls = `${baseCls}${part}`;\n            else if (part !== '') finalBaseCls = `${baseCls}__${part}`;\n            else finalBaseCls = baseCls;\n            if (hasDot) {\n              finalBaseCls = `.${finalBaseCls}`;\n            } else if (hasHash) {\n              finalBaseCls = `#${finalBaseCls}`;\n            } else {\n              finalClsPart += ` ${finalBaseCls}`;\n            }\n          }\n        }\n\n        finalSelectorArray.push(finalClsPart);\n      });\n\n      return finalSelectorArray.join(' ');\n    }\n\n    /**\n     * @name        prop\n     * @type        Function\n     *\n     * Get of set a property\n     *\n     * @param       {String}      prop      The property you want to get/set\n     * @param       {Mixed}       [value=undefined]    The value you want to set\n     * @return      {Mixed}                 The property value\n     *\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    // prop(prop, value = undefined) {\n    //   // camelize the attribute name\n    //   prop = __camelize(prop);\n\n    //   if (value === undefined) {\n    //     return this._props[prop] ? this._props[prop].value : undefined;\n    //   }\n    //   this._props[prop].previousValue = this._props[prop]\n    //     ? this._props[prop].value\n    //     : undefined;\n    //   this._props[prop].value = value;\n\n    //   this.handleProp(prop, this._props[prop]);\n\n    //   // handle physical props\n    //   this._handlePhysicalProps(prop);\n\n    //   // trigger a \"prop\" event\n    //   this._triggerPropsEvents(prop);\n\n    //   return value;\n    // }\n\n    /**\n     * @name        _triggerPropsEvents\n     * @type        Function\n     * @private\n     *\n     * This method simply trigger a prop|prop.{name} event through the SPromise instance.\n     *\n     * @param     {String}      prop      The property name to trigger event for\n     *\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    _triggerPropsEvents(prop) {\n      // trigger a \"prop\" event\n      const eventObj = {\n        prop,\n        action:\n          this._props[prop].previousValue !== null\n            ? this._props[prop].value !== null\n              ? 'set'\n              : 'delete'\n            : 'set',\n        value: this._props[prop].value,\n        previousValue: this._props[prop].previousValue,\n        media: __SMediaQuery.getActiveMedia()\n      };\n\n      this.dispatch(`prop.${prop}.${eventObj.action}`, eventObj);\n    }\n\n    /**\n     * @name        _handlePhysicalProps\n     * @type        Function\n     * @private\n     *\n     * This method make sure that all the defined physical props are\n     * setted as attribute on the DOM element\n     *\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    _handlePhysicalProps(...props) {\n      if (!props || props.length === 0) props = Object.keys(this._props);\n\n      // loop on each required props\n      props.forEach((prop) => {\n        if (!this._props[prop].physical) return;\n\n        const value = this._props[prop].value;\n\n        // if the value is false, remove the attributee from the dom node\n        if (value === undefined || value === null || value === false) {\n          this.removeAttribute(prop);\n          return;\n        }\n\n        if (!this.getAttribute(prop)) {\n          // set the attribute with the value\n          this._settedAttributesStack[prop] = true;\n          this.setAttribute(prop, __toString(value));\n          delete this._settedAttributesStack[prop];\n        } else {\n          const currentAttributeValue = this.getAttribute(prop);\n          const currentValueStringified = __toString(value);\n          if (currentAttributeValue !== currentValueStringified) {\n            this._settedAttributesStack[prop] = true;\n            this.setAttribute(prop, currentValueStringified);\n            delete this._settedAttributesStack[prop];\n          }\n        }\n      });\n    }\n\n    /**\n     * @name        _checkPropsDefinition\n     * @type        Function\n     * @private\n     *\n     * This method simply check a property value depending on his definition such as type, required, etc...\n     * If you pass no props to check, it will check all the registered ones.\n     *\n     * @param       {Array<String>|String}        ...props        The properties to check\n     *\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    _checkPropsDefinition(...props) {\n      if (!props || props.length === 0)\n        props = Object.keys(this.constructor.props);\n      props.forEach((prop) => {\n        const propObj = this._props[prop];\n\n        const validationResult = __validateValue(propObj.value, propObj, {\n          name: `${this.constructor.name}.props.${prop}`,\n          throw: true\n        });\n        if (validationResult !== true) throw new Error(validationResult);\n      });\n    }\n  };\n}\n\n// /**\n//  * @name        on\n//  * @type        Function\n//  * @static\n//  *\n//  * This method can be used to subscribe to some SWebComponent instances events\n//  * like \"SFiltrableInput.ready\", etc...\n//  *\n//  * @param       {String}      name        The event name to subscribe to\n//  * @param       {Function}    callback    The callback function to call\n//  * @return      {Function}                A function that you can use to unsubscribe to this particular event\n//  *\n//  * @since       2.0.0\n//  * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n//  */\n// SWebComponentGenerator.on = function (name, callback) {\n//   _sWebComponentPromise.on(name, callback);\n//   return () => {\n//     _sWebComponentPromise.off(name, callback);\n//   };\n// };\n\nexport default SWebComponentGenerator;\n"
    ]
}
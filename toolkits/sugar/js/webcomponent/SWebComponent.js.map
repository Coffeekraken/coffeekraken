{
    "version": 3,
    "sources": [
        "SWebComponent.js"
    ],
    "names": [
        "_sWebComponentPromise",
        "__SPromise",
        "SWebComponent",
        "extend",
        "HTMLElement",
        "Object",
        "keys",
        "props",
        "map",
        "name",
        "settings",
        "_metas",
        "constructor",
        "componentName",
        "_settings",
        "id",
        "getAttribute",
        "_promise",
        "currentClassName",
        "setAttribute",
        "className",
        "on",
        "lit",
        "dispatch",
        "setTimeout",
        "_mount",
        "bind",
        "key",
        "attr",
        "hasAttribute",
        "_props",
        "value",
        "default",
        "previousValue",
        "undefined",
        "watch",
        "deep",
        "update",
        "path",
        "split",
        "length",
        "prop",
        "handleProp",
        "_mountDependencies",
        "_checkPropsDefinition",
        "_handlePhysicalProps",
        "_isMounted",
        "descriptionObj",
        "Promise",
        "resolve",
        "reject",
        "event",
        "callback",
        "trigger",
        "metas",
        "dashName",
        "target",
        "promises",
        "mountWhen",
        "push",
        "mountDependencies",
        "depsFns",
        "forEach",
        "fn",
        "all",
        "then",
        "attrName",
        "oldVal",
        "newVal",
        "_settedAttributesStack",
        "newValue",
        "cls",
        "originalName",
        "replace",
        "hasDot",
        "match",
        "finalCls",
        "_triggerPropsEvents",
        "eventObj",
        "action",
        "physical",
        "removeAttribute",
        "currentAttributeValue",
        "currentValueStringified",
        "propObj",
        "validationResult",
        "throw",
        "Error",
        "instance",
        "$node",
        "off"
    ],
    "mappings": "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",
    "sourcesContent": [
        "import __deepMerge from '../object/deepMerge';\nimport __SPromise from '../promise/SPromise';\nimport __parse from '../string/parse';\nimport __toString from '../string/toString';\nimport __when from '../dom/when';\nimport __camelize from '../string/camelize';\nimport __paramCase from '../string/paramCase';\nimport __uncamelize from '../string/uncamelize';\nimport __validateValue from '../validation/value/validateValue';\nimport __watch from '../object/watch';\nimport { getComponentMetas } from './register';\nimport __uniqid from '../string/uniqid';\nimport __dispatch from '../event/dispatch';\nimport __on from '../event/on';\nimport __SLitHtmlWebComponent from './SLitHtmlWebComponent';\n\n/**\n * @name              SWebComponent\n * @namespace           sugar.js.webcomponent\n * @type              Class\n * @extends           HTMLElement\n *\n * // TODO: example\n *\n * Base class that allows you to create easily new webcomponents and handle things like attributes updates,\n * base css (scss) importing, etc... Here's a list a features that this class covers:\n * - Listen for attributes changes\n * - Mount the component at a certain point in time (inViewport, visible, etc...)\n * - **Automatically cast the attributes** to their proper js variable types (Array, Object, String, etc...)\n * - **Physical props** : Specify some props that will ALWAYS be present as attribute on the component for styling purpose\n * - Define some **default CSS** that will be injected in the head automatically\n * - Specify some **required props**\n * - **Full lifecycle management** through \"events\":\n * \t  - attach: Dispatched when the component is attached to the DOM\n *    - detach: Dispatched when the component is detached from the DOM\n *    - mounting: Dispatched when the component starts to mount itself (before mountWhen and mountDependencies execution)\n *    - mounted: Dispatched when the component has be mounted properly\n *    - prop|prop.{name}: Dispatched when a property has been updated, removed or added\n *      - The object format sended with the event is this one:\n *        - { prop: 'propName', action: 'update|remove|add', value: 'Something', previousValue: 'Other' }\n * - **Mount dependencies** : This will allows you to set some promises that have to be resolved before mounting the component\n *\n * @param       {Object}        [settings={}]         A setting object to configure your webcomponent instance:\n * - defaultProps ({}) {Object}: Specify the default properties values\n * - physicalProps ([]) {Array<String>}: List all the properties that need to be ALWAYS on the html element (for styling purpose for example...)\n * - requiredProps ([]) {Array<String>}: List all the properties that MUST be passed to the component\n *\n * @example         js\n * import SWebComponent from '@coffeekraken/sugar/js/webcomponent/SWebComponent';\n * class MyCoolComponent extends SWebComponent {\n *\n *    constructor() {\n *      super();\n *    }\n *\n * }\n *\n * @since       2.0.0\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\n\nconst _sWebComponentPromise = new __SPromise();\n\nfunction SWebComponent(extend = HTMLElement) {\n  return class SWebComponent extends extend {\n    _settedAttributesStack = {};\n\n    /**\n     * @name          _promise\n     * @type          SPromise\n     * @private\n     *\n     * Store the SPromise instance used to \"dispatch\" some events\n     * that you can subscribe using the \"on\" exposed method\n     *\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    _promise = null;\n\n    /**\n     * @name          _props\n     * @type          Object\n     * @private\n     *\n     * Store all the computed properties setted using the \"setProp\" method or through the\n     * attributes\n     *\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    _props = {};\n\n    /**\n     * @name          _settings\n     * @type          Object\n     * @private\n     *\n     * Store all the webcomponent settings like \"physicalProps\", \"requiredProps\", etc...\n     *\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    _settings = {};\n\n    /**\n     * @name        observedAttributes\n     * @type        Function\n     * @get\n     * @static\n     *\n     * This medhod simply return the list of props that will be\n     * observed by the customElements under the hood system.\n     *\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    static get observedAttributes() {\n      return Object.keys(this.props).map((name) => __uncamelize(name));\n    }\n\n    /**\n     * @name          constructor\n     * @type          Function\n     * @constructor\n     *\n     * Constructor\n     *\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    constructor(settings = {}) {\n      // init base html element\n      super();\n      // get component metas\n      this._metas = getComponentMetas(this.constructor.componentName);\n      // save the settings\n      this._settings = __deepMerge(\n        {\n          id: this.getAttribute('id') || __uniqid(),\n          props: this.constructor.props || {}\n        },\n        this._metas.settings || {},\n        settings\n      );\n\n      // create the SPromise instance\n      this._promise = new __SPromise();\n\n      // apply the $node class\n      const currentClassName = this.getAttribute('class') || '';\n      this.setAttribute(\n        'class',\n        `${currentClassName} ${this.className(`node`)}`\n      );\n\n      this.on('mounted{1}', () => {\n        // dispatch a ready event\n        if (!this.lit) {\n          // the Lit HTML class dispatch the ready event after having rendering the template the first time\n          this.dispatch('ready', this);\n        }\n      });\n\n      // launch the mounting process\n      setTimeout(this._mount.bind(this));\n    }\n\n    /**\n     * @name          metas\n     * @type          Object\n     * @get\n     *\n     * This property store all the component metas informations like the name,\n     * the type, what it is extending, etc...\n     *\n     * @since       2.0.0\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    get metas() {\n      return {\n        instance: this,\n        $node: this,\n        ...this._metas\n      };\n    }\n\n    /**\n     * @name          _mount\n     * @type          Function\n     * @private\n     * @async\n     *\n     * This method handle the mounting of the component\n     *\n     * @since       2.0.0\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    async _mount() {\n      // dispatch mounting event\n      this.dispatch('mounting', this);\n\n      // handle props\n      for (const key in this._settings.props) {\n        let attr = this.getAttribute(__uncamelize(key));\n        if (!attr && this.hasAttribute(__uncamelize(key))) {\n          attr = true;\n        }\n        this._props[key] = {\n          ...this._settings.props[key],\n          value: attr ? __parse(attr) : this._settings.props[key].default,\n          previousValue: undefined\n        };\n      }\n\n      // handle props\n      for (const key in this._settings.props) {\n        // if need to be watches deeply\n        if (this._props[key].watch) {\n          this._props[key] = __watch(this._props[key], {\n            deep: this._props[key].watch === 'deep'\n          });\n          this._props[key].on('value.*:+(set|delete|push|pop)', (update) => {\n            if (update.path.split('.').length === 1) {\n              this.prop(update.path, update.value);\n            } else {\n              this.handleProp(update.path, this._props[key]);\n            }\n          });\n        }\n      }\n\n      // wait until the component match the mountDependencies and mountWhen status\n      await this._mountDependencies();\n\n      // check props definition\n      this._checkPropsDefinition();\n\n      // handle physical props\n      this._handlePhysicalProps();\n\n      // dispatch mounted event\n      this._isMounted = true;\n      this.dispatch('mounted', this);\n    }\n\n    /**\n     * @name          handleProp\n     * @type          Function\n     * @async\n     *\n     * This method is supposed to be overrided by your component integration\n     * to handle the props updates and delete actions.\n     * The passed description object has this format:\n     * ```js\n     * {\n     *    action: 'set|delete',\n     *    path: 'something.cool',\n     *    oldValue: '...',\n     *    value: '...'\n     * }\n     * ```\n     *\n     * @param     {String}      prop      The property name that has been updated or deleted\n     * @param     {Object}      descriptionObj      The description object that describe the update or delete action\n     * @return    {Promise}                A promise that has to be resolved once the update has been handled correctly. You have to pass the prop variable to the resolve function\n     *\n     * @since     2.0.0\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    handleProp(prop, descriptionObj) {\n      return new Promise((resolve, reject) => {\n        resolve(prop);\n      });\n    }\n\n    /**\n     * @name          on\n     * @type          Function\n     *\n     * Method used to subscribe to the \"events\" dispatched\n     * during the lifecycle of the component. Here's the list of events:\n     * - attach: Dispatched when the component is attached to the DOM\n     * - detach: Dispatched when the component is detached from the DOM\n     * - mounting: Dispatched when the component starts to mount itself (before mountWhen and mountDependencies execution)\n     * - mounted: Dispatched when the component has be mounted properly\n     * - prop|prop.{name}: Dispatched when a property has been updated, removed or added\n     *    - The object format sended with the event is this one:\n     *      - { prop: 'propName', action: 'update|remove|add', value: 'Something', previousValue: 'Other' }\n     *\n     * @param       {String}        event         The event you want to subscribe to\n     * @param       {Function}      callback      The callback function that has to be called\n     * @return      {SPromise}                    The SPromise used in this instance\n     *\n     * @since       2.0.0\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    on(event, callback) {\n      return this._promise.on(event, callback);\n    }\n\n    /**\n     * @name          dispatch\n     * @type          Function\n     * @private\n     *\n     * This method is used to dispatch events simultaneously through the SPromise internal instance on which you can subscribe using the \"on\" method,\n     * and through the global \"sugar.js.event.dispatch\" function on which you can subscribe using the function \"sugar.js.event.on\"\n     *\n     * @param       {String}        name          The event name to dispatch\n     * @param       {Mixed}         value         The value to attach to the event\n     *\n     * @since       2.0.0\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    dispatch(name, value) {\n      // dispatch event through the SPromise internal instance\n      this._promise.trigger(name, value || this);\n      // dispatch a general event\n      __dispatch(`${this.metas.dashName}.${name}`, {\n        target: this,\n        value\n      });\n      __dispatch(`${this.metas.dashName}#${this._settings.id}.${name}`, {\n        target: this,\n        value\n      });\n      setTimeout(() => {\n        // dispatch an SWebComponent level event\n        _sWebComponentPromise.trigger(`${this.metas.dashName}.${name}`, {\n          target: this,\n          value\n        });\n        _sWebComponentPromise.trigger(\n          `${this.metas.dashName}#${this._settings.id}.${name}`,\n          {\n            target: this,\n            value\n          }\n        );\n      });\n    }\n\n    /**\n     * @name          _mountDependencies\n     * @type          Function\n     * @private\n     * @async\n     *\n     * This method simply delay the mounting process of the component\n     * based on different settings \"properties\":\n     * - mountWhen (null) {String}: Specify when you want the component to be mounted. Can be:\n     *    - inViewport: Mount the component only when it appears in the viewport\n     *    - visible: Mount the component when the component became visible (like display:none; to display:block; for example)\n     *    - domReady: Mount the component when the DOM is ready\n     *    - transitionEnd. Mount the component when the transition is ended\n     * - mountDependencies (null) {Function|Array<Function>}: Specify one/some function(s) that returns a Promise and that need to be all resolved before mounting the component\n     *\n     * @return      {Promise}               Return a promise that will be resolved once every \"dependencies\" are satisfied\n     *\n     * @since       2.0.0\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    _mountDependencies() {\n      return new Promise((resolve, reject) => {\n        let promises = [];\n\n        // check if we have a \"mountWhen\" setting specified\n        if (this._settings.mountWhen) {\n          promises.push(__when(this._settings.mountWhen));\n        }\n\n        // check if we have one/some \"mountDependencies\" setting specified\n        if (this._settings.mountDependencies) {\n          const depsFns = [...this._settings.mountDependencies];\n          depsFns.forEach((fn) => {\n            promises.push(fn());\n          });\n        }\n\n        // wait until all promises are resolved\n        Promise.all(promises).then(() => {\n          resolve();\n        });\n      });\n    }\n\n    /**\n     * @name          connectedCallback\n     * @type          Function\n     *\n     * Called when the component is attached to the dom\n     *\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    connectedCallback() {\n      // dispatch \"event\"\n      setTimeout(() => {\n        this.dispatch('attach', this);\n      });\n    }\n\n    /**\n     * @name          disconnectedCallback\n     * @type          Function\n     *\n     * Called when the component is detached from the dom\n     *\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    disconnectedCallback() {\n      // dispatch \"event\"\n      this.dispatch('detach', this);\n    }\n\n    /**\n     * @name            attributeChangedCallback\n     * @type            Function\n     *\n     * Called when an attribute is removed, added or updated\n     *\n     * @param     {String}      attrName      The attribute name\n     * @param     {Mixed}       oldVal        The old attribute value\n     * @param     {Mixed}       newVal        The new attribute value\n     *\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    attributeChangedCallback(attrName, oldVal, newVal) {\n      if (!this._isMounted) return;\n      if (this._settedAttributesStack[attrName]) return;\n\n      // const previousValue = __parse(oldVal);\n      const newValue = __parse(newVal) || false;\n\n      // set the value into the props\n      this.prop(attrName, newValue);\n    }\n\n    /**\n     * @name            className\n     * @type            Function\n     *\n     * This method return you a className generated depending on the\n     * webcomponent name\n     *\n     * @param       {String}      cls         The class name to use\n     * @return      {String}                  The generated class name\n     *\n     * @since       2.0.0\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    className(cls = '') {\n      const originalName = __uncamelize(this.constructor.name).replace(\n        '-web-component',\n        ''\n      );\n\n      const hasDot = cls.match(/^\\./);\n      cls = cls.replace('.', '');\n\n      let finalCls;\n      if (cls.match(/^(--)/)) finalCls = `${this.metas.dashName}${cls}`;\n      else if (cls !== '') finalCls = `${this.metas.dashName}__${cls}`;\n      else finalCls = this.metas.dashName;\n\n      if (cls.match(/^(--)/)) {\n        finalCls = `${hasDot ? '.' : ''}${originalName}-bare${cls} ${\n          hasDot ? '.' : ''\n        }${finalCls}`;\n      } else if (cls !== '') {\n        finalCls = `${hasDot ? '.' : ''}${originalName}-bare__${cls} ${\n          hasDot ? '.' : ''\n        }${finalCls}`;\n      } else {\n        finalCls = `${hasDot ? '.' : ''}${originalName}-bare ${\n          hasDot ? '.' : ''\n        }${finalCls}`;\n      }\n\n      return finalCls;\n    }\n\n    /**\n     * @name        prop\n     * @type        Function\n     *\n     * Get of set a property\n     *\n     * @param       {String}      prop      The property you want to get/set\n     * @param       {Mixed}       [value=undefined]    The value you want to set\n     * @return      {Mixed}                 The property value\n     *\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    prop(prop, value = undefined) {\n      // camelize the attribute name\n      prop = __camelize(prop);\n\n      if (value === undefined) {\n        return this._props[prop] ? this._props[prop].value : undefined;\n      }\n      this._props[prop].previousValue = this._props[prop]\n        ? this._props[prop].value\n        : undefined;\n      this._props[prop].value = value;\n\n      this.handleProp(prop, this._props[prop]);\n\n      // handle physical props\n      this._handlePhysicalProps(prop);\n\n      // trigger a \"prop\" event\n      this._triggerPropsEvents(prop);\n\n      return value;\n    }\n\n    /**\n     * @name        _triggerPropsEvents\n     * @type        Function\n     * @private\n     *\n     * This method simply trigger a prop|prop.{name} event through the SPromise instance.\n     *\n     * @param     {String}      prop      The property name to trigger event for\n     *\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    _triggerPropsEvents(prop) {\n      // trigger a \"prop\" event\n      const eventObj = {\n        prop,\n        action:\n          this._props[prop].previousValue !== null\n            ? this._props[prop].value !== null\n              ? 'set'\n              : 'delete'\n            : 'set',\n        value: this._props[prop].value,\n        previousValue: this._props[prop].previousValue\n      };\n\n      this.dispatch(`prop.${prop}.${eventObj.action}`, eventObj);\n    }\n\n    /**\n     * @name        _handlePhysicalProps\n     * @type        Function\n     * @private\n     *\n     * This method make sure that all the defined physical props are\n     * setted as attribute on the DOM element\n     *\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    _handlePhysicalProps(...props) {\n      if (!props || props.length === 0) props = Object.keys(this._props);\n\n      // loop on each required props\n      props.forEach((prop) => {\n        if (!this._props[prop].physical) return;\n\n        const value = this._props[prop].value;\n\n        // if the value is false, remove the attributee from the dom node\n        if (value === undefined || value === null || value === false) {\n          this.removeAttribute(prop);\n          return;\n        }\n\n        if (!this.getAttribute(prop)) {\n          // set the attribute with the value\n          this._settedAttributesStack[prop] = true;\n          this.setAttribute(prop, __toString(value));\n          delete this._settedAttributesStack[prop];\n        } else {\n          const currentAttributeValue = this.getAttribute(prop);\n          const currentValueStringified = __toString(value);\n          if (currentAttributeValue !== currentValueStringified) {\n            this._settedAttributesStack[prop] = true;\n            this.setAttribute(prop, currentValueStringified);\n            delete this._settedAttributesStack[prop];\n          }\n        }\n      });\n    }\n\n    /**\n     * @name        _checkPropsDefinition\n     * @type        Function\n     * @private\n     *\n     * This method simply check a property value depending on his definition such as type, required, etc...\n     * If you pass no props to check, it will check all the registered ones.\n     *\n     * @param       {Array<String>|String}        ...props        The properties to check\n     *\n     * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n     */\n    _checkPropsDefinition(...props) {\n      if (!props || props.length === 0) props = Object.keys(this._props);\n      props.forEach((prop) => {\n        const propObj = this._props[prop];\n\n        const validationResult = __validateValue(propObj.value, propObj, {\n          name: `${this.constructor.name}.props.${prop}`,\n          throw: true\n        });\n        if (validationResult !== true) throw new Error(validationResult);\n      });\n    }\n  };\n}\n\n/**\n * @name        on\n * @type        Function\n * @static\n *\n * This method can be used to subscribe to some SWebComponent instances events\n * like \"SFiltrableInput.ready\", etc...\n *\n * @param       {String}      name        The event name to subscribe to\n * @param       {Function}    callback    The callback function to call\n * @return      {Function}                A function that you can use to unsubscribe to this particular event\n *\n * @since       2.0.0\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nSWebComponent.on = (name, callback) => {\n  _sWebComponentPromise.on(name, callback);\n  return () => {\n    _sWebComponentPromise.off(name, callback);\n  };\n};\n\nexport default SWebComponent;\n"
    ]
}
{
    "version": 3,
    "sources": [
        "whenTransitionEnd.js"
    ],
    "names": [
        "whenTransitionEnd",
        "elm",
        "cb",
        "Promise",
        "resolve",
        "reject",
        "transition",
        "setTimeout",
        "totalDuration"
    ],
    "mappings": ";;;;;;;AAAA;;;;AAEA;;;;;;;;;;;;;;;;;;;AAmBe,SAASA,iBAAT,CAA2BC,GAA3B,EAAgCC,EAAhC,EAA2C;AAAA,MAAXA,EAAW;AAAXA,IAAAA,EAAW,GAAN,IAAM;AAAA;;AACxD,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,QAAMC,UAAU,GAAG,sCAA0BL,GAA1B,CAAnB;AACAM,IAAAA,UAAU,CAAC,MAAM;AACfH,MAAAA,OAAO;AACPF,MAAAA,EAAE,IAAIA,EAAE,EAAR;AACD,KAHS,EAGPI,UAAU,CAACE,aAHJ,CAAV;AAID,GANM,CAAP;AAOD",
    "sourcesContent": [
        "import __getTransitionProperties from './getTransitionProperties';\n\n/**\n * @name      whenTransitionEnd\n * @namespace           sugar.js.dom\n * @type      Function\n *\n * Monitor an HTMLElement to be notified when his transition has ended\n *\n * @param \t\t{HTMLElement} \t\t\t\telm \t\tThe element to monitor\n * @param \t\t{Function} \t\t\t\t\t[cb=null] \tAn optional callback to call when the element transition has ended\n * @return \t\t(Promise) \t\t\t\t\t\t\t\tThe promise that will be resolved when the element transition has ended\n *\n * @example \tjs\n * import whenTransitionEnd from '@coffeekraken/sugar/js/dom/whenTransitionEnd'\n * whenTransitionEnd(myCoolHTMLElement).then((elm) => {\n * \t\t// do something with your element transition has ended...\n * });\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function whenTransitionEnd(elm, cb = null) {\n  return new Promise((resolve, reject) => {\n    const transition = __getTransitionProperties(elm);\n    setTimeout(() => {\n      resolve();\n      cb && cb();\n    }, transition.totalDuration);\n  });\n}\n"
    ]
}
/**
  * @name            ol-classes
  * @namespace       sugar.scss.component.ol.class
  * @type            Mixin
  *
  * This mixin generate all the css needed to display properly some ordered lists.
  *
  * @feature
  *
  * @param       {List}      [$colors:map-keys(setting('colors'))]       The colors you want to generate
  * @param       {List}      [$sizes:map-keys(setting('sizes'))]       The sizes you want to generate
  * @param       {String}        [$name='ol']       The className to use for the generation
  *
  * @example         html
  * <ol class="#{sel(ol)}">
  *   <li class="#{sel(ol__li)}">I'm a cool ordered list item</li>
  *   <li class="#{sel(ol__li)}">I'm a cool ordered list item</li>
  *   <li class="#{sel(ol__li)}">I'm a cool ordered list item</li>
  *   <li class="#{sel(ol__li)}">I'm a cool ordered list item</li>
  *   <li class="#{sel(ol__li)}">I'm a cool ordered list item</li>
  *   <li class="#{sel(ol__li)}">I'm a cool ordered list item</li>
  *   <li class="#{sel(ol__li)}">I'm a cool ordered list item</li>
  * </ol>
  *
  * @example           scss
  * @include Sugar.ol-classes();
  *
  * @since       2.0.0
  * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
  */
@mixin ol-classes(
  $colors: map-keys(setting('colors')),
  $sizes: map-keys(setting('sizes')),
  $separator: '.',
  $name: 'ol'
) {
  @if class-match-namespace('sugar.component.ol') {
    @if scope('bare') {
      @each $size in $sizes {
        /**
      * @name              .#{sel(#{$name}--#{$size})}, .#{sel(#{tf-class()})} ol.#{sel($size)}
      * @namespace         sugar.scss.component
      * @type              Classname
      *
      * This class can be applied on any ```#{$name}``` component to specify his size to ```#{$size}```
      *
      * @example         html
      * <ol class="#{sel(#{$name}--#{$size})}">
        *   <li class="#{sel(#{$name}__li)}">I'm a cool ordered list item</li>
        *   <li class="#{sel(#{$name}__li)}">I'm a cool ordered list item</li>
        *   <li class="#{sel(#{$name}__li)}">I'm a cool ordered list item</li>
        *   <li class="#{sel(#{$name}__li)}">I'm a cool ordered list item</li>
        *   <li class="#{sel(#{$name}__li)}">I'm a cool ordered list item</li>
        *   <li class="#{sel(#{$name}__li)}">I'm a cool ordered list item</li>
        *   <li class="#{sel(#{$name}__li)}">I'm a cool ordered list item</li>
        * </ol>    *
      * @since       2.0.0
      * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
      */
        .#{sel(#{tf-class()})} #{$name}.#{$size},
        .#{sel($name)}.#{sel('#{$name}--#{$size}')} {
          @include ol(
            $size: $size,
            $separator: $separator,
            $scope: 'bare'
          );
        }
      }
    }

    @if scope('style') {
      @each $color in $colors {
        /**
      * @name              .#{sel(#{$name}--#{$color})}, .#{sel(#{tf-class()})} ol.#{sel($color)}
      * @namespace         sugar.scss.component
      * @type              Classname
      *
      * This class can be applied on any ```#{$name}``` component to specify his size to ```#{$color}```
      *
      * @example         html
      * <ol class="#{sel(#{$name})} #{sel(#{$name}--#{$color})}">
        *   <li class="#{sel(#{$name}__li)}">I'm a cool ordered list item</li>
        *   <li class="#{sel(#{$name}__li)}">I'm a cool ordered list item</li>
        *   <li class="#{sel(#{$name}__li)}">I'm a cool ordered list item</li>
        *   <li class="#{sel(#{$name}__li)}">I'm a cool ordered list item</li>
        *   <li class="#{sel(#{$name}__li)}">I'm a cool ordered list item</li>
        *   <li class="#{sel(#{$name}__li)}">I'm a cool ordered list item</li>
        *   <li class="#{sel(#{$name}__li)}">I'm a cool ordered list item</li>
        * </ol>    *
      * @since       2.0.0
      * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
      */
        .#{sel(#{tf-class()})} #{$name}.#{$color},
        .#{sel($name)}.#{sel('#{$name}--#{$color}')} {
          @include ol(
            $color: $color,
            $scope: 'style',
            $separator: $separator
          );
        }
      }
    }
  }
}

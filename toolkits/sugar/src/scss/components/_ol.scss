/**
  * @name            ol-classes
  * @namespace       sugar.scss.components
  * @type            Mixin
  *
  * This mixin generate all the css needed to display properly some ordered lists.
  *
  * @feature
  *
  * @param       {List}      [$colors:map-keys(setting('colors'))]       The colors you want to generate
  * @param       {List}      [$sizes:map-keys(setting('sizes'))]       The sizes you want to generate
  * @param       {String}        [$name='ol']       The className to use for the generation
  *
  * @example         html
  * <ol class="s-ol">
  *   <li class="s-ol__li">I'm a cool ordered list item</li>
  *   <li class="s-ol__li">I'm a cool ordered list item</li>
  *   <li class="s-ol__li">I'm a cool ordered list item</li>
  *   <li class="s-ol__li">I'm a cool ordered list item</li>
  *   <li class="s-ol__li">I'm a cool ordered list item</li>
  *   <li class="s-ol__li">I'm a cool ordered list item</li>
  *   <li class="s-ol__li">I'm a cool ordered list item</li>
  * </ol>
  *
  * @example           scss
  * @include Sugar.ol-classes();
  *
  * @since       2.0.0
  * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
  */
@mixin ol-classes(
  $colors: map-keys(setting('colors')),
  $sizes: map-keys(setting('sizes')),
  $name: 'ol'
) {
  @include ol-bare-classes($sizes, $name);
  @include ol-style-classes($colors, $name);
}


/**
 * @name              ol-bare-classes
 * @namespace         sugar.scss.components.ol
 * @type              Mixin
 *
 * This mixin generate all the bare classes depending on the parameters you set.
 *
 * @param       {List}      [$sizes:map-keys(setting('sizes'))]       The sizes you want to generate
 * @param       {String}      [$name='ol']                         The name to use for the generation of the classes
 *
 * @since       2.0.0
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
 @mixin ol-bare-classes(
  $sizes: map-keys(setting('sizes')),
  $name: 'ol'
) {
  @each $size in $sizes {
    /**
     * @name              #{selector(#{$name}--#{$size})}
     * @namespace         sugar.scss.components.ol.sizes
     * @type              Classname
     *
     * This class can be applied on any ```#{$name}``` component to specify his size to ```#{$size}```
     *
     * @example         html
     * <ol class="#{$name} #{selector(#{$name}--#{$size})}">
     *    <li>I'm a cool ordered list item</li>
     *    <li>I'm a cool ordered list item</li>
     *    <li>I'm a cool ordered list item</li>
     *    <li>I'm a cool ordered list item</li>
     *    <li>I'm a cool ordered list item</li>
     *    <li>I'm a cool ordered list item</li>
     *    <li>I'm a cool ordered list item</li>
     * </ol>
     *
     * @since       2.0.0
     * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
     */
    #{selector(#{$name}--#{$size})} {
      @include ol-bare($size);
    }
  }
}


/**
 * @name              ol-style-classes
 * @namespace         sugar.scss.components.ol
 * @type              Mixin
 *
 * This mixin generate all the style classes depending on the parameters you set.
 *
 * @param       {List}      [$colors:map-keys(setting('colors'))]       The colors you want to generate
 * @param       {String}      [$name='ol']                         The name to use for the generation of the classes
 *
 * @since       2.0.0
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
 @mixin ol-style-classes(
  $colors: map-keys(setting('colors')),
  $name: 'ol'
) {
  @each $color in $colors {
    /**
     * @name              #{selector(#{$name}--#{$color})}
     * @namespace         sugar.scss.components.ol.colors
     * @type              Classname
     *
     * This class can be applied on any ```#{$name}``` component to specify his color to ```#{$color}```
     *
     * @example         html
     * <ol class="#{$name} #{selector(#{$name}--#{$color})}">
     *    <li>I'm a cool ordered list item</li>
     *    <li>I'm a cool ordered list item</li>
     *    <li>I'm a cool ordered list item</li>
     *    <li>I'm a cool ordered list item</li>
     *    <li>I'm a cool ordered list item</li>
     *    <li>I'm a cool ordered list item</li>
     *    <li>I'm a cool ordered list item</li>
     * </ol>
     *
     * @since       2.0.0
     * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
     */
    #{selector(#{$name}--#{$color})} {
      @include ol-style($color);
    }
  }
}


/**
 * @name              ol-bare
 * @namespace         sugar.scss.components.ol
 * @type              Mixin
 *
 * This mixin generate all the bare properties for a list depending on the parameters you set.
 *
 * @param       {List}      [$size=default]                 The size you want to for your list
 *
 * @since       2.0.0
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
 @mixin ol-bare(
  $size: default,
) {
  display: block;
  line-height: setting('look-and-feel.line-height');
}


/**
 * @name              ol-style
 * @namespace         sugar.scss.components.ol
 * @type              Mixin
 *
 * This mixin generate all the style properties for a list depending on the parameters you set.
 *
 * @param       {List}      [$color=primary]                The color you want for your list
 *
 * @since       2.0.0
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
@mixin ol-style(
  $color: primary,
  $separator: '.'
) {
  list-style: none;
  counter-reset: li;

  & > li {
    counter-increment: li;
    padding-left: 2.5em;
    position: relative;

    &::before {
      content: counter(li) "#{$separator}";
      color: color($color);
      display: inline-block;
      width: 2em;
      position: absolute;
      top: 0; left: 0;
      text-align: right;
    }
  }
}

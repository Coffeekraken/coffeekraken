/**
  * @name            paragraph-classes
  * @namespace       sugar.scss.components
  * @type            Mixin
  *
  * This mixin generate all the css needed to display properly some paragraphs.
  *
  * @param       {List<String>}      [$levels=map-keys(setting('typography.paragraphs'))]                                List all paragraphs "names" you want to generate
  * @param          {String}        [$name='p']                 The name you want for your paragraphs
  * @param         {List<String>}    [$scope=null]       The scope you want to generate. Usually "all", "bare" or "style"            
  *
  * @example         html
  * <p class="#{sel(p)}">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec facilisis purus ac rhoncus mollis. Mauris lacinia velit purus, sit amet aliquet odio imperdiet in. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Duis rhoncus magna et dui bibendum, id suscipit dui consectetur. Nulla facilisi. Vivamus a metus nunc. Pellentesque eu lectus a velit consequat condimentum. Donec ac dolor sed enim posuere fringilla et dapibus metus. Nam id vehicula enim. In hac habitasse platea dictumst. Phasellus ultricies eros et neque blandit pulvinar. Proin nec urna auctor, porttitor ligula eu, fermentum risus. Etiam non eros blandit, pellentesque purus quis, viverra arcu.</p>
  *
  * @example           scss
  * @include Sugar.paragraph-classes();
  *
  * @since       2.0.0
  * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
  */
  @mixin paragraph-classes(
    $names: map-keys(setting('typography.paragraphs')),
    $name: 'p',
    $scope: null
  ) {

   @each $n in $names {
   /**
    * @name              .#{sel(#{$name}--#{$n})}, .#{sel(#{text-format-class()})} #{sel('p.#{$n}', null)}
    * @namespace         sugar.scss.components
    * @type              Classname
    *
    * This class can be applied on any ```#{$name}``` component to specify his style
    *
    * @example         html
    * <p class="#{sel(p--#{$n})}">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec facilisis purus ac rhoncus mollis. Mauris lacinia velit purus, sit amet aliquet odio imperdiet in. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Duis rhoncus magna et dui bibendum, id suscipit dui consectetur. Nulla facilisi. Vivamus a metus nunc. Pellentesque eu lectus a velit consequat condimentum. Donec ac dolor sed enim posuere fringilla et dapibus metus. Nam id vehicula enim. In hac habitasse platea dictumst. Phasellus ultricies eros et neque blandit pulvinar. Proin nec urna auctor, porttitor ligula eu, fermentum risus. Etiam non eros blandit, pellentesque purus quis, viverra arcu.</p>
    *
    * @since       2.0.0
    * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
    */
    .#{sel(#{text-format-class()})} #{sel('p.#{$n}', null)},
    .#{sel(#{$name}--#{$n})} {
       @include paragraph($n, $scope);
    }
  }
}
  
/**
 * @name              paragraph
 * @namespace         sugar.scss.components
 * @type              Mixin
 *
 * This mixin generate all the properties for a paragraph depending on the parameters you set.
 *
 * @param         {Number}Â        $level          The paragraph level you want to generate
 * @param         {List<String>}    [$scope=null]       The scope you want to generate. Usually "all", "bare" or "style"            
 *
 * @since       2.0.0
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
@mixin paragraph(
  $name,
  $scope: null
) {
    @include scope('bare', $scope) {
        display: block;
        $size: setting('typography.paragraphs.h#{$name}.font-size');
        font-size: font-size($size);
    }
    @include scope('style', $scope) {
        $family: setting('typography.paragraphs.h#{$name}.font-family');
        font-family: font-family($family);

        $props: setting('typography.paragraphs.#{$name}');
        @each $prop in map-keys($props) {
            @if $prop != 'font-size' and $prop != 'font-family' {
                #{$prop}: map-get($props, $prop);
            }
        }
    }
}

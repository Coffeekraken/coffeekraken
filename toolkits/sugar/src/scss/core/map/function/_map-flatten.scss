@use 'sass:meta';
@use 'sass:list';

/**
 * @name            map-flatten
 * @namespace       sugar.scss.core.map.function
 * @type            Function
 *
 * This function take a map (that can be a deep one) and returns you a new map with all the
 * properties flatten using the passed "separator"
 *
 * @param       {Map}       $map          The map to flatten
 * @param       {String}    [$separator="-"]      The separator to use in final map keys
 * @return      {Map}Â                 The flattened map
 *
 * @example       scss
 * $map: (
 *    something: (
 *       cool: 'Hello world'
 *    )
 * )
 * map-flatten($map);
 * (
 *    something-cool: 'Hello world'
 * )
 *
 * @since       2.0.0
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
$flattenMap: ();
$flattenMapValues: ();
@function map-flatten($map, $separator: '-', $_path: '') {
  $list: () !default;

  // @if $_initialKey == '' {
  //   $flattenMap: () !global;
  // }

  $values: ();
  // loop on each keys
  @each $key, $value in $map {
    // @if $_initialKey == '' {
    //   $flattenMap: map-set($flattenMap, $key, '') !global;
    // }

    // $toAdd: "#{map-get($flattenMap, $_initialKey)}.#{$key}";
    // @if $_initialKey == '' {
    //   $toAdd: $key;
    // }
    // $setKey: $_initialKey;
    // @if $_initialKey == '' {
    //   $setKey: $key;
    // }

    $setPath: '#{$_path}.#{$key}';
    @if $_path == '' {
      $setPath: '#{$key}';
    }

    @if meta.type-of($value) == map {
      // $flattenMap: map-set($flattenMap, $setKey, $toAdd) !global;
      $res: map-flatten($value, $separator, $setPath);
    } @else {
      // add to values :
      $flattenMap: map-set($flattenMap, $setPath, $value) !global;
    }
  }

  $finalMap: ();
  @each $key, $value in $flattenMap {
    @if $key != null {
      $setKey: str-replace($key, '.', $separator);
      $finalMap: map-set($finalMap, $setKey, $value);
    }
  }

  @return $finalMap;

  // // return values
  // @return $finalMap;
}

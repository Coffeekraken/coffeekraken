@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "sass:string";
/**
 * @name      setting
 * @namespace           sugar.scss.core.setting.function
 * @type    function
 *
 * Get a settings from the global settings stack
 *
 * @param 				{String} 			$path 						The setting path wanted separated by dots
 * @param 				{String} 			[$context=s-context()] 		The context name to get the setting
 * @param 				{Mixed} 			[$default=null] 			The value to return if no value is found
 * @return 				{Mixed} 										The setting valueÂ¨
 *
 * @example
 * $font-size : Sugar.setting('typography.font-size');
 * // etc...
 *
 * @since       1.0.0
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
@function setting($path, $context: $__current-context, $default: null) {
  $base_path: $path;
  @if $context == default {
    $context: null;
  }

  // check if has a component
  @if $context {
    $path: '#{$context}.#{$path}';
  }
  $value: map-get($__settings, $path);

  @if not $value and $context {
    // try to get the value from the base component
    $value: setting($base_path, default, $default);
  }

  // if no value
  @if not $value {
    @return $default;
  }

  // trim the value if is a string
  @if type-of($value) == string {
    $value: str-trim($value);
  }

  // @if meta.type-of($value) == 'list' {
  //   $stringValue: str-trim(inspect($value));
  //   @if string.slice($stringValue,0,2) == '""' {
  //     // $stringValue: string.slice($stringValue,2);
  //     $stringValue: str-replace($stringValue, '""', '');
  //     $value: str-trim($stringValue);
  //   }
  // }

  // return the value
  @return $value;
}

/**
 * @name      loader-circle
 * @namespace           sugar.scss.loader.mixin
 * @type      Mixin
 *
 * Generate a full animated, single element, circle loader
 *
 * @param 			{Color} 			[$color=primary] 			The color(s) of the loader. Can be a list of colors
 * @param 			{Number} 			[$size=.33em] 				The size of each dot
 * @param 			{Number} 			[$radius=2em] 				The distance of each dot from the center of the loader
 * @param 			{Integer} 			[$count=8] 					How many bars you want
 * @param 			{Number} 			[$opacity=1] 				The initial opacity of each bars
 * @param 			{Number} 			[$a-opacity=null] 			The opacity of the animated bars
 * @param 			{Second} 			[$a-duration=1s] 			The overall animation duration
 * @param 			{Second} 			[$a-delay=0s] 				The delay between two animation cycle
 * @param 			{Integer} 			[$a-near=2] 				How many bars are affected by the animated one
 * @param 			{String} 			[$a-ease=ease-in-out] 		The ease to use to animate each bars
 * @param       {Number}       [$a-spread=2em]        How many distance the points have to be animated
 * @param       {Number}        [$a-rotate=null]      How many degrees have the points to be animated
 * @param       {Number}        [$a-scale=1em]        How many scale have the points to be animated
 *
 * @example     scss
 * .my-cool-loader {
 *    @include Sugar.loader-circle(
 *      $color: Sugar.color(primary)
 *    );
 * }
 *
 * @since       1.0.0
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
@mixin loader-circle(
  $color: primary,
  $size: 0.33em,
  $radius: 2em,
  $count: 8,
  $opacity: 1,
  $a-opacity: null,
  $a-duration: 1s,
  $a-delay: 0s,
  $a-ease: ease-in-out,
  $a-near: 2,
  $a-spread: 2em,
  $a-rotate: null,
  $a-scale: 1em
) {
  $color: test-argument(
    'Sugar.loader-circle',
    'color',
    'color|list-color|list-string',
    $color
  );
  $size: test-argument('Sugar.loader-circle', 'size', number, $size);
  $radius: test-argument('Sugar.loader-circle', 'radius', number, $radius);
  $count: test-argument('Sugar.loader-circle', 'count', integer, $count);
  $opacity: test-argument('Sugar.loader-circle', 'opacity', number, $opacity);
  $a-spread: test-argument(
    'Sugar.loader-circle',
    'a-spread',
    number,
    $a-spread
  );
  $a-rotate: test-argument(
    'Sugar.loader-circle',
    'a-rotate',
    degree,
    $a-rotate
  );
  $a-scale: test-argument('Sugar.loader-circle', 'a-scale', number, $a-scale);
  $a-opacity: test-argument(
    'Sugar.loader-circle',
    'a-opacity',
    number,
    $a-opacity
  );
  $a-near: test-argument('Sugar.loader-circle', 'a-near', number, $a-near);
  $a-ease: test-argument('Sugar.loader-circle', 'a-ease', string, $a-ease);
  $a-duration: test-argument(
    'Sugar.loader-circle',
    'a-duration',
    second,
    $a-duration
  );
  $a-delay: test-argument('Sugar.loader-circle', 'a-delay', second, $a-delay);

  // handle colors
  $colors: null;
  @if is($color, list-color) and list-length($color) > 1 {
    $colors: $color;
  } @else {
    $color: color($color);
  }

  // manage near
  @if not $a-near {
    $a-near: $count / 2;
  }

  $a-name: str-unquote('circle-#{str-unique-id()}');
  // manage duration
  $a-duration: $a-duration + $a-delay;

  $base-shadows: ();
  @for $i from 0 through $count - 1 {
    $angle: 359.9deg / $count * $i;
    $x: $radius * math-cos($angle);
    $y: $radius * math-sin($angle);
    $c: $color;
    @if $colors {
      $c: list-nth($colors, $i + 1);
    }
    @if $opacity {
      $c: color-transparentize($c, 1 - $opacity);
    }
    $base-shadows: list-append($base-shadows, $c $x $y 0 0, comma);
  }

  $spread-map: ();
  // calculate percentage of delay
  $p-delay: 0;
  $p-step: 1 / $count;
  @if $a-delay > 0 {
    $p-delay: 1 / $a-duration * $a-delay;
    $p-step: (1 - $p-delay) / ($count + 1);
  }
  // animation
  @keyframes #{$a-name} {
    @for $step-idx from 0 through $count {
      $p: math-percentage($step-idx * $p-step);
      @if $a-delay > 0 {
        $p: math-percentage($step-idx * $p-step) + math-percentage($p-step);
      }
      #{$p} {
        $shadows: ();
        @for $count-idx from 0 through $count - 1 {
          $x: $radius * math-cos(359.9deg / $count * $count-idx);
          $y: $radius * math-sin(359.9deg / $count * $count-idx);

          $diff: math-abs($step-idx - $count-idx);
          @if $step-idx + $a-near > $count and $count-idx - $a-near < 0 {
            $diff: math-abs($count-idx - ($step-idx - $count));
          } @else if $step-idx - $a-near < 0 and $count-idx + $a-near > $count {
            $diff: math-abs($step-idx + ($count - $count-idx));
          }

          $c: $color;
          @if $colors {
            $c: list-nth($colors, $count-idx + 1);
          }
          $_opacity: 1;
          @if $a-opacity {
            @if $diff < $a-near {
              $_opacity: ($a-opacity - $opacity) / $a-near * ($a-near - $diff);
              $o: $opacity + $_opacity;
              // $transparentize : $_opacity;
              $c: color-transparentize($c, 1 - $o);
            } @else if $opacity {
              $c: color-transparentize($c, 1 - $opacity);
            }
          } @else if $opacity {
            $c: color-transparentize($c, 1 - $opacity);
          }
          $scale: $size;
          @if $a-scale {
            @if $diff == 0 {
              $scale: $a-scale;
            } @else if $diff <= $a-near {
              $s: $a-scale - $size;
              $scale: $size + $s - $s / $a-near * $diff;
            }
          }
          @if $a-spread and $diff < $a-near {
            $randX: math-random(math-round($a-spread / 2));
            $randY: math-random(math-round($a-spread / 2));
            @if math-random(10) < 5 {
              $randX: $randX * -1;
            }
            @if math-random(10) < 5 {
              $randY: $randY * -1;
            }
            @if $step-idx == 0 {
              $s: (
                x: $randX,
                y: $randY
              );
              $spread-map: map-set($spread-map, $count-idx, $s);
            }
            @if $step-idx == $count {
              // TODO       check for this error
              $map: map-get($spread-map, $count-idx);
              @if $map {
                $randX: map-get($map, x);
                $randY: map-get($map, y);
              } @else {
                $randX: 0;
                $randY: 0;
              }
            }
            $x: $x + $randX;
            $y: $y + $randY;
          }
          @if $count-idx < $count {
            $shadows: list-append($shadows, $x $y 0 ($scale - $size) $c, comma);
          }
        }
        box-shadow: $shadows;
      }
    }
    @if $a-delay >
      0 and
      math-percentage($count * $p-step) +
      math-percentage($p-step) <
      100
    {
      #{math-percentage($count * $p-step) + math-percentage($p-step) * 2} {
        box-shadow: $base-shadows;
      }
    }
  }
  &:after {
    border-radius: 50%;
    width: $size;
    height: $size;
    display: block;
    content: '';
    box-shadow: $base-shadows;
    animation: $a-name $a-duration $a-ease 0s infinite;
  }
  // transform: translateX(-50%) translateY(-50%) rotate(-90deg);
}

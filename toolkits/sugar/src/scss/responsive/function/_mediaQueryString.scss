/**
 * @name            mediaQueryString
 * @namespace       sugar.scss.responsive.function
 * @type            Function
 *
 * This function return the media query string depending on the query asked.
 * The queries are defined in the config.media.queries configuration.
 *
 * @param        {String}          $medias       The media query name(s) you want back
 * @return       {String}                       The media query string
 *
 * @example         scss
 * Sugar.mediaQueryString(mobile); // => screen and (max-width: 639)
 *
 * @since           2.0.0
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
@function mediaQueryString($medias) {
  @if type-of($medias) != string {
    $medias: inspect($medias);
  }
  $medias: str-split($medias, ' ');

  $fullQueriesList: ();

  @each $media in $medias {
    $firstChar: str-slice($media, 0, 1);
    $firstTwoChars: str-slice($media, 0, 2);
    $mediaName: $media;
    $action: setting('media.defaultAction');

    // determine the real media name and the action to apply
    @if $firstTwoChars == '>=' or $firstTwoChars == '<=' {
      $mediaName: str-slice($media, 3);
      $action: $firstTwoChars;
    } @else if $firstChar == '<' or $firstChar == '>' or $firstChar == '=' {
      $mediaName: str-slice($media, 2);
      $action: $firstChar;
    }

    // get the media settings and make sure it exists in the config files
    $mediaSettings: setting('media.queries.#{$mediaName}');

    @if not $mediaSettings {
      @error ("It seem's that the requested media \"#{$mediaName}\" does not exist...");
    }

    $queryList: ();
    @each $key, $value in $mediaSettings {
      @if $value == null {
        $value: 0;
      }
      @if $key ==
        'min-width' or
        $key ==
        'max-width' or
        $key ==
        'min-device-width' or
        $key ==
        'max-device-width'
      {
        @if $action == '>' {
          @if $key == 'max-width' or $key == 'max-device-width' {
            $argName: 'min-width';
            @if str-index($key, '-device') != null {
              $argName: 'min-device-width';
            }
            $queryList: list-append(
              $queryList,
              '(#{$argName}: #{to-px($value)+1})'
            );
          }
        } @else if $action == '<' {
          @if $key == 'min-width' or $key == 'min-device-width' {
            $argName: 'max-width';
            @if str-index($key, '-device') != null {
              $argName: 'max-device-width';
            }
            $queryList: list-append(
              $queryList,
              '(#{$argName}: #{to-px($value)})'
            );
          }
        } @else if $action == '=' {
          $queryList: list-append($queryList, '(#{$key}: #{to-px($value)})');
        } @else if $action == '>=' {
          @if $key == 'min-width' or $key == 'min-device-width' {
            $queryList: list-append($queryList, '(#{$key}: #{to-px($value)})');
          }
        } @else if $action == '<=' {
          @if $key == 'max-width' or $key == 'max-device-width' {
            $queryList: list-append($queryList, '(#{$key}: #{to-px($value)})');
          }
        }
      } @else {
        $queryList: list-append($queryList, '(#{$key}: #{$value})');
      }
    }
   
    // append the query list into the full queries list
    $fullQueriesList: list-append(
      $fullQueriesList,
      list-implode($queryList, ' and ')
    );
  }

  @return #{list-implode($fullQueriesList, ',')};

}

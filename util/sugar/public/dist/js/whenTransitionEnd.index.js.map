{"version":3,"sources":["webpack:///./src/js/dom/getStyleProperty.js","webpack:///./src/js/dom/getTransitionProperties.js","webpack:///./src/js/dom/whenTransitionEnd.js","webpack:///./src/js/string/autoCast.js"],"names":["getStyleProperty","elm","property","setTimeout","_sComputedStyle","computed","window","getComputedStyle","prefixes","i","length","prefix","value","trim","splitIfNeeded","what","separator","indexOf","split","map","item","getTransitionProperties","duration","timingFunction","delay","props","totalDuration","delays","concat","forEach","val","whenTransitionEnd","cb","Promise","resolve","reject","transition","autoCast","string","substr","presumedNumber","parseFloat","isNaN","toString","obj","eval","e"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;;;AAEA;;;;;;;;;;;;;;;;;;;;AAoBe,SAASA,gBAAT,CAA0BC,GAA1B,EAA+BC,QAA/B,EAAyC;AACtD;AACAC,YAAU,CAAC,MAAM;AACfF,OAAG,CAACG,eAAJ,GAAsB,IAAtB;AACD,GAFS,CAAV;AAIA,QAAMC,QAAQ,GAAGJ,GAAG,CAACG,eAAJ,IAAuBE,MAAM,CAACC,gBAAP,CAAwBN,GAAxB,CAAxC;AACAA,KAAG,CAACG,eAAJ,GAAsBC,QAAtB;AAEA,QAAMG,QAAQ,GAAG,CAAC,EAAD,EAAK,SAAL,EAAgB,MAAhB,EAAwB,KAAxB,EAA+B,IAA/B,EAAqC,QAArC,CAAjB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,QAAQ,CAACE,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,UAAME,MAAM,GAAGH,QAAQ,CAACC,CAAD,CAAvB;AACA,UAAMG,KAAK,GAAGP,QAAQ,CAAC,uBAAU,GAAEM,MAAO,GAAET,QAAS,EAA9B,CAAD,CAAtB;AACA,QAAIU,KAAK,IAAIA,KAAK,CAACC,IAAN,OAAiB,EAA9B,EAAkC,OAAO,uBAASD,KAAT,CAAP;AACnC;;AACD,SAAO,IAAP;AACD;;;;;;;;;;;;;;;;;;;;;ACvCD;;AACA;;;;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,SAASE,aAAT,CAAuBC,IAAvB,EAA6BC,SAA7B,EAAwC;AACtC,MAAID,IAAI,CAACE,OAAL,CAAaD,SAAb,MAA4B,CAAC,CAAjC,EAAoC;AAClC,WAAOD,IAAI,CAACG,KAAL,CAAWF,SAAX,EAAsBG,GAAtB,CAA0BC,IAAI,IAAIA,IAAI,CAACP,IAAL,EAAlC,CAAP;AACD;;AACD,SAAO,CAACE,IAAD,CAAP;AACD;;AAEc,SAASM,uBAAT,CAAiCpB,GAAjC,EAAsC;AACnD;AACA,QAAMC,QAAQ,GAAG,+BAAmBD,GAAnB,EAAwB,qBAAxB,CAAjB;AACA,QAAMqB,QAAQ,GAAG,+BAAmBrB,GAAnB,EAAwB,qBAAxB,KAAkD,CAAnE;AACA,QAAMsB,cAAc,GAAG,+BAAmBtB,GAAnB,EAAwB,4BAAxB,CAAvB;AACA,QAAMuB,KAAK,GAAG,+BAAmBvB,GAAnB,EAAwB,kBAAxB,CAAd,CALmD,CAOnD;;AACA,QAAMwB,KAAK,GAAG;AACZvB,YAAQ,EAAEY,aAAa,CAACZ,QAAD,EAAW,GAAX,CADX;AAEZoB,YAAQ,EAAER,aAAa,CAACQ,QAAD,EAAW,GAAX,CAAb,CAA6BH,GAA7B,CAAiCP,KAAK,IAAI,mBAAOA,KAAP,CAA1C,CAFE;AAGZY,SAAK,EAAEV,aAAa,CAACU,KAAD,EAAQ,GAAR,CAAb,CAA0BL,GAA1B,CAA8BP,KAAK,IAAI,mBAAOA,KAAP,CAAvC,CAHK;AAIZW,kBAAc,EAAET,aAAa,CAACS,cAAD,EAAiB,GAAjB;AAJjB,GAAd;AAMA,MAAIG,aAAa,GAAG,CAApB;AACA,MAAIjB,CAAC,GAAG,CAAR;AACA,QAAMkB,MAAM,GAAG,CAAC,CAAD,EAAIC,MAAJ,CAAWH,KAAK,CAACD,KAAjB,CAAf;AACA,GAAC,CAAD,EAAII,MAAJ,CAAWH,KAAK,CAACH,QAAjB,EAA2BO,OAA3B,CAAmCC,GAAG,IAAI;AACxC,QAAIA,GAAG,GAAGH,MAAM,CAAClB,CAAD,CAAZ,GAAkBiB,aAAtB,EAAqC;AACnCA,mBAAa,GAAGI,GAAG,GAAGH,MAAM,CAAClB,CAAD,CAA5B;AACD;;AACDA,KAAC;AACF,GALD;AAMAgB,OAAK,CAACC,aAAN,GAAsBA,aAAtB;AACA,SAAOD,KAAP;AACD;;;;;;;;;;;;;;;;;;;;;AC9DD;;;;AAEA;;;;;;;;;;;;;;;;;;;AAmBe,SAASM,iBAAT,CAA2B9B,GAA3B,EAAgC+B,EAAE,GAAG,IAArC,EAA2C;AACxD,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMC,UAAU,GAAG,sCAA0BnC,GAA1B,CAAnB;AACAE,cAAU,CAAC,MAAM;AACf+B,aAAO;AACPF,QAAE,IAAIA,EAAE,EAAR;AACD,KAHS,EAGPI,UAAU,CAACV,aAHJ,CAAV;AAID,GANM,CAAP;AAOD;;;;;;;;;;;;;;;;;;;;;AC7BD;;;;;;;;;;;;;;;;;;AAkBe,SAASW,QAAT,CAAkBC,MAAlB,EAA0B;AACvC;AACA,MAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC,OAAOA,MAAP,CAFO,CAIvC;;AACA,MAAIA,MAAM,CAACC,MAAP,CAAc,CAAd,EAAiB,CAAjB,MAAwB,GAAxB,IAA+BD,MAAM,CAACC,MAAP,CAAc,CAAC,CAAf,MAAsB,GAAzD,EAA8D;AAC5D,WAAOD,MAAM,CAACC,MAAP,CAAc,CAAd,EAAiBD,MAAM,CAAC5B,MAAP,GAAgB,CAAjC,CAAP;AACD,GAPsC,CASvC;AACA;;;AACA,QAAM8B,cAAc,GAAGC,UAAU,CAACH,MAAD,CAAjC;;AACA,MAAI,CAACI,KAAK,CAACF,cAAD,CAAV,EAA4B;AAC1B,QAAIA,cAAc,CAACG,QAAf,OAA8BL,MAAlC,EAA0C;AACxC,aAAOE,cAAP;AACD;AACF,GAhBsC,CAkBvC;;;AACA,MAAIlC,MAAM,CAACgC,MAAD,CAAV,EAAoB;AAClB,WAAOA,MAAP;AACD,GArBsC,CAuBvC;AACA;AACA;;;AACA,MAAI;AACF,UAAMM,GAAG,GAAGC,IAAI,CAAE,IAAGP,MAAO,GAAZ,CAAhB;AACA,WAAOM,GAAP;AACD,GAHD,CAGE,OAAOE,CAAP,EAAU;AACV;AACA,WAAOR,MAAP;AACD;AACF","file":"whenTransitionEnd.index.js","sourcesContent":["import camelize from \"../string/camelize\";\nimport autoCast from \"../string/autoCast\";\n\n/**\n * @name      getStyleProperty\n * @namespace     sugar.js.dom\n * @type      Function\n *\n * Get a style property on the passed element through the computed style.\n * This function try to store the actual style to not trigger more that 1 redraw\n * each js execution loop.\n *\n * @param \t\t{HTMLElement} \t\t\t\t\telm  \t\tThe element to get style from\n * @param \t\t{String} \t\t\t\t\t\tproperty \tThe css property to get\n * @return \t\t{Mixed} \t\t\t\t\t\t\t\t\tThe style value\n *\n * @example  \tjs\n * import getStyleProperty from '@coffeekraken/sugar/js/dom/getStyleProperty'\n * const opacity = getStyleProperty(myCoolHTMLElement, 'opacity');\n *\n * @see \t\thttps://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function getStyleProperty(elm, property) {\n  // caching mecanisme\n  setTimeout(() => {\n    elm._sComputedStyle = null;\n  });\n\n  const computed = elm._sComputedStyle || window.getComputedStyle(elm);\n  elm._sComputedStyle = computed;\n\n  const prefixes = [\"\", \"webkit-\", \"moz-\", \"ms-\", \"o-\", \"khtml-\"];\n  for (let i = 0; i < prefixes.length; i++) {\n    const prefix = prefixes[i];\n    const value = computed[camelize(`${prefix}${property}`)];\n    if (value && value.trim() !== \"\") return autoCast(value);\n  }\n  return null;\n}\n","import __getStyleProperty from \"./getStyleProperty\";\nimport __toMs from \"../string/toMs\";\n\n// TODO tests\n\n/**\n * @name      getTransitionProperties\n * @namespace     sugar.js.dom\n * @type      Function\n *\n * Get the css transition properties from an HTMLElement in an object format\n *\n * @param \t\t{HTMLElement} \t\t\t\t\telm  \t\tThe element to get the properties from\n * @return \t\t{Object} \t\t\t\t\t\t\t\t\tThe animation properties\n *\n * @example  \tjs\n * import getTransitionProperties from '@coffeekraken/sugar/js/dom/getTransitionProperties'\n * const props = getTransitionProperties(myCoolHTMLElement);\n * // output format\n * // {\n * // \tproperty : ['all'],\n * // \tduration : [200],\n * // \tdelay : [0],\n * // \ttimingFunction : ['linear'],\n * // \ttotalDuration : 200\n * // }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\n\nfunction splitIfNeeded(what, separator) {\n  if (what.indexOf(separator) !== -1) {\n    return what.split(separator).map(item => item.trim());\n  }\n  return [what];\n}\n\nexport default function getTransitionProperties(elm) {\n  // get the transition properties\n  const property = __getStyleProperty(elm, \"transition-property\");\n  const duration = __getStyleProperty(elm, \"transition-duration\") || 0;\n  const timingFunction = __getStyleProperty(elm, \"transition-timing-function\");\n  const delay = __getStyleProperty(elm, \"transition-delay\");\n\n  // return the transition object\n  const props = {\n    property: splitIfNeeded(property, \",\"),\n    duration: splitIfNeeded(duration, \",\").map(value => __toMs(value)),\n    delay: splitIfNeeded(delay, \",\").map(value => __toMs(value)),\n    timingFunction: splitIfNeeded(timingFunction, \",\")\n  };\n  let totalDuration = 0;\n  let i = 0;\n  const delays = [0].concat(props.delay);\n  [0].concat(props.duration).forEach(val => {\n    if (val + delays[i] > totalDuration) {\n      totalDuration = val + delays[i];\n    }\n    i++;\n  });\n  props.totalDuration = totalDuration;\n  return props;\n}\n","import __getTransitionProperties from \"./getTransitionProperties\";\n\n/**\n * @name      whenTransitionEnd\n * @namespace     sugar.js.dom\n * @type      Function\n *\n * Monitor an HTMLElement to be notified when his transition has ended\n *\n * @param \t\t{HTMLElement} \t\t\t\telm \t\tThe element to monitor\n * @param \t\t{Function} \t\t\t\t\t[cb=null] \tAn optional callback to call when the element transition has ended\n * @return \t\t(Promise) \t\t\t\t\t\t\t\tThe promise that will be resolved when the element transition has ended\n *\n * @example \tjs\n * import whenTransitionEnd from '@coffeekraken/sugar/js/dom/whenTransitionEnd'\n * whenTransitionEnd(myCoolHTMLElement).then((elm) => {\n * \t\t// do something with your element transition has ended...\n * });\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function whenTransitionEnd(elm, cb = null) {\n  return new Promise((resolve, reject) => {\n    const transition = __getTransitionProperties(elm);\n    setTimeout(() => {\n      resolve();\n      cb && cb();\n    }, transition.totalDuration);\n  });\n}\n","/**\n * @name        autoCast\n * @namespace       sugar.js.string\n * @type      Function\n *\n * Auto cast the string into the correct variable type\n *\n * @param    {String}    string    The string to auto cast\n * @return    {Mixed}    The casted value\n *\n * @example    js\n * import autoCast from '@coffeekraken/sugar/js/strings/autoCast'\n * autoCast('12') // => 12\n * autoCast('window.HTMLElement') // => HTMLElement\n * autoCast('{\"hello\":\"world\"}') // {hello:'world'}\n *\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function autoCast(string) {\n  // if the passed string is not a string, return the value\n  if (typeof string !== \"string\") return string;\n\n  // handle the single quotes strings like '\"hello world\"'\n  if (string.substr(0, 1) === \"'\" && string.substr(-1) === \"'\") {\n    return string.substr(1, string.length - 2);\n  }\n\n  // number\n  // before the window check cause window['0'] correspond to something\n  const presumedNumber = parseFloat(string);\n  if (!isNaN(presumedNumber)) {\n    if (presumedNumber.toString() === string) {\n      return presumedNumber;\n    }\n  }\n\n  // avoid getting item from the window object\n  if (window[string]) {\n    return string;\n  }\n\n  // try to eval the passed string\n  // if no exception, mean that it's a valid\n  // js variable type\n  try {\n    const obj = eval(`(${string})`);\n    return obj;\n  } catch (e) {\n    // assume that the string passed is a string\n    return string;\n  }\n}\n"],"sourceRoot":""}
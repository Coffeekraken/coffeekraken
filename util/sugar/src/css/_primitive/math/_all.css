@charset "UTF-8";
/**
 * @name      math-abs
 * @namespace     sugar.scss.math
 * @type      function
 *
 * Return the absolute version of the passed number
 *
 * @param         {Number}        $number       The number to process
 * @return        {Number}                      The absolute version of the number
 *
 * @example     scss
 * sugar.math-abs(-10); // => 10
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      math-acos
 * @namespace     sugar.scss.math
 * @type      function
 *
 * Calculate the cosinus inverse of the passed angle
 *
 * @param         {Number}        $angle          The angle to calculate the cosinus inverse from
 * @param         {String}        [$unit=deg]     The wanted unit. Can de deg, rad, grad or turn
 * @return         {Number}                       The calculated cosinus inverse
 *
 * @example     scss
 * sugar.math-acos(1, deg); // 0.0559529097deg
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      math-asin
 * @namespace     sugar.scss.math
 * @type      function
 *
 * Calculate the sinus inverse
 *
 * @param         {Number}        $value        The value to use
 * @param         {String}        [$unit=deg]   The unit wanted. Possible values are deg, rad, grad and turn
 * @return        {Number}                      The calculated asin
 *
 * @example     scss
 * sugar.math-asin(1, rad); // => 1.5698197643rad
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      math-atan
 * @namespace     sugar.scss.math
 * @type      function
 *
 * Calculate the tangent inverse of the passed angle
 *
 * @param       {Number}      $angle        The angle to calculate the tangent inverse from
 * @param       {String}      [$unit=deg]   The wanted unit. Can be deg, rad, grad or turn
 * @return      {Number}                    The calculated tangent inverse of the passed angle
 *
 * @example       scss
 * sugar.math-atan(10, deg); // => 84.2988568542deg
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name    math-ceil
 * @namespace     sugar.scss.math
 * @type      function
 *
 * Rounds $number up to the next highest whole number
 *
 * @param       {Number}      $number       The number to process
 * @return      {Number}                    The up rounded number
 *
 * @example     scss
 * sugar.math-ceil(4.2); // => 5
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name    math-convert-angle
 * @namespace     sugar.scss.math
 * @type      function
 *
 * Convert the passed angle into another unit like rad, deg, grad or turn
 *
 * @param           {Number}            $value          The angle value to convert
 * @param           {String}            $unit           The wanted unit. Can be rad, deg, grad or turn
 * @return          {Number}                            The converted angle value
 *
 * @example   scss
 * sugar.math-convert-angle()
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      math-cos
 * @namespace     sugar.scss.math
 * @type      function
 *
 * Calculate the cosinus of the passed angle
 *
 * @param         {Number}        $angle      The angle to calculate the cosinus from
 * @return        {Number}                    The calculated cosinus
 *
 * @example     scss
 * sugar.math-cos(10); // => 6.6645643378
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      math-deg
 * @namespace     sugar.scss.math
 * @type      function
 *
 * Convert the passed unitless angle to degree
 *
 * @param         {Number}        $angle      The angle to convert to degree
 * @return        {Number}                    The degree version of the angle
 *
 * @example     scss
 * sugar.math-deg(10); // => 572.9577951308deg
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      math-even
 * @namespace     sugar.scss.math
 * @type      function
 *
 * Convert the passed value to the closest even value
 *
 * @param 			{Number} 		$value 		The value to convert
 * @return 			{Number} 					The closest even converted value
 *
 * @example     scss
 * sugar.math-even(9); // => 10
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      math-fact
 * @namespace     sugar.scss.math
 * @type      function
 *
 * Returns the factorial of desired number
 *
 * @param         {Number}          $number         The number to calculate the factorial number
 * @return        {Number}                          The calculated factorial of the passed number
 *
 * @example     scss
 * sugar.math-fact(5); // => 120
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      math-grad
 * @namespace     sugar.scss.math
 * @type      function
 *
 * Convert the passed unitless angle to gradian
 *
 * @param         {Number}        $angle      The angle to convert to gradian
 * @return        {Number}                    The gradian version of the angle
 *
 * @example     scss
 * sugar.math-grad(10); // => 636.6197723675grad
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      math-odd
 * @namespace     sugar.scss.math
 * @type      function
 *
 * Convert the passed value to the closest odd value
 *
 * @param 			{Number} 		$value 		The value to convert
 * @return 			{Number} 					The closest odd converted value
 *
 * @example     scss
 * sugar.math-odd(10); // => 9
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      math-percentage
 * @namespace     sugar.scss.math
 * @type      function
 *
 * Converts a unitless $number (usually a decimal between 0 and 1) to a percentage.
 *
 * @param         {Number}          $number           The number to convert into percentage
 * @return        {Number}                            The percentage converted
 *
 * @example
 * sugar.math-percentage(0.2); // => 20%
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      math-pow
 * @namespace     sugar.scss.math
 * @type      function
 *
 * Return the calculated power of the passed base using the passed exponent
 *
 * @param         {Number}        $base         The base number
 * @param         {Number}        $exponent     The exponent used to raise the base
 * @return        {Number}                      The calculated power number
 *
 * @example    scss
 * sugar.math.pow(7, 3); // => 343
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      math-rad
 * @namespace     sugar.scss.math
 * @type      function
 *
 * Convert the passed unitless angle to radian
 *
 * @param         {Number}        $angle      The angle to convert to radian
 * @return        {Number}                    The radian version of the angle
 *
 * @example     scss
 * sugar.math-rad(10); // => 10rad
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name    math-random
 * @namespace     sugar.scss.math
 * @type      function
 *
 * If $limit is null, returns a random decimal number between 0 and 1.
 *
 * @param       {Number}      [$limit:null]     The limit to generate a number under that
 * @return      {Number}                        The generated number
 *
 * @example     scss
 * sugar.math-random(); // => 0.2821251858
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name    math-round
 * @namespace     sugar.scss.math
 * @type      function
 *
 * Rounds $number to the nearest whole number.
 *
 * @param       {Number}      $number       The number to round
 * @return      {Number}                    The rounded number
 *
 * @example     scss
 * sugar.math-round(4.2); // => 4
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name    math-sin
 * @namespace     sugar.scss.math
 * @type      function
 *
 * Calculate the sinus of the passed angle
 *
 * @param       {Number}      $angle        The angle to calculate the sinus from
 * @return      {Number}                    The calculated sinus
 *
 * @example     scss
 * sugar.math-sin(10); // => 2.761090926
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name  math-sqrt
 * @namespace     sugar.scss.math
 * @type      function
 *
 * Return the square root of the passed number
 *
 * @param         {Number}        $number       The number to process
 * @return        {Number}                      The square root of the passed number
 *
 * @example   scss
 * sugar.math-sqrt(2); // => 1.41421356237
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      math-tan
 * @namespace     sugar.scss.math
 * @type      function
 *
 * Calculate the tangent of the passed angle
 *
 * @param         {Number}        $angle        The angle to calculate the tangent from
 * @return        {Number}                      The calculated tangent
 *
 * @example       scss
 * sugar.math-tan(10); // => 0.4142942863
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      math-turn
 * @namespace     sugar.scss.math
 * @type      function
 *
 * Convert the passed unitless angle to turn
 *
 * @param         {Number}        $angle      The angle to convert to turn
 * @return        {Number}                    The turn version of the angle
 *
 * @example     scss
 * sugar.math-turn(10); // => 1.5915494309turn
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */

/*# sourceMappingURL=_all.css.map */
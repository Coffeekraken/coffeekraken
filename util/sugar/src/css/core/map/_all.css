/**
 * @name      dash-to-map
 * @namespace     sugar.scss.core.map
 * @type        function
 *
 * Transform a dash notation value into a map
 * Dash notation value is : -key1 value1 -key2 value2
 *
 * @param 			{List} 			$dash 			The dash list notation to transform
 * @return 			{Map} 							The map generated
 *
 * @example
 * $dash : -hello world -coco universe
 * sugar.dash-to-map($dash);
 * // (
 * // 	hello : world,
 * // 	coco : universe
 * // )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name    filter-map
 * @namespace     sugar.scss.core.map
 * @type      function
 *
 * Take a filter as parameter and parse it to return the {Map} corresponding
 * The $filter parameter can be either a registered filter name or a filter formated like `filterName(filterValue)`
 *
 * @param 			{List}<String> 			$filter 			The registered filter name or the filter string to transform into map
 * @return 			{Map} 										The corresponding filter map properties
 *
 * @example
 * // register a filter
 * \@include sugar.setup((
 * 		filters : (
 * 			myCoolFilter : box-shadow(#000 0 0 10px) blur(30px),
 * 			// other filters...
 * 		)
 * ));
 *
 * // registered filter
 * sugar.filter-map(myCoolFilter);
 * // {
 * // 	box-shadow : #000 0 0 10px,
 * // 	blur : 30px
 * // }
 *
 * // custom filter
 * sugar.filter-map(blur(10px));
 * // {
 * // 	blur : 10px
 * // }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */

/*# sourceMappingURL=_all.css.map */
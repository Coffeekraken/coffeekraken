/**
 * @name      loader-bars
 * @namespace     sugar.scss.loader
 * @type      function
 *
 * Generate a full animated, single element, bars loader
 *
 * @param 			{String} 			[$shape=rect] 				The shape of the bars (rect,circle)
 * @param 			{Color} 			[$color=primary] 			The color(s) of the loader. Can be a list of colors
 * @param 			{Number} 			[$width=.5em] 				The width of each bars
 * @param 			{Number} 			[$height=2em] 				The height of each bars
 * @param 			{Integer} 			[$count=5] 					How many bars you want
 * @param 			{Number} 			[$gap=.5em] 				The gap between each bars
 * @param 			{Number} 			[$opacity=1] 				The initial opacity of each bars
 * @param 			{Number} 			[$a-opacity=null] 			The opacity of the animated bars
 * @param 			{Second} 			[$a-duration=1s] 			The overall animation duration
 * @param 			{Second} 			[$a-delay=0s] 				The delay between two animation cycle
 * @param 			{Integer} 			[$a-near=1] 				How many bars are affected by the animated one
 * @param 			{String} 			[$a-ease=ease-in-out] 		The ease to use to animate each bars
 * @param 			{Number} 			[$a-offset=1em] 			The offset to move the animated bar in em
 * @param 			{String} 			[$a-direction=both] 		The direction in which to move the bars (up,down,both)
 * @param 			{Boolean} 			[$a-continuous=true] 		If true, the first bars will be animated at same time at the last ones
 *
 * @example     scss
 * .my-cool-loader {
 * 		\@include sugar.loader-bars(
 * 			$color : primary,
 * 			$a-offset : .5em
 * 		);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      loader-circle
 * @namespace     sugar.scss.loader
 * @type      Mixin
 *
 * Generate a full animated, single element, circle loader
 *
 * @param 			{Color} 			[$color=primary] 			The color(s) of the loader. Can be a list of colors
 * @param 			{Number} 			[$size=.33em] 				The size of each dot
 * @param 			{Number} 			[$radius=2em] 				The distance of each dot from the center of the loader
 * @param 			{Integer} 			[$count=8] 					How many bars you want
 * @param 			{Number} 			[$opacity=1] 				The initial opacity of each bars
 * @param 			{Number} 			[$a-opacity=null] 			The opacity of the animated bars
 * @param 			{Second} 			[$a-duration=1s] 			The overall animation duration
 * @param 			{Second} 			[$a-delay=0s] 				The delay between two animation cycle
 * @param 			{Integer} 			[$a-near=2] 				How many bars are affected by the animated one
 * @param 			{String} 			[$a-ease=ease-in-out] 		The ease to use to animate each bars
 * @param       {Number}       [$a-spread=2em]        How many distance the points have to be animated
 * @param       {Number}        [$a-rotate=null]      How many degrees have the points to be animated
 * @param       {Number}        [$a-scale=1em]        How many scale have the points to be animated
 *
 * @example     scss
 * .my-cool-loader {
 *    @include sugar.loader-circle(
 *      $color: sugar.color(primary)
 *    );
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      loader-couch-potato
 * @namespace     sugar.scss.loader
 * @type      function
 *
 * Generate a full animated, single element, couch-potato style loader
 *
 * @param 		{Number} 		[$size=1em] 				The size of the loader
 * @param 		{Color} 		[$color=primary] 			The color of the loader
 * @param 		{Second} 		[$a-duration=1s] 			The overall animation duration
 * @param 		{Second} 		[$a-delay=0s] 				The delay between two animation cycle
 * @param 		{String} 		[$a-ease=ease-in-out]		The ease to use for the animation
 * @param 		{Degree}		[$a-rotate=360deg] 			The animation rotation
 * @param 		{Number} 		[$a-scale=2] 				The animation scale
 *
 * @example     scss
 * .my-cool-loader {
 * 		\@include sugar.loader-couch-potato();
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      loader-flip-ball
 * @namespace     sugar.scss.loader
 * @type      Mixin
 *
 * Generate a full animated, single element, flip ball style loader
 *
 * @param 		{String} 		[$shape=circle] 			The shape of the loader (circle,rect)
 * @param 		{Number} 		[$size=2em] 				The size of the loader
 * @param 		{Color} 		[$colors=(primary,success,warning,error,info)] 			The colors of the loader. Can be a list of colors
 * @param 		{Second} 		[$a-duration=1s] 			The overall animation duration
 * @param 		{Second} 		[$a-delay=0s] 				The delay between two animation cycle
 * @param 		{String} 		[$a-ease=ease-in-out]		The ease to use for the animation
 *
 * @example       scss
 * .my-cool-loader {
 * 		\@include sugar.loader-flip-ball();
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      loader-grid
 * @namespace     sugar.scss.loader
 * @type      function
 *
 * Generate a grid style loader
 *
 * @param       {String}      [$shape=rect]             The shape of the grid items. Can be rect or circle
 * @param       {Color}       [$color=color(primary)]   The color to use for the grid items
 * @param       {Number}      [$cols=3]                 How many columns the grid must have
 * @param       {Number}      [$rows=3]                 How many rows must have the grid
 * @param       {Number}      [$size=10px]              The size of each grid items
 * @param       {Number}      [$gap=5px]                The size of the gaps between the grid items
 * @param       {Number}      [$offset=0]               The offset used for the grid
 * @param       {Number}      [$rotate=0deg]            Apply a rotation to the grid items
 * @param       {String}      [$a-shape=null]           The animation shape to apply to the grid items. Can be rect or circle
 * @param       {Number}      [$a-steps=5]              How many steps must have the animation
 * @param       {Number}      [$a-spread=15px]          How much must the grid items spread during the animation
 * @param       {Number}      [$a-rotate=null]          How many degrees must the grid items rotate during the animation
 * @param       {Number}      [$a-scale=null]           Apply a scale for the animation of the grid items
 * @param       {Number}      [$a-opacity=null]         Apply an opacity to the grid items during the animation
 * @param       {Second}      [$a-duration=1s]          The duration of the animation
 * @param       {Second}      [$a-delay=0s]             How many seconds to wait between each animations
 * @param       {String}      [$a-ease=ease-in-out]     The easing to use for the animation
 *
 * @example     scss
 * .my-cool-loader {
 *    @include sugar.loader-grid();
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      loader-radial
 * @namespace     sugar.scss.loader
 * @type      function
 *
 * Generate a radial styled loader
 *
 * @param       {String}      [$shape=circle]       The shape of the items that make the circle. Can be rect or circle
 * @param       {Number}      [$size=3em]           The size of the items
 * @param       {Number}      [$width=0.2em]        The width of the circle loader
 * @param       {String}      [$style=solid]        The style of the items that form the loader. Can be none, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset, initial or inherit
 * @param       {Color}       [$color=primary]     The color to use for the loader
 * @param       {Second}      [$a-duration=2s]      How many time will be the animation
 * @param       {Second}      [$a-delay=0s]         How many time to wait between two animation
 * @param       {Number}      [$a-count=2]          How many circles will be animated
 * @param       {Number}      [$a-spread=1em]         Specify a spread value for the animation of each circles
 * @param       {String}      [$a-ease=linear]      Specify the ease to use for the animation
 *
 * @example       scss
 * .my-cool-loader {
 *    @include sugar.loader-radial();
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      loader-spinner
 * @namespace     sugar.scss.loader
 * @type      function
 *
 * Generate a spinner loader
 *
 * @param         {Number}        [$size=2em]             Specify the size of the spinner loader
 * @param         {Number}        [$width=0.3em]          Specify the width of the spinner loader
 * @param         {Color}         [$color=primary]        Specify the color of the spinner loader
 * @param         {Color}         [$bgcolor=inherit]        Specify the background color of the spinner loader
 * @param         {Number}        [$length=3/4]           The length of the spinner loader
 * @param         {Second}        [$a-duration=1s]        The duration of the spinner loader animation
 * @param         {String}        [$a-ease=linear]          Specify an ease to use for the spinner loader animation
 *
 * @example     scss
 * .my-cool-loader {
 *    @include sugar.loader-spinner();
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */

/*# sourceMappingURL=_all.css.map */
@use 'sass:map';
@use 'sass:string';
/**
 * @name      map-filter-by-namespace
 * @namespace           scss.map
 * @type      function
 *
 * Return all the map values that have a key that match the passed namespace
 *
 * @param           {Map}         $map          The map to process
 * @param           {String}      $namespace    The namespace to search like (something.another.thing)
 * @return          {Map}                       The filtered map
 *
 * @example     scss
 * sugar.map-filter-by-namespace((
 *  'hello.world': 'Hello',
 *  'coco.world': 'Coco',
 *  'hello.that': 'That is cool'
 * ), 'hello');
 * // return that map:
 * (
 *   'hello.world': 'Hello',
 *   'hello.that': 'That is cool'
 * )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
@function map-filter-by-namespace($map, $namespace) {
  $map: test-argument(
    "map-filter-by-namespace",
    "map",
    map,
    $map
  );
  $namespace: test-argument(
    'map-filter-by-namespace',
    'namespace',
    string,
    $namespace
  );
  // get the map keys
  $keys: map.keys($map);
  // init the filtered map
  $filtered-map: ();
  // loop on each keys to check if they match the wanted namespace
  @each $key in $keys {
    // check if the key match the namespace
    @if (string.index($key, $namespace) == 1) {
      $filtered-map: map-set($filtered-map, $key, map.get($map, $key));
    }
  }
  // return the filtered map
  @return $filtered-map;
}

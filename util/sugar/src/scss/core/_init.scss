@use 'variables' as sugar;
@use 'sass:meta';
$_sugar-inited: false;
/**
 * @name    init
 * @namespace     sugar.scss.core.mixin
 * @type      mixin
 *
 * Init the sugar toolkit.
 * This has to be called **AFTER** all the [./_s-setup.scss] mixin call
 * and **BEFORE** all the others sugar mixins and functions calls
 *
 * @example     scss
 * \@include sugar.init();
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
@mixin init() {
  // do that only if not already inited
  @if not $_sugar-inited {
    // update inited status
    $_sugar-inited: true !global;

    // reset
    @if setting("reset") == true {
      @include reset();
    }

    // styleguide
    // @include styleguide-colors();

    // dom settings (put sugar settings in a "content" property of the .s-settings element
    // @include init-dom-settings();

    // border box
    @if setting("border-box") == true {
      html {
        box-sizing: border-box;
      }
      *,
      *:before,
      *:after {
        box-sizing: inherit;
      }
    }

    // links
    a {
      color: inherit;
    }

    // check settings
    // $base-font-family: setting("typography.font-family");
    // $fonts: setting("fonts");
    // @if $base-font-family and not map-get($fonts, $base-font-family) {
    //   @error ("Your typography.font-family setting has to be a registered font...");
    // }

    // // set the base font family if not defined
    // @if not $base-font-family {
    //   @include setup(
    //     (
    //       typo: (
    //         font-family: default
    //       )
    //     )
    //   );
    // }

    // body
    @include init-body();

    // font faces
    @include init-font();

    // modular scale
    $ms-base: setting("modular-scale.base") !global;
    $ms-ratio: setting("modular-scale.ratio") !global;
  }
}

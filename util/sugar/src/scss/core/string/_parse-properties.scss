@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:meta";
@use "sass:string";
/**
 * @name      parse-properties
 * @namespace           scss.core.string
 * @type    function
 *
 * Parse a given string/list properties and return the Map corresponding to the Map description
 *
 * @param 				{List} 				$properties 			The properties to parse
 * @param 				{Map} 				$descriptor 			The descriptor map to use to parse the properties
 * @return 				{Map} 										The properties in map format
 *
 * @example     scss
 * Sugar.parse-properties(10px hello -delay 20s, (
 *  	myNumber : Number,
 *  	myOtherNumber : Number,
 *  	myString : String,
 *  	myCoolVar : String,
 *  	delay : second
 * ));
 * // => (
 * //  	myNumber : 10px,
 * // 	myString : hello,
 * // 	delay : 20s
 * // )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
@function parse-properties($properties, $keywords) {
  // check if is a map or a list
  @if meta.type-of($properties) == map {
    $new-map: ();

    // loop on each properties to
    @each $prop, $value in $properties {
      // get the real name
      $prop: _get-property-name($prop, $keywords);

      // if we have a property
      @if $prop {
        // get the type
        $type: _get-property-type($prop, $keywords);

        // if we have found, check the type
        @if $type {
          // check the property type with the value
          @if _check-property($prop, $type, $value) {
            $new-map: map-set($new-map, $prop, $value);
          }
        }
      }
    }

    // return new map
    @return $new-map;
  } @else {
    $map: ();
    $values: ();
    $current_prop: null;
    $first: true;
    @each $prop in $properties {

      @if meta.type-of($prop) == string and string.slice($prop, 1, 1) == "-" {
        // remove the - at property beginning
        $prop: string.slice($prop, 2);

        // get the real name
        $prop: _get-property-name($prop, $keywords);

        // we have a new property
        // need to check if we have already one in memory
        // to save it in the map after checking the type
        @if $current_prop {
          @if list.length($values) == 0 {
            $values: true;
          } @else if list.length($values) == 1 and meta.type-of($values) == list {
            $values: list.nth($values, 1);
          }
          $type: _get-property-type($current_prop, $keywords);

          // check the property type with the value
          @if _check-property($prop, $type, $values) {
            $map: map-set($map, $current_prop, $values);
          }
        }
        $first: false;
        @if $prop {
          $current_prop: $prop;
          $values: ();
        }
      } @else {
        @if $first {
          // check if the type is ok
          $found: false;
          @each $name, $type in $keywords {
            @if $found == false {
              @if _check-property($name, $type, $prop, true) {
                $map: map-set($map, $name, $prop);
                $keywords: map.remove($keywords, $name);
                $found: true;
              }
            }
          }
        } @else {
          $values: list.append($values, $prop);
        }

        @if $current_prop {
          @if list.length($values) == 0 {
            $values: true;
          } @else if list.length($values) == 1 and meta.type-of($values) == list {
            $values: list.nth($values, 1);
          }
          $type: _get-property-type($current_prop, $keywords);

          // check the property type with the value
          @if _check-property($current_prop, $type, $values) {
            $map: map-set($map, $current_prop, $values);
          }
        }
      }
    }
    @if $current_prop {
      @if list.length($values) == 0 {
        $values: true;
      } @else if list.length($values) == 1 and meta.type-of($values) == list {
        $values: list.nth($values, 1);
      }
      $type: _get-property-type($current_prop, $keywords);

      // check the property type with the value
      @if _check-property($current_prop, $type, $values) {
        $map: map-set($map, $current_prop, $values);
      }
    }

    // return map
    @return $map;
  }
}

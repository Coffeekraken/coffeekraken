@use 'sass:math';
/**
 * @name      effect-hey
 * @namespace           scss.effect
 * @type      mixin
 *
 * Create a poping dot effect to catch user attention on a particular item
 * This mixin affect the :before and :after pseudo selector of the item
 *
 * @param 		{String} 		[$vertical-align=top] 			Where to put the dot verticaly (top,middle,bottom)
 * @param 		{String} 		[$align=left] 					Where to put the dot horizontaly (left,center,right)
 * @param 		{Number} 		[$size=20px] 					The size of the dot
 * @param 		{Color} 		[$color=primary] 				The color of the dot
 * @param 		{Number} 		[$offset-top=0] 				The offset top
 * @param 		{Number} 		[$offset-right=0] 				The offset right
 * @param 		{Number} 		[$offset-bottom=0] 				The offset bottom
 * @param 		{Number} 		[$offset-left=0] 				The offset left
 *
 * @example       scss
 * .my-cool-element {
 * 		\@include sugar.effect-hey(
 * 			$align : right,
 * 			$color : secondary,
 * 			$size : 10px,
 * 			$offset-top : -10px,
 * 			$offset-right : -10px
 * 		);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
@mixin effect-hey(
  $vertical-align: top,
  $align: left,
  $size: 20px,
  $color: primary,
  $offset-top: 0,
  $offset-right: 0,
  $offset-bottom: 0,
  $offset-left: 0
) {
  $vertical-align: test-argument(
    "sugar.effect-hey",
    "vertical-align",
    (top, middle, bottom),
    $vertical-align
  );
  $align: test-argument("sugar.effect-hey", "align", (left, center, right), $align);
  $size: test-argument("sugar.effect-hey", "size", number, $size);
  $color: test-argument("sugar.effect-hey", "color", 'string|color', $color);
  $offset-left: test-argument("sugar.effect-hey", "offset-left", number, $offset-left);
  $offset-top: test-argument("sugar.effect-hey", "offset-top", number, $offset-top);
  $offset-bottom: test-argument("sugar.effect-hey", "offset-bottom", number, $offset-bottom);
  $offset-right: test-argument("sugar.effect-hey", "offset-right", number, $offset-right);

  $color: color($color);

  $position: position-map(
    $vertical-align: $vertical-align,
    $align: $align
  );

  @keyframes s-hey {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
    }
  }

  position: relative;
  &:before {
    $ratio: 2;
    $s: math.round($size / $ratio);
    content: "";
    position: absolute;
    height: $s;
    width: $s;
    @include corner($s);
    background-color: $color;

    @each $prop, $value in $position {
      @if $prop == top or $prop == bottom or $prop == left or $prop == right {
        @if $prop == top and $value > 0% or $prop == left and $value > 0% {
          $value: "#{$value} - #{($size / 2 - $s / 2)}";
        } @else {
          $value: "#{$value} + #{($size / 2 - $s / 2)}";
        }
        @if $prop == top {
          $value: "#{$value} + #{$offset-top} - #{$offset-bottom}";
        } @else if $prop == right {
          $value: "#{$value} + #{$offset-right} - #{$offset-left}";
        } @else if $prop == bottom {
          $value: "#{$value} + #{$offset-bottom} - #{$offset-top}";
        } @else if $prop == left {
          $value: "#{$value} + #{$offset-left} - #{$offset-right}";
        }
        @if $prop != position or $prop != transform {
          #{$prop}: calc(#{$value});
        }
      }
    }
  }
  &:after {
    $border-width: math.floor(($size - $size / 2) / 3.5);
    content: "";
    position: absolute;
    height: $size - $border-width * 2;
    width: $size - $border-width * 2;
    @include corner($size / 2);
    background-color: transparent;
    border: solid $color;
    border-width: $border-width; // animates
    boz-sizing: border-box;
    @include animation(s-hey infinite);

    @each $prop, $value in $position {
      @if $prop == top {
        $value: "#{$value} + #{$offset-top} - #{$offset-bottom}";
      } @else if $prop == right {
        $value: "#{$value} + #{$offset-right} - #{$offset-left}";
      } @else if $prop == bottom {
        $value: "#{$value} + #{$offset-bottom} - #{$offset-top}";
      } @else if $prop == left {
        $value: "#{$value} + #{$offset-left} - #{$offset-right}";
      }
      @if $prop != position or $prop != transform {
        #{$prop}: calc(#{$value});
      }
    }
  }

  @content;
}

/**
 * @name      loader-flip-ball
 * @namespace           scss.loader
 * @type      Mixin
 *
 * Generate a full animated, single element, flip ball style loader
 *
 * @param 		{String} 		[$shape=circle] 			The shape of the loader (circle,rect)
 * @param 		{Number} 		[$size=2em] 				The size of the loader
 * @param 		{Color} 		[$colors=(primary,success,warning,error,info)] 			The colors of the loader. Can be a list of colors
 * @param 		{Second} 		[$a-duration=1s] 			The overall animation duration
 * @param 		{Second} 		[$a-delay=0s] 				The delay between two animation cycle
 * @param 		{String} 		[$a-ease=ease-in-out]		The ease to use for the animation
 *
 * @example       scss
 * .my-cool-loader {
 * 		\@include sugar.loader-flip-ball();
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
@mixin loader-flip-ball(
  $shape: circle,
  $size: 2em,
  $colors: (primary,success,warning,error,info),
  $a-duration: 2s,
  $a-delay: 0s,
  $a-ease: ease-in-out
) {

  $shape: test-argument(
    "sugar.loader-flip-ball",
    "shape",
    (circle, rect),
    $shape
  );
  $size: test-argument("sugar.loader-flip-ball", "size", number, $size);
  $colors: test-argument(
    "sugar.loader-flip-ball",
    "colors",
    "color|list-color|list-string",
    $colors
  );
  $a-duration: test-argument(
    "sugar.loader-flip-ball",
    "a-duration",
    second,
    $a-duration
  );
  $a-delay: test-argument(
    "sugar.loader-flip-ball",
    "a-delay",
    second,
    $a-delay
  );
  $a-ease: test-argument("sugar.loader-flip-ball", "a-ease", string, $a-ease);

  $a-duration: $a-duration + $a-delay;

  $a-name: str-unquote("google-ball-#{str-unique-id()}");

  $c: list-nth($colors, list-length($colors));

  display: inline-block;
  background: color($c);
  width: $size;
  height: $size;
  top: $size / 2 * -1;
  left: $size / 2 * -1;
  @if $shape == circle {
    border-radius: 50%;
  }
  animation: #{$a-name}-rotate $a-duration $a-ease 0s infinite;
  position: relative;

  &:after,
  &:before {
    display: block;
    width: $size;
    height: $size/2;
    @if $shape == circle {
      border-radius: $size $size 0 0;
    }
    content: "";
    background: color($c);
    transform-origin: $size / 2 $size / 2;
    position: absolute;
    top: 0;
    left: 0;
  }
  &:after {
    animation: #{$a-name}-after $a-duration $a-ease 0s infinite;
    // display: none;
  }
  &:before {
    animation: #{$a-name}-before $a-duration $a-ease 0s infinite;
    // background : white;
  }

  $p-delay: 0;
  @if $a-delay > 0 {
    $p-delay: 1 / $a-duration * $a-delay;
  }
  $steps: 2;
  @if $colors {
    $steps: list-length($colors);
  }

  @keyframes #{$a-name}-after {
    @for $i from 1 through $steps {
      #{math-percentage(1 / $steps * $i) - 0.0001%} {
        transform: rotateX(180deg);
      }
      #{math-percentage(1 / $steps * $i)} {
        background: color(list-nth($colors, $i));
        transform: rotateX(0deg);
      }
      #{math-percentage(1 / $steps * $i) - math-percentage(1 / $steps) / 2} {
        $c: null;
        @if $i - 1 <= 0 {
          $c: list-nth($colors, list-length($colors));
        } @else {
          $c: list-nth($colors, $i - 1);
        }
        background: color($c, -darken 10%);
      }
      #{(math-percentage(1 / $steps * $i) - math-percentage(1 / $steps) / 2 + 0.0001%)} {
        $c: null;
        @if $i + 1 > list-length($colors) {
          $c: list-nth($colors, 1);
        } @else {
          $c: list-nth($colors, $i + 1);
        }
        background: color(list-nth($colors, $i), -lighten 8%);
      }
    }
  }
  @keyframes #{$a-name}-before {
    @for $i from 1 through $steps {
      #{math-percentage(1 / $steps * $i) - 0.0001%} {
        background: color(list-nth($colors, $i));
      }
      #{math-percentage(1 / $steps * $i)} {
        $c: null;
        @if $i + 1 > list-length($colors) {
          $c: list-nth($colors, 1);
        } @else {
          $c: list-nth($colors, $i + 1);
        }
        background: color($c);
      }
    }
  }
  @keyframes #{$a-name}-rotate {
    @for $i from 1 through $steps {
      #{math-percentage(1 / $steps * $i) - 0.0001%} {
        transform: rotate(($i - 1) * 90deg);
        $c: null;
        @if $i - 1 <= 0 {
          $c: list-nth($colors, list-length($colors));
          background: color($c);
        } @else {
          $c: list-nth($colors, $i - 1);
          background: color($c);
        }
      }
      #{math-percentage(1 / $steps * $i)} {
        transform: rotate($i * 90deg);
        background: color(list-nth($colors, $i));
      }
    }
  }
}

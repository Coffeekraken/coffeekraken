/**
 * @name      loader-grid
 * @namespace           scss.loader
 * @type      function
 *
 * Generate a grid style loader
 *
 * @param       {String}      [$shape=rect]             The shape of the grid items. Can be rect or circle
 * @param       {Color}       [$color=color(primary)]   The color to use for the grid items
 * @param       {Number}      [$cols=3]                 How many columns the grid must have
 * @param       {Number}      [$rows=3]                 How many rows must have the grid
 * @param       {Number}      [$size=10px]              The size of each grid items
 * @param       {Number}      [$gap=5px]                The size of the gaps between the grid items
 * @param       {Number}      [$offset=0]               The offset used for the grid
 * @param       {Number}      [$rotate=0deg]            Apply a rotation to the grid items
 * @param       {String}      [$a-shape=null]           The animation shape to apply to the grid items. Can be rect or circle
 * @param       {Number}      [$a-steps=5]              How many steps must have the animation
 * @param       {Number}      [$a-spread=15px]          How much must the grid items spread during the animation
 * @param       {Number}      [$a-rotate=null]          How many degrees must the grid items rotate during the animation
 * @param       {Number}      [$a-scale=null]           Apply a scale for the animation of the grid items
 * @param       {Number}      [$a-opacity=null]         Apply an opacity to the grid items during the animation
 * @param       {Second}      [$a-duration=1s]          The duration of the animation
 * @param       {Second}      [$a-delay=0s]             How many seconds to wait between each animations
 * @param       {String}      [$a-ease=ease-in-out]     The easing to use for the animation
 *
 * @example     scss
 * .my-cool-loader {
 *    @include sugar.loader-grid();
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
@mixin loader-grid(
  $shape: rect,
  $color: primary,
  $cols: 3,
  $rows: 3,
  $size: 10px,
  $gap: 5px,
  $offset: 0,
  $rotate: 0deg,
  $a-shape: null,
  $a-steps: 5,
  $a-spread: 15px,
  $a-rotate: null,
  $a-scale: null,
  $a-opacity: null,
  $a-duration: 1s,
  $a-delay: 0s,
  $a-ease: ease-in-out
) {
  $shape: test-argument("sugar.loader-grid", "shape", (rect, circle), $shape);
  $color: test-argument(
    "sugar.loader-grid",
    "color",
    "color|list-color|list-string",
    $color
  );
  $cols: test-argument("sugar.loader-grid", "cols", integer, $cols);
  $rows: test-argument("sugar.loader-grid", "rows", integer, $rows);
  $size: test-argument("sugar.loader-grid", "size", number, $size);
  $gap: test-argument("sugar.loader-grid", "gap", number, $gap);
  $offset: test-argument("sugar.loader-grid", "offset", number, $offset);
  $rotate: test-argument("sugar.loader-grid", "rotate", degree, $rotate);
  $a-shape: test-argument(
    "sugar.loader-grid",
    "a-shape",
    (rect, circle),
    $a-shape
  );
  $a-steps: test-argument("sugar.loader-grid", "a-steps", integer, $a-steps);
  $a-spread: test-argument("sugar.loader-grid", "a-spread", number, $a-spread);
  $a-rotate: test-argument("sugar.loader-grid", "a-rotate", degree, $a-rotate);
  $a-scale: test-argument("sugar.loader-grid", "a-scale", number, $a-scale);
  $a-opacity: test-argument(
    "sugar.loader-grid",
    "a-opacity",
    number,
    $a-opacity
  );
  $a-duration: test-argument(
    "sugar.loader-grid",
    "a-duration",
    second,
    $a-duration
  );
  $a-delay: test-argument("sugar.loader-grid", "a-delay", second, $a-delay);
  $a-ease: test-argument("sugar.loader-grid", "a-ease", string, $a-ease);

  // handle colors
  $colors: null;
  @if is($color, list-color) and list-length($color) > 1 {
    $colors: $color;
  } @else {
    $color: color($color);
  }

  // manage duration :
  $a-duration: $a-duration + $a-delay;

  // position grid
  $width: $size * $cols + $gap * ($cols - 1);
  $height: $size * $rows + $gap * ($rows - 1);

  width: $size;
  height: $size;
  @if $shape == circle {
    border-radius: 50%;
  }
  position: relative;
  top: $height / 2 * -1;
  left: $width / 2 * -1;
  display: inline-block;

  // @include s-translate((-$width / 2 - $size - $gap - $offset) (-$height / 2 - $size - $gap - $offset));
  // transform: translateX(-$width / 2 - $size - $gap - $offset)
  //   translateY(-$height / 2 - $size - $gap - $offset) rotate($rotate);
  // transform-origin: ($offset + $width / 2 + $gap + $size)
  //   ($offset + $height / 2 + $gap + $size);

  $a-name: str-unquote("grid-#{str-unique-id()}");

  // calculate box shadows
  $shadows: ();
  $color-idx: 1;
  @for $i from 0 through $cols - 1 {
    @for $j from 0 through $rows - 1 {
      $x: ($size * $i + $gap * $i) + $size + $gap + $offset;
      $y: ($size * $j + $gap * $j) + $size + $gap + $offset;
      $c: $color;
      @if $colors and list-length($colors) == $cols * $rows {
        $c: list-nth($colors, $color-idx);
        $color-idx: $color-idx + 1;
      } @else if list-length($colors) == 2 {
        @if $j % 2 == 0 {
          $color-idx: $color-idx - 1;
        }
        $c: list-nth($colors, $color-idx % 2 + 1);
      }
      $shadows: list-append($shadows, $c $x $y 0 0, comma);
    }
  }

  &:before {
    @if $shape == circle {
      border-radius: 50%;
    }
    position: relative;
    z-index: 1;
    content: "";
    display: block;
    width: $size;
    height: $size;
    animation: $a-name $a-duration $a-ease 0s infinite;
    box-shadow: $shadows;
    transform: translateX(($size + $gap) * -1) translateY(($size + $gap) * -1);
    transform-origin: ($offset + $width / 2 + $gap + $size)
      ($offset + $height / 2 + $gap + $size);
  }

  // calculate percentage of delay
  $p-delay: 1 / $a-duration * $a-delay;
  // animation
  @keyframes #{$a-name} {
    @for $i from 1 through $a-steps {
      $percentage: math-percentage((1 - $p-delay) / $a-steps * $i);
      #{$percentage} {
        // loop on each box shadows
        $shadows: ();
        $color-idx: 1;
        @for $j from 0 through $cols - 1 {
          @for $k from 0 through $rows - 1 {
            $x: ($size * $j + $gap * $j) + $size + $gap + $offset;
            $y: ($size * $k + $gap * $k) + $size + $gap + $offset;
            $s-spread: 0;
            $blur: 0;
            $c: $color;
            @if $colors and list-length($colors) == $cols * $rows {
              $c: list-nth($colors, $color-idx);
              $color-idx: $color-idx + 1;
            } @else if list-length($colors) == 2 {
              @if $j % 2 != 0 {
                $color-idx: $color-idx - 1;
              }
              $c: list-nth($colors, $color-idx % 2 + 1);
            }
            $transparentize: 0;
            @if $a-opacity and $i < $a-steps {
              $transparentize: 1 - $a-opacity;
              $transparentize: $transparentize * 10;
              $t-rand: math-random($transparentize);
              $transparentize: $t-rand / 10;
              $c: color-transparentize($c, $transparentize);
            }
            @if $a-scale {
              @if $i >= $a-steps {
                $s-spread: 0;
              } @else {
                $s-spread: math-random($a-scale - $size) + 0px;
              }
            }
            @if $a-spread and $i < $a-steps {
              $randX: math-random(math-round($a-spread / 2));
              $randY: math-random(math-round($a-spread / 2));
              @if math-random(10) < 5 {
                $randX: $randX * -1;
              }
              @if math-random(10) < 5 {
                $randY: $randY * -1;
              }
              $x: $x + $randX;
              $y: $y + $randY;
            }
            @if $i >= $a-steps {
              $shadows: list-append($shadows, $c $x $y 0 0, comma);
            } @else {
              $shadows: list-append($shadows, $c $x $y $blur $s-spread, comma);
            }
          }
        }
        @if $a-rotate and $i < $a-steps {
          $randX: math-random(math-round($a-rotate / 2));
          @if math-random(10) < 5 {
            $randX: $randX * -1;
          }
          transform: translateX(($size + $gap) * -1) translateY(($size + $gap) * -1) rotateZ($randX + 0deg);
        } @else {
          transform: translateX(($size + $gap) * -1) translateY(($size + $gap) * -1) rotateZ(0);
        }
        @if $i < $a-steps - 1 {
          @if $a-shape == circle {
            @include corner(50%);
          } @else if $a-shape == rect {
            @include corner(0);
          }
        }
        // apply shadows
        box-shadow: $shadows;
      }
    }
  }
}

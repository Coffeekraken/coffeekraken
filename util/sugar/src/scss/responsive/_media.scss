//
// Universal media mixin
//
$media-keywords: (
  gecko: ".ua-gecko",
  webkit: ".ua-webkit",
  trident: "ua-trident",
  blink: "ua-blink",
  presto: "ua-presto",
  chrome: ".ua-chrome",
  safari: ".ua-safari",
  firefox: ".ua-firefox",
  opera: ".ua-opera",
  ie: ".ua-ie",
  mobile: ".ua-mobile",
  tablet: ".ua-tablet",
  desktop: ".ua-desktop",
  iphone: ".ua-mobile-iphone",
  ipad: ".ua-mobile-ipad",
  ios: ".ua-ios",
  osx: ".ua-mac_os_x",
  windows: ".ua-windows",
  linux: ".ua-linux",
  android: ".ua-android",
  webos: ".ua-webos",
  blackberry: ".ua-blackberry"
);
@for $idx from 6 through 20 {
  $media-keywords: map-merge($media-keywords, (
    "ie#{$idx}": ".ua-ie-#{$idx}"
  ));
}

/**
 * @name      media
 * @namespace           scss.responsive
 * @type      mixin
 *
 * Easy to use media query mixin that support cssua classes to target specific browsers
 *
 * @param 		{String} 		[$screen=null] 			Any of the @media screen type property like "screen, handheld, print, etc..."
 * @param 		{Number} 		[$min-width=null] 		The min width to target
 * @param 		{Number} 		[$max-width=null] 		The max width to target
 * @param 		{Number} 		[$min-height=null] 		The min height to target
 * @param 		{Number} 		[$max-height=null] 		The max height to target
 * @param 		{String} 		[$orientation=null] 	The orientation to target. Can be portrait or landscape
 * @param 		{String} 		[$resolution=null] 		The resolution to target. Can be 2x, 3x, 4x, etc...
 * @param 		{String} 		[$engine=null] 			The engine that powers the display. Can be gecko, webkit, trident, blink or presto
 * @param 		{String} 		[$device=null] 			The device to target. Can be mobile, tablet, desktop, iphone or ipad
 * @param 		{String} 		[$browser=null] 		The browser(s) to target. Can be chrome, safari, firefox, opera, ie, ie6-20
 * @param 		{String} 		[$system=null] 			The system(s) to target. Can be ios, osx, windows, linux, android, webos or blackberry
 *
 * @example 	scss
 * // simple min width
 * \@include sugar.media(
 * 	$min-width : 200px
 * ) {
 * 	// custom css here...
 * }
 *
 * // target a specific engine
 * \@include sugar.media(
 * 	$engine : gecko webkit
 * ) {
 * 	// custom css here
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
@mixin media(
  $screen: null,
  $min-width: null,
  $max-width: null,
  $min-height: null,
  $max-height: null,
  $orientation: null,
  $resolution: null,
  $engine: null,
  $device: null,
  $browser: null,
  $system: null
) {
  $screen: test-argument(
    "sugar.media",
    "screen",
    (
      screen,
      handheld,
      print,
      aural,
      braille,
      embossed,
      projection,
      tty,
      tv,
      all
    ),
    $screen
  );
  $min-width: test-argument("sugar.media", "min-width", number, $min-width);
  $max-width: test-argument("sugar.media", "max-width", number, $max-width);
  $min-height: test-argument("sugar.media", "min-height", number, $min-height);
  $max-height: test-argument("sugar.media", "max-height", number, $max-height);
  $orientation: test-argument(
    "sugar.media",
    "orientation",
    (landscape, portrait),
    $orientation
  );
  $resolution: test-argument(
    "sugar.media",
    "resolution",
    "number|list-number|list",
    $resolution
  );
  $engine: test-argument(
    "sugar.media",
    "engine",
    "string|list-string",
    $engine
  );
  $device: test-argument(
    "sugar.media",
    "device",
    "string|list-string",
    $device
  );
  $browser: test-argument(
    "sugar.media",
    "browser",
    "string|list-string",
    $browser
  );
  $system: test-argument(
    "sugar.media",
    "system",
    "string|list-string",
    $system
  );

  $media: ("all");
  @if $screen {
    $media: list-append($media, $screen);
  }
  @if $orientation {
    $media: list-append($media, "(orientation : #{$orientation})");
  }
  @if $min-width {
    $media: list-append($media, "(min-width : #{$min-width})");
  }
  @if $max-width {
    $media: list-append($media, "(max-width : #{$max-width})");
  }
  @if $min-height {
    $media: list-append($media, "(min-height : #{$min-height})");
  }
  @if $max-height {
    $media: list-append($media, "(max-height : #{$max-height})");
  }

  // resolution
  @if $resolution {
    $res: ();
    @each $r in $resolution {
      $r: '#{$r}';
      $r: str-replace($r, "x");
      $r: to-number($r);
      // check that the $r is now a proper integer
      @if is($r, integer) {
        $res: list-append(
          $res,
          "(-webkit-min-device-pixel-ratio: #{$r}), (min-resolution: #{160 * $r}dpi)"
        );
      }
    }
    // $resolutions : (2x,3x,4x);
    // @each $m in $resolution {
    // 	@if index($resolutions,$m) {
    // 		$res : append($res, map-get($media-keywords,$m));
    // 	}
    // }
    $media: list-append($media, list-implode($res, ","));
  }

  // construct media querie
  $med: list-implode($media, " and ");

  // construct refine
  $refine: ();
  @if $engine {
    $engines: (blink, gecko, trident, webkit, presto);
    @each $e in $engine {
      @if list-index($engines, $e) {
        $refine: list-append($refine, map-get($media-keywords, $e), comma);
      }
    }
  }
  @if $browser {
    $browsers: (chrome, safari, opera, firefox, ie);
    @for $idx from 6 through 20 {
      $browsers: list-append($browsers, "ie#{$idx}");
    }
    @each $b in $browser {
      @if list-index($browsers, $b) {
        $refine: list-append($refine, map-get($media-keywords, $b), comma);
      }
    }
  }
  @if $device {
    $devices: (mobile, tablet, desktop, iphone, ipad);
    @each $d in $device {
      @if list-index($devices, $d) {
        $refine: list-append($refine, map-get($media-keywords, $d), comma);
      }
    }
  }
  @if $system {
    $systems: (ios, android, blackberry, windows, osx, linux, webos);
    @each $s in $system {
      @if list-index($systems, $s) {
        $refine: list-append($refine, map-get($media-keywords, $s), comma);
      }
    }
  }

  @if list-length($refine) <= 0 {
    @media #{$med} {
      @content;
    }
  } @else {
    $this: #{&};
    @media #{$med} {
      @at-root {
        #{list-implode($refine, ', ')} {
          #{$this} {
            @content;
          }
        }
      }
    }
  }
}

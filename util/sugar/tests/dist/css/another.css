.fa,.fab,.fad,.fal,.far,.fas{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:inline-block;font-style:normal;font-feature-settings:normal;font-variant:normal;text-rendering:auto;line-height:1}@font-face{font-family:Font Awesome\ 5 Brands;font-style:normal;font-weight:400;font-display:auto;src:url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-brands-400.eot);src:url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-brands-400.eot#iefix) format("embedded-opentype"),url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-brands-400.woff2) format("woff2"),url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-brands-400.woff) format("woff"),url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-brands-400.ttf) format("truetype"),url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-brands-400.svg#fontawesome) format("svg")}.fab{font-family:Font Awesome\ 5 Brands}@font-face{font-family:Font Awesome\ 5 Free;font-style:normal;font-weight:400;font-display:auto;src:url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-regular-400.eot);src:url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-regular-400.eot#iefix) format("embedded-opentype"),url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-regular-400.woff2) format("woff2"),url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-regular-400.woff) format("woff"),url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-regular-400.ttf) format("truetype"),url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-regular-400.svg#fontawesome) format("svg")}.far{font-weight:400}@font-face{font-family:Font Awesome\ 5 Free;font-style:normal;font-weight:900;font-display:auto;src:url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-solid-900.eot);src:url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-solid-900.eot#iefix) format("embedded-opentype"),url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-solid-900.woff2) format("woff2"),url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-solid-900.woff) format("woff"),url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-solid-900.ttf) format("truetype"),url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-solid-900.svg#fontawesome) format("svg")}.fa,.far,.fas{font-family:Font Awesome\ 5 Free}.fa,.fas{font-weight:900}.mo--center{align-items:center}.mo--end{align-items:flex-end}.mo__content{flex:0 1 auto}.hello{content:"world"}body{content:"hello world"}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjxpbnB1dCBjc3MgMT4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZzFGQSw2QkFNRSxpQ0FBa0MsQ0FDbEMsa0NBQW1DLENBQ25DLG9CQUFxQixDQUNyQixpQkFBa0IsQ0FDbEIsNEJBQW9CLENBQXBCLG1CQUFvQixDQUNwQixtQkFBb0IsQ0FDcEIsYUFDRixDQU1BLFdBQ0Usa0NBQW9DLENBQ3BDLGlCQUFrQixDQUNsQixlQUFtQixDQUNuQixpQkFBa0IsQ0FDbEIsOEZBQWlHLENBQ2pHLDJqQkFDRixDQUNBLEtBQ0Usa0NBQ0YsQ0FNQSxXQUNFLGdDQUFrQyxDQUNsQyxpQkFBa0IsQ0FDbEIsZUFBZ0IsQ0FDaEIsaUJBQWtCLENBQ2xCLCtGQUFrRyxDQUNsRyxna0JBQ0YsQ0FDQSxLQUVFLGVBQ0YsQ0FNQSxXQUNFLGdDQUFrQyxDQUNsQyxpQkFBa0IsQ0FDbEIsZUFBZ0IsQ0FDaEIsaUJBQWtCLENBQ2xCLDZGQUFnRyxDQUNoRyxzakJBQ0YsQ0FDQSxjQWhCRSxnQ0FvQkYsQ0FKQSxTQUdFLGVBQ0YsQ0EwNUJBLFlBQ0Usa0JBQ0YsQ0FFQSxTQUNFLG9CQUNGLENBRUEsYUFDRSxhQUNGLENBRUEsT0FDRSxlQUNGLENBRUEsS0FDRSxxQkFDRiIsImZpbGUiOiJ0by5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJAY2hhcnNldCBcIlVURi04XCI7XG4vKipcbiAqIEBuYW1lICAgIGNvbG9yLWh1ZVxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5jb3JlLmNvbG9yXG4gKiBAdHlwZSAgICAgICAgICBGdW5jdGlvblxuICpcbiAqIFJldHVybiB0aGUgaHVlIG9mIHRoZSBwYXNzZWQgY29sb3JcbiAqXG4gKiBAcGFyYW0gICAgICAge0NvbG9yfSAgICAgJGNvbG9yICAgICAgVGhlIGNvbG9yIHRvIHByb2Nlc3NcbiAqIEByZXR1cm4gICAgICB7TnVtYmVyfSAgICAgICAgICAgICAgICBUaGUgY29sb3IgaHVlXG4gKlxuICogQGV4YW1wbGUgICBzY3NzXG4gKiBzdWdhci5jb2xvci1odWUoI2UxZDdkMik7IC8vID0+IDIwZGVnXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIGNvbG9yLWxpZ2h0bmVzc1xuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5jb3JlLmNvbG9yXG4gKiBAdHlwZSAgICAgICAgICBGdW5jdGlvblxuICpcbiAqIFJldHVybiB0aGUgbGlnaHRuZXNzIG9mIHRoZSBwYXNzZWQgY29sb3JcbiAqXG4gKiBAcGFyYW0gICAgICAgICB7Q29sb3J9ICAgICAgICRjb2xvciAgICAgIFRoZSBjb2xvciB0byBjaGVja1xuICogQHJldHVybiAgICAgICAge051bWJlcn0gICAgICAgICAgICAgICAgICBUaGUgY29sb3IgbGlnaHRuZXNzXG4gKlxuICogQGV4YW1wbGUgICAgIHNjc3NcbiAqIHN1Z2FyLmNvbG9yLWxpZ2h0bmVzcygjZTFkN2QyKTsgLy8gPT4gODUuMjk0MTE3NjQ3MSVcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgIGNvbG9yLW9wYWNpdHlcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MuY29yZS5jb2xvclxuICogQHR5cGUgICAgICAgICAgRnVuY3Rpb25cbiAqXG4gKiBSZXR1cm4gdGhlIG9wYWNpdHkgb2YgdGhlIHBhc3NlZCBjb2xvclxuICpcbiAqIEBwYXJhbSAgICAgICB7Q29sb3J9ICAgICAgICRjb2xvciAgICAgICAgVGhlIGNvbG9yIHRvIHByY2Vzc1xuICogQHJldHVybiAgICAgIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgICBUaGUgY29sb3Igb3BhY2l0eVxuICpcbiAqIEBleGFtcGxlICAgICBzY3NzXG4gKiBzdWdhci5jb2xvci1vcGFjaXR5KCNlMWQ3ZDIpOyAvLyA9PiAxXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICBjb2xvci1zYXR1cmF0aW9uXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmNvcmUuY29sb3JcbiAqIEB0eXBlICAgICAgICAgIEZ1bmN0aW9uXG4gKlxuICogUmV0dXJuIHRoZSBzYXR1cmF0aW9uIG9mIHRoZSBwYXNzZWQgY29sb3JcbiAqXG4gKiBAcGFyYW0gICAgICAge0NvbG9yfSAgICAgJGNvbG9yICAgICAgVGhlIGNvbG9yIHRvIHByb2Nlc3NcbiAqIEByZXR1cm4gICAgICB7TnVtYmVyfSAgICAgICAgICAgICAgICBUaGUgY29sb3Igc2F0dXJhdGlvblxuICpcbiAqIEBleGFtcGxlICAgc2Nzc1xuICogc3VnYXIuY29sb3Itc2F0dXJhdGlvbigjZTFkN2QyKTsgLy8gPT4gMjAlXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICBjb2xvci10cmFuc3BhcmVudGl6ZVxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5jb2xvclxuICogQHR5cGUgICAgICAgICAgRnVuY3Rpb25cbiAqXG4gKiBNYWtlcyAkY29sb3IgbW9yZSB0cmFuc3BhcmVudC5cbiAqIFRoZSAkYW1vdW50IG11c3QgYmUgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxIChpbmNsdXNpdmUpLiBEZWNyZWFzZXMgdGhlIGFscGhhIGNoYW5uZWwgb2YgJGNvbG9yIGJ5IHRoYXQgYW1vdW50LlxuICpcbiAqIEBwYXJhbSAgICAgICB7Q29sb3J9ICAgICAgICRjb2xvciAgICAgICAgVGhlIGNvbG9yIHRvIHByb2Nlc3NcbiAqIEBwYXJhbSAgICAgICB7TnVtYmVyfSAgICAgICRhbW91bnQgICAgICAgVGhlIGFtb3VudCB0byB0cmFuc3BhcmVudGl6ZSB0aGUgY29sb3IuIE11c3QgYmUgYmV0d2VlbiAwIGFuZCAxXG4gKlxuICogQGV4YW1wbGUgICAgICAgc2Nzc1xuICogc3VnYXIuY29sb3ItdHJhbnNwYXJlbnRpemUocmdiYSgjMDM2LCAwLjMpLCAwLjMpOyAvLyA9PiByZ2JhKDAsIDUxLCAxMDIsIDApXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIGxpc3QtYXBwZW5kXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmxpc3RcbiAqIEB0eXBlICAgICAgZnVuY3Rpb25cbiAqXG4gKiBBcHBlbmQgYSB2YWx1ZSB0byB0aGUgcGFzc2VkIGxpc3RcbiAqXG4gKiBAcGFyYW0gICAgICAgICAgIHtMaXN0fSAgICAgICAgJGxpc3QgICAgICAgICAgICAgICBUaGUgbGlzdCB0byBhcHBlbmQgdGhlIHZhbHVlIHRvXG4gKiBAcGFyYW0gICAgICAgICAgIHtNaXhlZH0gICAgICAgJHZhbHVlICAgICAgICAgICAgICBUaGUgdmFsdWUgdG8gYXBwZW5kIHRvIHRoZSBsaXN0XG4gKiBAcGFyYW0gICAgICAgICAgIHtTdHJpbmd9ICAgICAgWyRzZXBhcmF0b3I9YXV0b10gICBUaGUgc2VwYXJhdG9yIHRvIHVzZS4gQ2FuIGJlIGF1dG8sIHNwYWNlIG9yIGNvbW1hXG4gKiBAcmV0dXJuICAgICAgICAgIHtMaXN0fSAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGUgbmV3IGxpc3Qgd2l0aCB0aGUgYXBwZW5kZWQgdmFsdWVcbiAqXG4gKiBAZXhhbXBsZSAgICAgc2Nzc1xuICogc3VnYXIubGlzdC1hcHBlbmQoaGVsbG8gd29ybGQsIGNvY28sIGNvbW1hKTsgLy8gaGVsbG8sIHdvcmxkLCBjb2NvXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIGxpc3QtZmlyc3RcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MubGlzdFxuICogQHR5cGUgICAgICBmdW5jdGlvblxuICpcbiAqIFJldHVybiB0aGUgZmlyc3QgZWxlbWVudCBvZiB0aGUgcGFzc2VkIGxpc3RcbiAqXG4gKiBAcGFyYW0gICAgICAgICB7TGlzdH0gICAgICAgICRsaXN0ICAgICAgICAgVGhlIGxpc3QgdG8gZ2V0IHRoZSBmaXJzdCBlbGVtZW50IGZyb21cbiAqIEByZXR1cm4gICAgICAgIHtNaXhlZH0gICAgICAgICAgICAgICAgICAgICBUaGUgZmlyc3QgZWxlbWVudCBvZiB0aGUgbGlzdFxuICpcbiAqIEBleGFtcGxlICAgICAgIHNjc3NcbiAqIHN1Z2FyLmxpc3QtZmlyc3QoKCdoZWxsbycsICd3b3JsZCcpKTsgLy8gPT4gJ2hlbGxvJ1xuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICBsaXN0LWltcGxvZGVcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MubGlzdFxuICogQHR5cGUgICAgICBmdW5jdGlvblxuICpcbiAqIEpvaW4gYWxsIHRoZSBsaXN0IGl0ZW1zIHVzaW5nIHRoZSBwYXNzZWQgZ2x1ZSBhbmQgcmV0dXJuIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtICAgICAgICAgICB7TGlzdH0gICAgICAgICAgJGxpc3QgICAgICAgICAgIFRoZSBsaXN0IHRvIGltcGxvZGVcbiAqIEBwYXJhbSAgICAgICAgICAge1N0cmluZ30gICAgICAgIFskZ2x1ZT1cIlwiXSAgICAgIFRoZSBnbHVlIHRvIHVzZSB0byBpbXBsb2RlIHRoZSBsaXN0XG4gKiBAcmV0dXJuICAgICAgICAgIHtTdHJpbmd9ICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGltcGxvZGVkIGxpc3QgaW4gc3RyaW5nIGZvcm1hdFxuICpcbiAqIEBleGFtcGxlICAgICAgIHNjc3NcbiAqIHN1Z2FyLmxpc3QtaW1wbG9kZSgoJ2hlbGxvJywnd29ybGQnKSwgJy0nKTsgLy8gaGVsbG8td29ybGRcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgIGxpc3QtaW5kZXhcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MubGlzdFxuICogQHR5cGUgICAgICBmdW5jdGlvblxuICpcbiAqIFJldHVybiB0aGUgaW5kZXggb2YgdGhlIHdhbnRlZCB2YWx1ZSBpbiB0aGUgcGFzc2VkIGxpc3QuXG4gKlxuICogQHBhcmFtICAgICAgIHtMaXN0fSAgICAgICRsaXN0ICAgICAgIFRoZSBsaXN0IHRvIHByb2Nlc3NcbiAqIEBwYXJhbSAgICAgICB7TWl4ZWR9ICAgICAkdmFsdWUgICAgICBUaGUgdmFsdWUgdG8gc2VhcmNoIGluIHRoZSBsaXN0XG4gKiBAcmV0dXJuICAgICAge051bWJlcn0gICAgICAgICAgICAgICAgVGhlIGluZGV4IG9mIHRoZSBmb3VuZGVkIHZhbHVlIG9yIG51bGxcbiAqXG4gKiBAZXhhbXBsZSAgICAgc2Nzc1xuICogc3VnYXIubGlzdC1pbmRleCgoJ2hlbGxvJywnd29ybGQnKSwgJ3dvcmxkJyk7IC8vID0+IDJcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgbGlzdC1qb2luXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmxpc3RcbiAqIEB0eXBlICAgICAgZnVuY3Rpb25cbiAqXG4gKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIGFsbCB0aGUgbGlzdCBpdGVtc1xuICpcbiAqIEBwYXJhbSAgICAgICAgIHtMaXN0fSAgICAgICAgJGxpc3QxICAgICAgICAgVGhlIGxpc3QgdG8gcHJvY2Vzc1xuICogQHBhcmFtICAgICAgICAge0xpc3R9ICAgICAgICAkbGlzdDIgICAgICAgICBUaGUgbGlzdCB0byBqb2luIHdpdGggdGhlIGZpcnN0IG9uZVxuICogQHBhcmFtICAgICAgICAge1N0cmluZ30gICAgICBbJHNlcGFyYXRvcj1hdXRvXSAgICAgVGhlIHNlcGFyYXRvciB0byB1c2UgZm9yIHRoZSBsaXN0LiBDYW4gYmUgYXV0bywgY29tbWEgb3Igc3BhY2VcbiAqIEBwYXJhbSAgICAgICAgIHtTdHJpbmd8Qm9vbGVhbn0gICAgWyRicmFja2V0ZWQ9YXV0b10gICAgIElmIHRydWUgaXMgcGFzc2VkLCB0aGUgbGlzdCB3aWxsIGJlIGJyYWNrZXRlZFxuICogQHJldHVybiAgICAgICAge1N0cmluZ30gICAgICAgICAgICAgICAgICAgIFRoZSBuZXcgbGlzdFxuICpcbiAqIEBleGFtcGxlICAgICBzY3NzXG4gKiBzdWdhci5saXN0LWpvaW4oKCdoZWxsbycsJ3dvcmxkJyksICgnY29jbycpLCBzcGFjZSk7IC8vICgnaGVsbG8nICd3b3JsZCcgJ2NvY28nKVxuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgbGlzdC1sYXN0LW50aFxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5saXN0XG4gKiBAdHlwZSAgICAgIGZ1bmN0aW9uXG4gKlxuICogUmV0dXJuIHRoZSBsYXN0IGl0ZW0gb2YgdGhlIHBhc3NlZCBsaXN0XG4gKlxuICogQHBhcmFtICAgICB7TGlzdH0gICAgJGxpc3QgICAgIFRoZSBsaXN0IHRvIGdldCB0aGUgbGFzdCBpdGVtIGZyb21cbiAqIEByZXR1cm4gICAge01peGVkfSAgICAgICAgICAgICBUaGUgbGFzdCBpdGVtIG9mIHRoZSBsaXN0XG4gKlxuICogQGV4YW1wbGUgICAgICAgc2Nzc1xuICogc3VnYXIubGlzdC1sYXN0LW50aCgoJ2hlbGxvJywgJ3dvcmxkJykpOyAvLyAnd29ybGQnXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIGxpc3QtbGVuZ3RoXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmxpc3RcbiAqIEB0eXBlICAgICAgZnVuY3Rpb25cbiAqXG4gKiBSZXR1cm4gdGhlIG51bWJlciBvZiBpdGVtIGluIHRoZSBwYXNzZWQgbGlzdFxuICpcbiAqIEBwYXJhbSAgICAgICB7TGlzdH0gICAgICAkbGlzdCAgICAgICAgIFRoZSBsaXN0IHRvIGNoZWNrXG4gKiBAcmV0dXJuICAgICAge051bWJlcn0gICAgICAgICAgICAgICAgICBUaGUgY291bnQgb2YgaXRlbSBpbiB0aGUgbGlzdFxuICpcbiAqIEBleGFtcGxlICAgICBzY3NzXG4gKiBzdWdhci5saXN0LWxlbmd0aCgoJ2hlbGxvJywnd29ybGQnKSk7IC8vID0+IDJcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgbGlzdC1zZXQtbnRoXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmxpc3RcbiAqIEB0eXBlICAgICAgZnVuY3Rpb25cbiAqXG4gKiBTZXQgYSB2YWx1ZSBpbiB0aGUgcGFzc2VkIGxpc3QgYXQgdGhlIHBhc3NlZCBpbmRleC4gVGhlIG9yaWdpbmFsIHZhbHVlIGF0IHRoZSBwYXNzZWQgaW5kZXggd2lsbCBiZSByZXBsYWNlZCB3aXRoIHRoZSBwYXNzZWQgdmFsdWVcbiAqXG4gKiBAcGFyYW0gICAgICAge0xpc3R9ICAgICAgJGxpc3QgICAgICAgVGhlIGxpc3QgdG8gcHJvY2Vzc1xuICogQHBhcmFtICAgICAgIHtOdW1iZXJ9ICAgICRpbmRleCAgICAgIFRoZSBpbmRleCB0byBzZXQgdGhlIHZhbHVlIGluIHRoZSBsaXN0XG4gKiBAcGFyYW0gICAgICAge01peGVkfSAgICAgJHZhbHVlICAgICAgVGhlIHZhbHVlIHRvIHNldCBpbiB0aGUgbGlzdFxuICogQHJldHVybiAgICAgIHtMaXN0fSAgICAgICAgICAgICAgICAgIFRoZSBuZXcgcHJvY2Vzc2VkIGxpc3RcbiAqXG4gKiBAZXhhbXBsZSAgICAgICBzY3NzXG4gKiBzdWdhci5saXN0LXNldC1udGgoKCdoZWxsbycsJ3dvcmxkJyksIDEsICdjb2NvJyk7IC8vID0+ICgnY29jbycsJ3dvcmxkJylcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgIGxpc3QtbnRoXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmxpc3RcbiAqIEB0eXBlICAgICAgZnVuY3Rpb25cbiAqXG4gKiBSZXR1cm4gdGhlIGl0ZW0gb2YgdGhlIGxpc3QgYXQgdGhlIHBhc3NlZCBpbmRleFxuICpcbiAqIEBwYXJhbSAgICAgICAgIHtMaXN0fSAgICAgICAgJGxpc3QgICAgICAgICBUaGUgbGlzdCB0byBwcm9jZXNzXG4gKiBAcGFyYW0gICAgICAgICB7TnVtYmVyfSAgICAgICRpbmRleCAgICAgICAgVGhlIGluZGV4IG9mIHRoZSBlbGVtZW50IHRvIGdldCBpbiB0aGUgbGlzdFxuICogQHJldHVybiAgICAgICAge01peGVkfSAgICAgICAgICAgICAgICAgICAgIFRoZSB2YWx1ZSBhdCB0aGUgcGFzc2VkIGluZGV4XG4gKlxuICogQGV4YW1wbGUgICAgIHNjc3NcbiAqIHN1Z2FyLmxpc3QtbnRoKCgnaGVsbG8nLCd3b3JsZCcpLCAyKTsgLy8gPT4gJ3dvcmxkJ1xuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICBsaXN0LXBvcFxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5saXN0XG4gKiBAdHlwZSAgICAgIGZ1bmN0aW9uXG4gKlxuICogUmVtb3ZlIHRoZSBsYXN0IGl0ZW0gb2YgdGhlIHBhc3NlZCBsaXN0XG4gKlxuICogQHBhcmFtICAgICAgIHtMaXN0fSAgICAgICAgJGxpc3QgICAgICAgICBUaGUgbGlzdCB0byBwcm9jZXNzXG4gKiBAcmV0dXJuICAgICAge0xpc3R9ICAgICAgICAgICAgICAgICAgICAgIFRoZSBwcm9jZXNzZWQgbGlzdFxuICpcbiAqIEBleGFtcGxlICAgICAgIHNjc3NcbiAqIHN1Z2FyLmxpc3QtcG9wKCgnaGVsbG8nLCAnd29ybGQnKSk7IC8vICgnaGVsbG8nKVxuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgbGlzdC1wcmVwZW5kXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmxpc3RcbiAqIEB0eXBlICAgICAgZnVuY3Rpb25cbiAqXG4gKiBQcmVwZW5kIGEgdmFsdWUgaW4gdGhlIHBhc3NlZCBsaXN0XG4gKlxuICogQHBhcmFtICAgICAgICAge0xpc3R9ICAgICAgICAkbGlzdCAgICAgICAgICAgVGhlIGxpc3QgdG8gcHJvY2Vzc1xuICogQHBhcmFtICAgICAgICAge01peGVkfSAgICAgICAkdmFsdWUgICAgICAgICAgVGhlIHZhbHVlIHRvIHByZXBlbmQgaW4gdGhlIGxpc3RcbiAqIEBwYXJhbSAgICAgICAgIHtTdHJpbmd9ICAgICAgWyRzZXBhcmF0b3I9YXV0b10gICBUaGUgc2VwYXJhdG9yIHRvIHVzZS4gQ2FuIGJlIGF1dG8sIHNwYWNlIG9yIGNvbW1hXG4gKiBAcmV0dXJuICAgICAgICB7TGlzdH0gICAgICAgICAgICAgICAgICAgICAgICBUaGUgbmV3IGxpc3Qgd2l0aCBoaXMgbmV3IHZhbHVlXG4gKlxuICogQGV4YW1wbGUgICBzY3NzXG4gKiBzdWdhci5saXN0LXByZXBlbmQoKCdoZWxsbycsJ3dvcmxkJyksICdjb2NvJyk7IC8vID0+ICgnY29jbycsJ2hlbGxvJywnd29ybGQnKVxuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICBsaXN0LXJlbW92ZS1udGhcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MubGlzdFxuICogQHR5cGUgICAgICBmdW5jdGlvblxuICpcbiAqIFJlbW92ZSBpdGVtIGZyb20gbGlzdCB1c2luZyBhbiBpbmRleFxuICpcbiAqIEBwYXJhbSAgICAgICAgIHtMaXN0fSAgICAgICAgICAkbGlzdCAgICAgICAgICAgVGhlIGxpc3QgdG8gcHJvY2Vzc1xuICogQHBhcmFtICAgICAgICAge051bWJlcn0gICAgICAgICRpbmRleCAgICAgICAgICBUaGUgaW5kZXggb2YgdGhlIGl0ZW0gdG8gcmVtb3ZlIGZyb20gdGhlIGxpc3RcbiAqIEByZXR1cm4gICAgICAgIHtMaXN0fSAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIHByb2Nlc3NlcyBsaXN0XG4gKlxuICogQGV4YW1wbGUgICAgICAgc2Nzc1xuICogc3VnYXIubGlzdC1yZW1vdmUtbnRoKCgnaGVsbG8nLCd3b3JsZCcpLCAxKTsgLy8gKCdoZWxsbycpXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIGxpc3Qtc2VhcmNoXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmxpc3RcbiAqIEB0eXBlICAgICAgZnVuY3Rpb25cbiAqXG4gKiBTZWFyY2ggZm9yIHRoZSBwYXNzZWQgdmFsdWUgaW4gdGhlIHBhc3NlZCBsaXN0IGFuZCByZXR1cm4gdHJ1ZSBpZiBleGlzdCwgZmFsc2UgaWYgbm90XG4gKlxuICogQHBhcmFtICAgICAgICAgICB7TGlzdH0gICAgICAgICAgJGxpc3QgICAgICAgICAgIFRoZSBsaXN0IGluIHdoaWNoIHRvIHNlYXJjaCBmb3IgdGhlIHBhc3NlZCB2YWx1ZVxuICogQHBhcmFtICAgICAgICAgICB7TWl4ZWR9ICAgICAgICAgJHZhbHVlICAgICAgICAgIFRoZSB2YWx1ZSB0byBzZWFyY2ggaW4gdGhlIExpc3RcbiAqIEByZXR1cm4gICAgICAgICAge0Jvb2xlYW59ICAgICAgICAgICAgICAgICAgICAgICB0cnVlIGlmIHRoZSB2YWx1ZSBleGlzdCBpbiB0aGUgbGlzdCwgZmFsc2UgaWYgbm90XG4gKlxuICogQGV4YW1wbGUgICBzY3NzXG4gKiBzdWdhci5saXN0LXNlYXJjaCgoJ2hlbGxvJywgJ3dvcmxkJyksICdoZWxsbycpOyAvLyA9PiB0cnVlXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIG1hcC1kZWVwLXZhbHVlc1xuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5tYXBcbiAqIEB0eXBlICAgICAgZnVuY3Rpb25cbiAqXG4gKiBHZXQgdmFsdWVzIG9mIGEgbWFwIGV2ZW4gaWYgaXQgaXMgZGVlcFxuICpcbiAqIEBwYXJhbSAgICAgICB7TWFwfSAgICAgICAkbWFwICAgICAgICBUaGUgbWFwIHRvIGdldCB2YWx1ZXMgZnJvbVxuICogQHJldHVybiAgICAgIHtMaXN0fSAgICAgICAgICAgICAgICAgIFRoZSBsaXN0IG9mIG1hcCB2YWx1ZXNcbiAqXG4gKiBAZXhhbXBsZSAgICAgICBzY3NzXG4gKiBzdWdhci5tYXAtZGVlcC12YWx1ZXMoKFxuICogICAgJ2hlbGxvJzogJ3dvcmxkJyxcbiAqICAgICdjb2NvJzogKFxuICogICAgICAgJ3Bsb3AnOiAneW91aG91J1xuICogICAgKVxuICogKSk7XG4gKiAvLyA9PiAoJ3dvcmxkJywgJ3lvdWhvdScpXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIG1hcC1leHRlbmRcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MubWFwXG4gKiBAdHlwZSAgICAgIGZ1bmN0aW9uXG4gKlxuICogRXh0ZW5kIHRoZSBwYXNzZWQgbWFwIHdpdGggdGhlIG90aGVycyBwYXNzZWQgbWFwKHMpXG4gKlxuICogQHBhcmFtICAgICAgICAgICB7TWFwfSAgICAgICAgICRtYXAgICAgICAgIFRoZSBtYXAgdG8gQGV4dGVuZFxuICogQHBhcmFtICAgICAgICAgICB7TWFwfExpc3QtTWFwfSAgJG1hcHMgICAgIFRoZSBtYXAocykgdXNlZCB0byBleHRlbmQgdGhlIGZpcnN0IG9uZVxuICogQHJldHVybiAgICAgICAgICB7TWFwfSAgICAgICAgICAgICAgICAgICAgIFRoZSBleHRlbmRlZCBtYXBcbiAqXG4gKiBAZXhhbXBsZSAgICAgc2Nzc1xuICogc3VnYXIubWFwLWV4dGVuZCgoXG4gKiAgJ2hlbGxvJzogJ3dvcmxkJ1xuICogKSwgKFxuICogICdjb2NvJzogJ3Bsb3AnXG4gKiApKTtcbiAqIC8vIHJldHVybmVkIG1hcDpcbiAqIChcbiAqICAnaGVsbG8nOiAnd29ybGQnLFxuICogICdjb2NvJzogJ3Bsb3AnXG4gKiApXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIG1hcC1maWx0ZXItYnktbmFtZXNwYWNlXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLm1hcFxuICogQHR5cGUgICAgICBmdW5jdGlvblxuICpcbiAqIFJldHVybiBhbGwgdGhlIG1hcCB2YWx1ZXMgdGhhdCBoYXZlIGEga2V5IHRoYXQgbWF0Y2ggdGhlIHBhc3NlZCBuYW1lc3BhY2VcbiAqXG4gKiBAcGFyYW0gICAgICAgICAgIHtNYXB9ICAgICAgICAgJG1hcCAgICAgICAgICBUaGUgbWFwIHRvIHByb2Nlc3NcbiAqIEBwYXJhbSAgICAgICAgICAge1N0cmluZ30gICAgICAkbmFtZXNwYWNlICAgIFRoZSBuYW1lc3BhY2UgdG8gc2VhcmNoIGxpa2UgKHNvbWV0aGluZy5hbm90aGVyLnRoaW5nKVxuICogQHJldHVybiAgICAgICAgICB7TWFwfSAgICAgICAgICAgICAgICAgICAgICAgVGhlIGZpbHRlcmVkIG1hcFxuICpcbiAqIEBleGFtcGxlICAgICBzY3NzXG4gKiBzdWdhci5tYXAtZmlsdGVyLWJ5LW5hbWVzcGFjZSgoXG4gKiAgJ2hlbGxvLndvcmxkJzogJ0hlbGxvJyxcbiAqICAnY29jby53b3JsZCc6ICdDb2NvJyxcbiAqICAnaGVsbG8udGhhdCc6ICdUaGF0IGlzIGNvb2wnXG4gKiApLCAnaGVsbG8nKTtcbiAqIC8vIHJldHVybiB0aGF0IG1hcDpcbiAqIChcbiAqICAgJ2hlbGxvLndvcmxkJzogJ0hlbGxvJyxcbiAqICAgJ2hlbGxvLnRoYXQnOiAnVGhhdCBpcyBjb29sJ1xuICogKVxuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgbWFwLWdldC1vclxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5tYXBcbiAqIEB0eXBlICAgICAgZnVuY3Rpb25cbiAqXG4gKiBHZXQgYSBtYXAgdmFsdWUgYnkgcGFzc2luZyBhIGxpc3Qgb2Ygd2FudGVkIGluZGV4ZXMsIG9yIHJldHVybiB0aGUgZGVmYXVsdCBwYXNzZWQgdmFsdWVcbiAqXG4gKiBAcGFyYW0gICAgICAgICB7TWFwfSAgICAgICAgICRtYXAgICAgICAgICAgICAgIFRoZSBtYXAgdG8gZ2V0IHRoZSB2YWx1ZSBmcm9tXG4gKiBAcGFyYW0gICAgICAgICB7TGlzdH0gICAgICAgICRpbmRleC1saXN0ICAgICAgIFRoZSBsaXN0IG9mIGluZGV4ZXMgdG8gdHJ5IHRvIGdldFxuICogQHBhcmFtICAgICAgICAge01pZGV4fSAgICAgICBbJGRlZmF1bHQ9bnVsbF0gICBUaGUgZGVmYXVsdCB2YWx1ZSB0byByZXR1cm4gaWYgbm90aGluZyBpcyBmb3VuZCBpbiB0aGUgbWFwXG4gKlxuICogQGV4YW1wbGUgICAgIHNjc3NcbiAqIHN1Z2FyLm1hcC1nZXQtb3IoKFxuICogIGNvY286ICdoZWxsbycsXG4gKiAgcGxvcDogJ3dvcmxkJ1xuICogKSwgcGxvcCwgbnVsbCk7IC8vICd3b3JsZCdcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgIG1hcC1nZXQtcGF0aFxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5tYXBcbiAqIEB0eXBlICAgICAgZnVuY3Rpb25cbiAqXG4gKiBSZXR1cm4gdGhlIG1hcCB2YWx1ZSBkZXBlbmRpbmcgb24gdGhlIHBhc3NlZCBwYXRoXG4gKlxuICogQHBhcmFtICAgICAgIHtNYXB9ICAgICAgICRtYXAgICAgICAgIFRoZSBtYXAgaW4gd2hpY2ggdG8gZ2V0IHRoZSB2YWx1ZVxuICogQHBhcmFtICAgICAgIHtTdHJpbmd9ICAgICRwYXRoICAgICAgIFRoZSBwYXRoIHRvIGdldCB0aGUgdmFsdWUgZnJvbVxuICogQHBhcmFtICAgICAgIHtNaXhlZH0gICAgIFskZGVmYXVsdDpudWxsXSAgICAgICBUaGUgZGVmYXVsdCB2YWx1ZSB0byByZXR1cm4gaWYgbm9uZSBleGlzdFxuICogQHJldHVybiAgICAgIHtNaXhlZH0gICAgICAgICAgICAgICAgIFRoZSB2YWx1ZSB3YW50ZWRcbiAqXG4gKiBAZXhhbXBsZSAgICAgc2Nzc1xuICogc3VnYXIubWFwLWdldC1wYXRoKChcbiAqICAgICdoZWxsbyc6ICd3b3JsZCcsXG4gKiAgICAnY29jbyc6IChcbiAqICAgICAgJ3Bsb3AnOiAneW91aG91J1xuICogICAgKVxuICogKSwgJ2NvY28ucGxvcCcpO1xuICogLy8gPT4gJ3lvdWhvdSdcbiAqXG4gKiBAYXV0aG9yIFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIG1hcC1nZXRcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MubWFwXG4gKiBAdHlwZSAgICAgIGZ1bmN0aW9uXG4gKlxuICogR2V0IGEgdmFsdWUgaW4gdGhlIHBhc3NlZCBtYXAgdXNpbmcgdGhlIHBhc3NlZCBrZXlcbiAqXG4gKiBAcGFyYW0gICAgICAgICB7TWFwfSAgICAgICAgICRtYXAgICAgICAgIFRoZSBtYXAgdG8gZ2V0IHRoZSB2YWx1ZSBmcm9tXG4gKiBAcGFyYW0gICAgICAgICB7U3RyaW5nfSAgICAgICRrZXkgICAgICAgIFRoZSBrZXkgdG8gZ2V0IHRoZSB2YWx1ZSBpbiB0aGUgbWFwXG4gKiBAcGFyYW0gICAgICAgICB7TWl4ZWR9ICAgICAgICAgICAgICAgICAgIFRoZSBnZXR0ZWQgdmFsdWVcbiAqXG4gKiBAZXhhbXBsZSAgICAgICBzY3NzXG4gKiBzdWdhci5tYXAtZ2V0KChcbiAqICBoZWxsbzogJ3dvcmxkJ1xuICogKSwgaGVsbG8pOyAvLyA9PiAnd29ybGQnXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgbWFwLWhhcy1rZXlcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MubWFwXG4gKiBAdHlwZSAgICAgIGZ1bmN0aW9uXG4gKlxuICogQ2hlY2sgaWYgdGhlIHBhc3NlZCBtYXAgaGFzIHRoZSBwYXNzZWQga2V5LiBSZXR1cm4gdHJ1ZSBpZiBoYXMsIGZhbHNlIGlmIG5vdFxuICpcbiAqIEBwYXJhbSAgICAgICAgICAge01hcH0gICAgICAgICAkbWFwICAgICAgICBUaGUgbWFwIHRvIGNoZWNrXG4gKiBAcGFyYW0gICAgICAgICAgIHtTdHJpbmd9ICAgICAgJGtleSAgICAgICAgVGhlIGtleSB0byBjaGVjayBpbiB0aGUgbWFwXG4gKiBAcmV0dXJuICAgICAgICAgIHtCb29sZWFufSAgICAgICAgICAgICAgICAgdHJ1ZSBpZiBoYXMgdGhlIGtleSwgZmFsc2UgaWYgbm90XG4gKlxuICogQGV4YW1wbGUgICAgIHNjc3NcbiAqIHN1Z2FyLm1hcC1oYXMta2V5KChcbiAqICAgICdoZWxsbyc6ICd3b3JsZCcsXG4gKiAgICAnY29jbyc6ICdwbG9wJ1xuICogKSwgJ2hlbGxvJyk7IC8vID0+IHRydWVcbiAqXG4gKiBAYXV0aG9yIFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgbWFwLWtleXNcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MubWFwXG4gKiBAdHlwZSAgICAgIGZ1bmN0aW9uXG4gKlxuICogUmV0dXJuIGEgY29tbWEgc2VwYXJhdGVkIGxpc3Qgb2YgdGhlIG1hcCBrZXlzXG4gKlxuICogQHBhcmFtICAgICAgIHtNYXB9ICAgICAgICRtYXAgICAgICBUaGUgbWFwIHRvIHByb2Nlc3NcbiAqIEByZXR1cm4gICAgICB7TGlzdH0gICAgICAgICAgICAgICAgVGhlIGxpc3Qgb2YgbWFwIGtleXNcbiAqXG4gKiBAZXhhbXBsZSAgICAgc2Nzc1xuICogc3VnYXIubWFwLWtleXMoKFxuICogICdoZWxsbyc6ICd3b3JsZCcsXG4gKiAgJ2NvY28nOiAncGxvcCdcbiAqICkpOyAvLyA9PiAoJ2hlbGxvJywnY29jbycpXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICBtYXAtbWVyZ2VcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MubWFwXG4gKiBAdHlwZSAgICAgIGZ1bmN0aW9uXG4gKlxuICogTWVyZ2UgdGhlIGZpcnN0IHBhc3NlZCBtYXAgd2l0aCB0aGUgc2Vjb25kIHBhc3NlZCBvbmUgYW5kIHJldHVybiB0aGUgcmVzdWx0XG4gKlxuICogQHBhcmFtICAgICAgICAgICB7TWFwfSAgICAgICAgICRtYXAxICAgICAgICAgVGhlIGZpcnN0IG1hcCB0byBleHRlbmRcbiAqIEBwYXJhbSAgICAgICAgICAge01hcH0gICAgICAgICAkbWFwMiAgICAgICAgIFRoZSBzZWNvbmQgbWFwIHRvIGV4dGVuZCB0aGUgZmlyc3Qgb25lIHdpdGhcbiAqIEByZXR1cm4gICAgICAgICAge01hcH0gICAgICAgICAgICAgICAgICAgICAgIFRoZSBleHRlbmRlZCBtYXBcbiAqXG4gKiBAZXhhbXBsZSAgICAgc2Nzc1xuICogc3VnYXIubWFwLW1lcmdlKChcbiAqICBoZWxsbzogJ3dvcmxkJ1xuICogKSwgKFxuICogIGNvY286ICdwbG9wJ1xuICogKSk7XG4gKiAvLyByZXR1cm5lZCBtYXA6XG4gKiAoXG4gKiAgaGVsbG86ICd3b3JsZCcsXG4gKiAgY29jbzogJ3Bsb3AnXG4gKiApXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICBtYXAtcmVtb3ZlXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLm1hcFxuICogQHR5cGUgICAgICBmdW5jdGlvblxuICpcbiAqIFJlbW92ZSBvbmUgb3IgbXVsdGlwbGUga2V5cyBmcm9tIHRoZSBwYXNzZWQgbWFwXG4gKlxuICogQHBhcmFtICAgICAgICAgICB7TWFwfSAgICAgICAgICRtYXAgICAgICAgICAgVGhlIG1hcCB0byBwcm9jZXNzXG4gKiBAcGFyYW0gICAgICAgICAgIHtTdHJpbmd9ICAgICAgJGtleXMuLi4gICAgICBUaGUga2V5KHMpIHRvIHJlbW92ZVxuICogQHJldHVybiAgICAgICAgICB7TWFwfSAgICAgICAgICAgICAgICAgICAgICAgVGhlIHByb2Nlc3NlZCBtYXBcbiAqXG4gKiBAZXhhbXBsZSAgICAgICBzY3NzXG4gKiBzdWdhci5tYXAtcmVtb3ZlKChcbiAqICBoZWxsbzogJ3dvcmxkJyxcbiAqICBjb2NvOiAncGxvcCdcbiAqICksIGNvY28pO1xuICogLy8gcmV0dXJuZWQgbWFwOlxuICogKFxuICogIGhlbGxvOiAnd29ybGQnXG4gKiApXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICBtYXAtc2V0XG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLm1hcFxuICogQHR5cGUgICAgICBmdW5jdGlvblxuICpcbiAqIFNldCBhIG1hcCBwcm9wZXJ0eSB3aXRoIHRoZSBwYXNzZWQgdmFsdWVcbiAqIEBwYXJhbSBcdFx0XHR7TWFwfSBcdFx0XHQkbWFwIFx0XHRUaGUgbWFwIHRvIG1vZGlmeVxuICogQHBhcmFtICAgICAgIHtTdHJpbmd9ICAgICRrZXkgICAgVGhlIGtleSB0byBzZXQgdGhlIHByb3BlcnkgdG9cbiAqIEBwYXJhbSAgICAgICB7TWl4ZWR9ICAgICAkdmFsdWUgIFRoZSB2YWx1ZSB0byBzZXRcbiAqIEByZXR1cm4gXHRcdFx0e01hcH0gXHRcdFx0XHRcdCAgICBUaGUgdXBkYXRlZCBtYXBcbiAqXG4gKiBAZXhhbXBsZSAgICAgc2Nzc1xuICogJG15LW1hcCA6IHN1Z2FyLm1hcC1zZXQoJG15LW1hcCwgJ2NvY28nLCAnU29tZXRoaW5nIGNvb2wnKTtcbiAqXG4gKiBAYXV0aG9yIFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIG1hdGgtYWJzXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLm1hdGhcbiAqIEB0eXBlICAgICAgZnVuY3Rpb25cbiAqXG4gKiBSZXR1cm4gdGhlIGFic29sdXRlIHZlcnNpb24gb2YgdGhlIHBhc3NlZCBudW1iZXJcbiAqXG4gKiBAcGFyYW0gICAgICAgICB7TnVtYmVyfSAgICAgICAgJG51bWJlciAgICAgICBUaGUgbnVtYmVyIHRvIHByb2Nlc3NcbiAqIEByZXR1cm4gICAgICAgIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgICAgIFRoZSBhYnNvbHV0ZSB2ZXJzaW9uIG9mIHRoZSBudW1iZXJcbiAqXG4gKiBAZXhhbXBsZSAgICAgc2Nzc1xuICogc3VnYXIubWF0aC1hYnMoLTEwKTsgLy8gPT4gMTBcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgbWF0aC1hY29zXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLm1hdGhcbiAqIEB0eXBlICAgICAgZnVuY3Rpb25cbiAqXG4gKiBDYWxjdWxhdGUgdGhlIGNvc2ludXMgaW52ZXJzZSBvZiB0aGUgcGFzc2VkIGFuZ2xlXG4gKlxuICogQHBhcmFtICAgICAgICAge051bWJlcn0gICAgICAgICRhbmdsZSAgICAgICAgICBUaGUgYW5nbGUgdG8gY2FsY3VsYXRlIHRoZSBjb3NpbnVzIGludmVyc2UgZnJvbVxuICogQHBhcmFtICAgICAgICAge1N0cmluZ30gICAgICAgIFskdW5pdD1kZWddICAgICBUaGUgd2FudGVkIHVuaXQuIENhbiBkZSBkZWcsIHJhZCwgZ3JhZCBvciB0dXJuXG4gKiBAcmV0dXJuICAgICAgICAge051bWJlcn0gICAgICAgICAgICAgICAgICAgICAgIFRoZSBjYWxjdWxhdGVkIGNvc2ludXMgaW52ZXJzZVxuICpcbiAqIEBleGFtcGxlICAgICBzY3NzXG4gKiBzdWdhci5tYXRoLWFjb3MoMSwgZGVnKTsgLy8gMC4wNTU5NTI5MDk3ZGVnXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIG1hdGgtYXNpblxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5tYXRoXG4gKiBAdHlwZSAgICAgIGZ1bmN0aW9uXG4gKlxuICogQ2FsY3VsYXRlIHRoZSBzaW51cyBpbnZlcnNlXG4gKlxuICogQHBhcmFtICAgICAgICAge051bWJlcn0gICAgICAgICR2YWx1ZSAgICAgICAgVGhlIHZhbHVlIHRvIHVzZVxuICogQHBhcmFtICAgICAgICAge1N0cmluZ30gICAgICAgIFskdW5pdD1kZWddICAgVGhlIHVuaXQgd2FudGVkLiBQb3NzaWJsZSB2YWx1ZXMgYXJlIGRlZywgcmFkLCBncmFkIGFuZCB0dXJuXG4gKiBAcmV0dXJuICAgICAgICB7TnVtYmVyfSAgICAgICAgICAgICAgICAgICAgICBUaGUgY2FsY3VsYXRlZCBhc2luXG4gKlxuICogQGV4YW1wbGUgICAgIHNjc3NcbiAqIHN1Z2FyLm1hdGgtYXNpbigxLCByYWQpOyAvLyA9PiAxLjU2OTgxOTc2NDNyYWRcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgbWF0aC1hdGFuXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLm1hdGhcbiAqIEB0eXBlICAgICAgZnVuY3Rpb25cbiAqXG4gKiBDYWxjdWxhdGUgdGhlIHRhbmdlbnQgaW52ZXJzZSBvZiB0aGUgcGFzc2VkIGFuZ2xlXG4gKlxuICogQHBhcmFtICAgICAgIHtOdW1iZXJ9ICAgICAgJGFuZ2xlICAgICAgICBUaGUgYW5nbGUgdG8gY2FsY3VsYXRlIHRoZSB0YW5nZW50IGludmVyc2UgZnJvbVxuICogQHBhcmFtICAgICAgIHtTdHJpbmd9ICAgICAgWyR1bml0PWRlZ10gICBUaGUgd2FudGVkIHVuaXQuIENhbiBiZSBkZWcsIHJhZCwgZ3JhZCBvciB0dXJuXG4gKiBAcmV0dXJuICAgICAge051bWJlcn0gICAgICAgICAgICAgICAgICAgIFRoZSBjYWxjdWxhdGVkIHRhbmdlbnQgaW52ZXJzZSBvZiB0aGUgcGFzc2VkIGFuZ2xlXG4gKlxuICogQGV4YW1wbGUgICAgICAgc2Nzc1xuICogc3VnYXIubWF0aC1hdGFuKDEwLCBkZWcpOyAvLyA9PiA4NC4yOTg4NTY4NTQyZGVnXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICBtYXRoLWNlaWxcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MubWF0aFxuICogQHR5cGUgICAgICBmdW5jdGlvblxuICpcbiAqIFJvdW5kcyAkbnVtYmVyIHVwIHRvIHRoZSBuZXh0IGhpZ2hlc3Qgd2hvbGUgbnVtYmVyXG4gKlxuICogQHBhcmFtICAgICAgIHtOdW1iZXJ9ICAgICAgJG51bWJlciAgICAgICBUaGUgbnVtYmVyIHRvIHByb2Nlc3NcbiAqIEByZXR1cm4gICAgICB7TnVtYmVyfSAgICAgICAgICAgICAgICAgICAgVGhlIHVwIHJvdW5kZWQgbnVtYmVyXG4gKlxuICogQGV4YW1wbGUgICAgIHNjc3NcbiAqIHN1Z2FyLm1hdGgtY2VpbCg0LjIpOyAvLyA9PiA1XG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICBtYXRoLWNvbnZlcnQtYW5nbGVcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MubWF0aFxuICogQHR5cGUgICAgICBmdW5jdGlvblxuICpcbiAqIENvbnZlcnQgdGhlIHBhc3NlZCBhbmdsZSBpbnRvIGFub3RoZXIgdW5pdCBsaWtlIHJhZCwgZGVnLCBncmFkIG9yIHR1cm5cbiAqXG4gKiBAcGFyYW0gICAgICAgICAgIHtOdW1iZXJ9ICAgICAgICAgICAgJHZhbHVlICAgICAgICAgIFRoZSBhbmdsZSB2YWx1ZSB0byBjb252ZXJ0XG4gKiBAcGFyYW0gICAgICAgICAgIHtTdHJpbmd9ICAgICAgICAgICAgJHVuaXQgICAgICAgICAgIFRoZSB3YW50ZWQgdW5pdC4gQ2FuIGJlIHJhZCwgZGVnLCBncmFkIG9yIHR1cm5cbiAqIEByZXR1cm4gICAgICAgICAge051bWJlcn0gICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGNvbnZlcnRlZCBhbmdsZSB2YWx1ZVxuICpcbiAqIEBleGFtcGxlICAgc2Nzc1xuICogc3VnYXIubWF0aC1jb252ZXJ0LWFuZ2xlKClcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgbWF0aC1jb3NcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MubWF0aFxuICogQHR5cGUgICAgICBmdW5jdGlvblxuICpcbiAqIENhbGN1bGF0ZSB0aGUgY29zaW51cyBvZiB0aGUgcGFzc2VkIGFuZ2xlXG4gKlxuICogQHBhcmFtICAgICAgICAge051bWJlcn0gICAgICAgICRhbmdsZSAgICAgIFRoZSBhbmdsZSB0byBjYWxjdWxhdGUgdGhlIGNvc2ludXMgZnJvbVxuICogQHJldHVybiAgICAgICAge051bWJlcn0gICAgICAgICAgICAgICAgICAgIFRoZSBjYWxjdWxhdGVkIGNvc2ludXNcbiAqXG4gKiBAZXhhbXBsZSAgICAgc2Nzc1xuICogc3VnYXIubWF0aC1jb3MoMTApOyAvLyA9PiA2LjY2NDU2NDMzNzhcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgbWF0aC1kZWdcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MubWF0aFxuICogQHR5cGUgICAgICBmdW5jdGlvblxuICpcbiAqIENvbnZlcnQgdGhlIHBhc3NlZCB1bml0bGVzcyBhbmdsZSB0byBkZWdyZWVcbiAqXG4gKiBAcGFyYW0gICAgICAgICB7TnVtYmVyfcKgICAgICAgICRhbmdsZSAgICAgIFRoZSBhbmdsZSB0byBjb252ZXJ0IHRvIGRlZ3JlZVxuICogQHJldHVybiAgICAgICAge051bWJlcn0gICAgICAgICAgICAgICAgICAgIFRoZSBkZWdyZWUgdmVyc2lvbiBvZiB0aGUgYW5nbGVcbiAqXG4gKiBAZXhhbXBsZSAgICAgc2Nzc1xuICogc3VnYXIubWF0aC1kZWcoMTApOyAvLyA9PiA1NzIuOTU3Nzk1MTMwOGRlZ1xuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICBtYXRoLWV2ZW5cbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MubWF0aFxuICogQHR5cGUgICAgICBmdW5jdGlvblxuICpcbiAqIENvbnZlcnQgdGhlIHBhc3NlZCB2YWx1ZSB0byB0aGUgY2xvc2VzdCBldmVuIHZhbHVlXG4gKlxuICogQHBhcmFtIFx0XHRcdHtOdW1iZXJ9IFx0XHQkdmFsdWUgXHRcdFRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKiBAcmV0dXJuIFx0XHRcdHtOdW1iZXJ9IFx0XHRcdFx0XHRUaGUgY2xvc2VzdCBldmVuIGNvbnZlcnRlZCB2YWx1ZVxuICpcbiAqIEBleGFtcGxlICAgICBzY3NzXG4gKiBzdWdhci5tYXRoLWV2ZW4oOSk7IC8vID0+IDEwXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIG1hdGgtZmFjdFxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5tYXRoXG4gKiBAdHlwZSAgICAgIGZ1bmN0aW9uXG4gKlxuICogUmV0dXJucyB0aGUgZmFjdG9yaWFsIG9mIGRlc2lyZWQgbnVtYmVyXG4gKlxuICogQHBhcmFtICAgICAgICAge051bWJlcn0gICAgICAgICAgJG51bWJlciAgICAgICAgIFRoZSBudW1iZXIgdG8gY2FsY3VsYXRlIHRoZSBmYWN0b3JpYWwgbnVtYmVyXG4gKiBAcmV0dXJuICAgICAgICB7TnVtYmVyfSAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGNhbGN1bGF0ZWQgZmFjdG9yaWFsIG9mIHRoZSBwYXNzZWQgbnVtYmVyXG4gKlxuICogQGV4YW1wbGUgICAgIHNjc3NcbiAqIHN1Z2FyLm1hdGgtZmFjdCg1KTsgLy8gPT4gMTIwXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIG1hdGgtZ3JhZFxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5tYXRoXG4gKiBAdHlwZSAgICAgIGZ1bmN0aW9uXG4gKlxuICogQ29udmVydCB0aGUgcGFzc2VkIHVuaXRsZXNzIGFuZ2xlIHRvIGdyYWRpYW5cbiAqXG4gKiBAcGFyYW0gICAgICAgICB7TnVtYmVyfcKgICAgICAgICRhbmdsZSAgICAgIFRoZSBhbmdsZSB0byBjb252ZXJ0IHRvIGdyYWRpYW5cbiAqIEByZXR1cm4gICAgICAgIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgICBUaGUgZ3JhZGlhbiB2ZXJzaW9uIG9mIHRoZSBhbmdsZVxuICpcbiAqIEBleGFtcGxlICAgICBzY3NzXG4gKiBzdWdhci5tYXRoLWdyYWQoMTApOyAvLyA9PiA2MzYuNjE5NzcyMzY3NWdyYWRcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgbWF0aC1vZGRcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MubWF0aFxuICogQHR5cGUgICAgICBmdW5jdGlvblxuICpcbiAqIENvbnZlcnQgdGhlIHBhc3NlZCB2YWx1ZSB0byB0aGUgY2xvc2VzdCBvZGQgdmFsdWVcbiAqXG4gKiBAcGFyYW0gXHRcdFx0e051bWJlcn0gXHRcdCR2YWx1ZSBcdFx0VGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqIEByZXR1cm4gXHRcdFx0e051bWJlcn0gXHRcdFx0XHRcdFRoZSBjbG9zZXN0IG9kZCBjb252ZXJ0ZWQgdmFsdWVcbiAqXG4gKiBAZXhhbXBsZSAgICAgc2Nzc1xuICogc3VnYXIubWF0aC1vZGQoMTApOyAvLyA9PiA5XG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIG1hdGgtcGVyY2VudGFnZVxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5tYXRoXG4gKiBAdHlwZSAgICAgIGZ1bmN0aW9uXG4gKlxuICogQ29udmVydHMgYSB1bml0bGVzcyAkbnVtYmVyICh1c3VhbGx5IGEgZGVjaW1hbCBiZXR3ZWVuIDAgYW5kIDEpIHRvIGEgcGVyY2VudGFnZS5cbiAqXG4gKiBAcGFyYW0gICAgICAgICB7TnVtYmVyfSAgICAgICAgICAkbnVtYmVyICAgICAgICAgICBUaGUgbnVtYmVyIHRvIGNvbnZlcnQgaW50byBwZXJjZW50YWdlXG4gKiBAcmV0dXJuICAgICAgICB7TnVtYmVyfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGUgcGVyY2VudGFnZSBjb252ZXJ0ZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogc3VnYXIubWF0aC1wZXJjZW50YWdlKDAuMik7IC8vID0+IDIwJVxuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICBtYXRoLXBvd1xuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5tYXRoXG4gKiBAdHlwZSAgICAgIGZ1bmN0aW9uXG4gKlxuICogUmV0dXJuIHRoZSBjYWxjdWxhdGVkIHBvd2VyIG9mIHRoZSBwYXNzZWQgYmFzZSB1c2luZyB0aGUgcGFzc2VkIGV4cG9uZW50XG4gKlxuICogQHBhcmFtICAgICAgICAge051bWJlcn0gICAgICAgICRiYXNlICAgICAgICAgVGhlIGJhc2UgbnVtYmVyXG4gKiBAcGFyYW0gICAgICAgICB7TnVtYmVyfSAgICAgICAgJGV4cG9uZW50ICAgICBUaGUgZXhwb25lbnQgdXNlZCB0byByYWlzZSB0aGUgYmFzZVxuICogQHJldHVybiAgICAgICAge051bWJlcn0gICAgICAgICAgICAgICAgICAgICAgVGhlIGNhbGN1bGF0ZWQgcG93ZXIgbnVtYmVyXG4gKlxuICogQGV4YW1wbGUgICAgc2Nzc1xuICogc3VnYXIubWF0aC5wb3coNywgMyk7IC8vID0+IDM0M1xuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICBtYXRoLXJhZFxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5tYXRoXG4gKiBAdHlwZSAgICAgIGZ1bmN0aW9uXG4gKlxuICogQ29udmVydCB0aGUgcGFzc2VkIHVuaXRsZXNzIGFuZ2xlIHRvIHJhZGlhblxuICpcbiAqIEBwYXJhbSAgICAgICAgIHtOdW1iZXJ9wqAgICAgICAgJGFuZ2xlICAgICAgVGhlIGFuZ2xlIHRvIGNvbnZlcnQgdG8gcmFkaWFuXG4gKiBAcmV0dXJuICAgICAgICB7TnVtYmVyfSAgICAgICAgICAgICAgICAgICAgVGhlIHJhZGlhbiB2ZXJzaW9uIG9mIHRoZSBhbmdsZVxuICpcbiAqIEBleGFtcGxlICAgICBzY3NzXG4gKiBzdWdhci5tYXRoLXJhZCgxMCk7IC8vID0+IDEwcmFkXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICBtYXRoLXJhbmRvbVxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5tYXRoXG4gKiBAdHlwZSAgICAgIGZ1bmN0aW9uXG4gKlxuICogSWYgJGxpbWl0IGlzIG51bGwsIHJldHVybnMgYSByYW5kb20gZGVjaW1hbCBudW1iZXIgYmV0d2VlbiAwIGFuZCAxLlxuICpcbiAqIEBwYXJhbSAgICAgICB7TnVtYmVyfSAgICAgIFskbGltaXQ6bnVsbF0gICAgIFRoZSBsaW1pdCB0byBnZW5lcmF0ZSBhIG51bWJlciB1bmRlciB0aGF0XG4gKiBAcmV0dXJuICAgICAge051bWJlcn0gICAgICAgICAgICAgICAgICAgICAgICBUaGUgZ2VuZXJhdGVkIG51bWJlclxuICpcbiAqwqBAZXhhbXBsZSAgICAgc2Nzc1xuICogc3VnYXIubWF0aC1yYW5kb20oKTsgLy8gPT4gMC4yODIxMjUxODU4XG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICBtYXRoLXJvdW5kXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLm1hdGhcbiAqIEB0eXBlICAgICAgZnVuY3Rpb25cbiAqXG4gKiBSb3VuZHMgJG51bWJlciB0byB0aGUgbmVhcmVzdCB3aG9sZSBudW1iZXIuXG4gKlxuICogQHBhcmFtICAgICAgIHtOdW1iZXJ9ICAgICAgJG51bWJlciAgICAgICBUaGUgbnVtYmVyIHRvIHJvdW5kXG4gKiBAcmV0dXJuICAgICAge051bWJlcn0gICAgICAgICAgICAgICAgICAgIFRoZSByb3VuZGVkIG51bWJlclxuICpcbiAqIEBleGFtcGxlICAgICBzY3NzXG4gKiBzdWdhci5tYXRoLXJvdW5kKDQuMik7IC8vID0+IDRcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgIG1hdGgtc2luXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLm1hdGhcbiAqIEB0eXBlICAgICAgZnVuY3Rpb25cbiAqXG4gKiBDYWxjdWxhdGUgdGhlIHNpbnVzIG9mIHRoZSBwYXNzZWQgYW5nbGVcbiAqXG4gKiBAcGFyYW0gICAgICAge051bWJlcn0gICAgICAkYW5nbGUgICAgICAgIFRoZSBhbmdsZSB0byBjYWxjdWxhdGUgdGhlIHNpbnVzIGZyb21cbiAqIEByZXR1cm4gICAgICB7TnVtYmVyfSAgICAgICAgICAgICAgICAgICAgVGhlIGNhbGN1bGF0ZWQgc2ludXNcbiAqXG4gKiBAZXhhbXBsZSAgICAgc2Nzc1xuICogc3VnYXIubWF0aC1zaW4oMTApOyAvLyA9PiAyLjc2MTA5MDkyNlxuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgIG1hdGgtc3FydFxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5tYXRoXG4gKiBAdHlwZSAgICAgIGZ1bmN0aW9uXG4gKlxuICogUmV0dXJuIHRoZSBzcXVhcmUgcm9vdCBvZiB0aGUgcGFzc2VkIG51bWJlclxuICpcbiAqIEBwYXJhbSAgICAgICAgIHtOdW1iZXJ9wqAgICAgICAgJG51bWJlciAgICAgICBUaGUgbnVtYmVyIHRvIHByb2Nlc3NcbiAqIEByZXR1cm4gICAgICAgIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgICAgIFRoZSBzcXVhcmUgcm9vdCBvZiB0aGUgcGFzc2VkIG51bWJlclxuICpcbiAqIEBleGFtcGxlICAgc2Nzc1xuICogc3VnYXIubWF0aC1zcXJ0KDIpOyAvLyA9PiAxLjQxNDIxMzU2MjM3XG4gKlxuICogQGF1dGhvciBcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICBtYXRoLXRhblxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5tYXRoXG4gKiBAdHlwZSAgICAgIGZ1bmN0aW9uXG4gKlxuICogQ2FsY3VsYXRlIHRoZSB0YW5nZW50IG9mIHRoZSBwYXNzZWQgYW5nbGVcbiAqXG4gKiBAcGFyYW0gICAgICAgICB7TnVtYmVyfSAgICAgICAgJGFuZ2xlICAgICAgICBUaGUgYW5nbGUgdG8gY2FsY3VsYXRlIHRoZSB0YW5nZW50IGZyb21cbiAqIEByZXR1cm4gICAgICAgIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgICAgIFRoZSBjYWxjdWxhdGVkIHRhbmdlbnRcbiAqXG4gKiBAZXhhbXBsZSAgICAgICBzY3NzXG4gKiBzdWdhci5tYXRoLXRhbigxMCk7IC8vID0+IDAuNDE0Mjk0Mjg2M1xuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICBtYXRoLXR1cm5cbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MubWF0aFxuICogQHR5cGUgICAgICBmdW5jdGlvblxuICpcbiAqIENvbnZlcnQgdGhlIHBhc3NlZCB1bml0bGVzcyBhbmdsZSB0byB0dXJuXG4gKlxuICogQHBhcmFtICAgICAgICAge051bWJlcn3CoCAgICAgICAkYW5nbGUgICAgICBUaGUgYW5nbGUgdG8gY29udmVydCB0byB0dXJuXG4gKiBAcmV0dXJuICAgICAgICB7TnVtYmVyfSAgICAgICAgICAgICAgICAgICAgVGhlIHR1cm4gdmVyc2lvbiBvZiB0aGUgYW5nbGVcbiAqXG4gKiBAZXhhbXBsZSAgICAgc2Nzc1xuICogc3VnYXIubWF0aC10dXJuKDEwKTsgLy8gPT4gMS41OTE1NDk0MzA5dHVyblxuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICBzdHItaW5kZXhcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3Muc3RyaW5nXG4gKiBAdHlwZSAgICAgIGZ1bmN0aW9uXG4gKlxuICogUmV0dXJucyB0aGUgZmlyc3QgaW5kZXggb2YgJHN1YnN0cmluZyBpbiAkc3RyaW5nLCBvciBudWxsIGlmICRzdHJpbmcgZG9lc27igJl0IGNvbnRhaW4gJHN1YnN0cmluZy5cbiAqXG4gKiBAcGFyYW0gICAgICAge1N0cmluZ30gICAgICAkc3RyaW5nICAgICAgIFRoZSBzdHJpbmcgdG8gcHJvY2Vzc1xuICogQHBhcmFtICAgICAgIHtTdHJpbmd9ICAgICAgJHN1YnN0cmluZyAgICBUaGUgc3RyaW5nIHRvIHNlYXJjaFxuICogQHJldHVybiAgICAgIHtOdW1iZXJ9ICAgICAgICAgICAgICAgICAgICBUaGUgaW5kZXggb2YgdGhlIGZpbmRlZCBzdWJzdHJpbmcgb3IgbnVsbCBpZiBub3QgZXhpc3QuLi5cbiAqXG4gKiBAZXhhbXBsZSAgICAgIHNjc3NcbiAqIHN1Z2FyLnN0ci1pbmRleCgnSGVsbG8gd29ybGQnLCAnd29ybGQnKTsgLy8gPT4gN1xuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgc3RyLWlzLXVybFxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5zdHJpbmdcbiAqIEB0eXBlICAgICAgZnVuY3Rpb25cbiAqXG4gKiBDaGVjayBpZiBhIHN0cmluZyBpcyBhIHVybCBvciBub3RcbiAqXG4gKiBAcGFyYW0gXHRcdFx0e1N0cmluZ30gXHRcdFx0XHQkdXJsIFx0XHRcdFRoZSBzdHJpbmcgdG8gY2hlY2tcbiAqIEByZXR1cm4gXHRcdFx0e0Jvb2xlYW59IFx0XHRcdFx0XHRcdFx0XHR0cnVlIGlmIGlzIGEgdXJsLCBmYWxzZSBpZiBub3RcbiAqXG4gKiBAZXhhbXBsZSAgICAgc2Nzc1xuICogc3VnYXIuc3RyLWlzLXVybCgnSGVsbG8gd29ybGQnKSAvLyBmYWxzZVxuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgc3RyLWxlbmd0aFxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5zdHJpbmdcbiAqIEB0eXBlICAgICAgZnVuY3Rpb25cbiAqXG4gKiBSZXR1cm4gdGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIGluIHRoZSBwYXNzZWQgc3RyaW5nXG4gKlxuICogQHBhcmFtICAgICAgIHtTdHJpbmd9ICAgICAgJHN0cmluZyAgICAgICBUaGUgc3RyaW5nIHRvIHByb2Nlc3NcbiAqIEByZXR1cm4gICAgICB7TnVtYmVyfSAgICAgICAgICAgICAgICAgICAgVGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIHRoYXQgY29tcG9zZSB0aGUgc3RyaW5nXG4gKlxuICogQGV4YW1wbGUgICAgIHNjc3NcbiAqIHN1Z2FyLnN0ci1sZW5ndGgoJ2hlbGxvJyk7IC8vID0+IDRcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgIHN0ci1yZXBsYWNlXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLnN0cmluZ1xuICogQHR5cGUgICAgICBmdW5jdGlvblxuICpcbiAqIFJlcGxhY2UgdGhlIHBhc3NlZCBzdHJpbmcgd2l0aCBhbm90aGVyIG9uZSBpbiBhIHNwZWNpZmljIHN0cmluZ1xuICpcbiAqIEBwYXJhbSAgICAgICAgIHtTdHJpbmd9ICAgICAgICAkc3RyaW5nICAgICAgICAgVGhlIHN0cmluZyBpbiB3aGljaCB0byByZXBsYWNlIHRoZSBzZWFyY2hlZCBvbmVcbiAqIEBwYXJhbSAgICAgICAgIHtTdHJpbmd9ICAgICAgICAkc2VhcmNoICAgICAgICAgVGhlIHN0cmluZyB0byByZXBsYWNlXG4gKiBAcGFyYW0gICAgICAgICB7U3RyaW5nfSAgICAgICAgWyRyZXBsYWNlPVwiXCJdICAgVGhlIHN0cmluZyB1c2VkIGFzIHJlcGxhY2VtZW50XG4gKiBAcmV0dXJuICAgICAgICB7U3RyaW5nfSAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBwcm9jZXNzZWQgc3RyaW5nXG4gKlxuICogQGV4YW1wbGUgICAgIHNjc3NcbiAqIHN1Z2FyLnN0ci1yZXBsYWNlKCdIZWxsbyB3b3JsZCcsICd3b3JsZCcsICdjb2NvJyk7IC8vICdIZWxsbyBjb2NvJ1xuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgc3RyLXNsaWNlXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLnN0cmluZ1xuICogQHR5cGUgICAgICBmdW5jdGlvblxuICpcbiAqIFJldHVybnMgdGhlIHNsaWNlIG9mICRzdHJpbmcgc3RhcnRpbmcgYXQgaW5kZXggJHN0YXJ0LWF0IGFuZCBlbmRpbmcgYXQgaW5kZXggJGVuZC1hdCAoYm90aCBpbmNsdXNpdmUpLlxuICpcbiAqIEBwYXJhbSAgICAgICAgIHtTdHJpbmd9ICAgICAgICAkc3RyaW5nICAgICAgICAgVGhlIHN0cmluZyB0byBzbGljZVxuICogQHBhcmFtICAgICAgICAge051bWJlcn3CoCAgICAgICAkc3RhcnQtYXQgICAgICAgV2hlcmUgdG8gc3RhcnQgc2xpY2UgdGhlIHN0cmluZ1xuICogQHBhcmFtICAgICAgICAge051bWJlcn0gICAgICAgIFskZW5kLWF0PS0xXSAgICBXaGVyZSB0byBlbmQgdG8gc2xpY2UgdGhlIHN0cmluZ1xuICpcbiAqIEBwYXJhbSAgICAgICBzY3NzXG4gKiBzdWdhci5zdHItc2xpY2UoJ0hlbGxvIHdvcmxkJywgMSwgNCk7IC8vID0+IEhlbGxcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgIHN0ci1zcGxpdFxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5zdHJpbmdcbiAqIEB0eXBlICAgICAgZnVuY3Rpb25cbiAqXG4gKiBTcGxpdCBhIHN0cmluZyB1c2luZyBhIGRlbGltaXRlclxuICpcbiAqIEBwYXJhbSAgICAgICAgIHtTdHJpbmd9ICAgICAgICAgICRzdHJpbmcgICAgICAgICAgICAgVGhlIHN0cmluZyB0byBzcGxpdFxuICogQHBhcmFtICAgICAgICAge1N0cmluZ30gICAgICAgICAgWyRkZWxpbWl0ZXI9XCJcIl0gICAgIFRoZSBkZWxpbWl0ZXIgdG8gc3BsaXQgdGhlIHN0cmluZ1xuICogQHJldHVybiAgICAgICAge0xpc3R9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBIGxpc3QgYSB0aGUgc3BsaXRlZCBzdHJpbmdcbiAqXG4gKiBAZXhhbXBsZSAgICAgICBzY3NzXG4gKiBzdWdhci5zdHItc3BsaXQoJ2hlbGxvLndvcmxkJywgJy4nKTsgLy8gKCdoZWxsbycsICd3b3JsZCcpXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICBzdHItdW5pcXVlLWlkXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLnN0cmluZ1xuICogQHR5cGUgICAgICBmdW5jdGlvblxuICpcbiAqIEdlbmVyYXRlIGEgdW5pcXVlIGlkIGluIHN0cmluZyBmb3JtYXRcbiAqXG4gKiBAcmV0dXJuICAgICAgICB7U3RyaW5nfSAgICAgICAgICBUaGUgZ2VuZXJhdGVkIHVuaXF1ZSBpZFxuICpcbiAqIEBleGFtcGxlICAgICBzY3NzXG4gKiBzdWdhci5zdHItdW5pcXVlLWlkKCk7IC8vID0+IHVhYnRybnp1Z1xuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICBzdHItdW5xdW90ZVxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5zdHJpbmdcbiAqIEB0eXBlICAgICAgZnVuY3Rpb25cbiAqXG4gKiBSZXR1cm4gYW4gdW5xdW90ZWQgdmVyc2lvbiBvZiB0aGUgcGFzc2VkIHN0cmluZ1xuICpcbiAqIEBwYXJhbSAgICAgICAgIHtTdHJpbmd9ICAgICAgICAkc3RyaW5nICAgICAgICAgICBUaGUgc3RyaW5nIHRvIHVucXVvdGVcbiAqIEByZXR1cm4gICAgICAgIHtTdHJpbmd9ICAgICAgICAgICAgICAgICAgICAgICAgICBUaGUgdW5xdW90ZWQgc3RyaW5nXG4gKlxuICogQGV4YW1wbGUgICAgICAgc2Nzc1xuICogc3VnYXIuc3RyLXVucXVvdGUoJ2hlbGxvIHdvcmxkJyk7IC8vID0+IGhlbGxvIHdvcmxkXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICBzdHItc3BsaXRcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3Muc3RyaW5nXG4gKiBAdHlwZSAgICAgIGZ1bmN0aW9uXG4gKlxuICogU3BsaXQgYSBzdHJpbmcgdXNpbmcgYSBkZWxpbWl0ZXJcbiAqXG4gKiBAcGFyYW0gICAgICAgICB7U3RyaW5nfSAgICAgICAgICAkc3RyaW5nICAgICAgICAgICAgIFRoZSBzdHJpbmcgdG8gc3BsaXRcbiAqIEBwYXJhbSAgICAgICAgIHtTdHJpbmd9ICAgICAgICAgIFskZGVsaW1pdGVyPVwiXCJdICAgICBUaGUgZGVsaW1pdGVyIHRvIHNwbGl0IHRoZSBzdHJpbmdcbiAqIEByZXR1cm4gICAgICAgIHtMaXN0fSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQSBsaXN0IGEgdGhlIHNwbGl0ZWQgc3RyaW5nXG4gKlxuICogQGV4YW1wbGUgICAgICAgc2Nzc1xuICogc3VnYXIuc3RyLXNwbGl0KCdoZWxsby53b3JsZCcsICcuJyk7IC8vICgnaGVsbG8nLCAnd29ybGQnKVxuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICAgIHN0ci11cmwtZXh0XG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLnN0cmluZ1xuICogQHR5cGUgICAgICBmdW5jdGlvblxuICpcbiAqIENoZWNrIGlmIGEgc3RyaW5nIGlzIGEgdXJsIG9yIG5vdFxuICpcbiAqIEBwYXJhbSBcdFx0XHR7U3RyaW5nfSBcdFx0XHRcdCR1cmwgXHRcdFx0VGhlIHN0cmluZyB0byBjaGVja1xuICogQHJldHVybiBcdFx0XHR7Qm9vbGVhbn0gXHRcdFx0XHRcdFx0XHRcdHRydWUgaWYgaXMgYSB1cmwsIGZhbHNlIGlmIG5vdFxuICpcbiAqIEBleGFtcGxlICAgICAgIHNjc3NcbiAqIHN1Z2FyLnN0ci1pcy11cmwoJ0hlbGxvIHdvcmxkJykgLy8gZmFsc2VcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgICBzZXR0aW5nc1xuICogQHR5cGUgICAgICAgIHtNYXB9XG4gKlxuICogU3RvcmUgYWxsIHRoZSBzZXR0aW5nc1xuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gICAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgICAgY3VycmVudC1jb250ZXh0XG4gKiBAdHlwZSAgICAgICAge1N0cmluZ31cbiAqIEBwcml2YXRlXG4gKlxuICogU3RvcmUgdGhlIGN1cnJlbnQgY29udGV4dFxuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gICAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgICAgICBmb250LXNpemVcbiAqIEB0eXBlICAgICAgICAgIHtOdW1iZXJ9XG4gKiBAcHJpdmF0ZVxuICpcbiAqIFN0b3JlIHRoZSBjdXJyZW50IHJlZ2lzdGVyZWQgZm9udCBzaXplXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAgIChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgICAgICAgJHN2Zy1pY29uc1xuICogQHR5cGUgICAgICAgICAgICB7TWFwfVxuICogQHByaXZhdGVcbiAqXG4gKiBTdG9yZSBhbGwgdGhlIHJlZ2lzdGVyZWQgc3ZnIGljb25zXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAgIChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgICAgIGNsYXNzZXNcbiAqIEB0eXBlICAgICAgICAgIHtNYXB9XG4gKiBAcHJpdmF0ZVxuICpcbiAqIFN0b3JlIGFsbCB0aGUgY2xhc3NlcyBpbiB0aGVpciBuYW1lc3BhY2VzXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAgIChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgICBzZXR0aW5nc1xuICogQHR5cGUgICAgICAgIHtNYXB9XG4gKlxuICogU3RvcmUgYWxsIHRoZSBzZXR0aW5nc1xuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gICAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgICAgY3VycmVudC1jb250ZXh0XG4gKiBAdHlwZSAgICAgICAge1N0cmluZ31cbiAqIEBwcml2YXRlXG4gKlxuICogU3RvcmUgdGhlIGN1cnJlbnQgY29udGV4dFxuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gICAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgICAgICBmb250LXNpemVcbiAqIEB0eXBlICAgICAgICAgIHtOdW1iZXJ9XG4gKiBAcHJpdmF0ZVxuICpcbiAqIFN0b3JlIHRoZSBjdXJyZW50IHJlZ2lzdGVyZWQgZm9udCBzaXplXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAgIChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgICAgICAgJHN2Zy1pY29uc1xuICogQHR5cGUgICAgICAgICAgICB7TWFwfVxuICogQHByaXZhdGVcbiAqXG4gKiBTdG9yZSBhbGwgdGhlIHJlZ2lzdGVyZWQgc3ZnIGljb25zXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAgIChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgICAgIGNsYXNzZXNcbiAqIEB0eXBlICAgICAgICAgIHtNYXB9XG4gKiBAcHJpdmF0ZVxuICpcbiAqIFN0b3JlIGFsbCB0aGUgY2xhc3NlcyBpbiB0aGVpciBuYW1lc3BhY2VzXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAgIChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgIGluaXRcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MuY29yZS5taXhpblxuICogQHR5cGUgICAgICBtaXhpblxuICpcbiAqIEluaXQgdGhlIHN1Z2FyIHRvb2xraXQuXG4gKiBUaGlzIGhhcyB0byBiZSBjYWxsZWQgKipBRlRFUioqIGFsbCB0aGUgWy4vX3Mtc2V0dXAuc2Nzc10gbWl4aW4gY2FsbFxuICogYW5kICoqQkVGT1JFKiogYWxsIHRoZSBvdGhlcnMgc3VnYXIgbWl4aW5zIGFuZCBmdW5jdGlvbnMgY2FsbHNcbiAqXG4gKiBAZXhhbXBsZSAgICAgc2Nzc1xuICogXFxAaW5jbHVkZSBzdWdhci5pbml0KCk7XG4gKlxuICogQGF1dGhvciBcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICAgIHNldHRpbmdzXG4gKiBAdHlwZSAgICAgICAge01hcH1cbiAqXG4gKiBTdG9yZSBhbGwgdGhlIHNldHRpbmdzXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAgIChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgICBjdXJyZW50LWNvbnRleHRcbiAqIEB0eXBlICAgICAgICB7U3RyaW5nfVxuICogQHByaXZhdGVcbiAqXG4gKiBTdG9yZSB0aGUgY3VycmVudCBjb250ZXh0XG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAgIChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgICAgIGZvbnQtc2l6ZVxuICogQHR5cGUgICAgICAgICAge051bWJlcn1cbiAqIEBwcml2YXRlXG4gKlxuICogU3RvcmUgdGhlIGN1cnJlbnQgcmVnaXN0ZXJlZCBmb250IHNpemVcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+ICAgKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICAgICAgICAkc3ZnLWljb25zXG4gKiBAdHlwZSAgICAgICAgICAgIHtNYXB9XG4gKiBAcHJpdmF0ZVxuICpcbiAqIFN0b3JlIGFsbCB0aGUgcmVnaXN0ZXJlZCBzdmcgaWNvbnNcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+ICAgKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICAgICAgY2xhc3Nlc1xuICogQHR5cGUgICAgICAgICAge01hcH1cbiAqIEBwcml2YXRlXG4gKlxuICogU3RvcmUgYWxsIHRoZSBjbGFzc2VzIGluIHRoZWlyIG5hbWVzcGFjZXNcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+ICAgKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICBzZXR1cFxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5jb3JlLm1peGluXG4gKiBAdHlwZSAgICAgIG1peGluXG4gKlxuICogU2V0dXAgc3VnYXIgdG9vbGtpdCBieSBvdmVycmlkaW5nIHRoZSBkZWZhdWx0IFtzZXR0aW5nc10oLi4vX3NldHRpbmdzLnNjc3MpXG4gKiBUaGlzIGhhcyB0byBiZSBjYWxsZWQgKipCRUZPUkUqKiB0aGUgW3MtaW5pdCBtaXhpbl0oLi9fcy1pbml0LnNjc3MpXG4gKlxuICogQHBhcmFtIFx0XHRcdHtNYXB9wqBcdFx0XHQkc2V0dGluZ3MgXHRcdFRoZSBzZXR0aW5ncyB0byBvdmVycmlkZVxuICpcbiAqIEBleGFtcGxlICAgICAgIHNjc3NcbiAqIFxcQGluY2x1ZGUgc3VnYXIuc2V0dXAoKFxuICogXHRcdHR5cG8gOiAoXG4gKiBcdFx0XHRmb250LXNpemUgOiAxMnB4XG4gKiBcdFx0KSxcbiAqIFx0XHRzaXplcyA6IChcbiAqIFx0XHRcdHNtYWxsIDogMC41LFxuICogXHRcdFx0YmlnIDogMS41XG4gKiBcdFx0KVxuICogKSk7XG4gKiAvLyB0aGlzIG1peGluIGNhbiBiZSBjYWxsZWQgYXMgbWFueSB0aW1lcyBhcyB5b3UgbmVlZFxuICogLy8gdGhpcyBhbGxvd3MgeW91IHRvIHNlcGFyYXRlIHlvdXIgY29uZmlncyBzZXR1cCBpbnRvIG11bHRpcGxlXG4gKiAvLyBmaWxlcy4uLlxuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICAgIHNldHRpbmdzXG4gKiBAdHlwZSAgICAgICAge01hcH1cbiAqXG4gKiBTdG9yZSBhbGwgdGhlIHNldHRpbmdzXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAgIChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgICBjdXJyZW50LWNvbnRleHRcbiAqIEB0eXBlICAgICAgICB7U3RyaW5nfVxuICogQHByaXZhdGVcbiAqXG4gKiBTdG9yZSB0aGUgY3VycmVudCBjb250ZXh0XG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAgIChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgICAgIGZvbnQtc2l6ZVxuICogQHR5cGUgICAgICAgICAge051bWJlcn1cbiAqIEBwcml2YXRlXG4gKlxuICogU3RvcmUgdGhlIGN1cnJlbnQgcmVnaXN0ZXJlZCBmb250IHNpemVcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+ICAgKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICAgICAgICAkc3ZnLWljb25zXG4gKiBAdHlwZSAgICAgICAgICAgIHtNYXB9XG4gKiBAcHJpdmF0ZVxuICpcbiAqIFN0b3JlIGFsbCB0aGUgcmVnaXN0ZXJlZCBzdmcgaWNvbnNcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+ICAgKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICAgICAgY2xhc3Nlc1xuICogQHR5cGUgICAgICAgICAge01hcH1cbiAqIEBwcml2YXRlXG4gKlxuICogU3RvcmUgYWxsIHRoZSBjbGFzc2VzIGluIHRoZWlyIG5hbWVzcGFjZXNcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+ICAgKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICBzZXR0aW5nXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmNvcmUuc2V0dGluZ1xuICogQHR5cGUgICAgZnVuY3Rpb25cbiAqXG4gKiBHZXQgYSBzZXR0aW5ncyBmcm9tIHRoZSBnbG9iYWwgc2V0dGluZ3Mgc3RhY2tcbiAqXG4gKiBAcGFyYW0gXHRcdFx0XHR7U3RyaW5nfSBcdFx0XHQkcGF0aCBcdFx0XHRcdFx0XHRUaGUgc2V0dGluZyBwYXRoIHdhbnRlZCBzZXBhcmF0ZWQgYnkgZG90c1xuICogQHBhcmFtIFx0XHRcdFx0e1N0cmluZ30gXHRcdFx0WyRjb250ZXh0PXMtY29udGV4dCgpXSBcdFx0VGhlIGNvbnRleHQgbmFtZSB0byBnZXQgdGhlIHNldHRpbmdcbiAqIEBwYXJhbSBcdFx0XHRcdHtNaXhlZH0gXHRcdFx0WyRkZWZhdWx0PW51bGxdIFx0XHRcdFRoZSB2YWx1ZSB0byByZXR1cm4gaWYgbm8gdmFsdWUgaXMgZm91bmRcbiAqIEByZXR1cm4gXHRcdFx0XHR7TWl4ZWR9IFx0XHRcdFx0XHRcdFx0XHRcdFx0VGhlIHNldHRpbmcgdmFsdWXCqFxuICpcbiAqIEBleGFtcGxlXG4gKiAkZm9udC1zaXplIDogc3VnYXIuc2V0dGluZygndHlwb2dyYXBoeS5mb250LXNpemUnKTtcbiAqIC8vIGV0Yy4uLlxuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICBhbmltYXRpb25cbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MuY29yZS5taXhpblxuICogQHR5cGUgICAgICBtaXhpblxuICpcbiAqIFByaW50IG91dCB0aGUgYW5pbWF0aW9uIHByb3BlcnR5IGNhbGN1bGF0ZWQgd2l0aCB0aGUgcGFzc2VkIGFyZ3VtZW50c1xuICogVGhpcyBtaXhpbiBzdXBwb3J0IGFsbCB0aGUgc3RhbmRhcmQgY3NzIGFuaW1hdGlvbiBwcm9wZXJ0aWVzIGxpa2UgbmFtZSwgZHVyYXRpb24sIGRlbGF5LCBlYXNlLCBkaXJlY3Rpb24gYW5kIGZpbGwtbW9kZS5cbiAqIFRoZSAkYW5pbWF0aW9ucyBhcmd1bWVudCB3aWxsIGJlIHBhcnNlZCB3aXRoIHRoZSBbLi4vZnVuY3Rpb25zL19zLXBhcnNlLXByb3BlcnRpZXMuc2Nzc10gZnVuY3Rpb24uXG4gKiBJZiB5b3Ugc3BlY2lmeSBtdWx0aXBsZSBhbmltYXRpb25zIGF0IGEgdGltZSwgdGhpcyBtaXhpbiB3aWxsIHRha2UgY2FyZVxuICogb2YgdGhlIGRlbGF5IGNhbGN1bGF0aW9uIGZvciBlYWNoIGFuaW1hdGlvbnMgYW5kIG1ha2UgdGhlbSBwbGF5IG9uZSBhZnRlciBhbm90aGVyXG4gKlxuICogQHBhcmFtIFx0XHRcdHtMaXN0fSBcdFx0XHRcdCRhbmltYXRpb25zIFx0XHRcdFRoZSBhbmltYXRpb25zIHdhbnRlZCBsaWtlIDogY29jbyAuMnMgZWFzZS1pbi1vdXQgcmV2ZXJzZVxuICpcbiAqIEBleGFtcGxlICAgICBzY3NzXG4gKiAubXktY29vbC1lbGVtZW50IHtcbiAqIFx0XHRAaW5jbHVkZSBzdWdhci5hbmltYXRpb24obXktYW5pbWF0aW9uIDFzIGVhc2UtaW4tb3V0LCBhbm90aGVyLWFuaW1hdGlvbiA0cyk7XG4gKiBcdFx0Ly8gYW5pbWF0aW9uIDogbXktYW5pbWF0aW9uIDFzIDBzIGVhc2UtaW4tb3V0IDEgbm9ybWFsIGZvcndhcmRzLCBhbm90aGVyLWFuaW1hdGlvbiA0cyAxcyBlYXNlLWluLW91dCAxIG5vcm1hbCBmb3J3YXJkcztcbiAqIH1cbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgICBzZXR0aW5nc1xuICogQHR5cGUgICAgICAgIHtNYXB9XG4gKlxuICogU3RvcmUgYWxsIHRoZSBzZXR0aW5nc1xuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gICAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgICAgY3VycmVudC1jb250ZXh0XG4gKiBAdHlwZSAgICAgICAge1N0cmluZ31cbiAqIEBwcml2YXRlXG4gKlxuICogU3RvcmUgdGhlIGN1cnJlbnQgY29udGV4dFxuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gICAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgICAgICBmb250LXNpemVcbiAqIEB0eXBlICAgICAgICAgIHtOdW1iZXJ9XG4gKiBAcHJpdmF0ZVxuICpcbiAqIFN0b3JlIHRoZSBjdXJyZW50IHJlZ2lzdGVyZWQgZm9udCBzaXplXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAgIChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgICAgICAgJHN2Zy1pY29uc1xuICogQHR5cGUgICAgICAgICAgICB7TWFwfVxuICogQHByaXZhdGVcbiAqXG4gKiBTdG9yZSBhbGwgdGhlIHJlZ2lzdGVyZWQgc3ZnIGljb25zXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAgIChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgICAgIGNsYXNzZXNcbiAqIEB0eXBlICAgICAgICAgIHtNYXB9XG4gKiBAcHJpdmF0ZVxuICpcbiAqIFN0b3JlIGFsbCB0aGUgY2xhc3NlcyBpbiB0aGVpciBuYW1lc3BhY2VzXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAgIChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgIGNsYXNzZXNcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MuY29yZS5jbGFzc1xuICogQHR5cGUgICAgICBtaXhpblxuICpcbiAqIFByaW50IG91dCBhbGwgd2FudGVkIHJlZ2lzdGVyZWQgY2xhc3NlcyBsaWtlIHBhZGRpbmcgaGVscGVycywgbWFyZ2luIGhlbHBlcnMsIGZvbnQgaGVscGVycywgZXRjLi4uXG4gKiBBdmFpbGFibGUgbmFtZXNwYWNlc1xuICogLSBzdWdhci5maWx0ZXIue25hbWV9IDogLmZpLXtuYW1lfVxuICogLSBzdWdhci50cmFuc2l0aW9uLntuYW1lfSA6IC50ci17bmFtZX1cbiAqIC0gc3VnYXIuZm9udC5mYW1pbHkue25hbWV9IDogLmYte25hbWV9XG4gKiAtIHN1Z2FyLm1hcmdpbi5ib3R0b20ue3NpemV9IDogLm0tYi17c2l6ZX1cbiAqIC0gc3VnYXIubWFyZ2luLnRvcC57c2l6ZX0gOiAubS10LXtzaXplfVxuICogLSBzdWdhci5tYXJnaW4ubGVmdC57c2l6ZX0gOiAubS1sLXtzaXplfVxuICogLSBzdWdhci5tYXJnaW4ucmlnaHQue3NpemV9IDogLm0tci17c2l6ZX1cbiAqIC0gc3VnYXIubWFyZ2luLnNpZGUue3NpemV9IDogLm0tcy17c2l6ZX1cbiAqIC0gc3VnYXIucGFkZGluZy5hbGwue3NpemV9IDogLnAte3NpemV9XG4gKiAtIHN1Z2FyLnBhZGRpbmcudG9wLntzaXplfSA6IC5wLXQte3NpemV9XG4gKiAtIHN1Z2FyLnBhZGRpbmcuYm90dG9tLntzaXplfSA6IC5wLWIte3NpemV9XG4gKiAtIHN1Z2FyLnBhZGRpbmcubGVmdC57c2l6ZX0gOiAucC1sLXtzaXplfVxuICogLSBzdWdhci5wYWRkaW5nLnJpZ2h0LntzaXplfSA6IC5wLXIte3NpemV9XG4gKiAtIHN1Z2FyLnBhZGRpbmcuc2lkZS57c2l6ZX0gOiAucC1zLXtzaXplfVxuICogLSBzdWdhci5zaXplLntzaXplfSA6IC5zLXtzaXplfVxuICogLSBzdWdhci5zaXplLnJlbC57c2l6ZX0gOiAucy17c2l6ZX0tcmVsXG4gKiAtIHN1Z2FyLnBhZGRpbmcubm8udG9wIDogLm5vLXAtdFxuICogLSBzdWdhci5wYWRkaW5nLm5vLmJvdHRvbSA6IC5uby1wLWJcbiAqIC0gc3VnYXIucGFkZGluZy5uby5sZWZ0IDogLm5vLXAtbFxuICogLSBzdWdhci5wYWRkaW5nLm5vLnJpZ2h0IDogLm5vLXAtclxuICogLSBzdWdhci5wYWRkaW5nLm5vLnNpZGUgOiAubm8tcC1zXG4gKiAtIHN1Z2FyLm1hcmdpbi5uby50b3AgOiAubm8tbS10XG4gKiAtIHN1Z2FyLm1hcmdpbi5uby5ib3R0b20gOiAubm8tbS1iXG4gKiAtIHN1Z2FyLm1hcmdpbi5uby5sZWZ0IDogLm5vLW0tbFxuICogLSBzdWdhci5tYXJnaW4ubm8ucmlnaHQgOiAubm8tbS1yXG4gKiAtIHN1Z2FyLm1hcmdpbi5uby5zaWRlIDogLm5vLW0tc1xuICogLSBzdWdhci5jb2xvci57bmFtZX0uY29sb3IgOiAuYy17bmFtZX1cbiAqIC0gc3VnYXIuY29sb3Iue25hbWV9LmJrZyA6IC5ia2cte25hbWV9XG4gKiAtIHN1Z2FyLmNvbG9yLntuYW1lfS5tb2RpZmllci57bW9kLW5hbWV9LmNvbG9yIDogLmMte25hbWV9LS17bW9kLW5hbWV9XG4gKiAtIHN1Z2FyLmNvbG9yLntuYW1lfS5tb2RpZmllci57bW9kLW5hbWV9LmJrZyA6IC5ia2cte25hbWV9LS17bW9kLW5hbWV9XG4gKiAtIHN1Z2FyLnB1bGwubGVmdCA6IC5wdWxsLWxlZnRcbiAqIC0gc3VnYXIucHVsbC5yaWdodCA6IC5wdWxsLXJpZ2h0XG4gKiAtIHN1Z2FyLnBvc2l0aW9uLnJlbGF0aXZlIDogLnJlbGF0aXZlXG4gKiAtIHN1Z2FyLnBvc2l0aW9uLmFic29sdXRlIDogLmFic29sdXRlXG4gKiAtIHN1Z2FyLmNsZWFyLmxlZnQgOiAuY2xlYXItbGVmdFxuICogLSBzdWdhci5jbGVhci5yaWdodCA6IC5jbGVhci1yaWdodFxuICogLSBzdWdhci5jbGVhci5ib3RoIDogLmNsZWFyXG4gKiAtIHN1Z2FyLnBvaW50ZXIuZXZlbnRzLmFsbCA6IC5wb2ludGVyLWV2ZW50cy1hbGxcbiAqIC0gc3VnYXIucG9pbnRlci5ldmVudHMubm9uZSA6IC5wb2ludGVyLWV2ZW50cy1ub25lXG4gKiAtIHN1Z2FyLmRpc3BsYXkuc2hvdyA6IC5zaG93XG4gKiAtIHN1Z2FyLmRpc3BsYXkuc2hvdy1pbmxpbmUgOiAuc2hvdy1pbmxpbmVcbiAqIC0gc3VnYXIuZGlzcGxheS5oaWRkZW4gOiAuaGlkZGVuXG4gKiAtIHN1Z2FyLmRpc3BsYXkuaGlkZSA6IC5oaWRlXG4gKiAtIHN1Z2FyLmRpc3BsYXkudmlzaWJsZSA6IC52aXNpYmxlXG4gKiAtIHN1Z2FyLmRpc3BsYXkuaW52aXNpYmxlIDogLmludmlzaWJsZVxuICogLSBzdWdhci5kaXNwbGF5LnZpc3VhbGx5LWhpZGRlbiA6IC52aXN1YWxseS1oaWRkZW5cbiAqIC0gc3VnYXIudGV4dC5oaWRkZW4gOiAudC1oaWRkZW5cbiAqIC0gc3VnYXIudGV4dC50cnVuY2F0ZSA6IC50LXRydW5jYXRlXG4gKiAtIHN1Z2FyLnRleHQuYWxpZ24ubGVmdCA6IC50LWxlZnRcbiAqIC0gc3VnYXIudGV4dC5hbGlnbi5yaWdodCA6IC50LXJpZ2h0XG4gKiAtIHN1Z2FyLnRleHQuYWxpZ24uY2VudGVyIDogLnQtY2VudGVyXG4gKiAtIHN1Z2FyLnRleHQuYWxpZ24uanVzdGlmeSA6IC50LWp1c3RpZnlcbiAqIC0gc3VnYXIudGV4dC50cmFuc2Zvcm0ubG93ZXJjYXNlIDogLnQtbG93ZXJjYXNlXG4gKiAtIHN1Z2FyLnRleHQudHJhbnNmb3JtLnVwcGVyY2FzZSA6IC50LXVwcGVyY2FzZVxuICogLSBzdWdhci50ZXh0LnRyYW5zZm9ybS5jYXBpdGFsaXplIDogLnQtY2FwaXRhbGl6ZVxuICogLSBzdWdhci5mb250LndlaWdodC5ib2xkIDogLmYtYm9sZFxuICogLSBzdWdhci5mb250LndlaWdodC5saWdodGVyIDogLmYtbGlnaHRlclxuICogLSBzdWdhci5mb250LndlaWdodC5ib2xkZXIgOiAuZi1ib2xkZXJcbiAqIC0gc3VnYXIuZm9udC53ZWlnaHQubm9ybWFsIDogLmYtbm9ybWFsXG4gKiAtIHN1Z2FyLmZvbnQuc3R5bGUuaXRhbGljIDogLmYtaXRhbGljXG4gKiAtIHN1Z2FyLmZvbnQuc3R5bGUub2JsaXF1ZSA6IC5mLW9ibGlxdWVcbiAqIC0gc3VnYXIuZm9udC52YXJpYW50LnNtYWxsLWNhcHMgOiAuZi1zbWFsbC1jYXBzXG4gKiAtIHN1Z2FyLmJsb2NrLmFsaWduLmNlbnRlciA6IC5ibG9jay1jZW50ZXJcbiAqIC0gc3VnYXIucmF0aW8uMjEtOSA6IGBgYC5yYXRpby0yMS05YGBgXG4gKiAtIHN1Z2FyLnJhdGlvLjE2LTkgOiBgYGAucmF0aW8tMTYtOWBgYFxuICogLSBzdWdhci5yYXRpby40LTMgOiBgYGAucmF0aW8tNC0zYGBgXG4gKiAtIHN1Z2FyLnJhdGlvLjEtMSA6IGBgYC5yYXRpby0xLTFgYGBcbiAqIC0gc3VnYXIuc2l6ZS5hYnMuY292ZXIgOiBgYGAuYWJzLWNvdmVyYGBgXG4gKiAtIHN1Z2FyLnNpemUuYWJzLmNvbnRhaW4gOiBgYGAuYWJzLWNvbnRhaW5gYGBcbiAqIC0gc3VnYXIuc2l6ZS5hYnMuZml0IDogYGBgLmFicy1maXRgYGBcbiAqIC0gc3VnYXIuY2xlYXJmaXguZGVmYXVsdCA6IC5jbGVhcmZpeFxuICogLSBzdWdhci5jbGVhcmZpeC5mbG9hdCA6IC5jbGVhcmZpeC1mbG9hdFxuICogLSBzdWdhci5jbGVhcmZpeC5taWNybyA6IC5jbGVhcmZpeC1taWNyb1xuICogLSBzdWdhci5jbGVhcmZpeC5vdmVyZmxvdyA6IC5jbGVhcmZpeC1vdmVyZmxvd1xuICogLSBzdWdhci5jbGVhcmZpeC5mYWNlYm9vayA6IC5jbGVhcmZpeC1mYWNlYm9va1xuICogLSBzdWdhci5uby10cmFuc2l0aW9ucyA6IC5uby10cmFuc2l0aW9uc1xuICogLSBzdWdhci5jbGVhci10cmFuc2l0aW9ucyA6IC5jbGVhci10cmFuc2l0aW9uc1xuICogLSBzdWdhci5uby1hbmltYXRpb25zIDogLm5vLWFuaW1hdGlvbnNcbiAqIC0gc3VnYXIuY2xlYXItYW5pbWF0aW9ucyA6IC5jbGVhci1hbmltYXRpb25zXG4gKiAtIHN1Z2FyLm5vLXRyYW5zbWF0aW9ucyA6IC5uby10cmFuc21hdGlvbnNcbiAqIC0gc3VnYXIuY2xlYXItdHJhbnNtYXRpb25zIDogLmNsZWFyLXRyYW5zbWF0aW9uc1xuICpcbiAqIEBwYXJhbSBcdFx0XHR7TGlzdH08c3RyaW5nPiBcdFx0XHQkbmFtZXNwYWNlcyBcdFx0VGhlIGNsYXNzZXMgbmFtZXNwYWNlcyB3YW50ZWRcbiAqXG4gKiBAZXhhbXBsZSAgICAgc2Nzc1xuICogXFxAaW5jbHVkZSBzdWdhci5jbGFzc2VzKCk7IC8vIHdpbGwgcHJpbnQgb3V0IGFsbCB0aGUgY2xhc3Nlc1xuICogXFxAaW5jbHVkZSBzdWdhci5jbGFzc2VzKCdzdWdhci5mb250Jyk7IC8vIHdpbGwgcHJpbnQgYWxsIHRoZSBmb250IGNsYXNzZXNcbiAqIFxcQGluY2x1ZGUgc3VnYXIuY2xhc3Nlcygnc3VnYXIuY2xlYXJmaXgnICdzdWdhci5wdWxsJyk7IC8vIHRoZSBjbGVhcmZpeGVzIGFuZCB0aGUgcHVsbCBjbGFzc2VzXG4gKiAvLyBldGMuLi5cbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgICAgICAgaW5pdC1jbGFzc2VzXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmNvcmUuY2xhc3NcbiAqIEB0eXBlICAgICAgbWl4aW5cbiAqXG4gKiBSZWdpc3RlciBhbGwgdGhlIGR5bmFtaWMgaGVscGVyIGNsYXNzZXMgdGhhdCBkZXBlbmRzIG9uIHRoZSBzZXR0aW5ncywgZXRjLi4uXG4gKiBUaGlzIGlzIHVzZWQgaW50ZXJuYWx5XG4gKlxuICogQGV4YW1wbGUgICAgIHNjc3NcbiAqIFxcQGluY2x1ZGUgc3VnYXIuaW5pdC1jbGFzc2VzKCk7XG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgICAgc2V0dGluZ3NcbiAqIEB0eXBlICAgICAgICB7TWFwfVxuICpcbiAqIFN0b3JlIGFsbCB0aGUgc2V0dGluZ3NcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+ICAgKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICAgIGN1cnJlbnQtY29udGV4dFxuICogQHR5cGUgICAgICAgIHtTdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICpcbiAqIFN0b3JlIHRoZSBjdXJyZW50IGNvbnRleHRcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+ICAgKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICAgICAgZm9udC1zaXplXG4gKiBAdHlwZSAgICAgICAgICB7TnVtYmVyfVxuICogQHByaXZhdGVcbiAqXG4gKiBTdG9yZSB0aGUgY3VycmVudCByZWdpc3RlcmVkIGZvbnQgc2l6ZVxuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gICAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgICAgICAgICRzdmctaWNvbnNcbiAqIEB0eXBlICAgICAgICAgICAge01hcH1cbiAqIEBwcml2YXRlXG4gKlxuICogU3RvcmUgYWxsIHRoZSByZWdpc3RlcmVkIHN2ZyBpY29uc1xuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gICAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgICAgICBjbGFzc2VzXG4gKiBAdHlwZSAgICAgICAgICB7TWFwfVxuICogQHByaXZhdGVcbiAqXG4gKiBTdG9yZSBhbGwgdGhlIGNsYXNzZXMgaW4gdGhlaXIgbmFtZXNwYWNlc1xuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gICAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIHJlZ2lzdGVyLWNsYXNzXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmNvcmUuY2xhc3NcbiAqIEB0eXBlICAgICAgbWl4aW5cbiAqXG4gKiBSZWdpc3RlciBhIGNsYXNzIHVuZGVyIGEgY2VydGFpbiBuYW1lc3BhY2VcbiAqXG4gKiBAcGFyYW0gXHRcdFx0e1N0cmluZ30gXHRcdCRjbGFzc25hbWUgXHRcdFRoZSBjbGFzc25hbWUgdGhhdCB3aWxsIGJlIHByaW50ZWQgb3V0XG4gKiBAcGFyYW0gXHRcdFx0e1N0cmluZ30gXHRcdCRuYW1lc3BhY2UgXHRcdFRoZSBkb3RzIHNlcGFyYXRlZCBuYW1lc3BhY2UgdW5kZXIgd2hpY2ggdGhlIGNsYXNzIHdpbGwgbGl2ZVxuICpcbiAqIEBleGFtcGxlICAgICAgIHNjc3NcbiAqIFxcQGluY2x1ZGUgc3VnYXIucmVnaXN0ZXItY2xhc3MobXktY29vbC1jbGFzcywgJ215LmNvb2wubmFtZXNwYWNlJykge1xuICogXHRcdGJhY2tncm91bmQgOiBwaW5rO1xuICogfVxuICogXFxAaW5jbHVkZSBzdWdhci5yZWdpc3Rlci1jbGFzcyhhbm90aGVyLWNvb2wtY2xhc3MsICdteS5hbm90aGVyLm5hbWVzcGFjZScpIHtcbiAqIFx0XHRiYWNrZ3JvdW5kIDogcmVkO1xuICogfVxuICpcbiAqIC8vIHByaW50IG91dCBteSBoZWxwZXJzIGNsYXNzZXNcbiAqIFxcQGluY2x1ZGUgc3VnYXIuY2xhc3NlcygnbXknKTtcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgIGNvbG9yLW1vZGlmaWVyXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmNvcmUuY29sb3JcbiAqIEB0eXBlICAgICAgZnVuY3Rpb25cbiAqXG4gKiBSZXR1cm4gdGhlIGNvbG9yIGluIGEgbW9kaWZpZXIgbGlzdFxuICpcbiAqIEBwYXJhbSBcdFx0XHR7TGlzdH0gXHRcdFx0JG1vZGlmaWVycyBcdFx0VGhlIG1vZGlmaWVycyBsaXN0XG4gKiBAcmV0dXJuIFx0XHRcdHtTdHJpbmd9IFx0XHRcdFx0XHRcdFRoZSBjb2xvciBuYW1lXG4gKlxuICogQGV4YW1wbGVcbiAqICRteS1jb2xvciA6IHN1Z2FyLmNvbG9yLW1vZGlmaWVyKG91dGxpbmUgcHJpbWFyeSk7IC8vID0+IHByaW1hcnlcbiAqXG4gKiBAYXV0aG9yIFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIGNvbG9yLXNjaGVtYVxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5jb3JlLmNvbG9yXG4gKiBAdHlwZSAgICAgIG1peGluXG4gKlxuICogUHJpbnQgb3V0IHRoZSBzY29wZWQgY29sb3Igc2NoZW1hIGNzc1xuICpcbiAqIEBwYXJhbSBcdFx0e1N0cmluZ30gXHRcdFx0JG5hbWUgXHRcdFx0VGhlIGNvbG9yIHNjaGVtYSBuYW1lXG4gKlxuICogQGV4YW1wbGUgICAgICAgc2Nzc1xuICogXFxAaW5jbHVkZSBzdWdhci5jb2xvci1zY2hlbWEobGlnaHQpIHtcbiAqIFx0XHRoMSwgaDIge1xuICogXHRcdFx0Y29sb3IgOiB3aGl0ZTtcbiAqIFx0XHR9XG4gKiB9XG4gKiAvLyB3aWxsIHByaW50XG4gKiAuY3MtbGlnaHQgaDEsXG4gKiAuY3MtbGlnaHQgaDIge1xuICogXHRcdGNvbG9yIDogd2hpdGU7XG4gKiB9XG4gKlxuICogaDEsIGgyIHtcbiAqIFx0XHRcXEBpbmNsdWRlIHN1Z2FyLmNvbG9yLXNjaGVtYShsaWdodCkge1xuICogXHRcdFx0Y29sb3IgOiB3aGl0ZTtcbiAqIFx0XHR9XG4gKiB9XG4gKiAvLyB3aWxsIHByaW50XG4gKiAuY3MtbGlnaHQgaDEsIGgxLmNzLWxpZ2h0LFxuICogLmNzLWxpZ2h0IGgyLCBoMi5jcy1saWdodCB7XG4gKiBcdFx0Y29sb3IgOiB3aGl0ZTtcbiAqIH1cbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgY29sb3JcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MuY29yZS5jb2xvclxuICogQHR5cGUgICAgICBmdW5jdGlvblxuICpcbiAqIEdldCBhIHJlZ2lzdGVyZWQgY29sb3IgYnkgbmFtZSBvciB3cmFwIGEgbmV3IGNvbG9yIGludG8gYSBzdWdhci5jb2xvciBjYWxsXG4gKiB0byBtYW5pcHVsYXRlIGl0IHdpdGggZWFzZS5cbiAqIFN1cHBvcnRlZCBhY3Rpb25zIDpcbiAqIC0gaHVlIHtEZWd9XG4gKiAtIGxpZ2h0ZW4ge1BlcmNlbnR9XG4gKiAtIGRhcmtlbiB7UGVyY2VudH1cbiAqIC0gc2F0dXJhdGUge1BlcmNlbnR9XG4gKiAtIGRlc2F0dXJhdGUge1BlcmNlbnR9XG4gKiAtIGdyYXlzY2FsZSB7Qm9vbGVhbn1cbiAqIC0gY29tcGxlbWVudCB7Qm9vbGVhbn1cbiAqIC0gaW52ZXJ0IHtCb29sZWFufVxuICogLSBvcGFjaXR5IHtQZXJjZW50fVxuICogLSBtaXgge0NvbG9yfVxuICogLSBsaWdodG5lc3Mge1BlcmNlbnR9XG4gKiAtIHNhdHVyYXRpb24ge1BlcmNlbnR9XG4gKlxuICogQHBhcmFtIFx0XHR7U3RyaW5nfENvbG9yfSBcdFx0JGNvbG9yIFx0XHRcdFx0VGhlIGNvbG9yIG5hbWUgb3IgdGhlIGNvbG9yIHZhbHVlIHRvIG1hbmlwdWxhdGVcbiAqIEBwYXJhbSBcdFx0e1N0cmluZ3xMaXN0fSBcdFx0XHRbJG1vZGlmaWVyPW51bGxdIFx0VGhlIGNvbG9yIG1vZGlmaWVyIHRvIGFwcGx5LiBDYW4gYmUgYSByZWdpc3RlcmVkIG1vZGlmaWVyIG5hbWUgb3IgYSBtb2RpZmllciBsaXN0XG4gKiBAcmV0dXJuIFx0XHR7Q29sb3J9IFx0XHRcdFx0XHRcdFx0XHRcdFRoZSBhY3R1YWwgY29sb3IgdmFsdWVcbiAqXG4gKiBAZXhhbXBsZSBcdCBcdHNjc3NcbiAqIC8vIGRlZmF1bHQgY29sb3IgKHNldHRpbmdzLmNvbG9ycy5kZWZhdWx0KVxuICogJG15Q29sb3IgOiBzdWdhci5jb2xvcihkZWZhdWx0KTtcbiAqIC8vIHByaW1hcnkgY29sb3IgKHNldHRpbmdzLmNvbG9ycy5wcmltYXJ5KVxuICogJHByaW1hcnkgOiBzdWdhci5jb2xvcihwcmltYXJ5KTtcbiAqIC8vIG1hbmlwdWxhdGVcbiAqICRwcmltYXJ5LWRhcmsgOiBzdWdhci5jb2xvcihwcmltYXJ5LCAtZGFya2VuIDEwJSk7XG4gKiAvLyByZWdpc3RlcmVkIG1vZGlmaWVyXG4gKiAkcHJpbWFyeS1saWdodCA6IHN1Z2FyLmNvbG9yKHByaW1hcnksIGxpZ2h0KTtcbiAqIC8vICRuYW1lIGFzIGxpc3RcbiAqICRtb2RpZmllZCBwcmltYXJ5IDogc3VnYXIuY29sb3IoKHByaW1hcnksIC1kYXJrZW4gMTAlKSk7XG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIGRvY2Jsb2NrLWNvbG9yc1xuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5jb3JlLmNvbG9yXG4gKiBAdHlwZSAgICAgIG1peGluXG4gKlxuICogUHJpbnQgdGhlIHN0eWxlZ3VpZGUgZG9jYmxvY2tzIGZvciB0aGUgcmVnaXN0ZXJlZCBzdWdhciBjb2xvcnNcbiAqXG4gKiBAZXhhbXBsZSAgICAgc2Nzc1xuICogQGluY2x1ZGUgc3VnYXIuZG9jYmxvY2stY29sb3JzKCk7XG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIGhhcy1jb2xvclxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5jb3JlLmNvbG9yXG4gKiBAdHlwZSAgICBmdW5jdGlvblxuICpcbiAqIENoZWNrIGlmIHRoZSBwcm92aWRlZCBjb2xvciBpcyBhIHJlZ2lzdGVyZWQgb25lIG9yIG5vdFxuICpcbiAqIEBwYXJhbSBcdFx0e1N0cmluZ30gXHRcdCRjb2xvciBcdFx0VGhlIGNvbG9yIG5hbmUgdG8gY2hlY2tcbiAqIEByZXR1cm4gXHRcdHtCb29sZWFufSBcdFx0XHRcdFx0VHJ1ZSBpZiBleGlzdHMsIGZhbHNlIGlmIG5vdFxuICpcbiAqIEBleGFtcGxlICAgICBzY3NzXG4gKiBzdWdhci5oYXMtY29sb3IocHJpbWFyeSk7IC8vID0+IHRydWVcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgICBzZXR0aW5nc1xuICogQHR5cGUgICAgICAgIHtNYXB9XG4gKlxuICogU3RvcmUgYWxsIHRoZSBzZXR0aW5nc1xuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gICAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgICAgY3VycmVudC1jb250ZXh0XG4gKiBAdHlwZSAgICAgICAge1N0cmluZ31cbiAqIEBwcml2YXRlXG4gKlxuICogU3RvcmUgdGhlIGN1cnJlbnQgY29udGV4dFxuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gICAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgICAgICBmb250LXNpemVcbiAqIEB0eXBlICAgICAgICAgIHtOdW1iZXJ9XG4gKiBAcHJpdmF0ZVxuICpcbiAqIFN0b3JlIHRoZSBjdXJyZW50IHJlZ2lzdGVyZWQgZm9udCBzaXplXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAgIChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgICAgICAgJHN2Zy1pY29uc1xuICogQHR5cGUgICAgICAgICAgICB7TWFwfVxuICogQHByaXZhdGVcbiAqXG4gKiBTdG9yZSBhbGwgdGhlIHJlZ2lzdGVyZWQgc3ZnIGljb25zXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAgIChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgICAgIGNsYXNzZXNcbiAqIEB0eXBlICAgICAgICAgIHtNYXB9XG4gKiBAcHJpdmF0ZVxuICpcbiAqIFN0b3JlIGFsbCB0aGUgY2xhc3NlcyBpbiB0aGVpciBuYW1lc3BhY2VzXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAgIChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgY29udGV4dFxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5jb3JlLmNvbnRleHRcbiAqIEB0eXBlICAgICAgZnVuY3Rpb25cbiAqIFJldHVybiB0aGUgbmFtZSBvZiB0aGUgY29udGV4dCBzZXR0ZWQgd2l0aCB0aGUgWy4uL21peGlucy9fY29udGV4dC5zY3NzXSBtaXhpblxuICpcbiAqIEBwYXJhbSBcdFx0XHR7U3RyaW5nfSBcdFx0XHRbJGRlZmF1bHQ9bnVsbF0gXHRcdFRoZSBuYW1lIHRvIHJldHVybiBpZiBubyBjb250ZXh0IGV4aXN0XG4gKiBAcmV0dXJuIFx0XHRcdHtTdHJpbmd9IFx0XHRcdFx0XHRcdFx0XHRcdFRoZSBjb250ZXh0IG5hbWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gcmVnaXN0ZXIgYSBjb250ZXh0XG4gKiBcXEBpbmNsdWRlIHN1Z2FyLmNvbnRleHQtc2V0dXAoJ215LWNvbnRleHQnLCAoXG4gKiBcdFx0Ly8gb3ZlcnJpZGUgc29tZSBzZXR0aW5ncyBoZXJlLi4uXG4gKiApKTtcbiAqXG4gKiBzdWdhci5jb250ZXh0KCdoZWxsbycpIC8vID0+ICdoZWxsbydcbiAqIFxcQGluY2x1ZGUgc3VnYXIuY29udGV4dCgnbXktY29udGV4dCcpIHtcbiAqIFx0XHRzdWdhci5jb250ZXh0KCdoZWxsbycpIC8vID0+ICdteS1jb250ZXh0J1xuICogfVxuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pO1xuICovXG4vKipcbiAqIEBuYW1lICAgICAgICBzZXR0aW5nc1xuICogQHR5cGUgICAgICAgIHtNYXB9XG4gKlxuICogU3RvcmUgYWxsIHRoZSBzZXR0aW5nc1xuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gICAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgICAgY3VycmVudC1jb250ZXh0XG4gKiBAdHlwZSAgICAgICAge1N0cmluZ31cbiAqIEBwcml2YXRlXG4gKlxuICogU3RvcmUgdGhlIGN1cnJlbnQgY29udGV4dFxuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gICAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgICAgICBmb250LXNpemVcbiAqIEB0eXBlICAgICAgICAgIHtOdW1iZXJ9XG4gKiBAcHJpdmF0ZVxuICpcbiAqIFN0b3JlIHRoZSBjdXJyZW50IHJlZ2lzdGVyZWQgZm9udCBzaXplXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAgIChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgICAgICAgJHN2Zy1pY29uc1xuICogQHR5cGUgICAgICAgICAgICB7TWFwfVxuICogQHByaXZhdGVcbiAqXG4gKiBTdG9yZSBhbGwgdGhlIHJlZ2lzdGVyZWQgc3ZnIGljb25zXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAgIChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgICAgIGNsYXNzZXNcbiAqIEB0eXBlICAgICAgICAgIHtNYXB9XG4gKiBAcHJpdmF0ZVxuICpcbiAqIFN0b3JlIGFsbCB0aGUgY2xhc3NlcyBpbiB0aGVpciBuYW1lc3BhY2VzXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAgIChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgY29udGV4dFxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5jb3JlLmNvbnRleHRcbiAqIEB0eXBlICAgICAgbWl4aW5cbiAqXG4gKiBTZXQgYSBjb250ZXh0IHRvIGJlIHVzZWQgaW5zaWRlIHRoZSBtaXhpblxuICpcbiAqIEBwYXJhbSBcdFx0XHR7U3RyaW5nfE1hcH0gXHRcdFx0JG5hbWUtb3ItbWFwIFx0XHRUaGUgbmFtZSBvZiBhIHJlZ2lzdGVyZWQgY29udGV4dCBvciBhIG1hcFxuICpcbiAqIEBleGFtcGxlICAgICBzY3NzXG4gKiAvLyByZWdpc3RlciBhIGNvbnRleHRcbiAqIFxcQGluY2x1ZGUgc3VnYXIuY29udGV4dC1zZXR1cChteS1jb29sLWNvbnRleHQsIChcbiAqIFx0XHRsb29rLWFuZC1mZWVsIDogKFxuICogXHRcdFx0cGFkZGluZy12ZXJ0aWNhbCA6IChcbiAqIFx0XHRcdFx0ZGVmYXVsdCA6IDAuNmVtXG4gKiBcdFx0XHQpXG4gKiBcdFx0KVxuICogKSk7XG4gKlxuICogLy8gcmVnaXN0ZXJlZCBjb250ZXh0XG4gKiBcXEBpbmNsdWRlIHN1Z2FyLmNvbnRleHQobXktY29vbC1jb250ZXh0KSB7XG4gKiBcdFx0Ly8geW91ciBjb2RlIGhlcmUuLi5cbiAqIH1cbiAqXG4gKiAvLyBpbmxpbmUgY29udGV4dFxuICogXFxAaW5jbHVkZSBzdWdhci5jb250ZXh0KChcbiAqIFx0XHRsb29rLWFuZC1mZWVsIDogKFxuICogXHRcdFx0cGFkZGluZy12ZXJ0aWNhbCA6IChcbiAqIFx0XHRcdFx0ZGVmYXVsdCA6IC4zZW1cbiAqIFx0XHRcdClcbiAqIFx0XHQpXG4gKiApKSB7XG4gKiBcdFx0Ly8geW91ciBjb2RlIGhlcmUuLi5cbiAqIH1cbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgICBzZXR0aW5nc1xuICogQHR5cGUgICAgICAgIHtNYXB9XG4gKlxuICogU3RvcmUgYWxsIHRoZSBzZXR0aW5nc1xuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gICAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgICAgY3VycmVudC1jb250ZXh0XG4gKiBAdHlwZSAgICAgICAge1N0cmluZ31cbiAqIEBwcml2YXRlXG4gKlxuICogU3RvcmUgdGhlIGN1cnJlbnQgY29udGV4dFxuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gICAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgICAgICBmb250LXNpemVcbiAqIEB0eXBlICAgICAgICAgIHtOdW1iZXJ9XG4gKiBAcHJpdmF0ZVxuICpcbiAqIFN0b3JlIHRoZSBjdXJyZW50IHJlZ2lzdGVyZWQgZm9udCBzaXplXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAgIChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgICAgICAgJHN2Zy1pY29uc1xuICogQHR5cGUgICAgICAgICAgICB7TWFwfVxuICogQHByaXZhdGVcbiAqXG4gKiBTdG9yZSBhbGwgdGhlIHJlZ2lzdGVyZWQgc3ZnIGljb25zXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAgIChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgICAgIGNsYXNzZXNcbiAqIEB0eXBlICAgICAgICAgIHtNYXB9XG4gKiBAcHJpdmF0ZVxuICpcbiAqIFN0b3JlIGFsbCB0aGUgY2xhc3NlcyBpbiB0aGVpciBuYW1lc3BhY2VzXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAgIChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgY29udGV4dC1zZXR1cFxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5jb3JlLmNvbnRleHRcbiAqIEB0eXBlICAgICAgbWl4aW5cbiAqXG4gKiBSZWdpc3RlciBhIGNvbnRleHQgd2l0aCBhIG5hbWUgdG8gdXNlIGl0IGxhdGVyXG4gKlxuICogQHBhcmFtIFx0XHRcdHtTdHJpbmd9IFx0XHQkbmFtZSBcdFx0XHRUaGUgY29udGV4dCBuYW1lXG4gKiBAcGFyYW0gXHRcdFx0e01hcH0gXHRcdFx0JHNldHRpbmdzIFx0XHRUaGUgc2V0dGluZ3MgdG8gb3ZlcnJpZGUgZm9yIHRoaXMgY29udGV4dFxuICpcbiAqIEBleGFtcGxlICAgICAgIHNjc3NcbiAqIFxcQGluY2x1ZGUgc3VnYXIuY29udGV4dC1zZXR1cChteS1jb29sLWNvbnRleHQsIChcbiAqIFx0XHRsb29rLWFuZC1mZWVsIDogKFxuICogXHRcdFx0cGFkZGluZy12ZXJ0aWNhbCA6IChcbiAqIFx0XHRcdFx0ZGVmYXVsdCA6IDAuNmVtXG4gKiBcdFx0XHQpXG4gKiBcdFx0KVxuICogKSk7XG4gKlxuICogLy8gdXNpbmcgeW91ciBjb250ZXh0XG4gKiBcXEBpbmNsdWRlIHN1Z2FyLmNvbnRleHQobXktY29vbC1jb250ZXh0KSB7XG4gKiBcdFx0c3VnYXIubG9vay1hbmQtZmVlbChwYWRkaW5nLXZlcnRpY2FsKTsgLy8gPT4gMC42ZW1cbiAqIH1cbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgX2NoZWNrLXByb3BlcnR5XG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmNvcmUuZGV2XG4gKiBAdHlwZSAgICAgIGZ1bmN0aW9uXG4gKlxuICogQ2hlY2sgYSBwcm9wZXJ0eSB0eXBlcyBhbmQgdmFsdWVzXG4gKlxuICogQHBhcmFtICAgICAgICAge1N0cmluZ30gICAgICAgICRwcm9wZXJ0eSAgICAgICAgIFRoZSBwcm9wZXJ0eSBuYW1lIHRvIGNoZWNrXG4gKiBAcGFyYW0gICAgICAgICB7U3RyaW5nfSAgICAgICAgJHR5cGUgICAgICAgICAgICAgVGhlIHByb3BlcnR5IHR5cGUgd2FudGVkXG4gKiBAcGFyYW0gICAgICAgICB7TWl4ZWR9ICAgICAgICAgJHZhbHVlICAgICAgICAgICAgVGhlIHByb3BlcnR5IHZhbHVlIHRvIGNoZWNrXG4gKiBAcGFyYW0gICAgICAgICB7Qm9vbGVhbn0gICAgICAgWyRjaGVjay1vbmx5PWZhbHNlXSAgRGVmaW5lIGlmIHdlIHdhbnQgdG8gdGhyb3cgYW4gZXJyb3Igb3IganVzdCBzZW5kIGJhY2sgZmFsc2Ugb24gdHlwZSBlcnJvclxuICpcbiAqIEBhdXRob3IgXHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgX2dldC1wcm9wZXJ0eS1uYW1lXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmNvcmUuZGV2XG4gKiBAdHlwZSAgICAgIGZ1bmN0aW9uXG4gKlxuICogUmV0dXJuIHRoZSBwcm9wZXJ0eSBuYW1lXG4gKlxuICogQHBhcmFtICAgICAgIHtTdHJpbmd9ICAgICAgICAkcHJvcGVydHkgICAgICAgICBUaGUgcHJvcGVydHkgbmFtZSB0byBnZXRcbiAqIEBwYXJhbSAgICAgICB7TWFwfSAgICAgICAgICAgWyRrZXl3b3Jkcz0oKV0gICAgVGhlXG4gKlxuICogQGF1dGhvciBcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICBfZ2V0LXByb3BlcnR5LXR5cGVcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MuY29yZS5kZXZcbiAqIEB0eXBlICAgICAgZnVuY3Rpb25cbiAqXG4gKiBHZXQgdGhlIHByb3BlcnR5IHR5cGVcbiAqXG4gKiBAYXV0aG9yIFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICB0ZXN0LWFyZ3VtZW50XG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmNvcmUuZGV2XG4gKiBAdHlwZSAgICBmdW5jdGlvblxuICpcbiAqIFRlc3QgYW4gYXJndW1lbnQgcGFzc2VkIHRvIGEgZnVuY3Rpb24gb3IgYSBtaXhpbiB0byBlbnN1cmUgaGlzIHR5cGUsIHZhbHVlLCBldGMuLi5cbiAqIElmIHRoZSBhcmd1bWVudCBkb2VzIG5vdCBwYXNzIHRoZSB0ZXN0LCBhbiBlcnJvciB3aWxsIGJlIHRocm93biwgdW5sZXNzIHRoZSAkY2hlY2stb25seSBhcmd1bWVudCBpcyB0cnVlXG4gKlxuICogQHBhcmFtIFx0XHRcdFx0e1N0cmluZ30gXHRcdFx0XHQkbWV0aG9kIFx0XHRcdFx0VGhlIGZ1bmN0aW9uL21peGluIG5hbWUgKGRlYnVnIHB1cnBvc2UpXG4gKiBAcGFyYW0gXHRcdFx0XHR7U3RyaW5nfSBcdFx0XHRcdCRhcmd1bWVudCBcdFx0XHRcdFRoZSBhcmd1bWVudCBuYW1lIHRvIHRlc3QgKGRlYnVnIHB1cnBvc2UpXG4gKiBAcGFyYW0gXHRcdFx0XHR7TGlzdHxTdHJpbmd9IFx0XHRcdCR0eXBlLW9yLXZhbHVlcyBcdFx0SWYgc3RyaW5nLCB0aGUgdHlwZShzKSB0aGF0IHRoZSBhcmd1bWVudCBtdXN0IG1hdGNoLCBpZiBsaXN0LCB0aGUgcG9zc2libGUgdmFsdWVzIHRoYXQgdGhlIGFyZ3VtZW50IGNhbiB0YWtlXG4gKiBAcGFyYW0gXHRcdFx0XHR7TWl4ZWR9IFx0XHRcdFx0JHZhbHVlIFx0XHRcdFx0XHRUaGUgYWN0dWFsIGFyZ3VtZW50IHZhbHVlXG4gKiBAcGFyYW0gXHRcdFx0XHR7Qm9vbGVhbn0gXHRcdFx0XHRbJGNoZWNrLW9ubHk9ZmFsc2VdXHRcdElmIHRoaXMgaXMgdHJ1ZSwgd2lsbCBub3QgdGhyb3duIGFueSBlcnJvclxuICogQHJldHVybiBcdFx0XHRcdHtNaXhlZH0gXHRcdFx0XHRcdFx0XHRcdFx0XHRUaGUgdmFsdWUgaWYgb2ssIGZhbHNlIGlmIG5vdFxuICpcbiAqIEBleGFtcGxlICAgICBzY3NzXG4gKiBcXEBtaXhpbiBteS1jb29sLW1peGluKCRhcmd1bWVudDEsICRhcmd1bWVudDIpIHtcbiAqICAgICAgICAkYXJndW1lbnQxIDogc3VnYXIudGVzdC1hcmd1bWVudChteS1jb29sLW1peGluLCBhcmd1bWVudDEsIHN0cmluZywgJGFyZ3VtZW50MSk7XG4gKiAgICAgICAgJGFyZ3VtZW50MiA6IHN1Z2FyLnRlc3QtYXJndW1lbnQobXktY29vbC1taXhpbiwgYXJndW1lbnQyLCAoaGVsbG8sd29ybGQsMTIpLCAkYXJndW1lbnQyKTtcbiAqIH1cbiAqIFxcQG1peGluIG15LWNvb2wtbWl4aW4oaGVsbG8sIHdvcmxkKTsgLy8gb2tcbiAqIFxcQG1peGluIG15LWNvb2wtbWl4aW4oaGVsbG8sIHVuaXZlcnNlKTsgLy8gdGhyb3cgYW4gZXJyb3JcbiAqIFxcQG1peGluIG15LWNvb2wtbWl4aW4oMTIsIHdvcmxkKTsgLy8gdGhyb3cgYW4gZXJyb3JcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgZmlsdGVyXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmNvcmUuZmlsdGVyXG4gKiBAdHlwZSAgICBmdW5jdGlvblxuICpcbiAqIFJldHVybiBhIGxpc3Qgd2l0aCBhbGwgdGhlIGZpbHRlcnMgdGhhdCBhcmUgcGFzc2VkIGFzIGFyZ3VtZW50XG4gKiBUaGlzIHdpbGwgdXNlIHRoZSBbLi9fcy1maWx0ZXItbWFwLnNjc3NdIGZ1bmN0aW9uIHRvIHBhcnNlIHRoZSBmaWx0ZXJzXG4gKlxuICogQHBhcmFtIFx0IFx0e0xpc3R9PFN0cmluZz4gXHRcdFx0JGZpbHRlcnMgXHRcdFx0VGhlIHJlZ2lzdGVyZWQgZmlsdGVyKHMpIG5hbWUocykgb3IgdGhlIGZpbHRlcihzKSBzdHJpbmcocykgdG8gdHJhbnNmb3JtIGludG8gbGlzdFxuICogQHJldHVybiBcdFx0e0xpc3R9IFx0XHRcdFx0XHRcdFx0XHRcdFx0VGhlIGNvbnZlcnRlZCBmaWx0ZXJzIGxpc3QgdG8gdXNlIGFzIGNzcyBwcm9wZXJ0eVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyByZWdpc3RlciBhIGZpbHRlclxuICogXFxAaW5jbHVkZSBzdWdhci5zZXR1cCgoXG4gKiBcdFx0ZmlsdGVycyA6IChcbiAqIFx0XHRcdG15Q29vbEZpbHRlciA6IGJveC1zaGFkb3coIzAwMCAwIDAgMTBweCkgYmx1cigzMHB4KSxcbiAqIFx0XHRcdC8vIG90aGVyIGZpbHRlcnMuLi5cbiAqIFx0XHQpXG4gKiApKTtcbiAqXG4gKiAvLyByZWdpc3RlcmVkIGZpbHRlclxuICogLm15LWNvb2wtZWxlbWVtdCB7XG4gKiBcdFx0ZmlsdGVyIDogc3VnYXIuZmlsdGVyKG15Q29vbEZpbHRlcik7XG4gKiBcdFx0Ly8gZmlsdGVyIDogYm94LXNoYWRvdygjMDAwIDAgMCAxMHB4KSBibHVyKDMwcHgpO1xuICogfVxuICpcbiAqIC8vIGN1c3RvbSBmaWx0ZXJcbiAqIC5teS1jb29sLWVsZW1lbnQge1xuICogXHRcdGZpbHRlciA6IHN1Z2FyLmZpbHRlcihteUNvb2xGaWx0ZXIgaW52ZXJ0KDEwMCUpKTtcbiAqIFx0XHQvLyBmaWx0ZXIgOiBib3gtc2hhZG93KCMwMDAgMCAwIDEwcHgpIGJsdXIoMzBweCkgaW52ZXJ0KDEwMCUpO1xuICogfVxuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICBmaWx0ZXJcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MuY29yZS5maWx0ZXJcbiAqIEB0eXBlICAgICAgbWl4aW5cbiAqXG4gKiBQcmludCBvdXQgYSBsaXN0IHdpdGggYWxsIHRoZSBmaWx0ZXJzIHRoYXQgYXJlIHBhc3NlZCBhcyBhcmd1bWVudFxuICogVGhpcyB3aWxsIHVzZSB0aGUgWy4uL2Z1bmN0aW9ucy9fZmlsdGVyLW1hcC5zY3NzXSBmdW5jdGlvbiB0byBwYXJzZSB0aGUgZmlsdGVyc1xuICpcbiAqIEBwYXJhbSBcdCBcdHtMaXN0fTxTdHJpbmc+IFx0XHRcdCRmaWx0ZXJzIFx0XHRcdFRoZSByZWdpc3RlcmVkIGZpbHRlcihzKSBuYW1lKHMpIG9yIHRoZSBmaWx0ZXIocykgc3RyaW5nKHMpIHRvIHRyYW5zZm9ybSBpbnRvIGxpc3RcbiAqXG4gKiBAZXhhbXBsZSAgICAgc2Nzc1xuICogLy8gcmVnaXN0ZXIgYSBmaWx0ZXJcbiAqIFxcQGluY2x1ZGUgc3VnYXIuc2V0dXAoKFxuICogXHRcdGZpbHRlcnMgOiAoXG4gKiBcdFx0XHRteUNvb2xGaWx0ZXIgOiBib3gtc2hhZG93KCMwMDAgMCAwIDEwcHgpIGJsdXIoMzBweCksXG4gKiBcdFx0XHQvLyBvdGhlciBmaWx0ZXJzLi4uXG4gKiBcdFx0KVxuICogKSk7XG4gKlxuICogLy8gcmVnaXN0ZXJlZCBmaWx0ZXJcbiAqIC5teS1jb29sLWVsZW1lbXQge1xuICogXHRcdFxcQGluY2x1ZGUgc3VnYXIuZmlsdGVyKG15Q29vbEZpbHRlcik7XG4gKiBcdFx0Ly8gZmlsdGVyIDogYm94LXNoYWRvdygjMDAwIDAgMCAxMHB4KSBibHVyKDMwcHgpO1xuICogfVxuICpcbiAqIC8vIGN1c3RvbSBmaWx0ZXJcbiAqIC5teS1jb29sLWVsZW1lbnQge1xuICogXHRcdFxcQGluY2x1ZGUgc3VnYXIuZmlsdGVyKG15Q29vbEZpbHRlciBpbnZlcnQoMTAwJSkpO1xuICogXHRcdC8vIGZpbHRlciA6IGJveC1zaGFkb3coIzAwMCAwIDAgMTBweCkgYmx1cigzMHB4KSBpbnZlcnQoMTAwJSk7XG4gKiB9XG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICBmb250LWZhY2VcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MuY29yZS5mb250XG4gKiBAdHlwZSAgICAgIG1peGluXG4gKlxuICogSGVscGVyIHRvIHByaW50IGEgZm9udC1mYWNlXG4gKlxuICogQHBhcmFtIFx0XHRcdHtTdHJpbmd9IFx0XHQkZm9udC1mYW1pbHkgXHRcdFx0VGhlIGZvbnQtZmFtaWx5XG4gKiBAcGFyYW0gXHRcdFx0e1N0cmluZ30gXHRcdCRzcmMgXHRcdFx0XHRcdFRoZSBzb3VyY2UgdXJsIChvbmx5IDEgZXh0ZW5zaW9uKVxuICogQHBhcmFtIFx0XHRcdHtMaXN0fSBcdFx0XHRbJGV4dGVuc2lvbnM9d29mZjJdIFx0VGhlIGV4dGVuc2lvbnMgbGlzdCB0aGF0IHlvdSBoYXZlIGF2YWlsYWJsZVxuICogQHBhcmFtIFx0XHRcdHtTdHJpbmd9IFx0XHRbJGZvbnQtd2VpZ2h0PW5vcm1hbF0gXHRUaGUgZm9udC13ZWlnaHQgcHJvcGVydHlcbiAqIEBwYXJhbSBcdFx0XHR7U3RyaW5nfSBcdFx0WyRmb250LXN0eWxlPW5vcm1hbF0gXHRUaGUgZm9udC1zdHlsZSBwcm9wZXJ0eVxuICogQHBhcmFtICAgICAgIHtTdHJpbmd9ICAgIFskZm9udC1kaXNwbGF5PWF1dG9dICAgIFRoZSBmb250LWRpc3BsYXkgcHJvcGVydHlcbiAqXG4gKiBAZXhhbXBsZSAgICAgc2Nzc1xuICogLy8gaWYgeW91IGhhdmUgdGhlc2UgZXh0ZW5zaW9ucyBmaWxlcyA6IC53b2ZmIC5lb3QgLndvZmYyXG4gKiBcXEBpbmNsdWRlIHN1Z2FyLmZvbnQtZmFjZShcbiAqIFx0XHQkbmFtZSA6IG15LWNvb2wtZm9udCxcbiAqIFx0XHQkc3JjIDogJy9mb250cy9teS1mb250LmVvdCcsXG4gKiBcdFx0JGV4dGVuc2lvbnMgOiBlb3Qgd29mZiB3b2ZmMlxuICogKVxuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgZm9udC1mYW1pbHlcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MuY29yZS5mb250XG4gKiBAdHlwZSAgICAgIGZ1bmN0aW9uXG4gKlxuICogUmV0dXJuIHRoZSBmb250LWZhbWlseSBzdHJpbmcgb3IgYSByZWdpc3RlcmVkIGZvbnRcbiAqXG4gKiBAcGFyYW0gXHRcdFx0e1N0cmluZ30gXHRcdCRuYW1lIFx0XHRUaGUgbmFtZSBvZiB0aGUgcmVnaXN0ZXJlZCBmb250XG4gKiBAcmV0dXJuIFx0XHRcdHtTdHJpbmd9IFx0XHRcdFx0XHRUaGUgY29ycmVzcG9uZGluZyBmb250LWZhbWlseSBwcm9wZXJ0eSB0byBzZXQgaW4geW91ciBjc3NcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gcmVnaXN0ZXIgYSBmb250XG4gKiBcXEBpbmNsdWRlIHN1Z2FyLnNldHVwKChcbiAqIFx0XHRmb250cyA6IChcbiAqIFx0XHRcdG15Q29vbEZvbnQgOiAoXG4gKiBcdFx0XHRcdGZvbnQtZmFtaWx5IDogJ0hlbHZldGljYSBOZXVlJyxcbiAqIFx0XHRcdFx0Zm9udC13ZWlnaHQgOiAnYm9sZCcsXG4gKiBcdFx0XHRcdC8vIGV0Yy4uLlxuICogXHRcdFx0KSxcbiAqIFx0XHRcdC8vIG90aGVyIGZvbnRzLi4uXG4gKiBcdFx0KVxuICogKSk7XG4gKlxuICogLy8gYXBwbHkgdGhlIGZvbnRcbiAqIC5teS1jb29sLWVsZW1lbnQge1xuICogXHRcdGZvbnQtZmFtaWx5IDogc3VnYXIuZm9udC1mYW1pbHkobXlDb29sRm9udCk7XG4gKiBcdFx0Ly8gJ0hlbHZldGljYSBOZXVlJztcbiAqIH1cbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgIGZvbnRcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MuY29yZS5mb250XG4gKiBAdHlwZSAgICBmdW5jdGlvblxuICpcbiAqIFJldHVybiB0aGUgZm9udCB7TWFwfSB0aGF0IGNvcnJlc3BvbmQgdG8gdGhlIHBhc3NlZCBhcmd1bWVudHNcbiAqXG4gKiBAcGFyYW0gXHRcdHtTdHJpbmd9IFx0XHRcdFskZmFtaWx5PW51bGxdIFx0XHRcdFRoZSBmb250IGZhbWlseSB3YW50ZWQgKGNhbiBiZSBhIHJlZ2lzdGVyZWQgZm9udCBuYW1lKVxuICogQHBhcmFtIFx0XHR7Q29sb3J9IFx0XHRcdFskY29sb3I9bnVsbF0gXHRcdFx0VGhlIGNvbG9yIHdhbnRlZCAoY2FuIGJlIGEgcmVnaXN0ZXJlZCBjb2xvciBuYW1lKVxuICogQHBhcmFtIFx0XHR7TnVtYmVyfSBcdFx0XHRbJHNpemU9bnVsbF0gXHRcdFx0VGhlIGZvbnQtc2l6ZSB3YW50ZWRcbiAqIEBwYXJhbSBcdFx0e1N0cmluZ30gXHRcdFx0WyRzdHlsZT1udWxsXSBcdFx0XHRUaGUgZm9udC1zdHlsZSB3YW50ZWRcbiAqIEBwYXJhbSBcdFx0e1N0cmluZ30gXHRcdFx0WyR2YXJpYW50PW51bGxdIFx0XHRUaGUgZm9udC12YXJpYW50IHdhbnRlZFxuICogQHBhcmFtIFx0XHR7U3RyaW5nfE51bWJlcn0gXHRbJHdlaWdodD1udWxsXSBcdFx0XHRUaGUgZm9udC13ZWlnaHQgd2FudGVkXG4gKiBAcGFyYW0gXHRcdHtTdHJpbmd9IFx0XHRcdFskZGVjb3JhdGlvbj1udWxsXSBcdFx0VGhlIHRleHQtZGVjb3JhdGlvbiB3YW50ZWRcbiAqIEBwYXJhbSBcdFx0e1N0cmluZ30gXHRcdFx0WyRhbGlnbj1udWxsXSBcdFx0XHRUaGUgdGV4dC1hbGlnbiB3YW50ZWRcbiAqIEBwYXJhbSBcdFx0e1N0cmluZ30gXHRcdFx0WyR0cmFuc2Zvcm09bnVsbF0gXHRcdFRoZSB0ZXh0LXRyYW5zZm9ybSB3YW50ZWRcbiAqIEBwYXJhbSBcdFx0e1N0cmluZ30gXHRcdFx0WyRzdHJldGNoPW51bGxdIFx0XHRUaGUgZm9udC1zdHJldGNoIHdhbnRlZFxuICogQHBhcmFtIFx0XHR7U3RyaW5nfSBcdFx0XHRbJHdoaXRlLXNwYWNlPW51bGxdIFx0VGhlIHdoaXRlLXNwYWNlIHdhbnRlZFxuICogQHBhcmFtIFx0XHR7TnVtYmVyfSBcdFx0XHRbJGhlaWdodD1udWxsXSBcdFx0XHRUaGUgbGluZS1oZWlnaHQgd2FudGVkXG4gKiBAcGFyYW0gXHRcdHtOdW1iZXJ9IFx0XHRcdFskc3BhY2luZz1udWxsXSBcdFx0VGhlIGxldHRlci1zcGFjaW5nIHdhbnRlZFxuICogQHBhcmFtIFx0XHR7TnVtYmVyfSBcdFx0XHRbJGluZGVudD1udWxsXSBcdFx0XHRUaGUgdGV4dC1pbmRlbnQgd2FudGVkXG4gKiBAcGFyYW0gXHRcdHtTdHJpbmd9IFx0XHRcdFskYnJlYWs9bnVsbF0gXHRcdFx0VGhlIGxpbmUtYnJlYWsgd2FudGVkXG4gKiBAcGFyYW0gXHRcdHtTdHJpbmd9IFx0XHRcdFskd3JhcD1udWxsXSBcdFx0XHRUaGUgd29yZC13cmFwIHdhbnRlZFxuICogQHJldHVybiBcdFx0e01hcH0gXHRcdFx0XHRcdFx0XHRcdFx0XHRUaGUgY29ycmVzcG9uZGluZyBmb250IG1hcFxuICpcbiAqIEBleGFtcGxlXG4gKiBzdWdhci5mb250KFxuICogXHRcdCRmYW1pbHkgOiAnSGVsdmV0aWNhIE5ldWUnLFxuICogXHRcdCRzaXplIDogMTJweCxcbiAqIFx0XHQkd3JhcCA6IG5vcndhcFxuICogKTtcbiAqIC8vIChcbiAqIFx0XHRmb250LWZhbWlseSA6ICdIZWx2ZXRpY2EgTmV1ZScsXG4gKiBcdFx0Zm9udC1zaXplIDogMTJweCxcbiAqIFx0XHR3b3JkLXdyYXAgOiBub3dyYXBcbiAqIC8vIClcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgZm9udFxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5jb3JlLmZvbnRcbiAqIEB0eXBlICAgICAgbWl4aW5cbiAqXG4gKiBQcmludCBhbGwgdGhlIGZvbnRzIHByb3BlcnRpZXMgdGhhdCBjb3JyZXNwb25kIHRvIHRoZSBwYXNzZWQgYXJndW1lbnRzXG4gKlxuICogQHBhcmFtIFx0XHR7U3RyaW5nfSBcdFx0XHRbJGZhbWlseT1udWxsXSBcdFx0XHRUaGUgZm9udCBmYW1pbHkgd2FudGVkIChjYW4gYmUgYSByZWdpc3RlcmVkIGZvbnQgbmFtZSlcbiAqIEBwYXJhbSBcdFx0e0NvbG9yfSBcdFx0XHRbJGNvbG9yPW51bGxdIFx0XHRcdFRoZSBjb2xvciB3YW50ZWQgKGNhbiBiZSBhIHJlZ2lzdGVyZWQgY29sb3IgbmFtZSlcbiAqIEBwYXJhbSBcdFx0e051bWJlcn0gXHRcdFx0WyRzaXplPW51bGxdIFx0XHRcdFRoZSBmb250LXNpemUgd2FudGVkXG4gKiBAcGFyYW0gXHRcdHtTdHJpbmd9IFx0XHRcdFskc3R5bGU9bnVsbF0gXHRcdFx0VGhlIGZvbnQtc3R5bGUgd2FudGVkXG4gKiBAcGFyYW0gXHRcdHtTdHJpbmd9IFx0XHRcdFskdmFyaWFudD1udWxsXSBcdFx0VGhlIGZvbnQtdmFyaWFudCB3YW50ZWRcbiAqIEBwYXJhbSBcdFx0e1N0cmluZ3xOdW1iZXJ9IFx0WyR3ZWlnaHQ9bnVsbF0gXHRcdFx0VGhlIGZvbnQtd2VpZ2h0IHdhbnRlZFxuICogQHBhcmFtIFx0XHR7U3RyaW5nfSBcdFx0XHRbJGRlY29yYXRpb249bnVsbF0gXHRcdFRoZSB0ZXh0LWRlY29yYXRpb24gd2FudGVkXG4gKiBAcGFyYW0gXHRcdHtTdHJpbmd9IFx0XHRcdFskYWxpZ249bnVsbF0gXHRcdFx0VGhlIHRleHQtYWxpZ24gd2FudGVkXG4gKiBAcGFyYW0gXHRcdHtTdHJpbmd9IFx0XHRcdFskdHJhbnNmb3JtPW51bGxdIFx0XHRUaGUgdGV4dC10cmFuc2Zvcm0gd2FudGVkXG4gKiBAcGFyYW0gXHRcdHtTdHJpbmd9IFx0XHRcdFskc3RyZXRjaD1udWxsXSBcdFx0VGhlIGZvbnQtc3RyZXRjaCB3YW50ZWRcbiAqIEBwYXJhbSBcdFx0e1N0cmluZ30gXHRcdFx0WyR3aGl0ZS1zcGFjZT1udWxsXSBcdFRoZSB3aGl0ZS1zcGFjZSB3YW50ZWRcbiAqIEBwYXJhbSBcdFx0e051bWJlcn0gXHRcdFx0WyRoZWlnaHQ9bnVsbF0gXHRcdFx0VGhlIGxpbmUtaGVpZ2h0IHdhbnRlZFxuICogQHBhcmFtIFx0XHR7TnVtYmVyfSBcdFx0XHRbJHNwYWNpbmc9bnVsbF0gXHRcdFRoZSBsZXR0ZXItc3BhY2luZyB3YW50ZWRcbiAqIEBwYXJhbSBcdFx0e051bWJlcn0gXHRcdFx0WyRpbmRlbnQ9bnVsbF0gXHRcdFx0VGhlIHRleHQtaW5kZW50IHdhbnRlZFxuICogQHBhcmFtIFx0XHR7U3RyaW5nfSBcdFx0XHRbJGJyZWFrPW51bGxdIFx0XHRcdFRoZSBsaW5lLWJyZWFrIHdhbnRlZFxuICogQHBhcmFtIFx0XHR7U3RyaW5nfSBcdFx0XHRbJHdyYXA9bnVsbF0gXHRcdFx0VGhlIHdvcmQtd3JhcCB3YW50ZWRcbiAqIEByZXR1cm4gXHRcdHtNYXB9IFx0XHRcdFx0XHRcdFx0XHRcdFx0VGhlIGNvcnJlc3BvbmRpbmcgZm9udCBtYXBcbiAqXG4gKiBAZXhhbXBsZSAgICAgc2Nzc1xuICogLm15LWNvb2wtZWxlbWVtdCB7XG4gKiBcdFx0XFxAaW5jbHVkZSBzdWdhci5mb250KFxuICogXHRcdFx0JGZhbWlseSA6ICdIZWx2ZXRpY2EgTmV1ZScsXG4gKiBcdFx0IFx0JHNpemUgOiAxMnB4LFxuICogXHRcdCAgJHdyYXAgOiBub3JtYWxcbiAqICAgICk7XG4gKiAgICAvLyBwcmludFxuICogXHRcdGZvbnQtZmFtaWx5IDogJ0hlbHZldGljYSBOZXVlJyxcbiAqIFx0XHRmb250LXNpemUgOiAxMnB4LFxuICogXHRcdHdvcmQtd3JhcCA6IG5vcm1hbFxuICogfVxuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgbG5mXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmNvcmUubG9vay1hbmQtZmVlbFxuICogQHR5cGUgICAgZnVuY3Rpb25cbiAqXG4gKiBBbGlhcyB0byB0aGUgWy4vX2xvb2stYW5kLWZlZWwuc2Nzc10gZnVuY3Rpb25cbiAqXG4gKiBSZXR1cm4gYSBzZXR0aW5ncy5sb29rLWFuZC1mZWVsIHN0YWNrIHZhbHVlXG4gKlxuICogQHBhcmFtIFx0XHR7U3RyaW5nfSBcdFx0JG5hbWVcdFx0XHRcdFx0VGhlIGxvb2sgYW5kIGZlZWwgdmFsdWUgbmFtZVxuICogQHJldHVybiBcdFx0e051bWJlcn0gXHRcdFx0XHRcdFx0XHRcdFRoZSBsb29rIGFuZCBmZWVsIHZhbHVlIGluIGVtXG4gKlxuICogQGV4YW1wbGVcbiAqIC5teS1jb29sLWVsZW1lbnQge1xuICogXHRcdHBhZGRpbmcgOiBzdWdhci5sbmYocGFkZGluZy1ob3Jpem9udGFsKSBzdWdhci5sbmYocGFkZGluZy12ZXJ0aWNhbCk7XG4gKiB9XG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIGxvb2stYW5kLWZlZWxcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MuY29yZS5sb29rLWFuZC1mZWVsXG4gKiBAdHlwZSAgICBmdW5jdGlvblxuICpcbiAqIFJldHVybiBhIHNldHRpbmdzLmxvb2stYW5kLWZlZWwgc3RhY2sgdmFsdWVcbiAqXG4gKiBAcGFyYW0gXHRcdHtTdHJpbmd9IFx0XHQkbmFtZVx0XHRcdFx0XHRUaGUgbG9vayBhbmQgZmVlbCB2YWx1ZSBuYW1lXG4gKiBAcmV0dXJuIFx0XHR7TnVtYmVyfSBcdFx0XHRcdFx0XHRcdFx0VGhlIGxvb2sgYW5kIGZlZWwgdmFsdWUgaW4gZW1cbiAqXG4gKiBAZXhhbXBsZVxuICogLm15LWNvb2wtZWxlbWVudCB7XG4gKiBcdFx0cGFkZGluZyA6IHN1Z2FyLmxvb2stYW5kLWZlZWwocGFkZGluZy1ob3Jpem9udGFsKSBzdWdhci5sb29rLWFuZC1mZWVsKHBhZGRpbmctdmVydGljYWwpO1xuICogfVxuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICBkYXNoLXRvLW1hcFxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5jb3JlLm1hcFxuICogQHR5cGUgICAgICAgIGZ1bmN0aW9uXG4gKlxuICogVHJhbnNmb3JtIGEgZGFzaCBub3RhdGlvbiB2YWx1ZSBpbnRvIGEgbWFwXG4gKiBEYXNoIG5vdGF0aW9uIHZhbHVlIGlzIDogLWtleTEgdmFsdWUxIC1rZXkyIHZhbHVlMlxuICpcbiAqIEBwYXJhbSBcdFx0XHR7TGlzdH0gXHRcdFx0JGRhc2ggXHRcdFx0VGhlIGRhc2ggbGlzdCBub3RhdGlvbiB0byB0cmFuc2Zvcm1cbiAqIEByZXR1cm4gXHRcdFx0e01hcH0gXHRcdFx0XHRcdFx0XHRUaGUgbWFwIGdlbmVyYXRlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAkZGFzaCA6IC1oZWxsbyB3b3JsZCAtY29jbyB1bml2ZXJzZVxuICogc3VnYXIuZGFzaC10by1tYXAoJGRhc2gpO1xuICogLy8gKFxuICogLy8gXHRoZWxsbyA6IHdvcmxkLFxuICogLy8gXHRjb2NvIDogdW5pdmVyc2VcbiAqIC8vIClcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgIGZpbHRlci1tYXBcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MuY29yZS5tYXBcbiAqIEB0eXBlICAgICAgZnVuY3Rpb25cbiAqXG4gKiBUYWtlIGEgZmlsdGVyIGFzIHBhcmFtZXRlciBhbmQgcGFyc2UgaXQgdG8gcmV0dXJuIHRoZSB7TWFwfSBjb3JyZXNwb25kaW5nXG4gKiBUaGUgJGZpbHRlciBwYXJhbWV0ZXIgY2FuIGJlIGVpdGhlciBhIHJlZ2lzdGVyZWQgZmlsdGVyIG5hbWUgb3IgYSBmaWx0ZXIgZm9ybWF0ZWQgbGlrZSBgZmlsdGVyTmFtZShmaWx0ZXJWYWx1ZSlgXG4gKlxuICogQHBhcmFtIFx0XHRcdHtMaXN0fTxTdHJpbmc+IFx0XHRcdCRmaWx0ZXIgXHRcdFx0VGhlIHJlZ2lzdGVyZWQgZmlsdGVyIG5hbWUgb3IgdGhlIGZpbHRlciBzdHJpbmcgdG8gdHJhbnNmb3JtIGludG8gbWFwXG4gKiBAcmV0dXJuIFx0XHRcdHtNYXB9IFx0XHRcdFx0XHRcdFx0XHRcdFx0VGhlIGNvcnJlc3BvbmRpbmcgZmlsdGVyIG1hcCBwcm9wZXJ0aWVzXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIHJlZ2lzdGVyIGEgZmlsdGVyXG4gKiBcXEBpbmNsdWRlIHN1Z2FyLnNldHVwKChcbiAqIFx0XHRmaWx0ZXJzIDogKFxuICogXHRcdFx0bXlDb29sRmlsdGVyIDogYm94LXNoYWRvdygjMDAwIDAgMCAxMHB4KSBibHVyKDMwcHgpLFxuICogXHRcdFx0Ly8gb3RoZXIgZmlsdGVycy4uLlxuICogXHRcdClcbiAqICkpO1xuICpcbiAqIC8vIHJlZ2lzdGVyZWQgZmlsdGVyXG4gKiBzdWdhci5maWx0ZXItbWFwKG15Q29vbEZpbHRlcik7XG4gKiAvLyB7XG4gKiAvLyBcdGJveC1zaGFkb3cgOiAjMDAwIDAgMCAxMHB4LFxuICogLy8gXHRibHVyIDogMzBweFxuICogLy8gfVxuICpcbiAqIC8vIGN1c3RvbSBmaWx0ZXJcbiAqIHN1Z2FyLmZpbHRlci1tYXAoYmx1cigxMHB4KSk7XG4gKiAvLyB7XG4gKiAvLyBcdGJsdXIgOiAxMHB4XG4gKiAvLyB9XG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIG1vZHVsYXItc2NhbGVcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MuY29yZS5tb2R1bGFyLXNjYWxlXG4gKiBAdHlwZSAgICBmdW5jdGlvblxuICpcbiAqIFJldHVybiB0aGUgbW9kdWxhciBzY2FsZSB2YWx1ZSBiYXNlZCBvbiB0aGUgc2V0dGluZ3MgYGBgbW9kdWxhci1zY2FsZS5iYXNlYGBgIGFuZCBgYGBtb2R1bGFyLXNjYWxlLnJhdGlvYGBgLlxuICpcbiAqIEBwYXJhbSBcdFx0XHR7TnVtYmVyfSBcdFx0JHNjYWxlIFx0XHRUaGUgd2FudGVkIHNjYWxlXG4gKiBAcGFyYW0gXHRcdFx0e051bWJlcn0gXHRcdFskYmFzZT1zZXR0aW5ncy5tb2R1bGFyLXNjYWxlLmJhc2VdIFx0VGhlIGJhc2Ugb2YgY2FsY3VsYXRpb25cbiAqIEByZXR1cm4gXHRcdFx0e051bWJlcn0gXHRcdFx0XHRcdFRoZSBjYWxjdWxhdGVkIHJlc3VsdGluZyB2YWx1ZVxuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgaW50ZXJwb2xhdGVcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MuY29yZS5zaXplXG4gKiBAdHlwZSAgICBmdW5jdGlvblxuICpcbiAqIFJldHVybiB0aGUgc3BlY2lmaWVkIG9yIGNhbGN1bGF0ZWQgdmFsdWUgb2YgdGhlIGdpdmVuIHN0YWNrIGFuZCBzaXplXG4gKiBkZXBlbmRpbmcgb24gdGhlIHNldHRpbmdzLnNpemVzIHJhdGlvcyBzdGFja1xuICpcbiAqIEBwYXJhbSBcdFx0e01hcH0gXHRcdFx0JHN0YWNrIFx0XHRcdFRoZSBzdGFjayBmcm9tIHdoaWNoIHRvIGludGVycG9sYXRlIHRoZSB2YWx1ZVxuICogQHBhcmFtIFx0XHR7U3RyaW5nfSBcdFx0JHNpemUgXHRcdFx0VGhlIHNpemUgd2FudGVkIChoYXMgdG8gZXhpc3QgaW4gdGhlIHNldHRpbmdzLnNpemVzIHN0YWNrKVxuICogQHJldHVybiBcdFx0e051bWJlcn0gXHRcdFx0XHRcdFx0VGhlICRzdGFjay4kc2l6ZSB2YWx1ZSBvciB0aGUgaW50ZXJwb2xhdGVkIG9uZSBkZXBlbmRpbmcgb24gdGhlIHNldHRpbmdzLnNpemVzIHJhdGlvc1xuICpcbiAqIEBleGFtcGxlICAgICBzY3NzXG4gKiAvLyBzZXR0aW5ncy5zaXplc1xuICogXFxAaW5jbHVkZSBzdWdhci5zZXR1cCgoXG4gKiBcdFx0c2l6ZXMgOiAoXG4gKiBcdFx0XHRzbWFsbCA6IDAuNSxcbiAqIFx0XHRcdGRlZmF1bHQgOiAxLCAvLyBkZWZhdWx0IGlzIEFMV0FZUyAxXG4gKiBcdFx0XHRiaWcgOiAxLjVcbiAqIFx0XHQpXG4gKiApKTtcbiAqXG4gKiAkbXlTdGFjayA6IChcbiAqIFx0XHRkZWZhdWx0IDogM3JlbSxcbiAqIFx0XHRiaWcgOiA2cmVtXG4gKiApXG4gKlxuICogc3VnYXIuaW50ZXJwb2xhdGUoJG15U3RhY2ssIGJpZykgLy8gNnJlbSBjYXVzZSBzcGVjaWZpZWQgaW4gdGhlICRteVN0YWNrIHZhbHVlXG4gKiBzdWdhci5pbnRlcnBvbGF0ZSgkbXlTdGFjaywgc21hbGwpIC8vIDEuNXJlbSA9PiBjYWxjdWxhdGVkIGxpa2UgOiAzcmVtICogMC41ID0gMS41cmVtXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIHNwYWNlXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmNvcmUuc3BhY2VcbiAqIEB0eXBlICAgIGZ1bmN0aW9uXG4gKlxuICogUmV0dXJuIGEgdmFsdWUgaW50ZXJwb2xhdGVkIGZyb20gdGhlIHNldHRpbmdzLnNwYWNlcyBzdGFja1xuICpcbiAqIEBwYXJhbSBcdFx0XHR7U3RyaW5nfSBcdFx0XHQkc2l6ZSBcdFx0XHRUaGUgc3BhY2Ugc2l6ZSB3YW50ZWQuIE11c3QgZXhpc3QgaW4gdGhlIHNldHRpbmdzLnNpemVzIHN0YWNrXG4gKiBAcmV0dXJuIFx0XHRcdHtOdW1iZXJ9IFx0XHRcdFx0XHRcdFx0VGhlIGFjdHVhbCBzcGFjZSB2YWx1ZVxuICpcbiAqIEBleGFtcGxlICAgICBzY3NzXG4gKiAubXktY29vbC1zZWN0aW9uIHtcbiAqIFx0XHRwYWRkaW5nIDogc3VnYXIuc3BhY2UoYmlnKTtcbiAqIH1cbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgcGFyc2UtcHJvcGVydGllc1xuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5jb3JlLnN0cmluZ1xuICogQHR5cGUgICAgZnVuY3Rpb25cbiAqXG4gKiBQYXJzZSBhIGdpdmVuIHN0cmluZy9saXN0IHByb3BlcnRpZXMgYW5kIHJldHVybiB0aGUgTWFwIGNvcnJlc3BvbmRpbmcgdG8gdGhlIE1hcCBkZXNjcmlwdGlvblxuICpcbiAqIEBwYXJhbSBcdFx0XHRcdHtMaXN0fSBcdFx0XHRcdCRwcm9wZXJ0aWVzIFx0XHRcdFRoZSBwcm9wZXJ0aWVzIHRvIHBhcnNlXG4gKiBAcGFyYW0gXHRcdFx0XHR7TWFwfSBcdFx0XHRcdCRkZXNjcmlwdG9yIFx0XHRcdFRoZSBkZXNjcmlwdG9yIG1hcCB0byB1c2UgdG8gcGFyc2UgdGhlIHByb3BlcnRpZXNcbiAqIEByZXR1cm4gXHRcdFx0XHR7TWFwfSBcdFx0XHRcdFx0XHRcdFx0XHRcdFRoZSBwcm9wZXJ0aWVzIGluIG1hcCBmb3JtYXRcbiAqXG4gKiBAZXhhbXBsZSAgICAgc2Nzc1xuICogc3VnYXIucGFyc2UtcHJvcGVydGllcygxMHB4IGhlbGxvIC1kZWxheSAyMHMsIChcbiAqICBcdG15TnVtYmVyIDogTnVtYmVyLFxuICogIFx0bXlPdGhlck51bWJlciA6IE51bWJlcixcbiAqICBcdG15U3RyaW5nIDogU3RyaW5nLFxuICogIFx0bXlDb29sVmFyIDogU3RyaW5nLFxuICogIFx0ZGVsYXkgOiBzZWNvbmRcbiAqICkpO1xuICogLy8gPT4gKFxuICogLy8gIFx0bXlOdW1iZXIgOiAxMHB4LFxuICogLy8gXHRteVN0cmluZyA6IGhlbGxvLFxuICogLy8gXHRkZWxheSA6IDIwc1xuICogLy8gKVxuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICByZXBsYWNlLXRva2Vuc1xuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5jb3JlLnN0cmluZ1xuICogQHR5cGUgICAgZnVuY3Rpb25cbiAqXG4gKiBTZWFyY2ggYW5kIHJlcGxhY2UgdG9rZW5zIGxpa2UgY29sb3JzICNwcmltYXJ5IGluIGEgcGFzc2VkIHN0cmluZywgbGlzdCBvciBtYXBcbiAqIFN1cHBvcnRlZCB0b2tlbnMgdHlwZXMgOlxuICogMS4gQ29sb3JzIDogY29sb3JOYW1lXG4gKlxuICogQGV4YW1wbGUgICAgIHNjc3NcbiAqIHN1Z2FyLnJlcGxhY2UtdG9rZW5zKDEycHggI3ByaW1hcnkgaGVsbG8gI3NlY29uZGFyeSk7IC8vID4gMTJweCAjZGRkIGhlbGxvICNmZmY7XG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIHNlbGVjdG9yXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmNvcmUuc3RyaW5nXG4gKiBAdHlwZSAgICBmdW5jdGlvblxuICpcbiAqIFByb2Nlc3Mgc2VsZWN0b3IgdG8gYXZvaWQgaGF2aW5nIC0tZGVmYXVsdCwgZXRjLi4uXG4gKlxuICogQHBhcmFtIFx0XHR7U3RyaW5nfSBcdFx0JHNlbGVjdG9yIFx0XHRUaGUgc2VsZWN0b3IgdG8gcHJvY2Vzc1xuICogQHJldHVybiBcdFx0e1N0cmluZ30gXHRcdFx0XHRcdFx0VGhlIHByb2Nlc3NlZCBzZWxlY3RvclxuICpcbiAqIEBleGFtcGxlIFx0c2Nzc1xuICogc3VnYXIuc2VsZWN0b3IoJy5pbnB1dC0tZGVmYXVsdCcpOyAvLyA9PiAuaW5wdXRcbiAqIHN1Z2FyLnNlbGVjdG9yKCcuaW5wdXQtZGVmYXVsdCcpOyAvLyA9PiAuaW5wdXRcbiAqIHN1Z2FyLnNlbGVjdG9yKCcuaW5wdXQuZGVmYXVsdCcpOyAvLyA9PiAuaW5wdXRcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgdHJhbnNpdGlvblxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5jb3JlLnRyYW5zaXRpb25cbiAqIEB0eXBlICAgIGZ1bmN0aW9uXG4gKlxuICogVGFrZSBhIHRyYW5zaXRpb24gYXMgcGFyYW1ldGVyIGFuZCBwYXJzZSBpdCB0byByZXR1cm4gdGhlIHtMaXN0fSBjb3JyZXNwb25kaW5nXG4gKiBUaGUgJHRyYW5zaXRpb25zIHBhcmFtZXRlciBjYW4gYmUgZWl0aGVyIGEgcmVnaXN0ZXJlZCB0cmFuc2l0aW9uIG5hbWUgb3IgYSBjdXN0b20gY3NzIHRyYW5zaXRpb24gbGlrZSA6IGFsbCAuMnMgZWFzZS1pbi1vdXQgMnNcbiAqIFRoZSAkdHJhbnNpdGlvbnMgYXJndW1lbnQgd2lsbCBiZSBwYXJzZWQgd2l0aCB0aGUgWy4vX3BhcnNlLXByb3BlcnRpZXMuc2Nzc10gZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIFx0XHRcdHtMaXN0fSBcdFx0XHRcdCR0cmFuc2l0aW9ucyBcdFx0XHRUaGUgcmVnaXN0ZXJlZCB0cmFuc2l0aW9uKHMpIG5hbWUocykgb3IgdGhlIHRyYW5zaXRpb24ocykgc3RyaW5ncyhzKSB0byB0cmFuc2Zvcm0gaW50byBsaXN0XG4gKiBAcmV0dXJuIFx0XHRcdHtMaXN0fSBcdFx0XHRcdFx0XHRcdFx0XHRcdFRoZSBjb3JyZXNwb25kaW5nIHRyYW5zaXRpb24gbGlzdCBwcm9wZXJ0aWVzXG4gKlxuICogQGV4YW1wbGUgICBzY3NzXG4gKiAvLyByZWdpc3RlciBhIHRyYW5zaXRpb25cbiAqIFxcQGluY2x1ZGUgc3VnYXIuc2V0dXAoKFxuICogXHRcdHRyYW5zaXRpb25zIDogKFxuICogXHRcdFx0ZmFzdCA6IGFsbCAuMnMgZWFzZS1pbi1vdXQgMHMsXG4gKiBcdFx0XHQvLyBvdGhlciB0cmFuc2l0aW9ucy4uLlxuICogXHRcdClcbiAqICkpO1xuICpcbiAqIC8vIHJlZ2lzdGVyZWQgdHJhbnNpdGlvblxuICogLm15LWNvb2wtZWxlbWVudCB7XG4gKiBcdFx0dHJhbnNpdGlvbiA6IHN1Z2FyLnRyYW5zaXRpb24oZmFzdCk7XG4gKiBcdFx0Ly8gdHJhbnNpdGlvbiA6IGFsbCAuMnMgZWFzZS1pbi1vdXQgMHM7XG4gKiB9XG4gKlxuICogLy8gY3VzdG9tIHRyYW5zaXRpb25cbiAqIC5teS1jb29sLWVsZW1lbnQge1xuICogIFx0dHJhbnNpdGlvbiA6IHN1Z2FyLnRyYW5zaXRpb24oZmFzdCAtZGVsYXkgLjVzLCBmYXN0IHdpZHRoIGVhc2UtaW4pO1xuICogIFx0Ly8gdHJhbnNpdGlvbiA6IGFsbCAuMnMgZWFzZS1pbi1vdXQgLjVzLCB3aWR0aCAuMnMgZWFzZS1pbiAwcztcbiAqIH1cbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgdHJhbnNpdGlvbi1tYXBcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MuY29yZS50cmFuc2l0aW9uXG4gKiBAdHlwZSAgICBmdW5jdGlvblxuICpcbiAqIFRha2UgYSB0cmFuc2l0aW9uIGFzIHBhcmFtZXRlciBhbmQgcGFyc2UgaXQgdG8gcmV0dXJuIHRoZSB7TWFwfSBjb3JyZXNwb25kaW5nXG4gKiBUaGUgJHRyYW5zaXRpb24gcGFyYW1ldGVyIGNhbiBiZSBlaXRoZXIgYSByZWdpc3RlcmVkIHRyYW5zaXRpb24gbmFtZSBvciBhIGN1c3RvbSBjc3MgdHJhbnNpdGlvbiBsaWtlIDogYWxsIC4ycyBlYXNlLWluLW91dCAyc1xuICogVGhlICR0cmFuc2l0aW9uIGFyZ3VtZW50IHdpbGwgYmUgcGFyc2VkIHdpdGggdGhlIFsuL19wYXJzZS1wcm9wZXJ0aWVzLnNjc3NdIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSBcdFx0XHR7TGlzdH0gXHRcdFx0XHQkdHJhbnNpdGlvbiBcdFx0XHRUaGUgcmVnaXN0ZXJlZCB0cmFuc2l0aW9uIG5hbWUgb3IgdGhlIHRyYW5zaXRpb24gc3RyaW5nIHRvIHRyYW5zZm9ybSBpbnRvIG1hcFxuICogQHJldHVybiBcdFx0XHR7TWFwfSBcdFx0XHRcdFx0XHRcdFx0XHRcdFRoZSBjb3JyZXNwb25kaW5nIHRyYW5zaXRpb24gbWFwIHByb3BlcnRpZXNcbiAqXG4gKiBAZXhhbXBsZSAgICAgc2Nzc1xuICogLy8gcmVnaXN0ZXIgYSB0cmFuc2l0aW9uXG4gKiBcXEBpbmNsdWRlIHN1Z2FyLnNldHVwKChcbiAqIFx0XHR0cmFuc2l0aW9ucyA6IChcbiAqIFx0XHRcdGZhc3QgOiBhbGwgLjJzIGVhc2UtaW4tb3V0LFxuICogXHRcdFx0Ly8gb3RoZXIgdHJhbnNpdGlvbnMuLi5cbiAqIFx0XHQpXG4gKiApKTtcbiAqXG4gKiAvLyByZWdpc3RlcmVkIHRyYW5zaXRpb25cbiAqIHN1Z2FyLnRyYW5zaXRpb24tbWFwKGZhc3QpO1xuICogLy8ge1xuICogLy8gXHRwcm9wZXJ0eSA6IGFsbCxcbiAqIC8vIFx0ZHVyYXRpb24gOiAuMnMsXG4gKiAvLyBcdGVhc2UgOiBlYXNlLWluLW91dFxuICogLy8gfVxuICpcbiAqIC8vIGN1c3RvbSB0cmFuc2l0aW9uXG4gKiBzdWdhci50cmFuc2l0aW9uLW1hcChmYXN0IC1kZWxheSAuNXMpO1xuICogLy8ge1xuICogLy8gXHRwcm9wZXJ0eSA6IGFsbCxcbiAqIC8vIFx0ZHVyYXRpb24gOiAuMnMsXG4gKiAvLyBcdGVhc2UgOiBlYXNlLWluLW91dCxcbiAqIC8vIFx0ZGVsYXkgOiAuNXNcbiAqIC8vIH1cbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgIHRyYW5zaXRpb25cbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MuY29yZS50cmFuc2l0aW9uXG4gKiBAdHlwZSAgICAgIG1peGluXG4gKlxuICogVGFrZSBhIHRyYW5zaXRpb24gYXMgcGFyYW1ldGVyIGFuZCBwcmludCB0aGUgY29ycmVzcG9uZGluZyB0cmFuc2l0aW9uIHByb3BlcnR5XG4gKiBUaGUgJHRyYW5zaXRpb25zIHBhcmFtZXRlciBjYW4gYmUgZWl0aGVyIGEgcmVnaXN0ZXJlZCB0cmFuc2l0aW9uIG5hbWUgb3IgYSBjdXN0b20gY3NzIHRyYW5zaXRpb24gbGlrZSA6IGFsbCAuMnMgZWFzZS1pbi1vdXQgMnNcbiAqIFRoZSAkdHJhbnNpdGlvbnMgYXJndW1lbnQgd2lsbCBiZSBwYXJzZWQgd2l0aCB0aGUgWy4vX3BhcnNlLXByb3BlcnRpZXMuc2Nzc10gZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIFx0XHRcdHtMaXN0fSBcdFx0XHRcdCR0cmFuc2l0aW9ucyBcdFx0XHRUaGUgcmVnaXN0ZXJlZCB0cmFuc2l0aW9uKHMpIG5hbWUocykgb3IgdGhlIHRyYW5zaXRpb24ocykgc3RyaW5ncyhzKSB0byB0cmFuc2Zvcm0gaW50byBsaXN0XG4gKiBAcmV0dXJuIFx0XHRcdHtMaXN0fSBcdFx0XHRcdFx0XHRcdFx0XHRcdFRoZSBjb3JyZXNwb25kaW5nIHRyYW5zaXRpb24gbGlzdCBwcm9wZXJ0aWVzXG4gKlxuICogQGV4YW1wbGUgICAgIHNjc3NcbiAqIC8vIHJlZ2lzdGVyIGEgdHJhbnNpdGlvblxuICogXFxAaW5jbHVkZSBzdWdhci5zZXR1cCgoXG4gKiBcdFx0dHJhbnNpdGlvbnMgOiAoXG4gKiBcdFx0XHRmYXN0IDogYWxsIC4ycyBlYXNlLWluLW91dCAwcyxcbiAqIFx0XHRcdC8vIG90aGVyIHRyYW5zaXRpb25zLi4uXG4gKiBcdFx0KVxuICogKSk7XG4gKlxuICogLy8gcmVnaXN0ZXJlZCB0cmFuc2l0aW9uXG4gKiAubXktY29vbC1lbGVtZW50IHtcbiAqIFx0XHRcXEBpbmNsdWRlIHN1Z2FyLnRyYW5zaXRpb24oZmFzdCk7XG4gKiBcdFx0Ly8gdHJhbnNpdGlvbiA6IGFsbCAuMnMgZWFzZS1pbi1vdXQgMHM7XG4gKiB9XG4gKlxuICogLy8gY3VzdG9tIHRyYW5zaXRpb25cbiAqIC5teS1jb29sLWVsZW1lbnQge1xuICogXHRcdFxcQGluY2x1ZGUgc3VnYXIudHJhbnNpdGlvbihmYXN0IC1kZWxheSAuNXMsIGZhc3Qgd2lkdGggZWFzZS1pbik7XG4gKiAgXHQvLyB0cmFuc2l0aW9uIDogYWxsIC4ycyBlYXNlLWluLW91dCAuNXMsIHdpZHRoIC4ycyBlYXNlLWluIDBzO1xuICogfVxuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICBzaG93LXZlcnRpY2FsLXJoeXRobVxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5jb3JlLnR5cG9ncmFwaHlcbiAqIEB0eXBlICAgICAgbWl4aW5cbiAqXG4gKiBEaXNwbGF5IHRoZSB2ZXJ0aWNhbCByaHl0aG1lXG4gKlxuICogQHBhcmFtIFx0XHRcdHtDb2xvcn0gICAgICBbJGNvbG9yPSMwZmZdIFx0XHRUaGUgY29sb3Igd2FudGVkXG4gKlxuICogQGV4YW1wbGUgICAgIHNjc3NcbiAqIGJvZHkge1xuICogXHRcdEBpbmNsdWRlIHN1Z2FyLnNob3ctdmVydGljYWwtcmh5dGhtKCk7XG4gKiB9XG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIHRleHQtZm9ybWF0LWNsYXNzXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmNvcmUudHlwb2dyYXBoeVxuICogQHR5cGUgICAgZnVuY3Rpb25cbiAqXG4gKiBSZXR1cm4gdGhlIHRleHQtZm9ybWF0IHNldHRpbmcgc2NvcGUgY2xhc3NcbiAqXG4gKiBAcmV0dXJuIFx0XHR7U3RyaW5nfSBcdFx0VGhlIHRleHQtZm9ybWF0IHNjb3BlIGNsYXNzIGZyb20gc2V0dGluZ3MudGV4dC1mb3JtYXQuc2NvcGUtY2xhc3NcbiAqXG4gKiBAZXhhbXBsZSAgICAgc2Nzc1xuICogc3VnYXIudGV4dC1mb3JtYXQtY2xhc3MoKTsgLy8gdGZcbiAqXG4gKiBAYXV0aG9yIFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIHZlcnRpY2FsLXJoeXRobS1jbGFzc1xuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5jb3JlLnR5cG9ncmFwaHlcbiAqIEB0eXBlICAgIGZ1bmN0aW9uXG4gKlxuICogUmV0dXJuIHRoZSB2ZXJ0aWNhbC1yaHl0aG0gc2V0dGluZyBzY29wZSBjbGFzc1xuICpcbiAqIEByZXR1cm4gXHRcdHtTdHJpbmd9IFx0XHRUaGUgdmVydGljYWwtcmh5dGhtIHNjb3BlIGNsYXNzIGZyb20gc2V0dGluZ3MudmVydGljYWwtcmh5dGhtLnNjb3BlLWNsYXNzXG4gKlxuICogQGV4YW1wbGUgICAgIHNjc3NcbiAqIHN1Z2FyLnZlcnRpY2FsLXJoeXRobS1jbGFzcygpOyAvLyB2clxuICpcbiAqIEBhdXRob3IgXHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgdmVydGljYWwtcmh5dGhtXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmNvcmUudHlwb2dyYXBoeVxuICogQHR5cGUgICAgICBtaXhpblxuICpcbiAqIFNjb3BlIHRoZSBjb250ZW50IGluc2lkZSB0aGUgYHNldHRpbmdzLnZlcnRpY2FsLXJoeXRobS5zY29wZS1jbGFzc2AgY2xhc3NcbiAqXG4gKiBAZXhhbXBsZSAgICAgICBzY3NzXG4gKiAubXktY29vbC1pdGVtIHtcbiAqIFx0QGluY2x1ZGUgc3VnYXIudmVydGljYWwtcmh5dGhtKCkge1xuICogXHRcdG1hcmdpbi1ib3R0b206IDJlbTsgLy8gd2lsbCBiZSBhcHBsaWVkIG9ubHkgaWYgLm15LWNvb2wtaXRlbSBpcyBpbiB0aGUgLnZyIHNjb3BlXG4gKiBcdH1cbiAqIH1cbiAqXG4gKiBAc2VlIFx0XHRcdGh0dHBzOi8vbWVkaXVtLmNvbS93cml0dGVuLWluLWNvZGUvYWxpZ25pbmctdHlwZS10by1iYXNlbGluZS10aGUtcmlnaHQtd2F5LXVzaW5nLXNhc3MtZTI1OGZjZTQ3YTliIy5sY2sybGdibmlcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICBjb2ZmZWVrcmFrZW4tbG9nb1xuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5jb2ZmZWVrcmFrZW5cbiAqIEB0eXBlICAgICAgbWl4aW5cbiAqXG4gKiBEaXNwbGF5IGEgY29mZmVla3Jha2VuIGxvZ28gd2l0aCB0d28gc3BlY2lmaWVkIGNvbG9yc1xuICpcbiAqIEBwYXJhbSBcdFx0e0NvbG9yfSBcdFx0WyRjb2xvcj1kZWZhdWx0XSBcdFRoZSBiYXNlIGNvbG9yIHRvIHVzZVxuICogQHBhcmFtIFx0XHR7Q29sb3J9IFx0XHRbJGFjY2VudD1wcmltYXJ5XSBcdFRoZSBhY2NlbnQgY29sb3IgdG8gdXNlXG4gKlxuICogQGV4YW1wbGUgXHRzY3NzXG4gKiAubXktY29vbC1jb2ZmZWVrcmFrZW4tbG9nbyB7XG4gKiBcdFxcQGluY2x1ZGUgc3VnYXIuY29mZmVla3Jha2VuLWxvZ28oKTtcbiAqIH1cbiAqXG4gKiBAYXV0aG9yIFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICBlZmZlY3QtYnViYmxlXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmVmZmVjdFxuICogQHR5cGUgICAgICBtaXhpblxuICpcbiAqIENyZWF0ZSBhbiBhcnJvdyBidWJibGUgZWZmZWN0XG4gKlxuICogQHBhcmFtIFx0XHR7U3RyaW5nfSBcdFx0XHRbJHNpZGU9Ym90dG9tXSBcdFx0XHRcdFRoZSBzaWRlICh0b3AscmlnaHQsYm90dG9tLGxlZnQpXG4gKiBAcGFyYW0gXHRcdHtTdHJpbmd9IFx0XHRcdFskYWxpZ249Y2VudGVyXSBcdFx0XHRUaGUgYWxpZ25lbWVudCAobGVmdCxjZW50ZXIscmlnaHQsdG9wLG1pZGRsZSxib3R0b20pXG4gKiBAcGFyYW0gXHRcdHtOdW1iZXJ9IFx0XHRcdFskc2l6ZT0xMHB4XSBcdFx0XHRcdFRoZSBzaXplIG9mIHRoZSBhcnJvd1xuICogQHBhcmFtIFx0XHR7Q29sb3J9IFx0XHRcdFskY29sb3I9cy1jb2xvcihwcmltYXJ5KV0gXHRUaGUgY29sb3Igb2YgdGhlIGJ1YmJsZVxuICogQHBhcmFtIFx0XHR7TnVtYmVyfSBcdFx0XHRbJGFycm93LW9mZnNldD0xMHB4XSBcdFx0VGhlIGFycm93IG9mZnNldCBmcm9tIHRoZSBzaWRlIG9mIHRoZSBidWJibGVcbiAqIEBwYXJhbSBcdFx0e051bWJlcn0gXHRcdFx0WyRib3JkZXItd2lkdGg9MF0gXHRcdFx0VGhlIGJvcmRlciB3aWR0aCBvZiB0aGUgYnViYmxlXG4gKiBAcGFyYW0gXHRcdHtDb2xvcn0gXHRcdFx0WyRib3JkZXItY29sb3I9bnVsbF0gXHRcdFRoZSBib3JkZXIgY29sb3Igb2YgdGhlIGJ1YmJsZVxuICpcbiAqIEBleGFtcGxlICAgICBzY3NzXG4gKiAubXktY29vbC1idWJibGUge1xuICogXHRcdFxcQGluY2x1ZGUgc3VnYXIuZWZmZWN0LWJ1YmJsZShcbiAqIFx0XHRcdCRjb2xvciA6IHN1Z2FyLmNvbG9yKHNlY29uZGFyeSlcbiAqIFx0XHQpO1xuICogXHRcdGNvbG9yIDogd2hpdGU7XG4gKiB9XG4gKlxuICogQHNlZSBcdFx0XHRodHRwczovL2NvZGVwZW4uaW8va2lya2FzL3Blbi9vdHF5SlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgICAgZWZmZWN0LWRlcHRoXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmVmZmVjdFxuICogQHR5cGUgICAgICBtaXhpblxuICpcbiAqIEdlbmVyYXRlIGEgZHJvcCBzaGFkb3cgZGVwZW5kaW5nIG9uIHRoZSBkZXB0aCBzcGVjaWZpZWRcbiAqXG4gKiBAcGFyYW0gXHRcdHtJbnRlZ2VyfSBcdFx0XHQkZGVwdGggXHRcdFx0XHRcdFx0XHRUaGUgZGVwdGggd2FudGVkICgxLDIsMyw0LGV0Yy4uLilcbiAqIEBwYXJhbSBcdFx0e0NvbG9yfSBcdFx0XHRbJGNvbG9yPXJnYmEoMCwwLDAsLjIpXSBcdFx0VGhlIGRyb3Agc2hhZG93IGNvbG9yXG4gKlxuICogQGV4YW1wbGUgICAgIHNjc3NcbiAqIC5teS1jb29sLWVsZW1lbnQge1xuICogXHRcdFxcQGluY2x1ZGUgc3VnYXIuZWZmZWN0LWRlcHRoKDIpO1xuICogfVxuICpcbiAqIEBhdXRob3IgXHQgXHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgZWZmZWN0LWhleVxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5lZmZlY3RcbiAqIEB0eXBlICAgICAgbWl4aW5cbiAqXG4gKiBDcmVhdGUgYSBwb3BpbmcgZG90IGVmZmVjdCB0byBjYXRjaCB1c2VyIGF0dGVudGlvbiBvbiBhIHBhcnRpY3VsYXIgaXRlbVxuICogVGhpcyBtaXhpbiBhZmZlY3QgdGhlIDpiZWZvcmUgYW5kIDphZnRlciBwc2V1ZG8gc2VsZWN0b3Igb2YgdGhlIGl0ZW1cbiAqXG4gKiBAcGFyYW0gXHRcdHtTdHJpbmd9IFx0XHRbJHZlcnRpY2FsLWFsaWduPXRvcF0gXHRcdFx0V2hlcmUgdG8gcHV0IHRoZSBkb3QgdmVydGljYWx5ICh0b3AsbWlkZGxlLGJvdHRvbSlcbiAqIEBwYXJhbSBcdFx0e1N0cmluZ30gXHRcdFskYWxpZ249bGVmdF0gXHRcdFx0XHRcdFdoZXJlIHRvIHB1dCB0aGUgZG90IGhvcml6b250YWx5IChsZWZ0LGNlbnRlcixyaWdodClcbiAqIEBwYXJhbSBcdFx0e051bWJlcn0gXHRcdFskc2l6ZT0yMHB4XSBcdFx0XHRcdFx0VGhlIHNpemUgb2YgdGhlIGRvdFxuICogQHBhcmFtIFx0XHR7Q29sb3J9IFx0XHRbJGNvbG9yPXByaW1hcnldIFx0XHRcdFx0VGhlIGNvbG9yIG9mIHRoZSBkb3RcbiAqIEBwYXJhbSBcdFx0e051bWJlcn0gXHRcdFskb2Zmc2V0LXRvcD0wXSBcdFx0XHRcdFRoZSBvZmZzZXQgdG9wXG4gKiBAcGFyYW0gXHRcdHtOdW1iZXJ9IFx0XHRbJG9mZnNldC1yaWdodD0wXSBcdFx0XHRcdFRoZSBvZmZzZXQgcmlnaHRcbiAqIEBwYXJhbSBcdFx0e051bWJlcn0gXHRcdFskb2Zmc2V0LWJvdHRvbT0wXSBcdFx0XHRcdFRoZSBvZmZzZXQgYm90dG9tXG4gKiBAcGFyYW0gXHRcdHtOdW1iZXJ9IFx0XHRbJG9mZnNldC1sZWZ0PTBdIFx0XHRcdFx0VGhlIG9mZnNldCBsZWZ0XG4gKlxuICogQGV4YW1wbGUgICAgICAgc2Nzc1xuICogLm15LWNvb2wtZWxlbWVudCB7XG4gKiBcdFx0XFxAaW5jbHVkZSBzdWdhci5lZmZlY3QtaGV5KFxuICogXHRcdFx0JGFsaWduIDogcmlnaHQsXG4gKiBcdFx0XHQkY29sb3IgOiBzZWNvbmRhcnksXG4gKiBcdFx0XHQkc2l6ZSA6IDEwcHgsXG4gKiBcdFx0XHQkb2Zmc2V0LXRvcCA6IC0xMHB4LFxuICogXHRcdFx0JG9mZnNldC1yaWdodCA6IC0xMHB4XG4gKiBcdFx0KTtcbiAqIH1cbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgIGVmZmVjdC1sb25nLXNoYWRvd1xuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5lZmZlY3RcbiAqIEB0eXBlICAgICAgbWl4aW5cbiAqXG4gKiBHZW5lcmF0ZSBhIGxvbmcgc2hhZG93IGVmZmVjdCBsaWtlIFt0aGlzXShodHRwczovL3d3dy5nb29nbGUuY2gvc2VhcmNoP3E9bG9uZytzaGFkb3cmZXNwdj0yJmJpdz0yNTYwJmJpaD0xMzE2JnNvdXJjZT1sbm1zJnRibT1pc2NoJnNhPVgmdmVkPTBhaFVLRXdqam5lNng0OUxQQWhWQkhSUUtIYXQ4QVc4UV9BVUlCaWdCKVxuICpcbiAqIEBwYXJhbSBcdFx0e0NvbG9yfSBcdFx0WyRjb2xvcj1yZ2JhKDAsMCwwLC4zKV0gXHRcdFx0VGhlIHNoYWRvdyBjb2xvclxuICogQHBhcmFtIFx0XHR7U3RyaW5nfSBcdFx0WyR0eXBlPXRleHRdIFx0XHRcdFx0XHRcdFRoZSBzaGFkb3cgdHlwZSAodGV4dCxib3gpXG4gKiBAcGFyYW0gXHRcdHtEZWdyZWV9IFx0XHRbJGFuZ2xlPTEzNWRlZ10gXHRcdFx0XHRcdFRoZSBzaGFkb3cgYW5nbGVcbiAqIEBwYXJhbSBcdFx0e0ludGVnZXJ9IFx0XHRbJGRlcHRoPTIwXSBcdFx0XHRcdFx0XHRUaGUgc2hhZG93IGRlcHRoXG4gKiBAcGFyYW0gXHRcdHtCb29sZWFufSBcdFx0WyRmYWRlPWZhbHNlXSBcdFx0XHRcdFx0XHRJZiB0cnVlLCB0aGUgc2hhZG93IHdpbGwgZmFkZSBpdHNlbGZcbiAqIEBwYXJhbSBcdFx0e051bWJlcn0gXHRcdFskYmx1cj0wXSBcdFx0XHRcdFx0XHRcdFRoZSBibHVyIGFtb3VudCBvZiB0aGUgc2hhZG93XG4gKiBAcGFyYW0gXHRcdHtOdW1iZXJ9IFx0XHRbJGJsdXItcmF0aW89MF0gXHRcdFx0XHRcdFRoZSByYXRpbyB0byBibHVyIGVhY2ggZGVwdGggbW9yZVxuICpcbiAqIEBleGFtcGxlICAgICAgIHNjc3NcbiAqIC5teS1jb29sLXRpdGxlIHtcbiAqIFx0XHRcXEBpbmNsdWRlIHN1Z2FyLmVmZmVjdC1sb25nLXNoYWRvdyhcbiAqIFx0XHRcdCRkZXB0aCA6IDEwXG4gKiBcdFx0KTtcbiAqIH1cbiAqIC5teS1jb29sLWJveCB7XG4gKiBcdFx0XFxAaW5jbHVkZSBzdWdhci5lZmZlY3QtbG9uZy1zaGFkb3coXG4gKiBcdFx0XHQkdHlwZSA6IGJveFxuICogXHRcdCk7XG4gKiB9XG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIGVmZmVjdC1zaWRlLWxpbmVkXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmVmZmVjdFxuICogQHR5cGUgICAgICBtaXhpblxuICpcbiAqIENyZWF0ZSBzaWRlIGxpbmVzIGFyb3VuZCBhbiBpdGVtXG4gKlxuICogQHBhcmFtIFx0XHRcdHtTdHJpbmd9IFx0XHRbJHN0eWxlPXNvbGlkXSBcdFx0XHRUaGUgbGluZSBzdHlsZSwgc2FtZSBwb3NzaWJsZSB2YWx1ZXMgYXMgdGhlIGJvcmRlci1zdHlsZSBwcm9wZXJ0eVxuICogQHBhcmFtIFx0XHRcdHtTdHJpbmd9IFx0XHRbJHNpZGU9Ym90aF0gXHRcdFx0VGhlIHNpZGUgd2hlcmUgdG8gcHV0IGxpbmVzIChsZWZ0LHJpZ2h0LGJvdGgpXG4gKiBAcGFyYW0gXHRcdFx0e051bWJlcn0gXHRcdFskaGVpZ2h0PTFweF0gXHRcdFx0VGhlIGxpbmVzIGhlaWdodFxuICogQHBhcmFtIFx0XHRcdHtOdW1iZXJ9IFx0XHRbJHdpZHRoPTUwJV0gXHRcdFx0VGhlIHdpZHRoIG9mIHRoZSBsaW5lc1xuICogQHBhcmFtIFx0XHRcdHtDb2xvcn0gXHRcdFskY29sb3I9dGV4dF1cdFx0XHRUaGUgY29sb3Igb2YgdGhlIGxpbmVzXG4gKiBAcGFyYW0gXHRcdFx0e051bWJlcn0gXHRcdFskcGFkZGluZz0wXSBcdFx0XHRUaGUgcGFkZGluZyBiZXR3ZWVuIHRoZSBsaW5lcyBhbmQgdGhlIGNvbnRlbnRcbiAqIEBwYXJhbSBcdFx0XHR7TnVtYmVyfSBcdFx0WyRvZmZzZXQtdG9wPW51bGxdIFx0XHRUaGUgbGluZSBvZmZzZXQgdG9wXG4gKlxuICogQGV4YW1wbGUgICAgIHNjc3NcbiAqIGgxIHtcbiAqIFx0XHRcXEBpbmNsdWRlIHN1Z2FyLmVmZmVjdC1zaWRlLWxpbmVkKFxuICogXHRcdFx0JHBhZGRpbmcgOiAyMHB4LFxuICogXHRcdFx0JHNpZGUgOiByaWdodCxcbiAqIFx0XHRcdCR3aWR0aCA6IDEwMCVcbiAqIFx0XHQpO1xuICogfVxuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICBpbnB1dC1wbGFjZWhvbGRlclxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5mb3JtXG4gKiBAdHlwZSAgICAgIG1peGluXG4gKlxuICogU2V0IHRoZSBwbGFjZWhvbGRlciBzdHlsZSBmb3IgaW5wdXRzLCBldGMuLi5cbiAqXG4gKiBAZXhhbXBsZSBcdHNjc3NcbiAqIGlucHV0LCB0ZXh0YXJlYSB7XG4gKiBcdFxcQGluY2x1ZGUgc3VnYXIuaW5wdXQtcGxhY2Vob2xkZXIoKSB7XG4gKiBcdFx0Y29sb3IgOiByZWQ7XG4gKiBcdH1cbiAqIH1cbiAqXG4gKiBAYXV0aG9yIFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIGJvcmRlci1yYWRpdXNcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MuaGVscGVyXG4gKiBAdHlwZSAgICAgIG1peGluXG4gKlxuICogQXBwbHkgc29tZSBib3JkZXIgcmFkaXVzXG4gKlxuICogQHBhcmFtIFx0XHR7TnVtYmVyfSBcdFx0WyRyYWRpdXM9bnVsbF0gXHRcdFx0VGhlIHJhZGl1cyB0byBhcHBseSBnbG9iYWxseVxuICogQHBhcmFtIFx0XHR7TnVtYmVyfSBcdFx0WyR0b3A9bnVsbF0gXHRcdFx0VGhlIHJhZGl1cyB0byBhcHBseSBvbiB0b3AgY29ybmVyc1xuICogQHBhcmFtIFx0XHR7TnVtYmVyfSBcdFx0WyRyaWdodD1udWxsXSBcdFx0XHRUaGUgcmFkaXVzIHRvIGFwcGx5IG9uIHJpZ2h0IGNvcm5lcnNcbiAqIEBwYXJhbSBcdFx0e051bWJlcn0gXHRcdFskYm90dG9tPW51bGxdIFx0XHRcdFRoZSByYWRpdXMgdG8gYXBwbHkgb24gYm90dG9tIGNvcm5lcnNcbiAqIEBwYXJhbSBcdFx0e051bWJlcn0gXHRcdFskbGVmdD1udWxsXSBcdFx0XHRUaGUgcmFkaXVzIHRvIGFwcGx5IG9uIGxlZnQgY29ybmVyc1xuICogQHBhcmFtIFx0XHR7TnVtYmVyfSBcdFx0WyR0b3AtbGVmdD1udWxsXSBcdFx0VGhlIHJhZGl1cyB0byBhcHBseSBvbiB0b3AtbGVmdCBjb3JuZXJzXG4gKiBAcGFyYW0gXHRcdHtOdW1iZXJ9IFx0XHRbJHRvcC1yaWdodD1udWxsXSBcdFx0VGhlIHJhZGl1cyB0byBhcHBseSBvbiB0b3AtcmlnaHQgY29ybmVyc1xuICogQHBhcmFtIFx0XHR7TnVtYmVyfSBcdFx0WyRib3R0b20tbGVmdD1udWxsXSBcdFRoZSByYWRpdXMgdG8gYXBwbHkgb24gYm90dG9tLWxlZnQgY29ybmVyc1xuICogQHBhcmFtIFx0XHR7TnVtYmVyfSBcdFx0WyRib3R0b20tcmlnaHQ9bnVsbF0gXHRUaGUgcmFkaXVzIHRvIGFwcGx5IG9uIGJvdHRvbS1yaWdodCBjb3JuZXJzXG4gKlxuICogQGV4YW1wbGUgXHRzY3NzXG4gKiAubXktY29vbC1pdGVtIHtcbiAqIFx0Ly8gYXBwbHkgb24gdG9wIGxlZnQgYW5kIHJpZ2h0IGNvcm5lcnNcbiAqIFx0XFxAaW5jbHVkZSBzdWdhci5ib3JkZXItcmFkaXVzKFxuICogXHRcdCR0b3AgOiAxMHB4O1xuICogXHQpO1xuICogXHQvLyBhcHBseSBvbiBlYWNoIGNvcm5lcnNcbiAqIFx0XFxAaW5jbHVkZSBzdWdhci5ib3JkZXItcmFkaXVzKDEwcHgpO1xuICogXHQvLyBldGMuLi5cbiAqIH1cbiAqXG4gKiBAYXV0aG9yIFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgY2VudGVyLWJsb2NrXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmhlbHBlclxuICogQHR5cGUgICAgICBtaXhpblxuICpcbiAqIENlbnRlciBhIGJsb2NrIGVsZW1lbnQgdXNpbmcgbWFyZ2lucyBldGMuLi5cbiAqXG4gKiBAZXhhbXBsZSBcdHNjc3NcbiAqIC5teS1jb29sLWJsb2NrLWVsZW1lbnQge1xuICogXHRcXEBpbmNsdWRlIHN1Z2FyLmNlbnRlci1ibG9jaygpO1xuICogfVxuICpcbiAqIEBhdXRob3IgXHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSBcdGNsZWFyZml4XG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmhlbHBlclxuICogQHR5cGUgICAgICBtaXhpblxuICpcbiAqIEFwcGx5IGEgY2xlYXJmaXggb24gdGhlIGVsZW1lbnQuXG4gKiBTdXBwb3J0ZWQgbWV0aG9kczpcbiAqIC0gbWljcm9cbiAqIC0gZmFjZWJvb2tcbiAqIC0gZmxvYXRcbiAqIC0gbWljcm9cbiAqXG4gKiBAcGFyYW0gXHRcdHtTdHJpbmd9IFx0XHRbJG1ldGhvZD1taWNyb10gXHRcdFRoZSBjbGVhcmZpeCBtZXRob2QgdG8gdXNlXG4gKlxuICogQGV4YW1wbGUgXHRzY3NzXG4gKiAubXktY29vbC1lbGVtZW50IHtcbiAqICBcXEBpbmNsdWRlIHN1Z2FyLmNsZWFyZml4KCk7XG4gKiB9XG4gKlxuICogQGF1dGhvciBcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICBjb3JuZXJcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MuaGVscGVyXG4gKiBAdHlwZSAgICAgIG1peGluXG4gKlxuICogQXBwbHkgc29tZSBib3JkZXIgcmFkaXVzXG4gKiBAcGFyYW0gXHRcdHtOdW1iZXJ9IFx0XHRbJHJhZGl1cz1udWxsXSBcdFx0XHRUaGUgcmFkaXVzIHRvIGFwcGx5IGdsb2JhbGx5XG4gKiBAcGFyYW0gXHRcdHtOdW1iZXJ9IFx0XHRbJHRvcD1udWxsXSBcdFx0XHRUaGUgcmFkaXVzIHRvIGFwcGx5IG9uIHRvcCBjb3JuZXJzXG4gKiBAcGFyYW0gXHRcdHtOdW1iZXJ9IFx0XHRbJHJpZ2h0PW51bGxdIFx0XHRcdFRoZSByYWRpdXMgdG8gYXBwbHkgb24gcmlnaHQgY29ybmVyc1xuICogQHBhcmFtIFx0XHR7TnVtYmVyfSBcdFx0WyRib3R0b209bnVsbF0gXHRcdFx0VGhlIHJhZGl1cyB0byBhcHBseSBvbiBib3R0b20gY29ybmVyc1xuICogQHBhcmFtIFx0XHR7TnVtYmVyfSBcdFx0WyRsZWZ0PW51bGxdIFx0XHRcdFRoZSByYWRpdXMgdG8gYXBwbHkgb24gbGVmdCBjb3JuZXJzXG4gKiBAcGFyYW0gXHRcdHtOdW1iZXJ9IFx0XHRbJHRvcC1sZWZ0PW51bGxdIFx0XHRUaGUgcmFkaXVzIHRvIGFwcGx5IG9uIHRvcC1sZWZ0IGNvcm5lcnNcbiAqIEBwYXJhbSBcdFx0e051bWJlcn0gXHRcdFskdG9wLXJpZ2h0PW51bGxdIFx0XHRUaGUgcmFkaXVzIHRvIGFwcGx5IG9uIHRvcC1yaWdodCBjb3JuZXJzXG4gKiBAcGFyYW0gXHRcdHtOdW1iZXJ9IFx0XHRbJGJvdHRvbS1sZWZ0PW51bGxdIFx0VGhlIHJhZGl1cyB0byBhcHBseSBvbiBib3R0b20tbGVmdCBjb3JuZXJzXG4gKiBAcGFyYW0gXHRcdHtOdW1iZXJ9IFx0XHRbJGJvdHRvbS1yaWdodD1udWxsXSBcdFRoZSByYWRpdXMgdG8gYXBwbHkgb24gYm90dG9tLXJpZ2h0IGNvcm5lcnNcbiAqXG4gKiBAZXhhbXBsZSBcdHNjc3NcbiAqIC5teS1jb29sLWl0ZW0ge1xuICogXHQvLyBhcHBseSBvbiB0b3AgbGVmdCBhbmQgcmlnaHQgY29ybmVyc1xuICogXHRcXEBpbmNsdWRlIHN1Z2FyLmNvcm5lcihcbiAqIFx0XHQkdG9wIDogMTBweDtcbiAqIFx0KTtcbiAqIFx0Ly8gYXBwbHkgb24gZWFjaCBjb3JuZXJzXG4gKiBcdFxcQGluY2x1ZGUgc3VnYXIuY29ybmVyKDEwcHgpO1xuICogXHQvLyBldGMuLi5cbiAqIH1cbiAqXG4gKiBAYXV0aG9yIFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIGZpdFxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5oZWxwZXJcbiAqIEB0eXBlICAgICAgbWl4aW5cbiAqXG4gKiBNYWtlIHRoZSBlbGVtZW50IGZpdCBoaXMgY29udGFpbmVyLlxuICpcbiAqIEBwYXJhbSBcdHtTdHJpbmd9IFx0XHRcdFskcG9zaXRpb249bnVsbF0gXHRcdFRoZSBwb3NpdGlvbiBob3cgdG8gZml0IHRoZSBlbGVtZW50LlxuICpcbiAqIEBleGFtcGxlIFx0c2Nzc1xuICogLm15LWNvb2wtZWxlbWVudCB7XG4gKiBcdFxcQGluY2x1ZGUgc3VnYXIuZml0KGFic29sdXRlKTtcbiAqIH1cbiAqXG4gKiBAYXV0aG9yIFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIGlzXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmhlbHBlclxuICogQHR5cGUgICAgICBmdW5jdGlvblxuICpcbiAqIENoZWNrIGlmIHRoZSBwYXNzZWQgdmFsdWUgaXMgb2YgYSBjZXJ0YWluIHR5cGVcbiAqXG4gKiBIZXJlJ3MgdGhlIGF2YWlsYWJsZSB0eXBlcyB0aGF0IHlvdSBjYW4gY2hlY2tcbiAqIC0gbWl4ZWQgPT4gbWVhbiBhbnl0aGluZ1xuICogLSBudWxsXG4gKiAtIHVybFxuICogLSBweFxuICogLSBwdFxuICogLSByZW1cbiAqIC0gZW1cbiAqIC0gcGVyY2VudCB8wqAlXG4gKiAtIHZ3XG4gKiAtIHZoXG4gKiAtIGV4XG4gKiAtIGNoXG4gKiAtIGNtXG4gKiAtIG1tXG4gKiAtIGluXG4gKiAtIHBjXG4gKiAtIHMgfMKgc2Vjb25kXG4gKiAtIGJvb2xlYW4gfMKgYm9vbFxuICogLSBmdW5jdGlvblxuICogLSBudW1iZXJcbiAqIC0gaW50IHzCoGludGVnZXJcbiAqIC0gc3RyaW5nXG4gKiAtIGNvbG9yXG4gKiAtIGxpc3RcbiAqIC0gbWFwXG4gKiAtIGRlZyB8wqBkZWdyZWVcbiAqIC0gbGlzdC17dHlwZX0gPT4gY2hlY2sgaWYgaXMgYSBsaXN0IG9mIHRoZSBzcGVjaWZpZWQgdHlwZVxuICogLSBtYXAte3R5cGV9ID0+IGNoZWNrIGlmIGlzIGEgbWFwIG9mIHRoZSBzcGVjaWZpZWQgdHlwZVxuICpcbiAqIEBwYXJhbSBcdFx0XHR7TWl4ZWR9IFx0XHRcdCR2YWx1ZSBcdFx0XHRUaGUgdmFsdWUgdG8gY2hlY2tcbiAqIEBwYXJhbSBcdFx0XHR7U3RyaW5nfSBcdFx0XHQkdHlwZSBcdFx0XHRUaGUgdHlwZSB0byBjaGVja1xuICogQHJldHVybiBcdFx0XHR7Qm9vbGVhbn0gXHRcdFx0XHRcdFx0XHR0cnVlIGlmIG1hdGNoIHRoZSB0eXBlLCBmYWxzZSBpZiBub3RcbiAqXG4gKiBAZXhhbXBsZSAgICAgICBzY3NzXG4gKiBzdWdhci5pcyhoZWxsbywgc3RyaW5nKSAvLyA9PiB0cnVlXG4gKiBzdWdhci5pcygnaGVsbG8nLCBzdHJpbmcpIC8vID0+IHRydWVcbiAqIHN1Z2FyLmlzKCNmZmYsIGNvbG9yKSAvLyA9PiB0cnVlXG4gKiBzdWdhci5pcyhoZWxsbyAjZmZmLCBsaXN0LWNvbG9yKSAvLyA9PiBmYWxzZVxuICogc3VnYXIuaXMoI2ZmZiAjZGRkLCBsaXN0LWNvbG9yKSAvLyA9PiB0cnVlXG4gKiAvLyBldGMuLi5cbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgcG9zaXRpb25cbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MuaGVscGVyXG4gKiBAdHlwZSAgICAgIG1peGluXG4gKlxuICogU2V0IGEgY29tcGxleGUgcG9zaXRpb24gc3R5bGluZyBsaWtlIHBvc2l0aW9uOmFic29sdXRlOyB0b3A6MDsgbGVmdDoxMDAlOyBldGMuLi5cbiAqIFRoaXMgbWl4aW4gZ2l2ZXMgeW91IHNvbWUgc2hvcnRjdXRzIHRvIGFsaWduIHlvdXIgZWxlbWVudCB0b3AsIGJvdHRvbSwgbWlkZGxlLCBjZW50ZXIsIGV0Yy4uLlxuICpcbiAqIEBwYXJhbSBcdFx0e1N0cmluZ30gXHRcdFx0WyRwb3NpdGlvbj1hYnNvbHV0ZV0gXHRcdFx0VGhlIHBvc2l0aW9uIGNzcyBwcm9wZXJ0eVxuICogQHBhcmFtIFx0XHR7U3RyaW5nfSBcdFx0XHRbJHZlcnRpY2FsLWFsaWduPXRvcF0gXHRcdFx0VGhlIHZlcnRpY2FsIGFsaWduZW1lbnQgd2FudGVkICh0b3AsbWlkZGxlLGJvdHRvbSlcbiAqIEBwYXJhbSBcdFx0e1N0cmluZ30gXHRcdFx0WyRhbGlnbj1sZWZ0XSBcdFx0XHRcdFx0VGhlIGhvcml6b250YWwgYWxpZ25lbWVudCB3YW50ZWQgKGxlZnQsY2VudGVyLHJpZ2h0KVxuICogQHBhcmFtIFx0XHR7TnVtYmVyfSBcdFx0XHRbJHRvcD1udWxsXSBcdFx0XHRcdFx0VGhlIHRvcCBwcm9wZXJ0eSB3YW50ZWRcbiAqIEBwYXJhbSBcdFx0e051bWJlcn0gXHRcdFx0WyRyaWdodD1udWxsXSBcdFx0XHRcdFx0VGhlIHJpZ2h0IHByb3BlcnR5IHdhbnRlZFxuICogQHBhcmFtIFx0XHR7TnVtYmVyfSBcdFx0XHRbJGJvdHRvbT1udWxsXSBcdFx0XHRcdFx0VGhlIGJvdHRvbSBwcm9wZXJ0eSB3YW50ZWRcbiAqIEBwYXJhbSBcdFx0e051bWJlcn0gXHRcdFx0WyRsZWZ0PW51bGxdIFx0XHRcdFx0XHRUaGUgbGVmdCBwcm9wZXJ0eSB3YW50ZWRcbiAqIEByZXR1cm4gXHRcdHtNYXB9IFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFRoZSBtYXAgcmVwcmVzZW50YXRpb24gb2YgdGhlIHBvc2l0aW9uIHdhbnRlZFxuICpcbiAqIEBleGFtcGxlICAgICAgIHNjc3NcbiAqIC5teS1jb29sLWVsZW1lbnQge1xuICogXHQvLyBhYnNvbHV0ZSB0b3AgcmlnaHRcbiAqIFx0XFxAaW5jbHVkZSBzdWdhci5wb3NpdGlvbihhYnNvbHV0ZSwgdG9wLCByaWdodCk7XG4gKiBcdC8vIGN1c3RvbSByaWdodCBhbmQgYm90dG9tIHZhbHVlc1xuICogXHRcXEBpbmNsdWRlIHN1Z2FyLnBvc2l0aW9uKGFic29sdXRlLFxuICogXHRcdCRib3R0b20gOiAyMHB4LFxuICogXHRcdCRyaWdodCA6IDIwcHhcbiAqIFx0KTtcbiAqIFx0Ly8gZXRjLi4uXG4gKiB9XG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIHJlc2V0XG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmhlbHBlclxuICogQHR5cGUgICAgICBtaXhpblxuICpcbiAqIFByaW50IG91dCBhIHJlc2V0IGNzc1xuICpcbiAqIEBleGFtcGxlICAgICBzY3NzXG4gKiBAaW5jbHVkZSBzdWdhci5yZXNldCgpO1xuICpcbiAqIEBhdXRob3IgXHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgIHNpemVcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MuaGVscGVyXG4gKiBAdHlwZSAgICAgIG1peGluXG4gKlxuICogUXVpY2t5IGFuZCBlYXNpbHkgc2V0IHNpbXBsZSBvciBjb21wbGV4ZSBzaXplIHRvIGFueSBlbGVtZW50XG4gKlxuICogQHBhcmFtIFx0XHR7U3RyaW5nfE51bWJlcn0gXHRcdCRzaXplLXdpZHRoXHRcdFx0XHRUaGUgc2l6ZSBsaWtlIFwiY292ZXJcIiBvciBcImNvbnRhaW5cIiwgb3IgdGhlIHdpZHRoIGluIG51bWJlclxuICogQHBhcmFtIFx0XHR7TnVtYmVyfSBcdFx0XHRcdFskaGVpZ2h0PW51bGxdIFx0XHRcdFRoZSBoZWlnaHQgd2FudGVkXG4gKiBAcGFyYW0gXHRcdHtTdHJpbmd9IFx0XHRcdFx0WyRwb3NpdGlvbj1hYnNvbHV0ZV0gXHRUaGUgcG9zaXRpb24gd2FudGVkIGlmIHRoZSBzaXplIGlzIFwiY292ZXJcIiBvciBcImNvbnRhaW5cIlxuICpcbiAqIEBleGFtcGxlIFx0c2Nzc1xuICogLm15LWNvb2wtaW1hZ2Uge1xuICogXHRcXEBpbmNsdWRlIHN1Z2FyLnNpemUoY292ZXIpO1xuICogfVxuICpcbiAqIEBhdXRob3IgXHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgIHRyYW5zbGF0ZVxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5oZWxwZXJcbiAqIEB0eXBlICAgICAgbWl4aW5cbiAqXG4gKiBRdWlja3kgc2V0IHNvbWUgdHJhbnNsYXRlc1xuICogQHBhcmFtIFx0XHR7TnVtYmVyfSBcdFx0WyR4PTBdIFx0XHRUaGUgeCB0cmFuc2xhdGUgdmFsdWVcbiAqIEBwYXJhbSBcdFx0e051bWJlcn0gXHRcdFskeT0wXSBcdFx0VGhlIHkgdHJhbnNsYXRlIHZhbHVlXG4gKiBAcGFyYW0gXHRcdHtOdW1iZXJ9IFx0XHRbJHo9MF0gXHRcdFRoZSB6IHRyYW5zbGF0ZSB2YWx1ZVxuICpcbiAqIEBleGFtcGxlICAgICBzY3NzXG4gKiAubXktY29vbC1lbGVtZW50IHtcbiAqIFx0XFxAaW5jbHVkZSBzdWdhci50cmFuc2xhdGUoNTAlLCAyMHB4KTtcbiAqIH1cbiAqXG4gKiBAYXV0aG9yIFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICB0eXBlLW9mXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmhlbHBlclxuICogQHR5cGUgICAgICBmdW5jdGlvblxuICpcbiAqIEdldCB0aGUgdHlwZSBvZiB0aGUgcGFzc2VkIHZhcmlhYmxlXG4gKlxuICogQHBhcmFtICAgICAgICAgICB7TWl4ZWR9ICAgICAgICAgJHZhcmlhYmxlICAgICAgIFRoZSB2YXJpYWJsZSB0byBnZXQgdGhlIHR5cGUgb2ZcbiAqIEByZXR1cm4gICAgICAgICAge1N0cmluZ30gICAgICAgICAgICAgICAgICAgICAgICBUaGUgdHlwZSBvZiB0aGUgdmFyaWFibGUgcGFzc2VkXG4gKlxuICogQGV4YW1wbGUgICAgIHNjc3NcbiAqIHN1Z2FyLnR5cGUtb2YoJ2hlbGxvIHdvcmxkJyk7IC8vID0+IHN0cmluZ1xuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgdmVydGljYWwtYWxpZ25lclxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5oZWxwZXJcbiAqIEB0eXBlICAgICAgbWl4aW5cbiAqXG4gKiBWZXJ0aWNhbGx5IGFsaWduIGNvbnRlbnQgYnkgdXNpbmcgdGhlIGlubGluZS1ibG9jayBtaWRkbGUgdHJpY2tcbiAqXG4gKiBAZXhhbXBsZSBcdHNjc3NcbiAqIC5teS1jb29sLWNvbnRhaW5lciB7XG4gKiBcdFxcQGluY2x1ZGUgc3VnYXIudmVydGljYWwtYWxpZ25lcigpO1xuICogfVxuICpcbiAqIEBhdXRob3IgXHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgdmlzdWFsbHktaGlkZGVuXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmhlbHBlclxuICogQHR5cGUgICAgICBtaXhpblxuICpcbiAqIEhpZGUgYW4gZWxlbWVudCBvbmx5IHZpc3VhbGx5LiBUaGlzIGVuc3VyZSB0aGF0IHRoZSBlbGVtZW50IGlzIHN0aWxsIGNvcnJlY3RseSBkaXNwbGF5ZWQgaW4gdGhlIHBhZ2UgZm9yIFNFT1xuICogYnV0IHdpbGwgbm90IGJlaW5nIHZpc2libGUgdG8gdGhlIHVzZXJcbiAqXG4gKiBAZXhhbXBsZSBcdHNjc3NcbiAqIC5teS1jb29sLWVsZW1lbnQge1xuICogXHRcXEBpbmNsdWRlIHN1Z2FyLnZpc3VhbGx5LWhpZGRlbigpO1xuICogfVxuICpcbiAqIEBhdXRob3IgXHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKiFcbiAqIEZvbnQgQXdlc29tZSBGcmVlIDUuMTEuMiBieSBAZm9udGF3ZXNvbWUgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbVxuICogTGljZW5zZSAtIGh0dHBzOi8vZm9udGF3ZXNvbWUuY29tL2xpY2Vuc2UvZnJlZSAoSWNvbnM6IENDIEJZIDQuMCwgRm9udHM6IFNJTCBPRkwgMS4xLCBDb2RlOiBNSVQgTGljZW5zZSlcbiAqL1xuLmZhLFxuLmZhcyxcbi5mYXIsXG4uZmFsLFxuLmZhZCxcbi5mYWIge1xuICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtdmFyaWFudDogbm9ybWFsO1xuICB0ZXh0LXJlbmRlcmluZzogYXV0bztcbiAgbGluZS1oZWlnaHQ6IDE7XG59XG5cbi8qIVxuICogRm9udCBBd2Vzb21lIEZyZWUgNS4xMS4yIGJ5IEBmb250YXdlc29tZSAtIGh0dHBzOi8vZm9udGF3ZXNvbWUuY29tXG4gKiBMaWNlbnNlIC0gaHR0cHM6Ly9mb250YXdlc29tZS5jb20vbGljZW5zZS9mcmVlIChJY29uczogQ0MgQlkgNC4wLCBGb250czogU0lMIE9GTCAxLjEsIENvZGU6IE1JVCBMaWNlbnNlKVxuICovXG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IFwiRm9udCBBd2Vzb21lIDUgQnJhbmRzXCI7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgZm9udC1kaXNwbGF5OiBhdXRvO1xuICBzcmM6IHVybChcImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2ZvbnQtYXdlc29tZS81LjExLjIvd2ViZm9udHMvZmEtYnJhbmRzLTQwMC5lb3RcIik7XG4gIHNyYzogdXJsKFwiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZm9udC1hd2Vzb21lLzUuMTEuMi93ZWJmb250cy9mYS1icmFuZHMtNDAwLmVvdD8jaWVmaXhcIikgZm9ybWF0KFwiZW1iZWRkZWQtb3BlbnR5cGVcIiksIHVybChcImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2ZvbnQtYXdlc29tZS81LjExLjIvd2ViZm9udHMvZmEtYnJhbmRzLTQwMC53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSwgdXJsKFwiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZm9udC1hd2Vzb21lLzUuMTEuMi93ZWJmb250cy9mYS1icmFuZHMtNDAwLndvZmZcIikgZm9ybWF0KFwid29mZlwiKSwgdXJsKFwiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZm9udC1hd2Vzb21lLzUuMTEuMi93ZWJmb250cy9mYS1icmFuZHMtNDAwLnR0ZlwiKSBmb3JtYXQoXCJ0cnVldHlwZVwiKSwgdXJsKFwiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZm9udC1hd2Vzb21lLzUuMTEuMi93ZWJmb250cy9mYS1icmFuZHMtNDAwLnN2ZyNmb250YXdlc29tZVwiKSBmb3JtYXQoXCJzdmdcIik7XG59XG4uZmFiIHtcbiAgZm9udC1mYW1pbHk6IFwiRm9udCBBd2Vzb21lIDUgQnJhbmRzXCI7XG59XG5cbi8qIVxuICogRm9udCBBd2Vzb21lIEZyZWUgNS4xMS4yIGJ5IEBmb250YXdlc29tZSAtIGh0dHBzOi8vZm9udGF3ZXNvbWUuY29tXG4gKiBMaWNlbnNlIC0gaHR0cHM6Ly9mb250YXdlc29tZS5jb20vbGljZW5zZS9mcmVlIChJY29uczogQ0MgQlkgNC4wLCBGb250czogU0lMIE9GTCAxLjEsIENvZGU6IE1JVCBMaWNlbnNlKVxuICovXG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6IFwiRm9udCBBd2Vzb21lIDUgRnJlZVwiO1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIGZvbnQtZGlzcGxheTogYXV0bztcbiAgc3JjOiB1cmwoXCJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9mb250LWF3ZXNvbWUvNS4xMS4yL3dlYmZvbnRzL2ZhLXJlZ3VsYXItNDAwLmVvdFwiKTtcbiAgc3JjOiB1cmwoXCJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9mb250LWF3ZXNvbWUvNS4xMS4yL3dlYmZvbnRzL2ZhLXJlZ3VsYXItNDAwLmVvdD8jaWVmaXhcIikgZm9ybWF0KFwiZW1iZWRkZWQtb3BlbnR5cGVcIiksIHVybChcImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2ZvbnQtYXdlc29tZS81LjExLjIvd2ViZm9udHMvZmEtcmVndWxhci00MDAud29mZjJcIikgZm9ybWF0KFwid29mZjJcIiksIHVybChcImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2ZvbnQtYXdlc29tZS81LjExLjIvd2ViZm9udHMvZmEtcmVndWxhci00MDAud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpLCB1cmwoXCJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9mb250LWF3ZXNvbWUvNS4xMS4yL3dlYmZvbnRzL2ZhLXJlZ3VsYXItNDAwLnR0ZlwiKSBmb3JtYXQoXCJ0cnVldHlwZVwiKSwgdXJsKFwiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZm9udC1hd2Vzb21lLzUuMTEuMi93ZWJmb250cy9mYS1yZWd1bGFyLTQwMC5zdmcjZm9udGF3ZXNvbWVcIikgZm9ybWF0KFwic3ZnXCIpO1xufVxuLmZhciB7XG4gIGZvbnQtZmFtaWx5OiBcIkZvbnQgQXdlc29tZSA1IEZyZWVcIjtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbn1cblxuLyohXG4gKiBGb250IEF3ZXNvbWUgRnJlZSA1LjExLjIgYnkgQGZvbnRhd2Vzb21lIC0gaHR0cHM6Ly9mb250YXdlc29tZS5jb21cbiAqIExpY2Vuc2UgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbS9saWNlbnNlL2ZyZWUgKEljb25zOiBDQyBCWSA0LjAsIEZvbnRzOiBTSUwgT0ZMIDEuMSwgQ29kZTogTUlUIExpY2Vuc2UpXG4gKi9cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogXCJGb250IEF3ZXNvbWUgNSBGcmVlXCI7XG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgZm9udC13ZWlnaHQ6IDkwMDtcbiAgZm9udC1kaXNwbGF5OiBhdXRvO1xuICBzcmM6IHVybChcImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2ZvbnQtYXdlc29tZS81LjExLjIvd2ViZm9udHMvZmEtc29saWQtOTAwLmVvdFwiKTtcbiAgc3JjOiB1cmwoXCJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9mb250LWF3ZXNvbWUvNS4xMS4yL3dlYmZvbnRzL2ZhLXNvbGlkLTkwMC5lb3Q/I2llZml4XCIpIGZvcm1hdChcImVtYmVkZGVkLW9wZW50eXBlXCIpLCB1cmwoXCJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9mb250LWF3ZXNvbWUvNS4xMS4yL3dlYmZvbnRzL2ZhLXNvbGlkLTkwMC53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSwgdXJsKFwiaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvZm9udC1hd2Vzb21lLzUuMTEuMi93ZWJmb250cy9mYS1zb2xpZC05MDAud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpLCB1cmwoXCJodHRwczovL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9mb250LWF3ZXNvbWUvNS4xMS4yL3dlYmZvbnRzL2ZhLXNvbGlkLTkwMC50dGZcIikgZm9ybWF0KFwidHJ1ZXR5cGVcIiksIHVybChcImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2ZvbnQtYXdlc29tZS81LjExLjIvd2ViZm9udHMvZmEtc29saWQtOTAwLnN2ZyNmb250YXdlc29tZVwiKSBmb3JtYXQoXCJzdmdcIik7XG59XG4uZmEsXG4uZmFzIHtcbiAgZm9udC1mYW1pbHk6IFwiRm9udCBBd2Vzb21lIDUgRnJlZVwiO1xuICBmb250LXdlaWdodDogOTAwO1xufVxuXG4vKipcbiAqIEBuYW1lICAgICAgICBzZXR0aW5nc1xuICogQHR5cGUgICAgICAgIHtNYXB9XG4gKlxuICogU3RvcmUgYWxsIHRoZSBzZXR0aW5nc1xuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gICAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgICAgY3VycmVudC1jb250ZXh0XG4gKiBAdHlwZSAgICAgICAge1N0cmluZ31cbiAqIEBwcml2YXRlXG4gKlxuICogU3RvcmUgdGhlIGN1cnJlbnQgY29udGV4dFxuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gICAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgICAgICBmb250LXNpemVcbiAqIEB0eXBlICAgICAgICAgIHtOdW1iZXJ9XG4gKiBAcHJpdmF0ZVxuICpcbiAqIFN0b3JlIHRoZSBjdXJyZW50IHJlZ2lzdGVyZWQgZm9udCBzaXplXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAgIChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgICAgICAgJHN2Zy1pY29uc1xuICogQHR5cGUgICAgICAgICAgICB7TWFwfVxuICogQHByaXZhdGVcbiAqXG4gKiBTdG9yZSBhbGwgdGhlIHJlZ2lzdGVyZWQgc3ZnIGljb25zXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAgIChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgICAgIGNsYXNzZXNcbiAqIEB0eXBlICAgICAgICAgIHtNYXB9XG4gKiBAcHJpdmF0ZVxuICpcbiAqIFN0b3JlIGFsbCB0aGUgY2xhc3NlcyBpbiB0aGVpciBuYW1lc3BhY2VzXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAgIChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgaWNvblxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5pY29uXG4gKiBAdHlwZSAgICAgIG1peGluXG4gKlxuICogQXBwbHkgYW4gaWNvbiBvbiB0aGUgZWxlbWVudC4gVGhpcyBtaXhpbiBzdXBwb3J0IGZvbnQtYXdlc29tZSBhbmQgY3VzdG9tIGljb25zIHN5c3RlbXMgdGhhdCBoYXZlIGFuIGljb24gbmFtZSBmb3JtYXRlZCBsaWtlIFwiaWNvbi17bmFtZX1cIlxuICogVGhlIGN1c3RvbSBpY29uIHN0eWxlIGlmIHlvdSBwYXNzIGFzIG5hbWUgXCJ1c2VyXCIgd2lsbCBleHRlbmQgJWljb24sICVpY29uLXVzZXIsIC5pY29uIGFuZCAuaWNvbi11c2VyIGNsYXNzZXNcbiAqXG4gKiBAcGFyYW0gXHRcdHtTdHJpbmd9IFx0XHQkbmFtZSBcdFx0VGhlIGljb24gbmFtZSB0byBhcHBseVxuICogQHBhcmFtICAgICB7Q29sb3J9ICAgICBbJGNvbG9yPW51bGxdICAgIFRoZSBjb2xvciB3YW50ZWQgZm9yIHRoZSBpY29uXG4gKlxuICogQGV4YW1wbGUgXHRzY3NzXG4gKiAubXktY29vbC1pY29uIHtcbiAqIFx0XFxAaW5jbHVkZSBzdWdhci5pY29uKGZhLXVzZXIsIHByaW1hcnkpO1xuICogfVxuICpcbiAqIEBhdXRob3IgXHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgaWNvbnNcbiAqIEBuYW1lc3BhY2UgICAgICBzdWdhci5zY3NzLmljb25cbiAqIEB0eXBlICAgIG1peGluXG4gKlxuICogR2VuZXJhdGUgc29tZSBpY29uIGNsYXNzZXMgbGlrZSAuaWNvbi0kaWNvbi1uYW1lXG4gKlxuICogQHBhcmFtICAgICAgICAge0xpc3R9ICAgICAgICAgICRpY29ucy1uYW1lcyAgICAgICAgICAgIFRoZSBsaXN0IG9mIGljb25zIG5hbWVzIHRvIGdlbmVyYXRlXG4gKiBAcGFyYW0gICAgICAgICB7Q29sb3J9ICAgICAgICAgWyRjb2xvcj1udWxsXSAgICAgICAgIFRoZSBjb2xvciB3YW50ZWQgZm9yIHRoZSBnZW5lcmF0ZWQgaWNvbnNcbiAqXG4gKiBAZXhhbXBsZSAgICAgICBzY3NzXG4gKiBcXEBpbmNsdWRlIHN1Z2FyLmljb25zKGZhLXVzZXIgZmEtYmVsbCBmYS1jaXJjbGUpO1xuICpcbiAqIEBhdXRob3IgXHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgICBzZXR0aW5nc1xuICogQHR5cGUgICAgICAgIHtNYXB9XG4gKlxuICogU3RvcmUgYWxsIHRoZSBzZXR0aW5nc1xuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gICAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgICAgY3VycmVudC1jb250ZXh0XG4gKiBAdHlwZSAgICAgICAge1N0cmluZ31cbiAqIEBwcml2YXRlXG4gKlxuICogU3RvcmUgdGhlIGN1cnJlbnQgY29udGV4dFxuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gICAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgICAgICBmb250LXNpemVcbiAqIEB0eXBlICAgICAgICAgIHtOdW1iZXJ9XG4gKiBAcHJpdmF0ZVxuICpcbiAqIFN0b3JlIHRoZSBjdXJyZW50IHJlZ2lzdGVyZWQgZm9udCBzaXplXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAgIChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgICAgICAgJHN2Zy1pY29uc1xuICogQHR5cGUgICAgICAgICAgICB7TWFwfVxuICogQHByaXZhdGVcbiAqXG4gKiBTdG9yZSBhbGwgdGhlIHJlZ2lzdGVyZWQgc3ZnIGljb25zXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAgIChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgICAgIGNsYXNzZXNcbiAqIEB0eXBlICAgICAgICAgIHtNYXB9XG4gKiBAcHJpdmF0ZVxuICpcbiAqIFN0b3JlIGFsbCB0aGUgY2xhc3NlcyBpbiB0aGVpciBuYW1lc3BhY2VzXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAgIChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lIHJlZ2lzdGVyLXN2Zy1pY29uXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmljb25cbiAqIEB0eXBlICAgICAgbWl4aW5cbiAqXG4gKiBSZWdpc3RlciBhIG5ldyBpY29uIHRvIGJlIHVzZWQgYXMgYmFzZTY0IGVuY29kZWQgdXJsLlxuICogSWYgeW91IHdhbnQgeW91ciBpY29uIHRvIGJlIGNvbG9yYWJsZSwgeW91IG5lZWQgdG8gc3BlY2lmeSB0aGlzIGNvZGUgb24geW91ciBwYXRoczogYHN0eWxlPVwiZmlsbDolY29sb3JcImBcbiAqXG4gKiBAcGFyYW0gICAge1N0cmluZ30gICAgJG5hbWUgICAgVGhlIGljb24gbmFtZVxuICogQHBhcmFtICAgIHtTdHJpbmd9ICAgICRzdmdDb2RlICAgIFRoZSBpY29ucyBzdmcgY29kZVxuICpcbiAqIEBleGFtcGxlICAgICBzY3NzXG4gKiBAaW5jbHVkZSBzdWdhci5yZWdpc3Rlci1zdmctaWNvbih1c2VyLCAnZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCxQRDk0Yld3Z2RtVnljMmx2YmowaU1TNHdJaUEvUGp3aFJFOURWRmxRUlNCemRtY2dJRkJWUWt4SlF5QW5MUzh2VnpOREx5OUVWRVFnVTFaSElERXVNUzh2UlU0bklDQW5hSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZSM0poY0docFkzTXZVMVpITHpFdU1TOUVWRVF2YzNabk1URXVaSFJrSno0OGMzWm5JR1Z1WVdKc1pTMWlZV05yWjNKdmRXNWtQU0p1WlhjZ01DQXdJRFV3SURVd0lpQm9aV2xuYUhROUlqVXdjSGdpSUdsa1BTSk1ZWGxsY2w4eElpQjJaWEp6YVc5dVBTSXhMakVpSUhacFpYZENiM2c5SWpBZ01DQTFNQ0ExTUNJZ2QybGtkR2c5SWpVd2NIZ2lJSGh0YkRwemNHRmpaVDBpY0hKbGMyVnlkbVVpSUhodGJHNXpQU0pvZEhSd09pOHZkM2QzTG5jekxtOXlaeTh5TURBd0wzTjJaeUlnZUcxc2JuTTZlR3hwYm1zOUltaDBkSEE2THk5M2QzY3Vkek11YjNKbkx6RTVPVGt2ZUd4cGJtc2lQanhqYVhKamJHVWdZM2c5SWpJMUlpQmplVDBpTWpVaUlHWnBiR3c5SW01dmJtVWlJSEk5SWpJMElpQnpkSEp2YTJVOUlpTXdNREF3TURBaUlITjBjbTlyWlMxc2FXNWxZMkZ3UFNKeWIzVnVaQ0lnYzNSeWIydGxMVzFwZEdWeWJHbHRhWFE5SWpFd0lpQnpkSEp2YTJVdGQybGtkR2c5SWpJaUx6NDhjbVZqZENCbWFXeHNQU0p1YjI1bElpQm9aV2xuYUhROUlqVXdJaUIzYVdSMGFEMGlOVEFpTHo0OGNHRjBhQ0JrUFNKTk1qa3VPVE16TERNMUxqVXlPR010TUM0eE5EWXRNUzQyTVRJdE1DNHdPUzB5TGpjek55MHdMakE1TFRRdU1qRmpNQzQzTXkwd0xqTTRNeXd5TGpBek9DMHlMamd5TlN3eUxqSTFPUzAwTGpnNE9HTXdMalUzTkMwd0xqQTBOeXd4TGpRM09TMHdMall3Tnl3eExqYzBOQzB5TGpneE9DQWdZekF1TVRRekxURXVNVGczTFRBdU5ESTFMVEV1T0RVMUxUQXVOemN4TFRJdU1EWTFZekF1T1RNMExUSXVPREE1TERJdU9EYzBMVEV4TGpRNU9TMHpMalU0T0MweE1pNHpPVGRqTFRBdU5qWTFMVEV1TVRZNExUSXVNelk0TFRFdU56VTVMVFF1TlRneExURXVOelU1SUNCakxUZ3VPRFUwTERBdU1UWXpMVGt1T1RJeUxEWXVOamcyTFRjdU9UZ3hMREUwTGpFMU5tTXRNQzR6TkRVc01DNHlNUzB3TGpreE15d3dMamczT0Mwd0xqYzNNU3d5TGpBMk5XTXdMakkyTml3eUxqSXhNU3d4TGpFM0xESXVOemN4TERFdU56UTBMREl1T0RFNElDQmpNQzR5TWl3eUxqQTJNaXd4TGpVNExEUXVOVEExTERJdU16RXlMRFF1T0RnNFl6QXNNUzQwTnpNc01DNHdOVFVzTWk0MU9UZ3RNQzR3T1RFc05DNHlNV010TVM0eU5qRXNNeTR6T1MwM0xqY3pOeXd6TGpZMU5TMHhNUzQwTnpNc05pNDVNalFnSUdNekxqa3dOaXd6TGprek15d3hNQzR5TXpZc05pNDNORFlzTVRZdU9URTJMRFl1TnpRMmN6RTBMalV6TWkwMUxqSTNOQ3d4TlM0NE16a3ROaTQzTVRORE16Y3VOamc0TERNNUxqRTROaXd6TVM0eE9UY3NNemd1T1RNc01qa3VPVE16TERNMUxqVXlPSG9pTHo0OEwzTjJaejQ9Jyk7XG4gKlxuICogQGF1dGhvciAgICBPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIGJhY2tncm91bmRcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MuaW1hZ2VcbiAqIEB0eXBlICAgICAgbWl4aW5cbiAqXG4gKiBIZWxwZXIgbWl4aW4gdG8gc2V0IGEgYmFja2dyb3VuZCBpbWFnZVxuICpcbiAqIEBwYXJhbSBcdFx0XHR7U3RyaW5nfSBcdFx0XHRcdFskcmVwZWF0PW51bGxdIFx0XHRcdFx0VGhlIGJhY2tncm91bmQtcmVwZWF0IHByb3BlcnR5XG4gKiBAcGFyYW0gXHRcdFx0e1N0cmluZ30gXHRcdFx0XHRbJHNpemU9bnVsbF0gXHRcdFx0XHRUaGUgYmFja2dyb3VuZC1zaXplIHByb3BlcnR5XG4gKiBAcGFyYW0gXHRcdFx0e1N0cmluZ30gXHRcdFx0XHRbJGF0dGFjaG1lbnQ9bnVsbF0gXHRcdFx0VGhlIGJhY2tncm91bmQtYXR0YWNobWVudCBwcm9wZXJ0eVxuICogQHBhcmFtIFx0XHRcdHtTdHJpbmd9IFx0XHRcdFx0WyRibGVuZC1tb2RlPW51bGxdIFx0XHRcdFRoZSBiYWNrZ3JvdW5kLWJsZW5kLW1vZGUgcHJvcGVydHlcbiAqIEBwYXJhbSBcdFx0XHR7U3RyaW5nfSBcdFx0XHRcdFskY2xpcD1udWxsXSBcdFx0XHRcdFRoZSBiYWNrZ3JvdW5kLWNsaXAgcHJvcGVydHlcbiAqIEBwYXJhbSBcdFx0XHR7U3RyaW5nfSBcdFx0XHRcdFskdXJsPW51bGxdIFx0XHRcdFx0VGhlIGJhY2tncm91bmQtaW1hZ2UgdXJsIHByb3BlcnR5XG4gKiBAcGFyYW0gXHRcdFx0e051bWJlcn0gXHRcdFx0XHRbJHdpZHRoPW51bGxdIFx0XHRcdFx0VGhlIGJhY2tncm91bmQtc2l6ZSB3aWR0aCBwcm9wZXJ0eVxuICogQHBhcmFtIFx0XHRcdHtOdW1iZXJ9IFx0XHRcdFx0WyRoZWlnaHQ9bnVsbF0gXHRcdFx0XHRUaGUgYmFja2dyb3VuZC1zaXplIGhlaWdodCBwcm9wZXJ0eVxuICogQHBhcmFtIFx0XHRcdHtOdW1iZXJ9IFx0XHRcdFx0WyR0b3A9bnVsbF0gXHRcdFx0XHRUaGUgYmFja2dyb3VuZC1wb3NpdGlvbiB0b3AgcHJvcGVydHlcbiAqIEBwYXJhbSBcdFx0XHR7TnVtYmVyfSBcdFx0XHRcdFskbGVmdD1udWxsXSBcdFx0XHRcdFRoZSBiYWNrZ3JvdW5kLXBvc2l0aW9uIGxlZnQgcHJvcGVydHlcbiAqIEBwYXJhbSBcdFx0XHR7U3RyaW5nfSBcdFx0XHRcdFskc3VmZml4Mng9QDJ4XSBcdFx0XHRUaGUgc3VmZml4IHRvIGFkZCB0aGUgdGhlIHVybCBpZiB0aGUgMnggcmVzb2x1dGlvbiBpZiB3YW50ZWRcbiAqIEBwYXJhbSBcdFx0XHR7U3RyaW5nfSBcdFx0XHRcdFskc3VmZml4M3g9QDN4XSBcdFx0XHRUaGUgc3VmZml4IHRvIGFkZCB0aGUgdGhlIHVybCBpZiB0aGUgM3ggcmVzb2x1dGlvbiBpZiB3YW50ZWRcbiAqIEBwYXJhbSBcdFx0XHR7U3RyaW5nfSBcdFx0XHRcdFskc3VmZml4NHg9QDR4XSBcdFx0XHRUaGUgc3VmZml4IHRvIGFkZCB0aGUgdGhlIHVybCBpZiB0aGUgNHggcmVzb2x1dGlvbiBpZiB3YW50ZWRcbiAqIEBwYXJhbSBcdFx0XHR7TGlzdH0gXHRcdFx0XHRcdFskcmVzb2x1dGlvbj1udWxsXSBcdFx0XHRUaGUgcmVzb2x1dGlvbiB3YW50ZWQgbGlrZSAyeCwgM3ggYW5kIDR4XG4gKiBAcGFyYW0gXHRcdFx0e0xpc3R9IFx0XHRcdFx0XHRbJHBvc2l0aW9uPW51bGxdIFx0XHRcdFRoZSBiYWNrZ3JvdW5kLXBvc2l0aW9uIHByb3BlcnR5XG4gKlxuICogQGV4YW1wbGUgICAgIHNjc3NcbiAqIC5teS1jb29sLWVsZW1lbnQge1xuICogXHRcdFxcQGluY2x1ZGUgc3VnYXIuYmFja2dyb3VuZChcbiAqIFx0XHRcdCR1cmwgOiAnaW1nL215LWNvb2wtaW1hZ2UuanBnJyxcbiAqIFx0XHRcdCRzaXplIDogY292ZXIsXG4gKiBcdFx0XHQkcmVzb2x1dGlvbiA6IDJ4IDN4IDR4XG4gKiBcdFx0KTtcbiAqIH1cbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgaW1hZ2UtcmVuZGVyaW5nXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmltYWdlXG4gKiBAdHlwZSAgICAgIG1peGluXG4gKlxuICogU2V0IGhvdyB0byByZW5kZXIgdGhlIGltYWdlXG4gKlxuICogQHBhcmFtIFx0XHR7U3RyaW5nfSBcdFx0WyRtb2RlPWF1dG9dIFx0XHRUaGUgbW9kZSB0byB1c2UgdG8gcmVuZGVyIHRoZSBpbWFnZVxuICpcbiAqIEBleGFtcGxlIFx0c2Nzc1xuICogaW1nIHtcbiAqIFx0XFxAaW5jbHVkZSBzdWdhci5pbWFnZS1yZW5kZXJpbmcoY3JpcHMtZWRnZXMpO1xuICogfVxuICpcbiAqIEBhdXRob3IgXHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgIGNvbHVtbnNcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MubGF5b3V0XG4gKiBAdHlwZSAgICAgIG1peGluXG4gKlxuICogQ3JlYXRlIGEgY29sdW1uIGxheW91dCBteSBzZXR0aW5nIGVhY2ggY29sdW1ucyBwcm9wZXJ0aWVzIGF0IG9uY2VcbiAqXG4gKiBAcGFyYW0gXHRcdHtJbnRlZ2VyfSBcdFx0WyRjb3VudD1udWxsXSBcdFx0VGhlIG51bWJlciBvZiBjb2x1bW5zIHdhbnRlZFxuICogQHBhcmFtIFx0XHR7TnVtYmVyfSBcdFx0WyRnYXA9bnVsbF0gXHRcdFRoZSBjb2x1bW4tZ2FwIHdpZHRoIHdhbnRlZFxuICogQHBhcmFtIFx0XHR7U3RyaW5nfSBcdFx0WyRmaWxsPW51bGxdIFx0XHRUaGUgY29sdW1uLWZpbGwgd2FudGVkXG4gKiBAcGFyYW0gXHRcdHtOdW1iZXJ9IFx0XHRbJHdpZHRoPW51bGxdIFx0XHRUSGUgd2lkdGggb2YgZWFjaCBjb2x1bW5zIHdhbnRlZFxuICogQHBhcmFtIFx0XHR7U3RyaW5nfSBcdFx0WyRzcGFuPW51bGxdIFx0XHRTcGVjaWZ5IG9uIGhvdyBtYW55IGNvbHVtbnMgdGhlIGVsZW1lbnQgaGFzIHRvIHNwYW4gYWNyb3NzXG4gKiBAcGFyYW0gXHRcdHtMaXN0fSBcdFx0XHRbJHJ1bGU9bnVsbF0gXHRcdFNwZWNpZnkgdGhlIHNob3J0aGFuZCB2ZXJzaW9uIG9mIHRoZSBjb2x1bW4tcnVsZS1jb2xvciwgY29sdW1uLXJ1bGUtc3R5bGUgYW5kIGNvbHVtbi1ydWxlLXdpZHRoXG4gKiBAcGFyYW0gXHRcdHtTdHJpbmd9IFx0XHRbJHJ1bGUtc3R5bGU9bnVsbF0gXHRTcGVjaWZ5IHRoZSBjb2x1bW4tcnVsZS1zdHlsZSB3YW50ZWRcbiAqIEBwYXJhbSBcdFx0e0NvbG9yfSBcdFx0WyRydWxlLWNvbG9yPW51bGxdIFx0U3BlY2lmeSB0aGUgY29sdW1uLXJ1bGUtY29sb3Igd2FudGVkXG4gKiBAcGFyYW0gXHRcdHtOdW1iZXJ9IFx0XHRbJHJ1bGUtd2lkdGg9bnVsbF0gXHRTcGVjaWZ5IHRoZSBjb2x1bW4tcnVsZS13aWR0aCB3YW50ZWRcbiAqXG4gKiBAZXhhbXBsZSBcdHNjc3NcbiAqIC5teS1jb29sLWNvbnRhaW5lciB7XG4gKiBcdFxcQGluY2x1ZGUgc3VnYXIuY29sdW1ucyhcbiAqIFx0XHQkY291bnQgOiAzLFxuICogXHRcdCRnYXAgOiAzMHB4LFxuICogXHRcdCRzcGFuIDogYWxsXG4gKiBcdCk7XG4gKiB9XG4gKlxuICogQGF1dGhvciBcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgcmF0aW9cbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MucmF0aW9cbiAqIEB0eXBlICAgICAgbWl4aW5cbiAqXG4gKiBBcHBseSBhIHJhdGlvIGNzcyBzdHlsaW5nLiBUaGlzIHdpbGwgYXBwbHkgYSBiZWZvcmUgb3IgYWZ0ZXIgY29udGVudCB0aGF0IHdpbGwgbWFrZSB0aGUgZWxlbWVudCBrZWVwIHRoZSBzcGVjaWZpZWQgcmF0aW8uXG4gKiBUaGUgY29udGVudCBuZWVkIHRvIGJlIGRpc3BsYXllZCBhcyBhYnNvbHV0ZSB0b3AgbGVmdCBhbmQgZml0IGluIHNpemUuXG4gKlxuICogQHBhcmFtIFx0XHR7TnVtYmVyfSBcdFx0JHJhdGlvIFx0XHRcdFRoZSByYXRpbyB0byBrZWVwIGxpa2UgMTYvOSwgZXRjLi4uXG4gKlxuICogQGV4YW1wbGUgXHRzY3NzXG4gKiAubXktY29vbC1lbGVtZW50IHtcbiAqIFx0XFxAaW5jbHVkZSBzdWdhci5yYXRpbygxNi85KTtcbiAqIH1cbiAqXG4gKiBAYXV0aG9yIFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIGxpc3QtYnVsbGV0XG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmxpc3RcbiAqIEB0eXBlICAgICAgbWl4aW5cbiAqXG4gKiBTZXQgaG93IHRoZSBsaXN0IGJ1bGxldCBoYXMgdG8gYmUgZGlzcGxheWVkLlxuICpcbiAqIEBwYXJhbSBcdFx0e1N0cmluZ30gXHRcdFskdHlwZT1udWxsXSBcdFx0XHRcdFRoZSBsaXN0IHR5cGUgdG8gdXNlLiBDYW4gYmUgYWxsIHRoZSBsaXN0LXN0eWxlLXR5cGUgdmFsdWVzXG4gKiBAcGFyYW0gXHRcdHtVcmx9IFx0XHRcdFskaW1hZ2U9bnVsbF0gXHRcdFx0XHRBbiBpbWFnZSB1cmwgdG8gdXNlIGFzIGJ1bGxldFxuICogQHBhcmFtIFx0XHR7U3RyaW5nfSBcdFx0WyRpY29uPW51bGxdIFx0XHRcdFx0QW4gaWNvbiBuYW1lIHRvIHVzZSBhcyBidWxsZXQuIFdpbGwgdXNlIHRoZSBzLWljb24gbWl4aW4gdW5kZXIgdGhlIGhvb2RcbiAqIEBwYXJhbSBcdFx0e0NvbG9yfSBcdFx0WyRjb2xvcj1zLWNvbG9yKGRlZmF1bHQpXSBcdFRoZSBjb2xvciB0byB1c2UgZm9yIHRoZSBidWxsZXRcbiAqIEBwYXJhbSBcdFx0e051bWJlcn0gXHRcdFskc2l6ZT1udWxsXSBcdFx0XHRcdFRoZSBzaXplIHRvIHVzZSBmb3IgdGhlIGJ1bGxldFxuICogQHBhcmFtIFx0XHR7TnVtYmVyfExpc3Q8TnVtYmVyPn0gXHRbJG9mZnNldD1udWxsXSBcdFx0QSBudW1iZXIgdGhhdCByZXByZXNlbnQgdGhlIHRvcCBvZmZzZXQsIG9yIGEgbGlzdCBvZiB0d28gbnVtYmVycyB0aGF0IHJlcHJlc2VudCB0aGUgdG9wLCBsZWZ0IG9mZnNldFxuICogQHBhcmFtIFx0XHR7U3RyaW5nfSBcdFx0WyRmb250PW51bGxdIFx0XHRcdFx0VGhlIGZvbnQgbmFtZSB0byB1c2UgZm9yIHRoZSBidWxsZXRcbiAqIEBwYXJhbSBcdFx0e051bWJlcn0gXHRcdFskc3BhY2U9bnVsbF0gXHRcdFx0XHRUaGUgc3BhY2UgYmV0d2VlbiB0aGUgYnVsbGV0IGFuZCB0aGUgY29udGVudFxuICpcbiAqIEBleGFtcGxlIFx0c2Nzc1xuICogLm15LWNvb2wtbGlzdF9faXRlbSB7XG4gKiBcdEBcXGluY2x1ZGUgc3VnYXIubGlzdC1idWxsZXQoXG4gKiBcdFx0JGltYWdlIDogJy4uL2ltZy9teS1jb29sLWJ1bGxldC5zdmcnLFxuICogXHRcdCRvZmZzZXQgOiA1cHggMTBweCxcbiAqIFx0XHQkc2l6ZSA6IDFlbSxcbiAqIFx0XHQkc3BhY2UgOiAyZW1cbiAqIFx0KTtcbiAqIH1cbiAqXG4gKiBAYXV0aG9yIFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICBsaXN0LXN0YXJ0XG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmxpc3RcbiAqIEB0eXBlICAgICAgbWl4aW5cbiAqXG4gKiBTdGFydCBhIG5ldyBsaXN0XG4gKlxuICogQHBhcmFtIFx0XHR7U3RyaW5nfSBcdFx0WyRjb3VudGVyLXJlc2V0PXMtbGlzdF0gXHRcdEEgY291bnRlciBuYW1lIHRvIHJlc2V0XG4gKlxuICogQGV4YW1wbGUgICAgIHNjc3NcbiAqIC5teS1jb29sLWxpc3Qge1xuICogICAgc3VnYXIubGlzdC1zdGFydCgpO1xuICogfVxuICpcbiAqIEBhdXRob3IgXHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgbG9hZGVyLWJhcnNcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MubG9hZGVyXG4gKiBAdHlwZSAgICAgIGZ1bmN0aW9uXG4gKlxuICogR2VuZXJhdGUgYSBmdWxsIGFuaW1hdGVkLCBzaW5nbGUgZWxlbWVudCwgYmFycyBsb2FkZXJcbiAqXG4gKiBAcGFyYW0gXHRcdFx0e1N0cmluZ30gXHRcdFx0WyRzaGFwZT1yZWN0XSBcdFx0XHRcdFRoZSBzaGFwZSBvZiB0aGUgYmFycyAocmVjdCxjaXJjbGUpXG4gKiBAcGFyYW0gXHRcdFx0e0NvbG9yfSBcdFx0XHRbJGNvbG9yPXByaW1hcnldIFx0XHRcdFRoZSBjb2xvcihzKSBvZiB0aGUgbG9hZGVyLiBDYW4gYmUgYSBsaXN0IG9mIGNvbG9yc1xuICogQHBhcmFtIFx0XHRcdHtOdW1iZXJ9IFx0XHRcdFskd2lkdGg9LjVlbV0gXHRcdFx0XHRUaGUgd2lkdGggb2YgZWFjaCBiYXJzXG4gKiBAcGFyYW0gXHRcdFx0e051bWJlcn0gXHRcdFx0WyRoZWlnaHQ9MmVtXSBcdFx0XHRcdFRoZSBoZWlnaHQgb2YgZWFjaCBiYXJzXG4gKiBAcGFyYW0gXHRcdFx0e0ludGVnZXJ9IFx0XHRcdFskY291bnQ9NV0gXHRcdFx0XHRcdEhvdyBtYW55IGJhcnMgeW91IHdhbnRcbiAqIEBwYXJhbSBcdFx0XHR7TnVtYmVyfSBcdFx0XHRbJGdhcD0uNWVtXSBcdFx0XHRcdFRoZSBnYXAgYmV0d2VlbiBlYWNoIGJhcnNcbiAqIEBwYXJhbSBcdFx0XHR7TnVtYmVyfSBcdFx0XHRbJG9wYWNpdHk9MV0gXHRcdFx0XHRUaGUgaW5pdGlhbCBvcGFjaXR5IG9mIGVhY2ggYmFyc1xuICogQHBhcmFtIFx0XHRcdHtOdW1iZXJ9IFx0XHRcdFskYS1vcGFjaXR5PW51bGxdIFx0XHRcdFRoZSBvcGFjaXR5IG9mIHRoZSBhbmltYXRlZCBiYXJzXG4gKiBAcGFyYW0gXHRcdFx0e1NlY29uZH0gXHRcdFx0WyRhLWR1cmF0aW9uPTFzXSBcdFx0XHRUaGUgb3ZlcmFsbCBhbmltYXRpb24gZHVyYXRpb25cbiAqIEBwYXJhbSBcdFx0XHR7U2Vjb25kfSBcdFx0XHRbJGEtZGVsYXk9MHNdIFx0XHRcdFx0VGhlIGRlbGF5IGJldHdlZW4gdHdvIGFuaW1hdGlvbiBjeWNsZVxuICogQHBhcmFtIFx0XHRcdHtJbnRlZ2VyfSBcdFx0XHRbJGEtbmVhcj0xXSBcdFx0XHRcdEhvdyBtYW55IGJhcnMgYXJlIGFmZmVjdGVkIGJ5IHRoZSBhbmltYXRlZCBvbmVcbiAqIEBwYXJhbSBcdFx0XHR7U3RyaW5nfSBcdFx0XHRbJGEtZWFzZT1lYXNlLWluLW91dF0gXHRcdFRoZSBlYXNlIHRvIHVzZSB0byBhbmltYXRlIGVhY2ggYmFyc1xuICogQHBhcmFtIFx0XHRcdHtOdW1iZXJ9IFx0XHRcdFskYS1vZmZzZXQ9MWVtXSBcdFx0XHRUaGUgb2Zmc2V0IHRvIG1vdmUgdGhlIGFuaW1hdGVkIGJhciBpbiBlbVxuICogQHBhcmFtIFx0XHRcdHtTdHJpbmd9IFx0XHRcdFskYS1kaXJlY3Rpb249Ym90aF0gXHRcdFRoZSBkaXJlY3Rpb24gaW4gd2hpY2ggdG8gbW92ZSB0aGUgYmFycyAodXAsZG93bixib3RoKVxuICogQHBhcmFtIFx0XHRcdHtCb29sZWFufSBcdFx0XHRbJGEtY29udGludW91cz10cnVlXSBcdFx0SWYgdHJ1ZSwgdGhlIGZpcnN0IGJhcnMgd2lsbCBiZSBhbmltYXRlZCBhdCBzYW1lIHRpbWUgYXQgdGhlIGxhc3Qgb25lc1xuICpcbiAqIEBleGFtcGxlICAgICBzY3NzXG4gKiAubXktY29vbC1sb2FkZXIge1xuICogXHRcdFxcQGluY2x1ZGUgc3VnYXIubG9hZGVyLWJhcnMoXG4gKiBcdFx0XHQkY29sb3IgOiBwcmltYXJ5LFxuICogXHRcdFx0JGEtb2Zmc2V0IDogLjVlbVxuICogXHRcdCk7XG4gKiB9XG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIGxvYWRlci1jaXJjbGVcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MubG9hZGVyXG4gKiBAdHlwZSAgICAgIE1peGluXG4gKlxuICogR2VuZXJhdGUgYSBmdWxsIGFuaW1hdGVkLCBzaW5nbGUgZWxlbWVudCwgY2lyY2xlIGxvYWRlclxuICpcbiAqIEBwYXJhbSBcdFx0XHR7Q29sb3J9IFx0XHRcdFskY29sb3I9cHJpbWFyeV0gXHRcdFx0VGhlIGNvbG9yKHMpIG9mIHRoZSBsb2FkZXIuIENhbiBiZSBhIGxpc3Qgb2YgY29sb3JzXG4gKiBAcGFyYW0gXHRcdFx0e051bWJlcn0gXHRcdFx0WyRzaXplPS4zM2VtXSBcdFx0XHRcdFRoZSBzaXplIG9mIGVhY2ggZG90XG4gKiBAcGFyYW0gXHRcdFx0e051bWJlcn0gXHRcdFx0WyRyYWRpdXM9MmVtXSBcdFx0XHRcdFRoZSBkaXN0YW5jZSBvZiBlYWNoIGRvdCBmcm9tIHRoZSBjZW50ZXIgb2YgdGhlIGxvYWRlclxuICogQHBhcmFtIFx0XHRcdHtJbnRlZ2VyfSBcdFx0XHRbJGNvdW50PThdIFx0XHRcdFx0XHRIb3cgbWFueSBiYXJzIHlvdSB3YW50XG4gKiBAcGFyYW0gXHRcdFx0e051bWJlcn0gXHRcdFx0WyRvcGFjaXR5PTFdIFx0XHRcdFx0VGhlIGluaXRpYWwgb3BhY2l0eSBvZiBlYWNoIGJhcnNcbiAqIEBwYXJhbSBcdFx0XHR7TnVtYmVyfSBcdFx0XHRbJGEtb3BhY2l0eT1udWxsXSBcdFx0XHRUaGUgb3BhY2l0eSBvZiB0aGUgYW5pbWF0ZWQgYmFyc1xuICogQHBhcmFtIFx0XHRcdHtTZWNvbmR9IFx0XHRcdFskYS1kdXJhdGlvbj0xc10gXHRcdFx0VGhlIG92ZXJhbGwgYW5pbWF0aW9uIGR1cmF0aW9uXG4gKiBAcGFyYW0gXHRcdFx0e1NlY29uZH0gXHRcdFx0WyRhLWRlbGF5PTBzXSBcdFx0XHRcdFRoZSBkZWxheSBiZXR3ZWVuIHR3byBhbmltYXRpb24gY3ljbGVcbiAqIEBwYXJhbSBcdFx0XHR7SW50ZWdlcn0gXHRcdFx0WyRhLW5lYXI9Ml0gXHRcdFx0XHRIb3cgbWFueSBiYXJzIGFyZSBhZmZlY3RlZCBieSB0aGUgYW5pbWF0ZWQgb25lXG4gKiBAcGFyYW0gXHRcdFx0e1N0cmluZ30gXHRcdFx0WyRhLWVhc2U9ZWFzZS1pbi1vdXRdIFx0XHRUaGUgZWFzZSB0byB1c2UgdG8gYW5pbWF0ZSBlYWNoIGJhcnNcbiAqIEBwYXJhbSAgICAgICB7TnVtYmVyfSAgICAgICBbJGEtc3ByZWFkPTJlbV0gICAgICAgIEhvdyBtYW55IGRpc3RhbmNlIHRoZSBwb2ludHMgaGF2ZSB0byBiZSBhbmltYXRlZFxuICogQHBhcmFtICAgICAgIHtOdW1iZXJ9ICAgICAgICBbJGEtcm90YXRlPW51bGxdICAgICAgSG93IG1hbnkgZGVncmVlcyBoYXZlIHRoZSBwb2ludHMgdG8gYmUgYW5pbWF0ZWRcbiAqIEBwYXJhbSAgICAgICB7TnVtYmVyfSAgICAgICAgWyRhLXNjYWxlPTFlbV0gICAgICAgIEhvdyBtYW55IHNjYWxlIGhhdmUgdGhlIHBvaW50cyB0byBiZSBhbmltYXRlZFxuICpcbiAqIEBleGFtcGxlICAgICBzY3NzXG4gKiAubXktY29vbC1sb2FkZXIge1xuICogICAgQGluY2x1ZGUgc3VnYXIubG9hZGVyLWNpcmNsZShcbiAqICAgICAgJGNvbG9yOiBzdWdhci5jb2xvcihwcmltYXJ5KVxuICogICAgKTtcbiAqIH1cbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgbG9hZGVyLWNvdWNoLXBvdGF0b1xuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5sb2FkZXJcbiAqIEB0eXBlICAgICAgZnVuY3Rpb25cbiAqXG4gKiBHZW5lcmF0ZSBhIGZ1bGwgYW5pbWF0ZWQsIHNpbmdsZSBlbGVtZW50LCBjb3VjaC1wb3RhdG8gc3R5bGUgbG9hZGVyXG4gKlxuICogQHBhcmFtIFx0XHR7TnVtYmVyfSBcdFx0WyRzaXplPTFlbV0gXHRcdFx0XHRUaGUgc2l6ZSBvZiB0aGUgbG9hZGVyXG4gKiBAcGFyYW0gXHRcdHtDb2xvcn0gXHRcdFskY29sb3I9cHJpbWFyeV0gXHRcdFx0VGhlIGNvbG9yIG9mIHRoZSBsb2FkZXJcbiAqIEBwYXJhbSBcdFx0e1NlY29uZH0gXHRcdFskYS1kdXJhdGlvbj0xc10gXHRcdFx0VGhlIG92ZXJhbGwgYW5pbWF0aW9uIGR1cmF0aW9uXG4gKiBAcGFyYW0gXHRcdHtTZWNvbmR9IFx0XHRbJGEtZGVsYXk9MHNdIFx0XHRcdFx0VGhlIGRlbGF5IGJldHdlZW4gdHdvIGFuaW1hdGlvbiBjeWNsZVxuICogQHBhcmFtIFx0XHR7U3RyaW5nfSBcdFx0WyRhLWVhc2U9ZWFzZS1pbi1vdXRdXHRcdFRoZSBlYXNlIHRvIHVzZSBmb3IgdGhlIGFuaW1hdGlvblxuICogQHBhcmFtIFx0XHR7RGVncmVlfVx0XHRbJGEtcm90YXRlPTM2MGRlZ10gXHRcdFx0VGhlIGFuaW1hdGlvbiByb3RhdGlvblxuICogQHBhcmFtIFx0XHR7TnVtYmVyfSBcdFx0WyRhLXNjYWxlPTJdIFx0XHRcdFx0VGhlIGFuaW1hdGlvbiBzY2FsZVxuICpcbiAqIEBleGFtcGxlICAgICBzY3NzXG4gKiAubXktY29vbC1sb2FkZXIge1xuICogXHRcdFxcQGluY2x1ZGUgc3VnYXIubG9hZGVyLWNvdWNoLXBvdGF0bygpO1xuICogfVxuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICBsb2FkZXItZmxpcC1iYWxsXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLmxvYWRlclxuICogQHR5cGUgICAgICBNaXhpblxuICpcbiAqIEdlbmVyYXRlIGEgZnVsbCBhbmltYXRlZCwgc2luZ2xlIGVsZW1lbnQsIGZsaXAgYmFsbCBzdHlsZSBsb2FkZXJcbiAqXG4gKiBAcGFyYW0gXHRcdHtTdHJpbmd9IFx0XHRbJHNoYXBlPWNpcmNsZV0gXHRcdFx0VGhlIHNoYXBlIG9mIHRoZSBsb2FkZXIgKGNpcmNsZSxyZWN0KVxuICogQHBhcmFtIFx0XHR7TnVtYmVyfSBcdFx0WyRzaXplPTJlbV0gXHRcdFx0XHRUaGUgc2l6ZSBvZiB0aGUgbG9hZGVyXG4gKiBAcGFyYW0gXHRcdHtDb2xvcn0gXHRcdFskY29sb3JzPShwcmltYXJ5LHN1Y2Nlc3Msd2FybmluZyxlcnJvcixpbmZvKV0gXHRcdFx0VGhlIGNvbG9ycyBvZiB0aGUgbG9hZGVyLiBDYW4gYmUgYSBsaXN0IG9mIGNvbG9yc1xuICogQHBhcmFtIFx0XHR7U2Vjb25kfSBcdFx0WyRhLWR1cmF0aW9uPTFzXSBcdFx0XHRUaGUgb3ZlcmFsbCBhbmltYXRpb24gZHVyYXRpb25cbiAqIEBwYXJhbSBcdFx0e1NlY29uZH0gXHRcdFskYS1kZWxheT0wc10gXHRcdFx0XHRUaGUgZGVsYXkgYmV0d2VlbiB0d28gYW5pbWF0aW9uIGN5Y2xlXG4gKiBAcGFyYW0gXHRcdHtTdHJpbmd9IFx0XHRbJGEtZWFzZT1lYXNlLWluLW91dF1cdFx0VGhlIGVhc2UgdG8gdXNlIGZvciB0aGUgYW5pbWF0aW9uXG4gKlxuICogQGV4YW1wbGUgICAgICAgc2Nzc1xuICogLm15LWNvb2wtbG9hZGVyIHtcbiAqIFx0XHRcXEBpbmNsdWRlIHN1Z2FyLmxvYWRlci1mbGlwLWJhbGwoKTtcbiAqIH1cbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgbG9hZGVyLWdyaWRcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MubG9hZGVyXG4gKiBAdHlwZSAgICAgIGZ1bmN0aW9uXG4gKlxuICogR2VuZXJhdGUgYSBncmlkIHN0eWxlIGxvYWRlclxuICpcbiAqIEBwYXJhbSAgICAgICB7U3RyaW5nfSAgICAgIFskc2hhcGU9cmVjdF0gICAgICAgICAgICAgVGhlIHNoYXBlIG9mIHRoZSBncmlkIGl0ZW1zLiBDYW4gYmUgcmVjdCBvciBjaXJjbGVcbiAqIEBwYXJhbSAgICAgICB7Q29sb3J9ICAgICAgIFskY29sb3I9Y29sb3IocHJpbWFyeSldICAgVGhlIGNvbG9yIHRvIHVzZSBmb3IgdGhlIGdyaWQgaXRlbXNcbiAqIEBwYXJhbSAgICAgICB7TnVtYmVyfSAgICAgIFskY29scz0zXSAgICAgICAgICAgICAgICAgSG93IG1hbnkgY29sdW1ucyB0aGUgZ3JpZCBtdXN0IGhhdmVcbiAqIEBwYXJhbSAgICAgICB7TnVtYmVyfSAgICAgIFskcm93cz0zXSAgICAgICAgICAgICAgICAgSG93IG1hbnkgcm93cyBtdXN0IGhhdmUgdGhlIGdyaWRcbiAqIEBwYXJhbSAgICAgICB7TnVtYmVyfSAgICAgIFskc2l6ZT0xMHB4XSAgICAgICAgICAgICAgVGhlIHNpemUgb2YgZWFjaCBncmlkIGl0ZW1zXG4gKiBAcGFyYW0gICAgICAge051bWJlcn0gICAgICBbJGdhcD01cHhdICAgICAgICAgICAgICAgIFRoZSBzaXplIG9mIHRoZSBnYXBzIGJldHdlZW4gdGhlIGdyaWQgaXRlbXNcbiAqIEBwYXJhbSAgICAgICB7TnVtYmVyfSAgICAgIFskb2Zmc2V0PTBdICAgICAgICAgICAgICAgVGhlIG9mZnNldCB1c2VkIGZvciB0aGUgZ3JpZFxuICogQHBhcmFtICAgICAgIHtOdW1iZXJ9ICAgICAgWyRyb3RhdGU9MGRlZ10gICAgICAgICAgICBBcHBseSBhIHJvdGF0aW9uIHRvIHRoZSBncmlkIGl0ZW1zXG4gKiBAcGFyYW0gICAgICAge1N0cmluZ30gICAgICBbJGEtc2hhcGU9bnVsbF0gICAgICAgICAgIFRoZSBhbmltYXRpb24gc2hhcGUgdG8gYXBwbHkgdG8gdGhlIGdyaWQgaXRlbXMuIENhbiBiZSByZWN0IG9yIGNpcmNsZVxuICogQHBhcmFtICAgICAgIHtOdW1iZXJ9ICAgICAgWyRhLXN0ZXBzPTVdICAgICAgICAgICAgICBIb3cgbWFueSBzdGVwcyBtdXN0IGhhdmUgdGhlIGFuaW1hdGlvblxuICogQHBhcmFtICAgICAgIHtOdW1iZXJ9ICAgICAgWyRhLXNwcmVhZD0xNXB4XSAgICAgICAgICBIb3cgbXVjaCBtdXN0IHRoZSBncmlkIGl0ZW1zIHNwcmVhZCBkdXJpbmcgdGhlIGFuaW1hdGlvblxuICogQHBhcmFtICAgICAgIHtOdW1iZXJ9ICAgICAgWyRhLXJvdGF0ZT1udWxsXSAgICAgICAgICBIb3cgbWFueSBkZWdyZWVzIG11c3QgdGhlIGdyaWQgaXRlbXMgcm90YXRlIGR1cmluZyB0aGUgYW5pbWF0aW9uXG4gKiBAcGFyYW0gICAgICAge051bWJlcn0gICAgICBbJGEtc2NhbGU9bnVsbF0gICAgICAgICAgIEFwcGx5IGEgc2NhbGUgZm9yIHRoZSBhbmltYXRpb24gb2YgdGhlIGdyaWQgaXRlbXNcbiAqIEBwYXJhbSAgICAgICB7TnVtYmVyfSAgICAgIFskYS1vcGFjaXR5PW51bGxdICAgICAgICAgQXBwbHkgYW4gb3BhY2l0eSB0byB0aGUgZ3JpZCBpdGVtcyBkdXJpbmcgdGhlIGFuaW1hdGlvblxuICogQHBhcmFtICAgICAgIHtTZWNvbmR9ICAgICAgWyRhLWR1cmF0aW9uPTFzXSAgICAgICAgICBUaGUgZHVyYXRpb24gb2YgdGhlIGFuaW1hdGlvblxuICogQHBhcmFtICAgICAgIHtTZWNvbmR9ICAgICAgWyRhLWRlbGF5PTBzXSAgICAgICAgICAgICBIb3cgbWFueSBzZWNvbmRzIHRvIHdhaXQgYmV0d2VlbiBlYWNoIGFuaW1hdGlvbnNcbiAqIEBwYXJhbSAgICAgICB7U3RyaW5nfSAgICAgIFskYS1lYXNlPWVhc2UtaW4tb3V0XSAgICAgVGhlIGVhc2luZyB0byB1c2UgZm9yIHRoZSBhbmltYXRpb25cbiAqXG4gKiBAZXhhbXBsZSAgICAgc2Nzc1xuICogLm15LWNvb2wtbG9hZGVyIHtcbiAqICAgIEBpbmNsdWRlIHN1Z2FyLmxvYWRlci1ncmlkKCk7XG4gKiB9XG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIGxvYWRlci1yYWRpYWxcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MubG9hZGVyXG4gKiBAdHlwZSAgICAgIGZ1bmN0aW9uXG4gKlxuICogR2VuZXJhdGUgYSByYWRpYWwgc3R5bGVkIGxvYWRlclxuICpcbiAqIEBwYXJhbSAgICAgICB7U3RyaW5nfSAgICAgIFskc2hhcGU9Y2lyY2xlXSAgICAgICBUaGUgc2hhcGUgb2YgdGhlIGl0ZW1zIHRoYXQgbWFrZSB0aGUgY2lyY2xlLiBDYW4gYmUgcmVjdCBvciBjaXJjbGVcbiAqIEBwYXJhbSAgICAgICB7TnVtYmVyfSAgICAgIFskc2l6ZT0zZW1dICAgICAgICAgICBUaGUgc2l6ZSBvZiB0aGUgaXRlbXNcbiAqIEBwYXJhbSAgICAgICB7TnVtYmVyfSAgICAgIFskd2lkdGg9MC4yZW1dICAgICAgICBUaGUgd2lkdGggb2YgdGhlIGNpcmNsZSBsb2FkZXJcbiAqIEBwYXJhbSAgICAgICB7U3RyaW5nfSAgICAgIFskc3R5bGU9c29saWRdICAgICAgICBUaGUgc3R5bGUgb2YgdGhlIGl0ZW1zIHRoYXQgZm9ybSB0aGUgbG9hZGVyLiBDYW4gYmUgbm9uZSwgaGlkZGVuLCBkb3R0ZWQsIGRhc2hlZCwgc29saWQsIGRvdWJsZSwgZ3Jvb3ZlLCByaWRnZSwgaW5zZXQsIG91dHNldCwgaW5pdGlhbCBvciBpbmhlcml0XG4gKiBAcGFyYW0gICAgICAge0NvbG9yfSAgICAgICBbJGNvbG9yPXByaW1hcnldICAgICBUaGUgY29sb3IgdG8gdXNlIGZvciB0aGUgbG9hZGVyXG4gKiBAcGFyYW0gICAgICAge1NlY29uZH0gICAgICBbJGEtZHVyYXRpb249MnNdICAgICAgSG93IG1hbnkgdGltZSB3aWxsIGJlIHRoZSBhbmltYXRpb25cbiAqIEBwYXJhbSAgICAgICB7U2Vjb25kfSAgICAgIFskYS1kZWxheT0wc10gICAgICAgICBIb3cgbWFueSB0aW1lIHRvIHdhaXQgYmV0d2VlbiB0d28gYW5pbWF0aW9uXG4gKiBAcGFyYW0gICAgICAge051bWJlcn0gICAgICBbJGEtY291bnQ9Ml0gICAgICAgICAgSG93IG1hbnkgY2lyY2xlcyB3aWxsIGJlIGFuaW1hdGVkXG4gKiBAcGFyYW0gICAgICAge051bWJlcn0gICAgICBbJGEtc3ByZWFkPTFlbV0gICAgICAgICBTcGVjaWZ5IGEgc3ByZWFkIHZhbHVlIGZvciB0aGUgYW5pbWF0aW9uIG9mIGVhY2ggY2lyY2xlc1xuICogQHBhcmFtICAgICAgIHtTdHJpbmd9ICAgICAgWyRhLWVhc2U9bGluZWFyXSAgICAgIFNwZWNpZnkgdGhlIGVhc2UgdG8gdXNlIGZvciB0aGUgYW5pbWF0aW9uXG4gKlxuICogQGV4YW1wbGUgICAgICAgc2Nzc1xuICogLm15LWNvb2wtbG9hZGVyIHtcbiAqICAgIEBpbmNsdWRlIHN1Z2FyLmxvYWRlci1yYWRpYWwoKTtcbiAqIH1cbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgbG9hZGVyLXNwaW5uZXJcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MubG9hZGVyXG4gKiBAdHlwZSAgICAgIGZ1bmN0aW9uXG4gKlxuICogR2VuZXJhdGUgYSBzcGlubmVyIGxvYWRlclxuICpcbiAqIEBwYXJhbSAgICAgICAgIHtOdW1iZXJ9ICAgICAgICBbJHNpemU9MmVtXSAgICAgICAgICAgICBTcGVjaWZ5IHRoZSBzaXplIG9mIHRoZSBzcGlubmVyIGxvYWRlclxuICogQHBhcmFtICAgICAgICAge051bWJlcn0gICAgICAgIFskd2lkdGg9MC4zZW1dICAgICAgICAgIFNwZWNpZnkgdGhlIHdpZHRoIG9mIHRoZSBzcGlubmVyIGxvYWRlclxuICogQHBhcmFtICAgICAgICAge0NvbG9yfSAgICAgICAgIFskY29sb3I9cHJpbWFyeV0gICAgICAgIFNwZWNpZnkgdGhlIGNvbG9yIG9mIHRoZSBzcGlubmVyIGxvYWRlclxuICogQHBhcmFtICAgICAgICAge0NvbG9yfSAgICAgICAgIFskYmdjb2xvcj1pbmhlcml0XSAgICAgICAgU3BlY2lmeSB0aGUgYmFja2dyb3VuZCBjb2xvciBvZiB0aGUgc3Bpbm5lciBsb2FkZXJcbiAqIEBwYXJhbSAgICAgICAgIHtOdW1iZXJ9ICAgICAgICBbJGxlbmd0aD0zLzRdICAgICAgICAgICBUaGUgbGVuZ3RoIG9mIHRoZSBzcGlubmVyIGxvYWRlclxuICogQHBhcmFtICAgICAgICAge1NlY29uZH0gICAgICAgIFskYS1kdXJhdGlvbj0xc10gICAgICAgIFRoZSBkdXJhdGlvbiBvZiB0aGUgc3Bpbm5lciBsb2FkZXIgYW5pbWF0aW9uXG4gKiBAcGFyYW0gICAgICAgICB7U3RyaW5nfSAgICAgICAgWyRhLWVhc2U9bGluZWFyXSAgICAgICAgICBTcGVjaWZ5IGFuIGVhc2UgdG8gdXNlIGZvciB0aGUgc3Bpbm5lciBsb2FkZXIgYW5pbWF0aW9uXG4gKlxuICogQGV4YW1wbGUgICAgIHNjc3NcbiAqIC5teS1jb29sLWxvYWRlciB7XG4gKiAgICBAaW5jbHVkZSBzdWdhci5sb2FkZXItc3Bpbm5lcigpO1xuICogfVxuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgdG8tYmFzZTY0LXVybFxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5tZXRhXG4gKiBAdHlwZSAgICAgIGZ1bmN0aW9uXG4gKlxuICogQ29udmVydCB0aGUgcGFzc2VkIHN2ZyBjb2RlIHRvIGFuIGVtYmFkYWJsZSBiYXNlNjQgdXJsXG4gKlxuICogQHBhcmFtICAgICAgIHtTdHJpbmd9ICAgICAgICAkc3ZnICAgICAgICBUaGUgc3ZnIGNvZGUgdG8gY29udmVydFxuICogQHJldHVybiAgICAgIHtTdHJpbmd9ICAgICAgICAgICAgICAgICAgICBUaGUgZW1iZWRhYmxlIGNvbnZlcnRlZCBiYXNlNjQgdXJsXG4gKlxuICogQGV4YW1wbGUgICAgICAgc2Nzc1xuICogc3VnYXIudG8tYmFzZTY0LXVybCgnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGQ9XCJNMjAuODIyIDE4LjA5NmMtMy40MzktLjc5NC02LjY0MS0xLjQ5LTUuMDktNC40MTggNC43MTktOC45MTIgMS4yNTEtMTMuNjc4LTMuNzMyLTEzLjY3OC01LjA4MSAwLTguNDY0IDQuOTQ5LTMuNzMyIDEzLjY3OCAxLjU5NyAyLjk0NS0xLjcyNSAzLjY0MS01LjA5IDQuNDE4LTIuOTc5LjY4OC0zLjE3OCAyLjE0My0zLjE3OCA0LjY2M2wuMDA1IDEuMjQxaDEwLjQ4M2wuNzA0LTNoMS42MTVsLjcwNCAzaDEwLjQ4M2wuMDA1LTEuMjQxYy4wMDEtMi41Mi0uMTk4LTMuOTc1LTMuMTc3LTQuNjYzem0tOC4yMzEgMS45MDRoLTEuMTY0bC0uOTEtMmgyLjk5NGwtLjkyIDJ6XCIvPjwvc3ZnPicpO1xuICogLy8gdXJsKFwiZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmOCwlM0NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB3aWR0aD0nMjQnIGhlaWdodD0nMjQnIHZpZXdCb3g9JzAgMCAyNCAyNCclM0UlM0NwYXRoIGQ9J00yMC44MjIgMTguMDk2Yy0zLjQzOS0uNzk0LTYuNjQxLTEuNDktNS4wOS00LjQxOCA0LjcxOS04LjkxMiAxLjI1MS0xMy42NzgtMy43MzItMTMuNjc4LTUuMDgxIDAtOC40NjQgNC45NDktMy43MzIgMTMuNjc4IDEuNTk3IDIuOTQ1LTEuNzI1IDMuNjQxLTUuMDkgNC40MTgtMi45NzkuNjg4LTMuMTc4IDIuMTQzLTMuMTc4IDQuNjYzbC4wMDUgMS4yNDFoMTAuNDgzbC43MDQtM2gxLjYxNWwuNzA0IDNoMTAuNDgzbC4wMDUtMS4yNDFjLjAwMS0yLjUyLS4xOTgtMy45NzUtMy4xNzctNC42NjN6bS04LjIzMSAxLjkwNGgtMS4xNjRsLS45MS0yaDIuOTk0bC0uOTIgMnonLyUzRSUzQy9zdmclM0VcIilcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgdG8tYmFzZTY0XG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLm1ldGFcbiAqIEB0eXBlICAgICAgZnVuY3Rpb25cbiAqXG4gKiBDb252ZXJ0IHRoZSBwYXNzZWQgc3ZnIGNvZGUgdG8gYmFzZTY0IGVtYmVkYWJsZSB1cmxcbiAqXG4gKiBAcGFyYW0gICAgICAge1N0cmluZ30gICAgICAgICRzdmcgICAgICAgIFRoZSBzdmcgY29kZSB0byBjb252ZXJ0XG4gKiBAcmV0dXJuICAgICAge1N0cmluZ30gICAgICAgICAgICAgICAgICAgIFRoZSBiYXNlNjQgY29udmVydGVkIHVybCBjb2RlXG4gKlxuICogQGV4YW1wbGUgICAgIHNjc3NcbiAqIHN1Z2FyLnRvLWJhc2U2NCgnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiPjxwYXRoIGQ9XCJNMjAuODIyIDE4LjA5NmMtMy40MzktLjc5NC02LjY0MS0xLjQ5LTUuMDktNC40MTggNC43MTktOC45MTIgMS4yNTEtMTMuNjc4LTMuNzMyLTEzLjY3OC01LjA4MSAwLTguNDY0IDQuOTQ5LTMuNzMyIDEzLjY3OCAxLjU5NyAyLjk0NS0xLjcyNSAzLjY0MS01LjA5IDQuNDE4LTIuOTc5LjY4OC0zLjE3OCAyLjE0My0zLjE3OCA0LjY2M2wuMDA1IDEuMjQxaDEwLjQ4M2wuNzA0LTNoMS42MTVsLjcwNCAzaDEwLjQ4M2wuMDA1LTEuMjQxYy4wMDEtMi41Mi0uMTk4LTMuOTc1LTMuMTc3LTQuNjYzem0tOC4yMzEgMS45MDRoLTEuMTY0bC0uOTEtMmgyLjk5NGwtLjkyIDJ6XCIvPjwvc3ZnPicpO1xuICogLy8gdXJsKFwiZGF0YTppbWFnZS9zdmcreG1sO2NoYXJzZXQ9dXRmOCwlM0NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB3aWR0aD0nMjQnIGhlaWdodD0nMjQnIHZpZXdCb3g9JzAgMCAyNCAyNCclM0UlM0NwYXRoIGQ9J00yMC44MjIgMTguMDk2Yy0zLjQzOS0uNzk0LTYuNjQxLTEuNDktNS4wOS00LjQxOCA0LjcxOS04LjkxMiAxLjI1MS0xMy42NzgtMy43MzItMTMuNjc4LTUuMDgxIDAtOC40NjQgNC45NDktMy43MzIgMTMuNjc4IDEuNTk3IDIuOTQ1LTEuNzI1IDMuNjQxLTUuMDkgNC40MTgtMi45NzkuNjg4LTMuMTc4IDIuMTQzLTMuMTc4IDQuNjYzbC4wMDUgMS4yNDFoMTAuNDgzbC43MDQtM2gxLjYxNWwuNzA0IDNoMTAuNDgzbC4wMDUtMS4yNDFjLjAwMS0yLjUyLS4xOTgtMy45NzUtMy4xNzctNC42NjN6bS04LjIzMSAxLjkwNGgtMS4xNjRsLS45MS0yaDIuOTk0bC0uOTIgMnonLyUzRSUzQy9zdmclM0VcIilcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgbWVkaWFcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MucmVzcG9uc2l2ZVxuICogQHR5cGUgICAgICBtaXhpblxuICpcbiAqIEVhc3kgdG8gdXNlIG1lZGlhIHF1ZXJ5IG1peGluIHRoYXQgc3VwcG9ydCBjc3N1YSBjbGFzc2VzIHRvIHRhcmdldCBzcGVjaWZpYyBicm93c2Vyc1xuICpcbiAqIEBwYXJhbSBcdFx0e1N0cmluZ30gXHRcdFskc2NyZWVuPW51bGxdIFx0XHRcdEFueSBvZiB0aGUgQG1lZGlhIHNjcmVlbiB0eXBlIHByb3BlcnR5IGxpa2UgXCJzY3JlZW4sIGhhbmRoZWxkLCBwcmludCwgZXRjLi4uXCJcbiAqIEBwYXJhbSBcdFx0e051bWJlcn0gXHRcdFskbWluLXdpZHRoPW51bGxdIFx0XHRUaGUgbWluIHdpZHRoIHRvIHRhcmdldFxuICogQHBhcmFtIFx0XHR7TnVtYmVyfSBcdFx0WyRtYXgtd2lkdGg9bnVsbF0gXHRcdFRoZSBtYXggd2lkdGggdG8gdGFyZ2V0XG4gKiBAcGFyYW0gXHRcdHtOdW1iZXJ9IFx0XHRbJG1pbi1oZWlnaHQ9bnVsbF0gXHRcdFRoZSBtaW4gaGVpZ2h0IHRvIHRhcmdldFxuICogQHBhcmFtIFx0XHR7TnVtYmVyfSBcdFx0WyRtYXgtaGVpZ2h0PW51bGxdIFx0XHRUaGUgbWF4IGhlaWdodCB0byB0YXJnZXRcbiAqIEBwYXJhbSBcdFx0e1N0cmluZ30gXHRcdFskb3JpZW50YXRpb249bnVsbF0gXHRUaGUgb3JpZW50YXRpb24gdG8gdGFyZ2V0LiBDYW4gYmUgcG9ydHJhaXQgb3IgbGFuZHNjYXBlXG4gKiBAcGFyYW0gXHRcdHtTdHJpbmd9IFx0XHRbJHJlc29sdXRpb249bnVsbF0gXHRcdFRoZSByZXNvbHV0aW9uIHRvIHRhcmdldC4gQ2FuIGJlIDJ4LCAzeCwgNHgsIGV0Yy4uLlxuICogQHBhcmFtIFx0XHR7U3RyaW5nfSBcdFx0WyRlbmdpbmU9bnVsbF0gXHRcdFx0VGhlIGVuZ2luZSB0aGF0IHBvd2VycyB0aGUgZGlzcGxheS4gQ2FuIGJlIGdlY2tvLCB3ZWJraXQsIHRyaWRlbnQsIGJsaW5rIG9yIHByZXN0b1xuICogQHBhcmFtIFx0XHR7U3RyaW5nfSBcdFx0WyRkZXZpY2U9bnVsbF0gXHRcdFx0VGhlIGRldmljZSB0byB0YXJnZXQuIENhbiBiZSBtb2JpbGUsIHRhYmxldCwgZGVza3RvcCwgaXBob25lIG9yIGlwYWRcbiAqIEBwYXJhbSBcdFx0e1N0cmluZ30gXHRcdFskYnJvd3Nlcj1udWxsXSBcdFx0VGhlIGJyb3dzZXIocykgdG8gdGFyZ2V0LiBDYW4gYmUgY2hyb21lLCBzYWZhcmksIGZpcmVmb3gsIG9wZXJhLCBpZSwgaWU2LTIwXG4gKiBAcGFyYW0gXHRcdHtTdHJpbmd9IFx0XHRbJHN5c3RlbT1udWxsXSBcdFx0XHRUaGUgc3lzdGVtKHMpIHRvIHRhcmdldC4gQ2FuIGJlIGlvcywgb3N4LCB3aW5kb3dzLCBsaW51eCwgYW5kcm9pZCwgd2Vib3Mgb3IgYmxhY2tiZXJyeVxuICpcbiAqIEBleGFtcGxlIFx0c2Nzc1xuICogLy8gc2ltcGxlIG1pbiB3aWR0aFxuICogXFxAaW5jbHVkZSBzdWdhci5tZWRpYShcbiAqIFx0JG1pbi13aWR0aCA6IDIwMHB4XG4gKiApIHtcbiAqIFx0Ly8gY3VzdG9tIGNzcyBoZXJlLi4uXG4gKiB9XG4gKlxuICogLy8gdGFyZ2V0IGEgc3BlY2lmaWMgZW5naW5lXG4gKiBcXEBpbmNsdWRlIHN1Z2FyLm1lZGlhKFxuICogXHQkZW5naW5lIDogZ2Vja28gd2Via2l0XG4gKiApIHtcbiAqIFx0Ly8gY3VzdG9tIGNzcyBoZXJlXG4gKiB9XG4gKlxuICogQGF1dGhvciBcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICByb3VuZC1vdmVyZmxvd1xuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy5zaGFwZVxuICogQHR5cGUgICAgICBtaXhpblxuICpcbiAqIEFwcGx5IHNvbWUgY3NzIHRvIGhhdmUgYSByb3VuZGVkIGVsZW1lbnQgd2l0aCBhbHJlYWR5IGFuIG92ZXJmbG93IG9uIGl0XG4gKlxuICogQHBhcmFtIFx0XHR7TnVtYmVyfSBcdFx0WyRzaXplPW51bGxdIFx0XHRUaGUgc2l6ZSAod2lkdGggYW5kIGhlaWdodCkgb2YgdGhlIGVsZW1lbnQgd2FudGVkXG4gKiBAcGFyYW0gXHRcdHtOdW1iZXJ9IFx0XHRbJHdpZHRoPW51bGxdIFx0XHRUaGUgd2lkdGggb2YgdGhlIGVsZW1lbnQgd2FudGVkXG4gKiBAcGFyYW0gXHRcdHtOdW1iZXJ9IFx0XHRbJGhlaWdodD1udWxsXSBcdFx0VGhlIGhlaWdodCBvZiB0aGUgZWxlbWVudCB3YW50ZWRcbiAqXG4gKiBAZXhhbXBsZSBcdHNjc3NcbiAqIC5teS1jb29sLWltYWdlIHtcbiAqIFx0XFxAaW5jbHVkZSBzdWdhci5yb3VuZC1vdmVyZmxvdygxMDBweCk7XG4gKlxuICogXHRpbWcge1xuICogXHRcdFxcQGluY2x1ZGUgc3VnYXIuc2l6ZShjb3Zlcik7XG4gKiBcdH1cbiAqIH1cbiAqXG4gKiBAYXV0aG9yIFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgICAgdHJpYW5nbGVcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3Muc2hhcGVcbiAqIEB0eXBlICAgICAgbWl4aW5cbiAqXG4gKiBHZW5lcmF0ZSBhIHRyaWFuZ2xlIHNoYXBlXG4gKlxuICogQHBhcmFtICAgICAgIHtOdW1iZXJ9ICAgICAgICBbJHdpZHRoPTFlbV0gICAgICAgICAgICAgIFRoZSB0cmlhbmdsZSB3aWR0aFxuICogQHBhcmFtICAgICAgIHtOdW1iZXJ9ICAgICAgICBbJGhlaWdodD0xZW1dICAgICAgICAgICAgIFRoZSB0cmlhbmdsZSBoZWlnaHRcbiAqIEBwYXJhbSAgICAgICB7Q29sb3J9ICAgICAgICAgWyRjb2xvcj1jb2xvcihwcmltYXJ5KV0gICAgVGhlIHRyaWFuZ2xlIGNvbG9yXG4gKiBAcGFyYW0gICAgICAge1N0cmluZ30gICAgICAgIFskZGlyZWN0aW9uPXJpZ2h0XSAgICAgICAgVGhlIHRyaWFuZ2xlIGRpcmVjdGlvbi4gQ2FuIGJlIHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCwgdG9wLWxlZnQsIHRvcC1yaWdodCwgYm90dG9tLWxlZnQgb3IgYm90dG9tLXJpZ2h0XG4gKiBAcGFyYW0gICAgICAge1N0cmluZ30gICAgICAgIFskdHJhbnNmb3JtLW9yaWdpbj1jZW50ZXJdICAgIFRoZSB0cmlhbmdsZSB0cmFuc2Zvcm0gb3JpZ2luLiBDYW4gYmUgY2VudGVyIG9yIGJhc2VcbiAqIEBwYXJhbSAgICAgICB7TnVtYmVyfSAgICAgICAgWyRib3JkZXItd2lkdGg9MF0gICAgICAgICBUaGUgYm9yZGVyIHdpZHRoXG4gKiBAcGFyYW0gICAgICAge0NvbG9yfSAgICAgICAgIFskYm9yZGVyLWNvbG9yPW51bGxdICAgICAgVGhlIGJvcmRlciBjb2xvclxuICpcbiAqIEBleGFtcGxlICAgICBzY3NzXG4gKiAubXktY29vbC10cmlhbmdsZSB7XG4gKiAgICBAaW5jbHVkZSBzdWdhci50cmlhbmdsZSgpO1xuICogfVxuICpcbiAqIEBhdXRob3IgXHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgcmh5dGhtLXdpZHRoXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLnR5cG9ncmFwaHlcbiAqIEB0eXBlICAgICAgZnVuY3Rpb25cbiAqXG4gKiBSZXR1cm4gdGhlIE1hcCBwcm9wZXJ0aWVzIHJlcHJlc2VudGF0aW9uIGZvciB0aGUgcmh5dGhtZSB3aWR0aFxuICogVGhlIHJoeXRobWUgd2lkdGggaXMgdGhlIHdpZHRoIG9mIGFuIGVsZW1lbnQgdGhhdCB0YXJnZXQgYSBjZXJ0YWluIG51bWJlciBvZiBsZXR0ZXJzIGJ5IGxpbmVcbiAqXG4gKiBAcGFyYW0gXHRcdFx0e0ludGVnZXJ9IFx0XHRcdFskbGV0dGVycy1jb3VudD1zZXR0aW5ncy50eXBvZ3JhcGh5LmxpbmUtbGV0dGVycy1jb3VudF0gXHRcdFRoZSBudW1iZXIgb2YgbGV0dGVycyB0byB0YXJnZXQgYnkgbGluZVxuICogQHJldHVybiBcdFx0XHR7TWFwfSBcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRUaGUgTWFwIHByb3BlcnRpZXMgcmVwcmVzZW50YXRpb25cbiAqXG4gKiBAZXhhbXBsZSAgICAgc2Nzc1xuICogc3VnYXIucmh5dGhtLXdpZHRoKDUwKTtcbiAqIC8vIHJldHVyblxuICogLy8gKFxuICogLy8gXHRkaXNwbGF5IDogYmxvY2ssXG4gKiAvLyBcdG1heC13aWR0aCA6IDUwZXhcbiAqIC8vIClcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIEBuYW1lICAgICAgICByaHl0aG0td2lkdGhcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MudHlwb2dyYXBoeVxuICogQHR5cGUgICAgICBtaXhpblxuICpcbiAqIFByaW50IG91dCB0aGUgY3NzIG9uIGEgY29udGFpbmVyIHRoYXQgd2lsbCBtYWtlIHRoZSBsaW5lcyBkaXNwbGF5cyBhIG1heGltdW0gbnVtYmVyIG9mIGNoYXJhY3RlcnMuXG4gKlxuICogQGV4YW1wbGUgXHRzY3NzXG4gKiBoMSB7XG4gKiBcdFxcQGluY2x1ZGUgc3VnYXIucmh5dGhtLXdpZHRoKDQ1KTtcbiAqIH1cbiAqXG4gKiBAYXV0aG9yIFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICBzZWxlY3Rpb25cbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MudHlwb2dyYXBoeVxuICogQHR5cGUgICAgICBtaXhpblxuICpcbiAqIFNldCB0aGUgdXNlciBzZWxlY3Rpb24gc3R5bGluZyB3aXRoIGVhc2VcbiAqXG4gKiBAZXhhbXBsZSBcdHNjc3NcbiAqIFxcQGluY2x1ZGUgc3VnYXIuc2VsZWN0aW9uKCkge1xuICogXHRiYWNrZ3JvdW5kOiByZWQ7XG4gKiBcdGNvbG9yOiB3aGl0ZTtcbiAqIH1cbiAqXG4gKiBAYXV0aG9yIFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIHRleHQtaGlkZVxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy50eXBvZ3JhcGh5XG4gKiBAdHlwZSAgICAgIG1peGluXG4gKlxuICogSGlkZSB0aGUgY29udGFpbmVkIHRleHRcbiAqXG4gKiBAZXhhbXBsZSBcdHNjc3NcbiAqIC5teS1jb29sLWNvbnRhaW5lciB7XG4gKiBcdFxcQGluY2x1ZGUgc3VnYXIudGV4dC1oaWRlKCk7XG4gKiB9XG4gKlxuICogQGF1dGhvciBcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICB0ZXh0LXRydW5jYXRlXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLnR5cG9ncmFwaHlcbiAqIEB0eXBlICAgICAgbWl4aW5cbiAqXG4gKiBQcmludCBvdXQgdGhlIHN0eWxlIHRvIHRydW5jYXRlIHRoZSB0ZXh0IGlmIG5lZWRlZFxuICpcbiAqIEBleGFtcGxlIFx0c2Nzc1xuICogaDEge1xuICogXHRcXEBpbmNsdWRlIHN1Z2FyLnRleHQtdHJ1bmNhdGUoKTtcbiAqIH1cbiAqXG4gKiBAYXV0aG9yIFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgICAgc2V0dGluZ3NcbiAqIEB0eXBlICAgICAgICB7TWFwfVxuICpcbiAqIFN0b3JlIGFsbCB0aGUgc2V0dGluZ3NcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+ICAgKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICAgIGN1cnJlbnQtY29udGV4dFxuICogQHR5cGUgICAgICAgIHtTdHJpbmd9XG4gKiBAcHJpdmF0ZVxuICpcbiAqIFN0b3JlIHRoZSBjdXJyZW50IGNvbnRleHRcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+ICAgKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICAgICAgZm9udC1zaXplXG4gKiBAdHlwZSAgICAgICAgICB7TnVtYmVyfVxuICogQHByaXZhdGVcbiAqXG4gKiBTdG9yZSB0aGUgY3VycmVudCByZWdpc3RlcmVkIGZvbnQgc2l6ZVxuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gICAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgICAgICAgICRzdmctaWNvbnNcbiAqIEB0eXBlICAgICAgICAgICAge01hcH1cbiAqIEBwcml2YXRlXG4gKlxuICogU3RvcmUgYWxsIHRoZSByZWdpc3RlcmVkIHN2ZyBpY29uc1xuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gICAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgICAgICBjbGFzc2VzXG4gKiBAdHlwZSAgICAgICAgICB7TWFwfVxuICogQHByaXZhdGVcbiAqXG4gKiBTdG9yZSBhbGwgdGhlIGNsYXNzZXMgaW4gdGhlaXIgbmFtZXNwYWNlc1xuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gICAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIGNvbnZlcnRcbiAqIEBuYW1lc3BhY2UgICAgIHN1Z2FyLnNjc3MudW5pdFxuICogQHR5cGUgICAgICBmdW5jdGlvblxuICpcbiAqIENvbnZlcnQgYSBwYXNzZWQgdmFsdWUgdG8gdGhlIHdhbnRlZCB1bml0XG4gKiBUaGUgY29udmVyc2lvbiBiZXR3ZWVuIHNvbWUgdW5pdHMgdGhhdCBkZXBlbmRzIG9uIGEgZm9udC1zaXplIHdpbGwgdGFrZSB0aGUgc2V0dGluZ3MudHlwb2dyYXBoeS5mb250LXNpemUgdmFsdWUgYXMgcmVmZXJlbmNlLlxuICpcbiAqIEF2YWlsYWJsZSBjb252ZXJzaW9uc1xuICogLSBmcm9tIHB4XG4gKiBcdC0gdG8gZW1cbiAqIFx0LSB0byByZW1cbiAqIFx0LSB0byBwdFxuICogXHQtIHRvICVcbiAqXG4gKiAtIGZyb20gZW1cbiAqIFx0LSB0byByZW1cbiAqIFx0LSB0byBweFxuICogXHQtIHRvIHB0XG4gKiBcdC0gdG8gJVxuICpcbiAqIC0gZnJvbSBwdFxuICogXHQtIHRvIGVtXG4gKiBcdC0gdG8gcmVtXG4gKiBcdC0gdG8gcHhcbiAqIFx0LSB0byBwdFxuICogXHQtIHRvICVcbiAqXG4gKiAtIGZyb20gcmVtXG4gKiBcdC0gdG8gZW1cbiAqIFx0LSB0byBweFxuICogXHQtIHRvIHB0XG4gKiBcdC0gdG8gJVxuICpcbiAqIEBwYXJhbSBcdFx0XHR7TnVtYmVyfSBcdFx0JHZhbHVlIFx0XHRcdFRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKiBAcGFyYW0gXHRcdFx0e1N0cmluZ30gXHRcdCR1bml0IFx0XHRcdFRoZSB1bml0IGluIHdoaWNoIHRvIGNvbnZlcnQgdGhlIHZhbHVlXG4gKiBAcmV0dXJuIFx0XHRcdHtOdW1iZXJ9IFx0XHRcdFx0XHRcdFRoZSBjb252ZXJ0ZWQgdmFsdWVcbiAqXG4gKiBAZXhhbXBsZSAgICAgc2Nzc1xuICogLy8gaWYgdGhlIHNldHRpbmdzLnR5cG9ncmFwaHkuZm9udC1zaXplID09PSAxNnB4XG4gKiBzdWdhci5jb252ZXJ0KDI0cHgsIHJlbSkgLy8gMS41cmVtXG4gKiBzdWdhci5jb252ZXJ0KDNyZW0sIHB0KSAvLyAzNnB0XG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICAgIGlzLXVuaXRsZXNzXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLnVuaXRcbiAqIEB0eXBlICAgICAgZnVuY3Rpb25cbiAqXG4gKiBDaGVjayBpZiB0aGUgcGFzc2VkIHZhcmlhYmxlIGlzIHVuaXRsZXNzIG9yIG5vdFxuICpcbiAqIEBwYXJhbSAgICAgICAgIHtOdW1iZXJ9ICAgICAgICAkbnVtYmVyICAgICAgIFRoZSBudW1iZXIgdG8gY2hlY2tcbiAqIEByZXR1cm4gICAgICAgIHtCb29sZWFufSAgICAgICAgICAgICAgICAgICAgIHRydWUgaWYgdW5pdGxlc3MsIGZhbHNlIGlmIG5vdFxuICpcbiAqIEBleGFtcGxlICAgICAgIHNjc3NcbiAqIHN1Z2FyLmlzLXVuaXRsZXNzKDIwKTsgLy8gPT4gdHJ1ZVxuICogc3VnYXIuaXMtdW5pdGxlc3MoMTBweCk7IC8vID0+IGZhbHNlXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICBzdHJpcC11bml0c1xuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy51bml0XG4gKiBAdHlwZSAgICAgIGZ1bmN0aW9uXG4gKlxuICogUmV0dXJuIGEgbnVtYmVyIHdpdGhvdXQgYW55IHVuaXRzXG4gKlxuICogQHBhcmFtIFx0XHRcdHtOdW1iZXJ9IFx0XHQkbnVtYmVyIFx0XHRUaGUgbnVtYmVyIHRvIHByb2Nlc3NcbiAqIEByZXR1cm4gXHRcdFx0e051bWJlcn0gXHRcdFx0XHRcdFx0VGhlIG51bWJlciB3aXRob3V0IHVuaXRzXG4gKlxuICogQGV4YW1wbGUgICAgICAgc2Nzc1xuICogc3VnYXIuc3RyaXAtdW5pdHMoMTJweCk7IC8vID0+IDEyXG4gKiBzdWdhci5zdHJpcC11bml0cygzMHJlbSk7IC8vID0+IDMwXG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICB0by1lbVxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy51bml0XG4gKiBAdHlwZSAgICAgIGZ1bmN0aW9uXG4gKlxuICogQ29udmVydCB0aGUgcGFzc2VkIHZhbHVlIHRvIGVtXG4gKlxuICogQHBhcmFtIFx0XHRcdHtOdW1iZXJ9IFx0XHQkdmFsdWUgXHRcdFRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKiBAcmV0dXJuIFx0XHRcdHtOdW1iZXJ9IFx0XHRcdFx0XHRUaGUgZW0gY29udmVydGVkIHZhbHVlXG4gKlxuICogQGV4YW1wbGUgICAgIHNjc3NcbiAqIHN1Z2FyLnRvLWVtKDEwcHgpO1xuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgdG8tcGVyY2VudFxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy51bml0XG4gKiBAdHlwZSAgICAgIGZ1bmN0aW9uXG4gKlxuICogQ29udmVydCB0aGUgcGFzc2VkIHZhbHVlIHRvICVcbiAqXG4gKiBAcGFyYW0gXHRcdFx0e051bWJlcn0gXHRcdCR2YWx1ZSBcdFx0VGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqIEByZXR1cm4gXHRcdFx0e051bWJlcn0gXHRcdFx0XHRcdFRoZSAlIGNvbnZlcnRlZCB2YWx1ZVxuICpcbiAqIEBleGFtcGxlICAgICBzY3NzXG4gKiBzdWdhci50by1wZXJjZW50KDEwcHgpO1xuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgICB0by1wdFxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy51bml0XG4gKiBAdHlwZSAgICAgIGZ1bmN0aW9uXG4gKlxuICogQ29udmVydCB0aGUgcGFzc2VkIHZhbHVlIHRvIHB0XG4gKlxuICogQHBhcmFtIFx0XHRcdHtOdW1iZXJ9IFx0XHQkdmFsdWUgXHRcdFRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKiBAcmV0dXJuIFx0XHRcdHtOdW1iZXJ9IFx0XHRcdFx0XHRUaGUgcHQgY29udmVydGVkIHZhbHVlXG4gKlxuICogQGV4YW1wbGUgICAgICAgc2Nzc1xuICogc3VnYXIudG8tcHQoMTBweCk7XG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICB0by1weFxuICogQG5hbWVzcGFjZSAgICAgc3VnYXIuc2Nzcy51bml0XG4gKiBAdHlwZSAgICAgIGZ1bmN0aW9uXG4gKlxuICogQ29udmVydCB0aGUgcGFzc2VkIHZhbHVlIHRvIHB4XG4gKlxuICogQHBhcmFtIFx0XHRcdHtOdW1iZXJ9IFx0XHQkdmFsdWUgXHRcdFRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKiBAcmV0dXJuIFx0XHRcdHtOdW1iZXJ9IFx0XHRcdFx0XHRUaGUgcHggY29udmVydGVkIHZhbHVlXG4gKlxuICogQGV4YW1wbGUgICAgICAgc2Nzc1xuICogc3VnYXIudG8tcHgoMTByZW0pO1xuICpcbiAqIEBhdXRob3IgXHRcdFx0T2xpdmllciBCb3NzZWwgPG9saXZpZXIuYm9zc2VsQGdtYWlsLmNvbT4gKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi8qKlxuICogQG5hbWUgICAgdG8tcmVtXG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLnVuaXRcbiAqIEB0eXBlICAgICAgZnVuY3Rpb25cbiAqXG4gKiBDb252ZXJ0IHRoZSBwYXNzZWQgdmFsdWUgdG8gcmVtXG4gKlxuICogQHBhcmFtIFx0XHRcdHtOdW1iZXJ9IFx0XHQkdmFsdWUgXHRcdFRoZSB2YWx1ZSB0byBjb252ZXJ0XG4gKiBAcmV0dXJuIFx0XHRcdHtOdW1iZXJ9IFx0XHRcdFx0XHRUaGUgcmVtIGNvbnZlcnRlZCB2YWx1ZVxuICpcbiAqIEBleGFtcGxlICAgICBzY3NzXG4gKiBzdWdhci50by1yZW0oMTBweCk7XG4gKlxuICogQGF1dGhvciBcdFx0XHRPbGl2aWVyIEJvc3NlbCA8b2xpdmllci5ib3NzZWxAZ21haWwuY29tPiAoaHR0cHM6Ly9vbGl2aWVyYm9zc2VsLmNvbSlcbiAqL1xuLyoqXG4gKiBAbmFtZSAgICB1bml0XG4gKiBAbmFtZXNwYWNlICAgICBzdWdhci5zY3NzLnVuaXRcbiAqIEB0eXBlICAgICAgZnVuY3Rpb25cbiAqXG4gKiBSZXR1cm4gdGhlIHVuaXQgb2YgdGhlIHBhc3NlZCBudW1iZXJcbiAqXG4gKiBAcGFyYW0gICAgICAge051bWJlcn0gICAgICAkbnVtYmVyICAgICAgIFRoZSBudW1iZXIgdG8gZ2V0IHRoZSB1bml0IGZyb21cbiAqIEByZXR1cm4gICAgICB7U3RyaW5nfSAgICAgICAgICAgICAgICAgICAgVGhlIHVuaXRcbiAqXG4gKiBAZXhhbXBsZSAgICAgc2Nzc1xuICogc3VnYXIudW5pdCgxMHB4KTsgLy8gPT4gcHhcbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+IChodHRwczovL29saXZpZXJib3NzZWwuY29tKVxuICovXG4vKipcbiAqIFRoaXMgZmlsZSBpcyByZXNwb25zaWJsZSB0byByZWdpc3RlciB0aGUgc3RhdGljIGhlbHBlciBjbGFzc2VzIGxpa2U6XG4gKlxuICogLSBzdWdhci5oZWxwZXIucHVsbC5sZWZ0IDogPHByaW1hcnk+cHVsbC1sZWZ0PC9wcmltYXJ5PlxuICogLSBzdWdhci5oZWxwZXIucHVsbC5yaWdodCA6IDxwcmltYXJ5PnB1bGwtcmlnaHQ8L3ByaW1hcnk+XG4gKiAtIHN1Z2FyLmhlbHBlci5wb3NpdGlvbi5yZWxhdGl2ZSA6IDxwcmltYXJ5PnJlbGF0aXZlPC9wcmltYXJ5PlxuICogLSBzdWdhci5oZWxwZXIucG9zaXRpb24uYWJzb2x1dGUgOiA8cHJpbWFyeT5hYnNvbHV0ZTwvcHJpbWFyeT5cbiAqIC0gc3VnYXIuaGVscGVyLmNsZWFyLmxlZnQgOiA8cHJpbWFyeT5jbGVhci1sZWZ0PC9wcmltYXJ5PlxuICogLSBzdWdhci5oZWxwZXIuY2xlYXIucmlnaHQgOiA8cHJpbWFyeT5jbGVhci1yaWdodDwvcHJpbWFyeT5cbiAqIC0gc3VnYXIuaGVscGVyLmNsZWFyLmJvdGggOiA8cHJpbWFyeT5jbGVhcjwvcHJpbWFyeT5cbiAqIC0gc3VnYXIuaGVscGVyLnBvaW50ZXIuZXZlbnRzLmFsbCA6IDxwcmltYXJ5PnBvaW50ZXItZXZlbnRzLWFsbDwvcHJpbWFyeT5cbiAqIC0gc3VnYXIuaGVscGVyLnBvaW50ZXIuZXZlbnRzLm5vbmUgOiA8cHJpbWFyeT5wb2ludGVyLWV2ZW50cy1ub25lPC9wcmltYXJ5PlxuICogLSBzdWdhci5oZWxwZXIuZGlzcGxheS5zaG93IDogPHByaW1hcnk+c2hvdzwvcHJpbWFyeT5cbiAqIC0gc3VnYXIuaGVscGVyLmRpc3BsYXkuc2hvdy1pbmxpbmUgOiA8cHJpbWFyeT5zaG93LWlubGluZTwvcHJpbWFyeT5cbiAqIC0gc3VnYXIuaGVscGVyLmRpc3BsYXkuaGlkZGVuIDogPHByaW1hcnk+aGlkZGVuPC9wcmltYXJ5PlxuICogLSBzdWdhci5oZWxwZXIuZGlzcGxheS5oaWRlIDogPHByaW1hcnk+aGlkZTwvcHJpbWFyeT5cbiAqIC0gc3VnYXIuaGVscGVyLmRpc3BsYXkudmlzaWJsZSA6IDxwcmltYXJ5PnZpc2libGU8L3ByaW1hcnk+XG4gKiAtIHN1Z2FyLmhlbHBlci5kaXNwbGF5LmludmlzaWJsZSA6IDxwcmltYXJ5PmludmlzaWJsZTwvcHJpbWFyeT5cbiAqIC0gc3VnYXIuaGVscGVyLmRpc3BsYXkudmlzdWFsbHktaGlkZGVuIDogPHByaW1hcnk+dmlzdWFsbHktaGlkZGVuPC9wcmltYXJ5PlxuICogLSBzdWdhci5oZWxwZXIudGV4dC5oaWRkZW4gOiA8cHJpbWFyeT50LWhpZGRlbjwvcHJpbWFyeT5cbiAqIC0gc3VnYXIuaGVscGVyLnRleHQudHJ1bmNhdGUgOiA8cHJpbWFyeT50LXRydW5jYXRlPC9wcmltYXJ5PlxuICogLSBzdWdhci5oZWxwZXIudGV4dC5hbGlnbi5sZWZ0IDogPHByaW1hcnk+dC1sZWZ0PC9wcmltYXJ5PlxuICogLSBzdWdhci5oZWxwZXIudGV4dC5hbGlnbi5yaWdodCA6IDxwcmltYXJ5PnQtcmlnaHQ8L3ByaW1hcnk+XG4gKiAtIHN1Z2FyLmhlbHBlci50ZXh0LmFsaWduLmNlbnRlciA6IDxwcmltYXJ5PnQtY2VudGVyPC9wcmltYXJ5PlxuICogLSBzdWdhci5oZWxwZXIudGV4dC5hbGlnbi5qdXN0aWZ5IDogPHByaW1hcnk+dC1qdXN0aWZ5PC9wcmltYXJ5PlxuICogLSBzdWdhci5oZWxwZXIudGV4dC50cmFuc2Zvcm0ubG93ZXJjYXNlIDogPHByaW1hcnk+dC1sb3dlcmNhc2U8L3ByaW1hcnk+XG4gKiAtIHN1Z2FyLmhlbHBlci50ZXh0LnRyYW5zZm9ybS51cHBlcmNhc2UgOiA8cHJpbWFyeT50LXVwcGVyY2FzZTwvcHJpbWFyeT5cbiAqIC0gc3VnYXIuaGVscGVyLnRleHQudHJhbnNmb3JtLmNhcGl0YWxpemUgOiA8cHJpbWFyeT50LWNhcGl0YWxpemU8L3ByaW1hcnk+XG4gKiAtIHN1Z2FyLmhlbHBlci5mb250LndlaWdodC5ib2xkIDogPHByaW1hcnk+Zi1ib2xkPC9wcmltYXJ5PlxuICogLSBzdWdhci5oZWxwZXIuZm9udC53ZWlnaHQubGlnaHRlciA6IDxwcmltYXJ5PmYtbGlnaHRlcjwvcHJpbWFyeT5cbiAqIC0gc3VnYXIuaGVscGVyLmZvbnQud2VpZ2h0LmJvbGRlciA6IDxwcmltYXJ5PmYtYm9sZGVyPC9wcmltYXJ5PlxuICogLSBzdWdhci5oZWxwZXIuZm9udC53ZWlnaHQubm9ybWFsIDogPHByaW1hcnk+Zi1ub3JtYWw8L3ByaW1hcnk+XG4gKiAtIHN1Z2FyLmhlbHBlci5mb250LnN0eWxlLml0YWxpYyA6IDxwcmltYXJ5PmYtaXRhbGljPC9wcmltYXJ5PlxuICogLSBzdWdhci5oZWxwZXIuZm9udC5zdHlsZS5vYmxpcXVlIDogPHByaW1hcnk+Zi1vYmxpcXVlPC9wcmltYXJ5PlxuICogLSBzdWdhci5oZWxwZXIuZm9udC52YXJpYW50LnNtYWxsLWNhcHMgOiA8cHJpbWFyeT5mLXNtYWxsLWNhcHM8L3ByaW1hcnk+XG4gKiAtIHN1Z2FyLmhlbHBlci5ibG9jay5hbGlnbi5jZW50ZXIgOiA8cHJpbWFyeT5ibG9jay1jZW50ZXI8L3ByaW1hcnk+XG4gKiAtIHN1Z2FyLmhlbHBlci5yYXRpby4yMS05IDogPHByaW1hcnk+cmF0aW8tMjEtOTwvcHJpbWFyeT5cbiAqIC0gc3VnYXIuaGVscGVyLnJhdGlvLjE2LTkgOiA8cHJpbWFyeT5yYXRpby0xNi05PC9wcmltYXJ5PlxuICogLSBzdWdhci5oZWxwZXIucmF0aW8uNC0zIDogPHByaW1hcnk+cmF0aW8tNC0zPC9wcmltYXJ5PlxuICogLSBzdWdhci5oZWxwZXIucmF0aW8uMS0xIDogPHByaW1hcnk+cmF0aW8tMS0xPC9wcmltYXJ5PlxuICogLSBzdWdhci5oZWxwZXIuc2l6ZS5hYnMuY292ZXIgOiA8cHJpbWFyeT5hYnMtY292ZXI8L3ByaW1hcnk+XG4gKiAtIHN1Z2FyLmhlbHBlci5zaXplLmFicy5jb250YWluIDogPHByaW1hcnk+YWJzLWNvbnRhaW48L3ByaW1hcnk+XG4gKiAtIHN1Z2FyLmhlbHBlci5zaXplLmFicy5maXQgOiA8cHJpbWFyeT5hYnMtZml0PC9wcmltYXJ5PlxuICogLSBzdWdhci5oZWxwZXIubWVkaWEub2JqZWN0IDogPHByaW1hcnk+bW8gLm1vLS1jZW50ZXIgLm1vLS1lbmQgLm1vX19jb250ZW50PC9wcmltYXJ5PlxuICogLSBzdWdhci5oZWxwZXIuY2xlYXJmaXguZGVmYXVsdCA6IDxwcmltYXJ5PmNsZWFyZml4PC9wcmltYXJ5PlxuICogLSBzdWdhci5oZWxwZXIuY2xlYXJmaXguZmxvYXQgOiA8cHJpbWFyeT5jbGVhcmZpeC1mbG9hdDwvcHJpbWFyeT5cbiAqIC0gc3VnYXIuaGVscGVyLmNsZWFyZml4Lm1pY3JvIDogPHByaW1hcnk+Y2xlYXJmaXgtbWljcm88L3ByaW1hcnk+XG4gKiAtIHN1Z2FyLmhlbHBlci5jbGVhcmZpeC5vdmVyZmxvdyA6IDxwcmltYXJ5PmNsZWFyZml4LW92ZXJmbG93PC9wcmltYXJ5PlxuICogLSBzdWdhci5oZWxwZXIuY2xlYXJmaXguZmFjZWJvb2sgOiA8cHJpbWFyeT5jbGVhcmZpeC1mYWNlYm9vazwvcHJpbWFyeT5cbiAqIC0gc3VnYXIuaGVscGVyLm5vLXRyYW5zaXRpb24gOiA8cHJpbWFyeT5uby10cmFuc2l0aW9uPC9wcmltYXJ5PlxuICogLSBzdWdhci5oZWxwZXIuY2xlYXItdHJhbnNpdGlvbiA6IDxwcmltYXJ5PmNsZWFyLXRyYW5zaXRpb248L3ByaW1hcnk+XG4gKiAtIHN1Z2FyLmhlbHBlci5uby1hbmltYXRpb24gOiA8cHJpbWFyeT5uby1hbmltYXRpb248L3ByaW1hcnk+XG4gKiAtIHN1Z2FyLmhlbHBlci5jbGVhci1hbmltYXRpb24gOiA8cHJpbWFyeT5jbGVhci1hbmltYXRpb248L3ByaW1hcnk+XG4gKiAtIHN1Z2FyLmhlbHBlci5uby10cmFuc21hdGlvbiA6IDxwcmltYXJ5Pm5vLXRyYW5zbWF0aW9uPC9wcmltYXJ5PlxuICogLSBzdWdhci5oZWxwZXIuY2xlYXItdHJhbnNtYXRpb24gOiA8cHJpbWFyeT5jbGVhci10cmFuc21hdGlvbjwvcHJpbWFyeT5cbiAqXG4gKiBAYXV0aG9yIFx0XHRcdE9saXZpZXIgQm9zc2VsIDxvbGl2aWVyLmJvc3NlbEBnbWFpbC5jb20+ICAgKGh0dHBzOi8vb2xpdmllcmJvc3NlbC5jb20pXG4gKi9cbi5tby0tY2VudGVyIHtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cblxuLm1vLS1lbmQge1xuICBhbGlnbi1pdGVtczogZmxleC1lbmQ7XG59XG5cbi5tb19fY29udGVudCB7XG4gIGZsZXg6IDAgMSBhdXRvO1xufVxuXG4uaGVsbG8ge1xuICBjb250ZW50OiBcIndvcmxkXCI7XG59XG5cbmJvZHkge1xuICBjb250ZW50OiBcImhlbGxvIHdvcmxkXCI7XG59Il19 */
@use '../variables' as sugar;
@use 'sass:meta';
@use 'sass:string';
@use 'sass:map';
/**
 * @name      context
 * @namespace     sugar.scss.core.mixin
 * @type      mixin
 *
 * Set a context to be used inside the mixin
 *
 * @param 			{String|Map} 			$name-or-map 		The name of a registered context or a map
 *
 * @example     scss
 * // register a context
 * \@include sugar.context-setup(my-cool-context, (
 * 		look-and-feel : (
 * 			padding-vertical : (
 * 				default : 0.6em
 * 			)
 * 		)
 * ));
 *
 * // registered context
 * \@include sugar.context(my-cool-context) {
 * 		// your code here...
 * }
 *
 * // inline context
 * \@include sugar.context((
 * 		look-and-feel : (
 * 			padding-vertical : (
 * 				default : .3em
 * 			)
 * 		)
 * )) {
 * 		// your code here...
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
@mixin context($name-or-map) {
  @if (setting('debug.test-arguments')) {
    $name-or-map: test-argument(
      'sugar.context',
      'name-or-map',
      'string|map',
      $name-or-map
    );
  }
  $name: $name-or-map;

  // if the passes argument is a context map
  // register this context as new one
  @if meta.type-of($name-or-map) == "map" {
    $name: string.unique-id();
    @include context-setup($name, $name-or-map);
  }

  // check if the context exist
  $cont: map.get(sugar.$settings, contexts);
  $cont: map.get($cont, $name);
  @if not $cont {
    @error ("The context #{$name} does not exist. Please use the s-context-setup mixin to register your new context or pass directly a context map to this mixin...");
  }
  // $_sugar-previous-context : $_sugar-current-context !global;
  $previous-context: sugar.$current-context;
  sugar.$current-context: $name;
  @content;
  sugar.$current-context: $previous-context;
}

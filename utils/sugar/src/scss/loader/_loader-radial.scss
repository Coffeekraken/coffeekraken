/**
 * @name      loader-radial
 * @namespace     sugar.scss.loader
 * @type      function
 *
 * Generate a radial styled loader
 *
 * @param       {String}      [$shape=circle]       The shape of the items that make the circle. Can be rect or circle
 * @param       {Number}      [$size=1em]           The size of the items
 * @param       {Number}      [$width=0.2em]        The width of the circle loader
 * @param       {String}      [$style=solid]        The style of the items that form the loader. Can be none, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset, initial or inherit
 * @param       {Color}       [$color=color(primary)]     The color to use for the loader
 * @param       {Second}      [$a-duration=2s]      How many time will be the animation
 * @param       {Second}      [$a-delay=0s]         How many time to wait between two animation
 * @param       {Number}      [$a-count=2]          How many circles will be animated
 * @param       {Number}      [$a-spread=0]         Specify a spread value for the animation of each circles
 * @param       {String}      [$a-ease=linear]      Specify the ease to use for the animation
 *
 * @example       scss
 * .my-cool-loader {
 *    @include sugar.loader-radial();
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
@mixin loader-radial(
  $shape: circle,
  $size: 1em,
  $width: 0.2em,
  $style: solid,
  $color: color(primary),
  $a-duration: 2s,
  $a-delay: 0s,
  $a-count: 2,
  $a-spread: 0,
  $a-ease: linear
) {
  $shape: test-argument("sugar.loader-radial", "shape", (circle, rect), $shape);
  $size: test-argument("sugar.loader-radial", "size", number, $size);
  $width: test-argument("sugar.loader-radial", "width", number, $width);
  $style: test-argument(
    "sugar.loader-radial",
    "style",
    (
      none,
      hidden,
      dotted,
      dashed,
      solid,
      double,
      groove,
      ridge,
      inset,
      outset,
      initial,
      inherit
    ),
    $style
  );
  $color: test-argument(
    "sugar.loader-radial",
    "color",
    "color|list-color",
    $color
  );
  $a-duration: test-argument(
    "sugar.loader-radial",
    "a-duration",
    second,
    $a-duration
  );
  $a-delay: test-argument("sugar.loader-radial", "a-delay", second, $a-delay);
  $a-count: test-argument("sugar.loader-radial", "a-count", integer, $a-count);
  $a-spread: test-argument(
    "sugar.loader-radial",
    "a-spread",
    number,
    $a-spread
  );
  $a-ease: test-argument("sugar.loader-radial", "a-ease", string, $a-ease);

  // handle colors
  $colors: null;
  @if is($color, list-color) and list-length($color) > 1 {
    $colors: $color;
  }

  // manage duration
  $a-duration: $a-duration + $a-delay;

  // calculate percentage of delay
  $p-delay: 1;
  @if $a-delay > 0 {
    $p-delay: 1 - 1 / $a-duration * $a-delay;
  }

  $a-name: str-unquote("radial-#{str-unique-id()}");
  $step: math-percentage($p-delay / $a-count);
  $current: 0%;
  $current-idx: 1;
  @keyframes #{$a-name}-b {
    @for $i from 0 through $a-count - 1 {
      @if $current < 100 {
        #{$current} {
          transform: translateX(-50%) translateY(-50%) scaleX(0) scaleY(0);
          opacity: 0;
          top: 0;
          left: 0;
          @if $colors and list-length($colors) == $a-count * 2 {
            $c: list-nth($colors, $current-idx);
            border-color: $c;
            // background: radial-gradient(transparentize($c, 1) 30%, $c 50%, transparentize($c, 1) 70%);
          }
        }
        #{$current + $step / 2 - 0.0001%} {
          transform: translateX(-50%) translateY(-50%) scaleX(0.5) scaleY(0.5);
          opacity: 1;
          @if $colors and list-length($colors) == $a-count * 2 {
            $c: list-nth($colors, $current-idx);
            border-color: $c;
            // background: radial-gradient(transparentize($c, 1) 30%, $c 50%, transparentize($c, 1) 70%);
          }
        }
        #{$current + $step - 0.0001%} {
          transform: translateX(-50%) translateY(-50%) scaleX(1) scaleY(1);
          opacity: 0;
          @if $a-spread > 0 {
            $randX: math-random(math-round($a-spread));
            @if math-random(10) < 5 {
              $randX: $randX * -1;
            }
            $randY: math-random(math-round($a-spread));
            @if math-random(10) < 5 {
              $randY: $randY * -1;
            }
            top: $randY + str-unquote(unit($a-spread));
            left: $randX + str-unquote(unit($a-spread));
          }
          @if $colors and list-length($colors) == $a-count * 2 {
            $c: list-nth($colors, $current-idx);
            border-color: $c;
            // background: radial-gradient(transparentize($c, 1) 30%, $c 50%, transparentize($c, 1) 70%);
          }
        }
        #{$current + $step} {
          transform: translateX(-50%) translateY(-50%) scaleX(0) scaleY(0);
          top: 0;
          left: 0;
        }
      }
      $current: $current + $step;
      $current-idx: $current-idx + 2;
    }
  }
  $current: 0%;
  $current-idx: 2;
  @keyframes #{$a-name}-a {
    @for $i from 0 through $a-count - 1 {
      @if $current < 100 {
        #{$current} {
          transform: translateX(-50%) translateY(-50%) scaleX(0) scaleY(0);
          opacity: 0;
          top: 0;
          left: 0;
          @if $colors and list-length($colors) == $a-count * 2 {
            $c: list-nth($colors, $current-idx);
            border-color: $c;
            //background: radial-gradient(transparentize($c, 1) 30%, $c 50%, transparentize($c, 1) 70%);
          }
        }
        #{$current + $step / 2 - 0.0001%} {
          transform: translateX(-50%) translateY(-50%) scaleX(0.5) scaleY(0.5);
          opacity: 1;
          @if $colors and list-length($colors) == $a-count * 2 {
            $c: list-nth($colors, $current-idx);
            border-color: $c;
            // background: radial-gradient(transparentize($c, 1) 30%, $c 50%, transparentize($c, 1) 70%);
          }
        }
        #{$current + $step - 0.0001%} {
          transform: translateX(-50%) translateY(-50%) scaleX(1) scaleY(1);
          opacity: 0;
          @if $a-spread > 0 {
            $randX: math-random(math-round($a-spread));
            @if math-random(10) < 5 {
              $randX: $randX * -1;
            }
            $randY: math-random(math-round($a-spread));
            @if math-random(10) < 5 {
              $randY: $randY * -1;
            }
            top: $randY + str-unquote(unit($a-spread));
            left: $randX + str-unquote(unit($a-spread));
          }
          @if $colors and list-length($colors) == $a-count * 2 {
            $c: list-nth($colors, $current-idx);
            // background: radial-gradient(transparentize($c, 1) 30%, $c 50%, transparentize($c, 1) 70%);
            border-color: $c;
          }
        }
        #{$current + $step} {
          transform: translateX(-50%) translateY(-50%) scaleX(0) scaleY(0);
          top: 0;
          left: 0;
        }
      }
      $current: $current + $step;
      $current-idx: $current-idx + 2;
    }
  }

  position: relative;
  &:before,
  &:after {
    content: "";
    display: block;
    width: $size;
    height: $size;
    position: absolute;
    top: 0;
    left: 0;
    @include translate(-50%, -50%);
    opacity: 0;
    @if $shape == circle {
      border-radius: 50%;
    }
  }
  // cubic-bezier(1,.01,0,1)
  $c: $color;
  @if $colors and list-length($colors) >= 2 {
    $c: list-nth($colors, 1);
  }
  &:before {
    border: $width $style $c;
    // background: radial-gradient(transparentize($c, 1) 30%, $c 50%, transparentize($c, 1) 70%);
    animation: #{$a-name}-b $a-duration $a-ease 0s infinite;
  }
  @if $colors and list-length($colors) >= 2 {
    $c: list-nth($colors, 2);
  }
  &:after {
    border: $width $style $c;
    // background: radial-gradient(transparentize($c, 1) 30%, $c 50%, transparentize($c, 1) 70%);
    animation: #{$a-name}-a $a-duration $a-ease ($a-duration - $a-delay) / $a-count /
      2 infinite;
  }
}

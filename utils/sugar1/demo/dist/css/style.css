@charset "UTF-8";
/**
 * @name    color-hue
 * Return the hue of the passed color
 *
 * @param       {Color}     $color      The color to process
 * @return      {Number}                The color hue
 *
 * @example   scss
 * sugar.color-hue(#e1d7d2); // => 20deg
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      color-lightness
 * Return the lightness of the passed color
 *
 * @param         {Color}       $color      The color to check
 * @return        {Number}                  The color lightness
 *
 * @example     scss
 * sugar.color-lightness(#e1d7d2); // => 85.2941176471%
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name    color-opacity
 * Return the opacity of the passed color
 *
 * @param       {Color}       $color        The color to prcess
 * @return      {Number}                    The color opacity
 *
 * @example     scss
 * sugar.color-opacity(#e1d7d2); // => 1
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name    color-saturation
 * Return the saturation of the passed color
 *
 * @param       {Color}     $color      The color to process
 * @return      {Number}                The color saturation
 *
 * @example   scss
 * sugar.color-saturation(#e1d7d2); // => 20%
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name    color-transparentize
 * Makes $color more transparent.
 * The $amount must be a number between 0 and 1 (inclusive). Decreases the alpha channel of $color by that amount.
 *
 * @param       {Color}       $color        The color to process
 * @param       {Number}      $amount       The amount to transparentize the color. Must be between 0 and 1
 *
 * @example       scss
 * sugar.color-transparentize(rgba(#036, 0.3), 0.3); // => rgba(0, 51, 102, 0)
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Print the styleguide docblocks for the registered sugar colors
 *
 * @example
 * @include sugar.styleguide-colors();
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name    border-map
 * Parse and return the Map respresentation of a border property
 * The $border argument will be parsed with the [s-parse-properties](../core/functions/_s-parse-properties.scss) function.
 *
 * @param 		{List} 			$border 			The border property to parse
 * @return 		{Map} 								The Map represenration of the border
 *
 * @example
 * sugar.border-map(1px solid white);
 * // return
 * // (
 * // 	width : 1px,
 * // 	color : white,
 * // 	style : solid
 * // )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      columns-map
 * Return the Map representation of a columns properties
 *
 * @param  		{Interger} 			[$count=null] 			The number of columns
 * @param 		{Number} 			[$gap=null] 			The gap width between each columns
 * @param 		{String} 			[$fill=null] 			The fill property (balance,auto,initial,inherit)
 * @param 		{Number} 			[$width=null] 			The width of the columns
 * @param 		{Integer|String} 	[$span=null] 			The column-span property (1,all,initial,inherit)
 * @param 		{List} 				[$rule=null] 			The column-rule property
 * @param 		{String} 			[$rule-style=null]  	The column-rule-style property
 * @param 		{Color} 			[$rule-color=null] 		The column-rule-color property
 * @param 		{Number} 			[$rule-width=null] 		The column-rule-width property
 * @return 		{Map} 										The map representation or the columns properties
 *
 * @example
 * sugar.columns-map(2, 20px);
 * // return
 * // (
 * // 	column-count : 2,
 * // 	column-gap : 20px
 * // )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 *Â @name      margin-map
 * Parse and return the Map respresentation of a margin property
 * The $margin argument will be parsed with the [s-parse-properties](../core/functions/_s-parse-properties.scss) function.
 *
 * @param 			{List|Number} 			$margin 			The margin property to parse
 * @return 			{Map} 										The map representation
 *
 * @example   scss
 * sugar.margin-map(10px); // => ( top:10px, right:10px, bottom:10px, left:10px )
 * sugar.margin-map(10px 20px); // => ( top:10px, right:20px, bottom:10px, left:20px )
 * sugar.margin-map(5px 10px 15px 20px); // => ( top:5px, right:10px, bottom:15px, left:20px )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      position-map
 * Return the representation of a position styling like position:absolute; top:0; left:100%; etc...
 * This function gives you some shortcuts to align your element top, bottom, middle, center, etc...
 *
 * @param 		{String} 			[$position=absolute] 			The position css property
 * @param 		{String} 			[$vertical-align=top] 			The vertical alignement wanted (top,middle,bottom)
 * @param 		{String} 			[$align=left] 					The horizontal alignement wanted (left,center,right)
 * @param 		{Number} 			[$top=null] 					The top property wanted
 * @param 		{Number} 			[$right=null] 					The right property wanted
 * @param 		{Number} 			[$bottom=null] 					The bottom property wanted
 * @param 		{Number} 			[$left=null] 					The left property wanted
 * @return 		{Map} 												The map representation of the position wanted
 *
 * @example   scss
 * sugar.position-map(absolute, top, right);
 * sugar.position-map(absolute, middle, center);
 * sugar.position-map(relative, bottom, right);
 * sugar.position-map(absolute, bottom, center);
 * // etc...
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      rhythm-width
 * Return the Map properties representation for the rhythme width
 * The rhythme width is the width of an element that target a certain number of letters by line
 *
 * @param 			{Integer} 			[$letters-count=settings.typography.line-letters-count] 		The number of letters to target by line
 * @return 			{Map} 																		The Map properties representation
 *
 * @example     scss
 * sugar.rhythm-width(50);
 * // return
 * // (
 * // 	display : block,
 * // 	max-width : 50ex
 * // )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      translate-map
 * Return the Map properties representation of a translate x,y and z
 *
 * @param 			{Number} 			[$x=0] 			The x translate value
 * @param 			{Number} 			[$y=0] 			The y translate value
 * @param 			{Number} 			[$z=0] 			The z translate value
 * @return 			{Map} 								The translate Map representation
 *
 * @example
 * sugar.translate-map(10px,20px);
 * // return
 * // (
 * // 	transform: translateX(10px) translateY(20px) translateZ(0)
 * // )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      icon-base64
 * Get an icon in base64 url encoded format
 * Available icons:
 * - search
 * - arrow-down
 * - arrow-left
 * - arrow-up
 * - arrow-right
 * - angle-down
 * - angle-up
 * - angle-left
 * - angle-right
 * - check
 * - cross
 * - menu
 * - gear
 * - list
 * - refresh
 * - trash
 * - share
 * - edit
 * - save
 * - grid
 * - filter
 *
 * @param    {String}    $icon    The icon name wanted
 * @param    {String}    [$color="default"]    The color wanted
 *
 * @example       scss
 * .my-cool-div {
 *  background: url(sugar.icon-base64(search));
 * }
 *
 * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Append a value to the passed list
 *
 * @param           {List}        $list               The list to append the value to
 * @param           {Mixed}       $value              The value to append to the list
 * @param           {String}      [$separator=auto]   The separator to use. Can be auto, space or comma
 * @return          {List}                            The new list with the appended value
 *
 * @example
 * sugar.list-append(hello world, coco, comma); // hello, world, coco
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Return the first element of the passed list
 *
 * @param         {List}        $list         The list to get the first element from
 * @return        {Mixed}                     The first element of the list
 *
 * @example
 * sugar.list-first(('hello', 'world')); // => 'hello'
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Join all the list items using the passed glue and return a string
 *
 * @param           {List}          $list           The list to implode
 * @param           {String}        [$glue=""]      The glue to use to implode the list
 * @return          {String}                        The imploded list in string format
 *
 * @example
 * sugar.list-implode(('hello','world'), '-'); // hello-world
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name    list-index
 * Return the index of the wanted value in the passed list.
 *
 * @param       {List}      $list       The list to process
 * @param       {Mixed}     $value      The value to search in the list
 * @return      {Number}                The index of the founded value or null
 *
 * @example     scss
 * sugar.list-index(('hello','world'), 'world'); // => 2
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Return a string representing all the list items
 *
 * @param         {List}        $list1         The list to process
 * @param         {List}        $list2         The list to join with the first one
 * @param         {String}      [$separator=auto]     The separator to use for the list. Can be auto, comma or space
 * @param         {String|Boolean}    [$bracketed=auto]     If true is passed, the list will be bracketed
 * @return        {String}                    The new list
 *
 * @example     scss
 * sugar.list-join(('hello','world'), ('coco'), space); // ('hello' 'world' 'coco')
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Return the last item of the passed list
 *
 * @param     {List}    $list     The list to get the last item from
 * @return    {Mixed}             The last item of the list
 *
 * @example
 * sugar.list-last-nth(('hello', 'world')); // 'world'
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      list-length
 * Return the number of item in the passed list
 *
 * @param       {List}      $list         The list to check
 * @return      {Number}                  The count of item in the list
 *
 * @example     scss
 * sugar.list-length(('hello','world')); // => 2
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      list-set-nth
 * Set a value in the passed list at the passed index. The original value at the passed index will be replaced with the passed value
 *
 * @param       {List}      $list       The list to process
 * @param       {Number}    $index      The index to set the value in the list
 * @param       {Mixed}     $value      The value to set in the list
 * @return      {List}                  The new processed list
 *
 * @example       scss
 * sugar.list-set-nth(('hello','world'), 1, 'coco'); // => ('coco','world')
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name    list-nth
 * Return the item of the list at the passed index
 *
 * @param         {List}        $list         The list to process
 * @param         {Number}      $index        The index of the element to get in the list
 * @return        {Mixed}                     The value at the passed index
 *
 * @example     scss
 * sugar.list-nth(('hello','world'), 2); // => 'world'
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Remove the last item of the passed list
 *
 * @param       {List}        $list         The list to process
 * @return      {List}                      The processed list
 *
 * @example
 * sugar.list-pop(('hello', 'world')); // ('hello')
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Prepend a value in the passed list
 *
 * @param         {List}        $list           The list to process
 * @param         {Mixed}       $value          The value to prepend in the list
 * @param         {String}      [$separator=auto]   The separator to use. Can be auto, space or comma
 * @return        {List}                        The new list with his new value
 *
 * @example   scss
 * sugar.list-prepend(('hello','world'), 'coco'); // => ('coco','hello','world')
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Remove item from list using an index
 *
 * @param         {List}          $list           The list to process
 * @param         {Number}        $index          The index of the item to remove from the list
 * @return        {List}                          The processes list
 *
 * @example
 * sugar.list-remove-nth(('hello','world'), 1); // ('hello')
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Search for the passed value in the passed list and return true if exist, false if not
 *
 * @param           {List}          $list           The list in which to search for the passed value
 * @param           {Mixed}         $value          The value to search in the List
 * @return          {Boolean}                       true if the value exist in the list, false if not
 *
 * @example   scss
 * sugar.list-search(('hello', 'world'), 'hello'); // => true
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      loader-bars
 * Generate a full animated, single element, bars loader
 *
 * @param 			{String} 			[$shape=rect] 				The shape of the bars (rect,circle)
 * @param 			{Color} 			[$color=primary] 			The color(s) of the loader. Can be a list of colors
 * @param 			{Number} 			[$width=.5em] 				The width of each bars
 * @param 			{Number} 			[$height=2em] 				The height of each bars
 * @param 			{Integer} 			[$count=5] 					How many bars you want
 * @param 			{Number} 			[$gap=.5em] 				The gap between each bars
 * @param 			{Number} 			[$opacity=1] 				The initial opacity of each bars
 * @param 			{Number} 			[$a-opacity=null] 			The opacity of the animated bars
 * @param 			{Second} 			[$a-duration=1s] 			The overall animation duration
 * @param 			{Second} 			[$a-delay=0s] 				The delay between two animation cycle
 * @param 			{Integer} 			[$a-near=1] 				How many bars are affected by the animated one
 * @param 			{String} 			[$a-ease=ease-in-out] 		The ease to use to animate each bars
 * @param 			{Number} 			[$a-offset=null] 			The offset to move the animated bar
 * @param 			{String} 			[$a-direction=both] 		The direction in which to move the bars (up,down,both)
 * @param 			{Boolean} 			[$a-continuous=true] 		If true, the first bars will be animated at same time at the last ones
 *
 * @example
 * .my-cool-loader {
 * 		\@include sugar.loader-bars(
 * 			$color : primary,
 * 			$a-offset : .5em
 * 		);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      loader-circle
 * Generate a full animated, single element, circle loader
 *
 * @param 			{Color} 			[$color=primary] 			The color(s) of the loader. Can be a list of colors
 * @param 			{Number} 			[$size=.33em] 				The size of each dot
 * @param 			{Number} 			[$radius=1em] 				The distance of each dot from the center of the loader
 * @param 			{Integer} 			[$count=5] 					How many bars you want
 * @param 			{Number} 			[$opacity=1] 				The initial opacity of each bars
 * @param 			{Number} 			[$a-opacity=null] 			The opacity of the animated bars
 * @param 			{Second} 			[$a-duration=1s] 			The overall animation duration
 * @param 			{Second} 			[$a-delay=0s] 				The delay between two animation cycle
 * @param 			{Integer} 			[$a-near=1] 				How many bars are affected by the animated one
 * @param 			{String} 			[$a-ease=ease-in-out] 		The ease to use to animate each bars
 *
 * @example     scss
 * .my-cool-loader {
 *    @include sugar.loader-circle(
 *      $color: sugar.color(primary)
 *    );
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      loader-couch-potato
 * Generate a full animated, single element, couch-potato style loader
 *
 * @param 		{Number} 		[$size=1em] 				The size of the loader
 * @param 		{Color} 		[$color=primary] 			The color of the loader
 * @param 		{Second} 		[$a-duration=1s] 			The overall animation duration
 * @param 		{Second} 		[$a-delay=0s] 				The delay between two animation cycle
 * @param 		{String} 		[$a-ease=ease-in-out]		The ease to use for the animation
 * @param 		{Degree}		[$a-rotate=360deg] 			The animation rotation
 * @param 		{Number} 		[$a-scale=.7] 				The animation scale
 *
 * @example     scss
 * .my-cool-loader {
 * 		\@include sugar.loader-couch-potato();
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      loader-flip-ball
 * Generate a full animated, single element, flip ball style loader
 *
 * @param 		{String} 		[$shape=circle] 			The shape of the loader (circle,rect)
 * @param 		{Number} 		[$size=1em] 				The size of the loader
 * @param 		{Color} 		[$color=primary] 			The color of the loader. Can be a list of colors
 * @param 		{Second} 		[$a-duration=1s] 			The overall animation duration
 * @param 		{Second} 		[$a-delay=0s] 				The delay between two animation cycle
 * @param 		{String} 		[$a-ease=ease-in-out]		The ease to use for the animation
 *
 * @example
 * .my-cool-loader {
 * 		\@include sugar.loader-flip-ball();
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      loader-grid
 * Generate a grid style loader
 *
 * @param       {String}      [$shape=rect]             The shape of the grid items. Can be rect or circle
 * @param       {Color}       [$color=color(primary)]   The color to use for the grid items
 * @param       {Number}      [$cols=5]                 How many columns the grid must have
 * @param       {Number}      [$rows=5]                 How many rows must have the grid
 * @param       {Number}      [$size=10px]              The size of each grid items
 * @param       {Number}      [$gap=5px]                The size of the gaps between the grid items
 * @param       {Number}      [$offset=200px]           The offset used for the grid
 * @param       {Number}      [$rotate=0deg]            Apply a rotation to the grid items
 * @param       {String}      [$a-shape=null]           The animation shape to apply to the grid items. Can be rect or circle
 * @param       {Number}      [$a-steps=5]              How many steps must have the animation
 * @param       {Number}      [$a-spread=null]          How much must the grid items spread during the animation
 * @param       {Number}      [$a-rotate=null]          How many degrees must the grid items rotate during the animation
 * @param       {Number}      [$a-scale=null]           Apply a scale for the animation of the grid items
 * @param       {Number}      [$a-opacity=null]         Apply an opacity to the grid items during the animation
 * @param       {Second}      [$a-duration=1s]          The duration of the animation
 * @param       {Second}      [$a-delay=0s]             How many seconds to wait between each animations
 * @param       {String}      [$a-ease=ease-in-out]     The easing to use for the animation
 *
 * @example     scss
 * .my-cool-loader {
 *    @include sugar.loader-grid();
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      loader-radial
 * Generate a radial styled loader
 *
 * @param       {String}      [$shape=circle]       The shape of the items that make the circle. Can be rect or circle
 * @param       {Number}      [$size=1em]           The size of the items
 * @param       {Number}      [$width=0.2em]        The width of the circle loader
 * @param       {String}      [$style=solid]        The style of the items that form the loader. Can be none, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset, initial or inherit
 * @param       {Color}       [$color=color(primary)]     The color to use for the loader
 * @param       {Second}      [$a-duration=2s]      How many time will be the animation
 * @param       {Second}      [$a-delay=0s]         How many time to wait between two animation
 * @param       {Number}      [$a-count=2]          How many circles will be animated
 * @param       {Number}      [$a-spread=0]         Specify a spread value for the animation of each circles
 * @param       {String}      [$a-ease=linear]      Specify the ease to use for the animation
 *
 * @example       scss
 * .my-cool-loader {
 *    @include sugar.loader-radial();
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      loader-spinner
 * Generate a spinner loader
 *
 * @param         {String}        [$type=linear]          Specify the type of spinner loader that you want. Can be elastic, linear, fade-in, fade-out or fade-in-out
 * @param         {Number}        [$size=1em]             Specify the size of the spinner loader
 * @param         {Number}        [$width=0.3em]          Specify the width of the spinner loader
 * @param         {Color}         [$color=color(primary)]   Specify the color of the spinner loader
 * @param         {Color}         [$bgcolor=inherit]        Specify the background color of the spinner loader
 * @param         {Number}        [$length=3/4]           The length of the spinner loader
 * @param         {Second}        [$a-duration=1s]        The duration of the spinner loader animation
 * @param         {String}        [$a-ease=null]          Specify an ease to use for the spinner loader animation
 *
 * @example     scss
 * .my-cool-loader {
 *    @include sugar.loader-spinner();
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      math-abs
 * Return the absolute version of the passed number
 *
 * @param         {Number}        $number       The number to process
 * @return        {Number}                      The absolute version of the number
 *
 * @example     scss
 * sugar.math-abs(-10); // => 10
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Store the current context
 * @type      {String}
 */
/**
 * Store the current registered font size
 * @type      {Number}
 */
/**
 * Stpre aÃ©Ã© the classes in their namespaces
 * @type      (Map)
 */
/**
 * Some variables used in the math functions
 */
/**
 * Store all the settings
 * @type      {Map}
 */
/**
 * @name      math-acos
 * Calculate the cosinus inverse of the passed angle
 *
 * @param         {Number}        $angle          The angle to calculate the cosinus inverse from
 * @param         {String}        [$unit=deg]     The wanted unit. Can de deg, rad, grad or turn
 * @return         {Number}                       The calculated cosinus inverse
 *
 * @example     scss
 * sugar.math-acos(1, deg); // 0.0559529097deg
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Store the current context
 * @type      {String}
 */
/**
 * Store the current registered font size
 * @type      {Number}
 */
/**
 * Stpre aÃ©Ã© the classes in their namespaces
 * @type      (Map)
 */
/**
 * Some variables used in the math functions
 */
/**
 * Store all the settings
 * @type      {Map}
 */
/**
 * @name      math-asin
 * Calculate the sinus inverse
 *
 * @param         {Number}        $value        The value to use
 * @param         {String}        [$unit=deg]   The unit wanted. Possible values are deg, rad, grad and turn
 * @return        {Number}                      The calculated asin
 *
 * @example     scss
 * sugar.math-asin(1, rad); // => 1.5698197643rad
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      math-atan
 * Calculate the tangent inverse of the passed angle
 *
 * @param       {Number}      $angle        The angle to calculate the tangent inverse from
 * @param       {String}      [$unit=deg]   The wanted unit. Can be deg, rad, grad or turn
 * @return      {Number}                    The calculated tangent inverse of the passed angle
 *
 * @example       scss
 * sugar.math-atan(10, deg); // => 84.2988568542deg
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name    math-ceil
 * Rounds $number up to the next highest whole number
 *
 * @param       {Number}      $number       The number to process
 * @return      {Number}                    The up rounded number
 *
 * @example     scss
 * sugar.math-ceil(4.2); // => 5
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Store the current context
 * @type      {String}
 */
/**
 * Store the current registered font size
 * @type      {Number}
 */
/**
 * Stpre aÃ©Ã© the classes in their namespaces
 * @type      (Map)
 */
/**
 * Some variables used in the math functions
 */
/**
 * Store all the settings
 * @type      {Map}
 */
/**
 * @name    math-convert-angle
 * Convert the passed angle into another unit like rad, deg, grad or turn
 *
 * @param           {Number}            $value          The angle value to convert
 * @param           {String}            $unit           The wanted unit. Can be rad, deg, grad or turn
 * @return          {Number}                            The converted angle value
 *
 * @example   scss
 * sugar.math-convert-angle()
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Store the current context
 * @type      {String}
 */
/**
 * Store the current registered font size
 * @type      {Number}
 */
/**
 * Stpre aÃ©Ã© the classes in their namespaces
 * @type      (Map)
 */
/**
 * Some variables used in the math functions
 */
/**
 * Store all the settings
 * @type      {Map}
 */
/**
 * @name      math-cos
 * Calculate the cosinus of the passed angle
 *
 * @param         {Number}        $angle      The angle to calculate the cosinus from
 * @return        {Number}                    The calculated cosinus
 *
 * @example     scss
 * sugar.math-cos(10); // => 6.6645643378
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      math-deg
 * Convert the passed unitless angle to degree
 *
 * @param         {Number}Â        $angle      The angle to convert to degree
 * @return        {Number}                    The degree version of the angle
 *
 * @example     scss
 * sugar.math-deg(10); // => 572.9577951308deg
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      math-even
 * Convert the passed value to the closest even value
 *
 * @param 			{Number} 		$value 		The value to convert
 * @return 			{Number} 					The closest even converted value
 *
 * @example     scss
 * sugar.math-even(9); // => 10
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      math-fact
 * Returns the factorial of desired number
 *
 * @param         {Number}          $number         The number to calculate the factorial number
 * @return        {Number}                          The calculated factorial of the passed number
 *
 * @example     scss
 * sugar.math-fact(5); // => 120
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      math-grad
 * Convert the passed unitless angle to gradian
 *
 * @param         {Number}Â        $angle      The angle to convert to gradian
 * @return        {Number}                    The gradian version of the angle
 *
 * @example     scss
 * sugar.math-grad(10); // => 636.6197723675grad
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      math-odd
 * Convert the passed value to the closest odd value
 *
 * @param 			{Number} 		$value 		The value to convert
 * @return 			{Number} 					The closest odd converted value
 *
 * @example     scss
 * sugar.math-odd(10); // => 9
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      math-percentage
 * Converts a unitless $number (usually a decimal between 0 and 1) to a percentage.
 *
 * @param         {Number}          $number           The number to convert into percentage
 * @return        {Number}                            The percentage converted
 *
 * @example
 * sugar.math-percentage(0.2); // => 20%
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Return the calculated power of the passed base using the passed exponent
 *
 * @param         {Number}        $base         The base number
 * @param         {Number}        $exponent     The exponent used to raise the base
 * @return        {Number}                      The calculated power number
 *
 * @example    scss
 * sugar.math.pow(7, 3); // => 343
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      math-rad
 * Convert the passed unitless angle to radian
 *
 * @param         {Number}Â        $angle      The angle to convert to radian
 * @return        {Number}                    The radian version of the angle
 *
 * @example     scss
 * sugar.math-rad(10); // => 10rad
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name    math-random
 * If $limit is null, returns a random decimal number between 0 and 1.
 *
 * @param       {Number}      [$limit:null]     The limit to generate a number under that
 * @return      {Number}                        The generated number
 *
 *Â @example     scss
 * sugar.math-random(); // => 0.2821251858
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name    math-round
 * Rounds $number to the nearest whole number.
 *
 * @param       {Number}      $number       The number to round
 * @return      {Number}                    The rounded number
 *
 * @example     scss
 * sugar.math-round(4.2); // => 4
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Store the current context
 * @type      {String}
 */
/**
 * Store the current registered font size
 * @type      {Number}
 */
/**
 * Stpre aÃ©Ã© the classes in their namespaces
 * @type      (Map)
 */
/**
 * Some variables used in the math functions
 */
/**
 * Store all the settings
 * @type      {Map}
 */
/**
 * @name    math-sin
 * Calculate the sinus of the passed angle
 *
 * @param       {Number}      $angle        The angle to calculate the sinus from
 * @return      {Number}                    The calculated sinus
 *
 * @example     scss
 * sugar.math-sin(10); // => 2.761090926
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name  math-sqrt
 * Return the square root of the passed number
 *
 * @param         {Number}Â        $number       The number to process
 * @return        {Number}                      The square root of the passed number
 *
 * @example   scss
 * sugar.math-sqrt(2); // => 1.41421356237
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      math-tan
 * Calculate the tangent of the passed angle
 *
 * @param         {Number}        $angle        The angle to calculate the tangent from
 * @return        {Number}                      The calculated tangent
 *
 * @example       scss
 * sugar.math-tan(10); // => 0.4142942863
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      math-turn
 * Convert the passed unitless angle to turn
 *
 * @param         {Number}Â        $angle      The angle to convert to turn
 * @return        {Number}                    The turn version of the angle
 *
 * @example     scss
 * sugar.math-turn(10); // => 1.5915494309turn
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Store the current context
 * @type      {String}
 */
/**
 * Store the current registered font size
 * @type      {Number}
 */
/**
 * Stpre aÃ©Ã© the classes in their namespaces
 * @type      (Map)
 */
/**
 * Some variables used in the math functions
 */
/**
 * Store all the settings
 * @type      {Map}
 */
/**
 * @name      convert
 * Convert a passed value to the wanted unit
 * The conversion between some units that depends on a font-size will take the settings.typography.font-size value as reference.
 *
 * Available conversions
 * - from px
 * 	- to em
 * 	- to rem
 * 	- to pt
 * 	- to %
 *
 * - from em
 * 	- to rem
 * 	- to px
 * 	- to pt
 * 	- to %
 *
 * - from pt
 * 	- to em
 * 	- to rem
 * 	- to px
 * 	- to pt
 * 	- to %
 *
 * - from rem
 * 	- to em
 * 	- to px
 * 	- to pt
 * 	- to %
 *
 * @param 			{Number} 		$value 			The value to convert
 * @param 			{String} 		$unit 			The unit in which to convert the value
 * @return 			{Number} 						The converted value
 *
 * @example
 * // if the settings.typography.font-size === 16px
 * sugar.convert(24px, rem) // 1.5rem
 * sugar.convert(3rem, pt) // 36pt
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Check if the passed variable is unitless or not
 *
 * @param         {Number}        $number       The number to check
 * @return        {Boolean}                     true if unitless, false if not
 *
 * @example
 * sugar.is-unitless(20); // => true
 * sugar.is-unitless(10px); // => false
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Check if the passed value is of a certain type
 *
 * Here's the available types that you can check
 * - mixed => mean anything
 * - null
 * - url
 * - px
 * - pt
 * - rem
 * - em
 * - percent |Â %
 * - vw
 * - vh
 * - ex
 * - ch
 * - cm
 * - mm
 * - in
 * - pc
 * - s |Â second
 * - boolean |Â bool
 * - function
 * - number
 * - int |Â integer
 * - string
 * - color
 * - list
 * - map
 * - deg |Â degree
 * - list-{type} => check if is a list of the specified type
 * - map-{type} => check if is a map of the specified type
 *
 * @param 			{Mixed} 			$value 			The value to check
 * @param 			{String} 			$type 			The type to check
 * @return 			{Boolean} 							true if match the type, false if not
 *
 * @example
 * sugar.is(hello, string) // => true
 * sugar.is('hello', string) // => true
 * sugar.is(#fff, color) // => true
 * sugar.is(hello #fff, list-color) // => false
 * sugar.is(#fff #ddd, list-color) // => true
 * // etc...
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Return a number without any units
 *
 * @param 			{Number} 		$number 		The number to process
 * @return 			{Number} 						The number without units
 *
 * @example
 * sugar.strip-units(12px); // => 12
 * sugar.strip-units(30rem); // => 30
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Convert the passed value to em
 *
 * @param 			{Number} 		$value 		The value to convert
 * @return 			{Number} 					The em converted value
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Convert the passed value to %
 *
 * @param 			{Number} 		$value 		The value to convert
 * @return 			{Number} 					The % converted value
 *
 * @example
 * sugar.to-percent(10px);
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Convert the passed value to pt
 *
 * @param 			{Number} 		$value 		The value to convert
 * @return 			{Number} 					The pt converted value
 *
 * @example
 * sugar.to-pt(10px);
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Convert the passed value to px
 *
 * @param 			{Number} 		$value 		The value to convert
 * @return 			{Number} 					The px converted value
 *
 * @example
 * sugar.to-px(10rem);
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Convert the passed value to rem
 *
 * @param 			{Number} 		$value 		The value to convert
 * @return 			{Number} 					The rem converted value
 *
 * @example
 * sugar.to-rem(10px);
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Get the type of the passed variable
 *
 * @param           {Mixed}         $variable       The variable to get the type of
 * @return          {String}                        The type of the variable passed
 *
 * @example
 * sugar.type-of('hello world'); // => string
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name    unit
 * Return the unit of the passed number
 *
 * @param       {Number}      $number       The number to get the unit from
 * @return      {String}                    The unit
 *
 * @example     scss
 * sugar.unit(10px); // => px
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Get values of a map even if it is deep
 *
 * @param       {Map}       $map        The map to get values from
 * @return      {List}                  The list of map values
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Extend the passed map with the others passed map(s)
 *
 * @param           {Map}         $map        The map to @extend
 * @param           {Map|List-Map}  $maps     The map(s) used to extend the first one
 * @return          {Map}                     The extended map
 *
 * @example
 * sugar.map-extend((
 *  'hello': 'world'
 * ), (
 *  'coco': 'plop'
 * ));
 * // returned map:
 * (
 *  'hello': 'world',
 *  'coco': 'plop'
 * )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Store the current context
 * @type      {String}
 */
/**
 * Store the current registered font size
 * @type      {Number}
 */
/**
 * Stpre aÃ©Ã© the classes in their namespaces
 * @type      (Map)
 */
/**
 * Some variables used in the math functions
 */
/**
 * Store all the settings
 * @type      {Map}
 */
/**
 * Get a settings from the global settings stack
 *
 * @param 				{String} 			$path 						The setting path wanted separated by dots
 * @param 				{String} 			[$context=s-context()] 		The context name to get the setting
 * @param 				{Mixed} 			[$default=null] 			The value to return if no value is found
 * @return 				{Mixed} 										The setting valueÂ¨
 *
 * @example
 * $font-size : sugar.setting('typography.font-size');
 * // etc...
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Test an argument passed to a function or a mixin to ensure his type, value, etc...
 * If the argument does not pass the test, an error will be thrown, unless the $check-only argument is true
 *
 * @param 				{String} 				$method 				The function/mixin name (debug purpose)
 * @param 				{String} 				$argument 				The argument name to test (debug purpose)
 * @param 				{List|String} 			$type-or-values 		If string, the type(s) that the argument must match, if list, the possible values that the argument can take
 * @param 				{Mixed} 				$value 					The actual argument value
 * @param 				{Boolean} 				[$check-only=false]		If this is true, will not thrown any error
 * @return 				{Mixed} 										The value if ok, false if not
 *
 * @example
 * \@mixin my-cool-mixin($argument1, $argument2) {
 *        $argument1 : sugar.test-argument(my-cool-mixin, argument1, string, $argument1);
 *        $argument2 : sugar.test-argument(my-cool-mixin, argument2, (hello,world,12), $argument2);
 * }
 * \@mixin my-cool-mixin(hello, world); // ok
 * \@mixin my-cool-mixin(hello, universe); // throw an error
 * \@mixin my-cool-mixin(12, world); // throw an error
 *
 * @author 				Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Set a map property with the passed value
 * @param 			{Map} 			$map 		The map to modify
 * @param       {String}    $key    The key to set the propery to
 * @param       {Mixed}     $value  The value to set
 * @return 			{Map} 					    The updated map
 *
 * @example
 * $my-map : sugar.map-set($my-map, 'coco', 'Something cool');
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Return all the map values that have a key that match the passed namespace
 *
 * @param           {Map}         $map          The map to process
 * @param           {String}      $namespace    The namespace to search like (something.another.thing)
 * @return          {Map}                       The filtered map
 *
 * @example
 * sugar.map-filter-by-namespace((
 *  'hello.world': 'Hello',
 *  'coco.world': 'Coco',
 *  'hello.that': 'That is cool'
 * ), 'hello');
 * // return that map:
 * (
 *   'hello.world': 'Hello',
 *   'hello.that': 'That is cool'
 * )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Get a map value by passing a list of wanted indexes, or return the default passed value
 *
 * @param         {Map}         $map              The map to get the value from
 * @param         {List}        $index-list       The list of indexes to try to get
 * @param         {Midex}       [$default=null]   The default value to return if nothing is found in the map
 *
 * @example
 * sugar.map-get-or((
 *  coco: 'hello',
 *  plop: 'world'
 * ), plop, null); // 'world'
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Return the map value depending on the passed path
 *
 * @param       {Map}       $map        The map in which to get the value
 * @param       {String}    $path       The path to get the value from
 * @param       {Mixed}     [$default:null]       The default value to return if none exist
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Get a value in the passed map using the passed key
 *
 * @param         {Map}         $map        The map to get the value from
 * @param         {String}      $key        The key to get the value in the map
 * @param         {Mixed}                   The getted value
 *
 * @example
 * sugar.map-get((
 *  hello: 'world'
 * ), hello); // => 'world'
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name     map-has-key
 * Check if the passed map has the passed key. Return true if has, false if not
 *
 * @param           {Map}         $map        The map to check
 * @param           {String}      $key        The key to check in the map
 * @return          {Boolean}                 true if has the key, false if not
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name  map-keys
 * Return a comma separated list of the map keys
 *
 * @param       {Map}       $map      The map to process
 * @return      {List}                The list of map keys
 *
 * @example     scss
 * sugar.map-keys((
 *  'hello': 'world',
 *  'coco': 'plop'
 * )); // => ('hello','coco')
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Merge the first passed map with the second passed one and return the result
 *
 * @param           {Map}         $map1         The first map to extend
 * @param           {Map}         $map2         The second map to extend the first one with
 * @return          {Map}                       The extended map
 *
 * @example
 * sugar.map-merge((
 *  hello: 'world'
 * ), (
 *  coco: 'plop'
 * ));
 * // returned map:
 * (
 *  hello: 'world',
 *  coco: 'plop'
 * )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Remove one or multiple keys from the passed map
 *
 * @param           {Map}         $map          The map to process
 * @param           {String}      $keys...      The key(s) to remove
 * @return          {Map}                       The processed map
 *
 * @example
 * sugar.map-remove((
 *  hello: 'world',
 *  coco: 'plop'
 * ), coco);
 * // returned map:
 * (
 *  hello: 'world'
 * )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Set a map property with the passed value
 * @param 			{Map} 			$map 		The map to modify
 * @param       {String}    $key    The key to set the propery to
 * @param       {Mixed}     $value  The value to set
 * @return 			{Map} 					    The updated map
 *
 * @example
 * $my-map : sugar.map-set($my-map, 'coco', 'Something cool');
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      background
 * Helper mixin to set a background image
 *
 * @param 			{String} 				[$repeat=null] 				The background-repeat property
 * @param 			{String} 				[$size=null] 				The background-size property
 * @param 			{String} 				[$attachment=null] 			The background-attachment property
 * @param 			{String} 				[$blend-mode=null] 			The background-blend-mode property
 * @param 			{String} 				[$clip=null] 				The background-clip property
 * @param 			{String} 				[$url=null] 				The background-image url property
 * @param 			{Number} 				[$width=null] 				The background-size width property
 * @param 			{Number} 				[$height=null] 				The background-size height property
 * @param 			{Number} 				[$top=null] 				The background-position top property
 * @param 			{Number} 				[$left=null] 				The background-position left property
 * @param 			{String} 				[$suffix2x=@2x] 			The suffix to add the the url if the 2x resolution if wanted
 * @param 			{String} 				[$suffix3x=@3x] 			The suffix to add the the url if the 3x resolution if wanted
 * @param 			{String} 				[$suffix4x=@4x] 			The suffix to add the the url if the 4x resolution if wanted
 * @param 			{List} 					[$resolution=null] 			The resolution wanted like 2x, 3x and 4x
 * @param 			{List} 					[$position=null] 			The background-position property
 *
 * @example
 * .my-cool-element {
 * 		\@include sugar.background(
 * 			$url : 'img/my-cool-image.jpg',
 * 			$size : cover,
 * 			$resolution : 2x 3x 4x
 * 		);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      border-radius
 * Apply some border radius
 *
 * @param 		{Number} 		[$radius=null] 			The radius to apply globally
 * @param 		{Number} 		[$top=null] 			The radius to apply on top corners
 * @param 		{Number} 		[$right=null] 			The radius to apply on right corners
 * @param 		{Number} 		[$bottom=null] 			The radius to apply on bottom corners
 * @param 		{Number} 		[$left=null] 			The radius to apply on left corners
 * @param 		{Number} 		[$top-left=null] 		The radius to apply on top-left corners
 * @param 		{Number} 		[$top-right=null] 		The radius to apply on top-right corners
 * @param 		{Number} 		[$bottom-left=null] 	The radius to apply on bottom-left corners
 * @param 		{Number} 		[$bottom-right=null] 	The radius to apply on bottom-right corners
 *
 * @example 	scss
 * .my-cool-item {
 * 	// apply on top left and right corners
 * 	\@include sugar.border-radius(
 * 		$top : 10px;
 * 	);
 * 	// apply on each corners
 * 	\@include sugar.border-radius(10px);
 * 	// etc...
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name  center-block
 * Center a block element using margins etc...
 *
 * @example 	scss
 * .my-cool-block-element {
 * 	\@include sugar.center-block();
 * }
 *
 * @author 	Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name 	clearfix
 * Apply a clearfix on the element.
 * Supported methods:
 * - micro
 * - facebook
 * - float
 * - micro
 *
 * @param 		{String} 		[$method=micro] 		The clearfix method to use
 *
 * @example 	scss
 * .my-cool-element {
 *  \@include sugar.clearfix();
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
.clearfix-overflow {
  overflow: hidden;
}

.clearfix-facebook {
  display: table-cell;
  vertical-align: top;
  width: 10000px !important;
}

.clearfix-float {
  float: left;
  width: 100%;
}

.clearfix-micro, .clearfix {
  zoom: 1;
}
.clearfix-micro:before, .clearfix:before, .clearfix-micro:after, .clearfix:after {
  content: " ";
  display: table;
}
.clearfix-micro:after, .clearfix:after {
  clear: both;
}

/**
 * @name      coffeekraken-logo
 * Display a coffeekraken logo with two specified colors
 *
 * @param 		{Color} 		[$color=default] 	The base color to use
 * @param 		{Color} 		[$accent=primary] 	The accent color to use
 *
 * @example 	scss
 * .my-cool-coffeekraken-logo {
 * 	\@include sugar.coffeekraken-logo();
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name    columns
 * Create a column layout my setting each columns properties at once
 *
 * @param 		{Integer} 		[$count=null] 		The number of columns wanted
 * @param 		{Number} 		[$gap=null] 		The column-gap width wanted
 * @param 		{String} 		[$fill=null] 		The column-fill wanted
 * @param 		{Number} 		[$width=null] 		THe width of each columns wanted
 * @param 		{String} 		[$span=null] 		Specify on how many columns the element has to span across
 * @param 		{List} 			[$rule=null] 		Specify the shorthand version of the column-rule-color, column-rule-style and column-rule-width
 * @param 		{String} 		[$rule-style=null] 	Specify the column-rule-style wanted
 * @param 		{Color} 		[$rule-color=null] 	Specify the column-rule-color wanted
 * @param 		{Number} 		[$rule-width=null] 	Specify the column-rule-width wanted
 *
 * @example 	scss
 * .my-cool-container {
 * 	\@include sugar.columns(
 * 		$count : 3,
 * 		$gap : 30px,
 * 		$span : all
 * 	);
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      corner
 * Apply some border radius
 * @param 		{Number} 		[$radius=null] 			The radius to apply globally
 * @param 		{Number} 		[$top=null] 			The radius to apply on top corners
 * @param 		{Number} 		[$right=null] 			The radius to apply on right corners
 * @param 		{Number} 		[$bottom=null] 			The radius to apply on bottom corners
 * @param 		{Number} 		[$left=null] 			The radius to apply on left corners
 * @param 		{Number} 		[$top-left=null] 		The radius to apply on top-left corners
 * @param 		{Number} 		[$top-right=null] 		The radius to apply on top-right corners
 * @param 		{Number} 		[$bottom-left=null] 	The radius to apply on bottom-left corners
 * @param 		{Number} 		[$bottom-right=null] 	The radius to apply on bottom-right corners
 *
 * @example 	scss
 * .my-cool-item {
 * 	// apply on top left and right corners
 * 	\@include sugar.corner(
 * 		$top : 10px;
 * 	);
 * 	// apply on each corners
 * 	\@include sugar.corner(10px);
 * 	// etc...
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      fit
 * Make the element fit his container.
 *
 * @param 	{String} 			[$position=null] 		The position how to fit the element.
 *
 * @example 	scss
 * .my-cool-element {
 * 	\@include sugar.fit(absolute);
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Hide the contained text
 *
 * @example 	scss
 * .my-cool-container {
 * 	\@include sugar.text-hide();
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/*!
 * Font Awesome Free 5.11.2 by @fontawesome - https://fontawesome.com
 * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)
 */
.fa,
.fas,
.user,
.far,
.fal,
.fad,
.fab {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  display: inline-block;
  font-style: normal;
  font-variant: normal;
  text-rendering: auto;
  line-height: 1;
}

.user {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  display: inline-block;
  font-style: normal;
  font-variant: normal;
  font-weight: normal;
  line-height: 1;
}

/*!
 * Font Awesome Free 5.11.2 by @fontawesome - https://fontawesome.com
 * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)
 */
@font-face {
  font-family: "Font Awesome 5 Brands";
  font-style: normal;
  font-weight: normal;
  font-display: auto;
  src: url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-brands-400.eot");
  src: url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-brands-400.eot?#iefix") format("embedded-opentype"), url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-brands-400.woff2") format("woff2"), url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-brands-400.woff") format("woff"), url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-brands-400.ttf") format("truetype"), url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-brands-400.svg#fontawesome") format("svg");
}
.fab {
  font-family: "Font Awesome 5 Brands";
}

/*!
 * Font Awesome Free 5.11.2 by @fontawesome - https://fontawesome.com
 * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)
 */
@font-face {
  font-family: "Font Awesome 5 Free";
  font-style: normal;
  font-weight: 400;
  font-display: auto;
  src: url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-regular-400.eot");
  src: url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-regular-400.eot?#iefix") format("embedded-opentype"), url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-regular-400.woff2") format("woff2"), url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-regular-400.woff") format("woff"), url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-regular-400.ttf") format("truetype"), url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-regular-400.svg#fontawesome") format("svg");
}
.far {
  font-family: "Font Awesome 5 Free";
  font-weight: 400;
}

/*!
 * Font Awesome Free 5.11.2 by @fontawesome - https://fontawesome.com
 * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)
 */
@font-face {
  font-family: "Font Awesome 5 Free";
  font-style: normal;
  font-weight: 900;
  font-display: auto;
  src: url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-solid-900.eot");
  src: url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-solid-900.eot?#iefix") format("embedded-opentype"), url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-solid-900.woff2") format("woff2"), url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-solid-900.woff") format("woff"), url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-solid-900.ttf") format("truetype"), url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-solid-900.svg#fontawesome") format("svg");
}
.fa,
.fas,
.user {
  font-family: "Font Awesome 5 Free";
  font-weight: 900;
}

/**
 * @name      icon
 * Apply an icon on the element. This mixin support font-awesome and custom icons systems that have an icon name formated like "icon-{name}"
 * The custom icon style if you pass as name "user" will extend %icon, %icon-user, .icon and .icon-user classes
 *
 * @param 		{String} 		$name 		The icon name to apply
 *
 * @example 	scss
 * .my-cool-icon {
 * 	\@include s-icon(fa-user, regular);
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      image-rendering
 * Set how to render the image
 *
 * @param 		{String} 		[$mode=auto] 		The mode to use to render the image
 *
 * @example 	scss
 * img {
 * 	\@include sugar.mage-rendering(crips-edges);
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      media
 * Easy to use media query mixin that support cssua classes to target specific browsers
 *
 * @param 		{String} 		[$screen=null] 			Any of the @media screen type property like "screen, handheld, print, etc..."
 * @param 		{Number} 		[$min-width=null] 		The min width to target
 * @param 		{Number} 		[$max-width=null] 		The max width to target
 * @param 		{Number} 		[$min-height=null] 		The min height to target
 * @param 		{Number} 		[$max-height=null] 		The max height to target
 * @param 		{String} 		[$orientation=null] 	The orientation to target. Can be portrait or landscape
 * @param 		{String} 		[$resolution=null] 		The resolution to target. Can be 2x, 3x, 4x, etc...
 * @param 		{String} 		[$engine=null] 			The engine that powers the display. Can be gecko, webkit, trident, blink or presto
 * @param 		{String} 		[$device=null] 			The device to target. Can be mobile, tablet, desktop, iphone or ipad
 * @param 		{String} 		[$browser=null] 		The browser(s) to target. Can be chrome, safari, firefox, opera, ie, ie6-20
 * @param 		{String} 		[$system=null] 			The system(s) to target. Can be ios, osx, windows, linux, android, webos or blackberry
 *
 * @example 	scss
 * // simple min width
 * \@include sugar.media(
 * 	$min-width : 200px
 * ) {
 * 	// custom css here...
 * }
 *
 * // target a specific engine
 * \@include sugar.media(
 * 	$engine : gecko webkit
 * ) {
 * 	// custom css here
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Apply a ratio css styling. This will apply a before or after content that will make the element keep the specified ratio.
 * The content need to be displayed as absolute top left and fit in size.
 *
 * @param 		{Number} 		$ratio 			The ratio to keep like 16/9, etc...
 *
 * @example 	scss
 * .my-cool-element {
 * 	\@include sugar.ratio(16/9);
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Hide an element only visually. This ensure that the element is still correctly displayed in the page for SEO
 * but will not being visible to the user
 *
 * @example 	scss
 * .my-cool-element {
 * 	\@include sugar.visually-hidden();
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Print out a reset css
 *
 * @example
 * @include sugar.reset();
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Quicky and easily set simple or complexe size to any element
 * @param 		{String|Number} 		$size-width				The size like "cover" or "contain", or the width un number
 * @param 		{Number} 				[$height=null] 			The height wanted
 * @param 		{String} 				[$position=absolute] 	The position wanted if the size is "cover" or "contain"
 *
 * @example 	scss
 * .my-cool-image {
 * 	\@include sugar.size(cover);
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name    translate
 * Quicky set some translates
 * @param 		{Number} 		[$x=0] 		The x translate value
 * @param 		{Number} 		[$y=0] 		The y translate value
 * @param 		{Number} 		[$z=0] 		The z translate value
 *
 * @example     scss
 * .my-cool-element {
 * 	\@include sugar.translate(50%, 20px);
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Print out the style to truncate the text if needed
 *
 * @example 	scss
 * h1 {
 * 	\@include sugar.text-truncate();
 * }
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      str-index
 * Returns the first index of $substring in $string, or null if $string doesnât contain $substring.
 *
 * @param       {String}      $string       The string to process
 * @param       {String}      $substring    The string to search
 * @return      {Number}                    The index of the finded substring or null if not exist...
 *
 * @example      scss
 * sugar.str-index('Hello world', 'world'); // => 7
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Check if a string is a url or not
 *
 * @param 			{String} 				$url 			The string to check
 * @return 			{Boolean} 								true if is a url, false if not
 *
 * @example
 * sugar.str-is-url('Hello world') // false
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name    str-length
 * Return the number of characters in the passed string
 *
 * @param       {String}      $string       The string to process
 * @return      {Number}                    The number of characters that compose the string
 *
 * @example     scss
 * sugar.str-length('hello'); // => 4
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Replace the passed string with another one in a specific string
 *
 * @param         {String}        $string         The string in which to replace the searched one
 * @param         {String}        $search         The string to replace
 * @param         {String}        [$replace=""]   The string used as replacement
 * @return        {String}                        The processed string
 *
 * @example
 * sugar.str-replace('Hello world', 'world', 'coco'); // 'Hello coco'
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name    str-slice
 * Returns the slice of $string starting at index $start-at and ending at index $end-at (both inclusive).
 *
 * @param         {String}        $string         The string to slice
 * @param         {Number}Â        $start-at       Where to start slice the string
 * @param         {Number}        [$end-at=-1]    Where to end to slice the string
 *
 * @param       scss
 * sugar.str-slice('Hello world', 1, 4); // => Hell
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Split a string using a delimiter
 *
 * @param         {String}          $string             The string to split
 * @param         {String}          [$delimiter=""]     The delimiter to split the string
 * @return        {List}                                A list a the splited string
 *
 * @example
 * sugar.str-split('hello.world', '.'); // ('hello', 'world')
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name    str-unique-id
 * Generate a unique id in string format
 *
 * @return        {String}          The generated unique id
 *
 * @example     scss
 * sugar.str-unique-id(); // => uabtrnzug
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Return an unquoted version of the passed string
 *
 * @param         {String}        $string           The string to unquote
 * @return        {String}                          The unquoted string
 *
 * @example
 * sugar.str-unquote('hello world'); // => hello world
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Split a string using a delimiter
 *
 * @param         {String}          $string             The string to split
 * @param         {String}          [$delimiter=""]     The delimiter to split the string
 * @return        {List}                                A list a the splited string
 *
 * @example
 * sugar.str-split('hello.world', '.'); // ('hello', 'world')
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Check if a string is a url or not
 *
 * @param 			{String} 				$url 			The string to check
 * @return 			{Boolean} 								true if is a url, false if not
 *
 * @example
 * sugar.str-is-url('Hello world') // false
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Store the current context
 * @type      {String}
 */
/**
 * Store the current registered font size
 * @type      {Number}
 */
/**
 * Stpre aÃ©Ã© the classes in their namespaces
 * @type      (Map)
 */
/**
 * Some variables used in the math functions
 */
/**
 * Store all the settings
 * @type      {Map}
 */
/**
 * Check a property types and values
 *
 * @param         {String}        $property         The property name to check
 * @param         {String}        $type             The property type wanted
 * @param         {Mixed}         $value            The property value to check
 * @param         {Boolean}       [$check-only=false]  Define if we want to throw an error or just send back false on type error
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Return the property name
 *
 * @param       {String}        $property         The property name to get
 * @param       {Map}           [$keywords=()]    The
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Get the property type
 */
/**
 * Return the color in a modifier list
 * @param 			{List} 			$modifiers 		The modifiers list
 * @return 			{String} 						The color name
 *
 * @example
 * $my-color : sugar.color-modifier(outline primary); // => primary
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Store the current context
 * @type      {String}
 */
/**
 * Store the current registered font size
 * @type      {Number}
 */
/**
 * Stpre aÃ©Ã© the classes in their namespaces
 * @type      (Map)
 */
/**
 * Some variables used in the math functions
 */
/**
 * Store all the settings
 * @type      {Map}
 */
/**
 * Return the name of the context setted with the [../mixins/_context.scss] mixin
 *
 * @param 			{String} 			[$default=null] 		The name to return if no context exist
 * @return 			{String} 									The context name
 *
 * @example
 * // register a context
 * \@include sugar.context-setup('my-context', (
 * 		// override some settings here...
 * ));
 *
 * sugar.context('hello') // => 'hello'
 * \@include sugar.context('my-context') {
 * 		sugar.context('hello') // => 'my-context'
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com);
 */
/**
 * Transform a dash notation value into a map
 * Dash notation value is : -key1 value1 -key2 value2
 *
 * @param 			{List} 			$dash 			The dash list notation to transform
 * @return 			{Map} 							The map generated
 *
 * @example
 * $dash : -hello world -coco universe
 * sugar.dash-to-map($dash);
 * // (
 * // 	hello : world,
 * // 	coco : universe
 * // )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Take a filter as parameter and parse it to return the {Map} corresponding
 * The $filter parameter can be either a registered filter name or a filter formated like `filterName(filterValue)`
 *
 * @param 			{List}<String> 			$filter 			The registered filter name or the filter string to transform into map
 * @return 			{Map} 										The corresponding filter map properties
 *
 * @example
 * // register a filter
 * \@include sugar.setup((
 * 		filters : (
 * 			myCoolFilter : box-shadow(#000 0 0 10px) blur(30px),
 * 			// other filters...
 * 		)
 * ));
 *
 * // registered filter
 * sugar.filter-map(myCoolFilter);
 * // {
 * // 	box-shadow : #000 0 0 10px,
 * // 	blur : 30px
 * // }
 *
 * // custom filter
 * sugar.filter-map(blur(10px));
 * // {
 * // 	blur : 10px
 * // }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Return a list with all the filters that are passed as argument
 * This will use the [./_s-filter-map.scss] function to parse the filters
 *
 * @param 	 	{List}<String> 			$filters 			The registered filter(s) name(s) or the filter(s) string(s) to transform into list
 * @return 		{List} 										The converted filters list to use as css property
 *
 * @example
 * // register a filter
 * \@include sugar.setup((
 * 		filters : (
 * 			myCoolFilter : box-shadow(#000 0 0 10px) blur(30px),
 * 			// other filters...
 * 		)
 * ));
 *
 * // registered filter
 * .my-cool-elememt {
 * 		filter : sugar.filter(myCoolFilter);
 * 		// filter : box-shadow(#000 0 0 10px) blur(30px);
 * }
 *
 * // custom filter
 * .my-cool-element {
 * 		filter : sugar.filter(myCoolFilter invert(100%));
 * 		// filter : box-shadow(#000 0 0 10px) blur(30px) invert(100%);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Return the font-family string or a registered font
 *
 * @param 			{String} 		$name 		The name of the registered font
 * @return 			{String} 					The corresponding font-family property to set in your css
 *
 * @example
 * // register a font
 * \@include sugar.setup((
 * 		fonts : (
 * 			myCoolFont : (
 * 				font-family : 'Helvetica Neue',
 * 				font-weight : 'bold',
 * 				// etc...
 * 			),
 * 			// other fonts...
 * 		)
 * ));
 *
 * // apply the font
 * .my-cool-element {
 * 		font-family : sugar.font-family(myCoolFont);
 * 		// 'Helvetica Neue';
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Return the font {Map} that correspond to the passed arguments
 *
 * @param 		{String} 			[$family=null] 			The font family wanted (can be a registered font name)
 * @param 		{Color} 			[$color=null] 			The color wanted (can be a registered color name)
 * @param 		{Number} 			[$size=null] 			The font-size wanted
 * @param 		{String} 			[$style=null] 			The font-style wanted
 * @param 		{String} 			[$variant=null] 		The font-variant wanted
 * @param 		{String|Number} 	[$weight=null] 			The font-weight wanted
 * @param 		{String} 			[$decoration=null] 		The text-decoration wanted
 * @param 		{String} 			[$align=null] 			The text-align wanted
 * @param 		{String} 			[$transform=null] 		The text-transform wanted
 * @param 		{String} 			[$stretch=null] 		The font-stretch wanted
 * @param 		{String} 			[$white-space=null] 	The white-space wanted
 * @param 		{Number} 			[$height=null] 			The line-height wanted
 * @param 		{Number} 			[$spacing=null] 		The letter-spacing wanted
 * @param 		{Number} 			[$indent=null] 			The text-indent wanted
 * @param 		{String} 			[$break=null] 			The line-break wanted
 * @param 		{String} 			[$wrap=null] 			The word-wrap wanted
 * @return 		{Map} 										The corresponding font map
 *
 * @example
 * sugar.font(
 * 		$family : 'Helvetica Neue',
 * 		$size : 12px,
 * 		$wrap : norwap
 * );
 * // (
 * 		font-family : 'Helvetica Neue',
 * 		font-size : 12px,
 * 		word-wrap : nowrap
 * // )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Check if the provided color is a registered one or not
 * @param 		{String} 		$color 		The color nane to check
 * @return 		{Boolean} 					True if exists, false if not
 */
/**
 * Return the specified or calculated value of the given stack and size
 * depending on the settings.sizes ratios stack
 *
 * @param 		{Map} 			$stack 			The stack from which to interpolate the value
 * @param 		{String} 		$size 			The size wanted (has to exist in the settings.sizes stack)
 * @return 		{Number} 						The $stack.$size value or the interpolated one depending on the settings.sizes ratios
 *
 * @example
 *
 * // settings.sizes
 * \@include sugar.setup((
 * 		sizes : (
 * 			small : 0.5,
 * 			default : 1, // default is ALWAYS 1
 * 			big : 1.5
 * 		)
 * ));
 *
 * $myStack : (
 * 		default : 3rem,
 * 		big : 6rem
 * )
 *
 * sugar.interpolate($myStack, big) // 6rem cause specified in the $myStack value
 * sugar.interpolate($myStack, small) // 1.5rem => calculated like : 3rem * 0.5 = 1.5rem
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Get a registered color by name or wrap a new color into a sugar.color call
 * to manipulate it with ease.
 * Supported actions :
 * - hue {Deg}
 * - lighten {Percent}
 * - darken {Percent}
 * - saturate {Percent}
 * - desaturate {Percent}
 * - grayscale {Boolean}
 * - complement {Boolean}
 * - invert {Boolean}
 * - opacity {Percent}
 * - mix {Color}
 * - lightness {Percent}
 * - saturation {Percent}
 *
 * @param 		{String|Color} 		$color 				The color name or the color value to manipulate
 * @param 		{String|List} 			[$modifier=null] 	The color modifier to apply. Can be a registered modifier name or a modifier list
 * @return 		{Color} 									The actual color value
 *
 * @example 	 	scss
 * // default color (settings.colors.default)
 * $myColor : sugar.color(default);
 * // primary color (settings.colors.primary)
 * $primary : sugar.color(primary);
 * // manipulate
 * $primary-dark : sugar.color(primary, -darken 10%);
 * // registered modifier
 * $primary-light : sugar.color(primary, light);
 * // $name as list
 * $modified primary : sugar.color((primary, -darken 10%));
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Alias to the [./_look-and-feel.scss] function
 *
 * Return a settings.look-and-feel stack value
 *
 * @param 		{String} 		$name					The look and feel value name
 * @return 		{Number} 								The look and feel value in em
 *
 * @example
 * .my-cool-element {
 * 		padding : sugar.lnf(padding-horizontal) sugar.lnf(padding-vertical);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Return a settings.look-and-feel stack value
 *
 * @param 		{String} 		$name					The look and feel value name
 * @return 		{Number} 								The look and feel value in em
 *
 * @example
 * .my-cool-element {
 * 		padding : sugar.look-and-feel(padding-horizontal) sugar.look-and-feel(padding-vertical);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Return the modular scale value based on the settings ```modular-scale.base``` and ```modular-scale.ratio```.
 *
 * @param 			{Number} 		$scale 		The wanted scale
 * @param 			{Number} 		[$base=settings.modular-scale.base] 	The base of calculation
 * @return 			{Number} 					The calculated resulting value
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Parse a given string/list properties and return the Map corresponding to the Map description
 *
 * @param 				{List} 				$properties 			The properties to parse
 * @param 				{Map} 				$descriptor 			The descriptor map to use to parse the properties
 * @return 				{Map} 										The properties in map format
 *
 * @example
 * sugar.parse-properties(10px hello -delay 20s, (
 *  	myNumber : Number,
 *  	myOtherNumber : Number,
 *  	myString : String,
 *  	myCoolVar : String,
 *  	delay : second
 * ));
 * // => (
 * //  	myNumber : 10px,
 * // 	myString : hello,
 * // 	delay : 20s
 * // )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Return the passed values in the same unit but that has been even rounded on the corresponding px value
 * This ensure that your passed value will be a round px value for final rander in the viewport
 *
 * @param 		{Number} 		$value 			The value to process
 * @return 		{Number} 						The rounded value in same input unit but px rounded
 *
 * @example
 * // if settings.typography.font-size == 16px
 * sugar.render-round-even(5.2rem);
 * // 1. transform to px values : 5.2 * 16px = 83.2px
 * // 2. round even the px value : 84px
 * // 3. transform to passed unit value : 84px / 16px = 5.25rem
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Return the passed values in the same unit but that has been odd rounded on the corresponding px value
 * This ensure that your passed value will be a round px value for final rander in the viewport
 *
 * @param 		{Number} 		$value 			The value to process
 * @return 		{Number} 						The rounded value in same input unit but px rounded
 *
 * @example
 * // if settings.typography.font-size == 16px
 * sugar.render-round-odd(5.2rem);
 * // 1. transform to px values : 5.2 * 16px = 83.2px
 * // 2. round odd the px value : 83px
 * // 3. transform to passed unit value : 84px / 16px = 5.1875rem
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Return the passed values in the same unit but that has been rounded on the corresponding px value
 * This ensure that your passed value will be a round px value for final rander in the viewport
 *
 * @param 		{Number} 		$value 			The value to process
 * @return 		{Number} 						The rounded value in same input unit but px rounded
 *
 * @example
 * // if settings.typography.font-size == 16px
 * sugar.render-round(5.2rem);
 * // 1. transform to px values : 5.2 * 16px = 83.2px
 * // 2. round even the px value : 83px
 * // 3. transform to passed unit value : 84px / 16px = 5.1875rem
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Search and replace tokens like colors #primary in a passed string, list or map
 * Supported tokens types :
 * 1. Colors : colorName
 *
 * @example
 * sugar.replace-tokens(12px #primary hello #secondary); // > 12px #ddd hello #fff;
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Process selector to avoid having --default, etc...
 *
 * @param 		{String} 		$selector 		The selector to process
 * @return 		{String} 						The processed selector
 *
 * @example 	scss
 * sugar.selector('.input--default'); // => .input
 * sugar.selector('.input-default'); // => .input
 * sugar.selector('.input.default'); // => .input
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Store the current context
 * @type      {String}
 */
/**
 * Store the current registered font size
 * @type      {Number}
 */
/**
 * Stpre aÃ©Ã© the classes in their namespaces
 * @type      (Map)
 */
/**
 * Some variables used in the math functions
 */
/**
 * Store all the settings
 * @type      {Map}
 */
/**
 * Get a settings from the global settings stack
 *
 * @param 				{String} 			$path 						The setting path wanted separated by dots
 * @param 				{String} 			[$context=s-context()] 		The context name to get the setting
 * @param 				{Mixed} 			[$default=null] 			The value to return if no value is found
 * @return 				{Mixed} 										The setting valueÂ¨
 *
 * @example
 * $font-size : sugar.setting('typography.font-size');
 * // etc...
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Return a value interpolated from the settings.spaces stack
 *
 * @param 			{String} 			$size 			The space size wanted. Must exist in the settings.sizes stack
 * @return 			{Number} 							The actual space value
 *
 * @example
 * .my-cool-section {
 * 		padding : sugar.space(big);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Test an argument passed to a function or a mixin to ensure his type, value, etc...
 * If the argument does not pass the test, an error will be thrown, unless the $check-only argument is true
 *
 * @param 				{String} 				$method 				The function/mixin name (debug purpose)
 * @param 				{String} 				$argument 				The argument name to test (debug purpose)
 * @param 				{List|String} 			$type-or-values 		If string, the type(s) that the argument must match, if list, the possible values that the argument can take
 * @param 				{Mixed} 				$value 					The actual argument value
 * @param 				{Boolean} 				[$check-only=false]		If this is true, will not thrown any error
 * @return 				{Mixed} 										The value if ok, false if not
 *
 * @example
 * \@mixin my-cool-mixin($argument1, $argument2) {
 *        $argument1 : sugar.test-argument(my-cool-mixin, argument1, string, $argument1);
 *        $argument2 : sugar.test-argument(my-cool-mixin, argument2, (hello,world,12), $argument2);
 * }
 * \@mixin my-cool-mixin(hello, world); // ok
 * \@mixin my-cool-mixin(hello, universe); // throw an error
 * \@mixin my-cool-mixin(12, world); // throw an error
 *
 * @author 				Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Return the text-format setting scope class
 *
 * @return 		{String} 		The text-format scope class from settings.text-format.scope-class
 *
 * @example
 * sugar.text-format-class(); // tf
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Take a transition as parameter and parse it to return the {Map} corresponding
 * The $transition parameter can be either a registered transition name or a custom css transition like : all .2s ease-in-out 2s
 * The $transition argument will be parsed with the [./_parse-properties.scss] function.
 *
 * @param 			{List} 				$transition 			The registered transition name or the transition string to transform into map
 * @return 			{Map} 										The corresponding transition map properties
 *
 * @example
 * // register a transition
 * \@include sugar.setup((
 * 		transitions : (
 * 			fast : all .2s ease-in-out,
 * 			// other transitions...
 * 		)
 * ));
 *
 * // registered transition
 * sugar.transition-map(fast);
 * // {
 * // 	property : all,
 * // 	duration : .2s,
 * // 	ease : ease-in-out
 * // }
 *
 * // custom transition
 * sugar.transition-map(fast -delay .5s);
 * // {
 * // 	property : all,
 * // 	duration : .2s,
 * // 	ease : ease-in-out,
 * // 	delay : .5s
 * // }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Take a transition as parameter and parse it to return the {List} corresponding
 * The $transitions parameter can be either a registered transition name or a custom css transition like : all .2s ease-in-out 2s
 * The $transitions argument will be parsed with the [./_parse-properties.scss] function.
 *
 * @param 			{List} 				$transitions 			The registered transition(s) name(s) or the transition(s) strings(s) to transform into list
 * @return 			{List} 										The corresponding transition list properties
 *
 * @example
 * // register a transition
 * \@include sugar.setup((
 * 		transitions : (
 * 			fast : all .2s ease-in-out 0s,
 * 			// other transitions...
 * 		)
 * ));
 *
 * // registered transition
 * .my-cool-element {
 * 		transition : sugar.transition(fast);
 * 		// transition : all .2s ease-in-out 0s;
 * }
 *
 * // custom transition
 * .my-cool-element {
 *  	transition : sugar.transition(fast -delay .5s, fast width ease-in);
 *  	// transition : all .2s ease-in-out .5s, width .2s ease-in 0s;
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Return the vertical-rhythm setting scope class
 *
 * @return 		{String} 		The vertical-rhythm scope class from settings.vertical-rhythm.scope-class
 *
 * @example
 * sugar.vertical-rhythm-class(); // vr
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Print out the animation property calculated with the passed arguments
 * This mixin support all the standard css animation properties like name, duration, delay, ease, direction and fill-mode.
 * The $animations argument will be parsed with the [../functions/_s-parse-properties.scss] function.
 * If you specify multiple animations at a time, this mixin will take care
 * of the delay calculation for each animations and make them play one after another
 *
 * @param 			{List} 				$animations 			The animations wanted like : coco .2s ease-in-out reverse
 *
 * @example
 * .my-cool-element {
 * 		@include sugar.animation(my-animation 1s ease-in-out, another-animation 4s);
 * 		// animation : my-animation 1s 0s ease-in-out 1 normal forwards, another-animation 4s 1s ease-in-out 1 normal forwards;
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Store the current context
 * @type      {String}
 */
/**
 * Store the current registered font size
 * @type      {Number}
 */
/**
 * Stpre aÃ©Ã© the classes in their namespaces
 * @type      (Map)
 */
/**
 * Some variables used in the math functions
 */
/**
 * Store all the settings
 * @type      {Map}
 */
/**
 * Print out all wanted registered classes like padding helpers, margin helpers, font helpers, etc...
 * Available namespaces
 * - sugar.filter.{name} : .fi-{name}
 * - sugar.transition.{name} : .tr-{name}
 * - sugar.font.family.{name} : .f-{name}
 * - sugar.margin.bottom.{size} : .m-b-{size}
 * - sugar.margin.top.{size} : .m-t-{size}
 * - sugar.margin.left.{size} : .m-l-{size}
 * - sugar.margin.right.{size} : .m-r-{size}
 * - sugar.margin.side.{size} : .m-s-{size}
 * - sugar.padding.all.{size} : .p-{size}
 * - sugar.padding.top.{size} : .p-t-{size}
 * - sugar.padding.bottom.{size} : .p-b-{size}
 * - sugar.padding.left.{size} : .p-l-{size}
 * - sugar.padding.right.{size} : .p-r-{size}
 * - sugar.padding.side.{size} : .p-s-{size}
 * - sugar.size.{size} : .s-{size}
 * - sugar.size.rel.{size} : .s-{size}-rel
 * - sugar.padding.no.top : .no-p-t
 * - sugar.padding.no.bottom : .no-p-b
 * - sugar.padding.no.left : .no-p-l
 * - sugar.padding.no.right : .no-p-r
 * - sugar.padding.no.side : .no-p-s
 * - sugar.margin.no.top : .no-m-t
 * - sugar.margin.no.bottom : .no-m-b
 * - sugar.margin.no.left : .no-m-l
 * - sugar.margin.no.right : .no-m-r
 * - sugar.margin.no.side : .no-m-s
 * - sugar.color.{name}.color : .c-{name}
 * - sugar.color.{name}.bkg : .bkg-{name}
 * - sugar.color.{name}.modifier.{mod-name}.color : .c-{name}--{mod-name}
 * - sugar.color.{name}.modifier.{mod-name}.bkg : .bkg-{name}--{mod-name}
 * - sugar.pull.left : .pull-left
 * - sugar.pull.right : .pull-right
 * - sugar.position.relative : .relative
 * - sugar.position.absolute : .absolute
 * - sugar.clear.left : .clear-left
 * - sugar.clear.right : .clear-right
 * - sugar.clear.both : .clear
 * - sugar.pointer.events.all : .pointer-events-all
 * - sugar.pointer.events.none : .pointer-events-none
 * - sugar.display.show : .show
 * - sugar.display.show-inline : .show-inline
 * - sugar.display.hidden : .hidden
 * - sugar.display.hide : .hide
 * - sugar.display.visible : .visible
 * - sugar.display.invisible : .invisible
 * - sugar.display.visually-hidden : .visually-hidden
 * - sugar.text.hidden : .t-hidden
 * - sugar.text.truncate : .t-truncate
 * - sugar.text.align.left : .t-left
 * - sugar.text.align.right : .t-right
 * - sugar.text.align.center : .t-center
 * - sugar.text.align.justify : .t-justify
 * - sugar.text.transform.lowercase : .t-lowercase
 * - sugar.text.transform.uppercase : .t-uppercase
 * - sugar.text.transform.capitalize : .t-capitalize
 * - sugar.font.weight.bold : .f-bold
 * - sugar.font.weight.lighter : .f-lighter
 * - sugar.font.weight.bolder : .f-bolder
 * - sugar.font.weight.normal : .f-normal
 * - sugar.font.style.italic : .f-italic
 * - sugar.font.style.oblique : .f-oblique
 * - sugar.font.variant.small-caps : .f-small-caps
 * - sugar.block.align.center : .block-center
 * - sugar.ratio.21-9 : ```.ratio-21-9```
 * - sugar.ratio.16-9 : ```.ratio-16-9```
 * - sugar.ratio.4-3 : ```.ratio-4-3```
 * - sugar.ratio.1-1 : ```.ratio-1-1```
 * - sugar.size.abs.cover : ```.abs-cover```
 * - sugar.size.abs.contain : ```.abs-contain```
 * - sugar.size.abs.fit : ```.abs-fit```
 * - sugar.clearfix.default : .clearfix
 * - sugar.clearfix.float : .clearfix-float
 * - sugar.clearfix.micro : .clearfix-micro
 * - sugar.clearfix.overflow : .clearfix-overflow
 * - sugar.clearfix.facebook : .clearfix-facebook
 * - sugar.no-transitions : .no-transitions
 * - sugar.clear-transitions : .clear-transitions
 * - sugar.no-animations : .no-animations
 * - sugar.clear-animations : .clear-animations
 * - sugar.no-transmations : .no-transmations
 * - sugar.clear-transmations : .clear-transmations
 *
 * @param 			{List}<string> 			$namespaces 		The classes namespaces wanted
 *
 * @example
 * \@include sugar.classes(); // will print out all the classes
 * \@include sugar.classes('sugar.font'); // will print all the font classes
 * \@include sugar.classes('sugar.clearfix' 'sugar.pull'); // the clearfixes and the pull classes
 * // etc...
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Print out the scoped color schema css
 *
 * @param 		{String} 			$name 			The color schema name
 *
 * @example
 * \@include sugar.color-schema(light) {
 * 		h1, h2 {
 * 			color : white;
 * 		}
 * }
 * // will print
 * .cs-light h1,
 * .cs-light h2 {
 * 		color : white;
 * }
 *
 * h1, h2 {
 * 		\@include sugar.color-schema(light) {
 * 			color : white;
 * 		}
 * }
 * // will print
 * .cs-light h1, h1.cs-light,
 * .cs-light h2, h2.cs-light {
 * 		color : white;
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Store the current context
 * @type      {String}
 */
/**
 * Store the current registered font size
 * @type      {Number}
 */
/**
 * Stpre aÃ©Ã© the classes in their namespaces
 * @type      (Map)
 */
/**
 * Some variables used in the math functions
 */
/**
 * Store all the settings
 * @type      {Map}
 */
/**
 * Register a context with a name to use it later
 *
 * @param 			{String} 		$name 			The context name
 * @param 			{Map} 			$settings 		The settings to override for this context
 *
 * @example
 * \@include sugar.context-setup(my-cool-context, (
 * 		look-and-feel : (
 * 			padding-vertical : (
 * 				default : 0.6em
 * 			)
 * 		)
 * ));
 *
 * // using your context
 * \@include sugar.context(my-cool-context) {
 * 		sugar.look-and-feel(padding-vertical); // => 0.6em
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Store the current context
 * @type      {String}
 */
/**
 * Store the current registered font size
 * @type      {Number}
 */
/**
 * Stpre aÃ©Ã© the classes in their namespaces
 * @type      (Map)
 */
/**
 * Some variables used in the math functions
 */
/**
 * Store all the settings
 * @type      {Map}
 */
/**
 * Set a context to be used inside the mixin
 *
 * @param 			{String|Map} 			$name-or-map 		The name of a registered context or a map
 *
 * @example
 * // register a context
 * \@include sugar.context-setup(my-cool-context, (
 * 		look-and-feel : (
 * 			padding-vertical : (
 * 				default : 0.6em
 * 			)
 * 		)
 * ));
 *
 * // registered context
 * \@include sugar.context(my-cool-context) {
 * 		// your code here...
 * }
 *
 * // inline context
 * \@include sugar.context((
 * 		look-and-feel : (
 * 			padding-vertical : (
 * 				default : .3em
 * 			)
 * 		)
 * )) {
 * 		// your code here...
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Print out a list with all the filters that are passed as argument
 * This will use the [../functions/_filter-map.scss] function to parse the filters
 *
 * @param 	 	{List}<String> 			$filters 			The registered filter(s) name(s) or the filter(s) string(s) to transform into list
 *
 * @example
 * // register a filter
 * \@include sugar.setup((
 * 		filters : (
 * 			myCoolFilter : box-shadow(#000 0 0 10px) blur(30px),
 * 			// other filters...
 * 		)
 * ));
 *
 * // registered filter
 * .my-cool-elememt {
 * 		\@include sugar.filter(myCoolFilter);
 * 		// filter : box-shadow(#000 0 0 10px) blur(30px);
 * }
 *
 * // custom filter
 * .my-cool-element {
 * 		\@include sugar.filter(myCoolFilter invert(100%));
 * 		// filter : box-shadow(#000 0 0 10px) blur(30px) invert(100%);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Helper to print a font-face
 *
 * @param 			{String} 		$font-family 			The font-family
 * @param 			{String} 		$src 					The source url (only 1 extension)
 * @param 			{List} 			[$extensions=woff2] 	The extensions list that you have available
 * @param 			{String} 		[$font-weight=normal] 	The font-weight property
 * @param 			{String} 		[$font-style=normal] 	The font-style property
 * @param       {String}    [$font-display=auto]    The font-display property
 *
 * @example
 * // if you have these extensions files : .woff .eot .woff2
 * \@include sugar.font-face(
 * 		$name : my-cool-font,
 * 		$src : '/fonts/my-font.eot',
 * 		$extensions : eot woff woff2
 * )
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Print all the fonts properties that correspond to the passed arguments
 *
 * @param 		{String} 			[$family=null] 			The font family wanted (can be a registered font name)
 * @param 		{Color} 			[$color=null] 			The color wanted (can be a registered color name)
 * @param 		{Number} 			[$size=null] 			The font-size wanted
 * @param 		{String} 			[$style=null] 			The font-style wanted
 * @param 		{String} 			[$variant=null] 		The font-variant wanted
 * @param 		{String|Number} 	[$weight=null] 			The font-weight wanted
 * @param 		{String} 			[$decoration=null] 		The text-decoration wanted
 * @param 		{String} 			[$align=null] 			The text-align wanted
 * @param 		{String} 			[$transform=null] 		The text-transform wanted
 * @param 		{String} 			[$stretch=null] 		The font-stretch wanted
 * @param 		{String} 			[$white-space=null] 	The white-space wanted
 * @param 		{Number} 			[$height=null] 			The line-height wanted
 * @param 		{Number} 			[$spacing=null] 		The letter-spacing wanted
 * @param 		{Number} 			[$indent=null] 			The text-indent wanted
 * @param 		{String} 			[$break=null] 			The line-break wanted
 * @param 		{String} 			[$wrap=null] 			The word-wrap wanted
 * @return 		{Map} 										The corresponding font map
 *
 * @example
 * .my-cool-elememt {
 * 		\@include sugar.font(
 * 			$family : 'Helvetica Neue',
 * 		 	$size : 12px,
 * 		  $wrap : normal
 *    );
 *    // print
 * 		font-family : 'Helvetica Neue',
 * 		font-size : 12px,
 * 		word-wrap : normal
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Store the current context
 * @type      {String}
 */
/**
 * Store the current registered font size
 * @type      {Number}
 */
/**
 * Stpre aÃ©Ã© the classes in their namespaces
 * @type      (Map)
 */
/**
 * Some variables used in the math functions
 */
/**
 * Store all the settings
 * @type      {Map}
 */
/**
 * Init the sugar toolkit.
 * This has to be called **AFTER** all the [./_s-setup.scss] mixin call
 * and **BEFORE** all the others sugar mixins and functions calls
 *
 * @example
 * \@include sugar.init();
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Register all the dynamic helper classes that depends on the settings, etc...
 * This is used internaly
 *
 * @example
 * \@include sugar.init-classes();
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Store the current context
 * @type      {String}
 */
/**
 * Store the current registered font size
 * @type      {Number}
 */
/**
 * Stpre aÃ©Ã© the classes in their namespaces
 * @type      (Map)
 */
/**
 * Some variables used in the math functions
 */
/**
 * Store all the settings
 * @type      {Map}
 */
/**
 * Register a helper class under a certain namespace
 *
 * @param 			{String} 		$classname 		The classname that will be printed out
 * @param 			{String} 		$namespace 		The dots separated namespace under which the class will live
 *
 * @example
 * \@include sugar.register-helper-class(my-cool-class, 'my.cool.namespace') {
 * 		background : pink;
 * }
 * \@include sugar.register-helper-class(another-cool-class, 'my.another.namespace') {
 * 		background : red;
 * }
 *
 * // print out my helpers classes
 * \@include sugar.classes('my');
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Store the current context
 * @type      {String}
 */
/**
 * Store the current registered font size
 * @type      {Number}
 */
/**
 * Stpre aÃ©Ã© the classes in their namespaces
 * @type      (Map)
 */
/**
 * Some variables used in the math functions
 */
/**
 * Store all the settings
 * @type      {Map}
 */
/**
 * Setup sugar toolkit by overriding the default [settings](../_settings.scss)
 * This has to be called **BEFORE** the [s-init mixin](./_s-init.scss)
 *
 * @param 			{Map}Â 			$settings 		The settings to override
 *
 * @example
 * \@include sugar.setup((
 * 		typo : (
 * 			font-size : 12px
 * 		),
 * 		sizes : (
 * 			small : 0.5,
 * 			big : 1.5
 * 		)
 * ));
 * // this mixin can be called as many times as you need
 * // this allows you to separate your configs setup into multiple
 * // files...
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Display the vertical rhythme
 *
 * @param 			{Color}      [$color=#0ff] 		The color wanted
 *
 * @example
 * body {
 * 		@include sugar.show-vertical-rhythm();
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Take a transition as parameter and print the corresponding transition property
 * The $transitions parameter can be either a registered transition name or a custom css transition like : all .2s ease-in-out 2s
 * The $transitions argument will be parsed with the [./_parse-properties.scss] function.
 *
 * @param 			{List} 				$transitions 			The registered transition(s) name(s) or the transition(s) strings(s) to transform into list
 * @return 			{List} 										The corresponding transition list properties
 *
 * @example
 * // register a transition
 * \@include sugar.setup((
 * 		transitions : (
 * 			fast : all .2s ease-in-out 0s,
 * 			// other transitions...
 * 		)
 * ));
 *
 * // registered transition
 * .my-cool-element {
 * 		\@include sugar.transition(fast);
 * 		// transition : all .2s ease-in-out 0s;
 * }
 *
 * // custom transition
 * .my-cool-element {
 * 		\@include sugar.transition(fast -delay .5s, fast width ease-in);
 *  	// transition : all .2s ease-in-out .5s, width .2s ease-in 0s;
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Scope the content inside the `settings.vertical-rhythm.scope-class` class
 *
 * @example
 * .my-cool-item {
 * 	@include sugar.vertical-rhythm() {
 * 		margin-bottom: 2em; // will be applied only if .my-cool-item is in the .vr scope
 * 	}
 * }
 *
 * @see 			https://medium.com/written-in-code/aligning-type-to-baseline-the-right-way-using-sass-e258fce47a9b#.lck2lgbni
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * This file is responsible to register the static helper classes like:
 *
 * - sugar.pull.left : ```.pull-left```
 * - sugar.pull.right : ```.pull-right```
 * - sugar.position.relative : ```.relative```
 * - sugar.position.absolute : ```.absolute```
 * - sugar.clear.left : ```.clear-left```
 * - sugar.clear.right : ```.clear-right```
 * - sugar.clear.both : ```.clear```
 * - sugar.pointer.events.all : ```.pointer-events-all```
 * - sugar.pointer.events.none : ```.pointer-events-none```
 * - sugar.display.show : ```.show```
 * - sugar.display.show-inline : ```.show-inline```
 * - sugar.display.hidden : ```.hidden```
 * - sugar.display.hide : ```.hide```
 * - sugar.display.visible : ```.visible```
 * - sugar.display.invisible : ```.invisible```
 * - sugar.display.visually-hidden : ```.visually-hidden```
 * - sugar.text.hidden : ```.t-hidden```
 * - sugar.text.truncate : ```.t-truncate```
 * - sugar.text.align.left : ```.t-left```
 * - sugar.text.align.right : ```.t-right```
 * - sugar.text.align.center : ```.t-center```
 * - sugar.text.align.justify : ```.t-justify```
 * - sugar.text.transform.lowercase : ```.t-lowercase```
 * - sugar.text.transform.uppercase : ```.t-uppercase```
 * - sugar.text.transform.capitalize : ```.t-capitalize```
 * - sugar.font.weight.bold : ```.f-bold```
 * - sugar.font.weight.lighter : ```.f-lighter```
 * - sugar.font.weight.bolder : ```.f-bolder```
 * - sugar.font.weight.normal : ```.f-normal```
 * - sugar.font.style.italic : ```.f-italic```
 * - sugar.font.style.oblique : ```.f-oblique```
 * - sugar.font.variant.small-caps : ```.f-small-caps```
 * - sugar.block.align.center : ```.block-center```
 * - sugar.ratio.21-9 : ```.ratio-21-9```
 * - sugar.ratio.16-9 : ```.ratio-16-9```
 * - sugar.ratio.4-3 : ```.ratio-4-3```
 * - sugar.ratio.1-1 : ```.ratio-1-1```
 * - sugar.size.abs.cover : ```.abs-cover```
 * - sugar.size.abs.contain : ```.abs-contain```
 * - sugar.size.abs.fit : ```.abs-fit```
 * - sugar.media.object : ```.mo .mo--center .mo--end .mo__content```
 * - sugar.clearfix.default : ```.clearfix```
 * - sugar.clearfix.float : ```.clearfix-float```
 * - sugar.clearfix.micro : ```.clearfix-micro```
 * - sugar.clearfix.overflow : ```.clearfix-overflow```
 * - sugar.clearfix.facebook : ```.clearfix-facebook```
 * - sugar.no-transitions : ```.no-transitions```
 * - sugar.clear-transitions : ```.clear-transitions```
 * - sugar.no-animations : ```.no-animations```
 * - sugar.clear-animations : ```.clear-animations```
 * - sugar.no-transmations : ```.no-transmations```
 * - sugar.clear-transmations : ```.clear-transmations```
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
.pull-left {
  /**
  * @name 		```.pull-left```
  * Allows you to pull an element to the left side
  * @styleguide 	Helpers / Pull
  * @example 	html
   * <div>
  * 	<span class="pull-left">Hello world</span>
  * </div>
  */
  float: left;
}

.pull-right {
  /**
  * @name 		```.pull-right```
  * Allows you to pull an element to the right side
  * @styleguide 	Helpers / Pull
  * @example 	html
   * <div>
  * 	<span class="pull-right">Hello world</span>
  * </div>
  */
  float: right;
}

.relative {
  /**
  * @name 		```.relative```
  * Set an element position as ```relative```
  * @styleguide 	Helpers / Position
  * @example 	html
  * <div class="relative">
  * 	I'm relative now
  * </div>
  */
  position: relative;
}

.absolute {
  /**
  * @name 		```.absolute```
  * Set an element position as ```absolute```
  * @styleguide 	Helpers / Position
  * @example 	html
  * <div class="absolute">
  * 	I'm absolute now
  * </div>
  */
  position: absolute;
}

.clear-left {
  /**
  * @name 		```.clear-left```
  * Clear the left float on the element
  * @styleguide 	Helpers / Float
  * @example 	html
  * <div class="clear-left">
  * 	I clear the left float
  * </div>
  */
  clear: left;
}

.clear-right {
  /**
  * @name 		```.clear-right```
  * Clear the right float on the element
  * @styleguide 	Helpers / Float
  * @example 	html
  * <div class="clear-right">
  * 	I clear the right float
  * </div>
  */
  clear: right;
}

.clear {
  /**
  * @name 		```.clear```
  * Clear both float on the element
  * @styleguide 	Helpers / Float
  * @example 	html
  * <div class="clear">
  * 	I clear both floats
  * </div>
  */
  clear: both;
}

.pointer-events-none {
  /**
  * @name 		```.pointer-events-none```
  * Disable any pointer events
  * @styleguide 	Helpers / Pointer events
  * @example 	html
  * <div class="pointer-events-none">
  * 	I will not react to any pointer events
  * </div>
  */
  pointer-events: none;
}

.pointer-events-all {
  /**
  * @name 		```.pointer-events-all```
  * Disable any pointer events
  * @styleguide 	Helpers / Pointer events
  * @example 	html
  * <div class="pointer-events-all">
  * 	I will not react to any pointer events
  * </div>
  */
  pointer-events: all;
}

.block {
  /**
  * @name 		```.block```
  * Display the element as ```block```
  * @styleguide 	Helpers / Display
  * @example 	html
  * <div class="block">
  * 	I'm displayed as block
  * </div>
  */
  display: block;
}

.inline {
  /**
  * @name 		```.inline```
  * Display the element as ```inline```
  * @styleguide 	Helpers / Display
  * @example 	html
  * <div class="inline">
  * 	I'm displayed as inline
  * </div>
  */
  display: inline;
}

.inline-block {
  /**
  * @name 		```.inline-block```
  * Display the element as ```inline-block```
  * @styleguide 	Helpers / Display
  * @example 	html
  * <div class="inline-block">
  * 	I'm displayed as inline-block
  * </div>
  */
  display: inline-block;
}

.show {
  /**
  * @name 		```.show```
  * Display the element as ```block```
  * @styleguide 	Helpers / Display
  * @example 	html
  * <div class="show">
  * 	I'm displayed
  * </div>
  */
  display: block;
}

.show-inline {
  /**
  * @name 		```.show-inline```
  * Display the element as ```inline-block```
  * @styleguide 	Helpers / Display
  * @example 	html
  * <div class="show-inline">
  * 	I'm inline displayed
  * </div>
  */
  display: inline-block;
}

.hidden {
  /**
  * @name 		```.hidden```
  * Hide the element by setting the display to ```none```
  * @styleguide 	Helpers / Display
  * @example 	html
  * <div class="hidden">
  * 	I'm hidden
  * </div>
  */
  display: none;
}

.hide {
  /**
  * @name 		```.hide```
  * Hide the element by setting the display to ```none```
  * @styleguide 	Helpers / Display
  * @example 	html
  * <div class="hide">
  * 	I'm hidden
  * </div>
  */
  display: none;
}

.visible {
  /**
  * @name 		```.visible```
  * Display the element by setting the visibility to ```visible```
  * @styleguide 	Helpers / Display
  * @example 	html
  * <div class="visible">
  * 	I'm visible
  * </div>
  */
  visibility: visible;
}

.invisible {
  /**
  * @name 		```.invisible```
  * Display the element by setting the visibility to ```hidden```
  * @styleguide 	Helpers / Display
  * @example 	html
  * <div class="invisible">
  * 	I'm invisible
  * </div>
  */
  visibility: hidden;
}

.visually-hidden {
  /**
  * @name 		```.visually-hidden```
  * Hide the element from display but not for SEO.
  * This class use some tricks to make the element dissapear without using some ```display:none;```, etc...
  * @styleguide 	Helpers / Display
  * @example 	html
  * <div class="visually-hidden">
  * 	I'm only visually hidden
  * </div>
  */
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}

.t-hidden {
  /**
  * @name 		```.t-hidden```
  * Hide the text
  * @styleguide 	Helpers / Text
  * @example 	html
  * <div class="t-hidden">
  * 	I'm not visible
  * </div>
  */
  overflow: hidden;
  text-indent: -9000px;
  display: block;
}

.t-truncate {
  /**
  * @name 		```.t-truncate```
  * Hide the text
  * @styleguide 	Helpers / Text
  * @example 	html
  * <div class="t-truncate">
  * 	I'm truncated cause I talk a lot too much Nulla mauris eros, finibus ac faucibus et, tempus quis risus. Praesent sit amet nulla vel libero euismod sodales eu nec.
  * </div>
  */
  display: inline-block;
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
.t-truncate > * {
  text-overflow: ellipsis;
  overflow: hidden;
}

.t-left {
  /**
  * @name 		```.t-left```
  * Align the text to the left
  * @styleguide 	Helpers / Text Align
  * @example 	html
  * <div class="t-left">
  * 	I'm left aligned
  * </div>
  */
  text-align: left;
}

.t-right {
  /**
  * @name 		```.t-right```
  * Align the text to the right
  * @styleguide 	Helpers / Text Align
  * @example 	html
  * <div class="t-right">
  * 	I'm right aligned
  * </div>
  */
  text-align: right;
}

.t-center {
  /**
  * @name 		```.t-center```
  * Align the text to the center
  * @styleguide 	Helpers / Text Align
  * @example 	html
  * <div class="t-center">
  * 	I'm centered
  * </div>
  */
  text-align: center;
}

.t-justify {
  /**
  * @name 		```.t-justify```
  * Make the text justified
  * @styleguide 	Helpers / Text Align
  * @example 	html
  * <div class="t-justify">
  * 	Nullam vel feugiat nunc. Phasellus facilisis, nisi sit amet viverra rhoncus, arcu risus volutpat dolor, sed euismod magna tellus ac purus. Praesent augue lorem, ullamcorper ac accumsan nec, suscipit eu.
  * </div>
  */
  text-align: justify;
}

.t-lowercase {
  /**
  * @name 		```.t-lowercase```
  * Transform the text to lowercase
  * @styleguide 	Helpers / Text Transform
  * @example 	html
  * <div class="t-lowercase">
  * 	I'M LOWERCASE
  * </div>
  */
  text-transform: lowercase;
}

.t-uppercase {
  /**
  * @name 		```.t-uppercase```
  * Transform the text to uppercase
  * @styleguide 	Helpers / Text Transform
  * @example 	html
  * <div class="t-uppercase">
  * 	I'm uppercase
  * </div>
  */
  text-transform: uppercase;
}

.t-capitalize {
  /**
  * @name 		```.t-capitalize```
  * Capizalize the words
  * @styleguide 	Helpers / Text Transform
  * @example 	html
  * <div class="t-capitalize">
  * 	I'm capitalized
  * </div>
  */
  text-transform: capitalize;
}

.f-bold {
  /**
  * @name 		```.f-bold```
  * Set the font-weight to ```bold```
  * @styleguide 	Helpers / Font Weight
  * @example 	html
  * This <span class="f-bold">word</span> is bold
  */
  font-weight: bold;
}

.f-lighter {
  /**
  * @name 		```.f-lighter```
  * Set the font-weight to ```lighter```
  * @styleguide 	Helpers / Font Weight
  * @example 	html
  * 	This <span class="f-lighter">word</span> is lighter
  */
  font-weight: lighter;
}

.f-bolder {
  /**
  * @name 		```.f-bolder```
  * Set the font-weight to ```bolder```
  * @styleguide 	Helpers / Font Weight
  * @example 	html
  * This <span class="f-bolder">word</span> is bolder
  */
  font-weight: bolder;
}

.f-normal {
  /**
  * @name 		```.f-normal```
  * Set the font-weight to ```normal```
  * @styleguide 	Helpers / Font Weight
  * @example 	html
  * <div class="f-bold">
  * 	This <span class="f-normal">word</span> is normal
  * </div>
  */
  font-weight: normal;
  font-style: normal;
}

.f-italic {
  /**
  * @name 		```.f-italic```
  * Set the font-style to ```italic```
  * @styleguide 	Helpers / Font
  * @example 	html
  * This <span class="f-italic">word</span> is italic
  */
  font-style: italic;
}

.f-oblique {
  /**
  * @name 		```.f-oblique```
  * Set the font-style to ```oblique```
  * @styleguide 	Helpers / Font Style
  * @example 	html
  * This <span class="f-oblique">word</span> is oblique
  */
  font-style: oblique;
}

.f-small-caps {
  /**
  * @name 		```.f-small-caps```
  * Set the font-variant to ```small-caps```
  * @styleguide 	Helpers / Font Variant
  * @example 	html
  * This <span class="f-small-caps">word</span> is small-caps
  */
  font-variant: small-caps;
}

.block-center {
  /**
  * @name 		```.block-center```
  * Set the element to as ```display:block``` and center it
  * @styleguide 	Helpers / Block
  * @example 	html
  * <div class="block-center bkg-primary" style="width:100px;">
  * 	I'm a centered block
  * </div>
  */
  display: block;
  margin-left: auto;
  margin-right: auto;
}

.abs-cover {
  /**
  * @name 		```.abs-cover```
  * Set a size that will cover the entire parent surface by positionning it in absolute
  * @styleguide 	Helpers / Sizes
  * @example 	html
  * <div class="ratio-16-9">
  * 	<img src="https://source.unsplash.com/random" class="abs-cover" />
  * </div>
  */
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translateX(-50%) translateY(-50%);
  min-width: 100%;
  min-height: 100%;
}

.abs-contain {
  /**
  * @name 		```.abs-contain```
  * Set a size that will contain the entire parent surface by positionning it in absolute
  * @styleguide 	Helpers / Sizes
  * @example 	html
  * <div class="ratio-16-9">
  * 	<img src="https://source.unsplash.com/random" class="abs-contain" />
  * </div>
  */
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translateX(-50%) translateY(-50%);
  max-width: 100%;
  max-height: 100%;
}

.abs-fit {
  /**
  * @name 		```.abs-fit```
  * Set a size that will fit the entire parent surface by positionning it in absolute
  * @styleguide 	Helpers / Sizes
  * @example 	html
  * <div class="ratio-16-9">
  * 	<img src="https://source.unsplash.com/random" class="abs-fit" />
  * </div>
  */
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
}

.mo {
  /**
  * @name 		```.mo .mo--center .mo__content```
  * Famous media object class
  * @styleguide 	Helpers / Media object
  * @example 	html
  * <div class="mo">
  *   <div class="mo__content">
  *     <img src="https://source.unsplash.com/random/100x100" />
  *   </div>
  *   <div class="mo__content">
  *     <h2 class="h3">Hello World</h2>
  *     <p class="p">Phasellus fringilla aliquet justo eget pulvinar. Donec in justo leo.</p>
  *   </div>
  * </div>
  */
  display: flex;
  flex-wrap: nowrap;
}
.mo--center {
  align-items: center;
}

.mo--end {
  align-items: flex-end;
}

.mo__content {
  flex: 0 1 auto;
}

.clearfix {
  /**
  * @name 		```.clearfix```
  * Apply the micro clearfix on the element
  * @styleguide 	Helpers / Clearfix
  * @example 	html
  * <div class="clearfix bkg-primary">
  * 	<div class="pull-right">right pulled</div>
  * </div>
  * <div class="bkg-primary">
  * 	<div class="pull-right">right pulled without clearfix</div>
  * </div>
  */
}

.clearfix-float {
  /**
  * @name 		```.clearfix-float```
  * Apply the float clearfix on the element
  * @styleguide 	Helpers / Clearfix
  * @example 	html
  * <div class="clearfix-float bkg-primary">
  * 	<div class="pull-right">right pulled</div>
  * </div>
  * <div class="bkg-primary">
  * 	<div class="pull-right">right pulled without clearfix</div>
  * </div>
  */
}

.clearfix-micro, .clearfix {
  /**
  * @name 		```.clearfix```
  * Apply the micro clearfix on the element
  * @styleguide 	Helpers / Clearfix
  * @example 	html
  * <div class="clearfix bkg-primary">
  * 	<div class="pull-right">right pulled</div>
  * </div>
  * <div class="bkg-primary">
  * 	<div class="pull-right">right pulled without clearfix</div>
  * </div>
  */
}

.clearfix-overflow {
  /**
  * @name 		```.clearfix-overflow```
  * Apply the overflow clearfix on the element
  * @styleguide 	Helpers / Clearfix
  * @example 	html
  * <div class="clearfix-overflow bkg-primary">
  * 	<div class="pull-right">right pulled</div>
  * </div>
  * <div class="bkg-primary">
  * 	<div class="pull-right">right pulled without clearfix</div>
  * </div>
  */
}

.clearfix-facebook {
  /**
  * @name 		```.clearfix-facebook```
  * Apply the facebook clearfix on the element
  * @styleguide 	Helpers / Clearfix
  * @example 	html
  * <div class="clearfix-facebook bkg-primary">
  * 	<div class="pull-right">right pulled</div>
  * </div>
  * <div class="bkg-primary">
  * 	<div class="pull-right">right pulled without clearfix</div>
  * </div>
  */
}

.ratio-21-9 {
  /**
  * @name 		```.ratio-21-9```
  * Keep a 16/9 ratio on a particular element. Applied by setting height to 0 and paddingtop to 100% / 16 * 9
  * @styleguide 	Helpers / Ratios
  * @example 	html
  * <div class="bkg-primary ratio-21-9"></div>
  */
  position: relative;
}
.ratio-21-9::before {
  content: "";
  padding-top: 42.8571428571%;
  float: left;
}
.ratio-21-9::after {
  content: "";
  display: block;
  clear: both;
}

.ratio-16-9 {
  /**
  * @name 		```.ratio-16-9```
  * Keep a 16/9 ratio on a particular element. Applied by setting height to 0 and paddingtop to 100% / 16 * 9
  * @styleguide 	Helpers / Ratios
  * @example 	html
  * <div class="bkg-primary ratio-16-9"></div>
  */
  position: relative;
}
.ratio-16-9::before {
  content: "";
  padding-top: 56.25%;
  float: left;
}
.ratio-16-9::after {
  content: "";
  display: block;
  clear: both;
}

.ratio-4-3 {
  /**
  * @name 		```.ratio-4-3```
  * Keep a 4/3 ratio on a particular element. Applied by setting height to 0 and paddingtop to 100% / 4 * 3
  * @styleguide 	Helpers / Ratios
  * @example 	html
  * <div class="bkg-primary ratio-4-3"></div>
  */
  position: relative;
}
.ratio-4-3::before {
  content: "";
  padding-top: 75%;
  float: left;
}
.ratio-4-3::after {
  content: "";
  display: block;
  clear: both;
}

.ratio-1-1 {
  /**
  * @name 		```.ratio-1-1```
  * Keep a 1/1 ratio on a particular element. Applied by setting height to 0 and paddingtop to 100%
  * @styleguide 	Helpers / Ratios
  * @example 	html
  * <div class="bkg-primary ratio-1-1"></div>
  */
  position: relative;
}
.ratio-1-1::before {
  content: "";
  padding-top: 100%;
  float: left;
}
.ratio-1-1::after {
  content: "";
  display: block;
  clear: both;
}

.no-transitions {
  /**
  * @name 		```.no-transitions```
  * Disable the transitions <span class="f-bold">only on the element</span>
  * @styleguide 	Helpers / Transitions
  * @example 	html
  * <div class="no-transitions">
  * 	I have no more transitions
  * 	<div>But I have</div>
  * </div>
  */
}
.no-transitions, .no-transitions:before, .no-transitions:after {
  transition: none !important;
}

.clear-transitions {
  /**
  * @name 		```.clear-transitions```
  * Disable the transitions <span class="f-bold">on the element and all his children</span>
  * @styleguide 	Helpers / Transitions
  * @example 	html
  * <div class="clear-transitions">
  * 	I have no more transitions
  * 	<div>Me neither</div>
  * </div>
  */
}
.clear-transitions, .clear-transitions:before, .clear-transitions:after, .clear-transitions *, .clear-transitions *:before, .clear-transitions *:after {
  transition: none !important;
}

.no-animations {
  /**
  * @name 		```.no-animations```
  * Disable the animations <span class="f-bold">only on the element</span>
  * @styleguide 	Helpers / Animations
  * @example 	html
  * <div class="no-animations">
  * 	I have no more animations
  * 	<div>But I have</div>
  * </div>
  */
}
.no-animations, .no-animations:before, .no-animations:after {
  animation: none !important;
}

.clear-animations {
  /**
  * @name 		```.clear-animations```
  * Disable the transitions <span class="f-bold">on the element and all his children</span>
  * @styleguide 	Helpers / Animations
  * @example 	html
  * <div class="clear-animations">
  * 	I have no more animations
  * 	<div>Me neither</div>
  * </div>
  */
}
.clear-animations, .clear-animations:before, .clear-animations:after, .clear-animations *, .clear-animations *:before, .clear-animations *:after {
  animation: none !important;
}

.no-transmations {
  /**
  * @name 		```.no-transmations```
  * Disable the animations and transitions <span class="f-bold">only on the element</span>
  * @styleguide 	Helpers / Transmations
  * @example 	html
  * <div class="no-transmations">
  * 	I have no more animations or transitions
  * 	<div>But I have</div>
  * </div>
  */
}
.no-transmations, .no-transmations:before, .no-transmations:after {
  transition: none !important;
  animation: none !important;
}

.clear-transmations {
  /**
  * @name 		```.clear-transmations```
  * Disable the animations and transitions <span class="f-bold">on the element and all his children</span>
  * @styleguide 	Helpers / Transmations
  * @example 	html
  * <div class="clear-transmations">
  * 	I have no more animations or transitions
  * 	<div>Me neither</div>
  * </div>
  */
}
.clear-transmations, .clear-transmations:before, .clear-transmations:after, .clear-transmations *, .clear-transmations *:before, .clear-transmations *:after {
  transition: none !important;
  animation: none !important;
}

/**
 * @name    effect-bubble
 * Create an arrow bubble effect
 *
 * @param 		{String} 			[$side=bottom] 				The side (top,right,bottom,left)
 * @param 		{String} 			[$align=center] 			The alignement (left,center,right,top,middle,bottom)
 * @param 		{Number} 			[$size=10px] 				The size of the arrow
 * @param 		{Color} 			[$color=s-color(primary)] 	The color of the bubble
 * @param 		{Number} 			[$arrow-offset=10px] 		The arrow offset from the side of the bubble
 * @param 		{Number} 			[$border-width=0] 			The border width of the bubble
 * @param 		{Color} 			[$border-color=null] 		The border color of the bubble
 *
 * @example
 * .my-cool-bubble {
 * 		\@include sugar.effect-bubble(
 * 			$color : sugar.color(secondary)
 * 		);
 * 		color : white;
 * }
 *
 * @see 			https://codepen.io/kirkas/pen/otqyJ
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name        effect-depth
 * Generate a drop shadow depending on the depth specified
 *
 * @param 		{Integer} 			$depth 							The depth wanted (1,2,3,4,etc...)
 * @param 		{Color} 			[$color=rgba(0,0,0,.2)] 		The drop shadow color
 *
 * @example     scss
 * .my-cool-element {
 * 		\@include sugar.effect-depth(2);
 * }
 *
 * @author 	 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      effect-hey
 * Create a poping dot effect to catch user attention on a particular item
 * This mixin affect the :before and :after pseudo selector of the item
 *
 * @param 		{String} 		[$vertical-align=top] 			Where to put the dot verticaly (top,middle,bottom)
 * @param 		{String} 		[$align=left] 					Where to put the dot horizontaly (left,center,right)
 * @param 		{Number} 		[$size=20px] 					The size of the dot
 * @param 		{Color} 		[$color=primary] 				The color of the dot
 * @param 		{Number} 		[$offset-top=0] 				The offset top
 * @param 		{Number} 		[$offset-right=0] 				The offset right
 * @param 		{Number} 		[$offset-bottom=0] 				The offset bottom
 * @param 		{Number} 		[$offset-left=0] 				The offset left
 *
 * @example
 * .my-cool-element {
 * 		\@include sugar.effect-hey(
 * 			$align : right,
 * 			$color : secondary,
 * 			$size : 10px,
 * 			$offset-top : -10px,
 * 			$offset-right : -10px
 * 		);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * Generate a long shadow effect like [this](https://www.google.ch/search?q=long+shadow&espv=2&biw=2560&bih=1316&source=lnms&tbm=isch&sa=X&ved=0ahUKEwjjne6x49LPAhVBHRQKHat8AW8Q_AUIBigB)
 *
 * @param 		{Color} 		[$color=rgba(0,0,0,.3)] 			The shadow color
 * @param 		{String} 		[$type=text] 						The shadow type (text,box)
 * @param 		{Degree} 		[$angle=135deg] 					The shadow angle
 * @param 		{Integer} 		[$depth=20] 						The shadow depth
 * @param 		{Boolean} 		[$fade=false] 						If true, the shadow will fade itself
 * @param 		{Number} 		[$blur=0] 							The blur amount of the shadow
 * @param 		{Number} 		[$blur-ratio=0] 					The ratio to blur each depth more
 *
 * @example
 * .my-cool-title {
 * 		\@include sugar.effect-long-shadow(
 * 			$depth : 10
 * 		);
 * }
 * .my-cool-box {
 * 		\@include sugar.effect-long-shadow(
 * 			$type : box
 * 		);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/**
 * @name      effect-side-lined
 * Create side lines around an item
 *
 * @param 			{String} 		[$style=solid] 			The line style, same possible values as the border-style property
 * @param 			{String} 		[$side=both] 			The side where to put lines (left,right,both)
 * @param 			{Number} 		[$height=1px] 			The lines height
 * @param 			{Number} 		[$width=50%] 			The width of the lines
 * @param 			{Color} 		[$color=text]			The color of the lines
 * @param 			{Number} 		[$padding=0] 			The padding between the lines and the content
 * @param 			{Number} 		[$offset-top=null] 		The line offset top
 *
 * @example
 * h1 {
 * 		\@include sugar.effect-side-lined(
 * 			$padding : 20px,
 * 			$side : right,
 * 			$width : 100%
 * 		);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
/* http://meyerweb.com/eric/tools/css/reset/
   v2.0-modified | 20110126
   License: none (public domain)
*/
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

/* make sure to set some focus styles for accessibility */
:focus {
  outline: 0;
}

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block;
}

body {
  line-height: 1;
}

ol, ul {
  list-style: none;
}

blockquote, q {
  quotes: none;
}

blockquote:before, blockquote:after,
q:before, q:after {
  content: "";
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

input[type=search]::-webkit-search-cancel-button,
input[type=search]::-webkit-search-decoration,
input[type=search]::-webkit-search-results-button,
input[type=search]::-webkit-search-results-decoration {
  -webkit-appearance: none;
  -moz-appearance: none;
}

input[type=search] {
  -webkit-appearance: none;
  -moz-appearance: none;
  -webkit-box-sizing: content-box;
  -moz-box-sizing: content-box;
  box-sizing: content-box;
}

textarea {
  overflow: auto;
  vertical-align: top;
  resize: vertical;
}

/**
 * Correct `inline-block` display not defined in IE 6/7/8/9 and Firefox 3.
 */
audio,
canvas,
video {
  display: inline-block;
  *display: inline;
  *zoom: 1;
  max-width: 100%;
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Address styling not present in IE 7/8/9, Firefox 3, and Safari 4.
 * Known issue: no IE 6 support.
 */
[hidden] {
  display: none;
}

/**
 * 1. Correct text resizing oddly in IE 6/7 when body `font-size` is set using
 *    `em` units.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-size: 100%;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
  -ms-text-size-adjust: 100%;
  /* 2 */
}

/**
 * Address `outline` inconsistency between Chrome and other browsers.
 */
a:focus {
  outline: thin dotted;
}

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0;
}

/**
 * 1. Remove border when inside `a` element in IE 6/7/8/9 and Firefox 3.
 * 2. Improve image quality when scaled in IE 7.
 */
img {
  border: 0;
  /* 1 */
  -ms-interpolation-mode: bicubic;
  /* 2 */
}

/**
 * Address margin not present in IE 6/7/8/9, Safari 5, and Opera 11.
 */
figure {
  margin: 0;
}

/**
 * Correct margin displayed oddly in IE 6/7.
 */
form {
  margin: 0;
}

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct color not being inherited in IE 6/7/8/9.
 * 2. Correct text not wrapping in Firefox 3.
 * 3. Correct alignment displayed oddly in IE 6/7.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  white-space: normal;
  /* 2 */
  *margin-left: -7px;
  /* 3 */
}

/**
 * 1. Correct font size not being inherited in all browsers.
 * 2. Address margins set differently in IE 6/7, Firefox 3+, Safari 5,
 *    and Chrome.
 * 3. Improve appearance and consistency in all browsers.
 */
button,
input,
select,
textarea {
  font-size: 100%;
  /* 1 */
  margin: 0;
  /* 2 */
  vertical-align: baseline;
  /* 3 */
  *vertical-align: middle;
  /* 3 */
}

/**
 * Address Firefox 3+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
button,
input {
  line-height: normal;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Chrome, Safari 5+, and IE 6+.
 * Correct `select` style inheritance in Firefox 4+ and Opera.
 */
button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 * 4. Remove inner spacing in IE 7 without affecting normal text inputs.
 *    Known issue: inner spacing remains in IE 6.
 */
button,
html input[type=button],
input[type=reset],
input[type=submit] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
  *overflow: visible;
  /* 4 */
}

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default;
}

/**
 * 1. Address box sizing set to content-box in IE 8/9.
 * 2. Remove excess padding in IE 8/9.
 * 3. Remove excess padding in IE 7.
 *    Known issue: excess padding remains in IE 6.
 */
input[type=checkbox],
input[type=radio] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
  *height: 13px;
  /* 3 */
  *width: 13px;
  /* 3 */
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */
input[type=search] {
  -webkit-appearance: textfield;
  /* 1 */
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box;
  /* 2 */
  box-sizing: content-box;
}

/**
 * Remove inner padding and search cancel button in Safari 5 and Chrome
 * on OS X.
 */
input[type=search]::-webkit-search-cancel-button,
input[type=search]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Remove inner padding and border in Firefox 3+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * 1. Remove default vertical scrollbar in IE 6/7/8/9.
 * 2. Improve readability and alignment in all browsers.
 */
textarea {
  overflow: auto;
  /* 1 */
  vertical-align: top;
  /* 2 */
}

/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

html,
button,
input,
select,
textarea {
  color: #222;
}

::-moz-selection {
  background: #b3d4fc;
  text-shadow: none;
}

::selection {
  background: #b3d4fc;
  text-shadow: none;
}

img {
  vertical-align: middle;
}

fieldset {
  border: 0;
  margin: 0;
  padding: 0;
}

textarea {
  resize: vertical;
}

.chromeframe {
  margin: 0.2em 0;
  background: #ccc;
  color: #000;
  padding: 0.2em 0;
}

/**
* @styleguide 	Colors / Swatches
* @name 		default
* @color 		#848e91
* @display 	color
*/
/**
* @styleguide 	Colors / Swatches
* @name 		title
* @color 		#2b3438
* @display 	color
*/
/**
* @styleguide 	Colors / Swatches
* @name 		text
* @color 		#848e91
* @display 	color
*/
/**
* @styleguide 	Colors / Swatches
* @name 		link
* @color 		#f2bc2b
* @display 	color
*/
/**
* @styleguide 	Colors / Swatches
* @name 		primary
* @color 		#f2bc2b
* @display 	color
*/
/**
* @styleguide 	Colors / Swatches
* @name 		secondary
* @color 		#2b3438
* @display 	color
*/
/**
* @styleguide 	Colors / Swatches
* @name 		success
* @color 		#5cb85c
* @display 	color
*/
/**
* @styleguide 	Colors / Swatches
* @name 		warning
* @color 		#f0ad4e
* @display 	color
*/
/**
* @styleguide 	Colors / Swatches
* @name 		error
* @color 		#d9534f
* @display 	color
*/
/**
* @styleguide 	Colors / Swatches
* @name 		info
* @color 		#2199e8
* @display 	color
*/
.s-settings:after {
  content: '{"unit": "rem", "reset": true, "border-box": true, "sizes": {"smaller": 0.3, "small": 0.6, "default": 1, "medium": 1.4, "big": 2, "bigger": 3}, "typography": {"font-family": "default", "font-size": "14px", "font-sizes": null, "line-letters-count": 55, "font-format": {"eot": "embedded-opentype", "woff2": "woff2", "woff": "woff", "ttf": "truetype", "otf": "opentype", "svg": "svg", "svgz": "svgz"}}, "look-and-feel": {"border-radius": "0em", "padding-vertical": "1.4em", "padding-horizontal": "0.8em", "disabled-opacity": 0.5, "line-height": 1.4}, "spaces": {"smaller": "5px", "small": "10px", "default": "20px", "medium": "40px", "big": "70px", "bigger": "100px"}, "colors": {"default": {"color": "#848e91"}, "title": {"color": "#2b3438"}, "text": {"color": "default"}, "link": {"color": "primary"}, "primary": {"color": "#f2bc2b"}, "secondary": {"color": "#2b3438"}, "success": {"color": "#5cb85c"}, "warning": {"color": "#f0ad4e"}, "error": {"color": "#d9534f"}, "info": {"color": "#2199e8"}}, "modular-scale": {"base": "1rem", "ratio": 1.33}, "text-format": {"scope-class": "tf"}, "vertical-rhythm": {"scope-class": "vr"}, "fonts": {"default": {"font-family": ["Helvetica Neue", "Helvetica", "Verdana", "Arial", "sans-serif"], "font-weight": "normal", "cap-height": 0.65}, "quote": {"font-family": ["Palatino", "Times", "Georgia", "serif"], "font-weight": "normal", "cap-height": 0.65}, "code": {"font-family": ["Menlo", "Monaco", "Consolas", "Courier New", "monospace"], "font-weight": "normal", "cap-height": 0.65}}, "filters": [], "transitions": {"fast": ["all", "0.1s", "ease-in-out", "0s"], "default": ["all", "0.2s", "ease-in-out", "0s"], "slow": ["all", "0.5s", "ease-in-out", "0s"]}, "debug": {"test-arguments": true}}';
  display: none;
}

html {
  box-sizing: border-box;
}

*,
*:before,
*:after {
  box-sizing: inherit;
}

a {
  color: inherit;
}

html {
  font-size: 14px;
  color: #848e91;
  font-family: "Helvetica Neue", Helvetica, Verdana, Arial, sans-serif;
  font-weight: normal;
}

body {
  color: #848e91;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/**
* @name   			default
* @styleguide 		Fonts / Faces
* @display 		font
* @font-family 	Helvetica Neue, Helvetica, Verdana, Arial, sans-serif
* @font-style 		
* @font-weight 	normal
* @font-display    
*/
/**
* @name   			quote
* @styleguide 		Fonts / Faces
* @display 		font
* @font-family 	Palatino, Times, Georgia, serif
* @font-style 		
* @font-weight 	normal
* @font-display    
*/
/**
* @name   			code
* @styleguide 		Fonts / Faces
* @display 		font
* @font-family 	Menlo, Monaco, Consolas, Courier New, monospace
* @font-style 		
* @font-weight 	normal
* @font-display    
*/
/**
* @name 	```.tr-fast```
* @styleguide  	Helpers / Transitions
* @example 	html
* <div class="tr-fast">
* 	I'm transitionned with fast
* </div>
*/
.tr-fast {
  transition: all 0.1s ease-in-out 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
}

/**
* @name 	```.tr-default```
* @styleguide  	Helpers / Transitions
* @example 	html
* <div class="tr-default">
* 	I'm transitionned with default
* </div>
*/
.tr {
  transition: all 0.2s ease-in-out 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
}

/**
* @name 	```.tr-slow```
* @styleguide  	Helpers / Transitions
* @example 	html
* <div class="tr-slow">
* 	I'm transitionned with slow
* </div>
*/
.tr-slow {
  transition: all 0.5s ease-in-out 0s, outline-color 0.000001s linear 0s;
  outline-color: black;
}

/**
* @name 	```.f-default```
* @styleguide  	Fonts / Classes
* @example 	html
* <div class="f-default">
* 	I have the font "default" applied
* </div>
*/
.f {
  font-family: "Helvetica Neue", Helvetica, Verdana, Arial, sans-serif;
  font-weight: normal;
}

/**
* @name 	```.f-quote```
* @styleguide  	Fonts / Classes
* @example 	html
* <div class="f-quote">
* 	I have the font "quote" applied
* </div>
*/
.f-quote {
  font-family: Palatino, Times, Georgia, serif;
  font-weight: normal;
}

/**
* @name 	```.f-code```
* @styleguide  	Fonts / Classes
* @example 	html
* <div class="f-code">
* 	I have the font "code" applied
* </div>
*/
.f-code {
  font-family: Menlo, Monaco, Consolas, "Courier New", monospace;
  font-weight: normal;
}

/**
* @name 	```.m-b-smaller```
* @styleguide  	Layout / Margins
* @example 	html
* <div class="m-b-smaller" style="background:#f2bc2b; width:100px; height:5px"></div>
* <div style="background:#2b3438; width:100px; height:5px"></div>
*/
.m-b-smaller {
  margin-bottom: 5px;
}

/**
* @name 	```.m-t-smaller```
* @styleguide  	Layout / Margins
* @example 	html
* <div style="background:#f2bc2b; width:100px; height:5px"></div>
* <div class="m-t-smaller" style="background:#2b3438; width:100px; height:5px"></div>
*/
.m-t-smaller {
  margin-top: 5px;
}

/**
* @name 	```.m-l-smaller```
* @styleguide  	Layout / Margins
* @example 	html
* <div style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
* <div class="m-l-smaller" style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
*/
.m-l-smaller {
  margin-left: 5px;
}

/**
* @name 	```.m-r-smaller```
* @styleguide  	Layout / Margins
* @example 	html
* <div class="m-r-smaller" style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
* <div style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
*/
.m-r-smaller {
  margin-right: 5px;
}

/**
* @name 	```.m-s-smaller```
* @styleguide  	Layout / Margins
* @example 	html
* <div class="m-s-smaller" style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
* <div style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
*/
.m-s-smaller {
  margin-left: 5px;
  margin-right: 5px;
}

/**
* @name 	```.p-smaller```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-smaller" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-smaller {
  padding: 5px;
}

/**
* @name 	```.p-b-smaller```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-b-smaller" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-b-smaller {
  padding-bottom: 5px;
}

/**
* @name 	```.p-t-smaller```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-t-smaller" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-t-smaller {
  padding-top: 5px;
}

/**
* @name 	```.p-l-smaller```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-l-smaller" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-l-smaller {
  padding-left: 5px;
}

/**
* @name 	```.p-r-smaller```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-r-smaller" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-r-smaller {
  padding-right: 5px;
}

/**
* @name 	```.p-s-smaller```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-s-smaller" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-s-smaller {
  padding-left: 5px;
  padding-right: 5px;
}

/**
* @name 	```.m-b-small```
* @styleguide  	Layout / Margins
* @example 	html
* <div class="m-b-small" style="background:#f2bc2b; width:100px; height:5px"></div>
* <div style="background:#2b3438; width:100px; height:5px"></div>
*/
.m-b-small {
  margin-bottom: 10px;
}

/**
* @name 	```.m-t-small```
* @styleguide  	Layout / Margins
* @example 	html
* <div style="background:#f2bc2b; width:100px; height:5px"></div>
* <div class="m-t-small" style="background:#2b3438; width:100px; height:5px"></div>
*/
.m-t-small {
  margin-top: 10px;
}

/**
* @name 	```.m-l-small```
* @styleguide  	Layout / Margins
* @example 	html
* <div style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
* <div class="m-l-small" style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
*/
.m-l-small {
  margin-left: 10px;
}

/**
* @name 	```.m-r-small```
* @styleguide  	Layout / Margins
* @example 	html
* <div class="m-r-small" style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
* <div style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
*/
.m-r-small {
  margin-right: 10px;
}

/**
* @name 	```.m-s-small```
* @styleguide  	Layout / Margins
* @example 	html
* <div class="m-s-small" style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
* <div style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
*/
.m-s-small {
  margin-left: 10px;
  margin-right: 10px;
}

/**
* @name 	```.p-small```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-small" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-small {
  padding: 10px;
}

/**
* @name 	```.p-b-small```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-b-small" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-b-small {
  padding-bottom: 10px;
}

/**
* @name 	```.p-t-small```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-t-small" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-t-small {
  padding-top: 10px;
}

/**
* @name 	```.p-l-small```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-l-small" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-l-small {
  padding-left: 10px;
}

/**
* @name 	```.p-r-small```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-r-small" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-r-small {
  padding-right: 10px;
}

/**
* @name 	```.p-s-small```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-s-small" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-s-small {
  padding-left: 10px;
  padding-right: 10px;
}

/**
* @name 	```.m-b```
* @styleguide  	Layout / Margins
* @example 	html
* <div class="m-b" style="background:#f2bc2b; width:100px; height:5px"></div>
* <div style="background:#2b3438; width:100px; height:5px"></div>
*/
.m-b {
  margin-bottom: 20px;
}

/**
* @name 	```.m-t```
* @styleguide  	Layout / Margins
* @example 	html
* <div style="background:#f2bc2b; width:100px; height:5px"></div>
* <div class="m-t" style="background:#2b3438; width:100px; height:5px"></div>
*/
.m-t {
  margin-top: 20px;
}

/**
* @name 	```.m-l```
* @styleguide  	Layout / Margins
* @example 	html
* <div style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
* <div class="m-l" style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
*/
.m-l {
  margin-left: 20px;
}

/**
* @name 	```.m-r```
* @styleguide  	Layout / Margins
* @example 	html
* <div class="m-r" style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
* <div style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
*/
.m-r {
  margin-right: 20px;
}

/**
* @name 	```.m-s```
* @styleguide  	Layout / Margins
* @example 	html
* <div class="m-s" style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
* <div style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
*/
.m-s {
  margin-left: 20px;
  margin-right: 20px;
}

/**
* @name 	```.p```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p:not(p) {
  padding: 20px;
}

/**
* @name 	```.p-b```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-b" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-b {
  padding-bottom: 20px;
}

/**
* @name 	```.p-t```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-t" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-t {
  padding-top: 20px;
}

/**
* @name 	```.p-l```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-l" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-l {
  padding-left: 20px;
}

/**
* @name 	```.p-r```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-r" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-r {
  padding-right: 20px;
}

/**
* @name 	```.p-s```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-s" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-s {
  padding-left: 20px;
  padding-right: 20px;
}

/**
* @name 	```.m-b-medium```
* @styleguide  	Layout / Margins
* @example 	html
* <div class="m-b-medium" style="background:#f2bc2b; width:100px; height:5px"></div>
* <div style="background:#2b3438; width:100px; height:5px"></div>
*/
.m-b-medium {
  margin-bottom: 40px;
}

/**
* @name 	```.m-t-medium```
* @styleguide  	Layout / Margins
* @example 	html
* <div style="background:#f2bc2b; width:100px; height:5px"></div>
* <div class="m-t-medium" style="background:#2b3438; width:100px; height:5px"></div>
*/
.m-t-medium {
  margin-top: 40px;
}

/**
* @name 	```.m-l-medium```
* @styleguide  	Layout / Margins
* @example 	html
* <div style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
* <div class="m-l-medium" style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
*/
.m-l-medium {
  margin-left: 40px;
}

/**
* @name 	```.m-r-medium```
* @styleguide  	Layout / Margins
* @example 	html
* <div class="m-r-medium" style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
* <div style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
*/
.m-r-medium {
  margin-right: 40px;
}

/**
* @name 	```.m-s-medium```
* @styleguide  	Layout / Margins
* @example 	html
* <div class="m-s-medium" style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
* <div style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
*/
.m-s-medium {
  margin-left: 40px;
  margin-right: 40px;
}

/**
* @name 	```.p-medium```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-medium" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-medium {
  padding: 40px;
}

/**
* @name 	```.p-b-medium```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-b-medium" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-b-medium {
  padding-bottom: 40px;
}

/**
* @name 	```.p-t-medium```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-t-medium" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-t-medium {
  padding-top: 40px;
}

/**
* @name 	```.p-l-medium```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-l-medium" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-l-medium {
  padding-left: 40px;
}

/**
* @name 	```.p-r-medium```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-r-medium" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-r-medium {
  padding-right: 40px;
}

/**
* @name 	```.p-s-medium```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-s-medium" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-s-medium {
  padding-left: 40px;
  padding-right: 40px;
}

/**
* @name 	```.m-b-big```
* @styleguide  	Layout / Margins
* @example 	html
* <div class="m-b-big" style="background:#f2bc2b; width:100px; height:5px"></div>
* <div style="background:#2b3438; width:100px; height:5px"></div>
*/
.m-b-big {
  margin-bottom: 70px;
}

/**
* @name 	```.m-t-big```
* @styleguide  	Layout / Margins
* @example 	html
* <div style="background:#f2bc2b; width:100px; height:5px"></div>
* <div class="m-t-big" style="background:#2b3438; width:100px; height:5px"></div>
*/
.m-t-big {
  margin-top: 70px;
}

/**
* @name 	```.m-l-big```
* @styleguide  	Layout / Margins
* @example 	html
* <div style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
* <div class="m-l-big" style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
*/
.m-l-big {
  margin-left: 70px;
}

/**
* @name 	```.m-r-big```
* @styleguide  	Layout / Margins
* @example 	html
* <div class="m-r-big" style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
* <div style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
*/
.m-r-big {
  margin-right: 70px;
}

/**
* @name 	```.m-s-big```
* @styleguide  	Layout / Margins
* @example 	html
* <div class="m-s-big" style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
* <div style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
*/
.m-s-big {
  margin-left: 70px;
  margin-right: 70px;
}

/**
* @name 	```.p-big```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-big" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-big {
  padding: 70px;
}

/**
* @name 	```.p-b-big```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-b-big" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-b-big {
  padding-bottom: 70px;
}

/**
* @name 	```.p-t-big```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-t-big" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-t-big {
  padding-top: 70px;
}

/**
* @name 	```.p-l-big```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-l-big" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-l-big {
  padding-left: 70px;
}

/**
* @name 	```.p-r-big```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-r-big" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-r-big {
  padding-right: 70px;
}

/**
* @name 	```.p-s-big```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-s-big" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-s-big {
  padding-left: 70px;
  padding-right: 70px;
}

/**
* @name 	```.m-b-bigger```
* @styleguide  	Layout / Margins
* @example 	html
* <div class="m-b-bigger" style="background:#f2bc2b; width:100px; height:5px"></div>
* <div style="background:#2b3438; width:100px; height:5px"></div>
*/
.m-b-bigger {
  margin-bottom: 100px;
}

/**
* @name 	```.m-t-bigger```
* @styleguide  	Layout / Margins
* @example 	html
* <div style="background:#f2bc2b; width:100px; height:5px"></div>
* <div class="m-t-bigger" style="background:#2b3438; width:100px; height:5px"></div>
*/
.m-t-bigger {
  margin-top: 100px;
}

/**
* @name 	```.m-l-bigger```
* @styleguide  	Layout / Margins
* @example 	html
* <div style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
* <div class="m-l-bigger" style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
*/
.m-l-bigger {
  margin-left: 100px;
}

/**
* @name 	```.m-r-bigger```
* @styleguide  	Layout / Margins
* @example 	html
* <div class="m-r-bigger" style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
* <div style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
*/
.m-r-bigger {
  margin-right: 100px;
}

/**
* @name 	```.m-s-bigger```
* @styleguide  	Layout / Margins
* @example 	html
* <div class="m-s-bigger" style="display:inline-block; background:#f2bc2b; width:50px; height:50px"></div>
* <div style="display:inline-block; background:#2b3438; width:50px; height:50px"></div>
*/
.m-s-bigger {
  margin-left: 100px;
  margin-right: 100px;
}

/**
* @name 	```.p-bigger```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-bigger" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-bigger {
  padding: 100px;
}

/**
* @name 	```.p-b-bigger```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-b-bigger" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-b-bigger {
  padding-bottom: 100px;
}

/**
* @name 	```.p-t-bigger```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-t-bigger" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-t-bigger {
  padding-top: 100px;
}

/**
* @name 	```.p-l-bigger```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-l-bigger" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-l-bigger {
  padding-left: 100px;
}

/**
* @name 	```.p-r-bigger```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-r-bigger" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-r-bigger {
  padding-right: 100px;
}

/**
* @name 	```.p-s-bigger```
* @styleguide  	Layout / Paddings
* @example 	html
* <div class="p-s-bigger" style="border:1px solid #f2bc2b; width:150px; height:150px;">
* 	<div style="background:#2b3438; width:100%; height:100%"></div>
* </div>
*/
.p-s-bigger {
  padding-left: 100px;
  padding-right: 100px;
}

/**
* @name 	```.s-smaller```
* @styleguide  	Layout / Sizes
* @example 	html
* <div class="s-smaller">
* 	I have the size "smaller" defined
* </div>
*/
.s-smaller {
  font-size: 0.3rem;
}

/**
* @name 	```.s-smaller-rel```
* @styleguide  	Layout / Sizes
* @example 	html
* <div class="s-smaller-rel">
* 	I have the size "smaller" defined relative to my parent
* </div>
*/
.s-smaller-rel {
  font-size: to-em(0.3);
}

/**
* @name 	```.s-small```
* @styleguide  	Layout / Sizes
* @example 	html
* <div class="s-small">
* 	I have the size "small" defined
* </div>
*/
.s-small {
  font-size: 0.6rem;
}

/**
* @name 	```.s-small-rel```
* @styleguide  	Layout / Sizes
* @example 	html
* <div class="s-small-rel">
* 	I have the size "small" defined relative to my parent
* </div>
*/
.s-small-rel {
  font-size: to-em(0.6);
}

/**
* @name 	```.s-default```
* @styleguide  	Layout / Sizes
* @example 	html
* <div class="s-default">
* 	I have the size "default" defined
* </div>
*/
.s {
  font-size: 1rem;
}

/**
* @name 	```.s-default-rel```
* @styleguide  	Layout / Sizes
* @example 	html
* <div class="s-default-rel">
* 	I have the size "default" defined relative to my parent
* </div>
*/
.s-rel {
  font-size: to-em(1);
}

/**
* @name 	```.s-medium```
* @styleguide  	Layout / Sizes
* @example 	html
* <div class="s-medium">
* 	I have the size "medium" defined
* </div>
*/
.s-medium {
  font-size: 1.4rem;
}

/**
* @name 	```.s-medium-rel```
* @styleguide  	Layout / Sizes
* @example 	html
* <div class="s-medium-rel">
* 	I have the size "medium" defined relative to my parent
* </div>
*/
.s-medium-rel {
  font-size: to-em(1.4);
}

/**
* @name 	```.s-big```
* @styleguide  	Layout / Sizes
* @example 	html
* <div class="s-big">
* 	I have the size "big" defined
* </div>
*/
.s-big {
  font-size: 2rem;
}

/**
* @name 	```.s-big-rel```
* @styleguide  	Layout / Sizes
* @example 	html
* <div class="s-big-rel">
* 	I have the size "big" defined relative to my parent
* </div>
*/
.s-big-rel {
  font-size: to-em(2);
}

/**
* @name 	```.s-bigger```
* @styleguide  	Layout / Sizes
* @example 	html
* <div class="s-bigger">
* 	I have the size "bigger" defined
* </div>
*/
.s-bigger {
  font-size: 3rem;
}

/**
* @name 	```.s-bigger-rel```
* @styleguide  	Layout / Sizes
* @example 	html
* <div class="s-bigger-rel">
* 	I have the size "bigger" defined relative to my parent
* </div>
*/
.s-bigger-rel {
  font-size: to-em(3);
}

/**
* @name 	```.no-p-t```
* Reset **top** padding
* @styleguide  	Layout / No padding
* @example 	html
* <div class="no-p-t" style="display:inline-block; background:#f2bc2b; width:50px; height:50px;"></div>
*/
.no-p-t {
  padding-top: 0 !important;
}

/**
* @name 	```.no-p-r```
* Reset **right** padding
* @styleguide  	Layout / No padding
* @example 	html
* <div class="no-p-r" style="display:inline-block; background:#f2bc2b; width:50px; height:50px;"></div>
*/
.no-p-r {
  padding-right: 0 !important;
}

/**
* @name 	```.no-p-b```
* Reset **bottom** padding
* @styleguide  	Layout / No padding
* @example 	html
* <div class="no-p-b" style="display:inline-block; background:#f2bc2b; width:50px; height:50px;"></div>
*/
.no-p-b {
  padding-bottom: 0 !important;
}

/**
* @name 	```.no-p-l```
* Reset **left** padding
* @styleguide  	Layout / No padding
* @example 	html
* <div class="no-p-l" style="display:inline-block; background:#f2bc2b; width:50px; height:50px;"></div>
*/
.no-p-l {
  padding-left: 0 !important;
}

/**
* @name 	```.no-p-s```
* Reset **left** and **right** paddings
* @styleguide  	Layout / No padding
* @example 	html
* <div class="no-p-s" style="display:inline-block; background:#f2bc2b; width:50px; height:50px;"></div>
*/
.no-p-s {
  padding-left: 0 !important;
  padding-right: 0 !important;
}

/**
* @name 	```.no-m-t```
* Reset **top** padding
* @styleguide  	Layout / No margin
* @example 	html
* <div class="no-m-t" style="display:inline-block; background:#f2bc2b; width:50px; height:50px;"></div>
*/
.no-m-t {
  margin-top: 0 !important;
}

/**
* @name 	```.no-m-r```
* Reset **right** padding
* @styleguide  	Layout / No margin
* @example 	html
* <div class="no-m-r" style="display:inline-block; background:#f2bc2b; width:50px; height:50px;"></div>
*/
.no-m-r {
  margin-right: 0 !important;
}

/**
* @name 	```.no-m-b```
* Reset **bottom** padding
* @styleguide  	Layout / No margin
* @example 	html
* <div class="no-m-b" style="display:inline-block; background:#f2bc2b; width:50px; height:50px;"></div>
*/
.no-m-b {
  margin-bottom: 0 !important;
}

/**
* @name 	```.no-m-l```
* Reset **left** padding
* @styleguide  	Layout / No margin
* @example 	html
* <div class="no-m-l" style="display:inline-block; background:#f2bc2b; width:50px; height:50px;"></div>
*/
.no-m-l {
  margin-left: 0 !important;
}

/**
* @name 	```.no-m-s```
* Reset **left** and **right** margins
* @styleguide  	Layout / No padding
* @example 	html
* <div class="no-m-s" style="display:inline-block; background:#f2bc2b; width:50px; height:50px;"></div>
*/
.no-m-s {
  margin-left: 0 !important;
  margin-right: 0 !important;
}

/**
* @name 	```.c```
* Specify the color to **default**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="c">
* 	I'm in "default" color
* </div>
*/
.c {
  color: #848e91;
}

/**
* @name 	```.bkg```
* Specify the background color to **default**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="bkg p" style="color:white">
* 	My background color is "default"
* </div>
*/
.bkg {
  background-color: #848e91;
}

/**
* @name 	```.b```
* Specify the border of 1px solid to **default**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b">
* 	I have a default border color
* </div>
*/
.b {
  border: 0.0714285714rem solid #848e91;
}

/**
* @name 	```.b-t```
* Specify the border top of 1px solid to **default**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-t">
* 	I have a default border top color
* </div>
*/
.b-t {
  border-top: 0.0714285714rem solid #848e91;
}

/**
* @name 	```.b-r```
* Specify the border right of 1px solid to **default**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-r">
* 	I have a default border right color
* </div>
*/
.b-r {
  border-right: 0.0714285714rem solid #848e91;
}

/**
* @name 	```.b-b```
* Specify the border bottom of 1px solid to **default**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-b">
* 	I have a default border bottom color
* </div>
*/
.b-b {
  border-bottom: 0.0714285714rem solid #848e91;
}

/**
* @name 	```.b-l```
* Specify the border left of 1px solid to **default**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-l">
* 	I have a default border left color
* </div>
*/
.b-l {
  border-left: 0.0714285714rem solid #848e91;
}

/**
* @name 	```.b-s```
* Specify the border side of 1px solid to **default**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-s">
* 	I have a default border side color
* </div>
*/
.b-s {
  border-left: 0.0714285714rem solid #848e91;
  border-right: 0.0714285714rem solid #848e91;
}

/**
* @name 	```.c-title```
* Specify the color to **title**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="c-title">
* 	I'm in "title" color
* </div>
*/
.c-title {
  color: #2b3438;
}

/**
* @name 	```.bkg-title```
* Specify the background color to **title**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="bkg-title p" style="color:white">
* 	My background color is "title"
* </div>
*/
.bkg-title {
  background-color: #2b3438;
}

/**
* @name 	```.b-title```
* Specify the border of 1px solid to **title**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-title">
* 	I have a title border color
* </div>
*/
.b-title {
  border: 0.0714285714rem solid #2b3438;
}

/**
* @name 	```.b-t-title```
* Specify the border top of 1px solid to **title**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-t-title">
* 	I have a title border top color
* </div>
*/
.b-t-title {
  border-top: 0.0714285714rem solid #2b3438;
}

/**
* @name 	```.b-r-title```
* Specify the border right of 1px solid to **title**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-r-title">
* 	I have a title border right color
* </div>
*/
.b-r-title {
  border-right: 0.0714285714rem solid #2b3438;
}

/**
* @name 	```.b-b-title```
* Specify the border bottom of 1px solid to **title**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-b-title">
* 	I have a title border bottom color
* </div>
*/
.b-b-title {
  border-bottom: 0.0714285714rem solid #2b3438;
}

/**
* @name 	```.b-l-title```
* Specify the border left of 1px solid to **title**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-l-title">
* 	I have a title border left color
* </div>
*/
.b-l-title {
  border-left: 0.0714285714rem solid #2b3438;
}

/**
* @name 	```.b-s-title```
* Specify the border side of 1px solid to **title**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-s-title">
* 	I have a title border side color
* </div>
*/
.b-s-title {
  border-left: 0.0714285714rem solid #2b3438;
  border-right: 0.0714285714rem solid #2b3438;
}

/**
* @name 	```.c-text```
* Specify the color to **text**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="c-text">
* 	I'm in "text" color
* </div>
*/
.c-text {
  color: #848e91;
}

/**
* @name 	```.bkg-text```
* Specify the background color to **text**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="bkg-text p" style="color:white">
* 	My background color is "text"
* </div>
*/
.bkg-text {
  background-color: #848e91;
}

/**
* @name 	```.b-text```
* Specify the border of 1px solid to **text**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-text">
* 	I have a text border color
* </div>
*/
.b-text {
  border: 0.0714285714rem solid #848e91;
}

/**
* @name 	```.b-t-text```
* Specify the border top of 1px solid to **text**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-t-text">
* 	I have a text border top color
* </div>
*/
.b-t-text {
  border-top: 0.0714285714rem solid #848e91;
}

/**
* @name 	```.b-r-text```
* Specify the border right of 1px solid to **text**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-r-text">
* 	I have a text border right color
* </div>
*/
.b-r-text {
  border-right: 0.0714285714rem solid #848e91;
}

/**
* @name 	```.b-b-text```
* Specify the border bottom of 1px solid to **text**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-b-text">
* 	I have a text border bottom color
* </div>
*/
.b-b-text {
  border-bottom: 0.0714285714rem solid #848e91;
}

/**
* @name 	```.b-l-text```
* Specify the border left of 1px solid to **text**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-l-text">
* 	I have a text border left color
* </div>
*/
.b-l-text {
  border-left: 0.0714285714rem solid #848e91;
}

/**
* @name 	```.b-s-text```
* Specify the border side of 1px solid to **text**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-s-text">
* 	I have a text border side color
* </div>
*/
.b-s-text {
  border-left: 0.0714285714rem solid #848e91;
  border-right: 0.0714285714rem solid #848e91;
}

/**
* @name 	```.c-link```
* Specify the color to **link**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="c-link">
* 	I'm in "link" color
* </div>
*/
.c-link {
  color: #f2bc2b;
}

/**
* @name 	```.bkg-link```
* Specify the background color to **link**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="bkg-link p" style="color:white">
* 	My background color is "link"
* </div>
*/
.bkg-link {
  background-color: #f2bc2b;
}

/**
* @name 	```.b-link```
* Specify the border of 1px solid to **link**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-link">
* 	I have a link border color
* </div>
*/
.b-link {
  border: 0.0714285714rem solid #f2bc2b;
}

/**
* @name 	```.b-t-link```
* Specify the border top of 1px solid to **link**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-t-link">
* 	I have a link border top color
* </div>
*/
.b-t-link {
  border-top: 0.0714285714rem solid #f2bc2b;
}

/**
* @name 	```.b-r-link```
* Specify the border right of 1px solid to **link**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-r-link">
* 	I have a link border right color
* </div>
*/
.b-r-link {
  border-right: 0.0714285714rem solid #f2bc2b;
}

/**
* @name 	```.b-b-link```
* Specify the border bottom of 1px solid to **link**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-b-link">
* 	I have a link border bottom color
* </div>
*/
.b-b-link {
  border-bottom: 0.0714285714rem solid #f2bc2b;
}

/**
* @name 	```.b-l-link```
* Specify the border left of 1px solid to **link**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-l-link">
* 	I have a link border left color
* </div>
*/
.b-l-link {
  border-left: 0.0714285714rem solid #f2bc2b;
}

/**
* @name 	```.b-s-link```
* Specify the border side of 1px solid to **link**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-s-link">
* 	I have a link border side color
* </div>
*/
.b-s-link {
  border-left: 0.0714285714rem solid #f2bc2b;
  border-right: 0.0714285714rem solid #f2bc2b;
}

/**
* @name 	```.c-primary```
* Specify the color to **primary**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="c-primary">
* 	I'm in "primary" color
* </div>
*/
.c-primary {
  color: #f2bc2b;
}

/**
* @name 	```.bkg-primary```
* Specify the background color to **primary**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="bkg-primary p" style="color:white">
* 	My background color is "primary"
* </div>
*/
.bkg-primary {
  background-color: #f2bc2b;
}

/**
* @name 	```.b-primary```
* Specify the border of 1px solid to **primary**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-primary">
* 	I have a primary border color
* </div>
*/
.b-primary {
  border: 0.0714285714rem solid #f2bc2b;
}

/**
* @name 	```.b-t-primary```
* Specify the border top of 1px solid to **primary**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-t-primary">
* 	I have a primary border top color
* </div>
*/
.b-t-primary {
  border-top: 0.0714285714rem solid #f2bc2b;
}

/**
* @name 	```.b-r-primary```
* Specify the border right of 1px solid to **primary**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-r-primary">
* 	I have a primary border right color
* </div>
*/
.b-r-primary {
  border-right: 0.0714285714rem solid #f2bc2b;
}

/**
* @name 	```.b-b-primary```
* Specify the border bottom of 1px solid to **primary**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-b-primary">
* 	I have a primary border bottom color
* </div>
*/
.b-b-primary {
  border-bottom: 0.0714285714rem solid #f2bc2b;
}

/**
* @name 	```.b-l-primary```
* Specify the border left of 1px solid to **primary**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-l-primary">
* 	I have a primary border left color
* </div>
*/
.b-l-primary {
  border-left: 0.0714285714rem solid #f2bc2b;
}

/**
* @name 	```.b-s-primary```
* Specify the border side of 1px solid to **primary**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-s-primary">
* 	I have a primary border side color
* </div>
*/
.b-s-primary {
  border-left: 0.0714285714rem solid #f2bc2b;
  border-right: 0.0714285714rem solid #f2bc2b;
}

/**
* @name 	```.c-secondary```
* Specify the color to **secondary**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="c-secondary">
* 	I'm in "secondary" color
* </div>
*/
.c-secondary {
  color: #2b3438;
}

/**
* @name 	```.bkg-secondary```
* Specify the background color to **secondary**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="bkg-secondary p" style="color:white">
* 	My background color is "secondary"
* </div>
*/
.bkg-secondary {
  background-color: #2b3438;
}

/**
* @name 	```.b-secondary```
* Specify the border of 1px solid to **secondary**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-secondary">
* 	I have a secondary border color
* </div>
*/
.b-secondary {
  border: 0.0714285714rem solid #2b3438;
}

/**
* @name 	```.b-t-secondary```
* Specify the border top of 1px solid to **secondary**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-t-secondary">
* 	I have a secondary border top color
* </div>
*/
.b-t-secondary {
  border-top: 0.0714285714rem solid #2b3438;
}

/**
* @name 	```.b-r-secondary```
* Specify the border right of 1px solid to **secondary**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-r-secondary">
* 	I have a secondary border right color
* </div>
*/
.b-r-secondary {
  border-right: 0.0714285714rem solid #2b3438;
}

/**
* @name 	```.b-b-secondary```
* Specify the border bottom of 1px solid to **secondary**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-b-secondary">
* 	I have a secondary border bottom color
* </div>
*/
.b-b-secondary {
  border-bottom: 0.0714285714rem solid #2b3438;
}

/**
* @name 	```.b-l-secondary```
* Specify the border left of 1px solid to **secondary**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-l-secondary">
* 	I have a secondary border left color
* </div>
*/
.b-l-secondary {
  border-left: 0.0714285714rem solid #2b3438;
}

/**
* @name 	```.b-s-secondary```
* Specify the border side of 1px solid to **secondary**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-s-secondary">
* 	I have a secondary border side color
* </div>
*/
.b-s-secondary {
  border-left: 0.0714285714rem solid #2b3438;
  border-right: 0.0714285714rem solid #2b3438;
}

/**
* @name 	```.c-success```
* Specify the color to **success**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="c-success">
* 	I'm in "success" color
* </div>
*/
.c-success {
  color: #5cb85c;
}

/**
* @name 	```.bkg-success```
* Specify the background color to **success**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="bkg-success p" style="color:white">
* 	My background color is "success"
* </div>
*/
.bkg-success {
  background-color: #5cb85c;
}

/**
* @name 	```.b-success```
* Specify the border of 1px solid to **success**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-success">
* 	I have a success border color
* </div>
*/
.b-success {
  border: 0.0714285714rem solid #5cb85c;
}

/**
* @name 	```.b-t-success```
* Specify the border top of 1px solid to **success**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-t-success">
* 	I have a success border top color
* </div>
*/
.b-t-success {
  border-top: 0.0714285714rem solid #5cb85c;
}

/**
* @name 	```.b-r-success```
* Specify the border right of 1px solid to **success**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-r-success">
* 	I have a success border right color
* </div>
*/
.b-r-success {
  border-right: 0.0714285714rem solid #5cb85c;
}

/**
* @name 	```.b-b-success```
* Specify the border bottom of 1px solid to **success**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-b-success">
* 	I have a success border bottom color
* </div>
*/
.b-b-success {
  border-bottom: 0.0714285714rem solid #5cb85c;
}

/**
* @name 	```.b-l-success```
* Specify the border left of 1px solid to **success**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-l-success">
* 	I have a success border left color
* </div>
*/
.b-l-success {
  border-left: 0.0714285714rem solid #5cb85c;
}

/**
* @name 	```.b-s-success```
* Specify the border side of 1px solid to **success**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-s-success">
* 	I have a success border side color
* </div>
*/
.b-s-success {
  border-left: 0.0714285714rem solid #5cb85c;
  border-right: 0.0714285714rem solid #5cb85c;
}

/**
* @name 	```.c-warning```
* Specify the color to **warning**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="c-warning">
* 	I'm in "warning" color
* </div>
*/
.c-warning {
  color: #f0ad4e;
}

/**
* @name 	```.bkg-warning```
* Specify the background color to **warning**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="bkg-warning p" style="color:white">
* 	My background color is "warning"
* </div>
*/
.bkg-warning {
  background-color: #f0ad4e;
}

/**
* @name 	```.b-warning```
* Specify the border of 1px solid to **warning**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-warning">
* 	I have a warning border color
* </div>
*/
.b-warning {
  border: 0.0714285714rem solid #f0ad4e;
}

/**
* @name 	```.b-t-warning```
* Specify the border top of 1px solid to **warning**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-t-warning">
* 	I have a warning border top color
* </div>
*/
.b-t-warning {
  border-top: 0.0714285714rem solid #f0ad4e;
}

/**
* @name 	```.b-r-warning```
* Specify the border right of 1px solid to **warning**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-r-warning">
* 	I have a warning border right color
* </div>
*/
.b-r-warning {
  border-right: 0.0714285714rem solid #f0ad4e;
}

/**
* @name 	```.b-b-warning```
* Specify the border bottom of 1px solid to **warning**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-b-warning">
* 	I have a warning border bottom color
* </div>
*/
.b-b-warning {
  border-bottom: 0.0714285714rem solid #f0ad4e;
}

/**
* @name 	```.b-l-warning```
* Specify the border left of 1px solid to **warning**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-l-warning">
* 	I have a warning border left color
* </div>
*/
.b-l-warning {
  border-left: 0.0714285714rem solid #f0ad4e;
}

/**
* @name 	```.b-s-warning```
* Specify the border side of 1px solid to **warning**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-s-warning">
* 	I have a warning border side color
* </div>
*/
.b-s-warning {
  border-left: 0.0714285714rem solid #f0ad4e;
  border-right: 0.0714285714rem solid #f0ad4e;
}

/**
* @name 	```.c-error```
* Specify the color to **error**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="c-error">
* 	I'm in "error" color
* </div>
*/
.c-error {
  color: #d9534f;
}

/**
* @name 	```.bkg-error```
* Specify the background color to **error**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="bkg-error p" style="color:white">
* 	My background color is "error"
* </div>
*/
.bkg-error {
  background-color: #d9534f;
}

/**
* @name 	```.b-error```
* Specify the border of 1px solid to **error**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-error">
* 	I have a error border color
* </div>
*/
.b-error {
  border: 0.0714285714rem solid #d9534f;
}

/**
* @name 	```.b-t-error```
* Specify the border top of 1px solid to **error**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-t-error">
* 	I have a error border top color
* </div>
*/
.b-t-error {
  border-top: 0.0714285714rem solid #d9534f;
}

/**
* @name 	```.b-r-error```
* Specify the border right of 1px solid to **error**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-r-error">
* 	I have a error border right color
* </div>
*/
.b-r-error {
  border-right: 0.0714285714rem solid #d9534f;
}

/**
* @name 	```.b-b-error```
* Specify the border bottom of 1px solid to **error**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-b-error">
* 	I have a error border bottom color
* </div>
*/
.b-b-error {
  border-bottom: 0.0714285714rem solid #d9534f;
}

/**
* @name 	```.b-l-error```
* Specify the border left of 1px solid to **error**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-l-error">
* 	I have a error border left color
* </div>
*/
.b-l-error {
  border-left: 0.0714285714rem solid #d9534f;
}

/**
* @name 	```.b-s-error```
* Specify the border side of 1px solid to **error**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-s-error">
* 	I have a error border side color
* </div>
*/
.b-s-error {
  border-left: 0.0714285714rem solid #d9534f;
  border-right: 0.0714285714rem solid #d9534f;
}

/**
* @name 	```.c-info```
* Specify the color to **info**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="c-info">
* 	I'm in "info" color
* </div>
*/
.c-info {
  color: #2199e8;
}

/**
* @name 	```.bkg-info```
* Specify the background color to **info**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="bkg-info p" style="color:white">
* 	My background color is "info"
* </div>
*/
.bkg-info {
  background-color: #2199e8;
}

/**
* @name 	```.b-info```
* Specify the border of 1px solid to **info**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-info">
* 	I have a info border color
* </div>
*/
.b-info {
  border: 0.0714285714rem solid #2199e8;
}

/**
* @name 	```.b-t-info```
* Specify the border top of 1px solid to **info**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-t-info">
* 	I have a info border top color
* </div>
*/
.b-t-info {
  border-top: 0.0714285714rem solid #2199e8;
}

/**
* @name 	```.b-r-info```
* Specify the border right of 1px solid to **info**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-r-info">
* 	I have a info border right color
* </div>
*/
.b-r-info {
  border-right: 0.0714285714rem solid #2199e8;
}

/**
* @name 	```.b-b-info```
* Specify the border bottom of 1px solid to **info**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-b-info">
* 	I have a info border bottom color
* </div>
*/
.b-b-info {
  border-bottom: 0.0714285714rem solid #2199e8;
}

/**
* @name 	```.b-l-info```
* Specify the border left of 1px solid to **info**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-l-info">
* 	I have a info border left color
* </div>
*/
.b-l-info {
  border-left: 0.0714285714rem solid #2199e8;
}

/**
* @name 	```.b-s-info```
* Specify the border side of 1px solid to **info**
* @styleguide  	Colors / Classes
* @example 	html
* <div class="b-s-info">
* 	I have a info border side color
* </div>
*/
.b-s-info {
  border-left: 0.0714285714rem solid #2199e8;
  border-right: 0.0714285714rem solid #2199e8;
}

.user:before {
  content: "ï";
}

.coffeekraken-logo {
  background-repeat: no-repeat;
  background-size: cover;
  background-image: s-encode-inline-svg("<?xml version='1.0' encoding='utf-8'?>	// <svg version='1.2' baseProfile='tiny' id='Layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'		 x='0px' y='0px' viewBox='0 0 954.1 288.7' xml:space='preserve'>	<g fill='s-color(primary)'>		<path fill='s-color(secondary)' d='M932.9,217.2c0-18.7-11.6-26.9-25.2-26.9c-10.2,0-19.9,3.8-32.7,13.1V192l-65,0.5c-5.3-1.9-11-2.8-16.8-2.8			c-5.1,0-10.2,0.8-15.1,2.4h-73.5v15.3h16L693.3,229h-8.4v-78.6h-36.3v16.5h17.3v103.5h-14.1v-52c0-15.3-9.5-29.1-37.6-29.1			c-0.8,0-1.6,0-2.4,0l0,0l-32,1c-12,0-24.2,7-30.2,22.9H549V192h-34.2l0,0h-37.1v15.3h16L466.2,229h-8.4v-78.6h-36.3v16.5h17.3			v103.4h-17.5v16.5h50.8v-16.5h-14.2l0.1-23h8.3l39.9,39.5h24.4l0,0h62.5c3.4,1.1,7.1,1.7,11,1.7c10.6,0,18.9-3.6,30.9-13.3v11.6h33			l0,0h31v-16.3l-14.2-0.1l0.1-23.1h8.3l39.8,39.5l50.2,0.5c4.1,0.9,8.5,1.3,13.1,1.3c20.2,0,37.3-8.7,47.5-24.4l-16.4-7.1			c-7,9.9-18.4,15.3-30.6,15.3c-17.6,0-29.6-10.5-32.5-28.7h79.5c0-14.5-4.4-26.4-11.4-35.4H856v61.9h-16.4v16.5h52v-16.5h-16.4			v-50.8c9.7-7.6,19.9-12.1,27.6-12.1c7.7,0,11.2,5.2,11.2,17.3v62.1h35.5v-16.5h-16.4v-53H932.9z M534,270.2l-18.9,0.1v0.1h-1.2			L480,236.8l35.9-29.5h14.8l0,0h3.3V270.2z M632.5,262.8c-7.7,7-17.3,11.2-25.8,11.2c-10.2,0-17.3-6.4-17.3-15.7			c0-9.4,7.7-16.3,18.3-16.3c8.1,0,16.6,3.2,24.8,9.4V262.8z M632.5,235.7c-7.7-5-17.7-8-26.2-8c-19.7,0-34.9,13.5-34.9,30.7			c0,4.3,0.9,8.4,2.6,12.1l-0.2-0.1h-20.7v-27.2c0-18.3,4.8-29.9,19.6-33.1l18,6.2c4.3-7.4,11.4-11.2,20.5-11.2			c11.4,0,21.3,4.8,21.3,18.3L632.5,235.7L632.5,235.7z M707.1,236.8l35.9-29.5h12.1c-7,8.2-11.5,19.1-11.5,31.9			c0,12.2,3.9,22.9,10.7,31.2H741L707.1,236.8z M764.9,230.2c2.8-15.7,14-25.8,28.8-25.8s28,10.9,31,25.8H764.9z'/>		<path d='M135.9,229.7c26.3,0,46.1-9.9,58.9-27.1v27h58.1v-28.8h-29.1l-0.3-45.3l14.7-0.1l74.3,74.1l29.5-0.1v-28.8h-14l-61-59.7			l52.6-53H342V59.1h-88.7v28.8h24.1l-39.2,38.9l-14.4-0.1l0.3-67.5L194.8,59v27.6c-15.1-19.6-37.7-27.5-56.7-27.5			c-20.4,0-36.9,2.9-50.7,13.4v-13H58.7v59.2h28.9c8.2-21.3,22.4-31.9,42.6-31.9c16.7,0,29.3,5.6,37.9,16.8			c8.5,11.2,12.8,24.6,12.8,40.3c0,16.4-4.5,29.6-13.6,39.7c-9,10.1-20.6,15.2-34.6,15.2c-20.2,0-37.1-7.2-45.3-28.4H58.5v59.2h28.9			v-13.1c13.4,10.2,28.9,12.9,48.5,13.1V229.7z'/>		<rect fill='s-color(secondary)' x='87.7' y='2' width='225.1' height='28.8'/>		<polygon points='29.3,30.8 58.5,30.8 58.5,2 0,2 0,287.3 58.5,287.3 58.5,258.5 29.3,258.5 	'/>		<polygon points='342,30.8 371.3,30.8 371.3,258.5 342,258.5 342,287.3 400.6,287.3 400.6,2 342,2 	'/>		<rect x='87.7' y='258.6' width='225.1' height='28.8'/>		<g>			<path d='M497.4,142c22.9,0,40.6-6.6,53.1-19.8c1.6,2,3.3,3.9,5.3,5.7c9.9,9,22.1,13.5,36.4,13.5c14.7,0,26.9-4.5,36.6-13.6				c9.8-9.1,14.7-21.3,14.7-36.7c0-15.6-4.9-27.9-14.8-36.9c-9.9-9-22-13.5-36.5-13.5c-14.4,0-26.5,4.5-36.4,13.5				c-7.3,6.6-11.9,15.1-13.9,25.4l0,0c-2.5,11.2-10.1,21.4-17.2,27.7c-7.1,6.3-15.3,9.4-24.7,9.4c-11.5,0-21-4.2-28.4-12.5				S460.5,85,460.5,71.6c0-12.8,3.5-23.9,10.5-33.1s17.4-13.8,31.1-13.8c13.6,0,23.9,5.9,30.9,17.7c1.5,2.6,2.9,5.4,4.1,8.5				l23.5-17.1l0.2-31.5h-23.7V13c-11.3-8.7-25.3-13-42-13c-13.4,0-25.8,2.8-37,8.3c-11.3,5.5-20.3,13.7-27,24.7				c-6.7,10.9-10,23.7-10,38.2c0,20.4,6.4,37.4,19.2,50.7C453.2,135.3,472.2,142,497.4,142z M592.1,64.3c6,0,10.7,2.3,14.2,6.9				s5.2,11,5.2,19.2c0,9.3-1.8,16.2-5.4,20.5c-3.6,4.4-8.3,6.6-14.1,6.6c-6.5,0-11.3-2.4-14.5-7.3s-4.8-11-4.8-18.5				C572.9,73.4,579.3,64.3,592.1,64.3z'/>			<path d='M906.1,121.5c-5.7,0-11.1-1.8-16.3-5.5c-5.1-3.6-7.9-9.8-8.4-18.6h72.7c0-10.2-1.6-19.4-4.7-27.7				c-3.2-8.3-8.8-15.2-16.9-20.7c-8.1-5.6-17.8-8.3-28.9-8.3c-15.4,0-28.1,5-38,14.9c-3.4,3.4-6.2,7-8.4,10.9				c-3.3-6.8-8.5-12.7-15.5-17.5c-8.1-5.6-17.8-8.3-28.9-8.3c-15.4,0-28.1,5-38,14.9s-14.9,22.3-14.9,37.1c0,14.6,4.8,26.3,14.5,35.2				c9.6,8.9,23.1,13.4,40.3,13.4c19.8,0,34.7-6.6,44.9-19.8c1.7,2.3,3.5,4.4,5.7,6.4c9.6,8.9,23.1,13.4,40.3,13.4				c21.6,0,37.4-7.8,47.6-23.5l-24.2-7.6C921.1,117.7,913.6,121.5,906.1,121.5z M901.9,61c6.1,0,10.9,1.9,14.5,5.7				c3.5,3.8,5.7,8.3,6.4,13.7H882C883.8,67.5,890.5,61,901.9,61z M811.1,61c6.1,0,10.9,1.9,14.5,5.7c3.5,3.8,5.7,8.3,6.4,13.7h-40.8				C793,67.5,799.6,61,811.1,61z M846.6,112.9l-8.7-2.7c-7.6,7.5-15.1,11.3-22.6,11.3c-5.7,0-11.1-1.8-16.3-5.5				c-5.1-3.6-7.9-9.8-8.4-18.6h60.2c0.5,6.8,2.2,12.9,5,18.4C852.7,114.8,849,113.7,846.6,112.9z'/>			<path d='M652.1,118.3l-14.2,0.4v21.8h43.4h17.2h64v-22.1h-15.3V66.6h15.3V44.4h-15.3V33.8c0-8.9,2.7-13.3,8.1-13.3				c3.8,0,6.7,3.4,8.7,10.3l22.6-17.4C780.1,4.5,769.2,0,754,0c-12.6,0-22,3.4-28.4,10.2s-9.5,15.2-9.5,25.4v8.8H703v22.2h13.1v51.7				h-17.5h-15.3V66.6h15.3V44.4h-15.3V33.8c0-8.9,2.7-13.3,8.1-13.3c3.8,0,6.7,3.4,8.7,10.3l22.6-17.4C716.1,4.5,705.2,0,690,0				c-12.6,0-22,3.4-28.4,10.2s-9.5,15.2-9.5,25.4v8.8H639v22.2h13.1V118.3z'/>		</g>	</g>	</svg>");
  display: inline-block;
  background-size: cover;
  width: 300px;
}
.coffeekraken-logo:after {
  content: "";
  display: block;
  width: 100%;
  height: 0;
  padding-bottom: 30%;
}

/*# sourceMappingURL=style.css.map */

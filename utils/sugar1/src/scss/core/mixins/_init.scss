@use '../variables' as sugar;
@use 'sass:meta';
$_sugar-inited: false;
/**
 * Init the sugar toolkit.
 * This has to be called **AFTER** all the [./_s-setup.scss] mixin call
 * and **BEFORE** all the others sugar mixins and functions calls
 *
 * @example
 * \@include sugar.init();
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
@mixin init() {
  // do that only if not already inited
  @if not $_sugar-inited {
    // update inited status
    $_sugar-inited: true !global;

    // reset
    @if setting("reset") == true {
      @include reset();
    }

    // styleguide
    @include styleguide-colors();

    // settings
    .s-settings:after {
      // process colors
      $settings-to-process: map-extend((), sugar.$settings);
      // get colors
      $colors: setting("colors");
      @each $color-name, $color in $colors {
        $modifiers: map-get($color, modifiers);
        @if $modifiers {
          $new-modifiers: ();
          @each $modifier-name, $modifier in $modifiers {
            // @warn(s-color($color-name, $modifier));
            // @warn("#{$color-name} modifiers #{$modifier-name}");
            $settings-to-process: map-set(
              $settings-to-process,
              colors "#{$color-name}"modifiers"#{$modifier-name}",
              color($color-name, $modifier)
            );
          }
        }
      }
      content: json-encode($settings-to-process);
      display: none;
    }

    // border box
    @if setting("border-box") == true {
      html {
        box-sizing: border-box;
      }
      *,
      *:before,
      *:after {
        box-sizing: inherit;
      }
    }

    // links
    a {
      color: inherit;
    }

    // check settings
    $base-font-family: setting("typography.font-family");
    $fonts: setting("fonts");
    @if $base-font-family and not map-get($fonts, $base-font-family) {
      @error ("Your typography.font-family setting has to be a registered font...");
    }

    // set the base font family if not defined
    @if not $base-font-family {
      @include setup(
        (
          typo: (
            font-family: default
          )
        )
      );
    }

    // font
    html {
      $base-font-size: setting("typography.font-size");
      $base-font-sizes: setting("typography.font-sizes");
      font-size: to-px($base-font-size);
      color: color(text);
      @if meta.type-of($base-font-sizes) == map {
        @each $size, $media in $base-font-sizes {
          @include media($media...) {
            font-size: to-px($size);
          }
        }
      }
      // try to get the font family from fonts
      @include font(setting("typography.font-family"));
    }

    // default color and stuffs on the body
    body {
      color: color(text);
      -webkit-font-smoothing: antialiased;
      -moz-osx-font-smoothing: grayscale;
    }

    // font faces
    $fonts: setting("fonts");
    @each $font-name, $font in $fonts {
      @if meta.type-of($font) == string {
        $font: map-get($fonts, $font);
      }
      @if not map-get($font, font-family) {
        $font: map-set($font, font-family, $font-name);
      }
      $font: map-remove($font, cap-height);
      @if map-get($font, src) {
        @include font-face($font...);
      } @else {
        $ff: map-get($font, font-family);
        $fs: map-get($font, font-style);
        $fw: map-get($font, font-weight);
        $fd: map-get($font, font-display);
        /**
				 * @name   			#{$font-name}
				 * @styleguide 		Fonts / Faces
				 * @display 		font
				 * @font-family 	#{$ff}
				 * @font-style 		#{$fs}
				 * @font-weight 	#{$fw}
				 * @font-display    #{$fd}
				 */
      }
    }

    // modular scale
    $ms-base: setting("modular-scale.base") !global;
    $ms-ratio: setting("modular-scale.ratio") !global;
  }
}

@use 'sass:meta';
@use 'sass:list';
@use 'sass:map';

/**
 * @name      _check-property
 * @namespace     sugar.scss.core.util
 * @type      function
 *
 * Check a property types and values
 *
 * @param         {String}        $property         The property name to check
 * @param         {String}        $type             The property type wanted
 * @param         {Mixed}         $value            The property value to check
 * @param         {Boolean}       [$check-only=false]  Define if we want to throw an error or just send back false on type error
 *
 * @author 		Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
@function _check-property($property, $type, $value, $check-only: false) {
  $required: false;
  // check if is a map
  @if meta.type-of($type) == map {
    $type: map.get($type, type);
    $required: map-get-or($type, required, $required);
  }

  // check required
  @if $required and not $value {
    @error ('The property #{$property} is required...');
  }

  // if not value, return false
  @if not $value {
    @return false;
  }

  // check explicit values
  @if meta.type-of($type) == string {
    // check the type
    @if not is($value, $type) {
      @if $check-only {
        @return false;
      }
      @error ('The property "#{$property}" need to be a "#{$type}" but it seems that you pass a "#{meta.type-of($value)}" : #{$value}...');
    }
    @return true;
  } @else if meta.type-of($type) == list {
    // check if the passed value exist in possible values
    @if meta.type-of($value) == list and list.index($type, length) {
      @return true;
    } @else if meta.type-of($value) == number and list.index($type, length) {
      @return true;
    } @else {
      // if its a list of values, check each values
      @if meta.type-of($value) == list {
        @each $v in $value {
          @if not _check-property($property, $type, $v, true) {
            @return false;
          }
        }
        @return true;
      } @else {
        $idx: list.index($type, $value);
        @if not $idx {
          @return false;
        }
        $v: list.nth($type, $idx);
        @if meta.type-of($v) == meta.type-of($value) {
          @if meta.type-of($v) == number {
            @if math.unit($v) == math.unit($value) {
              @return true;
            } @else {
              @return false;
            }
          } @else {
            @return true;
          }
        } @else {
          @return false;
        }
        @return true;
      }
    }
  } @else {
    @return true;
  }
  @return false;
}

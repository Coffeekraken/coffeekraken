/**
 * @name      loader-bars
 * Generate a full animated, single element, bars loader
 *
 * @param 			{String} 			[$shape=rect] 				The shape of the bars (rect,circle)
 * @param 			{Color} 			[$color=primary] 			The color(s) of the loader. Can be a list of colors
 * @param 			{Number} 			[$width=.5em] 				The width of each bars
 * @param 			{Number} 			[$height=2em] 				The height of each bars
 * @param 			{Integer} 			[$count=5] 					How many bars you want
 * @param 			{Number} 			[$gap=.5em] 				The gap between each bars
 * @param 			{Number} 			[$opacity=1] 				The initial opacity of each bars
 * @param 			{Number} 			[$a-opacity=null] 			The opacity of the animated bars
 * @param 			{Second} 			[$a-duration=1s] 			The overall animation duration
 * @param 			{Second} 			[$a-delay=0s] 				The delay between two animation cycle
 * @param 			{Integer} 			[$a-near=1] 				How many bars are affected by the animated one
 * @param 			{String} 			[$a-ease=ease-in-out] 		The ease to use to animate each bars
 * @param 			{Number} 			[$a-offset=null] 			The offset to move the animated bar
 * @param 			{String} 			[$a-direction=both] 		The direction in which to move the bars (up,down,both)
 * @param 			{Boolean} 			[$a-continuous=true] 		If true, the first bars will be animated at same time at the last ones
 *
 * @example
 * .my-cool-loader {
 * 		\@include sugar.loader-bars(
 * 			$color : primary,
 * 			$a-offset : .5em
 * 		);
 * }
 *
 * @author 			Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)
 */
@mixin loader-bars(
  $shape: rect,
  $color: s-color(primary),
  $width: 0.5em,
  $height: 2em,
  $count: 5,
  $gap: 0.5em,
  $opacity: 1,
  $a-opacity: null,
  $a-duration: 1s,
  $a-delay: 0s,
  $a-near: 1,
  $a-ease: ease-in-out,
  $a-offset: null,
  $a-direction: both,
  $a-continuous: true
) {
  $shape: test-argument("sugar.loader-bars", "shape", (circle, rect), $shape);
  $color: test-argument(
    "sugar.loader-bars",
    "color",
    "color|list-color",
    $color
  );
  $width: test-argument("sugar.loader-bars", "width", number, $width);
  $height: test-argument("sugar.loader-bars", "height", number, $height);
  $count: test-argument("sugar.loader-bars", "count", integer, $count);
  $gap: test-argument("sugar.loader-bars", "gap", number, $gap);
  $opacity: test-argument("sugar.loader-bars", "opacity", number, $opacity);
  $a-opacity: test-argument(
    "sugar.loader-bars",
    "a-opacity",
    number,
    $a-opacity
  );
  $a-duration: test-argument(
    "sugar.loader-bars",
    "a-duration",
    second,
    $a-duration
  );
  $a-delay: test-argument("sugar.loader-bars", "a-delay", second, $a-delay);
  $a-near: test-argument("sugar.loader-bars", "a-near", integer, $a-near);
  $a-ease: test-argument("sugar.loader-bars", "a-ease", string, $a-ease);
  $a-direction: test-argument(
    "sugar.loader-bars",
    "a-direction",
    (up, down, both),
    $a-direction
  );
  $a-continuous: test-argument(
    "sugar.loader-bars",
    "a-continuous",
    boolean,
    $a-continuous
  );

  // handle colors
  $colors: null;
  @if is($color, list-color) and list-length($color) > 1 {
    $colors: $color;
  }

  // manage duration
  $a-duration: $a-duration + $a-delay;
  @if $a-delay > 0 {
    $a-continuous: false;
  }

  // manage direction
  @if not $a-offset or $a-offset <= 0 {
    $a-direction: up;
  }

  $offset: $width;

  // position grid
  $_width: $width * ($count - 1) + $gap * ($count - 1);

  $a-name: str-unquote("bars-#{str-unique-id()}");

  // calculate box shadows
  $shadows: ();

  @if $a-direction == both or $a-direction == up {
    @for $i from 0 through $count - 1 {
      $x: ($width * $i + $gap * $i) + $width + $gap + $offset;
      $y: $height / 2 + $offset;
      $c: $color;
      @if $colors {
        $c: list-nth($colors, $i + 1);
      }
      @if $a-opacity {
        $c: color-transparentize($color, 1 - $opacity);
      }
      $shadows: list-append($shadows, $c $x $y 0 0, comma);
    }
  }
  @if $a-direction == both or $a-direction == down {
    @for $i from 0 through $count - 1 {
      $x: ($width * $i + $gap * $i) + $width + $gap + $offset;
      $y: $height / 2 + $offset;
      $c: $color;
      @if $colors {
        $c: list-nth($colors, $i + 1);
      }
      @if $a-opacity {
        $c: color-transparentize($color, 1 - $opacity);
      }
      $shadows: list-append($shadows, $c $x $y 0 0, comma);
    }
  }
  $base-shadows: $shadows;

  &:before {
    @if $shape == circle {
      border-radius: $width * 0.5;
    }
    width: $width;
    height: $height;
    content: "";
    display: block;
    animation: $a-name $a-duration $a-ease 0s infinite;
    box-shadow: $shadows;
    @include translate(
      (-$_width / 2 - $width - $gap - $offset),
      (-$height / 2 - $offset)
    );
    transform-origin: ($offset + $_width / 2 + $gap + $width)
      ($offset + $height / 2);
  }

  // calculate percentage of delay
  $p-delay: 0;
  $p-step: 1 / $count;
  @if $a-delay > 0 {
    $p-delay: 1 / $a-duration * $a-delay;
    $p-step: (1 - $p-delay) / ($count + 1);
  }
  // animation
  $step: 1 / $count;
  @keyframes #{$a-name} {
    @for $j from 0 through $count {
      $p: math-percentage($j * $p-step);
      @if $a-delay > 0 {
        $p: math-percentage($j * $p-step) + math-percentage($p-step);
      }
      #{$p} {
        // loop on each box shadows
        $shadows: ();

        @if $a-direction == both or $a-direction == up {
          @for $i from 0 through $count - 1 {
            $x: ($width * $i + $gap * $i) + $width + $gap + $offset;
            $y: $height / 2 + $offset;

            $diff: math-abs($j - $i);

            @if $a-continuous {
              @if $j + $a-near > $count and $i - $a-near < 0 {
                $diff: math-abs($i - ($j - $count));
              } @else if $j - $a-near < 0 and $i + $a-near > $count {
                $diff: math-abs($j + ($count - $i));
              }
            }

            @if $a-offset {
              @if $diff < $a-near {
                $y: $y - ($a-offset - ($a-offset / $a-near * $diff));
              } @else if $i == $j {
                $y: $y - $a-offset;
              }
            }

            $c: $color;
            @if $colors {
              $c: list-nth($colors, $i + 1);
            }
            $_opacity: 1;
            @if $a-opacity {
              @if $diff < $a-near {
                $_opacity: ($a-opacity - $opacity) /
                  $a-near *
                  ($a-near - $diff);
                $o: $opacity + $_opacity;
                // $transparentize : $_opacity;
                $c: color-transparentize($c, 1 - $o);
              } @else if $opacity {
                $c: color-transparentize($c, 1 - $opacity);
              }
            } @else if $opacity {
              $c: color-transparentize($c, 1 - $opacity);
            }
            $shadows: list-append($shadows, $c $x $y 0 0, comma);
          }
        }

        @if $a-direction == both or $a-direction == down {
          @for $i from 0 through $count - 1 {
            $x: ($width * $i + $gap * $i) + $width + $gap + $offset;
            $y: $height / 2 + $offset;

            $diff: math-abs($j - $i);
            @if $a-continuous {
              @if $j + $a-near > $count and $i - $a-near < 0 {
                $diff: math-abs($i - ($j - $count));
              } @else if $j - $a-near < 0 and $i + $a-near > $count {
                $diff: math-abs($j + ($count - $i));
              }
            }

            @if $diff < $a-near {
              $y: $y + ($a-offset - ($a-offset / $a-near * $diff));
            } @else if $i == $j {
              $y: $y + $a-offset;
            }
            $c: $color;
            @if $colors {
              $c: list-nth($colors, $i + 1);
            }
            $_opacity: 1;
            @if $a-opacity {
              @if $diff < $a-near {
                $_opacity: ($a-opacity - $opacity) /
                  $a-near *
                  ($a-near - $diff);
                $o: $opacity + $_opacity;
                // $transparentize : $_opacity;
                $c: color-transparentize($c, 1 - $o);
              } @else if $opacity {
                $c: color-transparentize($c, 1 - $opacity);
              }
            } @else if $opacity {
              $c: color-transparentize($c, 1 - $opacity);
            }
            $shadows: list-append($shadows, $c $x $y 0 0, comma);
          }
        }

        // apply shadows
        box-shadow: $shadows;
      }
    }
    @if $a-delay >
      0 and
      math-percentage($count * $p-step) +
      math-percentage($p-step) <
      100
    {
      #{math-percentage($count * $p-step) + math-percentage($p-step) * 2} {
        box-shadow: $base-shadows;
      }
    }
  }
}

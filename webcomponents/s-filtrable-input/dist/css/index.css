@import url("https://fonts.googleapis.com/css2?family=Roboto&display=swap");@import url("https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap");.fa,.fab,.fad,.fal,.far,.fas{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:inline-block;font-style:normal;font-feature-settings:normal;font-variant:normal;text-rendering:auto;line-height:1}@font-face{font-family:Font Awesome\ 5 Brands;font-style:normal;font-weight:400;font-display:auto;src:url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-brands-400.eot);src:url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-brands-400.eot#iefix) format("embedded-opentype"),url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-brands-400.woff2) format("woff2"),url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-brands-400.woff) format("woff"),url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-brands-400.ttf) format("truetype"),url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-brands-400.svg#fontawesome) format("svg")}.fab{font-family:Font Awesome\ 5 Brands}@font-face{font-family:Font Awesome\ 5 Free;font-style:normal;font-weight:400;font-display:auto;src:url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-regular-400.eot);src:url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-regular-400.eot#iefix) format("embedded-opentype"),url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-regular-400.woff2) format("woff2"),url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-regular-400.woff) format("woff"),url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-regular-400.ttf) format("truetype"),url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-regular-400.svg#fontawesome) format("svg")}.far{font-weight:400}@font-face{font-family:Font Awesome\ 5 Free;font-style:normal;font-weight:900;font-display:auto;src:url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-solid-900.eot);src:url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-solid-900.eot#iefix) format("embedded-opentype"),url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-solid-900.woff2) format("woff2"),url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-solid-900.woff) format("woff"),url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-solid-900.ttf) format("truetype"),url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/webfonts/fa-solid-900.svg#fontawesome) format("svg")}.fa,.far,.fas{font-family:Font Awesome\ 5 Free}.fa,.fas{font-weight:900}.mo--center{align-items:center}.mo--end{align-items:flex-end}.mo__content{flex:0 1 auto}.hello{content:"world"}a,abbr,acronym,address,applet,article,aside,audio,b,big,blockquote,body,canvas,caption,center,cite,code,dd,del,details,dfn,div,dl,dt,em,embed,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,header,hgroup,html,i,iframe,img,ins,kbd,label,legend,li,mark,menu,nav,object,ol,output,p,pre,q,ruby,s,samp,section,small,span,strike,strong,sub,summary,sup,table,tbody,td,tfoot,th,thead,time,tr,tt,u,ul,var,video{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:initial}:focus{outline:0}article,aside,details,figcaption,figure,footer,header,hgroup,menu,nav,section{display:block}body{line-height:1}ol,ul{list-style:none}blockquote,q{quotes:none}blockquote:after,blockquote:before,q:after,q:before{content:"";content:none}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration,input[type=search]::-webkit-search-results-button,input[type=search]::-webkit-search-results-decoration{-webkit-appearance:none;-moz-appearance:none}input[type=search]{-webkit-appearance:none;-moz-appearance:none}audio,canvas,video{display:inline-block;*display:inline;*zoom:1;max-width:100%}audio:not([controls]){display:none;height:0}[hidden]{display:none}html{font-size:100%;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%}a:focus{outline:thin dotted}a:active,a:hover{outline:0}img{border:0;-ms-interpolation-mode:bicubic}figure,form{margin:0}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0;white-space:normal;*margin-left:-7px}button,input,select,textarea{font-size:100%;margin:0;vertical-align:initial;*vertical-align:middle}button,input{line-height:normal}button,select{text-transform:none}button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer;*overflow:visible}button[disabled],html input[disabled]{cursor:default}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0;*height:13px;*width:13px}input[type=search]{-webkit-appearance:textfield;box-sizing:initial}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}textarea{overflow:auto;vertical-align:top}table{border-collapse:collapse;border-spacing:0}button,html,input,select,textarea{color:#222}::selection{background:#b3d4fc;text-shadow:none}img{vertical-align:middle}fieldset{border:0;margin:0;padding:0}textarea{resize:vertical}.chromeframe{margin:.2em 0;background:#ccc;color:#000;padding:.2em 0}html{box-sizing:border-box}*,:after,:before{box-sizing:inherit}a{color:inherit}body{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}body,html{color:var(--sugar-colors-text-color)}html{font-size:14px;font-family:Roboto;font-size:1rem;font-weight:400}.tf h1{font-size:3rem}.tf h1,.tf h2{font-family:Roboto;font-weight:700}.tf h2{font-size:2rem}.tf h3{font-size:1.5rem}.tf h3,.tf h4{font-family:Roboto;font-weight:700}.tf h4{font-size:1rem}.tf h5{font-size:.6rem}.tf h5,.tf h6{font-family:Roboto;font-weight:700}.tf h6{font-size:.3rem}.tf p{font-family:Roboto;font-size:1.5rem;line-height:2rem;font-weight:700}.tf blockquote,.tf code{font-family:"Menlo, Monaco, Consolas, Courier New, monospace";font-size:1rem;font-style:normal;font-weight:400}:root{--sugar-unit:"rem";--sugar-reset:true;--sugar-border-box:true;--sugar-sizes-smaller:0.3;--sugar-sizes-small:0.6;--sugar-sizes-default:1;--sugar-sizes-medium:1.5;--sugar-sizes-big:2;--sugar-sizes-bigger:3;--sugar-typography-font-family:"default";--sugar-typography-font-size:14px;--sugar-typography-line-letters-count:55;--sugar-typography-format-h1-font-family:"title";--sugar-typography-format-h1-font-size:"bigger";--sugar-typography-format-h2-font-family:"title";--sugar-typography-format-h2-font-size:"big";--sugar-typography-format-h3-font-family:"title";--sugar-typography-format-h3-font-size:"medium";--sugar-typography-format-h4-font-family:"title";--sugar-typography-format-h4-font-size:"default";--sugar-typography-format-h5-font-family:"title";--sugar-typography-format-h5-font-size:"small";--sugar-typography-format-h6-font-family:"title";--sugar-typography-format-h6-font-size:"smaller";--sugar-typography-format-p-font-family:"title";--sugar-typography-format-p-font-size:"medium";--sugar-typography-format-p-line-height:2rem;--sugar-typography-format-blockquote-font-family:"code";--sugar-typography-format-blockquote-font-size:"default";--sugar-typography-format-code-font-family:"code";--sugar-typography-format-code-font-size:"default";--sugar-look-and-feel-border-radius:0.5em;--sugar-look-and-feel-padding-vertical:0.8em;--sugar-look-and-feel-padding-horizontal:1.4em;--sugar-look-and-feel-disabled-opacity:0.5;--sugar-look-and-feel-line-height:1.4;--sugar-look-and-feel-padding:0.8em 1.4em;--sugar-spaces-smaller:0.5rem;--sugar-spaces-small:1rem;--sugar-spaces-default:2rem;--sugar-spaces-medium:3rem;--sugar-spaces-big:4rem;--sugar-spaces-bigger:5rem;--sugar-colors-default-color:#848e91;--sugar-colors-title-color:#2b3438;--sugar-colors-text-color:#848e91;--sugar-colors-link-color:"primary";--sugar-colors-primary-color:#f2bc2b;--sugar-colors-secondary-color:#2b3438;--sugar-colors-success-color:#5cb85c;--sugar-colors-warning-color:#f0ad4e;--sugar-colors-error-color:#d9534f;--sugar-colors-info-color:#2199e8;--sugar-modular-scale-base:1rem;--sugar-modular-scale-ratio:1.33;--sugar-text-format-scope-class:"tf";--sugar-vertical-rhythm-scope-class:"vr";--sugar-fonts-default-font-family:"Roboto";--sugar-fonts-default-font-weight:"normal";--sugar-fonts-default-cap-height:0.65;--sugar-fonts-default-import:"https://fonts.googleapis.com/css2?family=Roboto&display=swap";--sugar-fonts-quote-font-family:"Palatino, Times, Georgia, serif";--sugar-fonts-quote-font-weight:"normal";--sugar-fonts-quote-cap-height:0.65;--sugar-fonts-quote-font-style:"normal";--sugar-fonts-quote-font-display:"auto";--sugar-fonts-code-font-family:"Menlo, Monaco, Consolas, Courier New, monospace";--sugar-fonts-code-font-weight:"normal";--sugar-fonts-code-cap-height:0.65;--sugar-fonts-code-font-style:"normal";--sugar-fonts-code-font-display:"auto";--sugar-fonts-title-font-family:"Roboto";--sugar-fonts-title-font-weight:700;--sugar-fonts-title-import:"https://fonts.googleapis.com/css2?family=Roboto:wght@700&display=swap";--sugar-transitions-fast:all 0.1s ease-in-out 0s;--sugar-transitions-default:all 0.2s ease-in-out 0s;--sugar-transitions-slow:all 0.5s ease-in-out 0s}
/*# sourceMappingURL=data:application/json;base64, */
{"version":3,"sources":["webpack:////Users/olivierbossel/data/web/coffeekraken/coffeekraken/util/sugar/src/js/dom/getStyleProperty.js","webpack:////Users/olivierbossel/data/web/coffeekraken/coffeekraken/util/sugar/src/js/dom/getTransitionProperties.js","webpack:////Users/olivierbossel/data/web/coffeekraken/coffeekraken/util/sugar/src/js/dom/whenTransitionEnd.js","webpack:////Users/olivierbossel/data/web/coffeekraken/coffeekraken/util/sugar/src/js/string/autoCast.js","webpack:////Users/olivierbossel/data/web/coffeekraken/coffeekraken/util/sugar/src/js/time/convert.js"],"names":["getStyleProperty","elm","property","setTimeout","_sComputedStyle","computed","window","getComputedStyle","prefixes","i","length","prefix","value","camelize","trim","autoCast","splitIfNeeded","what","separator","indexOf","split","map","item","getTransitionProperties","__getStyleProperty","duration","timingFunction","delay","props","__convert","totalDuration","delays","concat","forEach","val","whenTransitionEnd","cb","Promise","resolve","reject","transition","__getTransitionProperties","string","substr","presumedNumber","parseFloat","isNaN","toString","obj","eval","e","convert","from","to","fromMs","fromNumber","fromLength","fromString","slice","Error"],"mappings":"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","file":"whenTransitionEnd.index.js","sourcesContent":["import camelize from \"../string/camelize\";\nimport autoCast from \"../string/autoCast\";\n\n/**\n * @name      getStyleProperty\n * @namespace     sugar.js.dom\n * @type      Function\n *\n * Get a style property on the passed element through the computed style.\n * This function try to store the actual style to not trigger more that 1 redraw\n * each js execution loop.\n *\n * @param \t\t{HTMLElement} \t\t\t\t\telm  \t\tThe element to get style from\n * @param \t\t{String} \t\t\t\t\t\tproperty \tThe css property to get\n * @return \t\t{Mixed} \t\t\t\t\t\t\t\t\tThe style value\n *\n * @example  \tjs\n * import getStyleProperty from '@coffeekraken/sugar/js/dom/getStyleProperty'\n * const opacity = getStyleProperty(myCoolHTMLElement, 'opacity');\n *\n * @see \t\thttps://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function getStyleProperty(elm, property) {\n  // caching mecanisme\n  setTimeout(() => {\n    elm._sComputedStyle = null;\n  });\n\n  const computed = elm._sComputedStyle || window.getComputedStyle(elm);\n  elm._sComputedStyle = computed;\n\n  const prefixes = [\"\", \"webkit-\", \"moz-\", \"ms-\", \"o-\", \"khtml-\"];\n  for (let i = 0; i < prefixes.length; i++) {\n    const prefix = prefixes[i];\n    const value = computed[camelize(`${prefix}${property}`)];\n    if (value && value.trim() !== \"\") return autoCast(value);\n  }\n  return null;\n}\n","import __getStyleProperty from './getStyleProperty';\nimport __convert from '../time/convert';\n\n// TODO tests\n\n/**\n * @name      getTransitionProperties\n * @namespace     sugar.js.dom\n * @type      Function\n *\n * Get the css transition properties from an HTMLElement in an object format\n *\n * @param \t\t{HTMLElement} \t\t\t\t\telm  \t\tThe element to get the properties from\n * @return \t\t{Object} \t\t\t\t\t\t\t\t\tThe animation properties\n *\n * @example  \tjs\n * import getTransitionProperties from '@coffeekraken/sugar/js/dom/getTransitionProperties'\n * const props = getTransitionProperties(myCoolHTMLElement);\n * // output format\n * // {\n * // \tproperty : ['all'],\n * // \tduration : [200],\n * // \tdelay : [0],\n * // \ttimingFunction : ['linear'],\n * // \ttotalDuration : 200\n * // }\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\n\nfunction splitIfNeeded(what, separator) {\n  if (what.indexOf(separator) !== -1) {\n    return what.split(separator).map((item) => item.trim());\n  }\n  return [what];\n}\n\nexport default function getTransitionProperties(elm) {\n  // get the transition properties\n  const property = __getStyleProperty(elm, 'transition-property');\n  const duration = __getStyleProperty(elm, 'transition-duration') || 0;\n  const timingFunction = __getStyleProperty(elm, 'transition-timing-function');\n  const delay = __getStyleProperty(elm, 'transition-delay');\n\n  // return the transition object\n  const props = {\n    property: splitIfNeeded(property, ','),\n    duration: splitIfNeeded(duration, ',').map((value) =>\n      __convert(value, 'ms')\n    ),\n    delay: splitIfNeeded(delay, ',').map((value) => __convert(value, 'ms')),\n    timingFunction: splitIfNeeded(timingFunction, ',')\n  };\n  let totalDuration = 0;\n  let i = 0;\n  const delays = [0].concat(props.delay);\n  [0].concat(props.duration).forEach((val) => {\n    if (val + delays[i] > totalDuration) {\n      totalDuration = val + delays[i];\n    }\n    i++;\n  });\n  props.totalDuration = totalDuration;\n  return props;\n}\n","import __getTransitionProperties from \"./getTransitionProperties\";\n\n/**\n * @name      whenTransitionEnd\n * @namespace     sugar.js.dom\n * @type      Function\n *\n * Monitor an HTMLElement to be notified when his transition has ended\n *\n * @param \t\t{HTMLElement} \t\t\t\telm \t\tThe element to monitor\n * @param \t\t{Function} \t\t\t\t\t[cb=null] \tAn optional callback to call when the element transition has ended\n * @return \t\t(Promise) \t\t\t\t\t\t\t\tThe promise that will be resolved when the element transition has ended\n *\n * @example \tjs\n * import whenTransitionEnd from '@coffeekraken/sugar/js/dom/whenTransitionEnd'\n * whenTransitionEnd(myCoolHTMLElement).then((elm) => {\n * \t\t// do something with your element transition has ended...\n * });\n *\n * @author \t\tOlivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function whenTransitionEnd(elm, cb = null) {\n  return new Promise((resolve, reject) => {\n    const transition = __getTransitionProperties(elm);\n    setTimeout(() => {\n      resolve();\n      cb && cb();\n    }, transition.totalDuration);\n  });\n}\n","/**\n * @name        autoCast\n * @namespace       sugar.js.string\n * @type      Function\n *\n * Auto cast the string into the correct variable type\n *\n * @param    {String}    string    The string to auto cast\n * @return    {Mixed}    The casted value\n *\n * @example    js\n * import autoCast from '@coffeekraken/sugar/js/strings/autoCast'\n * autoCast('12') // => 12\n * autoCast('window.HTMLElement') // => HTMLElement\n * autoCast('{\"hello\":\"world\"}') // {hello:'world'}\n *\n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function autoCast(string) {\n  // if the passed string is not a string, return the value\n  if (typeof string !== \"string\") return string;\n\n  // handle the single quotes strings like '\"hello world\"'\n  if (string.substr(0, 1) === \"'\" && string.substr(-1) === \"'\") {\n    return string.substr(1, string.length - 2);\n  }\n\n  // number\n  // before the window check cause window['0'] correspond to something\n  const presumedNumber = parseFloat(string);\n  if (!isNaN(presumedNumber)) {\n    if (presumedNumber.toString() === string) {\n      return presumedNumber;\n    }\n  }\n\n  // avoid getting item from the window object\n  if (window[string]) {\n    return string;\n  }\n\n  // try to eval the passed string\n  // if no exception, mean that it's a valid\n  // js variable type\n  try {\n    const obj = eval(`(${string})`);\n    return obj;\n  } catch (e) {\n    // assume that the string passed is a string\n    return string;\n  }\n}\n","/**\n * @name                                  convert\n * @namespace                             sugar.js.time\n * @type                                  Function\n * \n * This function allows you to convert time like seconds, ms, hours, minutes, etc... from one format to another\n * \n * @param           {String|Number}             from                  The value to start from like \"10s\", \"20ms\", \"2h\", etc...\n * @param           {String}                    [to='ms']             The format you want to get back\n * @return          {Number}                                          The converted value\n * \n * @example           js\n * import convert from '@coffeekraken/sugar/js/time/convert';\n * convert('10s', 'ms'); // => 10000\n * \n * @author    Olivier Bossel <olivier.bossel@gmail.com> (https://olivierbossel.com)\n */\nexport default function convert(from, to = 'ms') {\n\n  // init the fromMs variable\n  let fromMs = from;\n\n  // check if the time is a string to convert it to ms\n  if (typeof from === 'string') {\n\n    const fromNumber = parseFloat(from);\n    const fromLength = fromNumber.toString().length;\n    const fromString = from.slice(fromLength);\n\n    if (fromString === 'ms' || fromString === 'millisecond' || fromString === 'milliseconds') {\n      fromMs = fromNumber;\n    } else if (fromString === 's' || fromString === 'second' || fromString === 'seconds') {\n      fromMs = fromNumber * 1000;\n    } else if (fromString === 'm' || fromString === 'minute' || fromString === 'minutes') {\n      fromMs = fromNumber * 60 * 1000;\n    } else if (fromString === 'h' || fromString === 'hour' || fromString === 'months') {\n      fromMs = fromNumber * 60 * 60 * 1000;\n    } else if (fromString === 'd' || fromString === 'day' || fromString === 'days') {\n      fromMs = fromNumber * 24 * 60 * 60 * 1000;\n    } else if (fromString === 'w' || fromString === 'week' || fromString === 'weeks') {\n      fromMs = fromNumber * 7 * 24 * 60 * 60 * 1000;\n    } else if (fromString === 'month' || fromString === 'months') {\n      fromMs = fromNumber * 31 * 24 * 60 * 60 * 1000;\n    } else if (fromString === 'y' || fromString === 'year' || fromString === 'years') {\n      fromMs = fromNumber * 365 * 24 * 60 * 60 * 1000;\n    }\n  }\n\n\n\n  // convert not the fromMs value to the requested format\n  switch (to) {\n    case 'ms':\n    case 'millisecond':\n    case 'milliseconds':\n      return fromMs;\n      break;\n    case 's':\n    case 'second':\n    case 'seconds':\n      return fromMs / 1000;\n      break;\n    case 'm':\n    case 'minute':\n    case 'minutes':\n      return fromMs / 1000 / 60;\n      break;\n    case 'h':\n    case 'hour':\n    case 'hours':\n      return fromMs / 1000 / 60 / 60;\n      break;\n    case 'd':\n    case 'day':\n    case 'days':\n      return fromMs / 1000 / 60 / 60 / 24;\n      break;\n    case 'w':\n    case 'week':\n    case 'weeks':\n      return fromMs / 1000 / 60 / 60 / 24 / 7;\n      break;\n    case 'month':\n    case 'months':\n      return fromMs / 1000 / 60 / 60 / 24 / 31;\n      break;\n    case 'y':\n    case 'year':\n    case 'years':\n      return fromMs / 1000 / 60 / 60 / 24 / 365;\n      break;\n    default:\n      throw new Error(`You try to convert \"${from}\" to \"${to}\" but this format does not exist... The valids formats are \"ms,s,m,h,d,w,month,y\"...`);\n      break;\n  }\n\n}"],"sourceRoot":""}